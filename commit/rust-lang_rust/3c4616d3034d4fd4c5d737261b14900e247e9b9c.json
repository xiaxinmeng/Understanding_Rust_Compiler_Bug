{"sha": "3c4616d3034d4fd4c5d737261b14900e247e9b9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjNDYxNmQzMDM0ZDRmZDRjNWQ3MzcyNjFiMTQ5MDBlMjQ3ZTliOWM=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-03-16T10:51:57Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-03-16T10:51:57Z"}, "message": "cargo fmt", "tree": {"sha": "66d11c8b95cc853dbf1eeea11191e9cb58424014", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66d11c8b95cc853dbf1eeea11191e9cb58424014"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c4616d3034d4fd4c5d737261b14900e247e9b9c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAlyM1U0ACgkQaTCGhp1Q\nZjdDZhAAjiubHLILPRezm4JDoA/leGXifI0u+MwajlZoTbKyHqwwnLxQqlUKg2jt\nWm9H0k/NFMg/0DZ/TR2nB8tF5ZnuEwkx8A9OoZYiYzabXhM/Tnf24NNHKsRRR8LI\nF3chFE78+ePrQrPL01nKMVqYQb5TPllNmRb03g7NhkS4LJisf6g8Vm6HzsY4Q3I+\nii2Lq42di0ikOq9W+AmOij4a/DWZex7qyjoMyfwnm4E7g4OjG2VslUOash81pN56\nD4PQAePcFDDxhoztM5PImaga7EDZI5fzmR0qDUQWjdT5ZgL3HVIdQIhPsGWcTKy9\nU5y6IM0MUiG6nuMz8P8ePJGcujgnyNC6ZCCHTqH10ZDFo4O3ey7tKH0wZKfqk0/2\n+lq++PojUMY0PNPY89QWSPUJ8oaN3eRaXMLU14e5mMhqQq08kKv+MsrjVdI09p/N\n5Pt1isgFgDncJ6NyBjcPen6MRdFK0Mnp9oRRgGcOzqwe0bZdmK2gKeFyLYqzc+fY\ng+fBOSmNQ3dp1+ATFR2EQZSdiowE7CmheJC4EF7fsYMKMwC9DnabmqBzjbCKuW0X\nXYE7P31xnxUnEVdIcmcw+3+7HUGa/sn9vbh8VmEr5YXkamq/dFZntTvznixIOz53\nIrOIK8wm345pVVaLDN0jCvyGMi0jvkgyyUja4r/zUt9x57SiV3A=\n=ct+s\n-----END PGP SIGNATURE-----", "payload": "tree 66d11c8b95cc853dbf1eeea11191e9cb58424014\nparent 254fad95de3aeed62d8d7c44398112c8f5ace25d\nauthor flip1995 <hello@philkrones.com> 1552733517 +0100\ncommitter flip1995 <hello@philkrones.com> 1552733517 +0100\n\ncargo fmt\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c4616d3034d4fd4c5d737261b14900e247e9b9c", "html_url": "https://github.com/rust-lang/rust/commit/3c4616d3034d4fd4c5d737261b14900e247e9b9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c4616d3034d4fd4c5d737261b14900e247e9b9c/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "254fad95de3aeed62d8d7c44398112c8f5ace25d", "url": "https://api.github.com/repos/rust-lang/rust/commits/254fad95de3aeed62d8d7c44398112c8f5ace25d", "html_url": "https://github.com/rust-lang/rust/commit/254fad95de3aeed62d8d7c44398112c8f5ace25d"}], "stats": {"total": 44, "additions": 19, "deletions": 25}, "files": [{"sha": "2e50222c8a9f6e3f7b053b2da46064c00d05fb75", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c4616d3034d4fd4c5d737261b14900e247e9b9c/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c4616d3034d4fd4c5d737261b14900e247e9b9c/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=3c4616d3034d4fd4c5d737261b14900e247e9b9c", "patch": "@@ -10,9 +10,9 @@ use rustc::hir::intravisit::{walk_body, walk_expr, walk_ty, FnKind, NestedVisito\n use rustc::hir::*;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::ty::layout::LayoutOf;\n+use rustc::ty::print::Printer;\n use rustc::ty::{self, InferTy, Ty, TyCtxt, TypeckTables};\n use rustc::{declare_tool_lint, lint_array};\n-use rustc::ty::print::Printer;\n use rustc_errors::Applicability;\n use rustc_target::spec::abi::Abi;\n use rustc_typeck::hir_ty_to_ty;"}, {"sha": "ac901ab062f326404a9f72f21b6affdceea03346", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c4616d3034d4fd4c5d737261b14900e247e9b9c/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c4616d3034d4fd4c5d737261b14900e247e9b9c/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=3c4616d3034d4fd4c5d737261b14900e247e9b9c", "patch": "@@ -4,8 +4,8 @@ use rustc::hir::intravisit::{walk_item, walk_path, walk_ty, NestedVisitorMap, Vi\n use rustc::hir::*;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::ty;\n-use rustc::{declare_tool_lint, lint_array};\n use rustc::ty::DefIdTree;\n+use rustc::{declare_tool_lint, lint_array};\n use rustc_errors::Applicability;\n use syntax_pos::symbol::keywords::SelfUpper;\n "}, {"sha": "aef53ea626b242221a5bd947903e6e012db415fe", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 17, "deletions": 23, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3c4616d3034d4fd4c5d737261b14900e247e9b9c/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c4616d3034d4fd4c5d737261b14900e247e9b9c/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=3c4616d3034d4fd4c5d737261b14900e247e9b9c", "patch": "@@ -24,10 +24,10 @@ use if_chain::if_chain;\n use matches::matches;\n use rustc::hir;\n use rustc::hir::def::Def;\n-use rustc::hir::map::DisambiguatedDefPathData;\n use rustc::hir::def_id::CrateNum;\n use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n+use rustc::hir::map::DisambiguatedDefPathData;\n use rustc::hir::Node;\n use rustc::hir::*;\n use rustc::lint::{LateContext, Level, Lint, LintContext};\n@@ -43,7 +43,7 @@ use rustc_errors::Applicability;\n use syntax::ast::{self, LitKind};\n use syntax::attr;\n use syntax::source_map::{Span, DUMMY_SP};\n-use syntax::symbol::{keywords, Symbol, LocalInternedString};\n+use syntax::symbol::{keywords, LocalInternedString, Symbol};\n \n use crate::reexport::*;\n \n@@ -116,39 +116,30 @@ impl<'tcx> Printer<'tcx, 'tcx> for AbsolutePathPrinter<'_, 'tcx> {\n         self.tcx\n     }\n \n-    fn print_region(\n-        self,\n-        _region: ty::Region<'_>,\n-        ) -> Result<Self::Region, Self::Error> {\n+    fn print_region(self, _region: ty::Region<'_>) -> Result<Self::Region, Self::Error> {\n         Ok(())\n     }\n \n-    fn print_type(\n-        self,\n-        _ty: Ty<'tcx>,\n-        ) -> Result<Self::Type, Self::Error> {\n+    fn print_type(self, _ty: Ty<'tcx>) -> Result<Self::Type, Self::Error> {\n         Ok(())\n     }\n \n     fn print_dyn_existential(\n         self,\n         _predicates: &'tcx ty::List<ty::ExistentialPredicate<'tcx>>,\n-        ) -> Result<Self::DynExistential, Self::Error> {\n+    ) -> Result<Self::DynExistential, Self::Error> {\n         Ok(())\n     }\n \n-    fn path_crate(\n-        self,\n-        cnum: CrateNum,\n-        ) -> Result<Self::Path, Self::Error> {\n+    fn path_crate(self, cnum: CrateNum) -> Result<Self::Path, Self::Error> {\n         Ok(vec![self.tcx.original_crate_name(cnum).as_str()])\n     }\n \n     fn path_qualified(\n         self,\n         self_ty: Ty<'tcx>,\n         trait_ref: Option<ty::TraitRef<'tcx>>,\n-        ) -> Result<Self::Path, Self::Error> {\n+    ) -> Result<Self::Path, Self::Error> {\n         // This shouldn't ever be needed, but just in case:\n         Ok(vec![match trait_ref {\n             Some(trait_ref) => Symbol::intern(&format!(\"{:?}\", trait_ref)).as_str(),\n@@ -162,14 +153,12 @@ impl<'tcx> Printer<'tcx, 'tcx> for AbsolutePathPrinter<'_, 'tcx> {\n         _disambiguated_data: &DisambiguatedDefPathData,\n         self_ty: Ty<'tcx>,\n         trait_ref: Option<ty::TraitRef<'tcx>>,\n-        ) -> Result<Self::Path, Self::Error> {\n+    ) -> Result<Self::Path, Self::Error> {\n         let mut path = print_prefix(self)?;\n \n         // This shouldn't ever be needed, but just in case:\n         path.push(match trait_ref {\n-            Some(trait_ref) => {\n-                Symbol::intern(&format!(\"<impl {} for {}>\", trait_ref, self_ty)).as_str()\n-            }\n+            Some(trait_ref) => Symbol::intern(&format!(\"<impl {} for {}>\", trait_ref, self_ty)).as_str(),\n             None => Symbol::intern(&format!(\"<impl {}>\", self_ty)).as_str(),\n         });\n \n@@ -180,7 +169,7 @@ impl<'tcx> Printer<'tcx, 'tcx> for AbsolutePathPrinter<'_, 'tcx> {\n         self,\n         print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n         disambiguated_data: &DisambiguatedDefPathData,\n-        ) -> Result<Self::Path, Self::Error> {\n+    ) -> Result<Self::Path, Self::Error> {\n         let mut path = print_prefix(self)?;\n         path.push(disambiguated_data.data.as_interned_str().as_str());\n         Ok(path)\n@@ -190,7 +179,7 @@ impl<'tcx> Printer<'tcx, 'tcx> for AbsolutePathPrinter<'_, 'tcx> {\n         self,\n         print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n         _args: &[Kind<'tcx>],\n-        ) -> Result<Self::Path, Self::Error> {\n+    ) -> Result<Self::Path, Self::Error> {\n         print_prefix(self)\n     }\n }\n@@ -219,7 +208,12 @@ pub fn match_def_path<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId, path\n /// };\n /// ```\n pub fn get_def_path<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Vec<&'static str> {\n-    AbsolutePathPrinter { tcx }.print_def_path(def_id, &[]).unwrap().iter().map(LocalInternedString::get).collect()\n+    AbsolutePathPrinter { tcx }\n+        .print_def_path(def_id, &[])\n+        .unwrap()\n+        .iter()\n+        .map(LocalInternedString::get)\n+        .collect()\n }\n \n /// Checks if type is struct, enum or union type with the given def path."}]}