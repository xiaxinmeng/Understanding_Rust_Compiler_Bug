{"sha": "dffe188991325b4e803fdd0da7c1563ce0fa27f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmZmUxODg5OTEzMjViNGU4MDNmZGQwZGE3YzE1NjNjZTBmYTI3ZjQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-22T01:10:45Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-22T01:11:43Z"}, "message": "Install new pub/priv/export rules as defaults, old rules accessible under #[legacy_exports];", "tree": {"sha": "e8f65929b804a38550dc9fdcf24021e6a7920304", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8f65929b804a38550dc9fdcf24021e6a7920304"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dffe188991325b4e803fdd0da7c1563ce0fa27f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dffe188991325b4e803fdd0da7c1563ce0fa27f4", "html_url": "https://github.com/rust-lang/rust/commit/dffe188991325b4e803fdd0da7c1563ce0fa27f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dffe188991325b4e803fdd0da7c1563ce0fa27f4/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60443d48881bfbc7a305e807390e74b327f100b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/60443d48881bfbc7a305e807390e74b327f100b8", "html_url": "https://github.com/rust-lang/rust/commit/60443d48881bfbc7a305e807390e74b327f100b8"}], "stats": {"total": 1294, "additions": 1174, "deletions": 120}, "files": [{"sha": "fa9e160f73d2a06af69f0c59de9a0118211d3cb5", "filename": "doc/rust.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -875,7 +875,8 @@ declaration replaces the default export with the export specified.\n An example of an export:\n \n ~~~~~~~~\n-mod foo {\n+pub mod foo {\n+\t#[legacy_exports];\n     export primary;\n \n     fn primary() {"}, {"sha": "42c5908b04974527379b651384968f713051acbf", "filename": "doc/tutorial-ffi.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/doc%2Ftutorial-ffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/doc%2Ftutorial-ffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-ffi.md?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -123,7 +123,9 @@ null pointers.\n The `sha1` function is the most obscure part of the program.\n \n ~~~~\n-# mod crypto { fn SHA1(src: *u8, sz: uint, out: *u8) -> *u8 { out } }\n+# pub mod crypto {\n+#   pub fn SHA1(src: *u8, sz: uint, out: *u8) -> *u8 { out }\n+# }\n # fn as_hex(data: ~[u8]) -> ~str { ~\"hi\" }\n fn sha1(data: ~str) -> ~str {\n     unsafe {\n@@ -166,7 +168,9 @@ Rust's safety mechanisms.\n Let's look at our `sha1` function again.\n \n ~~~~\n-# mod crypto { fn SHA1(src: *u8, sz: uint, out: *u8) -> *u8 { out } }\n+# pub mod crypto {\n+#     pub fn SHA1(src: *u8, sz: uint, out: *u8) -> *u8 { out }\n+# }\n # fn as_hex(data: ~[u8]) -> ~str { ~\"hi\" }\n # fn x(data: ~str) -> ~str {\n # unsafe {"}, {"sha": "6e89f661cf3145b53b4fe9aaf51c8a6c516e1a5a", "filename": "doc/tutorial.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1820,6 +1820,7 @@ explicitly import it, you must refer to it by its long name,\n `farm::chicken`.\n \n ~~~~\n+#[legacy_exports]\n mod farm {\n     fn chicken() -> ~str { ~\"cluck cluck\" }\n     fn cow() -> ~str { ~\"mooo\" }\n@@ -2004,6 +2005,7 @@ Rust uses three different namespaces: one for modules, one for types,\n and one for values. This means that this code is valid:\n \n ~~~~\n+#[legacy_exports]\n mod buffalo {\n     type buffalo = int;\n     fn buffalo<buffalo>(+buffalo: buffalo) -> buffalo { buffalo }"}, {"sha": "79803ffa5297c34e272003f2de8580e377e03796", "filename": "src/cargo/cargo.rc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Fcargo%2Fcargo.rc", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Fcargo%2Fcargo.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rc?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -17,6 +17,7 @@\n #[crate_type = \"bin\"];\n \n #[no_core];\n+#[legacy_exports];\n \n #[allow(vecs_implicitly_copyable,\n         non_implicitly_copyable_typarams)];\n@@ -29,4 +30,5 @@ extern mod syntax(vers = \"0.4\");\n \n use core::*;\n \n+#[legacy_exports]\n mod pgp;"}, {"sha": "d17ebeda6a72bd298ddccb1ba8d2052b035e1188", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,5 +1,7 @@\n // cargo.rs - Rust package manager\n \n+#[legacy_exports];\n+\n use syntax::{ast, codemap, parse, visit, attr};\n use syntax::diagnostic::span_handler;\n use codemap::span;"}, {"sha": "ce11245dba54001b80c0f6370384bdf4c8089c65", "filename": "src/compiletest/compiletest.rc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Fcompiletest%2Fcompiletest.rc", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Fcompiletest%2Fcompiletest.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rc?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,6 +1,7 @@\n #[crate_type = \"bin\"];\n \n #[no_core];\n+#[legacy_exports];\n \n #[allow(vecs_implicitly_copyable)];\n #[allow(non_camel_case_types)];\n@@ -10,11 +11,17 @@ extern mod std(vers = \"0.4\");\n \n use core::*;\n \n+#[legacy_exports]\n mod procsrv;\n+#[legacy_exports]\n mod util;\n+#[legacy_exports]\n mod header;\n+#[legacy_exports]\n mod runtest;\n+#[legacy_exports]\n mod common;\n+#[legacy_exports]\n mod errors;\n \n // Local Variables:"}, {"sha": "073335fbc728cda85b54630ebefdf83e8d19434c", "filename": "src/fuzzer/fuzzer.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ffuzzer%2Ffuzzer.rc", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ffuzzer%2Ffuzzer.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rc?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -5,6 +5,7 @@\n #[no_core];\n \n #[legacy_modes];\n+#[legacy_exports];\n \n #[allow(vecs_implicitly_copyable)];\n #[allow(non_camel_case_types)];"}, {"sha": "987e79a2b80a2bbf1dd62f84d00a8253436a945e", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_exports];\n+\n use io::WriterUtil;\n \n use syntax::{ast, ast_util, fold, visit, codemap};"}, {"sha": "7864983bde26d68fc851f4ec689620dcf3332b80", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -15,13 +15,15 @@ export traits;\n \n #[abi = \"cdecl\"]\n extern mod rustrt {\n+    #[legacy_exports];\n     fn vec_reserve_shared_actual(++t: *sys::TypeDesc,\n                                  ++v: **vec::raw::VecRepr,\n                                  ++n: libc::size_t);\n }\n \n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n+    #[legacy_exports];\n     fn move_val_init<T>(&dst: T, -src: T);\n }\n \n@@ -135,6 +137,7 @@ pure fn from_elem<T: Copy>(n_elts: uint, t: T) -> @[T] {\n \n #[cfg(notest)]\n mod traits {\n+    #[legacy_exports];\n     #[cfg(stage0)]\n     impl<T: Copy> @[T]: Add<&[const T],@[T]> {\n         #[inline(always)]\n@@ -153,9 +156,11 @@ mod traits {\n }\n \n #[cfg(test)]\n-mod traits {}\n+mod traits {\n+    #[legacy_exports];}\n \n mod raw {\n+    #[legacy_exports];\n     type VecRepr = vec::raw::VecRepr;\n     type SliceRepr = vec::raw::SliceRepr;\n "}, {"sha": "f7db82864e66e165a9202df664ee368de70ab39f", "filename": "src/libcore/box.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbox.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -10,6 +10,7 @@ use intrinsic::TyDesc;\n export ptr_eq, raw;\n \n mod raw {\n+    #[legacy_exports];\n \n     struct BoxHeaderRepr {\n         ref_count: uint,"}, {"sha": "93467404868f7b37a9f94e036b852a9a4864cb36", "filename": "src/libcore/cast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcast.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -8,6 +8,7 @@ export copy_lifetime, copy_lifetime_vec;\n \n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n+    #[legacy_exports];\n     fn forget<T>(-x: T);\n     fn reinterpret_cast<T, U>(e: T) -> U;\n }\n@@ -97,6 +98,7 @@ unsafe fn copy_lifetime_vec<S,T>(_ptr: &a/[S], ptr: &T) -> &a/T {\n \n #[cfg(test)]\n mod tests {\n+    #[legacy_exports];\n \n     #[test]\n     fn test_reinterpret_cast() {"}, {"sha": "64276df6dfeb7a3bdd92ddc3272bcbc1d783d96d", "filename": "src/libcore/cleanup.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcleanup.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -121,6 +121,7 @@ pub unsafe fn annihilate() {\n \n /// Bindings to the runtime\n extern mod rustrt {\n+    #[legacy_exports];\n     #[rust_stack]\n     /*priv*/ fn rust_get_task() -> *c_void;\n }"}, {"sha": "c04d4915ba20eebfa186ac63d217298b0891d791", "filename": "src/libcore/cmath.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmath.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -23,6 +23,7 @@ use libc::c_double;\n #[link_name = \"m\"]\n #[abi = \"cdecl\"]\n extern mod c_double {\n+    #[legacy_exports];\n \n     // Alpabetically sorted by link_name\n \n@@ -98,6 +99,7 @@ extern mod c_double {\n #[link_name = \"m\"]\n #[abi = \"cdecl\"]\n extern mod c_float {\n+    #[legacy_exports];\n \n     // Alpabetically sorted by link_name\n \n@@ -166,6 +168,7 @@ extern mod c_float {\n // FIXME obtain machine float/math constants automatically (Issue #1986)\n \n mod c_float_targ_consts {\n+    #[legacy_exports];\n     const radix: uint = 2u;\n     const mantissa_digits: uint = 24u;\n     const digits: uint = 6u;\n@@ -181,6 +184,7 @@ mod c_float_targ_consts {\n }\n \n mod c_double_targ_consts {\n+    #[legacy_exports];\n     const radix: uint = 2u;\n     const mantissa_digits: uint = 53u;\n     const digits: uint = 15u;\n@@ -200,6 +204,7 @@ mod c_double_targ_consts {\n FIXME use these once they can be parsed (see Issue #1433)\n \n mod c_float_math_consts {\n+    #[legacy_exports];\n     const pi: c_float = 0x1.921fb6p+1_f32;\n     const div_1_pi: c_float = 0x1.45f306p-2_f32;\n     const div_2_pi: c_float = 0x1.45f306p-1_f32;\n@@ -216,6 +221,7 @@ mod c_float_math_consts {\n }\n \n mod c_double_math_consts {\n+    #[legacy_exports];\n     const pi: c_double = 0x1.921fb54442d18p+1_f64;\n     const div_1_pi: c_double = 0x1.45f306dc9c883p-2_f64;\n     const div_2_pi: c_double = 0x1.45f306dc9c883p-1_f64;\n@@ -232,6 +238,7 @@ mod c_double_math_consts {\n }\n \n mod c_float_targ_consts {\n+    #[legacy_exports];\n     const radix: uint = 2u;\n     const mantissa_digits: uint = 24u;\n     const digits: uint = 6u;\n@@ -245,6 +252,7 @@ mod c_float_targ_consts {\n }\n \n mod c_double_targ_consts {\n+    #[legacy_exports];\n     const radix: uint = 2u;\n     const mantissa_digits: uint = 53u;\n     const digits: uint = 15u;"}, {"sha": "362062e945dd0a0943082810bc0e75207dad87ec", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -24,6 +24,7 @@ export Eq;\n // Awful hack to work around duplicate lang items in core test.\n #[cfg(notest)]\n mod nounittest {\n+    #[legacy_exports];\n     /**\n      * Trait for values that can be compared for a sort-order.\n      *\n@@ -75,10 +76,12 @@ mod nounittest {\n }\n \n #[cfg(test)]\n-mod nounittest {}\n+mod nounittest {\n+    #[legacy_exports];}\n \n #[cfg(test)]\n mod unittest {\n+    #[legacy_exports];\n     #[cfg(stage0)]\n     trait Ord {\n         pure fn lt(&&other: self) -> bool;\n@@ -111,7 +114,8 @@ mod unittest {\n }\n \n #[cfg(notest)]\n-mod unittest {}\n+mod unittest {\n+    #[legacy_exports];}\n \n #[cfg(stage0)]\n pure fn lt<T: Ord>(v1: &T, v2: &T) -> bool {"}, {"sha": "b99eec8bb5b33537d39a4ba3467de472542256a9", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -275,6 +275,7 @@ type port_id = int;\n \n #[abi = \"cdecl\"]\n extern mod rustrt {\n+    #[legacy_exports];\n     fn rust_port_id_send(target_port: port_id, data: *()) -> libc::uintptr_t;\n \n     fn new_port(unit_sz: libc::size_t) -> *rust_port;\n@@ -297,6 +298,7 @@ extern mod rustrt {\n \n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n+    #[legacy_exports];\n     fn init<T>() -> T;\n }\n "}, {"sha": "d642410686858d9b86149778e7cdf224b521c45d", "filename": "src/libcore/core.rc", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -85,43 +85,54 @@ export private;\n /// Operations and constants for `int`\n #[path = \"int-template\"]\n mod int {\n+    #[legacy_exports];\n     use inst::{ pow };\n     export pow;\n     #[path = \"int.rs\"]\n+    #[legacy_exports]\n     mod inst;\n }\n \n /// Operations and constants for `i8`\n #[path = \"int-template\"]\n mod i8 {\n+    #[legacy_exports];\n     #[path = \"i8.rs\"]\n+    #[legacy_exports]\n     mod inst;\n }\n \n /// Operations and constants for `i16`\n #[path = \"int-template\"]\n mod i16 {\n+    #[legacy_exports];\n     #[path = \"i16.rs\"]\n+    #[legacy_exports]\n     mod inst;\n }\n \n /// Operations and constants for `i32`\n #[path = \"int-template\"]\n mod i32 {\n+    #[legacy_exports];\n     #[path = \"i32.rs\"]\n+    #[legacy_exports]\n     mod inst;\n }\n \n /// Operations and constants for `i64`\n #[path = \"int-template\"]\n mod i64 {\n+    #[legacy_exports];\n     #[path = \"i64.rs\"]\n+    #[legacy_exports]\n     mod inst;\n }\n \n /// Operations and constants for `uint`\n #[path = \"uint-template\"]\n mod uint {\n+    #[legacy_exports];\n     use inst::{\n         div_ceil, div_round, div_floor, iterate,\n         next_power_of_two\n@@ -130,135 +141,208 @@ mod uint {\n     next_power_of_two;\n \n     #[path = \"uint.rs\"]\n+    #[legacy_exports]\n     mod inst;\n }\n \n /// Operations and constants for `u8`\n #[path = \"uint-template\"]\n mod u8 {\n+    #[legacy_exports];\n     use inst::is_ascii;\n     export is_ascii;\n \n     #[path = \"u8.rs\"]\n+    #[legacy_exports]\n     mod inst;\n }\n \n /// Operations and constants for `u16`\n #[path = \"uint-template\"]\n mod u16 {\n+    #[legacy_exports];\n     #[path = \"u16.rs\"]\n+    #[legacy_exports]\n     mod inst;\n }\n \n /// Operations and constants for `u32`\n #[path = \"uint-template\"]\n mod u32 {\n+    #[legacy_exports];\n     #[path = \"u32.rs\"]\n+    #[legacy_exports]\n     mod inst;\n }\n \n /// Operations and constants for `u64`\n #[path = \"uint-template\"]\n mod u64 {\n+    #[legacy_exports];\n     #[path = \"u64.rs\"]\n+    #[legacy_exports]\n     mod inst;\n }\n \n \n+#[legacy_exports]\n mod box;\n+#[legacy_exports]\n mod char;\n+#[legacy_exports]\n mod float;\n+#[legacy_exports]\n mod f32;\n+#[legacy_exports]\n mod f64;\n+#[legacy_exports]\n mod str;\n+#[legacy_exports]\n mod ptr;\n+#[legacy_exports]\n mod vec;\n+#[legacy_exports]\n mod at_vec;\n+#[legacy_exports]\n mod bool;\n+#[legacy_exports]\n mod tuple;\n+#[legacy_exports]\n mod unit;\n+#[legacy_exports]\n mod uniq;\n \n // Ubiquitous-utility-type modules\n \n #[cfg(notest)]\n+#[legacy_exports]\n mod ops;\n+#[legacy_exports]\n mod cmp;\n+#[legacy_exports]\n mod num;\n+#[legacy_exports]\n mod hash;\n+#[legacy_exports]\n mod either;\n+#[legacy_exports]\n mod iter;\n+#[legacy_exports]\n mod logging;\n+#[legacy_exports]\n mod option;\n #[path=\"iter-trait\"]\n mod option_iter {\n+    #[legacy_exports];\n     #[path = \"option.rs\"]\n+    #[legacy_exports]\n     mod inst;\n }\n+#[legacy_exports]\n mod result;\n+#[legacy_exports]\n mod to_str;\n+#[legacy_exports]\n mod to_bytes;\n+#[legacy_exports]\n mod from_str;\n+#[legacy_exports]\n mod util;\n \n // Data structure modules\n \n+#[legacy_exports]\n mod dvec;\n #[path=\"iter-trait\"]\n mod dvec_iter {\n+    #[legacy_exports];\n     #[path = \"dvec.rs\"]\n+    #[legacy_exports]\n     mod inst;\n }\n+#[legacy_exports]\n mod dlist;\n #[path=\"iter-trait\"]\n mod dlist_iter {\n+    #[legacy_exports];\n     #[path =\"dlist.rs\"]\n+    #[legacy_exports]\n     mod inst;\n }\n+#[legacy_exports]\n mod send_map;\n \n // Concurrency\n+#[legacy_exports]\n mod comm;\n+#[legacy_exports]\n mod task {\n+    #[legacy_exports];\n+    #[legacy_exports]\n     mod local_data;\n+    #[legacy_exports]\n     mod local_data_priv;\n+    #[legacy_exports]\n     mod spawn;\n+    #[legacy_exports]\n     mod rt;\n }\n+#[legacy_exports]\n mod future;\n+#[legacy_exports]\n mod pipes;\n \n // Runtime and language-primitive support\n \n+#[legacy_exports]\n mod gc;\n+#[legacy_exports]\n mod io;\n+#[legacy_exports]\n mod libc;\n+#[legacy_exports]\n mod os;\n+#[legacy_exports]\n mod path;\n+#[legacy_exports]\n mod rand;\n+#[legacy_exports]\n mod run;\n+#[legacy_exports]\n mod sys;\n+#[legacy_exports]\n mod cast;\n+#[legacy_exports]\n mod mutable;\n+#[legacy_exports]\n mod flate;\n+#[legacy_exports]\n mod repr;\n+#[legacy_exports]\n mod cleanup;\n+#[legacy_exports]\n mod reflect;\n \n // Modules supporting compiler-generated code\n // Exported but not part of the public interface\n \n+#[legacy_exports]\n mod extfmt;\n // The test harness links against core, so don't include runtime in tests.\n #[cfg(notest)]\n+#[legacy_exports]\n mod rt;\n \n \n // For internal use, not exported\n \n+#[legacy_exports]\n mod unicode;\n+#[legacy_exports]\n mod private;\n+#[legacy_exports]\n mod cmath;\n+#[legacy_exports]\n mod stackwalk;\n \n // Local Variables:"}, {"sha": "8806131c9fb253057f7e3d45b647cdb4e222b6e5", "filename": "src/libcore/core.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -2,6 +2,8 @@\n \n // Export various ubiquitous types, constructors, methods.\n \n+#[legacy_exports];\n+\n use option::{Some, None};\n use Option = option::Option;\n use result::{Result, Ok, Err};\n@@ -84,6 +86,7 @@ const debug : u32 = 3_u32;\n // can be resolved within libcore.\n #[doc(hidden)] // FIXME #3538\n mod core {\n+    #[legacy_exports];\n     const error : u32 = 0_u32;\n     const warn : u32 = 1_u32;\n     const info : u32 = 2_u32;\n@@ -93,6 +96,7 @@ mod core {\n // Similar to above. Some magic to make core testable.\n #[cfg(test)]\n mod std {\n+    #[legacy_exports];\n     extern mod std(vers = \"0.4\");\n     use std::test;\n }"}, {"sha": "5383eaa0d05eb515214e181c185ded189bddfb80", "filename": "src/libcore/dlist.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdlist.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -452,6 +452,7 @@ impl<T: Copy> DList<T> {\n \n #[cfg(test)]\n mod tests {\n+    #[legacy_exports];\n     #[test]\n     fn test_dlist_concat() {\n         let a = from_vec(~[1,2]);"}, {"sha": "244fc637aa2a2c2ab40979dcb21a1ce6a032df67", "filename": "src/libcore/extfmt.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fextfmt.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -42,6 +42,7 @@ use option::{Some, None};\n \n // Functions used by the fmt extension at compile time\n mod ct {\n+    #[legacy_exports];\n     enum Signedness { Signed, Unsigned, }\n     enum Caseness { CaseUpper, CaseLower, }\n     enum Ty {\n@@ -273,6 +274,7 @@ mod ct {\n // conditions can be evaluated at compile-time. For now though it's cleaner to\n // implement it 0this way, I think.\n mod rt {\n+    #[legacy_exports];\n     const flag_none : u32 = 0u32;\n     const flag_left_justify   : u32 = 0b00000000000000000000000000000001u32;\n     const flag_left_zero_pad  : u32 = 0b00000000000000000000000000000010u32;\n@@ -479,6 +481,7 @@ mod rt {\n \n // XXX remove after snapshots\n mod rt2 {\n+    #[legacy_exports];\n     const flag_none : u32 = 0u32;\n     const flag_left_justify   : u32 = 0b00000000000000000000000000000001u32;\n     const flag_left_zero_pad  : u32 = 0b00000000000000000000000000000010u32;\n@@ -685,6 +688,7 @@ mod rt2 {\n \n #[cfg(test)]\n mod test {\n+    #[legacy_exports];\n     #[test]\n     fn fmt_slice() {\n         let s = \"abc\";"}, {"sha": "a8ca15f6afc5f8d70c6571ff538cb921622fa8a1", "filename": "src/libcore/f32.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff32.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -105,6 +105,7 @@ pure fn is_finite(x: f32) -> bool {\n \n /* Module: consts */\n mod consts {\n+    #[legacy_exports];\n \n     // FIXME (requires Issue #1433 to fix): replace with mathematical\n     // constants from cmath."}, {"sha": "0be0a0591323a612d90855f6e8f48446229ae89e", "filename": "src/libcore/f64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff64.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -132,6 +132,7 @@ pure fn is_finite(x: f64) -> bool {\n \n /* Module: consts */\n mod consts {\n+    #[legacy_exports];\n \n     // FIXME (requires Issue #1433 to fix): replace with mathematical\n     // constants from cmath."}, {"sha": "b75894e0c1b7ebb76515fa87ea0ea501fc700238", "filename": "src/libcore/flate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fflate.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -11,6 +11,7 @@ Simple compression\n use libc::{c_void, size_t, c_int};\n \n extern mod rustrt {\n+    #[legacy_exports];\n \n     fn tdefl_compress_mem_to_heap(psrc_buf: *const c_void,\n                                   src_buf_len: size_t,"}, {"sha": "df28426dc3a6a4419679e5a204c09edd32e22631", "filename": "src/libcore/float.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -52,6 +52,7 @@ const neg_infinity: float = -1.0/0.0;\n \n /* Module: consts */\n mod consts {\n+    #[legacy_exports];\n \n     // FIXME (requires Issue #1433 to fix): replace with mathematical\n     // constants from cmath."}, {"sha": "35b3ffe040c59f47ac47be8f3b43ac8d6809ead3", "filename": "src/libcore/future.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -180,6 +180,7 @@ proto! future_pipe (\n \n #[allow(non_implicitly_copyable_typarams)]\n mod test {\n+    #[legacy_exports];\n     #[test]\n     fn test_from_value() {\n         let f = from_value(~\"snail\");"}, {"sha": "959e13ac7e1034cd3c2894d462aa2ab0344654c4", "filename": "src/libcore/gc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fgc.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -47,6 +47,7 @@ struct StackSegment {\n }\n \n extern mod rustrt {\n+    #[legacy_exports];\n     fn rust_annihilate_box(ptr: *Word);\n \n     #[rust_stack]"}, {"sha": "4ce9808dd945582a7f4c4d3b0cc5835937874ca7", "filename": "src/libcore/io.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -17,6 +17,7 @@ type fd_t = c_int;\n \n #[abi = \"cdecl\"]\n extern mod rustrt {\n+    #[legacy_exports];\n     fn rust_get_stdin() -> *libc::FILE;\n     fn rust_get_stdout() -> *libc::FILE;\n     fn rust_get_stderr() -> *libc::FILE;\n@@ -781,6 +782,7 @@ fn read_whole_file(file: &Path) -> Result<~[u8], ~str> {\n // fsync related\n \n mod fsync {\n+    #[legacy_exports];\n \n     enum Level {\n         // whatever fsync does on that platform\n@@ -863,6 +865,7 @@ mod fsync {\n \n #[cfg(test)]\n mod tests {\n+    #[legacy_exports];\n \n     #[test]\n     fn test_simple() {"}, {"sha": "f99bc45546613b5c6ae7e4f1e34903dca1a16814", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 167, "deletions": 41, "changes": 208, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -131,18 +131,22 @@ export access, chdir, close, dup, dup2, execv, execve, execvp, getcwd,\n \n \n mod types {\n+    #[legacy_exports];\n \n     // Types tend to vary *per architecture* so we pull their definitions out\n     // into this module.\n \n     // Standard types that are opaque or common, so are not per-target.\n     mod common {\n+        #[legacy_exports];\n         mod c95 {\n+            #[legacy_exports];\n             enum c_void {}\n             enum FILE {}\n             enum fpos_t {}\n         }\n         mod c99 {\n+            #[legacy_exports];\n             type int8_t = i8;\n             type int16_t = i16;\n             type int32_t = i32;\n@@ -153,21 +157,28 @@ mod types {\n             type uint64_t = u64;\n         }\n         mod posix88 {\n+            #[legacy_exports];\n             enum DIR {}\n             enum dirent {}\n         }\n-        mod posix01 { }\n-        mod posix08 { }\n-        mod bsd44 { }\n+        mod posix01 {\n+            #[legacy_exports]; }\n+        mod posix08 {\n+            #[legacy_exports]; }\n+        mod bsd44 {\n+            #[legacy_exports]; }\n     }\n \n     // Standard types that are scalar but vary by OS and arch.\n \n     #[cfg(target_os = \"linux\")]\n     mod os {\n+        #[legacy_exports];\n         #[cfg(target_arch = \"x86\")]\n         mod arch {\n+            #[legacy_exports];\n             mod c95 {\n+                #[legacy_exports];\n                 type c_char = i8;\n                 type c_schar = i8;\n                 type c_uchar = u8;\n@@ -186,12 +197,14 @@ mod types {\n                 type wchar_t = i32;\n             }\n             mod c99 {\n+                #[legacy_exports];\n                 type c_longlong = i64;\n                 type c_ulonglong = u64;\n                 type intptr_t = int;\n                 type uintptr_t = uint;\n             }\n             mod posix88 {\n+                #[legacy_exports];\n                 type off_t = i32;\n                 type dev_t = u64;\n                 type ino_t = u32;\n@@ -202,16 +215,22 @@ mod types {\n                 type mode_t = u32;\n                 type ssize_t = i32;\n             }\n-            mod posix01 { }\n-            mod posix08 { }\n-            mod bsd44 { }\n+            mod posix01 {\n+                #[legacy_exports]; }\n+            mod posix08 {\n+                #[legacy_exports]; }\n+            mod bsd44 {\n+                #[legacy_exports]; }\n             mod extra {\n+                #[legacy_exports];\n             }\n         }\n \n         #[cfg(target_arch = \"x86_64\")]\n         mod arch {\n+            #[legacy_exports];\n             mod c95 {\n+                #[legacy_exports];\n                 type c_char = i8;\n                 type c_schar = i8;\n                 type c_uchar = u8;\n@@ -230,12 +249,14 @@ mod types {\n                 type wchar_t = i32;\n             }\n             mod c99 {\n+                #[legacy_exports];\n                 type c_longlong = i64;\n                 type c_ulonglong = u64;\n                 type intptr_t = int;\n                 type uintptr_t = uint;\n             }\n             mod posix88 {\n+                #[legacy_exports];\n                 type off_t = i64;\n                 type dev_t = u64;\n                 type ino_t = u64;\n@@ -246,19 +267,26 @@ mod types {\n                 type mode_t = u32;\n                 type ssize_t = i64;\n             }\n-            mod posix01 { }\n-            mod posix08 { }\n-            mod bsd44 { }\n+            mod posix01 {\n+                #[legacy_exports]; }\n+            mod posix08 {\n+                #[legacy_exports]; }\n+            mod bsd44 {\n+                #[legacy_exports]; }\n             mod extra {\n+                #[legacy_exports];\n             }\n         }\n     }\n \n     #[cfg(target_os = \"freebsd\")]\n     mod os {\n+        #[legacy_exports];\n         #[cfg(target_arch = \"x86_64\")]\n         mod arch {\n+            #[legacy_exports];\n             mod c95 {\n+                #[legacy_exports];\n                 type c_char = i8;\n                 type c_schar = i8;\n                 type c_uchar = u8;\n@@ -277,12 +305,14 @@ mod types {\n                 type wchar_t = i32;\n             }\n             mod c99 {\n+                #[legacy_exports];\n                 type c_longlong = i64;\n                 type c_ulonglong = u64;\n                 type intptr_t = int;\n                 type uintptr_t = uint;\n             }\n             mod posix88 {\n+                #[legacy_exports];\n                 type off_t = i64;\n                 type dev_t = u32;\n                 type ino_t = u32;\n@@ -293,19 +323,26 @@ mod types {\n                 type mode_t = u16;\n                 type ssize_t = i64;\n             }\n-            mod posix01 { }\n-            mod posix08 { }\n-            mod bsd44 { }\n+            mod posix01 {\n+                #[legacy_exports]; }\n+            mod posix08 {\n+                #[legacy_exports]; }\n+            mod bsd44 {\n+                #[legacy_exports]; }\n             mod extra {\n+                #[legacy_exports];\n             }\n         }\n     }\n \n     #[cfg(target_os = \"win32\")]\n     mod os {\n+        #[legacy_exports];\n         #[cfg(target_arch = \"x86\")]\n         mod arch {\n+            #[legacy_exports];\n             mod c95 {\n+                #[legacy_exports];\n                 type c_char = i8;\n                 type c_schar = i8;\n                 type c_uchar = u8;\n@@ -324,12 +361,14 @@ mod types {\n                 type wchar_t = u16;\n             }\n             mod c99 {\n+                #[legacy_exports];\n                 type c_longlong = i64;\n                 type c_ulonglong = u64;\n                 type intptr_t = int;\n                 type uintptr_t = uint;\n             }\n             mod posix88 {\n+                #[legacy_exports];\n                 type off_t = i32;\n                 type dev_t = u32;\n                 type ino_t = i16;\n@@ -338,10 +377,14 @@ mod types {\n                 type mode_t = u16;\n                 type ssize_t = i32;\n             }\n-            mod posix01 { }\n-            mod posix08 { }\n-            mod bsd44 { }\n+            mod posix01 {\n+                #[legacy_exports]; }\n+            mod posix08 {\n+                #[legacy_exports]; }\n+            mod bsd44 {\n+                #[legacy_exports]; }\n             mod extra {\n+                #[legacy_exports];\n                 type BOOL = c_int;\n                 type BYTE = u8;\n                 type CCHAR = c_char;\n@@ -377,9 +420,12 @@ mod types {\n \n     #[cfg(target_os = \"macos\")]\n     mod os {\n+        #[legacy_exports];\n         #[cfg(target_arch = \"x86\")]\n         mod arch {\n+            #[legacy_exports];\n             mod c95 {\n+                #[legacy_exports];\n                 type c_char = i8;\n                 type c_schar = i8;\n                 type c_uchar = u8;\n@@ -398,12 +444,14 @@ mod types {\n                 type wchar_t = i32;\n             }\n             mod c99 {\n+                #[legacy_exports];\n                 type c_longlong = i64;\n                 type c_ulonglong = u64;\n                 type intptr_t = int;\n                 type uintptr_t = uint;\n             }\n             mod posix88 {\n+                #[legacy_exports];\n                 type off_t = i64;\n                 type dev_t = i32;\n                 type ino_t = u64;\n@@ -414,16 +462,22 @@ mod types {\n                 type mode_t = u16;\n                 type ssize_t = i32;\n             }\n-            mod posix01 { }\n-            mod posix08 { }\n-            mod bsd44 { }\n+            mod posix01 {\n+                #[legacy_exports]; }\n+            mod posix08 {\n+                #[legacy_exports]; }\n+            mod bsd44 {\n+                #[legacy_exports]; }\n             mod extra {\n+                #[legacy_exports];\n             }\n         }\n \n         #[cfg(target_arch = \"x86_64\")]\n         mod arch {\n+            #[legacy_exports];\n             mod c95 {\n+                #[legacy_exports];\n                 type c_char = i8;\n                 type c_schar = i8;\n                 type c_uchar = u8;\n@@ -442,12 +496,14 @@ mod types {\n                 type wchar_t = i32;\n             }\n             mod c99 {\n+                #[legacy_exports];\n                 type c_longlong = i64;\n                 type c_ulonglong = u64;\n                 type intptr_t = int;\n                 type uintptr_t = uint;\n             }\n             mod posix88 {\n+                #[legacy_exports];\n                 type off_t = i64;\n                 type dev_t = i32;\n                 type ino_t = u64;\n@@ -458,23 +514,30 @@ mod types {\n                 type mode_t = u16;\n                 type ssize_t = i64;\n             }\n-            mod posix01 { }\n-            mod posix08 { }\n-            mod bsd44 { }\n+            mod posix01 {\n+                #[legacy_exports]; }\n+            mod posix08 {\n+                #[legacy_exports]; }\n+            mod bsd44 {\n+                #[legacy_exports]; }\n             mod extra {\n+                #[legacy_exports];\n             }\n         }\n     }\n }\n \n mod consts {\n+    #[legacy_exports];\n \n     // Consts tend to vary per OS so we pull their definitions out\n     // into this module.\n \n     #[cfg(target_os = \"win32\")]\n     mod os {\n+        #[legacy_exports];\n         mod c95 {\n+            #[legacy_exports];\n             const EXIT_FAILURE : int = 1;\n             const EXIT_SUCCESS : int = 0;\n             const RAND_MAX : int = 32767;\n@@ -491,8 +554,10 @@ mod consts {\n             const L_tmpnam : uint = 16_u;\n             const TMP_MAX : uint = 32767_u;\n         }\n-        mod c99 { }\n+        mod c99 {\n+            #[legacy_exports]; }\n         mod posix88 {\n+            #[legacy_exports];\n             const O_RDONLY : int = 0;\n             const O_WRONLY : int = 1;\n             const O_RDWR : int = 2;\n@@ -521,10 +586,14 @@ mod consts {\n             const STDOUT_FILENO : int = 1;\n             const STDERR_FILENO : int = 2;\n         }\n-        mod posix01 { }\n-        mod posix08 { }\n-        mod bsd44 { }\n+        mod posix01 {\n+            #[legacy_exports]; }\n+        mod posix08 {\n+            #[legacy_exports]; }\n+        mod bsd44 {\n+            #[legacy_exports]; }\n         mod extra {\n+            #[legacy_exports];\n             const O_TEXT : int = 16384;\n             const O_BINARY : int = 32768;\n             const O_NOINHERIT: int = 128;\n@@ -537,7 +606,9 @@ mod consts {\n \n     #[cfg(target_os = \"linux\")]\n     mod os {\n+        #[legacy_exports];\n         mod c95 {\n+            #[legacy_exports];\n             const EXIT_FAILURE : int = 1;\n             const EXIT_SUCCESS : int = 0;\n             const RAND_MAX : int = 2147483647;\n@@ -554,8 +625,10 @@ mod consts {\n             const L_tmpnam : uint = 20_u;\n             const TMP_MAX : uint = 238328_u;\n         }\n-        mod c99 { }\n+        mod c99 {\n+            #[legacy_exports]; }\n         mod posix88 {\n+            #[legacy_exports];\n             const O_RDONLY : int = 0;\n             const O_WRONLY : int = 1;\n             const O_RDWR : int = 2;\n@@ -588,10 +661,14 @@ mod consts {\n             const F_TLOCK : int = 2;\n             const F_ULOCK : int = 0;\n         }\n-        mod posix01 { }\n-        mod posix08 { }\n-        mod bsd44 { }\n+        mod posix01 {\n+            #[legacy_exports]; }\n+        mod posix08 {\n+            #[legacy_exports]; }\n+        mod bsd44 {\n+            #[legacy_exports]; }\n         mod extra {\n+            #[legacy_exports];\n             const O_RSYNC : int = 1052672;\n             const O_DSYNC : int = 4096;\n             const O_SYNC : int = 1052672;\n@@ -600,7 +677,9 @@ mod consts {\n \n     #[cfg(target_os = \"freebsd\")]\n     mod os {\n+        #[legacy_exports];\n         mod c95 {\n+            #[legacy_exports];\n             const EXIT_FAILURE : int = 1;\n             const EXIT_SUCCESS : int = 0;\n             const RAND_MAX : int = 2147483647;\n@@ -617,8 +696,10 @@ mod consts {\n             const L_tmpnam : uint = 1024_u;\n             const TMP_MAX : uint = 308915776_u;\n         }\n-        mod c99 { }\n+        mod c99 {\n+            #[legacy_exports]; }\n         mod posix88 {\n+            #[legacy_exports];\n             const O_RDONLY : int = 0;\n             const O_WRONLY : int = 1;\n             const O_RDWR : int = 2;\n@@ -651,10 +732,14 @@ mod consts {\n             const F_TLOCK : int = 2;\n             const F_ULOCK : int = 0;\n         }\n-        mod posix01 { }\n-        mod posix08 { }\n-        mod bsd44 { }\n+        mod posix01 {\n+            #[legacy_exports]; }\n+        mod posix08 {\n+            #[legacy_exports]; }\n+        mod bsd44 {\n+            #[legacy_exports]; }\n         mod extra {\n+            #[legacy_exports];\n             const O_SYNC : int = 128;\n             const CTL_KERN: int = 1;\n             const KERN_PROC: int = 14;\n@@ -664,7 +749,9 @@ mod consts {\n \n     #[cfg(target_os = \"macos\")]\n     mod os {\n+        #[legacy_exports];\n         mod c95 {\n+            #[legacy_exports];\n             const EXIT_FAILURE : int = 1;\n             const EXIT_SUCCESS : int = 0;\n             const RAND_MAX : int = 2147483647;\n@@ -681,8 +768,10 @@ mod consts {\n             const L_tmpnam : uint = 1024_u;\n             const TMP_MAX : uint = 308915776_u;\n         }\n-        mod c99 { }\n+        mod c99 {\n+            #[legacy_exports]; }\n         mod posix88 {\n+            #[legacy_exports];\n             const O_RDONLY : int = 0;\n             const O_WRONLY : int = 1;\n             const O_RDWR : int = 2;\n@@ -715,10 +804,14 @@ mod consts {\n             const F_TLOCK : int = 2;\n             const F_ULOCK : int = 0;\n         }\n-        mod posix01 { }\n-        mod posix08 { }\n-        mod bsd44 { }\n+        mod posix01 {\n+            #[legacy_exports]; }\n+        mod posix08 {\n+            #[legacy_exports]; }\n+        mod bsd44 {\n+            #[legacy_exports]; }\n         mod extra {\n+            #[legacy_exports];\n             const O_DSYNC : int = 4194304;\n             const O_SYNC : int = 128;\n             const F_FULLFSYNC : int = 51;\n@@ -728,15 +821,18 @@ mod consts {\n \n \n mod funcs {\n+    #[legacy_exports];\n \n     // Thankfull most of c95 is universally available and does not vary by OS\n     // or anything. The same is not true of POSIX.\n \n     mod c95 {\n+        #[legacy_exports];\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n         extern mod ctype {\n+            #[legacy_exports];\n             fn isalnum(c: c_int) -> c_int;\n             fn isalpha(c: c_int) -> c_int;\n             fn iscntrl(c: c_int) -> c_int;\n@@ -755,6 +851,7 @@ mod funcs {\n         #[nolink]\n         #[abi = \"cdecl\"]\n         extern mod stdio {\n+            #[legacy_exports];\n \n             fn fopen(filename: *c_char, mode: *c_char) -> *FILE;\n             fn freopen(filename: *c_char, mode: *c_char,\n@@ -799,6 +896,7 @@ mod funcs {\n         #[nolink]\n         #[abi = \"cdecl\"]\n         extern mod stdlib {\n+            #[legacy_exports];\n             fn abs(i: c_int) -> c_int;\n             fn labs(i: c_long) -> c_long;\n             // Omitted: div, ldiv (return type incomplete).\n@@ -824,6 +922,7 @@ mod funcs {\n         #[nolink]\n         #[abi = \"cdecl\"]\n         extern mod string {\n+            #[legacy_exports];\n \n             fn strcpy(dst: *c_char, src: *c_char) -> *c_char;\n             fn strncpy(dst: *c_char, src: *c_char, n: size_t) -> *c_char;\n@@ -858,10 +957,12 @@ mod funcs {\n \n     #[cfg(target_os = \"win32\")]\n     mod posix88 {\n+        #[legacy_exports];\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n         extern mod stat {\n+            #[legacy_exports];\n             #[link_name = \"_chmod\"]\n             fn chmod(path: *c_char, mode: c_int) -> c_int;\n \n@@ -872,6 +973,7 @@ mod funcs {\n         #[nolink]\n         #[abi = \"cdecl\"]\n         extern mod stdio {\n+            #[legacy_exports];\n             #[link_name = \"_popen\"]\n             fn popen(command: *c_char, mode: *c_char) -> *FILE;\n \n@@ -888,6 +990,7 @@ mod funcs {\n         #[nolink]\n         #[abi = \"cdecl\"]\n         extern mod fcntl {\n+            #[legacy_exports];\n             #[link_name = \"_open\"]\n             fn open(path: *c_char, oflag: c_int, mode: c_int) -> c_int;\n \n@@ -898,12 +1001,14 @@ mod funcs {\n         #[nolink]\n         #[abi = \"cdecl\"]\n         extern mod dirent {\n+            #[legacy_exports];\n             // Not supplied at all.\n         }\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n         extern mod unistd {\n+            #[legacy_exports];\n             #[link_name = \"_access\"]\n             fn access(path: *c_char, amode: c_int) -> c_int;\n \n@@ -968,10 +1073,12 @@ mod funcs {\n     #[cfg(target_os = \"macos\")]\n     #[cfg(target_os = \"freebsd\")]\n     mod posix88 {\n+        #[legacy_exports];\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n         extern mod stat {\n+            #[legacy_exports];\n             fn chmod(path: *c_char, mode: mode_t) -> c_int;\n             fn fchmod(fd: c_int, mode: mode_t) -> c_int;\n             fn mkdir(path: *c_char, mode: mode_t) -> c_int;\n@@ -981,6 +1088,7 @@ mod funcs {\n         #[nolink]\n         #[abi = \"cdecl\"]\n         extern mod stdio {\n+            #[legacy_exports];\n             fn popen(command: *c_char, mode: *c_char) -> *FILE;\n             fn pclose(stream: *FILE) -> c_int;\n             fn fdopen(fd: c_int, mode: *c_char) -> *FILE;\n@@ -990,6 +1098,7 @@ mod funcs {\n         #[nolink]\n         #[abi = \"cdecl\"]\n         extern mod fcntl {\n+            #[legacy_exports];\n             fn open(path: *c_char, oflag: c_int, mode: c_int) -> c_int;\n             fn creat(path: *c_char, mode: mode_t) -> c_int;\n             fn fcntl(fd: c_int, cmd: c_int) -> c_int;\n@@ -998,6 +1107,7 @@ mod funcs {\n         #[nolink]\n         #[abi = \"cdecl\"]\n         extern mod dirent {\n+            #[legacy_exports];\n             fn opendir(dirname: *c_char) -> *DIR;\n             fn closedir(dirp: *DIR) -> c_int;\n             fn readdir(dirp: *DIR) -> *dirent;\n@@ -1009,6 +1119,7 @@ mod funcs {\n         #[nolink]\n         #[abi = \"cdecl\"]\n         extern mod unistd {\n+            #[legacy_exports];\n             fn access(path: *c_char, amode: c_int) -> c_int;\n             fn alarm(seconds: c_uint) -> c_uint;\n             fn chdir(dir: *c_char) -> c_int;\n@@ -1058,10 +1169,12 @@ mod funcs {\n     #[cfg(target_os = \"macos\")]\n     #[cfg(target_os = \"freebsd\")]\n     mod posix01 {\n+        #[legacy_exports];\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n         extern mod unistd {\n+            #[legacy_exports];\n             fn readlink(path: *c_char, buf: *mut c_char,\n                         bufsz: size_t) -> ssize_t;\n \n@@ -1079,15 +1192,18 @@ mod funcs {\n         #[nolink]\n         #[abi = \"cdecl\"]\n         extern mod wait {\n+            #[legacy_exports];\n             fn waitpid(pid: pid_t, status: *mut c_int,\n                        options: c_int) -> pid_t;\n         }\n     }\n \n     #[cfg(target_os = \"win32\")]\n     mod posix01 {\n+        #[legacy_exports];\n         #[nolink]\n-        extern mod unistd { }\n+        extern mod unistd {\n+            #[legacy_exports]; }\n     }\n \n \n@@ -1096,8 +1212,10 @@ mod funcs {\n     #[cfg(target_os = \"macos\")]\n     #[cfg(target_os = \"freebsd\")]\n     mod posix08 {\n+        #[legacy_exports];\n         #[nolink]\n-        extern mod unistd { }\n+        extern mod unistd {\n+            #[legacy_exports]; }\n     }\n \n \n@@ -1106,6 +1224,7 @@ mod funcs {\n     #[nolink]\n     #[abi = \"cdecl\"]\n     extern mod bsd44 {\n+        #[legacy_exports];\n \n         fn sysctl(name: *c_int, namelen: c_uint,\n                   oldp: *mut c_void, oldlenp: *mut size_t,\n@@ -1123,30 +1242,36 @@ mod funcs {\n     #[cfg(target_os = \"linux\")]\n     #[cfg(target_os = \"win32\")]\n     mod bsd44 {\n+        #[legacy_exports];\n     }\n \n \n     #[cfg(target_os = \"macos\")]\n     #[nolink]\n     #[abi = \"cdecl\"]\n     extern mod extra {\n+        #[legacy_exports];\n         fn _NSGetExecutablePath(buf: *mut c_char,\n                                 bufsize: *mut u32) -> c_int;\n     }\n \n     #[cfg(target_os = \"freebsd\")]\n-    mod extra { }\n+    mod extra {\n+        #[legacy_exports]; }\n \n     #[cfg(target_os = \"linux\")]\n-    mod extra { }\n+    mod extra {\n+        #[legacy_exports]; }\n \n \n     #[cfg(target_os = \"win32\")]\n     mod extra {\n+        #[legacy_exports];\n         use types::os::arch::extra::*;\n \n         #[abi = \"stdcall\"]\n         extern mod kernel32 {\n+            #[legacy_exports];\n             fn GetEnvironmentVariableW(n: LPCWSTR,\n                                        v: LPWSTR,\n                                        nsize: DWORD) -> DWORD;\n@@ -1171,6 +1296,7 @@ mod funcs {\n         #[abi = \"cdecl\"]\n         #[nolink]\n         extern mod msvcrt {\n+            #[legacy_exports];\n             #[link_name = \"_commit\"]\n             fn commit(fd: c_int) -> c_int;\n         }"}, {"sha": "6086b2edd7ed3137f98590ab4b610ea955085026", "filename": "src/libcore/logging.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flogging.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -8,6 +8,7 @@ export console_on, console_off;\n \n #[nolink]\n extern mod rustrt {\n+    #[legacy_exports];\n     fn rust_log_console_on();\n     fn rust_log_console_off();\n }"}, {"sha": "5c8d478932af1ff59ae64699ab27e5b1f15ce12b", "filename": "src/libcore/os.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -44,6 +44,7 @@ export walk_dir;\n export as_c_charp, fill_charp_buf;\n \n extern mod rustrt {\n+    #[legacy_exports];\n     fn rust_getcwd() -> ~str;\n     fn rust_path_is_dir(path: *libc::c_char) -> c_int;\n     fn rust_path_exists(path: *libc::c_char) -> c_int;\n@@ -78,6 +79,7 @@ fn fill_charp_buf(f: fn(*mut c_char, size_t) -> bool)\n \n #[cfg(windows)]\n mod win32 {\n+    #[legacy_exports];\n     use dword = libc::types::os::arch::extra::DWORD;\n \n     fn fill_utf16_buf_and_decode(f: fn(*mut u16, dword) -> dword)\n@@ -131,13 +133,15 @@ fn env() -> ~[(~str,~str)] {\n }\n \n mod global_env {\n+    #[legacy_exports];\n     //! Internal module for serializing access to getenv/setenv\n \n     export getenv;\n     export setenv;\n     export env;\n \n     extern mod rustrt {\n+        #[legacy_exports];\n         fn rust_global_env_chan_ptr() -> *libc::uintptr_t;\n     }\n \n@@ -204,7 +208,9 @@ mod global_env {\n     }\n \n     mod impl_ {\n+        #[legacy_exports];\n         extern mod rustrt {\n+            #[legacy_exports];\n             fn rust_env_pairs() -> ~[~str];\n         }\n \n@@ -791,27 +797,31 @@ fn family() -> ~str { ~\"windows\" }\n \n #[cfg(target_os = \"macos\")]\n mod consts {\n+    #[legacy_exports];\n     fn sysname() -> ~str { ~\"macos\" }\n     fn exe_suffix() -> ~str { ~\"\" }\n     fn dll_suffix() -> ~str { ~\".dylib\" }\n }\n \n #[cfg(target_os = \"freebsd\")]\n mod consts {\n+    #[legacy_exports];\n     fn sysname() -> ~str { ~\"freebsd\" }\n     fn exe_suffix() -> ~str { ~\"\" }\n     fn dll_suffix() -> ~str { ~\".so\" }\n }\n \n #[cfg(target_os = \"linux\")]\n mod consts {\n+    #[legacy_exports];\n     fn sysname() -> ~str { ~\"linux\" }\n     fn exe_suffix() -> ~str { ~\"\" }\n     fn dll_suffix() -> ~str { ~\".so\" }\n }\n \n #[cfg(target_os = \"win32\")]\n mod consts {\n+    #[legacy_exports];\n     fn sysname() -> ~str { ~\"win32\" }\n     fn exe_suffix() -> ~str { ~\".exe\" }\n     fn dll_suffix() -> ~str { ~\".dll\" }\n@@ -829,6 +839,7 @@ fn arch() -> str { ~\"arm\" }\n #[cfg(test)]\n #[allow(non_implicitly_copyable_typarams)]\n mod tests {\n+    #[legacy_exports];\n \n     #[test]\n     fn last_os_error() {"}, {"sha": "49909208d75b3a2f52571cefa8920b523fbc875e", "filename": "src/libcore/path.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -484,6 +484,7 @@ fn test_double_slash_collapsing()\n }\n \n mod posix {\n+    #[legacy_exports];\n \n     #[cfg(test)]\n     fn mk(s: &str) -> PosixPath { from_str::<PosixPath>(s) }\n@@ -574,6 +575,7 @@ mod posix {\n \n // Various windows helpers, and tests for the impl.\n mod windows {\n+    #[legacy_exports];\n \n     #[inline(always)]\n     pure fn is_sep(u: u8) -> bool {"}, {"sha": "5b9770805735929f06bb0e8195770220f472e17e", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -268,6 +268,7 @@ fn entangle_buffer<T: Send, Tstart: Send>(\n #[abi = \"rust-intrinsic\"]\n #[doc(hidden)]\n extern mod rusti {\n+    #[legacy_exports];\n     fn atomic_xchg(dst: &mut int, src: int) -> int;\n     fn atomic_xchg_acq(dst: &mut int, src: int) -> int;\n     fn atomic_xchg_rel(dst: &mut int, src: int) -> int;\n@@ -308,6 +309,7 @@ type rust_task = libc::c_void;\n \n #[doc(hidden)]\n extern mod rustrt {\n+    #[legacy_exports];\n     #[rust_stack]\n     fn rust_get_task() -> *rust_task;\n     #[rust_stack]\n@@ -1224,6 +1226,7 @@ fn try_send_one<T: Send>(+chan: ChanOne<T>, +data: T)\n }\n \n mod rt {\n+    #[legacy_exports];\n     // These are used to hide the option constructors from the\n     // compiler because their names are changing\n     fn make_some<T>(+val: T) -> Option<T> { Some(move val) }\n@@ -1232,6 +1235,7 @@ mod rt {\n \n #[cfg(test)]\n mod test {\n+    #[legacy_exports];\n     #[test]\n     fn test_select2() {\n         let (c1, p1) = pipes::stream();"}, {"sha": "777aea7320c6a2089483154604962ed64e30a572", "filename": "src/libcore/private.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -16,6 +16,7 @@ use task::TaskBuilder;\n use task::atomically;\n \n extern mod rustrt {\n+    #[legacy_exports];\n     fn rust_task_weaken(ch: rust_port_id);\n     fn rust_task_unweaken(ch: rust_port_id);\n \n@@ -558,6 +559,7 @@ fn unwrap_exclusive<T: Send>(+arc: Exclusive<T>) -> T {\n \n #[cfg(test)]\n mod tests {\n+    #[legacy_exports];\n \n     #[test]\n     fn exclusive_arc() {"}, {"sha": "47a9f60afa526fa4626d5e9e20816c7d4e215054", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -27,6 +27,7 @@ use libc::{c_void, size_t};\n #[nolink]\n #[abi = \"cdecl\"]\n extern mod libc_ {\n+    #[legacy_exports];\n     #[rust_stack]\n     fn memcpy(dest: *mut c_void, src: *const c_void,\n               n: libc::size_t) -> *c_void;\n@@ -42,6 +43,7 @@ extern mod libc_ {\n \n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n+    #[legacy_exports];\n     fn addr_of<T>(val: T) -> *T;\n }\n "}, {"sha": "1b9aba6e391e21832d44f2246abc658f133bb2fc", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -8,6 +8,7 @@ enum rctx {}\n \n #[abi = \"cdecl\"]\n extern mod rustrt {\n+    #[legacy_exports];\n     fn rand_seed() -> ~[u8];\n     fn rand_new() -> *rctx;\n     fn rand_new_seeded(seed: ~[u8]) -> *rctx;\n@@ -309,6 +310,7 @@ fn seeded_xorshift(x: u32, y: u32, z: u32, w: u32) -> Rng {\n \n #[cfg(test)]\n mod tests {\n+    #[legacy_exports];\n \n     #[test]\n     fn rng_seeded() {"}, {"sha": "3396e3670c43b2b59ef684ad1c7c53c2d71e1c9d", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -401,6 +401,7 @@ impl<T:Eq,U:Eq> Result<T,U> : Eq {\n #[cfg(test)]\n #[allow(non_implicitly_copyable_typarams)]\n mod tests {\n+    #[legacy_exports];\n     fn op1() -> result::Result<int, ~str> { result::Ok(666) }\n \n     fn op2(&&i: int) -> result::Result<uint, ~str> {"}, {"sha": "644edb69d5623ef941234d066957afc60804efa7", "filename": "src/libcore/rt.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -14,6 +14,7 @@ use gc::{cleanup_stack_for_failure, gc, Word};\n type rust_task = c_void;\n \n extern mod rustrt {\n+    #[legacy_exports];\n     #[rust_stack]\n     fn rust_upcall_fail(expr: *c_char, file: *c_char, line: size_t);\n "}, {"sha": "2496ad51a4162f7afa5aa0de018a9bba55dff226", "filename": "src/libcore/run.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -16,6 +16,7 @@ export waitpid;\n \n #[abi = \"cdecl\"]\n extern mod rustrt {\n+    #[legacy_exports];\n     fn rust_run_program(argv: **libc::c_char, envp: *c_void,\n                         dir: *libc::c_char,\n                         in_fd: c_int, out_fd: c_int, err_fd: c_int)\n@@ -401,6 +402,7 @@ fn waitpid(pid: pid_t) -> int {\n \n #[cfg(test)]\n mod tests {\n+    #[legacy_exports];\n \n     use io::WriterUtil;\n "}, {"sha": "2a010ee4712aa6e396a808752b751fd37833c384", "filename": "src/libcore/send_map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fsend_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fsend_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsend_map.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -28,6 +28,7 @@ trait SendMap<K:Eq Hash, V: Copy> {\n \n /// Open addressing with linear probing.\n mod linear {\n+    #[legacy_exports];\n     export LinearMap, linear_map, linear_map_with_capacity, public_methods;\n \n     const initial_capacity: uint = 32u; // 2^5\n@@ -362,6 +363,7 @@ mod linear {\n \n #[test]\n mod test {\n+    #[legacy_exports];\n \n     use linear::LinearMap;\n "}, {"sha": "7c0a4ee8761a0bbb87e23e78b717340b42def3c7", "filename": "src/libcore/stackwalk.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fstackwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fstackwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstackwalk.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -79,10 +79,12 @@ fn frame_address(f: fn(*u8)) {\n }\n \n extern mod rustrt {\n+    #[legacy_exports];\n     fn rust_dbg_breakpoint();\n }\n \n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n+    #[legacy_exports];\n     fn frame_address(f: fn(*u8));\n }"}, {"sha": "35c2fde36b4b1fd60bca7c048a414f2ebc25ad95", "filename": "src/libcore/str.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -2040,6 +2040,7 @@ pure fn escape_unicode(s: &str) -> ~str {\n \n /// Unsafe operations\n mod raw {\n+    #[legacy_exports];\n    export\n       from_buf,\n       from_buf_len,\n@@ -2233,6 +2234,7 @@ impl ~str: UniqueStr {\n \n #[cfg(notest)]\n mod traits {\n+    #[legacy_exports];\n     #[cfg(stage0)]\n     impl ~str: Add<&str,~str> {\n         #[inline(always)]\n@@ -2251,7 +2253,8 @@ mod traits {\n }\n \n #[cfg(test)]\n-mod traits {}\n+mod traits {\n+    #[legacy_exports];}\n \n trait StrSlice {\n     fn all(it: fn(char) -> bool) -> bool;\n@@ -2396,6 +2399,7 @@ impl &str: StrSlice {\n \n #[cfg(test)]\n mod tests {\n+    #[legacy_exports];\n \n     use libc::c_char;\n "}, {"sha": "37403213ab2609850460837081af71ba542d9c87", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -38,6 +38,7 @@ struct Closure {\n \n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n+    #[legacy_exports];\n     fn get_tydesc<T>() -> *();\n     fn size_of<T>() -> uint;\n     fn pref_align_of<T>() -> uint;\n@@ -111,6 +112,7 @@ pure fn log_str<T>(t: &T) -> ~str {\n \n #[cfg(test)]\n mod tests {\n+    #[legacy_exports];\n \n     #[test]\n     fn size_of_basic() {"}, {"sha": "baabd711456b17aa6e871e3370ded8d4baef7ca8", "filename": "src/libcore/task.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1178,6 +1178,7 @@ fn test_spawn_sched_childs_on_same_sched() {\n #[nolink]\n #[cfg(test)]\n extern mod testrt {\n+    #[legacy_exports];\n     fn rust_dbg_lock_create() -> *libc::c_void;\n     fn rust_dbg_lock_destroy(lock: *libc::c_void);\n     fn rust_dbg_lock_lock(lock: *libc::c_void);"}, {"sha": "a9e7bd74b2838bde88316b520df53434a7a856b5", "filename": "src/libcore/to_str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_str.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -101,6 +101,7 @@ impl<A: ToStr> ~A: ToStr {\n #[cfg(test)]\n #[allow(non_implicitly_copyable_typarams)]\n mod tests {\n+    #[legacy_exports];\n     #[test]\n     fn test_simple_types() {\n         assert 1.to_str() == ~\"1\";"}, {"sha": "ef26ae5d223c3e562867a90e1e54f1d2b03014a7", "filename": "src/libcore/unicode.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -4,6 +4,7 @@\n #[forbid(deprecated_pattern)];\n \n mod general_category {\n+    #[legacy_exports];\n     pure fn Cc(c: char) -> bool {\n         return match c {\n               '\\x00' .. '\\x1f'\n@@ -2564,6 +2565,7 @@ mod general_category {\n \n }\n mod derived_property {\n+    #[legacy_exports];\n     /// Check if a character has the alphabetic unicode property\n     pure fn Alphabetic(c: char) -> bool {\n         return match c {"}, {"sha": "8c38949f5dfa072e11f2b3e6089f4f5a1144bc49", "filename": "src/libcore/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Futil.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -93,6 +93,7 @@ fn unreachable() -> ! {\n }\n \n mod tests {\n+    #[legacy_exports];\n     #[test]\n     fn identity_crisis() {\n         // Writing a test for the identity function. How did it come to this?"}, {"sha": "c4b78f9b95fd15a64446a727983317f39dee27ee", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -97,13 +97,15 @@ export traits;\n \n #[abi = \"cdecl\"]\n extern mod rustrt {\n+    #[legacy_exports];\n     fn vec_reserve_shared(++t: *sys::TypeDesc,\n                           ++v: **raw::VecRepr,\n                           ++n: libc::size_t);\n }\n \n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n+    #[legacy_exports];\n     fn move_val_init<T>(&dst: T, -src: T);\n }\n \n@@ -1535,6 +1537,7 @@ impl<T: Ord> @[T] : Ord {\n \n #[cfg(notest)]\n mod traits {\n+    #[legacy_exports];\n     #[cfg(stage0)]\n     impl<T: Copy> ~[T]: Add<&[const T],~[T]> {\n         #[inline(always)]\n@@ -1570,7 +1573,8 @@ mod traits {\n }\n \n #[cfg(test)]\n-mod traits {}\n+mod traits {\n+    #[legacy_exports];}\n \n trait ConstVector {\n     pure fn is_empty() -> bool;\n@@ -1744,6 +1748,7 @@ impl<T: Copy> &[T]: ImmutableCopyableVector<T> {\n \n /// Unsafe operations\n mod raw {\n+    #[legacy_exports];\n     // FIXME: This should have crate visibility (#1893 blocks that)\n \n     /// The internal representation of a (boxed) vector\n@@ -1888,6 +1893,7 @@ mod raw {\n \n /// Operations on `[u8]`\n mod bytes {\n+    #[legacy_exports];\n     export cmp;\n     export lt, le, eq, ne, ge, gt;\n     export memcpy, memmove;\n@@ -2017,6 +2023,7 @@ impl<A: Copy Ord> &[A]: iter::CopyableOrderedIter<A> {\n \n #[cfg(test)]\n mod tests {\n+    #[legacy_exports];\n \n     fn square(n: uint) -> uint { return n * n; }\n "}, {"sha": "c5b1aafc0206364f0ea6b92e5e8345fe068b5a40", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -444,6 +444,7 @@ impl<T: Const Send> &RWReadMode<T> {\n \n #[cfg(test)]\n mod tests {\n+    #[legacy_exports];\n     use comm::*;\n \n     #[test]"}, {"sha": "4af647aabf70464c577d2a3987c90b01f2dd385d", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -34,10 +34,12 @@ use libc::size_t;\n \n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n+    #[legacy_exports];\n     fn move_val_init<T>(&dst: T, -src: T);\n     fn needs_drop<T>() -> bool;\n }\n extern mod rustrt {\n+    #[legacy_exports];\n     #[rust_stack]\n     fn rust_call_tydesc_glue(root: *u8, tydesc: *TypeDesc, field: size_t);\n }"}, {"sha": "d01aaab6723ea8f434cbdc5961f20a0b201aa729", "filename": "src/libstd/base64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbase64.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -137,6 +137,7 @@ impl ~str: FromBase64 {\n \n #[cfg(test)]\n mod tests {\n+    #[legacy_exports];\n     #[test]\n     fn test_to_base64() {\n         assert (~\"\").to_base64()       == ~\"\";"}, {"sha": "21864ec0e7fbe7310285e2ee7e60dbd139bccb12", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -563,6 +563,7 @@ impl Bitv: ops::Index<uint,bool> {\n \n #[cfg(test)]\n mod tests {\n+    #[legacy_exports];\n     #[test]\n     fn test_to_str() {\n         let zerolen = Bitv(0u, false);"}, {"sha": "fde9df858d79102e91e45bf11c0e6f8ecdb3d316", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -138,6 +138,7 @@ unsafe fn ptr<T>(t: CVec<T>) -> *mut T {\n \n #[cfg(test)]\n mod tests {\n+    #[legacy_exports];\n     use libc::*;\n \n     fn malloc(n: size_t) -> CVec<u8> {"}, {"sha": "e2d4646d6706fa82d96781eda290f26d7163fdc4", "filename": "src/libstd/comm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -66,6 +66,7 @@ fn DuplexStream<T: Send, U: Send>()\n \n #[cfg(test)]\n mod test {\n+    #[legacy_exports];\n     #[test]\n     fn DuplexStream1() {\n         let (left, right) = DuplexStream();"}, {"sha": "2b9df33b2d418916603b64a29af2f3424ae56a0d", "filename": "src/libstd/dbg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fdbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fdbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdbg.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -14,6 +14,7 @@ export breakpoint;\n \n #[abi = \"cdecl\"]\n extern mod rustrt {\n+    #[legacy_exports];\n     fn debug_tydesc(td: *sys::TypeDesc);\n     fn debug_opaque(td: *sys::TypeDesc, x: *());\n     fn debug_box(td: *sys::TypeDesc, x: *());"}, {"sha": "9b34f455780ab42f1d357aeae6a4d40db5a23364", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -120,6 +120,7 @@ fn create<T: Copy>() -> Deque<T> {\n \n #[cfg(test)]\n mod tests {\n+    #[legacy_exports];\n     #[test]\n     fn test_simple() {\n         let d: deque::Deque<int> = deque::create::<int>();"}, {"sha": "6f827be2b8ab638eadb96771c618833792a9b876", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -496,6 +496,7 @@ impl FailType : Eq {\n \n #[cfg(test)]\n mod tests {\n+    #[legacy_exports];\n     use opt = getopts;\n     use result::{Err, Ok};\n "}, {"sha": "4d458db482ba1ccab2d181c2c950be61ab8c1bee", "filename": "src/libstd/json.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -858,6 +858,7 @@ impl Error: to_str::ToStr {\n \n #[cfg(test)]\n mod tests {\n+    #[legacy_exports];\n     fn mk_dict(items: &[(~str, Json)]) -> Json {\n         let d = map::HashMap();\n "}, {"sha": "26cc7764e7a9d82d6816b1d2fb03d6fa89fa18c6", "filename": "src/libstd/list.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flist.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -192,6 +192,7 @@ impl<T:Eq> List<T> : Eq {\n \n #[cfg(test)]\n mod tests {\n+    #[legacy_exports];\n \n     #[test]\n     fn test_is_empty() {"}, {"sha": "5373c1d336fb6df27ae787952c8bcd14453fa374", "filename": "src/libstd/map.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -83,6 +83,7 @@ trait Map<K:Eq IterBytes Hash Copy, V: Copy> {\n }\n \n mod util {\n+    #[legacy_exports];\n     type Rational = {num: int, den: int}; // : int::positive(*.den);\n \n     pure fn rational_leq(x: Rational, y: Rational) -> bool {\n@@ -96,6 +97,7 @@ mod util {\n // FIXME (#2344): package this up and export it as a datatype usable for\n // external code that doesn't want to pay the cost of a box.\n mod chained {\n+    #[legacy_exports];\n     export T, mk, HashMap;\n \n     const initial_capacity: uint = 32u; // 2^5\n@@ -518,6 +520,7 @@ impl<K: Eq IterBytes Hash Copy, V: Copy> @Mut<LinearMap<K, V>>:\n \n #[cfg(test)]\n mod tests {\n+    #[legacy_exports];\n \n     #[test]\n     fn test_simple() {"}, {"sha": "c52255d60cab7fdab8919427779ba77cc264bbb4", "filename": "src/libstd/net_ip.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -118,6 +118,7 @@ fn get_addr(node: &str, iotask: iotask)\n }\n \n mod v4 {\n+    #[legacy_exports];\n     /**\n      * Convert a str to `ip_addr`\n      *\n@@ -204,6 +205,7 @@ mod v4 {\n     }\n }\n mod v6 {\n+    #[legacy_exports];\n     /**\n      * Convert a str to `ip_addr`\n      *\n@@ -310,6 +312,7 @@ extern fn get_addr_cb(handle: *uv_getaddrinfo_t, status: libc::c_int,\n \n #[cfg(test)]\n mod test {\n+    #[legacy_exports];\n     #[test]\n     fn test_ip_ipv4_parse_and_format_ip() {\n         let localhost_str = ~\"127.0.0.1\";"}, {"sha": "a0a209eae52c79b17d45abcfa4d6826c12f4cffb", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -26,6 +26,7 @@ export connect;\n \n #[nolink]\n extern mod rustrt {\n+    #[legacy_exports];\n     fn rust_uv_current_kernel_malloc(size: libc::c_uint) -> *libc::c_void;\n     fn rust_uv_current_kernel_free(mem: *libc::c_void);\n     fn rust_uv_helper_uv_tcp_t_size() -> libc::c_uint;\n@@ -1222,13 +1223,16 @@ type TcpBufferedSocketData = {\n \n //#[cfg(test)]\n mod test {\n+    #[legacy_exports];\n     // FIXME don't run on fbsd or linux 32 bit (#2064)\n     #[cfg(target_os=\"win32\")]\n     #[cfg(target_os=\"darwin\")]\n     #[cfg(target_os=\"linux\")]\n     mod tcp_ipv4_server_and_client_test {\n+        #[legacy_exports];\n         #[cfg(target_arch=\"x86_64\")]\n         mod impl64 {\n+            #[legacy_exports];\n             #[test]\n             fn test_gl_tcp_server_and_client_ipv4() unsafe {\n                 impl_gl_tcp_ipv4_server_and_client();\n@@ -1253,6 +1257,7 @@ mod test {\n         }\n         #[cfg(target_arch=\"x86\")]\n         mod impl32 {\n+            #[legacy_exports];\n             #[test]\n             #[ignore(cfg(target_os = \"linux\"))]\n             fn test_gl_tcp_server_and_client_ipv4() unsafe {"}, {"sha": "22fe049d03b90da59f90b3604991cb8bc702414e", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -786,6 +786,7 @@ impl Url: IterBytes {\n \n #[cfg(test)]\n mod tests {\n+    #[legacy_exports];\n     #[test]\n     fn test_split_char_first() {\n         let (u,v) = split_char_first(~\"hello, sweet world\", ',');"}, {"sha": "d26d0a484b2b6a8b01a9e1cae72f27facc38dcc6", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -431,7 +431,9 @@ fn loop_leaves(rope: Rope, it: fn(node::Leaf) -> bool) -> bool{\n }\n \n mod iterator {\n+    #[legacy_exports];\n     mod leaf {\n+        #[legacy_exports];\n         fn start(rope: Rope) -> node::leaf_iterator::T {\n             match (rope) {\n               node::Empty      => return node::leaf_iterator::empty(),\n@@ -443,6 +445,7 @@ mod iterator {\n         }\n     }\n     mod char {\n+        #[legacy_exports];\n         fn start(rope: Rope) -> node::char_iterator::T {\n             match (rope) {\n               node::Empty      => return node::char_iterator::empty(),\n@@ -535,6 +538,7 @@ fn char_at(rope: Rope, pos: uint) -> char {\n  Section: Implementation\n */\n mod node {\n+    #[legacy_exports];\n \n     /// Implementation of type `rope`\n     enum Root {\n@@ -1105,6 +1109,7 @@ mod node {\n     }\n \n     mod leaf_iterator {\n+        #[legacy_exports];\n         type T = {\n             stack:            ~[mut @Node],\n             mut stackpos: int\n@@ -1142,6 +1147,7 @@ mod node {\n     }\n \n     mod char_iterator {\n+        #[legacy_exports];\n         type T = {\n             leaf_iterator: leaf_iterator::T,\n             mut leaf:  Option<Leaf>,\n@@ -1219,6 +1225,7 @@ mod node {\n \n #[cfg(test)]\n mod tests {\n+    #[legacy_exports];\n \n     //Utility function, used for sanity check\n     fn rope_to_string(r: Rope) -> ~str {"}, {"sha": "40c9589a651ecd1ad4e1921347972bf95d5678e9", "filename": "src/libstd/sha1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsha1.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -262,6 +262,7 @@ fn sha1() -> Sha1 {\n \n #[cfg(test)]\n mod tests {\n+    #[legacy_exports];\n \n     #[test]\n     fn test() unsafe {"}, {"sha": "afef3c5e5f9357594e00707279d03fa93ade81d1", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -171,6 +171,7 @@ impl<T: Copy Ord Eq> &[mut T] : Sort {\n \n #[cfg(test)]\n mod test_qsort3 {\n+    #[legacy_exports];\n     fn check_sort(v1: &[mut int], v2: &[mut int]) {\n         let len = vec::len::<int>(v1);\n         quick_sort3::<int>(v1);\n@@ -210,6 +211,7 @@ mod test_qsort3 {\n \n #[cfg(test)]\n mod test_qsort {\n+    #[legacy_exports];\n     fn check_sort(v1: &[mut int], v2: &[mut int]) {\n         let len = vec::len::<int>(v1);\n         pure fn leual(a: &int, b: &int) -> bool { *a <= *b }\n@@ -269,6 +271,7 @@ mod test_qsort {\n \n #[cfg(test)]\n mod tests {\n+    #[legacy_exports];\n \n     fn check_sort(v1: &[int], v2: &[int]) {\n         let len = vec::len::<int>(v1);"}, {"sha": "422ff81b9fecc81157687b78c23bfa382120272b", "filename": "src/libstd/std.rc", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -19,6 +19,7 @@ not required in or otherwise suitable for the core library.\n #[no_core];\n \n #[legacy_modes];\n+#[legacy_exports];\n \n #[allow(vecs_implicitly_copyable)];\n #[deny(non_camel_case_types)];\n@@ -41,66 +42,107 @@ export cell;\n \n // General io and system-services modules\n \n+#[legacy_exports]\n mod net;\n+#[legacy_exports]\n mod net_ip;\n+#[legacy_exports]\n mod net_tcp;\n+#[legacy_exports]\n mod net_url;\n \n // libuv modules\n+#[legacy_exports]\n mod uv;\n+#[legacy_exports]\n mod uv_ll;\n+#[legacy_exports]\n mod uv_iotask;\n+#[legacy_exports]\n mod uv_global_loop;\n \n \n // Utility modules\n \n+#[legacy_exports]\n mod c_vec;\n+#[legacy_exports]\n mod timer;\n+#[legacy_exports]\n mod cell;\n \n // Concurrency\n \n+#[legacy_exports]\n mod sync;\n+#[legacy_exports]\n mod arc;\n+#[legacy_exports]\n mod comm;\n \n // Collections\n \n+#[legacy_exports]\n mod bitv;\n+#[legacy_exports]\n mod deque;\n+#[legacy_exports]\n mod fun_treemap;\n+#[legacy_exports]\n mod list;\n+#[legacy_exports]\n mod map;\n+#[legacy_exports]\n mod rope;\n+#[legacy_exports]\n mod smallintmap;\n+#[legacy_exports]\n mod sort;\n+#[legacy_exports]\n mod treemap;\n+#[legacy_exports]\n \n // And ... other stuff\n \n+#[legacy_exports]\n mod ebml;\n+#[legacy_exports]\n mod dbg;\n+#[legacy_exports]\n mod getopts;\n+#[legacy_exports]\n mod json;\n+#[legacy_exports]\n mod sha1;\n+#[legacy_exports]\n mod md4;\n+#[legacy_exports]\n mod tempfile;\n+#[legacy_exports]\n mod term;\n+#[legacy_exports]\n mod time;\n+#[legacy_exports]\n mod prettyprint;\n+#[legacy_exports]\n mod arena;\n+#[legacy_exports]\n mod par;\n+#[legacy_exports]\n mod cmp;\n+#[legacy_exports]\n mod base64;\n \n #[cfg(unicode)]\n+#[legacy_exports]\n mod unicode;\n \n \n // Compiler support modules\n \n+#[legacy_exports]\n mod test;\n+#[legacy_exports]\n mod serialization;\n \n // Local Variables:"}, {"sha": "b2e9def6d73cb4831bdffa5989513ebcd32c0855", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -670,6 +670,7 @@ impl &RWlockReadMode {\n \n #[cfg(test)]\n mod tests {\n+    #[legacy_exports];\n     /************************************************************************\n      * Semaphore tests\n      ************************************************************************/"}, {"sha": "d01991bfec1a1b4d2aac999d11106e62de91b3ef", "filename": "src/libstd/test.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -29,6 +29,7 @@ export run_tests_console;\n \n #[abi = \"cdecl\"]\n extern mod rustrt {\n+    #[legacy_exports];\n     fn rust_sched_threads() -> libc::size_t;\n }\n \n@@ -428,6 +429,7 @@ fn calc_result(test: &TestDesc, task_succeeded: bool) -> TestResult {\n \n #[cfg(test)]\n mod tests {\n+    #[legacy_exports];\n \n     #[test]\n     fn do_not_run_ignored_tests() {"}, {"sha": "3dca5540b8296c9b0f925db47bd9b714fd721987", "filename": "src/libstd/time.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -22,6 +22,7 @@ export\n \n #[abi = \"cdecl\"]\n extern mod rustrt {\n+    #[legacy_exports];\n     fn get_time(&sec: i64, &nsec: i32);\n     fn precise_time_ns(&ns: u64);\n \n@@ -884,6 +885,7 @@ impl Tm {\n \n #[cfg(test)]\n mod tests {\n+    #[legacy_exports];\n \n     #[test]\n     fn test_get_time() {"}, {"sha": "1476d6bdf313709f44aaae67e059d96cfab081e0", "filename": "src/libstd/timer.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftimer.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -147,6 +147,7 @@ extern fn delayed_send_close_cb(handle: *uv::ll::uv_timer_t) unsafe {\n \n #[cfg(test)]\n mod test {\n+    #[legacy_exports];\n     #[test]\n     fn test_gl_timer_simple_sleep_test() {\n         let hl_loop = uv::global_loop::get();"}, {"sha": "598a680f7068f01d74925d9cc0e7c23b29e9a1a4", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -87,6 +87,7 @@ fn traverse<K, V: Copy>(m: &const TreeEdge<K, V>, f: fn(K, V)) {\n \n #[cfg(test)]\n mod tests {\n+    #[legacy_exports];\n \n     #[test]\n     fn init_treemap() { let _m = TreeMap::<int, int>(); }"}, {"sha": "e76b8529730232c7c60151b47fafdd8d229ee965", "filename": "src/libstd/unicode.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funicode.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -2,6 +2,7 @@\n #[forbid(deprecated_pattern)];\n \n mod icu {\n+    #[legacy_exports];\n     type UBool = u8;\n     type UProperty = int;\n     type UChar32 = char;\n@@ -151,6 +152,7 @@ mod icu {\n     #[link_name = \"icuuc\"]\n     #[abi = \"cdecl\"]\n     extern mod libicu {\n+        #[legacy_exports];\n         pure fn u_hasBinaryProperty(c: UChar32, which: UProperty) -> UBool;\n         pure fn u_isdigit(c: UChar32) -> UBool;\n         pure fn u_islower(c: UChar32) -> UBool;\n@@ -209,6 +211,7 @@ pure fn is_upper(c: char) -> bool {\n \n #[cfg(test)]\n mod tests {\n+    #[legacy_exports];\n \n     #[test]\n     fn test_is_digit() {"}, {"sha": "cde88db031ec674614615fa874e693ce6d490b92", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -16,6 +16,7 @@ use task::TaskBuilder;\n use either::{Left, Right};\n \n extern mod rustrt {\n+    #[legacy_exports];\n     fn rust_uv_get_kernel_global_chan_ptr() -> *libc::uintptr_t;\n }\n \n@@ -112,6 +113,7 @@ fn spawn_loop() -> IoTask {\n \n #[cfg(test)]\n mod test {\n+    #[legacy_exports];\n     extern fn simple_timer_close_cb(timer_ptr: *ll::uv_timer_t) unsafe {\n         let exit_ch_ptr = ll::get_data_for_uv_handle(\n             timer_ptr as *libc::c_void) as *comm::Chan<bool>;"}, {"sha": "2e00883055880fcffab93a914b6df4043ea98968", "filename": "src/libstd/uv_iotask.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_iotask.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -171,6 +171,7 @@ extern fn tear_down_close_cb(handle: *ll::uv_async_t) unsafe {\n \n #[cfg(test)]\n mod test {\n+    #[legacy_exports];\n     extern fn async_close_cb(handle: *ll::uv_async_t) unsafe {\n         log(debug, fmt!(\"async_close_cb handle %?\", handle));\n         let exit_ch = (*(ll::get_data_for_uv_handle(handle)"}, {"sha": "6d212cd7e92146657ce5abfbf96c1c4111dcdb5e", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -247,6 +247,7 @@ type sockaddr_in6 = {\n type addr_in = addr_in_impl::addr_in;\n #[cfg(unix)]\n mod addr_in_impl {\n+    #[legacy_exports];\n     #[cfg(target_arch=\"x86_64\")]\n     type addr_in = {\n         a0: *u8, a1: *u8,\n@@ -262,6 +263,7 @@ mod addr_in_impl {\n }\n #[cfg(windows)]\n mod addr_in_impl {\n+    #[legacy_exports];\n     type addr_in = {\n         a0: *u8, a1: *u8,\n         a2: *u8, a3: *u8\n@@ -272,6 +274,7 @@ mod addr_in_impl {\n type addrinfo = addrinfo_impl::addrinfo;\n #[cfg(target_os=\"linux\")]\n mod addrinfo_impl {\n+    #[legacy_exports];\n     #[cfg(target_arch=\"x86_64\")]\n     type addrinfo = {\n         a00: *u8, a01: *u8, a02: *u8, a03: *u8,\n@@ -286,13 +289,15 @@ mod addrinfo_impl {\n #[cfg(target_os=\"macos\")]\n #[cfg(target_os=\"freebsd\")]\n mod addrinfo_impl {\n+    #[legacy_exports];\n     type addrinfo = {\n         a00: *u8, a01: *u8, a02: *u8, a03: *u8,\n         a04: *u8, a05: *u8\n     };\n }\n #[cfg(windows)]\n mod addrinfo_impl {\n+    #[legacy_exports];\n     type addrinfo = {\n         a00: *u8, a01: *u8, a02: *u8, a03: *u8,\n         a04: *u8, a05: *u8\n@@ -306,6 +311,7 @@ type uv_getaddrinfo_t = {\n };\n \n mod uv_ll_struct_stubgen {\n+    #[legacy_exports];\n     fn gen_stub_uv_tcp_t() -> uv_tcp_t {\n         return gen_stub_os();\n         #[cfg(target_os = \"linux\")]\n@@ -561,6 +567,7 @@ mod uv_ll_struct_stubgen {\n \n #[nolink]\n extern mod rustrt {\n+    #[legacy_exports];\n     // libuv public API\n     fn rust_uv_loop_new() -> *libc::c_void;\n     fn rust_uv_loop_delete(lp: *libc::c_void);\n@@ -1002,6 +1009,7 @@ unsafe fn addrinfo_as_sockaddr_in6(input: *addrinfo) -> *sockaddr_in6 {\n \n #[cfg(test)]\n mod test {\n+    #[legacy_exports];\n     enum tcp_read_data {\n         tcp_read_eof,\n         tcp_read_more(~[u8]),\n@@ -1503,15 +1511,18 @@ mod test {\n     #[cfg(target_os=\"darwin\")]\n     #[cfg(target_os=\"linux\")]\n     mod tcp_and_server_client_test {\n+        #[legacy_exports];\n         #[cfg(target_arch=\"x86_64\")]\n         mod impl64 {\n+            #[legacy_exports];\n             #[test]\n             fn test_uv_ll_tcp_server_and_request() unsafe {\n                 impl_uv_tcp_server_and_request();\n             }\n         }\n         #[cfg(target_arch=\"x86\")]\n         mod impl32 {\n+            #[legacy_exports];\n             #[test]\n             #[ignore(cfg(target_os = \"linux\"))]\n             fn test_uv_ll_tcp_server_and_request() unsafe {"}, {"sha": "28d47087ccc47c4d4b3b33b1e35556e16c6b7ea2", "filename": "src/libsyntax/ext/auto_serialize.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_serialize.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -78,6 +78,7 @@ export expand;\n \n // Transitional reexports so qquote can find the paths it is looking for\n mod syntax {\n+    #[legacy_exports];\n     pub use ext;\n     pub use parse;\n }"}, {"sha": "01046dded26a3c7eeb8779737ae00bd59f2f5a32", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -10,6 +10,7 @@ use ext::base::mk_ctxt;\n \n // Transitional reexports so qquote can find the paths it is looking for\n mod syntax {\n+    #[legacy_exports];\n     pub use ext;\n     pub use parse;\n }"}, {"sha": "913d69d391f4fc20ac8908c01d91c62f5f3de6bf", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -16,6 +16,7 @@ use ast_builder::{append_types, path, empty_span};\n \n // Transitional reexports so qquote can find the paths it is looking for\n mod syntax {\n+    #[legacy_exports];\n     pub use ext;\n     pub use parse;\n }\n@@ -318,7 +319,7 @@ impl protocol: gen_init {\n             }\n         };\n \n-        cx.parse_item(fmt!(\"fn init%s() -> (client::%s, server::%s)\\\n+        cx.parse_item(fmt!(\"pub fn init%s() -> (client::%s, server::%s)\\\n                             { use pipes::HasBuffer; %s }\",\n                            start_state.ty_params.to_source(cx),\n                            start_state.to_ty(cx).to_source(cx),"}, {"sha": "9bf612c588a848041ee7e213fa6a2d2634316b41", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -279,6 +279,7 @@ pure fn is_bar(t: token) -> bool {\n \n \n mod special_idents {\n+    #[legacy_exports];\n     use ast::ident;\n     const underscore : ident = 0u;\n     const anon : ident = 1u;"}, {"sha": "561e2ecd0b4b57f54d481f77b432ecc05097235e", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 52, "deletions": 18, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -127,7 +127,7 @@ fn fun_to_str(decl: ast::fn_decl, name: ast::ident,\n               params: ~[ast::ty_param], intr: ident_interner) -> ~str {\n     do io::with_str_writer |wr| {\n         let s = rust_printer(wr, intr);\n-        print_fn(s, decl, None, name, params, None);\n+        print_fn(s, decl, None, name, params, None, ast::inherited);\n         end(s); // Close the head box\n         end(s); // Close the outer box\n         eof(s.s);\n@@ -420,7 +420,8 @@ fn print_foreign_item(s: ps, item: @ast::foreign_item) {\n     print_outer_attributes(s, item.attrs);\n     match item.node {\n       ast::foreign_item_fn(decl, purity, typarams) => {\n-        print_fn(s, decl, Some(purity), item.ident, typarams, None);\n+        print_fn(s, decl, Some(purity), item.ident, typarams, None,\n+                 ast::inherited);\n         end(s); // end head-ibox\n         word(s.s, ~\";\");\n         end(s); // end the outer fn box\n@@ -444,7 +445,7 @@ fn print_item(s: ps, &&item: @ast::item) {\n     s.ann.pre(ann_node);\n     match item.node {\n       ast::item_const(ty, expr) => {\n-        head(s, ~\"const\");\n+        head(s, visibility_qualified(item.vis, ~\"const\"));\n         print_ident(s, item.ident);\n         word_space(s, ~\":\");\n         print_type(s, ty);\n@@ -458,20 +459,21 @@ fn print_item(s: ps, &&item: @ast::item) {\n \n       }\n       ast::item_fn(decl, purity, typarams, body) => {\n-        print_fn(s, decl, Some(purity), item.ident, typarams, None);\n+        print_fn(s, decl, Some(purity), item.ident, typarams, None,\n+                 item.vis);\n         word(s.s, ~\" \");\n         print_block_with_attrs(s, body, item.attrs);\n       }\n       ast::item_mod(_mod) => {\n-        head(s, ~\"mod\");\n+        head(s, visibility_qualified(item.vis, ~\"mod\"));\n         print_ident(s, item.ident);\n         nbsp(s);\n         bopen(s);\n         print_mod(s, _mod, item.attrs);\n         bclose(s, item.span);\n       }\n       ast::item_foreign_mod(nmod) => {\n-        head(s, ~\"extern\");\n+        head(s, visibility_qualified(item.vis, ~\"extern\"));\n         match nmod.sort {\n             ast::named => {\n                 word_nbsp(s, ~\"mod\");\n@@ -614,6 +616,30 @@ fn print_variants(s: ps, variants: ~[ast::variant], span: ast::span) {\n     bclose(s, span);\n }\n \n+fn visibility_to_str(vis: ast::visibility) -> ~str {\n+    match vis {\n+        ast::private => ~\"priv\",\n+        ast::public => ~\"pub\",\n+        ast::inherited => ~\"\"\n+    }\n+}\n+\n+fn visibility_qualified(vis: ast::visibility, s: ~str) -> ~str {\n+    match vis {\n+        ast::private | ast::public =>\n+        visibility_to_str(vis) + \" \" + s,\n+        ast::inherited => s\n+    }\n+}\n+\n+fn print_visibility(s: ps, vis: ast::visibility) {\n+    match vis {\n+        ast::private | ast::public =>\n+        word_nbsp(s, visibility_to_str(vis)),\n+        ast::inherited => ()\n+    }\n+}\n+\n fn print_struct(s: ps, struct_def: @ast::struct_def, tps: ~[ast::ty_param],\n                 ident: ast::ident, span: ast::span) {\n     print_ident(s, ident);\n@@ -651,9 +677,7 @@ fn print_struct(s: ps, struct_def: @ast::struct_def, tps: ~[ast::ty_param],\n             ast::named_field(ident, mutability, visibility) => {\n                 hardbreak_if_not_bol(s);\n                 maybe_print_comment(s, field.span.lo);\n-                if visibility == ast::private {\n-                    word_nbsp(s, ~\"priv\");\n-                }\n+                print_visibility(s, visibility);\n                 if mutability == ast::class_mutable {\n                     word_nbsp(s, ~\"mut\");\n                 }\n@@ -710,6 +734,7 @@ fn print_tt(s: ps, tt: ast::token_tree) {\n }\n \n fn print_variant(s: ps, v: ast::variant) {\n+    print_visibility(s, v.node.vis);\n     match v.node.kind {\n         ast::tuple_variant_kind(args) => {\n             print_ident(s, v.node.name);\n@@ -762,7 +787,8 @@ fn print_method(s: ps, meth: @ast::method) {\n     maybe_print_comment(s, meth.span.lo);\n     print_outer_attributes(s, meth.attrs);\n     print_fn(s, meth.decl, Some(meth.purity),\n-             meth.ident, meth.tps, Some(meth.self_ty.node));\n+             meth.ident, meth.tps, Some(meth.self_ty.node),\n+             meth.vis);\n     word(s.s, ~\" \");\n     print_block_with_attrs(s, meth.body, meth.attrs);\n }\n@@ -1224,7 +1250,8 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n         cbox(s, indent_unit);\n         // head-box, will be closed by print-block at start\n         ibox(s, 0u);\n-        word(s.s, fn_header_info_to_str(None, None, Some(proto)));\n+        word(s.s, fn_header_info_to_str(None, None, Some(proto),\n+                                        ast::inherited));\n         print_fn_args_and_ret(s, decl, *cap_clause, None);\n         space(s.s);\n         print_block(s, body);\n@@ -1587,8 +1614,9 @@ fn print_self_ty(s: ps, self_ty: ast::self_ty_) -> bool {\n fn print_fn(s: ps, decl: ast::fn_decl, purity: Option<ast::purity>,\n             name: ast::ident,\n             typarams: ~[ast::ty_param],\n-            opt_self_ty: Option<ast::self_ty_>) {\n-    head(s, fn_header_info_to_str(opt_self_ty, purity, None));\n+            opt_self_ty: Option<ast::self_ty_>,\n+            vis: ast::visibility) {\n+    head(s, fn_header_info_to_str(opt_self_ty, purity, None, vis));\n     print_ident(s, name);\n     print_type_params(s, typarams);\n     print_fn_args_and_ret(s, decl, ~[], opt_self_ty);\n@@ -1758,6 +1786,7 @@ fn print_view_item(s: ps, item: @ast::view_item) {\n     hardbreak_if_not_bol(s);\n     maybe_print_comment(s, item.span.lo);\n     print_outer_attributes(s, item.attrs);\n+    print_visibility(s, item.vis);\n     match item.node {\n       ast::view_item_use(id, mta, _) => {\n         head(s, ~\"extern mod\");\n@@ -1827,7 +1856,8 @@ fn print_ty_fn(s: ps, opt_proto: Option<ast::proto>, purity: ast::purity,\n                tps: Option<~[ast::ty_param]>,\n                opt_self_ty: Option<ast::self_ty_>) {\n     ibox(s, indent_unit);\n-    word(s.s, fn_header_info_to_str(opt_self_ty, Some(purity), opt_proto));\n+    word(s.s, fn_header_info_to_str(opt_self_ty, Some(purity), opt_proto,\n+                                    ast::inherited));\n     print_bounds(s, bounds);\n     match id { Some(id) => { word(s.s, ~\" \"); print_ident(s, id); } _ => () }\n     match tps { Some(tps) => print_type_params(s, tps), _ => () }\n@@ -2050,10 +2080,14 @@ fn next_comment(s: ps) -> Option<comments::cmnt> {\n \n fn fn_header_info_to_str(opt_sty: Option<ast::self_ty_>,\n                          opt_purity: Option<ast::purity>,\n-                         opt_p: Option<ast::proto>) -> ~str {\n-    let mut s = match opt_sty {\n-      Some(ast::sty_static) => ~\"static \",\n-      _ => ~ \"\"\n+                         opt_p: Option<ast::proto>,\n+                         vis: ast::visibility) -> ~str {\n+\n+    let mut s = visibility_qualified(vis, ~\"\");\n+\n+    match opt_sty {\n+        Some(ast::sty_static) => str::push_str(s, ~\"static \"),\n+        _ => ()\n     };\n \n     match opt_purity {"}, {"sha": "c62ec28f359526c81a46666fac7622847d9a813f", "filename": "src/libsyntax/syntax.rc", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibsyntax%2Fsyntax.rc", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Flibsyntax%2Fsyntax.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsyntax.rc?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -9,6 +9,7 @@\n #[no_core];\n \n #[legacy_modes];\n+#[legacy_exports];\n \n #[allow(vecs_implicitly_copyable)];\n #[allow(non_camel_case_types)];\n@@ -18,19 +19,31 @@ extern mod std(vers = \"0.4\");\n \n use core::*;\n \n+#[legacy_exports]\n mod attr;\n+#[legacy_exports]\n mod diagnostic;\n+#[legacy_exports]\n mod codemap;\n+#[legacy_exports]\n mod ast;\n+#[legacy_exports]\n mod ast_util;\n+#[legacy_exports]\n mod ast_map;\n+#[legacy_exports]\n mod visit;\n+#[legacy_exports]\n mod fold;\n+#[legacy_exports]\n mod util {\n+    #[legacy_exports];\n+    #[legacy_exports]\n     mod interner;\n }\n \n mod parse {\n+    #[legacy_exports];\n     export parser;\n     export common;\n     export lexer;\n@@ -40,61 +53,100 @@ mod parse {\n     export classify;\n     export attr;\n \n+    #[legacy_exports]\n     mod eval;\n+    #[legacy_exports]\n     mod lexer;\n+    #[legacy_exports]\n     mod parser;\n+    #[legacy_exports]\n     mod token;\n+    #[legacy_exports]\n     mod comments;\n+    #[legacy_exports]\n     mod attr;\n+    #[legacy_exports]\n \n     /// Common routines shared by parser mods\n+    #[legacy_exports]\n     mod common;\n \n     /// Functions dealing with operator precedence\n+    #[legacy_exports]\n     mod prec;\n \n     /// Routines the parser uses to classify AST nodes\n+    #[legacy_exports]\n     mod classify;\n \n     /// Reporting obsolete syntax\n+    #[legacy_exports]\n     mod obsolete;\n }\n \n mod print {\n+    #[legacy_exports];\n+    #[legacy_exports]\n     mod pp;\n+    #[legacy_exports]\n     mod pprust;\n }\n \n mod ext {\n+    #[legacy_exports];\n+    #[legacy_exports]\n     mod base;\n+    #[legacy_exports]\n     mod expand;\n+    #[legacy_exports]\n     mod qquote;\n+    #[legacy_exports]\n     mod build;\n \n     mod tt {\n+        #[legacy_exports];\n+        #[legacy_exports]\n         mod transcribe;\n+        #[legacy_exports]\n         mod macro_parser;\n+        #[legacy_exports]\n         mod macro_rules;\n     }\n \n \n+    #[legacy_exports]\n     mod simplext;\n+    #[legacy_exports]\n     mod fmt;\n+    #[legacy_exports]\n     mod env;\n+    #[legacy_exports]\n     mod concat_idents;\n+    #[legacy_exports]\n     mod ident_to_str;\n+    #[legacy_exports]\n     mod log_syntax;\n+    #[legacy_exports]\n     mod auto_serialize;\n+    #[legacy_exports]\n     mod source_util;\n \n     mod pipes {\n+        #[legacy_exports];\n+        #[legacy_exports]\n         mod ast_builder;\n+        #[legacy_exports]\n         mod parse_proto;\n+        #[legacy_exports]\n         mod pipec;\n+        #[legacy_exports]\n         mod proto;\n+        #[legacy_exports]\n         mod check;\n+        #[legacy_exports]\n         mod liveness;\n     }\n \n+    #[legacy_exports]\n     mod trace_macros;\n }"}, {"sha": "1cfb322e39c163b71f92a8a3816a8a819cb53c0d", "filename": "src/rustc/back/link.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Flink.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -65,9 +65,11 @@ fn WriteOutputFile(sess:session,\n }\n \n mod jit {\n+    #[legacy_exports];\n     #[nolink]\n     #[abi = \"rust-intrinsic\"]\n     extern mod rusti {\n+        #[legacy_exports];\n         fn morestack_addr() -> *();\n     }\n \n@@ -99,6 +101,7 @@ mod jit {\n }\n \n mod write {\n+    #[legacy_exports];\n     fn is_object_or_assembly_or_exe(ot: output_type) -> bool {\n         if ot == output_type_assembly || ot == output_type_object ||\n                ot == output_type_exe {"}, {"sha": "207a8f3fc94700edbe55a2cc5a6bdcda7d631a40", "filename": "src/rustc/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Frpath.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -181,6 +181,7 @@ fn minimize_rpaths(rpaths: &[Path]) -> ~[Path] {\n \n #[cfg(unix)]\n mod test {\n+    #[legacy_exports];\n     #[test]\n     fn test_rpaths_to_flags() {\n         let flags = rpaths_to_flags(~[Path(\"path1\"),"}, {"sha": "f08a067d0efb788c655ccb8b88c628301d4aec54", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -745,6 +745,7 @@ fn list_metadata(sess: session, path: &Path, out: io::Writer) {\n \n #[cfg(test)]\n mod test {\n+    #[legacy_exports];\n \n     // When the user supplies --test we should implicitly supply --cfg test\n     #[test]"}, {"sha": "2e8cddf2095b9330c655cf903c17873ad56e84b6", "filename": "src/rustc/driver/session.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fsession.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -338,6 +338,7 @@ fn sess_os_to_meta_os(os: os) -> metadata::loader::os {\n \n #[cfg(test)]\n mod test {\n+    #[legacy_exports];\n     use syntax::ast_util;\n \n     fn make_crate_type_attr(t: ~str) -> ast::attribute {"}, {"sha": "7c9b1e690afe1cc986f9693d871c65535159e4ef", "filename": "src/rustc/front/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustc%2Ffront%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustc%2Ffront%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Fintrinsic.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -2,6 +2,7 @@\n // and injected into each crate the compiler builds. Keep it small.\n \n mod intrinsic {\n+    #[legacy_exports];\n \n     pub use rusti::visit_tydesc;\n \n@@ -113,6 +114,7 @@ mod intrinsic {\n \n     #[abi = \"rust-intrinsic\"]\n     extern mod rusti {\n+        #[legacy_exports];\n         fn get_tydesc<T>() -> *();\n         fn visit_tydesc(td: *TyDesc, &&tv: TyVisitor);\n     }"}, {"sha": "e1441d9ee5e3c68b72665d4fe584d89ac76eeee0", "filename": "src/rustc/front/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Ftest.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -174,6 +174,7 @@ fn add_test_module(cx: test_ctxt, m: ast::_mod) -> ast::_mod {\n We're going to be building a module that looks more or less like:\n \n mod __test {\n+    #[legacy_exports];\n \n   fn main(args: ~[str]) -> int {\n     std::test::test_main(args, tests())"}, {"sha": "60c08dab716e08d7d7428900b353e9d447c718e9", "filename": "src/rustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Flib%2Fllvm.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -274,6 +274,7 @@ type SectionIteratorRef = *SectionIterator_opaque;\n #[link_name = \"rustllvm\"]\n #[abi = \"cdecl\"]\n extern mod llvm {\n+    #[legacy_exports];\n     /* Create and destroy contexts. */\n     fn LLVMContextCreate() -> ContextRef;\n     fn LLVMGetGlobalContext() -> ContextRef;"}, {"sha": "2d2d6a3f79ee1619fab04a29cc900a098ff063d3", "filename": "src/rustc/metadata.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustc%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustc%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -3,23 +3,29 @@\n // no dependencies on rustc it can move into its own crate.\n \n mod middle {\n+    #[legacy_exports];\n     pub use middle_::ty;\n     pub use middle_::resolve;\n }\n \n mod front {\n+    #[legacy_exports];\n }\n \n mod back {\n+    #[legacy_exports];\n }\n \n mod driver {\n+    #[legacy_exports];\n }\n \n mod util {\n+    #[legacy_exports];\n     pub use util_::ppaux;\n }\n \n mod lib {\n+    #[legacy_exports];\n     pub use lib_::llvm;\n }"}, {"sha": "87201f5a4daffc25d4439d843d6e74d0114e1352", "filename": "src/rustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flang_items.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -50,6 +50,7 @@ struct LanguageItems {\n }\n \n mod LanguageItems {\n+    #[legacy_exports];\n     fn make() -> LanguageItems {\n         LanguageItems {\n             const_trait: None,"}, {"sha": "7158754429b39b6a2d5b52d6039f744c3007790f", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 69, "deletions": 21, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -483,6 +483,13 @@ struct Module {\n \n     exported_names: HashMap<Atom,node_id>,\n \n+    // XXX: This is a transition measure to let us switch export-evaluation\n+    // logic when compiling modules that have transitioned to listing their\n+    // pub/priv qualifications on items, explicitly, rather than using the\n+    // old export rule.\n+\n+    legacy_exports: bool,\n+\n     // The status of resolving each import in this module.\n     import_resolutions: HashMap<Atom,@ImportResolution>,\n \n@@ -493,14 +500,17 @@ struct Module {\n     mut resolved_import_count: uint,\n }\n \n-fn Module(parent_link: ParentLink, def_id: Option<def_id>) -> Module {\n+fn Module(parent_link: ParentLink,\n+          def_id: Option<def_id>,\n+          legacy_exports: bool) -> Module {\n     Module {\n         parent_link: parent_link,\n         def_id: def_id,\n         children: atom_hashmap(),\n         imports: DVec(),\n         anonymous_children: HashMap(),\n         exported_names: atom_hashmap(),\n+        legacy_exports: legacy_exports,\n         import_resolutions: atom_hashmap(),\n         glob_count: 0u,\n         resolved_import_count: 0u\n@@ -577,10 +587,12 @@ struct NameBindings {\n impl NameBindings {\n \n     /// Creates a new module in this set of name bindings.\n-    fn define_module(parent_link: ParentLink, def_id: Option<def_id>,\n+    fn define_module(parent_link: ParentLink,\n+                     def_id: Option<def_id>,\n+                     legacy_exports: bool,\n                      sp: span) {\n         if self.module_def.is_none() {\n-            let module_ = @Module(parent_link, def_id);\n+            let module_ = @Module(parent_link, def_id, legacy_exports);\n             self.module_def = ModuleDef(module_);\n             self.module_span = Some(sp);\n         }\n@@ -728,13 +740,26 @@ fn namespace_to_str(ns: Namespace) -> ~str {\n     }\n }\n \n+fn has_legacy_export_attr(attrs: &[syntax::ast::attribute]) -> bool {\n+    for attrs.each |attribute| {\n+        match attribute.node.value.node {\n+          syntax::ast::meta_word(w) if w == ~\"legacy_exports\" => {\n+            return true;\n+          }\n+          _ => {}\n+        }\n+    }\n+    return false;\n+}\n+\n fn Resolver(session: session, lang_items: LanguageItems,\n             crate: @crate) -> Resolver {\n \n     let graph_root = @NameBindings();\n \n     (*graph_root).define_module(NoParentLink,\n                                 Some({ crate: 0, node: 0 }),\n+                                has_legacy_export_attr(crate.node.attrs),\n                                 crate.span);\n \n     let current_module = (*graph_root).get_module();\n@@ -885,10 +910,18 @@ impl Resolver {\n         }));\n     }\n \n-    fn visibility_to_privacy(visibility: visibility) -> Privacy {\n-        match visibility {\n-            inherited | public => Public,\n-            private => Private\n+    fn visibility_to_privacy(visibility: visibility,\n+                             legacy_exports: bool) -> Privacy {\n+        if legacy_exports {\n+            match visibility {\n+              inherited | public => Public,\n+              private => Private\n+            }\n+        } else {\n+            match visibility {\n+              public => Public,\n+              inherited | private => Private\n+            }\n         }\n     }\n \n@@ -1009,23 +1042,28 @@ impl Resolver {\n \n         let atom = item.ident;\n         let sp = item.span;\n+        let legacy = match parent {\n+          ModuleReducedGraphParent(m) => m.legacy_exports\n+        };\n \n         match item.node {\n             item_mod(module_) => {\n+              let legacy = has_legacy_export_attr(item.attrs);\n               let (name_bindings, new_parent) = self.add_child(atom, parent,\n                                                        ~[ModuleNS], sp);\n \n                 let parent_link = self.get_parent_link(new_parent, atom);\n                 let def_id = { crate: 0, node: item.id };\n               (*name_bindings).define_module(parent_link, Some(def_id),\n-                                             sp);\n+                                             legacy, sp);\n \n                 let new_parent =\n                     ModuleReducedGraphParent((*name_bindings).get_module());\n \n                 visit_mod(module_, sp, item.id, new_parent, visitor);\n             }\n             item_foreign_mod(fm) => {\n+              let legacy = has_legacy_export_attr(item.attrs);\n               let new_parent = match fm.sort {\n                 named => {\n                   let (name_bindings, new_parent) = self.add_child(atom,\n@@ -1034,7 +1072,7 @@ impl Resolver {\n                   let parent_link = self.get_parent_link(new_parent, atom);\n                   let def_id = { crate: 0, node: item.id };\n                   (*name_bindings).define_module(parent_link, Some(def_id),\n-                                                 sp);\n+                                                 legacy, sp);\n \n                   ModuleReducedGraphParent((*name_bindings).get_module())\n                 }\n@@ -1052,7 +1090,7 @@ impl Resolver {\n                                                       ~[ValueNS], sp);\n \n                 (*name_bindings).define_value\n-                    (self.visibility_to_privacy(item.vis),\n+                    (self.visibility_to_privacy(item.vis, legacy),\n                      def_const(local_def(item.id)),\n                      sp);\n             }\n@@ -1062,7 +1100,7 @@ impl Resolver {\n \n                 let def = def_fn(local_def(item.id), purity);\n                 (*name_bindings).define_value\n-                    (self.visibility_to_privacy(item.vis), def, sp);\n+                    (self.visibility_to_privacy(item.vis, legacy), def, sp);\n                 visit_item(item, new_parent, visitor);\n             }\n \n@@ -1072,7 +1110,7 @@ impl Resolver {\n                                                       ~[TypeNS], sp);\n \n                 (*name_bindings).define_type\n-                    (self.visibility_to_privacy(item.vis),\n+                    (self.visibility_to_privacy(item.vis, legacy),\n                      def_ty(local_def(item.id)),\n                      sp);\n             }\n@@ -1083,7 +1121,7 @@ impl Resolver {\n                                                                ~[TypeNS], sp);\n \n                 (*name_bindings).define_type\n-                    (self.visibility_to_privacy(item.vis),\n+                    (self.visibility_to_privacy(item.vis, legacy),\n                      def_ty(local_def(item.id)),\n                      sp);\n \n@@ -1104,7 +1142,7 @@ impl Resolver {\n                             self.add_child(atom, parent, ~[TypeNS], sp);\n \n                         (*name_bindings).define_type\n-                            (self.visibility_to_privacy(item.vis),\n+                            (self.visibility_to_privacy(item.vis, legacy),\n                              def_ty(local_def(item.id)),\n                              sp);\n                         new_parent\n@@ -1114,7 +1152,8 @@ impl Resolver {\n                             self.add_child(atom, parent, ~[ValueNS, TypeNS],\n                                            sp);\n \n-                        let privacy = self.visibility_to_privacy(item.vis);\n+                        let privacy = self.visibility_to_privacy(item.vis,\n+                                                                 legacy);\n \n                         (*name_bindings).define_type\n                             (privacy, def_ty(local_def(item.id)), sp);\n@@ -1171,7 +1210,7 @@ impl Resolver {\n                 self.trait_info.insert(def_id, method_names);\n \n                 (*name_bindings).define_type\n-                    (self.visibility_to_privacy(item.vis),\n+                    (self.visibility_to_privacy(item.vis, legacy),\n                      def_ty(def_id),\n                      sp);\n                 visit_item(item, new_parent, visitor);\n@@ -1190,10 +1229,14 @@ impl Resolver {\n                                        parent: ReducedGraphParent,\n                                        &&visitor: vt<ReducedGraphParent>) {\n \n+        let legacy = match parent {\n+          ModuleReducedGraphParent(m) => m.legacy_exports\n+        };\n+\n         let atom = variant.node.name;\n         let (child, _) = self.add_child(atom, parent, ~[ValueNS],\n                                         variant.span);\n-        let privacy = self.visibility_to_privacy(variant.node.vis);\n+        let privacy = self.visibility_to_privacy(variant.node.vis, legacy);\n \n         match variant.node.kind {\n             tuple_variant_kind(_) => {\n@@ -1228,6 +1271,7 @@ impl Resolver {\n     fn build_reduced_graph_for_view_item(view_item: @view_item,\n                                          parent: ReducedGraphParent,\n                                          &&_visitor: vt<ReducedGraphParent>) {\n+\n         match view_item.node {\n             view_item_import(view_paths) => {\n                 for view_paths.each |view_path| {\n@@ -1368,6 +1412,7 @@ impl Resolver {\n \n                         (*child_name_bindings).define_module(parent_link,\n                                                              Some(def_id),\n+                                                             false,\n                                                              view_item.span);\n                         self.build_reduced_graph_for_external_crate\n                             ((*child_name_bindings).get_module());\n@@ -1424,7 +1469,7 @@ impl Resolver {\n \n             let parent_module = self.get_module_from_parent(parent);\n             let new_module = @Module(BlockParentLink(parent_module, block_id),\n-                                     None);\n+                                     None, false);\n             parent_module.anonymous_children.insert(block_id, new_module);\n             new_parent = ModuleReducedGraphParent(new_module);\n         } else {\n@@ -1451,6 +1496,7 @@ impl Resolver {\n                   None => {\n                     child_name_bindings.define_module(parent_link,\n                                                       Some(def_id),\n+                                                      false,\n                                                       dummy_sp());\n                     modules.insert(def_id,\n                                    child_name_bindings.get_module());\n@@ -1594,7 +1640,8 @@ impl Resolver {\n                         let parent_link = self.get_parent_link(new_parent,\n                                                                ident);\n                         (*child_name_bindings).define_module(parent_link,\n-                                                       None, dummy_sp());\n+                                                       None, false,\n+                                                             dummy_sp());\n                     }\n                     ModuleDef(_) => { /* Fall through. */ }\n                 }\n@@ -2554,8 +2601,9 @@ impl Resolver {\n     }\n \n     fn name_is_exported(module_: @Module, name: Atom) -> bool {\n-        return module_.exported_names.size() == 0u ||\n-                module_.exported_names.contains_key(name);\n+        return !module_.legacy_exports ||\n+            module_.exported_names.size() == 0u ||\n+            module_.exported_names.contains_key(name);\n     }\n \n     /**"}, {"sha": "d34ae4e35f386a30562f91853938db1e57ad93a0", "filename": "src/rustc/rustc.rc", "status": "modified", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Frustc.rc?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -37,102 +37,188 @@ use middle_ = middle;\n use back_ = back;\n \n mod middle {\n+    #[legacy_exports];\n     mod trans {\n+        #[legacy_exports];\n+        #[legacy_exports]\n         mod inline;\n+        #[legacy_exports]\n         mod monomorphize;\n+        #[legacy_exports]\n         mod controlflow;\n+        #[legacy_exports]\n         mod glue;\n+        #[legacy_exports]\n         mod datum;\n+        #[legacy_exports]\n         mod callee;\n+        #[legacy_exports]\n         mod expr;\n+        #[legacy_exports]\n         mod common;\n+        #[legacy_exports]\n         mod consts;\n+        #[legacy_exports]\n         mod type_of;\n+        #[legacy_exports]\n         mod build;\n+        #[legacy_exports]\n         mod base;\n+        #[legacy_exports]\n         mod alt;\n+        #[legacy_exports]\n         mod uniq;\n+        #[legacy_exports]\n         mod closure;\n+        #[legacy_exports]\n         mod tvec;\n+        #[legacy_exports]\n         mod meth;\n+        #[legacy_exports]\n         mod foreign;\n+        #[legacy_exports]\n         mod reflect;\n+        #[legacy_exports]\n         mod shape;\n+        #[legacy_exports]\n         mod debuginfo;\n+        #[legacy_exports]\n         mod type_use;\n+        #[legacy_exports]\n         mod reachable;\n     }\n+    #[legacy_exports]\n     mod ty;\n+    #[legacy_exports]\n     mod resolve;\n     mod typeck {\n+        #[legacy_exports];\n         mod check {\n+            #[legacy_exports];\n+            #[legacy_exports]\n             mod alt;\n+            #[legacy_exports]\n             mod vtable;\n+            #[legacy_exports]\n             mod writeback;\n+            #[legacy_exports]\n             mod regionmanip;\n+            #[legacy_exports]\n             mod regionck;\n+            #[legacy_exports]\n             mod demand;\n+            #[legacy_exports]\n             mod method;\n         }\n+        #[legacy_exports]\n         mod rscope;\n+        #[legacy_exports]\n         mod astconv;\n         mod infer {\n+            #[legacy_exports];\n+            #[legacy_exports]\n             mod assignment;\n+            #[legacy_exports]\n             mod combine;\n+            #[legacy_exports]\n             mod glb;\n+            #[legacy_exports]\n             mod integral;\n+            #[legacy_exports]\n             mod lattice;\n+            #[legacy_exports]\n             mod lub;\n+            #[legacy_exports]\n             mod region_var_bindings;\n+            #[legacy_exports]\n             mod resolve;\n+            #[legacy_exports]\n             mod sub;\n+            #[legacy_exports]\n             mod to_str;\n+            #[legacy_exports]\n             mod unify;\n         }\n+        #[legacy_exports]\n         mod collect;\n+        #[legacy_exports]\n         mod coherence;\n     }\n+    #[legacy_exports]\n     mod check_loop;\n+    #[legacy_exports]\n     mod check_alt;\n+    #[legacy_exports]\n     mod check_const;\n+    #[legacy_exports]\n     mod lint;\n     mod borrowck {\n+        #[legacy_exports];\n+        #[legacy_exports]\n         mod check_loans;\n+        #[legacy_exports]\n         mod gather_loans;\n+        #[legacy_exports]\n         mod loan;\n+        #[legacy_exports]\n         mod preserve;\n     }\n+    #[legacy_exports]\n     mod mem_categorization;\n+    #[legacy_exports]\n     mod liveness;\n+    #[legacy_exports]\n     mod kind;\n+    #[legacy_exports]\n     mod freevars;\n+    #[legacy_exports]\n     mod capture;\n+    #[legacy_exports]\n     mod pat_util;\n+    #[legacy_exports]\n     mod region;\n+    #[legacy_exports]\n     mod const_eval;\n+    #[legacy_exports]\n     mod astencode;\n+    #[legacy_exports]\n     mod lang_items;\n+    #[legacy_exports]\n     mod privacy;\n }\n \n mod front {\n+    #[legacy_exports];\n+    #[legacy_exports]\n     mod config;\n+    #[legacy_exports]\n     mod test;\n+    #[legacy_exports]\n     mod core_inject;\n+    #[legacy_exports]\n     mod intrinsic_inject;\n }\n \n mod back {\n+    #[legacy_exports];\n+    #[legacy_exports]\n     mod link;\n+    #[legacy_exports]\n     mod abi;\n+    #[legacy_exports]\n     mod upcall;\n+    #[legacy_exports]\n     mod x86;\n+    #[legacy_exports]\n     mod x86_64;\n+    #[legacy_exports]\n     mod rpath;\n+    #[legacy_exports]\n     mod target_strs;\n }\n \n mod metadata {\n+    #[legacy_exports];\n     export encoder;\n     export creader;\n     export cstore;\n@@ -144,29 +230,47 @@ mod metadata {\n     export loader;\n     export filesearch;\n \n+    #[legacy_exports]\n     mod common;\n+    #[legacy_exports]\n     mod tyencode;\n+    #[legacy_exports]\n     mod tydecode;\n+    #[legacy_exports]\n     mod encoder;\n+    #[legacy_exports]\n     mod decoder;\n+    #[legacy_exports]\n     mod creader;\n+    #[legacy_exports]\n     mod cstore;\n+    #[legacy_exports]\n     mod csearch;\n+    #[legacy_exports]\n     mod loader;\n+    #[legacy_exports]\n     mod filesearch;\n }\n \n mod driver {\n+    #[legacy_exports];\n+    #[legacy_exports]\n     mod driver;\n+    #[legacy_exports]\n     mod session;\n }\n \n mod util {\n+    #[legacy_exports];\n+    #[legacy_exports]\n     mod common;\n+    #[legacy_exports]\n     mod ppaux;\n }\n \n mod lib {\n+    #[legacy_exports];\n+    #[legacy_exports]\n     mod llvm;\n }\n "}, {"sha": "d2b314adf9c99ccadb345671c771547a7e15e201", "filename": "src/rustdoc/attr_parser.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_parser.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -19,6 +19,7 @@ type CrateAttrs = {\n \n #[cfg(test)]\n mod test {\n+    #[legacy_exports];\n \n     fn parse_attributes(source: ~str) -> ~[ast::attribute] {\n         use syntax::parse;"}, {"sha": "77665977d4a1eef483957ee607762273f2fca11d", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -290,6 +290,7 @@ fn should_extract_impl_method_docs() {\n \n #[cfg(test)]\n mod test {\n+    #[legacy_exports];\n     fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");"}, {"sha": "177482a5e93cb660b1a4ba73508509ce808bd578", "filename": "src/rustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fconfig.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -294,6 +294,7 @@ fn should_error_with_no_pandoc() {\n \n #[cfg(test)]\n mod test {\n+    #[legacy_exports];\n     fn parse_config(args: ~[~str]) -> Result<Config, ~str> {\n         parse_config_(args, mock_program_output)\n     }"}, {"sha": "bf1cdf2622e43d37387376392badd298e9e2b045", "filename": "src/rustdoc/demo.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustdoc%2Fdemo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustdoc%2Fdemo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdemo.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -63,6 +63,7 @@ fn take_my_order_please(\n }\n \n mod fortress_of_solitude {\n+    #[legacy_exports];\n     /*!\n      * Superman's vacation home\n      *\n@@ -77,6 +78,7 @@ mod fortress_of_solitude {\n }\n \n mod blade_runner {\n+    #[legacy_exports];\n     /*!\n      * Blade Runner is probably the best movie ever\n      *"}, {"sha": "a1d365506ae4724d969508c2737a412ea969eba5", "filename": "src/rustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdesc_to_brief_pass.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -83,6 +83,7 @@ fn should_promote_impl_method_desc() {\n \n #[cfg(test)]\n mod test {\n+    #[legacy_exports];\n     fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");"}, {"sha": "93217f2887f91131a0f9b3d05ddfcb26624c24de", "filename": "src/rustdoc/extract.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fextract.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -328,6 +328,7 @@ fn should_extract_struct_fields() {\n \n #[cfg(test)]\n mod test {\n+    #[legacy_exports];\n \n     fn mk_doc(source: ~str) -> doc::Doc {\n         let ast = parse::from_str(source);\n@@ -377,7 +378,8 @@ mod test {\n     fn extract_fns() {\n         let doc = mk_doc(\n             ~\"fn a() { } \\\n-             mod b { fn c() { } }\");\n+             mod b {\n+                 #[legacy_exports]; fn c() { } }\");\n         assert doc.cratemod().fns()[0].name() == ~\"a\";\n         assert doc.cratemod().mods()[0].fns()[0].name() == ~\"c\";\n     }"}, {"sha": "cf97308fd0e288f34140bc32a35091d9c8a07b2d", "filename": "src/rustdoc/markdown_index_pass.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustdoc%2Fmarkdown_index_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustdoc%2Fmarkdown_index_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_index_pass.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -226,6 +226,7 @@ fn should_index_foreign_mod_contents() {\n \n #[cfg(test)]\n mod test {\n+    #[legacy_exports];\n     fn mk_doc(output_style: config::OutputStyle, source: ~str) -> doc::Doc {\n         do astsrv::from_str(source) |srv| {\n             let config = {"}, {"sha": "428628ee676a6fc0f350a76b62dfa8283a3843ca", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -61,7 +61,8 @@ fn should_write_modules_last() {\n     let markdown = test::render(\n         ~\"mod a { }\\\n          fn b() { }\\\n-         mod c { }\\\n+         mod c {\n+             #[legacy_exports]; }\\\n          fn d() { }\"\n     );\n \n@@ -334,7 +335,8 @@ fn should_write_sections() {\n         ~\"#[doc = \\\"\\\n          # Header\\n\\\n          Body\\\"]\\\n-         mod a { }\");\n+         mod a {\n+             #[legacy_exports]; }\");\n     assert str::contains(markdown, ~\"#### Header\\n\\nBody\\n\\n\");\n }\n \n@@ -795,6 +797,7 @@ fn should_write_struct_header() {\n \n #[cfg(test)]\n mod test {\n+    #[legacy_exports];\n     fn render(source: ~str) -> ~str {\n         let (srv, doc) = create_doc_srv(source);\n         let markdown = write_markdown_str_srv(srv, doc);"}, {"sha": "5749e4dcb2347b764d8d37626a94c297bdc4c2b8", "filename": "src/rustdoc/markdown_writer.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_writer.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -244,6 +244,7 @@ fn should_name_mod_file_names_by_path() {\n \n #[cfg(test)]\n mod test {\n+    #[legacy_exports];\n     fn mk_doc(name: ~str, source: ~str) -> doc::Doc {\n         do astsrv::from_str(source) |srv| {\n             let doc = extract::from_srv(srv, name);"}, {"sha": "48b57c7361da6f0d0f0bb996ff23df46c42a35f9", "filename": "src/rustdoc/page_pass.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustdoc%2Fpage_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustdoc%2Fpage_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fpage_pass.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -160,6 +160,7 @@ fn should_remove_foreign_mods_from_containing_mods() {\n \n #[cfg(test)]\n mod test {\n+    #[legacy_exports];\n     fn mk_doc_(\n         output_style: config::OutputStyle,\n         source: ~str"}, {"sha": "bf2ea216e6e7dd35994a05cb42a97845e7a22a2d", "filename": "src/rustdoc/prune_hidden_pass.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustdoc%2Fprune_hidden_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustdoc%2Fprune_hidden_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_hidden_pass.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -54,6 +54,7 @@ fn should_prune_hidden_items() {\n \n #[cfg(test)]\n mod test {\n+    #[legacy_exports];\n     fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");"}, {"sha": "1686f56e3f172b14aa393f7612e5c2fe18291084", "filename": "src/rustdoc/rustdoc.rc", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustdoc%2Frustdoc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustdoc%2Frustdoc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rc?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -11,6 +11,7 @@\n \n #[no_core];\n #[legacy_modes];\n+#[legacy_exports];\n \n #[allow(vecs_implicitly_copyable)];\n #[allow(non_implicitly_copyable_typarams)];\n@@ -23,30 +24,56 @@ extern mod syntax(vers = \"0.4\");\n use core::*;\n use std::par;\n \n+#[legacy_exports]\n mod pass;\n+#[legacy_exports]\n mod config;\n+#[legacy_exports]\n mod parse;\n+#[legacy_exports]\n mod extract;\n+#[legacy_exports]\n mod attr_parser;\n+#[legacy_exports]\n mod doc;\n+#[legacy_exports]\n mod markdown_index_pass;\n+#[legacy_exports]\n mod markdown_pass;\n+#[legacy_exports]\n mod markdown_writer;\n+#[legacy_exports]\n mod fold;\n+#[legacy_exports]\n mod path_pass;\n+#[legacy_exports]\n mod attr_pass;\n+#[legacy_exports]\n mod tystr_pass;\n+#[legacy_exports]\n mod prune_hidden_pass;\n+#[legacy_exports]\n mod desc_to_brief_pass;\n+#[legacy_exports]\n mod text_pass;\n+#[legacy_exports]\n mod unindent_pass;\n+#[legacy_exports]\n mod trim_pass;\n+#[legacy_exports]\n mod astsrv;\n+#[legacy_exports]\n mod demo;\n+#[legacy_exports]\n mod sort_pass;\n+#[legacy_exports]\n mod sort_item_name_pass;\n+#[legacy_exports]\n mod sort_item_type_pass;\n+#[legacy_exports]\n mod page_pass;\n+#[legacy_exports]\n mod sectionalize_pass;\n+#[legacy_exports]\n mod escape_pass;\n-mod prune_private_pass;\n\\ No newline at end of file\n+mod prune_private_pass;"}, {"sha": "583817aef8b6c9ddfc3ad1eea451b4dd36eb736f", "filename": "src/rustdoc/sectionalize_pass.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustdoc%2Fsectionalize_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustdoc%2Fsectionalize_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fsectionalize_pass.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -149,7 +149,8 @@ fn should_create_section_headers() {\n         ~\"#[doc = \\\"\\\n          # Header\\n\\\n          Body\\\"]\\\n-         mod a { }\");\n+         mod a {\n+             #[legacy_exports]; }\");\n     assert str::contains(\n         doc.cratemod().mods()[0].item.sections[0].header,\n         ~\"Header\");\n@@ -161,7 +162,8 @@ fn should_create_section_bodies() {\n         ~\"#[doc = \\\"\\\n          # Header\\n\\\n          Body\\\"]\\\n-         mod a { }\");\n+         mod a {\n+             #[legacy_exports]; }\");\n     assert str::contains(\n         doc.cratemod().mods()[0].item.sections[0].body,\n         ~\"Body\");\n@@ -173,7 +175,8 @@ fn should_not_create_sections_from_indented_headers() {\n         ~\"#[doc = \\\"\\n\\\n          Text\\n             # Header\\n\\\n          Body\\\"]\\\n-         mod a { }\");\n+         mod a {\n+             #[legacy_exports]; }\");\n     assert vec::is_empty(doc.cratemod().mods()[0].item.sections);\n }\n \n@@ -184,7 +187,8 @@ fn should_remove_section_text_from_main_desc() {\n          Description\\n\\n\\\n          # Header\\n\\\n          Body\\\"]\\\n-         mod a { }\");\n+         mod a {\n+             #[legacy_exports]; }\");\n     assert !str::contains(\n         option::get(doc.cratemod().mods()[0].desc()),\n         ~\"Header\");\n@@ -199,7 +203,8 @@ fn should_eliminate_desc_if_it_is_just_whitespace() {\n         ~\"#[doc = \\\"\\\n          # Header\\n\\\n          Body\\\"]\\\n-         mod a { }\");\n+         mod a {\n+             #[legacy_exports]; }\");\n     assert doc.cratemod().mods()[0].desc() == None;\n }\n \n@@ -227,6 +232,7 @@ fn should_sectionalize_impl_methods() {\n \n #[cfg(test)]\n mod test {\n+    #[legacy_exports];\n     fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");"}, {"sha": "4ace822d88c921b6fa9393ed23a29889a205d14c", "filename": "src/rustdoc/sort_item_type_pass.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustdoc%2Fsort_item_type_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustdoc%2Fsort_item_type_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fsort_item_type_pass.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -30,7 +30,8 @@ fn mk_pass() -> Pass {\n fn test() {\n     let source =\n         ~\"mod imod { } \\\n-         extern mod inmod { } \\\n+         extern mod inmod {\n+             #[legacy_exports]; } \\\n          const iconst: int = 0; \\\n          fn ifn() { } \\\n          enum ienum { ivar } \\"}, {"sha": "daa67ff3b0e75ae8db8d047b637bf5f735e0fa0a", "filename": "src/rustdoc/text_pass.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustdoc%2Ftext_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustdoc%2Ftext_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftext_pass.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -252,6 +252,7 @@ fn should_execute_on_impl_method_section_bodies() {\n \n #[cfg(test)]\n mod test {\n+    #[legacy_exports];\n     fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");"}, {"sha": "2ff6e1ea44293ec940bc172e698f0f4f689a0548", "filename": "src/rustdoc/trim_pass.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustdoc%2Ftrim_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustdoc%2Ftrim_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftrim_pass.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -16,12 +16,14 @@ fn mk_pass() -> Pass {\n #[test]\n fn should_trim_text() {\n     let doc = test::mk_doc(~\"#[doc = \\\" desc \\\"] \\\n-                            mod m { }\");\n+                            mod m {\n+                                #[legacy_exports]; }\");\n     assert doc.cratemod().mods()[0].desc() == Some(~\"desc\");\n }\n \n #[cfg(test)]\n mod test {\n+    #[legacy_exports];\n     fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");"}, {"sha": "97313e06caa4e98f0c9428f966168bd7acc4319f", "filename": "src/rustdoc/tystr_pass.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -389,6 +389,7 @@ fn should_not_serialize_struct_attrs() {\n \n #[cfg(test)]\n mod test {\n+    #[legacy_exports];\n     fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");"}, {"sha": "8f4055cd415f7de1b8470ff4082557774a7c9f94", "filename": "src/test/auxiliary/cci_class.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Fcci_class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Fcci_class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,4 +1,5 @@\n mod kitties {\n+    #[legacy_exports];\n \n struct cat {\n   priv mut meows : uint,"}, {"sha": "e572f41322c4036893a6834688d7d5504d0a3e70", "filename": "src/test/auxiliary/cci_class_2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,4 +1,5 @@\n mod kitties {\n+    #[legacy_exports];\n \n struct cat {\n   priv mut meows : uint,"}, {"sha": "79583a6134ce2bb4b81024c86eea8532f32d986c", "filename": "src/test/auxiliary/cci_class_3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,4 +1,5 @@\n mod kitties {\n+    #[legacy_exports];\n \n struct cat {\n   priv mut meows : uint,"}, {"sha": "57c6f2f4b521bf4dad3959af92374746127314b1", "filename": "src/test/auxiliary/cci_class_4.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,4 +1,5 @@\n mod kitties {\n+    #[legacy_exports];\n \n struct cat {\n   priv mut meows : uint,"}, {"sha": "94451ba4c4b12942549cd6e187527915d1de605a", "filename": "src/test/auxiliary/cci_class_5.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,4 +1,5 @@\n mod kitties {\n+    #[legacy_exports];\n \n struct cat {\n   priv {"}, {"sha": "72262781222cd399a2c6019cb786f8d1f07b0a19", "filename": "src/test/auxiliary/cci_class_6.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,4 +1,5 @@\n mod kitties {\n+    #[legacy_exports];\n \n struct cat<U> {\n   priv mut info : ~[U],"}, {"sha": "550dfb6886ab33801c3d1374a0f6641bcb3dc1c3", "filename": "src/test/auxiliary/cci_class_cast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -2,6 +2,7 @@ use to_str::*;\n use to_str::ToStr;\n \n mod kitty {\n+    #[legacy_exports];\n \n struct cat {\n   priv mut meows : uint,"}, {"sha": "78e6af4c8c7bbaccfb507d0a793eff308810a6fa", "filename": "src/test/auxiliary/cci_class_trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Fcci_class_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Fcci_class_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_trait.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,4 +1,5 @@\n mod animals {\n+    #[legacy_exports];\n \n trait noisy {\n   fn speak();"}, {"sha": "767f5d4ad68166349d48e5fb1d79a47088806a8b", "filename": "src/test/auxiliary/cci_intrinsic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Fcci_intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Fcci_intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_intrinsic.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,5 +1,6 @@\n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n+    #[legacy_exports];\n     fn atomic_xchg(dst: &mut int, src: int) -> int;\n     fn atomic_xchg_acq(dst: &mut int, src: int) -> int;\n     fn atomic_xchg_rel(dst: &mut int, src: int) -> int;"}, {"sha": "9ab96f45a34a98164ec6440ef1c6db594bc8c16c", "filename": "src/test/auxiliary/crate-method-reexport-grrrrrrr2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -5,6 +5,7 @@ export rust;\n use name_pool::add;\n \n mod name_pool {\n+    #[legacy_exports];\n \n     type name_pool = ();\n \n@@ -19,6 +20,7 @@ mod name_pool {\n }\n \n mod rust {\n+    #[legacy_exports];\n \n     import name_pool::add;\n     // FIXME #3155: this is a hack"}, {"sha": "520a207345f0df313ca1012d953fa7e5940dfe5d", "filename": "src/test/auxiliary/crateresolve7x.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Fcrateresolve7x.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Fcrateresolve7x.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve7x.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -4,11 +4,13 @@\n \n // These both have the same version but differ in other metadata\n mod a {\n+    #[legacy_exports];\n     extern mod cr_1 (name = \"crateresolve_calories\", vers = \"0.1\", calories=\"100\");\n     fn f() -> int { cr_1::f() }\n }\n \n mod b {\n+    #[legacy_exports];\n     extern mod cr_2 (name = \"crateresolve_calories\", vers = \"0.1\", calories=\"200\");\n     fn f() -> int { cr_2::f() }\n }"}, {"sha": "80bf51f31e13b236a668801598023bdd886a39a5", "filename": "src/test/auxiliary/extern-crosscrate-source.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -4,6 +4,7 @@\n #[crate_type = \"lib\"];\n \n extern mod rustrt {\n+    #[legacy_exports];\n     fn rust_dbg_call(cb: *u8,\n                      data: libc::uintptr_t) -> libc::uintptr_t;\n }"}, {"sha": "6ea28255421bed249ddca4d8a06fde647cbdf05a", "filename": "src/test/auxiliary/foreign_lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,5 +1,6 @@\n #[link(name=\"foreign_lib\", vers=\"0.0\")];\n \n extern mod rustrt {\n+    #[legacy_exports];\n     fn last_os_error() -> ~str;\n }\n\\ No newline at end of file"}, {"sha": "a9d371321f887ddb84b630f58159ab425442df05", "filename": "src/test/auxiliary/issue-3012-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -2,6 +2,7 @@\n #[crate_type = \"lib\"];\n \n mod socket {\n+    #[legacy_exports];\n \n export socket_handle;\n "}, {"sha": "d30028e44cfb136623f3574f377ac6367eb82ba3", "filename": "src/test/auxiliary/issue_2316_b.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Fissue_2316_b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Fissue_2316_b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2316_b.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,6 +1,7 @@\n extern mod issue_2316_a;\n \n mod cloth {\n+    #[legacy_exports];\n \n use issue_2316_a::*;\n "}, {"sha": "f97a645ca8f4f384e974b057f4a2e6da4f7cca3a", "filename": "src/test/auxiliary/noexporttypelib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Fnoexporttypelib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Fnoexporttypelib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fnoexporttypelib.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,3 +1,4 @@\n+#[legacy_exports];\n export foo;\n type oint = Option<int>;\n fn foo() -> oint { Some(3) }"}, {"sha": "159a1e1b8ba028195f55db3859a1b4be7104088c", "filename": "src/test/auxiliary/static-methods-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -2,7 +2,7 @@\n        vers = \"0.1\")];\n \n #[crate_type = \"lib\"];\n-\n+#[legacy_exports];\n export read, readMaybe;\n \n trait read {"}, {"sha": "7e5474df906641c7abf14a888e510346a733a8d3", "filename": "src/test/auxiliary/test_comm.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Ftest_comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fauxiliary%2Ftest_comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftest_comm.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -91,6 +91,7 @@ type port_id = int;\n \n #[abi = \"cdecl\"]\n extern mod rustrt {\n+    #[legacy_exports];\n \n     fn new_port(unit_sz: libc::size_t) -> *rust_port;\n     fn del_port(po: *rust_port);\n@@ -104,6 +105,7 @@ extern mod rustrt {\n \n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n+    #[legacy_exports];\n     fn init<T>() -> T;\n }\n "}, {"sha": "129c1ad5a8ed586e5c434cdbb2455d7512a2f9a1", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -10,6 +10,7 @@ extern mod std;\n // an llvm intrinsic.\n #[nolink]\n extern mod libc {\n+    #[legacy_exports];\n     fn sqrt(n: float) -> float;\n }\n \n@@ -30,6 +31,7 @@ fn main(args: ~[~str]) {\n }\n \n mod NBodySystem {\n+    #[legacy_exports];\n \n     fn make() -> ~[Body::props] {\n         let bodies: ~[Body::props] =\n@@ -128,6 +130,7 @@ mod NBodySystem {\n }\n \n mod Body {\n+    #[legacy_exports];\n \n     const PI: float = 3.141592653589793;\n     const SOLAR_MASS: float = 39.478417604357432;"}, {"sha": "95155a8d28355a6e71349e8cabdd7e7647eebe57", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -109,6 +109,7 @@ fn box<T>(+x: T) -> box<T> {\n }\n \n mod map_reduce {\n+    #[legacy_exports];\n     export putter;\n     export getter;\n     export mapper;"}, {"sha": "6d7ffae620c69d8ed30325b23348a989c58cef3b", "filename": "src/test/compile-fail/attr-bad-meta.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fattr-bad-meta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fattr-bad-meta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattr-bad-meta.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -2,4 +2,5 @@\n \n // asterisk is bogus\n #[attr*]\n-mod m { }\n+mod m {\n+    #[legacy_exports]; }"}, {"sha": "e38ca8443bc11417ef4cd60a58c985099a609cb7", "filename": "src/test/compile-fail/bad-expr-path.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fbad-expr-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fbad-expr-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-expr-path.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,5 +1,6 @@\n // error-pattern: unresolved name: m1::a\n \n-mod m1 { }\n+mod m1 {\n+    #[legacy_exports]; }\n \n fn main(args: ~[str]) { log(debug, m1::a); }"}, {"sha": "a7f23df1c66365a494abefc7bc4300bcd874f82e", "filename": "src/test/compile-fail/bad-expr-path2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fbad-expr-path2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fbad-expr-path2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-expr-path2.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,7 +1,9 @@\n // error-pattern: unresolved name: m1::a\n \n mod m1 {\n-    mod a { }\n+    #[legacy_exports];\n+    mod a {\n+        #[legacy_exports]; }\n }\n \n fn main(args: ~[str]) { log(debug, m1::a); }"}, {"sha": "91b2c95b8a766c5b354f7e29bd4c44740cc1a241", "filename": "src/test/compile-fail/crateresolve2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fcrateresolve2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fcrateresolve2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcrateresolve2.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -6,6 +6,7 @@\n extern mod crateresolve2(vers = \"0.1\");\n \n mod m {\n+    #[legacy_exports];\n     extern mod crateresolve2(vers = \"0.2\");\n }\n "}, {"sha": "c9f2775329c2b694012bbff4574935244250dd6c", "filename": "src/test/compile-fail/empty-linkname.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fempty-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fempty-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-linkname.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -2,4 +2,5 @@\n \n #[link_name = \"\"]\n extern mod foo {\n+    #[legacy_exports];\n }"}, {"sha": "faf283ef4a1d7177d2cb138cac919bd84186cdcc", "filename": "src/test/compile-fail/empty-linkname2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fempty-linkname2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fempty-linkname2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-linkname2.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -4,4 +4,5 @@\n #[link_name = \"\"]\n #[nolink]\n extern mod foo {\n+    #[legacy_exports];\n }"}, {"sha": "5a711ff95bd044f956b0f854c015b948adab8713", "filename": "src/test/compile-fail/export-fully-qualified.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fexport-fully-qualified.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fexport-fully-qualified.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexport-fully-qualified.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -5,6 +5,7 @@\n // want to change eventually.\n \n mod foo {\n+    #[legacy_exports];\n \n     export bar;\n "}, {"sha": "c6a9d3c05282e954d925234a5a6bb61c94d48e9f", "filename": "src/test/compile-fail/export-import.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fexport-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fexport-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexport-import.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -3,6 +3,7 @@\n use m::unexported;\n \n mod m {\n+    #[legacy_exports];\n     export exported;\n \n     fn exported() { }"}, {"sha": "ceedf719dd3a3df0f75a7515e9f93e9f23722c19", "filename": "src/test/compile-fail/export-tag-variant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fexport-tag-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fexport-tag-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexport-tag-variant.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,6 +1,7 @@\n // error-pattern: unresolved name\n \n mod foo {\n+    #[legacy_exports];\n     export x;\n \n     fn x() { }"}, {"sha": "69485a0ead5a535734c0158f3886e74f9932bbb7", "filename": "src/test/compile-fail/export.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexport.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,5 +1,6 @@\n // error-pattern: unresolved name\n mod foo {\n+    #[legacy_exports];\n     export x;\n     fn x(y: int) { log(debug, y); }\n     fn z(y: int) { log(debug, y); }"}, {"sha": "b1912397f4c3a604cde4adab18ae690ffd6f6739", "filename": "src/test/compile-fail/export2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fexport2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fexport2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexport2.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,12 +1,14 @@\n // error-pattern: unresolved name\n \n mod foo {\n+    #[legacy_exports];\n     export x;\n \n     fn x() { bar::x(); }\n }\n \n mod bar {\n+    #[legacy_exports];\n     export y;\n \n     fn x() { debug!(\"x\"); }"}, {"sha": "db1d3195eec8ebb232a0bae0ff90884fd7595fdf", "filename": "src/test/compile-fail/foreign-unsafe-fn-called.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn-called.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn-called.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn-called.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -2,6 +2,7 @@\n \n #[abi = \"cdecl\"]\n extern mod test {\n+    #[legacy_exports];\n     unsafe fn free();\n }\n "}, {"sha": "03c16199843d9d67b848def23f6d2ef5949ad169", "filename": "src/test/compile-fail/foreign-unsafe-fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -2,6 +2,7 @@\n \n #[abi = \"cdecl\"]\n extern mod test {\n+    #[legacy_exports];\n     unsafe fn free();\n }\n "}, {"sha": "454e7012d3792bc5eb513fc236f2a0b9ef14c79d", "filename": "src/test/compile-fail/fully-qualified-type-name2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name2.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,10 +1,12 @@\n // Test that we use fully-qualified type names in error messages.\n \n mod x {\n+    #[legacy_exports];\n     enum foo { }\n }\n \n mod y {\n+    #[legacy_exports];\n     enum foo { }\n }\n "}, {"sha": "9b408100eee4a94126d38b09a1be1e2cee45c107", "filename": "src/test/compile-fail/import-from-missing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fimport-from-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fimport-from-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-from-missing.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -3,6 +3,7 @@\n use spam::{ham, eggs};\n \n mod spam {\n+    #[legacy_exports];\n     fn ham() { }\n }\n "}, {"sha": "bbcb6e478829c98e1c203cd4d12a00109ce8c93d", "filename": "src/test/compile-fail/import-from-rename.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fimport-from-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fimport-from-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-from-rename.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -3,6 +3,7 @@\n use baz = foo::{bar};\n \n mod foo {\n+    #[legacy_exports];\n     fn bar() {}\n }\n "}, {"sha": "7ce73b7787ff99e068df30ea749e2cbb2aa0a59d", "filename": "src/test/compile-fail/import-glob-0.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fimport-glob-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fimport-glob-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-0.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -3,6 +3,7 @@\n use module_of_many_things::*;\n \n mod module_of_many_things {\n+    #[legacy_exports];\n     export f1;\n     export f2;\n     export f4;"}, {"sha": "091b1e783b76553e15fbbcc0e0968206d7c923c5", "filename": "src/test/compile-fail/import-glob-circular.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,6 +1,7 @@\n // error-pattern: unresolved\n \n mod circ1 {\n+    #[legacy_exports];\n     use circ1::*;\n     export f1;\n     export f2;\n@@ -10,6 +11,7 @@ mod circ1 {\n }\n \n mod circ2 {\n+    #[legacy_exports];\n     use circ2::*;\n     export f1;\n     export f2;\n@@ -19,6 +21,7 @@ mod circ2 {\n }\n \n mod test {\n+    #[legacy_exports];\n     use circ1::*;\n \n     fn test() { f1066(); }"}, {"sha": "4e62df3cc00e1278983b8384e7c4e10086281453", "filename": "src/test/compile-fail/import-glob-export.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fimport-glob-export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fimport-glob-export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-export.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -4,6 +4,7 @@\n use m1::*;\n \n mod m1 {\n+    #[legacy_exports];\n     export f1;\n     fn f1() { }\n     fn f2() { }"}, {"sha": "24fe3fd74b92e8ce8bf9debea5182e2fa218b40f", "filename": "src/test/compile-fail/import-glob-rename.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fimport-glob-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fimport-glob-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-rename.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -3,6 +3,7 @@\n use baz = foo::*;\n \n mod foo {\n+    #[legacy_exports];\n     fn bar() {}\n }\n "}, {"sha": "6a4d31c2ef3cec0012e2c4bf5c4a4d5c545bdfa7", "filename": "src/test/compile-fail/import-loop-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fimport-loop-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fimport-loop-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-loop-2.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,11 +1,13 @@\n // error-pattern:import\n \n mod a {\n+    #[legacy_exports];\n     import b::x;\n     export x;\n }\n \n mod b {\n+    #[legacy_exports];\n     import a::x;\n     export x;\n "}, {"sha": "11745f302bf6e6af06462b73f6c548afa9a43e21", "filename": "src/test/compile-fail/import-loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fimport-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fimport-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-loop.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -3,6 +3,7 @@\n use y::x;\n \n mod y {\n+    #[legacy_exports];\n     import x;\n     export x;\n }"}, {"sha": "6863d2b1a7a47d8b99e4d263d0c3d8344ca6bc5a", "filename": "src/test/compile-fail/import.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -3,6 +3,7 @@\n use zed::bar;\n use zed::baz;\n mod zed {\n+    #[legacy_exports];\n     fn bar() { debug!(\"bar\"); }\n }\n fn main(args: ~[str]) { bar(); }"}, {"sha": "7b1f258a9dbf5b772bd46a5b3849ae98160fd48b", "filename": "src/test/compile-fail/import2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport2.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,7 +1,9 @@\n // error-pattern: unresolved\n use baz::zed::bar;\n-mod baz { }\n+mod baz {\n+    #[legacy_exports]; }\n mod zed {\n+    #[legacy_exports];\n     fn bar() { debug!(\"bar3\"); }\n }\n fn main(args: ~[str]) { bar(); }"}, {"sha": "22068f1badf006b02944c3a52e8e1e131aa64f74", "filename": "src/test/compile-fail/import4.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fimport4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fimport4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport4.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,6 +1,8 @@\n // error-pattern: import\n \n-mod a { import foo = b::foo; export foo; }\n-mod b { import foo = a::foo; export foo; }\n+mod a {\n+    #[legacy_exports]; import foo = b::foo; export foo; }\n+mod b {\n+    #[legacy_exports]; import foo = a::foo; export foo; }\n \n fn main(args: ~[str]) { debug!(\"loop\"); }"}, {"sha": "ba21c995adb25c929c326034fe7ea65d64b5a15f", "filename": "src/test/compile-fail/issue-1193.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fissue-1193.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fissue-1193.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1193.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,5 +1,6 @@\n // error-pattern: pattern variable conflicts\n mod foo {\n+    #[legacy_exports];\n     type t = u8;\n \n     const a : t = 0u8;"}, {"sha": "91a3c3f25c0b19af57cedc5adc75121172e8b8a6", "filename": "src/test/compile-fail/issue-1655.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fissue-1655.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fissue-1655.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1655.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,5 +1,6 @@\n // error-pattern:expected item\n mod blade_runner {\n+    #[legacy_exports];\n     #~[doc(\n         brief = \"Blade Runner is probably the best movie ever\",\n         desc = \"I like that in the world of Blade Runner it is always"}, {"sha": "4912433c2adcf0a65b24de3208e2efcef6f69c46", "filename": "src/test/compile-fail/issue-2123.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fissue-2123.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fissue-2123.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2123.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -3,6 +3,7 @@\n use x = m::f;\n \n mod m {\n+    #[legacy_exports];\n }\n \n fn main() {"}, {"sha": "fa519453ca2139994043b6c2ccebc60471187814", "filename": "src/test/compile-fail/issue-2718-a.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -4,6 +4,7 @@ struct send_packet<T: Copy> {\n \n \n mod pingpong {\n+    #[legacy_exports];\n     type ping = send_packet<pong>;\n     enum pong = send_packet<ping>; //~ ERROR illegal recursive enum type; wrap the inner value in a box to make it representable\n }"}, {"sha": "28042e77a5e4948cef4be8c87ceddad8cb9ee508", "filename": "src/test/compile-fail/issue-2766-a.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fissue-2766-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fissue-2766-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2766-a.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,6 +1,8 @@\n mod stream {\n+    #[legacy_exports];\n     enum stream<T: Send> { send(T, server::stream<T>), }\n     mod server {\n+        #[legacy_exports];\n         impl<T: Send> stream<T> {\n             fn recv() -> extern fn(+stream<T>) -> stream::stream<T> {\n               // resolve really should report just one error here."}, {"sha": "689b8240140a1577be7df42d4217084299307c94", "filename": "src/test/compile-fail/issue-2848.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fissue-2848.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fissue-2848.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2848.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,4 +1,5 @@\n mod bar {\n+    #[legacy_exports];\n     enum foo {\n         alpha,\n         beta,"}, {"sha": "85ba4c2eabf8a2ad153402222ce67fb4be310649", "filename": "src/test/compile-fail/issue-2937.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fissue-2937.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fissue-2937.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2937.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -2,6 +2,7 @@\n use x = m::f;\n \n mod m {\n+    #[legacy_exports];\n }\n \n fn main() {"}, {"sha": "997bb9e25571d68390567f3de1c26a652b317918", "filename": "src/test/compile-fail/issue-3099-b.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fissue-3099-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fissue-3099-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3099-b.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,5 +1,7 @@\n+#[legacy_exports]\n mod a {}\n \n+#[legacy_exports]\n mod a {} //~ ERROR Duplicate definition of module a\n \n fn main() {}"}, {"sha": "e39046fa9f7decec4767f53c2e1c2c63b0215504", "filename": "src/test/compile-fail/keyword.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkeyword.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,3 +1,4 @@\n+#[legacy_exports]\n mod break {\n     //~^ ERROR found `break` in ident position\n }\n\\ No newline at end of file"}, {"sha": "d17aed4d5a732fdfa3c7869a76a447fd436b6615", "filename": "src/test/compile-fail/nolink-with-link-args.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fnolink-with-link-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fnolink-with-link-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnolink-with-link-args.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -6,6 +6,7 @@ the compiler output. */\n \n #[link_args = \"aFdEfSeVEEE\"]\n #[nolink]\n-extern mod m1 { }\n+extern mod m1 {\n+    #[legacy_exports]; }\n \n fn main() { }\n\\ No newline at end of file"}, {"sha": "a94bc37e132271f2cfab725ca9173f9a68955091", "filename": "src/test/compile-fail/private-impl-method.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fprivate-impl-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fprivate-impl-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-impl-method.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,4 +1,5 @@\n mod a {\n+    #[legacy_exports];\n     struct Foo {\n         x: int\n     }"}, {"sha": "b39c51c1846eaa6365d35e7ae4155ffda158fed4", "filename": "src/test/compile-fail/private-item-simple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fprivate-item-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fprivate-item-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-item-simple.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,4 +1,5 @@\n mod a {\n+    #[legacy_exports];\n     priv fn f() {}\n }\n "}, {"sha": "0b4dd71da6408d6d9f947fef68d44cb510356fb1", "filename": "src/test/compile-fail/private-method.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,6 +1,7 @@\n // error-pattern:method `nap` is private\n \n mod kitties {\n+    #[legacy_exports];\n struct cat {\n   priv mut meows : uint,\n "}, {"sha": "a766a7ed66adca4fb7f11e96c1f36c45f07f2e5f", "filename": "src/test/compile-fail/private-struct-field-ctor.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-ctor.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,4 +1,5 @@\n mod a {\n+    #[legacy_exports];\n     struct Foo {\n         priv x: int\n     }"}, {"sha": "4ab5934c287e8d476376e40481b306f17047c844", "filename": "src/test/compile-fail/private-struct-field-pattern.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-pattern.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,6 +1,7 @@\n use a::Foo;\n \n mod a {\n+    #[legacy_exports];\n     struct Foo {\n         priv x: int\n     }"}, {"sha": "1ec9ffcd3067109398c7e6482193f159c77df398", "filename": "src/test/compile-fail/private-struct-field.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,4 +1,5 @@\n mod cat {\n+    #[legacy_exports];\n     struct Cat {\n         priv meows: uint\n     }"}, {"sha": "12d2ee401ef7dc463477a2edb5a15482227a9f94", "filename": "src/test/compile-fail/private-variant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fprivate-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fprivate-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-variant.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,4 +1,5 @@\n mod a {\n+    #[legacy_exports];\n     enum Waffle {\n         Belgian,\n         Brussels,"}, {"sha": "88d0e4a53ee6e80b3c329a3b66e337b7356b1a16", "filename": "src/test/compile-fail/redundant-link-args.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fredundant-link-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fredundant-link-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fredundant-link-args.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -9,9 +9,11 @@\n #[link_name= \"m\"]\n #[link_args=\"-foo\"]             // this could have been elided.\n extern mod m1 {\n+    #[legacy_exports];\n }\n \n #[link_name= \"m\"]\n #[link_args=\"-bar\"]             // this is the actual error trigger.\n extern mod m2 {\n+    #[legacy_exports];\n }"}, {"sha": "223665381da1e3eb87d88cb936167dfd82a72acb", "filename": "src/test/compile-fail/regions-glb-free-free.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,4 +1,5 @@\n mod argparse {\n+    #[legacy_exports];\n     extern mod std;\n \n     use either::{Either, Left, Right};"}, {"sha": "24f423400aa0e93c52ebfbeb182f9e97b0696017", "filename": "src/test/compile-fail/unused-imports-warn.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Funused-imports-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Funused-imports-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-imports-warn.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -3,12 +3,15 @@\n use cal = bar::c::cc;\n \n mod foo {\n+    #[legacy_exports];\n     type point = {x: int, y: int};\n     type square = {p: point, h: uint, w: uint};\n }\n \n mod bar {\n+    #[legacy_exports];\n     mod c {\n+        #[legacy_exports];\n         use foo::point;\n         use foo::square;\n         fn cc(p: point) -> str { return 2 * (p.x + p.y); }"}, {"sha": "8c8bcd58a4fc1d987b6177c5ee5d11c289532e21", "filename": "src/test/compile-fail/warn-ctypes-err-attr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes-err-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes-err-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes-err-attr.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -3,6 +3,7 @@\n \n #[nolink]\n extern mod libc {\n+    #[legacy_exports];\n     fn malloc(size: int) -> *u8;\n }\n "}, {"sha": "76b18e7094cd20ecd2cdb1325af91afd5671a975", "filename": "src/test/compile-fail/warn-ctypes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -2,6 +2,7 @@\n // error-pattern:found rust type\n #[nolink]\n extern mod libc {\n+    #[legacy_exports];\n     fn malloc(size: int) -> *u8;\n }\n "}, {"sha": "8322a25543e8fa2b4ba64197a745aff5e5af37eb", "filename": "src/test/compile-fail/warn-foreign-int-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fwarn-foreign-int-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Fcompile-fail%2Fwarn-foreign-int-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwarn-foreign-int-types.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,5 +1,6 @@\n //error-pattern:libc::c_int or libc::c_long should be used\n extern mod xx {\n+    #[legacy_exports];\n   fn strlen(str: *u8) -> uint;\n   fn foo(x: int, y: uint);\n }"}, {"sha": "405cd5fdb84e29c1d1282f4d8c15bda54aa30a89", "filename": "src/test/run-fail/extern-fail.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fextern-fail.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -3,6 +3,7 @@\n // Instead the failure will be delivered after the callbacks return.\n \n extern mod rustrt {\n+    #[legacy_exports];\n     fn rust_dbg_call(cb: *u8,\n                      data: libc::uintptr_t) -> libc::uintptr_t;\n }"}, {"sha": "d0b6f727b64a5e7f7c89282ef46c3017881d8a5a", "filename": "src/test/run-fail/morestack2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack2.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -8,6 +8,7 @@\n extern mod std;\n \n extern mod rustrt {\n+    #[legacy_exports];\n     fn last_os_error() -> ~str;\n }\n "}, {"sha": "59da245d114615ae1be2cb49dff846683efb191a", "filename": "src/test/run-fail/run-unexported-tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -4,6 +4,7 @@\n extern mod std;\n \n mod m {\n+    #[legacy_exports];\n     export exported;\n \n     fn exported() { }"}, {"sha": "5c6ef554bb6ab0d70649ec22b5abdc0a9f71ff2b", "filename": "src/test/run-pass/alt-path.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Falt-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Falt-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-path.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,6 +1,7 @@\n \n \n mod m1 {\n+    #[legacy_exports];\n     enum foo { foo1, foo2, }\n }\n "}, {"sha": "94747db0a8a189504f57a80d1163ec224ebf4335", "filename": "src/test/run-pass/attr-before-view-item2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,6 +1,7 @@\n // error-pattern:expected item\n \n mod m {\n+    #[legacy_exports];\n   #[foo = \"bar\"]\n   extern mod std;\n }"}, {"sha": "0cc828132c944ca783bcfa0aaaf8f14458583770", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -73,6 +73,7 @@ fn test_ptr() unsafe {\n #[abi = \"cdecl\"]\n #[nolink]\n extern mod test {\n+    #[legacy_exports];\n     fn rust_get_sched_id() -> libc::intptr_t;\n     fn get_task_id() -> libc::intptr_t;\n }"}, {"sha": "5786b334af7278d3e8268d039e1626b3c9fab635", "filename": "src/test/run-pass/box-annihilator-shared.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fbox-annihilator-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fbox-annihilator-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-annihilator-shared.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,4 +1,5 @@\n extern mod rustrt {\n+    #[legacy_exports];\n     fn rust_annihilate_box(ptr: *uint);\n }\n "}, {"sha": "45449cc6382504fb1ef35013cc39c12643494dc5", "filename": "src/test/run-pass/box-annihilator-unique-vec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fbox-annihilator-unique-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fbox-annihilator-unique-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-annihilator-unique-vec.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,4 +1,5 @@\n extern mod rustrt {\n+    #[legacy_exports];\n     fn rust_annihilate_box(ptr: *uint);\n }\n "}, {"sha": "a2d11654f9a7551337df8c33dd18e85fc72c7f50", "filename": "src/test/run-pass/box-annihilator-unique.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fbox-annihilator-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fbox-annihilator-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-annihilator-unique.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,4 +1,5 @@\n extern mod rustrt {\n+    #[legacy_exports];\n     fn rust_annihilate_box(ptr: *uint);\n }\n "}, {"sha": "1046a0e78a2306522805b43a28c1bfa443376084", "filename": "src/test/run-pass/c-stack-as-value.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,5 +1,6 @@\n #[abi = \"cdecl\"]\n extern mod rustrt {\n+    #[legacy_exports];\n     fn get_task_id() -> libc::intptr_t;\n }\n "}, {"sha": "e812e23bdea71418d898dd23456236a0ef5dc2db", "filename": "src/test/run-pass/c-stack-returning-int64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -3,6 +3,7 @@ extern mod std;\n #[abi = \"cdecl\"]\n #[nolink]\n extern mod libc {\n+    #[legacy_exports];\n     fn atol(x: *u8) -> int;\n     fn atoll(x: *u8) -> i64;\n }"}, {"sha": "58543158b07f4ac95ce1cea958b9e49f95ad9356", "filename": "src/test/run-pass/class-exports.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-exports.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -4,6 +4,7 @@\n use kitty::*;\n \n mod kitty {\n+    #[legacy_exports];\n   export cat;\n   struct cat {\n     meows: uint,"}, {"sha": "8736345c9827c8bbd6bad48462ce77ea1c5e6e1f", "filename": "src/test/run-pass/companionmod.rc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fcompanionmod.rc", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fcompanionmod.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcompanionmod.rc?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,13 +1,19 @@\n // xfail-win32 don't understand what's wrong\n // Test that crates and directory modules can contain code\n+#[legacy_exports];\n \n #[path = \"companionmod-src\"]\n mod a {\n+    #[legacy_exports];\n     mod b {\n+        #[legacy_exports];\n+        #[legacy_exports]\n         mod x;\n     }\n     #[path = \"d\"]\n     mod c {\n+        #[legacy_exports];\n+        #[legacy_exports]\n         mod x;\n     }\n }"}, {"sha": "ff15fe580567aed921d2adc43a02cefd3a03a1ff", "filename": "src/test/run-pass/companionmod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fcompanionmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fcompanionmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcompanionmod.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,6 +1,7 @@\n // This isn't really xfailed; it's used by the companionmod.rc test\n // xfail-test\n \n+#[legacy_exports];\n fn main() {\n     assert a::b::g() == ~\"ralph\";\n     assert a::c::g() == ~\"nelson\";"}, {"sha": "bc97114b581e628894596c92a740d2fd0a158f53", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -6,13 +6,15 @@ const b: bool = true;\n #[cfg(bogus)]\n #[abi = \"cdecl\"]\n extern mod rustrt {\n+    #[legacy_exports];\n     // This symbol doesn't exist and would be a link error if this\n     // module was translated\n     fn bogus();\n }\n \n #[abi = \"cdecl\"]\n-extern mod rustrt { }\n+extern mod rustrt {\n+    #[legacy_exports]; }\n \n #[cfg(bogus)]\n type t = int;\n@@ -48,12 +50,14 @@ fn r(i:int) -> r {\n \n #[cfg(bogus)]\n mod m {\n+    #[legacy_exports];\n     // This needs to parse but would fail in typeck. Since it's not in\n     // the current config it should not be typechecked.\n     fn bogus() { return 0; }\n }\n \n mod m {\n+    #[legacy_exports];\n \n     // Submodules have slightly different code paths than the top-level\n     // module, so let's make sure this jazz works here as well\n@@ -91,19 +95,23 @@ fn test_in_fn_ctxt() {\n }\n \n mod test_foreign_items {\n+    #[legacy_exports];\n     #[abi = \"cdecl\"]\n     extern mod rustrt {\n+        #[legacy_exports];\n         #[cfg(bogus)]\n         fn rust_getcwd() -> ~str;\n         fn rust_getcwd() -> ~str;\n     }\n }\n \n mod test_use_statements {\n+    #[legacy_exports];\n     #[cfg(bogus)]\n     use flippity_foo;\n \n     extern mod rustrt {\n+        #[legacy_exports];\n         #[cfg(bogus)]\n         use flippity_foo;\n     }"}, {"sha": "7086ebf2ea8733cad205ce0612894d2c4c71cd30", "filename": "src/test/run-pass/crate-attributes-src/foo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fcrate-attributes-src%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fcrate-attributes-src%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrate-attributes-src%2Ffoo.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,4 +1,5 @@\n // These are attributes of the foo module\n+#[legacy_exports];\n #[attr1 = \"val\"];\n #[attr2 = \"val\"];\n "}, {"sha": "2ee41913f40d14fbcb167f60e1daac94a108bc26", "filename": "src/test/run-pass/crate-attributes.rc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fcrate-attributes.rc", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fcrate-attributes.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrate-attributes.rc?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -4,8 +4,10 @@\n #[attr1]\n #[path = \"crate-attributes-src\"]\n mod m {\n+    #[legacy_exports];\n   #[attr_inner];\n \n   #[attr2]\n+    #[legacy_exports]\n   mod foo;\n }"}, {"sha": "cd1aad3e63f54528fd78eff0f97efb43cc371185", "filename": "src/test/run-pass/crateresolve2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fcrateresolve2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fcrateresolve2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrateresolve2.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -4,16 +4,19 @@\n // aux-build:crateresolve2-3.rs\n \n mod a {\n+    #[legacy_exports];\n     extern mod crateresolve2(vers = \"0.1\");\n     fn f() { assert crateresolve2::f() == 10; }\n }\n \n mod b {\n+    #[legacy_exports];\n     extern mod crateresolve2(vers = \"0.2\");\n     fn f() { assert crateresolve2::f() == 20; }\n }\n \n mod c {\n+    #[legacy_exports];\n     extern mod crateresolve2(vers = \"0.3\");\n     fn f() { assert crateresolve2::f() == 30; }\n }"}, {"sha": "db7a36e35bfb2b4aa0f4bec1b2d207160eb11c4d", "filename": "src/test/run-pass/crateresolve3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fcrateresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fcrateresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrateresolve3.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -6,11 +6,13 @@\n // as long as no name collision on invoked functions.\n \n mod a {\n+    #[legacy_exports];\n     extern mod crateresolve3(vers = \"0.1\");\n     fn f() { assert crateresolve3::f() == 10; }\n }\n \n mod b {\n+    #[legacy_exports];\n     extern mod crateresolve3(vers = \"0.2\");\n     fn f() { assert crateresolve3::g() == 20; }\n }"}, {"sha": "24764b4ba833f1a5c192e38f8e8e7dd029cc3035", "filename": "src/test/run-pass/crateresolve4.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fcrateresolve4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fcrateresolve4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrateresolve4.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -5,11 +5,13 @@\n // aux-build:crateresolve4b-2.rs\n \n mod a {\n+    #[legacy_exports];\n     extern mod crateresolve4b(vers = \"0.1\");\n     fn f() { assert crateresolve4b::f() == 20; }\n }\n \n mod b {\n+    #[legacy_exports];\n     extern mod crateresolve4b(vers = \"0.2\");\n     fn f() { assert crateresolve4b::g() == 10; }\n }"}, {"sha": "b482f64ec8a21c2e998b160f3bca69a09a8e467f", "filename": "src/test/run-pass/export-abstract-tag.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fexport-abstract-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fexport-abstract-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-abstract-tag.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -2,6 +2,7 @@\n // sort of ADT.\n \n mod foo {\n+    #[legacy_exports];\n     export t;\n     export f;\n "}, {"sha": "500d74c1b87b0371554a856e362e9afae7f38ce0", "filename": "src/test/run-pass/export-glob-imports-target.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fexport-glob-imports-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fexport-glob-imports-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-glob-imports-target.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -4,8 +4,10 @@\n // Modified to not use export since it's going away. --pcw\n \n mod foo {\n+    #[legacy_exports];\n     use bar::*;\n     mod bar {\n+        #[legacy_exports];\n         const a : int = 10;\n     }\n     fn zum() {"}, {"sha": "3f3ecb68250be17fa7d75ae4b5f63f68dc1baaf3", "filename": "src/test/run-pass/export-glob.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fexport-glob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fexport-glob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-glob.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -4,9 +4,11 @@\n // Modified to not use export since it's going away. --pcw\n \n mod foo {\n+    #[legacy_exports];\n     use bar::*;\n     export a;\n     mod bar {\n+        #[legacy_exports];\n         const a : int = 10;\n     }\n }"}, {"sha": "5e978df00174427a4ff995f885cd6e4a640e6c1e", "filename": "src/test/run-pass/export-multi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fexport-multi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fexport-multi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-multi.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -2,6 +2,7 @@ use m::f;\n use m::g;\n \n mod m {\n+    #[legacy_exports];\n     export f, g;\n \n     fn f() { }"}, {"sha": "345a7dec5ea3ba8fa9bbba0086480490f23456f3", "filename": "src/test/run-pass/export-non-interference2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fexport-non-interference2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fexport-non-interference2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-non-interference2.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,8 +1,10 @@\n mod foo {\n+    #[legacy_exports];\n \n     export bar;\n \n     mod bar {\n+        #[legacy_exports];\n         fn y() { x(); }\n     }\n "}, {"sha": "a0c9f35fa7264b24fd3d3b29fde05103e1203b7a", "filename": "src/test/run-pass/export-non-interference3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fexport-non-interference3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fexport-non-interference3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-non-interference3.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,10 +1,12 @@\n mod foo {\n+    #[legacy_exports];\n     export x;\n \n     fn x() { bar::x(); }\n }\n \n mod bar {\n+    #[legacy_exports];\n     export x;\n \n     fn x() { debug!(\"x\"); }"}, {"sha": "c8d0267a73fe600666374afa05f8cd83ca6407bc", "filename": "src/test/run-pass/export-tag-variant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fexport-tag-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fexport-tag-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-tag-variant.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,6 +1,7 @@\n // Export the enum variants, without the enum\n \n mod foo {\n+    #[legacy_exports];\n     export t1;\n     enum t { t1, }\n }"}, {"sha": "65cbb7e30ee6eb3e9f6c4c2107bf9a9d8d4dc7d2", "filename": "src/test/run-pass/export-unexported-dep.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fexport-unexported-dep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fexport-unexported-dep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-unexported-dep.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -2,6 +2,7 @@\n // that are not exported, allowing for a sort of poor-man's ADT\n \n mod foo {\n+    #[legacy_exports];\n     export f;\n     export g;\n "}, {"sha": "e0e79788acdf24a103ad974fd028cc43e37884f1", "filename": "src/test/run-pass/expr-scope.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fexpr-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fexpr-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-scope.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,5 +1,7 @@\n // Regression test for issue #762\n // xfail-fast\n \n+#[legacy_exports];\n+\n fn f() { }\n fn main() { return ::f(); }"}, {"sha": "e275bcedf38e6e3e525927982dd16671ea604018", "filename": "src/test/run-pass/extern-call-deep.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,4 +1,5 @@\n extern mod rustrt {\n+    #[legacy_exports];\n     fn rust_dbg_call(cb: *u8,\n                      data: libc::uintptr_t) -> libc::uintptr_t;\n }"}, {"sha": "aae46660b31ec16d1751fe1e2cffd9d499ea2457", "filename": "src/test/run-pass/extern-call-deep2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,4 +1,5 @@\n extern mod rustrt {\n+    #[legacy_exports];\n     fn rust_dbg_call(cb: *u8,\n                      data: libc::uintptr_t) -> libc::uintptr_t;\n }"}, {"sha": "58677d18c1f48d0949456d640603913e54704528", "filename": "src/test/run-pass/extern-call-scrub.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -3,6 +3,7 @@\n // directions\n \n extern mod rustrt {\n+    #[legacy_exports];\n     fn rust_dbg_call(cb: *u8,\n                      data: libc::uintptr_t) -> libc::uintptr_t;\n }"}, {"sha": "5fb62e7c18571df764bfaa6f6f8d66213a87c063", "filename": "src/test/run-pass/extern-call.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fextern-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fextern-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,4 +1,5 @@\n extern mod rustrt {\n+    #[legacy_exports];\n     fn rust_dbg_call(cb: *u8,\n                      data: libc::uintptr_t) -> libc::uintptr_t;\n }"}, {"sha": "ef2ab539d05c64f2833a05cf2468f699f3f9317d", "filename": "src/test/run-pass/extern-stress.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-stress.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -2,6 +2,7 @@\n // while holding onto C stacks\n \n extern mod rustrt {\n+    #[legacy_exports];\n     fn rust_dbg_call(cb: *u8,\n                      data: libc::uintptr_t) -> libc::uintptr_t;\n }"}, {"sha": "890bb90a35e05a43b27bb28506271318ab103816", "filename": "src/test/run-pass/extern-yield.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-yield.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,4 +1,5 @@\n extern mod rustrt {\n+    #[legacy_exports];\n     fn rust_dbg_call(cb: *u8,\n                      data: libc::uintptr_t) -> libc::uintptr_t;\n }"}, {"sha": "24077785f4a2de9c8f199990febdf0dfb9dcfcbd", "filename": "src/test/run-pass/foreign-dupe.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -4,12 +4,14 @@\n #[abi = \"cdecl\"]\n #[link_name = \"rustrt\"]\n extern mod rustrt1 {\n+    #[legacy_exports];\n     fn last_os_error() -> ~str;\n }\n \n #[abi = \"cdecl\"]\n #[link_name = \"rustrt\"]\n extern mod rustrt2 {\n+    #[legacy_exports];\n     fn last_os_error() -> ~str;\n }\n "}, {"sha": "b55eb9445cfb1c138dab2520370942a478daf186", "filename": "src/test/run-pass/foreign-fn-linkname.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -4,6 +4,7 @@ extern mod std;\n #[nolink]\n #[abi = \"cdecl\"]\n extern mod libc {\n+    #[legacy_exports];\n     #[link_name = \"strlen\"]\n     fn my_strlen(str: *u8) -> uint;\n }"}, {"sha": "b777e6f9a70186acd3a22d18ce5d2a8c66bd799d", "filename": "src/test/run-pass/foreign-lib-path.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fforeign-lib-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fforeign-lib-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-lib-path.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -6,6 +6,7 @@\n // wouthout providing a -L argument to the compiler, and that\n // will also be found successfully at runtime.\n extern mod WHATGOESHERE {\n+    #[legacy_exports];\n     fn IDONTKNOW() -> u32;\n }\n "}, {"sha": "a8cb2d2eae25027f8fc7fa7a820a92e474e6c8c1", "filename": "src/test/run-pass/foreign-mod-unused-const.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fforeign-mod-unused-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fforeign-mod-unused-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-mod-unused-const.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,5 +1,6 @@\n #[nolink]\n extern mod foo {\n+    #[legacy_exports];\n     const errno: int;\n }\n "}, {"sha": "5a5641f7e1f760e2ccacdfbcfb4d7fc9b56fbcd2", "filename": "src/test/run-pass/foreign-no-abi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fforeign-no-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fforeign-no-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-no-abi.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,6 +1,7 @@\n // ABI is cdecl by default\n \n extern mod rustrt {\n+    #[legacy_exports];\n     fn get_task_id() -> libc::intptr_t;\n }\n "}, {"sha": "d9389eb6ac9d7fac207a90b5fb3f7338b629d9f8", "filename": "src/test/run-pass/foreign-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fforeign-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fforeign-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-struct.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -5,6 +5,7 @@ enum void { }\n \n #[nolink]\n extern mod bindgen {\n+    #[legacy_exports];\n     fn printf(++v: void);\n }\n "}, {"sha": "a2678225658b61432074d73d61fffd3818903c70", "filename": "src/test/run-pass/foreign2.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fforeign2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fforeign2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign2.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,20 +1,24 @@\n #[abi = \"cdecl\"]\n #[nolink]\n-extern mod bar { }\n+extern mod bar {\n+    #[legacy_exports]; }\n \n #[abi = \"cdecl\"]\n #[nolink]\n-extern mod zed { }\n+extern mod zed {\n+    #[legacy_exports]; }\n \n #[abi = \"cdecl\"]\n #[nolink]\n extern mod libc {\n+    #[legacy_exports];\n     fn write(fd: int, buf: *u8,\n              count: core::libc::size_t) -> core::libc::ssize_t;\n }\n \n #[abi = \"cdecl\"]\n #[nolink]\n-extern mod baz { }\n+extern mod baz {\n+    #[legacy_exports]; }\n \n fn main(args: ~[~str]) { }"}, {"sha": "bd2bb3cff63e8aac19d46a3a273e886705094196", "filename": "src/test/run-pass/generic-fn-twice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fgeneric-fn-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fgeneric-fn-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-twice.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -3,6 +3,7 @@\n \n // -*- rust -*-\n mod foomod {\n+    #[legacy_exports];\n     fn foo<T>() { }\n }\n "}, {"sha": "66b86465cc4e5fa2c17a5e9bd8b8f23268920fcd", "filename": "src/test/run-pass/global-scope.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fglobal-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fglobal-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fglobal-scope.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,8 +1,11 @@\n // xfail-fast\n \n+#[legacy_exports];\n+\n fn f() -> int { return 1; }\n \n mod foo {\n+    #[legacy_exports];\n     fn f() -> int { return 2; }\n     fn g() { assert (f() == 2); assert (::f() == 1); }\n }"}, {"sha": "24163cfa5664249a0464de25f915ceb6ea78914d", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -18,6 +18,7 @@ use comm::recv;\n fn map(filename: ~str, emit: map_reduce::putter) { emit(filename, ~\"1\"); }\n \n mod map_reduce {\n+    #[legacy_exports];\n     export putter;\n     export mapper;\n     export map_reduce;"}, {"sha": "e9eec1c6a2acaf9c01beffb7077c535fe2a9816b", "filename": "src/test/run-pass/import-from-foreign.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fimport-from-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fimport-from-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-from-foreign.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,10 +1,12 @@\n mod spam {\n+    #[legacy_exports];\n     fn ham() { }\n     fn eggs() { }\n }\n \n #[abi = \"cdecl\"]\n extern mod rustrt {\n+    #[legacy_exports];\n     use spam::{ham, eggs};\n     export ham;\n     export eggs;"}, {"sha": "814f31bc011b679bae4a82b5d75182bc28d88a0d", "filename": "src/test/run-pass/import-from.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fimport-from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fimport-from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-from.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,6 +1,7 @@\n use spam::{ham, eggs};\n \n mod spam {\n+    #[legacy_exports];\n     fn ham() { }\n     fn eggs() { }\n }"}, {"sha": "9ba29123388fad7bfec8bdd20b725e61d8235a2c", "filename": "src/test/run-pass/import-glob-0.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fimport-glob-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fimport-glob-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-0.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -2,6 +2,7 @@ use module_of_many_things::*;\n use dug::too::greedily::and::too::deep::*;\n \n mod module_of_many_things {\n+    #[legacy_exports];\n     export f1;\n     export f2;\n     export f4;\n@@ -12,11 +13,17 @@ mod module_of_many_things {\n }\n \n mod dug {\n+    #[legacy_exports];\n     mod too {\n+        #[legacy_exports];\n         mod greedily {\n+            #[legacy_exports];\n             mod and {\n+                #[legacy_exports];\n                 mod too {\n+                    #[legacy_exports];\n                     mod deep {\n+                        #[legacy_exports];\n                         fn nameless_fear() { debug!(\"Boo!\"); }\n                         fn also_redstone() { debug!(\"Whatever.\"); }\n                     }"}, {"sha": "5039a7344df1501f897a4e4e2b1677a2e6e71be0", "filename": "src/test/run-pass/import-glob-1.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fimport-glob-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fimport-glob-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-1.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,15 +1,18 @@\n use a1::b1::word_traveler;\n \n mod a1 {\n+    #[legacy_exports];\n     //\n     mod b1 {\n+        #[legacy_exports];\n         //\n         use a2::b1::*;\n         //         <-\\\n         export word_traveler; //           |\n     }\n     //           |\n     mod b2 {\n+        #[legacy_exports];\n         //           |\n         use a2::b2::*;\n         // <-\\  -\\   |\n@@ -19,17 +22,20 @@ mod a1 {\n //   |   |   |\n //   |   |   |\n mod a2 {\n+    #[legacy_exports];\n     //   |   |   |\n     #[abi = \"cdecl\"]\n     #[nolink]\n     extern mod b1 {\n+        #[legacy_exports];\n         //   |   |   |\n         use a1::b2::*;\n         //   | <-/  -/\n         export word_traveler; //   |\n     }\n     //   |\n     mod b2 {\n+        #[legacy_exports];\n         //   |\n         fn word_traveler() { //   |\n             debug!(\"ahoy!\"); //  -/"}, {"sha": "2e4e29c2d7121a1dd5f6803876577888da4baa1a", "filename": "src/test/run-pass/import-trailing-comma.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fimport-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fimport-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-trailing-comma.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,7 +1,9 @@\n use foo::bar::{baz, quux,};\n \n mod foo {\n+    #[legacy_exports];\n     mod bar {\n+        #[legacy_exports];\n         fn baz() { }\n         fn quux() { }\n     }"}, {"sha": "3a2b8996c4d7eb1704d284351e89b9070d52327b", "filename": "src/test/run-pass/import.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,8 +1,10 @@\n mod foo {\n+    #[legacy_exports];\n     fn x(y: int) { log(debug, y); }\n }\n \n mod bar {\n+    #[legacy_exports];\n     use foo::x;\n     use z = foo::x;\n     fn thing() { x(10); z(10); }"}, {"sha": "1cb58ffb911d90847fcbb3f22c117f326b0390a4", "filename": "src/test/run-pass/import2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fimport2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fimport2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport2.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -2,6 +2,7 @@\n use zed::bar;\n \n mod zed {\n+    #[legacy_exports];\n     fn bar() { debug!(\"bar\"); }\n }\n "}, {"sha": "3fd1fecd607b5b20ce89383690ee42c4ab921db3", "filename": "src/test/run-pass/import3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fimport3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fimport3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport3.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -3,7 +3,9 @@ use baz::zed;\n use zed::bar;\n \n mod baz {\n+    #[legacy_exports];\n     mod zed {\n+        #[legacy_exports];\n         fn bar() { debug!(\"bar2\"); }\n     }\n }"}, {"sha": "4a9f78a069b616a46df33596ead400d58c966725", "filename": "src/test/run-pass/import4.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fimport4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fimport4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport4.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -2,6 +2,7 @@\n use zed::bar;\n \n mod zed {\n+    #[legacy_exports];\n     fn bar() { debug!(\"bar\"); }\n }\n "}, {"sha": "5a00df6833d3d38e67d04f09dfb4e154fcc658b8", "filename": "src/test/run-pass/import5.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fimport5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fimport5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport5.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,8 +1,10 @@\n use foo::bar;\n mod foo {\n+    #[legacy_exports];\n     use zed::bar;\n     export bar;\n     mod zed {\n+        #[legacy_exports];\n         fn bar() { debug!(\"foo\"); }\n     }\n }"}, {"sha": "ee1cd582099f0170180de6f4bcb643199afd7efb", "filename": "src/test/run-pass/import6.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fimport6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fimport6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport6.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,11 +1,14 @@\n use foo::zed;\n use bar::baz;\n mod foo {\n+    #[legacy_exports];\n     mod zed {\n+        #[legacy_exports];\n         fn baz() { debug!(\"baz\"); }\n     }\n }\n mod bar {\n+    #[legacy_exports];\n     use zed::baz;\n     export baz;\n }"}, {"sha": "e1a0235b0306c7cb9898cdbef5c9718d641c5e03", "filename": "src/test/run-pass/import7.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fimport7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fimport7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport7.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,15 +1,20 @@\n use foo::zed;\n use bar::baz;\n mod foo {\n+    #[legacy_exports];\n     mod zed {\n+        #[legacy_exports];\n         fn baz() { debug!(\"baz\"); }\n     }\n }\n mod bar {\n+    #[legacy_exports];\n     use zed::baz;\n     export baz;\n     mod foo {\n-        mod zed { }\n+        #[legacy_exports];\n+        mod zed {\n+            #[legacy_exports]; }\n     }\n }\n fn main(args: ~[~str]) { baz(); }"}, {"sha": "51d99da43023b91288e944ad853d3e6234e2afe7", "filename": "src/test/run-pass/import8.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fimport8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fimport8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport8.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -3,6 +3,7 @@ use foo::x;\n use z = foo::x;\n \n mod foo {\n+    #[legacy_exports];\n     fn x(y: int) { log(debug, y); }\n }\n "}, {"sha": "f65a66db559b2b6c44020e13376bd77d66442b06", "filename": "src/test/run-pass/inner-module.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Finner-module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Finner-module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finner-module.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -3,7 +3,9 @@\n \n // -*- rust -*-\n mod inner {\n+    #[legacy_exports];\n     mod inner2 {\n+        #[legacy_exports];\n         fn hello() { debug!(\"hello, modular world\"); }\n     }\n     fn hello() { inner2::hello(); }"}, {"sha": "ad46eec8882b4ba0ae8b9ef5ee7d648863223b36", "filename": "src/test/run-pass/intrinsic-alignment.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -2,6 +2,7 @@\n \n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n+    #[legacy_exports];\n     fn pref_align_of<T>() -> uint;\n     fn min_align_of<T>() -> uint;\n }\n@@ -10,6 +11,7 @@ extern mod rusti {\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"freebsd\")]\n mod m {\n+    #[legacy_exports];\n     #[cfg(target_arch = \"x86\")]\n     fn main() {\n         assert rusti::pref_align_of::<u64>() == 8u;\n@@ -25,6 +27,7 @@ mod m {\n \n #[cfg(target_os = \"win32\")]\n mod m {\n+    #[legacy_exports];\n     #[cfg(target_arch = \"x86\")]\n     fn main() {\n         assert rusti::pref_align_of::<u64>() == 8u;"}, {"sha": "2629afa4909fb914e13ba8546d5ec8a3a790f060", "filename": "src/test/run-pass/intrinsic-atomics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,5 +1,6 @@\n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n+    #[legacy_exports];\n     fn atomic_xchg(dst: &mut int, src: int) -> int;\n     fn atomic_xchg_acq(dst: &mut int, src: int) -> int;\n     fn atomic_xchg_rel(dst: &mut int, src: int) -> int;"}, {"sha": "ba28c5ea8a66b9325e8b41102df0c9017df28c6f", "filename": "src/test/run-pass/intrinsic-frame-address.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fintrinsic-frame-address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fintrinsic-frame-address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-frame-address.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -2,6 +2,7 @@\n #[legacy_modes];\n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n+    #[legacy_exports];\n     fn frame_address(f: fn(*u8));\n }\n "}, {"sha": "b7f2115f45da1705c75645c3698ee08a84392827", "filename": "src/test/run-pass/intrinsic-move-val.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,5 +1,6 @@\n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n+    #[legacy_exports];\n     fn move_val_init<T>(&dst: T, -src: T);\n     fn move_val<T>(&dst: T, -src: T);\n }"}, {"sha": "0417c18b844a57c844acae50bb1a02e357ac4b16", "filename": "src/test/run-pass/issue-1251.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fissue-1251.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fissue-1251.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1251.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,6 +1,7 @@\n #[link(name = \"get_task_id\")];\n \n extern mod rustrt {\n+    #[legacy_exports];\n       fn get_task_id() -> libc::intptr_t;\n }\n "}, {"sha": "b6435a8ff20acb17b90f4134039af4626041552b", "filename": "src/test/run-pass/issue-1866.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fissue-1866.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fissue-1866.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1866.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,14 +1,18 @@\n // xfail-test\n mod a {\n+    #[legacy_exports];\n     type rust_task = uint;\n     extern mod rustrt {\n+        #[legacy_exports];\n         fn rust_task_is_unwinding(rt: *rust_task) -> bool;\n     }\n }\n \n mod b {\n+    #[legacy_exports];\n     type rust_task = bool;\n     extern mod rustrt {\n+        #[legacy_exports];\n         fn rust_task_is_unwinding(rt: *rust_task) -> bool;\n     }\n }"}, {"sha": "11437f6cf4583cc731ccd409c7b53f5b1bedfd81", "filename": "src/test/run-pass/issue-2214.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fissue-2214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fissue-2214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2214.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -12,6 +12,7 @@ fn lgamma(n: c_double, value: &mut int) -> c_double {\n #[link_name = \"m\"]\n #[abi = \"cdecl\"]\n extern mod m {\n+    #[legacy_exports];\n     #[cfg(unix)]\n     #[link_name=\"lgamma_r\"] fn lgamma(n: c_double, sign: &mut c_int)\n       -> c_double;"}, {"sha": "6da4349ba5fcf51f0be58ab7e9350118e10166d4", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,4 +1,5 @@\n mod pipes {\n+    #[legacy_exports];\n     use cast::{forget, transmute};\n \n     enum state {\n@@ -32,6 +33,7 @@ mod pipes {\n \n     #[abi = \"rust-intrinsic\"]\n     mod rusti {\n+        #[legacy_exports];\n       fn atomic_xchg(_dst: &mut int, _src: int) -> int { fail; }\n       fn atomic_xchg_acq(_dst: &mut int, _src: int) -> int { fail; }\n       fn atomic_xchg_rel(_dst: &mut int, _src: int) -> int { fail; }\n@@ -193,6 +195,7 @@ mod pipes {\n }\n \n mod pingpong {\n+    #[legacy_exports];\n     enum ping = pipes::send_packet<pong>;\n     enum pong = pipes::send_packet<ping>;\n \n@@ -219,6 +222,7 @@ mod pingpong {\n     }\n \n     mod client {\n+        #[legacy_exports];\n         type ping = pipes::send_packet<pingpong::ping>;\n         type pong = pipes::recv_packet<pingpong::pong>;\n \n@@ -239,6 +243,7 @@ mod pingpong {\n     }\n \n     mod server {\n+        #[legacy_exports];\n         type ping = pipes::recv_packet<pingpong::ping>;\n         type pong = pipes::send_packet<pingpong::pong>;\n "}, {"sha": "704e8f79fb11ff5d47e376332f0518c576b1ad4c", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -61,6 +61,7 @@ fn read_board_grid<rdr: Owned io::Reader>(+in: rdr) -> ~[~[square]] {\n }\n \n mod test {\n+    #[legacy_exports];\n     #[test]\n     fn trivial_to_str() {\n         assert lambda.to_str() == \"\\\\\""}, {"sha": "93669c4489615caba0632e63ebec7003f954a47b", "filename": "src/test/run-pass/issue-506.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fissue-506.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fissue-506.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-506.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -8,6 +8,7 @@ extern mod std;\n \n #[abi = \"cdecl\"]\n extern mod rustrt {\n+    #[legacy_exports];\n     fn rust_dbg_do_nothing();\n }\n "}, {"sha": "a3451da6f9acbe7ac0451583b83c7bffd9c7c393", "filename": "src/test/run-pass/item-attributes.rs", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-attributes.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -15,9 +15,11 @@\n // These are are attributes of the following mod\n #[attr1 = \"val\"]\n #[attr2 = \"val\"]\n-mod test_first_item_in_file_mod { }\n+mod test_first_item_in_file_mod {\n+    #[legacy_exports]; }\n \n mod test_single_attr_outer {\n+    #[legacy_exports];\n \n     #[attr = \"val\"]\n     const x: int = 10;\n@@ -26,14 +28,17 @@ mod test_single_attr_outer {\n     fn f() { }\n \n     #[attr = \"val\"]\n-    mod mod1 { }\n+    mod mod1 {\n+        #[legacy_exports]; }\n \n     #[attr = \"val\"]\n     #[abi = \"cdecl\"]\n-    extern mod rustrt { }\n+    extern mod rustrt {\n+        #[legacy_exports]; }\n }\n \n mod test_multi_attr_outer {\n+    #[legacy_exports];\n \n     #[attr1 = \"val\"]\n     #[attr2 = \"val\"]\n@@ -45,19 +50,22 @@ mod test_multi_attr_outer {\n \n     #[attr1 = \"val\"]\n     #[attr2 = \"val\"]\n-    mod mod1 { }\n+    mod mod1 {\n+        #[legacy_exports]; }\n \n     #[attr1 = \"val\"]\n     #[attr2 = \"val\"]\n     #[abi = \"cdecl\"]\n-    extern mod rustrt { }\n+    extern mod rustrt {\n+        #[legacy_exports]; }\n \n     #[attr1 = \"val\"]\n     #[attr2 = \"val\"]\n     type t = {x: int};\n }\n \n mod test_stmt_single_attr_outer {\n+    #[legacy_exports];\n \n     fn f() {\n \n@@ -70,17 +78,20 @@ mod test_stmt_single_attr_outer {\n         /* FIXME: Issue #493\n         #[attr = \"val\"]\n         mod mod1 {\n+            #[legacy_exports];\n         }\n \n         #[attr = \"val\"]\n         #[abi = \"cdecl\"]\n         extern mod rustrt {\n+            #[legacy_exports];\n         }\n         */\n     }\n }\n \n mod test_stmt_multi_attr_outer {\n+    #[legacy_exports];\n \n     fn f() {\n \n@@ -96,28 +107,34 @@ mod test_stmt_multi_attr_outer {\n         #[attr1 = \"val\"]\n         #[attr2 = \"val\"]\n         mod mod1 {\n+            #[legacy_exports];\n         }\n \n         #[attr1 = \"val\"]\n         #[attr2 = \"val\"]\n         #[abi = \"cdecl\"]\n         extern mod rustrt {\n+            #[legacy_exports];\n         }\n         */\n     }\n }\n \n mod test_attr_inner {\n+    #[legacy_exports];\n \n     mod m {\n+        #[legacy_exports];\n         // This is an attribute of mod m\n         #[attr = \"val\"];\n     }\n }\n \n mod test_attr_inner_then_outer {\n+    #[legacy_exports];\n \n     mod m {\n+        #[legacy_exports];\n         // This is an attribute of mod m\n         #[attr = \"val\"];\n         // This is an attribute of fn f\n@@ -127,7 +144,9 @@ mod test_attr_inner_then_outer {\n }\n \n mod test_attr_inner_then_outer_multi {\n+    #[legacy_exports];\n     mod m {\n+        #[legacy_exports];\n         // This is an attribute of mod m\n         #[attr1 = \"val\"];\n         #[attr2 = \"val\"];\n@@ -139,6 +158,7 @@ mod test_attr_inner_then_outer_multi {\n }\n \n mod test_distinguish_syntax_ext {\n+    #[legacy_exports];\n \n     extern mod std;\n \n@@ -150,6 +170,7 @@ mod test_distinguish_syntax_ext {\n }\n \n mod test_other_forms {\n+    #[legacy_exports];\n     #[attr]\n     #[attr(word)]\n     #[attr(attr(word))]\n@@ -158,8 +179,10 @@ mod test_other_forms {\n }\n \n mod test_foreign_items {\n+    #[legacy_exports];\n     #[abi = \"cdecl\"]\n     extern mod rustrt {\n+        #[legacy_exports];\n         #[attr];\n \n         #[attr]\n@@ -168,6 +191,7 @@ mod test_foreign_items {\n }\n \n mod test_literals {\n+    #[legacy_exports];\n     #[str = \"s\"];\n     #[char = 'c'];\n     #[int = 100];\n@@ -177,7 +201,8 @@ mod test_literals {\n     #[mach_float = 1.0f32];\n     #[nil = ()];\n     #[bool = true];\n-    mod m { }\n+    mod m {\n+        #[legacy_exports]; }\n }\n \n fn test_fn_inner() {"}, {"sha": "d05419d155c2e992d9c2272210a61c982f9b8393", "filename": "src/test/run-pass/item-name-overload.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fitem-name-overload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fitem-name-overload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-name-overload.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -3,10 +3,12 @@\n \n // -*- rust -*-\n mod foo {\n+    #[legacy_exports];\n     fn baz() { }\n }\n \n mod bar {\n+    #[legacy_exports];\n     fn baz() { }\n }\n "}, {"sha": "48c78c959ce182e70e29731bc9f6e3d5835a07ca", "filename": "src/test/run-pass/keyword-changes-2012-07-31.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fkeyword-changes-2012-07-31.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fkeyword-changes-2012-07-31.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fkeyword-changes-2012-07-31.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -6,6 +6,7 @@ fn main() {\n }\n \n mod foo {\n+    #[legacy_exports];\n }\n \n fn bar() -> int {"}, {"sha": "9f13966eefb78de54fe36c76dbd299f6af61c06b", "filename": "src/test/run-pass/mod-inside-fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fmod-inside-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fmod-inside-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmod-inside-fn.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,5 +1,6 @@\n fn f() -> int {\n     mod m {\n+        #[legacy_exports];\n         fn g() -> int { 720 }\n     }\n "}, {"sha": "c849fc01b6694496d981191289283aa5aac4745a", "filename": "src/test/run-pass/mod-view-items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fmod-view-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fmod-view-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmod-view-items.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -5,6 +5,7 @@\n // begin failing.\n \n mod m {\n+    #[legacy_exports];\n     use core::vec;\n     fn f() -> ~[int] { vec::from_elem(1u, 0) }\n }"}, {"sha": "bce2d80e045a87ac11150a9ded267437d3152319", "filename": "src/test/run-pass/module-polymorphism.rc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fmodule-polymorphism.rc", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fmodule-polymorphism.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmodule-polymorphism.rc?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,42 +1,51 @@\n #[path = \"module-polymorphism-files\"]\n mod my_float {\n+    #[legacy_exports];\n \n     // The type of the float\n     use inst::T;\n \n     // Define T as float\n     #[path = \"inst_float.rs\"]\n+    #[legacy_exports]\n     mod inst;\n \n     // Add in the implementation from a single source file\n     #[path = \"template.rs\"]\n+    #[legacy_exports]\n     mod template;\n \n }\n \n #[path = \"module-polymorphism-files\"]\n mod my_f64 {\n+    #[legacy_exports];\n \n     use inst::T;\n \n     // Define T as f64\n     #[path = \"inst_f64.rs\"]\n+    #[legacy_exports]\n     mod inst;\n \n     // Use the implementation for the same source file!\n     #[path = \"template.rs\"]\n+    #[legacy_exports]\n     mod template;\n \n }\n \n #[path = \"module-polymorphism-files\"]\n mod my_f32 {\n+    #[legacy_exports];\n     use inst::T;\n \n     #[path = \"inst_f32.rs\"]\n+    #[legacy_exports]\n     mod inst;\n \n     #[path = \"template.rs\"]\n+    #[legacy_exports]\n     mod template;\n \n }"}, {"sha": "49cd60fc0a93a2a00c5dfccdfbb7b6133b89fdc0", "filename": "src/test/run-pass/module-polymorphism2.rc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fmodule-polymorphism2.rc", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fmodule-polymorphism2.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmodule-polymorphism2.rc?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,8 +1,10 @@\n #[path = \"module-polymorphism2-files\"]\n mod mystd {\n+    #[legacy_exports];\n \n     #[path = \"float-template\"]\n     mod float {\n+        #[legacy_exports];\n         // The type of the float\n         use inst::T;\n \n@@ -12,16 +14,19 @@ mod mystd {\n \n         // Define T as float\n         #[path = \"inst_float.rs\"]\n+        #[legacy_exports]\n         mod inst;\n \n         // Add in the implementation from a single source file\n         #[path = \"template.rs\"]\n+        #[legacy_exports]\n         mod template;\n     }\n \n \n     #[path = \"float-template\"]\n     mod f64 {\n+        #[legacy_exports];\n \n         use inst::T;\n \n@@ -31,26 +36,31 @@ mod mystd {\n \n         // Define T as f64\n         #[path = \"inst_f64.rs\"]\n+        #[legacy_exports]\n         mod inst;\n \n         // Use the implementation for the same source file!\n         #[path = \"template.rs\"]\n+        #[legacy_exports]\n         mod template;\n \n     }\n \n     #[path = \"float-template\"]\n     mod f32 {\n+        #[legacy_exports];\n         use inst::T;\n \n         // Unfortunate\n         use template::*;\n         export plus;\n \n         #[path = \"inst_f32.rs\"]\n+        #[legacy_exports]\n         mod inst;\n \n         #[path = \"template.rs\"]\n+        #[legacy_exports]\n         mod template;\n \n     }"}, {"sha": "27d9753d9d520fb9bcb353daedbce0eeeff4f239", "filename": "src/test/run-pass/module-polymorphism3.rc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fmodule-polymorphism3.rc", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fmodule-polymorphism3.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmodule-polymorphism3.rc?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -3,10 +3,12 @@\n \n #[path = \"module-polymorphism3-files\"]\n mod mystd {\n+    #[legacy_exports];\n \n     // The template is specified in float-template.rs\n     #[path = \"float-template\"]\n     mod float {\n+        #[legacy_exports];\n         // The type of the float\n         use inst::T;\n \n@@ -18,6 +20,7 @@ mod mystd {\n     // Use the same template\n     #[path = \"float-template\"]\n     mod f64 {\n+        #[legacy_exports];\n \n         use inst::T;\n \n@@ -28,6 +31,7 @@ mod mystd {\n \n     #[path = \"float-template\"]\n     mod f32 {\n+        #[legacy_exports];\n         use inst::T;\n \n         #[path = \"inst_f32.rs\"]"}, {"sha": "4cb7acf8f03b7e5de5ab4c600f2f8dd6359f3bcd", "filename": "src/test/run-pass/module-polymorphism4.rc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fmodule-polymorphism4.rc", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fmodule-polymorphism4.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmodule-polymorphism4.rc?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,26 +1,32 @@\n \n #[path = \"module-polymorphism4-files\"]\n mod cat {\n+    #[legacy_exports];\n \n     use inst::*;\n \n     #[path = \"cat.rs\"]\n+    #[legacy_exports]\n     mod inst;\n \n     #[path = \"trait_.rs\"]\n+    #[legacy_exports]\n     mod trait_;\n \n }\n \n #[path = \"module-polymorphism4-files\"]\n mod dog {\n+    #[legacy_exports];\n \n     use inst::*;\n \n     #[path = \"dog.rs\"]\n+    #[legacy_exports]\n     mod inst;\n \n     #[path = \"trait_.rs\"]\n+    #[legacy_exports]\n     mod trait_;\n \n }"}, {"sha": "5779bd356e96c1b6a6a6577e48da7997c53678fc", "filename": "src/test/run-pass/morestack-address.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fmorestack-address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fmorestack-address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack-address.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,6 +1,7 @@\n #[nolink]\n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n+    #[legacy_exports];\n     fn morestack_addr() -> *();\n }\n "}, {"sha": "0d44e264688c6d8e7207992709db73c572191482", "filename": "src/test/run-pass/morestack6.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack6.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -2,6 +2,7 @@\n // external symbols as close to the red zone as possible.\n \n extern mod rustrt {\n+    #[legacy_exports];\n     fn debug_get_stk_seg() -> *u8;\n \n     fn rust_get_sched_id() -> libc::intptr_t;"}, {"sha": "61c81030bbabf5d846e0d114c04b8035d2c1a55e", "filename": "src/test/run-pass/multi.rc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fmulti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fmulti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmulti.rc?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,8 +1,11 @@\n #[path = \"multi-src\"]\n mod multi {\n+    #[legacy_exports];\n   // implicitly #[path = \"foo.rs\"]\n+  #[legacy_exports]\n   mod foo;\n \n   #[path  = \"bar.rs\"]\n+  #[legacy_exports]\n   mod bar;\n }"}, {"sha": "5711e6df5552696b6c02bb65431ae88277917927", "filename": "src/test/run-pass/nil-decl-in-foreign.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fnil-decl-in-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fnil-decl-in-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnil-decl-in-foreign.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,6 +1,7 @@\n // Issue #901\n #[nolink]\n extern mod libc {\n+    #[legacy_exports];\n     fn printf(x: ());\n }\n fn main() { }\n\\ No newline at end of file"}, {"sha": "47440d2fa5b9c07d277b8f638eebf024ef245849", "filename": "src/test/run-pass/path.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpath.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,6 +1,7 @@\n \n \n mod foo {\n+    #[legacy_exports];\n     fn bar(offset: uint) { }\n }\n "}, {"sha": "f9f091131ab7d130c43bffb8597b37a4a89b9789", "filename": "src/test/run-pass/pipe-pingpong-bounded.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -7,6 +7,7 @@\n // This was generated initially by the pipe compiler, but it's been\n // modified in hopefully straightforward ways.\n mod pingpong {\n+    #[legacy_exports];\n     use pipes::*;\n \n     type packets = {\n@@ -33,6 +34,7 @@ mod pingpong {\n     enum ping = server::pong;\n     enum pong = client::ping;\n     mod client {\n+        #[legacy_exports];\n         fn ping(+pipe: ping) -> pong {\n             {\n                 let b = pipe.reuse_buffer();\n@@ -49,6 +51,7 @@ mod pingpong {\n         pingpong::packets>;\n     }\n     mod server {\n+        #[legacy_exports];\n         type ping = pipes::RecvPacketBuffered<pingpong::ping,\n         pingpong::packets>;\n         fn pong(+pipe: pong) -> ping {\n@@ -67,6 +70,7 @@ mod pingpong {\n }\n \n mod test {\n+    #[legacy_exports];\n     use pipes::recv;\n     use pingpong::{ping, pong};\n "}, {"sha": "7af00e8dbf2cca7e82661b0559072bcf20c82acc", "filename": "src/test/run-pass/pipe-pingpong-proto.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -13,6 +13,7 @@ proto! pingpong (\n )\n \n mod test {\n+    #[legacy_exports];\n     use pipes::recv;\n     use pingpong::{ping, pong};\n "}, {"sha": "93ef8e755f4fd38d9016a7ef0dc4b703dcf4f33b", "filename": "src/test/run-pass/rec-align-u32.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u32.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -3,6 +3,7 @@\n \n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n+    #[legacy_exports];\n     fn pref_align_of<T>() -> uint;\n     fn min_align_of<T>() -> uint;\n }\n@@ -22,12 +23,14 @@ type outer = {\n \n #[cfg(target_arch = \"x86\")]\n mod m {\n+    #[legacy_exports];\n     fn align() -> uint { 4u }\n     fn size() -> uint { 8u }\n }\n \n #[cfg(target_arch = \"x86_64\")]\n mod m {\n+    #[legacy_exports];\n     fn align() -> uint { 4u }\n     fn size() -> uint { 8u }\n }"}, {"sha": "24400b8d340808ec674e9577537e0a46c19006dd", "filename": "src/test/run-pass/rec-align-u64.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u64.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -3,6 +3,7 @@\n \n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n+    #[legacy_exports];\n     fn pref_align_of<T>() -> uint;\n     fn min_align_of<T>() -> uint;\n }\n@@ -24,23 +25,28 @@ type outer = {\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"freebsd\")]\n mod m {\n+    #[legacy_exports];\n     #[cfg(target_arch = \"x86\")]\n     mod m {\n+        #[legacy_exports];\n         fn align() -> uint { 4u }\n         fn size() -> uint { 12u }\n     }\n \n     #[cfg(target_arch = \"x86_64\")]\n     mod m {\n+        #[legacy_exports];\n         fn align() -> uint { 8u }\n         fn size() -> uint { 16u }\n     }\n }\n \n #[cfg(target_os = \"win32\")]\n mod m {\n+    #[legacy_exports];\n     #[cfg(target_arch = \"x86\")]\n     mod m {\n+        #[legacy_exports];\n         fn align() -> uint { 8u }\n         fn size() -> uint { 16u }\n     }"}, {"sha": "9604dff64d7ebc87f4149fbc9e894a1088f66bbf", "filename": "src/test/run-pass/rt-sched-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-sched-1.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -9,6 +9,7 @@ type task = *libc::c_void;\n type closure = *libc::c_void;\n \n extern mod rustrt {\n+    #[legacy_exports];\n     fn rust_new_sched(num_threads: libc::uintptr_t) -> sched_id;\n     fn rust_get_sched_id() -> sched_id;\n     fn rust_new_task_in_sched(id: sched_id) -> task_id;"}, {"sha": "1c343557122e85e605435e7fa74d0331c98a506e", "filename": "src/test/run-pass/self-shadowing-import.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fself-shadowing-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fself-shadowing-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fself-shadowing-import.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,12 +1,16 @@\n mod a {\n+    #[legacy_exports];\n     mod b {\n+        #[legacy_exports];\n         mod a {\n+            #[legacy_exports];\n             fn foo() -> int { return 1; }\n         }\n     }\n }\n \n mod c {\n+    #[legacy_exports];\n     use a::b::a;\n     fn bar() { assert (a::foo() == 1); }\n }"}, {"sha": "469de185968d369f13fe36d000596246cdf327ab", "filename": "src/test/run-pass/static-impl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-impl.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -8,10 +8,12 @@ trait plus {\n }\n \n mod a {\n+    #[legacy_exports];\n     impl uint: plus { fn plus() -> int { self as int + 20 } }\n }\n \n mod b {\n+    #[legacy_exports];\n     impl ~str: plus { fn plus() -> int { 200 } }\n }\n "}, {"sha": "398440ebf7f5199960f7d1dd99db8cadc796908b", "filename": "src/test/run-pass/static-method-xcrate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fstatic-method-xcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fstatic-method-xcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-method-xcrate.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,5 +1,6 @@\n // xfail-fast\n // aux-build:static-methods-crate.rs\n+#[legacy_exports];\n \n extern mod static_methods_crate;\n use static_methods_crate::read;"}, {"sha": "c72be6f8a22b3eb9766b05f6e917983d07557496", "filename": "src/test/run-pass/struct-return.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-return.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -3,6 +3,7 @@ type floats = { a: f64, b: u8, c: f64 };\n \n #[nolink]\n extern mod rustrt {\n+    #[legacy_exports];\n     fn debug_abi_1(++q: quad) -> quad;\n     fn debug_abi_2(++f: floats) -> floats;\n }"}, {"sha": "1704047a48f296f42d11fa17b71898c66315cc7d", "filename": "src/test/run-pass/syntax-extension-source-utils.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,14 +1,17 @@\n // This test is brittle!\n // xfail-pretty - the pretty tests lose path information, breaking #include\n+#[legacy_exports];\n \n mod m1 {\n+    #[legacy_exports];\n     mod m2 {\n+        #[legacy_exports];\n         fn where_am_i() -> ~str { module_path!() }\n     }\n }\n \n fn main() {\n-    assert(line!() == 11u);\n+    assert(line!() == 14u);\n     assert(col!() == 11u);\n     assert(file!().ends_with(~\"syntax-extension-source-utils.rs\"));\n     assert(stringify!((2*3) + 5) == ~\"2 * 3 + 5\");"}, {"sha": "8191ecfc5ea877423fea7ce006f6205a4677239f", "filename": "src/test/run-pass/tag-exports.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Ftag-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Ftag-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-exports.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,6 +1,7 @@\n use alder::*;\n \n mod alder {\n+    #[legacy_exports];\n   export burnside;\n   export couch;\n   export everett;"}, {"sha": "818f41de262f7e1ec726a2e11faa89731bb4553c", "filename": "src/test/run-pass/trait-mix.rc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Ftrait-mix.rc", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Ftrait-mix.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-mix.rc?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,5 +1,8 @@\n mod trait_mix {\n+    #[legacy_exports];\n     #[path = \"trait-mix.rs\"]\n+    #[legacy_exports]\n     mod trait_mix;\n+    #[legacy_exports]\n     mod u_trait_mix;\n }"}, {"sha": "fe31c261ad7d07b14551c6aca7bdcda11c03ca00", "filename": "src/test/run-pass/type-in-nested-module.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Ftype-in-nested-module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Ftype-in-nested-module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-in-nested-module.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,7 +1,9 @@\n \n \n mod a {\n+    #[legacy_exports];\n     mod b {\n+        #[legacy_exports];\n         type t = int;\n \n         fn foo() { let x: t = 10; }"}, {"sha": "630d9fc2323ff33c9bfbce1701e6039e4517d3ee", "filename": "src/test/run-pass/use-import-export.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fuse-import-export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fuse-import-export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-import-export.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,10 +1,12 @@\n \n \n mod foo {\n+    #[legacy_exports];\n     fn x() -> int { return 1; }\n }\n \n mod bar {\n+    #[legacy_exports];\n     fn y() -> int { return 1; }\n }\n "}, {"sha": "13964081e478e1461d7c9760e4a61f860acd7796", "filename": "src/test/run-pass/use-mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fuse-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fuse-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-mod.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -1,7 +1,9 @@\n use mod a::b;\n \n mod a {\n+    #[legacy_exports];\n     mod b {\n+        #[legacy_exports];\n         fn f() {}\n     }\n }"}, {"sha": "10c9fcae8e74d305d6d32452f079a6ab0e4530ae", "filename": "src/test/run-pass/use.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -7,6 +7,7 @@ extern mod bar(name = \"core\", vers = \"0.4\");\n use core::str;\n use x = zed::str;\n mod baz {\n+    #[legacy_exports];\n     use bar::str;\n     use x = core::str;\n }"}, {"sha": "d6a7dd9993e026379c787044e829191854c95123", "filename": "src/test/run-pass/warn-ctypes-inhibit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fwarn-ctypes-inhibit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fwarn-ctypes-inhibit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwarn-ctypes-inhibit.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -4,6 +4,7 @@\n \n #[nolink]\n extern mod libc {\n+    #[legacy_exports];\n     fn malloc(size: int) -> *u8;\n }\n "}, {"sha": "deaec65dac74db4f75dd4fa12d3ba93c0610f4b6", "filename": "src/test/run-pass/x86stdcall2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fx86stdcall2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe188991325b4e803fdd0da7c1563ce0fa27f4/src%2Ftest%2Frun-pass%2Fx86stdcall2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fx86stdcall2.rs?ref=dffe188991325b4e803fdd0da7c1563ce0fa27f4", "patch": "@@ -7,6 +7,7 @@ type BOOL = u8;\n #[cfg(target_os = \"win32\")]\n #[abi = \"stdcall\"]\n extern mod kernel32 {\n+    #[legacy_exports];\n        fn GetProcessHeap() -> HANDLE;\n        fn HeapAlloc(hHeap: HANDLE, dwFlags: DWORD, dwBytes: SIZE_T) -> LPVOID;\n        fn HeapFree(hHeap: HANDLE, dwFlags: DWORD, lpMem: LPVOID) -> BOOL;"}]}