{"sha": "5236a304c46f6f08bf43f08187e071c77c6622f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyMzZhMzA0YzQ2ZjZmMDhiZjQzZjA4MTg3ZTA3MWM3N2M2NjIyZjU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-08-31T22:58:22Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-08-31T22:58:36Z"}, "message": "Fix check-fast.", "tree": {"sha": "bb2d9257a3c0efbb6fcf06eba5986052771c9967", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb2d9257a3c0efbb6fcf06eba5986052771c9967"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5236a304c46f6f08bf43f08187e071c77c6622f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5236a304c46f6f08bf43f08187e071c77c6622f5", "html_url": "https://github.com/rust-lang/rust/commit/5236a304c46f6f08bf43f08187e071c77c6622f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5236a304c46f6f08bf43f08187e071c77c6622f5/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b4d5cee03bdc297361f52b34e6e09b7b64161ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b4d5cee03bdc297361f52b34e6e09b7b64161ea", "html_url": "https://github.com/rust-lang/rust/commit/5b4d5cee03bdc297361f52b34e6e09b7b64161ea"}], "stats": {"total": 27, "additions": 9, "deletions": 18}, "files": [{"sha": "0d1f5e2bbe8795fff285e9cb40d92a5d4daa002e", "filename": "src/test/run-pass/expr-alt-generic.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5236a304c46f6f08bf43f08187e071c77c6622f5/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5236a304c46f6f08bf43f08187e071c77c6622f5/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs?ref=5236a304c46f6f08bf43f08187e071c77c6622f5", "patch": "@@ -15,14 +15,11 @@ fn test_bool() {\n }\n \n type t = {a: int, b: int};\n-impl t : cmp::Eq {\n-    pure fn eq(&&other: t) -> bool {\n-        self.a == other.a && self.b == other.b\n-    }\n-}\n \n fn test_rec() {\n-    fn compare_rec(t1: t, t2: t) -> bool { return t1 == t2; }\n+    fn compare_rec(t1: t, t2: t) -> bool {\n+        t1.a == t2.a && t1.b == t2.b\n+    }\n     test_generic::<t>({a: 1, b: 2}, compare_rec);\n }\n "}, {"sha": "71e6f962e3549872983fcf8049b20b20b816d488", "filename": "src/test/run-pass/expr-block-generic.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5236a304c46f6f08bf43f08187e071c77c6622f5/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5236a304c46f6f08bf43f08187e071c77c6622f5/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs?ref=5236a304c46f6f08bf43f08187e071c77c6622f5", "patch": "@@ -17,14 +17,11 @@ fn test_bool() {\n }\n \n type t = {a: int, b: int};\n-impl t : cmp::Eq {\n-    pure fn eq(&&other: t) -> bool {\n-        self.a == other.a && self.b == other.b\n-    }\n-}\n \n fn test_rec() {\n-    fn compare_rec(t1: t, t2: t) -> bool { return t1 == t2; }\n+    fn compare_rec(t1: t, t2: t) -> bool {\n+        t1.a == t2.a && t1.b == t2.b\n+    }\n     test_generic::<t>({a: 1, b: 2}, compare_rec);\n }\n "}, {"sha": "1ad0b006592cd6c9206ccd93931bb8a97c801453", "filename": "src/test/run-pass/expr-if-generic.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5236a304c46f6f08bf43f08187e071c77c6622f5/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5236a304c46f6f08bf43f08187e071c77c6622f5/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs?ref=5236a304c46f6f08bf43f08187e071c77c6622f5", "patch": "@@ -17,14 +17,11 @@ fn test_bool() {\n }\n \n type t = {a: int, b: int};\n-impl t : cmp::Eq {\n-    pure fn eq(&&other: t) -> bool {\n-        self.a == other.a && self.b == other.b\n-    }\n-}\n \n fn test_rec() {\n-    fn compare_rec(t1: t, t2: t) -> bool { return t1 == t2; }\n+    fn compare_rec(t1: t, t2: t) -> bool {\n+        t1.a == t2.a && t1.b == t2.b\n+    }\n     test_generic::<t>({a: 1, b: 2}, {a: 2, b: 3}, compare_rec);\n }\n "}]}