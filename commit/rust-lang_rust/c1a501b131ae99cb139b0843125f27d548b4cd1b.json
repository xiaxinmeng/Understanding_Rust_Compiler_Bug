{"sha": "c1a501b131ae99cb139b0843125f27d548b4cd1b", "node_id": "C_kwDOAAsO6NoAKGMxYTUwMWIxMzFhZTk5Y2IxMzliMDg0MzEyNWYyN2Q1NDhiNGNkMWI", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2021-11-30T06:46:32Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2021-12-03T01:31:38Z"}, "message": "Implement a pass manager", "tree": {"sha": "d071e4281c6d32293e346038430f8f4974befc05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d071e4281c6d32293e346038430f8f4974befc05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1a501b131ae99cb139b0843125f27d548b4cd1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1a501b131ae99cb139b0843125f27d548b4cd1b", "html_url": "https://github.com/rust-lang/rust/commit/c1a501b131ae99cb139b0843125f27d548b4cd1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1a501b131ae99cb139b0843125f27d548b4cd1b/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0de6346dec84ca663026e44ef102f4d229bfb38", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0de6346dec84ca663026e44ef102f4d229bfb38", "html_url": "https://github.com/rust-lang/rust/commit/a0de6346dec84ca663026e44ef102f4d229bfb38"}], "stats": {"total": 141, "additions": 141, "deletions": 0}, "files": [{"sha": "75edcaadfdff26adf39425a16d88f3531ca2f496", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c1a501b131ae99cb139b0843125f27d548b4cd1b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1a501b131ae99cb139b0843125f27d548b4cd1b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=c1a501b131ae99cb139b0843125f27d548b4cd1b", "patch": "@@ -16,6 +16,7 @@ use rustc_hir::def::{CtorKind, Namespace};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_hir::{self, GeneratorKind};\n use rustc_hir::{self as hir, HirId};\n+use rustc_session::Session;\n use rustc_target::abi::{Size, VariantIdx};\n \n use polonius_engine::Atom;\n@@ -99,7 +100,21 @@ pub trait MirPass<'tcx> {\n         }\n     }\n \n+    /// Returns `true` if this pass is enabled with the current combination of compiler flags.\n+    fn is_enabled(&self, _sess: &Session) -> bool {\n+        true\n+    }\n+\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>);\n+\n+    /// If this pass causes the MIR to enter a new phase, return that phase.\n+    fn phase_change(&self) -> Option<MirPhase> {\n+        None\n+    }\n+\n+    fn is_mir_dump_enabled(&self) -> bool {\n+        true\n+    }\n }\n \n /// The various \"big phases\" that MIR goes through."}, {"sha": "0886e15d330208094932c1a764cb20a31a1e7cae", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c1a501b131ae99cb139b0843125f27d548b4cd1b/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1a501b131ae99cb139b0843125f27d548b4cd1b/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=c1a501b131ae99cb139b0843125f27d548b4cd1b", "patch": "@@ -32,6 +32,11 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n use rustc_span::{Span, Symbol};\n \n+#[macro_use]\n+mod pass_manager;\n+\n+use pass_manager::{Lint, MirLint};\n+\n mod abort_unwinding_calls;\n mod add_call_guards;\n mod add_moves_for_packed_drops;"}, {"sha": "ea6f82dfc0610d7856c019b74ed7ed5fa0c47326", "filename": "compiler/rustc_mir_transform/src/pass_manager.rs", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/c1a501b131ae99cb139b0843125f27d548b4cd1b/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1a501b131ae99cb139b0843125f27d548b4cd1b/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs?ref=c1a501b131ae99cb139b0843125f27d548b4cd1b", "patch": "@@ -0,0 +1,121 @@\n+use std::borrow::Cow;\n+\n+use rustc_middle::mir::{self, Body, MirPhase};\n+use rustc_middle::ty::TyCtxt;\n+use rustc_session::Session;\n+\n+use crate::{validate, MirPass};\n+\n+/// Just like `MirPass`, except it cannot mutate `Body`.\n+pub trait MirLint<'tcx> {\n+    fn name(&self) -> Cow<'_, str> {\n+        let name = std::any::type_name::<Self>();\n+        if let Some(tail) = name.rfind(':') {\n+            Cow::from(&name[tail + 1..])\n+        } else {\n+            Cow::from(name)\n+        }\n+    }\n+\n+    fn is_enabled(&self, _sess: &Session) -> bool {\n+        true\n+    }\n+\n+    fn run_lint(&self, tcx: TyCtxt<'tcx>, body: &Body<'tcx>);\n+}\n+\n+/// An adapter for `MirLint`s that implements `MirPass`.\n+#[derive(Debug, Clone)]\n+pub struct Lint<T>(pub T);\n+\n+impl<T> MirPass<'tcx> for Lint<T>\n+where\n+    T: MirLint<'tcx>,\n+{\n+    fn name(&self) -> Cow<'_, str> {\n+        self.0.name()\n+    }\n+\n+    fn is_enabled(&self, sess: &Session) -> bool {\n+        self.0.is_enabled(sess)\n+    }\n+\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        self.0.run_lint(tcx, body)\n+    }\n+\n+    fn is_mir_dump_enabled(&self) -> bool {\n+        false\n+    }\n+}\n+\n+pub fn run_passes(tcx: TyCtxt<'tcx>, body: &'mir mut Body<'tcx>, passes: &[&dyn MirPass<'tcx>]) {\n+    let start_phase = body.phase;\n+    let mut cnt = 0;\n+\n+    let validate = tcx.sess.opts.debugging_opts.validate_mir;\n+\n+    if validate {\n+        validate_body(tcx, body, format!(\"start of phase transition from {:?}\", start_phase));\n+    }\n+\n+    for pass in passes {\n+        if !pass.is_enabled(&tcx.sess) {\n+            continue;\n+        }\n+\n+        let name = pass.name();\n+        let dump_enabled = pass.is_mir_dump_enabled();\n+\n+        if dump_enabled {\n+            dump_mir(tcx, body, start_phase, &name, cnt, false);\n+        }\n+\n+        pass.run_pass(tcx, body);\n+\n+        if dump_enabled {\n+            dump_mir(tcx, body, start_phase, &name, cnt, true);\n+            cnt += 1;\n+        }\n+\n+        if let Some(new_phase) = pass.phase_change() {\n+            if body.phase >= new_phase {\n+                panic!(\"Invalid MIR phase transition from {:?} to {:?}\", body.phase, new_phase);\n+            }\n+\n+            body.phase = new_phase;\n+        }\n+\n+        if validate {\n+            validate_body(tcx, body, format!(\"after pass {}\", pass.name()));\n+        }\n+    }\n+\n+    if validate || body.phase == MirPhase::Optimization {\n+        validate_body(tcx, body, format!(\"end of phase transition to {:?}\", body.phase));\n+    }\n+}\n+\n+pub fn validate_body(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, when: String) {\n+    validate::Validator { when, mir_phase: body.phase }.run_pass(tcx, body);\n+}\n+\n+pub fn dump_mir(\n+    tcx: TyCtxt<'tcx>,\n+    body: &Body<'tcx>,\n+    phase: MirPhase,\n+    pass_name: &str,\n+    cnt: usize,\n+    is_after: bool,\n+) {\n+    let phase_index = phase as u32;\n+\n+    mir::dump_mir(\n+        tcx,\n+        Some(&format_args!(\"{:03}-{:03}\", phase_index, cnt)),\n+        pass_name,\n+        if is_after { &\"after\" } else { &\"before\" },\n+        body,\n+        |_, _| Ok(()),\n+    );\n+}"}]}