{"sha": "5930081f346a4c527b3d44ce20dba7025edd5669", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MzAwODFmMzQ2YTRjNTI3YjNkNDRjZTIwZGJhNzAyNWVkZDU2Njk=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-07-08T10:03:37Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-07-14T23:01:35Z"}, "message": "Remove lots of `Symbol::as_str()` calls.\n\nIn various ways, such as changing functions to take a `Symbol` instead\nof a `&str`.", "tree": {"sha": "6fabec3e00ff1843224c46f6898a8cfd45598bbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fabec3e00ff1843224c46f6898a8cfd45598bbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5930081f346a4c527b3d44ce20dba7025edd5669", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5930081f346a4c527b3d44ce20dba7025edd5669", "html_url": "https://github.com/rust-lang/rust/commit/5930081f346a4c527b3d44ce20dba7025edd5669", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5930081f346a4c527b3d44ce20dba7025edd5669/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f04e866e5752f47e0896550faf40e19fea22d8ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/f04e866e5752f47e0896550faf40e19fea22d8ea", "html_url": "https://github.com/rust-lang/rust/commit/f04e866e5752f47e0896550faf40e19fea22d8ea"}], "stats": {"total": 217, "additions": 121, "deletions": 96}, "files": [{"sha": "39921b20226065f74edfa6c541cb6181f07678fb", "filename": "src/librustc_ast/util/comments.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_ast%2Futil%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_ast%2Futil%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Futil%2Fcomments.rs?ref=5930081f346a4c527b3d44ce20dba7025edd5669", "patch": "@@ -2,7 +2,7 @@ pub use CommentStyle::*;\n \n use crate::ast;\n use rustc_span::source_map::SourceMap;\n-use rustc_span::{BytePos, CharPos, FileName, Pos};\n+use rustc_span::{BytePos, CharPos, FileName, Pos, Symbol};\n \n use log::debug;\n \n@@ -52,7 +52,8 @@ pub fn is_doc_comment(s: &str) -> bool {\n         || s.starts_with(\"/*!\")\n }\n \n-pub fn doc_comment_style(comment: &str) -> ast::AttrStyle {\n+pub fn doc_comment_style(comment: Symbol) -> ast::AttrStyle {\n+    let comment = &comment.as_str();\n     assert!(is_doc_comment(comment));\n     if comment.starts_with(\"//!\") || comment.starts_with(\"/*!\") {\n         ast::AttrStyle::Inner\n@@ -61,7 +62,9 @@ pub fn doc_comment_style(comment: &str) -> ast::AttrStyle {\n     }\n }\n \n-pub fn strip_doc_comment_decoration(comment: &str) -> String {\n+pub fn strip_doc_comment_decoration(comment: Symbol) -> String {\n+    let comment = &comment.as_str();\n+\n     /// remove whitespace-only lines from the start/end of lines\n     fn vertical_trim(lines: Vec<String>) -> Vec<String> {\n         let mut i = 0;"}, {"sha": "f08011fe4f862d213e22596d302492dc3de20a43", "filename": "src/librustc_ast/util/comments/tests.rs", "status": "modified", "additions": 37, "deletions": 26, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_ast%2Futil%2Fcomments%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_ast%2Futil%2Fcomments%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Futil%2Fcomments%2Ftests.rs?ref=5930081f346a4c527b3d44ce20dba7025edd5669", "patch": "@@ -1,47 +1,58 @@\n use super::*;\n+use crate::with_default_session_globals;\n \n #[test]\n fn test_block_doc_comment_1() {\n-    let comment = \"/**\\n * Test \\n **  Test\\n *   Test\\n*/\";\n-    let stripped = strip_doc_comment_decoration(comment);\n-    assert_eq!(stripped, \" Test \\n*  Test\\n   Test\");\n+    with_default_session_globals(|| {\n+        let comment = \"/**\\n * Test \\n **  Test\\n *   Test\\n*/\";\n+        let stripped = strip_doc_comment_decoration(Symbol::intern(comment));\n+        assert_eq!(stripped, \" Test \\n*  Test\\n   Test\");\n+    })\n }\n \n #[test]\n fn test_block_doc_comment_2() {\n-    let comment = \"/**\\n * Test\\n *  Test\\n*/\";\n-    let stripped = strip_doc_comment_decoration(comment);\n-    assert_eq!(stripped, \" Test\\n  Test\");\n+    with_default_session_globals(|| {\n+        let comment = \"/**\\n * Test\\n *  Test\\n*/\";\n+        let stripped = strip_doc_comment_decoration(Symbol::intern(comment));\n+        assert_eq!(stripped, \" Test\\n  Test\");\n+    })\n }\n \n #[test]\n fn test_block_doc_comment_3() {\n-    let comment = \"/**\\n let a: *i32;\\n *a = 5;\\n*/\";\n-    let stripped = strip_doc_comment_decoration(comment);\n-    assert_eq!(stripped, \" let a: *i32;\\n *a = 5;\");\n+    with_default_session_globals(|| {\n+        let comment = \"/**\\n let a: *i32;\\n *a = 5;\\n*/\";\n+        let stripped = strip_doc_comment_decoration(Symbol::intern(comment));\n+        assert_eq!(stripped, \" let a: *i32;\\n *a = 5;\");\n+    })\n }\n \n #[test]\n fn test_block_doc_comment_4() {\n-    let comment = \"/*******************\\n test\\n *********************/\";\n-    let stripped = strip_doc_comment_decoration(comment);\n-    assert_eq!(stripped, \" test\");\n+    with_default_session_globals(|| {\n+        let comment = \"/*******************\\n test\\n *********************/\";\n+        let stripped = strip_doc_comment_decoration(Symbol::intern(comment));\n+        assert_eq!(stripped, \" test\");\n+    })\n }\n \n #[test]\n fn test_line_doc_comment() {\n-    let stripped = strip_doc_comment_decoration(\"/// test\");\n-    assert_eq!(stripped, \" test\");\n-    let stripped = strip_doc_comment_decoration(\"///! test\");\n-    assert_eq!(stripped, \" test\");\n-    let stripped = strip_doc_comment_decoration(\"// test\");\n-    assert_eq!(stripped, \" test\");\n-    let stripped = strip_doc_comment_decoration(\"// test\");\n-    assert_eq!(stripped, \" test\");\n-    let stripped = strip_doc_comment_decoration(\"///test\");\n-    assert_eq!(stripped, \"test\");\n-    let stripped = strip_doc_comment_decoration(\"///!test\");\n-    assert_eq!(stripped, \"test\");\n-    let stripped = strip_doc_comment_decoration(\"//test\");\n-    assert_eq!(stripped, \"test\");\n+    with_default_session_globals(|| {\n+        let stripped = strip_doc_comment_decoration(Symbol::intern(\"/// test\"));\n+        assert_eq!(stripped, \" test\");\n+        let stripped = strip_doc_comment_decoration(Symbol::intern(\"///! test\"));\n+        assert_eq!(stripped, \" test\");\n+        let stripped = strip_doc_comment_decoration(Symbol::intern(\"// test\"));\n+        assert_eq!(stripped, \" test\");\n+        let stripped = strip_doc_comment_decoration(Symbol::intern(\"// test\"));\n+        assert_eq!(stripped, \" test\");\n+        let stripped = strip_doc_comment_decoration(Symbol::intern(\"///test\"));\n+        assert_eq!(stripped, \"test\");\n+        let stripped = strip_doc_comment_decoration(Symbol::intern(\"///!test\"));\n+        assert_eq!(stripped, \"test\");\n+        let stripped = strip_doc_comment_decoration(Symbol::intern(\"//test\"));\n+        assert_eq!(stripped, \"test\");\n+    })\n }"}, {"sha": "d4e0e3ba051c95c214f2561ce94757583d6a3787", "filename": "src/librustc_ast/util/lev_distance.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_ast%2Futil%2Flev_distance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_ast%2Futil%2Flev_distance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Futil%2Flev_distance.rs?ref=5930081f346a4c527b3d44ce20dba7025edd5669", "patch": "@@ -47,12 +47,13 @@ pub fn lev_distance(a: &str, b: &str) -> usize {\n /// a lower(upper)case letters mismatch.\n pub fn find_best_match_for_name<'a, T>(\n     iter_names: T,\n-    lookup: &str,\n+    lookup: Symbol,\n     dist: Option<usize>,\n ) -> Option<Symbol>\n where\n     T: Iterator<Item = &'a Symbol>,\n {\n+    let lookup = &lookup.as_str();\n     let max_dist = dist.map_or_else(|| cmp::max(lookup.len(), 3) / 3, |d| d);\n     let name_vec: Vec<&Symbol> = iter_names.collect();\n "}, {"sha": "94d56a3d7b4ae23944a9df7606147616b1752c10", "filename": "src/librustc_ast/util/lev_distance/tests.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_ast%2Futil%2Flev_distance%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_ast%2Futil%2Flev_distance%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Futil%2Flev_distance%2Ftests.rs?ref=5930081f346a4c527b3d44ce20dba7025edd5669", "patch": "@@ -25,31 +25,34 @@ fn test_find_best_match_for_name() {\n     with_default_session_globals(|| {\n         let input = vec![Symbol::intern(\"aaab\"), Symbol::intern(\"aaabc\")];\n         assert_eq!(\n-            find_best_match_for_name(input.iter(), \"aaaa\", None),\n+            find_best_match_for_name(input.iter(), Symbol::intern(\"aaaa\"), None),\n             Some(Symbol::intern(\"aaab\"))\n         );\n \n-        assert_eq!(find_best_match_for_name(input.iter(), \"1111111111\", None), None);\n+        assert_eq!(\n+            find_best_match_for_name(input.iter(), Symbol::intern(\"1111111111\"), None),\n+            None\n+        );\n \n         let input = vec![Symbol::intern(\"aAAA\")];\n         assert_eq!(\n-            find_best_match_for_name(input.iter(), \"AAAA\", None),\n+            find_best_match_for_name(input.iter(), Symbol::intern(\"AAAA\"), None),\n             Some(Symbol::intern(\"aAAA\"))\n         );\n \n         let input = vec![Symbol::intern(\"AAAA\")];\n         // Returns None because `lev_distance > max_dist / 3`\n-        assert_eq!(find_best_match_for_name(input.iter(), \"aaaa\", None), None);\n+        assert_eq!(find_best_match_for_name(input.iter(), Symbol::intern(\"aaaa\"), None), None);\n \n         let input = vec![Symbol::intern(\"AAAA\")];\n         assert_eq!(\n-            find_best_match_for_name(input.iter(), \"aaaa\", Some(4)),\n+            find_best_match_for_name(input.iter(), Symbol::intern(\"aaaa\"), Some(4)),\n             Some(Symbol::intern(\"AAAA\"))\n         );\n \n         let input = vec![Symbol::intern(\"a_longer_variable_name\")];\n         assert_eq!(\n-            find_best_match_for_name(input.iter(), \"a_variable_longer_name\", None),\n+            find_best_match_for_name(input.iter(), Symbol::intern(\"a_variable_longer_name\"), None),\n             Some(Symbol::intern(\"a_longer_variable_name\"))\n         );\n     })"}, {"sha": "cf43e5bd3528a4d0772d389cb070a7e679a3fecc", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=5930081f346a4c527b3d44ce20dba7025edd5669", "patch": "@@ -522,6 +522,10 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n         self.word(st)\n     }\n \n+    fn print_symbol(&mut self, sym: Symbol, style: ast::StrStyle) {\n+        self.print_string(&sym.as_str(), style);\n+    }\n+\n     fn print_inner_attributes(&mut self, attrs: &[ast::Attribute]) {\n         self.print_either_attributes(attrs, ast::AttrStyle::Inner, false, true)\n     }\n@@ -2050,7 +2054,7 @@ impl<'a> State<'a> {\n                         let print_reg_or_class = |s: &mut Self, r: &InlineAsmRegOrRegClass| match r\n                         {\n                             InlineAsmRegOrRegClass::Reg(r) => {\n-                                s.print_string(&r.as_str(), ast::StrStyle::Cooked)\n+                                s.print_symbol(*r, ast::StrStyle::Cooked)\n                             }\n                             InlineAsmRegOrRegClass::RegClass(r) => s.word(r.to_string()),\n                         };\n@@ -2144,7 +2148,7 @@ impl<'a> State<'a> {\n             ast::ExprKind::LlvmInlineAsm(ref a) => {\n                 self.s.word(\"llvm_asm!\");\n                 self.popen();\n-                self.print_string(&a.asm.as_str(), a.asm_str_style);\n+                self.print_symbol(a.asm, a.asm_str_style);\n                 self.word_space(\":\");\n \n                 self.commasep(Inconsistent, &a.outputs, |s, out| {\n@@ -2164,16 +2168,16 @@ impl<'a> State<'a> {\n                 self.word_space(\":\");\n \n                 self.commasep(Inconsistent, &a.inputs, |s, &(co, ref o)| {\n-                    s.print_string(&co.as_str(), ast::StrStyle::Cooked);\n+                    s.print_symbol(co, ast::StrStyle::Cooked);\n                     s.popen();\n                     s.print_expr(o);\n                     s.pclose();\n                 });\n                 self.s.space();\n                 self.word_space(\":\");\n \n-                self.commasep(Inconsistent, &a.clobbers, |s, co| {\n-                    s.print_string(&co.as_str(), ast::StrStyle::Cooked);\n+                self.commasep(Inconsistent, &a.clobbers, |s, &co| {\n+                    s.print_symbol(co, ast::StrStyle::Cooked);\n                 });\n \n                 let mut options = vec![];"}, {"sha": "2805b4203f92848e8d8ca2fcb70787f9cbc7b9dc", "filename": "src/librustc_expand/proc_macro_server.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_expand%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_expand%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro_server.rs?ref=5930081f346a4c527b3d44ce20dba7025edd5669", "patch": "@@ -149,8 +149,8 @@ impl FromInternal<(TreeAndJoint, &'_ ParseSess, &'_ mut Vec<Self>)>\n             }\n             Literal(lit) => tt!(Literal { lit }),\n             DocComment(c) => {\n-                let style = comments::doc_comment_style(&c.as_str());\n-                let stripped = comments::strip_doc_comment_decoration(&c.as_str());\n+                let style = comments::doc_comment_style(c);\n+                let stripped = comments::strip_doc_comment_decoration(c);\n                 let mut escaped = String::new();\n                 for ch in stripped.chars() {\n                     escaped.extend(ch.escape_debug());"}, {"sha": "2298a80ae4f1f67b40aab3a66bbf077d1b590f5b", "filename": "src/librustc_hir_pretty/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_hir_pretty%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_hir_pretty%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir_pretty%2Flib.rs?ref=5930081f346a4c527b3d44ce20dba7025edd5669", "patch": "@@ -1557,7 +1557,7 @@ impl<'a> State<'a> {\n                 let i = &a.inner;\n                 self.s.word(\"llvm_asm!\");\n                 self.popen();\n-                self.print_string(&i.asm.as_str(), i.asm_str_style);\n+                self.print_symbol(i.asm, i.asm_str_style);\n                 self.word_space(\":\");\n \n                 let mut out_idx = 0;\n@@ -1579,8 +1579,8 @@ impl<'a> State<'a> {\n                 self.word_space(\":\");\n \n                 let mut in_idx = 0;\n-                self.commasep(Inconsistent, &i.inputs, |s, co| {\n-                    s.print_string(&co.as_str(), ast::StrStyle::Cooked);\n+                self.commasep(Inconsistent, &i.inputs, |s, &co| {\n+                    s.print_symbol(co, ast::StrStyle::Cooked);\n                     s.popen();\n                     s.print_expr(&a.inputs_exprs[in_idx]);\n                     s.pclose();\n@@ -1589,8 +1589,8 @@ impl<'a> State<'a> {\n                 self.s.space();\n                 self.word_space(\":\");\n \n-                self.commasep(Inconsistent, &i.clobbers, |s, co| {\n-                    s.print_string(&co.as_str(), ast::StrStyle::Cooked);\n+                self.commasep(Inconsistent, &i.clobbers, |s, &co| {\n+                    s.print_symbol(co, ast::StrStyle::Cooked);\n                 });\n \n                 let mut options = vec![];"}, {"sha": "cd5da7a67685c930c4d576ad07122f43be170c64", "filename": "src/librustc_incremental/assert_module_sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_module_sources.rs?ref=5930081f346a4c527b3d44ce20dba7025edd5669", "patch": "@@ -139,7 +139,7 @@ impl AssertModuleSource<'tcx> {\n         }\n \n         self.tcx.sess.cgu_reuse_tracker.set_expectation(\n-            &cgu_name.as_str(),\n+            cgu_name,\n             &user_path,\n             attr.span,\n             expected_reuse,"}, {"sha": "ddc1def6e936734bd2d5d308e2917fb5109dbcb8", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=5930081f346a4c527b3d44ce20dba7025edd5669", "patch": "@@ -234,7 +234,7 @@ impl DirtyCleanVisitor<'tcx> {\n         for item in attr.meta_item_list().unwrap_or_else(Vec::new) {\n             if item.check_name(LABEL) {\n                 let value = expect_associated_value(self.tcx, &item);\n-                return Some(self.resolve_labels(&item, &value.as_str()));\n+                return Some(self.resolve_labels(&item, value));\n             }\n         }\n         None\n@@ -245,7 +245,7 @@ impl DirtyCleanVisitor<'tcx> {\n         for item in attr.meta_item_list().unwrap_or_else(Vec::new) {\n             if item.check_name(EXCEPT) {\n                 let value = expect_associated_value(self.tcx, &item);\n-                return self.resolve_labels(&item, &value.as_str());\n+                return self.resolve_labels(&item, value);\n             }\n         }\n         // if no `label` or `except` is given, only the node's group are asserted\n@@ -347,9 +347,9 @@ impl DirtyCleanVisitor<'tcx> {\n         (name, labels)\n     }\n \n-    fn resolve_labels(&self, item: &NestedMetaItem, value: &str) -> Labels {\n+    fn resolve_labels(&self, item: &NestedMetaItem, value: Symbol) -> Labels {\n         let mut out = Labels::default();\n-        for label in value.split(',') {\n+        for label in value.as_str().split(',') {\n             let label = label.trim();\n             if DepNode::has_label_string(label) {\n                 if out.contains(label) {"}, {"sha": "c83f1171735efcd25389fad074ce6dfd5da6342d", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=5930081f346a4c527b3d44ce20dba7025edd5669", "patch": "@@ -427,11 +427,8 @@ pub(crate) fn check_attr_crate_type(attrs: &[ast::Attribute], lint_buffer: &mut\n \n                 if let ast::MetaItemKind::NameValue(spanned) = a.meta().unwrap().kind {\n                     let span = spanned.span;\n-                    let lev_candidate = find_best_match_for_name(\n-                        CRATE_TYPES.iter().map(|(k, _)| k),\n-                        &n.as_str(),\n-                        None,\n-                    );\n+                    let lev_candidate =\n+                        find_best_match_for_name(CRATE_TYPES.iter().map(|(k, _)| k), n, None);\n                     if let Some(candidate) = lev_candidate {\n                         lint_buffer.buffer_lint_with_diagnostic(\n                             lint::builtin::UNKNOWN_CRATE_TYPES,"}, {"sha": "65fd938a1135129b4ffe613db88462f2d63a8491", "filename": "src/librustc_lint/context.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_lint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_lint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fcontext.rs?ref=5930081f346a4c527b3d44ce20dba7025edd5669", "patch": "@@ -394,8 +394,11 @@ impl LintStore {\n                     let symbols =\n                         self.by_name.keys().map(|name| Symbol::intern(&name)).collect::<Vec<_>>();\n \n-                    let suggestion =\n-                        find_best_match_for_name(symbols.iter(), &lint_name.to_lowercase(), None);\n+                    let suggestion = find_best_match_for_name(\n+                        symbols.iter(),\n+                        Symbol::intern(&lint_name.to_lowercase()),\n+                        None,\n+                    );\n \n                     CheckLintNameResult::NoLint(suggestion)\n                 }"}, {"sha": "c5a43b91b5e9b050baabbd28ad1481c10fff6870", "filename": "src/librustc_metadata/link_args.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_metadata%2Flink_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_metadata%2Flink_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flink_args.rs?ref=5930081f346a4c527b3d44ce20dba7025edd5669", "patch": "@@ -1,7 +1,7 @@\n use rustc_hir as hir;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_middle::ty::TyCtxt;\n-use rustc_span::symbol::sym;\n+use rustc_span::symbol::{sym, Symbol};\n use rustc_target::spec::abi::Abi;\n \n crate fn collect(tcx: TyCtxt<'_>) -> Vec<String> {\n@@ -11,7 +11,7 @@ crate fn collect(tcx: TyCtxt<'_>) -> Vec<String> {\n     for attr in tcx.hir().krate().item.attrs.iter() {\n         if attr.has_name(sym::link_args) {\n             if let Some(linkarg) = attr.value_str() {\n-                collector.add_link_args(&linkarg.as_str());\n+                collector.add_link_args(linkarg);\n             }\n         }\n     }\n@@ -36,7 +36,7 @@ impl<'tcx> ItemLikeVisitor<'tcx> for Collector {\n         // First, add all of the custom #[link_args] attributes\n         for m in it.attrs.iter().filter(|a| a.check_name(sym::link_args)) {\n             if let Some(linkarg) = m.value_str() {\n-                self.add_link_args(&linkarg.as_str());\n+                self.add_link_args(linkarg);\n             }\n         }\n     }\n@@ -46,7 +46,7 @@ impl<'tcx> ItemLikeVisitor<'tcx> for Collector {\n }\n \n impl Collector {\n-    fn add_link_args(&mut self, args: &str) {\n-        self.args.extend(args.split(' ').filter(|s| !s.is_empty()).map(|s| s.to_string()))\n+    fn add_link_args(&mut self, args: Symbol) {\n+        self.args.extend(args.as_str().split(' ').filter(|s| !s.is_empty()).map(|s| s.to_string()))\n     }\n }"}, {"sha": "c9e5a196f9179946091b6ae990f6e11b58c618b5", "filename": "src/librustc_middle/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_middle%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_middle%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmono.rs?ref=5930081f346a4c527b3d44ce20dba7025edd5669", "patch": "@@ -448,8 +448,7 @@ impl CodegenUnitNameBuilder<'tcx> {\n         if self.tcx.sess.opts.debugging_opts.human_readable_cgu_names {\n             cgu_name\n         } else {\n-            let cgu_name = &cgu_name.as_str();\n-            Symbol::intern(&CodegenUnit::mangle_name(cgu_name))\n+            Symbol::intern(&CodegenUnit::mangle_name(&cgu_name.as_str()))\n         }\n     }\n "}, {"sha": "8b67f4743c6b6e1fa02bec4129ccc1691c82b9a5", "filename": "src/librustc_parse/parser/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fattr.rs?ref=5930081f346a4c527b3d44ce20dba7025edd5669", "patch": "@@ -74,7 +74,7 @@ impl<'a> Parser<'a> {\n     }\n \n     fn mk_doc_comment(&self, s: Symbol) -> ast::Attribute {\n-        attr::mk_doc_comment(comments::doc_comment_style(&s.as_str()), s, self.token.span)\n+        attr::mk_doc_comment(comments::doc_comment_style(s), s, self.token.span)\n     }\n \n     /// Matches `attribute = # ! [ meta_item ]`."}, {"sha": "72866468b6560b96a94d0c33c310aad767427c0a", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=5930081f346a4c527b3d44ce20dba7025edd5669", "patch": "@@ -213,7 +213,7 @@ impl TokenCursor {\n             tok => return tok,\n         };\n \n-        let stripped = strip_doc_comment_decoration(&name.as_str());\n+        let stripped = strip_doc_comment_decoration(name);\n \n         // Searches for the occurrences of `\"#*` and returns the minimum number of `#`s\n         // required to wrap the text.\n@@ -250,7 +250,7 @@ impl TokenCursor {\n             TokenCursorFrame::new(\n                 delim_span,\n                 token::NoDelim,\n-                &if doc_comment_style(&name.as_str()) == AttrStyle::Inner {\n+                &if doc_comment_style(name) == AttrStyle::Inner {\n                     [TokenTree::token(token::Pound, sp), TokenTree::token(token::Not, sp), body]\n                         .iter()\n                         .cloned()"}, {"sha": "4f25b948eb66e58e859bec2f8b4dd7dd8b484277", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=5930081f346a4c527b3d44ce20dba7025edd5669", "patch": "@@ -674,7 +674,7 @@ impl<'a> Resolver<'a> {\n \n         match find_best_match_for_name(\n             suggestions.iter().map(|suggestion| &suggestion.candidate),\n-            &ident.as_str(),\n+            ident.name,\n             None,\n         ) {\n             Some(found) if found != ident.name => {"}, {"sha": "d3f45f962a025e5d3cbf2a51dffdb45373871e78", "filename": "src/librustc_resolve/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_resolve%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_resolve%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fimports.rs?ref=5930081f346a4c527b3d44ce20dba7025edd5669", "patch": "@@ -1132,7 +1132,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                 });\n \n                 let lev_suggestion =\n-                    find_best_match_for_name(names, &ident.as_str(), None).map(|suggestion| {\n+                    find_best_match_for_name(names, ident.name, None).map(|suggestion| {\n                         (\n                             vec![(ident.span, suggestion.to_string())],\n                             String::from(\"a similar name exists in the module\"),"}, {"sha": "fb4c4025123a02d625b789af0e0a96b75fd7b01d", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=5930081f346a4c527b3d44ce20dba7025edd5669", "patch": "@@ -760,7 +760,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     self.r.report_error(\n                         original_span,\n                         ResolutionError::UnreachableLabel {\n-                            name: &label.name.as_str(),\n+                            name: label.name,\n                             definition_span: ident.span,\n                             suggestion,\n                         },\n@@ -777,7 +777,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n \n         self.r.report_error(\n             original_span,\n-            ResolutionError::UndeclaredLabel { name: &label.name.as_str(), suggestion },\n+            ResolutionError::UndeclaredLabel { name: label.name, suggestion },\n         );\n         None\n     }\n@@ -1550,7 +1550,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 // `Variant(a, a)`:\n                 _ => IdentifierBoundMoreThanOnceInSamePattern,\n             };\n-            self.r.report_error(ident.span, error(&ident.as_str()));\n+            self.r.report_error(ident.span, error(ident.name));\n         }\n \n         // Record as bound if it's valid:"}, {"sha": "a08e46ef99843fbdc9d305b09daf614faa30bf07", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=5930081f346a4c527b3d44ce20dba7025edd5669", "patch": "@@ -765,7 +765,7 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n \n         match find_best_match_for_name(\n             names.iter().map(|suggestion| &suggestion.candidate),\n-            &name.as_str(),\n+            name,\n             None,\n         ) {\n             Some(found) if found != name => {\n@@ -1008,7 +1008,7 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n             .filter(|(id, _)| id.span.ctxt() == label.span.ctxt())\n             .map(|(id, _)| &id.name);\n \n-        find_best_match_for_name(names, &label.as_str(), None).map(|symbol| {\n+        find_best_match_for_name(names, label.name, None).map(|symbol| {\n             // Upon finding a similar name, get the ident that it was from - the span\n             // contained within helps make a useful diagnostic. In addition, determine\n             // whether this candidate is within scope."}, {"sha": "a265c15c18bc98efff9c39167d96acd8384c845e", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=5930081f346a4c527b3d44ce20dba7025edd5669", "patch": "@@ -193,11 +193,11 @@ enum ResolutionError<'a> {\n     /// Error E0409: variable `{}` is bound in inconsistent ways within the same match arm.\n     VariableBoundWithDifferentMode(Symbol, Span),\n     /// Error E0415: identifier is bound more than once in this parameter list.\n-    IdentifierBoundMoreThanOnceInParameterList(&'a str),\n+    IdentifierBoundMoreThanOnceInParameterList(Symbol),\n     /// Error E0416: identifier is bound more than once in the same pattern.\n-    IdentifierBoundMoreThanOnceInSamePattern(&'a str),\n+    IdentifierBoundMoreThanOnceInSamePattern(Symbol),\n     /// Error E0426: use of undeclared label.\n-    UndeclaredLabel { name: &'a str, suggestion: Option<LabelSuggestion> },\n+    UndeclaredLabel { name: Symbol, suggestion: Option<LabelSuggestion> },\n     /// Error E0429: `self` imports are only allowed within a `{ }` list.\n     SelfImportsOnlyAllowedWithin { root: bool, span_with_rename: Span },\n     /// Error E0430: `self` import can only appear once in the list.\n@@ -211,13 +211,13 @@ enum ResolutionError<'a> {\n     /// Error E0435: attempt to use a non-constant value in a constant.\n     AttemptToUseNonConstantValueInConstant,\n     /// Error E0530: `X` bindings cannot shadow `Y`s.\n-    BindingShadowsSomethingUnacceptable(&'a str, Symbol, &'a NameBinding<'a>),\n+    BindingShadowsSomethingUnacceptable(&'static str, Symbol, &'a NameBinding<'a>),\n     /// Error E0128: type parameters with a default cannot use forward-declared identifiers.\n     ForwardDeclaredTyParam, // FIXME(const_generics:defaults)\n     /// Error E0735: type parameters with a default cannot use `Self`\n     SelfInTyParamDefault,\n     /// Error E0767: use of unreachable label\n-    UnreachableLabel { name: &'a str, definition_span: Span, suggestion: Option<LabelSuggestion> },\n+    UnreachableLabel { name: Symbol, definition_span: Span, suggestion: Option<LabelSuggestion> },\n }\n \n enum VisResolutionError<'a> {"}, {"sha": "e29bc9f078ddbd940e7feea107f9aac1d44c5efd", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=5930081f346a4c527b3d44ce20dba7025edd5669", "patch": "@@ -824,7 +824,7 @@ impl<'tcx> SaveContext<'tcx> {\n         for attr in attrs {\n             if let Some(val) = attr.doc_str() {\n                 if attr.is_doc_comment() {\n-                    result.push_str(&strip_doc_comment_decoration(&val.as_str()));\n+                    result.push_str(&strip_doc_comment_decoration(val));\n                 } else {\n                     result.push_str(&val.as_str());\n                 }"}, {"sha": "ace233611223ce9b5a052a07f43f0d5754dbfe48", "filename": "src/librustc_session/cgu_reuse_tracker.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_session%2Fcgu_reuse_tracker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_session%2Fcgu_reuse_tracker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fcgu_reuse_tracker.rs?ref=5930081f346a4c527b3d44ce20dba7025edd5669", "patch": "@@ -4,7 +4,7 @@\n \n use log::debug;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_span::Span;\n+use rustc_span::{Span, Symbol};\n use std::sync::{Arc, Mutex};\n \n #[derive(Copy, Clone, Debug, PartialEq, PartialOrd)]\n@@ -67,7 +67,7 @@ impl CguReuseTracker {\n \n     pub fn set_expectation(\n         &self,\n-        cgu_name: &str,\n+        cgu_name: Symbol,\n         cgu_user_name: &str,\n         error_span: Span,\n         expected_reuse: CguReuse,"}, {"sha": "0e9df5feb32bacd98f6e61458709e7c8fd988ee7", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=5930081f346a4c527b3d44ce20dba7025edd5669", "patch": "@@ -1597,7 +1597,7 @@ impl !Sync for SymbolStr {}\n \n /// This impl means that if `ss` is a `SymbolStr`:\n /// - `*ss` is a `str`;\n-/// - `&*ss` is a `&str`;\n+/// - `&*ss` is a `&str` (and `match &*ss { ... }` is a common pattern).\n /// - `&ss as &str` is a `&str`, which means that `&ss` can be passed to a\n ///   function expecting a `&str`.\n impl std::ops::Deref for SymbolStr {"}, {"sha": "616f5d90395e1cd0928720ca8fa4bd406ae918b5", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=5930081f346a4c527b3d44ce20dba7025edd5669", "patch": "@@ -2254,7 +2254,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             .collect();\n \n         if let (Some(suggested_name), true) = (\n-            find_best_match_for_name(all_candidate_names.iter(), &assoc_name.as_str(), None),\n+            find_best_match_for_name(all_candidate_names.iter(), assoc_name.name, None),\n             assoc_name.span != DUMMY_SP,\n         ) {\n             err.span_suggestion(\n@@ -2354,7 +2354,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     let adt_def = qself_ty.ty_adt_def().expect(\"enum is not an ADT\");\n                     if let Some(suggested_name) = find_best_match_for_name(\n                         adt_def.variants.iter().map(|variant| &variant.ident.name),\n-                        &assoc_ident.as_str(),\n+                        assoc_ident.name,\n                         None,\n                     ) {\n                         err.span_suggestion("}, {"sha": "508f0cf1a91150dc7955dfbe27ce1ef960a25969", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=5930081f346a4c527b3d44ce20dba7025edd5669", "patch": "@@ -1336,7 +1336,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // prevent all specified fields from being suggested\n                 let skip_fields = skip_fields.iter().map(|ref x| x.ident.name);\n                 if let Some(field_name) =\n-                    Self::suggest_field_name(variant, &field.ident.as_str(), skip_fields.collect())\n+                    Self::suggest_field_name(variant, field.ident.name, skip_fields.collect())\n                 {\n                     err.span_suggestion(\n                         field.ident.span,\n@@ -1377,7 +1377,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     // Return an hint about the closest match in field names\n     fn suggest_field_name(\n         variant: &'tcx ty::VariantDef,\n-        field: &str,\n+        field: Symbol,\n         skip: Vec<Symbol>,\n     ) -> Option<Symbol> {\n         let names = variant.fields.iter().filter_map(|field| {\n@@ -1621,7 +1621,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         field: Ident,\n     ) {\n         if let Some(suggested_field_name) =\n-            Self::suggest_field_name(def.non_enum_variant(), &field.as_str(), vec![])\n+            Self::suggest_field_name(def.non_enum_variant(), field.name, vec![])\n         {\n             err.span_suggestion(\n                 field.span,"}, {"sha": "9c5e3cbc93844a338f77c3c6977b26e59a520e63", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=5930081f346a4c527b3d44ce20dba7025edd5669", "patch": "@@ -1536,7 +1536,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             } else {\n                 let best_name = {\n                     let names = applicable_close_candidates.iter().map(|cand| &cand.ident.name);\n-                    find_best_match_for_name(names, &self.method_name.unwrap().as_str(), None)\n+                    find_best_match_for_name(names, self.method_name.unwrap().name, None)\n                 }\n                 .unwrap();\n                 Ok(applicable_close_candidates"}, {"sha": "b8e26fc487140ab442c35477e3f4c18afd0c8816", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=5930081f346a4c527b3d44ce20dba7025edd5669", "patch": "@@ -729,7 +729,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let adt_def = actual.ty_adt_def().expect(\"enum is not an ADT\");\n                     if let Some(suggestion) = lev_distance::find_best_match_for_name(\n                         adt_def.variants.iter().map(|s| &s.ident.name),\n-                        &item_name.as_str(),\n+                        item_name.name,\n                         None,\n                     ) {\n                         err.span_suggestion("}, {"sha": "18fc37df88652b048d4a017990deaa2708b08dd1", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=5930081f346a4c527b3d44ce20dba7025edd5669", "patch": "@@ -1216,7 +1216,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             );\n             if plural == \"\" {\n                 let input = unmentioned_fields.iter().map(|field| &field.name);\n-                let suggested_name = find_best_match_for_name(input, &ident.as_str(), None);\n+                let suggested_name = find_best_match_for_name(input, ident.name, None);\n                 if let Some(suggested_name) = suggested_name {\n                     err.span_suggestion(\n                         ident.span,"}, {"sha": "c9ae67ded0a3f52d153955056d95a6d25b005d3a", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=5930081f346a4c527b3d44ce20dba7025edd5669", "patch": "@@ -540,7 +540,7 @@ impl Attributes {\n             .filter_map(|attr| {\n                 if let Some(value) = attr.doc_str() {\n                     let (value, mk_fragment): (_, fn(_, _, _) -> _) = if attr.is_doc_comment() {\n-                        (strip_doc_comment_decoration(&value.as_str()), DocFragment::SugaredDoc)\n+                        (strip_doc_comment_decoration(value), DocFragment::SugaredDoc)\n                     } else {\n                         (value.to_string(), DocFragment::RawDoc)\n                     };"}, {"sha": "c29432bf933849e4cbc12b0e9c4ec300307e3937", "filename": "src/tools/clippy/clippy_lints/src/attrs.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5930081f346a4c527b3d44ce20dba7025edd5669/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs?ref=5930081f346a4c527b3d44ce20dba7025edd5669", "patch": "@@ -421,7 +421,11 @@ fn check_clippy_lint_names(cx: &LateContext<'_>, ident: &str, items: &[NestedMet\n                             .iter()\n                             .map(|l| Symbol::intern(&l.name_lower()))\n                             .collect::<Vec<_>>();\n-                        let sugg = find_best_match_for_name(symbols.iter(), &format!(\"clippy::{}\", name_lower), None);\n+                        let sugg = find_best_match_for_name(\n+                            symbols.iter(),\n+                            Symbol::intern(&format!(\"clippy::{}\", name_lower)),\n+                            None,\n+                        );\n                         if lint_name.chars().any(char::is_uppercase)\n                             && lint_store.find_lints(&format!(\"clippy::{}\", name_lower)).is_ok()\n                         {"}]}