{"sha": "ed871cb368f6b72dde644b0c21e0f9e62dba1810", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkODcxY2IzNjhmNmI3MmRkZTY0NGIwYzIxZTBmOWU2MmRiYTE4MTA=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-01-06T17:10:53Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-01-19T15:15:07Z"}, "message": "Use a struct for user type annotations", "tree": {"sha": "c5ddda10645357a59261b11a51c76be15b4dd758", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5ddda10645357a59261b11a51c76be15b4dd758"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed871cb368f6b72dde644b0c21e0f9e62dba1810", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed871cb368f6b72dde644b0c21e0f9e62dba1810", "html_url": "https://github.com/rust-lang/rust/commit/ed871cb368f6b72dde644b0c21e0f9e62dba1810", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed871cb368f6b72dde644b0c21e0f9e62dba1810/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ca6bd50b584bc157eac783f2a2251424382351f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ca6bd50b584bc157eac783f2a2251424382351f", "html_url": "https://github.com/rust-lang/rust/commit/5ca6bd50b584bc157eac783f2a2251424382351f"}], "stats": {"total": 101, "additions": 70, "deletions": 31}, "files": [{"sha": "9b613e3e1abad02ba3f689ae5c5984d6617aa9ca", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed871cb368f6b72dde644b0c21e0f9e62dba1810/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed871cb368f6b72dde644b0c21e0f9e62dba1810/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=ed871cb368f6b72dde644b0c21e0f9e62dba1810", "patch": "@@ -1240,6 +1240,12 @@ impl_stable_hash_for!(\n     }\n );\n \n+impl_stable_hash_for!(\n+    struct ty::CanonicalUserTypeAnnotation<'tcx> {\n+        user_ty, span\n+    }\n+);\n+\n impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for ty::UserType<'gcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,"}, {"sha": "f824ab7e5b39546c4c989a827b346b4b237067ea", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed871cb368f6b72dde644b0c21e0f9e62dba1810/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed871cb368f6b72dde644b0c21e0f9e62dba1810/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=ed871cb368f6b72dde644b0c21e0f9e62dba1810", "patch": "@@ -31,7 +31,7 @@ use ty::subst::{Subst, Substs};\n use ty::layout::VariantIdx;\n use ty::{\n     self, AdtDef, CanonicalUserTypeAnnotations, ClosureSubsts, GeneratorSubsts, Region, Ty, TyCtxt,\n-    UserTypeAnnotationIndex, UserType,\n+    UserTypeAnnotationIndex,\n };\n use util::ppaux;\n "}, {"sha": "49a1e5046aa0e3d87a3b9cfde035ab3c82711215", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ed871cb368f6b72dde644b0c21e0f9e62dba1810/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed871cb368f6b72dde644b0c21e0f9e62dba1810/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=ed871cb368f6b72dde644b0c21e0f9e62dba1810", "patch": "@@ -1,7 +1,6 @@\n use hir::def_id::DefId;\n-use infer::canonical::Canonical;\n use ty::subst::Substs;\n-use ty::{ClosureSubsts, GeneratorSubsts, Region, Ty};\n+use ty::{CanonicalUserTypeAnnotation, ClosureSubsts, GeneratorSubsts, Region, Ty};\n use mir::*;\n use syntax_pos::Span;\n \n@@ -221,7 +220,7 @@ macro_rules! make_mir_visitor {\n             fn visit_user_type_annotation(\n                 &mut self,\n                 index: UserTypeAnnotationIndex,\n-                ty: & $($mutability)* Canonical<'tcx, UserType<'tcx>>,\n+                ty: & $($mutability)* CanonicalUserTypeAnnotation<'tcx>,\n             ) {\n                 self.super_user_type_annotation(index, ty);\n             }\n@@ -309,12 +308,15 @@ macro_rules! make_mir_visitor {\n                     self.visit_local_decl(local, & $($mutability)* mir.local_decls[local]);\n                 }\n \n-                for index in mir.user_type_annotations.indices() {\n-                    let (span, annotation) = & $($mutability)* mir.user_type_annotations[index];\n+                macro_rules! type_annotations {\n+                    (mut) => (mir.user_type_annotations.iter_enumerated_mut());\n+                    () => (mir.user_type_annotations.iter_enumerated());\n+                };\n+\n+                for (index, annotation) in type_annotations!($($mutability)*) {\n                     self.visit_user_type_annotation(\n                         index, annotation\n                     );\n-                    self.visit_span(span);\n                 }\n \n                 self.visit_span(&$($mutability)* mir.span);\n@@ -882,8 +884,9 @@ macro_rules! make_mir_visitor {\n             fn super_user_type_annotation(\n                 &mut self,\n                 _index: UserTypeAnnotationIndex,\n-                _ty: & $($mutability)* Canonical<'tcx, UserType<'tcx>>,\n+                ty: & $($mutability)* CanonicalUserTypeAnnotation<'tcx>,\n             ) {\n+                self.visit_span(& $($mutability)* ty.span);\n             }\n \n             fn super_ty(&mut self, _ty: & $($mutability)* Ty<'tcx>) {"}, {"sha": "59835afc8410369349539bc28ce909bb74034acd", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ed871cb368f6b72dde644b0c21e0f9e62dba1810/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed871cb368f6b72dde644b0c21e0f9e62dba1810/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=ed871cb368f6b72dde644b0c21e0f9e62dba1810", "patch": "@@ -807,7 +807,27 @@ newtype_index! {\n \n /// Mapping of type annotation indices to canonical user type annotations.\n pub type CanonicalUserTypeAnnotations<'tcx> =\n-    IndexVec<UserTypeAnnotationIndex, (Span, CanonicalUserType<'tcx>)>;\n+    IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;\n+\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n+pub struct CanonicalUserTypeAnnotation<'tcx> {\n+    pub user_ty: CanonicalUserType<'tcx>,\n+    pub span: Span,\n+}\n+\n+BraceStructTypeFoldableImpl! {\n+    impl<'tcx> TypeFoldable<'tcx> for CanonicalUserTypeAnnotation<'tcx> {\n+        user_ty, span\n+    }\n+}\n+\n+BraceStructLiftImpl! {\n+    impl<'a, 'tcx> Lift<'tcx> for CanonicalUserTypeAnnotation<'a> {\n+        type Lifted = CanonicalUserTypeAnnotation<'tcx>;\n+        user_ty, span\n+    }\n+}\n+\n \n /// Canonicalized user type annotation.\n pub type CanonicalUserType<'gcx> = Canonical<'gcx, UserType<'gcx>>;"}, {"sha": "dc91a30ef9273fa8487ff5c05cde0f1534db2971", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed871cb368f6b72dde644b0c21e0f9e62dba1810/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed871cb368f6b72dde644b0c21e0f9e62dba1810/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=ed871cb368f6b72dde644b0c21e0f9e62dba1810", "patch": "@@ -74,7 +74,7 @@ pub use self::context::{TyCtxt, FreeRegionInfo, GlobalArenas, AllArenas, tls, ke\n pub use self::context::{Lift, TypeckTables, CtxtInterners};\n pub use self::context::{\n     UserTypeAnnotationIndex, UserType, CanonicalUserType,\n-    CanonicalUserTypeAnnotations,\n+    CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations,\n };\n \n pub use self::instance::{Instance, InstanceDef};"}, {"sha": "ade06bce4690bf1582fe5cd2d3ab987f655b32a8", "filename": "src/librustc_mir/borrow_check/nll/renumber.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ed871cb368f6b72dde644b0c21e0f9e62dba1810/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed871cb368f6b72dde644b0c21e0f9e62dba1810/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs?ref=ed871cb368f6b72dde644b0c21e0f9e62dba1810", "patch": "@@ -1,8 +1,7 @@\n-use rustc::infer::canonical::Canonical;\n use rustc::ty::subst::Substs;\n use rustc::ty::{\n-    self, ClosureSubsts, GeneratorSubsts, Ty, TypeFoldable, UserType,\n-    UserTypeAnnotationIndex,\n+    self, ClosureSubsts, GeneratorSubsts, Ty, TypeFoldable,\n+    UserTypeAnnotationIndex, CanonicalUserTypeAnnotation\n };\n use rustc::mir::{Location, Mir};\n use rustc::mir::visit::{MutVisitor, TyContext};\n@@ -62,7 +61,7 @@ impl<'a, 'gcx, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'gcx, 'tcx> {\n     fn visit_user_type_annotation(\n         &mut self,\n         _index: UserTypeAnnotationIndex,\n-        _ty: &mut Canonical<'tcx, UserType<'tcx>>,\n+        _ty: &mut CanonicalUserTypeAnnotation,\n     ) {\n         // User type annotations represent the types that the user\n         // wrote in the progarm. We don't want to erase the regions"}, {"sha": "82ffafa4ce975b80323e817a486309314858f0ba", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ed871cb368f6b72dde644b0c21e0f9e62dba1810/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed871cb368f6b72dde644b0c21e0f9e62dba1810/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=ed871cb368f6b72dde644b0c21e0f9e62dba1810", "patch": "@@ -38,7 +38,7 @@ use rustc::ty::fold::TypeFoldable;\n use rustc::ty::subst::{Subst, Substs, UnpackedKind};\n use rustc::ty::{\n     self, RegionVid, ToPolyTraitRef, Ty, TyCtxt, TyKind, UserType,\n-    UserTypeAnnotationIndex,\n+    CanonicalUserTypeAnnotation, UserTypeAnnotationIndex,\n };\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n@@ -920,13 +920,14 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n              self.mir.user_type_annotations\n         );\n         for annotation_index in self.mir.user_type_annotations.indices() {\n-            let (span, canonical_annotation) = &self.mir.user_type_annotations[annotation_index];\n+            let CanonicalUserTypeAnnotation { span, ref user_ty } =\n+                self.mir.user_type_annotations[annotation_index];\n             let (mut annotation, _) = self.infcx.instantiate_canonical_with_fresh_inference_vars(\n-                *span, &canonical_annotation\n+                span, user_ty\n             );\n             match annotation {\n                 UserType::Ty(ref mut ty) =>\n-                    *ty = self.normalize(ty, Locations::All(*span)),\n+                    *ty = self.normalize(ty, Locations::All(span)),\n                 _ => {},\n             }\n             self.instantiated_type_annotations.insert(annotation_index, annotation);"}, {"sha": "4f812f53745d7ee0ebc22a6a0ac2a11e364016fc", "filename": "src/librustc_mir/build/expr/as_constant.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed871cb368f6b72dde644b0c21e0f9e62dba1810/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed871cb368f6b72dde644b0c21e0f9e62dba1810/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs?ref=ed871cb368f6b72dde644b0c21e0f9e62dba1810", "patch": "@@ -3,6 +3,7 @@\n use build::Builder;\n use hair::*;\n use rustc::mir::*;\n+use rustc::ty::CanonicalUserTypeAnnotation;\n \n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// Compile `expr`, yielding a compile-time constant. Assumes that\n@@ -31,7 +32,10 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             } => this.as_constant(value),\n             ExprKind::Literal { literal, user_ty } => {\n                 let user_ty = user_ty.map(|ty| {\n-                    this.canonical_user_type_annotations.push((span, ty))\n+                    this.canonical_user_type_annotations.push(CanonicalUserTypeAnnotation {\n+                        span,\n+                        user_ty: ty,\n+                    })\n                 });\n                 Constant {\n                     span,"}, {"sha": "5429ce2a2e3dfe34214aff6804bc03d802722729", "filename": "src/librustc_mir/build/expr/as_place.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed871cb368f6b72dde644b0c21e0f9e62dba1810/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed871cb368f6b72dde644b0c21e0f9e62dba1810/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs?ref=ed871cb368f6b72dde644b0c21e0f9e62dba1810", "patch": "@@ -6,7 +6,7 @@ use build::{BlockAnd, BlockAndExtension, Builder};\n use hair::*;\n use rustc::mir::interpret::EvalErrorKind::BoundsCheck;\n use rustc::mir::*;\n-use rustc::ty::Variance;\n+use rustc::ty::{CanonicalUserTypeAnnotation, Variance};\n \n use rustc_data_structures::indexed_vec::Idx;\n \n@@ -134,7 +134,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 let place = unpack!(block = this.as_place(block, source));\n                 if let Some(user_ty) = user_ty {\n                     let annotation_index = this.canonical_user_type_annotations.push(\n-                        (source_info.span, user_ty)\n+                        CanonicalUserTypeAnnotation { span: source_info.span, user_ty }\n                     );\n                     this.cfg.push(\n                         block,\n@@ -157,7 +157,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 );\n                 if let Some(user_ty) = user_ty {\n                     let annotation_index = this.canonical_user_type_annotations.push(\n-                        (source_info.span, user_ty)\n+                        CanonicalUserTypeAnnotation { span: source_info.span, user_ty }\n                     );\n                     this.cfg.push(\n                         block,"}, {"sha": "501a10cfbb900dccca8d8b77cd03329e6b9c1e6b", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ed871cb368f6b72dde644b0c21e0f9e62dba1810/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed871cb368f6b72dde644b0c21e0f9e62dba1810/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=ed871cb368f6b72dde644b0c21e0f9e62dba1810", "patch": "@@ -9,7 +9,7 @@ use hair::*;\n use rustc::middle::region;\n use rustc::mir::interpret::EvalErrorKind;\n use rustc::mir::*;\n-use rustc::ty::{self, Ty, UpvarSubsts};\n+use rustc::ty::{self, CanonicalUserTypeAnnotation, Ty, UpvarSubsts};\n use syntax_pos::Span;\n \n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n@@ -332,7 +332,10 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 };\n \n                 let user_ty = user_ty.map(|ty| {\n-                    this.canonical_user_type_annotations.push((expr_span, ty))\n+                    this.canonical_user_type_annotations.push(CanonicalUserTypeAnnotation {\n+                        span: source_info.span,\n+                        user_ty: ty,\n+                    })\n                 });\n                 let adt = box AggregateKind::Adt(\n                     adt_def,"}, {"sha": "61d1216fd3ea8c025e6aa7d840828b24f33940c2", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ed871cb368f6b72dde644b0c21e0f9e62dba1810/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed871cb368f6b72dde644b0c21e0f9e62dba1810/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=ed871cb368f6b72dde644b0c21e0f9e62dba1810", "patch": "@@ -9,7 +9,7 @@ use build::{BlockAnd, BlockAndExtension, Builder};\n use build::{GuardFrame, GuardFrameLocal, LocalsForNode};\n use hair::*;\n use rustc::mir::*;\n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, CanonicalUserTypeAnnotation, Ty};\n use rustc::ty::layout::VariantIdx;\n use rustc_data_structures::bit_set::BitSet;\n use rustc_data_structures::fx::FxHashMap;\n@@ -570,7 +570,10 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 //\n                 // Note that the variance doesn't apply here, as we are tracking the effect\n                 // of `user_ty` on any bindings contained with subpattern.\n-                let annotation = (user_ty_span, user_ty.base);\n+                let annotation = CanonicalUserTypeAnnotation {\n+                    span: user_ty_span,\n+                    user_ty: user_ty.base,\n+                };\n                 let projection = UserTypeProjection {\n                     base: self.canonical_user_type_annotations.push(annotation),\n                     projs: user_ty.projs.clone(),"}, {"sha": "8a5e6a581b3323316bd6ff8686dac1e20afffb40", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed871cb368f6b72dde644b0c21e0f9e62dba1810/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed871cb368f6b72dde644b0c21e0f9e62dba1810/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=ed871cb368f6b72dde644b0c21e0f9e62dba1810", "patch": "@@ -14,8 +14,8 @@ use hair::constant::*;\n use rustc::mir::{fmt_const_val, Field, BorrowKind, Mutability};\n use rustc::mir::{ProjectionElem, UserTypeProjection};\n use rustc::mir::interpret::{Scalar, GlobalId, ConstValue, sign_extend};\n-use rustc::ty::{self, Region, TyCtxt, AdtDef, Ty, Lift};\n-use rustc::ty::{CanonicalUserType, CanonicalUserTypeAnnotations, UserType};\n+use rustc::ty::{self, Region, TyCtxt, AdtDef, Ty, Lift, UserType};\n+use rustc::ty::{CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations};\n use rustc::ty::subst::{Substs, Kind};\n use rustc::ty::layout::VariantIdx;\n use rustc::hir::{self, PatKind, RangeEnd};\n@@ -78,7 +78,7 @@ impl<'tcx> PatternTypeProjection<'tcx> {\n         span: Span,\n     ) -> UserTypeProjection<'tcx> {\n         UserTypeProjection {\n-            base: annotations.push((span, self.base)),\n+            base: annotations.push(CanonicalUserTypeAnnotation{ span, user_ty: self.base }),\n             projs: self.projs\n         }\n     }"}, {"sha": "e99f2da73385df0839e90edc2fa35f5950bc47bb", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed871cb368f6b72dde644b0c21e0f9e62dba1810/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed871cb368f6b72dde644b0c21e0f9e62dba1810/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=ed871cb368f6b72dde644b0c21e0f9e62dba1810", "patch": "@@ -632,8 +632,8 @@ fn write_user_type_annotations(mir: &Mir, w: &mut dyn Write) -> io::Result<()> {\n     if !mir.user_type_annotations.is_empty() {\n         writeln!(w, \"| User Type Annotations\")?;\n     }\n-    for (index, (span, annotation)) in mir.user_type_annotations.iter_enumerated() {\n-        writeln!(w, \"| {:?}: {:?} at {:?}\", index.index(), annotation, span)?;\n+    for (index, annotation) in mir.user_type_annotations.iter_enumerated() {\n+        writeln!(w, \"| {:?}: {:?} at {:?}\", index.index(), annotation.user_ty, annotation.span)?;\n     }\n     if !mir.user_type_annotations.is_empty() {\n         writeln!(w, \"|\")?;"}]}