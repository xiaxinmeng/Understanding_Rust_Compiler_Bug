{"sha": "8121cf077c68fa1d18a1a538deb5acdf79c5e732", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMjFjZjA3N2M2OGZhMWQxOGExYTUzOGRlYjVhY2RmNzljNWU3MzI=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2015-03-07T05:46:30Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2015-03-10T06:24:34Z"}, "message": "Restructure debug builders to minimize codegen\n\nSwitching from generic bounds to trait objects and having un-inlined\ninner methods should cut down on the size of Debug impls, since we care\nabout the speed of a Debug implementation way less than binary bloat.", "tree": {"sha": "c9de8767394a4cfd57fc445d63734d3972c07e0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9de8767394a4cfd57fc445d63734d3972c07e0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8121cf077c68fa1d18a1a538deb5acdf79c5e732", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8121cf077c68fa1d18a1a538deb5acdf79c5e732", "html_url": "https://github.com/rust-lang/rust/commit/8121cf077c68fa1d18a1a538deb5acdf79c5e732", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8121cf077c68fa1d18a1a538deb5acdf79c5e732/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3656bd81baa3c2cb5065da04f9debf378f99772", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3656bd81baa3c2cb5065da04f9debf378f99772", "html_url": "https://github.com/rust-lang/rust/commit/e3656bd81baa3c2cb5065da04f9debf378f99772"}], "stats": {"total": 76, "additions": 58, "deletions": 18}, "files": [{"sha": "d96da4cafb068e01e5b2c1874cdd2b8320350004", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 58, "deletions": 18, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/8121cf077c68fa1d18a1a538deb5acdf79c5e732/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8121cf077c68fa1d18a1a538deb5acdf79c5e732/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=8121cf077c68fa1d18a1a538deb5acdf79c5e732", "patch": "@@ -63,8 +63,13 @@ pub fn debug_struct_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>, name: &str)\n impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n     /// Adds a new field to the generated struct output.\n     #[unstable(feature = \"core\", reason = \"method was just created\")]\n-    pub fn field<S>(mut self, name: &str, value: &S) -> DebugStruct<'a, 'b>\n-            where S: fmt::Debug {\n+    #[inline]\n+    pub fn field(mut self, name: &str, value: &fmt::Debug) -> DebugStruct<'a, 'b> {\n+        self.field_inner(name, value);\n+        self\n+    }\n+\n+    fn field_inner(&mut self, name: &str, value: &fmt::Debug) {\n         self.result = self.result.and_then(|_| {\n             let prefix = if self.has_fields {\n                 \",\"\n@@ -81,13 +86,18 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n         });\n \n         self.has_fields = true;\n-        self\n     }\n \n     /// Consumes the `DebugStruct`, finishing output and returning any error\n     /// encountered.\n     #[unstable(feature = \"core\", reason = \"method was just created\")]\n+    #[inline]\n     pub fn finish(mut self) -> fmt::Result {\n+        self.finish_inner();\n+        self.result\n+    }\n+\n+    fn finish_inner(&mut self) {\n         if self.has_fields {\n             self.result = self.result.and_then(|_| {\n                 if self.is_pretty() {\n@@ -97,7 +107,6 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n                 }\n             });\n         }\n-        self.result\n     }\n \n     fn is_pretty(&self) -> bool {\n@@ -127,7 +136,13 @@ pub fn debug_tuple_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>, name: &str) -> D\n impl<'a, 'b: 'a> DebugTuple<'a, 'b> {\n     /// Adds a new field to the generated tuple struct output.\n     #[unstable(feature = \"core\", reason = \"method was just created\")]\n-    pub fn field<S>(mut self, value: &S) -> DebugTuple<'a, 'b> where S: fmt::Debug {\n+    #[inline]\n+    pub fn field(mut self, value: &fmt::Debug) -> DebugTuple<'a, 'b> {\n+        self.field_inner(value);\n+        self\n+    }\n+\n+    fn field_inner(&mut self, value: &fmt::Debug) {\n         self.result = self.result.and_then(|_| {\n             let (prefix, space) = if self.has_fields {\n                 (\",\", \" \")\n@@ -144,13 +159,18 @@ impl<'a, 'b: 'a> DebugTuple<'a, 'b> {\n         });\n \n         self.has_fields = true;\n-        self\n     }\n \n     /// Consumes the `DebugTuple`, finishing output and returning any error\n     /// encountered.\n     #[unstable(feature = \"core\", reason = \"method was just created\")]\n+    #[inline]\n     pub fn finish(mut self) -> fmt::Result {\n+        self.finish_inner();\n+        self.result\n+    }\n+\n+    fn finish_inner(&mut self) {\n         if self.has_fields {\n             self.result = self.result.and_then(|_| {\n                 if self.is_pretty() {\n@@ -160,7 +180,6 @@ impl<'a, 'b: 'a> DebugTuple<'a, 'b> {\n                 }\n             });\n         }\n-        self.result\n     }\n \n     fn is_pretty(&self) -> bool {\n@@ -190,7 +209,13 @@ pub fn debug_set_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>, name: &str) -> Deb\n impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n     /// Adds a new entry to the set output.\n     #[unstable(feature = \"core\", reason = \"method was just created\")]\n-    pub fn entry<S>(mut self, entry: &S) -> DebugSet<'a, 'b> where S: fmt::Debug {\n+    #[inline]\n+    pub fn entry(mut self, entry: &fmt::Debug) -> DebugSet<'a, 'b> {\n+        self.entry_inner(entry);\n+        self\n+    }\n+\n+    fn entry_inner(&mut self, entry: &fmt::Debug) {\n         self.result = self.result.and_then(|_| {\n             let prefix = if self.has_fields {\n                 \",\"\n@@ -207,21 +232,26 @@ impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n         });\n \n         self.has_fields = true;\n-        self\n     }\n \n     /// Consumes the `DebugSet`, finishing output and returning any error\n     /// encountered.\n     #[unstable(feature = \"core\", reason = \"method was just created\")]\n-    pub fn finish(self) -> fmt::Result {\n-        self.result.and_then(|_| {\n+    #[inline]\n+    pub fn finish(mut self) -> fmt::Result {\n+        self.finish_inner();\n+        self.result\n+    }\n+\n+    fn finish_inner(&mut self) {\n+        self.result = self.result.and_then(|_| {\n             let end = match (self.has_fields, self.is_pretty()) {\n                 (false, _) => \"}\",\n                 (true, false) => \" }\",\n                 (true, true) => \"\\n}\",\n             };\n             self.fmt.write_str(end)\n-        })\n+        });\n     }\n \n     fn is_pretty(&self) -> bool {\n@@ -251,8 +281,13 @@ pub fn debug_map_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>, name: &str) -> Deb\n impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     /// Adds a new entry to the map output.\n     #[unstable(feature = \"core\", reason = \"method was just created\")]\n-    pub fn entry<K, V>(mut self, key: &K, value: &V) -> DebugMap<'a, 'b>\n-            where K: fmt::Debug, V: fmt::Debug {\n+    #[inline]\n+    pub fn entry(mut self, key: &fmt::Debug, value: &fmt::Debug) -> DebugMap<'a, 'b> {\n+        self.entry_inner(key, value);\n+        self\n+    }\n+\n+    fn entry_inner(&mut self, key: &fmt::Debug, value: &fmt::Debug) {\n         self.result = self.result.and_then(|_| {\n             let prefix = if self.has_fields {\n                 \",\"\n@@ -269,21 +304,26 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n         });\n \n         self.has_fields = true;\n-        self\n     }\n \n     /// Consumes the `DebugMap`, finishing output and returning any error\n     /// encountered.\n     #[unstable(feature = \"core\", reason = \"method was just created\")]\n-    pub fn finish(self) -> fmt::Result {\n-        self.result.and_then(|_| {\n+    #[inline]\n+    pub fn finish(mut self) -> fmt::Result {\n+        self.finish_inner();\n+        self.result\n+    }\n+\n+    fn finish_inner(&mut self) {\n+        self.result = self.result.and_then(|_| {\n             let end = match (self.has_fields, self.is_pretty()) {\n                 (false, _) => \"}\",\n                 (true, false) => \" }\",\n                 (true, true) => \"\\n}\",\n             };\n             self.fmt.write_str(end)\n-        })\n+        });\n     }\n \n     fn is_pretty(&self) -> bool {"}]}