{"sha": "d68c3ab17b6f6c3b71d0531063aec8e64098f59c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2OGMzYWIxN2I2ZjZjM2I3MWQwNTMxMDYzYWVjOGU2NDA5OGY1OWM=", "commit": {"author": {"name": "Anders Kaseorg", "email": "andersk@mit.edu", "date": "2017-07-03T21:18:01Z"}, "committer": {"name": "Anders Kaseorg", "email": "andersk@mit.edu", "date": "2017-07-03T22:38:53Z"}, "message": "Document unintuitive argument order for Vec::dedup_by relation\n\nWhen trying to use dedup_by to merge some auxiliary information from\nremoved elements into kept elements, I was surprised to observe that\nvec.dedup_by(same_bucket) calls same_bucket(a, b) where b appears\nbefore a in the vector, and discards a when true is returned.  This\nargument order is probably a bug, but since it has already been\nstabilized, I guess we should document it as a feature and move on.\n\n(Vec::dedup also uses == with this unexpected argument order, but I\nfigure that\u2019s not important since == is expected to be symmetric with\nno side effects.)\n\nSigned-off-by: Anders Kaseorg <andersk@mit.edu>", "tree": {"sha": "a0982968fd07326593d8a54b5e38d59c309fb3a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0982968fd07326593d8a54b5e38d59c309fb3a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d68c3ab17b6f6c3b71d0531063aec8e64098f59c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d68c3ab17b6f6c3b71d0531063aec8e64098f59c", "html_url": "https://github.com/rust-lang/rust/commit/d68c3ab17b6f6c3b71d0531063aec8e64098f59c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d68c3ab17b6f6c3b71d0531063aec8e64098f59c/comments", "author": {"login": "andersk", "id": 26471, "node_id": "MDQ6VXNlcjI2NDcx", "avatar_url": "https://avatars.githubusercontent.com/u/26471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andersk", "html_url": "https://github.com/andersk", "followers_url": "https://api.github.com/users/andersk/followers", "following_url": "https://api.github.com/users/andersk/following{/other_user}", "gists_url": "https://api.github.com/users/andersk/gists{/gist_id}", "starred_url": "https://api.github.com/users/andersk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andersk/subscriptions", "organizations_url": "https://api.github.com/users/andersk/orgs", "repos_url": "https://api.github.com/users/andersk/repos", "events_url": "https://api.github.com/users/andersk/events{/privacy}", "received_events_url": "https://api.github.com/users/andersk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "andersk", "id": 26471, "node_id": "MDQ6VXNlcjI2NDcx", "avatar_url": "https://avatars.githubusercontent.com/u/26471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andersk", "html_url": "https://github.com/andersk", "followers_url": "https://api.github.com/users/andersk/followers", "following_url": "https://api.github.com/users/andersk/following{/other_user}", "gists_url": "https://api.github.com/users/andersk/gists{/gist_id}", "starred_url": "https://api.github.com/users/andersk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andersk/subscriptions", "organizations_url": "https://api.github.com/users/andersk/orgs", "repos_url": "https://api.github.com/users/andersk/repos", "events_url": "https://api.github.com/users/andersk/events{/privacy}", "received_events_url": "https://api.github.com/users/andersk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "734c83642cff23f0d9b4b8f006b05437697bcd91", "url": "https://api.github.com/repos/rust-lang/rust/commits/734c83642cff23f0d9b4b8f006b05437697bcd91", "html_url": "https://github.com/rust-lang/rust/commit/734c83642cff23f0d9b4b8f006b05437697bcd91"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "17f1229c2060ef2145c377c122ee8e3996ca5e87", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d68c3ab17b6f6c3b71d0531063aec8e64098f59c/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68c3ab17b6f6c3b71d0531063aec8e64098f59c/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=d68c3ab17b6f6c3b71d0531063aec8e64098f59c", "patch": "@@ -274,6 +274,11 @@ fn test_dedup_by() {\n     vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));\n \n     assert_eq!(vec, [\"foo\", \"bar\", \"baz\", \"bar\"]);\n+\n+    let mut vec = vec![(\"foo\", 1), (\"foo\", 2), (\"bar\", 3), (\"bar\", 4), (\"bar\", 5)];\n+    vec.dedup_by(|a, b| a.0 == b.0 && { b.1 += a.1; true });\n+\n+    assert_eq!(vec, [(\"foo\", 3), (\"bar\", 12)]);\n }\n \n #[test]"}, {"sha": "1a5975686df68b0265dc244170a70a7a2cf8b1e4", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d68c3ab17b6f6c3b71d0531063aec8e64098f59c/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68c3ab17b6f6c3b71d0531063aec8e64098f59c/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=d68c3ab17b6f6c3b71d0531063aec8e64098f59c", "patch": "@@ -823,7 +823,8 @@ impl<T> Vec<T> {\n         }\n     }\n \n-    /// Removes consecutive elements in the vector that resolve to the same key.\n+    /// Removes all but the first of consecutive elements in the vector that resolve to the same\n+    /// key.\n     ///\n     /// If the vector is sorted, this removes all duplicates.\n     ///\n@@ -842,11 +843,13 @@ impl<T> Vec<T> {\n         self.dedup_by(|a, b| key(a) == key(b))\n     }\n \n-    /// Removes consecutive elements in the vector according to a predicate.\n+    /// Removes all but the first of consecutive elements in the vector satisfying a given equality\n+    /// relation.\n     ///\n     /// The `same_bucket` function is passed references to two elements from the vector, and\n-    /// returns `true` if the elements compare equal, or `false` if they do not. Only the first\n-    /// of adjacent equal items is kept.\n+    /// returns `true` if the elements compare equal, or `false` if they do not. The elements are\n+    /// passed in opposite order from their order in the vector, so if `same_bucket(a, b)` returns\n+    /// `true`, `a` is removed.\n     ///\n     /// If the vector is sorted, this removes all duplicates.\n     ///"}]}