{"sha": "6a179026decb823e6ad8ba1c81729528bc5d695f", "node_id": "C_kwDOAAsO6NoAKDZhMTc5MDI2ZGVjYjgyM2U2YWQ4YmExYzgxNzI5NTI4YmM1ZDY5NWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-08T22:48:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-08T22:48:17Z"}, "message": "Auto merge of #108919 - matthiaskrgr:rollup-g271pm2, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #108686 (rustdoc: include link on all.html location header)\n - #108846 (StableMIR: Proof-of-concept implementation + test )\n - #108873 (Simplify `sort_by` calls)\n - #108883 (Suppress copy impl error when post-normalized type references errors)\n - #108884 (Tweak illegal `Copy` impl message)\n - #108887 (Rename `MapInPlace` as `FlatMapInPlace`.)\n - #108901 (fix: evaluate with wrong obligation stack)\n - #108903 (Move Clippy tests back to their intended directory)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "98f20f23dde3d9aca52c76c0a783eb374c458115", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98f20f23dde3d9aca52c76c0a783eb374c458115"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a179026decb823e6ad8ba1c81729528bc5d695f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a179026decb823e6ad8ba1c81729528bc5d695f", "html_url": "https://github.com/rust-lang/rust/commit/6a179026decb823e6ad8ba1c81729528bc5d695f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a179026decb823e6ad8ba1c81729528bc5d695f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "900c3540378c8422b8087ffa3db60fa6c8abfcad", "url": "https://api.github.com/repos/rust-lang/rust/commits/900c3540378c8422b8087ffa3db60fa6c8abfcad", "html_url": "https://github.com/rust-lang/rust/commit/900c3540378c8422b8087ffa3db60fa6c8abfcad"}, {"sha": "7732cccd993f6caeedad7b9c24850768705179ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/7732cccd993f6caeedad7b9c24850768705179ab", "html_url": "https://github.com/rust-lang/rust/commit/7732cccd993f6caeedad7b9c24850768705179ab"}], "stats": {"total": 630, "additions": 465, "deletions": 165}, "files": [{"sha": "7776964adf9ffcbaa98f0964d530bb0ae098c94f", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -5283,15 +5283,9 @@ dependencies = [\n name = \"rustc_smir\"\n version = \"0.0.0\"\n dependencies = [\n- \"rustc_borrowck\",\n- \"rustc_driver\",\n- \"rustc_hir\",\n- \"rustc_interface\",\n  \"rustc_middle\",\n- \"rustc_mir_dataflow\",\n- \"rustc_mir_transform\",\n- \"rustc_serialize\",\n- \"rustc_trait_selection\",\n+ \"rustc_span\",\n+ \"tracing\",\n ]\n \n [[package]]"}, {"sha": "6fed0b660e86efe92c3bcd43b42ddd5ef16af8a3", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -12,7 +12,7 @@ use crate::ptr::P;\n use crate::token::{self, Token};\n use crate::tokenstream::*;\n \n-use rustc_data_structures::map_in_place::MapInPlace;\n+use rustc_data_structures::flat_map_in_place::FlatMapInPlace;\n use rustc_data_structures::sync::Lrc;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::Ident;"}, {"sha": "f58844f281794ba9ce48b089702036e83d340071", "filename": "compiler/rustc_data_structures/src/flat_map_in_place.rs", "status": "renamed", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_data_structures%2Fsrc%2Fflat_map_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_data_structures%2Fsrc%2Fflat_map_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fflat_map_in_place.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -2,14 +2,7 @@ use smallvec::{Array, SmallVec};\n use std::ptr;\n use thin_vec::ThinVec;\n \n-pub trait MapInPlace<T>: Sized {\n-    fn map_in_place<F>(&mut self, mut f: F)\n-    where\n-        F: FnMut(T) -> T,\n-    {\n-        self.flat_map_in_place(|e| Some(f(e)))\n-    }\n-\n+pub trait FlatMapInPlace<T>: Sized {\n     fn flat_map_in_place<F, I>(&mut self, f: F)\n     where\n         F: FnMut(T) -> I,\n@@ -66,14 +59,14 @@ macro_rules! flat_map_in_place {\n     };\n }\n \n-impl<T> MapInPlace<T> for Vec<T> {\n+impl<T> FlatMapInPlace<T> for Vec<T> {\n     flat_map_in_place!();\n }\n \n-impl<T, A: Array<Item = T>> MapInPlace<T> for SmallVec<A> {\n+impl<T, A: Array<Item = T>> FlatMapInPlace<T> for SmallVec<A> {\n     flat_map_in_place!();\n }\n \n-impl<T> MapInPlace<T> for ThinVec<T> {\n+impl<T> FlatMapInPlace<T> for ThinVec<T> {\n     flat_map_in_place!();\n }", "previous_filename": "compiler/rustc_data_structures/src/map_in_place.rs"}, {"sha": "c595bf830a3dccca47e97455fb960f42394f16ce", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -50,14 +50,14 @@ pub fn cold_path<F: FnOnce() -> R, R>(f: F) -> R {\n pub mod base_n;\n pub mod binary_search_util;\n pub mod captures;\n+pub mod flat_map_in_place;\n pub mod flock;\n pub mod functor;\n pub mod fx;\n pub mod graph;\n pub mod intern;\n pub mod jobserver;\n pub mod macros;\n-pub mod map_in_place;\n pub mod obligation_forest;\n pub mod owning_ref;\n pub mod sip128;"}, {"sha": "d6cb173ba9ba0fc1e2a09b0e470eeea2c61320c9", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -12,8 +12,8 @@ use rustc_ast::tokenstream::{LazyAttrTokenStream, TokenTree};\n use rustc_ast::NodeId;\n use rustc_ast::{self as ast, AttrStyle, Attribute, HasAttrs, HasTokens, MetaItem};\n use rustc_attr as attr;\n+use rustc_data_structures::flat_map_in_place::FlatMapInPlace;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::map_in_place::MapInPlace;\n use rustc_feature::{Feature, Features, State as FeatureState};\n use rustc_feature::{\n     ACCEPTED_FEATURES, ACTIVE_FEATURES, REMOVED_FEATURES, STABLE_REMOVED_FEATURES,"}, {"sha": "4092a192e0c34ad5385e87717129edb6df95b584", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -20,7 +20,7 @@ use rustc_ast::{ForeignItemKind, HasAttrs, HasNodeId};\n use rustc_ast::{Inline, ItemKind, MacStmtStyle, MetaItemKind, ModKind};\n use rustc_ast::{NestedMetaItem, NodeId, PatKind, StmtKind, TyKind};\n use rustc_ast_pretty::pprust;\n-use rustc_data_structures::map_in_place::MapInPlace;\n+use rustc_data_structures::flat_map_in_place::FlatMapInPlace;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::PResult;\n use rustc_feature::Features;"}, {"sha": "3c62529442c3f8fa107ea5c659ef2c0cd6f5d8ce", "filename": "compiler/rustc_hir_analysis/locales/en-US.ftl", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_hir_analysis%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_hir_analysis%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Flocales%2Fen-US.ftl?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -89,14 +89,14 @@ hir_analysis_missing_type_params =\n     .note = because of the default `Self` reference, type parameters must be specified on object types\n \n hir_analysis_copy_impl_on_type_with_dtor =\n-    the trait `Copy` may not be implemented for this type; the type has a destructor\n+    the trait `Copy` cannot be implemented for this type; the type has a destructor\n     .label = `Copy` not allowed on types with destructors\n \n hir_analysis_multiple_relaxed_default_bounds =\n     type parameter has more than one relaxed default bound, only one is supported\n \n hir_analysis_copy_impl_on_non_adt =\n-    the trait `Copy` may not be implemented for this type\n+    the trait `Copy` cannot be implemented for this type\n     .label = type is not a structure or enumeration\n \n hir_analysis_const_impl_for_non_const_trait ="}, {"sha": "8294d92c9364e170403b2beada30b71fd8a00793", "filename": "compiler/rustc_hir_analysis/src/coherence/builtin.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -2,6 +2,7 @@\n //! up data structures required by type-checking/codegen.\n \n use crate::errors::{CopyImplOnNonAdt, CopyImplOnTypeWithDtor, DropImplOnWrongItem};\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{struct_span_err, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -86,15 +87,22 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n                 tcx.sess,\n                 span,\n                 E0204,\n-                \"the trait `Copy` may not be implemented for this type\"\n+                \"the trait `Copy` cannot be implemented for this type\"\n             );\n \n             // We'll try to suggest constraining type parameters to fulfill the requirements of\n             // their `Copy` implementation.\n             let mut errors: BTreeMap<_, Vec<_>> = Default::default();\n             let mut bounds = vec![];\n \n+            let mut seen_tys = FxHashSet::default();\n+\n             for (field, ty, reason) in fields {\n+                // Only report an error once per type.\n+                if !seen_tys.insert(ty) {\n+                    continue;\n+                }\n+\n                 let field_span = tcx.def_span(field.did);\n                 err.span_label(field_span, \"this field does not implement `Copy`\");\n "}, {"sha": "2c537bf4064ae9b7c5645423c879ca0f091fc893", "filename": "compiler/rustc_hir_typeck/locales/en-US.ftl", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_hir_typeck%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_hir_typeck%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Flocales%2Fen-US.ftl?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -4,14 +4,14 @@ hir_typeck_field_multiply_specified_in_initializer =\n     .previous_use_label = first use of `{$ident}`\n \n hir_typeck_copy_impl_on_type_with_dtor =\n-    the trait `Copy` may not be implemented for this type; the type has a destructor\n+    the trait `Copy` cannot be implemented for this type; the type has a destructor\n     .label = `Copy` not allowed on types with destructors\n \n hir_typeck_multiple_relaxed_default_bounds =\n     type parameter has more than one relaxed default bound, only one is supported\n \n hir_typeck_copy_impl_on_non_adt =\n-    the trait `Copy` may not be implemented for this type\n+    the trait `Copy` cannot be implemented for this type\n     .label = type is not a structure or enumeration\n \n hir_typeck_trait_object_declared_with_no_traits ="}, {"sha": "57805f7c800536d1a4353f3020dd1c1773ae6914", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -1031,7 +1031,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             .collect();\n \n         // Sort them by the name so we have a stable result.\n-        names.sort_by(|a, b| a.as_str().partial_cmp(b.as_str()).unwrap());\n+        names.sort_by(|a, b| a.as_str().cmp(b.as_str()));\n         names\n     }\n "}, {"sha": "4b15e48bd278ebd4591809d05bb569716a430039", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -42,7 +42,7 @@ use rustc_trait_selection::traits::{\n use super::probe::{AutorefOrPtrAdjustment, IsSuggestion, Mode, ProbeScope};\n use super::{CandidateSource, MethodError, NoMatchData};\n use rustc_hir::intravisit::Visitor;\n-use std::cmp::Ordering;\n+use std::cmp::{self, Ordering};\n use std::iter;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n@@ -2527,7 +2527,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         if !candidates.is_empty() {\n             // Sort from most relevant to least relevant.\n-            candidates.sort_by(|a, b| a.cmp(b).reverse());\n+            candidates.sort_by_key(|&info| cmp::Reverse(info));\n             candidates.dedup();\n \n             let param_type = match rcvr_ty.kind() {"}, {"sha": "5c524a18454ec515026c68537cf84d1b0cccd5c8", "filename": "compiler/rustc_monomorphize/src/partitioning/merging.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmerging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmerging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmerging.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -24,7 +24,7 @@ pub fn merge_codegen_units<'tcx>(\n     // smallest into each other) we're sure to start off with a deterministic\n     // order (sorted by name). This'll mean that if two cgus have the same size\n     // the stable sort below will keep everything nice and deterministic.\n-    codegen_units.sort_by(|a, b| a.name().as_str().partial_cmp(b.name().as_str()).unwrap());\n+    codegen_units.sort_by(|a, b| a.name().as_str().cmp(b.name().as_str()));\n \n     // This map keeps track of what got merged into what.\n     let mut cgu_contents: FxHashMap<Symbol, Vec<Symbol>> ="}, {"sha": "7ac1c9e057e8f8fd69dbb6593ba20da9697e5603", "filename": "compiler/rustc_monomorphize/src/partitioning/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -252,7 +252,7 @@ pub fn partition<'tcx>(\n         internalization_candidates: _,\n     } = post_inlining;\n \n-    result.sort_by(|a, b| a.name().as_str().partial_cmp(b.name().as_str()).unwrap());\n+    result.sort_by(|a, b| a.name().as_str().cmp(b.name().as_str()));\n \n     result\n }"}, {"sha": "c4b9fdc81c5eb3f52b98debe891b97e4173a000b", "filename": "compiler/rustc_parse/src/lexer/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fdiagnostics.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -71,7 +71,7 @@ pub fn report_suspicious_mismatch_block(\n         .collect();\n \n     // sort by `lo`, so the large block spans in the front\n-    matched_spans.sort_by(|a, b| a.0.lo().cmp(&b.0.lo()));\n+    matched_spans.sort_by_key(|(span, _)| span.lo());\n \n     // We use larger block whose identation is well to cover those inner mismatched blocks\n     // O(N^2) here, but we are on error reporting path, so it is fine"}, {"sha": "6133e75a78fff07826454de25cbd7b9f2f96a4ba", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -1736,7 +1736,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n \n         let name = path[path.len() - 1].ident.name;\n         // Make sure error reporting is deterministic.\n-        names.sort_by(|a, b| a.candidate.as_str().partial_cmp(b.candidate.as_str()).unwrap());\n+        names.sort_by(|a, b| a.candidate.as_str().cmp(b.candidate.as_str()));\n \n         match find_best_match_for_name(\n             &names.iter().map(|suggestion| suggestion.candidate).collect::<Vec<Symbol>>(),"}, {"sha": "0dfee92f404345ffcf2538db6296844fb1fc6e55", "filename": "compiler/rustc_session/src/code_stats.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_session%2Fsrc%2Fcode_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_session%2Fsrc%2Fcode_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcode_stats.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -2,7 +2,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lock;\n use rustc_span::Symbol;\n use rustc_target::abi::{Align, Size};\n-use std::cmp::{self, Ordering};\n+use std::cmp;\n \n #[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub struct VariantInfo {\n@@ -87,7 +87,7 @@ impl CodeStats {\n         // Except for Generators, whose variants are already sorted according to\n         // their yield points in `variant_info_for_generator`.\n         if kind != DataTypeKind::Generator {\n-            variants.sort_by(|info1, info2| info2.size.cmp(&info1.size));\n+            variants.sort_by_key(|info| cmp::Reverse(info.size));\n         }\n         let info = TypeSizeInfo {\n             kind,\n@@ -107,13 +107,7 @@ impl CodeStats {\n \n         // Primary sort: large-to-small.\n         // Secondary sort: description (dictionary order)\n-        sorted.sort_by(|info1, info2| {\n-            // (reversing cmp order to get large-to-small ordering)\n-            match info2.overall_size.cmp(&info1.overall_size) {\n-                Ordering::Equal => info1.type_description.cmp(&info2.type_description),\n-                other => other,\n-            }\n-        });\n+        sorted.sort_by_key(|info| (cmp::Reverse(info.overall_size), &info.type_description));\n \n         for info in sorted {\n             let TypeSizeInfo { type_description, overall_size, align, kind, variants, .. } = info;"}, {"sha": "fb97ee5bebe6ef0657529f838b898e7e3578305c", "filename": "compiler/rustc_smir/Cargo.toml", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_smir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_smir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2FCargo.toml?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -4,25 +4,12 @@ version = \"0.0.0\"\n edition = \"2021\"\n \n [dependencies]\n-rustc_borrowck = { path = \"../rustc_borrowck\", optional = true }\n-rustc_driver = { path = \"../rustc_driver\", optional = true }\n-rustc_hir = { path = \"../rustc_hir\", optional = true }\n-rustc_interface = { path = \"../rustc_interface\", optional = true }\n rustc_middle = { path = \"../rustc_middle\", optional = true }\n-rustc_mir_dataflow = { path = \"../rustc_mir_dataflow\", optional = true }\n-rustc_mir_transform = { path = \"../rustc_mir_transform\", optional = true }\n-rustc_serialize = { path = \"../rustc_serialize\", optional = true }\n-rustc_trait_selection = { path = \"../rustc_trait_selection\", optional = true }\n+rustc_span = { path = \"../rustc_span\", optional = true }\n+tracing = \"0.1\"\n \n [features]\n default = [\n-    \"rustc_borrowck\",\n-    \"rustc_driver\",\n-    \"rustc_hir\",\n-    \"rustc_interface\",\n     \"rustc_middle\",\n-    \"rustc_mir_dataflow\",\n-    \"rustc_mir_transform\",\n-    \"rustc_serialize\",\n-    \"rustc_trait_selection\",\n+    \"rustc_span\",\n ]"}, {"sha": "31dee955f491fee6321b13ed2041566414da483e", "filename": "compiler/rustc_smir/README.md", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_smir%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_smir%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2FREADME.md?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -73,3 +73,40 @@ git subtree pull --prefix=compiler/rustc_smir https://github.com/rust-lang/proje\n Note: only ever sync to rustc from the project-stable-mir's `smir` branch. Do not sync with your own forks.\n \n Then open a PR against rustc just like a regular PR.\n+\n+## Stable MIR Design\n+\n+The stable-mir will follow a similar approach to proc-macro2. It\u2019s\n+implementation will eventually be broken down into two main crates:\n+\n+- `stable_mir`: Public crate, to be published on crates.io, which will contain\n+the stable data structure as well as proxy APIs to make calls to the\n+compiler.\n+- `rustc_smir`: The compiler crate that will translate from internal MIR to\n+SMIR. This crate will also implement APIs that will be invoked by\n+stable-mir to query the compiler for more information.\n+\n+This will help tools to communicate with the rust compiler via stable APIs. Tools will depend on\n+`stable_mir` crate, which will invoke the compiler using APIs defined in `rustc_smir`. I.e.:\n+\n+```\n+    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510           \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+    \u2502   External Tool     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502           \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   Rust Compiler     \u2502\n+    \u2502                     \u2502          \u2502 \u2502           \u2502 \u2502          \u2502                     \u2502\n+    \u2502                     \u2502stable_mir| \u2502           \u2502 \u2502rustc_smir\u2502                     \u2502\n+    \u2502                     \u2502          \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba| \u2502          \u2502                     \u2502\n+    \u2502                     \u2502          \u2502 \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502          \u2502                     \u2502\n+    \u2502                     \u2502          \u2502 \u2502           \u2502 \u2502          \u2502                     \u2502\n+    \u2502                     \u2502          \u2502 \u2502           \u2502 \u2502          \u2502                     \u2502\n+    \u2502                     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502           \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                     \u2502\n+    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+More details can be found here:\n+https://hackmd.io/XhnYHKKuR6-LChhobvlT-g?view\n+\n+For now, the code for these two crates are in separate modules of this crate.\n+The modules have the same name for simplicity. We also have a third module,\n+`rustc_internal` which will expose APIs and definitions that allow users to\n+gather information from internal MIR constructs that haven't been exposed in\n+the `stable_mir` module."}, {"sha": "157dfd620ee1bda6d9c5295659944752a3ab5edb", "filename": "compiler/rustc_smir/rust-toolchain.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_smir%2Frust-toolchain.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_smir%2Frust-toolchain.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Frust-toolchain.toml?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-06-01\"\n+channel = \"nightly-2023-02-28\"\n components = [ \"rustfmt\", \"rustc-dev\" ]"}, {"sha": "54d474db038e9ddd9ee1b90acc8e459523a49e91", "filename": "compiler/rustc_smir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_smir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_smir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Flib.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -11,9 +11,9 @@\n     test(attr(allow(unused_variables), deny(warnings)))\n )]\n #![cfg_attr(not(feature = \"default\"), feature(rustc_private))]\n-#![deny(rustc::untranslatable_diagnostic)]\n-#![deny(rustc::diagnostic_outside_of_impl)]\n \n-pub mod mir;\n+pub mod rustc_internal;\n+pub mod stable_mir;\n \n-pub mod very_unstable;\n+// Make this module private for now since external users should not call these directly.\n+mod rustc_smir;"}, {"sha": "887e6572930669053b7d5de98996d47255f8c0ed", "filename": "compiler/rustc_smir/src/mir.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/900c3540378c8422b8087ffa3db60fa6c8abfcad/compiler%2Frustc_smir%2Fsrc%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/900c3540378c8422b8087ffa3db60fa6c8abfcad/compiler%2Frustc_smir%2Fsrc%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Fmir.rs?ref=900c3540378c8422b8087ffa3db60fa6c8abfcad", "patch": "@@ -1,10 +0,0 @@\n-pub use crate::very_unstable::hir::ImplicitSelfKind;\n-pub use crate::very_unstable::middle::mir::{\n-    visit::MutVisitor, AggregateKind, AssertKind, BasicBlock, BasicBlockData, BinOp, BindingForm,\n-    BlockTailInfo, Body, BorrowKind, CastKind, ClearCrossCrate, Constant, ConstantKind,\n-    CopyNonOverlapping, Coverage, FakeReadCause, Field, GeneratorInfo, InlineAsmOperand, Local,\n-    LocalDecl, LocalInfo, LocalKind, Location, MirPhase, MirSource, NullOp, Operand, Place,\n-    PlaceRef, ProjectionElem, ProjectionKind, Promoted, RetagKind, Rvalue, Safety, SourceInfo,\n-    SourceScope, SourceScopeData, SourceScopeLocalData, Statement, StatementKind, UnOp,\n-    UserTypeProjection, UserTypeProjections, VarBindingForm, VarDebugInfo, VarDebugInfoContents,\n-};"}, {"sha": "3eaff9c051f1c8f098f8939427a664990f67431c", "filename": "compiler/rustc_smir/src/rustc_internal/mod.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_smir%2Fsrc%2Frustc_internal%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_smir%2Fsrc%2Frustc_internal%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Frustc_internal%2Fmod.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -0,0 +1,15 @@\n+//! Module that implements the bridge between Stable MIR and internal compiler MIR.\n+//!\n+//! For that, we define APIs that will temporarily be public to 3P that exposes rustc internal APIs\n+//! until stable MIR is complete.\n+\n+use crate::stable_mir;\n+pub use rustc_span::def_id::{CrateNum, DefId};\n+\n+pub fn item_def_id(item: &stable_mir::CrateItem) -> DefId {\n+    item.0\n+}\n+\n+pub fn crate_num(item: &stable_mir::Crate) -> CrateNum {\n+    item.id.into()\n+}"}, {"sha": "d956f0ac802134baf8b79250ab3a5bc71396ab69", "filename": "compiler/rustc_smir/src/rustc_smir/mod.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -0,0 +1,48 @@\n+//! Module that implements what will become the rustc side of Stable MIR.\n+//!\n+//! This module is responsible for building Stable MIR components from internal components.\n+//!\n+//! This module is not intended to be invoked directly by users. It will eventually\n+//! become the public API of rustc that will be invoked by the `stable_mir` crate.\n+//!\n+//! For now, we are developing everything inside `rustc`, thus, we keep this module private.\n+\n+use crate::stable_mir::{self};\n+use rustc_middle::ty::{tls::with, TyCtxt};\n+use rustc_span::def_id::{CrateNum, LOCAL_CRATE};\n+use tracing::debug;\n+\n+/// Get information about the local crate.\n+pub fn local_crate() -> stable_mir::Crate {\n+    with(|tcx| smir_crate(tcx, LOCAL_CRATE))\n+}\n+\n+/// Retrieve a list of all external crates.\n+pub fn external_crates() -> Vec<stable_mir::Crate> {\n+    with(|tcx| tcx.crates(()).iter().map(|crate_num| smir_crate(tcx, *crate_num)).collect())\n+}\n+\n+/// Find a crate with the given name.\n+pub fn find_crate(name: &str) -> Option<stable_mir::Crate> {\n+    with(|tcx| {\n+        [LOCAL_CRATE].iter().chain(tcx.crates(()).iter()).find_map(|crate_num| {\n+            let crate_name = tcx.crate_name(*crate_num).to_string();\n+            (name == crate_name).then(|| smir_crate(tcx, *crate_num))\n+        })\n+    })\n+}\n+\n+/// Retrieve all items of the local crate that have a MIR associated with them.\n+pub fn all_local_items() -> stable_mir::CrateItems {\n+    with(|tcx| {\n+        tcx.mir_keys(()).iter().map(|item| stable_mir::CrateItem(item.to_def_id())).collect()\n+    })\n+}\n+\n+/// Build a stable mir crate from a given crate number.\n+fn smir_crate(tcx: TyCtxt<'_>, crate_num: CrateNum) -> stable_mir::Crate {\n+    let crate_name = tcx.crate_name(crate_num).to_string();\n+    let is_local = crate_num == LOCAL_CRATE;\n+    debug!(?crate_name, ?crate_num, \"smir_crate\");\n+    stable_mir::Crate { id: crate_num.into(), name: crate_name, is_local }\n+}"}, {"sha": "cbf52e691fb475f00dd39696dd4ad447ac5b296f", "filename": "compiler/rustc_smir/src/stable_mir/mod.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmod.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -0,0 +1,60 @@\n+//! Module that implements the public interface to the Stable MIR.\n+//!\n+//! This module shall contain all type definitions and APIs that we expect 3P tools to invoke to\n+//! interact with the compiler.\n+//!\n+//! The goal is to eventually move this module to its own crate which shall be published on\n+//! [crates.io](https://crates.io).\n+//!\n+//! ## Note:\n+//!\n+//! There shouldn't be any direct references to internal compiler constructs in this module.\n+//! If you need an internal construct, consider using `rustc_internal` or `rustc_smir`.\n+\n+use crate::rustc_internal;\n+\n+/// Use String for now but we should replace it.\n+pub type Symbol = String;\n+\n+/// The number that identifies a crate.\n+pub type CrateNum = usize;\n+\n+/// A unique identification number for each item accessible for the current compilation unit.\n+pub type DefId = usize;\n+\n+/// A list of crate items.\n+pub type CrateItems = Vec<CrateItem>;\n+\n+/// Holds information about a crate.\n+#[derive(Clone, PartialEq, Eq, Debug)]\n+pub struct Crate {\n+    pub(crate) id: CrateNum,\n+    pub name: Symbol,\n+    pub is_local: bool,\n+}\n+\n+/// Holds information about an item in the crate.\n+/// For now, it only stores the item DefId. Use functions inside `rustc_internal` module to\n+/// use this item.\n+#[derive(Clone, PartialEq, Eq, Debug)]\n+pub struct CrateItem(pub(crate) rustc_internal::DefId);\n+\n+/// Access to the local crate.\n+pub fn local_crate() -> Crate {\n+    crate::rustc_smir::local_crate()\n+}\n+\n+/// Try to find a crate with the given name.\n+pub fn find_crate(name: &str) -> Option<Crate> {\n+    crate::rustc_smir::find_crate(name)\n+}\n+\n+/// Try to find a crate with the given name.\n+pub fn external_crates() -> Vec<Crate> {\n+    crate::rustc_smir::external_crates()\n+}\n+\n+/// Retrieve all items in the local crate that have a MIR associated with them.\n+pub fn all_local_items() -> CrateItems {\n+    crate::rustc_smir::all_local_items()\n+}"}, {"sha": "12ba133dbb169403305825f59f39eba7cff394a6", "filename": "compiler/rustc_smir/src/very_unstable.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/900c3540378c8422b8087ffa3db60fa6c8abfcad/compiler%2Frustc_smir%2Fsrc%2Fvery_unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/900c3540378c8422b8087ffa3db60fa6c8abfcad/compiler%2Frustc_smir%2Fsrc%2Fvery_unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Fvery_unstable.rs?ref=900c3540378c8422b8087ffa3db60fa6c8abfcad", "patch": "@@ -1,27 +0,0 @@\n-//! This module reexports various crates and modules from unstable rustc APIs.\n-//! Add anything you need here and it will get slowly transferred to a stable API.\n-//! Only use rustc_smir in your dependencies and use the reexports here instead of\n-//! directly referring to the unstable crates.\n-\n-macro_rules! crates {\n-    ($($rustc_name:ident -> $name:ident,)*) => {\n-        $(\n-            #[cfg(not(feature = \"default\"))]\n-            pub extern crate $rustc_name as $name;\n-            #[cfg(feature = \"default\")]\n-            pub use $rustc_name as $name;\n-        )*\n-    }\n-}\n-\n-crates! {\n-    rustc_borrowck -> borrowck,\n-    rustc_driver -> driver,\n-    rustc_hir -> hir,\n-    rustc_interface -> interface,\n-    rustc_middle -> middle,\n-    rustc_mir_dataflow -> dataflow,\n-    rustc_mir_transform -> transform,\n-    rustc_serialize -> serialize,\n-    rustc_trait_selection -> trait_selection,\n-}"}, {"sha": "336db4fee6ced7e4981a31b6eb5b6e1dc43cb039", "filename": "compiler/rustc_trait_selection/src/traits/misc.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -87,7 +87,12 @@ pub fn type_allowed_to_implement_copy<'tcx>(\n             };\n             let ty = ocx.normalize(&normalization_cause, param_env, unnormalized_ty);\n             let normalization_errors = ocx.select_where_possible();\n-            if !normalization_errors.is_empty() {\n+\n+            // NOTE: The post-normalization type may also reference errors,\n+            // such as when we project to a missing type or we have a mismatch\n+            // between expected and found const-generic types. Don't report an\n+            // additional copy error here, since it's not typically useful.\n+            if !normalization_errors.is_empty() || ty.references_error() {\n                 tcx.sess.delay_span_bug(field_span, format!(\"couldn't normalize struct field `{unnormalized_ty}` when checking Copy implementation\"));\n                 continue;\n             }"}, {"sha": "48c3b3601b4d3ce5e0a05cedfe11dc5ab1af2333", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -1083,7 +1083,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     let mut nested_result = EvaluationResult::EvaluatedToOk;\n                     for obligation in nested_obligations {\n                         nested_result = cmp::max(\n-                            this.evaluate_predicate_recursively(stack.list(), obligation)?,\n+                            this.evaluate_predicate_recursively(previous_stack, obligation)?,\n                             nested_result,\n                         );\n                     }\n@@ -1092,7 +1092,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         let obligation = obligation.with(this.tcx(), predicate);\n                         result = cmp::max(\n                             nested_result,\n-                            this.evaluate_trait_predicate_recursively(stack.list(), obligation)?,\n+                            this.evaluate_trait_predicate_recursively(previous_stack, obligation)?,\n                         );\n                     }\n                 }"}, {"sha": "427146941ade87e5ce86130fd71c9976eabb2611", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -324,7 +324,7 @@ pub trait StructuralEq {\n /// attempt to derive a `Copy` implementation, we'll get an error:\n ///\n /// ```text\n-/// the trait `Copy` may not be implemented for this type; field `points` does not implement `Copy`\n+/// the trait `Copy` cannot be implemented for this type; field `points` does not implement `Copy`\n /// ```\n ///\n /// Shared references (`&T`) are also `Copy`, so a type can be `Copy`, even when it holds"}, {"sha": "1030fe747475856f9fa6f8b1084ba388773571e1", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -600,9 +600,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         };\n         let all = shared.all.replace(AllTypes::new());\n         let mut sidebar = Buffer::html();\n-        if shared.cache.crate_version.is_some() {\n-            write!(sidebar, \"<h2 class=\\\"location\\\">Crate {}</h2>\", crate_name)\n-        };\n+        write!(sidebar, \"<h2 class=\\\"location\\\"><a href=\\\"#\\\">Crate {}</a></h2>\", crate_name);\n \n         let mut items = Buffer::html();\n         sidebar_module_like(&mut items, all.item_sections());"}, {"sha": "7f623c7a9ec5499242a63ea705e06a09c1e77c71", "filename": "src/tools/clippy/tests/ui-toml/array_size_threshold/array_size_threshold.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Farray_size_threshold%2Farray_size_threshold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Farray_size_threshold%2Farray_size_threshold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Farray_size_threshold%2Farray_size_threshold.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "previous_filename": "tests/ui-toml/array_size_threshold/array_size_threshold.rs"}, {"sha": "ac017b20916dea2b7b6876b53bba0fe7bc1a5c83", "filename": "src/tools/clippy/tests/ui-toml/array_size_threshold/array_size_threshold.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Farray_size_threshold%2Farray_size_threshold.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Farray_size_threshold%2Farray_size_threshold.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Farray_size_threshold%2Farray_size_threshold.stderr?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "previous_filename": "tests/ui-toml/array_size_threshold/array_size_threshold.stderr"}, {"sha": "3f1fe9a12099fa9a060a50c00d1d8cf66cba1d7d", "filename": "src/tools/clippy/tests/ui-toml/array_size_threshold/clippy.toml", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Farray_size_threshold%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Farray_size_threshold%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Farray_size_threshold%2Fclippy.toml?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "previous_filename": "tests/ui-toml/array_size_threshold/clippy.toml"}, {"sha": "473ab8fc960c560e8a75034f8aebf0057c89ce2e", "filename": "tests/rustdoc-gui/sidebar.goml", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Frustdoc-gui%2Fsidebar.goml", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Frustdoc-gui%2Fsidebar.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsidebar.goml?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -149,3 +149,17 @@ assert-property: (\".sidebar\", {\"clientWidth\": \"200\"})\n click: \"#toggle-all-docs\"\n assert-text: (\"#toggle-all-docs\", \"[\u2212]\")\n assert-property: (\".sidebar\", {\"clientWidth\": \"200\"})\n+\n+// Checks that all.html and index.html have their sidebar link in the same place.\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n+store-property: (index_sidebar_width, \".sidebar .location a\", \"clientWidth\")\n+store-property: (index_sidebar_height, \".sidebar .location a\", \"clientHeight\")\n+store-property: (index_sidebar_x, \".sidebar .location a\", \"offsetTop\")\n+store-property: (index_sidebar_y, \".sidebar .location a\", \"offsetLeft\")\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/all.html\"\n+assert-property: (\".sidebar .location a\", {\n+    \"clientWidth\": |index_sidebar_width|,\n+    \"clientHeight\": |index_sidebar_height|,\n+    \"offsetTop\": |index_sidebar_x|,\n+    \"offsetLeft\": |index_sidebar_y|,\n+})"}, {"sha": "4458ab0162e953084e3e147a772d5d9307993524", "filename": "tests/ui-fulldeps/stable-mir/crate-info.rs", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui-fulldeps%2Fstable-mir%2Fcrate-info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui-fulldeps%2Fstable-mir%2Fcrate-info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fstable-mir%2Fcrate-info.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -0,0 +1,104 @@\n+// run-pass\n+// Test that users are able to use stable mir APIs to retrieve information of the current crate\n+\n+// ignore-stage-1\n+// ignore-cross-compile\n+// ignore-remote\n+\n+#![feature(rustc_private)]\n+\n+extern crate rustc_driver;\n+extern crate rustc_hir;\n+extern crate rustc_interface;\n+extern crate rustc_middle;\n+extern crate rustc_smir;\n+\n+use rustc_driver::{Callbacks, Compilation, RunCompiler};\n+use rustc_hir::def::DefKind;\n+use rustc_interface::{interface, Queries};\n+use rustc_middle::ty::TyCtxt;\n+use rustc_smir::{rustc_internal, stable_mir};\n+use std::io::Write;\n+\n+const CRATE_NAME: &str = \"input\";\n+\n+/// This function uses the Stable MIR APIs to get information about the test crate.\n+fn test_stable_mir(tcx: TyCtxt<'_>) {\n+    // Get the local crate using stable_mir API.\n+    let local = stable_mir::local_crate();\n+    assert_eq!(&local.name, CRATE_NAME);\n+\n+    // Find items in the local crate.\n+    let items = stable_mir::all_local_items();\n+    assert!(has_item(tcx, &items, (DefKind::Fn, \"foo_bar\")));\n+    assert!(has_item(tcx, &items, (DefKind::Fn, \"foo::bar\")));\n+\n+    // Find the `std` crate.\n+    assert!(stable_mir::find_crate(\"std\").is_some());\n+}\n+\n+// Use internal API to find a function in a crate.\n+fn has_item(tcx: TyCtxt, items: &stable_mir::CrateItems, item: (DefKind, &str)) -> bool {\n+    items.iter().any(|crate_item| {\n+        let def_id = rustc_internal::item_def_id(crate_item);\n+        tcx.def_kind(def_id) == item.0 && tcx.def_path_str(def_id) == item.1\n+    })\n+}\n+\n+/// This test will generate and analyze a dummy crate using the stable mir.\n+/// For that, it will first write the dummy crate into a file.\n+/// It will invoke the compiler using a custom Callback implementation, which will\n+/// invoke Stable MIR APIs after the compiler has finished its analysis.\n+fn main() {\n+    let path = \"input.rs\";\n+    generate_input(&path).unwrap();\n+    let args = vec![\n+        \"rustc\".to_string(),\n+        \"--crate-type=lib\".to_string(),\n+        \"--crate-name\".to_string(),\n+        CRATE_NAME.to_string(),\n+        path.to_string(),\n+    ];\n+    rustc_driver::catch_fatal_errors(|| {\n+        RunCompiler::new(&args, &mut SMirCalls {}).run().unwrap();\n+    })\n+    .unwrap();\n+}\n+\n+struct SMirCalls {}\n+\n+impl Callbacks for SMirCalls {\n+    /// Called after analysis. Return value instructs the compiler whether to\n+    /// continue the compilation afterwards (defaults to `Compilation::Continue`)\n+    fn after_analysis<'tcx>(\n+        &mut self,\n+        _compiler: &interface::Compiler,\n+        queries: &'tcx Queries<'tcx>,\n+    ) -> Compilation {\n+        queries.global_ctxt().unwrap().enter(|tcx| {\n+            test_stable_mir(tcx);\n+        });\n+        // No need to keep going.\n+        Compilation::Stop\n+    }\n+}\n+\n+fn generate_input(path: &str) -> std::io::Result<()> {\n+    let mut file = std::fs::File::create(path)?;\n+    write!(\n+        file,\n+        r#\"\n+    mod foo {{\n+        pub fn bar(i: i32) -> i64 {{\n+            i as i64\n+        }}\n+    }}\n+\n+    pub fn foo_bar(x: i32, y: i32) -> i64 {{\n+        let x_64 = foo::bar(x);\n+        let y_64 = foo::bar(y);\n+        x_64.wrapping_add(y_64)\n+    }}\"#\n+    )?;\n+    Ok(())\n+}"}, {"sha": "21dbc606321ff07fee620f694f2aec59d72bc005", "filename": "tests/ui/coherence/coherence-impls-copy.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fcoherence%2Fcoherence-impls-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fcoherence%2Fcoherence-impls-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoherence%2Fcoherence-impls-copy.stderr?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -52,19 +52,19 @@ LL | impl Copy for [MyType] {}\n    |\n    = note: define and implement a trait or new type instead\n \n-error[E0206]: the trait `Copy` may not be implemented for this type\n+error[E0206]: the trait `Copy` cannot be implemented for this type\n   --> $DIR/coherence-impls-copy.rs:21:15\n    |\n LL | impl Copy for &'static mut MyType {}\n    |               ^^^^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n \n-error[E0206]: the trait `Copy` may not be implemented for this type\n+error[E0206]: the trait `Copy` cannot be implemented for this type\n   --> $DIR/coherence-impls-copy.rs:25:15\n    |\n LL | impl Copy for (MyType, MyType) {}\n    |               ^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n \n-error[E0206]: the trait `Copy` may not be implemented for this type\n+error[E0206]: the trait `Copy` cannot be implemented for this type\n   --> $DIR/coherence-impls-copy.rs:30:15\n    |\n LL | impl Copy for [MyType] {}"}, {"sha": "97fd3f719bfbfdd474f430b218bacc5eaca60265", "filename": "tests/ui/coherence/deep-bad-copy-reason.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fcoherence%2Fdeep-bad-copy-reason.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fcoherence%2Fdeep-bad-copy-reason.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoherence%2Fdeep-bad-copy-reason.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -31,7 +31,7 @@ impl<'tcx, T> Clone for List<'tcx, T> {\n }\n \n impl<'tcx, T> Copy for List<'tcx, T> {}\n-//~^ ERROR the trait `Copy` may not be implemented for this type\n+//~^ ERROR the trait `Copy` cannot be implemented for this type\n \n fn assert_is_copy<T: Copy>() {}\n "}, {"sha": "7b6dd4b380f6f27b75e327e173606f8fb6a7c5f4", "filename": "tests/ui/coherence/deep-bad-copy-reason.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fcoherence%2Fdeep-bad-copy-reason.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fcoherence%2Fdeep-bad-copy-reason.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoherence%2Fdeep-bad-copy-reason.stderr?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -1,4 +1,4 @@\n-error[E0204]: the trait `Copy` may not be implemented for this type\n+error[E0204]: the trait `Copy` cannot be implemented for this type\n   --> $DIR/deep-bad-copy-reason.rs:33:24\n    |\n LL | pub struct List<'tcx, T>(Interned<'tcx, ListS<T>>);"}, {"sha": "797443a0abe5a99db1a1a985a6d0190bd7b0b377", "filename": "tests/ui/coherence/illegal-copy-bad-projection.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fcoherence%2Fillegal-copy-bad-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fcoherence%2Fillegal-copy-bad-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoherence%2Fillegal-copy-bad-projection.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -0,0 +1,16 @@\n+trait AsPtr {\n+    type Ptr;\n+}\n+\n+impl AsPtr for () {\n+    type Ptr = *const void;\n+    //~^ ERROR cannot find type `void` in this scope\n+}\n+\n+#[derive(Copy, Clone)]\n+struct Foo {\n+    p: <() as AsPtr>::Ptr,\n+    // Do not report a \"`Copy` cannot be implemented\" here.\n+}\n+\n+fn main() {}"}, {"sha": "8fed9ba23b24b74378644dd6608e143ce43eed22", "filename": "tests/ui/coherence/illegal-copy-bad-projection.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fcoherence%2Fillegal-copy-bad-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fcoherence%2Fillegal-copy-bad-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoherence%2Fillegal-copy-bad-projection.stderr?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -0,0 +1,9 @@\n+error[E0412]: cannot find type `void` in this scope\n+  --> $DIR/illegal-copy-bad-projection.rs:6:23\n+   |\n+LL |     type Ptr = *const void;\n+   |                       ^^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "b5663464cf42281f369e0aff4c9a6b18cf78df79", "filename": "tests/ui/const-generics/bad-generic-in-copy-impl.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fconst-generics%2Fbad-generic-in-copy-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fconst-generics%2Fbad-generic-in-copy-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fbad-generic-in-copy-impl.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -0,0 +1,9 @@\n+#[derive(Copy, Clone)]\n+pub struct Foo {\n+    x: [u8; SIZE],\n+    //~^ ERROR mismatched types\n+}\n+\n+const SIZE: u32 = 1;\n+\n+fn main() {}"}, {"sha": "25701ce68ccc81a6d60086da246ef82eec2318d8", "filename": "tests/ui/const-generics/bad-generic-in-copy-impl.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fconst-generics%2Fbad-generic-in-copy-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fconst-generics%2Fbad-generic-in-copy-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fbad-generic-in-copy-impl.stderr?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -0,0 +1,9 @@\n+error[E0308]: mismatched types\n+  --> $DIR/bad-generic-in-copy-impl.rs:3:13\n+   |\n+LL |     x: [u8; SIZE],\n+   |             ^^^^ expected `usize`, found `u32`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "52f1f30a4087df73abaf2393ce99115bbd0963c8", "filename": "tests/ui/error-codes/E0184.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Ferror-codes%2FE0184.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Ferror-codes%2FE0184.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0184.stderr?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -1,4 +1,4 @@\n-error[E0184]: the trait `Copy` may not be implemented for this type; the type has a destructor\n+error[E0184]: the trait `Copy` cannot be implemented for this type; the type has a destructor\n   --> $DIR/E0184.rs:1:10\n    |\n LL | #[derive(Copy)]"}, {"sha": "74738d81015ebed089cf52325b2c23b841b315b7", "filename": "tests/ui/error-codes/E0206.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Ferror-codes%2FE0206.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Ferror-codes%2FE0206.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0206.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -2,7 +2,7 @@\n struct Bar;\n \n impl Copy for &'static mut Bar { }\n-//~^ ERROR the trait `Copy` may not be implemented for this type\n+//~^ ERROR the trait `Copy` cannot be implemented for this type\n \n fn main() {\n }"}, {"sha": "60d8d7bfe983d36047028ad494aa429300fcaa49", "filename": "tests/ui/error-codes/E0206.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Ferror-codes%2FE0206.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Ferror-codes%2FE0206.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0206.stderr?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -1,4 +1,4 @@\n-error[E0206]: the trait `Copy` may not be implemented for this type\n+error[E0206]: the trait `Copy` cannot be implemented for this type\n   --> $DIR/E0206.rs:4:15\n    |\n LL | impl Copy for &'static mut Bar { }"}, {"sha": "210ecaed7567d6c276c686b827d9fe9a871c9389", "filename": "tests/ui/exclusive-drop-and-copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fexclusive-drop-and-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fexclusive-drop-and-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexclusive-drop-and-copy.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -1,13 +1,13 @@\n // issue #20126\n \n-#[derive(Copy, Clone)] //~ ERROR the trait `Copy` may not be implemented\n+#[derive(Copy, Clone)] //~ ERROR the trait `Copy` cannot be implemented\n struct Foo;\n \n impl Drop for Foo {\n     fn drop(&mut self) {}\n }\n \n-#[derive(Copy, Clone)] //~ ERROR the trait `Copy` may not be implemented\n+#[derive(Copy, Clone)] //~ ERROR the trait `Copy` cannot be implemented\n struct Bar<T>(::std::marker::PhantomData<T>);\n \n impl<T> Drop for Bar<T> {"}, {"sha": "546079422a7330b68675868eeb29a1a71630155e", "filename": "tests/ui/exclusive-drop-and-copy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fexclusive-drop-and-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fexclusive-drop-and-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexclusive-drop-and-copy.stderr?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -1,12 +1,12 @@\n-error[E0184]: the trait `Copy` may not be implemented for this type; the type has a destructor\n+error[E0184]: the trait `Copy` cannot be implemented for this type; the type has a destructor\n   --> $DIR/exclusive-drop-and-copy.rs:3:10\n    |\n LL | #[derive(Copy, Clone)]\n    |          ^^^^ `Copy` not allowed on types with destructors\n    |\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0184]: the trait `Copy` may not be implemented for this type; the type has a destructor\n+error[E0184]: the trait `Copy` cannot be implemented for this type; the type has a destructor\n   --> $DIR/exclusive-drop-and-copy.rs:10:10\n    |\n LL | #[derive(Copy, Clone)]"}, {"sha": "aff37d95a3f3eb3f2719d751405d76d5503f11f9", "filename": "tests/ui/issues/issue-27340.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fissues%2Fissue-27340.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fissues%2Fissue-27340.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-27340.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -1,6 +1,6 @@\n struct Foo;\n #[derive(Copy, Clone)]\n-//~^ ERROR the trait `Copy` may not be implemented for this type\n+//~^ ERROR the trait `Copy` cannot be implemented for this type\n struct Bar(Foo);\n \n fn main() {}"}, {"sha": "9caaffd9c9a215cff7a8c20ad354870a6b7af48e", "filename": "tests/ui/issues/issue-27340.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fissues%2Fissue-27340.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fissues%2Fissue-27340.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-27340.stderr?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -1,4 +1,4 @@\n-error[E0204]: the trait `Copy` may not be implemented for this type\n+error[E0204]: the trait `Copy` cannot be implemented for this type\n   --> $DIR/issue-27340.rs:2:10\n    |\n LL | #[derive(Copy, Clone)]"}, {"sha": "d0257b5745d8baa0a70639f40263e6a6100cb8d9", "filename": "tests/ui/opt-in-copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fopt-in-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fopt-in-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fopt-in-copy.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -5,7 +5,7 @@ struct IWantToCopyThis {\n }\n \n impl Copy for IWantToCopyThis {}\n-//~^ ERROR the trait `Copy` may not be implemented for this type\n+//~^ ERROR the trait `Copy` cannot be implemented for this type\n \n enum CantCopyThisEither {\n     A,\n@@ -17,6 +17,6 @@ enum IWantToCopyThisToo {\n }\n \n impl Copy for IWantToCopyThisToo {}\n-//~^ ERROR the trait `Copy` may not be implemented for this type\n+//~^ ERROR the trait `Copy` cannot be implemented for this type\n \n fn main() {}"}, {"sha": "258ff16e6e485decff9032d1d6a46c9605893244", "filename": "tests/ui/opt-in-copy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fopt-in-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fopt-in-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fopt-in-copy.stderr?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -1,4 +1,4 @@\n-error[E0204]: the trait `Copy` may not be implemented for this type\n+error[E0204]: the trait `Copy` cannot be implemented for this type\n   --> $DIR/opt-in-copy.rs:7:15\n    |\n LL |     but_i_cant: CantCopyThis,\n@@ -7,7 +7,7 @@ LL |     but_i_cant: CantCopyThis,\n LL | impl Copy for IWantToCopyThis {}\n    |               ^^^^^^^^^^^^^^^\n \n-error[E0204]: the trait `Copy` may not be implemented for this type\n+error[E0204]: the trait `Copy` cannot be implemented for this type\n   --> $DIR/opt-in-copy.rs:19:15\n    |\n LL |     ButICant(CantCopyThisEither),"}, {"sha": "0829fc2ce9b8c8ced24c899e2df9d10ca2eb66a8", "filename": "tests/ui/range/range_traits-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Frange%2Frange_traits-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Frange%2Frange_traits-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange%2Frange_traits-2.stderr?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -1,4 +1,4 @@\n-error[E0204]: the trait `Copy` may not be implemented for this type\n+error[E0204]: the trait `Copy` cannot be implemented for this type\n   --> $DIR/range_traits-2.rs:3:10\n    |\n LL | #[derive(Copy, Clone)]"}, {"sha": "db19d1baec994b060ffee1924e934a14677a84e3", "filename": "tests/ui/range/range_traits-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Frange%2Frange_traits-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Frange%2Frange_traits-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange%2Frange_traits-3.stderr?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -1,4 +1,4 @@\n-error[E0204]: the trait `Copy` may not be implemented for this type\n+error[E0204]: the trait `Copy` cannot be implemented for this type\n   --> $DIR/range_traits-3.rs:3:10\n    |\n LL | #[derive(Copy, Clone)]"}, {"sha": "dfc74f87ca715bf807d400b1d114c45e95af3bc7", "filename": "tests/ui/range/range_traits-6.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Frange%2Frange_traits-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Frange%2Frange_traits-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange%2Frange_traits-6.stderr?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -1,4 +1,4 @@\n-error[E0204]: the trait `Copy` may not be implemented for this type\n+error[E0204]: the trait `Copy` cannot be implemented for this type\n   --> $DIR/range_traits-6.rs:3:10\n    |\n LL | #[derive(Copy, Clone)]"}, {"sha": "8793a05c8a85a986f52e598d767e10d354d5f594", "filename": "tests/ui/span/E0204.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fspan%2FE0204.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fspan%2FE0204.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2FE0204.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -2,9 +2,9 @@ struct Foo {\n     foo: Vec<u32>,\n }\n \n-impl Copy for Foo { } //~ ERROR may not be implemented for this type\n+impl Copy for Foo { } //~ ERROR cannot be implemented for this type\n \n-#[derive(Copy)] //~ ERROR may not be implemented for this type\n+#[derive(Copy)] //~ ERROR cannot be implemented for this type\n struct Foo2<'a> {\n     ty: &'a mut bool,\n }\n@@ -14,9 +14,9 @@ enum EFoo {\n     Baz,\n }\n \n-impl Copy for EFoo { } //~ ERROR may not be implemented for this type\n+impl Copy for EFoo { } //~ ERROR cannot be implemented for this type\n \n-#[derive(Copy)] //~ ERROR may not be implemented for this type\n+#[derive(Copy)] //~ ERROR cannot be implemented for this type\n enum EFoo2<'a> {\n     Bar(&'a mut bool),\n     Baz,"}, {"sha": "3a0afb541ba8de5413f88f28e2c4d700f780244f", "filename": "tests/ui/span/E0204.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fspan%2FE0204.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fspan%2FE0204.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2FE0204.stderr?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -1,4 +1,4 @@\n-error[E0204]: the trait `Copy` may not be implemented for this type\n+error[E0204]: the trait `Copy` cannot be implemented for this type\n   --> $DIR/E0204.rs:5:15\n    |\n LL |     foo: Vec<u32>,\n@@ -7,7 +7,7 @@ LL |     foo: Vec<u32>,\n LL | impl Copy for Foo { }\n    |               ^^^\n \n-error[E0204]: the trait `Copy` may not be implemented for this type\n+error[E0204]: the trait `Copy` cannot be implemented for this type\n   --> $DIR/E0204.rs:7:10\n    |\n LL | #[derive(Copy)]\n@@ -18,7 +18,7 @@ LL |     ty: &'a mut bool,\n    |\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0204]: the trait `Copy` may not be implemented for this type\n+error[E0204]: the trait `Copy` cannot be implemented for this type\n   --> $DIR/E0204.rs:17:15\n    |\n LL |     Bar { x: Vec<u32> },\n@@ -27,7 +27,7 @@ LL |     Bar { x: Vec<u32> },\n LL | impl Copy for EFoo { }\n    |               ^^^^\n \n-error[E0204]: the trait `Copy` may not be implemented for this type\n+error[E0204]: the trait `Copy` cannot be implemented for this type\n   --> $DIR/E0204.rs:19:10\n    |\n LL | #[derive(Copy)]"}, {"sha": "47b35b412c037fbd62f078a27ab499feacebe229", "filename": "tests/ui/suggestions/missing-bound-in-derive-copy-impl-3.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-3.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-3.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-3.fixed?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -7,7 +7,7 @@ pub struct Vector2<T: Debug + Copy + Clone>{\n     pub y: T\n }\n \n-#[derive(Debug, Copy, Clone)] //~ ERROR the trait `Copy` may not be implemented for this type\n+#[derive(Debug, Copy, Clone)] //~ ERROR the trait `Copy` cannot be implemented for this type\n pub struct AABB<K: Copy + Debug>{\n     pub loc: Vector2<K>,\n     pub size: Vector2<K>"}, {"sha": "771e9105c6211e3174ac4599af9a21ad98da115c", "filename": "tests/ui/suggestions/missing-bound-in-derive-copy-impl-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-3.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -7,7 +7,7 @@ pub struct Vector2<T: Debug + Copy + Clone>{\n     pub y: T\n }\n \n-#[derive(Debug, Copy, Clone)] //~ ERROR the trait `Copy` may not be implemented for this type\n+#[derive(Debug, Copy, Clone)] //~ ERROR the trait `Copy` cannot be implemented for this type\n pub struct AABB<K: Copy>{\n     pub loc: Vector2<K>,\n     pub size: Vector2<K>"}, {"sha": "09696e0613e7c467d0d14fc55d9bd42aca446f9f", "filename": "tests/ui/suggestions/missing-bound-in-derive-copy-impl-3.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-3.stderr?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -1,21 +1,17 @@\n-error[E0204]: the trait `Copy` may not be implemented for this type\n+error[E0204]: the trait `Copy` cannot be implemented for this type\n   --> $DIR/missing-bound-in-derive-copy-impl-3.rs:10:17\n    |\n LL | #[derive(Debug, Copy, Clone)]\n    |                 ^^^^\n LL | pub struct AABB<K: Copy>{\n LL |     pub loc: Vector2<K>,\n    |     ------------------- this field does not implement `Copy`\n-LL |     pub size: Vector2<K>\n-   |     -------------------- this field does not implement `Copy`\n    |\n note: the `Copy` impl for `Vector2<K>` requires that `K: Debug`\n   --> $DIR/missing-bound-in-derive-copy-impl-3.rs:12:14\n    |\n LL |     pub loc: Vector2<K>,\n    |              ^^^^^^^^^^\n-LL |     pub size: Vector2<K>\n-   |               ^^^^^^^^^^\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting this bound\n    |"}, {"sha": "9c7b7ba099c43c3acf05e198bd760a26d70a8a6f", "filename": "tests/ui/suggestions/missing-bound-in-derive-copy-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -6,7 +6,7 @@ pub struct Vector2<T: Debug + Copy + Clone>{\n     pub y: T\n }\n \n-#[derive(Debug, Copy, Clone)] //~ ERROR the trait `Copy` may not be implemented for this type\n+#[derive(Debug, Copy, Clone)] //~ ERROR the trait `Copy` cannot be implemented for this type\n pub struct AABB<K>{\n     pub loc: Vector2<K>,\n     pub size: Vector2<K>"}, {"sha": "8585fe47bf345bda1ff7796fc9ea19cdb219f788", "filename": "tests/ui/suggestions/missing-bound-in-derive-copy-impl.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl.stderr?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -1,21 +1,17 @@\n-error[E0204]: the trait `Copy` may not be implemented for this type\n+error[E0204]: the trait `Copy` cannot be implemented for this type\n   --> $DIR/missing-bound-in-derive-copy-impl.rs:9:17\n    |\n LL | #[derive(Debug, Copy, Clone)]\n    |                 ^^^^\n LL | pub struct AABB<K>{\n LL |     pub loc: Vector2<K>,\n    |     ------------------- this field does not implement `Copy`\n-LL |     pub size: Vector2<K>\n-   |     -------------------- this field does not implement `Copy`\n    |\n note: the `Copy` impl for `Vector2<K>` requires that `K: Debug`\n   --> $DIR/missing-bound-in-derive-copy-impl.rs:11:14\n    |\n LL |     pub loc: Vector2<K>,\n    |              ^^^^^^^^^^\n-LL |     pub size: Vector2<K>\n-   |               ^^^^^^^^^^\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `K`\n    |"}, {"sha": "f32c61a99bb8cb4a23d51989288f0e26a6416309", "filename": "tests/ui/suggestions/missing-bound-in-manual-copy-impl-2.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl-2.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl-2.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl-2.fixed?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -14,6 +14,6 @@ impl<T: std::fmt::Display> Clone for OnlyCopyIfDisplay<T> {\n impl<T: std::fmt::Display> Copy for OnlyCopyIfDisplay<T> {}\n \n impl<S: std::fmt::Display> Copy for Wrapper<OnlyCopyIfDisplay<S>> {}\n-//~^ ERROR the trait `Copy` may not be implemented for this type\n+//~^ ERROR the trait `Copy` cannot be implemented for this type\n \n fn main() {}"}, {"sha": "d7725f4a3743d2dab6f0fcf0d4954fc099ccb5a2", "filename": "tests/ui/suggestions/missing-bound-in-manual-copy-impl-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl-2.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -14,6 +14,6 @@ impl<T: std::fmt::Display> Clone for OnlyCopyIfDisplay<T> {\n impl<T: std::fmt::Display> Copy for OnlyCopyIfDisplay<T> {}\n \n impl<S> Copy for Wrapper<OnlyCopyIfDisplay<S>> {}\n-//~^ ERROR the trait `Copy` may not be implemented for this type\n+//~^ ERROR the trait `Copy` cannot be implemented for this type\n \n fn main() {}"}, {"sha": "856d8db381bd8ba3bfd703881d4078c9f4e90aa7", "filename": "tests/ui/suggestions/missing-bound-in-manual-copy-impl-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl-2.stderr?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -1,4 +1,4 @@\n-error[E0204]: the trait `Copy` may not be implemented for this type\n+error[E0204]: the trait `Copy` cannot be implemented for this type\n   --> $DIR/missing-bound-in-manual-copy-impl-2.rs:16:18\n    |\n LL | struct Wrapper<T>(T);"}, {"sha": "1139b315313fca8c8a8d235e76c7f8ae319f1217", "filename": "tests/ui/suggestions/missing-bound-in-manual-copy-impl.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl.fixed?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -4,6 +4,6 @@\n struct Wrapper<T>(T);\n \n impl<S: Copy> Copy for Wrapper<S> {}\n-//~^ ERROR the trait `Copy` may not be implemented for this type\n+//~^ ERROR the trait `Copy` cannot be implemented for this type\n \n fn main() {}"}, {"sha": "19549248efc23d734bd97f9713c9c074da7cc79b", "filename": "tests/ui/suggestions/missing-bound-in-manual-copy-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -4,6 +4,6 @@\n struct Wrapper<T>(T);\n \n impl<S> Copy for Wrapper<S> {}\n-//~^ ERROR the trait `Copy` may not be implemented for this type\n+//~^ ERROR the trait `Copy` cannot be implemented for this type\n \n fn main() {}"}, {"sha": "ec3e4f23a649ead61e22825f709751018e18bc9d", "filename": "tests/ui/suggestions/missing-bound-in-manual-copy-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl.stderr?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -1,4 +1,4 @@\n-error[E0204]: the trait `Copy` may not be implemented for this type\n+error[E0204]: the trait `Copy` cannot be implemented for this type\n   --> $DIR/missing-bound-in-manual-copy-impl.rs:6:18\n    |\n LL | struct Wrapper<T>(T);"}, {"sha": "130425211841351ea2c61a825df6ac77c6f138a0", "filename": "tests/ui/traits/copy-is-not-modulo-regions.not_static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Ftraits%2Fcopy-is-not-modulo-regions.not_static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Ftraits%2Fcopy-is-not-modulo-regions.not_static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fcopy-is-not-modulo-regions.not_static.stderr?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -1,4 +1,4 @@\n-error[E0204]: the trait `Copy` may not be implemented for this type\n+error[E0204]: the trait `Copy` cannot be implemented for this type\n   --> $DIR/copy-is-not-modulo-regions.rs:13:21\n    |\n LL | struct Bar<'lt>(Foo<'lt>);"}, {"sha": "b899083747afa84fc2379e2c7439e3e09779a6bb", "filename": "tests/ui/traits/copy-is-not-modulo-regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Ftraits%2Fcopy-is-not-modulo-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Ftraits%2Fcopy-is-not-modulo-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fcopy-is-not-modulo-regions.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -11,7 +11,7 @@ struct Bar<'lt>(Foo<'lt>);\n \n #[cfg(not_static)]\n impl<'any> Copy for Bar<'any> {}\n-//[not_static]~^ the trait `Copy` may not be implemented for this type\n+//[not_static]~^ the trait `Copy` cannot be implemented for this type\n \n #[cfg(yes_static)]\n impl<'any> Copy for Bar<'static> {}"}, {"sha": "683a85a32c1c6667194c701321bee15c6407eb7c", "filename": "tests/ui/traits/issue-50480.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Ftraits%2Fissue-50480.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Ftraits%2Fissue-50480.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-50480.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -1,13 +1,13 @@\n #[derive(Clone, Copy)]\n-//~^ ERROR the trait `Copy` may not be implemented for this type\n+//~^ ERROR the trait `Copy` cannot be implemented for this type\n struct Foo(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n //~^ ERROR cannot find type `NotDefined` in this scope\n //~| ERROR cannot find type `NotDefined` in this scope\n //~| ERROR cannot find type `N` in this scope\n //~| ERROR cannot find type `N` in this scope\n \n #[derive(Clone, Copy)]\n-//~^ ERROR the trait `Copy` may not be implemented for this type\n+//~^ ERROR the trait `Copy` cannot be implemented for this type\n struct Bar<T>(T, N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n //~^ ERROR cannot find type `NotDefined` in this scope\n //~| ERROR cannot find type `N` in this scope"}, {"sha": "4f72db60a164770233ddf2f779d01834b9159718", "filename": "tests/ui/traits/issue-50480.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Ftraits%2Fissue-50480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Ftraits%2Fissue-50480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-50480.stderr?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -60,7 +60,7 @@ error[E0412]: cannot find type `NotDefined` in this scope\n LL | struct Bar<T>(T, N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n    |                     ^^^^^^^^^^ not found in this scope\n \n-error[E0204]: the trait `Copy` may not be implemented for this type\n+error[E0204]: the trait `Copy` cannot be implemented for this type\n   --> $DIR/issue-50480.rs:1:17\n    |\n LL | #[derive(Clone, Copy)]\n@@ -73,7 +73,7 @@ LL | struct Foo(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n    |\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0204]: the trait `Copy` may not be implemented for this type\n+error[E0204]: the trait `Copy` cannot be implemented for this type\n   --> $DIR/issue-50480.rs:9:17\n    |\n LL | #[derive(Clone, Copy)]"}, {"sha": "fbbc07b11e74378b35f31b9193238e6f7264f973", "filename": "tests/ui/traits/unsend-future.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Ftraits%2Funsend-future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Ftraits%2Funsend-future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Funsend-future.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -0,0 +1,21 @@\n+// edition:2021\n+\n+// issue 108897\n+trait Handler {}\n+impl<F, Fut> Handler for F\n+where\n+    Fut: Send,\n+    F: FnOnce() -> Fut,\n+{}\n+\n+fn require_handler<H: Handler>(h: H) {}\n+\n+async fn handler() {\n+    let a = &1 as *const i32;\n+    async {}.await;\n+}\n+\n+fn main() {\n+    require_handler(handler)\n+     //~^ ERROR future cannot be sent between threads safely\n+}"}, {"sha": "4aaa7c4a92426f37d28cc4fa455b466f29498f05", "filename": "tests/ui/traits/unsend-future.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Ftraits%2Funsend-future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Ftraits%2Funsend-future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Funsend-future.stderr?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -0,0 +1,24 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/unsend-future.rs:19:21\n+   |\n+LL |     require_handler(handler)\n+   |                     ^^^^^^^ future returned by `handler` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `*const i32`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/unsend-future.rs:15:13\n+   |\n+LL |     let a = &1 as *const i32;\n+   |         - has type `*const i32` which is not `Send`\n+LL |     async {}.await;\n+   |             ^^^^^^ await occurs here, with `a` maybe used later\n+LL | }\n+   | - `a` is later dropped here\n+note: required by a bound in `require_handler`\n+  --> $DIR/unsend-future.rs:11:23\n+   |\n+LL | fn require_handler<H: Handler>(h: H) {}\n+   |                       ^^^^^^^ required by this bound in `require_handler`\n+\n+error: aborting due to previous error\n+"}, {"sha": "7ad0a11c6ac6e99e933218ecf491c252bf620a3e", "filename": "tests/ui/union/union-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Funion%2Funion-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Funion%2Funion-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Funion-copy.rs?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -9,6 +9,6 @@ union W {\n }\n \n impl Copy for U {} // OK\n-impl Copy for W {} //~ ERROR the trait `Copy` may not be implemented for this type\n+impl Copy for W {} //~ ERROR the trait `Copy` cannot be implemented for this type\n \n fn main() {}"}, {"sha": "ff6fa48db90fd6530738d62eb66f3b0cc7f494d4", "filename": "tests/ui/union/union-copy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Funion%2Funion-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a179026decb823e6ad8ba1c81729528bc5d695f/tests%2Fui%2Funion%2Funion-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Funion-copy.stderr?ref=6a179026decb823e6ad8ba1c81729528bc5d695f", "patch": "@@ -1,4 +1,4 @@\n-error[E0204]: the trait `Copy` may not be implemented for this type\n+error[E0204]: the trait `Copy` cannot be implemented for this type\n   --> $DIR/union-copy.rs:12:15\n    |\n LL |     a: std::mem::ManuallyDrop<String>"}]}