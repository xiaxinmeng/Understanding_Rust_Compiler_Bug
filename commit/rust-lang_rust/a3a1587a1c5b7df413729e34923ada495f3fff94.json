{"sha": "a3a1587a1c5b7df413729e34923ada495f3fff94", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzYTE1ODdhMWM1YjdkZjQxMzcyOWUzNDkyM2FkYTQ5NWYzZmZmOTQ=", "commit": {"author": {"name": "Krishna Sai Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2020-02-09T18:58:08Z"}, "committer": {"name": "Krishna Sai Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2020-02-09T18:58:08Z"}, "message": "Allow `option-env-unwrap` within external macros", "tree": {"sha": "05dc386925d9d7ed6370e72408503ed0c3d9a9ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05dc386925d9d7ed6370e72408503ed0c3d9a9ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3a1587a1c5b7df413729e34923ada495f3fff94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3a1587a1c5b7df413729e34923ada495f3fff94", "html_url": "https://github.com/rust-lang/rust/commit/a3a1587a1c5b7df413729e34923ada495f3fff94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3a1587a1c5b7df413729e34923ada495f3fff94/comments", "author": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e5ba2f0e7c1ec47ad1300e7065b97d5bc603c7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e5ba2f0e7c1ec47ad1300e7065b97d5bc603c7c", "html_url": "https://github.com/rust-lang/rust/commit/0e5ba2f0e7c1ec47ad1300e7065b97d5bc603c7c"}], "stats": {"total": 46, "additions": 39, "deletions": 7}, "files": [{"sha": "1af7793499f64b9a2060472ce3ad5d85b9284f30", "filename": "clippy_lints/src/option_env_unwrap.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3a1587a1c5b7df413729e34923ada495f3fff94/clippy_lints%2Fsrc%2Foption_env_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a1587a1c5b7df413729e34923ada495f3fff94/clippy_lints%2Fsrc%2Foption_env_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_env_unwrap.rs?ref=a3a1587a1c5b7df413729e34923ada495f3fff94", "patch": "@@ -1,6 +1,5 @@\n use crate::utils::{is_direct_expn_of, span_lint_and_help};\n use if_chain::if_chain;\n-use rustc::lint::in_external_macro;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use syntax::ast::*;\n@@ -36,7 +35,6 @@ declare_lint_pass!(OptionEnvUnwrap => [OPTION_ENV_UNWRAP]);\n impl EarlyLintPass for OptionEnvUnwrap {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n         if_chain! {\n-            if !in_external_macro(cx.sess, expr.span);\n             if let ExprKind::MethodCall(path_segment, args) = &expr.kind;\n             let method_name = path_segment.ident.as_str();\n             if method_name == \"expect\" || method_name == \"unwrap\";"}, {"sha": "0bbb9534928effd12458dfd4960534422a237f79", "filename": "tests/ui/auxiliary/macro_rules.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a3a1587a1c5b7df413729e34923ada495f3fff94/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a1587a1c5b7df413729e34923ada495f3fff94/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs?ref=a3a1587a1c5b7df413729e34923ada495f3fff94", "patch": "@@ -46,3 +46,13 @@ macro_rules! take_external {\n         std::mem::replace($s, Default::default())\n     };\n }\n+\n+#[macro_export]\n+macro_rules! option_env_unwrap_external {\n+    ($env: expr) => {\n+        option_env!($env).unwrap()\n+    };\n+    ($env: expr, $message: expr) => {\n+        option_env!($env).expect($message)\n+    };\n+}"}, {"sha": "59463f9a55614842520e7b844a6df68986d47084", "filename": "tests/ui/option_env_unwrap.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3a1587a1c5b7df413729e34923ada495f3fff94/tests%2Fui%2Foption_env_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a1587a1c5b7df413729e34923ada495f3fff94/tests%2Fui%2Foption_env_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_env_unwrap.rs?ref=a3a1587a1c5b7df413729e34923ada495f3fff94", "patch": "@@ -1,5 +1,9 @@\n+// aux-build:macro_rules.rs\n #![warn(clippy::option_env_unwrap)]\n \n+#[macro_use]\n+extern crate macro_rules;\n+\n macro_rules! option_env_unwrap {\n     ($env: expr) => {\n         option_env!($env).unwrap()\n@@ -14,4 +18,6 @@ fn main() {\n     let _ = option_env!(\"HOME\").expect(\"environment variable HOME isn't set\");\n     let _ = option_env_unwrap!(\"HOME\");\n     let _ = option_env_unwrap!(\"HOME\", \"environment variable HOME isn't set\");\n+    let _ = option_env_unwrap_external!(\"HOME\");\n+    let _ = option_env_unwrap_external!(\"HOME\", \"environment variable HOME isn't set\");\n }"}, {"sha": "3a2d5d114233d759d682c65dd2107e12d8c11951", "filename": "tests/ui/option_env_unwrap.stderr", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a3a1587a1c5b7df413729e34923ada495f3fff94/tests%2Fui%2Foption_env_unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3a1587a1c5b7df413729e34923ada495f3fff94/tests%2Fui%2Foption_env_unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_env_unwrap.stderr?ref=a3a1587a1c5b7df413729e34923ada495f3fff94", "patch": "@@ -1,5 +1,5 @@\n error: this will panic at run-time if the environment variable doesn't exist at compile-time\n-  --> $DIR/option_env_unwrap.rs:13:13\n+  --> $DIR/option_env_unwrap.rs:17:13\n    |\n LL |     let _ = option_env!(\"HOME\").unwrap();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,15 +8,15 @@ LL |     let _ = option_env!(\"HOME\").unwrap();\n    = help: consider using the `env!` macro instead\n \n error: this will panic at run-time if the environment variable doesn't exist at compile-time\n-  --> $DIR/option_env_unwrap.rs:14:13\n+  --> $DIR/option_env_unwrap.rs:18:13\n    |\n LL |     let _ = option_env!(\"HOME\").expect(\"environment variable HOME isn't set\");\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using the `env!` macro instead\n \n error: this will panic at run-time if the environment variable doesn't exist at compile-time\n-  --> $DIR/option_env_unwrap.rs:5:9\n+  --> $DIR/option_env_unwrap.rs:9:9\n    |\n LL |         option_env!($env).unwrap()\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -28,7 +28,7 @@ LL |     let _ = option_env_unwrap!(\"HOME\");\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: this will panic at run-time if the environment variable doesn't exist at compile-time\n-  --> $DIR/option_env_unwrap.rs:8:9\n+  --> $DIR/option_env_unwrap.rs:12:9\n    |\n LL |         option_env!($env).expect($message)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -39,5 +39,23 @@ LL |     let _ = option_env_unwrap!(\"HOME\", \"environment variable HOME isn't set\n    = help: consider using the `env!` macro instead\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 4 previous errors\n+error: this will panic at run-time if the environment variable doesn't exist at compile-time\n+  --> $DIR/option_env_unwrap.rs:21:13\n+   |\n+LL |     let _ = option_env_unwrap_external!(\"HOME\");\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using the `env!` macro instead\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: this will panic at run-time if the environment variable doesn't exist at compile-time\n+  --> $DIR/option_env_unwrap.rs:22:13\n+   |\n+LL |     let _ = option_env_unwrap_external!(\"HOME\", \"environment variable HOME isn't set\");\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using the `env!` macro instead\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 6 previous errors\n "}]}