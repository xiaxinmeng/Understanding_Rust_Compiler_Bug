{"sha": "ab1782975ab787cac2366539e9e09a451470d97c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiMTc4Mjk3NWFiNzg3Y2FjMjM2NjUzOWU5ZTA5YTQ1MTQ3MGQ5N2M=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-13T13:17:55Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-13T13:17:55Z"}, "message": "Iterate on crate_inherent_impls for metadata.", "tree": {"sha": "06ab1094098bd3cf52d496abaa068a807807a474", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06ab1094098bd3cf52d496abaa068a807807a474"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab1782975ab787cac2366539e9e09a451470d97c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab1782975ab787cac2366539e9e09a451470d97c", "html_url": "https://github.com/rust-lang/rust/commit/ab1782975ab787cac2366539e9e09a451470d97c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab1782975ab787cac2366539e9e09a451470d97c/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "html_url": "https://github.com/rust-lang/rust/commit/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2"}], "stats": {"total": 25, "additions": 11, "deletions": 14}, "files": [{"sha": "06f53bb9282eb382a43d1e9858e155c9e09c0932", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ab1782975ab787cac2366539e9e09a451470d97c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab1782975ab787cac2366539e9e09a451470d97c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=ab1782975ab787cac2366539e9e09a451470d97c", "patch": "@@ -865,6 +865,17 @@ impl EncodeContext<'a, 'tcx> {\n                 self.encode_deprecation(def_id);\n             }\n         }\n+        let inherent_impls = tcx.crate_inherent_impls(LOCAL_CRATE);\n+        for (def_id, implementations) in inherent_impls.inherent_impls.iter() {\n+            assert!(def_id.is_local());\n+            if implementations.is_empty() {\n+                continue;\n+            }\n+            record!(self.tables.inherent_impls[def_id] <- implementations.iter().map(|&def_id| {\n+                assert!(def_id.is_local());\n+                def_id.index\n+            }));\n+        }\n     }\n \n     fn encode_variances_of(&mut self, def_id: DefId) {\n@@ -1237,18 +1248,6 @@ impl EncodeContext<'a, 'tcx> {\n         }\n     }\n \n-    // Encodes the inherent implementations of a structure, enumeration, or trait.\n-    fn encode_inherent_implementations(&mut self, def_id: DefId) {\n-        debug!(\"EncodeContext::encode_inherent_implementations({:?})\", def_id);\n-        let implementations = self.tcx.inherent_impls(def_id);\n-        if !implementations.is_empty() {\n-            record!(self.tables.inherent_impls[def_id] <- implementations.iter().map(|&def_id| {\n-                assert!(def_id.is_local());\n-                def_id.index\n-            }));\n-        }\n-    }\n-\n     fn encode_stability(&mut self, def_id: DefId) {\n         debug!(\"EncodeContext::encode_stability({:?})\", def_id);\n \n@@ -1459,7 +1458,6 @@ impl EncodeContext<'a, 'tcx> {\n                 record!(self.tables.impl_trait_ref[def_id] <- trait_ref);\n             }\n         }\n-        self.encode_inherent_implementations(def_id);\n         match item.kind {\n             hir::ItemKind::Enum(..)\n             | hir::ItemKind::Struct(..)\n@@ -1822,7 +1820,6 @@ impl EncodeContext<'a, 'tcx> {\n         }\n         self.encode_ident_span(def_id, nitem.ident);\n         self.encode_item_type(def_id);\n-        self.encode_inherent_implementations(def_id);\n         if let hir::ForeignItemKind::Fn(..) = nitem.kind {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n             self.encode_variances_of(def_id);"}]}