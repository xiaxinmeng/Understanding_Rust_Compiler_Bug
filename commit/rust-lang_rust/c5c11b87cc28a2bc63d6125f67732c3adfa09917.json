{"sha": "c5c11b87cc28a2bc63d6125f67732c3adfa09917", "node_id": "C_kwDOAAsO6NoAKGM1YzExYjg3Y2MyOGEyYmM2M2Q2MTI1ZjY3NzMyYzNhZGZhMDk5MTc", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-11-08T13:12:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-08T13:12:03Z"}, "message": "Merge #10720\n\n10720: fix: Don't ascribe types in pattern completion for param patterns twice r=Veykril a=Veykril\n\nFixes #10323\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "31758b7e7b046b2e7c1b1585e67677574dcde78d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31758b7e7b046b2e7c1b1585e67677574dcde78d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5c11b87cc28a2bc63d6125f67732c3adfa09917", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhiSIjCRBK7hj4Ov3rIwAAj8QIAEJEZkGdDT/LLN0pE5Rj3T9Q\nzkdy7ewt1mdomq3dJ9ZqAqglfZWIC2Qe/7VbqSGMTBY1JqboD80EWb5TOioUDtB2\nCVyJM4e+nJG4JjJ360oTmYjybKKKbim4wr3/OBicmX2kGGY4dx60cyXGtK8nm1Ul\n+26Rktb12vUbX2ui5ip4qQ6zlKgt6E/ZRSbw3GFjVhEfj6uVNFMr6E8bOgX9uN7K\nRj+dV7kWfB4RhVZObF7Ntne9hM4oIZvb6iUJZJv+aPRY1wxy+PyBBSUtq7XSe0Cn\n1CXaI5LYCDBCjTxV6yqP1iFO5Q451hmLU9tOdH8Iuuw6Nj/maEzNDHo9ow7MSYE=\n=Gk1g\n-----END PGP SIGNATURE-----\n", "payload": "tree 31758b7e7b046b2e7c1b1585e67677574dcde78d\nparent 2c0f433fd2e838ae181f87019b6f1fefe33c6f54\nparent f7e8136923170bde35540207bdb5b9075204c854\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1636377123 +0000\ncommitter GitHub <noreply@github.com> 1636377123 +0000\n\nMerge #10720\n\n10720: fix: Don't ascribe types in pattern completion for param patterns twice r=Veykril a=Veykril\n\nFixes #10323\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5c11b87cc28a2bc63d6125f67732c3adfa09917", "html_url": "https://github.com/rust-lang/rust/commit/c5c11b87cc28a2bc63d6125f67732c3adfa09917", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5c11b87cc28a2bc63d6125f67732c3adfa09917/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c0f433fd2e838ae181f87019b6f1fefe33c6f54", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c0f433fd2e838ae181f87019b6f1fefe33c6f54", "html_url": "https://github.com/rust-lang/rust/commit/2c0f433fd2e838ae181f87019b6f1fefe33c6f54"}, {"sha": "f7e8136923170bde35540207bdb5b9075204c854", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7e8136923170bde35540207bdb5b9075204c854", "html_url": "https://github.com/rust-lang/rust/commit/f7e8136923170bde35540207bdb5b9075204c854"}], "stats": {"total": 59, "additions": 50, "deletions": 9}, "files": [{"sha": "ac01968126d152159bd639df7ba98b2fa719a707", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c5c11b87cc28a2bc63d6125f67732c3adfa09917/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c11b87cc28a2bc63d6125f67732c3adfa09917/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=c5c11b87cc28a2bc63d6125f67732c3adfa09917", "patch": "@@ -58,6 +58,7 @@ pub(crate) struct PathCompletionContext {\n pub(super) struct PatternContext {\n     pub(super) refutability: PatternRefutability,\n     pub(super) is_param: Option<ParamKind>,\n+    pub(super) has_type_ascription: bool,\n }\n \n #[derive(Debug)]\n@@ -597,7 +598,8 @@ impl<'a> CompletionContext<'a> {\n                             .map(|c| (Some(c.return_type()), None))\n                             .unwrap_or((None, None))\n                     },\n-                    ast::Stmt(_it) => (None, None),\n+                    ast::ParamList(__) => (None, None),\n+                    ast::Stmt(__) => (None, None),\n                     ast::Item(__) => (None, None),\n                     _ => {\n                         match node.parent() {\n@@ -708,15 +710,15 @@ impl<'a> CompletionContext<'a> {\n             return None;\n         }\n         let mut is_param = None;\n-        let refutability = bind_pat\n+        let (refutability, has_type_ascription) = bind_pat\n             .syntax()\n             .ancestors()\n             .skip_while(|it| ast::Pat::can_cast(it.kind()))\n             .next()\n-            .map_or(PatternRefutability::Irrefutable, |node| {\n-                match_ast! {\n+            .map_or((PatternRefutability::Irrefutable, false), |node| {\n+                let refutability = match_ast! {\n                     match node {\n-                        ast::LetStmt(__) => PatternRefutability::Irrefutable,\n+                        ast::LetStmt(let_) => return (PatternRefutability::Irrefutable, let_.ty().is_some()),\n                         ast::Param(param) => {\n                             let is_closure_param = param\n                                 .syntax()\n@@ -729,16 +731,17 @@ impl<'a> CompletionContext<'a> {\n                             } else {\n                                 ParamKind::Function\n                             });\n-                            PatternRefutability::Irrefutable\n+                            return (PatternRefutability::Irrefutable, param.ty().is_some())\n                         },\n                         ast::MatchArm(__) => PatternRefutability::Refutable,\n                         ast::Condition(__) => PatternRefutability::Refutable,\n                         ast::ForExpr(__) => PatternRefutability::Irrefutable,\n                         _ => PatternRefutability::Irrefutable,\n                     }\n-                }\n+                };\n+                (refutability, false)\n             });\n-        Some(PatternContext { refutability, is_param })\n+        Some(PatternContext { refutability, is_param, has_type_ascription })\n     }\n \n     fn classify_name_ref(\n@@ -1172,4 +1175,23 @@ fn foo() {\n             expect![[r#\"ty: Foo, name: ?\"#]],\n         );\n     }\n+\n+    #[test]\n+    fn expected_type_param_pat() {\n+        check_expected_type_and_name(\n+            r#\"\n+struct Foo { field: u32 }\n+fn foo(a$0: Foo) {}\n+\"#,\n+            expect![[r#\"ty: Foo, name: ?\"#]],\n+        );\n+        check_expected_type_and_name(\n+            r#\"\n+struct Foo { field: u32 }\n+fn foo($0: Foo) {}\n+\"#,\n+            // FIXME make this work, currently fails due to pattern recovery eating the `:`\n+            expect![[r#\"ty: ?, name: ?\"#]],\n+        );\n+    }\n }"}, {"sha": "888a5b4b0a751a3bbf87ccc9d4f2b0ad7061fed6", "filename": "crates/ide_completion/src/render/pattern.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5c11b87cc28a2bc63d6125f67732c3adfa09917/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c11b87cc28a2bc63d6125f67732c3adfa09917/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs?ref=c5c11b87cc28a2bc63d6125f67732c3adfa09917", "patch": "@@ -86,7 +86,11 @@ fn render_pat(\n \n     if matches!(\n         ctx.completion.pattern_ctx,\n-        Some(PatternContext { is_param: Some(ParamKind::Function), .. })\n+        Some(PatternContext {\n+            is_param: Some(ParamKind::Function),\n+            has_type_ascription: false,\n+            ..\n+        })\n     ) {\n         pat.push(':');\n         pat.push(' ');"}, {"sha": "6dd1b6699881e6016d822ac9a3473af2b75fafa2", "filename": "crates/ide_completion/src/tests/pattern.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c5c11b87cc28a2bc63d6125f67732c3adfa09917/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c11b87cc28a2bc63d6125f67732c3adfa09917/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs?ref=c5c11b87cc28a2bc63d6125f67732c3adfa09917", "patch": "@@ -163,6 +163,21 @@ fn foo(a$0) {\n             ma makro!(\u2026) #[macro_export] macro_rules! makro\n         \"##]],\n     );\n+    check(\n+        r#\"\n+fn foo(a$0: Tuple) {\n+}\n+\"#,\n+        expect![[r##\"\n+            kw mut\n+            bn Record    Record { field$1 }$0\n+            st Record\n+            bn Tuple     Tuple($1)$0\n+            st Tuple\n+            st Unit\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+        \"##]],\n+    );\n }\n \n #[test]"}]}