{"sha": "3a4cacd45891db4a898606fc7b26d4b73009e5c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNGNhY2Q0NTg5MWRiNGE4OTg2MDZmYzdiMjZkNGI3MzAwOWU1YzM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-22T21:02:15Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-23T15:54:24Z"}, "message": "Add comments", "tree": {"sha": "0a10400ce7c9d5ea4f6439726b964e13ccecef67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a10400ce7c9d5ea4f6439726b964e13ccecef67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a4cacd45891db4a898606fc7b26d4b73009e5c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a4cacd45891db4a898606fc7b26d4b73009e5c3", "html_url": "https://github.com/rust-lang/rust/commit/3a4cacd45891db4a898606fc7b26d4b73009e5c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a4cacd45891db4a898606fc7b26d4b73009e5c3/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "580a93e2b6bd1817c81a248b469b01476f0ee328", "url": "https://api.github.com/repos/rust-lang/rust/commits/580a93e2b6bd1817c81a248b469b01476f0ee328", "html_url": "https://github.com/rust-lang/rust/commit/580a93e2b6bd1817c81a248b469b01476f0ee328"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "9f8e62a061422b9bcbaa2c58a9cbe1485d47b94e", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/3a4cacd45891db4a898606fc7b26d4b73009e5c3/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a4cacd45891db4a898606fc7b26d4b73009e5c3/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=3a4cacd45891db4a898606fc7b26d4b73009e5c3", "patch": "@@ -179,6 +179,47 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n             let item_span = item.map(|i| tcx.sess.source_map().def_span(i.span));\n             match pred {\n                 ty::Predicate::Projection(proj) => {\n+                    // The obligation comes not from the current `impl` nor the `trait` being\n+                    // implemented, but rather from a \"second order\" obligation, like in\n+                    // `src/test/ui/associated-types/point-at-type-on-obligation-failure.rs`:\n+                    //\n+                    //   error[E0271]: type mismatch resolving `<Foo2 as Bar2>::Ok == ()`\n+                    //     --> $DIR/point-at-type-on-obligation-failure.rs:13:5\n+                    //      |\n+                    //   LL |     type Ok;\n+                    //      |          -- associated type defined here\n+                    //   ...\n+                    //   LL | impl Bar for Foo {\n+                    //      | ---------------- in this `impl` item\n+                    //   LL |     type Ok = ();\n+                    //      |     ^^^^^^^^^^^^^ expected u32, found ()\n+                    //      |\n+                    //      = note: expected type `u32`\n+                    //                 found type `()`\n+                    //\n+                    // FIXME: we would want to point a span to all places that contributed to this\n+                    // obligation. In the case above, it should be closer to:\n+                    //\n+                    //   error[E0271]: type mismatch resolving `<Foo2 as Bar2>::Ok == ()`\n+                    //     --> $DIR/point-at-type-on-obligation-failure.rs:13:5\n+                    //      |\n+                    //   LL |     type Ok;\n+                    //      |          -- associated type defined here\n+                    //   LL |     type Sibling: Bar2<Ok=Self::Ok>;\n+                    //      |     -------------------------------- obligation set here\n+                    //   ...\n+                    //   LL | impl Bar for Foo {\n+                    //      | ---------------- in this `impl` item\n+                    //   LL |     type Ok = ();\n+                    //      |     ^^^^^^^^^^^^^ expected u32, found ()\n+                    //   ...\n+                    //   LL | impl Bar2 for Foo2 {\n+                    //      | ---------------- in this `impl` item\n+                    //   LL |     type Ok = u32;\n+                    //      |     -------------- obligation set here\n+                    //      |\n+                    //      = note: expected type `u32`\n+                    //                 found type `()`\n                     if let Some(hir::ItemKind::Impl(.., impl_items)) = item.map(|i| &i.kind) {\n                         let trait_assoc_item = tcx.associated_item(proj.projection_def_id());\n                         if let Some(impl_item) = impl_items.iter().filter(|item| {\n@@ -193,6 +234,38 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                     }\n                 }\n                 ty::Predicate::Trait(proj) => {\n+                    // An associated item obligation born out of the `trait` failed to be met.\n+                    // Point at the `impl` that failed the obligation, the associated item that\n+                    // needed to meet the obligation, and the definition of that associated item,\n+                    // which should hold the obligation in most cases. An example can be seen in\n+                    // `src/test/ui/associated-types/point-at-type-on-obligation-failure-2.rs`:\n+                    //\n+                    //   error[E0277]: the trait bound `bool: Bar` is not satisfied\n+                    //     --> $DIR/point-at-type-on-obligation-failure-2.rs:8:5\n+                    //      |\n+                    //   LL |     type Assoc: Bar;\n+                    //      |          ----- associated type defined here\n+                    //   ...\n+                    //   LL | impl Foo for () {\n+                    //      | --------------- in this `impl` item\n+                    //   LL |     type Assoc = bool;\n+                    //      |     ^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `bool`\n+                    //\n+                    // FIXME: if the obligation comes from the where clause in the `trait`, we\n+                    // should point at it:\n+                    //\n+                    //   error[E0277]: the trait bound `bool: Bar` is not satisfied\n+                    //     --> $DIR/point-at-type-on-obligation-failure-2.rs:8:5\n+                    //      |\n+                    //      | trait Foo where <Self as Foo>>::Assoc: Bar {\n+                    //      |                 -------------------------- obligation set here\n+                    //   LL |     type Assoc;\n+                    //      |          ----- associated type defined here\n+                    //   ...\n+                    //   LL | impl Foo for () {\n+                    //      | --------------- in this `impl` item\n+                    //   LL |     type Assoc = bool;\n+                    //      |     ^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `bool`\n                     if let (\n                         ty::Projection(ty::ProjectionTy { item_def_id, .. }),\n                         Some(hir::ItemKind::Impl(.., impl_items)),"}]}