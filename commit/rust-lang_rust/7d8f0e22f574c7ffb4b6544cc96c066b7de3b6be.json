{"sha": "7d8f0e22f574c7ffb4b6544cc96c066b7de3b6be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkOGYwZTIyZjU3NGM3ZmZiNGI2NTQ0Y2M5NmMwNjZiN2RlM2I2YmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-26T23:11:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-26T23:11:39Z"}, "message": "Auto merge of #50253 - nikomatsakis:regressions-2018-04-26, r=eddyb\n\ndrop elaboration should reveal all\n\nThis used to happen implicitly through the normalization function; but we now keep the param-env as is, which seems less surprising.\n\ncc #49685\n\nr? @eddyb", "tree": {"sha": "c89d103ada07018ef5c1640ae9d4a0c1977acf84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c89d103ada07018ef5c1640ae9d4a0c1977acf84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d8f0e22f574c7ffb4b6544cc96c066b7de3b6be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d8f0e22f574c7ffb4b6544cc96c066b7de3b6be", "html_url": "https://github.com/rust-lang/rust/commit/7d8f0e22f574c7ffb4b6544cc96c066b7de3b6be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d8f0e22f574c7ffb4b6544cc96c066b7de3b6be/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f3444e1baf0d335b4bf379f845dbc28cdd0509c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f3444e1baf0d335b4bf379f845dbc28cdd0509c", "html_url": "https://github.com/rust-lang/rust/commit/7f3444e1baf0d335b4bf379f845dbc28cdd0509c"}, {"sha": "86e9a7ac43b7fc2de4fdc2127de568d523ce5284", "url": "https://api.github.com/repos/rust-lang/rust/commits/86e9a7ac43b7fc2de4fdc2127de568d523ce5284", "html_url": "https://github.com/rust-lang/rust/commit/86e9a7ac43b7fc2de4fdc2127de568d523ce5284"}], "stats": {"total": 42, "additions": 37, "deletions": 5}, "files": [{"sha": "5ec2e32b6a4c1f20686ee14a503fd3044e7e486e", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d8f0e22f574c7ffb4b6544cc96c066b7de3b6be/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d8f0e22f574c7ffb4b6544cc96c066b7de3b6be/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=7d8f0e22f574c7ffb4b6544cc96c066b7de3b6be", "patch": "@@ -112,7 +112,7 @@ impl<'a, 'gcx, 'tcx> FulfillmentContext<'tcx> {\n                 selcx,\n                 register_region_obligations: self.register_region_obligations\n             });\n-            debug!(\"select: outcome={:?}\", outcome);\n+            debug!(\"select: outcome={:#?}\", outcome);\n \n             // FIXME: if we kept the original cache key, we could mark projection\n             // obligations as complete for the projection cache here."}, {"sha": "0c35e20324c9ce0a304cd18cdc7f2e1ae60b95f6", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7d8f0e22f574c7ffb4b6544cc96c066b7de3b6be/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d8f0e22f574c7ffb4b6544cc96c066b7de3b6be/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=7d8f0e22f574c7ffb4b6544cc96c066b7de3b6be", "patch": "@@ -196,7 +196,10 @@ pub fn poly_project_and_unify_type<'cx, 'gcx, 'tcx>(\n                 let span = obligation.cause.span;\n                 match infcx.leak_check(false, span, &skol_map, snapshot) {\n                     Ok(()) => Ok(infcx.plug_leaks(skol_map, snapshot, result)),\n-                    Err(e) => Err(MismatchedProjectionTypes { err: e }),\n+                    Err(e) => {\n+                        debug!(\"poly_project_and_unify_type: leak check encountered error {:?}\", e);\n+                        Err(MismatchedProjectionTypes { err: e })\n+                    }\n                 }\n             }\n             Err(e) => {\n@@ -243,7 +246,10 @@ fn project_and_unify_type<'cx, 'gcx, 'tcx>(\n             obligations.extend(inferred_obligations);\n             Ok(Some(obligations))\n         },\n-        Err(err) => Err(MismatchedProjectionTypes { err: err }),\n+        Err(err) => {\n+            debug!(\"project_and_unify_type: equating types encountered error {:?}\", err);\n+            Err(MismatchedProjectionTypes { err: err })\n+        }\n     }\n }\n "}, {"sha": "699a5b17435bd2c4161d8033eee349992cfc0d9f", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d8f0e22f574c7ffb4b6544cc96c066b7de3b6be/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d8f0e22f574c7ffb4b6544cc96c066b7de3b6be/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=7d8f0e22f574c7ffb4b6544cc96c066b7de3b6be", "patch": "@@ -210,7 +210,7 @@ fn build_drop_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     if let Some(..) = ty {\n         let patch = {\n-            let param_env = tcx.param_env(def_id);\n+            let param_env = tcx.param_env(def_id).with_reveal_all();\n             let mut elaborator = DropShimElaborator {\n                 mir: &mir,\n                 patch: MirPatch::new(&mir),"}, {"sha": "f63a5ef301a6815bd1769c64c779a9e37eeea8db", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d8f0e22f574c7ffb4b6544cc96c066b7de3b6be/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d8f0e22f574c7ffb4b6544cc96c066b7de3b6be/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=7d8f0e22f574c7ffb4b6544cc96c066b7de3b6be", "patch": "@@ -50,7 +50,7 @@ impl MirPass for ElaborateDrops {\n             (hir::BodyOwnerKind::Fn, None) => {},\n             _ => return\n         }\n-        let param_env = tcx.param_env(src.def_id);\n+        let param_env = tcx.param_env(src.def_id).with_reveal_all();\n         let move_data = MoveData::gather_moves(mir, tcx).unwrap();\n         let elaborate_patch = {\n             let mir = &*mir;"}, {"sha": "e5719407da639ff437a7dc1c27cae1fb241fc9dd", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d8f0e22f574c7ffb4b6544cc96c066b7de3b6be/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d8f0e22f574c7ffb4b6544cc96c066b7de3b6be/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=7d8f0e22f574c7ffb4b6544cc96c066b7de3b6be", "patch": "@@ -13,6 +13,7 @@ use rustc::hir;\n use rustc::mir::*;\n use rustc::middle::const_val::ConstVal;\n use rustc::middle::lang_items;\n+use rustc::traits::Reveal;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::{Kind, Substs};\n use rustc::ty::util::IntTypeExt;\n@@ -206,6 +207,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n             let field = Field::new(i);\n             let subpath = self.elaborator.field_subpath(variant_path, field);\n \n+            assert_eq!(self.elaborator.param_env().reveal, Reveal::All);\n             let field_ty = self.tcx().normalize_erasing_regions(\n                 self.elaborator.param_env(),\n                 f.ty(self.tcx(), substs),"}, {"sha": "299433d479dc60d86d69ca5f4cb898482509bb4c", "filename": "src/librustc_traits/normalize_erasing_regions.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d8f0e22f574c7ffb4b6544cc96c066b7de3b6be/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d8f0e22f574c7ffb4b6544cc96c066b7de3b6be/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs?ref=7d8f0e22f574c7ffb4b6544cc96c066b7de3b6be", "patch": "@@ -17,6 +17,8 @@ crate fn normalize_ty_after_erasing_regions<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     goal: ParamEnvAnd<'tcx, Ty<'tcx>>,\n ) -> Ty<'tcx> {\n+    debug!(\"normalize_ty_after_erasing_regions(goal={:#?})\", goal);\n+\n     let ParamEnvAnd { param_env, value } = goal;\n     tcx.sess.perf_stats.normalize_ty_after_erasing_regions.fetch_add(1, Ordering::Relaxed);\n     tcx.infer_ctxt().enter(|infcx| {"}, {"sha": "1e4e79553237129a4463db2b035470d76a0a6f86", "filename": "src/test/run-pass/issue-49685.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7d8f0e22f574c7ffb4b6544cc96c066b7de3b6be/src%2Ftest%2Frun-pass%2Fissue-49685.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d8f0e22f574c7ffb4b6544cc96c066b7de3b6be/src%2Ftest%2Frun-pass%2Fissue-49685.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-49685.rs?ref=7d8f0e22f574c7ffb4b6544cc96c066b7de3b6be", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for #49685: drop elaboration was not revealing the\n+// value of `impl Trait` returns, leading to an ICE.\n+\n+fn main() {\n+    let _ = Some(())\n+        .into_iter()\n+        .flat_map(|_| Some(()).into_iter().flat_map(func));\n+}\n+\n+fn func(_: ()) -> impl Iterator<Item = ()> {\n+    Some(()).into_iter().flat_map(|_| vec![])\n+}"}]}