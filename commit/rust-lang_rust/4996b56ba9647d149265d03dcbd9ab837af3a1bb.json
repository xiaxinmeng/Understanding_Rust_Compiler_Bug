{"sha": "4996b56ba9647d149265d03dcbd9ab837af3a1bb", "node_id": "C_kwDOAAsO6NoAKDQ5OTZiNTZiYTk2NDdkMTQ5MjY1ZDAzZGNiZDlhYjgzN2FmM2ExYmI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-15T09:38:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-15T09:38:53Z"}, "message": "Auto merge of #106343 - the8472:slice-iter-fold, r=scottmcm\n\noptimize slice::Iter::fold\n\nFixes 2 of 4 cases from #106288\n\n```\nOLD: test slice::fold_to_last                                           ... bench:         248 ns/iter (+/- 3)\nNEW: test slice::fold_to_last                                           ... bench:           0 ns/iter (+/- 0)\n```", "tree": {"sha": "c4d332653e4415c2e03fd3c7ec643bd04da87171", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4d332653e4415c2e03fd3c7ec643bd04da87171"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4996b56ba9647d149265d03dcbd9ab837af3a1bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4996b56ba9647d149265d03dcbd9ab837af3a1bb", "html_url": "https://github.com/rust-lang/rust/commit/4996b56ba9647d149265d03dcbd9ab837af3a1bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4996b56ba9647d149265d03dcbd9ab837af3a1bb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a65be815211a059b08ee3b786583308377372fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a65be815211a059b08ee3b786583308377372fa", "html_url": "https://github.com/rust-lang/rust/commit/5a65be815211a059b08ee3b786583308377372fa"}, {"sha": "d90508f76130a8a9aaa68521ac1b0e35ea9a236e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d90508f76130a8a9aaa68521ac1b0e35ea9a236e", "html_url": "https://github.com/rust-lang/rust/commit/d90508f76130a8a9aaa68521ac1b0e35ea9a236e"}], "stats": {"total": 64, "additions": 56, "deletions": 8}, "files": [{"sha": "3bfb35e684ea1e7fa2b9f52344903369761bc3a4", "filename": "library/core/benches/slice.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4996b56ba9647d149265d03dcbd9ab837af3a1bb/library%2Fcore%2Fbenches%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4996b56ba9647d149265d03dcbd9ab837af3a1bb/library%2Fcore%2Fbenches%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fslice.rs?ref=4996b56ba9647d149265d03dcbd9ab837af3a1bb", "patch": "@@ -1,3 +1,4 @@\n+use core::ptr::NonNull;\n use test::black_box;\n use test::Bencher;\n \n@@ -162,3 +163,11 @@ fn fill_byte_sized(b: &mut Bencher) {\n         black_box(slice.fill(black_box(NewType(42))));\n     });\n }\n+\n+// Tests the ability of the compiler to recognize that only the last slice item is needed\n+// based on issue #106288\n+#[bench]\n+fn fold_to_last(b: &mut Bencher) {\n+    let slice: &[i32] = &[0; 1024];\n+    b.iter(|| black_box(slice).iter().fold(None, |_, r| Some(NonNull::from(r))));\n+}"}, {"sha": "96a145e22ed5d9f0d9ae1004ac62b2b60e49f2ee", "filename": "library/core/src/slice/iter/macros.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4996b56ba9647d149265d03dcbd9ab837af3a1bb/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4996b56ba9647d149265d03dcbd9ab837af3a1bb/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs?ref=4996b56ba9647d149265d03dcbd9ab837af3a1bb", "patch": "@@ -191,6 +191,39 @@ macro_rules! iterator {\n                 self.next_back()\n             }\n \n+            #[inline]\n+            fn fold<B, F>(self, init: B, mut f: F) -> B\n+                where\n+                    F: FnMut(B, Self::Item) -> B,\n+            {\n+                // this implementation consists of the following optimizations compared to the\n+                // default implementation:\n+                // - do-while loop, as is llvm's preferred loop shape,\n+                //   see https://releases.llvm.org/16.0.0/docs/LoopTerminology.html#more-canonical-loops\n+                // - bumps an index instead of a pointer since the latter case inhibits\n+                //   some optimizations, see #111603\n+                // - avoids Option wrapping/matching\n+                if is_empty!(self) {\n+                    return init;\n+                }\n+                let mut acc = init;\n+                let mut i = 0;\n+                let len = len!(self);\n+                loop {\n+                    // SAFETY: the loop iterates `i in 0..len`, which always is in bounds of\n+                    // the slice allocation\n+                    acc = f(acc, unsafe { & $( $mut_ )? *self.ptr.add(i).as_ptr() });\n+                    // SAFETY: `i` can't overflow since it'll only reach usize::MAX if the\n+                    // slice had that length, in which case we'll break out of the loop\n+                    // after the increment\n+                    i = unsafe { i.unchecked_add(1) };\n+                    if i == len {\n+                        break;\n+                    }\n+                }\n+                acc\n+            }\n+\n             // We override the default implementation, which uses `try_fold`,\n             // because this simple implementation generates less LLVM IR and is\n             // faster to compile."}, {"sha": "9391c176130a4d1c76723bfcc9819089c3999fa9", "filename": "tests/codegen/slice-iter-fold.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4996b56ba9647d149265d03dcbd9ab837af3a1bb/tests%2Fcodegen%2Fslice-iter-fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4996b56ba9647d149265d03dcbd9ab837af3a1bb/tests%2Fcodegen%2Fslice-iter-fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fslice-iter-fold.rs?ref=4996b56ba9647d149265d03dcbd9ab837af3a1bb", "patch": "@@ -0,0 +1,14 @@\n+// ignore-debug: the debug assertions get in the way\n+// compile-flags: -O\n+// min-llvm-version: 16\n+#![crate_type = \"lib\"]\n+\n+// CHECK-LABEL: @slice_fold_to_last\n+#[no_mangle]\n+pub fn slice_fold_to_last(slice: &[i32]) -> Option<&i32> {\n+    // CHECK-NOT: loop\n+    // CHECK-NOT: br\n+    // CHECK-NOT: call\n+    // CHECK: ret\n+    slice.iter().fold(None, |_, i| Some(i))\n+}"}, {"sha": "14fef4e2cd55a622cb62e8cf325605c76f17ad6d", "filename": "tests/codegen/vec-shrink-panik.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4996b56ba9647d149265d03dcbd9ab837af3a1bb/tests%2Fcodegen%2Fvec-shrink-panik.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4996b56ba9647d149265d03dcbd9ab837af3a1bb/tests%2Fcodegen%2Fvec-shrink-panik.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fvec-shrink-panik.rs?ref=4996b56ba9647d149265d03dcbd9ab837af3a1bb", "patch": "@@ -37,14 +37,6 @@ pub fn issue71861(vec: Vec<u32>) -> Box<[u32]> {\n // CHECK-LABEL: @issue75636\n #[no_mangle]\n pub fn issue75636<'a>(iter: &[&'a str]) -> Box<[&'a str]> {\n-    // CHECK-NOT: panic\n-\n-    // Call to panic_cannot_unwind in case of double-panic is expected,\n-    // on LLVM 16 and older, but other panics are not.\n-    // old: filter\n-    // old-NEXT: ; call core::panicking::panic_cannot_unwind\n-    // old-NEXT: panic_cannot_unwind\n-\n     // CHECK-NOT: panic\n     iter.iter().copied().collect()\n }"}]}