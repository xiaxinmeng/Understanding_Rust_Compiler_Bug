{"sha": "415c9f95884caebd0be9b837ef0885d1ffde1b9b", "node_id": "C_kwDOAAsO6NoAKDQxNWM5Zjk1ODg0Y2FlYmQwYmU5YjgzN2VmMDg4NWQxZmZkZTFiOWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-31T08:12:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-31T08:12:10Z"}, "message": "Auto merge of #93499 - matthiaskrgr:rollup-icdex11, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #93395 (Improve suggestion for escaping reserved keywords)\n - #93403 (review the total_cmp documentation)\n - #93461 (Accommodate yield points in the format_args expansion)\n - #93462 (Document `SystemTime` platform precision)\n - #93471 (unix: Use metadata for `DirEntry::file_type` fallback)\n - #93480 (Remove deprecated and unstable slice_partition_at_index functions)\n - #93485 (core: Remove some redundant {}s from the sorting code)\n - #93494 (kmc-solid: Inherit the calling task's base priority in `Thread::new`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "dee55224d2f23cc0bfd794554c76228daa36046e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dee55224d2f23cc0bfd794554c76228daa36046e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/415c9f95884caebd0be9b837ef0885d1ffde1b9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/415c9f95884caebd0be9b837ef0885d1ffde1b9b", "html_url": "https://github.com/rust-lang/rust/commit/415c9f95884caebd0be9b837ef0885d1ffde1b9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/415c9f95884caebd0be9b837ef0885d1ffde1b9b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb549e5afe8f23258606649cc3a2d8b8a51ef63a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb549e5afe8f23258606649cc3a2d8b8a51ef63a", "html_url": "https://github.com/rust-lang/rust/commit/bb549e5afe8f23258606649cc3a2d8b8a51ef63a"}, {"sha": "4757a931cd69f57ab3e1d823ffa44b18c37e1223", "url": "https://api.github.com/repos/rust-lang/rust/commits/4757a931cd69f57ab3e1d823ffa44b18c37e1223", "html_url": "https://github.com/rust-lang/rust/commit/4757a931cd69f57ab3e1d823ffa44b18c37e1223"}], "stats": {"total": 517, "additions": 285, "deletions": 232}, "files": [{"sha": "aaa6580acc6f08543d8895009306d3fc29229f32", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 51, "deletions": 4, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,6 +4,7 @@ use Position::*;\n use rustc_ast as ast;\n use rustc_ast::ptr::P;\n use rustc_ast::tokenstream::TokenStream;\n+use rustc_ast::visit::{self, Visitor};\n use rustc_ast::{token, BlockCheckMode, UnsafeSource};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, Applicability, DiagnosticBuilder};\n@@ -788,17 +789,31 @@ impl<'a, 'b> Context<'a, 'b> {\n         // the order provided to fmt::Arguments. When arguments are repeated, we\n         // want the expression evaluated only once.\n         //\n-        // Thus in the not nicely ordered case we emit the following instead:\n+        // Further, if any arg _after the first one_ contains a yield point such\n+        // as `await` or `yield`, the above short form is inconvenient for the\n+        // caller because it would keep a temporary of type ArgumentV1 alive\n+        // across the yield point. ArgumentV1 can't implement Send since it\n+        // holds a type-erased arbitrary type.\n+        //\n+        // Thus in the not nicely ordered case, and in the yielding case, we\n+        // emit the following instead:\n         //\n         //     match (&$arg0, &$arg1, \u2026) {\n         //         args => [ArgumentV1::new(args.$i, \u2026), ArgumentV1::new(args.$j, \u2026), \u2026]\n         //     }\n         //\n         // for the sequence of indices $i, $j, \u2026 governed by fmt_arg_index_and_ty.\n+        // This more verbose representation ensures that all arguments are\n+        // evaluated a single time each, in the order written by the programmer,\n+        // and that the surrounding future/generator (if any) is Send whenever\n+        // possible.\n+        let no_need_for_match =\n+            nicely_ordered && !original_args.iter().skip(1).any(|e| may_contain_yield_point(e));\n+\n         for (arg_index, arg_ty) in fmt_arg_index_and_ty {\n             let e = &mut original_args[arg_index];\n             let span = e.span;\n-            let arg = if nicely_ordered {\n+            let arg = if no_need_for_match {\n                 let expansion_span = e.span.with_ctxt(self.macsp.ctxt());\n                 // The indices are strictly ordered so e has not been taken yet.\n                 self.ecx.expr_addr_of(expansion_span, P(e.take()))\n@@ -814,10 +829,10 @@ impl<'a, 'b> Context<'a, 'b> {\n         let args_array = self.ecx.expr_vec(self.macsp, fmt_args);\n         let args_slice = self.ecx.expr_addr_of(\n             self.macsp,\n-            if nicely_ordered {\n+            if no_need_for_match {\n                 args_array\n             } else {\n-                // In the !nicely_ordered case, none of the exprs were moved\n+                // In the !no_need_for_match case, none of the exprs were moved\n                 // away in the previous loop.\n                 //\n                 // This uses the arg span for `&arg` so that borrowck errors\n@@ -1226,3 +1241,35 @@ pub fn expand_preparsed_format_args(\n \n     cx.into_expr()\n }\n+\n+fn may_contain_yield_point(e: &ast::Expr) -> bool {\n+    struct MayContainYieldPoint(bool);\n+\n+    impl Visitor<'_> for MayContainYieldPoint {\n+        fn visit_expr(&mut self, e: &ast::Expr) {\n+            if let ast::ExprKind::Await(_) | ast::ExprKind::Yield(_) = e.kind {\n+                self.0 = true;\n+            } else {\n+                visit::walk_expr(self, e);\n+            }\n+        }\n+\n+        fn visit_mac_call(&mut self, _: &ast::MacCall) {\n+            self.0 = true;\n+        }\n+\n+        fn visit_attribute(&mut self, _: &ast::Attribute) {\n+            // Conservatively assume this may be a proc macro attribute in\n+            // expression position.\n+            self.0 = true;\n+        }\n+\n+        fn visit_item(&mut self, _: &ast::Item) {\n+            // Do not recurse into nested items.\n+        }\n+    }\n+\n+    let mut visitor = MayContainYieldPoint(false);\n+    visitor.visit_expr(e);\n+    visitor.0\n+}"}, {"sha": "7b74b137d21ae2c0afc6e8d1508fdb037d04aa96", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -192,10 +192,10 @@ impl<'a> Parser<'a> {\n                 if ident.is_raw_guess()\n                     && self.look_ahead(1, |t| valid_follow.contains(&t.kind)) =>\n             {\n-                err.span_suggestion(\n-                    ident.span,\n-                    \"you can escape reserved keywords to use them as identifiers\",\n-                    format!(\"r#{}\", ident.name),\n+                err.span_suggestion_verbose(\n+                    ident.span.shrink_to_lo(),\n+                    &format!(\"escape `{}` to use it as an identifier\", ident.name),\n+                    \"r#\".to_owned(),\n                     Applicability::MaybeIncorrect,\n                 );\n             }"}, {"sha": "d8dcfdafa8df9d0af4543eeed547e16677145211", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -1008,29 +1008,37 @@ impl f32 {\n         Self::from_bits(u32::from_ne_bytes(bytes))\n     }\n \n-    /// Returns an ordering between self and other values.\n+    /// Return the ordering between `self` and `other`.\n+    ///\n     /// Unlike the standard partial comparison between floating point numbers,\n     /// this comparison always produces an ordering in accordance to\n-    /// the totalOrder predicate as defined in IEEE 754 (2008 revision)\n-    /// floating point standard. The values are ordered in following order:\n-    /// - Negative quiet NaN\n-    /// - Negative signaling NaN\n-    /// - Negative infinity\n-    /// - Negative numbers\n-    /// - Negative subnormal numbers\n-    /// - Negative zero\n-    /// - Positive zero\n-    /// - Positive subnormal numbers\n-    /// - Positive numbers\n-    /// - Positive infinity\n-    /// - Positive signaling NaN\n-    /// - Positive quiet NaN\n-    ///\n-    /// Note that this function does not always agree with the [`PartialOrd`]\n-    /// and [`PartialEq`] implementations of `f32`. In particular, they regard\n-    /// negative and positive zero as equal, while `total_cmp` doesn't.\n+    /// the `totalOrder` predicate as defined in the IEEE 754 (2008 revision)\n+    /// floating point standard. The values are ordered in the following sequence:\n+    ///\n+    /// - negative quiet NaN\n+    /// - negative signaling NaN\n+    /// - negative infinity\n+    /// - negative numbers\n+    /// - negative subnormal numbers\n+    /// - negative zero\n+    /// - positive zero\n+    /// - positive subnormal numbers\n+    /// - positive numbers\n+    /// - positive infinity\n+    /// - positive signaling NaN\n+    /// - positive quiet NaN.\n+    ///\n+    /// The ordering established by this function does not always agree with the\n+    /// [`PartialOrd`] and [`PartialEq`] implementations of `f32`. For example,\n+    /// they consider negative and positive zero equal, while `total_cmp`\n+    /// doesn't.\n+    ///\n+    /// The interpretation of the signaling NaN bit follows the definition in\n+    /// the IEEE 754 standard, which may not match the interpretation by some of\n+    /// the older, non-conformant (e.g. MIPS) hardware implementations.\n     ///\n     /// # Example\n+    ///\n     /// ```\n     /// #![feature(total_cmp)]\n     /// struct GoodBoy {"}, {"sha": "7c2f51ff64639db45dad8dce1543c9004b04f5a5", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -1024,29 +1024,37 @@ impl f64 {\n         Self::from_bits(u64::from_ne_bytes(bytes))\n     }\n \n-    /// Returns an ordering between self and other values.\n+    /// Return the ordering between `self` and `other`.\n+    ///\n     /// Unlike the standard partial comparison between floating point numbers,\n     /// this comparison always produces an ordering in accordance to\n-    /// the totalOrder predicate as defined in IEEE 754 (2008 revision)\n-    /// floating point standard. The values are ordered in following order:\n-    /// - Negative quiet NaN\n-    /// - Negative signaling NaN\n-    /// - Negative infinity\n-    /// - Negative numbers\n-    /// - Negative subnormal numbers\n-    /// - Negative zero\n-    /// - Positive zero\n-    /// - Positive subnormal numbers\n-    /// - Positive numbers\n-    /// - Positive infinity\n-    /// - Positive signaling NaN\n-    /// - Positive quiet NaN\n-    ///\n-    /// Note that this function does not always agree with the [`PartialOrd`]\n-    /// and [`PartialEq`] implementations of `f64`. In particular, they regard\n-    /// negative and positive zero as equal, while `total_cmp` doesn't.\n+    /// the `totalOrder` predicate as defined in the IEEE 754 (2008 revision)\n+    /// floating point standard. The values are ordered in the following sequence:\n+    ///\n+    /// - negative quiet NaN\n+    /// - negative signaling NaN\n+    /// - negative infinity\n+    /// - negative numbers\n+    /// - negative subnormal numbers\n+    /// - negative zero\n+    /// - positive zero\n+    /// - positive subnormal numbers\n+    /// - positive numbers\n+    /// - positive infinity\n+    /// - positive signaling NaN\n+    /// - positive quiet NaN.\n+    ///\n+    /// The ordering established by this function does not always agree with the\n+    /// [`PartialOrd`] and [`PartialEq`] implementations of `f64`. For example,\n+    /// they consider negative and positive zero equal, while `total_cmp`\n+    /// doesn't.\n+    ///\n+    /// The interpretation of the signaling NaN bit follows the definition in\n+    /// the IEEE 754 standard, which may not match the interpretation by some of\n+    /// the older, non-conformant (e.g. MIPS) hardware implementations.\n     ///\n     /// # Example\n+    ///\n     /// ```\n     /// #![feature(total_cmp)]\n     /// struct GoodBoy {"}, {"sha": "4e22c1d8c6d94e999f5c783d6c140bac9c1eafd1", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -2558,50 +2558,6 @@ impl<T> [T] {\n         sort::quicksort(self, |a, b| f(a).lt(&f(b)));\n     }\n \n-    /// Reorder the slice such that the element at `index` is at its final sorted position.\n-    #[unstable(feature = \"slice_partition_at_index\", issue = \"55300\")]\n-    #[rustc_deprecated(since = \"1.49.0\", reason = \"use the select_nth_unstable() instead\")]\n-    #[inline]\n-    pub fn partition_at_index(&mut self, index: usize) -> (&mut [T], &mut T, &mut [T])\n-    where\n-        T: Ord,\n-    {\n-        self.select_nth_unstable(index)\n-    }\n-\n-    /// Reorder the slice with a comparator function such that the element at `index` is at its\n-    /// final sorted position.\n-    #[unstable(feature = \"slice_partition_at_index\", issue = \"55300\")]\n-    #[rustc_deprecated(since = \"1.49.0\", reason = \"use select_nth_unstable_by() instead\")]\n-    #[inline]\n-    pub fn partition_at_index_by<F>(\n-        &mut self,\n-        index: usize,\n-        compare: F,\n-    ) -> (&mut [T], &mut T, &mut [T])\n-    where\n-        F: FnMut(&T, &T) -> Ordering,\n-    {\n-        self.select_nth_unstable_by(index, compare)\n-    }\n-\n-    /// Reorder the slice with a key extraction function such that the element at `index` is at its\n-    /// final sorted position.\n-    #[unstable(feature = \"slice_partition_at_index\", issue = \"55300\")]\n-    #[rustc_deprecated(since = \"1.49.0\", reason = \"use the select_nth_unstable_by_key() instead\")]\n-    #[inline]\n-    pub fn partition_at_index_by_key<K, F>(\n-        &mut self,\n-        index: usize,\n-        f: F,\n-    ) -> (&mut [T], &mut T, &mut [T])\n-    where\n-        F: FnMut(&T) -> K,\n-        K: Ord,\n-    {\n-        self.select_nth_unstable_by_key(index, f)\n-    }\n-\n     /// Reorder the slice such that the element at `index` is at its final sorted position.\n     ///\n     /// This reordering has the additional property that any value at position `i < index` will be"}, {"sha": "2ba0e5320d7b913a737e28ae147ea9528ff39bd5", "filename": "library/core/src/slice/sort.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -773,7 +773,7 @@ where\n                 let mid = partition_equal(v, pivot, is_less);\n \n                 // Continue sorting elements greater than the pivot.\n-                v = &mut { v }[mid..];\n+                v = &mut v[mid..];\n                 continue;\n             }\n         }\n@@ -784,7 +784,7 @@ where\n         was_partitioned = was_p;\n \n         // Split the slice into `left`, `pivot`, and `right`.\n-        let (left, right) = { v }.split_at_mut(mid);\n+        let (left, right) = v.split_at_mut(mid);\n         let (pivot, right) = right.split_at_mut(1);\n         let pivot = &pivot[0];\n \n@@ -860,7 +860,7 @@ fn partition_at_index_loop<'a, T, F>(\n         let (mid, _) = partition(v, pivot, is_less);\n \n         // Split the slice into `left`, `pivot`, and `right`.\n-        let (left, right) = { v }.split_at_mut(mid);\n+        let (left, right) = v.split_at_mut(mid);\n         let (pivot, right) = right.split_at_mut(1);\n         let pivot = &pivot[0];\n "}, {"sha": "ebe1a63a470d32c7c27cc61fd8e4654fe77bef1c", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -46,7 +46,6 @@\n #![feature(is_sorted)]\n #![feature(pattern)]\n #![feature(sort_internals)]\n-#![feature(slice_partition_at_index)]\n #![feature(slice_take)]\n #![feature(maybe_uninit_uninit_array)]\n #![feature(maybe_uninit_array_assume_init)]"}, {"sha": "a8ecc1ada4ad4736e7927765fdce225116a02f3b", "filename": "library/std/src/sys/itron/thread.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fthread.rs?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -84,10 +84,6 @@ impl Thread {\n     ///\n     /// See `thread::Builder::spawn_unchecked` for safety requirements.\n     pub unsafe fn new(stack: usize, p: Box<dyn FnOnce()>) -> io::Result<Thread> {\n-        // Inherit the current task's priority\n-        let current_task = task::try_current_task_id().map_err(|e| e.as_io_error())?;\n-        let priority = task::try_task_priority(current_task).map_err(|e| e.as_io_error())?;\n-\n         let inner = Box::new(ThreadInner {\n             start: UnsafeCell::new(ManuallyDrop::new(p)),\n             lifecycle: AtomicUsize::new(LIFECYCLE_INIT),\n@@ -175,7 +171,8 @@ impl Thread {\n                 exinf: inner_ptr as abi::EXINF,\n                 // The entry point\n                 task: Some(trampoline),\n-                itskpri: priority,\n+                // Inherit the calling task's base priority\n+                itskpri: abi::TPRI_SELF,\n                 stksz: stack,\n                 // Let the kernel allocate the stack,\n                 stk: crate::ptr::null_mut(),"}, {"sha": "878796065c8f17b906c6e3fb4f2db996e1440cd5", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -598,7 +598,7 @@ impl DirEntry {\n         target_os = \"vxworks\"\n     ))]\n     pub fn file_type(&self) -> io::Result<FileType> {\n-        lstat(&self.path()).map(|m| m.file_type())\n+        self.metadata().map(|m| m.file_type())\n     }\n \n     #[cfg(not(any(\n@@ -616,7 +616,7 @@ impl DirEntry {\n             libc::DT_SOCK => Ok(FileType { mode: libc::S_IFSOCK }),\n             libc::DT_DIR => Ok(FileType { mode: libc::S_IFDIR }),\n             libc::DT_BLK => Ok(FileType { mode: libc::S_IFBLK }),\n-            _ => lstat(&self.path()).map(|m| m.file_type()),\n+            _ => self.metadata().map(|m| m.file_type()),\n         }\n     }\n "}, {"sha": "2d2b96c8bcec74df42b633a76cdf42a187c422e1", "filename": "library/std/src/time.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/library%2Fstd%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/library%2Fstd%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime.rs?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -176,7 +176,12 @@ pub struct Instant(time::Instant);\n /// }\n /// ```\n ///\n-/// # Underlying System calls\n+/// # Platform-specific behavior\n+///\n+/// The precision of `SystemTime` can depend on the underlying OS-specific time format.\n+/// For example, on Windows the time is represented in 100 nanosecond intervals whereas Linux\n+/// can represent nanosecond intervals.\n+///\n /// Currently, the following system calls are being used to get the current time using `now()`:\n ///\n /// |  Platform |               System call                                            |"}, {"sha": "ccbaa1f2af0d8d079a75277c95376e4f0c898127", "filename": "src/test/ui/async-await/await-keyword/2018-edition-error-in-non-macro-position.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,76 +4,76 @@ error: expected identifier, found keyword `await`\n LL |     pub mod await {\n    |             ^^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `await` to use it as an identifier\n    |\n LL |     pub mod r#await {\n-   |             ~~~~~~~\n+   |             ++\n \n error: expected identifier, found keyword `await`\n   --> $DIR/2018-edition-error-in-non-macro-position.rs:7:20\n    |\n LL |         pub struct await;\n    |                    ^^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `await` to use it as an identifier\n    |\n LL |         pub struct r#await;\n-   |                    ~~~~~~~\n+   |                    ++\n \n error: expected identifier, found keyword `await`\n   --> $DIR/2018-edition-error-in-non-macro-position.rs:10:22\n    |\n LL | use self::outer_mod::await::await;\n    |                      ^^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `await` to use it as an identifier\n    |\n LL | use self::outer_mod::r#await::await;\n-   |                      ~~~~~~~\n+   |                      ++\n \n error: expected identifier, found keyword `await`\n   --> $DIR/2018-edition-error-in-non-macro-position.rs:10:29\n    |\n LL | use self::outer_mod::await::await;\n    |                             ^^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `await` to use it as an identifier\n    |\n LL | use self::outer_mod::await::r#await;\n-   |                             ~~~~~~~\n+   |                             ++\n \n error: expected identifier, found keyword `await`\n   --> $DIR/2018-edition-error-in-non-macro-position.rs:13:14\n    |\n LL | struct Foo { await: () }\n    |              ^^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `await` to use it as an identifier\n    |\n LL | struct Foo { r#await: () }\n-   |              ~~~~~~~\n+   |              ++\n \n error: expected identifier, found keyword `await`\n   --> $DIR/2018-edition-error-in-non-macro-position.rs:16:15\n    |\n LL | impl Foo { fn await() {} }\n    |               ^^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `await` to use it as an identifier\n    |\n LL | impl Foo { fn r#await() {} }\n-   |               ~~~~~~~\n+   |               ++\n \n error: expected identifier, found keyword `await`\n   --> $DIR/2018-edition-error-in-non-macro-position.rs:19:14\n    |\n LL | macro_rules! await {\n    |              ^^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `await` to use it as an identifier\n    |\n LL | macro_rules! r#await {\n-   |              ~~~~~~~\n+   |              ++\n \n error: aborting due to 7 previous errors\n "}, {"sha": "34bfdfc71316e5741a36b739d4dfe52fa8bbef0f", "filename": "src/test/ui/async-await/await-keyword/2018-edition-error.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,54 +4,54 @@ error: expected identifier, found keyword `await`\n LL |     pub mod await {\n    |             ^^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `await` to use it as an identifier\n    |\n LL |     pub mod r#await {\n-   |             ~~~~~~~\n+   |             ++\n \n error: expected identifier, found keyword `await`\n   --> $DIR/2018-edition-error.rs:6:20\n    |\n LL |         pub struct await;\n    |                    ^^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `await` to use it as an identifier\n    |\n LL |         pub struct r#await;\n-   |                    ~~~~~~~\n+   |                    ++\n \n error: expected identifier, found keyword `await`\n   --> $DIR/2018-edition-error.rs:9:22\n    |\n LL | use self::outer_mod::await::await;\n    |                      ^^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `await` to use it as an identifier\n    |\n LL | use self::outer_mod::r#await::await;\n-   |                      ~~~~~~~\n+   |                      ++\n \n error: expected identifier, found keyword `await`\n   --> $DIR/2018-edition-error.rs:9:29\n    |\n LL | use self::outer_mod::await::await;\n    |                             ^^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `await` to use it as an identifier\n    |\n LL | use self::outer_mod::await::r#await;\n-   |                             ~~~~~~~\n+   |                             ++\n \n error: expected identifier, found keyword `await`\n   --> $DIR/2018-edition-error.rs:12:14\n    |\n LL | macro_rules! await { () => {}; }\n    |              ^^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `await` to use it as an identifier\n    |\n LL | macro_rules! r#await { () => {}; }\n-   |              ~~~~~~~\n+   |              ++\n \n error: expected expression, found `)`\n   --> $DIR/2018-edition-error.rs:15:12"}, {"sha": "23dad2c16b22c95fa286b29ac19c1b6508e48c7d", "filename": "src/test/ui/editions/edition-keywords-2015-2018-expansion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -5,10 +5,10 @@ LL |     produces_async! {}\n    |     ^^^^^^^^^^^^^^^^^^ expected identifier, found keyword\n    |\n    = note: this error originates in the macro `produces_async` (in Nightly builds, run with -Z macro-backtrace for more info)\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `async` to use it as an identifier\n    |\n LL |     () => (pub fn r#async() {})\n-   |                   ~~~~~~~\n+   |                   ++\n \n error: aborting due to previous error\n "}, {"sha": "e1eea725bb0b0cd25fc5b5e27f32b937328af3ec", "filename": "src/test/ui/editions/edition-keywords-2018-2015-parsing.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,21 +4,21 @@ error: expected identifier, found keyword `async`\n LL |     let mut async = 1;\n    |             ^^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `async` to use it as an identifier\n    |\n LL |     let mut r#async = 1;\n-   |             ~~~~~~~\n+   |             ++\n \n error: expected identifier, found keyword `async`\n   --> $DIR/edition-keywords-2018-2015-parsing.rs:26:13\n    |\n LL |     module::async();\n    |             ^^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `async` to use it as an identifier\n    |\n LL |     module::r#async();\n-   |             ~~~~~~~\n+   |             ++\n \n error: no rules expected the token `r#async`\n   --> $DIR/edition-keywords-2018-2015-parsing.rs:20:31"}, {"sha": "67f9aa6041399b4ecf2a4afc33ecc487f849a171", "filename": "src/test/ui/editions/edition-keywords-2018-2018-expansion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -5,10 +5,10 @@ LL |     produces_async! {}\n    |     ^^^^^^^^^^^^^^^^^^ expected identifier, found keyword\n    |\n    = note: this error originates in the macro `produces_async` (in Nightly builds, run with -Z macro-backtrace for more info)\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `async` to use it as an identifier\n    |\n LL |     () => (pub fn r#async() {})\n-   |                   ~~~~~~~\n+   |                   ++\n \n error: aborting due to previous error\n "}, {"sha": "0af4da09c19e3c2269d094805fa04dc38b908a71", "filename": "src/test/ui/editions/edition-keywords-2018-2018-parsing.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,21 +4,21 @@ error: expected identifier, found keyword `async`\n LL |     let mut async = 1;\n    |             ^^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `async` to use it as an identifier\n    |\n LL |     let mut r#async = 1;\n-   |             ~~~~~~~\n+   |             ++\n \n error: expected identifier, found keyword `async`\n   --> $DIR/edition-keywords-2018-2018-parsing.rs:26:13\n    |\n LL |     module::async();\n    |             ^^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `async` to use it as an identifier\n    |\n LL |     module::r#async();\n-   |             ~~~~~~~\n+   |             ++\n \n error: no rules expected the token `r#async`\n   --> $DIR/edition-keywords-2018-2018-parsing.rs:20:31"}, {"sha": "e484074cc9a557492ab1463d06daaf7c0cb1a89d", "filename": "src/test/ui/fmt/format-with-yield-point.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Ffmt%2Fformat-with-yield-point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Ffmt%2Fformat-with-yield-point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-with-yield-point.rs?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -0,0 +1,33 @@\n+// check-pass\n+// edition:2021\n+\n+macro_rules! m {\n+    () => {\n+        async {}.await\n+    };\n+}\n+\n+async fn with_await() {\n+    println!(\"{} {:?}\", \"\", async {}.await);\n+}\n+\n+async fn with_macro_call_expr() {\n+    println!(\"{} {:?}\", \"\", m!());\n+}\n+\n+async fn with_macro_call_stmt_semi() {\n+    println!(\"{} {:?}\", \"\", { m!(); });\n+}\n+\n+async fn with_macro_call_stmt_braced() {\n+    println!(\"{} {:?}\", \"\", { m!{} });\n+}\n+\n+fn assert_send(_: impl Send) {}\n+\n+fn main() {\n+    assert_send(with_await());\n+    assert_send(with_macro_call_expr());\n+    assert_send(with_macro_call_stmt_semi());\n+    assert_send(with_macro_call_stmt_braced());\n+}"}, {"sha": "9bf416341e8c356628ba8fb7ef62331062ee6399", "filename": "src/test/ui/keyword/extern/keyword-extern-as-identifier-pat.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-pat.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found keyword `extern`\n LL |     let extern = 0;\n    |         ^^^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `extern` to use it as an identifier\n    |\n LL |     let r#extern = 0;\n-   |         ~~~~~~~~\n+   |         ++\n \n error: aborting due to previous error\n "}, {"sha": "247d6b0ed71635129b3b7c8604abe5bcaec52954", "filename": "src/test/ui/keyword/extern/keyword-extern-as-identifier-use.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-use.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found keyword `extern`\n LL | use extern::foo;\n    |     ^^^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `extern` to use it as an identifier\n    |\n LL | use r#extern::foo;\n-   |     ~~~~~~~~\n+   |     ++\n \n error[E0432]: unresolved import `r#extern`\n   --> $DIR/keyword-extern-as-identifier-use.rs:1:5"}, {"sha": "30c05ecf30a9949768d28c80fe169410fd79836a", "filename": "src/test/ui/parser/bad-value-ident-false.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fbad-value-ident-false.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fbad-value-ident-false.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-value-ident-false.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found keyword `false`\n LL | fn false() { }\n    |    ^^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `false` to use it as an identifier\n    |\n LL | fn r#false() { }\n-   |    ~~~~~~~\n+   |    ++\n \n error: aborting due to previous error\n "}, {"sha": "74137fa7001acdab9a8469572539abf5ba459b75", "filename": "src/test/ui/parser/bad-value-ident-true.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fbad-value-ident-true.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fbad-value-ident-true.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-value-ident-true.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found keyword `true`\n LL | fn true() { }\n    |    ^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `true` to use it as an identifier\n    |\n LL | fn r#true() { }\n-   |    ~~~~~~\n+   |    ++\n \n error: aborting due to previous error\n "}, {"sha": "c59c811199ea8879460f9009be40499f65110802", "filename": "src/test/ui/parser/issues/issue-15980.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-15980.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-15980.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-15980.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -7,10 +7,10 @@ LL |\n LL |             return\n    |             ^^^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `return` to use it as an identifier\n    |\n LL |             r#return\n-   |\n+   |             ++\n \n error: expected one of `.`, `=>`, `?`, or an operator, found reserved identifier `_`\n   --> $DIR/issue-15980.rs:13:9"}, {"sha": "2f85d8cd8656bac5ba0c57e8bea44334640b7f4d", "filename": "src/test/ui/parser/issues/issue-44406.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-44406.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-44406.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-44406.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found keyword `true`\n LL |     foo!(true);\n    |          ^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `true` to use it as an identifier\n    |\n LL |     foo!(r#true);\n-   |          ~~~~~~\n+   |          ++\n \n error: invalid `struct` delimiters or `fn` call arguments\n   --> $DIR/issue-44406.rs:3:9"}, {"sha": "dd70b40224ceff239c1daef93682edd6089a262a", "filename": "src/test/ui/parser/issues/issue-57198.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-57198.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-57198.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-57198.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found keyword `for`\n LL |     m::for();\n    |        ^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `for` to use it as an identifier\n    |\n LL |     m::r#for();\n-   |        ~~~~~\n+   |        ++\n \n error: aborting due to previous error\n "}, {"sha": "40873388dfb8a01f206b706610c7d95bdd6987b6", "filename": "src/test/ui/parser/issues/issue-81806.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-81806.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-81806.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-81806.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -8,10 +8,10 @@ LL | impl\n LL | }\n    | - the item list ends here\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `impl` to use it as an identifier\n    |\n LL | r#impl\n-   | ~~~~~~\n+   | ++\n \n error: aborting due to previous error\n "}, {"sha": "b7d1ce7cd7c2b82d83bb85c03946f4041c1f5798", "filename": "src/test/ui/parser/keyword-abstract.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-abstract.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-abstract.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-abstract.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found reserved keyword `abstract`\n LL |     let abstract = ();\n    |         ^^^^^^^^ expected identifier, found reserved keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `abstract` to use it as an identifier\n    |\n LL |     let r#abstract = ();\n-   |         ~~~~~~~~~~\n+   |         ++\n \n error: aborting due to previous error\n "}, {"sha": "3c5ad950db87aed019e35b836318f5f049db2008", "filename": "src/test/ui/parser/keyword-as-as-identifier.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-as-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-as-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-as-as-identifier.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found keyword `as`\n LL |     let as = \"foo\";\n    |         ^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `as` to use it as an identifier\n    |\n LL |     let r#as = \"foo\";\n-   |         ~~~~\n+   |         ++\n \n error: aborting due to previous error\n "}, {"sha": "a4535eb40a158a0a53b181b65d7b243dfb67e830", "filename": "src/test/ui/parser/keyword-break-as-identifier.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-break-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-break-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-break-as-identifier.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found keyword `break`\n LL |     let break = \"foo\";\n    |         ^^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `break` to use it as an identifier\n    |\n LL |     let r#break = \"foo\";\n-   |         ~~~~~~~\n+   |         ++\n \n error: aborting due to previous error\n "}, {"sha": "31922f150e538aae45dfcbad88074dd01e61e9e4", "filename": "src/test/ui/parser/keyword-const-as-identifier.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-const-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-const-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-const-as-identifier.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found keyword `const`\n LL |     let const = \"foo\";\n    |         ^^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `const` to use it as an identifier\n    |\n LL |     let r#const = \"foo\";\n-   |         ~~~~~~~\n+   |         ++\n \n error: aborting due to previous error\n "}, {"sha": "81285633faa10a0e87f026b87bff6ce73d7b0e56", "filename": "src/test/ui/parser/keyword-continue-as-identifier.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-continue-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-continue-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-continue-as-identifier.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found keyword `continue`\n LL |     let continue = \"foo\";\n    |         ^^^^^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `continue` to use it as an identifier\n    |\n LL |     let r#continue = \"foo\";\n-   |         ~~~~~~~~~~\n+   |         ++\n \n error: aborting due to previous error\n "}, {"sha": "2125fe84aedd428137de6bfd5a1721445f2000f9", "filename": "src/test/ui/parser/keyword-else-as-identifier.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-else-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-else-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-else-as-identifier.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found keyword `else`\n LL |     let else = \"foo\";\n    |         ^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `else` to use it as an identifier\n    |\n LL |     let r#else = \"foo\";\n-   |         ~~~~~~\n+   |         ++\n \n error: aborting due to previous error\n "}, {"sha": "92d092ccb65b4c8781ef4c5fcbbaa7874e710649", "filename": "src/test/ui/parser/keyword-enum-as-identifier.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-enum-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-enum-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-enum-as-identifier.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found keyword `enum`\n LL |     let enum = \"foo\";\n    |         ^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `enum` to use it as an identifier\n    |\n LL |     let r#enum = \"foo\";\n-   |         ~~~~~~\n+   |         ++\n \n error: aborting due to previous error\n "}, {"sha": "f1f9f2e2c90e465e564711ce0103c43294087632", "filename": "src/test/ui/parser/keyword-final.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-final.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-final.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-final.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found reserved keyword `final`\n LL |     let final = ();\n    |         ^^^^^ expected identifier, found reserved keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `final` to use it as an identifier\n    |\n LL |     let r#final = ();\n-   |         ~~~~~~~\n+   |         ++\n \n error: aborting due to previous error\n "}, {"sha": "645efbcae71361111a6daefbb6c667d810d30d62", "filename": "src/test/ui/parser/keyword-fn-as-identifier.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-fn-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-fn-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-fn-as-identifier.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found keyword `fn`\n LL |     let fn = \"foo\";\n    |         ^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `fn` to use it as an identifier\n    |\n LL |     let r#fn = \"foo\";\n-   |         ~~~~\n+   |         ++\n \n error: aborting due to previous error\n "}, {"sha": "26407cc4d3ad2ff11e54fcf431eca7eefa2b8170", "filename": "src/test/ui/parser/keyword-for-as-identifier.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-for-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-for-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-for-as-identifier.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found keyword `for`\n LL |     let for = \"foo\";\n    |         ^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `for` to use it as an identifier\n    |\n LL |     let r#for = \"foo\";\n-   |         ~~~~~\n+   |         ++\n \n error: aborting due to previous error\n "}, {"sha": "26f9a15a7d00c9422f3e81ea287a89a90ada6310", "filename": "src/test/ui/parser/keyword-if-as-identifier.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-if-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-if-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-if-as-identifier.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found keyword `if`\n LL |     let if = \"foo\";\n    |         ^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `if` to use it as an identifier\n    |\n LL |     let r#if = \"foo\";\n-   |         ~~~~\n+   |         ++\n \n error: aborting due to previous error\n "}, {"sha": "73a50bc38bcf1ee4d2418823c07fbcc6f9d7a0d3", "filename": "src/test/ui/parser/keyword-impl-as-identifier.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-impl-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-impl-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-impl-as-identifier.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found keyword `impl`\n LL |     let impl = \"foo\";\n    |         ^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `impl` to use it as an identifier\n    |\n LL |     let r#impl = \"foo\";\n-   |         ~~~~~~\n+   |         ++\n \n error: aborting due to previous error\n "}, {"sha": "86faaed382f0310ae051de8f186220ea8e2c5076", "filename": "src/test/ui/parser/keyword-let-as-identifier.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-let-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-let-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-let-as-identifier.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found keyword `let`\n LL |     let let = \"foo\";\n    |         ^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `let` to use it as an identifier\n    |\n LL |     let r#let = \"foo\";\n-   |         ~~~~~\n+   |         ++\n \n error: aborting due to previous error\n "}, {"sha": "304ad61ccafc959c2487b79b96662d0f58f96fef", "filename": "src/test/ui/parser/keyword-loop-as-identifier.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-loop-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-loop-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-loop-as-identifier.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found keyword `loop`\n LL |     let loop = \"foo\";\n    |         ^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `loop` to use it as an identifier\n    |\n LL |     let r#loop = \"foo\";\n-   |         ~~~~~~\n+   |         ++\n \n error: aborting due to previous error\n "}, {"sha": "25ac397fb7e2e8f15fc3048aaa49ce66e32beb1b", "filename": "src/test/ui/parser/keyword-match-as-identifier.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-match-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-match-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-match-as-identifier.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found keyword `match`\n LL |     let match = \"foo\";\n    |         ^^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `match` to use it as an identifier\n    |\n LL |     let r#match = \"foo\";\n-   |         ~~~~~~~\n+   |         ++\n \n error: aborting due to previous error\n "}, {"sha": "d5688e871b2d7eb79a4fa6050040223bc7b1730e", "filename": "src/test/ui/parser/keyword-mod-as-identifier.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-mod-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-mod-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-mod-as-identifier.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found keyword `mod`\n LL |     let mod = \"foo\";\n    |         ^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `mod` to use it as an identifier\n    |\n LL |     let r#mod = \"foo\";\n-   |         ~~~~~\n+   |         ++\n \n error: aborting due to previous error\n "}, {"sha": "75653cffc13e7d0934afa41cc273b8c0b064ea70", "filename": "src/test/ui/parser/keyword-move-as-identifier.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-move-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-move-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-move-as-identifier.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found keyword `move`\n LL |     let move = \"foo\";\n    |         ^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `move` to use it as an identifier\n    |\n LL |     let r#move = \"foo\";\n-   |         ~~~~~~\n+   |         ++\n \n error: aborting due to previous error\n "}, {"sha": "cdb5736866d31887414febce71a7e6dc56643b8a", "filename": "src/test/ui/parser/keyword-override.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-override.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-override.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-override.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found reserved keyword `override`\n LL |     let override = ();\n    |         ^^^^^^^^ expected identifier, found reserved keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `override` to use it as an identifier\n    |\n LL |     let r#override = ();\n-   |         ~~~~~~~~~~\n+   |         ++\n \n error: aborting due to previous error\n "}, {"sha": "8d513507c810c4cc3cebde145174c64911b1cbb1", "filename": "src/test/ui/parser/keyword-pub-as-identifier.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-pub-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-pub-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-pub-as-identifier.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found keyword `pub`\n LL |     let pub = \"foo\";\n    |         ^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `pub` to use it as an identifier\n    |\n LL |     let r#pub = \"foo\";\n-   |         ~~~~~\n+   |         ++\n \n error: aborting due to previous error\n "}, {"sha": "eeb8e468ba6215b35f1569ee311e3023b078f16f", "filename": "src/test/ui/parser/keyword-return-as-identifier.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-return-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-return-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-return-as-identifier.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found keyword `return`\n LL |     let return = \"foo\";\n    |         ^^^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `return` to use it as an identifier\n    |\n LL |     let r#return = \"foo\";\n-   |         ~~~~~~~~\n+   |         ++\n \n error: aborting due to previous error\n "}, {"sha": "a3213e2f297402ea91f1a915561d6358d9174bfc", "filename": "src/test/ui/parser/keyword-static-as-identifier.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-static-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-static-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-static-as-identifier.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found keyword `static`\n LL |     let static = \"foo\";\n    |         ^^^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `static` to use it as an identifier\n    |\n LL |     let r#static = \"foo\";\n-   |         ~~~~~~~~\n+   |         ++\n \n error: aborting due to previous error\n "}, {"sha": "b73361a5585d4675b47ed60fafc48798ed6185ea", "filename": "src/test/ui/parser/keyword-struct-as-identifier.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-struct-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-struct-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-struct-as-identifier.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found keyword `struct`\n LL |     let struct = \"foo\";\n    |         ^^^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `struct` to use it as an identifier\n    |\n LL |     let r#struct = \"foo\";\n-   |         ~~~~~~~~\n+   |         ++\n \n error: aborting due to previous error\n "}, {"sha": "56ef5f60690d2d57cd2cbbd9758eac04e06f3d15", "filename": "src/test/ui/parser/keyword-trait-as-identifier.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-trait-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-trait-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-trait-as-identifier.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found keyword `trait`\n LL |     let trait = \"foo\";\n    |         ^^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `trait` to use it as an identifier\n    |\n LL |     let r#trait = \"foo\";\n-   |         ~~~~~~~\n+   |         ++\n \n error: aborting due to previous error\n "}, {"sha": "94a106d47d710c273824d7da5804359d63d32b8b", "filename": "src/test/ui/parser/keyword-try-as-identifier-edition2018.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-try-as-identifier-edition2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-try-as-identifier-edition2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-try-as-identifier-edition2018.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found reserved keyword `try`\n LL |     let try = \"foo\";\n    |         ^^^ expected identifier, found reserved keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `try` to use it as an identifier\n    |\n LL |     let r#try = \"foo\";\n-   |         ~~~~~\n+   |         ++\n \n error: aborting due to previous error\n "}, {"sha": "624c1006b12fc41676a273517bf159b3129cc429", "filename": "src/test/ui/parser/keyword-type-as-identifier.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-type-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-type-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-type-as-identifier.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found keyword `type`\n LL |     let type = \"foo\";\n    |         ^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `type` to use it as an identifier\n    |\n LL |     let r#type = \"foo\";\n-   |         ~~~~~~\n+   |         ++\n \n error: aborting due to previous error\n "}, {"sha": "4c5324505e96a080df1b1d81742909a081bc57e6", "filename": "src/test/ui/parser/keyword-typeof.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-typeof.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-typeof.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-typeof.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found reserved keyword `typeof`\n LL |     let typeof = ();\n    |         ^^^^^^ expected identifier, found reserved keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `typeof` to use it as an identifier\n    |\n LL |     let r#typeof = ();\n-   |         ~~~~~~~~\n+   |         ++\n \n error: aborting due to previous error\n "}, {"sha": "b552c9cd386594bce2e81793084d6539d14a7c4f", "filename": "src/test/ui/parser/keyword-unsafe-as-identifier.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-unsafe-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-unsafe-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-unsafe-as-identifier.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found keyword `unsafe`\n LL |     let unsafe = \"foo\";\n    |         ^^^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `unsafe` to use it as an identifier\n    |\n LL |     let r#unsafe = \"foo\";\n-   |         ~~~~~~~~\n+   |         ++\n \n error: aborting due to previous error\n "}, {"sha": "630798659a8a4f4e4d6f425bd568c616460ab910", "filename": "src/test/ui/parser/keyword-use-as-identifier.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-use-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-use-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-use-as-identifier.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found keyword `use`\n LL |     let use = \"foo\";\n    |         ^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `use` to use it as an identifier\n    |\n LL |     let r#use = \"foo\";\n-   |         ~~~~~\n+   |         ++\n \n error: aborting due to previous error\n "}, {"sha": "9e72f7940428c997607506c7e1d01be267f57b3d", "filename": "src/test/ui/parser/keyword-where-as-identifier.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-where-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-where-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-where-as-identifier.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found keyword `where`\n LL |     let where = \"foo\";\n    |         ^^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `where` to use it as an identifier\n    |\n LL |     let r#where = \"foo\";\n-   |         ~~~~~~~\n+   |         ++\n \n error: aborting due to previous error\n "}, {"sha": "2bb62105d170e774939a882e95d97d122e826ee4", "filename": "src/test/ui/parser/keyword-while-as-identifier.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-while-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword-while-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-while-as-identifier.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found keyword `while`\n LL |     let while = \"foo\";\n    |         ^^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `while` to use it as an identifier\n    |\n LL |     let r#while = \"foo\";\n-   |         ~~~~~~~\n+   |         ++\n \n error: aborting due to previous error\n "}, {"sha": "ee7d72b3996b778a85533ad4ec205025add86e5c", "filename": "src/test/ui/parser/keyword.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fkeyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found keyword `break`\n LL | pub mod break {\n    |         ^^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `break` to use it as an identifier\n    |\n LL | pub mod r#break {\n-   |         ~~~~~~~\n+   |         ++\n \n error: aborting due to previous error\n "}, {"sha": "d794671f8ab2fdc6d6074adae3c1ed5e55485155", "filename": "src/test/ui/parser/macro-keyword.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fmacro-keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fmacro-keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro-keyword.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found reserved keyword `macro`\n LL | fn macro() {\n    |    ^^^^^ expected identifier, found reserved keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `macro` to use it as an identifier\n    |\n LL | fn r#macro() {\n-   |    ~~~~~~~\n+   |    ++\n \n error: aborting due to previous error\n "}, {"sha": "f179d8c9e0a839d9e425390e5ede86ccbbaf9adc", "filename": "src/test/ui/parser/mut-patterns.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -56,32 +56,32 @@ error: expected identifier, found reserved keyword `yield`\n LL |     let mut mut yield(become, await) = r#yield(0, 0);\n    |                 ^^^^^ expected identifier, found reserved keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `yield` to use it as an identifier\n    |\n LL |     let mut mut r#yield(become, await) = r#yield(0, 0);\n-   |                 ~~~~~~~\n+   |                 ++\n \n error: expected identifier, found reserved keyword `become`\n   --> $DIR/mut-patterns.rs:28:23\n    |\n LL |     let mut mut yield(become, await) = r#yield(0, 0);\n    |                       ^^^^^^ expected identifier, found reserved keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `become` to use it as an identifier\n    |\n LL |     let mut mut yield(r#become, await) = r#yield(0, 0);\n-   |                       ~~~~~~~~\n+   |                       ++\n \n error: expected identifier, found keyword `await`\n   --> $DIR/mut-patterns.rs:28:31\n    |\n LL |     let mut mut yield(become, await) = r#yield(0, 0);\n    |                               ^^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `await` to use it as an identifier\n    |\n LL |     let mut mut yield(become, r#await) = r#yield(0, 0);\n-   |                               ~~~~~~~\n+   |                               ++\n \n error: `mut` must be attached to each individual binding\n   --> $DIR/mut-patterns.rs:28:9"}, {"sha": "0703b76d6de4a8f7308ca17c1fd08699cbd18dad", "filename": "src/test/ui/reserved/reserved-become.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Freserved%2Freserved-become.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Freserved%2Freserved-become.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freserved%2Freserved-become.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found reserved keyword `become`\n LL |     let become = 0;\n    |         ^^^^^^ expected identifier, found reserved keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `become` to use it as an identifier\n    |\n LL |     let r#become = 0;\n-   |         ~~~~~~~~\n+   |         ++\n \n error: aborting due to previous error\n "}, {"sha": "cf4d6c19cf0b598b0d71998ba688ef7db572f8be", "filename": "src/test/ui/rust-2018/dyn-trait-compatibility.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Frust-2018%2Fdyn-trait-compatibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Frust-2018%2Fdyn-trait-compatibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fdyn-trait-compatibility.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,10 +4,10 @@ error: expected identifier, found keyword `dyn`\n LL | type A1 = dyn::dyn;\n    |                ^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `dyn` to use it as an identifier\n    |\n LL | type A1 = dyn::r#dyn;\n-   |                ~~~~~\n+   |                ++\n \n error: expected identifier, found `<`\n   --> $DIR/dyn-trait-compatibility.rs:5:14"}, {"sha": "95c26b9ade8b981153752e6792974e2554a1be10", "filename": "src/test/ui/suggestions/raw-name-use-suggestion.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fsuggestions%2Fraw-name-use-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/415c9f95884caebd0be9b837ef0885d1ffde1b9b/src%2Ftest%2Fui%2Fsuggestions%2Fraw-name-use-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fraw-name-use-suggestion.stderr?ref=415c9f95884caebd0be9b837ef0885d1ffde1b9b", "patch": "@@ -4,21 +4,21 @@ error: expected identifier, found keyword `break`\n LL |     pub fn break() {}\n    |            ^^^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `break` to use it as an identifier\n    |\n LL |     pub fn r#break() {}\n-   |            ~~~~~~~\n+   |            ++\n \n error: expected identifier, found keyword `let`\n   --> $DIR/raw-name-use-suggestion.rs:7:10\n    |\n LL |     foo::let();\n    |          ^^^ expected identifier, found keyword\n    |\n-help: you can escape reserved keywords to use them as identifiers\n+help: escape `let` to use it as an identifier\n    |\n LL |     foo::r#let();\n-   |          ~~~~~\n+   |          ++\n \n error[E0425]: cannot find function `r#break` in this scope\n   --> $DIR/raw-name-use-suggestion.rs:8:5"}]}