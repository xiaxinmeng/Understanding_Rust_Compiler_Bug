{"sha": "121ae82be0c008e342bcae4e776f14671a2807b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyMWFlODJiZTBjMDA4ZTM0MmJjYWU0ZTc3NmYxNDY3MWEyODA3Yjc=", "commit": {"author": {"name": "Chris Morgan", "email": "me@chrismorgan.info", "date": "2013-07-09T15:33:30Z"}, "committer": {"name": "Chris Morgan", "email": "me@chrismorgan.info", "date": "2013-07-09T15:33:30Z"}, "message": "Do indentation properly in Vim.\n\nThe cases that this improves are clearly documented inside the\ncommitted file, so this commit message is comparatively brief.", "tree": {"sha": "d72f4c1a7ee5ae30e7f6ce784893f7b15b1c1b5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d72f4c1a7ee5ae30e7f6ce784893f7b15b1c1b5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/121ae82be0c008e342bcae4e776f14671a2807b7", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/121ae82be0c008e342bcae4e776f14671a2807b7", "html_url": "https://github.com/rust-lang/rust/commit/121ae82be0c008e342bcae4e776f14671a2807b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/121ae82be0c008e342bcae4e776f14671a2807b7/comments", "author": {"login": "chris-morgan", "id": 392868, "node_id": "MDQ6VXNlcjM5Mjg2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/392868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chris-morgan", "html_url": "https://github.com/chris-morgan", "followers_url": "https://api.github.com/users/chris-morgan/followers", "following_url": "https://api.github.com/users/chris-morgan/following{/other_user}", "gists_url": "https://api.github.com/users/chris-morgan/gists{/gist_id}", "starred_url": "https://api.github.com/users/chris-morgan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chris-morgan/subscriptions", "organizations_url": "https://api.github.com/users/chris-morgan/orgs", "repos_url": "https://api.github.com/users/chris-morgan/repos", "events_url": "https://api.github.com/users/chris-morgan/events{/privacy}", "received_events_url": "https://api.github.com/users/chris-morgan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chris-morgan", "id": 392868, "node_id": "MDQ6VXNlcjM5Mjg2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/392868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chris-morgan", "html_url": "https://github.com/chris-morgan", "followers_url": "https://api.github.com/users/chris-morgan/followers", "following_url": "https://api.github.com/users/chris-morgan/following{/other_user}", "gists_url": "https://api.github.com/users/chris-morgan/gists{/gist_id}", "starred_url": "https://api.github.com/users/chris-morgan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chris-morgan/subscriptions", "organizations_url": "https://api.github.com/users/chris-morgan/orgs", "repos_url": "https://api.github.com/users/chris-morgan/repos", "events_url": "https://api.github.com/users/chris-morgan/events{/privacy}", "received_events_url": "https://api.github.com/users/chris-morgan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf65870962ebf6b9b115a8f38ca7a9acc4bbfc49", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf65870962ebf6b9b115a8f38ca7a9acc4bbfc49", "html_url": "https://github.com/rust-lang/rust/commit/cf65870962ebf6b9b115a8f38ca7a9acc4bbfc49"}], "stats": {"total": 132, "additions": 129, "deletions": 3}, "files": [{"sha": "55fceb96af3fbaf7e91af471253aea88a5dd6754", "filename": "src/etc/vim/indent/rust.vim", "status": "modified", "additions": 129, "deletions": 3, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/121ae82be0c008e342bcae4e776f14671a2807b7/src%2Fetc%2Fvim%2Findent%2Frust.vim", "raw_url": "https://github.com/rust-lang/rust/raw/121ae82be0c008e342bcae4e776f14671a2807b7/src%2Fetc%2Fvim%2Findent%2Frust.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Findent%2Frust.vim?ref=121ae82be0c008e342bcae4e776f14671a2807b7", "patch": "@@ -1,11 +1,137 @@\n \" Vim indent file\n+\" Language:         Rust\n+\" Author:           Chris Morgan <me@chrismorgan.info>\n+\" Last Change:      2013 Jul 10\n \n+\" Only load this indent file when no other was loaded.\n if exists(\"b:did_indent\")\n-\tfinish\n+  finish\n endif\n-\n let b:did_indent = 1\n \n setlocal cindent\n setlocal cinoptions=L0,(0,Ws,JN\n-setlocal cinkeys=0{,0},!^F,o,O\n+setlocal cinkeys=0{,0},!^F,o,O,0[,0]\n+\" Don't think cinwords will actually do anything at all... never mind\n+setlocal cinwords=do,for,if,else,while,loop,impl,mod,unsafe,trait,struct,enum,fn,extern\n+\n+\" Some preliminary settings\n+setlocal nolisp\t\t\" Make sure lisp indenting doesn't supersede us\n+setlocal autoindent\t\" indentexpr isn't much help otherwise\n+\" Also do indentkeys, otherwise # gets shoved to column 0 :-/\n+setlocal indentkeys=0{,0},!^F,o,O,0[,0]\n+\n+setlocal indentexpr=GetRustIndent(v:lnum)\n+\n+\" Only define the function once.\n+if exists(\"*GetRustIndent\")\n+  finish\n+endif\n+\n+\" Come here when loading the script the first time.\n+\n+function s:get_line_trimmed(lnum)\n+\t\" Get the line and remove a trailing comment.\n+\t\" Use syntax highlighting attributes when possible.\n+\t\" NOTE: this is not accurate; /* */ or a line continuation could trick it\n+\tlet line = getline(a:lnum)\n+\tlet line_len = strlen(line)\n+\tif has('syntax_items')\n+\t\t\" If the last character in the line is a comment, do a binary search for\n+\t\t\" the start of the comment.  synID() is slow, a linear search would take\n+\t\t\" too long on a long line.\n+\t\tif synIDattr(synID(a:lnum, line_len, 1), \"name\") =~ \"Comment\\|Todo\"\n+\t\t\tlet min = 1\n+\t\t\tlet max = line_len\n+\t\t\twhile min < max\n+\t\t\t\tlet col = (min + max) / 2\n+\t\t\t\tif synIDattr(synID(a:lnum, col, 1), \"name\") =~ \"Comment\\|Todo\"\n+\t\t\t\t\tlet max = col\n+\t\t\t\telse\n+\t\t\t\t\tlet min = col + 1\n+\t\t\t\tendif\n+\t\t\tendwhile\n+\t\t\tlet line = strpart(line, 0, min - 1)\n+\t\tendif\n+\t\treturn substitute(line, \"\\s*$\", \"\", \"\")\n+\telse\n+\t\t\" Sorry, this is not complete, nor fully correct (e.g. string \"//\").\n+\t\t\" Such is life.\n+\t\treturn substitute(line, \"\\s*//.*$\", \"\", \"\")\n+\tendif\n+endfunction\n+\n+function GetRustIndent(lnum)\n+\n+\t\" Starting assumption: cindent (called at the end) will do it right\n+\t\" normally. We just want to fix up a few cases.\n+\n+\tif has('syntax_items')\n+\t\tif synIDattr(synID(a:lnum, 1, 1), \"name\") == \"rustString\"\n+\t\t\t\" If the start of the line is in a string, don't change the indent\n+\t\t\treturn -1\n+\t\telseif synIDattr(synID(a:lnum, 1, 1), \"name\") =~ \"\\\\(Comment\\\\|Todo\\\\)\"\n+\t\t\t\t\t\\ && getline(a:lnum) !~ \"^\\\\s*/\\\\*\"\n+\t\t\t\" If it's in a comment, let cindent take care of it now. This is\n+\t\t\t\" for cases like \"/*\" where the next line should start \" * \", not\n+\t\t\t\" \"* \" as the code below would otherwise cause for module scope\n+\t\t\t\" Fun fact: \"  /*\\n*\\n*/\" takes two calls to get right!\n+\t\t\treturn cindent(a:lnum)\n+\t\tendif\n+\tendif\n+\n+\t\" cindent gets second and subsequent match patterns/struct members wrong,\n+\t\" as it treats the comma as indicating an unfinished statement::\n+\t\"\n+\t\" match a {\n+\t\"     b => c,\n+\t\"         d => e,\n+\t\"         f => g,\n+\t\" };\n+\n+\t\" Search backwards for the previous non-empty line.\n+\tlet prevline = s:get_line_trimmed(prevnonblank(a:lnum - 1))\n+\tif prevline[len(prevline) - 1] == \",\"\n+\t\t\t\t\\ && s:get_line_trimmed(a:lnum) !~ \"^\\\\s*[\\\\[\\\\]{}]\"\n+\t\t\" Oh ho! The previous line ended in a comma! I bet cindent will try to\n+\t\t\" take this too far... For now, let's use the previous line's indent\n+\t\treturn GetRustIndent(a:lnum - 1)\n+\tendif\n+\n+\t\" cindent doesn't do the module scope well at all; e.g.::\n+\t\"\n+\t\" static FOO : &'static [bool] = [\n+\t\" true,\n+\t\"     false,\n+\t\"     false,\n+\t\"     true,\n+\t\"     ];\n+\t\"\n+\t\"     uh oh, next statement is indented further!\n+\n+\t\" Note that this does *not* apply the line continuation pattern properly;\n+\t\" that's too hard to do correctly for my liking at present, so I'll just\n+\t\" start with these two main cases (square brackets and not returning to\n+\t\" column zero)\n+\n+\tlet line = getline(a:lnum)\n+\tcall cursor(a:lnum, 1)\n+\tif searchpair('{\\|(', '', '}\\|)', 'nbW') == 0\n+\t\tif searchpair('\\[', '', '\\]', 'nbW') == 0\n+\t\t\t\" Global scope, should be zero\n+\t\t\treturn 0\n+\t\telse\n+\t\t\t\" At the module scope, inside square brackets only\n+\t\t\t\"if getline(a:lnum)[0] == ']' || search('\\[', '', '\\]', 'nW') == a:lnum\n+\t\t\tif line =~ \"^\\\\s*]\"\n+\t\t\t\t\" It's the closing line, dedent it\n+\t\t\t\treturn 0\n+\t\t\telse\n+\t\t\t\treturn &shiftwidth\n+\t\t\tendif\n+\t\tendif\n+\tendif\n+\n+\t\" Fall back on cindent, which does it mostly right\n+\treturn cindent(a:lnum)\n+endfunction"}]}