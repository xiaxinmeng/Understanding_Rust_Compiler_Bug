{"sha": "deed093a38243ced1f52927ebf7511c099a3bf36", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZWQwOTNhMzgyNDNjZWQxZjUyOTI3ZWJmNzUxMWMwOTlhM2JmMzY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-02T02:53:47Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-02T02:58:14Z"}, "message": "std: Deprecate RefCell::{try_borrow, try_borrow_mut}\n\nThe existence of these two functions is at odds with our current [error\nconventions][conventions] which recommend that panicking and `Result`-like\nvariants should not be provided together.\n\n[conventions]: https://github.com/rust-lang/rfcs/blob/master/text/0236-error-conventions.md#do-not-provide-both-result-and-fail-variants\n\nThis commit adds a new `borrow_state` function returning a `BorrowState` enum to\n`RefCell` which serves as a replacemnt for the `try_borrow` and `try_borrow_mut`\nfunctions.", "tree": {"sha": "0e094bb05ec36036c344b0cb1135b165b2037166", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e094bb05ec36036c344b0cb1135b165b2037166"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/deed093a38243ced1f52927ebf7511c099a3bf36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/deed093a38243ced1f52927ebf7511c099a3bf36", "html_url": "https://github.com/rust-lang/rust/commit/deed093a38243ced1f52927ebf7511c099a3bf36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/deed093a38243ced1f52927ebf7511c099a3bf36/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca4b9674c26c1de07a2042cb68e6a062d7184cef", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca4b9674c26c1de07a2042cb68e6a062d7184cef", "html_url": "https://github.com/rust-lang/rust/commit/ca4b9674c26c1de07a2042cb68e6a062d7184cef"}], "stats": {"total": 69, "additions": 55, "deletions": 14}, "files": [{"sha": "15e745b0e713e41c437201a45e29d76d7535b2bb", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 45, "deletions": 10, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/deed093a38243ced1f52927ebf7511c099a3bf36/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deed093a38243ced1f52927ebf7511c099a3bf36/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=deed093a38243ced1f52927ebf7511c099a3bf36", "patch": "@@ -266,6 +266,18 @@ pub struct RefCell<T> {\n     borrow: Cell<BorrowFlag>,\n }\n \n+/// An enumeration of values returned from the `state` method on a `RefCell<T>`.\n+#[derive(Copy, Clone, PartialEq)]\n+#[unstable(feature = \"std_misc\")]\n+pub enum BorrowState {\n+    /// The cell is currently being read, there is at least one active `borrow`.\n+    Reading,\n+    /// The cell is currently being written to, there is an active `borrow_mut`.\n+    Writing,\n+    /// There are no outstanding borrows on this cell.\n+    Unused,\n+}\n+\n // Values [1, MAX-1] represent the number of `Ref` active\n // (will not outgrow its range since `uint` is the size of the address space)\n type BorrowFlag = uint;\n@@ -310,13 +322,28 @@ impl<T> RefCell<T> {\n         unsafe { self.value.into_inner() }\n     }\n \n+    /// Query the current state of this `RefCell`\n+    ///\n+    /// The returned value can be dispatched on to determine if a call to\n+    /// `borrow` or `borrow_mut` would succeed.\n+    #[unstable(feature = \"std_misc\")]\n+    pub fn borrow_state(&self) -> BorrowState {\n+        match self.borrow.get() {\n+            WRITING => BorrowState::Writing,\n+            UNUSED => BorrowState::Unused,\n+            _ => BorrowState::Reading,\n+        }\n+    }\n+\n     /// Attempts to immutably borrow the wrapped value.\n     ///\n     /// The borrow lasts until the returned `Ref` exits scope. Multiple\n     /// immutable borrows can be taken out at the same time.\n     ///\n     /// Returns `None` if the value is currently mutably borrowed.\n     #[unstable(feature = \"core\", reason = \"may be renamed or removed\")]\n+    #[deprecated(since = \"1.0.0\",\n+                 reason = \"dispatch on `cell.borrow_state()` instead\")]\n     pub fn try_borrow<'a>(&'a self) -> Option<Ref<'a, T>> {\n         match BorrowRef::new(&self.borrow) {\n             Some(b) => Some(Ref { _value: unsafe { &*self.value.get() }, _borrow: b }),\n@@ -326,8 +353,8 @@ impl<T> RefCell<T> {\n \n     /// Immutably borrows the wrapped value.\n     ///\n-    /// The borrow lasts until the returned `Ref` exits scope. Multiple immutable borrows can be\n-    /// taken out at the same time.\n+    /// The borrow lasts until the returned `Ref` exits scope. Multiple\n+    /// immutable borrows can be taken out at the same time.\n     ///\n     /// # Panics\n     ///\n@@ -361,9 +388,12 @@ impl<T> RefCell<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn borrow<'a>(&'a self) -> Ref<'a, T> {\n-        match self.try_borrow() {\n-            Some(ptr) => ptr,\n-            None => panic!(\"RefCell<T> already mutably borrowed\")\n+        match BorrowRef::new(&self.borrow) {\n+            Some(b) => Ref {\n+                _value: unsafe { &*self.value.get() },\n+                _borrow: b,\n+            },\n+            None => panic!(\"RefCell<T> already mutably borrowed\"),\n         }\n     }\n \n@@ -374,6 +404,8 @@ impl<T> RefCell<T> {\n     ///\n     /// Returns `None` if the value is currently borrowed.\n     #[unstable(feature = \"core\", reason = \"may be renamed or removed\")]\n+    #[deprecated(since = \"1.0.0\",\n+                 reason = \"dispatch on `cell.borrow_state()` instead\")]\n     pub fn try_borrow_mut<'a>(&'a self) -> Option<RefMut<'a, T>> {\n         match BorrowRefMut::new(&self.borrow) {\n             Some(b) => Some(RefMut { _value: unsafe { &mut *self.value.get() }, _borrow: b }),\n@@ -383,8 +415,8 @@ impl<T> RefCell<T> {\n \n     /// Mutably borrows the wrapped value.\n     ///\n-    /// The borrow lasts until the returned `RefMut` exits scope. The value cannot be borrowed\n-    /// while this borrow is active.\n+    /// The borrow lasts until the returned `RefMut` exits scope. The value\n+    /// cannot be borrowed while this borrow is active.\n     ///\n     /// # Panics\n     ///\n@@ -417,9 +449,12 @@ impl<T> RefCell<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn borrow_mut<'a>(&'a self) -> RefMut<'a, T> {\n-        match self.try_borrow_mut() {\n-            Some(ptr) => ptr,\n-            None => panic!(\"RefCell<T> already borrowed\")\n+        match BorrowRefMut::new(&self.borrow) {\n+            Some(b) => RefMut {\n+                _value: unsafe { &mut *self.value.get() },\n+                _borrow: b,\n+            },\n+            None => panic!(\"RefCell<T> already borrowed\"),\n         }\n     }\n "}, {"sha": "a82246ccb33ee36527e81d1e946371e942cb08f2", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/deed093a38243ced1f52927ebf7511c099a3bf36/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deed093a38243ced1f52927ebf7511c099a3bf36/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=deed093a38243ced1f52927ebf7511c099a3bf36", "patch": "@@ -13,7 +13,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use any;\n-use cell::{Cell, RefCell, Ref, RefMut};\n+use cell::{Cell, RefCell, Ref, RefMut, BorrowState};\n use char::CharExt;\n use iter::{Iterator, IteratorExt};\n use marker::{Copy, Sized};\n@@ -973,9 +973,11 @@ impl<T: Copy + Debug> Debug for Cell<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Debug> Debug for RefCell<T> {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n-        match self.try_borrow() {\n-            Some(val) => write!(f, \"RefCell {{ value: {:?} }}\", val),\n-            None => write!(f, \"RefCell {{ <borrowed> }}\")\n+        match self.borrow_state() {\n+            BorrowState::Unused | BorrowState::Reading => {\n+                write!(f, \"RefCell {{ value: {:?} }}\", self.borrow())\n+            }\n+            BorrowState::Writing => write!(f, \"RefCell {{ <borrowed> }}\"),\n         }\n     }\n }"}, {"sha": "8939bd61fe4ae0cc6e7ca10822d3c613972f70f7", "filename": "src/libcoretest/cell.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/deed093a38243ced1f52927ebf7511c099a3bf36/src%2Flibcoretest%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deed093a38243ced1f52927ebf7511c099a3bf36/src%2Flibcoretest%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fcell.rs?ref=deed093a38243ced1f52927ebf7511c099a3bf36", "patch": "@@ -60,20 +60,24 @@ fn no_mut_then_imm_borrow() {\n     let x = RefCell::new(0);\n     let _b1 = x.borrow_mut();\n     assert!(x.try_borrow().is_none());\n+    assert_eq!(x.borrow_state(), BorrowState::Writing);\n }\n \n #[test]\n fn no_imm_then_borrow_mut() {\n     let x = RefCell::new(0);\n     let _b1 = x.borrow();\n     assert!(x.try_borrow_mut().is_none());\n+    assert_eq!(x.borrow_state(), BorrowState::Reading);\n }\n \n #[test]\n fn no_double_borrow_mut() {\n     let x = RefCell::new(0);\n+    assert_eq!(x.borrow_state(), BorrowState::Unused);\n     let _b1 = x.borrow_mut();\n     assert!(x.try_borrow_mut().is_none());\n+    assert_eq!(x.borrow_state(), BorrowState::Writing);\n }\n \n #[test]"}]}