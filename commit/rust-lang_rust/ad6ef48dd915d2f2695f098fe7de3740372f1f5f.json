{"sha": "ad6ef48dd915d2f2695f098fe7de3740372f1f5f", "node_id": "C_kwDOAAsO6NoAKGFkNmVmNDhkZDkxNWQyZjI2OTVmMDk4ZmU3ZGUzNzQwMzcyZjFmNWY", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-12-21T09:39:00Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-12-21T09:39:00Z"}, "message": "Use panic() instead of panic!() in some places in core.", "tree": {"sha": "b993022a0583d197babfe828ad0fa61d8c5939b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b993022a0583d197babfe828ad0fa61d8c5939b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad6ef48dd915d2f2695f098fe7de3740372f1f5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad6ef48dd915d2f2695f098fe7de3740372f1f5f", "html_url": "https://github.com/rust-lang/rust/commit/ad6ef48dd915d2f2695f098fe7de3740372f1f5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad6ef48dd915d2f2695f098fe7de3740372f1f5f/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87e8639d8dd900ebdd79e9f0491ca4ae40944f02", "url": "https://api.github.com/repos/rust-lang/rust/commits/87e8639d8dd900ebdd79e9f0491ca4ae40944f02", "html_url": "https://github.com/rust-lang/rust/commit/87e8639d8dd900ebdd79e9f0491ca4ae40944f02"}], "stats": {"total": 44, "additions": 25, "deletions": 19}, "files": [{"sha": "32a5fd9c4811a7f092ae56644d70f1d6dda453dd", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad6ef48dd915d2f2695f098fe7de3740372f1f5f/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad6ef48dd915d2f2695f098fe7de3740372f1f5f/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=ad6ef48dd915d2f2695f098fe7de3740372f1f5f", "patch": "@@ -141,6 +141,7 @@\n #![feature(const_type_id)]\n #![feature(const_type_name)]\n #![feature(const_default_impls)]\n+#![feature(core_panic)]\n #![feature(duration_consts_float)]\n #![feature(maybe_uninit_uninit_array)]\n #![feature(ptr_metadata)]"}, {"sha": "af6718df6536f0c771b5d2be60cd2a5bc65e277a", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ad6ef48dd915d2f2695f098fe7de3740372f1f5f/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad6ef48dd915d2f2695f098fe7de3740372f1f5f/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=ad6ef48dd915d2f2695f098fe7de3740372f1f5f", "patch": "@@ -589,9 +589,10 @@ macro_rules! writeln {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow_internal_unstable(core_panic)]\n macro_rules! unreachable {\n     () => ({\n-        $crate::panic!(\"internal error: entered unreachable code\")\n+        $crate::panicking::panic(\"internal error: entered unreachable code\")\n     });\n     ($msg:expr $(,)?) => ({\n         $crate::unreachable!(\"{}\", $msg)\n@@ -674,8 +675,9 @@ macro_rules! unreachable {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow_internal_unstable(core_panic)]\n macro_rules! unimplemented {\n-    () => ($crate::panic!(\"not implemented\"));\n+    () => ($crate::panicking::panic(\"not implemented\"));\n     ($($arg:tt)+) => ($crate::panic!(\"not implemented: {}\", $crate::format_args!($($arg)+)));\n }\n \n@@ -735,8 +737,9 @@ macro_rules! unimplemented {\n /// ```\n #[macro_export]\n #[stable(feature = \"todo_macro\", since = \"1.40.0\")]\n+#[allow_internal_unstable(core_panic)]\n macro_rules! todo {\n-    () => ($crate::panic!(\"not yet implemented\"));\n+    () => ($crate::panicking::panic(\"not yet implemented\"));\n     ($($arg:tt)+) => ($crate::panic!(\"not yet implemented: {}\", $crate::format_args!($($arg)+)));\n }\n "}, {"sha": "e6312b8b2d9479ca257f12f94173a78a91bf2833", "filename": "library/core/src/option.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad6ef48dd915d2f2695f098fe7de3740372f1f5f/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad6ef48dd915d2f2695f098fe7de3740372f1f5f/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=ad6ef48dd915d2f2695f098fe7de3740372f1f5f", "patch": "@@ -501,6 +501,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::iter::{FromIterator, FusedIterator, TrustedLen};\n+use crate::panicking::{panic, panic_str};\n use crate::pin::Pin;\n use crate::{\n     convert, hint, mem,\n@@ -755,7 +756,7 @@ impl<T> Option<T> {\n     pub const fn unwrap(self) -> T {\n         match self {\n             Some(val) => val,\n-            None => panic!(\"called `Option::unwrap()` on a `None` value\"),\n+            None => panic(\"called `Option::unwrap()` on a `None` value\"),\n         }\n     }\n \n@@ -1815,8 +1816,9 @@ impl<T, E> Option<Result<T, E>> {\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[cold]\n #[track_caller]\n+#[rustc_const_unstable(feature = \"const_option\", issue = \"67441\")]\n const fn expect_failed(msg: &str) -> ! {\n-    panic!(\"{}\", msg)\n+    panic_str(msg)\n }\n \n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "57485993dced0a70b71326946cb984e2b924c998", "filename": "src/test/mir-opt/issue_76432.test.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad6ef48dd915d2f2695f098fe7de3740372f1f5f/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ad6ef48dd915d2f2695f098fe7de3740372f1f5f/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff?ref=ad6ef48dd915d2f2695f098fe7de3740372f1f5f", "patch": "@@ -21,7 +21,7 @@\n       let mut _19: *const T;               // in scope 0 at $DIR/issue_76432.rs:9:54: 9:68\n       let mut _20: *const T;               // in scope 0 at $DIR/issue_76432.rs:9:70: 9:84\n       let mut _21: *const T;               // in scope 0 at $DIR/issue_76432.rs:9:70: 9:84\n-      let mut _22: !;                      // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n+      let mut _22: !;                      // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _23: &[T; 3];                // in scope 0 at $DIR/issue_76432.rs:7:19: 7:29\n       scope 1 {\n           debug v => _2;                   // in scope 1 at $DIR/issue_76432.rs:7:9: 7:10\n@@ -66,10 +66,10 @@\n       }\n   \n       bb1: {\n-          StorageLive(_22);                // scope 1 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          core::panicking::panic(const \"internal error: entered unreachable code\"); // scope 1 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageLive(_22);                // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          core::panicking::panic(const \"internal error: entered unreachable code\"); // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n+                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(Scalar(<ZST>)) }\n                                            // ty::Const\n                                            // + ty: &str"}, {"sha": "8da697fe7ef3bcbf4c71ad78ff50b0a96ebf32a4", "filename": "src/test/ui/consts/const-eval/const_panic.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad6ef48dd915d2f2695f098fe7de3740372f1f5f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad6ef48dd915d2f2695f098fe7de3740372f1f5f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr?ref=ad6ef48dd915d2f2695f098fe7de3740372f1f5f", "patch": "@@ -20,15 +20,15 @@ error[E0080]: evaluation of constant value failed\n LL | const Y: () = std::unreachable!();\n    |               ^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:12:15\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `std::unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:15:15\n    |\n LL | const X: () = std::unimplemented!();\n    |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:15:15\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `std::unimplemented` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:18:15\n@@ -68,15 +68,15 @@ error[E0080]: evaluation of constant value failed\n LL | const Y_CORE: () = core::unreachable!();\n    |                    ^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:30:20\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `core::unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:33:20\n    |\n LL | const X_CORE: () = core::unimplemented!();\n    |                    ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:33:20\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `core::unimplemented` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:36:20"}, {"sha": "62fe1715fecb5c9eae7e5c206a270e43020ecad7", "filename": "src/test/ui/consts/const-eval/const_panic_2021.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad6ef48dd915d2f2695f098fe7de3740372f1f5f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad6ef48dd915d2f2695f098fe7de3740372f1f5f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.stderr?ref=ad6ef48dd915d2f2695f098fe7de3740372f1f5f", "patch": "@@ -20,15 +20,15 @@ error[E0080]: evaluation of constant value failed\n LL | const C: () = std::unreachable!();\n    |               ^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_2021.rs:12:15\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `std::unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_2021.rs:15:15\n    |\n LL | const D: () = std::unimplemented!();\n    |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic_2021.rs:15:15\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `std::unimplemented` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_2021.rs:18:15\n@@ -60,15 +60,15 @@ error[E0080]: evaluation of constant value failed\n LL | const C_CORE: () = core::unreachable!();\n    |                    ^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_2021.rs:27:20\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `core::unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_2021.rs:30:20\n    |\n LL | const D_CORE: () = core::unimplemented!();\n    |                    ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic_2021.rs:30:20\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `core::unimplemented` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_2021.rs:33:20"}, {"sha": "52c0c13636687c47b875d7f15ae05dc5bee5dca6", "filename": "src/test/ui/consts/const-eval/const_panic_libcore_bin.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad6ef48dd915d2f2695f098fe7de3740372f1f5f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad6ef48dd915d2f2695f098fe7de3740372f1f5f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr?ref=ad6ef48dd915d2f2695f098fe7de3740372f1f5f", "patch": "@@ -12,15 +12,15 @@ error[E0080]: evaluation of constant value failed\n LL | const Y: () = unreachable!();\n    |               ^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore_bin.rs:11:15\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_libcore_bin.rs:14:15\n    |\n LL | const X: () = unimplemented!();\n    |               ^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic_libcore_bin.rs:14:15\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `unimplemented` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}]}