{"sha": "714ad639b39f7a35422b3fc342eb843013cc89ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxNGFkNjM5YjM5ZjdhMzU0MjJiM2ZjMzQyZWI4NDMwMTNjYzg5YmE=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-02-13T20:42:04Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-02-15T23:22:56Z"}, "message": "Fix MulAssign typo in tests, move panic tests", "tree": {"sha": "e0d0aebbc9d8c41158bc33ba9bbbbd2285df0cac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0d0aebbc9d8c41158bc33ba9bbbbd2285df0cac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/714ad639b39f7a35422b3fc342eb843013cc89ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/714ad639b39f7a35422b3fc342eb843013cc89ba", "html_url": "https://github.com/rust-lang/rust/commit/714ad639b39f7a35422b3fc342eb843013cc89ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/714ad639b39f7a35422b3fc342eb843013cc89ba/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd", "html_url": "https://github.com/rust-lang/rust/commit/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd"}], "stats": {"total": 721, "additions": 129, "deletions": 592}, "files": [{"sha": "ac5499b7ffeb5661d0c62409a0e177024fbd3bbd", "filename": "crates/core_simd/tests/f32_ops.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Ff32_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Ff32_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Ff32_ops.rs?ref=714ad639b39f7a35422b3fc342eb843013cc89ba", "patch": "@@ -1,4 +1,3 @@\n #[macro_use]\n-#[path = \"ops_macros.rs\"]\n-mod macros;\n+mod ops_macros;\n impl_float_tests! { SimdF32, f32, i32 }"}, {"sha": "dcdb2aa31522deeb8df8c0950d00b56954cf47f8", "filename": "crates/core_simd/tests/f64_ops.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Ff64_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Ff64_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Ff64_ops.rs?ref=714ad639b39f7a35422b3fc342eb843013cc89ba", "patch": "@@ -1,4 +1,3 @@\n #[macro_use]\n-#[path = \"ops_macros.rs\"]\n-mod macros;\n+mod ops_macros;\n impl_float_tests! { SimdF64, f64, i64 }"}, {"sha": "3e3fa1d20682babba77f9798e009e80d6e1ebf40", "filename": "crates/core_simd/tests/i128_ops.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fi128_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fi128_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fi128_ops.rs?ref=714ad639b39f7a35422b3fc342eb843013cc89ba", "patch": "@@ -1,4 +1,3 @@\n #[macro_use]\n-#[path = \"ops_macros.rs\"]\n-mod macros;\n+mod ops_macros;\n impl_signed_tests! { SimdI128, i128 }"}, {"sha": "4d2a7b053b5c5c5a9f80c58028529054c950205e", "filename": "crates/core_simd/tests/i16_ops.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fi16_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fi16_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fi16_ops.rs?ref=714ad639b39f7a35422b3fc342eb843013cc89ba", "patch": "@@ -1,4 +1,3 @@\n #[macro_use]\n-#[path = \"ops_macros.rs\"]\n-mod macros;\n+mod ops_macros;\n impl_signed_tests! { SimdI16, i16 }"}, {"sha": "90079d727e4bd106433d554d170d070afc2d6922", "filename": "crates/core_simd/tests/i32_ops.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fi32_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fi32_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fi32_ops.rs?ref=714ad639b39f7a35422b3fc342eb843013cc89ba", "patch": "@@ -1,4 +1,3 @@\n #[macro_use]\n-#[path = \"ops_macros.rs\"]\n-mod macros;\n+mod ops_macros;\n impl_signed_tests! { SimdI32, i32 }"}, {"sha": "ebc3e194974b331ea7f196acdaa97b5df32aefd3", "filename": "crates/core_simd/tests/i64_ops.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fi64_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fi64_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fi64_ops.rs?ref=714ad639b39f7a35422b3fc342eb843013cc89ba", "patch": "@@ -1,4 +1,3 @@\n #[macro_use]\n-#[path = \"ops_macros.rs\"]\n-mod macros;\n+mod ops_macros;\n impl_signed_tests! { SimdI64, i64 }"}, {"sha": "082422b86d2900803fb6cb8cd76f474c90cddf5f", "filename": "crates/core_simd/tests/i8_ops.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fi8_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fi8_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fi8_ops.rs?ref=714ad639b39f7a35422b3fc342eb843013cc89ba", "patch": "@@ -1,4 +1,3 @@\n #[macro_use]\n-#[path = \"ops_macros.rs\"]\n-mod macros;\n+mod ops_macros;\n impl_signed_tests! { SimdI8, i8 }"}, {"sha": "1509d701c29a337eec8b62ba27a2b7473b962c81", "filename": "crates/core_simd/tests/isize_ops.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fisize_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fisize_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fisize_ops.rs?ref=714ad639b39f7a35422b3fc342eb843013cc89ba", "patch": "@@ -1,4 +1,3 @@\n #[macro_use]\n-#[path = \"ops_macros.rs\"]\n-mod macros;\n+mod ops_macros;\n impl_signed_tests! { SimdIsize, isize }"}, {"sha": "96330550b40b268e35c9ed7cea2287cace0537fe", "filename": "crates/core_simd/tests/mask_ops.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fmask_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fmask_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fmask_ops.rs?ref=714ad639b39f7a35422b3fc342eb843013cc89ba", "patch": "@@ -0,0 +1 @@\n+mod mask_ops_impl;"}, {"sha": "27ba4e2d29fe683b1cc3db9cfb03efe52c3446be", "filename": "crates/core_simd/tests/mask_ops_impl/mask128.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmask128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmask128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmask128.rs?ref=714ad639b39f7a35422b3fc342eb843013cc89ba", "previous_filename": "crates/core_simd/tests/ops_impl/mask128.rs"}, {"sha": "0fe82fa680479a457a7e37852a2d5f0fed94e7bc", "filename": "crates/core_simd/tests/mask_ops_impl/mask16.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmask16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmask16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmask16.rs?ref=714ad639b39f7a35422b3fc342eb843013cc89ba", "previous_filename": "crates/core_simd/tests/ops_impl/mask16.rs"}, {"sha": "66d987a43ce83c295a96e014c3fce7e839ee435a", "filename": "crates/core_simd/tests/mask_ops_impl/mask32.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmask32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmask32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmask32.rs?ref=714ad639b39f7a35422b3fc342eb843013cc89ba", "previous_filename": "crates/core_simd/tests/ops_impl/mask32.rs"}, {"sha": "a1f1f67b23887641de455b53796d1e323e038c8b", "filename": "crates/core_simd/tests/mask_ops_impl/mask64.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmask64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmask64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmask64.rs?ref=714ad639b39f7a35422b3fc342eb843013cc89ba", "previous_filename": "crates/core_simd/tests/ops_impl/mask64.rs"}, {"sha": "218fa9fe895e5a9706790ab25f94290a744c82b6", "filename": "crates/core_simd/tests/mask_ops_impl/mask8.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmask8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmask8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmask8.rs?ref=714ad639b39f7a35422b3fc342eb843013cc89ba", "previous_filename": "crates/core_simd/tests/ops_impl/mask8.rs"}, {"sha": "795f9e27c4458fa1dcefeb5e23ece1f66d4d859e", "filename": "crates/core_simd/tests/mask_ops_impl/mask_macros.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmask_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmask_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmask_macros.rs?ref=714ad639b39f7a35422b3fc342eb843013cc89ba", "previous_filename": "crates/core_simd/tests/ops_impl/mask_macros.rs"}, {"sha": "e0a44d870ca56b9bdd2e73085e6f9e59e3ac14c1", "filename": "crates/core_simd/tests/mask_ops_impl/masksize.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmasksize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmasksize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmasksize.rs?ref=714ad639b39f7a35422b3fc342eb843013cc89ba", "previous_filename": "crates/core_simd/tests/ops_impl/masksize.rs"}, {"sha": "89f5e1b0b52a846ec9c32c897c069c36aa690141", "filename": "crates/core_simd/tests/mask_ops_impl/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmod.rs?ref=714ad639b39f7a35422b3fc342eb843013cc89ba", "previous_filename": "crates/core_simd/tests/ops_impl/mod.rs"}, {"sha": "60aff06a76a65739f4848501754f543c8062672f", "filename": "crates/core_simd/tests/ops.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops.rs?ref=0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd", "patch": "@@ -1 +0,0 @@\n-mod ops_impl;"}, {"sha": "f565ae2f04df531d2433fa6e9b60eb8e5cf9385f", "filename": "crates/core_simd/tests/ops_impl/int_macros.rs", "status": "removed", "additions": 0, "deletions": 101, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fint_macros.rs?ref=0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd", "patch": "@@ -1,101 +0,0 @@\n-macro_rules! int_tests {\n-    { $vector:ident, $scalar:ident } => {\n-        #[cfg(test)]\n-        mod $vector {\n-            use super::*;\n-            use helpers::lanewise::*;\n-\n-            #[cfg(target_arch = \"wasm32\")]\n-            use wasm_bindgen_test::*;\n-\n-            #[cfg(target_arch = \"wasm32\")]\n-            wasm_bindgen_test_configure!(run_in_browser);\n-\n-            // TODO impl this as an associated fn on vectors\n-            fn from_slice(slice: &[$scalar]) -> core_simd::$vector {\n-                let mut value = core_simd::$vector::default();\n-                let value_slice: &mut [_] = value.as_mut();\n-                value_slice.copy_from_slice(&slice[0..value_slice.len()]);\n-                value\n-            }\n-\n-            const A: [$scalar; 64] = [\n-                7, 7, 7, 7, -7, -7, -7, -7,\n-                6, 6, 6, 6, -6, -6, -6, -6,\n-                5, 5, 5, 5, -5, -5, -5, -5,\n-                4, 4, 4, 4, -4, -4, -4, -4,\n-                3, 3, 3, 3, -3, -3, -3, -3,\n-                2, 2, 2, 2, -2, -2, -2, -2,\n-                1, 1, 1, 1, -1, -1, -1, -1,\n-                0, 0, 0, 0,  0,  0,  0,  0,\n-            ];\n-            const B: [$scalar; 64] = [\n-                 1,  2,  3,  4,  5,  6,  7,  8,\n-                 1,  2,  3,  4,  5,  6,  7,  8,\n-                 1,  2,  3,  4,  5,  6,  7,  8,\n-                 1,  2,  3,  4,  5,  6,  7,  8,\n-                 -1,  -2,  -3,  -4,  -5,  -6,  -7,  -8,\n-                 -1,  -2,  -3,  -4,  -5,  -6,  -7,  -8,\n-                 -1,  -2,  -3,  -4,  -5,  -6,  -7,  -8,\n-                 -1,  -2,  -3,  -4,  -5,  -6,  -7,  -8,\n-            ];\n-\n-            #[test]\n-            #[should_panic]\n-            fn div_min_panics() {\n-                let a = from_slice(&vec![$scalar::MIN; 64]);\n-                let b = from_slice(&vec![-1; 64]);\n-                let _ = a / b;\n-            }\n-\n-            #[test]\n-            #[should_panic]\n-            fn div_by_all_zeros_panics() {\n-                let a = from_slice(&A);\n-                let b = from_slice(&vec![0 ; 64]);\n-                let _ = a / b;\n-            }\n-\n-            #[test]\n-            #[should_panic]\n-            fn div_by_one_zero_panics() {\n-                let a = from_slice(&A);\n-                let mut b = from_slice(&B);\n-                b[0] = 0 as _;\n-                let _ = a / b;\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn div_min_neg_one_no_panic() {\n-                let a = from_slice(&A);\n-                let b = from_slice(&vec![-1; 64]);\n-                let _ = a / b;\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn rem_min_neg_one_no_panic() {\n-                let a = from_slice(&A);\n-                let b = from_slice(&vec![-1; 64]);\n-                let _ = a % b;\n-            }\n-\n-            #[test]\n-            #[should_panic]\n-            fn rem_min_panic() {\n-                let a = from_slice(&vec![$scalar::MIN; 64]);\n-                let b = from_slice(&vec![-1 ; 64]);\n-                let _ = a % b;\n-            }\n-\n-            #[test]\n-            #[should_panic]\n-            fn rem_min_zero_panic() {\n-                let a = from_slice(&A);\n-                let b = from_slice(&vec![0 ; 64]);\n-                let _ = a % b;\n-            }\n-        }\n-    }\n-}"}, {"sha": "cfd849640ffefe2615bcd418c5808bc414663440", "filename": "crates/core_simd/tests/ops_impl/u128.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fu128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fu128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fu128.rs?ref=0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd", "patch": "@@ -1,4 +0,0 @@\n-use super::helpers;\n-\n-uint_tests! { u128x2, u128 }\n-uint_tests! { u128x4, u128 }"}, {"sha": "50af4dd48b38293a429c5ef349165d56549c6a9c", "filename": "crates/core_simd/tests/ops_impl/u16.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fu16.rs?ref=0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd", "patch": "@@ -1,6 +0,0 @@\n-use super::helpers;\n-\n-uint_tests! { u16x4, u16 }\n-uint_tests! { u16x8, u16 }\n-uint_tests! { u16x16, u16 }\n-uint_tests! { u16x32, u16 }"}, {"sha": "8e7faa9d740385de0848fe914eb7382ed99e9b56", "filename": "crates/core_simd/tests/ops_impl/u32.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fu32.rs?ref=0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd", "patch": "@@ -1,6 +0,0 @@\n-use super::helpers;\n-\n-uint_tests! { u32x2, u32 }\n-uint_tests! { u32x4, u32 }\n-uint_tests! { u32x8, u32 }\n-uint_tests! { u32x16, u32 }"}, {"sha": "1a6385d37bae5b485ca4655382b5d30b04748c67", "filename": "crates/core_simd/tests/ops_impl/u64.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fu64.rs?ref=0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd", "patch": "@@ -1,5 +0,0 @@\n-use super::helpers;\n-\n-uint_tests! { u64x2, u64 }\n-uint_tests! { u64x4, u64 }\n-uint_tests! { u64x8, u64 }"}, {"sha": "31568b1eacbef01c07c18e3106a9c9a5907364f9", "filename": "crates/core_simd/tests/ops_impl/u8.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fu8.rs?ref=0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd", "patch": "@@ -1,6 +0,0 @@\n-use super::helpers;\n-\n-uint_tests! { u8x8, u8 }\n-uint_tests! { u8x16, u8 }\n-uint_tests! { u8x32, u8 }\n-uint_tests! { u8x64, u8 }"}, {"sha": "bc8b3be74860ec350a62cd9d2392670586a76a13", "filename": "crates/core_simd/tests/ops_impl/uint_macros.rs", "status": "removed", "additions": 0, "deletions": 428, "changes": 428, "blob_url": "https://github.com/rust-lang/rust/blob/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fuint_macros.rs?ref=0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd", "patch": "@@ -1,428 +0,0 @@\n-macro_rules! uint_tests {\n-    { $vector:ident, $scalar:ident } => {\n-        #[cfg(test)]\n-        mod $vector {\n-            use super::*;\n-            use helpers::lanewise::*;\n-\n-            #[cfg(target_arch = \"wasm32\")]\n-            use wasm_bindgen_test::*;\n-\n-            #[cfg(target_arch = \"wasm32\")]\n-            wasm_bindgen_test_configure!(run_in_browser);\n-\n-            // TODO impl this as an associated fn on vectors\n-            fn from_slice(slice: &[$scalar]) -> core_simd::$vector {\n-                let mut value = core_simd::$vector::default();\n-                let value_slice: &mut [_] = value.as_mut();\n-                value_slice.copy_from_slice(&slice[0..value_slice.len()]);\n-                value\n-            }\n-\n-            const A: [$scalar; 64] = [\n-                16, 16, 16, 16, 16, 16, 16, 16,\n-                14, 14, 14, 14, 14, 14, 14, 14,\n-                12, 12, 12, 12, 12, 12, 12, 12,\n-                10, 10, 10, 10, 10, 10, 10, 10,\n-                 8,  8,  8,  8,  8,  8,  8,  8,\n-                 6,  6,  6,  6,  6,  6,  7,  8,\n-                 4,  4,  4,  4,  5,  6,  7,  8,\n-                 1,  2,  3,  4,  5,  6,  7,  8,\n-            ];\n-            const B: [$scalar; 64] = [\n-                1, 2, 3, 4, 1, 2, 3, 4,\n-                1, 2, 3, 4, 5, 6, 7, 8,\n-                1, 2, 3, 4, 5, 6, 7, 8,\n-                1, 2, 3, 4, 5, 6, 7, 8,\n-                1, 2, 3, 4, 5, 6, 7, 8,\n-                1, 2, 3, 4, 5, 6, 7, 8,\n-                1, 2, 3, 4, 5, 6, 7, 8,\n-                1, 2, 3, 4, 5, 6, 7, 8,\n-            ];\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn add() {\n-                let a = from_slice(&A);\n-                let b = from_slice(&B);\n-                let expected = apply_binary_lanewise(a, b, core::ops::Add::add);\n-                assert_biteq!(a + b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn add_assign() {\n-                let mut a = from_slice(&A);\n-                let b = from_slice(&B);\n-                let expected = apply_binary_lanewise(a, b, core::ops::Add::add);\n-                a += b;\n-                assert_biteq!(a, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn add_scalar_rhs() {\n-                let a = from_slice(&A);\n-                let b = 5;\n-                let expected = apply_binary_scalar_rhs_lanewise(a, b, core::ops::Add::add);\n-                assert_biteq!(a + b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn add_scalar_lhs() {\n-                let a = 5;\n-                let b = from_slice(&B);\n-                let expected = apply_binary_scalar_lhs_lanewise(a, b, core::ops::Add::add);\n-                assert_biteq!(a + b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn add_assign_scalar() {\n-                let mut a = from_slice(&A);\n-                let b = 5;\n-                let expected = apply_binary_scalar_rhs_lanewise(a, b, core::ops::Add::add);\n-                a += b;\n-                assert_biteq!(a, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn sub() {\n-                let a = from_slice(&A);\n-                let b = from_slice(&B);\n-                let expected = apply_binary_lanewise(a, b, core::ops::Sub::sub);\n-                assert_biteq!(a - b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn sub_assign() {\n-                let mut a = from_slice(&A);\n-                let b = from_slice(&B);\n-                let expected = apply_binary_lanewise(a, b, core::ops::Sub::sub);\n-                a -= b;\n-                assert_biteq!(a, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn sub_scalar_rhs() {\n-                let a = from_slice(&A);\n-                let b = 1;\n-                let expected = apply_binary_scalar_rhs_lanewise(a, b, core::ops::Sub::sub);\n-                assert_biteq!(a - b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn sub_scalar_lhs() {\n-                let a = 40;\n-                let b = from_slice(&B);\n-                let expected = apply_binary_scalar_lhs_lanewise(a, b, core::ops::Sub::sub);\n-                assert_biteq!(a - b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn sub_assign_scalar() {\n-                let mut a = from_slice(&A);\n-                let b = 1;\n-                let expected = apply_binary_scalar_rhs_lanewise(a, b, core::ops::Sub::sub);\n-                a -= b;\n-                assert_biteq!(a, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn mul() {\n-                let a = from_slice(&A);\n-                let b = from_slice(&B);\n-                let expected = apply_binary_lanewise(a, b, core::ops::Mul::mul);\n-                assert_biteq!(a * b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn mul_assign() {\n-                let mut a = from_slice(&A);\n-                let b = from_slice(&B);\n-                let expected = apply_binary_lanewise(a, b, core::ops::Mul::mul);\n-                a *= b;\n-                assert_biteq!(a, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn mul_scalar_rhs() {\n-                let a = from_slice(&A);\n-                let b = 5;\n-                let expected = apply_binary_scalar_rhs_lanewise(a, b, core::ops::Mul::mul);\n-                assert_biteq!(a * b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn mul_scalar_lhs() {\n-                let a = 5;\n-                let b = from_slice(&B);\n-                let expected = apply_binary_scalar_lhs_lanewise(a, b, core::ops::Mul::mul);\n-                assert_biteq!(a * b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn mul_assign_scalar() {\n-                let mut a = from_slice(&A);\n-                let b = 5;\n-                let expected = apply_binary_scalar_rhs_lanewise(a, b, core::ops::Mul::mul);\n-                a *= b;\n-                assert_biteq!(a, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn div() {\n-                let a = from_slice(&A);\n-                let b = from_slice(&B);\n-                let expected = apply_binary_lanewise(a, b, core::ops::Div::div);\n-                assert_biteq!(a / b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn div_assign() {\n-                let mut a = from_slice(&A);\n-                let b = from_slice(&B);\n-                let expected = apply_binary_lanewise(a, b, core::ops::Div::div);\n-                a /= b;\n-                assert_biteq!(a, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn div_scalar_rhs() {\n-                let a = from_slice(&A);\n-                let b = 5;\n-                let expected = apply_binary_scalar_rhs_lanewise(a, b, core::ops::Div::div);\n-                assert_biteq!(a / b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn div_scalar_lhs() {\n-                let a = 5;\n-                let b = from_slice(&B);\n-                let expected = apply_binary_scalar_lhs_lanewise(a, b, core::ops::Div::div);\n-                assert_biteq!(a / b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn div_assign_scalar() {\n-                let mut a = from_slice(&A);\n-                let b = 5;\n-                let expected = apply_binary_scalar_rhs_lanewise(a, b, core::ops::Div::div);\n-                a /= b;\n-                assert_biteq!(a, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn rem() {\n-                let a = from_slice(&A);\n-                let b = from_slice(&B);\n-                let expected = apply_binary_lanewise(a, b, core::ops::Rem::rem);\n-                assert_biteq!(a % b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn rem_assign() {\n-                let mut a = from_slice(&A);\n-                let b = from_slice(&B);\n-                let expected = apply_binary_lanewise(a, b, core::ops::Rem::rem);\n-                a %= b;\n-                assert_biteq!(a, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn rem_scalar_rhs() {\n-                let a = from_slice(&A);\n-                let b = 5;\n-                let expected = apply_binary_scalar_rhs_lanewise(a, b, core::ops::Rem::rem);\n-                assert_biteq!(a % b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn rem_scalar_lhs() {\n-                let a = 5;\n-                let b = from_slice(&B);\n-                let expected = apply_binary_scalar_lhs_lanewise(a, b, core::ops::Rem::rem);\n-                assert_biteq!(a % b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn rem_assign_scalar() {\n-                let mut a = from_slice(&A);\n-                let b = 5;\n-                let expected = apply_binary_scalar_rhs_lanewise(a, b, core::ops::Rem::rem);\n-                a %= b;\n-                assert_biteq!(a, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn bitand() {\n-                let a = from_slice(&A);\n-                let b = from_slice(&B);\n-                let expected = apply_binary_lanewise(a, b, core::ops::BitAnd::bitand);\n-                assert_biteq!(a & b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn bitand_assign() {\n-                let mut a = from_slice(&A);\n-                let b = from_slice(&B);\n-                let expected = apply_binary_lanewise(a, b, core::ops::BitAnd::bitand);\n-                a &= b;\n-                assert_biteq!(a, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn bitand_scalar_rhs() {\n-                let a = from_slice(&A);\n-                let b = 5;\n-                let expected = apply_binary_scalar_rhs_lanewise(a, b, core::ops::BitAnd::bitand);\n-                assert_biteq!(a & b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn bitand_scalar_lhs() {\n-                let a = 5;\n-                let b = from_slice(&B);\n-                let expected = apply_binary_scalar_lhs_lanewise(a, b, core::ops::BitAnd::bitand);\n-                assert_biteq!(a & b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn bitand_assign_scalar() {\n-                let mut a = from_slice(&A);\n-                let b = 5;\n-                let expected = apply_binary_scalar_rhs_lanewise(a, b, core::ops::BitAnd::bitand);\n-                a &= b;\n-                assert_biteq!(a, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn bitor() {\n-                let a = from_slice(&A);\n-                let b = from_slice(&B);\n-                let expected = apply_binary_lanewise(a, b, core::ops::BitOr::bitor);\n-                assert_biteq!(a | b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn bitor_assign() {\n-                let mut a = from_slice(&A);\n-                let b = from_slice(&B);\n-                let expected = apply_binary_lanewise(a, b, core::ops::BitOr::bitor);\n-                a |= b;\n-                assert_biteq!(a, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn bitor_scalar_rhs() {\n-                let a = from_slice(&A);\n-                let b = 5;\n-                let expected = apply_binary_scalar_rhs_lanewise(a, b, core::ops::BitOr::bitor);\n-                assert_biteq!(a | b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn bitor_scalar_lhs() {\n-                let a = 5;\n-                let b = from_slice(&B);\n-                let expected = apply_binary_scalar_lhs_lanewise(a, b, core::ops::BitOr::bitor);\n-                assert_biteq!(a | b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn bitor_assign_scalar() {\n-                let mut a = from_slice(&A);\n-                let b = 5;\n-                let expected = apply_binary_scalar_rhs_lanewise(a, b, core::ops::BitOr::bitor);\n-                a |= b;\n-                assert_biteq!(a, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn bitxor() {\n-                let a = from_slice(&A);\n-                let b = from_slice(&B);\n-                let expected = apply_binary_lanewise(a, b, core::ops::BitXor::bitxor);\n-                assert_biteq!(a ^ b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn bitxor_assign() {\n-                let mut a = from_slice(&A);\n-                let b = from_slice(&B);\n-                let expected = apply_binary_lanewise(a, b, core::ops::BitXor::bitxor);\n-                a ^= b;\n-                assert_biteq!(a, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn bitxor_scalar_rhs() {\n-                let a = from_slice(&A);\n-                let b = 5;\n-                let expected = apply_binary_scalar_rhs_lanewise(a, b, core::ops::BitXor::bitxor);\n-                assert_biteq!(a ^ b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn bitxor_scalar_lhs() {\n-                let a = 5;\n-                let b = from_slice(&B);\n-                let expected = apply_binary_scalar_lhs_lanewise(a, b, core::ops::BitXor::bitxor);\n-                assert_biteq!(a ^ b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn bitxor_assign_scalar() {\n-                let mut a = from_slice(&A);\n-                let b = 5;\n-                let expected = apply_binary_scalar_rhs_lanewise(a, b, core::ops::BitXor::bitxor);\n-                a ^= b;\n-                assert_biteq!(a, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn not() {\n-                let v = from_slice(&A);\n-                let expected = apply_unary_lanewise(v, core::ops::Not::not);\n-                assert_biteq!(!v, expected);\n-            }\n-        }\n-    }\n-}"}, {"sha": "13da57f15869b2eca9f1f2a0f56220be5e8239f6", "filename": "crates/core_simd/tests/ops_impl/usize.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fusize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fusize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fusize.rs?ref=0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd", "patch": "@@ -1,5 +0,0 @@\n-use super::helpers;\n-\n-uint_tests! { usizex2, usize }\n-uint_tests! { usizex4, usize }\n-uint_tests! { usizex8, usize }"}, {"sha": "a4b26a1777afa24c2fdca15064e88582ee5e9a9a", "filename": "crates/core_simd/tests/ops_macros.rs", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_macros.rs?ref=714ad639b39f7a35422b3fc342eb843013cc89ba", "patch": "@@ -141,6 +141,53 @@ macro_rules! impl_signed_tests {\n                 }\n             }\n \n+            test_helpers::test_lanes_panic! {\n+                fn div_min_overflow_panics<const LANES: usize>() {\n+                    let a = Vector::<LANES>::splat(Scalar::MIN);\n+                    let b = Vector::<LANES>::splat(-1);\n+                    let _ = a / b;\n+                }\n+\n+                fn div_by_all_zeros_panics<const LANES: usize>() {\n+                    let a = Vector::<LANES>::splat(42);\n+                    let b = Vector::<LANES>::splat(0);\n+                    let _ = a / b;\n+                }\n+\n+                fn div_by_one_zero_panics<const LANES: usize>() {\n+                    let a = Vector::<LANES>::splat(42);\n+                    let mut b = Vector::<LANES>::splat(21);\n+                    b[0] = 0 as _;\n+                    let _ = a / b;\n+                }\n+\n+                fn rem_min_overflow_panic<const LANES: usize>() {\n+                    let a = Vector::<LANES>::splat(Scalar::MIN);\n+                    let b = Vector::<LANES>::splat(-1);\n+                    let _ = a % b;\n+                }\n+\n+                fn rem_zero_panic<const LANES: usize>() {\n+                    let a = Vector::<LANES>::splat(42);\n+                    let b = Vector::<LANES>::splat(0);\n+                    let _ = a % b;\n+                }\n+            }\n+\n+            test_helpers::test_lanes! {\n+                fn div_neg_one_no_panic<const LANES: usize>() {\n+                    let a = Vector::<LANES>::splat(42);\n+                    let b = Vector::<LANES>::splat(-1);\n+                    let _ = a / b;\n+                }\n+\n+                fn rem_neg_one_no_panic<const LANES: usize>() {\n+                    let a = Vector::<LANES>::splat(42);\n+                    let b = Vector::<LANES>::splat(-1);\n+                    let _ = a % b;\n+                }\n+            }\n+\n             impl_binary_op_test!(Vector<LANES>, Scalar, Add::add, AddAssign::add_assign, Scalar::wrapping_add);\n             impl_binary_op_test!(Vector<LANES>, Scalar, Sub::sub, SubAssign::sub_assign, Scalar::wrapping_sub);\n             impl_binary_op_test!(Vector<LANES>, Scalar, Mul::mul, MulAssign::mul_assign, Scalar::wrapping_mul);\n@@ -162,6 +209,14 @@ macro_rules! impl_unsigned_tests {\n             type Vector<const LANES: usize> = core_simd::$vector<LANES>;\n             type Scalar = $scalar;\n \n+            test_helpers::test_lanes_panic! {\n+                fn rem_zero_panic<const LANES: usize>() {\n+                    let a = Vector::<LANES>::splat(42);\n+                    let b = Vector::<LANES>::splat(0);\n+                    let _ = a % b;\n+                }\n+            }\n+\n             impl_binary_op_test!(Vector<LANES>, Scalar, Add::add, AddAssign::add_assign, Scalar::wrapping_add);\n             impl_binary_op_test!(Vector<LANES>, Scalar, Sub::sub, SubAssign::sub_assign, Scalar::wrapping_sub);\n             impl_binary_op_test!(Vector<LANES>, Scalar, Mul::mul, MulAssign::mul_assign, Scalar::wrapping_mul);\n@@ -187,7 +242,7 @@ macro_rules! impl_float_tests {\n             impl_unary_op_test!(Vector<LANES>, Scalar, Neg::neg);\n             impl_binary_op_test!(Vector<LANES>, Scalar, Add::add, AddAssign::add_assign);\n             impl_binary_op_test!(Vector<LANES>, Scalar, Sub::sub, SubAssign::sub_assign);\n-            impl_binary_op_test!(Vector<LANES>, Scalar, Mul::mul, SubAssign::sub_assign);\n+            impl_binary_op_test!(Vector<LANES>, Scalar, Mul::mul, MulAssign::mul_assign);\n             impl_binary_op_test!(Vector<LANES>, Scalar, Div::div, DivAssign::div_assign);\n             impl_binary_op_test!(Vector<LANES>, Scalar, Rem::rem, RemAssign::rem_assign);\n "}, {"sha": "4be7d751ffd8930fe517f030642da11193189774", "filename": "crates/core_simd/tests/u128_ops.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fu128_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fu128_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fu128_ops.rs?ref=714ad639b39f7a35422b3fc342eb843013cc89ba", "patch": "@@ -1,4 +1,3 @@\n #[macro_use]\n-#[path = \"ops_macros.rs\"]\n-mod macros;\n+mod ops_macros;\n impl_unsigned_tests! { SimdU128, u128 }"}, {"sha": "488e703d54fb623648390be1266264e2156d5ea3", "filename": "crates/core_simd/tests/u16_ops.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fu16_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fu16_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fu16_ops.rs?ref=714ad639b39f7a35422b3fc342eb843013cc89ba", "patch": "@@ -1,4 +1,3 @@\n #[macro_use]\n-#[path = \"ops_macros.rs\"]\n-mod macros;\n+mod ops_macros;\n impl_unsigned_tests! { SimdU16, u16 }"}, {"sha": "bf0631029e373c6d0f4329d84e3fd16d67215220", "filename": "crates/core_simd/tests/u32_ops.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fu32_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fu32_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fu32_ops.rs?ref=714ad639b39f7a35422b3fc342eb843013cc89ba", "patch": "@@ -1,4 +1,3 @@\n #[macro_use]\n-#[path = \"ops_macros.rs\"]\n-mod macros;\n+mod ops_macros;\n impl_unsigned_tests! { SimdU32, u32 }"}, {"sha": "e52fc3cfce1f9c50b72f91cb8291a6e985bf72d2", "filename": "crates/core_simd/tests/u64_ops.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fu64_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fu64_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fu64_ops.rs?ref=714ad639b39f7a35422b3fc342eb843013cc89ba", "patch": "@@ -1,4 +1,3 @@\n #[macro_use]\n-#[path = \"ops_macros.rs\"]\n-mod macros;\n+mod ops_macros;\n impl_unsigned_tests! { SimdU64, u64 }"}, {"sha": "45be3580ec3926c17d4b25be60436c5e400f6aaa", "filename": "crates/core_simd/tests/u8_ops.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fu8_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fu8_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fu8_ops.rs?ref=714ad639b39f7a35422b3fc342eb843013cc89ba", "patch": "@@ -1,4 +1,3 @@\n #[macro_use]\n-#[path = \"ops_macros.rs\"]\n-mod macros;\n+mod ops_macros;\n impl_unsigned_tests! { SimdU8, u8 }"}, {"sha": "1ce6e71800454e6155ed22315022f0568185fcca", "filename": "crates/core_simd/tests/usize_ops.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fusize_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Fcore_simd%2Ftests%2Fusize_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fusize_ops.rs?ref=714ad639b39f7a35422b3fc342eb843013cc89ba", "patch": "@@ -1,4 +1,3 @@\n #[macro_use]\n-#[path = \"ops_macros.rs\"]\n-mod macros;\n+mod ops_macros;\n impl_unsigned_tests! { SimdUsize, usize }"}, {"sha": "253435dea3360827acee5823560fc646c9f54e32", "filename": "crates/test_helpers/src/lib.rs", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Ftest_helpers%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/714ad639b39f7a35422b3fc342eb843013cc89ba/crates%2Ftest_helpers%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_helpers%2Fsrc%2Flib.rs?ref=714ad639b39f7a35422b3fc342eb843013cc89ba", "patch": "@@ -280,4 +280,61 @@ macro_rules! test_lanes {\n             }\n         )*\n     }\n-}\n+}  \n+\n+#[macro_export]\n+macro_rules! test_lanes_panic {\n+    {\n+        $(fn $test:ident<const $lanes:ident: usize>() $body:tt)*\n+    } => {\n+        $(\n+            mod $test {\n+                use super::*;\n+\n+                fn implementation<const $lanes: usize>() $body\n+\n+                #[test]\n+                #[should_panic]\n+                fn lanes_1() {\n+                    implementation::<1>();\n+                }\n+\n+                #[test]\n+                #[should_panic]\n+                fn lanes_2() {\n+                    implementation::<2>();\n+                }\n+\n+                #[test]\n+                #[should_panic]\n+                fn lanes_4() {\n+                    implementation::<4>();\n+                }\n+\n+                #[test]\n+                #[should_panic]\n+                fn lanes_8() {\n+                    implementation::<8>();\n+                }\n+\n+                #[test]\n+                #[should_panic]\n+                fn lanes_16() {\n+                    implementation::<16>();\n+                }\n+\n+                #[test]\n+                #[should_panic]\n+                fn lanes_32() {\n+                    implementation::<32>();\n+                }\n+\n+                #[test]\n+                #[should_panic]\n+                fn lanes_64() {\n+                    implementation::<64>();\n+                }\n+            }\n+        )*\n+    }\n+}  "}]}