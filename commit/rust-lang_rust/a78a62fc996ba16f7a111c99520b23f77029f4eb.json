{"sha": "a78a62fc996ba16f7a111c99520b23f77029f4eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3OGE2MmZjOTk2YmExNmY3YTExMWM5OTUyMGIyM2Y3NzAyOWY0ZWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-16T14:06:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-16T14:06:37Z"}, "message": "Auto merge of #77972 - Mark-Simulacrum:side-effect-loop, r=nagisa\n\nPrevent miscompilation in trivial loop {}\n\nIdeally, we would want to handle a broader set of cases to fully fix the\nunderlying bug here. That is currently relatively expensive at compile and\nruntime, so we don't do that for now.\n\nPerformance results indicate this is not a major regression, if at all, so it should be safe to land.\n\ncc #28728", "tree": {"sha": "0fc161af43f06b93df78f9f11f7810e132eb9694", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fc161af43f06b93df78f9f11f7810e132eb9694"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a78a62fc996ba16f7a111c99520b23f77029f4eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a78a62fc996ba16f7a111c99520b23f77029f4eb", "html_url": "https://github.com/rust-lang/rust/commit/a78a62fc996ba16f7a111c99520b23f77029f4eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a78a62fc996ba16f7a111c99520b23f77029f4eb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8850893d96252172700727fe9e746c8e1ebd5853", "url": "https://api.github.com/repos/rust-lang/rust/commits/8850893d96252172700727fe9e746c8e1ebd5853", "html_url": "https://github.com/rust-lang/rust/commit/8850893d96252172700727fe9e746c8e1ebd5853"}, {"sha": "e2efec89764f4ee68cc9f537eda722d2fb830bba", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2efec89764f4ee68cc9f537eda722d2fb830bba", "html_url": "https://github.com/rust-lang/rust/commit/e2efec89764f4ee68cc9f537eda722d2fb830bba"}], "stats": {"total": 51, "additions": 42, "deletions": 9}, "files": [{"sha": "e78a4ea2e3cf75d3ddd3cb0c1d0e5296ec189d60", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a78a62fc996ba16f7a111c99520b23f77029f4eb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a78a62fc996ba16f7a111c99520b23f77029f4eb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=a78a62fc996ba16f7a111c99520b23f77029f4eb", "patch": "@@ -334,8 +334,8 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         self.call(expect, &[cond, self.const_bool(expected)], None)\n     }\n \n-    fn sideeffect(&mut self) {\n-        if self.tcx.sess.opts.debugging_opts.insert_sideeffect {\n+    fn sideeffect(&mut self, unconditional: bool) {\n+        if unconditional || self.tcx.sess.opts.debugging_opts.insert_sideeffect {\n             let fnname = self.get_intrinsic(&(\"llvm.sideeffect\"));\n             self.call(fnname, &[], None);\n         }\n@@ -390,7 +390,7 @@ fn codegen_msvc_try(\n ) {\n     let llfn = get_rust_try_fn(bx, &mut |mut bx| {\n         bx.set_personality_fn(bx.eh_personality());\n-        bx.sideeffect();\n+        bx.sideeffect(false);\n \n         let mut normal = bx.build_sibling_block(\"normal\");\n         let mut catchswitch = bx.build_sibling_block(\"catchswitch\");\n@@ -553,7 +553,7 @@ fn codegen_gnu_try(\n         //      call %catch_func(%data, %ptr)\n         //      ret 1\n \n-        bx.sideeffect();\n+        bx.sideeffect(false);\n \n         let mut then = bx.build_sibling_block(\"then\");\n         let mut catch = bx.build_sibling_block(\"catch\");\n@@ -615,7 +615,7 @@ fn codegen_emcc_try(\n         //      call %catch_func(%data, %catch_data)\n         //      ret 1\n \n-        bx.sideeffect();\n+        bx.sideeffect(false);\n \n         let mut then = bx.build_sibling_block(\"then\");\n         let mut catch = bx.build_sibling_block(\"catch\");"}, {"sha": "bec0a84cac0a1e2824dc4783b9f6fecd013f2902", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a78a62fc996ba16f7a111c99520b23f77029f4eb/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a78a62fc996ba16f7a111c99520b23f77029f4eb/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=a78a62fc996ba16f7a111c99520b23f77029f4eb", "patch": "@@ -163,7 +163,7 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n                 target <= self.bb\n                     && target.start_location().is_predecessor_of(self.bb.start_location(), mir)\n             }) {\n-                bx.sideeffect();\n+                bx.sideeffect(false);\n             }\n         }\n     }\n@@ -964,7 +964,23 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             }\n \n             mir::TerminatorKind::Goto { target } => {\n-                helper.maybe_sideeffect(self.mir, &mut bx, &[target]);\n+                if bb == target {\n+                    // This is an unconditional branch back to this same basic\n+                    // block. That means we have something like a `loop {}`\n+                    // statement. Currently LLVM miscompiles this because it\n+                    // assumes forward progress. We want to prevent this in all\n+                    // cases, but that has a fairly high cost to compile times\n+                    // currently. Instead, try to handle this specific case\n+                    // which comes up commonly in practice (e.g., in embedded\n+                    // code).\n+                    //\n+                    // The `true` here means we insert side effects regardless\n+                    // of -Zinsert-sideeffect being passed on unconditional\n+                    // branching to the same basic block.\n+                    bx.sideeffect(true);\n+                } else {\n+                    helper.maybe_sideeffect(self.mir, &mut bx, &[target]);\n+                }\n                 helper.funclet_br(self, &mut bx, target);\n             }\n "}, {"sha": "bff263567bf6b1d8212a434dcffcd87b43097493", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a78a62fc996ba16f7a111c99520b23f77029f4eb/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a78a62fc996ba16f7a111c99520b23f77029f4eb/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=a78a62fc996ba16f7a111c99520b23f77029f4eb", "patch": "@@ -153,7 +153,7 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         bx.set_personality_fn(cx.eh_personality());\n     }\n \n-    bx.sideeffect();\n+    bx.sideeffect(false);\n \n     let cleanup_kinds = analyze::cleanup_kinds(&mir);\n     // Allocate a `Block` for every basic block, except"}, {"sha": "ac3c99f9c908db253b3dcd71bc462321848c93fb", "filename": "compiler/rustc_codegen_ssa/src/traits/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a78a62fc996ba16f7a111c99520b23f77029f4eb/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a78a62fc996ba16f7a111c99520b23f77029f4eb/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fintrinsic.rs?ref=a78a62fc996ba16f7a111c99520b23f77029f4eb", "patch": "@@ -20,7 +20,9 @@ pub trait IntrinsicCallMethods<'tcx>: BackendTypes {\n     fn abort(&mut self);\n     fn assume(&mut self, val: Self::Value);\n     fn expect(&mut self, cond: Self::Value, expected: bool) -> Self::Value;\n-    fn sideeffect(&mut self);\n+    /// Normally, sideeffect is only emitted if -Zinsert-sideeffect is passed;\n+    /// in some cases though we want to emit it regardless.\n+    fn sideeffect(&mut self, unconditional: bool);\n     /// Trait method used to inject `va_start` on the \"spoofed\" `VaListImpl` in\n     /// Rust defined C-variadic functions.\n     fn va_start(&mut self, val: Self::Value) -> Self::Value;"}, {"sha": "e54298eed059ed69370296d1c37a6e603d291234", "filename": "src/test/codegen/loop.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a78a62fc996ba16f7a111c99520b23f77029f4eb/src%2Ftest%2Fcodegen%2Floop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a78a62fc996ba16f7a111c99520b23f77029f4eb/src%2Ftest%2Fcodegen%2Floop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Floop.rs?ref=a78a62fc996ba16f7a111c99520b23f77029f4eb", "patch": "@@ -0,0 +1,15 @@\n+// compile-flags: -C opt-level=3\n+\n+#![crate_type = \"lib\"]\n+\n+// CHECK-LABEL: @check_loop\n+#[no_mangle]\n+pub fn check_loop() -> u8 {\n+    // CHECK-NOT: unreachable\n+    call_looper()\n+}\n+\n+#[no_mangle]\n+fn call_looper() -> ! {\n+    loop {}\n+}"}]}