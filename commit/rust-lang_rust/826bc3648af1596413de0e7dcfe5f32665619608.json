{"sha": "826bc3648af1596413de0e7dcfe5f32665619608", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyNmJjMzY0OGFmMTU5NjQxM2RlMGU3ZGNmZTVmMzI2NjU2MTk2MDg=", "commit": {"author": {"name": "CoffeeBlend", "email": "jonasboettiger@icloud.com", "date": "2021-01-01T21:03:14Z"}, "committer": {"name": "CoffeeBlend", "email": "jonasboettiger@icloud.com", "date": "2021-01-01T21:03:14Z"}, "message": "Implement MaybeUninit::array_assume_init", "tree": {"sha": "0eb7dff85be33a43d883cd580d1ef2b17ce77599", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0eb7dff85be33a43d883cd580d1ef2b17ce77599"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/826bc3648af1596413de0e7dcfe5f32665619608", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEVuz3PwcqDyifNyYbcE4BSbAZSzwFAl/vjhIACgkQcE4BSbAZ\nSzwSBxAAmbjekcuWfLTk6RXJUqWlj9WS2/tv7VOjq0CI31ozAWac5E6Om3gBV9PN\n9tV7xwpIK+oZkCxxKYf4z9LpwozjZkuuao6227AQTmoP83NgbDyxknMyX7FCdQUT\nvuO2CfaZuAHWn6fm2O2xCVqe3MvwSoz6SXElgIBnHXctAyZTuDKijLBWmwNyCDHq\n+hTmibikWQCFCMNvVZFIiJgVHlqKIA5HcnHBr2gTSK5CLTdEzEYgZRHroZPeawSm\na49u/SCvy4K5gXYHjYQJbM91JSJAk4uGHIUEHpPxoYnqCPiWsOGTdMVDjy17/vS5\n0iH4SsjhZb4poW6jZYf5UjfWlktVtaVQc6E9q+p8wAh+eJk2mM6SgHo5TVQXpUFx\nt9AkEfyxd2IIwdvUXmMT692ZYKRuLd2lc71q2UJ6Kv6UBlUMVFIoXKTag7olr95i\nXTgGLFQ3C9M3YPNeA0bzG2A326v6IU4b6kr9DZnPiaH+H1b/LZwW4IqraZDJU5jr\n6plRG0F+XYmKo0FP4Elk77AQUnFhTMEa7vEn1s6nDE7OtCw1WXQ77ghMBn3O6h3i\nZamrPoWpV+hPaqymbXCKK4qJnvbGyU+OlcdWyOqiuO1J6S8LDcuT5Ydut08N1jI6\n2dW4T67Q1p6IhpIDq2joaR3qx2rT/WcJqha32dt/Qk05TbJ2dhM=\n=8asY\n-----END PGP SIGNATURE-----", "payload": "tree 0eb7dff85be33a43d883cd580d1ef2b17ce77599\nparent 206ee1eea3467fd1d7f1efdbeafe27880897bb2c\nauthor CoffeeBlend <jonasboettiger@icloud.com> 1609534994 +0100\ncommitter CoffeeBlend <jonasboettiger@icloud.com> 1609534994 +0100\n\nImplement MaybeUninit::array_assume_init\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/826bc3648af1596413de0e7dcfe5f32665619608", "html_url": "https://github.com/rust-lang/rust/commit/826bc3648af1596413de0e7dcfe5f32665619608", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/826bc3648af1596413de0e7dcfe5f32665619608/comments", "author": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "206ee1eea3467fd1d7f1efdbeafe27880897bb2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/206ee1eea3467fd1d7f1efdbeafe27880897bb2c", "html_url": "https://github.com/rust-lang/rust/commit/206ee1eea3467fd1d7f1efdbeafe27880897bb2c"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "b157eec24b4100241db70cc261b716f0bd0e33e3", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/826bc3648af1596413de0e7dcfe5f32665619608/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/826bc3648af1596413de0e7dcfe5f32665619608/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=826bc3648af1596413de0e7dcfe5f32665619608", "patch": "@@ -804,6 +804,55 @@ impl<T> MaybeUninit<T> {\n         }\n     }\n \n+    /// Extracts the values from an array of `MaybeUninit` containers. \n+    /// \n+    /// # Safety\n+    /// \n+    /// It is up to the caller to guarantee that all elements of the array are\n+    /// in an initialized state. \n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(maybe_uninit_uninit_array)]\n+    /// #![feature(maybe_uninit_array_assume_init)]\n+    /// use std::mem::MaybeUninit;\n+    /// \n+    /// let mut array: [MaybeUninit<i32>; 3] = MaybeUninit::uninit_array();\n+    /// array[0] = MaybeUninit::new(0);\n+    /// array[1] = MaybeUninit::new(1);\n+    /// array[2] = MaybeUninit::new(2);\n+    /// \n+    /// // SAFETY: Now safe as we initialised all elements\n+    /// let array = unsafe {\n+    ///     MaybeUninit::array_assume_init(array)\n+    /// };\n+    /// \n+    /// assert_eq!(array, [0, 1, 2]);\n+    /// ```\n+    #[unstable(feature = \"maybe_uninit_array_assume_init\", issue = \"none\")]\n+    #[inline(always)]\n+    pub unsafe fn array_assume_init<const N: usize>(array: [Self; N]) -> [T; N] {\n+        // Convert using a union because mem::transmute does not support const_generics\n+        union ArrayInit<T, const N: usize> {\n+            maybe_uninit: ManuallyDrop<[MaybeUninit<T>; N]>,\n+            init: ManuallyDrop<[T; N]>,\n+        }\n+\n+        // SAFETY:\n+        // * The caller guarantees that all elements of the array are initialized,\n+        // * `MaybeUninit<T>` and T are guaranteed to have the same layout,\n+        // Therefore the conversion is safe\n+        unsafe {\n+            intrinsics::assert_inhabited::<T>();\n+\n+            let array = ArrayInit {\n+                maybe_uninit: ManuallyDrop::new(array),\n+            };\n+            ManuallyDrop::into_inner(array.init)\n+        }\n+    }\n+\n     /// Assuming all the elements are initialized, get a slice to them.\n     ///\n     /// # Safety"}]}