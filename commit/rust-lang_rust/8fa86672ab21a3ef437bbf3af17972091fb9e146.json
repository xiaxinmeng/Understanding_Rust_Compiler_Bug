{"sha": "8fa86672ab21a3ef437bbf3af17972091fb9e146", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmYTg2NjcyYWIyMWEzZWY0MzdiYmYzYWYxNzk3MjA5MWZiOWUxNDY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-20T01:52:12Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-20T01:52:36Z"}, "message": "rt: Implement stack crawling", "tree": {"sha": "69ae078d4a480bf6ea76c3098b54d4a91e525488", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69ae078d4a480bf6ea76c3098b54d4a91e525488"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fa86672ab21a3ef437bbf3af17972091fb9e146", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fa86672ab21a3ef437bbf3af17972091fb9e146", "html_url": "https://github.com/rust-lang/rust/commit/8fa86672ab21a3ef437bbf3af17972091fb9e146", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fa86672ab21a3ef437bbf3af17972091fb9e146/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3f4a1b6adf9d5e8664f0dbccc62d425d1bab7b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3f4a1b6adf9d5e8664f0dbccc62d425d1bab7b1", "html_url": "https://github.com/rust-lang/rust/commit/a3f4a1b6adf9d5e8664f0dbccc62d425d1bab7b1"}], "stats": {"total": 37, "additions": 26, "deletions": 11}, "files": [{"sha": "ff6ca86f854e82ec0d36fd74a1b61cb759bf49e9", "filename": "src/rt/rust_gc.cpp", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8fa86672ab21a3ef437bbf3af17972091fb9e146/src%2Frt%2Frust_gc.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8fa86672ab21a3ef437bbf3af17972091fb9e146/src%2Frt%2Frust_gc.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_gc.cpp?ref=8fa86672ab21a3ef437bbf3af17972091fb9e146", "patch": "@@ -1,12 +1,14 @@\n // Rust garbage collection.\n \n #include <algorithm>\n+#include <iostream>\n #include <utility>\n #include <vector>\n #include <stdint.h>\n \n #include \"rust_gc.h\"\n #include \"rust_internal.h\"\n+#include \"rust_shape.h\"\n \n #ifdef __WIN32__\n #include <windows.h>\n@@ -24,13 +26,10 @@ struct frame {\n     uint8_t *bp;    // The frame pointer.\n     void (*ra)();   // The return address.\n \n-    frame(void *in_bp) : bp((uint8_t *)in_bp) {}\n-\n-    inline void read_ra() {\n-        ra = *(void (**)())(bp + sizeof(void *));\n-    }\n+    frame(void *in_bp, void (*in_ra)()) : bp((uint8_t *)in_bp), ra(in_ra) {}\n \n     inline void next() {\n+        ra = *(void (**)())(bp + sizeof(void *));\n         bp = *(uint8_t **)bp;\n     }\n };\n@@ -106,11 +105,15 @@ class safe_point_map {\n \n class gc {\n private:\n+    rust_task *task;\n+\n     void mark(std::vector<root> &roots);\n     void sweep();\n \n public:\n-    void run(rust_task *task);\n+    gc(rust_task *in_task) : task(in_task) {}\n+\n+    void run();\n     std::vector<frame> backtrace();\n };\n \n@@ -127,6 +130,14 @@ gc::mark(std::vector<root> &roots) {\n     std::vector<root>::iterator ri = roots.begin(), rend = roots.end();\n     while (ri < rend) {\n         DPRINT(\"root: %p\\n\", ri->data);\n+\n+        shape::arena arena;\n+        shape::type_param *params = shape::type_param::make(ri->tydesc,\n+                                                            arena);\n+        shape::log log(task, ri->tydesc->shape, params,\n+                       ri->tydesc->shape_tables, ri->data, std::cerr);\n+        log.walk(true);\n+\n         ++ri;\n     }\n     // TODO\n@@ -140,17 +151,21 @@ gc::sweep() {\n std::vector<frame>\n gc::backtrace() {\n     std::vector<frame> frames;\n-    frame f(__builtin_frame_address(0));\n+\n+    // Ideally we would use the current value of EIP here, but there's no\n+    // portable way to get that and there are never any GC roots in our C++\n+    // frames anyhow.\n+    frame f(__builtin_frame_address(0), (void (*)())NULL);\n+\n     while (f.ra != END_OF_STACK_RA) {\n-        f.read_ra();\n         frames.push_back(f);\n         f.next();\n     }\n     return frames;\n }\n \n void\n-gc::run(rust_task *task) {\n+gc::run() {\n     safe_point_map map;\n \n     // Find roots.\n@@ -187,8 +202,8 @@ maybe_gc(rust_task *task) {\n     }\n \n     if (zeal) {\n-        gc gc;\n-        gc.run(task);\n+        gc gc(task);\n+        gc.run();\n     }\n }\n "}]}