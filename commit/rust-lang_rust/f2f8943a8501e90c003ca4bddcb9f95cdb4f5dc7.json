{"sha": "f2f8943a8501e90c003ca4bddcb9f95cdb4f5dc7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyZjg5NDNhODUwMWU5MGMwMDNjYTRiZGRjYjlmOTVjZGI0ZjVkYzc=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-07-22T19:34:47Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-07-23T00:46:52Z"}, "message": "Add a \"fake\" def_upvar and mechanisms to create it.", "tree": {"sha": "ad768bc0e0e0fc27e64ad57488173173afd3080b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad768bc0e0e0fc27e64ad57488173173afd3080b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2f8943a8501e90c003ca4bddcb9f95cdb4f5dc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2f8943a8501e90c003ca4bddcb9f95cdb4f5dc7", "html_url": "https://github.com/rust-lang/rust/commit/f2f8943a8501e90c003ca4bddcb9f95cdb4f5dc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2f8943a8501e90c003ca4bddcb9f95cdb4f5dc7/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e18d70fe12dcaa84e073f94922f625f3cebeea39", "url": "https://api.github.com/repos/rust-lang/rust/commits/e18d70fe12dcaa84e073f94922f625f3cebeea39", "html_url": "https://github.com/rust-lang/rust/commit/e18d70fe12dcaa84e073f94922f625f3cebeea39"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "540716550ce853d666773b77447056ef99681b3b", "filename": "src/comp/middle/freevars.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f2f8943a8501e90c003ca4bddcb9f95cdb4f5dc7/src%2Fcomp%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2f8943a8501e90c003ca4bddcb9f95cdb4f5dc7/src%2Fcomp%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffreevars.rs?ref=f2f8943a8501e90c003ca4bddcb9f95cdb4f5dc7", "patch": "@@ -18,8 +18,8 @@ export freevar_set;\n export freevar_map;\n export get_freevars;\n export has_freevars;\n-export is_freevarof;\n-\n+export is_freevar_of;\n+export def_lookup;\n \n type freevar_set = @ast::node_id[];\n type freevar_map = hashmap[ast::node_id, freevar_set];\n@@ -138,10 +138,10 @@ fn annotate_freevars(&session::session sess, &resolve::def_map def_map,\n \n fn get_freevars(&ty::ctxt tcx, ast::node_id fid) -> freevar_set {\n     alt (tcx.freevars.find(fid)) {\n-        case (none) {\n+        none {\n             fail \"get_freevars: \" + int::str(fid) + \" has no freevars\";\n         }\n-        case (some(?d)) { ret d; }\n+        some(?d) { ret d; }\n     }\n }\n fn has_freevars(&ty::ctxt tcx, ast::node_id fid) -> bool {\n@@ -150,6 +150,19 @@ fn has_freevars(&ty::ctxt tcx, ast::node_id fid) -> bool {\n fn is_freevar_of(&ty::ctxt tcx, ast::node_id var, ast::node_id f) -> bool {\n     ret ivec::member(var, *get_freevars(tcx, f));\n }\n+fn def_lookup(&ty::ctxt tcx, ast::node_id f, ast::node_id id) ->\n+    option::t[ast::def] {\n+    alt (tcx.def_map.find(id)) {\n+      none { ret none; }\n+      some(?d) {\n+        auto did = ast::def_id_of_def(d);\n+        if is_freevar_of(tcx, did._1, f) {\n+            ret some(ast::def_upvar(did, @d));\n+        } else { ret some(d); }\n+      }\n+    }\n+}\n+\n \n // Local Variables:\n // mode: rust"}, {"sha": "a9367724c5edfdad87ca39035013f4727ee81395", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2f8943a8501e90c003ca4bddcb9f95cdb4f5dc7/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2f8943a8501e90c003ca4bddcb9f95cdb4f5dc7/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=f2f8943a8501e90c003ca4bddcb9f95cdb4f5dc7", "patch": "@@ -52,6 +52,11 @@ tag def {\n     def_use(def_id);\n     def_native_ty(def_id);\n     def_native_fn(def_id);\n+\n+    /* A \"fake\" def for upvars. This never appears in the def_map, but\n+     * freevars::def_lookup will return it for a def that is an upvar.\n+     * It contains the actual def. */\n+    def_upvar(def_id, @def);\n }\n \n fn variant_def_ids(&def d) -> tup(def_id, def_id) {\n@@ -76,6 +81,7 @@ fn def_id_of_def(def d) -> def_id {\n         case (def_use(?id)) { ret id; }\n         case (def_native_ty(?id)) { ret id; }\n         case (def_native_fn(?id)) { ret id; }\n+        case (def_upvar(?id, _)) { ret id; }\n     }\n     fail;\n }"}]}