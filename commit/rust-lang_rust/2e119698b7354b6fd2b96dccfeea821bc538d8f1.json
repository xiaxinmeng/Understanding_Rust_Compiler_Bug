{"sha": "2e119698b7354b6fd2b96dccfeea821bc538d8f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlMTE5Njk4YjczNTRiNmZkMmI5NmRjY2ZlZWE4MjFiYzUzOGQ4ZjE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-04T02:12:51Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-04T02:13:15Z"}, "message": "rustc: Add def ids to variant arguments so we can turn them into function arguments later", "tree": {"sha": "7a828b7929bde526d650d4c822b406fa75fa634a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a828b7929bde526d650d4c822b406fa75fa634a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e119698b7354b6fd2b96dccfeea821bc538d8f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e119698b7354b6fd2b96dccfeea821bc538d8f1", "html_url": "https://github.com/rust-lang/rust/commit/2e119698b7354b6fd2b96dccfeea821bc538d8f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e119698b7354b6fd2b96dccfeea821bc538d8f1/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c19c8e18f5e145c379fe4b50e5ea8d44fe4969f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c19c8e18f5e145c379fe4b50e5ea8d44fe4969f", "html_url": "https://github.com/rust-lang/rust/commit/0c19c8e18f5e145c379fe4b50e5ea8d44fe4969f"}], "stats": {"total": 38, "additions": 20, "deletions": 18}, "files": [{"sha": "e7695e0b2286ff38c802857df6fa497c926b66f9", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e119698b7354b6fd2b96dccfeea821bc538d8f1/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e119698b7354b6fd2b96dccfeea821bc538d8f1/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=2e119698b7354b6fd2b96dccfeea821bc538d8f1", "patch": "@@ -198,7 +198,8 @@ tag mod_index_entry {\n type _mod = rec(vec[@item] items,\n                 hashmap[ident,mod_index_entry] index);\n \n-type variant = rec(str name, vec[@ty] args, def_id id, ann ann);\n+type variant_arg = rec(@ty ty, def_id id);\n+type variant = rec(str name, vec[variant_arg] args, def_id id, ann ann);\n \n type item = spanned[item_];\n tag item_ {"}, {"sha": "879cb2c00fdbc7cc1dd6b7ad726103169ddccd04", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2e119698b7354b6fd2b96dccfeea821bc538d8f1/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e119698b7354b6fd2b96dccfeea821bc538d8f1/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=2e119698b7354b6fd2b96dccfeea821bc538d8f1", "patch": "@@ -1271,19 +1271,19 @@ impure fn parse_item_tag(parser p) -> @ast.item {\n             case (token.IDENT(?name)) {\n                 p.bump();\n \n-                auto args;\n+                let vec[ast.variant_arg] args = vec();\n                 alt (p.peek()) {\n                     case (token.LPAREN) {\n                         auto f = parse_ty;\n-                        auto tys = parse_seq[@ast.ty](token.LPAREN,\n-                                                      token.RPAREN,\n-                                                      some(token.COMMA),\n-                                                      f, p);\n-                        args = tys.node;\n-                    }\n-                    case (_) {\n-                        args = vec();\n+                        auto arg_tys = parse_seq[@ast.ty](token.LPAREN,\n+                                                          token.RPAREN,\n+                                                          some(token.COMMA),\n+                                                          f, p);\n+                        for (@ast.ty ty in arg_tys.node) {\n+                            args += vec(rec(ty=ty, id=p.next_def_id()));\n+                        }\n                     }\n+                    case (_) { /* empty */ }\n                 }\n \n                 expect(p, token.SEMI);"}, {"sha": "24e23e92e930142c336b70a7bb9f8d7d7e7a7d9a", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2e119698b7354b6fd2b96dccfeea821bc538d8f1/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e119698b7354b6fd2b96dccfeea821bc538d8f1/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=2e119698b7354b6fd2b96dccfeea821bc538d8f1", "patch": "@@ -602,9 +602,10 @@ fn fold_item[ENV](&ENV env, ast_fold[ENV] fld, @item i) -> @item {\n         case (ast.item_tag(?ident, ?variants, ?ty_params, ?id)) {\n             let vec[ast.variant] new_variants = vec();\n             for (ast.variant v in variants) {\n-                let vec[@ast.ty] new_args = vec();\n-                for (@ast.ty t in v.args) {\n-                    new_args += vec(fold_ty[ENV](env_, fld, t));\n+                let vec[ast.variant_arg] new_args = vec();\n+                for (ast.variant_arg va in v.args) {\n+                    auto new_ty = fold_ty[ENV](env_, fld, va.ty);\n+                    new_args += vec(rec(ty=new_ty, id=va.id));\n                 }\n                 new_variants += rec(name=v.name, args=new_args, id=v.id,\n                                     ann=v.ann);"}, {"sha": "c658bbca9653b33398ffb1fb952bab695cd50720", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e119698b7354b6fd2b96dccfeea821bc538d8f1/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e119698b7354b6fd2b96dccfeea821bc538d8f1/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=2e119698b7354b6fd2b96dccfeea821bc538d8f1", "patch": "@@ -1861,7 +1861,7 @@ impure fn trans_fn(@crate_ctxt cx, &ast._fn f, ast.def_id fid,\n \n fn trans_tag_variant(@crate_ctxt cx, ast.def_id tag_id,\n                      &ast.variant variant) {\n-    if (_vec.len[@ast.ty](variant.args) == 0u) {\n+    if (_vec.len[ast.variant_arg](variant.args) == 0u) {\n         ret;    // nullary constructors are just constants\n     }\n \n@@ -1951,7 +1951,7 @@ fn resolve_tag_types_for_item(&@crate_ctxt cx, @ast.item i) -> @crate_ctxt {\n \n             for (ast.variant variant in variants) {\n                 auto arity_info;\n-                if (_vec.len[@ast.ty](variant.args) > 0u) {\n+                if (_vec.len[ast.variant_arg](variant.args) > 0u) {\n                     auto llvariantty = type_of_variant(cx, variant);\n                     auto align = llvm.LLVMPreferredAlignmentOfType(cx.td.lltd,\n                                                                  llvariantty);"}, {"sha": "9353204f2259e47ca551174da61ea710fd66a138", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e119698b7354b6fd2b96dccfeea821bc538d8f1/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e119698b7354b6fd2b96dccfeea821bc538d8f1/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=2e119698b7354b6fd2b96dccfeea821bc538d8f1", "patch": "@@ -418,7 +418,7 @@ fn collect_item_types(@ast.crate crate) -> tup(@ast.crate, @ty_table) {\n             // Nullary tag constructors get turned into constants; n-ary tag\n             // constructors get turned into functions.\n             auto result_ty;\n-            if (_vec.len[@ast.ty](variant.args) == 0u) {\n+            if (_vec.len[ast.variant_arg](variant.args) == 0u) {\n                 result_ty = plain_ty(ty_tag(tag_id));\n             } else {\n                 // As above, tell ast_ty_to_ty() that trans_ty_item_to_ty()\n@@ -427,8 +427,8 @@ fn collect_item_types(@ast.crate crate) -> tup(@ast.crate, @ty_table) {\n                                                      item_to_ty, _);\n \n                 let vec[arg] args = vec();\n-                for (@ast.ty arg_ast_ty in variant.args) {\n-                    auto arg_ty = ast_ty_to_ty(f, arg_ast_ty);\n+                for (ast.variant_arg va in variant.args) {\n+                    auto arg_ty = ast_ty_to_ty(f, va.ty);\n                     args += vec(rec(mode=ast.alias, ty=arg_ty));\n                 }\n                 result_ty = plain_ty(ty_fn(args, plain_ty(ty_tag(tag_id)))); "}]}