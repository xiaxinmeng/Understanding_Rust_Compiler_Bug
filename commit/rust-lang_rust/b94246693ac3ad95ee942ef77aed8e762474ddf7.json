{"sha": "b94246693ac3ad95ee942ef77aed8e762474ddf7", "node_id": "C_kwDOAAsO6NoAKGI5NDI0NjY5M2FjM2FkOTVlZTk0MmVmNzdhZWQ4ZTc2MjQ3NGRkZjc", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-29T23:15:07Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-07-01T05:16:17Z"}, "message": "Simplify pointer handling.\n\nThe existing derive code allows for various possibilities that aren't\nneeded in practice, which complicates the code. There are only a few\nauto-derived traits and new ones are unlikely, so this commit simplifies\nthings.\n\n- `PtrTy` has been eliminated. The `Raw` variant was never used, and the\n  lifetime for the `Borrowed` variant was always `None`. That left just\n  the mutability field, which has been inlined as necessary.\n- `MethodDef::explicit_self` was a confusing `Option<Option<PtrTy>>`.\n  Indicating either `&self` or nothing. It's now a `bool`.\n- `borrowed_self` is renamed as `self_ref`.\n- `Ty::Ptr` is renamed to `Ty::Ref`.", "tree": {"sha": "d27afa5382c5cff96278c01f0663ba90348bca42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d27afa5382c5cff96278c01f0663ba90348bca42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b94246693ac3ad95ee942ef77aed8e762474ddf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b94246693ac3ad95ee942ef77aed8e762474ddf7", "html_url": "https://github.com/rust-lang/rust/commit/b94246693ac3ad95ee942ef77aed8e762474ddf7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b94246693ac3ad95ee942ef77aed8e762474ddf7/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78ec19ffe63e793d5241a729e23969623b85d9df", "url": "https://api.github.com/repos/rust-lang/rust/commits/78ec19ffe63e793d5241a729e23969623b85d9df", "html_url": "https://github.com/rust-lang/rust/commit/78ec19ffe63e793d5241a729e23969623b85d9df"}], "stats": {"total": 143, "additions": 43, "deletions": 100}, "files": [{"sha": "05d1fdbd513365bfbdd40c859220b7af8139e11e", "filename": "compiler/rustc_builtin_macros/src/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b94246693ac3ad95ee942ef77aed8e762474ddf7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94246693ac3ad95ee942ef77aed8e762474ddf7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs?ref=b94246693ac3ad95ee942ef77aed8e762474ddf7", "patch": "@@ -79,7 +79,7 @@ pub fn expand_deriving_clone(\n         methods: vec![MethodDef {\n             name: sym::clone,\n             generics: Bounds::empty(),\n-            explicit_self: borrowed_explicit_self(),\n+            explicit_self: true,\n             args: Vec::new(),\n             ret_ty: Self_,\n             attributes: attrs,"}, {"sha": "caf4d3a5f772efabb0c7c53fab3c75e6753b034e", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b94246693ac3ad95ee942ef77aed8e762474ddf7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94246693ac3ad95ee942ef77aed8e762474ddf7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs?ref=b94246693ac3ad95ee942ef77aed8e762474ddf7", "patch": "@@ -31,7 +31,7 @@ pub fn expand_deriving_eq(\n         methods: vec![MethodDef {\n             name: sym::assert_receiver_is_total_eq,\n             generics: Bounds::empty(),\n-            explicit_self: borrowed_explicit_self(),\n+            explicit_self: true,\n             args: vec![],\n             ret_ty: nil_ty(),\n             attributes: attrs,"}, {"sha": "ae1bfea20d892ba99c5bce5096c46090f5833760", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/ord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b94246693ac3ad95ee942ef77aed8e762474ddf7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94246693ac3ad95ee942ef77aed8e762474ddf7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs?ref=b94246693ac3ad95ee942ef77aed8e762474ddf7", "patch": "@@ -27,8 +27,8 @@ pub fn expand_deriving_ord(\n         methods: vec![MethodDef {\n             name: sym::cmp,\n             generics: Bounds::empty(),\n-            explicit_self: borrowed_explicit_self(),\n-            args: vec![(borrowed_self(), sym::other)],\n+            explicit_self: true,\n+            args: vec![(self_ref(), sym::other)],\n             ret_ty: Literal(path_std!(cmp::Ordering)),\n             attributes: attrs,\n             unify_fieldless_variants: true,"}, {"sha": "f086e7c16fd9cf3e4410bf1412d2e355472998d4", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b94246693ac3ad95ee942ef77aed8e762474ddf7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94246693ac3ad95ee942ef77aed8e762474ddf7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=b94246693ac3ad95ee942ef77aed8e762474ddf7", "patch": "@@ -69,8 +69,8 @@ pub fn expand_deriving_partial_eq(\n             MethodDef {\n                 name: $name,\n                 generics: Bounds::empty(),\n-                explicit_self: borrowed_explicit_self(),\n-                args: vec![(borrowed_self(), sym::other)],\n+                explicit_self: true,\n+                args: vec![(self_ref(), sym::other)],\n                 ret_ty: Literal(path_local!(bool)),\n                 attributes: attrs,\n                 unify_fieldless_variants: true,"}, {"sha": "3c674f318afc90e20c0ff6c71fbbc86f9effb4d1", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b94246693ac3ad95ee942ef77aed8e762474ddf7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94246693ac3ad95ee942ef77aed8e762474ddf7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=b94246693ac3ad95ee942ef77aed8e762474ddf7", "patch": "@@ -29,8 +29,8 @@ pub fn expand_deriving_partial_ord(\n     let partial_cmp_def = MethodDef {\n         name: sym::partial_cmp,\n         generics: Bounds::empty(),\n-        explicit_self: borrowed_explicit_self(),\n-        args: vec![(borrowed_self(), sym::other)],\n+        explicit_self: true,\n+        args: vec![(self_ref(), sym::other)],\n         ret_ty,\n         attributes: attrs,\n         unify_fieldless_variants: true,"}, {"sha": "8da624c4b826c565857cd482678645a134f5ee6a", "filename": "compiler/rustc_builtin_macros/src/deriving/debug.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b94246693ac3ad95ee942ef77aed8e762474ddf7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94246693ac3ad95ee942ef77aed8e762474ddf7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs?ref=b94246693ac3ad95ee942ef77aed8e762474ddf7", "patch": "@@ -16,8 +16,7 @@ pub fn expand_deriving_debug(\n     push: &mut dyn FnMut(Annotatable),\n ) {\n     // &mut ::std::fmt::Formatter\n-    let fmtr =\n-        Ptr(Box::new(Literal(path_std!(fmt::Formatter))), Borrowed(None, ast::Mutability::Mut));\n+    let fmtr = Ref(Box::new(Literal(path_std!(fmt::Formatter))), ast::Mutability::Mut);\n \n     let trait_def = TraitDef {\n         span,\n@@ -29,7 +28,7 @@ pub fn expand_deriving_debug(\n         methods: vec![MethodDef {\n             name: sym::fmt,\n             generics: Bounds::empty(),\n-            explicit_self: borrowed_explicit_self(),\n+            explicit_self: true,\n             args: vec![(fmtr, sym::f)],\n             ret_ty: Literal(path_std!(fmt::Result)),\n             attributes: Vec::new(),"}, {"sha": "d649ae7c25e26fcea11f6915e2c8edbab1b3b1f0", "filename": "compiler/rustc_builtin_macros/src/deriving/decodable.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b94246693ac3ad95ee942ef77aed8e762474ddf7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94246693ac3ad95ee942ef77aed8e762474ddf7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs?ref=b94246693ac3ad95ee942ef77aed8e762474ddf7", "patch": "@@ -35,11 +35,8 @@ pub fn expand_deriving_rustc_decodable(\n                     vec![Path::new_(vec![krate, sym::Decoder], None, vec![], PathKind::Global)],\n                 )],\n             },\n-            explicit_self: None,\n-            args: vec![(\n-                Ptr(Box::new(Literal(Path::new_local(typaram))), Borrowed(None, Mutability::Mut)),\n-                sym::d,\n-            )],\n+            explicit_self: false,\n+            args: vec![(Ref(Box::new(Literal(Path::new_local(typaram))), Mutability::Mut), sym::d)],\n             ret_ty: Literal(Path::new_(\n                 pathvec_std!(result::Result),\n                 None,"}, {"sha": "d41b25343b08e702c081d01c2a77bdf23b3deafc", "filename": "compiler/rustc_builtin_macros/src/deriving/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b94246693ac3ad95ee942ef77aed8e762474ddf7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94246693ac3ad95ee942ef77aed8e762474ddf7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs?ref=b94246693ac3ad95ee942ef77aed8e762474ddf7", "patch": "@@ -34,7 +34,7 @@ pub fn expand_deriving_default(\n         methods: vec![MethodDef {\n             name: kw::Default,\n             generics: Bounds::empty(),\n-            explicit_self: None,\n+            explicit_self: false,\n             args: Vec::new(),\n             ret_ty: Self_,\n             attributes: attrs,"}, {"sha": "f8bc2f5bb85629f1945660dae83eeb508b4f40dc", "filename": "compiler/rustc_builtin_macros/src/deriving/encodable.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b94246693ac3ad95ee942ef77aed8e762474ddf7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94246693ac3ad95ee942ef77aed8e762474ddf7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs?ref=b94246693ac3ad95ee942ef77aed8e762474ddf7", "patch": "@@ -120,11 +120,8 @@ pub fn expand_deriving_rustc_encodable(\n                     vec![Path::new_(vec![krate, sym::Encoder], None, vec![], PathKind::Global)],\n                 )],\n             },\n-            explicit_self: borrowed_explicit_self(),\n-            args: vec![(\n-                Ptr(Box::new(Literal(Path::new_local(typaram))), Borrowed(None, Mutability::Mut)),\n-                sym::s,\n-            )],\n+            explicit_self: true,\n+            args: vec![(Ref(Box::new(Literal(Path::new_local(typaram))), Mutability::Mut), sym::s)],\n             ret_ty: Literal(Path::new_(\n                 pathvec_std!(result::Result),\n                 None,"}, {"sha": "ff431c8de5d3f01ec141473ff8d482e151102335", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b94246693ac3ad95ee942ef77aed8e762474ddf7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94246693ac3ad95ee942ef77aed8e762474ddf7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=b94246693ac3ad95ee942ef77aed8e762474ddf7", "patch": "@@ -188,7 +188,7 @@ use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n \n-use ty::{Bounds, Path, Ptr, PtrTy, Self_, Ty};\n+use ty::{Bounds, Path, Ref, Self_, Ty};\n \n use crate::deriving;\n \n@@ -224,10 +224,8 @@ pub struct MethodDef<'a> {\n     /// List of generics, e.g., `R: rand::Rng`\n     pub generics: Bounds,\n \n-    /// Whether there is a self argument (outer Option) i.e., whether\n-    /// this is a static function, and whether it is a pointer (inner\n-    /// Option)\n-    pub explicit_self: Option<Option<PtrTy>>,\n+    /// Is there is a `&self` argument? If not, it is a static function.\n+    pub explicit_self: bool,\n \n     /// Arguments other than the self argument\n     pub args: Vec<(Ty, Symbol)>,\n@@ -844,7 +842,7 @@ impl<'a> MethodDef<'a> {\n     }\n \n     fn is_static(&self) -> bool {\n-        self.explicit_self.is_none()\n+        !self.explicit_self\n     }\n \n     fn split_self_nonself_args(\n@@ -857,17 +855,15 @@ impl<'a> MethodDef<'a> {\n         let mut self_args = Vec::new();\n         let mut nonself_args = Vec::new();\n         let mut arg_tys = Vec::new();\n-        let mut nonstatic = false;\n         let span = trait_.span;\n \n-        let ast_explicit_self = self.explicit_self.as_ref().map(|self_ptr| {\n-            let (self_expr, explicit_self) = ty::get_explicit_self(cx, span, self_ptr);\n-\n+        let ast_explicit_self = if self.explicit_self {\n+            let (self_expr, explicit_self) = ty::get_explicit_self(cx, span);\n             self_args.push(self_expr);\n-            nonstatic = true;\n-\n-            explicit_self\n-        });\n+            Some(explicit_self)\n+        } else {\n+            None\n+        };\n \n         for (ty, name) in self.args.iter() {\n             let ast_ty = ty.to_ty(cx, span, type_ident, generics);\n@@ -879,10 +875,10 @@ impl<'a> MethodDef<'a> {\n             match *ty {\n                 // for static methods, just treat any Self\n                 // arguments as a normal arg\n-                Self_ if nonstatic => {\n+                Self_ if !self.is_static() => {\n                     self_args.push(arg_expr);\n                 }\n-                Ptr(ref ty, _) if matches!(**ty, Self_) && nonstatic => {\n+                Ref(ref ty, _) if matches!(**ty, Self_) && !self.is_static() => {\n                     self_args.push(cx.expr_deref(span, arg_expr))\n                 }\n                 _ => {"}, {"sha": "ed911ff0be929b32163f0e0a2a708f1c3f73a98e", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/ty.rs", "status": "modified", "additions": 14, "deletions": 60, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/b94246693ac3ad95ee942ef77aed8e762474ddf7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94246693ac3ad95ee942ef77aed8e762474ddf7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs?ref=b94246693ac3ad95ee942ef77aed8e762474ddf7", "patch": "@@ -1,7 +1,6 @@\n //! A mini version of ast::Ty, which is easier to use, and features an explicit `Self` type to use\n //! when specifying impls to be derived.\n \n-pub use PtrTy::*;\n pub use Ty::*;\n \n use rustc_ast::ptr::P;\n@@ -11,16 +10,6 @@ use rustc_span::source_map::{respan, DUMMY_SP};\n use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_span::Span;\n \n-/// The types of pointers\n-#[derive(Clone)]\n-pub enum PtrTy {\n-    /// &'lifetime mut\n-    Borrowed(Option<Ident>, ast::Mutability),\n-    /// *mut\n-    #[allow(dead_code)]\n-    Raw(ast::Mutability),\n-}\n-\n /// A path, e.g., `::std::option::Option::<i32>` (global). Has support\n /// for type parameters and a lifetime.\n #[derive(Clone)]\n@@ -92,28 +81,17 @@ impl Path {\n #[derive(Clone)]\n pub enum Ty {\n     Self_,\n-    /// &/Box/ Ty\n-    Ptr(Box<Ty>, PtrTy),\n+    /// A reference.\n+    Ref(Box<Ty>, ast::Mutability),\n     /// `mod::mod::Type<[lifetime], [Params...]>`, including a plain type\n     /// parameter, and things like `i32`\n     Literal(Path),\n     /// includes unit\n     Tuple(Vec<Ty>),\n }\n \n-pub fn borrowed_ptrty() -> PtrTy {\n-    Borrowed(None, ast::Mutability::Not)\n-}\n-pub fn borrowed(ty: Box<Ty>) -> Ty {\n-    Ptr(ty, borrowed_ptrty())\n-}\n-\n-pub fn borrowed_explicit_self() -> Option<Option<PtrTy>> {\n-    Some(Some(borrowed_ptrty()))\n-}\n-\n-pub fn borrowed_self() -> Ty {\n-    borrowed(Box::new(Self_))\n+pub fn self_ref() -> Ty {\n+    Ref(Box::new(Self_), ast::Mutability::Not)\n }\n \n pub fn nil_ty() -> Ty {\n@@ -136,20 +114,14 @@ impl Ty {\n         self_ty: Ident,\n         self_generics: &Generics,\n     ) -> P<ast::Ty> {\n-        match *self {\n-            Ptr(ref ty, ref ptr) => {\n+        match self {\n+            Ref(ty, mutbl) => {\n                 let raw_ty = ty.to_ty(cx, span, self_ty, self_generics);\n-                match *ptr {\n-                    Borrowed(ref lt, mutbl) => {\n-                        let lt = mk_lifetime(cx, span, lt);\n-                        cx.ty_rptr(span, raw_ty, lt, mutbl)\n-                    }\n-                    Raw(mutbl) => cx.ty_ptr(span, raw_ty, mutbl),\n-                }\n+                cx.ty_rptr(span, raw_ty, None, *mutbl)\n             }\n-            Literal(ref p) => p.to_ty(cx, span, self_ty, self_generics),\n+            Literal(p) => p.to_ty(cx, span, self_ty, self_generics),\n             Self_ => cx.ty_path(self.to_path(cx, span, self_ty, self_generics)),\n-            Tuple(ref fields) => {\n+            Tuple(fields) => {\n                 let ty = ast::TyKind::Tup(\n                     fields.iter().map(|f| f.to_ty(cx, span, self_ty, self_generics)).collect(),\n                 );\n@@ -186,7 +158,7 @@ impl Ty {\n                 cx.path_all(span, false, vec![self_ty], params)\n             }\n             Literal(ref p) => p.to_path(cx, span, self_ty, generics),\n-            Ptr(..) => cx.span_bug(span, \"pointer in a path in generic `derive`\"),\n+            Ref(..) => cx.span_bug(span, \"ref in a path in generic `derive`\"),\n             Tuple(..) => cx.span_bug(span, \"tuple in a path in generic `derive`\"),\n         }\n     }\n@@ -245,28 +217,10 @@ impl Bounds {\n     }\n }\n \n-pub fn get_explicit_self(\n-    cx: &ExtCtxt<'_>,\n-    span: Span,\n-    self_ptr: &Option<PtrTy>,\n-) -> (P<Expr>, ast::ExplicitSelf) {\n+pub fn get_explicit_self(cx: &ExtCtxt<'_>, span: Span) -> (P<Expr>, ast::ExplicitSelf) {\n     // this constructs a fresh `self` path\n     let self_path = cx.expr_self(span);\n-    match *self_ptr {\n-        None => (self_path, respan(span, SelfKind::Value(ast::Mutability::Not))),\n-        Some(ref ptr) => {\n-            let self_ty = respan(\n-                span,\n-                match *ptr {\n-                    Borrowed(ref lt, mutbl) => {\n-                        let lt = lt.map(|s| cx.lifetime(span, s));\n-                        SelfKind::Region(lt, mutbl)\n-                    }\n-                    Raw(_) => cx.span_bug(span, \"attempted to use *self in deriving definition\"),\n-                },\n-            );\n-            let self_expr = cx.expr_deref(span, self_path);\n-            (self_expr, self_ty)\n-        }\n-    }\n+    let self_ty = respan(span, SelfKind::Region(None, ast::Mutability::Not));\n+    let self_expr = cx.expr_deref(span, self_path);\n+    (self_expr, self_ty)\n }"}, {"sha": "c01e68ad358ef5bcf8fce398d4b6b97c0a63d4eb", "filename": "compiler/rustc_builtin_macros/src/deriving/hash.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b94246693ac3ad95ee942ef77aed8e762474ddf7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94246693ac3ad95ee942ef77aed8e762474ddf7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs?ref=b94246693ac3ad95ee942ef77aed8e762474ddf7", "patch": "@@ -30,8 +30,8 @@ pub fn expand_deriving_hash(\n         methods: vec![MethodDef {\n             name: sym::hash,\n             generics: Bounds { bounds: vec![(typaram, vec![path_std!(hash::Hasher)])] },\n-            explicit_self: borrowed_explicit_self(),\n-            args: vec![(Ptr(Box::new(Literal(arg)), Borrowed(None, Mutability::Mut)), sym::state)],\n+            explicit_self: true,\n+            args: vec![(Ref(Box::new(Literal(arg)), Mutability::Mut), sym::state)],\n             ret_ty: nil_ty(),\n             attributes: vec![],\n             unify_fieldless_variants: true,"}]}