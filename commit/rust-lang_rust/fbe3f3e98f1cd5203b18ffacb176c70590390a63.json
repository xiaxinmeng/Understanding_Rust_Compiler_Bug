{"sha": "fbe3f3e98f1cd5203b18ffacb176c70590390a63", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZTNmM2U5OGYxY2Q1MjAzYjE4ZmZhY2IxNzZjNzA1OTAzOTBhNjM=", "commit": {"author": {"name": "Philip Craig", "email": "philipjcraig@gmail.com", "date": "2019-08-25T03:01:46Z"}, "committer": {"name": "Philip Craig", "email": "philipjcraig@gmail.com", "date": "2019-08-25T03:12:24Z"}, "message": "debuginfo: give unique names to closure and generator types\n\nClosure types have been moved to the namespace where they\nare defined, and both closure and generator type names now\ninclude the disambiguator.\n\nThis fixes an exception when lldb prints nested closures.\n\nFixes #57822", "tree": {"sha": "586c7dfd2b325f991c1770b7f6075dcc7d9854cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/586c7dfd2b325f991c1770b7f6075dcc7d9854cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbe3f3e98f1cd5203b18ffacb176c70590390a63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbe3f3e98f1cd5203b18ffacb176c70590390a63", "html_url": "https://github.com/rust-lang/rust/commit/fbe3f3e98f1cd5203b18ffacb176c70590390a63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbe3f3e98f1cd5203b18ffacb176c70590390a63/comments", "author": {"login": "philipc", "id": 330342, "node_id": "MDQ6VXNlcjMzMDM0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/330342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philipc", "html_url": "https://github.com/philipc", "followers_url": "https://api.github.com/users/philipc/followers", "following_url": "https://api.github.com/users/philipc/following{/other_user}", "gists_url": "https://api.github.com/users/philipc/gists{/gist_id}", "starred_url": "https://api.github.com/users/philipc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philipc/subscriptions", "organizations_url": "https://api.github.com/users/philipc/orgs", "repos_url": "https://api.github.com/users/philipc/repos", "events_url": "https://api.github.com/users/philipc/events{/privacy}", "received_events_url": "https://api.github.com/users/philipc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philipc", "id": 330342, "node_id": "MDQ6VXNlcjMzMDM0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/330342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philipc", "html_url": "https://github.com/philipc", "followers_url": "https://api.github.com/users/philipc/followers", "following_url": "https://api.github.com/users/philipc/following{/other_user}", "gists_url": "https://api.github.com/users/philipc/gists{/gist_id}", "starred_url": "https://api.github.com/users/philipc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philipc/subscriptions", "organizations_url": "https://api.github.com/users/philipc/orgs", "repos_url": "https://api.github.com/users/philipc/repos", "events_url": "https://api.github.com/users/philipc/events{/privacy}", "received_events_url": "https://api.github.com/users/philipc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "url": "https://api.github.com/repos/rust-lang/rust/commits/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "html_url": "https://github.com/rust-lang/rust/commit/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008"}], "stats": {"total": 77, "additions": 72, "deletions": 5}, "files": [{"sha": "928532a1f4760f60cf2db0c5b01566ce3ddf87d6", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fbe3f3e98f1cd5203b18ffacb176c70590390a63/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe3f3e98f1cd5203b18ffacb176c70590390a63/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=fbe3f3e98f1cd5203b18ffacb176c70590390a63", "patch": "@@ -683,11 +683,13 @@ pub fn type_metadata(\n         }\n         ty::Closure(def_id, substs) => {\n             let upvar_tys : Vec<_> = substs.upvar_tys(def_id, cx.tcx).collect();\n+            let containing_scope = get_namespace_for_item(cx, def_id);\n             prepare_tuple_metadata(cx,\n                                    t,\n                                    &upvar_tys,\n                                    unique_type_id,\n-                                   usage_site_span).finalize(cx)\n+                                   usage_site_span,\n+                                   Some(containing_scope)).finalize(cx)\n         }\n         ty::Generator(def_id, substs,  _) => {\n             let upvar_tys : Vec<_> = substs.prefix_tys(def_id, cx.tcx).map(|t| {\n@@ -728,7 +730,8 @@ pub fn type_metadata(\n                                    t,\n                                    &tys,\n                                    unique_type_id,\n-                                   usage_site_span).finalize(cx)\n+                                   usage_site_span,\n+                                   NO_SCOPE_METADATA).finalize(cx)\n         }\n         _ => {\n             bug!(\"debuginfo: unexpected type in type_metadata: {:?}\", t)\n@@ -1205,14 +1208,15 @@ fn prepare_tuple_metadata(\n     component_types: &[Ty<'tcx>],\n     unique_type_id: UniqueTypeId,\n     span: Span,\n+    containing_scope: Option<&'ll DIScope>,\n ) -> RecursiveTypeDescription<'ll, 'tcx> {\n     let tuple_name = compute_debuginfo_type_name(cx.tcx, tuple_type, false);\n \n     let struct_stub = create_struct_stub(cx,\n                                          tuple_type,\n                                          &tuple_name[..],\n                                          unique_type_id,\n-                                         NO_SCOPE_METADATA);\n+                                         containing_scope);\n \n     create_and_register_recursive_type_forward_declaration(\n         cx,"}, {"sha": "b7c782528de0ce2f901c1195a2a3ebcaea9d4710", "filename": "src/librustc_codegen_ssa/debuginfo/type_names.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fbe3f3e98f1cd5203b18ffacb176c70590390a63/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe3f3e98f1cd5203b18ffacb176c70590390a63/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs?ref=fbe3f3e98f1cd5203b18ffacb176c70590390a63", "patch": "@@ -190,11 +190,19 @@ pub fn push_debuginfo_type_name<'tcx>(\n             // processing\n             visited.remove(t);\n         },\n-        ty::Closure(..) => {\n+        ty::Closure(def_id, ..) => {\n             output.push_str(\"closure\");\n+            let disambiguator = tcx.def_key(def_id).disambiguated_data.disambiguator;\n+            if disambiguator != 0 {\n+                output.push_str(&format!(\"-{}\", disambiguator));\n+            }\n         }\n-        ty::Generator(..) => {\n+        ty::Generator(def_id, ..) => {\n             output.push_str(\"generator\");\n+            let disambiguator = tcx.def_key(def_id).disambiguated_data.disambiguator;\n+            if disambiguator != 0 {\n+                output.push_str(&format!(\"-{}\", disambiguator));\n+            }\n         }\n         ty::Error |\n         ty::Infer(_) |"}, {"sha": "ba5e8e0f2192a82cd661370aab51a365504bfcc1", "filename": "src/test/debuginfo/issue-57822.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/fbe3f3e98f1cd5203b18ffacb176c70590390a63/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe3f3e98f1cd5203b18ffacb176c70590390a63/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs?ref=fbe3f3e98f1cd5203b18ffacb176c70590390a63", "patch": "@@ -0,0 +1,55 @@\n+// This test makes sure that the LLDB pretty printer does not throw an exception\n+// for nested closures and generators.\n+\n+// Require LLVM with DW_TAG_variant_part and a gdb that can read it.\n+// min-system-llvm-version: 8.0\n+// min-gdb-version: 8.2\n+// ignore-tidy-linelength\n+\n+// compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n+// gdb-command:run\n+\n+// gdb-command:print g\n+// gdb-check:$1 = issue_57822::main::closure-1 (issue_57822::main::closure (1))\n+\n+// gdb-command:print b\n+// gdb-check:$2 = issue_57822::main::generator-3 {__0: issue_57822::main::generator-2 {__0: 2, <<variant>>: {[...]}}, <<variant>>: {[...]}}\n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print g\n+// lldbg-check:(issue_57822::main::closure-1) $0 = closure-1(closure(1))\n+\n+// lldb-command:print b\n+// lldbg-check:(issue_57822::main::generator-3) $1 = generator-3(generator-2(2))\n+\n+#![feature(omit_gdb_pretty_printer_section, generators, generator_trait)]\n+#![omit_gdb_pretty_printer_section]\n+\n+use std::ops::Generator;\n+use std::pin::Pin;\n+\n+fn main() {\n+    let mut x = 1;\n+    let f = move || x;\n+    let g = move || f();\n+\n+    let mut y = 2;\n+    let mut a = move || {\n+        y += 1;\n+        yield;\n+    };\n+    let mut b = move || {\n+        Pin::new(&mut a).resume();\n+        yield;\n+    };\n+\n+    zzz(); // #break\n+}\n+\n+fn zzz() { () }"}]}