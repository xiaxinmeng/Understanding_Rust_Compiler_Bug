{"sha": "c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab", "node_id": "C_kwDOAAsO6NoAKGM0MDljZjBlMjZlMDM1YzVjMWQ5NGE4ZWMwZGE3N2VjMGUxZDhiYWI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-05T16:41:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-05T16:41:11Z"}, "message": "Merge #10458\n\n10458: feat: Implement custom user snippets r=Veykril a=Veykril\n\n![Y24dX7fOWX](https://user-images.githubusercontent.com/3757771/136059454-ceccfc2c-2c90-46da-8ad1-bac9c2e83ec1.gif)\r\n\r\nAllows us to address the following issues:\r\n    - `.arc / .rc / .pin, similar to .box?` https://github.com/rust-analyzer/rust-analyzer/issues/7033\r\n    - `Add unsafe snippet` https://github.com/rust-analyzer/rust-analyzer/issues/10392, would allow users to have this without the diagnostic)\r\n    - `.ok() postfix snippet is annoying` https://github.com/rust-analyzer/rust-analyzer/issues/9636, allows us to get rid of the `ok` postfix and similar ones\r\n    - `Postfix vec completion` https://github.com/rust-analyzer/rust-analyzer/issues/7773\r\n\r\ncc https://github.com/rust-analyzer/rust-analyzer/issues/772\r\n\r\nZulipd discussion: https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Custom.20Postfix.20snippets\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "64714504a8fe037529472e8bbfe01e70e7eb9e02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64714504a8fe037529472e8bbfe01e70e7eb9e02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhXIAnCRBK7hj4Ov3rIwAA07gIAJw3yOHh0R30ZIiz1yyyadzH\nCi8uPF63l4jrbJHGnM7aOQPz1pcZ1Fhik7pEaBJ27KzB1g/9t0whe7uDO2aJaHIK\nH3ArJau9PmWkfIuJOUdC4fAXmr55Yimo18QcoFHWYYbvElpyjnNwfYf4mqhJkO8s\nw2PkSKeg0USyFFEB1BfY6+TP/rerVu7JwWcr0law7HJJ9EJd0mY14r02OJUBOOO+\n20CFvIuG6AyzDkiwm5RUw8O0FfNe0KJrTgER9cy4RuH+R0vN8Kyggrj5d3xUA95i\nsc+Kv4ZIC/tRqSiGvem0L5ARNPhihrdF5F7ogbmUYm6F12jhAhDzHPl6XfAYD+s=\n=PSHB\n-----END PGP SIGNATURE-----\n", "payload": "tree 64714504a8fe037529472e8bbfe01e70e7eb9e02\nparent 86c534f244bd72dc9e9ec1be0bfdf0131602ca30\nparent 041cfbe0f46c7f565ce1828857d35adb9cf2d7e7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1633452071 +0000\ncommitter GitHub <noreply@github.com> 1633452071 +0000\n\nMerge #10458\n\n10458: feat: Implement custom user snippets r=Veykril a=Veykril\n\n![Y24dX7fOWX](https://user-images.githubusercontent.com/3757771/136059454-ceccfc2c-2c90-46da-8ad1-bac9c2e83ec1.gif)\r\n\r\nAllows us to address the following issues:\r\n    - `.arc / .rc / .pin, similar to .box?` https://github.com/rust-analyzer/rust-analyzer/issues/7033\r\n    - `Add unsafe snippet` https://github.com/rust-analyzer/rust-analyzer/issues/10392, would allow users to have this without the diagnostic)\r\n    - `.ok() postfix snippet is annoying` https://github.com/rust-analyzer/rust-analyzer/issues/9636, allows us to get rid of the `ok` postfix and similar ones\r\n    - `Postfix vec completion` https://github.com/rust-analyzer/rust-analyzer/issues/7773\r\n\r\ncc https://github.com/rust-analyzer/rust-analyzer/issues/772\r\n\r\nZulipd discussion: https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Custom.20Postfix.20snippets\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab", "html_url": "https://github.com/rust-lang/rust/commit/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "url": "https://api.github.com/repos/rust-lang/rust/commits/86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "html_url": "https://github.com/rust-lang/rust/commit/86c534f244bd72dc9e9ec1be0bfdf0131602ca30"}, {"sha": "041cfbe0f46c7f565ce1828857d35adb9cf2d7e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/041cfbe0f46c7f565ce1828857d35adb9cf2d7e7", "html_url": "https://github.com/rust-lang/rust/commit/041cfbe0f46c7f565ce1828857d35adb9cf2d7e7"}], "stats": {"total": 638, "additions": 550, "deletions": 88}, "files": [{"sha": "9ad34f71605a57551910fe6f15c733fec9ce5919", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab", "patch": "@@ -633,6 +633,7 @@ dependencies = [\n  \"once_cell\",\n  \"profile\",\n  \"rustc-hash\",\n+ \"smallvec\",\n  \"sourcegen\",\n  \"stdx\",\n  \"syntax\","}, {"sha": "35b6a758d41c156a0d2cd30026075c62cc1db974", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab", "patch": "@@ -98,7 +98,8 @@ pub use ide_assists::{\n     Assist, AssistConfig, AssistId, AssistKind, AssistResolveStrategy, SingleResolve,\n };\n pub use ide_completion::{\n-    CompletionConfig, CompletionItem, CompletionItemKind, CompletionRelevance, ImportEdit,\n+    CompletionConfig, CompletionItem, CompletionItemKind, CompletionRelevance, ImportEdit, Snippet,\n+    SnippetScope,\n };\n pub use ide_db::{\n     base_db::{\n@@ -532,19 +533,10 @@ impl Analysis {\n         &self,\n         config: &CompletionConfig,\n         position: FilePosition,\n-        full_import_path: &str,\n-        imported_name: String,\n+        imports: impl IntoIterator<Item = (String, String)> + std::panic::UnwindSafe,\n     ) -> Cancellable<Vec<TextEdit>> {\n         Ok(self\n-            .with_db(|db| {\n-                ide_completion::resolve_completion_edits(\n-                    db,\n-                    config,\n-                    position,\n-                    full_import_path,\n-                    imported_name,\n-                )\n-            })?\n+            .with_db(|db| ide_completion::resolve_completion_edits(db, config, position, imports))?\n             .unwrap_or_default())\n     }\n "}, {"sha": "0d4413978d4fdfa51deac0b77161695d35e8eca6", "filename": "crates/ide_completion/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Fide_completion%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Fide_completion%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2FCargo.toml?ref=c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab", "patch": "@@ -14,6 +14,7 @@ itertools = \"0.10.0\"\n rustc-hash = \"1.1.0\"\n either = \"1.6.1\"\n once_cell = \"1.7\"\n+smallvec = \"1.4\"\n \n stdx = { path = \"../stdx\", version = \"0.0.0\" }\n syntax = { path = \"../syntax\", version = \"0.0.0\" }"}, {"sha": "b74030c17350eb787a29d793e207db0cc3355f2c", "filename": "crates/ide_completion/src/completions/postfix.rs", "status": "modified", "additions": 63, "deletions": 3, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab", "patch": "@@ -2,8 +2,9 @@\n \n mod format_like;\n \n+use hir::Documentation;\n use ide_db::{\n-    helpers::{FamousDefs, SnippetCap},\n+    helpers::{insert_use::ImportScope, FamousDefs, SnippetCap},\n     ty_filter::TryEnum,\n };\n use syntax::{\n@@ -56,6 +57,10 @@ pub(crate) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n \n     let postfix_snippet = build_postfix_snippet_builder(ctx, cap, &dot_receiver);\n \n+    if !ctx.config.snippets.is_empty() {\n+        add_custom_postfix_completions(acc, ctx, &postfix_snippet, &receiver_text);\n+    }\n+\n     let try_enum = TryEnum::from_ty(&ctx.sema, &receiver_ty.strip_references());\n     if let Some(try_enum) = &try_enum {\n         match try_enum {\n@@ -218,13 +223,40 @@ fn build_postfix_snippet_builder<'a>(\n     }\n }\n \n+fn add_custom_postfix_completions(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    postfix_snippet: impl Fn(&str, &str, &str) -> Builder,\n+    receiver_text: &str,\n+) -> Option<()> {\n+    let import_scope =\n+        ImportScope::find_insert_use_container_with_macros(&ctx.token.parent()?, &ctx.sema)?;\n+    ctx.config.postfix_snippets().filter(|(_, snip)| snip.is_expr()).for_each(\n+        |(trigger, snippet)| {\n+            let imports = match snippet.imports(ctx, &import_scope) {\n+                Some(imports) => imports,\n+                None => return,\n+            };\n+            let body = snippet.postfix_snippet(&receiver_text);\n+            let mut builder =\n+                postfix_snippet(trigger, snippet.description.as_deref().unwrap_or_default(), &body);\n+            builder.documentation(Documentation::new(format!(\"```rust\\n{}\\n```\", body)));\n+            for import in imports.into_iter() {\n+                builder.add_import(import);\n+            }\n+            builder.add_to(acc);\n+        },\n+    );\n+    None\n+}\n+\n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};\n \n     use crate::{\n-        tests::{check_edit, filtered_completion_list},\n-        CompletionKind,\n+        tests::{check_edit, check_edit_with_config, filtered_completion_list, TEST_CONFIG},\n+        CompletionConfig, CompletionKind, Snippet,\n     };\n \n     fn check(ra_fixture: &str, expect: Expect) {\n@@ -442,6 +474,34 @@ fn main() {\n         )\n     }\n \n+    #[test]\n+    fn custom_postfix_completion() {\n+        check_edit_with_config(\n+            CompletionConfig {\n+                snippets: vec![Snippet::new(\n+                    &[],\n+                    &[\"break\".into()],\n+                    &[\"ControlFlow::Break(${receiver})\".into()],\n+                    \"\",\n+                    &[\"core::ops::ControlFlow\".into()],\n+                    crate::SnippetScope::Expr,\n+                )\n+                .unwrap()],\n+                ..TEST_CONFIG\n+            },\n+            \"break\",\n+            r#\"\n+//- minicore: try\n+fn main() { 42.$0 }\n+\"#,\n+            r#\"\n+use core::ops::ControlFlow;\n+\n+fn main() { ControlFlow::Break(42) }\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn postfix_completion_for_format_like_strings() {\n         check_edit("}, {"sha": "a0e5f56129e24e14e3b0822090190dcfff5a7cb8", "filename": "crates/ide_completion/src/completions/snippet.rs", "status": "modified", "additions": 74, "deletions": 2, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs?ref=c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab", "patch": "@@ -1,11 +1,12 @@\n //! This file provides snippet completions, like `pd` => `eprintln!(...)`.\n \n-use ide_db::helpers::SnippetCap;\n+use hir::Documentation;\n+use ide_db::helpers::{insert_use::ImportScope, SnippetCap};\n use syntax::T;\n \n use crate::{\n     context::PathCompletionContext, item::Builder, CompletionContext, CompletionItem,\n-    CompletionItemKind, CompletionKind, Completions,\n+    CompletionItemKind, CompletionKind, Completions, SnippetScope,\n };\n \n fn snippet(ctx: &CompletionContext, cap: SnippetCap, label: &str, snippet: &str) -> Builder {\n@@ -29,6 +30,10 @@ pub(crate) fn complete_expr_snippet(acc: &mut Completions, ctx: &CompletionConte\n         None => return,\n     };\n \n+    if !ctx.config.snippets.is_empty() {\n+        add_custom_completions(acc, ctx, cap, SnippetScope::Expr);\n+    }\n+\n     if can_be_stmt {\n         snippet(ctx, cap, \"pd\", \"eprintln!(\\\"$0 = {:?}\\\", $0);\").add_to(acc);\n         snippet(ctx, cap, \"ppd\", \"eprintln!(\\\"$0 = {:#?}\\\", $0);\").add_to(acc);\n@@ -52,6 +57,10 @@ pub(crate) fn complete_item_snippet(acc: &mut Completions, ctx: &CompletionConte\n         None => return,\n     };\n \n+    if !ctx.config.snippets.is_empty() {\n+        add_custom_completions(acc, ctx, cap, SnippetScope::Item);\n+    }\n+\n     let mut item = snippet(\n         ctx,\n         cap,\n@@ -86,3 +95,66 @@ fn ${1:feature}() {\n     let item = snippet(ctx, cap, \"macro_rules\", \"macro_rules! $1 {\\n\\t($2) => {\\n\\t\\t$0\\n\\t};\\n}\");\n     item.add_to(acc);\n }\n+\n+fn add_custom_completions(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    cap: SnippetCap,\n+    scope: SnippetScope,\n+) -> Option<()> {\n+    let import_scope =\n+        ImportScope::find_insert_use_container_with_macros(&ctx.token.parent()?, &ctx.sema)?;\n+    ctx.config.prefix_snippets().filter(|(_, snip)| snip.scope == scope).for_each(\n+        |(trigger, snip)| {\n+            let imports = match snip.imports(ctx, &import_scope) {\n+                Some(imports) => imports,\n+                None => return,\n+            };\n+            let body = snip.snippet();\n+            let mut builder = snippet(ctx, cap, &trigger, &body);\n+            builder.documentation(Documentation::new(format!(\"```rust\\n{}\\n```\", body)));\n+            for import in imports.into_iter() {\n+                builder.add_import(import);\n+            }\n+            builder.detail(snip.description.as_deref().unwrap_or_default());\n+            builder.add_to(acc);\n+        },\n+    );\n+    None\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::{\n+        tests::{check_edit_with_config, TEST_CONFIG},\n+        CompletionConfig, Snippet,\n+    };\n+\n+    #[test]\n+    fn custom_snippet_completion() {\n+        check_edit_with_config(\n+            CompletionConfig {\n+                snippets: vec![Snippet::new(\n+                    &[\"break\".into()],\n+                    &[],\n+                    &[\"ControlFlow::Break(())\".into()],\n+                    \"\",\n+                    &[\"core::ops::ControlFlow\".into()],\n+                    crate::SnippetScope::Expr,\n+                )\n+                .unwrap()],\n+                ..TEST_CONFIG\n+            },\n+            \"break\",\n+            r#\"\n+//- minicore: try\n+fn main() { $0 }\n+\"#,\n+            r#\"\n+use core::ops::ControlFlow;\n+\n+fn main() { ControlFlow::Break(()) }\n+\"#,\n+        );\n+    }\n+}"}, {"sha": "c659b4455a9f33fa52920e35747c2ea9de136b72", "filename": "crates/ide_completion/src/config.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Fide_completion%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Fide_completion%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fconfig.rs?ref=c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab", "patch": "@@ -6,6 +6,8 @@\n \n use ide_db::helpers::{insert_use::InsertUseConfig, SnippetCap};\n \n+use crate::snippet::Snippet;\n+\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct CompletionConfig {\n     pub enable_postfix_completions: bool,\n@@ -15,4 +17,18 @@ pub struct CompletionConfig {\n     pub add_call_argument_snippets: bool,\n     pub snippet_cap: Option<SnippetCap>,\n     pub insert_use: InsertUseConfig,\n+    pub snippets: Vec<Snippet>,\n+}\n+\n+impl CompletionConfig {\n+    pub fn postfix_snippets(&self) -> impl Iterator<Item = (&str, &Snippet)> {\n+        self.snippets.iter().flat_map(|snip| {\n+            snip.postfix_triggers.iter().map(move |trigger| (trigger.as_str(), snip))\n+        })\n+    }\n+    pub fn prefix_snippets(&self) -> impl Iterator<Item = (&str, &Snippet)> {\n+        self.snippets.iter().flat_map(|snip| {\n+            snip.prefix_triggers.iter().map(move |trigger| (trigger.as_str(), snip))\n+        })\n+    }\n }"}, {"sha": "a34e529ea580195b1d85d68d962b9ad357918ebf", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab", "patch": "@@ -868,7 +868,8 @@ mod tests {\n \n     fn check_expected_type_and_name(ra_fixture: &str, expect: Expect) {\n         let (db, pos) = position(ra_fixture);\n-        let completion_context = CompletionContext::new(&db, pos, &TEST_CONFIG).unwrap();\n+        let config = TEST_CONFIG;\n+        let completion_context = CompletionContext::new(&db, pos, &config).unwrap();\n \n         let ty = completion_context\n             .expected_type"}, {"sha": "4c75bd69000e11f1bb79804d1b00c1bf3c970da0", "filename": "crates/ide_completion/src/item.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Fide_completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Fide_completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fitem.rs?ref=c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab", "patch": "@@ -11,6 +11,7 @@ use ide_db::{\n     },\n     SymbolKind,\n };\n+use smallvec::SmallVec;\n use stdx::{format_to, impl_from, never};\n use syntax::{algo, TextRange};\n use text_edit::TextEdit;\n@@ -76,7 +77,7 @@ pub struct CompletionItem {\n     ref_match: Option<Mutability>,\n \n     /// The import data to add to completion's edits.\n-    import_to_add: Option<ImportEdit>,\n+    import_to_add: SmallVec<[ImportEdit; 1]>,\n }\n \n // We use custom debug for CompletionItem to make snapshot tests more readable.\n@@ -305,7 +306,7 @@ impl CompletionItem {\n             trigger_call_info: None,\n             relevance: CompletionRelevance::default(),\n             ref_match: None,\n-            import_to_add: None,\n+            imports_to_add: Default::default(),\n         }\n     }\n \n@@ -364,8 +365,8 @@ impl CompletionItem {\n         self.ref_match.map(|mutability| (mutability, relevance))\n     }\n \n-    pub fn import_to_add(&self) -> Option<&ImportEdit> {\n-        self.import_to_add.as_ref()\n+    pub fn imports_to_add(&self) -> &[ImportEdit] {\n+        &self.import_to_add\n     }\n }\n \n@@ -398,7 +399,7 @@ impl ImportEdit {\n pub(crate) struct Builder {\n     source_range: TextRange,\n     completion_kind: CompletionKind,\n-    import_to_add: Option<ImportEdit>,\n+    imports_to_add: SmallVec<[ImportEdit; 1]>,\n     trait_name: Option<String>,\n     label: String,\n     insert_text: Option<String>,\n@@ -422,14 +423,13 @@ impl Builder {\n         let mut lookup = self.lookup;\n         let mut insert_text = self.insert_text;\n \n-        if let Some(original_path) = self\n-            .import_to_add\n-            .as_ref()\n-            .and_then(|import_edit| import_edit.import.original_path.as_ref())\n-        {\n-            lookup = lookup.or_else(|| Some(label.clone()));\n-            insert_text = insert_text.or_else(|| Some(label.clone()));\n-            format_to!(label, \" (use {})\", original_path)\n+        if let [import_edit] = &*self.imports_to_add {\n+            // snippets can have multiple imports, but normal completions only have up to one\n+            if let Some(original_path) = import_edit.import.original_path.as_ref() {\n+                lookup = lookup.or_else(|| Some(label.clone()));\n+                insert_text = insert_text.or_else(|| Some(label.clone()));\n+                format_to!(label, \" (use {})\", original_path)\n+            }\n         } else if let Some(trait_name) = self.trait_name {\n             insert_text = insert_text.or_else(|| Some(label.clone()));\n             format_to!(label, \" (as {})\", trait_name)\n@@ -456,7 +456,7 @@ impl Builder {\n             trigger_call_info: self.trigger_call_info.unwrap_or(false),\n             relevance: self.relevance,\n             ref_match: self.ref_match,\n-            import_to_add: self.import_to_add,\n+            import_to_add: self.imports_to_add,\n         }\n     }\n     pub(crate) fn lookup_by(&mut self, lookup: impl Into<String>) -> &mut Builder {\n@@ -527,8 +527,8 @@ impl Builder {\n         self.trigger_call_info = Some(true);\n         self\n     }\n-    pub(crate) fn add_import(&mut self, import_to_add: Option<ImportEdit>) -> &mut Builder {\n-        self.import_to_add = import_to_add;\n+    pub(crate) fn add_import(&mut self, import_to_add: ImportEdit) -> &mut Builder {\n+        self.imports_to_add.push(import_to_add);\n         self\n     }\n     pub(crate) fn ref_match(&mut self, mutability: Mutability) -> &mut Builder {"}, {"sha": "251ddfa2fc0f7f414c9e4c80e5bc8db851298eef", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 30, "deletions": 20, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab", "patch": "@@ -9,23 +9,27 @@ mod render;\n \n #[cfg(test)]\n mod tests;\n+mod snippet;\n \n use completions::flyimport::position_for_import;\n use ide_db::{\n     base_db::FilePosition,\n     helpers::{\n-        import_assets::{LocatedImport, NameToImport},\n-        insert_use::ImportScope,\n+        import_assets::NameToImport,\n+        insert_use::{self, ImportScope},\n+        mod_path_to_ast,\n     },\n     items_locator, RootDatabase,\n };\n+use syntax::algo;\n use text_edit::TextEdit;\n \n use crate::{completions::Completions, context::CompletionContext, item::CompletionKind};\n \n pub use crate::{\n     config::CompletionConfig,\n     item::{CompletionItem, CompletionItemKind, CompletionRelevance, ImportEdit},\n+    snippet::{Snippet, SnippetScope},\n };\n \n //FIXME: split the following feature into fine-grained features.\n@@ -173,31 +177,37 @@ pub fn resolve_completion_edits(\n     db: &RootDatabase,\n     config: &CompletionConfig,\n     position: FilePosition,\n-    full_import_path: &str,\n-    imported_name: String,\n+    imports: impl IntoIterator<Item = (String, String)>,\n ) -> Option<Vec<TextEdit>> {\n+    let _p = profile::span(\"resolve_completion_edits\");\n     let ctx = CompletionContext::new(db, position, config)?;\n     let position_for_import = position_for_import(&ctx, None)?;\n     let scope = ImportScope::find_insert_use_container_with_macros(position_for_import, &ctx.sema)?;\n \n     let current_module = ctx.sema.scope(position_for_import).module()?;\n     let current_crate = current_module.krate();\n+    let new_ast = scope.clone_for_update();\n+    let mut import_insert = TextEdit::builder();\n \n-    let (import_path, item_to_import) = items_locator::items_with_name(\n-        &ctx.sema,\n-        current_crate,\n-        NameToImport::Exact(imported_name),\n-        items_locator::AssocItemSearch::Include,\n-        Some(items_locator::DEFAULT_QUERY_SEARCH_LIMIT.inner()),\n-    )\n-    .filter_map(|candidate| {\n-        current_module\n-            .find_use_path_prefixed(db, candidate, config.insert_use.prefix_kind)\n-            .zip(Some(candidate))\n-    })\n-    .find(|(mod_path, _)| mod_path.to_string() == full_import_path)?;\n-    let import =\n-        LocatedImport::new(import_path.clone(), item_to_import, item_to_import, Some(import_path));\n+    // FIXME: lift out and make some tests here, this is ImportEdit::to_text_edit but changed to work with multiple edits\n+    imports.into_iter().for_each(|(full_import_path, imported_name)| {\n+        let items_with_name = items_locator::items_with_name(\n+            &ctx.sema,\n+            current_crate,\n+            NameToImport::Exact(imported_name),\n+            items_locator::AssocItemSearch::Include,\n+            Some(items_locator::DEFAULT_QUERY_SEARCH_LIMIT.inner()),\n+        );\n+        let import = items_with_name\n+            .filter_map(|candidate| {\n+                current_module.find_use_path_prefixed(db, candidate, config.insert_use.prefix_kind)\n+            })\n+            .find(|mod_path| mod_path.to_string() == full_import_path);\n+        if let Some(import_path) = import {\n+            insert_use::insert_use(&new_ast, mod_path_to_ast(&import_path), &config.insert_use);\n+        }\n+    });\n \n-    ImportEdit { import, scope }.to_text_edit(config.insert_use).map(|edit| vec![edit])\n+    algo::diff(scope.as_syntax_node(), new_ast.as_syntax_node()).into_text_edit(&mut import_insert);\n+    Some(vec![import_insert.finish()])\n }"}, {"sha": "58443f566ef5ee3ac3ce299654da604fdd052f9e", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab", "patch": "@@ -212,7 +212,10 @@ fn render_resolution_(\n                 ctx.source_range(),\n                 local_name.to_string(),\n             );\n-            item.kind(CompletionItemKind::UnresolvedReference).add_import(import_to_add);\n+            item.kind(CompletionItemKind::UnresolvedReference);\n+            if let Some(import_to_add) = import_to_add {\n+                item.add_import(import_to_add);\n+            }\n             return Some(item.build());\n         }\n     };\n@@ -258,9 +261,12 @@ fn render_resolution_(\n         }\n     }\n     item.kind(kind)\n-        .add_import(import_to_add)\n         .set_documentation(scope_def_docs(ctx.db(), resolution))\n         .set_deprecated(scope_def_is_deprecated(&ctx, resolution));\n+\n+    if let Some(import_to_add) = import_to_add {\n+        item.add_import(import_to_add);\n+    }\n     Some(item.build())\n }\n "}, {"sha": "2ba86eaa0afb52c90f52e2d3d9f3058e4bc799bc", "filename": "crates/ide_completion/src/render/enum_variant.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs?ref=c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab", "patch": "@@ -68,9 +68,12 @@ impl<'a> EnumRender<'a> {\n         item.kind(SymbolKind::Variant)\n             .set_documentation(self.variant.docs(self.ctx.db()))\n             .set_deprecated(self.ctx.is_deprecated(self.variant))\n-            .add_import(import_to_add)\n             .detail(self.detail());\n \n+        if let Some(import_to_add) = import_to_add {\n+            item.add_import(import_to_add);\n+        }\n+\n         if self.variant_kind == hir::StructKind::Tuple {\n             cov_mark::hit!(inserts_parens_for_tuple_enums);\n             let params = Params::Anonymous(self.variant.fields(self.ctx.db()).len());"}, {"sha": "cc95bd53690378d6983497c36d9a52ce762028df", "filename": "crates/ide_completion/src/render/function.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs?ref=c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab", "patch": "@@ -97,7 +97,10 @@ impl<'a> FunctionRender<'a> {\n             }\n         }\n \n-        item.add_import(import_to_add).lookup_by(self.name);\n+        if let Some(import_to_add) = import_to_add {\n+            item.add_import(import_to_add);\n+        }\n+        item.lookup_by(self.name);\n \n         let ret_type = self.func.ret_type(self.ctx.db());\n         item.set_relevance(CompletionRelevance {"}, {"sha": "196b667baacd203705861655b8148962999cbaf4", "filename": "crates/ide_completion/src/render/macro_.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs?ref=c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab", "patch": "@@ -51,9 +51,12 @@ impl<'a> MacroRender<'a> {\n         item.kind(SymbolKind::Macro)\n             .set_documentation(self.docs.clone())\n             .set_deprecated(self.ctx.is_deprecated(self.macro_))\n-            .add_import(import_to_add)\n             .set_detail(self.detail());\n \n+        if let Some(import_to_add) = import_to_add {\n+            item.add_import(import_to_add);\n+        }\n+\n         let needs_bang = !(self.ctx.completion.in_use_tree()\n             || matches!(self.ctx.completion.path_call_kind(), Some(CallKind::Mac)));\n         let has_parens = self.ctx.completion.path_call_kind().is_some();"}, {"sha": "d527f3aef6fe5f62207a504b1e9930234020d59d", "filename": "crates/ide_completion/src/snippet.rs", "status": "added", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Fide_completion%2Fsrc%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Fide_completion%2Fsrc%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fsnippet.rs?ref=c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab", "patch": "@@ -0,0 +1,176 @@\n+//! User (postfix)-snippet definitions.\n+//!\n+//! Actual logic is implemented in [`crate::completions::postfix`] and [`crate::completions::snippet`].\n+\n+// Feature: User Snippet Completions\n+//\n+// rust-analyzer allows the user to define custom (postfix)-snippets that may depend on items to be accessible for the current scope to be applicable.\n+//\n+// A custom snippet can be defined by adding it to the `rust-analyzer.completion.snippets` object respectively.\n+//\n+// [source,json]\n+// ----\n+// {\n+//   \"rust-analyzer.completion.snippets\": {\n+//     \"thread spawn\": {\n+//       \"prefix\": [\"spawn\", \"tspawn\"],\n+//       \"body\": [\n+//         \"thread::spawn(move || {\",\n+//         \"\\t$0\",\n+//         \")};\",\n+//       ],\n+//       \"description\": \"Insert a thread::spawn call\",\n+//       \"requires\": \"std::thread\",\n+//       \"scope\": \"expr\",\n+//     }\n+//   }\n+// }\n+// ----\n+//\n+// In the example above:\n+//\n+// * `\"thread spawn\"` is the name of the snippet.\n+//\n+// * `prefix` defines one or more trigger words that will trigger the snippets completion.\n+// Using `postfix` will instead create a postfix snippet.\n+//\n+// * `body` is one or more lines of content joined via newlines for the final output.\n+//\n+// * `description` is an optional description of the snippet, if unset the snippet name will be used.\n+//\n+// * `requires` is an optional list of item paths that have to be resolvable in the current crate where the completion is rendered.\n+// On failure of resolution the snippet won't be applicable, otherwise the snippet will insert an import for the items on insertion if\n+// the items aren't yet in scope.\n+//\n+// * `scope` is an optional filter for when the snippet should be applicable. Possible values are:\n+// ** for Snippet-Scopes: `expr`, `item` (default: `item`)\n+// ** for Postfix-Snippet-Scopes: `expr`, `type` (default: `expr`)\n+//\n+// The `body` field also has access to placeholders as visible in the example as `$0`.\n+// These placeholders take the form of `$number` or `${number:placeholder_text}` which can be traversed as tabstop in ascending order starting from 1,\n+// with `$0` being a special case that always comes last.\n+//\n+// There is also a special placeholder, `${receiver}`, which will be replaced by the receiver expression for postfix snippets, or nothing in case of normal snippets.\n+// It does not act as a tabstop.\n+use ide_db::helpers::{import_assets::LocatedImport, insert_use::ImportScope};\n+use itertools::Itertools;\n+use syntax::ast;\n+\n+use crate::{context::CompletionContext, ImportEdit};\n+\n+#[derive(Clone, Debug, PartialEq, Eq)]\n+pub enum SnippetScope {\n+    Item,\n+    Expr,\n+    Type,\n+}\n+\n+#[derive(Clone, Debug, PartialEq, Eq)]\n+pub struct Snippet {\n+    pub postfix_triggers: Box<[String]>,\n+    pub prefix_triggers: Box<[String]>,\n+    pub scope: SnippetScope,\n+    snippet: String,\n+    pub description: Option<String>,\n+    pub requires: Box<[String]>,\n+}\n+\n+impl Snippet {\n+    pub fn new(\n+        prefix_triggers: &[String],\n+        postfix_triggers: &[String],\n+        snippet: &[String],\n+        description: &str,\n+        requires: &[String],\n+        scope: SnippetScope,\n+    ) -> Option<Self> {\n+        let (snippet, description) = validate_snippet(snippet, description, requires)?;\n+        Some(Snippet {\n+            // Box::into doesn't work as that has a Copy bound \ud83d\ude12\n+            postfix_triggers: postfix_triggers.iter().cloned().collect(),\n+            prefix_triggers: prefix_triggers.iter().cloned().collect(),\n+            scope,\n+            snippet,\n+            description,\n+            requires: requires.iter().cloned().collect(),\n+        })\n+    }\n+\n+    /// Returns None if the required items do not resolve.\n+    pub(crate) fn imports(\n+        &self,\n+        ctx: &CompletionContext,\n+        import_scope: &ImportScope,\n+    ) -> Option<Vec<ImportEdit>> {\n+        import_edits(ctx, import_scope, &self.requires)\n+    }\n+\n+    pub fn snippet(&self) -> String {\n+        self.snippet.replace(\"${receiver}\", \"\")\n+    }\n+\n+    pub fn postfix_snippet(&self, receiver: &str) -> String {\n+        self.snippet.replace(\"${receiver}\", receiver)\n+    }\n+\n+    pub fn is_item(&self) -> bool {\n+        self.scope == SnippetScope::Item\n+    }\n+\n+    pub fn is_expr(&self) -> bool {\n+        self.scope == SnippetScope::Expr\n+    }\n+}\n+\n+fn import_edits(\n+    ctx: &CompletionContext,\n+    import_scope: &ImportScope,\n+    requires: &[String],\n+) -> Option<Vec<ImportEdit>> {\n+    let resolve = |import| {\n+        let path = ast::Path::parse(import).ok()?;\n+        let item = match ctx.scope.speculative_resolve(&path)? {\n+            hir::PathResolution::Macro(mac) => mac.into(),\n+            hir::PathResolution::Def(def) => def.into(),\n+            _ => return None,\n+        };\n+        let path = ctx.scope.module()?.find_use_path_prefixed(\n+            ctx.db,\n+            item,\n+            ctx.config.insert_use.prefix_kind,\n+        )?;\n+        Some((path.len() > 1).then(|| ImportEdit {\n+            import: LocatedImport::new(path.clone(), item, item, None),\n+            scope: import_scope.clone(),\n+        }))\n+    };\n+    let mut res = Vec::with_capacity(requires.len());\n+    for import in requires {\n+        match resolve(import) {\n+            Some(first) => res.extend(first),\n+            None => return None,\n+        }\n+    }\n+    Some(res)\n+}\n+\n+fn validate_snippet(\n+    snippet: &[String],\n+    description: &str,\n+    requires: &[String],\n+) -> Option<(String, Option<String>)> {\n+    // validate that these are indeed simple paths\n+    // we can't save the paths unfortunately due to them not being Send+Sync\n+    if requires.iter().any(|path| match ast::Path::parse(path) {\n+        Ok(path) => path.segments().any(|seg| {\n+            !matches!(seg.kind(), Some(ast::PathSegmentKind::Name(_)))\n+                || seg.generic_arg_list().is_some()\n+        }),\n+        Err(_) => true,\n+    }) {\n+        return None;\n+    }\n+    let snippet = snippet.iter().join(\"\\n\");\n+    let description = if description.is_empty() { None } else { Some(description.to_owned()) };\n+    Some((snippet, description))\n+}"}, {"sha": "9168956235da2c48a3515908836beaf7cd2ab9da", "filename": "crates/ide_completion/src/tests.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Fide_completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Fide_completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests.rs?ref=c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab", "patch": "@@ -74,6 +74,7 @@ pub(crate) const TEST_CONFIG: CompletionConfig = CompletionConfig {\n         group: true,\n         skip_glob_imports: true,\n     },\n+    snippets: Vec::new(),\n };\n \n pub(crate) fn completion_list(ra_fixture: &str) -> String {\n@@ -181,13 +182,15 @@ pub(crate) fn check_edit_with_config(\n     let mut actual = db.file_text(position.file_id).to_string();\n \n     let mut combined_edit = completion.text_edit().to_owned();\n-    if let Some(import_text_edit) =\n-        completion.import_to_add().and_then(|edit| edit.to_text_edit(config.insert_use))\n-    {\n-        combined_edit.union(import_text_edit).expect(\n-            \"Failed to apply completion resolve changes: change ranges overlap, but should not\",\n-        )\n-    }\n+    completion\n+        .imports_to_add()\n+        .iter()\n+        .filter_map(|edit| edit.to_text_edit(config.insert_use))\n+        .for_each(|text_edit| {\n+            combined_edit.union(text_edit).expect(\n+                \"Failed to apply completion resolve changes: change ranges overlap, but should not\",\n+            )\n+        });\n \n     combined_edit.apply(&mut actual);\n     assert_eq_text!(&ra_fixture_after, &actual)"}, {"sha": "a032c2b653add51533a95af120d3bb7bfe9a5b97", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 101, "deletions": 11, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab", "patch": "@@ -12,7 +12,7 @@ use std::{ffi::OsString, iter, path::PathBuf};\n use flycheck::FlycheckConfig;\n use ide::{\n     AssistConfig, CompletionConfig, DiagnosticsConfig, HighlightRelatedConfig, HoverConfig,\n-    HoverDocFormat, InlayHintsConfig, JoinLinesConfig,\n+    HoverDocFormat, InlayHintsConfig, JoinLinesConfig, Snippet, SnippetScope,\n };\n use ide_db::helpers::{\n     insert_use::{ImportGranularity, InsertUseConfig, PrefixKind},\n@@ -112,6 +112,8 @@ config_data! {\n         completion_addCallArgumentSnippets: bool = \"true\",\n         /// Whether to add parenthesis when completing functions.\n         completion_addCallParenthesis: bool      = \"true\",\n+        /// Custom completion snippets.\n+        completion_snippets: FxHashMap<String, SnippetDef> = \"{}\",\n         /// Whether to show postfix snippets like `dbg`, `if`, `not`, etc.\n         completion_postfix_enable: bool          = \"true\",\n         /// Toggles the additional completions that automatically add imports when completed.\n@@ -277,9 +279,9 @@ config_data! {\n         rustfmt_enableRangeFormatting: bool = \"false\",\n \n         /// Workspace symbol search scope.\n-        workspace_symbol_search_scope: WorskpaceSymbolSearchScopeDef = \"\\\"workspace\\\"\",\n+        workspace_symbol_search_scope: WorkspaceSymbolSearchScopeDef = \"\\\"workspace\\\"\",\n         /// Workspace symbol search kind.\n-        workspace_symbol_search_kind: WorskpaceSymbolSearchKindDef = \"\\\"only_types\\\"\",\n+        workspace_symbol_search_kind: WorkspaceSymbolSearchKindDef = \"\\\"only_types\\\"\",\n     }\n }\n \n@@ -296,6 +298,7 @@ pub struct Config {\n     detached_files: Vec<AbsPathBuf>,\n     pub discovered_projects: Option<Vec<ProjectManifest>>,\n     pub root_path: AbsPathBuf,\n+    snippets: Vec<Snippet>,\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n@@ -431,6 +434,7 @@ impl Config {\n             detached_files: Vec::new(),\n             discovered_projects: None,\n             root_path,\n+            snippets: Default::default(),\n         }\n     }\n     pub fn update(&mut self, mut json: serde_json::Value) {\n@@ -443,6 +447,28 @@ impl Config {\n             .map(AbsPathBuf::assert)\n             .collect();\n         self.data = ConfigData::from_json(json);\n+        self.snippets.clear();\n+        for (name, def) in self.data.completion_snippets.iter() {\n+            if def.prefix.is_empty() && def.postfix.is_empty() {\n+                continue;\n+            }\n+            let scope = match def.scope {\n+                SnippetScopeDef::Expr => SnippetScope::Expr,\n+                SnippetScopeDef::Type => SnippetScope::Type,\n+                SnippetScopeDef::Item => SnippetScope::Item,\n+            };\n+            match Snippet::new(\n+                &def.prefix,\n+                &def.postfix,\n+                &def.body,\n+                def.description.as_ref().unwrap_or(name),\n+                &def.requires,\n+                scope,\n+            ) {\n+                Some(snippet) => self.snippets.push(snippet),\n+                None => tracing::info!(\"Invalid snippet {}\", name),\n+            }\n+        }\n     }\n \n     pub fn json_schema() -> serde_json::Value {\n@@ -778,6 +804,7 @@ impl Config {\n                     .snippet_support?,\n                 false\n             )),\n+            snippets: self.snippets.clone(),\n         }\n     }\n     pub fn assist(&self) -> AssistConfig {\n@@ -848,14 +875,14 @@ impl Config {\n     pub fn workspace_symbol(&self) -> WorkspaceSymbolConfig {\n         WorkspaceSymbolConfig {\n             search_scope: match self.data.workspace_symbol_search_scope {\n-                WorskpaceSymbolSearchScopeDef::Workspace => WorkspaceSymbolSearchScope::Workspace,\n-                WorskpaceSymbolSearchScopeDef::WorkspaceAndDependencies => {\n+                WorkspaceSymbolSearchScopeDef::Workspace => WorkspaceSymbolSearchScope::Workspace,\n+                WorkspaceSymbolSearchScopeDef::WorkspaceAndDependencies => {\n                     WorkspaceSymbolSearchScope::WorkspaceAndDependencies\n                 }\n             },\n             search_kind: match self.data.workspace_symbol_search_kind {\n-                WorskpaceSymbolSearchKindDef::OnlyTypes => WorkspaceSymbolSearchKind::OnlyTypes,\n-                WorskpaceSymbolSearchKindDef::AllSymbols => WorkspaceSymbolSearchKind::AllSymbols,\n+                WorkspaceSymbolSearchKindDef::OnlyTypes => WorkspaceSymbolSearchKind::OnlyTypes,\n+                WorkspaceSymbolSearchKindDef::AllSymbols => WorkspaceSymbolSearchKind::AllSymbols,\n             },\n         }\n     }\n@@ -908,6 +935,66 @@ impl Config {\n     }\n }\n \n+#[derive(Deserialize, Debug, Clone, Copy)]\n+#[serde(rename_all = \"snake_case\")]\n+enum SnippetScopeDef {\n+    Expr,\n+    Item,\n+    Type,\n+}\n+\n+impl Default for SnippetScopeDef {\n+    fn default() -> Self {\n+        SnippetScopeDef::Expr\n+    }\n+}\n+\n+#[derive(Deserialize, Debug, Clone, Default)]\n+#[serde(default)]\n+struct SnippetDef {\n+    #[serde(deserialize_with = \"single_or_array\")]\n+    prefix: Vec<String>,\n+    #[serde(deserialize_with = \"single_or_array\")]\n+    postfix: Vec<String>,\n+    description: Option<String>,\n+    #[serde(deserialize_with = \"single_or_array\")]\n+    body: Vec<String>,\n+    #[serde(deserialize_with = \"single_or_array\")]\n+    requires: Vec<String>,\n+    scope: SnippetScopeDef,\n+}\n+\n+fn single_or_array<'de, D>(deserializer: D) -> Result<Vec<String>, D::Error>\n+where\n+    D: serde::Deserializer<'de>,\n+{\n+    struct SingleOrVec;\n+\n+    impl<'de> serde::de::Visitor<'de> for SingleOrVec {\n+        type Value = Vec<String>;\n+\n+        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {\n+            formatter.write_str(\"string or array of strings\")\n+        }\n+\n+        fn visit_str<E>(self, value: &str) -> Result<Self::Value, E>\n+        where\n+            E: serde::de::Error,\n+        {\n+            Ok(vec![value.to_owned()])\n+        }\n+\n+        fn visit_seq<A>(self, seq: A) -> Result<Self::Value, A::Error>\n+        where\n+            A: serde::de::SeqAccess<'de>,\n+        {\n+            Deserialize::deserialize(serde::de::value::SeqAccessDeserializer::new(seq))\n+        }\n+    }\n+\n+    deserializer.deserialize_any(SingleOrVec)\n+}\n+\n #[derive(Deserialize, Debug, Clone)]\n #[serde(untagged)]\n enum ManifestOrProjectJson {\n@@ -939,14 +1026,14 @@ enum ImportPrefixDef {\n \n #[derive(Deserialize, Debug, Clone)]\n #[serde(rename_all = \"snake_case\")]\n-enum WorskpaceSymbolSearchScopeDef {\n+enum WorkspaceSymbolSearchScopeDef {\n     Workspace,\n     WorkspaceAndDependencies,\n }\n \n #[derive(Deserialize, Debug, Clone)]\n #[serde(rename_all = \"snake_case\")]\n-enum WorskpaceSymbolSearchKindDef {\n+enum WorkspaceSymbolSearchKindDef {\n     OnlyTypes,\n     AllSymbols,\n }\n@@ -1077,6 +1164,9 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n             \"items\": { \"type\": \"string\" },\n             \"uniqueItems\": true,\n         },\n+        \"FxHashMap<String, SnippetDef>\" => set! {\n+            \"type\": \"object\",\n+        },\n         \"FxHashMap<String, String>\" => set! {\n             \"type\": \"object\",\n         },\n@@ -1133,15 +1223,15 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n             \"type\": \"array\",\n             \"items\": { \"type\": [\"string\", \"object\"] },\n         },\n-        \"WorskpaceSymbolSearchScopeDef\" => set! {\n+        \"WorkspaceSymbolSearchScopeDef\" => set! {\n             \"type\": \"string\",\n             \"enum\": [\"workspace\", \"workspace_and_dependencies\"],\n             \"enumDescriptions\": [\n                 \"Search in current workspace only\",\n                 \"Search in current workspace and dependencies\"\n             ],\n         },\n-        \"WorskpaceSymbolSearchKindDef\" => set! {\n+        \"WorkspaceSymbolSearchKindDef\" => set! {\n             \"type\": \"string\",\n             \"enum\": [\"only_types\", \"all_symbols\"],\n             \"enumDescriptions\": ["}, {"sha": "ca286b7de9cbdd54ba843621095a16da80e17d9f", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab", "patch": "@@ -785,8 +785,10 @@ pub(crate) fn handle_completion_resolve(\n         .resolve_completion_edits(\n             &snap.config.completion(),\n             FilePosition { file_id, offset },\n-            &resolve_data.full_import_path,\n-            resolve_data.imported_name,\n+            resolve_data\n+                .imports\n+                .into_iter()\n+                .map(|import| (import.full_import_path, import.imported_name)),\n         )?\n         .into_iter()\n         .flat_map(|edit| edit.into_iter().map(|indel| to_proto::text_edit(&line_index, indel)))"}, {"sha": "b10eb3d6e92ac33890e5dd520347d5c90250066a", "filename": "crates/rust-analyzer/src/integrated_benchmarks.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs?ref=c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab", "patch": "@@ -144,6 +144,7 @@ fn integrated_completion_benchmark() {\n                 group: true,\n                 skip_glob_imports: true,\n             },\n+            snippets: Vec::new(),\n         };\n         let position =\n             FilePosition { file_id, offset: TextSize::try_from(completion_offset).unwrap() };\n@@ -180,6 +181,7 @@ fn integrated_completion_benchmark() {\n                 group: true,\n                 skip_glob_imports: true,\n             },\n+            snippets: Vec::new(),\n         };\n         let position =\n             FilePosition { file_id, offset: TextSize::try_from(completion_offset).unwrap() };"}, {"sha": "19137b942ebfaee7ff02ebbac5d77cde10f7be4e", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab", "patch": "@@ -520,6 +520,11 @@ pub enum WorkspaceSymbolSearchKind {\n #[derive(Debug, Serialize, Deserialize)]\n pub struct CompletionResolveData {\n     pub position: lsp_types::TextDocumentPositionParams,\n+    pub imports: Vec<CompletionImport>,\n+}\n+\n+#[derive(Debug, Serialize, Deserialize)]\n+pub struct CompletionImport {\n     pub full_import_path: String,\n     pub imported_name: String,\n }"}, {"sha": "fc3e25064f3a7a6205dfab206e37b909521de852", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab", "patch": "@@ -270,14 +270,20 @@ fn completion_item(\n         lsp_item.insert_text_format = Some(lsp_types::InsertTextFormat::Snippet);\n     }\n     if config.completion().enable_imports_on_the_fly {\n-        if let Some(import_edit) = item.import_to_add() {\n-            let import_path = &import_edit.import.import_path;\n-            if let Some(import_name) = import_path.segments().last() {\n-                let data = lsp_ext::CompletionResolveData {\n-                    position: tdpp.clone(),\n-                    full_import_path: import_path.to_string(),\n-                    imported_name: import_name.to_string(),\n-                };\n+        if let imports @ [_, ..] = item.imports_to_add() {\n+            let imports: Vec<_> = imports\n+                .iter()\n+                .filter_map(|import_edit| {\n+                    let import_path = &import_edit.import.import_path;\n+                    let import_name = import_path.segments().last()?;\n+                    Some(lsp_ext::CompletionImport {\n+                        full_import_path: import_path.to_string(),\n+                        imported_name: import_name.to_string(),\n+                    })\n+                })\n+                .collect();\n+            if !imports.is_empty() {\n+                let data = lsp_ext::CompletionResolveData { position: tdpp.clone(), imports };\n                 lsp_item.data = Some(to_value(data).unwrap());\n             }\n         }"}, {"sha": "9076b93d35fa200f96e9bcd1c65b954740666d47", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab", "patch": "@@ -1,5 +1,5 @@\n <!---\n-lsp_ext.rs hash: ad52054176909945\n+lsp_ext.rs hash: c6568e4035333f3a\n \n If you need to change the above hash to make the test pass, please check if you\n need to adjust this doc as well and ping this issue:"}, {"sha": "f80b97854581c98f5ebb0911d7f72dbaccce503f", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab", "patch": "@@ -136,6 +136,11 @@ Only applies when `#rust-analyzer.completion.addCallParenthesis#` is set.\n --\n Whether to add parenthesis when completing functions.\n --\n+[[rust-analyzer.completion.snippets]]rust-analyzer.completion.snippets (default: `{}`)::\n++\n+--\n+Custom completion snippets.\n+--\n [[rust-analyzer.completion.postfix.enable]]rust-analyzer.completion.postfix.enable (default: `true`)::\n +\n --"}, {"sha": "d9afdfad1bce2bb1c6a13edaf9bdf1ea6f809a80", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab", "patch": "@@ -585,6 +585,11 @@\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.completion.snippets\": {\n+                    \"markdownDescription\": \"Custom completion snippets.\",\n+                    \"default\": {},\n+                    \"type\": \"object\"\n+                },\n                 \"rust-analyzer.completion.postfix.enable\": {\n                     \"markdownDescription\": \"Whether to show postfix snippets like `dbg`, `if`, `not`, etc.\",\n                     \"default\": true,"}]}