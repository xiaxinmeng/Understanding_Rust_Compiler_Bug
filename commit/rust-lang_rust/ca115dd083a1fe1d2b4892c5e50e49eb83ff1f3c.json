{"sha": "ca115dd083a1fe1d2b4892c5e50e49eb83ff1f3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhMTE1ZGQwODNhMWZlMWQyYjQ4OTJjNWU1MGU0OWViODNmZjFmM2M=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-21T21:29:34Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-27T00:13:51Z"}, "message": "Remove extra lang item, exchange_free; use box_free instead.\n\nTrans used to insert code equivalent to box_free in a wrapper around\nexchange_free, and that code is now removed from trans.", "tree": {"sha": "981c74c6684d85fc57c81c6ec8a994085c7c1ad6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/981c74c6684d85fc57c81c6ec8a994085c7c1ad6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca115dd083a1fe1d2b4892c5e50e49eb83ff1f3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca115dd083a1fe1d2b4892c5e50e49eb83ff1f3c", "html_url": "https://github.com/rust-lang/rust/commit/ca115dd083a1fe1d2b4892c5e50e49eb83ff1f3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca115dd083a1fe1d2b4892c5e50e49eb83ff1f3c/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce4461f4cfa09045e5c03f45e343b01bc5dd22e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce4461f4cfa09045e5c03f45e343b01bc5dd22e4", "html_url": "https://github.com/rust-lang/rust/commit/ce4461f4cfa09045e5c03f45e343b01bc5dd22e4"}], "stats": {"total": 96, "additions": 32, "deletions": 64}, "files": [{"sha": "81ed4be7763e945d1c9338fb3f105696f98abe57", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca115dd083a1fe1d2b4892c5e50e49eb83ff1f3c/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca115dd083a1fe1d2b4892c5e50e49eb83ff1f3c/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=ca115dd083a1fe1d2b4892c5e50e49eb83ff1f3c", "patch": "@@ -144,6 +144,7 @@ unsafe fn exchange_malloc(size: usize, align: usize) -> *mut u8 {\n }\n \n #[cfg(not(test))]\n+#[cfg(stage0)]\n #[lang = \"exchange_free\"]\n #[inline]\n unsafe fn exchange_free(ptr: *mut u8, old_size: usize, align: usize) {"}, {"sha": "029a1d66add0b3f8deb728e388c252fcb00beff9", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca115dd083a1fe1d2b4892c5e50e49eb83ff1f3c/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca115dd083a1fe1d2b4892c5e50e49eb83ff1f3c/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=ca115dd083a1fe1d2b4892c5e50e49eb83ff1f3c", "patch": "@@ -328,7 +328,6 @@ language_item_table! {\n     PanicFmtLangItem,                \"panic_fmt\",               panic_fmt;\n \n     ExchangeMallocFnLangItem,        \"exchange_malloc\",         exchange_malloc_fn;\n-    ExchangeFreeFnLangItem,          \"exchange_free\",           exchange_free_fn;\n     BoxFreeFnLangItem,               \"box_free\",                box_free_fn;\n     StrDupUniqFnLangItem,            \"strdup_uniq\",             strdup_uniq_fn;\n "}, {"sha": "84222bfe56eee3646e79a91c77612bdd28ec2d6e", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ca115dd083a1fe1d2b4892c5e50e49eb83ff1f3c/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca115dd083a1fe1d2b4892c5e50e49eb83ff1f3c/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=ca115dd083a1fe1d2b4892c5e50e49eb83ff1f3c", "patch": "@@ -193,9 +193,9 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n \n use rustc::hir::map as hir_map;\n use rustc::hir::def_id::DefId;\n-use rustc::middle::lang_items::{ExchangeFreeFnLangItem, ExchangeMallocFnLangItem};\n+use rustc::middle::lang_items::{BoxFreeFnLangItem, ExchangeMallocFnLangItem};\n use rustc::traits;\n-use rustc::ty::subst::{Substs, Subst};\n+use rustc::ty::subst::{Kind, Substs, Subst};\n use rustc::ty::{self, TypeFoldable, TyCtxt};\n use rustc::ty::adjustment::CustomCoerceUnsized;\n use rustc::mir::{self, Location};\n@@ -215,6 +215,8 @@ use util::nodemap::{FxHashSet, FxHashMap, DefIdMap};\n \n use trans_item::{TransItem, DefPathBasedNames};\n \n+use std::iter;\n+\n #[derive(PartialEq, Eq, Hash, Clone, Copy, Debug)]\n pub enum TransItemCollectionMode {\n     Eager,\n@@ -723,23 +725,17 @@ fn find_drop_glue_neighbors<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n \n     debug!(\"find_drop_glue_neighbors: {}\", type_to_string(scx.tcx(), ty));\n \n-    // Make sure the exchange_free_fn() lang-item gets translated if\n-    // there is a boxed value.\n-    if let ty::TyBox(_) = ty.sty {\n-        let exchange_free_fn_def_id = scx.tcx()\n-                                         .lang_items\n-                                         .require(ExchangeFreeFnLangItem)\n-                                         .unwrap_or_else(|e| scx.sess().fatal(&e));\n-\n-        assert!(can_have_local_instance(scx.tcx(), exchange_free_fn_def_id));\n-        let fn_substs = scx.empty_substs_for_def_id(exchange_free_fn_def_id);\n-        let exchange_free_fn_trans_item =\n+    // Make sure the BoxFreeFn lang-item gets translated if there is a boxed value.\n+    if let ty::TyBox(content_type) = ty.sty {\n+        let def_id = scx.tcx().require_lang_item(BoxFreeFnLangItem);\n+        assert!(can_have_local_instance(scx.tcx(), def_id));\n+        let box_free_fn_trans_item =\n             create_fn_trans_item(scx,\n-                                 exchange_free_fn_def_id,\n-                                 fn_substs,\n+                                 def_id,\n+                                 scx.tcx().mk_substs(iter::once(Kind::from(content_type))),\n                                  scx.tcx().intern_substs(&[]));\n \n-        output.push(exchange_free_fn_trans_item);\n+        output.push(box_free_fn_trans_item);\n     }\n \n     // If the type implements Drop, also add a translation item for the"}, {"sha": "3989dae553ffca928818fe265bd40b83702ac7f9", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 19, "deletions": 47, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/ca115dd083a1fe1d2b4892c5e50e49eb83ff1f3c/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca115dd083a1fe1d2b4892c5e50e49eb83ff1f3c/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=ca115dd083a1fe1d2b4892c5e50e49eb83ff1f3c", "patch": "@@ -13,13 +13,15 @@\n // Code relating to drop glue.\n \n use std;\n+use std::iter;\n \n use llvm;\n use llvm::{ValueRef, get_param};\n-use middle::lang_items::ExchangeFreeFnLangItem;\n+use middle::lang_items::BoxFreeFnLangItem;\n use rustc::ty::subst::{Substs};\n use rustc::traits;\n use rustc::ty::{self, AdtKind, Ty, TypeFoldable};\n+use rustc::ty::subst::Kind;\n use adt::{self, MaybeSizedValue};\n use base::*;\n use callee::Callee;\n@@ -36,38 +38,22 @@ use cleanup::CleanupScope;\n \n use syntax_pos::DUMMY_SP;\n \n-pub fn trans_exchange_free_dyn<'a, 'tcx>(\n+pub fn trans_exchange_free_ty<'a, 'tcx>(\n     bcx: &BlockAndBuilder<'a, 'tcx>,\n-    v: ValueRef,\n-    size: ValueRef,\n-    align: ValueRef\n+    ptr: MaybeSizedValue,\n+    content_ty: Ty<'tcx>\n ) {\n-    let def_id = langcall(bcx.tcx(), None, \"\", ExchangeFreeFnLangItem);\n-    let args = [bcx.pointercast(v, Type::i8p(bcx.ccx)), size, align];\n-    let callee = Callee::def(bcx.ccx, def_id, bcx.tcx().intern_substs(&[]));\n+    let def_id = langcall(bcx.tcx(), None, \"\", BoxFreeFnLangItem);\n+    let substs = bcx.tcx().mk_substs(iter::once(Kind::from(content_ty)));\n+    let callee = Callee::def(bcx.ccx, def_id, substs);\n \n-    let ccx = bcx.ccx;\n-    let fn_ty = callee.direct_fn_type(ccx, &[]);\n+    let fn_ty = callee.direct_fn_type(bcx.ccx, &[]);\n \n-    let llret = bcx.call(callee.reify(ccx), &args[..], None);\n+    let llret = bcx.call(callee.reify(bcx.ccx),\n+        &[ptr.value, ptr.meta][..1 + ptr.has_meta() as usize], None);\n     fn_ty.apply_attrs_callsite(llret);\n }\n \n-pub fn trans_exchange_free_ty<'a, 'tcx>(\n-    bcx: &BlockAndBuilder<'a, 'tcx>, ptr: ValueRef, content_ty: Ty<'tcx>\n-) {\n-    assert!(bcx.ccx.shared().type_is_sized(content_ty));\n-    let sizing_type = sizing_type_of(bcx.ccx, content_ty);\n-    let content_size = llsize_of_alloc(bcx.ccx, sizing_type);\n-\n-    // `Box<ZeroSizeType>` does not allocate.\n-    if content_size != 0 {\n-        let content_align = align_of(bcx.ccx, content_ty);\n-        let ccx = bcx.ccx;\n-        trans_exchange_free_dyn(bcx, ptr, C_uint(ccx, content_size), C_uint(ccx, content_align));\n-    }\n-}\n-\n pub fn get_drop_glue_type<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Ty<'tcx> {\n     assert!(t.is_normalized_for_trans());\n \n@@ -224,30 +210,16 @@ pub fn implement_drop_glue<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, g: DropGlueKi\n             // special. It may move to library and have Drop impl. As\n             // a safe-guard, assert TyBox not used with TyContents.\n             assert!(!skip_dtor);\n-            if !bcx.ccx.shared().type_is_sized(content_ty) {\n+            let ptr = if !bcx.ccx.shared().type_is_sized(content_ty) {\n                 let llbox = bcx.load(get_dataptr(&bcx, ptr.value));\n                 let info = bcx.load(get_meta(&bcx, ptr.value));\n-                drop_ty(&bcx, MaybeSizedValue::unsized_(llbox, info), content_ty);\n-                let (llsize, llalign) = size_and_align_of_dst(&bcx, content_ty, info);\n-\n-                // `Box<ZeroSizeType>` does not allocate.\n-                let needs_free = bcx.icmp(llvm::IntNE, llsize, C_uint(bcx.ccx, 0u64));\n-                if const_to_opt_uint(needs_free) == Some(0) {\n-                    bcx\n-                } else {\n-                    let next_cx = bcx.fcx().build_new_block(\"next\");\n-                    let cond_cx = bcx.fcx().build_new_block(\"cond\");\n-                    bcx.cond_br(needs_free, cond_cx.llbb(), next_cx.llbb());\n-                    trans_exchange_free_dyn(&cond_cx, llbox, llsize, llalign);\n-                    cond_cx.br(next_cx.llbb());\n-                    next_cx\n-                }\n+                MaybeSizedValue::unsized_(llbox, info)\n             } else {\n-                let llbox = bcx.load(ptr.value);\n-                drop_ty(&bcx, MaybeSizedValue::sized(llbox), content_ty);\n-                trans_exchange_free_ty(&bcx, llbox, content_ty);\n-                bcx\n-            }\n+                MaybeSizedValue::sized(bcx.load(ptr.value))\n+            };\n+            drop_ty(&bcx, ptr, content_ty);\n+            trans_exchange_free_ty(&bcx, ptr, content_ty);\n+            bcx\n         }\n         ty::TyDynamic(..) => {\n             // No support in vtable for distinguishing destroying with"}]}