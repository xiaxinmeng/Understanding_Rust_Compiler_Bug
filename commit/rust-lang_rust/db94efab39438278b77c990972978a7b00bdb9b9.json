{"sha": "db94efab39438278b77c990972978a7b00bdb9b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiOTRlZmFiMzk0MzgyNzhiNzdjOTkwOTcyOTc4YTdiMDBiZGI5Yjk=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-07-23T17:29:16Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-19T19:02:33Z"}, "message": "Refactor mod/check (part vii)", "tree": {"sha": "735389a44a99c14cd8d34694f16c7281385f01ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/735389a44a99c14cd8d34694f16c7281385f01ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db94efab39438278b77c990972978a7b00bdb9b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db94efab39438278b77c990972978a7b00bdb9b9", "html_url": "https://github.com/rust-lang/rust/commit/db94efab39438278b77c990972978a7b00bdb9b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db94efab39438278b77c990972978a7b00bdb9b9/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bb40b09b78f650b75d22a869a8b1bf18937aba3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bb40b09b78f650b75d22a869a8b1bf18937aba3", "html_url": "https://github.com/rust-lang/rust/commit/9bb40b09b78f650b75d22a869a8b1bf18937aba3"}], "stats": {"total": 105, "additions": 67, "deletions": 38}, "files": [{"sha": "fd3281d2c0ef85e6ef8d5845f08d980b8b69af80", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 67, "deletions": 38, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/db94efab39438278b77c990972978a7b00bdb9b9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db94efab39438278b77c990972978a7b00bdb9b9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=db94efab39438278b77c990972978a7b00bdb9b9", "patch": "@@ -95,7 +95,7 @@ use rustc::infer::anon_types::AnonTypeDecl;\n use rustc::infer::type_variable::{TypeVariableOrigin};\n use rustc::middle::region;\n use rustc::mir::interpret::{GlobalId};\n-use rustc::ty::subst::{UnpackedKind, Subst, Substs};\n+use rustc::ty::subst::{Kind, UnpackedKind, Subst, Substs};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, TraitEngine};\n use rustc::ty::{self, Ty, TyCtxt, GenericParamDefKind, Visibility, ToPredicate, RegionKind};\n use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n@@ -4967,7 +4967,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let def_id = def.def_id();\n         let mut parent_defs = self.tcx.generics_of(def_id);\n         let count = parent_defs.count();\n-        let mut substs = if count <= 8 {\n+        let mut substs: AccumulateVec<[Kind<'tcx>; 8]> = if count <= 8 {\n             AccumulateVec::Array(ArrayVec::new())\n         } else {\n             AccumulateVec::Heap(Vec::with_capacity(count))\n@@ -4977,74 +4977,103 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             parent_defs = self.tcx.generics_of(def_id);\n             stack.push((def_id, parent_defs));\n         }\n+        macro_rules! push_to_substs {\n+            ($kind:expr) => {\n+                let k = $kind;\n+                match substs {\n+                    AccumulateVec::Array(ref mut arr) => arr.push(k),\n+                    AccumulateVec::Heap(ref mut vec) => vec.push(k),\n+                }\n+            }\n+        };\n         while let Some((def_id, defs)) = stack.pop() {\n-            Substs::fill_single(&mut substs, defs, &mut |param: &ty::GenericParamDef, substs| {\n-                if param.index == 0 && has_self {\n-                    if let GenericParamDefKind::Type { .. } = param.kind {\n-                        // Handle `Self` first, so we can adjust the index to match the AST.\n-                        return opt_self_ty.map(|ty| ty.into()).unwrap_or_else(|| {\n-                            self.var_for_def(span, param)\n-                        });\n+            let mut params = defs.params.iter().peekable();\n+            let mut remove_self = false;\n+            if has_self {\n+                if let Some(param) = params.peek() {\n+                    if param.index == 0 {\n+                        if let GenericParamDefKind::Type { .. } = param.kind {\n+                            // Handle `Self` first, so we can adjust the index to match the AST.\n+                            push_to_substs!(opt_self_ty.map(|ty| ty.into()).unwrap_or_else(|| {\n+                                self.var_for_def(span, param)\n+                            }));\n+                            remove_self = true;\n+                        }\n                     }\n                 }\n+            }\n+            if remove_self {\n+                params.next();\n+            }\n \n-                let infer_types = if let Some(&PathSeg(_, index)) = path_segs\n-                    .iter()\n-                    .find(|&PathSeg(did, _)| *did == def_id) {\n-\n-                    if supress_errors[&index] {\n-                        true\n-                    } else {\n-                        if let Some(ref data) = segments[index].args {\n-                            let self_offset = (defs.parent_count == 0 && has_self) as usize;\n-                            let param_idx =\n-                                (param.index as usize - defs.parent_count - self_offset)\n-                                .saturating_sub(infer_lifetimes[&index]);\n-                            if let Some(arg) = data.args.get(param_idx) {\n+            let mut infer_types = true;\n+            if let Some(&PathSeg(_, index)) = path_segs\n+                .iter()\n+                .find(|&PathSeg(did, _)| *did == def_id) {\n+                if !supress_errors[&index] {\n+                    infer_types = segments[index].infer_types;\n+                    if let Some(ref data) = segments[index].args {\n+                        let args = &data.args;\n+                        'args: for arg in args {\n+                            while let Some(param) = params.next() {\n                                 match param.kind {\n                                     GenericParamDefKind::Lifetime => match arg {\n                                         GenericArg::Lifetime(lt) => {\n-                                            return AstConv::ast_region_to_region(self,\n-                                                lt, Some(param)).into();\n+                                            push_to_substs!(AstConv::ast_region_to_region(self,\n+                                                lt, Some(param)).into());\n+                                            continue 'args;\n+                                        }\n+                                        GenericArg::Type(_) => {\n+                                            // We're inferring a lifetime.\n+                                            push_to_substs!(\n+                                                self.re_infer(span, Some(param)).unwrap().into());\n                                         }\n-                                        _ => {}\n                                     }\n                                     GenericParamDefKind::Type { .. } => match arg {\n-                                        GenericArg::Type(ty) => return self.to_ty(ty).into(),\n-                                        _ => {}\n+                                        GenericArg::Type(ty) => {\n+                                            push_to_substs!(self.to_ty(ty).into());\n+                                            continue 'args;\n+                                        }\n+                                        GenericArg::Lifetime(_) => {\n+                                            self.tcx.sess.delay_span_bug(span,\n+                                                \"found a GenericArg::Lifetime where a \\\n+                                                 GenericArg::Type was expected\");\n+                                        }\n                                     }\n                                 }\n                             }\n+                            // If we get to this point, we have a GenericArg that is not matched\n+                            // by a GenericParamDef: i.e. the user supplied too many generic args.\n+                            self.tcx.sess.delay_span_bug(span,\n+                                \"GenericArg did not have matching GenericParamDef\");\n                         }\n-\n-                        segments[index].infer_types\n                     }\n-                } else {\n-                    true\n-                };\n+                }\n+            }\n \n+            while let Some(param) = params.next() {\n                 match param.kind {\n                     GenericParamDefKind::Lifetime => {\n-                        self.re_infer(span, Some(param)).unwrap().into()\n+                        push_to_substs!(self.re_infer(span, Some(param)).unwrap().into());\n                     }\n                     GenericParamDefKind::Type { has_default, .. } => {\n                         if !infer_types && has_default {\n                             // No type parameter provided, but a default exists.\n                             let default = self.tcx.type_of(param.def_id);\n-                            self.normalize_ty(\n+                            push_to_substs!(self.normalize_ty(\n                                 span,\n-                                default.subst_spanned(self.tcx, substs, Some(span))\n-                            ).into()\n+                                default.subst_spanned(self.tcx, &substs, Some(span))\n+                            ).into());\n                         } else {\n                             // No type parameters were provided, we can infer all.\n                             // This can also be reached in some error cases:\n                             // We prefer to use inference variables instead of\n                             // TyError to let type inference recover somewhat.\n-                            self.var_for_def(span, param)\n+                            push_to_substs!(self.var_for_def(span, param));\n                         }\n                     }\n                 }\n-            });\n+            }\n         }\n         let substs = self.tcx.intern_substs(&substs);\n "}]}