{"sha": "a9cf19889ae7030c7df25cf41105906d12616f1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5Y2YxOTg4OWFlNzAzMGM3ZGYyNWNmNDExMDU5MDZkMTI2MTZmMWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-13T05:25:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-13T05:25:57Z"}, "message": "auto merge of #17162 : sfackler/rust/decorator-traits, r=huonw\n\nThe other extension types already worked this way and it can be useful to track some state along with the extension.\r\n\r\nI also removed the `BasicMacroExpander` and `BasicIdentMacroExpander` since the span inside of them was never used. The expander function types now directly implement the relevant trait.", "tree": {"sha": "865f0f43daf7341ebb228f831301b947d5c28023", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/865f0f43daf7341ebb228f831301b947d5c28023"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9cf19889ae7030c7df25cf41105906d12616f1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9cf19889ae7030c7df25cf41105906d12616f1e", "html_url": "https://github.com/rust-lang/rust/commit/a9cf19889ae7030c7df25cf41105906d12616f1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9cf19889ae7030c7df25cf41105906d12616f1e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccae356aced284a964910006af22dc005ea073a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccae356aced284a964910006af22dc005ea073a2", "html_url": "https://github.com/rust-lang/rust/commit/ccae356aced284a964910006af22dc005ea073a2"}, {"sha": "200a08fc212374f5650c54489ae26f995c60bad9", "url": "https://api.github.com/repos/rust-lang/rust/commits/200a08fc212374f5650c54489ae26f995c60bad9", "html_url": "https://github.com/rust-lang/rust/commit/200a08fc212374f5650c54489ae26f995c60bad9"}], "stats": {"total": 105, "additions": 57, "deletions": 48}, "files": [{"sha": "2b2fc8c94d4acefb122f65dd686cfadf42abd3df", "filename": "src/librustc/plugin/registry.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a9cf19889ae7030c7df25cf41105906d12616f1e/src%2Flibrustc%2Fplugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9cf19889ae7030c7df25cf41105906d12616f1e/src%2Flibrustc%2Fplugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fregistry.rs?ref=a9cf19889ae7030c7df25cf41105906d12616f1e", "patch": "@@ -13,7 +13,7 @@\n use lint::{LintPassObject, LintId, Lint};\n \n use syntax::ext::base::{SyntaxExtension, NamedSyntaxExtension, NormalTT};\n-use syntax::ext::base::{IdentTT, LetSyntaxTT, ItemDecorator, ItemModifier, BasicMacroExpander};\n+use syntax::ext::base::{IdentTT, LetSyntaxTT, ItemDecorator, ItemModifier};\n use syntax::ext::base::{MacroExpanderFn};\n use syntax::codemap::Span;\n use syntax::parse::token;\n@@ -71,15 +71,10 @@ impl Registry {\n     /// Register a macro of the usual kind.\n     ///\n     /// This is a convenience wrapper for `register_syntax_extension`.\n-    /// It builds for you a `NormalTT` with a `BasicMacroExpander`,\n+    /// It builds for you a `NormalTT` that calls `expander`,\n     /// and also takes care of interning the macro's name.\n     pub fn register_macro(&mut self, name: &str, expander: MacroExpanderFn) {\n-        self.register_syntax_extension(\n-            token::intern(name),\n-            NormalTT(box BasicMacroExpander {\n-                expander: expander,\n-                span: None,\n-            }, None));\n+        self.register_syntax_extension(token::intern(name), NormalTT(box expander, None));\n     }\n \n     /// Register a compiler lint pass."}, {"sha": "4976e68cc64644976deb6de33fc686646c5dcab1", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 49, "deletions": 34, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/a9cf19889ae7030c7df25cf41105906d12616f1e/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9cf19889ae7030c7df25cf41105906d12616f1e/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=a9cf19889ae7030c7df25cf41105906d12616f1e", "patch": "@@ -39,15 +39,44 @@ pub struct MacroDef {\n     pub ext: SyntaxExtension\n }\n \n-pub type ItemDecorator =\n-    fn(&mut ExtCtxt, Span, Gc<ast::MetaItem>, Gc<ast::Item>, |Gc<ast::Item>|);\n+pub trait ItemDecorator {\n+    fn expand(&self,\n+              ecx: &mut ExtCtxt,\n+              sp: Span,\n+              meta_item: Gc<ast::MetaItem>,\n+              item: Gc<ast::Item>,\n+              push: |Gc<ast::Item>|);\n+}\n \n-pub type ItemModifier =\n-    fn(&mut ExtCtxt, Span, Gc<ast::MetaItem>, Gc<ast::Item>) -> Gc<ast::Item>;\n+impl ItemDecorator for fn(&mut ExtCtxt, Span, Gc<ast::MetaItem>, Gc<ast::Item>, |Gc<ast::Item>|) {\n+    fn expand(&self,\n+              ecx: &mut ExtCtxt,\n+              sp: Span,\n+              meta_item: Gc<ast::MetaItem>,\n+              item: Gc<ast::Item>,\n+              push: |Gc<ast::Item>|) {\n+        (*self)(ecx, sp, meta_item, item, push)\n+    }\n+}\n \n-pub struct BasicMacroExpander {\n-    pub expander: MacroExpanderFn,\n-    pub span: Option<Span>\n+pub trait ItemModifier {\n+    fn expand(&self,\n+              ecx: &mut ExtCtxt,\n+              span: Span,\n+              meta_item: Gc<ast::MetaItem>,\n+              item: Gc<ast::Item>)\n+              -> Gc<ast::Item>;\n+}\n+\n+impl ItemModifier for fn(&mut ExtCtxt, Span, Gc<ast::MetaItem>, Gc<ast::Item>) -> Gc<ast::Item> {\n+    fn expand(&self,\n+              ecx: &mut ExtCtxt,\n+              span: Span,\n+              meta_item: Gc<ast::MetaItem>,\n+              item: Gc<ast::Item>)\n+              -> Gc<ast::Item> {\n+        (*self)(ecx, span, meta_item, item)\n+    }\n }\n \n /// Represents a thing that maps token trees to Macro Results\n@@ -60,24 +89,18 @@ pub trait TTMacroExpander {\n }\n \n pub type MacroExpanderFn =\n-    fn<'cx>(ecx: &'cx mut ExtCtxt, span: codemap::Span, token_tree: &[ast::TokenTree])\n-            -> Box<MacResult+'cx>;\n+    fn<'cx>(&'cx mut ExtCtxt, Span, &[ast::TokenTree]) -> Box<MacResult+'cx>;\n \n-impl TTMacroExpander for BasicMacroExpander {\n+impl TTMacroExpander for MacroExpanderFn {\n     fn expand<'cx>(&self,\n                    ecx: &'cx mut ExtCtxt,\n                    span: Span,\n                    token_tree: &[ast::TokenTree])\n                    -> Box<MacResult+'cx> {\n-        (self.expander)(ecx, span, token_tree)\n+        (*self)(ecx, span, token_tree)\n     }\n }\n \n-pub struct BasicIdentMacroExpander {\n-    pub expander: IdentMacroExpanderFn,\n-    pub span: Option<Span>\n-}\n-\n pub trait IdentMacroExpander {\n     fn expand<'cx>(&self,\n                    cx: &'cx mut ExtCtxt,\n@@ -87,20 +110,20 @@ pub trait IdentMacroExpander {\n                    -> Box<MacResult+'cx>;\n }\n \n-impl IdentMacroExpander for BasicIdentMacroExpander {\n+pub type IdentMacroExpanderFn =\n+    fn<'cx>(&'cx mut ExtCtxt, Span, ast::Ident, Vec<ast::TokenTree>) -> Box<MacResult+'cx>;\n+\n+impl IdentMacroExpander for IdentMacroExpanderFn {\n     fn expand<'cx>(&self,\n                    cx: &'cx mut ExtCtxt,\n                    sp: Span,\n                    ident: ast::Ident,\n                    token_tree: Vec<ast::TokenTree> )\n                    -> Box<MacResult+'cx> {\n-        (self.expander)(cx, sp, ident, token_tree)\n+        (*self)(cx, sp, ident, token_tree)\n     }\n }\n \n-pub type IdentMacroExpanderFn =\n-    fn<'cx>(&'cx mut ExtCtxt, Span, ast::Ident, Vec<ast::TokenTree>) -> Box<MacResult+'cx>;\n-\n /// The result of a macro expansion. The return values of the various\n /// methods are spliced into the AST at the callsite of the macro (or\n /// just into the compiler's internal macro table, for `make_def`).\n@@ -281,11 +304,11 @@ pub enum SyntaxExtension {\n     /// based upon it.\n     ///\n     /// `#[deriving(...)]` is an `ItemDecorator`.\n-    ItemDecorator(ItemDecorator),\n+    ItemDecorator(Box<ItemDecorator + 'static>),\n \n     /// A syntax extension that is attached to an item and modifies it\n     /// in-place.\n-    ItemModifier(ItemModifier),\n+    ItemModifier(Box<ItemModifier + 'static>),\n \n     /// A normal, function-like syntax extension.\n     ///\n@@ -329,20 +352,12 @@ impl BlockInfo {\n fn initial_syntax_expander_table() -> SyntaxEnv {\n     // utility function to simplify creating NormalTT syntax extensions\n     fn builtin_normal_expander(f: MacroExpanderFn) -> SyntaxExtension {\n-        NormalTT(box BasicMacroExpander {\n-                expander: f,\n-                span: None,\n-            },\n-            None)\n+        NormalTT(box f, None)\n     }\n \n     let mut syntax_expanders = SyntaxEnv::new();\n     syntax_expanders.insert(intern(\"macro_rules\"),\n-                            LetSyntaxTT(box BasicIdentMacroExpander {\n-                                expander: ext::tt::macro_rules::add_new_extension,\n-                                span: None,\n-                            },\n-                            None));\n+                            LetSyntaxTT(box ext::tt::macro_rules::add_new_extension, None));\n     syntax_expanders.insert(intern(\"fmt\"),\n                             builtin_normal_expander(\n                                 ext::fmt::expand_syntax_ext));\n@@ -371,7 +386,7 @@ fn initial_syntax_expander_table() -> SyntaxEnv {\n                             builtin_normal_expander(\n                                     ext::log_syntax::expand_syntax_ext));\n     syntax_expanders.insert(intern(\"deriving\"),\n-                            ItemDecorator(ext::deriving::expand_meta_deriving));\n+                            ItemDecorator(box ext::deriving::expand_meta_deriving));\n \n     // Quasi-quoting expanders\n     syntax_expanders.insert(intern(\"quote_tokens\"),"}, {"sha": "d15d6b3f8f127beb6821d946ad9ec1c5402038f2", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a9cf19889ae7030c7df25cf41105906d12616f1e/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9cf19889ae7030c7df25cf41105906d12616f1e/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=a9cf19889ae7030c7df25cf41105906d12616f1e", "patch": "@@ -251,7 +251,7 @@ fn expand_item(it: Gc<ast::Item>, fld: &mut MacroExpander)\n \n         match fld.cx.syntax_env.find(&intern(mname.get())) {\n             Some(rc) => match *rc {\n-                ItemDecorator(dec_fn) => {\n+                ItemDecorator(ref dec) => {\n                     attr::mark_used(attr);\n \n                     fld.cx.bt_push(ExpnInfo {\n@@ -266,8 +266,7 @@ fn expand_item(it: Gc<ast::Item>, fld: &mut MacroExpander)\n                     // we'd ideally decorator_items.push_all(expand_item(item, fld)),\n                     // but that double-mut-borrows fld\n                     let mut items: SmallVector<Gc<ast::Item>> = SmallVector::zero();\n-                    dec_fn(fld.cx, attr.span, attr.node.value, it,\n-                        |item| items.push(item));\n+                    dec.expand(fld.cx, attr.span, attr.node.value, it, |item| items.push(item));\n                     decorator_items.extend(items.move_iter()\n                         .flat_map(|item| expand_item(item, fld).move_iter()));\n \n@@ -328,7 +327,7 @@ fn expand_item_modifiers(mut it: Gc<ast::Item>, fld: &mut MacroExpander)\n \n         match fld.cx.syntax_env.find(&intern(mname.get())) {\n             Some(rc) => match *rc {\n-                ItemModifier(dec_fn) => {\n+                ItemModifier(ref mac) => {\n                     attr::mark_used(attr);\n                     fld.cx.bt_push(ExpnInfo {\n                         call_site: attr.span,\n@@ -338,7 +337,7 @@ fn expand_item_modifiers(mut it: Gc<ast::Item>, fld: &mut MacroExpander)\n                             span: None,\n                         }\n                     });\n-                    it = dec_fn(fld.cx, attr.span, attr.node.value, it);\n+                    it = mac.expand(fld.cx, attr.span, attr.node.value, it);\n                     fld.cx.bt_pop();\n                 }\n                 _ => unreachable!()"}, {"sha": "fbbee2e625a8c996bd5b9705c585f258c6243904", "filename": "src/test/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9cf19889ae7030c7df25cf41105906d12616f1e/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9cf19889ae7030c7df25cf41105906d12616f1e/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs?ref=a9cf19889ae7030c7df25cf41105906d12616f1e", "patch": "@@ -36,7 +36,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_macro(\"identity\", expand_identity);\n     reg.register_syntax_extension(\n         token::intern(\"into_foo\"),\n-        ItemModifier(expand_into_foo));\n+        ItemModifier(box expand_into_foo));\n }\n \n fn expand_make_a_1(cx: &mut ExtCtxt, sp: Span, tts: &[TokenTree])"}]}