{"sha": "e1c1c059c6d120d324a0a2d5125363c21ad11940", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxYzFjMDU5YzZkMTIwZDMyNGEwYTJkNTEyNTM2M2MyMWFkMTE5NDA=", "commit": {"author": {"name": "Philipp Br\u00fcschweiler", "email": "blei42@gmail.com", "date": "2013-06-04T10:47:45Z"}, "committer": {"name": "Philipp Br\u00fcschweiler", "email": "blei42@gmail.com", "date": "2013-06-04T10:47:45Z"}, "message": "std::io: Modernize some constructors\n\nPart of #3853", "tree": {"sha": "375d279ae74bdc4d3945bad08cf802c7af5e6b86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/375d279ae74bdc4d3945bad08cf802c7af5e6b86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1c1c059c6d120d324a0a2d5125363c21ad11940", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1c1c059c6d120d324a0a2d5125363c21ad11940", "html_url": "https://github.com/rust-lang/rust/commit/e1c1c059c6d120d324a0a2d5125363c21ad11940", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1c1c059c6d120d324a0a2d5125363c21ad11940/comments", "author": {"login": "Blei", "id": 52674, "node_id": "MDQ6VXNlcjUyNjc0", "avatar_url": "https://avatars.githubusercontent.com/u/52674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Blei", "html_url": "https://github.com/Blei", "followers_url": "https://api.github.com/users/Blei/followers", "following_url": "https://api.github.com/users/Blei/following{/other_user}", "gists_url": "https://api.github.com/users/Blei/gists{/gist_id}", "starred_url": "https://api.github.com/users/Blei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Blei/subscriptions", "organizations_url": "https://api.github.com/users/Blei/orgs", "repos_url": "https://api.github.com/users/Blei/repos", "events_url": "https://api.github.com/users/Blei/events{/privacy}", "received_events_url": "https://api.github.com/users/Blei/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Blei", "id": 52674, "node_id": "MDQ6VXNlcjUyNjc0", "avatar_url": "https://avatars.githubusercontent.com/u/52674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Blei", "html_url": "https://github.com/Blei", "followers_url": "https://api.github.com/users/Blei/followers", "following_url": "https://api.github.com/users/Blei/following{/other_user}", "gists_url": "https://api.github.com/users/Blei/gists{/gist_id}", "starred_url": "https://api.github.com/users/Blei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Blei/subscriptions", "organizations_url": "https://api.github.com/users/Blei/orgs", "repos_url": "https://api.github.com/users/Blei/repos", "events_url": "https://api.github.com/users/Blei/events{/privacy}", "received_events_url": "https://api.github.com/users/Blei/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34ee63e93bd763326e676bd634f6f17a8f77791d", "url": "https://api.github.com/repos/rust-lang/rust/commits/34ee63e93bd763326e676bd634f6f17a8f77791d", "html_url": "https://github.com/rust-lang/rust/commit/34ee63e93bd763326e676bd634f6f17a8f77791d"}], "stats": {"total": 74, "additions": 38, "deletions": 36}, "files": [{"sha": "e8239b9f7fd7580f972e4a3c3e4a2f5d233b18dc", "filename": "src/libextra/flatpipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1c1c059c6d120d324a0a2d5125363c21ad11940/src%2Flibextra%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c1c059c6d120d324a0a2d5125363c21ad11940/src%2Flibextra%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fflatpipes.rs?ref=e1c1c059c6d120d324a0a2d5125363c21ad11940", "patch": "@@ -660,7 +660,7 @@ mod test {\n     #[test]\n     #[ignore(reason = \"ebml failure\")]\n     fn test_serializing_memory_stream() {\n-        let writer = BytesWriter();\n+        let writer = BytesWriter::new();\n         let chan = serial::writer_chan(writer);\n \n         chan.send(10);\n@@ -708,7 +708,7 @@ mod test {\n \n     #[test]\n     fn test_pod_memory_stream() {\n-        let writer = BytesWriter();\n+        let writer = BytesWriter::new();\n         let chan = pod::writer_chan(writer);\n \n         chan.send(10);"}, {"sha": "6f453a79b680d0cf585fd974aaf871289eb41271", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1c1c059c6d120d324a0a2d5125363c21ad11940/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c1c059c6d120d324a0a2d5125363c21ad11940/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=e1c1c059c6d120d324a0a2d5125363c21ad11940", "patch": "@@ -1425,7 +1425,7 @@ pub static metadata_encoding_version : &'static [u8] =\n       0, 0, 0, 1 ];\n \n pub fn encode_metadata(parms: EncodeParams, crate: &crate) -> ~[u8] {\n-    let wr = @io::BytesWriter();\n+    let wr = @io::BytesWriter::new();\n     let stats = Stats {\n         inline_bytes: 0,\n         attr_bytes: 0,"}, {"sha": "8fe592db403de74d7d473fd22b82920ea1cabbbe", "filename": "src/libstd/io.rs", "status": "modified", "additions": 35, "deletions": 33, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/e1c1c059c6d120d324a0a2d5125363c21ad11940/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c1c059c6d120d324a0a2d5125363c21ad11940/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=e1c1c059c6d120d324a0a2d5125363c21ad11940", "patch": "@@ -982,6 +982,12 @@ pub struct FILERes {\n     f: *libc::FILE,\n }\n \n+impl FILERes {\n+    pub fn new(f: *libc::FILE) -> FILERes {\n+        FILERes { f: f }\n+    }\n+}\n+\n impl Drop for FILERes {\n     fn finalize(&self) {\n         unsafe {\n@@ -990,15 +996,9 @@ impl Drop for FILERes {\n     }\n }\n \n-pub fn FILERes(f: *libc::FILE) -> FILERes {\n-    FILERes {\n-        f: f\n-    }\n-}\n-\n pub fn FILE_reader(f: *libc::FILE, cleanup: bool) -> @Reader {\n     if cleanup {\n-        @Wrapper { base: f, cleanup: FILERes(f) } as @Reader\n+        @Wrapper { base: f, cleanup: FILERes::new(f) } as @Reader\n     } else {\n         @f as @Reader\n     }\n@@ -1183,7 +1183,7 @@ impl Writer for *libc::FILE {\n \n pub fn FILE_writer(f: *libc::FILE, cleanup: bool) -> @Writer {\n     if cleanup {\n-        @Wrapper { base: f, cleanup: FILERes(f) } as @Writer\n+        @Wrapper { base: f, cleanup: FILERes::new(f) } as @Writer\n     } else {\n         @f as @Writer\n     }\n@@ -1227,6 +1227,12 @@ pub struct FdRes {\n     fd: fd_t,\n }\n \n+impl FdRes {\n+    pub fn new(fd: fd_t) -> FdRes {\n+        FdRes { fd: fd }\n+    }\n+}\n+\n impl Drop for FdRes {\n     fn finalize(&self) {\n         unsafe {\n@@ -1235,15 +1241,9 @@ impl Drop for FdRes {\n     }\n }\n \n-pub fn FdRes(fd: fd_t) -> FdRes {\n-    FdRes {\n-        fd: fd\n-    }\n-}\n-\n pub fn fd_writer(fd: fd_t, cleanup: bool) -> @Writer {\n     if cleanup {\n-        @Wrapper { base: fd, cleanup: FdRes(fd) } as @Writer\n+        @Wrapper { base: fd, cleanup: FdRes::new(fd) } as @Writer\n     } else {\n         @fd as @Writer\n     }\n@@ -1634,6 +1634,15 @@ pub struct BytesWriter {\n     pos: @mut uint,\n }\n \n+impl BytesWriter {\n+    pub fn new() -> BytesWriter {\n+        BytesWriter {\n+            bytes: @mut ~[],\n+            pos: @mut 0\n+        }\n+    }\n+}\n+\n impl Writer for BytesWriter {\n     fn write(&self, v: &[u8]) {\n         let v_len = v.len();\n@@ -1673,15 +1682,8 @@ impl Writer for BytesWriter {\n     }\n }\n \n-pub fn BytesWriter() -> BytesWriter {\n-    BytesWriter {\n-        bytes: @mut ~[],\n-        pos: @mut 0\n-    }\n-}\n-\n pub fn with_bytes_writer(f: &fn(@Writer)) -> ~[u8] {\n-    let wr = @BytesWriter();\n+    let wr = @BytesWriter::new();\n     f(wr as @Writer);\n     let @BytesWriter { bytes, _ } = wr;\n     copy *bytes\n@@ -1762,6 +1764,12 @@ pub mod fsync {\n         arg: Arg<t>,\n     }\n \n+    impl <t: Copy> Res<t> {\n+        pub fn new(arg: Arg<t>) -> Res<t> {\n+            Res { arg: arg }\n+        }\n+    }\n+\n     #[unsafe_destructor]\n     impl<T:Copy> Drop for Res<T> {\n         fn finalize(&self) {\n@@ -1776,12 +1784,6 @@ pub mod fsync {\n         }\n     }\n \n-    pub fn Res<t: Copy>(arg: Arg<t>) -> Res<t>{\n-        Res {\n-            arg: arg\n-        }\n-    }\n-\n     pub struct Arg<t> {\n         val: t,\n         opt_level: Option<Level>,\n@@ -1793,7 +1795,7 @@ pub mod fsync {\n     // outer res\n     pub fn FILE_res_sync(file: &FILERes, opt_level: Option<Level>,\n                          blk: &fn(v: Res<*libc::FILE>)) {\n-        blk(Res(Arg {\n+        blk(Res::new(Arg {\n             val: file.f, opt_level: opt_level,\n             fsync_fn: |file, l| {\n                 unsafe {\n@@ -1806,7 +1808,7 @@ pub mod fsync {\n     // fsync fd after executing blk\n     pub fn fd_res_sync(fd: &FdRes, opt_level: Option<Level>,\n                        blk: &fn(v: Res<fd_t>)) {\n-        blk(Res(Arg {\n+        blk(Res::new(Arg {\n             val: fd.fd, opt_level: opt_level,\n             fsync_fn: |fd, l| os::fsync_fd(fd, l) as int\n         }));\n@@ -1818,7 +1820,7 @@ pub mod fsync {\n     // Call o.fsync after executing blk\n     pub fn obj_sync(o: @FSyncable, opt_level: Option<Level>,\n                     blk: &fn(v: Res<@FSyncable>)) {\n-        blk(Res(Arg {\n+        blk(Res::new(Arg {\n             val: o, opt_level: opt_level,\n             fsync_fn: |o, l| o.fsync(l)\n         }));\n@@ -1993,7 +1995,7 @@ mod tests {\n \n     #[test]\n     fn bytes_buffer_overwrite() {\n-        let wr = BytesWriter();\n+        let wr = BytesWriter::new();\n         wr.write([0u8, 1u8, 2u8, 3u8]);\n         assert!(*wr.bytes == ~[0u8, 1u8, 2u8, 3u8]);\n         wr.seek(-2, SeekCur);"}]}