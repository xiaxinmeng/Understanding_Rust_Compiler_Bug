{"sha": "6e7d206a7bd2ea10c151a0916e3f325b14e91311", "node_id": "C_kwDOAAsO6NoAKDZlN2QyMDZhN2JkMmVhMTBjMTUxYTA5MTZlM2YzMjViMTRlOTEzMTE", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-10-18T12:21:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-18T12:21:32Z"}, "message": "Rollup merge of #103168 - Amanieu:stable_asm_sym, r=davidtwco\n\nStabilize asm_sym\n\nTracking issue #93333\n\nReference PR: https://github.com/rust-lang/reference/pull/1270", "tree": {"sha": "fffc9e795a461d1654ccc5a42532e2b64598341e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fffc9e795a461d1654ccc5a42532e2b64598341e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e7d206a7bd2ea10c151a0916e3f325b14e91311", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjTppMCRBK7hj4Ov3rIwAASxwIAEW6aivdYv4TwmrQOZh3E9gu\n2YPnlAph3vtEG49WjRSqSMgwDnU+vov8e4h4iG3GKoh+aOAOe4ZnlYsNWR3K2eFr\nwxteQQfhEpVb4yRx6RCXWGdVVy5TIqTSJA8cjVBJb/lKY5XuMlnol0qybY/3dPJc\n84vYOtIfSipHFIb/fnUng1kVlVuYNImzNxI9GWHwyednLZXWonS/QED1FaXHmXVg\nL44l+xj4SUaoeiCCfHPFTC6yCMPE+3zd/2Z7iP5sllnW1lRkIrBmrGzriRANskzw\nmGYfdXBW0V2I8xzJKmU93OxlzEUngZvFQrE4YzbwX4FkNDBGcJy6gzzAPny9o3Q=\n=89Qe\n-----END PGP SIGNATURE-----\n", "payload": "tree fffc9e795a461d1654ccc5a42532e2b64598341e\nparent b411b8861c06bd34aa279776dd48711e26b4163d\nparent 430bd6200dd290497423c5f3a1f9ee4e9bd35d67\nauthor Yuki Okushi <jtitor@2k36.org> 1666095692 +0900\ncommitter GitHub <noreply@github.com> 1666095692 +0900\n\nRollup merge of #103168 - Amanieu:stable_asm_sym, r=davidtwco\n\nStabilize asm_sym\n\nTracking issue #93333\n\nReference PR: https://github.com/rust-lang/reference/pull/1270\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e7d206a7bd2ea10c151a0916e3f325b14e91311", "html_url": "https://github.com/rust-lang/rust/commit/6e7d206a7bd2ea10c151a0916e3f325b14e91311", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e7d206a7bd2ea10c151a0916e3f325b14e91311/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b411b8861c06bd34aa279776dd48711e26b4163d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b411b8861c06bd34aa279776dd48711e26b4163d", "html_url": "https://github.com/rust-lang/rust/commit/b411b8861c06bd34aa279776dd48711e26b4163d"}, {"sha": "430bd6200dd290497423c5f3a1f9ee4e9bd35d67", "url": "https://api.github.com/repos/rust-lang/rust/commits/430bd6200dd290497423c5f3a1f9ee4e9bd35d67", "html_url": "https://github.com/rust-lang/rust/commit/430bd6200dd290497423c5f3a1f9ee4e9bd35d67"}], "stats": {"total": 175, "additions": 61, "deletions": 114}, "files": [{"sha": "450cdf246b1502cdc084f30bc70dd220031eea85", "filename": "compiler/rustc_ast_lowering/src/asm.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -192,16 +192,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         }\n                     }\n                     InlineAsmOperand::Sym { ref sym } => {\n-                        if !self.tcx.features().asm_sym {\n-                            feature_err(\n-                                &sess.parse_sess,\n-                                sym::asm_sym,\n-                                *op_sp,\n-                                \"sym operands for inline assembly are unstable\",\n-                            )\n-                            .emit();\n-                        }\n-\n                         let static_def_id = self\n                             .resolver\n                             .get_partial_res(sym.id)"}, {"sha": "38c1eac7adf6966c9d8b6d88ce0df853ed4152b7", "filename": "compiler/rustc_codegen_gcc/tests/run/asm.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/compiler%2Frustc_codegen_gcc%2Ftests%2Frun%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/compiler%2Frustc_codegen_gcc%2Ftests%2Frun%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Ftests%2Frun%2Fasm.rs?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -3,11 +3,12 @@\n // Run-time:\n //   status: 0\n \n-#![feature(asm_const, asm_sym)]\n+#![feature(asm_const)]\n \n use std::arch::{asm, global_asm};\n \n-global_asm!(\"\n+global_asm!(\n+    \"\n     .global add_asm\n add_asm:\n      mov rax, rdi\n@@ -132,7 +133,9 @@ fn main() {\n     assert_eq!(x, 43);\n \n     // check sym fn\n-    extern \"C\" fn foo() -> u64 { 42 }\n+    extern \"C\" fn foo() -> u64 {\n+        42\n+    }\n     let x: u64;\n     unsafe {\n         asm!(\"call {}\", sym foo, lateout(\"rax\") x);"}, {"sha": "54bf5a2c34b826575e18d9d34aa8d80306b5a3b2", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -53,6 +53,8 @@ declare_features! (\n     (accepted, abi_sysv64, \"1.24.0\", Some(36167), None),\n     /// Allows using ADX intrinsics from `core::arch::{x86, x86_64}`.\n     (accepted, adx_target_feature, \"1.61.0\", Some(44839), None),\n+    /// Allows using `sym` operands in inline assembly.\n+    (accepted, asm_sym, \"CURRENT_RUSTC_VERSION\", Some(93333), None),\n     /// Allows the definition of associated constants in `trait` or `impl` blocks.\n     (accepted, associated_consts, \"1.20.0\", Some(29646), None),\n     /// Allows using associated `type`s in `trait`s."}, {"sha": "1b8d683b13361a407b61efca99071af4748324d6", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -300,8 +300,6 @@ declare_features! (\n     (active, asm_const, \"1.58.0\", Some(93332), None),\n     /// Enables experimental inline assembly support for additional architectures.\n     (active, asm_experimental_arch, \"1.58.0\", Some(93335), None),\n-    /// Allows using `sym` operands in inline assembly.\n-    (active, asm_sym, \"1.58.0\", Some(93333), None),\n     /// Allows the `may_unwind` option in inline assembly.\n     (active, asm_unwind, \"1.58.0\", Some(93334), None),\n     /// Allows users to enforce equality of associated constants `TraitImpl<AssocConst=3>`."}, {"sha": "103d91caf4ccd4c4e716cd3aeaed69e8086e078a", "filename": "src/doc/unstable-book/src/language-features/asm-sym.md", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b411b8861c06bd34aa279776dd48711e26b4163d/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-sym.md", "raw_url": "https://github.com/rust-lang/rust/raw/b411b8861c06bd34aa279776dd48711e26b4163d/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-sym.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-sym.md?ref=b411b8861c06bd34aa279776dd48711e26b4163d", "patch": "@@ -1,13 +0,0 @@\n-# `asm_sym`\n-\n-The tracking issue for this feature is: [#93333]\n-\n-[#93333]: https://github.com/rust-lang/rust/issues/93333\n-\n-------------------------\n-\n-This feature adds a `sym <path>` operand type to `asm!` and `global_asm!`.\n-- `<path>` must refer to a `fn` or `static`.\n-- A mangled symbol name referring to the item is substituted into the asm template string.\n-- The substituted string does not include any modifiers (e.g. GOT, PLT, relocations, etc).\n-- `<path>` is allowed to point to a `#[thread_local]` static, in which case the asm code can combine the symbol with relocations (e.g. `@plt`, `@TPOFF`) to read from thread-local data."}, {"sha": "66c39a48c6e1d5fbc1ecb2ea3207c5dedeb4af37", "filename": "src/test/assembly/asm/aarch64-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fassembly%2Fasm%2Faarch64-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fassembly%2Fasm%2Faarch64-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Faarch64-types.rs?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -2,7 +2,7 @@\n // compile-flags: --target aarch64-unknown-linux-gnu\n // needs-llvm-components: aarch64\n \n-#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_sym)]\n+#![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n #![crate_type = \"rlib\"]\n #![no_core]\n #![allow(asm_sub_register, non_camel_case_types)]"}, {"sha": "b22a26ce36f140d975e81843bc6da7b3ad16ad83", "filename": "src/test/assembly/asm/arm-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -3,7 +3,7 @@\n // compile-flags: -C target-feature=+neon\n // needs-llvm-components: arm\n \n-#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_sym)]\n+#![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n #![crate_type = \"rlib\"]\n #![no_core]\n #![allow(asm_sub_register, non_camel_case_types)]"}, {"sha": "b2d11a8826f6be04d76793911d9825b9ec91dd90", "filename": "src/test/assembly/asm/avr-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fassembly%2Fasm%2Favr-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fassembly%2Fasm%2Favr-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Favr-types.rs?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -2,7 +2,7 @@\n // compile-flags: --target avr-unknown-gnu-atmega328\n // needs-llvm-components: avr\n \n-#![feature(no_core, lang_items, rustc_attrs, asm_sym, asm_experimental_arch)]\n+#![feature(no_core, lang_items, rustc_attrs, asm_experimental_arch)]\n #![crate_type = \"rlib\"]\n #![no_core]\n #![allow(non_camel_case_types)]"}, {"sha": "e177b8d0dbe509a31ba53357bea539f39595fc30", "filename": "src/test/assembly/asm/bpf-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fassembly%2Fasm%2Fbpf-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fassembly%2Fasm%2Fbpf-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fbpf-types.rs?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -2,7 +2,7 @@\n // compile-flags: --target bpfel-unknown-none -C target_feature=+alu32\n // needs-llvm-components: bpf\n \n-#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_sym, asm_experimental_arch)]\n+#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_experimental_arch)]\n #![crate_type = \"rlib\"]\n #![no_core]\n #![allow(asm_sub_register, non_camel_case_types)]"}, {"sha": "0b361a7ed963d99510d4a44467e4513d7fe0d9af", "filename": "src/test/assembly/asm/global_asm.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fassembly%2Fasm%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fassembly%2Fasm%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fglobal_asm.rs?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -4,7 +4,7 @@\n // compile-flags: -C llvm-args=--x86-asm-syntax=intel\n // compile-flags: -C symbol-mangling-version=v0\n \n-#![feature(asm_const, asm_sym)]\n+#![feature(asm_const)]\n #![crate_type = \"rlib\"]\n \n use std::arch::global_asm;\n@@ -28,4 +28,6 @@ global_asm!(\"lea rax, [rip + {}]\", sym MY_STATIC);\n // CHECK: call _RNvCsiubXh4Yz005_10global_asm6foobar\n global_asm!(\"call {}\", sym foobar);\n // CHECK: _RNvCsiubXh4Yz005_10global_asm6foobar:\n-fn foobar() { loop {} }\n+fn foobar() {\n+    loop {}\n+}"}, {"sha": "af16faedbc4a2ed04e4ba18eb4ffec401b3560b1", "filename": "src/test/assembly/asm/hexagon-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fassembly%2Fasm%2Fhexagon-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fassembly%2Fasm%2Fhexagon-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fhexagon-types.rs?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -2,7 +2,7 @@\n // compile-flags: --target hexagon-unknown-linux-musl\n // needs-llvm-components: hexagon\n \n-#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_sym, asm_experimental_arch)]\n+#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_experimental_arch)]\n #![crate_type = \"rlib\"]\n #![no_core]\n #![allow(asm_sub_register, non_camel_case_types)]"}, {"sha": "6aa28b062db8a0a9aa5ba8d17630469b6efa617d", "filename": "src/test/assembly/asm/mips-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fassembly%2Fasm%2Fmips-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fassembly%2Fasm%2Fmips-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fmips-types.rs?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -5,7 +5,7 @@\n //[mips64] compile-flags: --target mips64-unknown-linux-gnuabi64\n //[mips64] needs-llvm-components: mips\n \n-#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_sym, asm_experimental_arch)]\n+#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_experimental_arch)]\n #![crate_type = \"rlib\"]\n #![no_core]\n #![allow(asm_sub_register, non_camel_case_types)]"}, {"sha": "2c73b3b098de49eaf1116e915c193e474c1a4dae", "filename": "src/test/assembly/asm/msp430-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fassembly%2Fasm%2Fmsp430-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fassembly%2Fasm%2Fmsp430-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fmsp430-types.rs?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -2,7 +2,7 @@\n // compile-flags: --target msp430-none-elf\n // needs-llvm-components: msp430\n \n-#![feature(no_core, lang_items, rustc_attrs, asm_sym, asm_experimental_arch, asm_const)]\n+#![feature(no_core, lang_items, rustc_attrs, asm_experimental_arch, asm_const)]\n #![crate_type = \"rlib\"]\n #![no_core]\n #![allow(non_camel_case_types)]"}, {"sha": "c319946b5f5c11dc456904941c3c6e13337be323", "filename": "src/test/assembly/asm/nvptx-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fassembly%2Fasm%2Fnvptx-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fassembly%2Fasm%2Fnvptx-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fnvptx-types.rs?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -3,7 +3,7 @@\n // compile-flags: --crate-type cdylib\n // needs-llvm-components: nvptx\n \n-#![feature(no_core, lang_items, rustc_attrs, asm_sym, asm_experimental_arch)]\n+#![feature(no_core, lang_items, rustc_attrs, asm_experimental_arch)]\n #![no_core]\n \n #[rustc_builtin_macro]"}, {"sha": "e27b005206835ee6de6f1b46cfd4c46169c5469a", "filename": "src/test/assembly/asm/powerpc-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fassembly%2Fasm%2Fpowerpc-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fassembly%2Fasm%2Fpowerpc-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fpowerpc-types.rs?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -5,7 +5,7 @@\n //[powerpc64] compile-flags: --target powerpc64-unknown-linux-gnu\n //[powerpc64] needs-llvm-components: powerpc\n \n-#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_sym, asm_experimental_arch)]\n+#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_experimental_arch)]\n #![crate_type = \"rlib\"]\n #![no_core]\n #![allow(asm_sub_register, non_camel_case_types)]"}, {"sha": "f18ba294d0cff82d709231a36c17cf4a45591711", "filename": "src/test/assembly/asm/riscv-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -6,7 +6,7 @@\n //[riscv32] needs-llvm-components: riscv\n // compile-flags: -C target-feature=+d\n \n-#![feature(no_core, lang_items, rustc_attrs, asm_sym)]\n+#![feature(no_core, lang_items, rustc_attrs)]\n #![crate_type = \"rlib\"]\n #![no_core]\n #![allow(asm_sub_register)]"}, {"sha": "2fb404dd9b280c49240554d5c041b89ec3f3ab90", "filename": "src/test/assembly/asm/s390x-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fassembly%2Fasm%2Fs390x-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fassembly%2Fasm%2Fs390x-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fs390x-types.rs?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -3,7 +3,7 @@\n //[s390x] compile-flags: --target s390x-unknown-linux-gnu\n //[s390x] needs-llvm-components: systemz\n \n-#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_sym, asm_experimental_arch)]\n+#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_experimental_arch)]\n #![crate_type = \"rlib\"]\n #![no_core]\n #![allow(asm_sub_register, non_camel_case_types)]"}, {"sha": "3b1ac1b455ad8c478cf2873c76ee63fd751eae17", "filename": "src/test/assembly/asm/wasm-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fassembly%2Fasm%2Fwasm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fassembly%2Fasm%2Fwasm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fwasm-types.rs?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -3,7 +3,7 @@\n // compile-flags: --crate-type cdylib\n // needs-llvm-components: webassembly\n \n-#![feature(no_core, lang_items, rustc_attrs, asm_sym, asm_experimental_arch)]\n+#![feature(no_core, lang_items, rustc_attrs, asm_experimental_arch)]\n #![no_core]\n \n #[rustc_builtin_macro]"}, {"sha": "81be79cbaac18c25d8e9516bd8bb6327bdb6b92d", "filename": "src/test/assembly/asm/x86-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fassembly%2Fasm%2Fx86-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fassembly%2Fasm%2Fx86-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fx86-types.rs?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -7,7 +7,7 @@\n // compile-flags: -C llvm-args=--x86-asm-syntax=intel\n // compile-flags: -C target-feature=+avx512bw\n \n-#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_sym)]\n+#![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n #![crate_type = \"rlib\"]\n #![no_core]\n #![allow(asm_sub_register, non_camel_case_types)]"}, {"sha": "39330693677ebcdff0e968761a74f8b28128119f", "filename": "src/test/ui/abi/abi-sysv64-register-usage.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-register-usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-register-usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-register-usage.rs?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -6,20 +6,30 @@\n // ignore-arm\n // ignore-aarch64\n // needs-asm-support\n-#![feature(asm_sym)]\n \n #[cfg(target_arch = \"x86_64\")]\n-pub extern \"sysv64\" fn all_the_registers(rdi: i64, rsi: i64, rdx: i64,\n-                                         rcx: i64, r8 : i64, r9 : i64,\n-                                         xmm0: f32, xmm1: f32, xmm2: f32,\n-                                         xmm3: f32, xmm4: f32, xmm5: f32,\n-                                         xmm6: f32, xmm7: f32) -> i64 {\n+pub extern \"sysv64\" fn all_the_registers(\n+    rdi: i64,\n+    rsi: i64,\n+    rdx: i64,\n+    rcx: i64,\n+    r8: i64,\n+    r9: i64,\n+    xmm0: f32,\n+    xmm1: f32,\n+    xmm2: f32,\n+    xmm3: f32,\n+    xmm4: f32,\n+    xmm5: f32,\n+    xmm6: f32,\n+    xmm7: f32,\n+) -> i64 {\n     assert_eq!(rdi, 1);\n     assert_eq!(rsi, 2);\n     assert_eq!(rdx, 3);\n     assert_eq!(rcx, 4);\n-    assert_eq!(r8,  5);\n-    assert_eq!(r9,  6);\n+    assert_eq!(r8, 5);\n+    assert_eq!(r9, 6);\n     assert_eq!(xmm0, 1.0f32);\n     assert_eq!(xmm1, 2.0f32);\n     assert_eq!(xmm2, 4.0f32);"}, {"sha": "9ccb8ed67626911743fb35ae16f017d33c805e38", "filename": "src/test/ui/asm/aarch64/bad-reg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.rs?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -1,7 +1,7 @@\n // only-aarch64\n // compile-flags: -C target-feature=+neon\n \n-#![feature(asm_const, asm_sym)]\n+#![feature(asm_const)]\n \n use std::arch::asm;\n "}, {"sha": "6af8728bbaa96f59ab08dc004f85b72ef146ea4d", "filename": "src/test/ui/asm/aarch64/may_unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fmay_unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fmay_unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fmay_unwind.rs?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -2,7 +2,7 @@\n // run-pass\n // needs-asm-support\n \n-#![feature(asm_sym, asm_unwind)]\n+#![feature(asm_unwind)]\n \n use std::arch::asm;\n use std::panic::{catch_unwind, resume_unwind, AssertUnwindSafe};"}, {"sha": "6a6cdb00d5173d20d6ea320de1b96c8e20996eea", "filename": "src/test/ui/asm/aarch64/sym.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsym.rs?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -3,7 +3,7 @@\n // needs-asm-support\n // run-pass\n \n-#![feature(thread_local, asm_sym)]\n+#![feature(thread_local)]\n \n use std::arch::asm;\n "}, {"sha": "0ce1f1d8f7f4ad33ac6926ed5e09576b03027e54", "filename": "src/test/ui/asm/aarch64/type-check-2-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2-2.rs?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -1,6 +1,6 @@\n // only-aarch64\n \n-#![feature(repr_simd, never_type, asm_sym)]\n+#![feature(repr_simd, never_type)]\n \n use std::arch::{asm, global_asm};\n "}, {"sha": "1c71c1185d465509392530a2a61de049a7a26781", "filename": "src/test/ui/asm/aarch64/type-check-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.rs?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -1,6 +1,6 @@\n // only-aarch64\n \n-#![feature(repr_simd, never_type, asm_sym)]\n+#![feature(repr_simd, never_type)]\n \n use std::arch::{asm, global_asm};\n "}, {"sha": "caa9b7dbce6a8fa2a8238371f98fff3a3de754b9", "filename": "src/test/ui/asm/generic-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fasm%2Fgeneric-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fasm%2Fgeneric-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fgeneric-const.rs?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -1,7 +1,7 @@\n // needs-asm-support\n // build-pass\n \n-#![feature(asm_const, asm_sym)]\n+#![feature(asm_const)]\n \n use std::arch::asm;\n "}, {"sha": "2f3716ca77f65a743efcf7b805c7049988c41ceb", "filename": "src/test/ui/asm/naked-functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -4,7 +4,7 @@\n // ignore-wasm32\n \n #![feature(naked_functions)]\n-#![feature(asm_const, asm_sym, asm_unwind)]\n+#![feature(asm_const, asm_unwind)]\n #![crate_type = \"lib\"]\n \n use std::arch::asm;"}, {"sha": "59f7b36afcd89bc466ad4723aa2bb229f3808df7", "filename": "src/test/ui/asm/type-check-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -3,7 +3,7 @@\n // ignore-spirv\n // ignore-wasm32\n \n-#![feature(asm_const, asm_sym)]\n+#![feature(asm_const)]\n \n use std::arch::{asm, global_asm};\n "}, {"sha": "f5728079a6a564fb18542534423f8031bee2e2ce", "filename": "src/test/ui/asm/x86_64/bad-reg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-reg.rs?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -1,7 +1,7 @@\n // only-x86_64\n // compile-flags: -C target-feature=+avx2\n \n-#![feature(asm_const, asm_sym)]\n+#![feature(asm_const)]\n \n use std::arch::asm;\n "}, {"sha": "954f8c5ccc33dc26e175001d89516c02ebcf940e", "filename": "src/test/ui/asm/x86_64/issue-96797.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fissue-96797.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fissue-96797.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fissue-96797.rs?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -7,8 +7,6 @@\n \n // regression test for #96797\n \n-#![feature(asm_sym)]\n-\n use std::arch::global_asm;\n \n #[no_mangle]"}, {"sha": "c11f0938d0b6c22416bb206975bc09ab7526833a", "filename": "src/test/ui/asm/x86_64/may_unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fmay_unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fmay_unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fmay_unwind.rs?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -3,7 +3,7 @@\n // needs-asm-support\n // needs-unwind\n \n-#![feature(asm_sym, asm_unwind)]\n+#![feature(asm_unwind)]\n \n use std::arch::asm;\n use std::panic::{catch_unwind, resume_unwind, AssertUnwindSafe};"}, {"sha": "06589431a445f0b66d5dfc038df209c48b8416d8", "filename": "src/test/ui/asm/x86_64/multiple-clobber-abi.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fmultiple-clobber-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fmultiple-clobber-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fmultiple-clobber-abi.rs?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -4,8 +4,6 @@\n \n // Checks that multiple clobber_abi options can be used\n \n-#![feature(asm_sym)]\n-\n use std::arch::asm;\n \n extern \"sysv64\" fn foo(x: i32) -> i32 {"}, {"sha": "93ef4f090622e673ac59a00b16fb60ebec49c30c", "filename": "src/test/ui/asm/x86_64/sym.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsym.rs?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -3,7 +3,7 @@\n // needs-asm-support\n // run-pass\n \n-#![feature(thread_local, asm_sym)]\n+#![feature(thread_local)]\n \n use std::arch::asm;\n "}, {"sha": "80b29ec870fc1c32dc9879afe4bc575817e20d99", "filename": "src/test/ui/asm/x86_64/type-check-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-2.rs?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -1,6 +1,6 @@\n // only-x86_64\n \n-#![feature(repr_simd, never_type, asm_sym)]\n+#![feature(repr_simd, never_type)]\n \n use std::arch::{asm, global_asm};\n "}, {"sha": "3d5d3807c530e7f7c1bb7b0e629bd0b51a9025c0", "filename": "src/test/ui/asm/x86_64/type-check-4.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-4.rs?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -1,14 +1,13 @@\n // only-x86_64\n // compile-flags: -C target-feature=+avx512f\n \n-#![feature(asm_const, asm_sym)]\n+#![feature(asm_const)]\n \n use std::arch::{asm, global_asm};\n \n use std::arch::x86_64::{_mm256_setzero_ps, _mm_setzero_ps};\n \n-fn main() {\n-}\n+fn main() {}\n \n // Constants must be... constant\n "}, {"sha": "3875bcc21125204aaca5f4aed21ce179ae18d6b5", "filename": "src/test/ui/asm/x86_64/type-check-4.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-4.stderr?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -1,21 +1,21 @@\n error[E0013]: constants cannot refer to statics\n-  --> $DIR/type-check-4.rs:22:25\n+  --> $DIR/type-check-4.rs:21:25\n    |\n LL | global_asm!(\"{}\", const S);\n    |                         ^\n    |\n    = help: consider extracting the value of the `static` to a `const`, and referring to that\n \n error[E0013]: constants cannot refer to statics\n-  --> $DIR/type-check-4.rs:25:35\n+  --> $DIR/type-check-4.rs:24:35\n    |\n LL | global_asm!(\"{}\", const const_foo(S));\n    |                                   ^\n    |\n    = help: consider extracting the value of the `static` to a `const`, and referring to that\n \n error[E0013]: constants cannot refer to statics\n-  --> $DIR/type-check-4.rs:28:35\n+  --> $DIR/type-check-4.rs:27:35\n    |\n LL | global_asm!(\"{}\", const const_bar(S));\n    |                                   ^"}, {"sha": "8198df91095f94acd111902c194f58d3cea735f4", "filename": "src/test/ui/asm/x86_64/type-check-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7d206a7bd2ea10c151a0916e3f325b14e91311/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.rs?ref=6e7d206a7bd2ea10c151a0916e3f325b14e91311", "patch": "@@ -1,6 +1,6 @@\n // only-x86_64\n \n-#![feature(repr_simd, never_type, asm_sym)]\n+#![feature(repr_simd, never_type)]\n \n use std::arch::asm;\n "}, {"sha": "0de6b3abb18bb093faca77161f60ff29edac66db", "filename": "src/test/ui/feature-gates/feature-gate-asm_sym.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b411b8861c06bd34aa279776dd48711e26b4163d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_sym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b411b8861c06bd34aa279776dd48711e26b4163d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_sym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_sym.rs?ref=b411b8861c06bd34aa279776dd48711e26b4163d", "patch": "@@ -1,19 +0,0 @@\n-// only-x86_64\n-\n-use std::arch::asm;\n-\n-fn bar<const N: usize>() {}\n-\n-fn foo<const N: usize>() {\n-    unsafe {\n-        asm!(\"mov eax, {}\", sym bar::<N>);\n-        //~^ ERROR sym operands for inline assembly are unstable\n-    }\n-}\n-\n-fn main() {\n-    unsafe {\n-        asm!(\"mov eax, {}\", sym foo::<0>);\n-        //~^ ERROR sym operands for inline assembly are unstable\n-    }\n-}"}, {"sha": "d4b16f60b0b4196ffa862e44221794c70f2b4360", "filename": "src/test/ui/feature-gates/feature-gate-asm_sym.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b411b8861c06bd34aa279776dd48711e26b4163d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_sym.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b411b8861c06bd34aa279776dd48711e26b4163d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_sym.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_sym.stderr?ref=b411b8861c06bd34aa279776dd48711e26b4163d", "patch": "@@ -1,21 +0,0 @@\n-error[E0658]: sym operands for inline assembly are unstable\n-  --> $DIR/feature-gate-asm_sym.rs:9:29\n-   |\n-LL |         asm!(\"mov eax, {}\", sym bar::<N>);\n-   |                             ^^^^^^^^^^^^\n-   |\n-   = note: see issue #93333 <https://github.com/rust-lang/rust/issues/93333> for more information\n-   = help: add `#![feature(asm_sym)]` to the crate attributes to enable\n-\n-error[E0658]: sym operands for inline assembly are unstable\n-  --> $DIR/feature-gate-asm_sym.rs:16:29\n-   |\n-LL |         asm!(\"mov eax, {}\", sym foo::<0>);\n-   |                             ^^^^^^^^^^^^\n-   |\n-   = note: see issue #93333 <https://github.com/rust-lang/rust/issues/93333> for more information\n-   = help: add `#![feature(asm_sym)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}]}