{"sha": "19512be11376a17f6c73fb28facad1f0d9f9cefb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NTEyYmUxMTM3NmExN2Y2YzczZmIyOGZhY2FkMWYwZDlmOWNlZmI=", "commit": {"author": {"name": "mitaa", "email": "mitaa.ceb@gmail.com", "date": "2015-07-25T22:01:28Z"}, "committer": {"name": "mitaa", "email": "mitaa.ceb@gmail.com", "date": "2015-07-26T07:56:28Z"}, "message": "Sidestep warning about repeated E0005 `span_err!` invocation.\n\nFixes #27279", "tree": {"sha": "3b7a7cd8a15a87964632cf88fdfb0b994a46785c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b7a7cd8a15a87964632cf88fdfb0b994a46785c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19512be11376a17f6c73fb28facad1f0d9f9cefb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19512be11376a17f6c73fb28facad1f0d9f9cefb", "html_url": "https://github.com/rust-lang/rust/commit/19512be11376a17f6c73fb28facad1f0d9f9cefb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19512be11376a17f6c73fb28facad1f0d9f9cefb/comments", "author": {"login": "mitaa", "id": 6785936, "node_id": "MDQ6VXNlcjY3ODU5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6785936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitaa", "html_url": "https://github.com/mitaa", "followers_url": "https://api.github.com/users/mitaa/followers", "following_url": "https://api.github.com/users/mitaa/following{/other_user}", "gists_url": "https://api.github.com/users/mitaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitaa/subscriptions", "organizations_url": "https://api.github.com/users/mitaa/orgs", "repos_url": "https://api.github.com/users/mitaa/repos", "events_url": "https://api.github.com/users/mitaa/events{/privacy}", "received_events_url": "https://api.github.com/users/mitaa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mitaa", "id": 6785936, "node_id": "MDQ6VXNlcjY3ODU5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6785936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitaa", "html_url": "https://github.com/mitaa", "followers_url": "https://api.github.com/users/mitaa/followers", "following_url": "https://api.github.com/users/mitaa/following{/other_user}", "gists_url": "https://api.github.com/users/mitaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitaa/subscriptions", "organizations_url": "https://api.github.com/users/mitaa/orgs", "repos_url": "https://api.github.com/users/mitaa/repos", "events_url": "https://api.github.com/users/mitaa/events{/privacy}", "received_events_url": "https://api.github.com/users/mitaa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adfdbc4bd75f2581e9ad0151b26fb786b64475f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/adfdbc4bd75f2581e9ad0151b26fb786b64475f8", "html_url": "https://github.com/rust-lang/rust/commit/adfdbc4bd75f2581e9ad0151b26fb786b64475f8"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "7c02045d0838855f7f101544c334226787f77d6f", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/19512be11376a17f6c73fb28facad1f0d9f9cefb/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19512be11376a17f6c73fb28facad1f0d9f9cefb/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=19512be11376a17f6c73fb28facad1f0d9f9cefb", "patch": "@@ -1016,12 +1016,8 @@ pub fn specialize<'a>(cx: &MatchCheckCtxt, r: &[&'a Pat],\n fn check_local(cx: &mut MatchCheckCtxt, loc: &ast::Local) {\n     visit::walk_local(cx, loc);\n \n-    let mut static_inliner = StaticInliner::new(cx.tcx, None);\n-    is_refutable(cx, &*static_inliner.fold_pat(loc.pat.clone()), |pat| {\n-        span_err!(cx.tcx.sess, loc.pat.span, E0005,\n-            \"refutable pattern in local binding: `{}` not covered\", pat_to_string(pat)\n-        );\n-    });\n+    let pat = StaticInliner::new(cx.tcx, None).fold_pat(loc.pat.clone());\n+    check_irrefutable(cx, &pat, false);\n \n     // Check legality of move bindings and `@` patterns.\n     check_legality_of_move_bindings(cx, false, slice::ref_slice(&loc.pat));\n@@ -1042,17 +1038,28 @@ fn check_fn(cx: &mut MatchCheckCtxt,\n     visit::walk_fn(cx, kind, decl, body, sp);\n \n     for input in &decl.inputs {\n-        is_refutable(cx, &*input.pat, |pat| {\n-            span_err!(cx.tcx.sess, input.pat.span, E0005,\n-                \"refutable pattern in function argument: `{}` not covered\",\n-                pat_to_string(pat)\n-            );\n-        });\n+        check_irrefutable(cx, &input.pat, true);\n         check_legality_of_move_bindings(cx, false, slice::ref_slice(&input.pat));\n         check_legality_of_bindings_in_at_patterns(cx, &*input.pat);\n     }\n }\n \n+fn check_irrefutable(cx: &MatchCheckCtxt, pat: &Pat, is_fn_arg: bool) {\n+    let origin = if is_fn_arg {\n+        \"function argument\"\n+    } else {\n+        \"local binding\"\n+    };\n+\n+    is_refutable(cx, pat, |uncovered_pat| {\n+        span_err!(cx.tcx.sess, pat.span, E0005,\n+            \"refutable pattern in {}: `{}` not covered\",\n+            origin,\n+            pat_to_string(uncovered_pat),\n+        );\n+    });\n+}\n+\n fn is_refutable<A, F>(cx: &MatchCheckCtxt, pat: &Pat, refutable: F) -> Option<A> where\n     F: FnOnce(&Pat) -> A,\n {"}]}