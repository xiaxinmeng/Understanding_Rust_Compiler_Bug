{"sha": "62649f0412630f8bfe284996c82b6a723d2ffea9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyNjQ5ZjA0MTI2MzBmOGJmZTI4NDk5NmM4MmI2YTcyM2QyZmZlYTk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-26T00:02:22Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-26T00:41:29Z"}, "message": "Check more things with deprecated_modes", "tree": {"sha": "bec04a8992454542f11746d5215693a6b2ac8c5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bec04a8992454542f11746d5215693a6b2ac8c5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62649f0412630f8bfe284996c82b6a723d2ffea9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62649f0412630f8bfe284996c82b6a723d2ffea9", "html_url": "https://github.com/rust-lang/rust/commit/62649f0412630f8bfe284996c82b6a723d2ffea9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62649f0412630f8bfe284996c82b6a723d2ffea9/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e500659eb5482aea8b4675416449b03d5cfbe898", "url": "https://api.github.com/repos/rust-lang/rust/commits/e500659eb5482aea8b4675416449b03d5cfbe898", "html_url": "https://github.com/rust-lang/rust/commit/e500659eb5482aea8b4675416449b03d5cfbe898"}], "stats": {"total": 146, "additions": 110, "deletions": 36}, "files": [{"sha": "518775ec75169a80a57893c6b828817bc7e55d0f", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62649f0412630f8bfe284996c82b6a723d2ffea9/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62649f0412630f8bfe284996c82b6a723d2ffea9/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=62649f0412630f8bfe284996c82b6a723d2ffea9", "patch": "@@ -9,7 +9,7 @@\n  */\n \n // NB: transitionary, de-mode-ing.\n-#[forbid(deprecated_mode)];\n+#[warn(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n use cmp::Eq;"}, {"sha": "714d6c93ffa2bd2c8a7ec401deb8c55d61444e31", "filename": "src/libstd/fun_treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62649f0412630f8bfe284996c82b6a723d2ffea9/src%2Flibstd%2Ffun_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62649f0412630f8bfe284996c82b6a723d2ffea9/src%2Flibstd%2Ffun_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffun_treemap.rs?ref=62649f0412630f8bfe284996c82b6a723d2ffea9", "patch": "@@ -1,4 +1,4 @@\n-#[forbid(deprecated_mode)];\n+#[warn(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n /*!"}, {"sha": "b4e8678f6ae47d6b9621e0aa93844a3f3d4f19ee", "filename": "src/libstd/list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62649f0412630f8bfe284996c82b6a723d2ffea9/src%2Flibstd%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62649f0412630f8bfe284996c82b6a723d2ffea9/src%2Flibstd%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flist.rs?ref=62649f0412630f8bfe284996c82b6a723d2ffea9", "patch": "@@ -1,5 +1,5 @@\n //! A standard linked list\n-#[forbid(deprecated_mode)];\n+#[warn(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n use core::cmp::Eq;"}, {"sha": "e872cba5dc9375fbbb75b73fdc95817409af2cf4", "filename": "src/libstd/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62649f0412630f8bfe284996c82b6a723d2ffea9/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62649f0412630f8bfe284996c82b6a723d2ffea9/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=62649f0412630f8bfe284996c82b6a723d2ffea9", "patch": "@@ -5,7 +5,7 @@\n // simplest interface possible for representing and running tests\n // while providing a base that other test frameworks may build off of.\n \n-#[forbid(deprecated_mode)];\n+#[warn(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n use core::cmp::Eq;"}, {"sha": "d6946590d800c6544f887257c6b3a717b694a533", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62649f0412630f8bfe284996c82b6a723d2ffea9/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62649f0412630f8bfe284996c82b6a723d2ffea9/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=62649f0412630f8bfe284996c82b6a723d2ffea9", "patch": "@@ -5,7 +5,7 @@\n  * very naive algorithm, but it will probably be updated to be a\n  * red-black tree or something else.\n  */\n-#[forbid(deprecated_mode)];\n+#[warn(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n use core::cmp::{Eq, Ord};"}, {"sha": "473931d8179ac33e4d8a7ea75783a24cae4f1e53", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 96, "deletions": 31, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/62649f0412630f8bfe284996c82b6a723d2ffea9/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62649f0412630f8bfe284996c82b6a723d2ffea9/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=62649f0412630f8bfe284996c82b6a723d2ffea9", "patch": "@@ -396,6 +396,7 @@ fn check_item(i: @ast::item, cx: ty::ctxt) {\n     check_item_non_camel_case_types(cx, i);\n     check_item_heap(cx, i);\n     check_item_structural_records(cx, i);\n+    check_item_deprecated_modes(cx, i);\n }\n \n // Take a visitor, and modify it so that it will not proceed past subitems.\n@@ -666,43 +667,107 @@ fn check_fn(tcx: ty::ctxt, fk: visit::fn_kind, decl: ast::fn_decl,\n     }\n \n     let fn_ty = ty::node_id_to_type(tcx, id);\n+    check_fn_deprecated_modes(tcx, fn_ty, decl, span, id);\n+}\n+\n+fn check_fn_deprecated_modes(tcx: ty::ctxt, fn_ty: ty::t, decl: ast::fn_decl,\n+                             span: span, id: ast::node_id) {\n     match ty::get(fn_ty).sty {\n-      ty::ty_fn(fn_ty) => {\n-        let mut counter = 0;\n-        do vec::iter2(fn_ty.sig.inputs, decl.inputs) |arg_ty, arg_ast| {\n-            counter += 1;\n-            debug!(\"arg %d, ty=%s, mode=%s\",\n-                   counter,\n-                   ty_to_str(tcx, arg_ty.ty),\n-                   mode_to_str(arg_ast.mode));\n-            match arg_ast.mode {\n-              ast::expl(ast::by_copy) => {\n-                /* always allow by-copy */\n-              }\n+        ty::ty_fn(fn_ty) => {\n+            let mut counter = 0;\n+            do vec::iter2(fn_ty.sig.inputs, decl.inputs) |arg_ty, arg_ast| {\n+                counter += 1;\n+                debug!(\"arg %d, ty=%s, mode=%s\",\n+                       counter,\n+                       ty_to_str(tcx, arg_ty.ty),\n+                       mode_to_str(arg_ast.mode));\n+                match arg_ast.mode {\n+                    ast::expl(ast::by_copy) => {\n+                        /* always allow by-copy */\n+                    }\n \n-              ast::expl(_) => {\n-                tcx.sess.span_lint(\n-                    deprecated_mode, id, id,\n-                    span,\n-                    fmt!(\"argument %d uses an explicit mode\", counter));\n-              }\n+                    ast::expl(_) => {\n+                        tcx.sess.span_lint(\n+                            deprecated_mode, id, id,\n+                            span,\n+                            fmt!(\"argument %d uses an explicit mode\", counter));\n+                    }\n \n-              ast::infer(_) => {\n-                let kind = ty::type_kind(tcx, arg_ty.ty);\n-                if !ty::kind_is_safe_for_default_mode(kind) {\n-                    tcx.sess.span_lint(\n-                        deprecated_mode, id, id,\n-                        span,\n-                        fmt!(\"argument %d uses the default mode \\\n-                              but shouldn't\",\n-                             counter));\n+                    ast::infer(_) => {\n+                        let kind = ty::type_kind(tcx, arg_ty.ty);\n+                        if !ty::kind_is_safe_for_default_mode(kind) {\n+                            tcx.sess.span_lint(\n+                                deprecated_mode, id, id,\n+                                span,\n+                                fmt!(\"argument %d uses the default mode \\\n+                                      but shouldn't\",\n+                                     counter));\n+                        }\n+                    }\n+                }\n+\n+                match ty::get(arg_ty.ty).sty {\n+                    ty::ty_fn(*) => {\n+                        let span = arg_ast.ty.span;\n+                        // Recurse to check fn-type argument\n+                        match arg_ast.ty.node {\n+                            ast::ty_fn(_, _, _, decl) => {\n+                                check_fn_deprecated_modes(tcx, arg_ty.ty,\n+                                                          decl, span, id);\n+                            }\n+                            ast::ty_path(*) => {\n+                                // This is probably a typedef, so we can't\n+                                // see the actual fn decl\n+                                // e.g. fn foo(f: InitOp<T>)\n+                            }\n+                            ast::ty_rptr(_, mt)\n+                            | ast::ty_box(mt)\n+                            | ast::ty_uniq(mt) => {\n+                                // Functions with preceding sigil are parsed\n+                                // as pointers of functions\n+                                match mt.ty.node {\n+                                    ast::ty_fn(_, _, _, decl) => {\n+                                        check_fn_deprecated_modes(\n+                                            tcx, arg_ty.ty,\n+                                            decl, span, id);\n+                                    }\n+                                    _ => fail\n+                                }\n+                            }\n+                            _ => {\n+                                tcx.sess.span_warn(span, ~\"what\");\n+                                error!(\"arg %d, ty=%s, mode=%s\",\n+                                       counter,\n+                                       ty_to_str(tcx, arg_ty.ty),\n+                                       mode_to_str(arg_ast.mode));\n+                                error!(\"%?\",arg_ast.ty.node);\n+                                fail\n+                            }\n+                        };\n+                    }\n+                    _ => ()\n                 }\n-              }\n             }\n         }\n-      }\n-      _ => tcx.sess.impossible_case(span, ~\"check_fn: function has \\\n-             non-fn type\")\n+\n+        _ => tcx.sess.impossible_case(span, ~\"check_fn: function has \\\n+                                              non-fn type\")\n+    }\n+}\n+\n+fn check_item_deprecated_modes(tcx: ty::ctxt, it: @ast::item) {\n+    match it.node {\n+        ast::item_ty(ty, _) => {\n+            match ty.node {\n+                ast::ty_fn(_, _, _, decl) => {\n+                    let fn_ty = ty::node_id_to_type(tcx, it.id);\n+                    check_fn_deprecated_modes(\n+                        tcx, fn_ty, decl, ty.span, it.id)\n+                }\n+                _ => ()\n+            }\n+        }\n+        _ => ()\n     }\n }\n "}, {"sha": "5afffb59dfc3759f7d23d79dc9fd1e3d4a479451", "filename": "src/test/compile-fail/deprecated-mode-fn-arg.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/62649f0412630f8bfe284996c82b6a723d2ffea9/src%2Ftest%2Fcompile-fail%2Fdeprecated-mode-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62649f0412630f8bfe284996c82b6a723d2ffea9/src%2Ftest%2Fcompile-fail%2Fdeprecated-mode-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdeprecated-mode-fn-arg.rs?ref=62649f0412630f8bfe284996c82b6a723d2ffea9", "patch": "@@ -0,0 +1,9 @@\n+#[forbid(deprecated_mode)];\n+\n+fn foo(_f: fn(&i: int)) { //~ ERROR explicit mode\n+}\n+\n+type Bar = fn(&i: int); //~ ERROR explicit mode\n+\n+fn main() {\n+}\n\\ No newline at end of file"}]}