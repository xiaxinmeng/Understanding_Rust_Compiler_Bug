{"sha": "8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiYmY4M2I2MmE5MDEwMzllYTllNWU2YTkyYjY2NGYyZDNjNzJiOWM=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-06-04T22:14:56Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-06-06T19:14:41Z"}, "message": "Clean up a handful of build warnings.", "tree": {"sha": "9fd129fcd914f75a3325f6330c6e7f5ecde05826", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fd129fcd914f75a3325f6330c6e7f5ecde05826"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c", "html_url": "https://github.com/rust-lang/rust/commit/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8450dc8f5e7616617d707f8fdbfaf7ad6ad5aa41", "url": "https://api.github.com/repos/rust-lang/rust/commits/8450dc8f5e7616617d707f8fdbfaf7ad6ad5aa41", "html_url": "https://github.com/rust-lang/rust/commit/8450dc8f5e7616617d707f8fdbfaf7ad6ad5aa41"}], "stats": {"total": 121, "additions": 56, "deletions": 65}, "files": [{"sha": "28a5e5382be5896c2b1cda55416fca276dcb5b89", "filename": "src/libextra/sync.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibextra%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibextra%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync.rs?ref=8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c", "patch": "@@ -19,7 +19,6 @@ use core::prelude::*;\n \n use core::borrow;\n use core::comm;\n-use core::ptr;\n use core::task;\n use core::unstable::sync::{Exclusive, exclusive};\n use core::util;"}, {"sha": "c383e03367bff825eeeeb42987783c7573270b24", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c", "patch": "@@ -303,7 +303,7 @@ fn resolve_crate_deps(e: @mut Env, cdata: @~[u8]) -> cstore::cnum_map {\n     // The map from crate numbers in the crate we're resolving to local crate\n     // numbers\n     let mut cnum_map = HashMap::new();\n-    for decoder::get_crate_deps(e.intr, cdata).each |dep| {\n+    for decoder::get_crate_deps(cdata).each |dep| {\n         let extrn_cnum = dep.cnum;\n         let cname = dep.name;\n         let cname_str = token::ident_to_str(&dep.name);"}, {"sha": "955f07ed9c30cbd419a00253ffc6d861b8cb12c0", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c", "patch": "@@ -69,7 +69,7 @@ pub fn each_path(cstore: @mut cstore::CStore,\n pub fn get_item_path(tcx: ty::ctxt, def: ast::def_id) -> ast_map::path {\n     let cstore = tcx.cstore;\n     let cdata = cstore::get_crate_data(cstore, def.crate);\n-    let path = decoder::get_item_path(cstore.intr, cdata, def.node);\n+    let path = decoder::get_item_path(cdata, def.node);\n \n     // FIXME #1920: This path is not always correct if the crate is not linked\n     // into the root namespace.\n@@ -91,7 +91,7 @@ pub fn maybe_get_item_ast(tcx: ty::ctxt, def: ast::def_id,\n                        -> found_ast {\n     let cstore = tcx.cstore;\n     let cdata = cstore::get_crate_data(cstore, def.crate);\n-    decoder::maybe_get_item_ast(cstore.intr, cdata, tcx, def.node,\n+    decoder::maybe_get_item_ast(cdata, tcx, def.node,\n                                 decode_inlined_item)\n }\n \n@@ -149,7 +149,7 @@ pub fn get_supertraits(tcx: ty::ctxt, def: ast::def_id) -> ~[@ty::TraitRef] {\n pub fn get_type_name_if_impl(cstore: @mut cstore::CStore, def: ast::def_id)\n                           -> Option<ast::ident> {\n     let cdata = cstore::get_crate_data(cstore, def.crate);\n-    decoder::get_type_name_if_impl(cstore.intr, cdata, def.node)\n+    decoder::get_type_name_if_impl(cdata, def.node)\n }\n \n pub fn get_static_methods_if_impl(cstore: @mut cstore::CStore,"}, {"sha": "a6af5ca6e36b007b763211cba2dc87afe88764c3", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c", "patch": "@@ -288,7 +288,7 @@ fn enum_variant_ids(item: ebml::Doc, cdata: cmd) -> ~[ast::def_id] {\n     return ids;\n }\n \n-fn item_path(intr: @ident_interner, item_doc: ebml::Doc) -> ast_map::path {\n+fn item_path(item_doc: ebml::Doc) -> ast_map::path {\n     let path_doc = reader::get_doc(item_doc, tag_path);\n \n     let len_doc = reader::get_doc(path_doc, tag_path_len);\n@@ -491,7 +491,7 @@ pub fn _each_path(intr: @ident_interner,\n     for reader::tagged_docs(items_data, tag_items_data_item) |item_doc| {\n         if !broken {\n             let path = ast_map::path_to_str_with_sep(\n-                item_path(intr, item_doc), ~\"::\", intr);\n+                item_path(item_doc), \"::\", intr);\n             let path_is_empty = path.is_empty();\n             if !path_is_empty {\n                 // Extract the def ID.\n@@ -575,9 +575,9 @@ pub fn each_path(intr: @ident_interner,\n     _each_path(intr, cdata, get_crate_data, f)\n }\n \n-pub fn get_item_path(intr: @ident_interner, cdata: cmd, id: ast::node_id)\n+pub fn get_item_path(cdata: cmd, id: ast::node_id)\n     -> ast_map::path {\n-    item_path(intr, lookup_item(id, cdata.data))\n+    item_path(lookup_item(id, cdata.data))\n }\n \n pub type decode_inlined_item<'self> = &'self fn(\n@@ -586,14 +586,14 @@ pub type decode_inlined_item<'self> = &'self fn(\n     path: ast_map::path,\n     par_doc: ebml::Doc) -> Option<ast::inlined_item>;\n \n-pub fn maybe_get_item_ast(intr: @ident_interner, cdata: cmd, tcx: ty::ctxt,\n+pub fn maybe_get_item_ast(cdata: cmd, tcx: ty::ctxt,\n                           id: ast::node_id,\n                           decode_inlined_item: decode_inlined_item)\n                        -> csearch::found_ast {\n     debug!(\"Looking up item: %d\", id);\n     let item_doc = lookup_item(id, cdata.data);\n     let path = {\n-        let item_path = item_path(intr, item_doc);\n+        let item_path = item_path(item_doc);\n         vec::to_owned(item_path.init())\n     };\n     match decode_inlined_item(cdata, tcx, copy path, item_doc) {\n@@ -835,8 +835,7 @@ pub fn get_supertraits(cdata: cmd, id: ast::node_id, tcx: ty::ctxt)\n     return results;\n }\n \n-pub fn get_type_name_if_impl(intr: @ident_interner,\n-                             cdata: cmd,\n+pub fn get_type_name_if_impl(cdata: cmd,\n                              node_id: ast::node_id) -> Option<ast::ident> {\n     let item = lookup_item(node_id, cdata.data);\n     if item_family(item) != Impl {\n@@ -1086,7 +1085,7 @@ pub struct crate_dep {\n     hash: @~str\n }\n \n-pub fn get_crate_deps(intr: @ident_interner, data: @~[u8]) -> ~[crate_dep] {\n+pub fn get_crate_deps(data: @~[u8]) -> ~[crate_dep] {\n     let mut deps: ~[crate_dep] = ~[];\n     let cratedoc = reader::Doc(data);\n     let depsdoc = reader::get_doc(cratedoc, tag_crate_deps);\n@@ -1104,10 +1103,10 @@ pub fn get_crate_deps(intr: @ident_interner, data: @~[u8]) -> ~[crate_dep] {\n     return deps;\n }\n \n-fn list_crate_deps(intr: @ident_interner, data: @~[u8], out: @io::Writer) {\n+fn list_crate_deps(data: @~[u8], out: @io::Writer) {\n     out.write_str(\"=External Dependencies=\\n\");\n \n-    for get_crate_deps(intr, data).each |dep| {\n+    for get_crate_deps(data).each |dep| {\n         out.write_str(\n             fmt!(\"%d %s-%s-%s\\n\",\n                  dep.cnum, *token::ident_to_str(&dep.name), *dep.hash, *dep.vers));\n@@ -1151,7 +1150,7 @@ pub fn list_crate_metadata(intr: @ident_interner, bytes: @~[u8],\n     let hash = get_crate_hash(bytes);\n     let md = reader::Doc(bytes);\n     list_crate_attributes(intr, md, *hash, out);\n-    list_crate_deps(intr, bytes, out);\n+    list_crate_deps(bytes, out);\n }\n \n // Translates a def_id from an external crate to a def_id for the current"}, {"sha": "c696aacb449806d4ff3d2a6a8851fb46a6479af4", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c", "patch": "@@ -132,8 +132,7 @@ struct entry<T> {\n     pos: uint\n }\n \n-fn add_to_index(ecx: @EncodeContext,\n-                ebml_w: &mut writer::Encoder,\n+fn add_to_index(ebml_w: &mut writer::Encoder,\n                 path: &[ident],\n                 index: &mut ~[entry<~str>],\n                 name: ident) {"}, {"sha": "736e98dc6ecd9f6fe099e5f348ff317b5dcffb67", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c", "patch": "@@ -12,7 +12,6 @@ use core::prelude::*;\n \n use middle::freevars::freevar_entry;\n use middle::freevars;\n-use middle::pat_util;\n use middle::ty;\n use middle::typeck;\n use util::ppaux::{Repr, ty_to_str};"}, {"sha": "184ed441694b9e1ee726896a737b3ec51479977c", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c", "patch": "@@ -725,35 +725,34 @@ pub struct PrimitiveTypeTable {\n \n impl PrimitiveTypeTable {\n     pub fn intern(&mut self,\n-                  intr: @ident_interner,\n                   string: &str,\n                   primitive_type: prim_ty) {\n         let ident = token::str_to_ident(string);\n         self.primitive_types.insert(ident, primitive_type);\n     }\n }\n \n-pub fn PrimitiveTypeTable(intr: @ident_interner) -> PrimitiveTypeTable {\n+pub fn PrimitiveTypeTable() -> PrimitiveTypeTable {\n     let mut table = PrimitiveTypeTable {\n         primitive_types: HashMap::new()\n     };\n \n-    table.intern(intr, \"bool\",    ty_bool);\n-    table.intern(intr, \"char\",    ty_int(ty_char));\n-    table.intern(intr, \"float\",   ty_float(ty_f));\n-    table.intern(intr, \"f32\",     ty_float(ty_f32));\n-    table.intern(intr, \"f64\",     ty_float(ty_f64));\n-    table.intern(intr, \"int\",     ty_int(ty_i));\n-    table.intern(intr, \"i8\",      ty_int(ty_i8));\n-    table.intern(intr, \"i16\",     ty_int(ty_i16));\n-    table.intern(intr, \"i32\",     ty_int(ty_i32));\n-    table.intern(intr, \"i64\",     ty_int(ty_i64));\n-    table.intern(intr, \"str\",     ty_str);\n-    table.intern(intr, \"uint\",    ty_uint(ty_u));\n-    table.intern(intr, \"u8\",      ty_uint(ty_u8));\n-    table.intern(intr, \"u16\",     ty_uint(ty_u16));\n-    table.intern(intr, \"u32\",     ty_uint(ty_u32));\n-    table.intern(intr, \"u64\",     ty_uint(ty_u64));\n+    table.intern(\"bool\",    ty_bool);\n+    table.intern(\"char\",    ty_int(ty_char));\n+    table.intern(\"float\",   ty_float(ty_f));\n+    table.intern(\"f32\",     ty_float(ty_f32));\n+    table.intern(\"f64\",     ty_float(ty_f64));\n+    table.intern(\"int\",     ty_int(ty_i));\n+    table.intern(\"i8\",      ty_int(ty_i8));\n+    table.intern(\"i16\",     ty_int(ty_i16));\n+    table.intern(\"i32\",     ty_int(ty_i32));\n+    table.intern(\"i64\",     ty_int(ty_i64));\n+    table.intern(\"str\",     ty_str);\n+    table.intern(\"uint\",    ty_uint(ty_u));\n+    table.intern(\"u8\",      ty_uint(ty_u8));\n+    table.intern(\"u16\",     ty_uint(ty_u16));\n+    table.intern(\"u32\",     ty_uint(ty_u32));\n+    table.intern(\"u64\",     ty_uint(ty_u64));\n \n     return table;\n }\n@@ -806,7 +805,7 @@ pub fn Resolver(session: Session,\n         self_ident: special_idents::self_,\n         type_self_ident: special_idents::type_self,\n \n-        primitive_type_table: @PrimitiveTypeTable(token::get_ident_interner()),\n+        primitive_type_table: @PrimitiveTypeTable(),\n \n         namespaces: ~[ TypeNS, ValueNS ],\n \n@@ -2942,8 +2941,6 @@ impl Resolver {\n                                  module_: @mut Module,\n                                  module_path: &[ident])\n                                  -> ResolveResult<ModulePrefixResult> {\n-        let interner = token::get_ident_interner();\n-\n         // Start at the current module if we see `self` or `super`, or at the\n         // top of the crate otherwise.\n         let mut containing_module;"}, {"sha": "2d1dd34af4ad0e4b24d81ee08b78c65c8f4c7b49", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c", "patch": "@@ -3070,7 +3070,7 @@ pub fn trans_crate(sess: session::Session,\n         lib::llvm::associate_type(tn, @\"tydesc\", tydesc_type);\n         let crate_map = decl_crate_map(sess, link_meta, llmod);\n         let dbg_cx = if sess.opts.debuginfo {\n-            Some(debuginfo::mk_ctxt(copy llmod_id, token::get_ident_interner()))\n+            Some(debuginfo::mk_ctxt(copy llmod_id))\n         } else {\n             None\n         };\n@@ -3105,7 +3105,7 @@ pub fn trans_crate(sess: session::Session,\n               lltypes: @mut HashMap::new(),\n               llsizingtypes: @mut HashMap::new(),\n               adt_reprs: @mut HashMap::new(),\n-              names: new_namegen(token::get_ident_interner()),\n+              names: new_namegen(),\n               next_addrspace: new_addrspace_gen(),\n               symbol_hasher: symbol_hasher,\n               type_hashcodes: @mut HashMap::new(),"}, {"sha": "774d2df1ca3fbf54d61a173b6c73cbb95da48e60", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c", "patch": "@@ -60,7 +60,7 @@ use syntax::abi::{X86, X86_64, Arm, Mips};\n // NOTE: this thunk is totally pointless now that we're not passing\n // interners around...\n pub type namegen = @fn(s: &str) -> ident;\n-pub fn new_namegen(intr: @ident_interner) -> namegen {\n+pub fn new_namegen() -> namegen {\n     let f: @fn(s: &str) -> ident = |prefix| {\n         token::str_to_ident(fmt!(\"%s_%u\",\n                                  prefix,"}, {"sha": "eb173fb2c44675dd35218409f006b1bc26ff672b", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c", "patch": "@@ -108,10 +108,10 @@ pub struct DebugContext {\n     crate_file: ~str\n }\n \n-pub fn mk_ctxt(crate: ~str, intr: @ident_interner) -> DebugContext {\n+pub fn mk_ctxt(crate: ~str) -> DebugContext {\n     DebugContext {\n         llmetadata: @mut HashMap::new(),\n-        names: new_namegen(intr),\n+        names: new_namegen(),\n         crate_file: crate\n     }\n }"}, {"sha": "d4f1e42d5ff80c599cb021034ebf7015236e23a7", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c", "patch": "@@ -654,7 +654,7 @@ impl Repr for ty::Method {\n }\n \n impl Repr for ast::ident {\n-    fn repr(&self, tcx: ctxt) -> ~str {\n+    fn repr(&self, _tcx: ctxt) -> ~str {\n         copy *token::ident_to_str(self)\n     }\n }"}, {"sha": "5bc52b1eb35abb0fdfa2a017cc76dc54b71ad614", "filename": "src/librustpkg/rustpkg.rc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibrustpkg%2Frustpkg.rc", "raw_url": "https://github.com/rust-lang/rust/raw/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibrustpkg%2Frustpkg.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rc?ref=8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c", "patch": "@@ -649,9 +649,9 @@ impl PkgSrc {\n         if self.libs.is_empty() && self.mains.is_empty()\n             && self.tests.is_empty() && self.benchs.is_empty() {\n \n-            util::note(~\"Couldn't infer any crates to build.\\n\\\n-                         Try naming a crate `main.rs`, `lib.rs`, \\\n-                         `test.rs`, or `bench.rs`.\");\n+            util::note(\"Couldn't infer any crates to build.\\n\\\n+                        Try naming a crate `main.rs`, `lib.rs`, \\\n+                        `test.rs`, or `bench.rs`.\");\n             cond.raise(copy self.id);\n         }\n "}, {"sha": "84af0ce50958351ed2eaa906a871c9daaf0514b7", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c", "patch": "@@ -14,8 +14,6 @@ use rustc::driver::{driver, session};\n use rustc::metadata::filesearch;\n use extra::getopts::groups::getopts;\n use extra::term;\n-#[cfg(not(test))]\n-use extra::getopts;\n use syntax::ast_util::*;\n use syntax::codemap::{dummy_sp, spanned};\n use syntax::codemap::dummy_spanned;"}, {"sha": "e1f31b83524b3d592851519570e73e313d504333", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c", "patch": "@@ -394,7 +394,7 @@ pub fn new_name_finder() -> @Visitor<@mut ~[ast::ident]> {\n }\n \n pub fn expand_block(extsbox: @mut SyntaxEnv,\n-                    cx: @ExtCtxt,\n+                    _cx: @ExtCtxt,\n                     blk: &blk_,\n                     sp: span,\n                     fld: @ast_fold,"}, {"sha": "6d0c499f2c82322e4708da316ec4b02416a16ebe", "filename": "src/libsyntax/ext/fmt.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ffmt.rs?ref=8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c", "patch": "@@ -53,15 +53,15 @@ pub fn expand_syntax_ext(cx: @ExtCtxt, sp: span, tts: &[ast::token_tree])\n fn pieces_to_expr(cx: @ExtCtxt, sp: span,\n                   pieces: ~[Piece], args: ~[@ast::expr])\n    -> @ast::expr {\n-    fn make_path_vec(cx: @ExtCtxt, ident: &str) -> ~[ast::ident] {\n+    fn make_path_vec(ident: &str) -> ~[ast::ident] {\n         return ~[str_to_ident(\"std\"),\n                  str_to_ident(\"unstable\"),\n                  str_to_ident(\"extfmt\"),\n                  str_to_ident(\"rt\"),\n                  str_to_ident(ident)];\n     }\n     fn make_rt_path_expr(cx: @ExtCtxt, sp: span, nm: &str) -> @ast::expr {\n-        let path = make_path_vec(cx, nm);\n+        let path = make_path_vec(nm);\n         cx.expr_path(cx.path_global(sp, path))\n     }\n     // Produces an AST expression that represents a RT::conv record,\n@@ -90,7 +90,7 @@ fn pieces_to_expr(cx: @ExtCtxt, sp: span,\n               }\n               CountIs(c) => {\n                 let count_lit = cx.expr_uint(sp, c as uint);\n-                let count_is_path = make_path_vec(cx, \"CountIs\");\n+                let count_is_path = make_path_vec(\"CountIs\");\n                 let count_is_args = ~[count_lit];\n                 return cx.expr_call_global(sp, count_is_path, count_is_args);\n               }\n@@ -114,7 +114,7 @@ fn pieces_to_expr(cx: @ExtCtxt, sp: span,\n                          ty_expr: @ast::expr) -> @ast::expr {\n             cx.expr_struct(\n                 sp,\n-                cx.path_global(sp, make_path_vec(cx, \"Conv\")),\n+                cx.path_global(sp, make_path_vec(\"Conv\")),\n                 ~[\n                     cx.field_imm(sp, str_to_ident(\"flags\"), flags_expr),\n                     cx.field_imm(sp, str_to_ident(\"width\"), width_expr),\n@@ -133,7 +133,7 @@ fn pieces_to_expr(cx: @ExtCtxt, sp: span,\n     fn make_conv_call(cx: @ExtCtxt, sp: span, conv_type: &str, cnv: &Conv,\n                       arg: @ast::expr, buf: @ast::expr) -> @ast::expr {\n         let fname = ~\"conv_\" + conv_type;\n-        let path = make_path_vec(cx, fname);\n+        let path = make_path_vec(fname);\n         let cnv_expr = make_rt_conv_expr(cx, sp, cnv);\n         let args = ~[cnv_expr, arg, buf];\n         cx.expr_call_global(arg.span, path, args)"}, {"sha": "09c9dd922c7aff534f4c83d6acbb5fc2e5e6f04f", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c", "patch": "@@ -92,7 +92,7 @@ pub mod rt {\n \n     impl<'self> ToSource for &'self [@ast::item] {\n         fn to_source(&self) -> ~str {\n-            str::connect(self.map(|i| i.to_source()), ~\"\\n\\n\")\n+            str::connect(self.map(|i| i.to_source()), \"\\n\\n\")\n         }\n     }\n \n@@ -104,7 +104,7 @@ pub mod rt {\n \n     impl<'self> ToSource for &'self [@ast::Ty] {\n         fn to_source(&self) -> ~str {\n-            str::connect(self.map(|i| i.to_source()), ~\", \")\n+            str::connect(self.map(|i| i.to_source()), \", \")\n         }\n     }\n "}, {"sha": "4d1e9a31821d1fff5b4742b8c4bfe99d40bba7d6", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c", "patch": "@@ -12,7 +12,7 @@ use core::prelude::*;\n \n use ast;\n use codemap;\n-use codemap::{FileMap, Loc, Pos, ExpandedFrom, span};\n+use codemap::{Pos, ExpandedFrom, span};\n use codemap::{CallInfo, NameAndSpan};\n use ext::base::*;\n use ext::base;"}, {"sha": "f8a783c568a22d838c319bae60f57b5e3ecb7d74", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c", "patch": "@@ -132,7 +132,7 @@ enum lis {\n }\n \n fn lockstep_iter_size(t: &token_tree, r: &mut TtReader) -> lis {\n-    fn lis_merge(lhs: lis, rhs: lis, r: &mut TtReader) -> lis {\n+    fn lis_merge(lhs: lis, rhs: lis) -> lis {\n         match lhs {\n           lis_unconstrained => copy rhs,\n           lis_contradiction(_) => copy lhs,\n@@ -154,7 +154,7 @@ fn lockstep_iter_size(t: &token_tree, r: &mut TtReader) -> lis {\n       tt_delim(ref tts) | tt_seq(_, ref tts, _, _) => {\n         vec::foldl(lis_unconstrained, *tts, |lis, tt| {\n             let lis2 = lockstep_iter_size(tt, r);\n-            lis_merge(lis, lis2, r)\n+            lis_merge(lis, lis2)\n         })\n       }\n       tt_tok(*) => lis_unconstrained,"}, {"sha": "6027d3b07f23c844474c2ef667425736db562a1b", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c", "patch": "@@ -49,7 +49,7 @@ pub fn seq_sep_none() -> SeqSep {\n \n // maps any token back to a string. not necessary if you know it's\n // an identifier....\n-pub fn token_to_str(reader: @reader, token: &token::Token) -> ~str {\n+pub fn token_to_str(token: &token::Token) -> ~str {\n     token::to_str(get_ident_interner(), token)\n }\n "}, {"sha": "300e5adcf92ff94ab980d18bdeafcd80de02b70b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8bbf83b62a901039ea9e5e6a92b664f2d3c72b9c", "patch": "@@ -2573,7 +2573,7 @@ impl Parser {\n     fn parse_let(&self) -> @decl {\n         let is_mutbl = self.eat_keyword(keywords::Mut);\n         let lo = self.span.lo;\n-        let mut local = self.parse_local(is_mutbl);\n+        let local = self.parse_local(is_mutbl);\n         while self.eat(&token::COMMA) {\n             let _ = self.parse_local(is_mutbl);\n             self.obsolete(*self.span, ObsoleteMultipleLocalDecl);"}]}