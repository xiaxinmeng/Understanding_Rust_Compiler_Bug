{"sha": "113ac6e15e16efb193985be9c5329a72d55df30b", "node_id": "C_kwDOAAsO6NoAKDExM2FjNmUxNWUxNmVmYjE5Mzk4NWJlOWM1MzI5YTcyZDU1ZGYzMGI", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-01-11T17:41:15Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-02-17T05:02:26Z"}, "message": "Split off new lint `deref_by_slicing` from `redundant_slicing`", "tree": {"sha": "72bdc7b0b07d4414bd23543e7e0153dabb7a7703", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72bdc7b0b07d4414bd23543e7e0153dabb7a7703"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/113ac6e15e16efb193985be9c5329a72d55df30b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/113ac6e15e16efb193985be9c5329a72d55df30b", "html_url": "https://github.com/rust-lang/rust/commit/113ac6e15e16efb193985be9c5329a72d55df30b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/113ac6e15e16efb193985be9c5329a72d55df30b/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bdc97c4a66eccfc3925cd691121965b08017908", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bdc97c4a66eccfc3925cd691121965b08017908", "html_url": "https://github.com/rust-lang/rust/commit/4bdc97c4a66eccfc3925cd691121965b08017908"}], "stats": {"total": 141, "additions": 108, "deletions": 33}, "files": [{"sha": "ef7139d63bf08bbb4442e26d56bd4fe77e242c0e", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/113ac6e15e16efb193985be9c5329a72d55df30b/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/113ac6e15e16efb193985be9c5329a72d55df30b/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=113ac6e15e16efb193985be9c5329a72d55df30b", "patch": "@@ -3105,6 +3105,7 @@ Released 2018-09-13\n [`deprecated_cfg_attr`]: https://rust-lang.github.io/rust-clippy/master/index.html#deprecated_cfg_attr\n [`deprecated_semver`]: https://rust-lang.github.io/rust-clippy/master/index.html#deprecated_semver\n [`deref_addrof`]: https://rust-lang.github.io/rust-clippy/master/index.html#deref_addrof\n+[`deref_by_slicing`]: https://rust-lang.github.io/rust-clippy/master/index.html#deref_by_slicing\n [`derivable_impls`]: https://rust-lang.github.io/rust-clippy/master/index.html#derivable_impls\n [`derive_hash_xor_eq`]: https://rust-lang.github.io/rust-clippy/master/index.html#derive_hash_xor_eq\n [`derive_ord_xor_partial_ord`]: https://rust-lang.github.io/rust-clippy/master/index.html#derive_ord_xor_partial_ord"}, {"sha": "2451a5aab090f428f4a5f29f3f23fbea990a3b21", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/113ac6e15e16efb193985be9c5329a72d55df30b/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113ac6e15e16efb193985be9c5329a72d55df30b/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=113ac6e15e16efb193985be9c5329a72d55df30b", "patch": "@@ -420,6 +420,7 @@ store.register_lints(&[\n     redundant_else::REDUNDANT_ELSE,\n     redundant_field_names::REDUNDANT_FIELD_NAMES,\n     redundant_pub_crate::REDUNDANT_PUB_CRATE,\n+    redundant_slicing::DEREF_BY_SLICING,\n     redundant_slicing::REDUNDANT_SLICING,\n     redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES,\n     ref_option_ref::REF_OPTION_REF,"}, {"sha": "f89f35b885c15a377c772e103254c0b0884aeebf", "filename": "clippy_lints/src/lib.register_restriction.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/113ac6e15e16efb193985be9c5329a72d55df30b/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113ac6e15e16efb193985be9c5329a72d55df30b/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_restriction.rs?ref=113ac6e15e16efb193985be9c5329a72d55df30b", "patch": "@@ -51,6 +51,7 @@ store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), ve\n     LintId::of(panic_unimplemented::UNIMPLEMENTED),\n     LintId::of(panic_unimplemented::UNREACHABLE),\n     LintId::of(pattern_type_mismatch::PATTERN_TYPE_MISMATCH),\n+    LintId::of(redundant_slicing::DEREF_BY_SLICING),\n     LintId::of(same_name_method::SAME_NAME_METHOD),\n     LintId::of(shadow::SHADOW_REUSE),\n     LintId::of(shadow::SHADOW_SAME),"}, {"sha": "0de4541b6413ac44f9aa82ad9fbc189e50270fee", "filename": "clippy_lints/src/redundant_slicing.rs", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/113ac6e15e16efb193985be9c5329a72d55df30b/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113ac6e15e16efb193985be9c5329a72d55df30b/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_slicing.rs?ref=113ac6e15e16efb193985be9c5329a72d55df30b", "patch": "@@ -42,7 +42,31 @@ declare_clippy_lint! {\n     \"redundant slicing of the whole range of a type\"\n }\n \n-declare_lint_pass!(RedundantSlicing => [REDUNDANT_SLICING]);\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for slicing expression which are equivalent to dereferencing the\n+    /// value.\n+    ///\n+    /// ### Why is this bad?\n+    /// Some people may prefer to dereference rather than slice.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let vec = vec![1, 2, 3];\n+    /// let slice = &vec[..];\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let vec = vec![1, 2, 3];\n+    /// let slice = &*vec;\n+    /// ```\n+    #[clippy::version = \"1.60.0\"]\n+    pub DEREF_BY_SLICING,\n+    restriction,\n+    \"slicing instead of dereferencing\"\n+}\n+\n+declare_lint_pass!(RedundantSlicing => [REDUNDANT_SLICING, DEREF_BY_SLICING]);\n \n impl<'tcx> LateLintPass<'tcx> for RedundantSlicing {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n@@ -65,7 +89,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantSlicing {\n                 });\n                 let mut app = Applicability::MachineApplicable;\n \n-                let (help, sugg) = if expr_ty == indexed_ty {\n+                let (lint, msg, help, sugg) = if expr_ty == indexed_ty {\n                     if expr_ref_count > indexed_ref_count {\n                         // Indexing takes self by reference and can't return a reference to that\n                         // reference as it's a local variable. The only way this could happen is if\n@@ -103,7 +127,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantSlicing {\n                         format!(\"{}{}{}\", reborrow_str, \"*\".repeat(deref_count), snip)\n                     };\n \n-                    (help_str, sugg)\n+                    (REDUNDANT_SLICING, \"redundant slicing of the whole range\", help_str, sugg)\n                 } else if let Some(target_id) = cx.tcx.lang_items().deref_target() {\n                     if let Ok(deref_ty) = cx.tcx.try_normalize_erasing_regions(\n                         cx.param_env,\n@@ -116,7 +140,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantSlicing {\n                             } else {\n                                 format!(\"&{}{}*{}\", mutability.prefix_str(), \"*\".repeat(indexed_ref_count), snip)\n                             };\n-                            (\"dereference the original value instead\", sugg)\n+                            (DEREF_BY_SLICING, \"slicing when dereferencing would work\", \"dereference the original value instead\", sugg)\n                         } else {\n                             return;\n                         }\n@@ -129,9 +153,9 @@ impl<'tcx> LateLintPass<'tcx> for RedundantSlicing {\n \n                 span_lint_and_sugg(\n                     cx,\n-                    REDUNDANT_SLICING,\n+                    lint,\n                     expr.span,\n-                    \"redundant slicing of the whole range\",\n+                    msg,\n                     help,\n                     sugg,\n                     app,"}, {"sha": "edb19de07001a79afbdbb2fbb9ba1670e3770d4e", "filename": "tests/ui/deref_by_slicing.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/113ac6e15e16efb193985be9c5329a72d55df30b/tests%2Fui%2Fderef_by_slicing.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/113ac6e15e16efb193985be9c5329a72d55df30b/tests%2Fui%2Fderef_by_slicing.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_by_slicing.fixed?ref=113ac6e15e16efb193985be9c5329a72d55df30b", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+\n+#![warn(clippy::deref_by_slicing)]\n+\n+fn main() {\n+    let mut vec = vec![0];\n+    let _ = &*vec;\n+    let _ = &mut *vec;\n+\n+    let ref_vec = &mut vec;\n+    let _ = &**ref_vec;\n+    let _ = &mut **ref_vec;\n+\n+    let s = String::new();\n+    let _ = &*s;\n+}"}, {"sha": "6d489a44e765018d5f2b4a1178e923d0ad32f7c9", "filename": "tests/ui/deref_by_slicing.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/113ac6e15e16efb193985be9c5329a72d55df30b/tests%2Fui%2Fderef_by_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113ac6e15e16efb193985be9c5329a72d55df30b/tests%2Fui%2Fderef_by_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_by_slicing.rs?ref=113ac6e15e16efb193985be9c5329a72d55df30b", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+\n+#![warn(clippy::deref_by_slicing)]\n+\n+fn main() {\n+    let mut vec = vec![0];\n+    let _ = &vec[..];\n+    let _ = &mut vec[..];\n+\n+    let ref_vec = &mut vec;\n+    let _ = &ref_vec[..];\n+    let _ = &mut ref_vec[..];\n+\n+    let s = String::new();\n+    let _ = &s[..];\n+}"}, {"sha": "89e4ca718b540fe45a7dabb72b5edfb3271de232", "filename": "tests/ui/deref_by_slicing.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/113ac6e15e16efb193985be9c5329a72d55df30b/tests%2Fui%2Fderef_by_slicing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/113ac6e15e16efb193985be9c5329a72d55df30b/tests%2Fui%2Fderef_by_slicing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_by_slicing.stderr?ref=113ac6e15e16efb193985be9c5329a72d55df30b", "patch": "@@ -0,0 +1,34 @@\n+error: slicing when dereferencing would work\n+  --> $DIR/deref_by_slicing.rs:7:13\n+   |\n+LL |     let _ = &vec[..];\n+   |             ^^^^^^^^ help: dereference the original value instead: `&*vec`\n+   |\n+   = note: `-D clippy::deref-by-slicing` implied by `-D warnings`\n+\n+error: slicing when dereferencing would work\n+  --> $DIR/deref_by_slicing.rs:8:13\n+   |\n+LL |     let _ = &mut vec[..];\n+   |             ^^^^^^^^^^^^ help: dereference the original value instead: `&mut *vec`\n+\n+error: slicing when dereferencing would work\n+  --> $DIR/deref_by_slicing.rs:11:13\n+   |\n+LL |     let _ = &ref_vec[..];\n+   |             ^^^^^^^^^^^^ help: dereference the original value instead: `&**ref_vec`\n+\n+error: slicing when dereferencing would work\n+  --> $DIR/deref_by_slicing.rs:12:13\n+   |\n+LL |     let _ = &mut ref_vec[..];\n+   |             ^^^^^^^^^^^^^^^^ help: dereference the original value instead: `&mut **ref_vec`\n+\n+error: slicing when dereferencing would work\n+  --> $DIR/deref_by_slicing.rs:15:13\n+   |\n+LL |     let _ = &s[..];\n+   |             ^^^^^^ help: dereference the original value instead: `&*s`\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "da3d953375a1776a9dfa65ed1217d9e2d5a0d4d7", "filename": "tests/ui/redundant_slicing.fixed", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/113ac6e15e16efb193985be9c5329a72d55df30b/tests%2Fui%2Fredundant_slicing.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/113ac6e15e16efb193985be9c5329a72d55df30b/tests%2Fui%2Fredundant_slicing.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_slicing.fixed?ref=113ac6e15e16efb193985be9c5329a72d55df30b", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(unused)]\n+#![allow(unused, clippy::deref_by_slicing)]\n #![warn(clippy::redundant_slicing)]\n \n use std::io::Read;\n@@ -10,18 +10,18 @@ fn main() {\n     let _ = slice; // Redundant slice\n \n     let v = vec![0];\n-    let _ = &*v; // Deref instead of slice\n+    let _ = &v[..]; // Ok, results in `&[_]`\n     let _ = (&*v); // Outer borrow is redundant\n \n     static S: &[u8] = &[0, 1, 2];\n     let err = &mut &*S; // Should reborrow instead of slice\n \n     let mut vec = vec![0];\n-    let mut_slice = &mut *vec; // Deref instead of slice\n+    let mut_slice = &mut vec[..]; // Ok, results in `&mut [_]`\n     let _ = &mut *mut_slice; // Should reborrow instead of slice\n \n     let ref_vec = &vec;\n-    let _ = &**ref_vec; // Deref instead of slice\n+    let _ = &ref_vec[..]; // Ok, results in `&[_]`\n \n     macro_rules! m {\n         ($e:expr) => {"}, {"sha": "125b1d4591c348697c8e9a09011921c3e2d744d0", "filename": "tests/ui/redundant_slicing.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/113ac6e15e16efb193985be9c5329a72d55df30b/tests%2Fui%2Fredundant_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113ac6e15e16efb193985be9c5329a72d55df30b/tests%2Fui%2Fredundant_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_slicing.rs?ref=113ac6e15e16efb193985be9c5329a72d55df30b", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(unused)]\n+#![allow(unused, clippy::deref_by_slicing)]\n #![warn(clippy::redundant_slicing)]\n \n use std::io::Read;\n@@ -10,18 +10,18 @@ fn main() {\n     let _ = &slice[..]; // Redundant slice\n \n     let v = vec![0];\n-    let _ = &v[..]; // Deref instead of slice\n+    let _ = &v[..]; // Ok, results in `&[_]`\n     let _ = &(&*v)[..]; // Outer borrow is redundant\n \n     static S: &[u8] = &[0, 1, 2];\n     let err = &mut &S[..]; // Should reborrow instead of slice\n \n     let mut vec = vec![0];\n-    let mut_slice = &mut vec[..]; // Deref instead of slice\n+    let mut_slice = &mut vec[..]; // Ok, results in `&mut [_]`\n     let _ = &mut mut_slice[..]; // Should reborrow instead of slice\n \n     let ref_vec = &vec;\n-    let _ = &ref_vec[..]; // Deref instead of slice\n+    let _ = &ref_vec[..]; // Ok, results in `&[_]`\n \n     macro_rules! m {\n         ($e:expr) => {"}, {"sha": "b1c1c28894a6d78e30e1b493b17c0d20da54bdf6", "filename": "tests/ui/redundant_slicing.stderr", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/113ac6e15e16efb193985be9c5329a72d55df30b/tests%2Fui%2Fredundant_slicing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/113ac6e15e16efb193985be9c5329a72d55df30b/tests%2Fui%2Fredundant_slicing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_slicing.stderr?ref=113ac6e15e16efb193985be9c5329a72d55df30b", "patch": "@@ -6,12 +6,6 @@ LL |     let _ = &slice[..]; // Redundant slice\n    |\n    = note: `-D clippy::redundant-slicing` implied by `-D warnings`\n \n-error: redundant slicing of the whole range\n-  --> $DIR/redundant_slicing.rs:13:13\n-   |\n-LL |     let _ = &v[..]; // Deref instead of slice\n-   |             ^^^^^^ help: dereference the original value instead: `&*v`\n-\n error: redundant slicing of the whole range\n   --> $DIR/redundant_slicing.rs:14:13\n    |\n@@ -24,24 +18,12 @@ error: redundant slicing of the whole range\n LL |     let err = &mut &S[..]; // Should reborrow instead of slice\n    |                    ^^^^^^ help: reborrow the original value instead: `&*S`\n \n-error: redundant slicing of the whole range\n-  --> $DIR/redundant_slicing.rs:20:21\n-   |\n-LL |     let mut_slice = &mut vec[..]; // Deref instead of slice\n-   |                     ^^^^^^^^^^^^ help: dereference the original value instead: `&mut *vec`\n-\n error: redundant slicing of the whole range\n   --> $DIR/redundant_slicing.rs:21:13\n    |\n LL |     let _ = &mut mut_slice[..]; // Should reborrow instead of slice\n    |             ^^^^^^^^^^^^^^^^^^ help: reborrow the original value instead: `&mut *mut_slice`\n \n-error: redundant slicing of the whole range\n-  --> $DIR/redundant_slicing.rs:24:13\n-   |\n-LL |     let _ = &ref_vec[..]; // Deref instead of slice\n-   |             ^^^^^^^^^^^^ help: dereference the original value instead: `&**ref_vec`\n-\n error: redundant slicing of the whole range\n   --> $DIR/redundant_slicing.rs:31:13\n    |\n@@ -60,5 +42,5 @@ error: redundant slicing of the whole range\n LL |     let _ = (&bytes[..]).read_to_end(&mut vec![]).unwrap();\n    |             ^^^^^^^^^^^^ help: reborrow the original value instead: `(&*bytes)`\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 7 previous errors\n "}]}