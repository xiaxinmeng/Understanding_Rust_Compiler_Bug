{"sha": "b84d17d4d77b04e1b7784d95e0c3cb2dca16f344", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NGQxN2Q0ZDc3YjA0ZTFiNzc4NGQ5NWUwYzNjYjJkY2ExNmYzNDQ=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-06-15T06:11:33Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-19T00:01:34Z"}, "message": "Use ByteOrder methods instead of free-standing functions", "tree": {"sha": "141c8efaedcff726d54b07b9f8cf2a9d06f1e1ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/141c8efaedcff726d54b07b9f8cf2a9d06f1e1ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b84d17d4d77b04e1b7784d95e0c3cb2dca16f344", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b84d17d4d77b04e1b7784d95e0c3cb2dca16f344", "html_url": "https://github.com/rust-lang/rust/commit/b84d17d4d77b04e1b7784d95e0c3cb2dca16f344", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b84d17d4d77b04e1b7784d95e0c3cb2dca16f344/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87c529c43a41e0c04a468cd2b301013df629b040", "url": "https://api.github.com/repos/rust-lang/rust/commits/87c529c43a41e0c04a468cd2b301013df629b040", "html_url": "https://github.com/rust-lang/rust/commit/87c529c43a41e0c04a468cd2b301013df629b040"}], "stats": {"total": 100, "additions": 44, "deletions": 56}, "files": [{"sha": "80417e2a57986b914386d316a78423d7ebfac01c", "filename": "src/libcollections/hash/mod.rs", "status": "modified", "additions": 23, "deletions": 38, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/b84d17d4d77b04e1b7784d95e0c3cb2dca16f344/src%2Flibcollections%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b84d17d4d77b04e1b7784d95e0c3cb2dca16f344/src%2Flibcollections%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhash%2Fmod.rs?ref=b84d17d4d77b04e1b7784d95e0c3cb2dca16f344", "patch": "@@ -98,46 +98,31 @@ pub trait Writer {\n \n //////////////////////////////////////////////////////////////////////////////\n \n-fn id<T>(t: T) -> T { t }\n-\n-macro_rules! impl_hash(\n-    ( $($ty:ident, $uty:ident, $f:path;)* ) => (\n-        $(\n-            impl<S: Writer> Hash<S> for $ty {\n-                #[inline]\n-                fn hash(&self, state: &mut S) {\n-                    let a: [u8, ..::core::$ty::BYTES] = unsafe {\n-                        mem::transmute($f(*self as $uty) as $ty)\n-                    };\n-                    state.write(a.as_slice())\n-                }\n+macro_rules! impl_hash {\n+    ($ty:ident, $uty:ident) => {\n+        impl<S: Writer> Hash<S> for $ty {\n+            #[inline]\n+            fn hash(&self, state: &mut S) {\n+                use core::mem::ByteOrder;\n+                let a: [u8, ..::core::$ty::BYTES] = unsafe {\n+                    mem::transmute((*self as $uty).to_little_endian() as $ty)\n+                };\n+                state.write(a.as_slice())\n             }\n-        )*\n-    )\n-)\n-\n-impl_hash!(\n-    u8, u8, id;\n-    u16, u16, mem::to_le16;\n-    u32, u32, mem::to_le32;\n-    u64, u64, mem::to_le64;\n-    i8, u8, id;\n-    i16, u16, mem::to_le16;\n-    i32, u32, mem::to_le32;\n-    i64, u64, mem::to_le64;\n-)\n-\n-#[cfg(target_word_size = \"32\")]\n-impl_hash!(\n-    uint, u32, mem::to_le32;\n-    int, u32, mem::to_le32;\n-)\n+        }\n+    }\n+}\n \n-#[cfg(target_word_size = \"64\")]\n-impl_hash!(\n-    uint, u64, mem::to_le64;\n-    int, u64, mem::to_le64;\n-)\n+impl_hash!(u8, u8)\n+impl_hash!(u16, u16)\n+impl_hash!(u32, u32)\n+impl_hash!(u64, u64)\n+impl_hash!(uint, uint)\n+impl_hash!(i8, u8)\n+impl_hash!(i16, u16)\n+impl_hash!(i32, u32)\n+impl_hash!(i64, u64)\n+impl_hash!(int, uint)\n \n impl<S: Writer> Hash<S> for bool {\n     #[inline]"}, {"sha": "f0cd2d966cb36d9d339f5702301c650ee19a2b34", "filename": "src/libnative/io/net.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b84d17d4d77b04e1b7784d95e0c3cb2dca16f344/src%2Flibnative%2Fio%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b84d17d4d77b04e1b7784d95e0c3cb2dca16f344/src%2Flibnative%2Fio%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fnet.rs?ref=b84d17d4d77b04e1b7784d95e0c3cb2dca16f344", "patch": "@@ -11,6 +11,7 @@\n use alloc::arc::Arc;\n use libc;\n use std::mem;\n+use std::mem::ByteOrder;\n use std::rt::mutex;\n use std::rt::rtio;\n use std::rt::rtio::{IoResult, IoError};\n@@ -27,10 +28,10 @@ use super::util;\n #[cfg(unix)]    pub type sock_t = super::file::fd_t;\n \n pub fn htons(u: u16) -> u16 {\n-    mem::to_be16(u)\n+    u.to_big_endian()\n }\n pub fn ntohs(u: u16) -> u16 {\n-    mem::from_be16(u)\n+    ByteOrder::from_big_endian(u)\n }\n \n enum InAddr {\n@@ -46,7 +47,7 @@ fn ip_to_inaddr(ip: rtio::IpAddr) -> InAddr {\n                      (c as u32 <<  8) |\n                      (d as u32 <<  0);\n             InAddr(libc::in_addr {\n-                s_addr: mem::from_be32(ip)\n+                s_addr: ByteOrder::from_big_endian(ip)\n             })\n         }\n         rtio::Ipv6Addr(a, b, c, d, e, f, g, h) => {\n@@ -180,7 +181,7 @@ pub fn sockaddr_to_addr(storage: &libc::sockaddr_storage,\n             let storage: &libc::sockaddr_in = unsafe {\n                 mem::transmute(storage)\n             };\n-            let ip = mem::to_be32(storage.sin_addr.s_addr as u32);\n+            let ip = (storage.sin_addr.s_addr as u32).to_big_endian();\n             let a = (ip >> 24) as u8;\n             let b = (ip >> 16) as u8;\n             let c = (ip >>  8) as u8;"}, {"sha": "83beeceb8de3eaf60a022dbd75bebfbc53e14725", "filename": "src/librustuv/net.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b84d17d4d77b04e1b7784d95e0c3cb2dca16f344/src%2Flibrustuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b84d17d4d77b04e1b7784d95e0c3cb2dca16f344/src%2Flibrustuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fnet.rs?ref=b84d17d4d77b04e1b7784d95e0c3cb2dca16f344", "patch": "@@ -11,6 +11,7 @@\n use libc::{size_t, ssize_t, c_int, c_void, c_uint};\n use libc;\n use std::mem;\n+use std::mem::ByteOrder;\n use std::ptr;\n use std::rt::rtio;\n use std::rt::rtio::IoError;\n@@ -30,8 +31,8 @@ use uvll;\n /// Generic functions related to dealing with sockaddr things\n ////////////////////////////////////////////////////////////////////////////////\n \n-pub fn htons(u: u16) -> u16 { mem::to_be16(u) }\n-pub fn ntohs(u: u16) -> u16 { mem::from_be16(u) }\n+pub fn htons(u: u16) -> u16 { u.to_big_endian() }\n+pub fn ntohs(u: u16) -> u16 { ByteOrder::from_big_endian(u) }\n \n pub fn sockaddr_to_addr(storage: &libc::sockaddr_storage,\n                         len: uint) -> rtio::SocketAddr {\n@@ -41,7 +42,7 @@ pub fn sockaddr_to_addr(storage: &libc::sockaddr_storage,\n             let storage: &libc::sockaddr_in = unsafe {\n                 mem::transmute(storage)\n             };\n-            let ip = mem::to_be32(storage.sin_addr.s_addr as u32);\n+            let ip = (storage.sin_addr.s_addr as u32).to_big_endian();\n             let a = (ip >> 24) as u8;\n             let b = (ip >> 16) as u8;\n             let c = (ip >>  8) as u8;\n@@ -89,7 +90,8 @@ fn addr_to_sockaddr(addr: rtio::SocketAddr) -> (libc::sockaddr_storage, uint) {\n                 (*storage).sin_family = libc::AF_INET as libc::sa_family_t;\n                 (*storage).sin_port = htons(addr.port);\n                 (*storage).sin_addr = libc::in_addr {\n-                    s_addr: mem::from_be32(ip)\n+                    s_addr: ByteOrder::from_big_endian(ip),\n+\n                 };\n                 mem::size_of::<libc::sockaddr_in>()\n             }"}, {"sha": "a1c79bc0b757c13674e2596bbf1701ed45e6fe61", "filename": "src/libserialize/ebml.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b84d17d4d77b04e1b7784d95e0c3cb2dca16f344/src%2Flibserialize%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b84d17d4d77b04e1b7784d95e0c3cb2dca16f344/src%2Flibserialize%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Febml.rs?ref=b84d17d4d77b04e1b7784d95e0c3cb2dca16f344", "patch": "@@ -154,7 +154,7 @@ pub mod reader {\n     }\n \n     pub fn vuint_at(data: &[u8], start: uint) -> DecodeResult<Res> {\n-        use std::mem::from_be32;\n+        use std::mem::ByteOrder;\n \n         if data.len() - start < 4 {\n             return vuint_at_slow(data, start);\n@@ -185,7 +185,7 @@ pub mod reader {\n \n         unsafe {\n             let ptr = data.as_ptr().offset(start as int) as *u32;\n-            let val = from_be32(*ptr);\n+            let val = ByteOrder::from_big_endian(*ptr);\n \n             let i = (val >> 28u) as uint;\n             let (shift, mask) = SHIFT_MASK_TABLE[i];"}, {"sha": "1140f023d43fde30b3a7bedfa267334bde63ba39", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b84d17d4d77b04e1b7784d95e0c3cb2dca16f344/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b84d17d4d77b04e1b7784d95e0c3cb2dca16f344/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=b84d17d4d77b04e1b7784d95e0c3cb2dca16f344", "patch": "@@ -209,7 +209,7 @@ impl Uuid {\n     /// * `d3` A 16-bit word\n     /// * `d4` Array of 8 octets\n     pub fn from_fields(d1: u32, d2: u16, d3: u16, d4: &[u8]) -> Uuid {\n-        use std::mem::{to_be16, to_be32};\n+        use std::mem::ByteOrder;\n \n         // First construct a temporary field-based struct\n         let mut fields = UuidFields {\n@@ -219,9 +219,9 @@ impl Uuid {\n                 data4: [0, ..8]\n         };\n \n-        fields.data1 = to_be32(d1);\n-        fields.data2 = to_be16(d2);\n-        fields.data3 = to_be16(d3);\n+        fields.data1 = d1.to_big_endian();\n+        fields.data2 = d2.to_big_endian();\n+        fields.data3 = d3.to_big_endian();\n         slice::bytes::copy_memory(fields.data4, d4);\n \n         unsafe {\n@@ -335,16 +335,16 @@ impl Uuid {\n     ///\n     /// Example: `550e8400-e29b-41d4-a716-446655440000`\n     pub fn to_hyphenated_str(&self) -> String {\n-        use std::mem::{to_be16, to_be32};\n+        use std::mem::ByteOrder;\n         // Convert to field-based struct as it matches groups in output.\n         // Ensure fields are in network byte order, as per RFC.\n         let mut uf: UuidFields;\n         unsafe {\n             uf = transmute_copy(&self.bytes);\n         }\n-        uf.data1 = to_be32(uf.data1);\n-        uf.data2 = to_be16(uf.data2);\n-        uf.data3 = to_be16(uf.data3);\n+        uf.data1 = uf.data1.to_big_endian();\n+        uf.data2 = uf.data2.to_big_endian();\n+        uf.data3 = uf.data3.to_big_endian();\n         let s = format!(\"{:08x}-{:04x}-{:04x}-{:02x}{:02x}-\\\n                          {:02x}{:02x}{:02x}{:02x}{:02x}{:02x}\",\n             uf.data1,"}]}