{"sha": "8d8f6995ce063fe812bb668a8b8fe4e5edf213ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkOGY2OTk1Y2UwNjNmZTgxMmJiNjY4YThiOGZlNGU1ZWRmMjEzZWY=", "commit": {"author": {"name": "Laurence Tratt", "email": "laurie@tratt.net", "date": "2021-04-11T08:35:00Z"}, "committer": {"name": "Laurence Tratt", "email": "laurie@tratt.net", "date": "2021-04-11T08:35:00Z"}, "message": "Clarify the guarantees that ThreadId does and doesn't make.\n\nThe existing documentation does not spell out whether `ThreadId`s are unique\nduring the lifetime of a thread or of a process. I had to examine the source\ncode to realise (pleasingly!) that they're unique for the lifetime of a process.\nThat seems worth documenting clearly, as it's a strong guarantee.\n\nExamining the way `ThreadId`s are created also made me realise that the `as_u64`\nmethod on `ThreadId` could be a trap for the unwary on those platforms where the\nplatform's notion of a thread identifier is also a 64 bit integer (particularly\nif they happen to use a similar identifier scheme to `ThreadId`). I therefore\nthink it's worth being even clearer that there's no relationship between the\ntwo.", "tree": {"sha": "ccdedf6e37f0710ac746b2716f8c71814f9541c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccdedf6e37f0710ac746b2716f8c71814f9541c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d8f6995ce063fe812bb668a8b8fe4e5edf213ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d8f6995ce063fe812bb668a8b8fe4e5edf213ef", "html_url": "https://github.com/rust-lang/rust/commit/8d8f6995ce063fe812bb668a8b8fe4e5edf213ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d8f6995ce063fe812bb668a8b8fe4e5edf213ef/comments", "author": {"login": "ltratt", "id": 20318, "node_id": "MDQ6VXNlcjIwMzE4", "avatar_url": "https://avatars.githubusercontent.com/u/20318?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ltratt", "html_url": "https://github.com/ltratt", "followers_url": "https://api.github.com/users/ltratt/followers", "following_url": "https://api.github.com/users/ltratt/following{/other_user}", "gists_url": "https://api.github.com/users/ltratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/ltratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ltratt/subscriptions", "organizations_url": "https://api.github.com/users/ltratt/orgs", "repos_url": "https://api.github.com/users/ltratt/repos", "events_url": "https://api.github.com/users/ltratt/events{/privacy}", "received_events_url": "https://api.github.com/users/ltratt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ltratt", "id": 20318, "node_id": "MDQ6VXNlcjIwMzE4", "avatar_url": "https://avatars.githubusercontent.com/u/20318?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ltratt", "html_url": "https://github.com/ltratt", "followers_url": "https://api.github.com/users/ltratt/followers", "following_url": "https://api.github.com/users/ltratt/following{/other_user}", "gists_url": "https://api.github.com/users/ltratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/ltratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ltratt/subscriptions", "organizations_url": "https://api.github.com/users/ltratt/orgs", "repos_url": "https://api.github.com/users/ltratt/repos", "events_url": "https://api.github.com/users/ltratt/events{/privacy}", "received_events_url": "https://api.github.com/users/ltratt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28b948fc5c0163b76c69d792b91a0e83850e7e54", "url": "https://api.github.com/repos/rust-lang/rust/commits/28b948fc5c0163b76c69d792b91a0e83850e7e54", "html_url": "https://github.com/rust-lang/rust/commit/28b948fc5c0163b76c69d792b91a0e83850e7e54"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "f33e785f96dcd06f2392060a2cdcc1dcb5c975a7", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8d8f6995ce063fe812bb668a8b8fe4e5edf213ef/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d8f6995ce063fe812bb668a8b8fe4e5edf213ef/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=8d8f6995ce063fe812bb668a8b8fe4e5edf213ef", "patch": "@@ -965,10 +965,13 @@ pub fn park_timeout(dur: Duration) {\n \n /// A unique identifier for a running thread.\n ///\n-/// A `ThreadId` is an opaque object that has a unique value for each thread\n-/// that creates one. `ThreadId`s are not guaranteed to correspond to a thread's\n-/// system-designated identifier. A `ThreadId` can be retrieved from the [`id`]\n-/// method on a [`Thread`].\n+/// A `ThreadId` is an opaque object that uniquely identifies each thread\n+/// created during the lifetime of a process. `ThreadId`s are guaranteed not to\n+/// be reused, even if a thread dies. `ThreadId`s are under the control of\n+/// Rust's standard library and there may not be any relationship between\n+/// `ThreadId` and the underlying platform's notion of a thread identifier --\n+/// the two concepts cannot, therefore, be used interchangeably. A `ThreadId`\n+/// can be retrieved from the [`id`] method on a [`Thread`].\n ///\n /// # Examples\n ///"}]}