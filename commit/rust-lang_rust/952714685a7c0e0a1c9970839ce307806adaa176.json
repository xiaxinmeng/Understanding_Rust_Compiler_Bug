{"sha": "952714685a7c0e0a1c9970839ce307806adaa176", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1MjcxNDY4NWE3YzBlMGExYzk5NzA4MzljZTMwNzgwNmFkYWExNzY=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-04-05T16:24:18Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-04-05T17:23:18Z"}, "message": "Upgrade Chalk again\n\nThe big change here is counting binders, not\nvariables (https://github.com/rust-lang/chalk/pull/360). We have to adapt to the\nsame scheme for our `Ty::Bound`. It's mostly fine though, even makes some things\nmore clear.", "tree": {"sha": "2d002aa05d91133886bb592ba79e4c9238e37343", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d002aa05d91133886bb592ba79e4c9238e37343"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/952714685a7c0e0a1c9970839ce307806adaa176", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/952714685a7c0e0a1c9970839ce307806adaa176", "html_url": "https://github.com/rust-lang/rust/commit/952714685a7c0e0a1c9970839ce307806adaa176", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/952714685a7c0e0a1c9970839ce307806adaa176/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3659502816134b45448799acf428055e40fdf4fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3659502816134b45448799acf428055e40fdf4fc", "html_url": "https://github.com/rust-lang/rust/commit/3659502816134b45448799acf428055e40fdf4fc"}], "stats": {"total": 313, "additions": 198, "deletions": 115}, "files": [{"sha": "2ea0c5cd16083fc0a7413844d2cd2fb4f8faa4e5", "filename": "Cargo.lock", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/952714685a7c0e0a1c9970839ce307806adaa176/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/952714685a7c0e0a1c9970839ce307806adaa176/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=952714685a7c0e0a1c9970839ce307806adaa176", "patch": "@@ -114,7 +114,7 @@ checksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n [[package]]\n name = \"chalk-derive\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=d383af7333cc6014e9d9e3e77668b5d5b0a5b40e#d383af7333cc6014e9d9e3e77668b5d5b0a5b40e\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=039fc904a05f8cb3d0c682c9a57a63dda7a35356#039fc904a05f8cb3d0c682c9a57a63dda7a35356\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -124,7 +124,7 @@ dependencies = [\n [[package]]\n name = \"chalk-engine\"\n version = \"0.9.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=d383af7333cc6014e9d9e3e77668b5d5b0a5b40e#d383af7333cc6014e9d9e3e77668b5d5b0a5b40e\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=039fc904a05f8cb3d0c682c9a57a63dda7a35356#039fc904a05f8cb3d0c682c9a57a63dda7a35356\"\n dependencies = [\n  \"chalk-macros\",\n  \"rustc-hash\",\n@@ -133,7 +133,7 @@ dependencies = [\n [[package]]\n name = \"chalk-ir\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=d383af7333cc6014e9d9e3e77668b5d5b0a5b40e#d383af7333cc6014e9d9e3e77668b5d5b0a5b40e\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=039fc904a05f8cb3d0c682c9a57a63dda7a35356#039fc904a05f8cb3d0c682c9a57a63dda7a35356\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-engine\",\n@@ -143,15 +143,15 @@ dependencies = [\n [[package]]\n name = \"chalk-macros\"\n version = \"0.1.1\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=d383af7333cc6014e9d9e3e77668b5d5b0a5b40e#d383af7333cc6014e9d9e3e77668b5d5b0a5b40e\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=039fc904a05f8cb3d0c682c9a57a63dda7a35356#039fc904a05f8cb3d0c682c9a57a63dda7a35356\"\n dependencies = [\n  \"lazy_static\",\n ]\n \n [[package]]\n name = \"chalk-rust-ir\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=d383af7333cc6014e9d9e3e77668b5d5b0a5b40e#d383af7333cc6014e9d9e3e77668b5d5b0a5b40e\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=039fc904a05f8cb3d0c682c9a57a63dda7a35356#039fc904a05f8cb3d0c682c9a57a63dda7a35356\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-engine\",\n@@ -162,7 +162,7 @@ dependencies = [\n [[package]]\n name = \"chalk-solve\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=d383af7333cc6014e9d9e3e77668b5d5b0a5b40e#d383af7333cc6014e9d9e3e77668b5d5b0a5b40e\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=039fc904a05f8cb3d0c682c9a57a63dda7a35356#039fc904a05f8cb3d0c682c9a57a63dda7a35356\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-engine\","}, {"sha": "45be08430a2f544a6deebf89be4366c69953011f", "filename": "crates/ra_hir_ty/Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/952714685a7c0e0a1c9970839ce307806adaa176/crates%2Fra_hir_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/952714685a7c0e0a1c9970839ce307806adaa176/crates%2Fra_hir_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2FCargo.toml?ref=952714685a7c0e0a1c9970839ce307806adaa176", "patch": "@@ -23,9 +23,9 @@ ra_prof = { path = \"../ra_prof\" }\n ra_syntax = { path = \"../ra_syntax\" }\n test_utils = { path = \"../test_utils\" }\n \n-chalk-solve =   { git = \"https://github.com/rust-lang/chalk.git\", rev = \"d383af7333cc6014e9d9e3e77668b5d5b0a5b40e\" }\n-chalk-rust-ir = { git = \"https://github.com/rust-lang/chalk.git\", rev = \"d383af7333cc6014e9d9e3e77668b5d5b0a5b40e\" }\n-chalk-ir =      { git = \"https://github.com/rust-lang/chalk.git\", rev = \"d383af7333cc6014e9d9e3e77668b5d5b0a5b40e\" }\n+chalk-solve =   { git = \"https://github.com/rust-lang/chalk.git\", rev = \"039fc904a05f8cb3d0c682c9a57a63dda7a35356\" }\n+chalk-rust-ir = { git = \"https://github.com/rust-lang/chalk.git\", rev = \"039fc904a05f8cb3d0c682c9a57a63dda7a35356\" }\n+chalk-ir =      { git = \"https://github.com/rust-lang/chalk.git\", rev = \"039fc904a05f8cb3d0c682c9a57a63dda7a35356\" }\n \n [dev-dependencies]\n insta = \"0.15.0\""}, {"sha": "d91c21e24cce7a31e64a5000358d01535d4098d1", "filename": "crates/ra_hir_ty/src/autoderef.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/952714685a7c0e0a1c9970839ce307806adaa176/crates%2Fra_hir_ty%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952714685a7c0e0a1c9970839ce307806adaa176/crates%2Fra_hir_ty%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fautoderef.rs?ref=952714685a7c0e0a1c9970839ce307806adaa176", "patch": "@@ -14,7 +14,7 @@ use crate::{\n     db::HirDatabase,\n     traits::{InEnvironment, Solution},\n     utils::generics,\n-    Canonical, Substs, Ty, TypeWalk,\n+    BoundVar, Canonical, DebruijnIndex, Substs, Ty,\n };\n \n const AUTODEREF_RECURSION_LIMIT: usize = 10;\n@@ -61,14 +61,13 @@ fn deref_by_trait(\n         return None;\n     }\n \n-    // FIXME make the Canonical handling nicer\n+    // FIXME make the Canonical / bound var handling nicer\n \n-    let parameters = Substs::build_for_generics(&generic_params)\n-        .push(ty.value.value.clone().shift_bound_vars(1))\n-        .build();\n+    let parameters =\n+        Substs::build_for_generics(&generic_params).push(ty.value.value.clone()).build();\n \n     let projection = super::traits::ProjectionPredicate {\n-        ty: Ty::Bound(0),\n+        ty: Ty::Bound(BoundVar::new(DebruijnIndex::INNERMOST, ty.value.num_vars)),\n         projection_ty: super::ProjectionTy { associated_ty: target, parameters },\n     };\n \n@@ -93,12 +92,16 @@ fn deref_by_trait(\n             // we have `impl<T> Deref for Foo<T> { Target = T }`, that should be\n             // the case.\n             for i in 1..vars.0.num_vars {\n-                if vars.0.value[i] != Ty::Bound((i - 1) as u32) {\n+                if vars.0.value[i - 1] != Ty::Bound(BoundVar::new(DebruijnIndex::INNERMOST, i - 1))\n+                {\n                     warn!(\"complex solution for derefing {:?}: {:?}, ignoring\", ty.value, solution);\n                     return None;\n                 }\n             }\n-            Some(Canonical { value: vars.0.value[0].clone(), num_vars: vars.0.num_vars })\n+            Some(Canonical {\n+                value: vars.0.value[vars.0.value.len() - 1].clone(),\n+                num_vars: vars.0.num_vars,\n+            })\n         }\n         Solution::Ambig(_) => {\n             info!(\"Ambiguous solution for derefing {:?}: {:?}\", ty.value, solution);"}, {"sha": "1f5168ee399022e8fdeea06d0c5c86565457037e", "filename": "crates/ra_hir_ty/src/display.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/952714685a7c0e0a1c9970839ce307806adaa176/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952714685a7c0e0a1c9970839ce307806adaa176/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs?ref=952714685a7c0e0a1c9970839ce307806adaa176", "patch": "@@ -303,7 +303,7 @@ impl HirDisplay for Ty {\n                     }\n                 }\n             }\n-            Ty::Bound(idx) => write!(f, \"?{}\", idx)?,\n+            Ty::Bound(idx) => write!(f, \"?{}.{}\", idx.debruijn.depth(), idx.index)?,\n             Ty::Dyn(predicates) | Ty::Opaque(predicates) => {\n                 match self {\n                     Ty::Dyn(_) => write!(f, \"dyn \")?,"}, {"sha": "ac25f8a80577f5397531c99a20dc9782f098ec7a", "filename": "crates/ra_hir_ty/src/infer/unify.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/952714685a7c0e0a1c9970839ce307806adaa176/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952714685a7c0e0a1c9970839ce307806adaa176/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Funify.rs?ref=952714685a7c0e0a1c9970839ce307806adaa176", "patch": "@@ -7,7 +7,9 @@ use ena::unify::{InPlaceUnificationTable, NoError, UnifyKey, UnifyValue};\n use test_utils::tested_by;\n \n use super::{InferenceContext, Obligation};\n-use crate::{Canonical, InEnvironment, InferTy, Substs, Ty, TypeCtor, TypeWalk};\n+use crate::{\n+    BoundVar, Canonical, DebruijnIndex, InEnvironment, InferTy, Substs, Ty, TypeCtor, TypeWalk,\n+};\n \n impl<'a> InferenceContext<'a> {\n     pub(super) fn canonicalizer<'b>(&'b mut self) -> Canonicalizer<'a, 'b>\n@@ -47,7 +49,7 @@ where\n         })\n     }\n \n-    fn do_canonicalize<T: TypeWalk>(&mut self, t: T, binders: usize) -> T {\n+    fn do_canonicalize<T: TypeWalk>(&mut self, t: T, binders: DebruijnIndex) -> T {\n         t.fold_binders(\n             &mut |ty, binders| match ty {\n                 Ty::Infer(tv) => {\n@@ -72,7 +74,7 @@ where\n                             InferTy::MaybeNeverTypeVar(_) => InferTy::MaybeNeverTypeVar(root),\n                         };\n                         let position = self.add(free_var);\n-                        Ty::Bound((position + binders) as u32)\n+                        Ty::Bound(BoundVar::new(binders, position))\n                     }\n                 }\n                 _ => ty,\n@@ -89,7 +91,7 @@ where\n     }\n \n     pub(crate) fn canonicalize_ty(mut self, ty: Ty) -> Canonicalized<Ty> {\n-        let result = self.do_canonicalize(ty, 0);\n+        let result = self.do_canonicalize(ty, DebruijnIndex::INNERMOST);\n         self.into_canonicalized(result)\n     }\n \n@@ -98,8 +100,12 @@ where\n         obligation: InEnvironment<Obligation>,\n     ) -> Canonicalized<InEnvironment<Obligation>> {\n         let result = match obligation.value {\n-            Obligation::Trait(tr) => Obligation::Trait(self.do_canonicalize(tr, 0)),\n-            Obligation::Projection(pr) => Obligation::Projection(self.do_canonicalize(pr, 0)),\n+            Obligation::Trait(tr) => {\n+                Obligation::Trait(self.do_canonicalize(tr, DebruijnIndex::INNERMOST))\n+            }\n+            Obligation::Projection(pr) => {\n+                Obligation::Projection(self.do_canonicalize(pr, DebruijnIndex::INNERMOST))\n+            }\n         };\n         self.into_canonicalized(InEnvironment {\n             value: result,\n@@ -112,13 +118,13 @@ impl<T> Canonicalized<T> {\n     pub fn decanonicalize_ty(&self, mut ty: Ty) -> Ty {\n         ty.walk_mut_binders(\n             &mut |ty, binders| {\n-                if let &mut Ty::Bound(idx) = ty {\n-                    if idx as usize >= binders && (idx as usize - binders) < self.free_vars.len() {\n-                        *ty = Ty::Infer(self.free_vars[idx as usize - binders]);\n+                if let &mut Ty::Bound(bound) = ty {\n+                    if bound.debruijn >= binders {\n+                        *ty = Ty::Infer(self.free_vars[bound.index]);\n                     }\n                 }\n             },\n-            0,\n+            DebruijnIndex::INNERMOST,\n         );\n         ty\n     }\n@@ -150,7 +156,7 @@ pub fn unify(ty1: &Canonical<Ty>, ty2: &Canonical<Ty>) -> Option<Substs> {\n     // (kind of hacky)\n     for (i, var) in vars.iter().enumerate() {\n         if &*table.resolve_ty_shallow(var) == var {\n-            table.unify(var, &Ty::Bound(i as u32));\n+            table.unify(var, &Ty::Bound(BoundVar::new(DebruijnIndex::INNERMOST, i)));\n         }\n     }\n     Some("}, {"sha": "a9022dee774d760511d41c18f20e7811a41d89ec", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 73, "deletions": 30, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/952714685a7c0e0a1c9970839ce307806adaa176/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952714685a7c0e0a1c9970839ce307806adaa176/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=952714685a7c0e0a1c9970839ce307806adaa176", "patch": "@@ -64,6 +64,8 @@ pub use lower::{\n };\n pub use traits::{InEnvironment, Obligation, ProjectionPredicate, TraitEnvironment};\n \n+pub use chalk_ir::{BoundVar, DebruijnIndex};\n+\n /// A type constructor or type name: this might be something like the primitive\n /// type `bool`, a struct like `Vec`, or things like function pointers or\n /// tuples.\n@@ -265,7 +267,11 @@ impl TypeWalk for ProjectionTy {\n         self.parameters.walk(f);\n     }\n \n-    fn walk_mut_binders(&mut self, f: &mut impl FnMut(&mut Ty, usize), binders: usize) {\n+    fn walk_mut_binders(\n+        &mut self,\n+        f: &mut impl FnMut(&mut Ty, DebruijnIndex),\n+        binders: DebruijnIndex,\n+    ) {\n         self.parameters.walk_mut_binders(f, binders);\n     }\n }\n@@ -299,7 +305,7 @@ pub enum Ty {\n     /// parameters get turned into variables; during trait resolution, inference\n     /// variables get turned into bound variables and back; and in `Dyn` the\n     /// `Self` type is represented with a bound variable as well.\n-    Bound(u32),\n+    Bound(BoundVar),\n \n     /// A type variable used during type checking.\n     Infer(InferTy),\n@@ -337,7 +343,11 @@ impl TypeWalk for Substs {\n         }\n     }\n \n-    fn walk_mut_binders(&mut self, f: &mut impl FnMut(&mut Ty, usize), binders: usize) {\n+    fn walk_mut_binders(\n+        &mut self,\n+        f: &mut impl FnMut(&mut Ty, DebruijnIndex),\n+        binders: DebruijnIndex,\n+    ) {\n         for t in make_mut_slice(&mut self.0) {\n             t.walk_mut_binders(f, binders);\n         }\n@@ -381,7 +391,13 @@ impl Substs {\n \n     /// Return Substs that replace each parameter by a bound variable.\n     pub(crate) fn bound_vars(generic_params: &Generics) -> Substs {\n-        Substs(generic_params.iter().enumerate().map(|(idx, _)| Ty::Bound(idx as u32)).collect())\n+        Substs(\n+            generic_params\n+                .iter()\n+                .enumerate()\n+                .map(|(idx, _)| Ty::Bound(BoundVar::new(DebruijnIndex::INNERMOST, idx)))\n+                .collect(),\n+        )\n     }\n \n     pub fn build_for_def(db: &dyn HirDatabase, def: impl Into<GenericDefId>) -> SubstsBuilder {\n@@ -425,8 +441,8 @@ impl SubstsBuilder {\n         self.param_count - self.vec.len()\n     }\n \n-    pub fn fill_with_bound_vars(self, starting_from: u32) -> Self {\n-        self.fill((starting_from..).map(Ty::Bound))\n+    pub fn fill_with_bound_vars(self, debruijn: DebruijnIndex, starting_from: usize) -> Self {\n+        self.fill((starting_from..).map(|idx| Ty::Bound(BoundVar::new(debruijn, idx))))\n     }\n \n     pub fn fill_with_unknown(self) -> Self {\n@@ -507,7 +523,11 @@ impl TypeWalk for TraitRef {\n         self.substs.walk(f);\n     }\n \n-    fn walk_mut_binders(&mut self, f: &mut impl FnMut(&mut Ty, usize), binders: usize) {\n+    fn walk_mut_binders(\n+        &mut self,\n+        f: &mut impl FnMut(&mut Ty, DebruijnIndex),\n+        binders: DebruijnIndex,\n+    ) {\n         self.substs.walk_mut_binders(f, binders);\n     }\n }\n@@ -558,7 +578,11 @@ impl TypeWalk for GenericPredicate {\n         }\n     }\n \n-    fn walk_mut_binders(&mut self, f: &mut impl FnMut(&mut Ty, usize), binders: usize) {\n+    fn walk_mut_binders(\n+        &mut self,\n+        f: &mut impl FnMut(&mut Ty, DebruijnIndex),\n+        binders: DebruijnIndex,\n+    ) {\n         match self {\n             GenericPredicate::Implemented(trait_ref) => trait_ref.walk_mut_binders(f, binders),\n             GenericPredicate::Projection(projection_pred) => {\n@@ -616,7 +640,11 @@ impl TypeWalk for FnSig {\n         }\n     }\n \n-    fn walk_mut_binders(&mut self, f: &mut impl FnMut(&mut Ty, usize), binders: usize) {\n+    fn walk_mut_binders(\n+        &mut self,\n+        f: &mut impl FnMut(&mut Ty, DebruijnIndex),\n+        binders: DebruijnIndex,\n+    ) {\n         for t in make_mut_slice(&mut self.params_and_return) {\n             t.walk_mut_binders(f, binders);\n         }\n@@ -755,7 +783,7 @@ impl Ty {\n pub trait TypeWalk {\n     fn walk(&self, f: &mut impl FnMut(&Ty));\n     fn walk_mut(&mut self, f: &mut impl FnMut(&mut Ty)) {\n-        self.walk_mut_binders(&mut |ty, _binders| f(ty), 0);\n+        self.walk_mut_binders(&mut |ty, _binders| f(ty), DebruijnIndex::INNERMOST);\n     }\n     /// Walk the type, counting entered binders.\n     ///\n@@ -767,9 +795,17 @@ pub trait TypeWalk {\n     /// that. Currently, the only thing that introduces bound variables on our\n     /// side are `Ty::Dyn` and `Ty::Opaque`, which each introduce a bound\n     /// variable for the self type.\n-    fn walk_mut_binders(&mut self, f: &mut impl FnMut(&mut Ty, usize), binders: usize);\n-\n-    fn fold_binders(mut self, f: &mut impl FnMut(Ty, usize) -> Ty, binders: usize) -> Self\n+    fn walk_mut_binders(\n+        &mut self,\n+        f: &mut impl FnMut(&mut Ty, DebruijnIndex),\n+        binders: DebruijnIndex,\n+    );\n+\n+    fn fold_binders(\n+        mut self,\n+        f: &mut impl FnMut(Ty, DebruijnIndex) -> Ty,\n+        binders: DebruijnIndex,\n+    ) -> Self\n     where\n         Self: Sized,\n     {\n@@ -795,40 +831,43 @@ pub trait TypeWalk {\n     }\n \n     /// Substitutes `Ty::Bound` vars with the given substitution.\n-    fn subst_bound_vars(mut self, substs: &Substs) -> Self\n+    fn subst_bound_vars(self, substs: &Substs) -> Self\n+    where\n+        Self: Sized,\n+    {\n+        self.subst_bound_vars_at_depth(substs, DebruijnIndex::INNERMOST)\n+    }\n+\n+    /// Substitutes `Ty::Bound` vars with the given substitution.\n+    fn subst_bound_vars_at_depth(mut self, substs: &Substs, depth: DebruijnIndex) -> Self\n     where\n         Self: Sized,\n     {\n         self.walk_mut_binders(\n             &mut |ty, binders| {\n-                if let &mut Ty::Bound(idx) = ty {\n-                    if idx as usize >= binders && (idx as usize - binders) < substs.len() {\n-                        *ty = substs.0[idx as usize - binders].clone();\n-                    } else if idx as usize >= binders + substs.len() {\n-                        // shift free binders\n-                        *ty = Ty::Bound(idx - substs.len() as u32);\n+                if let &mut Ty::Bound(bound) = ty {\n+                    if bound.debruijn >= binders {\n+                        *ty = substs.0[bound.index].clone();\n                     }\n                 }\n             },\n-            0,\n+            depth,\n         );\n         self\n     }\n-\n-    /// Shifts up `Ty::Bound` vars by `n`.\n-    fn shift_bound_vars(self, n: i32) -> Self\n+    // /// Shifts up debruijn indices of `Ty::Bound` vars by `n`.\n+    fn shift_bound_vars(self, n: DebruijnIndex) -> Self\n     where\n         Self: Sized,\n     {\n         self.fold_binders(\n             &mut |ty, binders| match ty {\n-                Ty::Bound(idx) if idx as usize >= binders => {\n-                    assert!(idx as i32 >= -n);\n-                    Ty::Bound((idx as i32 + n) as u32)\n+                Ty::Bound(bound) if bound.debruijn >= binders => {\n+                    Ty::Bound(bound.shifted_in_from(n))\n                 }\n                 ty => ty,\n             },\n-            0,\n+            DebruijnIndex::INNERMOST,\n         )\n     }\n }\n@@ -856,7 +895,11 @@ impl TypeWalk for Ty {\n         f(self);\n     }\n \n-    fn walk_mut_binders(&mut self, f: &mut impl FnMut(&mut Ty, usize), binders: usize) {\n+    fn walk_mut_binders(\n+        &mut self,\n+        f: &mut impl FnMut(&mut Ty, DebruijnIndex),\n+        binders: DebruijnIndex,\n+    ) {\n         match self {\n             Ty::Apply(a_ty) => {\n                 a_ty.parameters.walk_mut_binders(f, binders);\n@@ -866,7 +909,7 @@ impl TypeWalk for Ty {\n             }\n             Ty::Dyn(predicates) | Ty::Opaque(predicates) => {\n                 for p in make_mut_slice(predicates) {\n-                    p.walk_mut_binders(f, binders + 1);\n+                    p.walk_mut_binders(f, binders.shifted_in());\n                 }\n             }\n             Ty::Placeholder { .. } | Ty::Bound(_) | Ty::Infer(_) | Ty::Unknown => {}"}, {"sha": "6c7bbc448981ff244c5c7876819025a9e963bec9", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/952714685a7c0e0a1c9970839ce307806adaa176/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952714685a7c0e0a1c9970839ce307806adaa176/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=952714685a7c0e0a1c9970839ce307806adaa176", "patch": "@@ -29,8 +29,8 @@ use crate::{\n         all_super_traits, associated_type_by_name_including_super_traits, generics, make_mut_slice,\n         variant_data,\n     },\n-    Binders, FnSig, GenericPredicate, PolyFnSig, ProjectionPredicate, ProjectionTy, Substs,\n-    TraitEnvironment, TraitRef, Ty, TypeCtor,\n+    Binders, BoundVar, DebruijnIndex, FnSig, GenericPredicate, PolyFnSig, ProjectionPredicate,\n+    ProjectionTy, Substs, TraitEnvironment, TraitRef, Ty, TypeCtor,\n };\n \n #[derive(Debug)]\n@@ -131,7 +131,7 @@ impl Ty {\n                 Ty::apply(TypeCtor::FnPtr { num_args: sig.len() as u16 - 1 }, sig)\n             }\n             TypeRef::DynTrait(bounds) => {\n-                let self_ty = Ty::Bound(0);\n+                let self_ty = Ty::Bound(BoundVar::new(DebruijnIndex::INNERMOST, 0));\n                 let predicates = bounds\n                     .iter()\n                     .flat_map(|b| GenericPredicate::from_type_bound(ctx, b, self_ty.clone()))\n@@ -141,7 +141,7 @@ impl Ty {\n             TypeRef::ImplTrait(bounds) => {\n                 match ctx.impl_trait_mode {\n                     ImplTraitLoweringMode::Opaque => {\n-                        let self_ty = Ty::Bound(0);\n+                        let self_ty = Ty::Bound(BoundVar::new(DebruijnIndex::INNERMOST, 0));\n                         let predicates = bounds\n                             .iter()\n                             .flat_map(|b| {\n@@ -177,12 +177,10 @@ impl Ty {\n                             } else {\n                                 (0, 0, 0, 0)\n                             };\n-                        Ty::Bound(\n-                            idx as u32\n-                                + parent_params as u32\n-                                + self_params as u32\n-                                + list_params as u32,\n-                        )\n+                        Ty::Bound(BoundVar::new(\n+                            DebruijnIndex::INNERMOST,\n+                            idx as usize + parent_params + self_params + list_params,\n+                        ))\n                     }\n                     ImplTraitLoweringMode::Disallowed => {\n                         // FIXME: report error\n@@ -249,7 +247,11 @@ impl Ty {\n         let ty = match resolution {\n             TypeNs::TraitId(trait_) => {\n                 // if this is a bare dyn Trait, we'll directly put the required ^0 for the self type in there\n-                let self_ty = if remaining_segments.len() == 0 { Some(Ty::Bound(0)) } else { None };\n+                let self_ty = if remaining_segments.len() == 0 {\n+                    Some(Ty::Bound(BoundVar::new(DebruijnIndex::INNERMOST, 0)))\n+                } else {\n+                    None\n+                };\n                 let trait_ref =\n                     TraitRef::from_resolved_path(ctx, trait_, resolved_segment, self_ty);\n                 let ty = if remaining_segments.len() == 1 {\n@@ -289,7 +291,7 @@ impl Ty {\n                     TypeParamLoweringMode::Placeholder => Ty::Placeholder(param_id),\n                     TypeParamLoweringMode::Variable => {\n                         let idx = generics.param_idx(param_id).expect(\"matching generics\");\n-                        Ty::Bound(idx)\n+                        Ty::Bound(BoundVar::new(DebruijnIndex::INNERMOST, idx))\n                     }\n                 }\n             }\n@@ -558,7 +560,7 @@ impl GenericPredicate {\n                     TypeParamLoweringMode::Placeholder => Ty::Placeholder(param_id),\n                     TypeParamLoweringMode::Variable => {\n                         let idx = generics.param_idx(param_id).expect(\"matching generics\");\n-                        Ty::Bound(idx)\n+                        Ty::Bound(BoundVar::new(DebruijnIndex::INNERMOST, idx))\n                     }\n                 }\n             }"}, {"sha": "74a0bc7db84c162d0f0098b11682e4bfd0b6e856", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/952714685a7c0e0a1c9970839ce307806adaa176/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952714685a7c0e0a1c9970839ce307806adaa176/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=952714685a7c0e0a1c9970839ce307806adaa176", "patch": "@@ -20,7 +20,8 @@ use crate::{\n     db::HirDatabase,\n     primitive::{FloatBitness, Uncertain},\n     utils::all_super_traits,\n-    ApplicationTy, Canonical, InEnvironment, TraitEnvironment, TraitRef, Ty, TypeCtor, TypeWalk,\n+    ApplicationTy, Canonical, DebruijnIndex, InEnvironment, TraitEnvironment, TraitRef, Ty,\n+    TypeCtor, TypeWalk,\n };\n \n /// This is used as a key for indexing impls.\n@@ -507,8 +508,9 @@ pub(crate) fn inherent_impl_substs(\n ) -> Option<Substs> {\n     // we create a var for each type parameter of the impl; we need to keep in\n     // mind here that `self_ty` might have vars of its own\n-    let vars =\n-        Substs::build_for_def(db, impl_id).fill_with_bound_vars(self_ty.num_vars as u32).build();\n+    let vars = Substs::build_for_def(db, impl_id)\n+        .fill_with_bound_vars(DebruijnIndex::INNERMOST, self_ty.num_vars)\n+        .build();\n     let self_ty_with_vars = db.impl_self_ty(impl_id).subst(&vars);\n     let self_ty_with_vars =\n         Canonical { num_vars: vars.len() + self_ty.num_vars, value: self_ty_with_vars };\n@@ -526,8 +528,8 @@ pub(crate) fn inherent_impl_substs(\n fn fallback_bound_vars(s: Substs, num_vars_to_keep: usize) -> Substs {\n     s.fold_binders(\n         &mut |ty, binders| {\n-            if let Ty::Bound(idx) = &ty {\n-                if *idx >= binders as u32 {\n+            if let Ty::Bound(bound) = &ty {\n+                if bound.index >= num_vars_to_keep && bound.debruijn >= binders {\n                     Ty::Unknown\n                 } else {\n                     ty\n@@ -536,7 +538,7 @@ fn fallback_bound_vars(s: Substs, num_vars_to_keep: usize) -> Substs {\n                 ty\n             }\n         },\n-        num_vars_to_keep,\n+        DebruijnIndex::INNERMOST,\n     )\n }\n \n@@ -586,7 +588,7 @@ fn generic_implements_goal(\n     let num_vars = self_ty.num_vars;\n     let substs = super::Substs::build_for_def(db, trait_)\n         .push(self_ty.value)\n-        .fill_with_bound_vars(num_vars as u32)\n+        .fill_with_bound_vars(DebruijnIndex::INNERMOST, num_vars)\n         .build();\n     let num_vars = substs.len() - 1 + self_ty.num_vars;\n     let trait_ref = TraitRef { trait_, substs };"}, {"sha": "07854a0623c397781bb24c6547350a0c0180790d", "filename": "crates/ra_hir_ty/src/traits.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/952714685a7c0e0a1c9970839ce307806adaa176/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952714685a7c0e0a1c9970839ce307806adaa176/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs?ref=952714685a7c0e0a1c9970839ce307806adaa176", "patch": "@@ -7,7 +7,7 @@ use ra_db::{impl_intern_key, salsa, CrateId};\n use ra_prof::profile;\n use rustc_hash::FxHashSet;\n \n-use crate::db::HirDatabase;\n+use crate::{db::HirDatabase, DebruijnIndex};\n \n use super::{Canonical, GenericPredicate, HirDisplay, ProjectionTy, TraitRef, Ty, TypeWalk};\n \n@@ -128,7 +128,11 @@ impl TypeWalk for ProjectionPredicate {\n         self.ty.walk(f);\n     }\n \n-    fn walk_mut_binders(&mut self, f: &mut impl FnMut(&mut Ty, usize), binders: usize) {\n+    fn walk_mut_binders(\n+        &mut self,\n+        f: &mut impl FnMut(&mut Ty, DebruijnIndex),\n+        binders: DebruijnIndex,\n+    ) {\n         self.projection_ty.walk_mut_binders(f, binders);\n         self.ty.walk_mut_binders(f, binders);\n     }\n@@ -144,7 +148,7 @@ pub(crate) fn trait_solve_query(\n         Obligation::Trait(it) => db.trait_data(it.trait_).name.to_string(),\n         Obligation::Projection(_) => \"projection\".to_string(),\n     });\n-    log::debug!(\"trait_solve_query({})\", goal.value.value.display(db));\n+    eprintln!(\"trait_solve_query({})\", goal.value.value.display(db));\n \n     if let Obligation::Projection(pred) = &goal.value.value {\n         if let Ty::Bound(_) = &pred.projection_ty.parameters[0] {"}, {"sha": "ccab246bfa711d606f2864a72ab497c9e6cc27c8", "filename": "crates/ra_hir_ty/src/traits/builtin.rs", "status": "modified", "additions": 35, "deletions": 18, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/952714685a7c0e0a1c9970839ce307806adaa176/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952714685a7c0e0a1c9970839ce307806adaa176/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fbuiltin.rs?ref=952714685a7c0e0a1c9970839ce307806adaa176", "patch": "@@ -8,7 +8,8 @@ use super::{AssocTyValue, Impl, UnsizeToSuperTraitObjectData};\n use crate::{\n     db::HirDatabase,\n     utils::{all_super_traits, generics},\n-    ApplicationTy, Binders, GenericPredicate, Substs, TraitRef, Ty, TypeCtor,\n+    ApplicationTy, Binders, BoundVar, DebruijnIndex, GenericPredicate, Substs, TraitRef, Ty,\n+    TypeCtor, TypeWalk,\n };\n \n pub(super) struct BuiltinImplData {\n@@ -164,11 +165,15 @@ fn closure_fn_trait_impl_datum(\n \n     let arg_ty = Ty::apply(\n         TypeCtor::Tuple { cardinality: num_args },\n-        Substs::builder(num_args as usize).fill_with_bound_vars(0).build(),\n+        Substs::builder(num_args as usize)\n+            .fill_with_bound_vars(DebruijnIndex::INNERMOST, 0)\n+            .build(),\n     );\n     let sig_ty = Ty::apply(\n         TypeCtor::FnPtr { num_args },\n-        Substs::builder(num_args as usize + 1).fill_with_bound_vars(0).build(),\n+        Substs::builder(num_args as usize + 1)\n+            .fill_with_bound_vars(DebruijnIndex::INNERMOST, 0)\n+            .build(),\n     );\n \n     let self_ty = Ty::apply_one(TypeCtor::Closure { def: data.def, expr: data.expr }, sig_ty);\n@@ -203,7 +208,7 @@ fn closure_fn_trait_output_assoc_ty_value(\n         }\n     };\n \n-    let output_ty = Ty::Bound(num_args.into());\n+    let output_ty = Ty::Bound(BoundVar::new(DebruijnIndex::INNERMOST, num_args.into()));\n \n     let fn_once_trait =\n         get_fn_trait(db, krate, super::FnTrait::FnOnce).expect(\"assoc ty value should not exist\");\n@@ -241,7 +246,7 @@ fn array_unsize_impl_datum(db: &dyn HirDatabase, krate: CrateId) -> BuiltinImplD\n         // the existence of the Unsize trait has been checked before\n         .expect(\"Unsize trait missing\");\n \n-    let var = Ty::Bound(0);\n+    let var = Ty::Bound(BoundVar::new(DebruijnIndex::INNERMOST, 0));\n     let substs = Substs::builder(2)\n         .push(Ty::apply_one(TypeCtor::Array, var.clone()))\n         .push(Ty::apply_one(TypeCtor::Slice, var))\n@@ -270,19 +275,18 @@ fn trait_object_unsize_impl_datum(\n         // the existence of the Unsize trait has been checked before\n         .expect(\"Unsize trait missing\");\n \n-    let self_ty = Ty::Bound(0);\n+    let self_ty = Ty::Bound(BoundVar::new(DebruijnIndex::INNERMOST, 0));\n \n     let target_substs = Substs::build_for_def(db, trait_)\n-        .push(Ty::Bound(0))\n-        // starting from ^2 because we want to start with ^1 outside of the\n-        // `dyn`, which is ^2 inside\n-        .fill_with_bound_vars(2)\n+        .push(Ty::Bound(BoundVar::new(DebruijnIndex::INNERMOST, 0)))\n+        .fill_with_bound_vars(DebruijnIndex::ONE, 1)\n         .build();\n     let num_vars = target_substs.len();\n     let target_trait_ref = TraitRef { trait_, substs: target_substs };\n     let target_bounds = vec![GenericPredicate::Implemented(target_trait_ref)];\n \n-    let self_substs = Substs::build_for_def(db, trait_).fill_with_bound_vars(0).build();\n+    let self_substs =\n+        Substs::build_for_def(db, trait_).fill_with_bound_vars(DebruijnIndex::INNERMOST, 0).build();\n     let self_trait_ref = TraitRef { trait_, substs: self_substs };\n     let where_clauses = vec![GenericPredicate::Implemented(self_trait_ref)];\n \n@@ -305,24 +309,26 @@ fn super_trait_object_unsize_impl_datum(\n         // the existence of the Unsize trait has been checked before\n         .expect(\"Unsize trait missing\");\n \n-    let self_substs = Substs::build_for_def(db, data.trait_).fill_with_bound_vars(0).build();\n+    let self_substs = Substs::build_for_def(db, data.trait_)\n+        .fill_with_bound_vars(DebruijnIndex::INNERMOST, 0)\n+        .build();\n+    let self_trait_ref = TraitRef { trait_: data.trait_, substs: self_substs.clone() };\n \n     let num_vars = self_substs.len() - 1;\n \n-    let self_trait_ref = TraitRef { trait_: data.trait_, substs: self_substs.clone() };\n-    let self_bounds = vec![GenericPredicate::Implemented(self_trait_ref.clone())];\n-\n     // we need to go from our trait to the super trait, substituting type parameters\n     let path = crate::utils::find_super_trait_path(db.upcast(), data.trait_, data.super_trait);\n \n-    let mut current_trait_ref = self_trait_ref;\n+    let mut current_trait_ref = self_trait_ref.clone();\n     for t in path.into_iter().skip(1) {\n         let bounds = db.generic_predicates(current_trait_ref.trait_.into());\n         let super_trait_ref = bounds\n             .iter()\n             .find_map(|b| match &b.value {\n                 GenericPredicate::Implemented(tr)\n-                    if tr.trait_ == t && tr.substs[0] == Ty::Bound(0) =>\n+                    if tr.trait_ == t\n+                        && tr.substs[0]\n+                            == Ty::Bound(BoundVar::new(DebruijnIndex::INNERMOST, 0)) =>\n                 {\n                     Some(Binders { value: tr, num_binders: b.num_binders })\n                 }\n@@ -332,7 +338,18 @@ fn super_trait_object_unsize_impl_datum(\n         current_trait_ref = super_trait_ref.cloned().subst(&current_trait_ref.substs);\n     }\n \n-    let super_bounds = vec![GenericPredicate::Implemented(current_trait_ref)];\n+    // We need to renumber the variables a bit now: from ^0.0, ^0.1, ^0.2, ...\n+    // to ^0.0, ^1.0, ^1.1. The reason for this is that the first variable comes\n+    // from the dyn Trait binder, while the other variables come from the impl.\n+    let new_substs = Substs::builder(num_vars + 1)\n+        .push(Ty::Bound(BoundVar::new(DebruijnIndex::INNERMOST, 0)))\n+        .fill_with_bound_vars(DebruijnIndex::ONE, 0)\n+        .build();\n+\n+    let self_bounds =\n+        vec![GenericPredicate::Implemented(self_trait_ref.subst_bound_vars(&new_substs))];\n+    let super_bounds =\n+        vec![GenericPredicate::Implemented(current_trait_ref.subst_bound_vars(&new_substs))];\n \n     let substs = Substs::builder(2)\n         .push(Ty::Dyn(self_bounds.into()))"}, {"sha": "53ce362ea20fd00234ff19780b306ace8b5aedde", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/952714685a7c0e0a1c9970839ce307806adaa176/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952714685a7c0e0a1c9970839ce307806adaa176/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=952714685a7c0e0a1c9970839ce307806adaa176", "patch": "@@ -3,7 +3,10 @@ use std::{fmt, sync::Arc};\n \n use log::debug;\n \n-use chalk_ir::{cast::Cast, Goal, GoalData, Parameter, PlaceholderIndex, TypeName, UniverseIndex};\n+use chalk_ir::{\n+    cast::Cast, fold::shift::Shift, Goal, GoalData, Parameter, PlaceholderIndex, TypeName,\n+    UniverseIndex,\n+};\n \n use hir_def::{AssocContainerId, AssocItemId, GenericDefId, HasModule, Lookup, TypeAliasId};\n use ra_db::{\n@@ -235,7 +238,7 @@ impl ToChalk for Ty {\n                 }\n                 .to_ty::<Interner>(&Interner)\n             }\n-            Ty::Bound(idx) => chalk_ir::TyData::BoundVar(idx as usize).intern(&Interner),\n+            Ty::Bound(idx) => chalk_ir::TyData::BoundVar(idx).intern(&Interner),\n             Ty::Infer(_infer_ty) => panic!(\"uncanonicalized infer ty\"),\n             Ty::Dyn(predicates) => {\n                 let where_clauses = predicates\n@@ -277,7 +280,7 @@ impl ToChalk for Ty {\n                 Ty::Projection(ProjectionTy { associated_ty, parameters })\n             }\n             chalk_ir::TyData::Function(_) => unimplemented!(),\n-            chalk_ir::TyData::BoundVar(idx) => Ty::Bound(idx as u32),\n+            chalk_ir::TyData::BoundVar(idx) => Ty::Bound(idx),\n             chalk_ir::TyData::InferenceVar(_iv) => Ty::Unknown,\n             chalk_ir::TyData::Dyn(where_clauses) => {\n                 assert_eq!(where_clauses.bounds.binders.len(), 1);\n@@ -407,15 +410,15 @@ impl ToChalk for GenericPredicate {\n     fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::QuantifiedWhereClause<Interner> {\n         match self {\n             GenericPredicate::Implemented(trait_ref) => {\n-                make_binders(chalk_ir::WhereClause::Implemented(trait_ref.to_chalk(db)), 0)\n+                let chalk_trait_ref = trait_ref.to_chalk(db);\n+                let chalk_trait_ref = chalk_trait_ref.shifted_in(&Interner);\n+                make_binders(chalk_ir::WhereClause::Implemented(chalk_trait_ref), 0)\n+            }\n+            GenericPredicate::Projection(projection_pred) => {\n+                let ty = projection_pred.ty.to_chalk(db).shifted_in(&Interner);\n+                let alias = projection_pred.projection_ty.to_chalk(db).shifted_in(&Interner);\n+                make_binders(chalk_ir::WhereClause::AliasEq(chalk_ir::AliasEq { alias, ty }), 0)\n             }\n-            GenericPredicate::Projection(projection_pred) => make_binders(\n-                chalk_ir::WhereClause::AliasEq(chalk_ir::AliasEq {\n-                    alias: projection_pred.projection_ty.to_chalk(db),\n-                    ty: projection_pred.ty.to_chalk(db),\n-                }),\n-                0,\n-            ),\n             GenericPredicate::Error => panic!(\"tried passing GenericPredicate::Error to Chalk\"),\n         }\n     }\n@@ -579,7 +582,8 @@ impl ToChalk for builtin::BuiltinImplAssocTyValueData {\n     type Chalk = AssociatedTyValue;\n \n     fn to_chalk(self, db: &dyn HirDatabase) -> AssociatedTyValue {\n-        let value_bound = chalk_rust_ir::AssociatedTyValueBound { ty: self.value.to_chalk(db) };\n+        let ty = self.value.to_chalk(db);\n+        let value_bound = chalk_rust_ir::AssociatedTyValueBound { ty };\n \n         chalk_rust_ir::AssociatedTyValue {\n             associated_ty_id: self.assoc_ty_id.to_chalk(db),\n@@ -738,11 +742,13 @@ pub(crate) fn trait_datum_query(\n     let associated_ty_ids =\n         trait_data.associated_types().map(|type_alias| type_alias.to_chalk(db)).collect();\n     let trait_datum_bound = chalk_rust_ir::TraitDatumBound { where_clauses };\n+    let well_known = None; // FIXME set this (depending on lang items)\n     let trait_datum = TraitDatum {\n         id: trait_id,\n         binders: make_binders(trait_datum_bound, bound_vars.len()),\n         flags,\n         associated_ty_ids,\n+        well_known,\n     };\n     Arc::new(trait_datum)\n }"}, {"sha": "1e5022fa4c73b5738040ce292e602c62e4e7d24b", "filename": "crates/ra_hir_ty/src/utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/952714685a7c0e0a1c9970839ce307806adaa176/crates%2Fra_hir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952714685a7c0e0a1c9970839ce307806adaa176/crates%2Fra_hir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Futils.rs?ref=952714685a7c0e0a1c9970839ce307806adaa176", "patch": "@@ -201,11 +201,11 @@ impl Generics {\n         (parent, self_params, list_params, impl_trait_params)\n     }\n \n-    pub(crate) fn param_idx(&self, param: TypeParamId) -> Option<u32> {\n+    pub(crate) fn param_idx(&self, param: TypeParamId) -> Option<usize> {\n         Some(self.find_param(param)?.0)\n     }\n \n-    fn find_param(&self, param: TypeParamId) -> Option<(u32, &TypeParamData)> {\n+    fn find_param(&self, param: TypeParamId) -> Option<(usize, &TypeParamData)> {\n         if param.parent == self.def {\n             let (idx, (_local_id, data)) = self\n                 .params\n@@ -215,7 +215,7 @@ impl Generics {\n                 .find(|(_, (idx, _))| *idx == param.local_id)\n                 .unwrap();\n             let (_total, parent_len, _child) = self.len_split();\n-            Some(((parent_len + idx) as u32, data))\n+            Some((parent_len + idx, data))\n         } else {\n             self.parent_generics.as_ref().and_then(|g| g.find_param(param))\n         }"}]}