{"sha": "69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "node_id": "C_kwDOAAsO6NoAKDY5ZmVmOTJhYjJmMjg3ZjA3MmI2NmZiN2I0ZjYyYzhiYjRhY2JhNDM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-13T05:52:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-13T05:52:50Z"}, "message": "Auto merge of #111526 - Dylan-DPC:rollup-h75agro, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #110454 (Require impl Trait in associated types to appear in method signatures)\n - #111096 (Add support for `cfg(overflow_checks)`)\n - #111451 (Note user-facing types of coercion failure)\n - #111469 (Fix data race in llvm source code coverage)\n - #111494 (Encode `VariantIdx` so we can decode ADT variants in the right order)\n - #111499 (asm: loongarch64: Drop efiapi)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "9c35e104a85958c2e5779572d67da3406f61a5b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c35e104a85958c2e5779572d67da3406f61a5b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "html_url": "https://github.com/rust-lang/rust/commit/69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16d3e18281fde75eb6c62ebb8363af28de8a3ef0", "url": "https://api.github.com/repos/rust-lang/rust/commits/16d3e18281fde75eb6c62ebb8363af28de8a3ef0", "html_url": "https://github.com/rust-lang/rust/commit/16d3e18281fde75eb6c62ebb8363af28de8a3ef0"}, {"sha": "1533eafa15942f9e66a28a19baa492b2ce6126c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1533eafa15942f9e66a28a19baa492b2ce6126c4", "html_url": "https://github.com/rust-lang/rust/commit/1533eafa15942f9e66a28a19baa492b2ce6126c4"}], "stats": {"total": 1149, "additions": 831, "deletions": 318}, "files": [{"sha": "08ee3761bac2b33141c1206a89b3ff558919ed23", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -305,7 +305,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             );\n                             this.arena.alloc(this.ty(span, hir::TyKind::Err(guar)))\n                         }\n-                        Some(ty) => this.lower_ty(ty, &ImplTraitContext::TypeAliasesOpaqueTy),\n+                        Some(ty) => this.lower_ty(\n+                            ty,\n+                            &ImplTraitContext::TypeAliasesOpaqueTy { in_assoc_ty: false },\n+                        ),\n                     },\n                 );\n                 hir::ItemKind::TyAlias(ty, generics)\n@@ -852,7 +855,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             hir::ImplItemKind::Type(ty)\n                         }\n                         Some(ty) => {\n-                            let ty = this.lower_ty(ty, &ImplTraitContext::TypeAliasesOpaqueTy);\n+                            let ty = this.lower_ty(\n+                                ty,\n+                                &ImplTraitContext::TypeAliasesOpaqueTy { in_assoc_ty: true },\n+                            );\n                             hir::ImplItemKind::Type(ty)\n                         }\n                     },"}, {"sha": "cd6614a54a4e9a30e172e19a43c4c5efaff40fa6", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -247,7 +247,7 @@ enum ImplTraitContext {\n         in_trait: bool,\n     },\n     /// Impl trait in type aliases.\n-    TypeAliasesOpaqueTy,\n+    TypeAliasesOpaqueTy { in_assoc_ty: bool },\n     /// `impl Trait` is unstably accepted in this position.\n     FeatureGated(ImplTraitPosition, Symbol),\n     /// `impl Trait` is not accepted in this position.\n@@ -1407,14 +1407,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             *in_trait,\n                             itctx,\n                         ),\n-                    ImplTraitContext::TypeAliasesOpaqueTy => self.lower_opaque_impl_trait(\n-                        span,\n-                        hir::OpaqueTyOrigin::TyAlias,\n-                        *def_node_id,\n-                        bounds,\n-                        false,\n-                        itctx,\n-                    ),\n+                    &ImplTraitContext::TypeAliasesOpaqueTy { in_assoc_ty } => self\n+                        .lower_opaque_impl_trait(\n+                            span,\n+                            hir::OpaqueTyOrigin::TyAlias { in_assoc_ty },\n+                            *def_node_id,\n+                            bounds,\n+                            false,\n+                            itctx,\n+                        ),\n                     ImplTraitContext::Universal => {\n                         let span = t.span;\n                         self.create_def(\n@@ -1534,13 +1535,16 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         // If this came from a TAIT (as opposed to a function that returns an RPIT), we only want\n         // to capture the lifetimes that appear in the bounds. So visit the bounds to find out\n         // exactly which ones those are.\n-        let lifetimes_to_remap = if origin == hir::OpaqueTyOrigin::TyAlias {\n-            // in a TAIT like `type Foo<'a> = impl Foo<'a>`, we don't keep all the lifetime parameters\n-            Vec::new()\n-        } else {\n-            // in fn return position, like the `fn test<'a>() -> impl Debug + 'a` example,\n-            // we only keep the lifetimes that appear in the `impl Debug` itself:\n-            lifetime_collector::lifetimes_in_bounds(&self.resolver, bounds)\n+        let lifetimes_to_remap = match origin {\n+            hir::OpaqueTyOrigin::TyAlias { .. } => {\n+                // in a TAIT like `type Foo<'a> = impl Foo<'a>`, we don't keep all the lifetime parameters\n+                Vec::new()\n+            }\n+            hir::OpaqueTyOrigin::AsyncFn(..) | hir::OpaqueTyOrigin::FnReturn(..) => {\n+                // in fn return position, like the `fn test<'a>() -> impl Debug + 'a` example,\n+                // we only keep the lifetimes that appear in the `impl Debug` itself:\n+                lifetime_collector::lifetimes_in_bounds(&self.resolver, bounds)\n+            }\n         };\n         debug!(?lifetimes_to_remap);\n "}, {"sha": "309f23d92261e28b69a0f46125036e7f9434c840", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -265,7 +265,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n \n         // Only check this for TAIT. RPIT already supports `tests/ui/impl-trait/nested-return-type2.rs`\n         // on stable and we'd break that.\n-        let OpaqueTyOrigin::TyAlias = origin else {\n+        let OpaqueTyOrigin::TyAlias { .. } = origin else {\n             return definition_ty;\n         };\n         let def_id = opaque_type_key.def_id;\n@@ -360,7 +360,7 @@ fn check_opaque_type_parameter_valid(\n         // which would error here on all of the `'static` args.\n         OpaqueTyOrigin::FnReturn(..) | OpaqueTyOrigin::AsyncFn(..) => return Ok(()),\n         // Check these\n-        OpaqueTyOrigin::TyAlias => {}\n+        OpaqueTyOrigin::TyAlias { .. } => {}\n     }\n     let opaque_generics = tcx.generics_of(opaque_type_key.def_id);\n     let mut seen_params: FxIndexMap<_, Vec<_>> = FxIndexMap::default();"}, {"sha": "fe8c630666bb23117087b67c97a42a8d34aed247", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -321,6 +321,8 @@ declare_features! (\n     (active, c_unwind, \"1.52.0\", Some(74990), None),\n     /// Allows using C-variadics.\n     (active, c_variadic, \"1.34.0\", Some(44930), None),\n+    /// Allows the use of `#[cfg(overflow_checks)` to check if integer overflow behaviour.\n+    (active, cfg_overflow_checks, \"CURRENT_RUSTC_VERSION\", Some(111466), None),\n     /// Allows the use of `#[cfg(sanitize = \"option\")]`; set when -Zsanitizer is used.\n     (active, cfg_sanitize, \"1.41.0\", Some(39699), None),\n     /// Allows `cfg(target_abi = \"...\")`."}, {"sha": "61cfbf5c5e53f5a947b69a846403d94259ce5f1b", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -24,6 +24,7 @@ pub type GatedCfg = (Symbol, Symbol, GateFn);\n /// `cfg(...)`'s that are feature gated.\n const GATED_CFGS: &[GatedCfg] = &[\n     // (name in cfg, feature, function to check if the feature is enabled)\n+    (sym::overflow_checks, sym::cfg_overflow_checks, cfg_fn!(cfg_overflow_checks)),\n     (sym::target_abi, sym::cfg_target_abi, cfg_fn!(cfg_target_abi)),\n     (sym::target_thread_local, sym::cfg_target_thread_local, cfg_fn!(cfg_target_thread_local)),\n     ("}, {"sha": "932f0396282fd729e1d52551b851d490703be9c4", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -2662,7 +2662,10 @@ pub enum OpaqueTyOrigin {\n     /// `async fn`\n     AsyncFn(LocalDefId),\n     /// type aliases: `type Foo = impl Trait;`\n-    TyAlias,\n+    TyAlias {\n+        /// associated types in impl blocks for traits.\n+        in_assoc_ty: bool,\n+    },\n }\n \n /// The various kinds of types recognized by the compiler."}, {"sha": "78ffe59679a0359af05096de02e6f31d06da488f", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -397,7 +397,7 @@ fn check_opaque_meets_bounds<'tcx>(\n ) {\n     let defining_use_anchor = match *origin {\n         hir::OpaqueTyOrigin::FnReturn(did) | hir::OpaqueTyOrigin::AsyncFn(did) => did,\n-        hir::OpaqueTyOrigin::TyAlias => def_id,\n+        hir::OpaqueTyOrigin::TyAlias { .. } => tcx.impl_trait_parent(def_id),\n     };\n     let param_env = tcx.param_env(defining_use_anchor);\n \n@@ -455,10 +455,10 @@ fn check_opaque_meets_bounds<'tcx>(\n         // They can only be referenced as `<Opaque<T> as Trait<&'static T>>::AssocTy`.\n         // We don't have to check them here because their well-formedness follows from the WF of\n         // the projection input types in the defining- and use-sites.\n-        hir::OpaqueTyOrigin::TyAlias\n+        hir::OpaqueTyOrigin::TyAlias { .. }\n             if tcx.def_kind(tcx.parent(def_id.to_def_id())) == DefKind::OpaqueTy => {}\n         // Can have different predicates to their defining use\n-        hir::OpaqueTyOrigin::TyAlias => {\n+        hir::OpaqueTyOrigin::TyAlias { .. } => {\n             let wf_tys = ocx.assumed_wf_types(param_env, span, def_id);\n             let implied_bounds = infcx.implied_bounds_tys(param_env, def_id, wf_tys);\n             let outlives_env = OutlivesEnvironment::with_bounds(param_env, implied_bounds);"}, {"sha": "e0ba255cc069cc2e04d166f588a33478f9951af6", "filename": "compiler/rustc_hir_analysis/src/check/dropck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -6,7 +6,7 @@ use rustc_errors::{struct_span_err, ErrorGuaranteed};\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n use rustc_infer::infer::{RegionResolutionError, TyCtxtInferExt};\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::util::IgnoreRegions;\n+use rustc_middle::ty::util::CheckRegions;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_trait_selection::traits::{self, ObligationCtxt};\n \n@@ -81,7 +81,7 @@ fn ensure_drop_params_and_item_params_correspond<'tcx>(\n     self_type_did: DefId,\n     adt_to_impl_substs: SubstsRef<'tcx>,\n ) -> Result<(), ErrorGuaranteed> {\n-    let Err(arg) = tcx.uses_unique_generic_params(adt_to_impl_substs, IgnoreRegions::No) else {\n+    let Err(arg) = tcx.uses_unique_generic_params(adt_to_impl_substs, CheckRegions::OnlyEarlyBound) else {\n         return Ok(())\n     };\n "}, {"sha": "23beacd2a8c2cd506af8188577aca2aeee93dc98", "filename": "compiler/rustc_hir_analysis/src/coherence/orphan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -6,7 +6,7 @@ use rustc_errors::{struct_span_err, DelayDm};\n use rustc_errors::{Diagnostic, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_middle::ty::subst::InternalSubsts;\n-use rustc_middle::ty::util::IgnoreRegions;\n+use rustc_middle::ty::util::CheckRegions;\n use rustc_middle::ty::{\n     self, AliasKind, ImplPolarity, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitableExt,\n     TypeVisitor,\n@@ -507,7 +507,7 @@ fn lint_auto_trait_impl<'tcx>(\n     // Impls which completely cover a given root type are fine as they\n     // disable auto impls entirely. So only lint if the substs\n     // are not a permutation of the identity substs.\n-    let Err(arg) = tcx.uses_unique_generic_params(substs, IgnoreRegions::Yes) else {\n+    let Err(arg) = tcx.uses_unique_generic_params(substs, CheckRegions::No) else {\n         // ok\n         return;\n     };"}, {"sha": "2f808d4ce738c55ab4321eb3e76a0369ca59b161", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -1483,7 +1483,7 @@ fn generator_kind(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<hir::GeneratorK\n fn is_type_alias_impl_trait<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> bool {\n     match tcx.hir().get_by_def_id(def_id) {\n         Node::Item(hir::Item { kind: hir::ItemKind::OpaqueTy(opaque), .. }) => {\n-            matches!(opaque.origin, hir::OpaqueTyOrigin::TyAlias)\n+            matches!(opaque.origin, hir::OpaqueTyOrigin::TyAlias { .. })\n         }\n         _ => bug!(\"tried getting opaque_ty_origin for non-opaque: {:?}\", def_id),\n     }"}, {"sha": "ed60998ec8dcfebc238d4cc4d17d494564b63d93", "filename": "compiler/rustc_hir_analysis/src/collect/generics_of.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -159,7 +159,10 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Generics {\n                 }\n                 Some(fn_def_id.to_def_id())\n             }\n-            ItemKind::OpaqueTy(hir::OpaqueTy { origin: hir::OpaqueTyOrigin::TyAlias, .. }) => {\n+            ItemKind::OpaqueTy(hir::OpaqueTy {\n+                origin: hir::OpaqueTyOrigin::TyAlias { .. },\n+                ..\n+            }) => {\n                 let parent_id = tcx.hir().get_parent_item(hir_id);\n                 assert_ne!(parent_id, hir::CRATE_OWNER_ID);\n                 debug!(\"generics_of: parent of opaque ty {:?} is {:?}\", def_id, parent_id);"}, {"sha": "a33990813b8206bd8b4b619c290cf8eae30d325f", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -721,7 +721,7 @@ pub(super) fn type_param_predicates(\n                 | ItemKind::TyAlias(_, generics)\n                 | ItemKind::OpaqueTy(OpaqueTy {\n                     generics,\n-                    origin: hir::OpaqueTyOrigin::TyAlias,\n+                    origin: hir::OpaqueTyOrigin::TyAlias { .. },\n                     ..\n                 })\n                 | ItemKind::Enum(_, generics)"}, {"sha": "92ae93cf4cc5db928502269c02359419274a95a3", "filename": "compiler/rustc_hir_analysis/src/collect/resolve_bound_vars.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -526,7 +526,8 @@ impl<'a, 'tcx> Visitor<'tcx> for BoundVarContext<'a, 'tcx> {\n                 });\n             }\n             hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n-                origin: hir::OpaqueTyOrigin::TyAlias, ..\n+                origin: hir::OpaqueTyOrigin::TyAlias { .. },\n+                ..\n             }) => {\n                 // Opaque types are visited when we visit the\n                 // `TyKind::OpaqueDef`, so that they have the lifetimes from\n@@ -707,7 +708,7 @@ impl<'a, 'tcx> Visitor<'tcx> for BoundVarContext<'a, 'tcx> {\n                 let opaque_ty = self.tcx.hir().item(item_id);\n                 match &opaque_ty.kind {\n                     hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n-                        origin: hir::OpaqueTyOrigin::TyAlias,\n+                        origin: hir::OpaqueTyOrigin::TyAlias { .. },\n                         ..\n                     }) => {\n                         intravisit::walk_ty(self, ty);"}, {"sha": "6c7c2b9eea25877258f49e37ec359c2bbb91ea77", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -426,9 +426,10 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::EarlyBinder<Ty\n                     let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                     tcx.mk_adt(def, substs)\n                 }\n-                ItemKind::OpaqueTy(OpaqueTy { origin: hir::OpaqueTyOrigin::TyAlias, .. }) => {\n-                    find_opaque_ty_constraints_for_tait(tcx, def_id)\n-                }\n+                ItemKind::OpaqueTy(OpaqueTy {\n+                    origin: hir::OpaqueTyOrigin::TyAlias { .. },\n+                    ..\n+                }) => find_opaque_ty_constraints_for_tait(tcx, def_id),\n                 // Opaque types desugared from `impl Trait`.\n                 ItemKind::OpaqueTy(OpaqueTy {\n                     origin:"}, {"sha": "421eb807a141f479d82873af941923e49d6b0c81", "filename": "compiler/rustc_infer/src/infer/error_reporting/note_and_explain.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -2,6 +2,7 @@ use super::TypeErrCtxt;\n use rustc_errors::Applicability::{MachineApplicable, MaybeIncorrect};\n use rustc_errors::{pluralize, Diagnostic, MultiSpan};\n use rustc_hir as hir;\n+use rustc_hir::def::DefKind;\n use rustc_middle::traits::ObligationCauseCode;\n use rustc_middle::ty::error::ExpectedFound;\n use rustc_middle::ty::print::Printer;\n@@ -256,6 +257,15 @@ impl<T> Trait<T> for X {\n                             );\n                         }\n                     }\n+                    (ty::Alias(ty::Opaque, alias), _) | (_, ty::Alias(ty::Opaque, alias)) if alias.def_id.is_local() && matches!(tcx.def_kind(body_owner_def_id), DefKind::AssocFn | DefKind::AssocConst) => {\n+                        if tcx.is_type_alias_impl_trait(alias.def_id) {\n+                            if !tcx.opaque_types_defined_by(body_owner_def_id.expect_local()).contains(&alias.def_id.expect_local()) {\n+                                diag.span_note(tcx.def_span(body_owner_def_id), \"\\\n+                                    this item must have the opaque type in its signature \\\n+                                    in order to be able to register hidden types\");\n+                            }\n+                        }\n+                    }\n                     (ty::FnPtr(_), ty::FnDef(def, _))\n                     if let hir::def::DefKind::Fn = tcx.def_kind(def) => {\n                         diag.note("}, {"sha": "545310ad3516732385e750230be92dbf7e6ed42b", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -149,7 +149,7 @@ impl<'tcx> InferCtxt<'tcx> {\n                     // no one encounters it in practice.\n                     // It does occur however in `fn fut() -> impl Future<Output = i32> { async { 42 } }`,\n                     // where it is of no concern, so we only check for TAITs.\n-                    if let Some(OpaqueTyOrigin::TyAlias) =\n+                    if let Some(OpaqueTyOrigin::TyAlias { .. }) =\n                         b_def_id.as_local().and_then(|b_def_id| self.opaque_type_origin(b_def_id))\n                     {\n                         self.tcx.sess.emit_err(OpaqueHiddenTypeDiag {\n@@ -381,8 +381,12 @@ impl<'tcx> InferCtxt<'tcx> {\n             // Anonymous `impl Trait`\n             hir::OpaqueTyOrigin::FnReturn(parent) => parent == parent_def_id,\n             // Named `type Foo = impl Bar;`\n-            hir::OpaqueTyOrigin::TyAlias => {\n-                may_define_opaque_type(self.tcx, parent_def_id, opaque_hir_id)\n+            hir::OpaqueTyOrigin::TyAlias { in_assoc_ty } => {\n+                if in_assoc_ty {\n+                    self.tcx.opaque_types_defined_by(parent_def_id).contains(&def_id)\n+                } else {\n+                    may_define_opaque_type(self.tcx, parent_def_id, opaque_hir_id)\n+                }\n             }\n         };\n         in_definition_scope.then_some(origin)"}, {"sha": "7b774d6865c86083f58ef9b2ea1d12231c40fe28", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -745,6 +745,9 @@ LLVMRustOptimize(\n         if (InstrProfileOutput) {\n           Options.InstrProfileOutput = InstrProfileOutput;\n         }\n+        // cargo run tests in multhreading mode by default\n+        // so use atomics for coverage counters\n+        Options.Atomic = true;\n         MPM.addPass(InstrProfiling(Options, false));\n       }\n     );"}, {"sha": "eab32ad8e3f806ae8d53e8b53467043e8f8a2026", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 36, "deletions": 21, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -856,7 +856,12 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         ty::EarlyBinder(&*output)\n     }\n \n-    fn get_variant(self, kind: &DefKind, index: DefIndex, parent_did: DefId) -> ty::VariantDef {\n+    fn get_variant(\n+        self,\n+        kind: DefKind,\n+        index: DefIndex,\n+        parent_did: DefId,\n+    ) -> (VariantIdx, ty::VariantDef) {\n         let adt_kind = match kind {\n             DefKind::Variant => ty::AdtKind::Enum,\n             DefKind::Struct => ty::AdtKind::Struct,\n@@ -870,22 +875,25 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             if adt_kind == ty::AdtKind::Enum { Some(self.local_def_id(index)) } else { None };\n         let ctor = data.ctor.map(|(kind, index)| (kind, self.local_def_id(index)));\n \n-        ty::VariantDef::new(\n-            self.item_name(index),\n-            variant_did,\n-            ctor,\n-            data.discr,\n-            self.get_associated_item_or_field_def_ids(index)\n-                .map(|did| ty::FieldDef {\n-                    did,\n-                    name: self.item_name(did.index),\n-                    vis: self.get_visibility(did.index),\n-                })\n-                .collect(),\n-            adt_kind,\n-            parent_did,\n-            false,\n-            data.is_non_exhaustive,\n+        (\n+            data.idx,\n+            ty::VariantDef::new(\n+                self.item_name(index),\n+                variant_did,\n+                ctor,\n+                data.discr,\n+                self.get_associated_item_or_field_def_ids(index)\n+                    .map(|did| ty::FieldDef {\n+                        did,\n+                        name: self.item_name(did.index),\n+                        vis: self.get_visibility(did.index),\n+                    })\n+                    .collect(),\n+                adt_kind,\n+                parent_did,\n+                false,\n+                data.is_non_exhaustive,\n+            ),\n         )\n     }\n \n@@ -901,7 +909,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         };\n         let repr = self.root.tables.repr_options.get(self, item_id).unwrap().decode(self);\n \n-        let variants = if let ty::AdtKind::Enum = adt_kind {\n+        let mut variants: Vec<_> = if let ty::AdtKind::Enum = adt_kind {\n             self.root\n                 .tables\n                 .module_children_non_reexports\n@@ -912,15 +920,22 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                     let kind = self.def_kind(index);\n                     match kind {\n                         DefKind::Ctor(..) => None,\n-                        _ => Some(self.get_variant(&kind, index, did)),\n+                        _ => Some(self.get_variant(kind, index, did)),\n                     }\n                 })\n                 .collect()\n         } else {\n-            std::iter::once(self.get_variant(&kind, item_id, did)).collect()\n+            std::iter::once(self.get_variant(kind, item_id, did)).collect()\n         };\n \n-        tcx.mk_adt_def(did, adt_kind, variants, repr)\n+        variants.sort_by_key(|(idx, _)| *idx);\n+\n+        tcx.mk_adt_def(\n+            did,\n+            adt_kind,\n+            variants.into_iter().map(|(_, variant)| variant).collect(),\n+            repr,\n+        )\n     }\n \n     fn get_visibility(self, id: DefIndex) -> Visibility<DefId> {"}, {"sha": "36be07f6205a39e89c0bc2295167b943c20836f9", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -1375,9 +1375,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             // Therefore, the loop over variants will encode its fields as the adt's children.\n         }\n \n-        for variant in adt_def.variants().iter() {\n+        for (idx, variant) in adt_def.variants().iter_enumerated() {\n             let data = VariantData {\n                 discr: variant.discr,\n+                idx,\n                 ctor: variant.ctor.map(|(kind, def_id)| (kind, def_id.index)),\n                 is_non_exhaustive: variant.is_field_list_non_exhaustive(),\n             };\n@@ -1641,9 +1642,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             }\n             hir::ItemKind::OpaqueTy(ref opaque) => {\n                 self.encode_explicit_item_bounds(def_id);\n-                self.tables\n-                    .is_type_alias_impl_trait\n-                    .set(def_id.index, matches!(opaque.origin, hir::OpaqueTyOrigin::TyAlias));\n+                self.tables.is_type_alias_impl_trait.set(\n+                    def_id.index,\n+                    matches!(opaque.origin, hir::OpaqueTyOrigin::TyAlias { .. }),\n+                );\n             }\n             hir::ItemKind::Impl(hir::Impl { defaultness, constness, .. }) => {\n                 self.tables.impl_defaultness.set_some(def_id.index, *defaultness);"}, {"sha": "1328d70021047a463fa6f69561b2da7caa3b3a50", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -31,6 +31,7 @@ use rustc_span::edition::Edition;\n use rustc_span::hygiene::{ExpnIndex, MacroKind};\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::{self, ExpnData, ExpnHash, ExpnId, Span};\n+use rustc_target::abi::VariantIdx;\n use rustc_target::spec::{PanicStrategy, TargetTriple};\n \n use std::marker::PhantomData;\n@@ -430,6 +431,7 @@ define_tables! {\n \n #[derive(TyEncodable, TyDecodable)]\n struct VariantData {\n+    idx: VariantIdx,\n     discr: ty::VariantDiscr,\n     /// If this is unit or tuple-variant/struct, then this is the index of the ctor id.\n     ctor: Option<(CtorKind, DefIndex)>,"}, {"sha": "b45f7caaabe08945346173ad5c37d81d77643b0c", "filename": "compiler/rustc_middle/src/query/erase.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_middle%2Fsrc%2Fquery%2Ferase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_middle%2Fsrc%2Fquery%2Ferase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Ferase.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -172,6 +172,10 @@ impl EraseType for ty::Binder<'_, ty::FnSig<'_>> {\n     type Result = [u8; size_of::<ty::Binder<'static, ty::FnSig<'static>>>()];\n }\n \n+impl EraseType for ty::Binder<'_, &'_ ty::List<Ty<'_>>> {\n+    type Result = [u8; size_of::<ty::Binder<'static, &'static ty::List<Ty<'static>>>>()];\n+}\n+\n impl<T0, T1> EraseType for (&'_ T0, &'_ T1) {\n     type Result = [u8; size_of::<(&'static (), &'static ())>()];\n }"}, {"sha": "5acdd68e60eac32677005de79ee75124f1efd483", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -236,6 +236,15 @@ rustc_queries! {\n         cache_on_disk_if { key.is_local() }\n     }\n \n+    query opaque_types_defined_by(\n+        key: LocalDefId\n+    ) -> &'tcx [LocalDefId] {\n+        desc {\n+            |tcx| \"computing the opaque types defined by `{}`\",\n+            tcx.def_path_str(key.to_def_id())\n+        }\n+    }\n+\n     /// Returns the list of bounds that can be used for\n     /// `SelectionCandidate::ProjectionCandidate(_)` and\n     /// `ProjectionTyCandidate::TraitDef`."}, {"sha": "2f0b07d4c71b4a5c22faaf53115b03e4b54a1695", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -281,9 +281,6 @@ pub enum ObligationCauseCode<'tcx> {\n     /// A type like `Box<Foo<'a> + 'b>` is WF only if `'b: 'a`.\n     ObjectTypeBound(Ty<'tcx>, ty::Region<'tcx>),\n \n-    /// Obligation incurred due to an object cast.\n-    ObjectCastObligation(/* Concrete type */ Ty<'tcx>, /* Object type */ Ty<'tcx>),\n-\n     /// Obligation incurred due to a coercion.\n     Coercion {\n         source: Ty<'tcx>,"}, {"sha": "b414e1200cdf850f1f858bb170d545851055b776", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -2476,6 +2476,18 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n+    /// Returns the `DefId` of the item within which the `impl Trait` is declared.\n+    /// For type-alias-impl-trait this is the `type` alias.\n+    /// For impl-trait-in-assoc-type this is the assoc type.\n+    /// For return-position-impl-trait this is the function.\n+    pub fn impl_trait_parent(self, mut def_id: LocalDefId) -> LocalDefId {\n+        // Find the surrounding item (type alias or assoc type)\n+        while let DefKind::OpaqueTy = self.def_kind(def_id) {\n+            def_id = self.local_parent(def_id);\n+        }\n+        def_id\n+    }\n+\n     pub fn impl_method_has_trait_impl_trait_tys(self, def_id: DefId) -> bool {\n         if self.def_kind(def_id) != DefKind::AssocFn {\n             return false;\n@@ -2520,7 +2532,7 @@ pub fn is_impl_trait_defn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<LocalDefId>\n                 hir::OpaqueTyOrigin::FnReturn(parent) | hir::OpaqueTyOrigin::AsyncFn(parent) => {\n                     Some(parent)\n                 }\n-                hir::OpaqueTyOrigin::TyAlias => None,\n+                hir::OpaqueTyOrigin::TyAlias { .. } => None,\n             };\n         }\n     }"}, {"sha": "a0c8d299f48ba164c000d9f4c8861f050101add2", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -32,7 +32,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     ///\n     /// This should only be used outside of type inference. For example,\n     /// it assumes that normalization will succeed.\n-    #[tracing::instrument(level = \"debug\", skip(self, param_env))]\n+    #[tracing::instrument(level = \"debug\", skip(self, param_env), ret)]\n     pub fn normalize_erasing_regions<T>(self, param_env: ty::ParamEnv<'tcx>, value: T) -> T\n     where\n         T: TypeFoldable<TyCtxt<'tcx>>,"}, {"sha": "d175cf72d672a9dcf35b51c700f7c16fb50bb033", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -1265,7 +1265,7 @@ impl<'tcx> AliasTy<'tcx> {\n \n     /// Extracts the underlying trait reference and own substs from this projection.\n     /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,\n-    /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs\n+    /// then this function would return a `T: StreamingIterator` trait reference and `['a]` as the own substs\n     pub fn trait_ref_and_own_substs(\n         self,\n         tcx: TyCtxt<'tcx>,"}, {"sha": "9bab693156b3df6bf0b7345d8205b29221915dee", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -34,9 +34,14 @@ pub struct Discr<'tcx> {\n \n /// Used as an input to [`TyCtxt::uses_unique_generic_params`].\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n-pub enum IgnoreRegions {\n-    Yes,\n+pub enum CheckRegions {\n     No,\n+    /// Only permit early bound regions. This is useful for Adts which\n+    /// can never have late bound regions.\n+    OnlyEarlyBound,\n+    /// Permit both late bound and early bound regions. Use this for functions,\n+    /// which frequently have late bound regions.\n+    Bound,\n }\n \n #[derive(Copy, Clone, Debug)]\n@@ -468,21 +473,28 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn uses_unique_generic_params(\n         self,\n         substs: SubstsRef<'tcx>,\n-        ignore_regions: IgnoreRegions,\n+        ignore_regions: CheckRegions,\n     ) -> Result<(), NotUniqueParam<'tcx>> {\n         let mut seen = GrowableBitSet::default();\n+        let mut seen_late = FxHashSet::default();\n         for arg in substs {\n             match arg.unpack() {\n-                GenericArgKind::Lifetime(lt) => {\n-                    if ignore_regions == IgnoreRegions::No {\n-                        let ty::ReEarlyBound(p) = lt.kind() else {\n-                            return Err(NotUniqueParam::NotParam(lt.into()))\n-                        };\n+                GenericArgKind::Lifetime(lt) => match (ignore_regions, lt.kind()) {\n+                    (CheckRegions::Bound, ty::ReLateBound(di, reg)) => {\n+                        if !seen_late.insert((di, reg)) {\n+                            return Err(NotUniqueParam::DuplicateParam(lt.into()));\n+                        }\n+                    }\n+                    (CheckRegions::OnlyEarlyBound | CheckRegions::Bound, ty::ReEarlyBound(p)) => {\n                         if !seen.insert(p.index) {\n                             return Err(NotUniqueParam::DuplicateParam(lt.into()));\n                         }\n                     }\n-                }\n+                    (CheckRegions::OnlyEarlyBound | CheckRegions::Bound, _) => {\n+                        return Err(NotUniqueParam::NotParam(lt.into()));\n+                    }\n+                    (CheckRegions::No, _) => {}\n+                },\n                 GenericArgKind::Type(t) => match t.kind() {\n                     ty::Param(p) => {\n                         if !seen.insert(p.index) {"}, {"sha": "e2b8d3eea2d423c8e4089817cbcd929c35057ce1", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -1060,6 +1060,9 @@ fn default_configuration(sess: &Session) -> CrateConfig {\n     if sess.opts.debug_assertions {\n         ret.insert((sym::debug_assertions, None));\n     }\n+    if sess.overflow_checks() {\n+        ret.insert((sym::overflow_checks, None));\n+    }\n     // JUSTIFICATION: before wrapper fn is available\n     #[allow(rustc::bad_opt_access)]\n     if sess.opts.crate_types.contains(&CrateType::ProcMacro) {\n@@ -1209,6 +1212,7 @@ impl CrateCheckConfig {\n             sym::windows,\n             sym::proc_macro,\n             sym::debug_assertions,\n+            sym::overflow_checks,\n             sym::target_thread_local,\n         ] {\n             self.expecteds.entry(name).or_insert_with(no_values);"}, {"sha": "9951d8f4fc153c47401ea4534d2b54a07fbfd2a3", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -463,6 +463,7 @@ symbols! {\n         cfg_doctest,\n         cfg_eval,\n         cfg_hide,\n+        cfg_overflow_checks,\n         cfg_panic,\n         cfg_sanitize,\n         cfg_target_abi,\n@@ -1065,6 +1066,7 @@ symbols! {\n         or_patterns,\n         other,\n         out,\n+        overflow_checks,\n         overlapping_marker_traits,\n         owned_box,\n         packed,"}, {"sha": "e60b8e78e5d574b6a41f8fd9d38f3cdbf3908556", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -882,8 +882,8 @@ impl InlineAsmClobberAbi {\n                 _ => Err(&[\"C\", \"system\", \"efiapi\"]),\n             },\n             InlineAsmArch::LoongArch64 => match name {\n-                \"C\" | \"system\" | \"efiapi\" => Ok(InlineAsmClobberAbi::LoongArch),\n-                _ => Err(&[\"C\", \"system\", \"efiapi\"]),\n+                \"C\" | \"system\" => Ok(InlineAsmClobberAbi::LoongArch),\n+                _ => Err(&[\"C\", \"system\"]),\n             },\n             _ => Err(&[]),\n         }"}, {"sha": "f5f2fe54217885091aa694fcd10ebfcf7998c61f", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -797,9 +797,17 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             err.span_label(span, explanation);\n                         }\n \n-                        if let ObligationCauseCode::ObjectCastObligation(concrete_ty, obj_ty) = obligation.cause.code().peel_derives() &&\n-                            Some(trait_ref.def_id()) == self.tcx.lang_items().sized_trait() {\n-                            self.suggest_borrowing_for_object_cast(&mut err, &root_obligation, *concrete_ty, *obj_ty);\n+                        if let ObligationCauseCode::Coercion { source, target } =\n+                            *obligation.cause.code().peel_derives()\n+                        {\n+                            if Some(trait_ref.def_id()) == self.tcx.lang_items().sized_trait() {\n+                                self.suggest_borrowing_for_object_cast(\n+                                    &mut err,\n+                                    &root_obligation,\n+                                    source,\n+                                    target,\n+                                );\n+                            }\n                         }\n \n                         let UnsatisfiedConst(unsatisfied_const) = self\n@@ -1510,7 +1518,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         | ObligationCauseCode::BindingObligation(_, _)\n                         | ObligationCauseCode::ExprItemObligation(..)\n                         | ObligationCauseCode::ExprBindingObligation(..)\n-                        | ObligationCauseCode::ObjectCastObligation(..)\n+                        | ObligationCauseCode::Coercion { .. }\n                         | ObligationCauseCode::OpaqueType\n                 );\n "}, {"sha": "49b309abcda3a939deb6f9b2f20acbfb408cea5c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -1442,8 +1442,9 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         err: &mut Diagnostic,\n         obligation: &PredicateObligation<'tcx>,\n         self_ty: Ty<'tcx>,\n-        object_ty: Ty<'tcx>,\n+        target_ty: Ty<'tcx>,\n     ) {\n+        let ty::Ref(_, object_ty, hir::Mutability::Not) = target_ty.kind() else { return; };\n         let ty::Dynamic(predicates, _, ty::Dyn) = object_ty.kind() else { return; };\n         let self_ref_ty = self.tcx.mk_imm_ref(self.tcx.lifetimes.re_erased, self_ty);\n \n@@ -1458,7 +1459,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         err.span_suggestion(\n             obligation.cause.span.shrink_to_lo(),\n             format!(\n-                \"consider borrowing the value, since `&{self_ty}` can be coerced into `{object_ty}`\"\n+                \"consider borrowing the value, since `&{self_ty}` can be coerced into `{target_ty}`\"\n             ),\n             \"&\",\n             Applicability::MaybeIncorrect,\n@@ -2851,30 +2852,27 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     err.span_note(tcx.def_span(item_def_id), descr);\n                 }\n             }\n-            ObligationCauseCode::ObjectCastObligation(concrete_ty, object_ty) => {\n-                let (concrete_ty, concrete_file) =\n-                    self.tcx.short_ty_string(self.resolve_vars_if_possible(concrete_ty));\n-                let (object_ty, object_file) =\n-                    self.tcx.short_ty_string(self.resolve_vars_if_possible(object_ty));\n+            ObligationCauseCode::Coercion { source, target } => {\n+                let (source, source_file) =\n+                    self.tcx.short_ty_string(self.resolve_vars_if_possible(source));\n+                let (target, target_file) =\n+                    self.tcx.short_ty_string(self.resolve_vars_if_possible(target));\n                 err.note(with_forced_trimmed_paths!(format!(\n-                    \"required for the cast from `{concrete_ty}` to the object type `{object_ty}`\",\n+                    \"required for the cast from `{source}` to `{target}`\",\n                 )));\n-                if let Some(file) = concrete_file {\n+                if let Some(file) = source_file {\n                     err.note(format!(\n-                        \"the full name for the casted type has been written to '{}'\",\n+                        \"the full name for the source type has been written to '{}'\",\n                         file.display(),\n                     ));\n                 }\n-                if let Some(file) = object_file {\n+                if let Some(file) = target_file {\n                     err.note(format!(\n-                        \"the full name for the object type has been written to '{}'\",\n+                        \"the full name for the target type has been written to '{}'\",\n                         file.display(),\n                     ));\n                 }\n             }\n-            ObligationCauseCode::Coercion { source: _, target } => {\n-                err.note(format!(\"required by cast to type `{}`\", self.ty_to_string(target)));\n-            }\n             ObligationCauseCode::RepeatElementCopy { is_const_fn } => {\n                 err.note(\n                     \"the `Copy` trait is required because this value will be copied for each element of the array\","}, {"sha": "6a648294efd98bbba4c0d3939e5141d3e78787a2", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 12, "deletions": 24, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -29,9 +29,9 @@ use crate::traits::{\n     ImplSourceAutoImplData, ImplSourceBuiltinData, ImplSourceClosureData,\n     ImplSourceConstDestructData, ImplSourceFnPointerData, ImplSourceFutureData,\n     ImplSourceGeneratorData, ImplSourceObjectData, ImplSourceTraitAliasData,\n-    ImplSourceTraitUpcastingData, ImplSourceUserDefinedData, Normalized, ObjectCastObligation,\n-    Obligation, ObligationCause, OutputTypeParameterMismatch, PredicateObligation, Selection,\n-    SelectionError, TraitNotObjectSafe, TraitObligation, Unimplemented,\n+    ImplSourceTraitUpcastingData, ImplSourceUserDefinedData, Normalized, Obligation,\n+    ObligationCause, OutputTypeParameterMismatch, PredicateObligation, Selection, SelectionError,\n+    TraitNotObjectSafe, TraitObligation, Unimplemented,\n };\n \n use super::BuiltinImplConditions;\n@@ -905,16 +905,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     .map_err(|_| Unimplemented)?;\n                 nested.extend(obligations);\n \n-                // Register one obligation for 'a: 'b.\n-                let cause = ObligationCause::new(\n-                    obligation.cause.span,\n-                    obligation.cause.body_id,\n-                    ObjectCastObligation(source, target),\n-                );\n                 let outlives = ty::OutlivesPredicate(r_a, r_b);\n                 nested.push(Obligation::with_depth(\n                     tcx,\n-                    cause,\n+                    obligation.cause.clone(),\n                     obligation.recursion_depth + 1,\n                     obligation.param_env,\n                     obligation.predicate.rebind(outlives),\n@@ -1005,15 +999,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 nested.extend(obligations);\n \n                 // Register one obligation for 'a: 'b.\n-                let cause = ObligationCause::new(\n-                    obligation.cause.span,\n-                    obligation.cause.body_id,\n-                    ObjectCastObligation(source, target),\n-                );\n                 let outlives = ty::OutlivesPredicate(r_a, r_b);\n                 nested.push(Obligation::with_depth(\n                     tcx,\n-                    cause,\n+                    obligation.cause.clone(),\n                     obligation.recursion_depth + 1,\n                     obligation.param_env,\n                     obligation.predicate.rebind(outlives),\n@@ -1027,16 +1016,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     return Err(TraitNotObjectSafe(did));\n                 }\n \n-                let cause = ObligationCause::new(\n-                    obligation.cause.span,\n-                    obligation.cause.body_id,\n-                    ObjectCastObligation(source, target),\n-                );\n-\n                 let predicate_to_obligation = |predicate| {\n                     Obligation::with_depth(\n                         tcx,\n-                        cause.clone(),\n+                        obligation.cause.clone(),\n                         obligation.recursion_depth + 1,\n                         obligation.param_env,\n                         predicate,\n@@ -1056,7 +1039,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 );\n \n                 // We can only make objects from sized types.\n-                let tr = ty::TraitRef::from_lang_item(tcx, LangItem::Sized, cause.span, [source]);\n+                let tr = ty::TraitRef::from_lang_item(\n+                    tcx,\n+                    LangItem::Sized,\n+                    obligation.cause.span,\n+                    [source],\n+                );\n                 nested.push(predicate_to_obligation(tr.without_const().to_predicate(tcx)));\n \n                 // If the type is `Foo + 'a`, ensure that the type"}, {"sha": "b72ff5b78e4183553dc62dc505f9c0d616951aef", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -2647,14 +2647,19 @@ impl<'tcx> SelectionContext<'_, 'tcx> {\n         let predicates = predicates.instantiate_own(tcx, substs);\n         let mut obligations = Vec::with_capacity(predicates.len());\n         for (index, (predicate, span)) in predicates.into_iter().enumerate() {\n-            let cause = cause.clone().derived_cause(parent_trait_pred, |derived| {\n-                ImplDerivedObligation(Box::new(ImplDerivedObligationCause {\n-                    derived,\n-                    impl_or_alias_def_id: def_id,\n-                    impl_def_predicate_index: Some(index),\n-                    span,\n-                }))\n-            });\n+            let cause =\n+                if Some(parent_trait_pred.def_id()) == tcx.lang_items().coerce_unsized_trait() {\n+                    cause.clone()\n+                } else {\n+                    cause.clone().derived_cause(parent_trait_pred, |derived| {\n+                        ImplDerivedObligation(Box::new(ImplDerivedObligationCause {\n+                            derived,\n+                            impl_or_alias_def_id: def_id,\n+                            impl_def_predicate_index: Some(index),\n+                            span,\n+                        }))\n+                    })\n+                };\n             let predicate = normalize_with_depth_to(\n                 self,\n                 param_env,"}, {"sha": "5bc3e3c00c9af857ff1a9d8cb64f6993b9fa2b89", "filename": "compiler/rustc_ty_utils/messages.ftl", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_ty_utils%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_ty_utils%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fmessages.ftl?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -55,3 +55,11 @@ ty_utils_multiple_array_fields_simd_type = monomorphising SIMD type `{$ty}` with\n ty_utils_oversized_simd_type = monomorphising SIMD type `{$ty}` of length greater than {$max_lanes}\n \n ty_utils_non_primitive_simd_type = monomorphising SIMD type `{$ty}` with a non-primitive-scalar (integer/float/pointer) element type `{$e_ty}`\n+\n+ty_utils_impl_trait_duplicate_arg = non-defining opaque type use in defining scope\n+    .label = generic argument `{$arg}` used twice\n+    .note = for this opaque type\n+\n+ty_utils_impl_trait_not_param = non-defining opaque type use in defining scope\n+    .label = argument `{$arg}` is not a generic parameter\n+    .note = for this opaque type"}, {"sha": "553bf40ef3a48afb320ba14626dc6a519160c24c", "filename": "compiler/rustc_ty_utils/src/errors.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_ty_utils%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_ty_utils%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Ferrors.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -1,7 +1,7 @@\n //! Errors emitted by ty_utils\n \n use rustc_macros::{Diagnostic, Subdiagnostic};\n-use rustc_middle::ty::Ty;\n+use rustc_middle::ty::{GenericArg, Ty};\n use rustc_span::Span;\n \n #[derive(Diagnostic)]\n@@ -100,3 +100,25 @@ pub struct NonPrimitiveSimdType<'tcx> {\n     pub ty: Ty<'tcx>,\n     pub e_ty: Ty<'tcx>,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(ty_utils_impl_trait_duplicate_arg)]\n+pub struct DuplicateArg<'tcx> {\n+    pub arg: GenericArg<'tcx>,\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    #[note]\n+    pub opaque_span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(ty_utils_impl_trait_not_param)]\n+pub struct NotParam<'tcx> {\n+    pub arg: GenericArg<'tcx>,\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    #[note]\n+    pub opaque_span: Span,\n+}"}, {"sha": "8306c5ae49360c82ea5e0e2a1196ad083652085b", "filename": "compiler/rustc_ty_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -33,6 +33,7 @@ pub mod instance;\n mod layout;\n mod layout_sanity_check;\n mod needs_drop;\n+mod opaque_types;\n pub mod representability;\n mod structural_match;\n mod ty;\n@@ -47,6 +48,7 @@ pub fn provide(providers: &mut Providers) {\n     implied_bounds::provide(providers);\n     layout::provide(providers);\n     needs_drop::provide(providers);\n+    opaque_types::provide(providers);\n     representability::provide(providers);\n     ty::provide(providers);\n     instance::provide(providers);"}, {"sha": "25ebb333bf74ac6edc9062f6fed2b966c3ef63b4", "filename": "compiler/rustc_ty_utils/src/opaque_types.rs", "status": "added", "additions": 197, "deletions": 0, "changes": 197, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_ty_utils%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/compiler%2Frustc_ty_utils%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fopaque_types.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -0,0 +1,197 @@\n+use rustc_data_structures::fx::FxHashSet;\n+use rustc_errors::ErrorGuaranteed;\n+use rustc_hir::{def::DefKind, def_id::LocalDefId};\n+use rustc_middle::ty::util::{CheckRegions, NotUniqueParam};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n+use rustc_span::Span;\n+use rustc_type_ir::AliasKind;\n+use std::ops::ControlFlow;\n+\n+use crate::errors::{DuplicateArg, NotParam};\n+\n+struct OpaqueTypeCollector<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    opaques: Vec<LocalDefId>,\n+    /// The `DefId` of the item which we are collecting opaque types for.\n+    item: LocalDefId,\n+\n+    /// Avoid infinite recursion due to recursive declarations.\n+    seen: FxHashSet<LocalDefId>,\n+}\n+\n+impl<'tcx> OpaqueTypeCollector<'tcx> {\n+    fn collect(\n+        tcx: TyCtxt<'tcx>,\n+        item: LocalDefId,\n+        val: ty::Binder<'tcx, impl TypeVisitable<TyCtxt<'tcx>>>,\n+    ) -> Vec<LocalDefId> {\n+        let mut collector = Self { tcx, opaques: Vec::new(), item, seen: Default::default() };\n+        val.skip_binder().visit_with(&mut collector);\n+        collector.opaques\n+    }\n+\n+    fn span(&self) -> Span {\n+        self.tcx.def_span(self.item)\n+    }\n+\n+    fn parent(&self) -> Option<LocalDefId> {\n+        match self.tcx.def_kind(self.item) {\n+            DefKind::Fn => None,\n+            DefKind::AssocFn | DefKind::AssocTy | DefKind::AssocConst => {\n+                Some(self.tcx.local_parent(self.item))\n+            }\n+            other => span_bug!(\n+                self.tcx.def_span(self.item),\n+                \"unhandled item with opaque types: {other:?}\"\n+            ),\n+        }\n+    }\n+}\n+\n+impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for OpaqueTypeCollector<'tcx> {\n+    type BreakTy = ErrorGuaranteed;\n+\n+    #[instrument(skip(self), ret, level = \"trace\")]\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<ErrorGuaranteed> {\n+        match t.kind() {\n+            ty::Alias(AliasKind::Opaque, alias_ty) if alias_ty.def_id.is_local() => {\n+                if !self.seen.insert(alias_ty.def_id.expect_local()) {\n+                    return ControlFlow::Continue(());\n+                }\n+                match self.tcx.uses_unique_generic_params(alias_ty.substs, CheckRegions::Bound) {\n+                    Ok(()) => {\n+                        // FIXME: implement higher kinded lifetime bounds on nested opaque types. They are not\n+                        // supported at all, so this is sound to do, but once we want to support them, you'll\n+                        // start seeing the error below.\n+\n+                        self.opaques.push(alias_ty.def_id.expect_local());\n+\n+                        // Collect opaque types nested within the associated type bounds of this opaque type.\n+                        for (pred, _span) in self\n+                            .tcx\n+                            .explicit_item_bounds(alias_ty.def_id)\n+                            .subst_iter_copied(self.tcx, alias_ty.substs)\n+                        {\n+                            trace!(?pred);\n+                            pred.visit_with(self)?;\n+                        }\n+\n+                        ControlFlow::Continue(())\n+                    }\n+                    Err(NotUniqueParam::NotParam(arg)) => {\n+                        let err = self.tcx.sess.emit_err(NotParam {\n+                            arg,\n+                            span: self.span(),\n+                            opaque_span: self.tcx.def_span(alias_ty.def_id),\n+                        });\n+                        ControlFlow::Break(err)\n+                    }\n+                    Err(NotUniqueParam::DuplicateParam(arg)) => {\n+                        let err = self.tcx.sess.emit_err(DuplicateArg {\n+                            arg,\n+                            span: self.span(),\n+                            opaque_span: self.tcx.def_span(alias_ty.def_id),\n+                        });\n+                        ControlFlow::Break(err)\n+                    }\n+                }\n+            }\n+            ty::Alias(AliasKind::Projection, alias_ty) => {\n+                if let Some(parent) = self.parent() {\n+                    trace!(?alias_ty);\n+                    let (trait_ref, own_substs) = alias_ty.trait_ref_and_own_substs(self.tcx);\n+\n+                    trace!(?trait_ref, ?own_substs);\n+                    // This avoids having to do normalization of `Self::AssocTy` by only\n+                    // supporting the case of a method defining opaque types from assoc types\n+                    // in the same impl block.\n+                    if trait_ref.self_ty() == self.tcx.type_of(parent).subst_identity() {\n+                        for assoc in self.tcx.associated_items(parent).in_definition_order() {\n+                            trace!(?assoc);\n+                            if assoc.trait_item_def_id == Some(alias_ty.def_id) {\n+                                // We reconstruct the generic args of the associated type within the impl\n+                                // from the impl's generics and the generic args passed to the type via the\n+                                // projection.\n+                                let substs = ty::InternalSubsts::identity_for_item(\n+                                    self.tcx,\n+                                    parent.to_def_id(),\n+                                );\n+                                trace!(?substs);\n+                                let substs: Vec<_> =\n+                                    substs.iter().chain(own_substs.iter().copied()).collect();\n+                                trace!(?substs);\n+                                // Find opaque types in this associated type.\n+                                return self\n+                                    .tcx\n+                                    .type_of(assoc.def_id)\n+                                    .subst(self.tcx, &substs)\n+                                    .visit_with(self);\n+                            }\n+                        }\n+                    }\n+                }\n+                t.super_visit_with(self)\n+            }\n+            _ => t.super_visit_with(self),\n+        }\n+    }\n+}\n+\n+fn opaque_types_defined_by<'tcx>(tcx: TyCtxt<'tcx>, item: LocalDefId) -> &'tcx [LocalDefId] {\n+    let kind = tcx.def_kind(item);\n+    trace!(?kind);\n+    // FIXME(type_alias_impl_trait): This is definitely still wrong except for RPIT and impl trait in assoc types.\n+    match kind {\n+        // We're also doing this for `AssocTy` for the wf checks in `check_opaque_meets_bounds`\n+        DefKind::Fn | DefKind::AssocFn | DefKind::AssocTy | DefKind::AssocConst => {\n+            let defined_opaques = match kind {\n+                DefKind::Fn => {\n+                    OpaqueTypeCollector::collect(tcx, item, tcx.fn_sig(item).subst_identity())\n+                }\n+                DefKind::AssocFn => {\n+                    OpaqueTypeCollector::collect(tcx, item, tcx.fn_sig(item).subst_identity())\n+                }\n+                DefKind::AssocTy | DefKind::AssocConst => OpaqueTypeCollector::collect(\n+                    tcx,\n+                    item,\n+                    ty::Binder::dummy(tcx.type_of(item).subst_identity()),\n+                ),\n+                _ => unreachable!(),\n+            };\n+            tcx.arena.alloc_from_iter(defined_opaques)\n+        }\n+        DefKind::Mod\n+        | DefKind::Struct\n+        | DefKind::Union\n+        | DefKind::Enum\n+        | DefKind::Variant\n+        | DefKind::Trait\n+        | DefKind::TyAlias\n+        | DefKind::ForeignTy\n+        | DefKind::TraitAlias\n+        | DefKind::TyParam\n+        | DefKind::Const\n+        | DefKind::ConstParam\n+        | DefKind::Static(_)\n+        | DefKind::Ctor(_, _)\n+        | DefKind::Macro(_)\n+        | DefKind::ExternCrate\n+        | DefKind::Use\n+        | DefKind::ForeignMod\n+        | DefKind::AnonConst\n+        | DefKind::InlineConst\n+        | DefKind::OpaqueTy\n+        | DefKind::ImplTraitPlaceholder\n+        | DefKind::Field\n+        | DefKind::LifetimeParam\n+        | DefKind::GlobalAsm\n+        | DefKind::Impl { .. }\n+        | DefKind::Closure\n+        | DefKind::Generator => &[],\n+    }\n+}\n+\n+pub(super) fn provide(providers: &mut ty::query::Providers) {\n+    *providers = ty::query::Providers { opaque_types_defined_by, ..*providers };\n+}"}, {"sha": "ff13daa6db4572eda0008ded02ca9f4b806d51f6", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -455,7 +455,8 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             | hir::ItemKind::Union(..)\n             | hir::ItemKind::TyAlias(..)\n             | hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n-                origin: hir::OpaqueTyOrigin::TyAlias, ..\n+                origin: hir::OpaqueTyOrigin::TyAlias { .. },\n+                ..\n             })\n             | hir::ItemKind::Static(..)\n             | hir::ItemKind::Trait(..)"}, {"sha": "b3a8808df0529766ab8b3a20d6ebb0565cec7cb9", "filename": "tests/run-make/coverage-llvmir/filecheck.testprog.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Frun-make%2Fcoverage-llvmir%2Ffilecheck.testprog.txt", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Frun-make%2Fcoverage-llvmir%2Ffilecheck.testprog.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fcoverage-llvmir%2Ffilecheck.testprog.txt?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -36,7 +36,7 @@ CHECK-SAME:   section \"llvm.metadata\"\n CHECK:        [[DEFINE_INTERNAL]] { {{.*}} } @_R{{[a-zA-Z0-9_]+}}testprog14will_be_called() unnamed_addr #{{[0-9]+}} {\n CHECK-NEXT:   start:\n CHECK-NOT:    [[DEFINE_INTERNAL]]\n-CHECK:        %pgocount = load i64, {{i64\\*|ptr}}\n+CHECK:        atomicrmw add ptr\n CHECK-SAME:   @__profc__R{{[a-zA-Z0-9_]+}}testprog14will_be_called,\n \n CHECK:        declare void @llvm.instrprof.increment({{i8\\*|ptr}}, i64, i32, i32) #[[LLVM_INSTRPROF_INCREMENT_ATTR:[0-9]+]]"}, {"sha": "c3377eed20a524277443b32c4af0613d20dad30f", "filename": "tests/ui/associated-types/associated-types-eq-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -43,7 +43,7 @@ note: expected this to be `Bar`\n    |\n LL |     type A = usize;\n    |              ^^^^^\n-   = note: required for the cast from `isize` to the object type `dyn Foo<A = Bar>`\n+   = note: required for the cast from `&isize` to `&dyn Foo<A = Bar>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "fdec01b95e3b1114e297d877f9d5ad5c8df5002e", "filename": "tests/ui/associated-types/associated-types-overridden-binding-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -4,7 +4,7 @@ error[E0271]: expected `IntoIter<u32>` to be an iterator that yields `i32`, but\n LL |     let _: &dyn I32Iterator<Item = u32> = &vec![42].into_iter();\n    |                                           ^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `u32`\n    |\n-   = note: required for the cast from `std::vec::IntoIter<u32>` to the object type `dyn Iterator<Item = u32, Item = i32>`\n+   = note: required for the cast from `&std::vec::IntoIter<u32>` to `&dyn Iterator<Item = u32, Item = i32>`\n \n error: aborting due to previous error\n "}, {"sha": "9c77a25c4320d3661c6d8ef5b815bd4929354c08", "filename": "tests/ui/associated-types/issue-65774-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fassociated-types%2Fissue-65774-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fassociated-types%2Fissue-65774-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fissue-65774-1.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -25,7 +25,7 @@ LL | impl<'a, T: MyDisplay> MyDisplay for &'a mut T { }\n    |             ---------  ^^^^^^^^^     ^^^^^^^^^\n    |             |\n    |             unsatisfied trait bound introduced here\n-   = note: required for the cast from `&mut T` to the object type `dyn MyDisplay`\n+   = note: required for the cast from `&&mut T` to `&dyn MyDisplay`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ca8a727f0fe21a03c9ca7e8c1e58d13bbda57977", "filename": "tests/ui/associated-types/issue-65774-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fassociated-types%2Fissue-65774-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fassociated-types%2Fissue-65774-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fissue-65774-2.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -18,7 +18,7 @@ LL |         writer.my_write(valref)\n    |                         ^^^^^^ the trait `MyDisplay` is not implemented for `T`\n    |\n    = help: the trait `MyDisplay` is implemented for `&'a mut T`\n-   = note: required for the cast from `T` to the object type `dyn MyDisplay`\n+   = note: required for the cast from `&mut T` to `&dyn MyDisplay`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bbd5a822d8df586b81f8ac8b9692bf356c6a0bd1", "filename": "tests/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -35,7 +35,7 @@ error[E0271]: expected `[async block@$DIR/async-block-control-flow-static-semant\n LL |     let _: &dyn Future<Output = ()> = &block;\n    |                                       ^^^^^^ expected `()`, found `u8`\n    |\n-   = note: required for the cast from `[async block@$DIR/async-block-control-flow-static-semantics.rs:23:17: 25:6]` to the object type `dyn Future<Output = ()>`\n+   = note: required for the cast from `&[async block@$DIR/async-block-control-flow-static-semantics.rs:23:17: 25:6]` to `&dyn Future<Output = ()>`\n \n error[E0308]: mismatched types\n   --> $DIR/async-block-control-flow-static-semantics.rs:12:43\n@@ -51,7 +51,7 @@ error[E0271]: expected `[async block@$DIR/async-block-control-flow-static-semant\n LL |     let _: &dyn Future<Output = ()> = &block;\n    |                                       ^^^^^^ expected `()`, found `u8`\n    |\n-   = note: required for the cast from `[async block@$DIR/async-block-control-flow-static-semantics.rs:14:17: 16:6]` to the object type `dyn Future<Output = ()>`\n+   = note: required for the cast from `&[async block@$DIR/async-block-control-flow-static-semantics.rs:14:17: 16:6]` to `&dyn Future<Output = ()>`\n \n error[E0308]: mismatched types\n   --> $DIR/async-block-control-flow-static-semantics.rs:49:44"}, {"sha": "adb7b9bf4bf8da1befe885e0442b5645cfde83e0", "filename": "tests/ui/async-await/issue-86507.drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fasync-await%2Fissue-86507.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fasync-await%2Fissue-86507.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-86507.drop_tracking.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -13,7 +13,7 @@ note: captured value is not `Send` because `&` references cannot be sent unless\n    |\n LL |                     let x = x;\n    |                             ^ has type `&T` which is not `Send`, because `T` is not `Sync`\n-   = note: required for the cast from `[async block@$DIR/issue-86507.rs:21:17: 23:18]` to the object type `dyn Future<Output = ()> + Send`\n+   = note: required for the cast from `Pin<Box<[async block@$DIR/issue-86507.rs:21:17: 23:18]>>` to `Pin<Box<(dyn Future<Output = ()> + Send + 'async_trait)>>`\n help: consider further restricting this bound\n    |\n LL |     fn bar<'me, 'async_trait, T: Send + std::marker::Sync>(x: &'me T)"}, {"sha": "adb7b9bf4bf8da1befe885e0442b5645cfde83e0", "filename": "tests/ui/async-await/issue-86507.drop_tracking_mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fasync-await%2Fissue-86507.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fasync-await%2Fissue-86507.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-86507.drop_tracking_mir.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -13,7 +13,7 @@ note: captured value is not `Send` because `&` references cannot be sent unless\n    |\n LL |                     let x = x;\n    |                             ^ has type `&T` which is not `Send`, because `T` is not `Sync`\n-   = note: required for the cast from `[async block@$DIR/issue-86507.rs:21:17: 23:18]` to the object type `dyn Future<Output = ()> + Send`\n+   = note: required for the cast from `Pin<Box<[async block@$DIR/issue-86507.rs:21:17: 23:18]>>` to `Pin<Box<(dyn Future<Output = ()> + Send + 'async_trait)>>`\n help: consider further restricting this bound\n    |\n LL |     fn bar<'me, 'async_trait, T: Send + std::marker::Sync>(x: &'me T)"}, {"sha": "adb7b9bf4bf8da1befe885e0442b5645cfde83e0", "filename": "tests/ui/async-await/issue-86507.no_drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fasync-await%2Fissue-86507.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fasync-await%2Fissue-86507.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-86507.no_drop_tracking.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -13,7 +13,7 @@ note: captured value is not `Send` because `&` references cannot be sent unless\n    |\n LL |                     let x = x;\n    |                             ^ has type `&T` which is not `Send`, because `T` is not `Sync`\n-   = note: required for the cast from `[async block@$DIR/issue-86507.rs:21:17: 23:18]` to the object type `dyn Future<Output = ()> + Send`\n+   = note: required for the cast from `Pin<Box<[async block@$DIR/issue-86507.rs:21:17: 23:18]>>` to `Pin<Box<(dyn Future<Output = ()> + Send + 'async_trait)>>`\n help: consider further restricting this bound\n    |\n LL |     fn bar<'me, 'async_trait, T: Send + std::marker::Sync>(x: &'me T)"}, {"sha": "e468f6be791fe9b653d9425bdefaf9323a141021", "filename": "tests/ui/closure_context/issue-26046-fn-mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -9,7 +9,7 @@ LL |         num += 1;\n LL |     Box::new(closure)\n    |     ----------------- the requirement to implement `Fn` derives from here\n    |\n-   = note: required for the cast from `[closure@$DIR/issue-26046-fn-mut.rs:4:19: 4:21]` to the object type `dyn Fn()`\n+   = note: required for the cast from `Box<[closure@$DIR/issue-26046-fn-mut.rs:4:19: 4:21]>` to `Box<(dyn Fn() + 'static)>`\n \n error: aborting due to previous error\n "}, {"sha": "41f60327ce061d33f5b98c169b61f35b2b988a54", "filename": "tests/ui/closure_context/issue-26046-fn-once.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fclosure_context%2Fissue-26046-fn-once.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fclosure_context%2Fissue-26046-fn-once.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosure_context%2Fissue-26046-fn-once.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -9,7 +9,7 @@ LL |         vec\n LL |     Box::new(closure)\n    |     ----------------- the requirement to implement `Fn` derives from here\n    |\n-   = note: required for the cast from `[closure@$DIR/issue-26046-fn-once.rs:4:19: 4:26]` to the object type `dyn Fn() -> Vec<u8>`\n+   = note: required for the cast from `Box<[closure@$DIR/issue-26046-fn-once.rs:4:19: 4:26]>` to `Box<(dyn Fn() -> Vec<u8> + 'static)>`\n \n error: aborting due to previous error\n "}, {"sha": "b976f70acf76ac1812d81d11e311ffdb72abbc3f", "filename": "tests/ui/coercion/coerce-issue-49593-box-never-windows.nofallback.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never-windows.nofallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never-windows.nofallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never-windows.nofallback.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -4,15 +4,15 @@ error[E0277]: the trait bound `(): std::error::Error` is not satisfied\n LL |     /* *mut $0 is coerced to Box<dyn Error> here */ Box::<_ /* ! */>::new(x)\n    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::error::Error` is not implemented for `()`\n    |\n-   = note: required for the cast from `()` to the object type `dyn std::error::Error`\n+   = note: required for the cast from `Box<()>` to `Box<(dyn std::error::Error + 'static)>`\n \n error[E0277]: the trait bound `(): std::error::Error` is not satisfied\n   --> $DIR/coerce-issue-49593-box-never-windows.rs:23:49\n    |\n LL |     /* *mut $0 is coerced to *mut Error here */ raw_ptr_box::<_ /* ! */>(x)\n    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::error::Error` is not implemented for `()`\n    |\n-   = note: required for the cast from `()` to the object type `(dyn std::error::Error + 'static)`\n+   = note: required for the cast from `*mut ()` to `*mut (dyn std::error::Error + 'static)`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0d98fa93e5a4be8a541f76336ad62d0188434098", "filename": "tests/ui/coercion/coerce-issue-49593-box-never.nofallback.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.nofallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.nofallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.nofallback.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -4,15 +4,15 @@ error[E0277]: the trait bound `(): std::error::Error` is not satisfied\n LL |     /* *mut $0 is coerced to Box<dyn Error> here */ Box::<_ /* ! */>::new(x)\n    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::error::Error` is not implemented for `()`\n    |\n-   = note: required for the cast from `()` to the object type `dyn std::error::Error`\n+   = note: required for the cast from `Box<()>` to `Box<(dyn std::error::Error + 'static)>`\n \n error[E0277]: the trait bound `(): std::error::Error` is not satisfied\n   --> $DIR/coerce-issue-49593-box-never.rs:23:49\n    |\n LL |     /* *mut $0 is coerced to *mut Error here */ raw_ptr_box::<_ /* ! */>(x)\n    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::error::Error` is not implemented for `()`\n    |\n-   = note: required for the cast from `()` to the object type `(dyn std::error::Error + 'static)`\n+   = note: required for the cast from `*mut ()` to `*mut (dyn std::error::Error + 'static)`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "481d77728b9efb8bf323c690c009f9da231c84b5", "filename": "tests/ui/const-generics/defaults/trait_objects_fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -5,7 +5,7 @@ LL |     foo(&10_u32);\n    |         ^^^^^^^ the trait `Trait` is not implemented for `u32`\n    |\n    = help: the trait `Trait<2>` is implemented for `u32`\n-   = note: required for the cast from `u32` to the object type `dyn Trait`\n+   = note: required for the cast from `&u32` to `&dyn Trait`\n \n error[E0277]: the trait bound `bool: Traitor<_>` is not satisfied\n   --> $DIR/trait_objects_fail.rs:28:9\n@@ -14,7 +14,7 @@ LL |     bar(&true);\n    |         ^^^^^ the trait `Traitor<_>` is not implemented for `bool`\n    |\n    = help: the trait `Traitor<2, 3>` is implemented for `bool`\n-   = note: required for the cast from `bool` to the object type `dyn Traitor<_>`\n+   = note: required for the cast from `&bool` to `&dyn Traitor<_>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "31b18b2df984416719b6eb2663336bf606c541ed", "filename": "tests/ui/custom_test_frameworks/mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fcustom_test_frameworks%2Fmismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fcustom_test_frameworks%2Fmismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcustom_test_frameworks%2Fmismatch.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -6,7 +6,7 @@ LL | #[test]\n LL | fn wrong_kind(){}\n    | ^^^^^^^^^^^^^^^^^ the trait `Testable` is not implemented for `TestDescAndFn`\n    |\n-   = note: required for the cast from `TestDescAndFn` to the object type `dyn Testable`\n+   = note: required for the cast from `&TestDescAndFn` to `&dyn Testable`\n    = note: this error originates in the attribute macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "52f415037d350a90c08a13a50078808a38dbf17e", "filename": "tests/ui/diagnostic-width/E0271.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fdiagnostic-width%2FE0271.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fdiagnostic-width%2FE0271.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiagnostic-width%2FE0271.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -15,8 +15,8 @@ note: expected this to be `Foo`\n    |\n LL |     type Error = E;\n    |                  ^\n-   = note: required for the cast from `Result<Result<..., ...>, ...>` to the object type `dyn Future<Error = Foo>`\n-   = note: the full name for the casted type has been written to '$TEST_BUILD_DIR/diagnostic-width/E0271/E0271.long-type-hash.txt'\n+   = note: required for the cast from `Box<Result<..., ...>>` to `Box<(dyn Future<Error = Foo> + 'static)>`\n+   = note: the full name for the source type has been written to '$TEST_BUILD_DIR/diagnostic-width/E0271/E0271.long-type-hash.txt'\n \n error: aborting due to previous error\n "}, {"sha": "2c75518c298a9ab1b942c44c76f53c0f8b27d4ea", "filename": "tests/ui/dst/dst-bad-coerce1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fdst%2Fdst-bad-coerce1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fdst%2Fdst-bad-coerce1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fdst-bad-coerce1.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -15,7 +15,7 @@ error[E0277]: the trait bound `Foo: Bar` is not satisfied\n LL |     let f3: &Fat<dyn Bar> = f2;\n    |                             ^^ the trait `Bar` is not implemented for `Foo`\n    |\n-   = note: required for the cast from `Foo` to the object type `dyn Bar`\n+   = note: required for the cast from `&Fat<Foo>` to `&Fat<dyn Bar>`\n \n error[E0308]: mismatched types\n   --> $DIR/dst-bad-coerce1.rs:28:27\n@@ -34,7 +34,7 @@ error[E0277]: the trait bound `Foo: Bar` is not satisfied\n LL |     let f3: &(dyn Bar,) = f2;\n    |                           ^^ the trait `Bar` is not implemented for `Foo`\n    |\n-   = note: required for the cast from `Foo` to the object type `dyn Bar`\n+   = note: required for the cast from `&(Foo,)` to `&(dyn Bar,)`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "d5e464aed4ba75983aebef59e2c157ed1837d533", "filename": "tests/ui/dst/dst-object-from-unsized-type.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -6,7 +6,7 @@ LL | fn test1<T: ?Sized + Foo>(t: &T) {\n LL |     let u: &dyn Foo = t;\n    |                       ^ doesn't have a size known at compile-time\n    |\n-   = note: required for the cast from `T` to the object type `dyn Foo`\n+   = note: required for the cast from `&T` to `&dyn Foo`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn test1<T: ?Sized + Foo>(t: &T) {\n@@ -21,7 +21,7 @@ LL | fn test2<T: ?Sized + Foo>(t: &T) {\n LL |     let v: &dyn Foo = t as &dyn Foo;\n    |                       ^ doesn't have a size known at compile-time\n    |\n-   = note: required for the cast from `T` to the object type `dyn Foo`\n+   = note: required for the cast from `&T` to `&dyn Foo`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn test2<T: ?Sized + Foo>(t: &T) {\n@@ -35,7 +35,7 @@ LL |     let _: &[&dyn Foo] = &[\"hi\"];\n    |                            ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-   = note: required for the cast from `str` to the object type `dyn Foo`\n+   = note: required for the cast from `&'static str` to `&dyn Foo`\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n   --> $DIR/dst-object-from-unsized-type.rs:23:23\n@@ -44,7 +44,7 @@ LL |     let _: &dyn Foo = x as &dyn Foo;\n    |                       ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n-   = note: required for the cast from `[u8]` to the object type `dyn Foo`\n+   = note: required for the cast from `&[u8]` to `&dyn Foo`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "a2cc10a4b22c073936f2fb12169d57801397a06f", "filename": "tests/ui/enum-discriminant/auxiliary/discr-foreign-dep.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fenum-discriminant%2Fauxiliary%2Fdiscr-foreign-dep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fenum-discriminant%2Fauxiliary%2Fdiscr-foreign-dep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum-discriminant%2Fauxiliary%2Fdiscr-foreign-dep.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -0,0 +1,7 @@\n+#[derive(Default)]\n+pub enum Foo {\n+    A(u32),\n+    #[default]\n+    B,\n+    C(u32),\n+}"}, {"sha": "e7123b3445230273b03c3253f9c31c7735d048a1", "filename": "tests/ui/enum-discriminant/discr-foreign.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fenum-discriminant%2Fdiscr-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fenum-discriminant%2Fdiscr-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum-discriminant%2Fdiscr-foreign.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -0,0 +1,11 @@\n+// aux-build:discr-foreign-dep.rs\n+// build-pass\n+\n+extern crate discr_foreign_dep;\n+\n+fn main() {\n+    match Default::default() {\n+        discr_foreign_dep::Foo::A(_) => {}\n+        _ => {}\n+    }\n+}"}, {"sha": "cb265aa7f25b8b82372d7497dfd7f832bd68c1bb", "filename": "tests/ui/feature-gates/feature-gate-cfg_overflow_checks.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ffeature-gates%2Ffeature-gate-cfg_overflow_checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ffeature-gates%2Ffeature-gate-cfg_overflow_checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-cfg_overflow_checks.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -0,0 +1,6 @@\n+#![crate_type = \"lib\"]\n+\n+#[cfg(overflow_checks)] //~ ERROR `cfg(overflow_checks)` is experimental\n+pub fn cast(v: i64)->u32{\n+    todo!()\n+}"}, {"sha": "79aba7945f6abd66987967f5c69ae8364e1719b9", "filename": "tests/ui/feature-gates/feature-gate-cfg_overflow_checks.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ffeature-gates%2Ffeature-gate-cfg_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ffeature-gates%2Ffeature-gate-cfg_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-cfg_overflow_checks.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: `cfg(overflow_checks)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg_overflow_checks.rs:3:7\n+   |\n+LL | #[cfg(overflow_checks)]\n+   |       ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #111466 <https://github.com/rust-lang/rust/issues/111466> for more information\n+   = help: add `#![feature(cfg_overflow_checks)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "303700c7ab4f584b5a8ccc45e30f6e7ac995efc9", "filename": "tests/ui/feature-gates/feature-gate-dispatch-from-dyn-missing-impl.stderr", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ffeature-gates%2Ffeature-gate-dispatch-from-dyn-missing-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ffeature-gates%2Ffeature-gate-dispatch-from-dyn-missing-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-dispatch-from-dyn-missing-impl.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -31,14 +31,7 @@ LL | trait Trait {\n    |       ----- this trait cannot be made into an object...\n LL |     fn ptr(self: Ptr<Self>);\n    |                  ^^^^^^^^^ ...because method `ptr`'s `self` parameter cannot be dispatched on\n-note: required for `Ptr<{integer}>` to implement `CoerceUnsized<Ptr<dyn Trait>>`\n-  --> $DIR/feature-gate-dispatch-from-dyn-missing-impl.rs:20:40\n-   |\n-LL | impl<T: Unsize<U> + ?Sized, U: ?Sized> CoerceUnsized<Ptr<U>> for Ptr<T> {}\n-   |         ---------                      ^^^^^^^^^^^^^^^^^^^^^     ^^^^^^\n-   |         |\n-   |         unsatisfied trait bound introduced here\n-   = note: required by cast to type `Ptr<dyn Trait>`\n+   = note: required for the cast from `Ptr<{integer}>` to `Ptr<dyn Trait>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "370329b9f8373598c08a5e1f4ca48c1e6028a9b2", "filename": "tests/ui/generic-associated-types/issue-76535.base.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fgeneric-associated-types%2Fissue-76535.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fgeneric-associated-types%2Fissue-76535.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-76535.base.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -43,8 +43,7 @@ LL | pub trait SuperTrait {\n LL |     type SubType<'a>: SubTrait where Self: 'a;\n    |          ^^^^^^^ ...because it contains the generic associated type `SubType`\n    = help: consider moving `SubType` to another trait\n-   = note: required for `Box<SuperStruct>` to implement `CoerceUnsized<Box<dyn SuperTrait<SubType = SubStruct<'_>>>>`\n-   = note: required by cast to type `Box<dyn SuperTrait<SubType = SubStruct<'_>>>`\n+   = note: required for the cast from `Box<SuperStruct>` to `Box<dyn SuperTrait<SubType = SubStruct<'_>>>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "ad704f5e9f01cc9c4a34555bcb1cccabf189800e", "filename": "tests/ui/generic-associated-types/issue-79422.base.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fgeneric-associated-types%2Fissue-79422.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fgeneric-associated-types%2Fissue-79422.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-79422.base.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -43,8 +43,7 @@ LL | trait MapLike<K, V> {\n LL |     type VRefCont<'a>: RefCont<'a, V> where Self: 'a;\n    |          ^^^^^^^^ ...because it contains the generic associated type `VRefCont`\n    = help: consider moving `VRefCont` to another trait\n-   = note: required for `Box<BTreeMap<u8, u8>>` to implement `CoerceUnsized<Box<dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>>>`\n-   = note: required by cast to type `Box<dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>>`\n+   = note: required for the cast from `Box<BTreeMap<u8, u8>>` to `Box<dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "14492266cdaf3065b87482f2c458ceba73a4ad35", "filename": "tests/ui/generic-associated-types/issue-79422.extended.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fgeneric-associated-types%2Fissue-79422.extended.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fgeneric-associated-types%2Fissue-79422.extended.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-79422.extended.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -27,7 +27,7 @@ LL |     type VRefCont<'a> = &'a V where Self: 'a;\n    |                         ^^^^^\n    = note: expected trait object `(dyn RefCont<'_, u8> + 'static)`\n                  found reference `&u8`\n-   = note: required for the cast from `BTreeMap<u8, u8>` to the object type `dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>`\n+   = note: required for the cast from `Box<BTreeMap<u8, u8>>` to `Box<dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7de906e7ef3f3e663615c94f0eebfd4416ee23d0", "filename": "tests/ui/generic-associated-types/issue-88595.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fgeneric-associated-types%2Fissue-88595.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fgeneric-associated-types%2Fissue-88595.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-88595.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -19,4 +19,5 @@ impl<'a> A<'a> for C {\n     type B<'b> = impl Clone;\n \n     fn a(&'a self) -> Self::B<'a> {} //~ ERROR: non-defining opaque type use in defining scope\n+    //~^ ERROR: mismatched types\n }"}, {"sha": "d6caed854599325d773e546918471bf918e0ee1a", "filename": "tests/ui/generic-associated-types/issue-88595.stderr", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fgeneric-associated-types%2Fissue-88595.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fgeneric-associated-types%2Fissue-88595.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-88595.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -1,16 +1,34 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/issue-88595.rs:21:35\n+  --> $DIR/issue-88595.rs:21:5\n    |\n LL |     fn a(&'a self) -> Self::B<'a> {}\n-   |                                   ^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ generic argument `'a` used twice\n    |\n-note: lifetime used multiple times\n-  --> $DIR/issue-88595.rs:18:6\n+note: for this opaque type\n+  --> $DIR/issue-88595.rs:19:18\n    |\n-LL | impl<'a> A<'a> for C {\n-   |      ^^\n LL |     type B<'b> = impl Clone;\n-   |            ^^\n+   |                  ^^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0308]: mismatched types\n+  --> $DIR/issue-88595.rs:21:23\n+   |\n+LL |     type B<'b> = impl Clone;\n+   |                  ---------- the expected opaque type\n+LL |\n+LL |     fn a(&'a self) -> Self::B<'a> {}\n+   |        -              ^^^^^^^^^^^ expected opaque type, found `()`\n+   |        |\n+   |        implicitly returns `()` as its body has no tail or `return` expression\n+   |\n+   = note: expected opaque type `<C as A<'a>>::B<'a>`\n+                found unit type `()`\n+note: this item must have the opaque type in its signature in order to be able to register hidden types\n+  --> $DIR/issue-88595.rs:21:5\n+   |\n+LL |     fn a(&'a self) -> Self::B<'a> {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "c395b4195a05fcbfcac2b2366134239cb42caf6f", "filename": "tests/ui/impl-trait/in-assoc-type-unconstrained.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fimpl-trait%2Fin-assoc-type-unconstrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fimpl-trait%2Fin-assoc-type-unconstrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-assoc-type-unconstrained.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -0,0 +1,27 @@\n+#![feature(impl_trait_in_assoc_type)]\n+\n+mod compare_ty {\n+    trait Trait {\n+        type Ty: IntoIterator<Item = ()>;\n+    }\n+    impl Trait for () {\n+        type Ty = Option<impl Sized>;\n+        //~^ ERROR: unconstrained opaque type\n+        //~| ERROR: type mismatch resolving `<Option<<() as Trait>::Ty::{opaque#0}> as IntoIterator>::Item == ()`\n+    }\n+}\n+\n+mod compare_method {\n+    trait Trait {\n+        type Ty;\n+        fn method() -> Self::Ty;\n+    }\n+    impl Trait for () {\n+        type Ty = impl Sized;\n+        //~^ ERROR: unconstrained opaque type\n+        fn method() -> () {}\n+        //~^ ERROR: method `method` has an incompatible type for trait\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "1097cd0f452a870b542c43fbcb91c52708641eaf", "filename": "tests/ui/impl-trait/in-assoc-type-unconstrained.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fimpl-trait%2Fin-assoc-type-unconstrained.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fimpl-trait%2Fin-assoc-type-unconstrained.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-assoc-type-unconstrained.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -0,0 +1,59 @@\n+error[E0271]: type mismatch resolving `<Option<<() as Trait>::Ty::{opaque#0}> as IntoIterator>::Item == ()`\n+  --> $DIR/in-assoc-type-unconstrained.rs:8:19\n+   |\n+LL |         type Ty = Option<impl Sized>;\n+   |                   ^^^^^^^^^^^^^^^^^^ expected `()`, found opaque type\n+   |\n+   = note: expected unit type `()`\n+            found opaque type `<() as compare_ty::Trait>::Ty::{opaque#0}`\n+note: required by a bound in `compare_ty::Trait::Ty`\n+  --> $DIR/in-assoc-type-unconstrained.rs:5:31\n+   |\n+LL |         type Ty: IntoIterator<Item = ()>;\n+   |                               ^^^^^^^^^ required by this bound in `Trait::Ty`\n+\n+error: unconstrained opaque type\n+  --> $DIR/in-assoc-type-unconstrained.rs:8:26\n+   |\n+LL |         type Ty = Option<impl Sized>;\n+   |                          ^^^^^^^^^^\n+   |\n+   = note: `Ty` must be used in combination with a concrete type within the same impl\n+\n+error[E0053]: method `method` has an incompatible type for trait\n+  --> $DIR/in-assoc-type-unconstrained.rs:22:24\n+   |\n+LL |         type Ty = impl Sized;\n+   |                   ---------- the expected opaque type\n+LL |\n+LL |         fn method() -> () {}\n+   |                        ^^\n+   |                        |\n+   |                        expected opaque type, found `()`\n+   |                        help: change the output type to match the trait: `<() as compare_method::Trait>::Ty`\n+   |\n+note: type in trait\n+  --> $DIR/in-assoc-type-unconstrained.rs:17:24\n+   |\n+LL |         fn method() -> Self::Ty;\n+   |                        ^^^^^^^^\n+   = note: expected signature `fn() -> <() as compare_method::Trait>::Ty`\n+              found signature `fn()`\n+note: this item must have the opaque type in its signature in order to be able to register hidden types\n+  --> $DIR/in-assoc-type-unconstrained.rs:22:9\n+   |\n+LL |         fn method() -> () {}\n+   |         ^^^^^^^^^^^^^^^^^\n+\n+error: unconstrained opaque type\n+  --> $DIR/in-assoc-type-unconstrained.rs:20:19\n+   |\n+LL |         type Ty = impl Sized;\n+   |                   ^^^^^^^^^^\n+   |\n+   = note: `Ty` must be used in combination with a concrete type within the same impl\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0053, E0271.\n+For more information about an error, try `rustc --explain E0053`."}, {"sha": "36c54bdd6de346f83056f3b7bc2de8134cc587fb", "filename": "tests/ui/impl-trait/in-assoc-type.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fimpl-trait%2Fin-assoc-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fimpl-trait%2Fin-assoc-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-assoc-type.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -0,0 +1,21 @@\n+#![feature(impl_trait_in_assoc_type)]\n+\n+trait Foo<T> {\n+    type Bar;\n+    fn foo(&self) -> <Self as Foo<()>>::Bar\n+    where\n+        Self: Foo<()>;\n+}\n+\n+impl Foo<()> for () {\n+    type Bar = impl std::fmt::Debug;\n+    fn foo(&self) -> Self::Bar {}\n+}\n+\n+impl Foo<i32> for () {\n+    type Bar = u32;\n+    fn foo(&self) -> <Self as Foo<()>>::Bar {}\n+    //~^ ERROR: mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "f0a272dc2d5d1e267d2e55353aef81148908fb1e", "filename": "tests/ui/impl-trait/in-assoc-type.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fimpl-trait%2Fin-assoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fimpl-trait%2Fin-assoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-assoc-type.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -0,0 +1,22 @@\n+error[E0308]: mismatched types\n+  --> $DIR/in-assoc-type.rs:17:22\n+   |\n+LL |     type Bar = impl std::fmt::Debug;\n+   |                -------------------- the expected opaque type\n+...\n+LL |     fn foo(&self) -> <Self as Foo<()>>::Bar {}\n+   |        ---           ^^^^^^^^^^^^^^^^^^^^^^ expected opaque type, found `()`\n+   |        |\n+   |        implicitly returns `()` as its body has no tail or `return` expression\n+   |\n+   = note: expected opaque type `<() as Foo<()>>::Bar`\n+                found unit type `()`\n+note: this item must have the opaque type in its signature in order to be able to register hidden types\n+  --> $DIR/in-assoc-type.rs:17:5\n+   |\n+LL |     fn foo(&self) -> <Self as Foo<()>>::Bar {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "2c340a02319b2be1512222b67a82d43fadceab23", "filename": "tests/ui/impl-trait/in-trait/object-safety.current.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.current.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -42,8 +42,7 @@ LL | trait Foo {\n LL |     fn baz(&self) -> impl Debug;\n    |                      ^^^^^^^^^^ ...because method `baz` references an `impl Trait` type in its return type\n    = help: consider moving `baz` to another trait\n-   = note: required for `Box<u32>` to implement `CoerceUnsized<Box<dyn Foo>>`\n-   = note: required by cast to type `Box<dyn Foo>`\n+   = note: required for the cast from `Box<u32>` to `Box<dyn Foo>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "2c340a02319b2be1512222b67a82d43fadceab23", "filename": "tests/ui/impl-trait/in-trait/object-safety.next.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.next.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -42,8 +42,7 @@ LL | trait Foo {\n LL |     fn baz(&self) -> impl Debug;\n    |                      ^^^^^^^^^^ ...because method `baz` references an `impl Trait` type in its return type\n    = help: consider moving `baz` to another trait\n-   = note: required for `Box<u32>` to implement `CoerceUnsized<Box<dyn Foo>>`\n-   = note: required by cast to type `Box<dyn Foo>`\n+   = note: required for the cast from `Box<u32>` to `Box<dyn Foo>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "fe62a8f32888b3a5212d7709ede9574ca332c473", "filename": "tests/ui/impl-trait/recursive-type-alias-impl-trait-declaration-too-subtle.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -43,6 +43,11 @@ LL |         fn eq(&self, _other: &(Bar, i32)) -> bool {\n    |\n    = note: expected signature `fn(&b::Bar, &(b::Foo, i32)) -> _`\n               found signature `fn(&b::Bar, &(b::Bar, i32)) -> _`\n+note: this item must have the opaque type in its signature in order to be able to register hidden types\n+  --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle.rs:24:9\n+   |\n+LL |         fn eq(&self, _other: &(Bar, i32)) -> bool {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "df61aabf00a74bef1abc6f2666667f95a1b9096a", "filename": "tests/ui/issues/issue-14366.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fissues%2Fissue-14366.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fissues%2Fissue-14366.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-14366.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -5,8 +5,8 @@ LL |     let _x = \"test\" as &dyn (::std::any::Any);\n    |              ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-   = note: required for the cast from `str` to the object type `dyn Any`\n-help: consider borrowing the value, since `&str` can be coerced into `dyn Any`\n+   = note: required for the cast from `&'static str` to `&(dyn Any + 'static)`\n+help: consider borrowing the value, since `&&'static str` can be coerced into `&(dyn Any + 'static)`\n    |\n LL |     let _x = &\"test\" as &dyn (::std::any::Any);\n    |              +"}, {"sha": "9833e559cbcdbcd64e336e0ead1616e8297cae31", "filename": "tests/ui/issues/issue-22034.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fissues%2Fissue-22034.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fissues%2Fissue-22034.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-22034.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -6,7 +6,7 @@ LL |         &mut *(ptr as *mut dyn Fn())\n    |\n    = help: the trait `Fn<()>` is not implemented for `()`\n    = note: wrap the `()` in a closure with no arguments: `|| { /* code */ }`\n-   = note: required for the cast from `()` to the object type `dyn Fn()`\n+   = note: required for the cast from `*mut ()` to `*mut dyn Fn()`\n \n error: aborting due to previous error\n "}, {"sha": "63222d25c0171450695f546ec189e5bb47ae56f6", "filename": "tests/ui/issues/issue-22872.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fissues%2Fissue-22872.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fissues%2Fissue-22872.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-22872.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -13,7 +13,7 @@ LL | impl<'b, P> Wrap<'b> for Wrapper<P>\n LL | where P: Process<'b>,\n LL |       <P as Process<'b>>::Item: Iterator {\n    |                                 -------- unsatisfied trait bound introduced here\n-   = note: required for the cast from `Wrapper<P>` to the object type `dyn for<'b> Wrap<'b>`\n+   = note: required for the cast from `Box<Wrapper<P>>` to `Box<dyn for<'b> Wrap<'b>>`\n help: consider further restricting the associated type\n    |\n LL | fn push_process<P>(process: P) where P: Process<'static>, <P as Process<'_>>::Item: Iterator {"}, {"sha": "53c1940491f844292b092e963ae3bfe9e14ca67a", "filename": "tests/ui/kindck/kindck-impl-type-params.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -11,7 +11,7 @@ LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |         ----                   ^^^^^^^^^^^     ^^^^\n    |         |\n    |         unsatisfied trait bound introduced here\n-   = note: required for the cast from `S<T>` to the object type `dyn Gettable<T>`\n+   = note: required for the cast from `&S<T>` to `&dyn Gettable<T>`\n help: consider restricting type parameter `T`\n    |\n LL | fn f<T: std::marker::Send>(val: T) {\n@@ -30,7 +30,7 @@ LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                ----            ^^^^^^^^^^^     ^^^^\n    |                |\n    |                unsatisfied trait bound introduced here\n-   = note: required for the cast from `S<T>` to the object type `dyn Gettable<T>`\n+   = note: required for the cast from `&S<T>` to `&dyn Gettable<T>`\n help: consider restricting type parameter `T`\n    |\n LL | fn f<T: std::marker::Copy>(val: T) {\n@@ -49,7 +49,7 @@ LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |         ----                   ^^^^^^^^^^^     ^^^^\n    |         |\n    |         unsatisfied trait bound introduced here\n-   = note: required for the cast from `S<T>` to the object type `dyn Gettable<T>`\n+   = note: required for the cast from `&S<T>` to `&dyn Gettable<T>`\n help: consider restricting type parameter `T`\n    |\n LL | fn g<T: std::marker::Send>(val: T) {\n@@ -68,7 +68,7 @@ LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                ----            ^^^^^^^^^^^     ^^^^\n    |                |\n    |                unsatisfied trait bound introduced here\n-   = note: required for the cast from `S<T>` to the object type `dyn Gettable<T>`\n+   = note: required for the cast from `&S<T>` to `&dyn Gettable<T>`\n help: consider restricting type parameter `T`\n    |\n LL | fn g<T: std::marker::Copy>(val: T) {\n@@ -88,7 +88,7 @@ LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                ----            ^^^^^^^^^^^     ^^^^\n    |                |\n    |                unsatisfied trait bound introduced here\n-   = note: required for the cast from `S<String>` to the object type `dyn Gettable<String>`\n+   = note: required for the cast from `Box<S<String>>` to `Box<dyn Gettable<String>>`\n \n error[E0277]: the trait bound `Foo: Copy` is not satisfied\n   --> $DIR/kindck-impl-type-params.rs:43:37\n@@ -104,7 +104,7 @@ LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                ----            ^^^^^^^^^^^     ^^^^\n    |                |\n    |                unsatisfied trait bound introduced here\n-   = note: required for the cast from `S<Foo>` to the object type `dyn Gettable<Foo>`\n+   = note: required for the cast from `Box<S<Foo>>` to `Box<dyn Gettable<Foo>>`\n help: consider annotating `Foo` with `#[derive(Copy)]`\n    |\n LL +     #[derive(Copy)]"}, {"sha": "29495176556409e58c780ddf93cc54f6611d8836", "filename": "tests/ui/kindck/kindck-inherited-copy-bound.curr.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -46,8 +46,7 @@ LL | trait Foo : Copy {\n    |       ---   ^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `&Box<{integer}>` to implement `CoerceUnsized<&dyn Foo>`\n-   = note: required by cast to type `&dyn Foo`\n+   = note: required for the cast from `&Box<{integer}>` to `&dyn Foo`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "3e164ebf51439649462bfbcd9906cfad9f422c00", "filename": "tests/ui/kindck/kindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -32,8 +32,7 @@ LL | trait Foo : Copy {\n    |       ---   ^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `&Box<i32>` to implement `CoerceUnsized<&dyn Foo>`\n-   = note: required by cast to type `&dyn Foo`\n+   = note: required for the cast from `&Box<i32>` to `&dyn Foo`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6b9ac3c5852368b759366737eb5ad5b2276a919e", "filename": "tests/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -220,11 +220,7 @@ LL |     let _ = fat_v as *const dyn Foo;\n    |             ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n-   = note: required for the cast from `[u8]` to the object type `dyn Foo`\n-help: consider borrowing the value, since `&[u8]` can be coerced into `dyn Foo`\n-   |\n-LL |     let _ = &fat_v as *const dyn Foo;\n-   |             +\n+   = note: required for the cast from `*const [u8]` to `*const dyn Foo`\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/cast-rfc0401.rs:62:13\n@@ -233,11 +229,7 @@ LL |     let _ = a as *const dyn Foo;\n    |             ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-   = note: required for the cast from `str` to the object type `dyn Foo`\n-help: consider borrowing the value, since `&str` can be coerced into `dyn Foo`\n-   |\n-LL |     let _ = &a as *const dyn Foo;\n-   |             +\n+   = note: required for the cast from `*const str` to `*const dyn Foo`\n \n error[E0606]: casting `&{float}` as `f32` is invalid\n   --> $DIR/cast-rfc0401.rs:71:30"}, {"sha": "5b6f0235123321c621675ff8e689aea242ebfcc1", "filename": "tests/ui/never_type/fallback-closure-wrap.fallback.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fnever_type%2Ffallback-closure-wrap.fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fnever_type%2Ffallback-closure-wrap.fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_type%2Ffallback-closure-wrap.fallback.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -10,7 +10,7 @@ LL | |     }) as Box<dyn FnMut()>);\n    |\n    = note: expected unit type `()`\n                    found type `!`\n-   = note: required for the cast from `[closure@$DIR/fallback-closure-wrap.rs:18:40: 18:47]` to the object type `dyn FnMut()`\n+   = note: required for the cast from `Box<[closure@$DIR/fallback-closure-wrap.rs:18:40: 18:47]>` to `Box<dyn FnMut()>`\n \n error: aborting due to previous error\n "}, {"sha": "318be2a6401bc8be9cca96bc477efc7dc6099153", "filename": "tests/ui/numbers-arithmetic/overflow-attribute-works-1.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fnumbers-arithmetic%2Foverflow-attribute-works-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fnumbers-arithmetic%2Foverflow-attribute-works-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnumbers-arithmetic%2Foverflow-attribute-works-1.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -0,0 +1,19 @@\n+// run-pass\n+// compile-flags: -C overflow_checks=true\n+\n+#![feature(cfg_overflow_checks)]\n+\n+fn main() {\n+    assert!(cfg!(overflow_checks));\n+    assert!(compiles_differently());\n+}\n+\n+#[cfg(overflow_checks)]\n+fn compiles_differently()->bool {\n+    true\n+}\n+\n+#[cfg(not(overflow_checks))]\n+fn compiles_differently()->bool {\n+    false\n+}"}, {"sha": "0367d980a64c5ea33a8bdba6cd86ad0e11f17f92", "filename": "tests/ui/numbers-arithmetic/overflow-attribute-works-2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fnumbers-arithmetic%2Foverflow-attribute-works-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fnumbers-arithmetic%2Foverflow-attribute-works-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnumbers-arithmetic%2Foverflow-attribute-works-2.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -0,0 +1,19 @@\n+// run-pass\n+// compile-flags: -C overflow_checks=false\n+\n+#![feature(cfg_overflow_checks)]\n+\n+fn main() {\n+    assert!(!cfg!(overflow_checks));\n+    assert!(!compiles_differently());\n+}\n+\n+#[cfg(overflow_checks)]\n+fn compiles_differently()->bool {\n+    true\n+}\n+\n+#[cfg(not(overflow_checks))]\n+fn compiles_differently()->bool {\n+    false\n+}"}, {"sha": "183245b232231e0eef76402f2765a7d48c24976e", "filename": "tests/ui/object-safety/issue-19538.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fobject-safety%2Fissue-19538.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fobject-safety%2Fissue-19538.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fobject-safety%2Fissue-19538.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -29,8 +29,7 @@ LL |     fn foo<T>(&self, val: T);\n LL | trait Bar: Foo { }\n    |       --- this trait cannot be made into an object...\n    = help: consider moving `foo` to another trait\n-   = note: required for `&mut Thing` to implement `CoerceUnsized<&mut dyn Bar>`\n-   = note: required by cast to type `&mut dyn Bar`\n+   = note: required for the cast from `&mut Thing` to `&mut dyn Bar`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "db3e0885a85a871a76170277f0fd9f3b50691543", "filename": "tests/ui/object-safety/object-safety-associated-consts.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.object_safe_for_dispatch.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -12,8 +12,7 @@ LL | trait Bar {\n LL |     const X: usize;\n    |           ^ ...because it contains this associated `const`\n    = help: consider moving `X` to another trait\n-   = note: required for `&T` to implement `CoerceUnsized<&dyn Bar>`\n-   = note: required by cast to type `&dyn Bar`\n+   = note: required for the cast from `&T` to `&dyn Bar`\n \n error: aborting due to previous error\n "}, {"sha": "b200b64a1f077c0f677ce9397094cb7728f54f6f", "filename": "tests/ui/object-safety/object-safety-generics.object_safe_for_dispatch.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fobject-safety%2Fobject-safety-generics.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fobject-safety%2Fobject-safety-generics.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fobject-safety%2Fobject-safety-generics.object_safe_for_dispatch.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -12,8 +12,7 @@ LL | trait Bar {\n LL |     fn bar<T>(&self, t: T);\n    |        ^^^ ...because method `bar` has generic type parameters\n    = help: consider moving `bar` to another trait\n-   = note: required for `&T` to implement `CoerceUnsized<&dyn Bar>`\n-   = note: required by cast to type `&dyn Bar`\n+   = note: required for the cast from `&T` to `&dyn Bar`\n \n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-generics.rs:26:5\n@@ -29,8 +28,7 @@ LL | trait Bar {\n LL |     fn bar<T>(&self, t: T);\n    |        ^^^ ...because method `bar` has generic type parameters\n    = help: consider moving `bar` to another trait\n-   = note: required for `&T` to implement `CoerceUnsized<&dyn Bar>`\n-   = note: required by cast to type `&dyn Bar`\n+   = note: required for the cast from `&T` to `&dyn Bar`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "414614d8d0bf0c23a972a19090fa85cb20b72a23", "filename": "tests/ui/object-safety/object-safety-mentions-Self.object_safe_for_dispatch.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -12,8 +12,7 @@ LL | trait Bar {\n LL |     fn bar(&self, x: &Self);\n    |                      ^^^^^ ...because method `bar` references the `Self` type in this parameter\n    = help: consider moving `bar` to another trait\n-   = note: required for `&T` to implement `CoerceUnsized<&dyn Bar>`\n-   = note: required by cast to type `&dyn Bar`\n+   = note: required for the cast from `&T` to `&dyn Bar`\n \n error[E0038]: the trait `Baz` cannot be made into an object\n   --> $DIR/object-safety-mentions-Self.rs:30:5\n@@ -29,8 +28,7 @@ LL | trait Baz {\n LL |     fn baz(&self) -> Self;\n    |                      ^^^^ ...because method `baz` references the `Self` type in its return type\n    = help: consider moving `baz` to another trait\n-   = note: required for `&T` to implement `CoerceUnsized<&dyn Baz>`\n-   = note: required by cast to type `&dyn Baz`\n+   = note: required for the cast from `&T` to `&dyn Baz`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "befcef952a850fb088ebf252b7593f746f429e3b", "filename": "tests/ui/object-safety/object-safety-no-static.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fobject-safety%2Fobject-safety-no-static.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fobject-safety%2Fobject-safety-no-static.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fobject-safety%2Fobject-safety-no-static.object_safe_for_dispatch.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -11,8 +11,7 @@ LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     fn foo() {}\n    |        ^^^ ...because associated function `foo` has no `self` parameter\n-   = note: required for `Box<Bar>` to implement `CoerceUnsized<Box<dyn Foo>>`\n-   = note: required by cast to type `Box<dyn Foo>`\n+   = note: required for the cast from `Box<Bar>` to `Box<dyn Foo>`\n help: consider turning `foo` into a method by giving it a `&self` argument\n    |\n LL |     fn foo(&self) {}"}, {"sha": "90e5c59dd027c17ff47112a1a9a9ce7323e53512", "filename": "tests/ui/object-safety/object-safety-sized-2.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fobject-safety%2Fobject-safety-sized-2.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fobject-safety%2Fobject-safety-sized-2.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fobject-safety%2Fobject-safety-sized-2.object_safe_for_dispatch.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -11,8 +11,7 @@ LL | trait Bar\n    |       --- this trait cannot be made into an object...\n LL |     where Self : Sized\n    |                  ^^^^^ ...because it requires `Self: Sized`\n-   = note: required for `&T` to implement `CoerceUnsized<&dyn Bar>`\n-   = note: required by cast to type `&dyn Bar`\n+   = note: required for the cast from `&T` to `&dyn Bar`\n \n error: aborting due to previous error\n "}, {"sha": "a6c22b8747e50a16de60ffda7956a067dcc85844", "filename": "tests/ui/object-safety/object-safety-sized.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fobject-safety%2Fobject-safety-sized.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fobject-safety%2Fobject-safety-sized.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fobject-safety%2Fobject-safety-sized.object_safe_for_dispatch.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -11,8 +11,7 @@ LL | trait Bar : Sized {\n    |       ---   ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `&T` to implement `CoerceUnsized<&dyn Bar>`\n-   = note: required by cast to type `&dyn Bar`\n+   = note: required for the cast from `&T` to `&dyn Bar`\n \n error: aborting due to previous error\n "}, {"sha": "13591f5b63516dc245497b77ca50153f226f2b43", "filename": "tests/ui/self/arbitrary-self-types-not-object-safe.curr.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -31,8 +31,7 @@ LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     fn foo(self: &Rc<Self>) -> usize;\n    |                  ^^^^^^^^^ ...because method `foo`'s `self` parameter cannot be dispatched on\n-   = note: required for `Rc<usize>` to implement `CoerceUnsized<Rc<dyn Foo>>`\n-   = note: required by cast to type `Rc<dyn Foo>`\n+   = note: required for the cast from `Rc<usize>` to `Rc<dyn Foo>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "593f705353a5ca55fbe5a9e2253e0e8cd727b62f", "filename": "tests/ui/self/arbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -14,8 +14,7 @@ LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     fn foo(self: &Rc<Self>) -> usize;\n    |                  ^^^^^^^^^ ...because method `foo`'s `self` parameter cannot be dispatched on\n-   = note: required for `Rc<usize>` to implement `CoerceUnsized<Rc<dyn Foo>>`\n-   = note: required by cast to type `Rc<dyn Foo>`\n+   = note: required for the cast from `Rc<usize>` to `Rc<dyn Foo>`\n \n error: aborting due to previous error\n "}, {"sha": "bffcb1af487e9d42acf456ec90609bf900238e6f", "filename": "tests/ui/suggestions/derive-macro-missing-bounds.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -36,7 +36,7 @@ LL |     impl<T: Debug + Trait> Debug for Inner<T> {\n    |                     unsatisfied trait bound introduced here\n    = note: 1 redundant requirement hidden\n    = note: required for `&c::Inner<T>` to implement `Debug`\n-   = note: required for the cast from `&c::Inner<T>` to the object type `dyn Debug`\n+   = note: required for the cast from `&&c::Inner<T>` to `&dyn Debug`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `T`\n    |\n@@ -58,7 +58,7 @@ LL |     impl<T> Debug for Inner<T> where T: Debug, T: Trait {\n    |             ^^^^^     ^^^^^^^^                    ----- unsatisfied trait bound introduced here\n    = note: 1 redundant requirement hidden\n    = note: required for `&d::Inner<T>` to implement `Debug`\n-   = note: required for the cast from `&d::Inner<T>` to the object type `dyn Debug`\n+   = note: required for the cast from `&&d::Inner<T>` to `&dyn Debug`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `T`\n    |\n@@ -80,7 +80,7 @@ LL |     impl<T> Debug for Inner<T> where T: Debug + Trait {\n    |             ^^^^^     ^^^^^^^^                  ----- unsatisfied trait bound introduced here\n    = note: 1 redundant requirement hidden\n    = note: required for `&e::Inner<T>` to implement `Debug`\n-   = note: required for the cast from `&e::Inner<T>` to the object type `dyn Debug`\n+   = note: required for the cast from `&&e::Inner<T>` to `&dyn Debug`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `T`\n    |\n@@ -102,7 +102,7 @@ LL |     impl<T: Debug> Debug for Inner<T> where T: Trait {\n    |                    ^^^^^     ^^^^^^^^          ----- unsatisfied trait bound introduced here\n    = note: 1 redundant requirement hidden\n    = note: required for `&f::Inner<T>` to implement `Debug`\n-   = note: required for the cast from `&f::Inner<T>` to the object type `dyn Debug`\n+   = note: required for the cast from `&&f::Inner<T>` to `&dyn Debug`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `T`\n    |"}, {"sha": "120fc538307a7ac85b7b0a27e5a03766db900610", "filename": "tests/ui/suggestions/suggest-borrow-to-dyn-object.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/16d3e18281fde75eb6c62ebb8363af28de8a3ef0/tests%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16d3e18281fde75eb6c62ebb8363af28de8a3ef0/tests%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.rs?ref=16d3e18281fde75eb6c62ebb8363af28de8a3ef0", "patch": "@@ -1,16 +0,0 @@\n-use std::ffi::{OsStr, OsString};\n-use std::path::Path;\n-\n-fn check(p: &dyn AsRef<Path>) {\n-    let m = std::fs::metadata(&p);\n-    println!(\"{:?}\", &m);\n-}\n-\n-fn main() {\n-    let s: OsString = \".\".into();\n-    let s: &OsStr = &s;\n-    check(s);\n-    //~^ ERROR the size for values of type `[u8]` cannot be known at compilation time\n-    //~| HELP within `OsStr`, the trait `Sized` is not implemented for `[u8]`\n-    //~| HELP consider borrowing the value, since `&OsStr` can be coerced into `dyn AsRef<Path>`\n-}"}, {"sha": "365c1016eb3dcb3ed5d28e541f70e06add3330e1", "filename": "tests/ui/suggestions/suggest-borrow-to-dyn-object.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/16d3e18281fde75eb6c62ebb8363af28de8a3ef0/tests%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16d3e18281fde75eb6c62ebb8363af28de8a3ef0/tests%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.stderr?ref=16d3e18281fde75eb6c62ebb8363af28de8a3ef0", "patch": "@@ -1,18 +0,0 @@\n-error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n-  --> $DIR/suggest-borrow-to-dyn-object.rs:12:11\n-   |\n-LL |     check(s);\n-   |           ^ doesn't have a size known at compile-time\n-   |\n-   = help: within `OsStr`, the trait `Sized` is not implemented for `[u8]`\n-note: required because it appears within the type `OsStr`\n-  --> $SRC_DIR/std/src/ffi/os_str.rs:LL:COL\n-   = note: required for the cast from `OsStr` to the object type `dyn AsRef<Path>`\n-help: consider borrowing the value, since `&OsStr` can be coerced into `dyn AsRef<Path>`\n-   |\n-LL |     check(&s);\n-   |           +\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "e7e8a796796b3c03cde2988ad8deb659f4e6a34e", "filename": "tests/ui/traits/coercion-generic-bad.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ftraits%2Fcoercion-generic-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ftraits%2Fcoercion-generic-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fcoercion-generic-bad.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -5,7 +5,7 @@ LL |     let s: Box<dyn Trait<isize>> = Box::new(Struct { person: \"Fred\" });\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait<isize>` is not implemented for `Struct`\n    |\n    = help: the trait `Trait<&'static str>` is implemented for `Struct`\n-   = note: required for the cast from `Struct` to the object type `dyn Trait<isize>`\n+   = note: required for the cast from `Box<Struct>` to `Box<dyn Trait<isize>>`\n \n error: aborting due to previous error\n "}, {"sha": "30e3c9da1a03e1ce9909746b8f99c32840bcfcbb", "filename": "tests/ui/traits/issue-20692.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ftraits%2Fissue-20692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ftraits%2Fissue-20692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-20692.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -27,8 +27,7 @@ LL | trait Array: Sized + Copy {}\n    |       |      |\n    |       |      ...because it requires `Self: Sized`\n    |       this trait cannot be made into an object...\n-   = note: required for `&T` to implement `CoerceUnsized<&dyn Array>`\n-   = note: required by cast to type `&dyn Array`\n+   = note: required for the cast from `&T` to `&dyn Array`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d532760243067a98f7e600cc0ee0ac8722c0316d", "filename": "tests/ui/traits/issue-38604.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ftraits%2Fissue-38604.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ftraits%2Fissue-38604.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-38604.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -25,8 +25,7 @@ LL | trait Foo where u32: Q<Self> {\n    |       ---            ^^^^^^^ ...because it uses `Self` as a type parameter\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `Box<()>` to implement `CoerceUnsized<Box<dyn Foo>>`\n-   = note: required by cast to type `Box<dyn Foo>`\n+   = note: required for the cast from `Box<()>` to `Box<dyn Foo>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1c0e8bcf1851237ea7864985b686fc863b54fda0", "filename": "tests/ui/traits/issue-7013.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ftraits%2Fissue-7013.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ftraits%2Fissue-7013.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-7013.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -12,7 +12,7 @@ note: required because it appears within the type `B`\n    |\n LL | struct B {\n    |        ^\n-   = note: required for the cast from `B` to the object type `dyn Foo + Send`\n+   = note: required for the cast from `Box<B>` to `Box<dyn Foo + Send>`\n \n error: aborting due to previous error\n "}, {"sha": "4315056f2065f6db7352da93dfd272ece36ae5dd", "filename": "tests/ui/traits/map-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ftraits%2Fmap-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ftraits%2Fmap-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fmap-types.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -5,7 +5,7 @@ LL |     let y: Box<dyn Map<usize, isize>> = Box::new(x);\n    |                                         ^^^^^^^^^^^ the trait `Map<usize, isize>` is not implemented for `Box<dyn Map<isize, isize>>`\n    |\n    = help: the trait `Map<K, V>` is implemented for `HashMap<K, V>`\n-   = note: required for the cast from `Box<dyn Map<isize, isize>>` to the object type `dyn Map<usize, isize>`\n+   = note: required for the cast from `Box<Box<dyn Map<isize, isize>>>` to `Box<dyn Map<usize, isize>>`\n \n error: aborting due to previous error\n "}, {"sha": "d56519223f4da1b1653395e45b6ee9738b5dedb5", "filename": "tests/ui/traits/non_lifetime_binders/supertrait-object-safety.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fsupertrait-object-safety.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fsupertrait-object-safety.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fsupertrait-object-safety.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -20,8 +20,7 @@ LL | trait Foo: for<T> Bar<T> {}\n    |       ---  ^^^^^^^^^^^^^ ...because where clause cannot reference non-lifetime `for<...>` variables\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `&()` to implement `CoerceUnsized<&dyn Foo>`\n-   = note: required by cast to type `&dyn Foo`\n+   = note: required for the cast from `&()` to `&dyn Foo`\n \n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/supertrait-object-safety.rs:19:12"}, {"sha": "a51b6975938121a79095b13868bd678d536715da", "filename": "tests/ui/traits/object/safety.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ftraits%2Fobject%2Fsafety.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ftraits%2Fobject%2Fsafety.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fobject%2Fsafety.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -11,8 +11,7 @@ LL | trait Tr {\n    |       -- this trait cannot be made into an object...\n LL |     fn foo();\n    |        ^^^ ...because associated function `foo` has no `self` parameter\n-   = note: required for `&St` to implement `CoerceUnsized<&dyn Tr>`\n-   = note: required by cast to type `&dyn Tr`\n+   = note: required for the cast from `&St` to `&dyn Tr`\n help: consider turning `foo` into a method by giving it a `&self` argument\n    |\n LL |     fn foo(&self);"}, {"sha": "74a0fc42708e3bd336f8574ada371f418b1f8649", "filename": "tests/ui/traits/test-2.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ftraits%2Ftest-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ftraits%2Ftest-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Ftest-2.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -76,8 +76,7 @@ LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n    |       this trait cannot be made into an object...\n    = help: consider moving `dup` to another trait\n    = help: consider moving `blah` to another trait\n-   = note: required for `Box<{integer}>` to implement `CoerceUnsized<Box<dyn bar>>`\n-   = note: required by cast to type `Box<dyn bar>`\n+   = note: required for the cast from `Box<{integer}>` to `Box<dyn bar>`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "82b4e9bd72aecef30e68490b4f0a4b1fbd5fee87", "filename": "tests/ui/traits/trait-upcasting/type-checking-test-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-1.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -15,7 +15,7 @@ error[E0277]: the trait bound `&dyn Foo: Bar<_>` is not satisfied\n LL |     let _ = x as &dyn Bar<_>; // Ambiguous\n    |             ^ the trait `Bar<_>` is not implemented for `&dyn Foo`\n    |\n-   = note: required for the cast from `&dyn Foo` to the object type `dyn Bar<_>`\n+   = note: required for the cast from `&&dyn Foo` to `&dyn Bar<_>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "856303ef4dd4cd556d6750756af421eb8fa4b7c2", "filename": "tests/ui/traits/trait-upcasting/type-checking-test-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-2.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -15,7 +15,7 @@ error[E0277]: the trait bound `&dyn Foo<i32>: Bar<u32>` is not satisfied\n LL |     let _ = x as &dyn Bar<u32>; // Error\n    |             ^ the trait `Bar<u32>` is not implemented for `&dyn Foo<i32>`\n    |\n-   = note: required for the cast from `&dyn Foo<i32>` to the object type `dyn Bar<u32>`\n+   = note: required for the cast from `&&dyn Foo<i32>` to `&dyn Bar<u32>`\n \n error[E0605]: non-primitive cast: `&dyn Foo<u32>` as `&dyn Bar<_>`\n   --> $DIR/type-checking-test-2.rs:25:13\n@@ -34,7 +34,7 @@ error[E0277]: the trait bound `&dyn Foo<u32>: Bar<_>` is not satisfied\n LL |     let a = x as &dyn Bar<_>; // Ambiguous\n    |             ^ the trait `Bar<_>` is not implemented for `&dyn Foo<u32>`\n    |\n-   = note: required for the cast from `&dyn Foo<u32>` to the object type `dyn Bar<_>`\n+   = note: required for the cast from `&&dyn Foo<u32>` to `&dyn Bar<_>`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "58eaa9c2c42635a4227808b3ec1ce6918e928d50", "filename": "tests/ui/type-alias-impl-trait/associated-type-impl-trait-lifetime.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-impl-trait-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-impl-trait-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-impl-trait-lifetime.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -5,15 +5,16 @@\n trait Trait {\n     type Opaque1;\n     type Opaque2;\n-    fn constrain(self);\n+    fn constrain(self) -> (Self::Opaque1, Self::Opaque2);\n }\n \n impl<'a> Trait for &'a () {\n     type Opaque1 = impl Sized;\n     type Opaque2 = impl Sized + 'a;\n-    fn constrain(self) {\n-        let _: Self::Opaque1 = ();\n-        let _: Self::Opaque2 = self;\n+    fn constrain(self) -> (Self::Opaque1, Self::Opaque2) {\n+        let a: Self::Opaque1 = ();\n+        let b: Self::Opaque2 = self;\n+        (a, b)\n     }\n }\n "}, {"sha": "93c52126d69b00b0d4d866f405fb99709b97e31b", "filename": "tests/ui/type-alias-impl-trait/invalid_impl_trait_in_assoc_ty.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ftype-alias-impl-trait%2Finvalid_impl_trait_in_assoc_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ftype-alias-impl-trait%2Finvalid_impl_trait_in_assoc_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Finvalid_impl_trait_in_assoc_ty.rs?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -0,0 +1,16 @@\n+#![feature(impl_trait_in_assoc_type)]\n+\n+trait Foo {\n+    type Foo;\n+    fn bar();\n+}\n+\n+impl Foo for () {\n+    type Foo = impl std::fmt::Debug;\n+    fn bar() {\n+        let x: Self::Foo = ();\n+        //~^ ERROR: mismatched types\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "2beed73cb85c3b346246835f5ec4a6100dcb6af6", "filename": "tests/ui/type-alias-impl-trait/invalid_impl_trait_in_assoc_ty.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ftype-alias-impl-trait%2Finvalid_impl_trait_in_assoc_ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ftype-alias-impl-trait%2Finvalid_impl_trait_in_assoc_ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Finvalid_impl_trait_in_assoc_ty.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -0,0 +1,22 @@\n+error[E0308]: mismatched types\n+  --> $DIR/invalid_impl_trait_in_assoc_ty.rs:11:28\n+   |\n+LL |     type Foo = impl std::fmt::Debug;\n+   |                -------------------- the expected opaque type\n+LL |     fn bar() {\n+LL |         let x: Self::Foo = ();\n+   |                ---------   ^^ expected opaque type, found `()`\n+   |                |\n+   |                expected due to this\n+   |\n+   = note: expected opaque type `<() as Foo>::Foo`\n+                found unit type `()`\n+note: this item must have the opaque type in its signature in order to be able to register hidden types\n+  --> $DIR/invalid_impl_trait_in_assoc_ty.rs:10:5\n+   |\n+LL |     fn bar() {\n+   |     ^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "af758d8099f88c37f3d56029e66c7480b5502f21", "filename": "tests/ui/type-alias-impl-trait/issue-98604.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -4,7 +4,7 @@ error[E0271]: expected `test` to be a fn item that returns `Pin<Box<dyn Future<O\n LL |     Box::new(test) as AsyncFnPtr;\n    |     ^^^^^^^^^^^^^^ expected `Pin<Box<dyn Future<Output = ()>>>`, found future\n    |\n-   = note: required for the cast from `fn() -> impl Future<Output = ()> {test}` to the object type `dyn Fn() -> Pin<Box<(dyn Future<Output = ()> + 'static)>>`\n+   = note: required for the cast from `Box<fn() -> impl Future<Output = ()> {test}>` to `Box<(dyn Fn() -> Pin<Box<(dyn Future<Output = ()> + 'static)>> + 'static)>`\n \n error: aborting due to previous error\n "}, {"sha": "9b651008371f2f340d1fb8f1d2c832df51ff11b6", "filename": "tests/ui/type-alias-impl-trait/issue-98608.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98608.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98608.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98608.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -9,7 +9,7 @@ LL |     let b: Box<dyn Fn() -> Box<u8>> = Box::new(hi);\n    |\n    = note:   expected struct `Box<u8>`\n            found opaque type `impl Sized`\n-   = note: required for the cast from `fn() -> impl Sized {hi}` to the object type `dyn Fn() -> Box<u8>`\n+   = note: required for the cast from `Box<fn() -> impl Sized {hi}>` to `Box<dyn Fn() -> Box<u8>>`\n \n error: aborting due to previous error\n "}, {"sha": "67078bcfe89ad2c2947d45d83b7677582d26ee6e", "filename": "tests/ui/type/issue-58355.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ftype%2Fissue-58355.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Ftype%2Fissue-58355.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Fissue-58355.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -6,7 +6,7 @@ LL |     x = Some(Box::new(callback));\n    |\n    = help: within `fn() -> dyn ToString`, the trait `Sized` is not implemented for `dyn ToString`\n    = note: required because it appears within the type `fn() -> dyn ToString`\n-   = note: required for the cast from `fn() -> dyn ToString` to the object type `dyn Fn() -> (dyn ToString + 'static)`\n+   = note: required for the cast from `Box<fn() -> dyn ToString>` to `Box<dyn Fn() -> (dyn ToString + 'static)>`\n \n error: aborting due to previous error\n "}, {"sha": "0de3dbbb55725b80b1dfe47d843ff41dd8164177", "filename": "tests/ui/unsized/unsized-fn-param.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Funsized%2Funsized-fn-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Funsized%2Funsized-fn-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized%2Funsized-fn-param.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -5,8 +5,8 @@ LL |     foo11(\"bar\", &\"baz\");\n    |           ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-   = note: required for the cast from `str` to the object type `dyn AsRef<Path>`\n-help: consider borrowing the value, since `&str` can be coerced into `dyn AsRef<Path>`\n+   = note: required for the cast from `&'static str` to `&dyn AsRef<Path>`\n+help: consider borrowing the value, since `&&'static str` can be coerced into `&dyn AsRef<Path>`\n    |\n LL |     foo11(&\"bar\", &\"baz\");\n    |           +\n@@ -18,8 +18,8 @@ LL |     foo12(&\"bar\", \"baz\");\n    |                   ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-   = note: required for the cast from `str` to the object type `dyn AsRef<Path>`\n-help: consider borrowing the value, since `&str` can be coerced into `dyn AsRef<Path>`\n+   = note: required for the cast from `&'static str` to `&dyn AsRef<Path>`\n+help: consider borrowing the value, since `&&'static str` can be coerced into `&dyn AsRef<Path>`\n    |\n LL |     foo12(&\"bar\", &\"baz\");\n    |                   +\n@@ -31,8 +31,8 @@ LL |     foo21(\"bar\", &\"baz\");\n    |           ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-   = note: required for the cast from `str` to the object type `dyn AsRef<str>`\n-help: consider borrowing the value, since `&str` can be coerced into `dyn AsRef<str>`\n+   = note: required for the cast from `&'static str` to `&dyn AsRef<str>`\n+help: consider borrowing the value, since `&&'static str` can be coerced into `&dyn AsRef<str>`\n    |\n LL |     foo21(&\"bar\", &\"baz\");\n    |           +\n@@ -44,8 +44,8 @@ LL |     foo22(&\"bar\", \"baz\");\n    |                   ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-   = note: required for the cast from `str` to the object type `dyn AsRef<str>`\n-help: consider borrowing the value, since `&str` can be coerced into `dyn AsRef<str>`\n+   = note: required for the cast from `&'static str` to `&dyn AsRef<str>`\n+help: consider borrowing the value, since `&&'static str` can be coerced into `&dyn AsRef<str>`\n    |\n LL |     foo22(&\"bar\", &\"baz\");\n    |                   +"}, {"sha": "40a25c7df6babb9982837f8f415ce2c3eb21f451", "filename": "tests/ui/wf/wf-convert-unsafe-trait-obj-box.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -11,8 +11,7 @@ LL | trait Trait: Sized {}\n    |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `Box<S>` to implement `CoerceUnsized<Box<dyn Trait>>`\n-   = note: required by cast to type `Box<dyn Trait>`\n+   = note: required for the cast from `Box<S>` to `Box<dyn Trait>`\n \n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj-box.rs:17:15\n@@ -27,8 +26,7 @@ LL | trait Trait: Sized {}\n    |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `Box<S>` to implement `CoerceUnsized<Box<dyn Trait>>`\n-   = note: required by cast to type `Box<(dyn Trait + 'static)>`\n+   = note: required for the cast from `Box<S>` to `Box<(dyn Trait + 'static)>`\n \n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj-box.rs:15:5\n@@ -43,8 +41,7 @@ LL | trait Trait: Sized {}\n    |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `Box<S>` to implement `CoerceUnsized<Box<dyn Trait>>`\n-   = note: required by cast to type `Box<dyn Trait>`\n+   = note: required for the cast from `Box<S>` to `Box<dyn Trait>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "e2c71df2feb400934706b040d0aa54fc157e4a58", "filename": "tests/ui/wf/wf-convert-unsafe-trait-obj.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -11,8 +11,7 @@ LL | trait Trait: Sized {}\n    |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `&S` to implement `CoerceUnsized<&dyn Trait>`\n-   = note: required by cast to type `&dyn Trait`\n+   = note: required for the cast from `&S` to `&dyn Trait`\n \n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj.rs:17:17\n@@ -27,8 +26,7 @@ LL | trait Trait: Sized {}\n    |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `&S` to implement `CoerceUnsized<&dyn Trait>`\n-   = note: required by cast to type `&dyn Trait`\n+   = note: required for the cast from `&S` to `&dyn Trait`\n \n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj.rs:15:5\n@@ -43,8 +41,7 @@ LL | trait Trait: Sized {}\n    |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `&S` to implement `CoerceUnsized<&dyn Trait>`\n-   = note: required by cast to type `&dyn Trait`\n+   = note: required for the cast from `&S` to `&dyn Trait`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "66504e440600eb16154a78bb78d577034d54374d", "filename": "tests/ui/wf/wf-unsafe-trait-obj-match.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fef92ab2f287f072b66fb7b4f62c8bb4acba43/tests%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr?ref=69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "patch": "@@ -25,8 +25,7 @@ LL | trait Trait: Sized {}\n    |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `&S` to implement `CoerceUnsized<&dyn Trait>`\n-   = note: required by cast to type `&dyn Trait`\n+   = note: required for the cast from `&S` to `&dyn Trait`\n \n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-unsafe-trait-obj-match.rs:25:25\n@@ -45,8 +44,7 @@ LL | trait Trait: Sized {}\n    |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `&R` to implement `CoerceUnsized<&dyn Trait>`\n-   = note: required by cast to type `&dyn Trait`\n+   = note: required for the cast from `&R` to `&dyn Trait`\n \n error: aborting due to 3 previous errors\n "}]}