{"sha": "69b1da4d824c8ed0e2a9093f0af9c89dad33b652", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5YjFkYTRkODI0YzhlZDBlMmE5MDkzZjBhZjljODlkYWQzM2I2NTI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-05-11T02:23:35Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-05-11T06:40:42Z"}, "message": "Remove some unnecessary If arms", "tree": {"sha": "43f0ad1e67abde4fe994f25464fd367fa2ea6280", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43f0ad1e67abde4fe994f25464fd367fa2ea6280"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69b1da4d824c8ed0e2a9093f0af9c89dad33b652", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69b1da4d824c8ed0e2a9093f0af9c89dad33b652", "html_url": "https://github.com/rust-lang/rust/commit/69b1da4d824c8ed0e2a9093f0af9c89dad33b652", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69b1da4d824c8ed0e2a9093f0af9c89dad33b652/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da8b56d99ab50f628d94210225507d87a4cb0251", "url": "https://api.github.com/repos/rust-lang/rust/commits/da8b56d99ab50f628d94210225507d87a4cb0251", "html_url": "https://github.com/rust-lang/rust/commit/da8b56d99ab50f628d94210225507d87a4cb0251"}], "stats": {"total": 65, "additions": 1, "deletions": 64}, "files": [{"sha": "8e0fa1bf2e267f580c59188837cfd47ba83f5444", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/69b1da4d824c8ed0e2a9093f0af9c89dad33b652/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69b1da4d824c8ed0e2a9093f0af9c89dad33b652/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=69b1da4d824c8ed0e2a9093f0af9c89dad33b652", "patch": "@@ -74,13 +74,6 @@ impl ImplicitReturn {\n                     Self::lint(cx, expr.span, break_expr.span, \"change `break` to `return` as shown\");\n                 }\n             },\n-            ExprKind::If(.., if_expr, else_expr) => {\n-                Self::expr_match(cx, if_expr);\n-\n-                if let Some(else_expr) = else_expr {\n-                    Self::expr_match(cx, else_expr);\n-                }\n-            },\n             ExprKind::Match(.., arms, source) => {\n                 let check_all_arms = match source {\n                     MatchSource::IfLetDesugar {"}, {"sha": "c67edc00e6b368977a6a09934f8c6b0722401756", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/69b1da4d824c8ed0e2a9093f0af9c89dad33b652/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69b1da4d824c8ed0e2a9093f0af9c89dad33b652/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=69b1da4d824c8ed0e2a9093f0af9c89dad33b652", "patch": "@@ -686,14 +686,6 @@ fn never_loop_expr(expr: &Expr, main_loop_id: HirId) -> NeverLoopResult {\n         | ExprKind::Assign(ref e1, ref e2)\n         | ExprKind::AssignOp(_, ref e1, ref e2)\n         | ExprKind::Index(ref e1, ref e2) => never_loop_expr_all(&mut [&**e1, &**e2].iter().cloned(), main_loop_id),\n-        ExprKind::If(ref e, ref e2, ref e3) => {\n-            let e1 = never_loop_expr(e, main_loop_id);\n-            let e2 = never_loop_expr(e2, main_loop_id);\n-            let e3 = e3\n-                .as_ref()\n-                .map_or(NeverLoopResult::Otherwise, |e| never_loop_expr(e, main_loop_id));\n-            combine_seq(e1, combine_branches(e2, e3))\n-        },\n         ExprKind::Loop(ref b, _, _) => {\n             // Break can come from the inner loop so remove them.\n             absorb_break(&never_loop_block(b, main_loop_id))\n@@ -2204,7 +2196,7 @@ fn is_loop(expr: &Expr) -> bool {\n \n fn is_conditional(expr: &Expr) -> bool {\n     match expr.node {\n-        ExprKind::If(..) | ExprKind::Match(..) => true,\n+        ExprKind::Match(..) => true,\n         _ => false,\n     }\n }"}, {"sha": "f8cde663d899a5ad333cacf436fec833eb037f38", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69b1da4d824c8ed0e2a9093f0af9c89dad33b652/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69b1da4d824c8ed0e2a9093f0af9c89dad33b652/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=69b1da4d824c8ed0e2a9093f0af9c89dad33b652", "patch": "@@ -1266,7 +1266,6 @@ fn lint_expect_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span:\n             hir::ExprKind::Call(..)\n             | hir::ExprKind::MethodCall(..)\n             // These variants are debatable or require further examination\n-            | hir::ExprKind::If(..)\n             | hir::ExprKind::Match(..)\n             | hir::ExprKind::Block{ .. } => true,\n             _ => false,"}, {"sha": "a28e6fa88bbe718aad0bb4d0f071653284285b78", "filename": "clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69b1da4d824c8ed0e2a9093f0af9c89dad33b652/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69b1da4d824c8ed0e2a9093f0af9c89dad33b652/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=69b1da4d824c8ed0e2a9093f0af9c89dad33b652", "patch": "@@ -89,12 +89,6 @@ fn check_expression<'a, 'tcx: 'a>(\n                 (false, false)\n             }\n         },\n-        // There must be an else_arm or there will be a type error\n-        hir::ExprKind::If(_, ref if_arm, Some(ref else_arm)) => {\n-            let if_check = check_expression(cx, arg_id, if_arm);\n-            let else_check = check_expression(cx, arg_id, else_arm);\n-            (if_check.0 | else_check.0, if_check.1 | else_check.1)\n-        },\n         hir::ExprKind::Match(_, ref arms, _) => {\n             let mut found_mapping = false;\n             let mut found_filtering = false;"}, {"sha": "e71c6cc8f85929ea3877546ee39a9b3858a3a099", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/69b1da4d824c8ed0e2a9093f0af9c89dad33b652/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69b1da4d824c8ed0e2a9093f0af9c89dad33b652/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=69b1da4d824c8ed0e2a9093f0af9c89dad33b652", "patch": "@@ -296,25 +296,6 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                 self.current = cast_pat;\n                 self.visit_expr(expr);\n             },\n-            ExprKind::If(ref cond, ref then, ref opt_else) => {\n-                let cond_pat = self.next(\"cond\");\n-                let then_pat = self.next(\"then\");\n-                if let Some(ref else_) = *opt_else {\n-                    let else_pat = self.next(\"else_\");\n-                    println!(\n-                        \"If(ref {}, ref {}, Some(ref {})) = {};\",\n-                        cond_pat, then_pat, else_pat, current\n-                    );\n-                    self.current = else_pat;\n-                    self.visit_expr(else_);\n-                } else {\n-                    println!(\"If(ref {}, ref {}, None) = {};\", cond_pat, then_pat, current);\n-                }\n-                self.current = cond_pat;\n-                self.visit_expr(cond);\n-                self.current = then_pat;\n-                self.visit_expr(then);\n-            },\n             ExprKind::While(ref cond, ref body, _) => {\n                 let cond_pat = self.next(\"cond\");\n                 let body_pat = self.next(\"body\");"}, {"sha": "de12990046781950b3eb86171d18c6d5d713b46b", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/69b1da4d824c8ed0e2a9093f0af9c89dad33b652/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69b1da4d824c8ed0e2a9093f0af9c89dad33b652/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=69b1da4d824c8ed0e2a9093f0af9c89dad33b652", "patch": "@@ -114,9 +114,6 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n             (&ExprKind::Index(ref la, ref li), &ExprKind::Index(ref ra, ref ri)) => {\n                 self.eq_expr(la, ra) && self.eq_expr(li, ri)\n             },\n-            (&ExprKind::If(ref lc, ref lt, ref le), &ExprKind::If(ref rc, ref rt, ref re)) => {\n-                self.eq_expr(lc, rc) && self.eq_expr(&**lt, &**rt) && both(le, re, |l, r| self.eq_expr(l, r))\n-            },\n             (&ExprKind::Lit(ref l), &ExprKind::Lit(ref r)) => l.node == r.node,\n             (&ExprKind::Loop(ref lb, ref ll, ref lls), &ExprKind::Loop(ref rb, ref rl, ref rls)) => {\n                 lls == rls && self.eq_block(lb, rb) && both(ll, rl, |l, r| l.ident.as_str() == r.ident.as_str())\n@@ -493,15 +490,6 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n                 let c: fn(_, _, _) -> _ = ExprKind::InlineAsm;\n                 c.hash(&mut self.s);\n             },\n-            ExprKind::If(ref cond, ref t, ref e) => {\n-                let c: fn(_, _, _) -> _ = ExprKind::If;\n-                c.hash(&mut self.s);\n-                self.hash_expr(cond);\n-                self.hash_expr(&**t);\n-                if let Some(ref e) = *e {\n-                    self.hash_expr(e);\n-                }\n-            },\n             ExprKind::Lit(ref l) => {\n                 let c: fn(_) -> _ = ExprKind::Lit;\n                 c.hash(&mut self.s);"}, {"sha": "633ebb3dd4234e75fec70fd4ae77b842814a8da6", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/69b1da4d824c8ed0e2a9093f0af9c89dad33b652/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69b1da4d824c8ed0e2a9093f0af9c89dad33b652/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=69b1da4d824c8ed0e2a9093f0af9c89dad33b652", "patch": "@@ -209,15 +209,6 @@ fn print_expr(cx: &LateContext<'_, '_>, expr: &hir::Expr, indent: usize) {\n             print_expr(cx, e, indent + 1);\n             println!(\"{}target type: {:?}\", ind, target);\n         },\n-        hir::ExprKind::If(ref e, _, ref els) => {\n-            println!(\"{}If\", ind);\n-            println!(\"{}condition:\", ind);\n-            print_expr(cx, e, indent + 1);\n-            if let Some(ref els) = *els {\n-                println!(\"{}else:\", ind);\n-                print_expr(cx, els, indent + 1);\n-            }\n-        },\n         hir::ExprKind::While(ref cond, _, _) => {\n             println!(\"{}While\", ind);\n             println!(\"{}condition:\", ind);"}, {"sha": "7d029d0f61e2d5667ee9bd55316be84b4ab37ebf", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69b1da4d824c8ed0e2a9093f0af9c89dad33b652/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69b1da4d824c8ed0e2a9093f0af9c89dad33b652/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=69b1da4d824c8ed0e2a9093f0af9c89dad33b652", "patch": "@@ -94,7 +94,6 @@ impl<'a> Sugg<'a> {\n             hir::ExprKind::AddrOf(..)\n             | hir::ExprKind::Box(..)\n             | hir::ExprKind::Closure(.., _)\n-            | hir::ExprKind::If(..)\n             | hir::ExprKind::Unary(..)\n             | hir::ExprKind::Match(..) => Sugg::MaybeParen(snippet),\n             hir::ExprKind::Continue(..)"}]}