{"sha": "d7e3e5bede187d113fa01c4d8b8c16a2bd4f721c", "node_id": "C_kwDOAAsO6NoAKGQ3ZTNlNWJlZGUxODdkMTEzZmEwMWM0ZDhiOGMxNmEyYmQ0ZjcyMWM", "commit": {"author": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2023-05-06T02:23:51Z"}, "committer": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2023-05-06T02:23:51Z"}, "message": "add `DynSend / DynSync` for `CopyTaggedPtr`", "tree": {"sha": "2075a444d51a94efff3e1c74fee28f973bd49c2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2075a444d51a94efff3e1c74fee28f973bd49c2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7e3e5bede187d113fa01c4d8b8c16a2bd4f721c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7e3e5bede187d113fa01c4d8b8c16a2bd4f721c", "html_url": "https://github.com/rust-lang/rust/commit/d7e3e5bede187d113fa01c4d8b8c16a2bd4f721c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7e3e5bede187d113fa01c4d8b8c16a2bd4f721c/comments", "author": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bffccddac3470f68efe15a3e81257869be562568", "url": "https://api.github.com/repos/rust-lang/rust/commits/bffccddac3470f68efe15a3e81257869be562568", "html_url": "https://github.com/rust-lang/rust/commit/bffccddac3470f68efe15a3e81257869be562568"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "5b9b0e106d254c807a5209653756b2f04c4deda6", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7e3e5bede187d113fa01c4d8b8c16a2bd4f721c/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7e3e5bede187d113fa01c4d8b8c16a2bd4f721c/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=d7e3e5bede187d113fa01c4d8b8c16a2bd4f721c", "patch": "@@ -30,8 +30,6 @@\n #![feature(get_mut_unchecked)]\n #![feature(lint_reasons)]\n #![feature(unwrap_infallible)]\n-#![feature(const_mut_refs)]\n-#![feature(const_trait_impl)]\n #![feature(strict_provenance)]\n #![feature(ptr_alignment_type)]\n #![feature(macro_metavar_expr)]"}, {"sha": "f8c06f9a8145e6507d3b9c552d43d2e806140b93", "filename": "compiler/rustc_data_structures/src/marker.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d7e3e5bede187d113fa01c4d8b8c16a2bd4f721c/compiler%2Frustc_data_structures%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7e3e5bede187d113fa01c4d8b8c16a2bd4f721c/compiler%2Frustc_data_structures%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fmarker.rs?ref=d7e3e5bede187d113fa01c4d8b8c16a2bd4f721c", "patch": "@@ -94,6 +94,7 @@ cfg_if!(\n             [Box<T, A> where T: ?Sized + DynSend, A: std::alloc::Allocator + DynSend]\n             [crate::sync::Lock<T> where T: DynSend]\n             [crate::sync::RwLock<T> where T: DynSend]\n+            [crate::tagged_ptr::CopyTaggedPtr<P, T, CP> where P: Send + crate::tagged_ptr::Pointer, T: Send + crate::tagged_ptr::Tag, const CP: bool]\n             [rustc_arena::TypedArena<T> where T: DynSend]\n             [indexmap::IndexSet<V, S> where V: DynSend, S: DynSend]\n             [indexmap::IndexMap<K, V, S> where K: DynSend, V: DynSend, S: DynSend]\n@@ -175,6 +176,7 @@ cfg_if!(\n             [crate::sync::OneThread<T> where T]\n             [crate::sync::WorkerLocal<T> where T: DynSend]\n             [crate::intern::Interned<'a, T> where 'a, T: DynSync]\n+            [crate::tagged_ptr::CopyTaggedPtr<P, T, CP> where P: Sync + crate::tagged_ptr::Pointer, T: Sync + crate::tagged_ptr::Tag, const CP: bool]\n             [parking_lot::lock_api::Mutex<R, T> where R: DynSync, T: ?Sized + DynSend]\n             [parking_lot::lock_api::RwLock<R, T> where R: DynSync, T: ?Sized + DynSend + DynSync]\n             [indexmap::IndexSet<V, S> where V: DynSync, S: DynSync]\n@@ -218,9 +220,10 @@ unsafe impl<T: DynSend> Send for FromDyn<T> {}\n #[cfg(parallel_compiler)]\n unsafe impl<T: DynSync> Sync for FromDyn<T> {}\n \n-impl<T> const std::ops::Deref for FromDyn<T> {\n+impl<T> std::ops::Deref for FromDyn<T> {\n     type Target = T;\n \n+    #[inline(always)]\n     fn deref(&self) -> &Self::Target {\n         &self.0\n     }\n@@ -237,15 +240,17 @@ unsafe impl<T: ?Sized + Send> DynSend for IntoDynSyncSend<T> {}\n #[cfg(parallel_compiler)]\n unsafe impl<T: ?Sized + Sync> DynSync for IntoDynSyncSend<T> {}\n \n-impl<T> const std::ops::Deref for IntoDynSyncSend<T> {\n+impl<T> std::ops::Deref for IntoDynSyncSend<T> {\n     type Target = T;\n \n+    #[inline(always)]\n     fn deref(&self) -> &T {\n         &self.0\n     }\n }\n \n-impl<T> const std::ops::DerefMut for IntoDynSyncSend<T> {\n+impl<T> std::ops::DerefMut for IntoDynSyncSend<T> {\n+    #[inline(always)]\n     fn deref_mut(&mut self) -> &mut T {\n         &mut self.0\n     }"}, {"sha": "07d47cae5ee933a574f6777dac613611b479ecce", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7e3e5bede187d113fa01c4d8b8c16a2bd4f721c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7e3e5bede187d113fa01c4d8b8c16a2bd4f721c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=d7e3e5bede187d113fa01c4d8b8c16a2bd4f721c", "patch": "@@ -52,8 +52,9 @@ use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxIndexMap, FxIndexSet};\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::svh::Svh;\n-use rustc_data_structures::sync::AtomicU64;use rustc_data_structures::sync::WorkerLocal;\n-use rustc_data_structures::sync::{self, Lrc};\n+use rustc_data_structures::sync::AtomicU64;\n+use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::sync::WorkerLocal;\n use rustc_data_structures::unord::UnordSet;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;"}]}