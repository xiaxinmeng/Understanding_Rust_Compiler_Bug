{"sha": "35147d4cf342ee479d50afcb70aceab4ea506c2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MTQ3ZDRjZjM0MmVlNDc5ZDUwYWZjYjcwYWNlYWI0ZWE1MDZjMmQ=", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-02T16:03:47Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-11T10:37:16Z"}, "message": "move uninit_assumed_init to its own module", "tree": {"sha": "a4f0564543d4ecc6777d6a8b3f812b4c3ca080b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4f0564543d4ecc6777d6a8b3f812b4c3ca080b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35147d4cf342ee479d50afcb70aceab4ea506c2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35147d4cf342ee479d50afcb70aceab4ea506c2d", "html_url": "https://github.com/rust-lang/rust/commit/35147d4cf342ee479d50afcb70aceab4ea506c2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35147d4cf342ee479d50afcb70aceab4ea506c2d/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8623b331eebfa097bb33dff1df5efa324e6a780a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8623b331eebfa097bb33dff1df5efa324e6a780a", "html_url": "https://github.com/rust-lang/rust/commit/8623b331eebfa097bb33dff1df5efa324e6a780a"}], "stats": {"total": 66, "additions": 37, "deletions": 29}, "files": [{"sha": "acb8318970ec5ec69a6ccee4e4fcd5fd0ac95e3b", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 29, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/35147d4cf342ee479d50afcb70aceab4ea506c2d/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35147d4cf342ee479d50afcb70aceab4ea506c2d/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=35147d4cf342ee479d50afcb70aceab4ea506c2d", "patch": "@@ -15,6 +15,7 @@ mod option_as_ref_deref;\n mod option_map_unwrap_or;\n mod skip_while_next;\n mod suspicious_map;\n+mod uninit_assumed_init;\n mod unnecessary_filter_map;\n mod unnecessary_lazy_eval;\n mod unwrap_used;\n@@ -1719,7 +1720,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 filter_map_identity::check(cx, expr, arg_lists[0], method_spans[0]);\n             },\n             [\"count\", \"map\"] => suspicious_map::check(cx, expr),\n-            [\"assume_init\"] => lint_maybe_uninit(cx, &arg_lists[0][0], expr),\n+            [\"assume_init\"] => uninit_assumed_init::check(cx, &arg_lists[0][0], expr),\n             [\"unwrap_or\", arith @ (\"checked_add\" | \"checked_sub\" | \"checked_mul\")] => {\n                 manual_saturating_arithmetic::lint(cx, expr, &arg_lists, &arith[\"checked_\".len()..])\n             },\n@@ -3548,34 +3549,6 @@ fn lint_into_iter(cx: &LateContext<'_>, expr: &hir::Expr<'_>, self_ref_ty: Ty<'_\n     }\n }\n \n-/// lint for `MaybeUninit::uninit().assume_init()` (we already have the latter)\n-fn lint_maybe_uninit(cx: &LateContext<'_>, expr: &hir::Expr<'_>, outer: &hir::Expr<'_>) {\n-    if_chain! {\n-        if let hir::ExprKind::Call(ref callee, ref args) = expr.kind;\n-        if args.is_empty();\n-        if let hir::ExprKind::Path(ref path) = callee.kind;\n-        if match_qpath(path, &paths::MEM_MAYBEUNINIT_UNINIT);\n-        if !is_maybe_uninit_ty_valid(cx, cx.typeck_results().expr_ty_adjusted(outer));\n-        then {\n-            span_lint(\n-                cx,\n-                UNINIT_ASSUMED_INIT,\n-                outer.span,\n-                \"this call for this type may be undefined behavior\"\n-            );\n-        }\n-    }\n-}\n-\n-fn is_maybe_uninit_ty_valid(cx: &LateContext<'_>, ty: Ty<'_>) -> bool {\n-    match ty.kind() {\n-        ty::Array(ref component, _) => is_maybe_uninit_ty_valid(cx, component),\n-        ty::Tuple(ref types) => types.types().all(|ty| is_maybe_uninit_ty_valid(cx, ty)),\n-        ty::Adt(ref adt, _) => match_def_path(cx, adt.did, &paths::MEM_MAYBEUNINIT),\n-        _ => false,\n-    }\n-}\n-\n fn lint_map_collect(\n     cx: &LateContext<'_>,\n     expr: &hir::Expr<'_>,"}, {"sha": "798b66192c81829cd53afc1816f97277125ddc37", "filename": "clippy_lints/src/methods/uninit_assumed_init.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/35147d4cf342ee479d50afcb70aceab4ea506c2d/clippy_lints%2Fsrc%2Fmethods%2Funinit_assumed_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35147d4cf342ee479d50afcb70aceab4ea506c2d/clippy_lints%2Fsrc%2Fmethods%2Funinit_assumed_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funinit_assumed_init.rs?ref=35147d4cf342ee479d50afcb70aceab4ea506c2d", "patch": "@@ -0,0 +1,35 @@\n+use crate::utils::{match_def_path, match_qpath, paths, span_lint};\n+use if_chain::if_chain;\n+use rustc_hir as hir;\n+use rustc_lint::LateContext;\n+use rustc_middle::ty::{self, Ty};\n+\n+use super::UNINIT_ASSUMED_INIT;\n+\n+/// lint for `MaybeUninit::uninit().assume_init()` (we already have the latter)\n+pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, outer: &hir::Expr<'_>) {\n+    if_chain! {\n+        if let hir::ExprKind::Call(ref callee, ref args) = expr.kind;\n+        if args.is_empty();\n+        if let hir::ExprKind::Path(ref path) = callee.kind;\n+        if match_qpath(path, &paths::MEM_MAYBEUNINIT_UNINIT);\n+        if !is_maybe_uninit_ty_valid(cx, cx.typeck_results().expr_ty_adjusted(outer));\n+        then {\n+            span_lint(\n+                cx,\n+                UNINIT_ASSUMED_INIT,\n+                outer.span,\n+                \"this call for this type may be undefined behavior\"\n+            );\n+        }\n+    }\n+}\n+\n+fn is_maybe_uninit_ty_valid(cx: &LateContext<'_>, ty: Ty<'_>) -> bool {\n+    match ty.kind() {\n+        ty::Array(ref component, _) => is_maybe_uninit_ty_valid(cx, component),\n+        ty::Tuple(ref types) => types.types().all(|ty| is_maybe_uninit_ty_valid(cx, ty)),\n+        ty::Adt(ref adt, _) => match_def_path(cx, adt.did, &paths::MEM_MAYBEUNINIT),\n+        _ => false,\n+    }\n+}"}]}