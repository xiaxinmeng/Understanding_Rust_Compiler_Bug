{"sha": "4c3b1e89cff55b1f337c5c95c4988ea5a82e2441", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjM2IxZTg5Y2ZmNTViMWYzMzdjNWM5NWM0OTg4ZWE1YTgyZTI0NDE=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-18T15:43:26Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-27T19:06:35Z"}, "message": "elaborate", "tree": {"sha": "35f69c7bb7289486338b28304d7527e47e1553e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35f69c7bb7289486338b28304d7527e47e1553e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c3b1e89cff55b1f337c5c95c4988ea5a82e2441", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c3b1e89cff55b1f337c5c95c4988ea5a82e2441", "html_url": "https://github.com/rust-lang/rust/commit/4c3b1e89cff55b1f337c5c95c4988ea5a82e2441", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c3b1e89cff55b1f337c5c95c4988ea5a82e2441/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f39b0c9ab7c2c3beeb9dd3a54f51b3a5f7e21a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f39b0c9ab7c2c3beeb9dd3a54f51b3a5f7e21a0", "html_url": "https://github.com/rust-lang/rust/commit/7f39b0c9ab7c2c3beeb9dd3a54f51b3a5f7e21a0"}], "stats": {"total": 42, "additions": 23, "deletions": 19}, "files": [{"sha": "02a30195cc8e8ace6d1ad4555df9eecda1f2f810", "filename": "src/librustc_infer/traits/util.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4c3b1e89cff55b1f337c5c95c4988ea5a82e2441/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c3b1e89cff55b1f337c5c95c4988ea5a82e2441/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Futil.rs?ref=4c3b1e89cff55b1f337c5c95c4988ea5a82e2441", "patch": "@@ -151,14 +151,22 @@ impl Elaborator<'tcx> {\n \n     fn elaborate(&mut self, obligation: &PredicateObligation<'tcx>) {\n         let tcx = self.visited.tcx;\n-        match obligation.predicate.kind() {\n-            ty::PredicateKind::Trait(ref data, _) => {\n+        let pred = match obligation.predicate.kint(tcx) {\n+            // We have to be careful and rebind this whenever\n+            // dealing with a predicate further down.\n+            ty::PredicateKint::ForAll(binder) => binder.skip_binder(),\n+            pred => pred,\n+        };\n+\n+        match pred {\n+            ty::PredicateKint::ForAll(_) => bug!(\"unexpected predicate: {:?}\", pred),\n+            ty::PredicateKint::Trait(ref data, _) => {\n                 // Get predicates declared on the trait.\n                 let predicates = tcx.super_predicates_of(data.def_id());\n \n                 let obligations = predicates.predicates.iter().map(|&(pred, span)| {\n                     predicate_obligation(\n-                        pred.subst_supertrait(tcx, &data.to_poly_trait_ref()),\n+                        pred.subst_supertrait(tcx, &ty::Binder::bind(data.trait_ref)),\n                         Some(span),\n                     )\n                 });\n@@ -173,36 +181,36 @@ impl Elaborator<'tcx> {\n \n                 self.stack.extend(obligations);\n             }\n-            ty::PredicateKind::WellFormed(..) => {\n+            ty::PredicateKint::WellFormed(..) => {\n                 // Currently, we do not elaborate WF predicates,\n                 // although we easily could.\n             }\n-            ty::PredicateKind::ObjectSafe(..) => {\n+            ty::PredicateKint::ObjectSafe(..) => {\n                 // Currently, we do not elaborate object-safe\n                 // predicates.\n             }\n-            ty::PredicateKind::Subtype(..) => {\n+            ty::PredicateKint::Subtype(..) => {\n                 // Currently, we do not \"elaborate\" predicates like `X <: Y`,\n                 // though conceivably we might.\n             }\n-            ty::PredicateKind::Projection(..) => {\n+            ty::PredicateKint::Projection(..) => {\n                 // Nothing to elaborate in a projection predicate.\n             }\n-            ty::PredicateKind::ClosureKind(..) => {\n+            ty::PredicateKint::ClosureKind(..) => {\n                 // Nothing to elaborate when waiting for a closure's kind to be inferred.\n             }\n-            ty::PredicateKind::ConstEvaluatable(..) => {\n+            ty::PredicateKint::ConstEvaluatable(..) => {\n                 // Currently, we do not elaborate const-evaluatable\n                 // predicates.\n             }\n-            ty::PredicateKind::ConstEquate(..) => {\n+            ty::PredicateKint::ConstEquate(..) => {\n                 // Currently, we do not elaborate const-equate\n                 // predicates.\n             }\n-            ty::PredicateKind::RegionOutlives(..) => {\n+            ty::PredicateKint::RegionOutlives(..) => {\n                 // Nothing to elaborate from `'a: 'b`.\n             }\n-            ty::PredicateKind::TypeOutlives(ref data) => {\n+            ty::PredicateKint::TypeOutlives(ty::OutlivesPredicate(ty_max, r_min)) => {\n                 // We know that `T: 'a` for some type `T`. We can\n                 // often elaborate this. For example, if we know that\n                 // `[U]: 'a`, that implies that `U: 'a`. Similarly, if\n@@ -217,8 +225,6 @@ impl Elaborator<'tcx> {\n                 // consider this as evidence that `T: 'static`, but\n                 // I'm a bit wary of such constructions and so for now\n                 // I want to be conservative. --nmatsakis\n-                let ty_max = data.skip_binder().0;\n-                let r_min = data.skip_binder().1;\n                 if r_min.is_late_bound() {\n                     return;\n                 }"}, {"sha": "b72359129e9b19fef9850afbcf1c6e72140c0e4e", "filename": "src/librustc_trait_selection/traits/wf.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4c3b1e89cff55b1f337c5c95c4988ea5a82e2441/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c3b1e89cff55b1f337c5c95c4988ea5a82e2441/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs?ref=4c3b1e89cff55b1f337c5c95c4988ea5a82e2441", "patch": "@@ -397,7 +397,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                                 self.out.push(traits::Obligation::new(\n                                     cause,\n                                     self.param_env,\n-                                    ty::PredicateKind::WellFormed(resolved_constant.into())\n+                                    ty::PredicateKint::WellFormed(resolved_constant.into())\n                                         .to_predicate(self.tcx()),\n                                 ));\n                             }\n@@ -483,10 +483,8 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                         self.out.push(traits::Obligation::new(\n                             cause,\n                             param_env,\n-                            ty::PredicateKind::TypeOutlives(ty::Binder::dummy(\n-                                ty::OutlivesPredicate(rty, r),\n-                            ))\n-                            .to_predicate(self.tcx()),\n+                            ty::PredicateKint::TypeOutlives(ty::OutlivesPredicate(rty, r))\n+                                .to_predicate(self.tcx()),\n                         ));\n                     }\n                 }"}]}