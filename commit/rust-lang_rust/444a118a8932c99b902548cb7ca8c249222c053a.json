{"sha": "444a118a8932c99b902548cb7ca8c249222c053a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0NGExMThhODkzMmM5OWI5MDI1NDhjYjdjYThjMjQ5MjIyYzA1M2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-07T10:07:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-07T10:07:24Z"}, "message": "Auto merge of #32583 - arielb1:need-a-bound, r=nikomatsakis\n\nSuggest adding a where-clause when that can help\n\nSuggest adding a where-clause when there is an unmet trait-bound that can be satisfied if some type can implement it.\n\nr? @nikomatsakis", "tree": {"sha": "ddd961a13aa64df81b7322bd1d599cee0e118863", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddd961a13aa64df81b7322bd1d599cee0e118863"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/444a118a8932c99b902548cb7ca8c249222c053a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/444a118a8932c99b902548cb7ca8c249222c053a", "html_url": "https://github.com/rust-lang/rust/commit/444a118a8932c99b902548cb7ca8c249222c053a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/444a118a8932c99b902548cb7ca8c249222c053a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "455fa01abcc60be6393ca9045d49e6f895b88c3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/455fa01abcc60be6393ca9045d49e6f895b88c3c", "html_url": "https://github.com/rust-lang/rust/commit/455fa01abcc60be6393ca9045d49e6f895b88c3c"}, {"sha": "0ac5e48069bcd2e54fa72086d0a9a206cf1a7bcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ac5e48069bcd2e54fa72086d0a9a206cf1a7bcf", "html_url": "https://github.com/rust-lang/rust/commit/0ac5e48069bcd2e54fa72086d0a9a206cf1a7bcf"}], "stats": {"total": 1179, "additions": 656, "deletions": 523}, "files": [{"sha": "a8135ad384932bbf88916b454380825bb301ecf0", "filename": "src/doc/book/closures.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Fdoc%2Fbook%2Fclosures.md", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Fdoc%2Fbook%2Fclosures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fclosures.md?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -371,14 +371,13 @@ assert_eq!(6, answer);\n This gives us these long, related errors:\n \n ```text\n-error: the trait `core::marker::Sized` is not implemented for the type\n-`core::ops::Fn(i32) -> i32` [E0277]\n+error: the trait bound `core::ops::Fn(i32) -> i32 : core::marker::Sized` is not satisfied [E0277]\n fn factory() -> (Fn(i32) -> i32) {\n                 ^~~~~~~~~~~~~~~~\n note: `core::ops::Fn(i32) -> i32` does not have a constant size known at compile-time\n fn factory() -> (Fn(i32) -> i32) {\n                 ^~~~~~~~~~~~~~~~\n-error: the trait `core::marker::Sized` is not implemented for the type `core::ops::Fn(i32) -> i32` [E0277]\n+error: the trait bound `core::ops::Fn(i32) -> i32 : core::marker::Sized` is not satisfied [E0277]\n let f = factory();\n     ^\n note: `core::ops::Fn(i32) -> i32` does not have a constant size known at compile-time"}, {"sha": "ba4496b93f3a18be9a7fbf86a7b23a075a75b236", "filename": "src/doc/book/concurrency.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Fdoc%2Fbook%2Fconcurrency.md", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Fdoc%2Fbook%2Fconcurrency.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fconcurrency.md?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -234,8 +234,8 @@ fn main() {\n This won't work, however, and will give us the error:\n \n ```text\n-13:9: 13:22 error: the trait `core::marker::Send` is not\n-            implemented for the type `alloc::rc::Rc<collections::vec::Vec<i32>>`\n+13:9: 13:22 error: the trait bound `alloc::rc::Rc<collections::vec::Vec<i32>> : core::marker::Send`\n+            is not satisfied\n ...\n 13:9: 13:22 note: `alloc::rc::Rc<collections::vec::Vec<i32>>`\n             cannot be sent between threads safely"}, {"sha": "b3b41979245681e2408a3626c0354b39e4f4fb42", "filename": "src/doc/book/traits.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Fdoc%2Fbook%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Fdoc%2Fbook%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ftraits.md?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -154,7 +154,7 @@ print_area(5);\n We get a compile-time error:\n \n ```text\n-error: the trait `HasArea` is not implemented for the type `_` [E0277]\n+error: the trait bound `_ : HasArea` is not satisfied [E0277]\n ```\n \n ## Trait bounds on generic structs\n@@ -496,7 +496,7 @@ impl FooBar for Baz {\n If we forget to implement `Foo`, Rust will tell us:\n \n ```text\n-error: the trait `main::Foo` is not implemented for the type `main::Baz` [E0277]\n+error: the trait bound `main::Baz : main::Foo` is not satisfied [E0277]\n ```\n \n # Deriving"}, {"sha": "75e961e4c4a80504d6c2fefc27db9ebd6025d39e", "filename": "src/doc/book/vectors.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Fdoc%2Fbook%2Fvectors.md", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Fdoc%2Fbook%2Fvectors.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fvectors.md?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -56,8 +56,8 @@ v[j];\n Indexing with a non-`usize` type gives an error that looks like this:\n \n ```text\n-error: the trait `core::ops::Index<i32>` is not implemented for the type\n-`collections::vec::Vec<_>` [E0277]\n+error: the trait bound `collections::vec::Vec<_> : core::ops::Index<i32>`\n+is not satisfied [E0277]\n v[j];\n ^~~~\n note: the type `collections::vec::Vec<_>` cannot be indexed by `i32`"}, {"sha": "6a9ebd6edf8fbc7f53968c25047ce266d719bb0a", "filename": "src/doc/nomicon/coercions.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Fdoc%2Fnomicon%2Fcoercions.md", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Fdoc%2Fnomicon%2Fcoercions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fcoercions.md?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -64,7 +64,7 @@ fn main() {\n ```\n \n ```text\n-<anon>:10:5: 10:8 error: the trait `Trait` is not implemented for the type `&mut i32` [E0277]\n+<anon>:10:5: 10:8 error: the trait bound `&mut i32 : Trait` is not satisfied [E0277]\n <anon>:10     foo(t);\n               ^~~\n ```"}, {"sha": "4abb1c8b98af68c0208f27627016dfbc1ed905cd", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -1006,8 +1006,7 @@ fn some_func<T: Foo>(foo: T) {\n fn main() {\n     // we now call the method with the i32 type, which doesn't implement\n     // the Foo trait\n-    some_func(5i32); // error: the trait `Foo` is not implemented for the\n-                     //        type `i32`\n+    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n }\n ```\n "}, {"sha": "286733c7c26a369cceabb21999cbfcdd415d2322", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 134, "deletions": 56, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -13,10 +13,12 @@ use super::{\n     FulfillmentErrorCode,\n     MismatchedProjectionTypes,\n     Obligation,\n+    ObligationCause,\n     ObligationCauseCode,\n     OutputTypeParameterMismatch,\n     TraitNotObjectSafe,\n     PredicateObligation,\n+    SelectionContext,\n     SelectionError,\n     ObjectSafetyViolation,\n     MethodViolationCode,\n@@ -26,8 +28,9 @@ use super::{\n use fmt_macros::{Parser, Piece, Position};\n use hir::def_id::DefId;\n use infer::InferCtxt;\n-use ty::{self, ToPredicate, ToPolyTraitRef, TraitRef, Ty, TyCtxt, TypeFoldable};\n+use ty::{self, ToPredicate, ToPolyTraitRef, Ty, TyCtxt};\n use ty::fast_reject;\n+use ty::fold::{TypeFoldable, TypeFolder};\n use util::nodemap::{FnvHashMap, FnvHashSet};\n \n use std::cmp;\n@@ -90,12 +93,7 @@ pub fn report_projection_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n     let predicate =\n         infcx.resolve_type_vars_if_possible(&obligation.predicate);\n \n-    // The TyError created by normalize_to_error can end up being unified\n-    // into all obligations: for example, if our obligation is something\n-    // like `$X = <() as Foo<$X>>::Out` and () does not implement Foo<_>,\n-    // then $X will be unified with TyError, but the error still needs to be\n-    // reported.\n-    if !infcx.tcx.sess.has_errors() || !predicate.references_error() {\n+    if !predicate.references_error() {\n         let mut err = struct_span_err!(infcx.tcx.sess, obligation.cause.span, E0271,\n             \"type mismatch resolving `{}`: {}\",\n             predicate,\n@@ -105,9 +103,10 @@ pub fn report_projection_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n     }\n }\n \n-fn report_on_unimplemented<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n-                                     trait_ref: &TraitRef<'tcx>,\n-                                     span: Span) -> Option<String> {\n+fn on_unimplemented_note<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n+                                   trait_ref: ty::PolyTraitRef<'tcx>,\n+                                   span: Span) -> Option<String> {\n+    let trait_ref = trait_ref.skip_binder();\n     let def_id = trait_ref.def_id;\n     let mut report = None;\n     for item in infcx.tcx.get_attrs(def_id).iter() {\n@@ -175,6 +174,53 @@ fn report_on_unimplemented<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n     report\n }\n \n+fn find_similar_impl_candidates<'a, 'tcx>(\n+    infcx: &InferCtxt<'a, 'tcx>,\n+    trait_ref: ty::PolyTraitRef<'tcx>)\n+    -> Vec<ty::TraitRef<'tcx>>\n+{\n+    let simp = fast_reject::simplify_type(infcx.tcx,\n+                                          trait_ref.skip_binder().self_ty(),\n+                                          true);\n+    let mut impl_candidates = Vec::new();\n+    let trait_def = infcx.tcx.lookup_trait_def(trait_ref.def_id());\n+\n+    match simp {\n+        Some(simp) => trait_def.for_each_impl(infcx.tcx, |def_id| {\n+            let imp = infcx.tcx.impl_trait_ref(def_id).unwrap();\n+            let imp_simp = fast_reject::simplify_type(infcx.tcx,\n+                                                      imp.self_ty(),\n+                                                      true);\n+            if let Some(imp_simp) = imp_simp {\n+                if simp != imp_simp {\n+                    return;\n+                }\n+            }\n+            impl_candidates.push(imp);\n+        }),\n+        None => trait_def.for_each_impl(infcx.tcx, |def_id| {\n+            impl_candidates.push(\n+                infcx.tcx.impl_trait_ref(def_id).unwrap());\n+        })\n+    };\n+    impl_candidates\n+}\n+\n+fn report_similar_impl_candidates(span: Span,\n+                                  err: &mut DiagnosticBuilder,\n+                                  impl_candidates: &[ty::TraitRef])\n+{\n+    err.fileline_help(span, &format!(\"the following implementations were found:\"));\n+\n+    let end = cmp::min(4, impl_candidates.len());\n+    for candidate in &impl_candidates[0..end] {\n+        err.fileline_help(span, &format!(\"  {:?}\", candidate));\n+    }\n+    if impl_candidates.len() > 4 {\n+        err.fileline_help(span, &format!(\"and {} others\", impl_candidates.len()-4));\n+    }\n+}\n+\n /// Reports that an overflow has occurred and halts compilation. We\n /// halt compilation unconditionally because it is important that\n /// overflows never be masked -- they basically represent computations\n@@ -362,56 +408,39 @@ pub fn report_selection_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                             let trait_ref = trait_predicate.to_poly_trait_ref();\n                             let mut err = struct_span_err!(\n                                 infcx.tcx.sess, obligation.cause.span, E0277,\n-                                \"the trait `{}` is not implemented for the type `{}`\",\n-                                trait_ref, trait_ref.self_ty());\n-\n-                            // Check if it has a custom \"#[rustc_on_unimplemented]\"\n-                            // error message, report with that message if it does\n-                            let custom_note = report_on_unimplemented(infcx, &trait_ref.0,\n-                                                                      obligation.cause.span);\n-                            if let Some(s) = custom_note {\n+                                \"the trait bound `{}` is not satisfied\",\n+                                trait_ref.to_predicate());\n+\n+                            // Try to report a help message\n+\n+                            if !trait_ref.has_infer_types() &&\n+                                predicate_can_apply(infcx, trait_ref)\n+                            {\n+                                // If a where-clause may be useful, remind the\n+                                // user that they can add it.\n+                                //\n+                                // don't display an on-unimplemented note, as\n+                                // these notes will often be of the form\n+                                //     \"the type `T` can't be frobnicated\"\n+                                // which is somewhat confusing.\n+                                err.fileline_help(obligation.cause.span, &format!(\n+                                    \"consider adding a `where {}` bound\",\n+                                    trait_ref.to_predicate()\n+                                    ));\n+                            } else if let Some(s) = on_unimplemented_note(infcx, trait_ref,\n+                                                                          obligation.cause.span) {\n+                                // Otherwise, if there is an on-unimplemented note,\n+                                // display it.\n                                 err.fileline_note(obligation.cause.span, &s);\n                             } else {\n-                                let simp = fast_reject::simplify_type(infcx.tcx,\n-                                                                      trait_ref.self_ty(),\n-                                                                      true);\n-                                let mut impl_candidates = Vec::new();\n-                                let trait_def = infcx.tcx.lookup_trait_def(trait_ref.def_id());\n-\n-                                match simp {\n-                                    Some(simp) => trait_def.for_each_impl(infcx.tcx, |def_id| {\n-                                        let imp = infcx.tcx.impl_trait_ref(def_id).unwrap();\n-                                        let imp_simp = fast_reject::simplify_type(infcx.tcx,\n-                                                                                  imp.self_ty(),\n-                                                                                  true);\n-                                        if let Some(imp_simp) = imp_simp {\n-                                            if simp != imp_simp {\n-                                                return;\n-                                            }\n-                                        }\n-                                        impl_candidates.push(imp);\n-                                    }),\n-                                    None => trait_def.for_each_impl(infcx.tcx, |def_id| {\n-                                        impl_candidates.push(\n-                                            infcx.tcx.impl_trait_ref(def_id).unwrap());\n-                                    })\n-                                };\n+                                // If we can't show anything useful, try to find\n+                                // similar impls.\n \n+                                let impl_candidates =\n+                                    find_similar_impl_candidates(infcx, trait_ref);\n                                 if impl_candidates.len() > 0 {\n-                                    err.fileline_help(\n-                                        obligation.cause.span,\n-                                        &format!(\"the following implementations were found:\"));\n-\n-                                    let end = cmp::min(4, impl_candidates.len());\n-                                    for candidate in &impl_candidates[0..end] {\n-                                        err.fileline_help(obligation.cause.span,\n-                                                          &format!(\"  {:?}\", candidate));\n-                                    }\n-                                    if impl_candidates.len() > 4 {\n-                                        err.fileline_help(obligation.cause.span,\n-                                                          &format!(\"and {} others\",\n-                                                                   impl_candidates.len()-4));\n-                                    }\n+                                    report_similar_impl_candidates(obligation.cause.span,\n+                                                                   &mut err, &impl_candidates);\n                                 }\n                             }\n                             note_obligation_cause(infcx, &mut err, obligation);\n@@ -649,6 +678,55 @@ pub fn maybe_report_ambiguity<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n     }\n }\n \n+/// Returns whether the trait predicate may apply for *some* assignment\n+/// to the type parameters.\n+fn predicate_can_apply<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n+                                 pred: ty::PolyTraitRef<'tcx>)\n+                                 -> bool\n+{\n+    struct ParamToVarFolder<'a, 'tcx: 'a> {\n+        infcx: &'a InferCtxt<'a, 'tcx>,\n+        var_map: FnvHashMap<Ty<'tcx>, Ty<'tcx>>\n+    }\n+\n+    impl<'a, 'tcx> TypeFolder<'tcx> for ParamToVarFolder<'a, 'tcx>\n+    {\n+        fn tcx(&self) -> &TyCtxt<'tcx> { self.infcx.tcx }\n+\n+        fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n+            if let ty::TyParam(..) = ty.sty {\n+                let infcx = self.infcx;\n+                self.var_map.entry(ty).or_insert_with(|| infcx.next_ty_var())\n+            } else {\n+                ty.super_fold_with(self)\n+            }\n+        }\n+    }\n+\n+    infcx.probe(|_| {\n+        let mut selcx = SelectionContext::new(infcx);\n+\n+        let cleaned_pred = pred.fold_with(&mut ParamToVarFolder {\n+            infcx: infcx,\n+            var_map: FnvHashMap()\n+        });\n+\n+        let cleaned_pred = super::project::normalize(\n+            &mut selcx,\n+            ObligationCause::dummy(),\n+            &cleaned_pred\n+        ).value;\n+\n+        let obligation = Obligation::new(\n+            ObligationCause::dummy(),\n+            cleaned_pred.to_predicate()\n+        );\n+\n+        selcx.evaluate_obligation(&obligation)\n+    })\n+}\n+\n+\n fn need_type_info<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                             span: Span,\n                             ty: Ty<'tcx>)"}, {"sha": "2173b919d1336ed53badd81056b7590bb00223bf", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 103, "deletions": 91, "changes": 194, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -19,6 +19,7 @@ use ty::TyClosure;\n use ty::{TyBox, TyTrait, TyInt, TyUint, TyInfer};\n use ty::{self, Ty, TyCtxt, TypeFoldable};\n \n+use std::cell::Cell;\n use std::fmt;\n use syntax::abi::Abi;\n use syntax::parse::token;\n@@ -67,6 +68,45 @@ pub enum Ns {\n     Value\n }\n \n+fn number_of_supplied_defaults<'tcx, GG>(tcx: &ty::TyCtxt<'tcx>,\n+                                         substs: &subst::Substs,\n+                                         space: subst::ParamSpace,\n+                                         get_generics: GG)\n+                                         -> usize\n+    where GG: FnOnce(&TyCtxt<'tcx>) -> ty::Generics<'tcx>\n+{\n+    let generics = get_generics(tcx);\n+\n+    let has_self = substs.self_ty().is_some();\n+    let ty_params = generics.types.get_slice(space);\n+    let tps = substs.types.get_slice(space);\n+    if ty_params.last().map_or(false, |def| def.default.is_some()) {\n+        let substs = tcx.lift(&substs);\n+        ty_params.iter().zip(tps).rev().take_while(|&(def, &actual)| {\n+            match def.default {\n+                Some(default) => {\n+                    if !has_self && default.has_self_ty() {\n+                        // In an object type, there is no `Self`, and\n+                        // thus if the default value references Self,\n+                        // the user will be required to give an\n+                        // explicit value. We can't even do the\n+                        // substitution below to check without causing\n+                        // an ICE. (#18956).\n+                        false\n+                    } else {\n+                        let default = tcx.lift(&default);\n+                        substs.and_then(|substs| default.subst(tcx, substs))\n+                            == Some(actual)\n+                    }\n+                }\n+                None => false\n+            }\n+        }).count()\n+    } else {\n+        0\n+    }\n+}\n+\n pub fn parameterized<GG>(f: &mut fmt::Formatter,\n                          substs: &subst::Substs,\n                          did: DefId,\n@@ -80,8 +120,8 @@ pub fn parameterized<GG>(f: &mut fmt::Formatter,\n         write!(f, \"<{} as \", self_ty)?;\n     }\n \n-    let (fn_trait_kind, verbose, last_name) = ty::tls::with(|tcx| {\n-        let (did, last_name) = if ns == Ns::Value {\n+    let (fn_trait_kind, verbose, item_name) = ty::tls::with(|tcx| {\n+        let (did, item_name) = if ns == Ns::Value {\n             // Try to get the impl/trait parent, if this is an\n             // associated value item (method or constant).\n             tcx.trait_of_item(did).or_else(|| tcx.impl_of_method(did))\n@@ -90,97 +130,64 @@ pub fn parameterized<GG>(f: &mut fmt::Formatter,\n             (did, None)\n         };\n         write!(f, \"{}\", tcx.item_path_str(did))?;\n-        Ok((tcx.lang_items.fn_trait_kind(did), tcx.sess.verbose(), last_name))\n+        Ok((tcx.lang_items.fn_trait_kind(did), tcx.sess.verbose(), item_name))\n     })?;\n \n-    let mut empty = true;\n-    let mut start_or_continue = |f: &mut fmt::Formatter, start: &str, cont: &str| {\n-        if empty {\n-            empty = false;\n-            write!(f, \"{}\", start)\n-        } else {\n-            write!(f, \"{}\", cont)\n-        }\n-    };\n-\n-    if verbose {\n-        for region in &substs.regions {\n-            start_or_continue(f, \"<\", \", \")?;\n-            write!(f, \"{:?}\", region)?;\n-        }\n-        for &ty in &substs.types {\n-            start_or_continue(f, \"<\", \", \")?;\n-            write!(f, \"{}\", ty)?;\n-        }\n-        for projection in projections {\n-            start_or_continue(f, \"<\", \", \")?;\n-            write!(f, \"{}={}\",\n-                   projection.projection_ty.item_name,\n-                   projection.ty)?;\n-        }\n-        return start_or_continue(f, \"\", \">\");\n-    }\n-\n-    if fn_trait_kind.is_some() && projections.len() == 1 {\n+    if !verbose && fn_trait_kind.is_some() && projections.len() == 1 {\n         let projection_ty = projections[0].ty;\n         if let TyTuple(ref args) = substs.types.get_slice(subst::TypeSpace)[0].sty {\n             return fn_sig(f, args, false, ty::FnConverging(projection_ty));\n         }\n     }\n \n-    for &r in &substs.regions {\n-        start_or_continue(f, \"<\", \", \")?;\n-        let s = r.to_string();\n-        if s.is_empty() {\n-            // This happens when the value of the region\n-            // parameter is not easily serialized. This may be\n-            // because the user omitted it in the first place,\n-            // or because it refers to some block in the code,\n-            // etc. I'm not sure how best to serialize this.\n-            write!(f, \"'_\")?;\n+    let empty = Cell::new(true);\n+    let start_or_continue = |f: &mut fmt::Formatter, start: &str, cont: &str| {\n+        if empty.get() {\n+            empty.set(false);\n+            write!(f, \"{}\", start)\n         } else {\n-            write!(f, \"{}\", s)?;\n+            write!(f, \"{}\", cont)\n         }\n+    };\n+    let print_region = |f: &mut fmt::Formatter, region: &ty::Region| -> _ {\n+        if verbose {\n+            write!(f, \"{:?}\", region)\n+        } else {\n+            let s = region.to_string();\n+            if s.is_empty() {\n+                // This happens when the value of the region\n+                // parameter is not easily serialized. This may be\n+                // because the user omitted it in the first place,\n+                // or because it refers to some block in the code,\n+                // etc. I'm not sure how best to serialize this.\n+                write!(f, \"'_\")\n+            } else {\n+                write!(f, \"{}\", s)\n+            }\n+        }\n+    };\n+\n+    for region in substs.regions.get_slice(subst::TypeSpace) {\n+        start_or_continue(f, \"<\", \", \")?;\n+        print_region(f, region)?;\n     }\n \n-    // It is important to execute this conditionally, only if -Z\n-    // verbose is false. Otherwise, debug logs can sometimes cause\n-    // ICEs trying to fetch the generics early in the pipeline. This\n-    // is kind of a hacky workaround in that -Z verbose is required to\n-    // avoid those ICEs.\n+    let num_supplied_defaults = if verbose {\n+        0\n+    } else {\n+        // It is important to execute this conditionally, only if -Z\n+        // verbose is false. Otherwise, debug logs can sometimes cause\n+        // ICEs trying to fetch the generics early in the pipeline. This\n+        // is kind of a hacky workaround in that -Z verbose is required to\n+        // avoid those ICEs.\n+        ty::tls::with(|tcx| {\n+            number_of_supplied_defaults(tcx, substs, subst::TypeSpace, get_generics)\n+        })\n+    };\n+\n     let tps = substs.types.get_slice(subst::TypeSpace);\n-    let num_defaults = ty::tls::with(|tcx| {\n-        let generics = get_generics(tcx);\n-\n-        let has_self = substs.self_ty().is_some();\n-        let ty_params = generics.types.get_slice(subst::TypeSpace);\n-        if ty_params.last().map_or(false, |def| def.default.is_some()) {\n-            let substs = tcx.lift(&substs);\n-            ty_params.iter().zip(tps).rev().take_while(|&(def, &actual)| {\n-                match def.default {\n-                    Some(default) => {\n-                        if !has_self && default.has_self_ty() {\n-                            // In an object type, there is no `Self`, and\n-                            // thus if the default value references Self,\n-                            // the user will be required to give an\n-                            // explicit value. We can't even do the\n-                            // substitution below to check without causing\n-                            // an ICE. (#18956).\n-                            false\n-                        } else {\n-                            let default = tcx.lift(&default);\n-                            substs.and_then(|substs| default.subst(tcx, substs)) == Some(actual)\n-                        }\n-                    }\n-                    None => false\n-                }\n-            }).count()\n-        } else {\n-            0\n-        }\n-    });\n \n-    for &ty in &tps[..tps.len() - num_defaults] {\n+    for &ty in &tps[..tps.len() - num_supplied_defaults] {\n         start_or_continue(f, \"<\", \", \")?;\n         write!(f, \"{}\", ty)?;\n     }\n@@ -196,21 +203,28 @@ pub fn parameterized<GG>(f: &mut fmt::Formatter,\n \n     // For values, also print their name and type parameters.\n     if ns == Ns::Value {\n+        empty.set(true);\n+\n         if substs.self_ty().is_some() {\n             write!(f, \">\")?;\n         }\n \n-        if let Some(name) = last_name {\n-            write!(f, \"::{}\", name)?;\n+        if let Some(item_name) = item_name {\n+            write!(f, \"::{}\", item_name)?;\n         }\n-        let tps = substs.types.get_slice(subst::FnSpace);\n-        if !tps.is_empty() {\n-            write!(f, \"::<{}\", tps[0])?;\n-            for ty in &tps[1..] {\n-                write!(f, \", {}\", ty)?;\n-            }\n-            write!(f, \">\")?;\n+\n+        for region in substs.regions.get_slice(subst::FnSpace) {\n+            start_or_continue(f, \"::<\", \", \")?;\n+            print_region(f, region)?;\n+        }\n+\n+        // FIXME: consider being smart with defaults here too\n+        for ty in substs.types.get_slice(subst::FnSpace) {\n+            start_or_continue(f, \"::<\", \", \")?;\n+            write!(f, \"{}\", ty)?;\n         }\n+\n+        start_or_continue(f, \"\", \">\")?;\n     }\n \n     Ok(())\n@@ -997,9 +1011,7 @@ impl<'tcx> fmt::Debug for ty::TraitPredicate<'tcx> {\n \n impl<'tcx> fmt::Display for ty::TraitPredicate<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"{} : {}\",\n-               self.trait_ref.self_ty(),\n-               self.trait_ref)\n+        write!(f, \"{}: {}\", self.trait_ref.self_ty(), self.trait_ref)\n     }\n }\n "}, {"sha": "48bfa84fa8666cb6a5e29db6c3c5d2d18b1554b0", "filename": "src/test/compile-fail/associated-types-ICE-when-projecting-out-of-err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -31,5 +31,5 @@ trait Add<RHS=Self> {\n fn ice<A>(a: A) {\n     let r = loop {};\n     r = r + a;\n-    //~^ ERROR not implemented\n+    //~^ ERROR E0277\n }"}, {"sha": "cd21fb949cb84190aa147147adff53868501b9c0", "filename": "src/test/compile-fail/associated-types-bound-failure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fassociated-types-bound-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fassociated-types-bound-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-bound-failure.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -24,7 +24,7 @@ pub trait GetToInt\n fn foo<G>(g: G) -> isize\n     where G : GetToInt\n {\n-    ToInt::to_int(&g.get()) //~ ERROR not implemented\n+    ToInt::to_int(&g.get()) //~ ERROR E0277\n }\n \n fn bar<G : GetToInt>(g: G) -> isize"}, {"sha": "a6fcb9cff13ea58ed40f8ed2b575d952cd3d7730", "filename": "src/test/compile-fail/associated-types-for-unimpl-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fassociated-types-for-unimpl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fassociated-types-for-unimpl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-for-unimpl-trait.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -15,7 +15,7 @@ trait Get {\n \n trait Other {\n     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n-    //~^ ERROR the trait `Get` is not implemented for the type `Self`\n+    //~^ ERROR the trait bound `Self: Get` is not satisfied\n }\n \n fn main() {"}, {"sha": "83726a1676d261911166fe0b541e9a515cdf4e54", "filename": "src/test/compile-fail/associated-types-invalid-trait-ref-issue-18865.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fassociated-types-invalid-trait-ref-issue-18865.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fassociated-types-invalid-trait-ref-issue-18865.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-invalid-trait-ref-issue-18865.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -18,7 +18,7 @@ trait Foo<T> {\n \n fn f<T:Foo<isize>>(t: &T) {\n     let u: <T as Foo<usize>>::Bar = t.get_bar();\n-    //~^ ERROR the trait `Foo<usize>` is not implemented for the type `T`\n+    //~^ ERROR the trait bound `T: Foo<usize>` is not satisfied\n }\n \n fn main() { }"}, {"sha": "baf56ffec86921cb7a78fb6f7407cae57b3c5bdc", "filename": "src/test/compile-fail/associated-types-no-suitable-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-bound.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -19,7 +19,7 @@ struct Struct {\n \n impl Struct {\n     fn uhoh<T>(foo: <T as Get>::Value) {}\n-    //~^ ERROR the trait `Get` is not implemented for the type `T`\n+    //~^ ERROR the trait bound `T: Get` is not satisfied\n }\n \n fn main() {"}, {"sha": "e0f0f3c47ae5ec312ecb2799e65716ca88623b9a", "filename": "src/test/compile-fail/associated-types-no-suitable-supertrait-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait-2.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -25,7 +25,7 @@ trait Get {\n \n trait Other {\n     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n-    //~^ ERROR the trait `Get` is not implemented for the type `Self`\n+    //~^ ERROR the trait bound `Self: Get` is not satisfied\n }\n \n fn main() { }"}, {"sha": "ec38595e8fe06fa6e15fe6229270e8bc45b204a5", "filename": "src/test/compile-fail/associated-types-no-suitable-supertrait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -25,12 +25,12 @@ trait Get {\n \n trait Other {\n     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n-    //~^ ERROR the trait `Get` is not implemented for the type `Self`\n+    //~^ ERROR the trait bound `Self: Get` is not satisfied\n }\n \n impl<T:Get> Other for T {\n     fn uhoh<U:Get>(&self, foo: U, bar: <(T, U) as Get>::Value) {}\n-    //~^ ERROR the trait `Get` is not implemented for the type `(T, U)`\n+    //~^ ERROR the trait bound `(T, U): Get` is not satisfied\n }\n \n fn main() { }"}, {"sha": "0c077e37e43bebe23675326ecb13a34160579db6", "filename": "src/test/compile-fail/associated-types-path-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -38,12 +38,12 @@ pub fn f1_int_uint() {\n \n pub fn f1_uint_uint() {\n     f1(2u32, 4u32);\n-    //~^ ERROR the trait `Foo` is not implemented\n+    //~^ ERROR `u32: Foo` is not satisfied\n }\n \n pub fn f1_uint_int() {\n     f1(2u32, 4i32);\n-    //~^ ERROR the trait `Foo` is not implemented\n+    //~^ ERROR `u32: Foo` is not satisfied\n }\n \n pub fn f2_int() {"}, {"sha": "f1827022964169293e55e73260846c06158fca5e", "filename": "src/test/compile-fail/associated-types-unsized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fassociated-types-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fassociated-types-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-unsized.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -14,7 +14,7 @@ trait Get {\n }\n \n fn foo<T:Get>(t: T) {\n-    let x = t.get(); //~ ERROR the trait `std::marker::Sized` is not implemented\n+    let x = t.get(); //~ ERROR `<T as Get>::Value: std::marker::Sized` is not\n }\n \n fn main() {"}, {"sha": "5be90f05018331389eddcbee6a33e2a9dbfa9061", "filename": "src/test/compile-fail/bad-method-typaram-kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn foo<T:'static>() {\n-    1.bar::<T>(); //~ ERROR `std::marker::Send` is not implemented\n+    1.bar::<T>(); //~ ERROR `T: std::marker::Send` is not satisfied\n }\n \n trait bar {"}, {"sha": "f62404e60e69e55d7dad756cabd9d2e620e34999", "filename": "src/test/compile-fail/bad-sized.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -12,7 +12,7 @@ trait Trait {}\n \n pub fn main() {\n     let x: Vec<Trait + Sized> = Vec::new();\n-    //~^ ERROR the trait `std::marker::Sized` is not implemented\n-    //~| ERROR the trait `std::marker::Sized` is not implemented\n-    //~| ERROR the trait `std::marker::Sized` is not implemented\n+    //~^ ERROR `Trait + Sized: std::marker::Sized` is not satisfied\n+    //~| ERROR `Trait + Sized: std::marker::Sized` is not satisfied\n+    //~| ERROR `Trait + Sized: std::marker::Sized` is not satisfied\n }"}, {"sha": "8d5d8e8dc9b7dbec63d832211807dd4480f821bb", "filename": "src/test/compile-fail/builtin-superkinds-double-superkind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-double-superkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-double-superkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-double-superkind.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -13,9 +13,9 @@\n \n trait Foo : Send+Sync { }\n \n-impl <T: Sync+'static> Foo for (T,) { } //~ ERROR the trait `std::marker::Send` is not implemented\n+impl <T: Sync+'static> Foo for (T,) { } //~ ERROR `T: std::marker::Send` is not satisfied\n \n-impl <T: Send> Foo for (T,T) { } //~ ERROR the trait `std::marker::Sync` is not implemented\n+impl <T: Send> Foo for (T,T) { } //~ ERROR `T: std::marker::Sync` is not satisfied\n \n impl <T: Send+Sync> Foo for (T,T,T) { } // (ok)\n "}, {"sha": "de2084c4e8187baa3d52ae9dc0323d8c128ba662", "filename": "src/test/compile-fail/builtin-superkinds-in-metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-in-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-in-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-in-metadata.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -22,6 +22,6 @@ struct X<T>(T);\n impl <T:Sync> RequiresShare for X<T> { }\n \n impl <T:Sync+'static> RequiresRequiresShareAndSend for X<T> { }\n-//~^ ERROR the trait `std::marker::Send` is not implemented\n+//~^ ERROR `T: std::marker::Send` is not satisfied\n \n fn main() { }"}, {"sha": "6dc5f39cb30dfa05a8cc741781deed0fd0bffefe", "filename": "src/test/compile-fail/builtin-superkinds-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-simple.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -14,6 +14,6 @@\n trait Foo : Send { }\n \n impl Foo for std::rc::Rc<i8> { }\n-//~^ ERROR the trait `std::marker::Send` is not implemented\n+//~^ ERROR `std::rc::Rc<i8>: std::marker::Send` is not satisfied\n \n fn main() { }"}, {"sha": "d4bb8de13d056fc84ff13e5eb52853f66520524b", "filename": "src/test/compile-fail/builtin-superkinds-typaram-not-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-typaram-not-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-typaram-not-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-typaram-not-send.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -12,6 +12,6 @@\n \n trait Foo : Send { }\n \n-impl <T: Sync+'static> Foo for T { } //~ ERROR the trait `std::marker::Send` is not implemented\n+impl <T: Sync+'static> Foo for T { } //~ ERROR `T: std::marker::Send` is not satisfied\n \n fn main() { }"}, {"sha": "dcd49e34bb26c9f0a7678be2871f27a502cba55f", "filename": "src/test/compile-fail/cast-rfc0401.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -91,7 +91,7 @@ fn main()\n     let _ = 42usize as *const [u8]; //~ ERROR casting\n     let _ = v as *const [u8]; //~ ERROR cannot cast\n     let _ = fat_v as *const Foo;\n-    //~^ ERROR `std::marker::Sized` is not implemented for the type `[u8]`\n+    //~^ ERROR the trait bound `[u8]: std::marker::Sized` is not satisfied\n     //~^^ HELP run `rustc --explain E0277` to see a detailed explanation\n     //~^^^ NOTE `[u8]` does not have a constant size known at compile-time\n     //~^^^^ NOTE required for the cast to the object type `Foo`\n@@ -106,7 +106,7 @@ fn main()\n \n     let a : *const str = \"hello\";\n     let _ = a as *const Foo;\n-    //~^ ERROR `std::marker::Sized` is not implemented for the type `str`\n+    //~^ ERROR the trait bound `str: std::marker::Sized` is not satisfied\n     //~^^ HELP run `rustc --explain E0277` to see a detailed explanation\n     //~^^^ NOTE `str` does not have a constant size known at compile-time\n     //~^^^^ NOTE required for the cast to the object type `Foo`"}, {"sha": "b9224e7be7f12eddf404f034462e1ccabf2f7305", "filename": "src/test/compile-fail/closure-bounds-cant-promote-superkind-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -13,7 +13,7 @@ struct X<F> where F: FnOnce() + 'static + Send {\n }\n \n fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static {\n-    //~^ ERROR the trait `std::marker::Send` is not implemented for the type\n+    //~^ ERROR `F: std::marker::Send` is not satisfied\n     return X { field: blk };\n }\n "}, {"sha": "d3339c4845ab276b28b9794861486f2ca7233f56", "filename": "src/test/compile-fail/closure-bounds-subtype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -21,7 +21,7 @@ fn give_any<F>(f: F) where F: FnOnce() {\n \n fn give_owned<F>(f: F) where F: FnOnce() + Send {\n     take_any(f);\n-    take_const_owned(f); //~ ERROR the trait `std::marker::Sync` is not implemented for the type\n+    take_const_owned(f); //~ ERROR `F: std::marker::Sync` is not satisfied\n }\n \n fn main() {}"}, {"sha": "b034fedb805e343b85ae4024275185aa8f033a70", "filename": "src/test/compile-fail/cross-fn-cache-hole.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fcross-fn-cache-hole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fcross-fn-cache-hole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcross-fn-cache-hole.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -23,7 +23,7 @@ trait Bar<X> { }\n \n // We don't always check where clauses for sanity, but in this case\n // wfcheck does report an error here:\n-fn vacuous<A>() //~ ERROR the trait `Bar<u32>` is not implemented for the type `i32`\n+fn vacuous<A>() //~ ERROR the trait bound `i32: Bar<u32>` is not satisfied\n     where i32: Foo<u32, A>\n {\n     // ... the original intention was to check that we don't use that"}, {"sha": "129c859b91954af02c9a70040f12f51d6df9ddd1", "filename": "src/test/compile-fail/deriving-no-inner-impl-error-message.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fderiving-no-inner-impl-error-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fderiving-no-inner-impl-error-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-no-inner-impl-error-message.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -18,7 +18,7 @@ struct E {\n #[derive(Clone)]\n struct C {\n     x: NoCloneOrEq\n-    //~^ ERROR the trait `std::clone::Clone` is not implemented for the type `NoCloneOrEq`\n+    //~^ ERROR `NoCloneOrEq: std::clone::Clone` is not satisfied\n }\n \n "}, {"sha": "56fb38611735d1aab226000c83f070ce82a941bd", "filename": "src/test/compile-fail/deriving-span-Default-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-struct.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -17,7 +17,7 @@ struct Error;\n \n #[derive(Default)]\n struct Struct {\n-    x: Error //~ ERROR `std::default::Default` is not implemented\n+    x: Error //~ ERROR `Error: std::default::Default` is not satisfied\n }\n \n fn main() {}"}, {"sha": "68d9795710245f7aa66b43e96298f35d6bbfa786", "filename": "src/test/compile-fail/destructure-trait-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -35,7 +35,7 @@ fn main() {\n     // n == m\n     let &x = &1isize as &T;      //~ ERROR type `&T` cannot be dereferenced\n     let &&x = &(&1isize as &T);  //~ ERROR type `&T` cannot be dereferenced\n-    let box x = box 1isize as Box<T>; //~ ERROR the trait `std::marker::Sized` is not implemented\n+    let box x = box 1isize as Box<T>; //~ ERROR `T: std::marker::Sized` is not satisfied\n \n     // n > m\n     let &&x = &1isize as &T;"}, {"sha": "241fabf053c0bdc0cd26736027fe887e64abc88e", "filename": "src/test/compile-fail/dst-bad-assign-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -44,5 +44,5 @@ pub fn main() {\n     // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let z: Box<ToBar> = Box::new(Bar1 {f: 36});\n     f5.ptr = *z;\n-    //~^ ERROR the trait `std::marker::Sized` is not implemented\n+    //~^ ERROR `ToBar: std::marker::Sized` is not satisfied\n }"}, {"sha": "2d21d0ebc760b5579e6c47aa501b2f2b6257d01f", "filename": "src/test/compile-fail/dst-bad-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -49,5 +49,5 @@ pub fn main() {\n     //~| found `Bar1`\n     //~| expected trait ToBar\n     //~| found struct `Bar1`\n-    //~| ERROR the trait `std::marker::Sized` is not implemented for the type `ToBar`\n+    //~| ERROR `ToBar: std::marker::Sized` is not satisfied\n }"}, {"sha": "9a3ea54a3a4559c54cc6de17e1682b396afacb45", "filename": "src/test/compile-fail/dst-bad-coerce1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce1.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -28,5 +28,5 @@ pub fn main() {\n     let f1 = Fat { ptr: Foo };\n     let f2: &Fat<Foo> = &f1;\n     let f3: &Fat<Bar> = f2;\n-    //~^ ERROR the trait `Bar` is not implemented for the type `Foo`\n+    //~^ ERROR `Foo: Bar` is not satisfied\n }"}, {"sha": "f508364d75115fa74f7a10baab0c7f6f6a658a55", "filename": "src/test/compile-fail/dst-bad-deep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -21,5 +21,5 @@ pub fn main() {\n     let f: Fat<[isize; 3]> = Fat { ptr: [5, 6, 7] };\n     let g: &Fat<[isize]> = &f;\n     let h: &Fat<Fat<[isize]>> = &Fat { ptr: *g };\n-    //~^ ERROR the trait `std::marker::Sized` is not implemented\n+    //~^ ERROR `[isize]: std::marker::Sized` is not satisfied\n }"}, {"sha": "8fafd78d407969ec26ee9b2cdf998a2554789a3f", "filename": "src/test/compile-fail/dst-object-from-unsized-type.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -16,22 +16,22 @@ impl Foo for [u8] {}\n \n fn test1<T: ?Sized + Foo>(t: &T) {\n     let u: &Foo = t;\n-    //~^ ERROR `std::marker::Sized` is not implemented for the type `T`\n+    //~^ ERROR `T: std::marker::Sized` is not satisfied\n }\n \n fn test2<T: ?Sized + Foo>(t: &T) {\n     let v: &Foo = t as &Foo;\n-    //~^ ERROR `std::marker::Sized` is not implemented for the type `T`\n+    //~^ ERROR `T: std::marker::Sized` is not satisfied\n }\n \n fn test3() {\n     let _: &[&Foo] = &[\"hi\"];\n-    //~^ ERROR `std::marker::Sized` is not implemented for the type `str`\n+    //~^ ERROR `str: std::marker::Sized` is not satisfied\n }\n \n fn test4(x: &[u8]) {\n     let _: &Foo = x as &Foo;\n-    //~^ ERROR `std::marker::Sized` is not implemented for the type `[u8]`\n+    //~^ ERROR `[u8]: std::marker::Sized` is not satisfied\n }\n \n fn main() { }"}, {"sha": "bd5fd3ee3b71eff738117678b3e34f4cf2da068c", "filename": "src/test/compile-fail/dst-sized-trait-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fdst-sized-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fdst-sized-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-sized-trait-param.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -15,9 +15,9 @@\n trait Foo<T> : Sized { fn take(self, x: &T) { } } // Note: T is sized\n \n impl Foo<[isize]> for usize { }\n-//~^ ERROR the trait `std::marker::Sized` is not implemented for the type `[isize]`\n+//~^ ERROR `[isize]: std::marker::Sized` is not satisfied\n \n impl Foo<isize> for [usize] { }\n-//~^ ERROR the trait `std::marker::Sized` is not implemented for the type `[usize]`\n+//~^ ERROR `[usize]: std::marker::Sized` is not satisfied\n \n pub fn main() { }"}, {"sha": "8b1e2fc19663dc448d87583e81eff3d2fd3b8919", "filename": "src/test/compile-fail/error-should-say-copy-not-pod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ferror-should-say-copy-not-pod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ferror-should-say-copy-not-pod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ferror-should-say-copy-not-pod.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -13,5 +13,5 @@\n fn check_bound<T:Copy>(_: T) {}\n \n fn main() {\n-    check_bound(\"nocopy\".to_string()); //~ ERROR the trait `std::marker::Copy` is not implemented\n+    check_bound(\"nocopy\".to_string()); //~ ERROR : std::marker::Copy` is not satisfied\n }"}, {"sha": "576368aef312f08de60da9e319558cc6f58feffa", "filename": "src/test/compile-fail/extern-wrong-value-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fextern-wrong-value-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fextern-wrong-value-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-wrong-value-type.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -17,6 +17,6 @@ fn main() {\n     // extern functions are extern \"C\" fn\n     let _x: extern \"C\" fn() = f; // OK\n     is_fn(f);\n-    //~^ ERROR the trait `std::ops::Fn<()>` is not implemented for the type `extern \"C\" fn()\n-    //~| ERROR the trait `std::ops::FnOnce<()>` is not implemented for the type `extern \"C\" fn()\n+    //~^ ERROR `extern \"C\" fn() {f}: std::ops::Fn<()>` is not satisfied\n+    //~| ERROR `extern \"C\" fn() {f}: std::ops::FnOnce<()>` is not satisfied\n }"}, {"sha": "8cbfc520ff449cc32cdf3933389d7719613d7554", "filename": "src/test/compile-fail/fn-trait-formatting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -34,6 +34,6 @@ fn main() {\n     //~| found box\n \n     needs_fn(1);\n-    //~^ ERROR `std::ops::Fn<(isize,)>`\n-    //~| ERROR `std::ops::FnOnce<(isize,)>`\n+    //~^ ERROR : std::ops::Fn<(isize,)>`\n+    //~| ERROR : std::ops::FnOnce<(isize,)>`\n }"}, {"sha": "96ad184fd355840c602ab11ce998a3ca7cca3a43", "filename": "src/test/compile-fail/for-loop-bogosity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ffor-loop-bogosity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ffor-loop-bogosity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-loop-bogosity.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -24,7 +24,7 @@ pub fn main() {\n         x: 1,\n         y: 2,\n     };\n-    for x in bogus { //~ ERROR `std::iter::Iterator` is not implemented for the type `MyStruct`\n+    for x in bogus { //~ ERROR `MyStruct: std::iter::Iterator` is not satisfied\n         drop(x);\n     }\n }"}, {"sha": "845429d4b0c0b37a07c89fd0500d0389fe888ed0", "filename": "src/test/compile-fail/hrtb-conflate-regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fhrtb-conflate-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fhrtb-conflate-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhrtb-conflate-regions.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -35,6 +35,6 @@ impl<'a> Foo<(&'a isize, &'a isize)> for SomeStruct\n }\n \n fn a() { want_foo1::<SomeStruct>(); } // OK -- foo wants just one region\n-fn b() { want_foo2::<SomeStruct>(); } //~ ERROR not implemented\n+fn b() { want_foo2::<SomeStruct>(); } //~ ERROR E0277\n \n fn main() { }"}, {"sha": "b55dccec2d56f95adec0155cfaae1dd679d5ee1d", "filename": "src/test/compile-fail/hrtb-higher-ranker-supertraits-transitive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fhrtb-higher-ranker-supertraits-transitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fhrtb-higher-ranker-supertraits-transitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhrtb-higher-ranker-supertraits-transitive.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -54,7 +54,7 @@ fn want_qux<B>(b: &B)\n     where B : Qux\n {\n     want_foo_for_any_tcx(b);\n-    want_bar_for_any_ccx(b); //~ ERROR not implemented\n+    want_bar_for_any_ccx(b); //~ ERROR E0277\n }\n \n fn main() {}"}, {"sha": "4c5add4aceaaf15273f468de48cc5e2731bce19a", "filename": "src/test/compile-fail/hrtb-higher-ranker-supertraits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fhrtb-higher-ranker-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fhrtb-higher-ranker-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhrtb-higher-ranker-supertraits.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -25,7 +25,7 @@ fn want_foo_for_some_tcx<'x,F>(f: &'x F)\n     where F : Foo<'x>\n {\n     want_foo_for_some_tcx(f);\n-    want_foo_for_any_tcx(f); //~ ERROR not implemented\n+    want_foo_for_any_tcx(f); //~ ERROR E0277\n }\n \n fn want_foo_for_any_tcx<F>(f: &F)\n@@ -42,7 +42,7 @@ fn want_bar_for_some_ccx<'x,B>(b: &B)\n     want_foo_for_any_tcx(b);\n \n     want_bar_for_some_ccx(b);\n-    want_bar_for_any_ccx(b); //~ ERROR not implemented\n+    want_bar_for_any_ccx(b); //~ ERROR E0277\n }\n \n fn want_bar_for_any_ccx<B>(b: &B)"}, {"sha": "aec950f992cf4c160dc98536c2706f3320d4180e", "filename": "src/test/compile-fail/hrtb-just-for-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fhrtb-just-for-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fhrtb-just-for-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhrtb-just-for-static.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -31,7 +31,7 @@ fn give_any() {\n struct StaticInt;\n impl Foo<&'static isize> for StaticInt { }\n fn give_static() {\n-    want_hrtb::<StaticInt>() //~ ERROR `for<'a> Foo<&'a isize>` is not implemented\n+    want_hrtb::<StaticInt>() //~ ERROR `for<'a> StaticInt: Foo<&'a isize>` is not satisfied\n }\n \n fn main() { }"}, {"sha": "fcfbeefced06bd184bc9787ff7b17bd4162075c0", "filename": "src/test/compile-fail/hrtb-perfect-forwarding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fhrtb-perfect-forwarding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fhrtb-perfect-forwarding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhrtb-perfect-forwarding.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -53,7 +53,7 @@ fn foo_hrtb_bar_not<'b,T>(mut t: T)\n     // be implemented. Thus to satisfy `&mut T : for<'a> Foo<&'a\n     // isize>`, we require `T : for<'a> Bar<&'a isize>`, but the where\n     // clause only specifies `T : Bar<&'b isize>`.\n-    foo_hrtb_bar_not(&mut t); //~ ERROR `for<'a> Bar<&'a isize>` is not implemented for the type `T`\n+    foo_hrtb_bar_not(&mut t); //~ ERROR `for<'a> T: Bar<&'a isize>` is not satisfied\n }\n \n fn foo_hrtb_bar_hrtb<T>(mut t: T)"}, {"sha": "9b9bae92c33c1b43e62ca20781292f9b1e06f170", "filename": "src/test/compile-fail/ifmt-unimpl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fifmt-unimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fifmt-unimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fifmt-unimpl.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     format!(\"{:X}\", \"3\");\n-    //~^ ERROR: the trait `std::fmt::UpperHex` is not implemented\n+    //~^ ERROR: `str: std::fmt::UpperHex` is not satisfied\n }"}, {"sha": "f90365b71ae55fa617102acea28ae95a6e07691c", "filename": "src/test/compile-fail/impl-bounds-checking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fimpl-bounds-checking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fimpl-bounds-checking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-bounds-checking.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -17,7 +17,7 @@ trait Getter<T: Clone2> {\n     fn get(&self) -> T;\n }\n \n-impl Getter<isize> for isize { //~ ERROR the trait `Clone2` is not implemented\n+impl Getter<isize> for isize { //~ ERROR `isize: Clone2` is not satisfied\n     fn get(&self) -> isize { *self }\n }\n "}, {"sha": "354d7b936485bd0505c02eb71758860d5400d5a4", "filename": "src/test/compile-fail/indexing-requires-a-uint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -13,7 +13,7 @@\n \n fn main() {\n     fn bar<T>(_: T) {}\n-    [0][0u8]; //~ ERROR: the trait `std::ops::Index<u8>` is not implemented\n+    [0][0u8]; //~ ERROR: `[_]: std::ops::Index<u8>` is not satisfied\n \n     [0][0]; // should infer to be a usize\n "}, {"sha": "897aca66cbfd466705cc089e5a8b42e50d0e68f8", "filename": "src/test/compile-fail/integral-indexing.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -13,14 +13,14 @@ pub fn main() {\n     let s: String = \"abcdef\".to_string();\n     v[3_usize];\n     v[3];\n-    v[3u8];  //~ERROR the trait `std::ops::Index<u8>` is not implemented\n-    v[3i8];  //~ERROR the trait `std::ops::Index<i8>` is not implemented\n-    v[3u32]; //~ERROR the trait `std::ops::Index<u32>` is not implemented\n-    v[3i32]; //~ERROR the trait `std::ops::Index<i32>` is not implemented\n+    v[3u8];  //~ERROR : std::ops::Index<u8>` is not satisfied\n+    v[3i8];  //~ERROR : std::ops::Index<i8>` is not satisfied\n+    v[3u32]; //~ERROR : std::ops::Index<u32>` is not satisfied\n+    v[3i32]; //~ERROR : std::ops::Index<i32>` is not satisfied\n     s.as_bytes()[3_usize];\n     s.as_bytes()[3];\n-    s.as_bytes()[3u8];  //~ERROR the trait `std::ops::Index<u8>` is not implemented\n-    s.as_bytes()[3i8];  //~ERROR the trait `std::ops::Index<i8>` is not implemented\n-    s.as_bytes()[3u32]; //~ERROR the trait `std::ops::Index<u32>` is not implemented\n-    s.as_bytes()[3i32]; //~ERROR the trait `std::ops::Index<i32>` is not implemented\n+    s.as_bytes()[3u8];  //~ERROR : std::ops::Index<u8>` is not satisfied\n+    s.as_bytes()[3i8];  //~ERROR : std::ops::Index<i8>` is not satisfied\n+    s.as_bytes()[3u32]; //~ERROR : std::ops::Index<u32>` is not satisfied\n+    s.as_bytes()[3i32]; //~ERROR : std::ops::Index<i32>` is not satisfied\n }"}, {"sha": "446514c8dd45fd186322919d4b4bb5b72d8658d2", "filename": "src/test/compile-fail/issue-14084.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-14084.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-14084.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14084.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -13,5 +13,5 @@\n \n fn main() {\n     () <- 0;\n-    //~^ ERROR: the trait `std::ops::Placer<_>` is not implemented\n+    //~^ ERROR: `(): std::ops::Placer<_>` is not satisfied\n }"}, {"sha": "84452accc9a4ac4abec7e0134f6a81c628cbaf24", "filename": "src/test/compile-fail/issue-14366.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-14366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-14366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14366.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     let _x = \"test\" as &::std::any::Any;\n-//~^ ERROR the trait `std::marker::Sized` is not implemented for the type `str`\n+//~^ ERROR `str: std::marker::Sized` is not satisfied\n }"}, {"sha": "c4d88267032920c59648ad43977aaa394d225e9f", "filename": "src/test/compile-fail/issue-14853.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-14853.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-14853.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14853.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -20,7 +20,7 @@ struct X { data: u32 }\n \n impl Something for X {\n     fn yay<T: Str>(_:Option<X>, thing: &[T]) {\n-    //~^ ERROR the requirement `T : Str` appears on the impl method\n+    //~^ ERROR the requirement `T: Str` appears on the impl method\n     }\n }\n "}, {"sha": "41349d7d7443b056bcaeb16498090e66b22ca71e", "filename": "src/test/compile-fail/issue-15756.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-15756.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-15756.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15756.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -15,7 +15,7 @@ fn dft_iter<'a, T>(arg1: Chunks<'a,T>, arg2: ChunksMut<'a,T>)\n {\n     for\n     &mut something\n-//~^ ERROR the trait `std::marker::Sized` is not implemented for the type `[T]`\n+//~^ ERROR `[T]: std::marker::Sized` is not satisfied\n     in arg2\n     {\n     }"}, {"sha": "6c41450796c749edad9e4c630bef2fa2e6526d96", "filename": "src/test/compile-fail/issue-16538.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -19,7 +19,7 @@ mod Y {\n }\n \n static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n-//~^ ERROR the trait `std::marker::Sync` is not implemented for the type\n+//~^ ERROR `*const usize: std::marker::Sync` is not satisfied\n //~| ERROR cannot refer to other statics by value, use the address-of operator or a constant instead\n //~| ERROR E0015\n "}, {"sha": "0fe01ece558ee0d9a4b8f3fbdcc431252dc932d2", "filename": "src/test/compile-fail/issue-17651.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -14,5 +14,5 @@\n fn main() {\n     // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     (|| Box::new(*(&[0][..])))();\n-    //~^ ERROR the trait `std::marker::Sized` is not implemented for the type `[_]`\n+    //~^ ERROR `[_]: std::marker::Sized` is not satisfied\n }"}, {"sha": "790329cd2e429f13897329353c166236791268d1", "filename": "src/test/compile-fail/issue-17718-static-sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-17718-static-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-17718-static-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-static-sync.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -17,6 +17,6 @@ impl !Sync for Foo {}\n \n static FOO: usize = 3;\n static BAR: Foo = Foo;\n-//~^ ERROR: the trait `std::marker::Sync` is not implemented\n+//~^ ERROR: `Foo: std::marker::Sync` is not satisfied\n \n fn main() {}"}, {"sha": "23be4d3536117fe50a594e3607af41dcb7780b83", "filename": "src/test/compile-fail/issue-17959.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-17959.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-17959.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17959.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -19,7 +19,7 @@ struct G<T: ?Sized> {\n }\n \n impl<T> Drop for G<T> {\n-//~^ ERROR: The requirement `T : core::marker::Sized` is added only by the Drop impl. [E0367]\n+//~^ ERROR: The requirement `T: core::marker::Sized` is added only by the Drop impl. [E0367]\n     fn drop(&mut self) {\n         if !self._ptr.is_null() {\n         }"}, {"sha": "33d68c121bf2674a9d11e854690129b1b5a284fe", "filename": "src/test/compile-fail/issue-18107.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -12,7 +12,7 @@ pub trait AbstractRenderer {}\n \n fn _create_render(_: &()) ->\n     AbstractRenderer\n-//~^ ERROR: the trait `std::marker::Sized` is not implemented\n+//~^ ERROR: `AbstractRenderer + 'static: std::marker::Sized` is not satisfied\n {\n     match 0 {\n         _ => unimplemented!()"}, {"sha": "a3ad76e1be06bb28bdc54983103620cde25e0be5", "filename": "src/test/compile-fail/issue-18611.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-18611.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-18611.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18611.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn add_state(op: <isize as HasState>::State) {\n-//~^ ERROR the trait `HasState` is not implemented for the type `isize`\n+//~^ ERROR `isize: HasState` is not satisfied\n }\n \n trait HasState {"}, {"sha": "3e21360721b6d87a9076a72e7efdea81fe9d0405", "filename": "src/test/compile-fail/issue-18919.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-18919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-18919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18919.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -11,7 +11,7 @@\n type FuncType<'f> = Fn(&isize) -> isize + 'f;\n \n fn ho_func(f: Option<FuncType>) {\n-    //~^ ERROR: the trait `std::marker::Sized` is not implemented for the type\n+    //~^ ERROR: `for<'r> std::ops::Fn(&'r isize) -> isize: std::marker::Sized` is not satisfied\n }\n \n fn main() {}"}, {"sha": "8fbe4432204a49c0810cea899c13cbe0614aafae", "filename": "src/test/compile-fail/issue-1920-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-1920-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-1920-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1920-1.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -18,5 +18,5 @@ fn assert_clone<T>() where T : Clone { }\n \n fn main() {\n     assert_clone::<foo::core::sync::atomic::AtomicBool>();\n-    //~^ ERROR the trait `foo::core::clone::Clone` is not implemented for the type `foo::core::\n+    //~^ ERROR `foo::core::sync::atomic::AtomicBool: foo::core::clone::Clone` is not satisfied\n }"}, {"sha": "02c925f336eae8fa20cde1a07638797a6691d096", "filename": "src/test/compile-fail/issue-1920-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-1920-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-1920-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1920-2.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -16,5 +16,5 @@ fn assert_clone<T>() where T : Clone { }\n \n fn main() {\n     assert_clone::<bar::sync::atomic::AtomicBool>();\n-    //~^ ERROR the trait `bar::clone::Clone` is not implemented for the type `bar::sync::atomic::\n+    //~^ ERROR `bar::sync::atomic::AtomicBool: bar::clone::Clone` is not satisfied\n }"}, {"sha": "dfec48e0a83c1359411bf1e9bfa549be7fab0469", "filename": "src/test/compile-fail/issue-1920-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-1920-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-1920-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1920-3.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -20,5 +20,5 @@ fn assert_clone<T>() where T : Clone { }\n \n fn main() {\n     assert_clone::<foo::core::sync::atomic::AtomicBool>();\n-    //~^ ERROR the trait `core::clone::Clone` is not implemented for the type `core::sync::atomic::\n+    //~^ ERROR `core::sync::atomic::AtomicBool: core::clone::Clone` is not satisfied\n }"}, {"sha": "b02757fb5a3133acdf5f81f1fdda9a98f644d0bd", "filename": "src/test/compile-fail/issue-20005.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-20005.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-20005.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20005.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -15,7 +15,7 @@ trait From<Src> {\n }\n \n trait To {\n-    fn to<Dst>(  //~ ERROR the trait `std::marker::Sized` is not implemented\n+    fn to<Dst>(  //~ ERROR `Self: std::marker::Sized` is not satisfied\n         self\n     ) -> <Dst as From<Self>>::Result where Dst: From<Self> {\n         From::from(self)"}, {"sha": "b2f3a2da516194a1762fe2948529cf1518592363", "filename": "src/test/compile-fail/issue-20162.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-20162.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-20162.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20162.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -13,5 +13,5 @@ struct X { x: i32 }\n fn main() {\n     let mut b: Vec<X> = vec![];\n     b.sort();\n-    //~^ ERROR the trait `std::cmp::Ord` is not implemented for the type `X`\n+    //~^ ERROR `X: std::cmp::Ord` is not satisfied\n }"}, {"sha": "b7c544c78483aa7b6cd245d1251a7f63a948c9d6", "filename": "src/test/compile-fail/issue-20605.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-20605.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-20605.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20605.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -10,7 +10,7 @@\n \n fn changer<'a>(mut things: Box<Iterator<Item=&'a mut u8>>) {\n     for item in *things { *item = 0 }\n-//~^ ERROR the trait `std::marker::Sized` is not implemented for the type `std::iter::Iterator\n+//~^ ERROR `std::iter::Iterator<Item=&mut u8>: std::marker::Sized` is not satisfied\n }\n \n fn main() {}"}, {"sha": "0de0ab2269bff833471de2cd6daa791d4ca6a2ab", "filename": "src/test/compile-fail/issue-21160.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-21160.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-21160.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21160.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -16,6 +16,6 @@ impl Bar {\n \n #[derive(Hash)]\n struct Foo(Bar);\n-//~^ error: the trait `std::hash::Hash` is not implemented for the type `Bar`\n+//~^ error: `Bar: std::hash::Hash` is not satisfied\n \n fn main() {}"}, {"sha": "e880a8b212bbc101255d60147d62756d9ff85320", "filename": "src/test/compile-fail/issue-21659-show-relevant-trait-impls-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-21659-show-relevant-trait-impls-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-21659-show-relevant-trait-impls-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21659-show-relevant-trait-impls-1.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -32,7 +32,7 @@ fn main() {\n     let f1 = Bar;\n \n     f1.foo(1usize);\n-    //~^ error: the trait `Foo<usize>` is not implemented for the type `Bar`\n+    //~^ error: the trait bound `Bar: Foo<usize>` is not satisfied\n     //~| help: the following implementations were found:\n     //~| help:   <Bar as Foo<i32>>\n     //~| help:   <Bar as Foo<u8>>"}, {"sha": "2c5b18a8113f7ac7d95ccb18648da5facb75165f", "filename": "src/test/compile-fail/issue-21659-show-relevant-trait-impls-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-21659-show-relevant-trait-impls-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-21659-show-relevant-trait-impls-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21659-show-relevant-trait-impls-2.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -36,7 +36,7 @@ fn main() {\n     let f1 = Bar;\n \n     f1.foo(1usize);\n-    //~^ error: the trait `Foo<usize>` is not implemented for the type `Bar`\n+    //~^ error: the trait bound `Bar: Foo<usize>` is not satisfied\n     //~| help: the following implementations were found:\n     //~| help:   <Bar as Foo<i8>>\n     //~| help:   <Bar as Foo<i16>>"}, {"sha": "cb0baee0a8787d538d5f484dc4bd15f34014cf55", "filename": "src/test/compile-fail/issue-21763.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-21763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-21763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21763.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -17,5 +17,5 @@ fn foo<T: Send>() {}\n \n fn main() {\n     foo::<HashMap<Rc<()>, Rc<()>>>();\n-    //~^ ERROR: the trait `std::marker::Send` is not implemented for the type `std::rc::Rc<()>`\n+    //~^ ERROR: `std::rc::Rc<()>: std::marker::Send` is not satisfied\n }"}, {"sha": "3e0ab6d89212a54f328d5915ac49eff0dc8cf5c9", "filename": "src/test/compile-fail/issue-22034.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-22034.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-22034.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22034.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     let ptr: *mut () = 0 as *mut _;\n     let _: &mut Fn() = unsafe {\n         &mut *(ptr as *mut Fn())\n-        //~^ ERROR the trait `std::ops::Fn<()>` is not implemented\n-        //~| ERROR the trait `std::ops::FnOnce<()>` is not implemented\n+        //~^ ERROR `(): std::ops::Fn<()>` is not satisfied\n+        //~| ERROR `(): std::ops::FnOnce<()>` is not satisfied\n     };\n }"}, {"sha": "402b9a04496e9a4aeaa73652ca9bfd1cbfb905f3", "filename": "src/test/compile-fail/issue-22645.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-22645.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-22645.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22645.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -22,6 +22,6 @@ impl<RHS: Scalar> Add <RHS> for Bob {\n \n fn main() {\n   let b = Bob + 3.5;\n-  b + 3 //~ ERROR: is not implemented\n+  b + 3 //~ ERROR E0277\n   //~^ ERROR: mismatched types\n }"}, {"sha": "1c255b4e6314a0b51d9ed5d5cbb0584eb544a8f0", "filename": "src/test/compile-fail/issue-25076.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-25076.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-25076.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-25076.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -17,5 +17,5 @@ fn do_fold<B, F: InOut<B, Out=B>>(init: B, f: F) {}\n fn bot<T>() -> T { loop {} }\n \n fn main() {\n-    do_fold(bot(), ()); //~ ERROR is not implemented for the type `()`\n+    do_fold(bot(), ()); //~ ERROR `(): InOut<_>` is not satisfied\n }"}, {"sha": "16d7ea468466d703e07e9fcafae4627fe5d91a70", "filename": "src/test/compile-fail/issue-2611-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -21,7 +21,7 @@ struct E {\n \n impl A for E {\n     fn b<F: Sync, G>(&self, _x: F) -> F { panic!() }\n-    //~^ ERROR `F : std::marker::Sync` appears on the impl method\n+    //~^ ERROR `F: std::marker::Sync` appears on the impl method\n }\n \n fn main() {}"}, {"sha": "5dded2b1e16973e9cf259805273a349894313de7", "filename": "src/test/compile-fail/issue-28098.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-28098.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-28098.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28098.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -10,13 +10,13 @@\n \n fn main() {\n     let _ = Iterator::next(&mut ());\n-    //~^ ERROR the trait `std::iter::Iterator` is not implemented\n+    //~^ ERROR `(): std::iter::Iterator` is not satisfied\n \n     for _ in false {}\n-    //~^ ERROR the trait `std::iter::Iterator` is not implemented\n+    //~^ ERROR `bool: std::iter::Iterator` is not satisfied\n \n     let _ = Iterator::next(&mut ());\n-    //~^ ERROR the trait `std::iter::Iterator` is not implemented\n+    //~^ ERROR `(): std::iter::Iterator` is not satisfied\n \n     other()\n }\n@@ -25,11 +25,11 @@ pub fn other() {\n     // check errors are still reported globally\n \n     let _ = Iterator::next(&mut ());\n-    //~^ ERROR the trait `std::iter::Iterator` is not implemented\n+    //~^ ERROR `(): std::iter::Iterator` is not satisfied\n \n     let _ = Iterator::next(&mut ());\n-    //~^ ERROR the trait `std::iter::Iterator` is not implemented\n+    //~^ ERROR `(): std::iter::Iterator` is not satisfied\n \n     for _ in false {}\n-    //~^ ERROR the trait `std::iter::Iterator` is not implemented\n+    //~^ ERROR `bool: std::iter::Iterator` is not satisfied\n }"}, {"sha": "0ecaa409412a62a92fc6cfb863134b864926648d", "filename": "src/test/compile-fail/issue-29147.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-29147.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-29147.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-29147.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -28,5 +28,5 @@ impl Foo for S5<u32> { fn xxx(&self) {} }\n impl Foo for S5<u64> { fn xxx(&self) {} }\n \n fn main() {\n-    let _ = <S5<_>>::xxx; //~ ERROR cannot resolve `S5<_> : Foo`\n+    let _ = <S5<_>>::xxx; //~ ERROR cannot resolve `S5<_>: Foo`\n }"}, {"sha": "83ff95cc2ea48f59c0086e69e970eb4a3aa1752f", "filename": "src/test/compile-fail/issue-5035-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-5035-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-5035-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5035-2.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -11,6 +11,6 @@\n trait I {}\n type K = I+'static;\n \n-fn foo(_x: K) {} //~ ERROR: the trait `std::marker::Sized` is not implemented\n+fn foo(_x: K) {} //~ ERROR: `I + 'static: std::marker::Sized` is not satisfied\n \n fn main() {}"}, {"sha": "019a7bdc734d4be95e48aac78050987589613d81", "filename": "src/test/compile-fail/issue-5883.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -15,8 +15,8 @@ struct Struct {\n }\n \n fn new_struct(r: A+'static)\n-    -> Struct { //~^  ERROR the trait `std::marker::Sized` is not implemented\n-    //~^ ERROR the trait `std::marker::Sized` is not implemented\n+    -> Struct { //~^  ERROR `A + 'static: std::marker::Sized` is not satisfied\n+    //~^ ERROR `A + 'static: std::marker::Sized` is not satisfied\n     Struct { r: r }\n }\n "}, {"sha": "95bbd4eccf4ff08cebdb83bcad077d0847a4ebbf", "filename": "src/test/compile-fail/issue-7013.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -34,5 +34,5 @@ struct A {\n \n fn main() {\n     let a = A {v: box B{v: None} as Box<Foo+Send>};\n-    //~^ ERROR the trait `std::marker::Send` is not implemented\n+    //~^ ERROR `std::rc::Rc<std::cell::RefCell<A>>: std::marker::Send` is not satisfied\n }"}, {"sha": "16b407baad178eece4faea4a35123d70b206a406", "filename": "src/test/compile-fail/issue-7364.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -16,6 +16,6 @@ use std::cell::RefCell;\n // Regression test for issue 7364\n static boxed: Box<RefCell<isize>> = box RefCell::new(0);\n //~^ ERROR allocations are not allowed in statics\n-//~| ERROR the trait `std::marker::Sync` is not implemented for the type\n+//~| ERROR `std::cell::RefCell<isize>: std::marker::Sync` is not satisfied\n \n fn main() { }"}, {"sha": "08b4e1a45f3368669be85be0838ca9763c63ca8d", "filename": "src/test/compile-fail/kindck-copy.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -34,26 +34,26 @@ fn test<'a,T,U:Copy>(_: &'a isize) {\n     assert_copy::<&'a [isize]>();\n \n     // ...unless they are mutable\n-    assert_copy::<&'static mut isize>(); //~ ERROR `std::marker::Copy` is not implemented\n-    assert_copy::<&'a mut isize>();  //~ ERROR `std::marker::Copy` is not implemented\n+    assert_copy::<&'static mut isize>(); //~ ERROR : std::marker::Copy` is not satisfied\n+    assert_copy::<&'a mut isize>();  //~ ERROR : std::marker::Copy` is not satisfied\n \n     // boxes are not ok\n-    assert_copy::<Box<isize>>();   //~ ERROR `std::marker::Copy` is not implemented\n-    assert_copy::<String>();   //~ ERROR `std::marker::Copy` is not implemented\n-    assert_copy::<Vec<isize> >(); //~ ERROR `std::marker::Copy` is not implemented\n-    assert_copy::<Box<&'a mut isize>>(); //~ ERROR `std::marker::Copy` is not implemented\n+    assert_copy::<Box<isize>>();   //~ ERROR : std::marker::Copy` is not satisfied\n+    assert_copy::<String>();   //~ ERROR : std::marker::Copy` is not satisfied\n+    assert_copy::<Vec<isize> >(); //~ ERROR : std::marker::Copy` is not satisfied\n+    assert_copy::<Box<&'a mut isize>>(); //~ ERROR : std::marker::Copy` is not satisfied\n \n     // borrowed object types are generally ok\n     assert_copy::<&'a Dummy>();\n     assert_copy::<&'a (Dummy+Copy)>();\n     assert_copy::<&'static (Dummy+Copy)>();\n \n     // owned object types are not ok\n-    assert_copy::<Box<Dummy>>(); //~ ERROR `std::marker::Copy` is not implemented\n-    assert_copy::<Box<Dummy+Copy>>(); //~ ERROR `std::marker::Copy` is not implemented\n+    assert_copy::<Box<Dummy>>(); //~ ERROR : std::marker::Copy` is not satisfied\n+    assert_copy::<Box<Dummy+Copy>>(); //~ ERROR : std::marker::Copy` is not satisfied\n \n     // mutable object types are not ok\n-    assert_copy::<&'a mut (Dummy+Copy)>();  //~ ERROR `std::marker::Copy` is not implemented\n+    assert_copy::<&'a mut (Dummy+Copy)>();  //~ ERROR : std::marker::Copy` is not satisfied\n \n     // unsafe ptrs are ok\n     assert_copy::<*const isize>();\n@@ -71,10 +71,10 @@ fn test<'a,T,U:Copy>(_: &'a isize) {\n     assert_copy::<MyStruct>();\n \n     // structs containing non-POD are not ok\n-    assert_copy::<MyNoncopyStruct>(); //~ ERROR `std::marker::Copy` is not implemented\n+    assert_copy::<MyNoncopyStruct>(); //~ ERROR : std::marker::Copy` is not satisfied\n \n     // ref counted types are not ok\n-    assert_copy::<Rc<isize>>();   //~ ERROR `std::marker::Copy` is not implemented\n+    assert_copy::<Rc<isize>>();   //~ ERROR : std::marker::Copy` is not satisfied\n }\n \n pub fn main() {"}, {"sha": "1cf970e150d7033da338ec5b79e80ec5a6056c8a", "filename": "src/test/compile-fail/kindck-impl-type-params-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -21,5 +21,5 @@ fn take_param<T:Foo>(foo: &T) { }\n fn main() {\n     let x: Box<_> = box 3;\n     take_param(&x);\n-    //~^ ERROR the trait `std::marker::Copy` is not implemented\n+    //~^ ERROR `Box<_>: std::marker::Copy` is not satisfied\n }"}, {"sha": "53ad4d1163bfad59b0da9ec0c786c252617f6407", "filename": "src/test/compile-fail/kindck-impl-type-params.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -26,13 +26,13 @@ impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n fn f<T>(val: T) {\n     let t: S<T> = S(marker::PhantomData);\n     let a = &t as &Gettable<T>;\n-    //~^ ERROR the trait `std::marker::Send` is not implemented\n+    //~^ ERROR : std::marker::Send` is not satisfied\n }\n \n fn g<T>(val: T) {\n     let t: S<T> = S(marker::PhantomData);\n     let a: &Gettable<T> = &t;\n-    //~^ ERROR the trait `std::marker::Send` is not implemented\n+    //~^ ERROR : std::marker::Send` is not satisfied\n }\n \n fn foo<'a>() {\n@@ -44,15 +44,15 @@ fn foo<'a>() {\n fn foo2<'a>() {\n     let t: Box<S<String>> = box S(marker::PhantomData);\n     let a = t as Box<Gettable<String>>;\n-    //~^ ERROR the trait `std::marker::Copy` is not implemented\n+    //~^ ERROR : std::marker::Copy` is not satisfied\n }\n \n fn foo3<'a>() {\n     struct Foo; // does not impl Copy\n \n     let t: Box<S<Foo>> = box S(marker::PhantomData);\n     let a: Box<Gettable<Foo>> = t;\n-    //~^ ERROR the trait `std::marker::Copy` is not implemented\n+    //~^ ERROR : std::marker::Copy` is not satisfied\n }\n \n fn main() { }"}, {"sha": "dd77c2c138f4622df9b7a129959b05fb95e37d46", "filename": "src/test/compile-fail/kindck-nonsendable-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -18,5 +18,5 @@ fn bar<F:FnOnce() + Send>(_: F) { }\n fn main() {\n     let x = Rc::new(3);\n     bar(move|| foo(x));\n-    //~^ ERROR `std::marker::Send` is not implemented\n+    //~^ ERROR : std::marker::Send` is not satisfied\n }"}, {"sha": "bd0e5642b9ccddd5813b91f7607260240daefae2", "filename": "src/test/compile-fail/kindck-send-object.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -20,11 +20,11 @@ trait Message : Send { }\n \n fn object_ref_with_static_bound_not_ok() {\n     assert_send::<&'static (Dummy+'static)>();\n-    //~^ ERROR the trait `std::marker::Sync` is not implemented\n+    //~^ ERROR : std::marker::Sync` is not satisfied\n }\n \n fn box_object_with_no_bound_not_ok<'a>() {\n-    assert_send::<Box<Dummy>>(); //~ ERROR the trait `std::marker::Send` is not implemented\n+    assert_send::<Box<Dummy>>(); //~ ERROR : std::marker::Send` is not satisfied\n }\n \n fn object_with_send_bound_ok() {"}, {"sha": "da56fccde2d4ab93f252a185beb66a4253e6b45e", "filename": "src/test/compile-fail/kindck-send-object1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -18,7 +18,7 @@ trait Dummy { }\n // careful with object types, who knows what they close over...\n fn test51<'a>() {\n     assert_send::<&'a Dummy>();\n-    //~^ ERROR the trait `std::marker::Sync` is not implemented\n+    //~^ ERROR : std::marker::Sync` is not satisfied\n }\n fn test52<'a>() {\n     assert_send::<&'a (Dummy+Sync)>();\n@@ -37,7 +37,7 @@ fn test61() {\n // them not ok\n fn test_71<'a>() {\n     assert_send::<Box<Dummy+'a>>();\n-    //~^ ERROR the trait `std::marker::Send` is not implemented\n+    //~^ ERROR : std::marker::Send` is not satisfied\n }\n \n fn main() { }"}, {"sha": "e52a6e12efc96bf66b80e956705d3dc5275821d0", "filename": "src/test/compile-fail/kindck-send-object2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -14,11 +14,11 @@ fn assert_send<T:Send>() { }\n trait Dummy { }\n \n fn test50() {\n-    assert_send::<&'static Dummy>(); //~ ERROR the trait `std::marker::Sync` is not implemented\n+    assert_send::<&'static Dummy>(); //~ ERROR : std::marker::Sync` is not satisfied\n }\n \n fn test53() {\n-    assert_send::<Box<Dummy>>(); //~ ERROR the trait `std::marker::Send` is not implemented\n+    assert_send::<Box<Dummy>>(); //~ ERROR : std::marker::Send` is not satisfied\n }\n \n // ...unless they are properly bounded"}, {"sha": "583381a1c28f5b23fc9753f8e2ef25f9b1dde529", "filename": "src/test/compile-fail/kindck-send-owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fkindck-send-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fkindck-send-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-owned.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -19,7 +19,7 @@ fn test32() { assert_send::<Vec<isize> >(); }\n \n // but not if they own a bad thing\n fn test40() {\n-    assert_send::<Box<*mut u8>>(); //~ ERROR `std::marker::Send` is not implemented\n+    assert_send::<Box<*mut u8>>(); //~ ERROR : std::marker::Send` is not satisfied\n }\n \n fn main() { }"}, {"sha": "ecee2e0a4c63ae4c6ad976f475cb351549e89338", "filename": "src/test/compile-fail/kindck-send-unsafe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fkindck-send-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fkindck-send-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-unsafe.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -14,7 +14,7 @@ fn assert_send<T:Send>() { }\n \n fn test71<'a>() {\n     assert_send::<*mut &'a isize>();\n-    //~^ ERROR the trait `core::marker::Send` is not implemented for the type\n+    //~^ ERROR `*mut &'a isize: core::marker::Send` is not satisfied\n }\n \n fn main() {"}, {"sha": "a419c6480e6a7e1460ad7e1c6a5eeee29fbd14a5", "filename": "src/test/compile-fail/map-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -28,5 +28,5 @@ fn main() {\n     let x: Box<Map<isize, isize>> = x;\n     // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let y: Box<Map<usize, isize>> = Box::new(x);\n-    //~^ ERROR the trait `Map<usize, isize>` is not implemented\n+    //~^ ERROR `Box<Map<isize, isize>>: Map<usize, isize>` is not satisfied\n }"}, {"sha": "a12a3615bc91ad7acc71d8855ef8f665eacc5753", "filename": "src/test/compile-fail/mut-not-freeze.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/455fa01abcc60be6393ca9045d49e6f895b88c3c/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455fa01abcc60be6393ca9045d49e6f895b88c3c/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs?ref=455fa01abcc60be6393ca9045d49e6f895b88c3c", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::cell::RefCell;\n-\n-fn f<T: Sync>(_: T) {}\n-\n-fn main() {\n-    let x = RefCell::new(0);\n-    f(x);\n-    //~^ ERROR `std::marker::Sync` is not implemented\n-}"}, {"sha": "cafcabe6279b0b6f0ca675c437302bd1883bb616", "filename": "src/test/compile-fail/mutable-enum-indirect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fmutable-enum-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fmutable-enum-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-enum-indirect.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -24,5 +24,5 @@ fn bar<T: Sync>(_: T) {}\n \n fn main() {\n     let x = Foo::A(NoSync);\n-    bar(&x); //~ ERROR the trait `std::marker::Sync` is not implemented\n+    bar(&x); //~ ERROR `NoSync: std::marker::Sync` is not satisfied\n }"}, {"sha": "334952cefa6e02f9612f3e761db590f966a07159", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -33,7 +33,7 @@ fn main() {\n     let x = foo(Port(Rc::new(())));\n \n     thread::spawn(move|| {\n-        //~^ ERROR `std::marker::Send` is not implemented\n+        //~^ ERROR `std::rc::Rc<()>: std::marker::Send` is not satisfied\n         let y = x;\n         println!(\"{:?}\", y);\n     });"}, {"sha": "902710e96e274fbc0ffc8a83d61e739741ff1ded", "filename": "src/test/compile-fail/no_send-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fno_send-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fno_send-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_send-enum.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -24,5 +24,5 @@ fn bar<T: Send>(_: T) {}\n fn main() {\n     let x = Foo::A(NoSend);\n     bar(x);\n-    //~^ ERROR `std::marker::Send` is not implemented\n+    //~^ ERROR `NoSend: std::marker::Send` is not satisfied\n }"}, {"sha": "69f6fcdc4afa6577b8a0cbeb232f7ea4b758ec7a", "filename": "src/test/compile-fail/no_send-rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -15,5 +15,5 @@ fn bar<T: Send>(_: T) {}\n fn main() {\n     let x = Rc::new(5);\n     bar(x);\n-    //~^ ERROR `std::marker::Send` is not implemented\n+    //~^ ERROR `std::rc::Rc<_>: std::marker::Send` is not satisfied\n }"}, {"sha": "b2ca4f9f5db16bb76a749cf8478733ded2a68b5e", "filename": "src/test/compile-fail/no_send-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fno_send-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fno_send-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_send-struct.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -23,5 +23,5 @@ fn bar<T: Send>(_: T) {}\n fn main() {\n     let x = Foo { a: 5 };\n     bar(x);\n-    //~^ ERROR the trait `std::marker::Send` is not implemented\n+    //~^ ERROR `Foo: std::marker::Send` is not satisfied\n }"}, {"sha": "ae9a25a95b4ea99283139f6e0c73e4e96b423962", "filename": "src/test/compile-fail/no_share-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fno_share-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fno_share-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_share-enum.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -22,5 +22,5 @@ fn bar<T: Sync>(_: T) {}\n fn main() {\n     let x = Foo::A(NoSync);\n     bar(x);\n-    //~^ ERROR the trait `std::marker::Sync` is not implemented\n+    //~^ ERROR `NoSync: std::marker::Sync` is not satisfied\n }"}, {"sha": "d64d37a2f6c33785e120c424f50aa99129622186", "filename": "src/test/compile-fail/no_share-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fno_share-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fno_share-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_share-struct.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -20,5 +20,5 @@ fn bar<T: Sync>(_: T) {}\n fn main() {\n     let x = Foo { a: 5 };\n     bar(x);\n-    //~^ ERROR the trait `std::marker::Sync` is not implemented\n+    //~^ ERROR `Foo: std::marker::Sync` is not satisfied\n }"}, {"sha": "e5de03a08486c5854685bcb95449c1db11e7071e", "filename": "src/test/compile-fail/not-panic-safe-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-3.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -18,5 +18,5 @@ use std::cell::RefCell;\n fn assert<T: RecoverSafe + ?Sized>() {}\n \n fn main() {\n-    assert::<Arc<RefCell<i32>>>(); //~ ERROR: is not implemented\n+    assert::<Arc<RefCell<i32>>>(); //~ ERROR E0277\n }"}, {"sha": "0301c8dd935c7fe71876b226c9d18041028c5959", "filename": "src/test/compile-fail/not-panic-safe-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-5.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -17,5 +17,5 @@ use std::cell::UnsafeCell;\n fn assert<T: RecoverSafe + ?Sized>() {}\n \n fn main() {\n-    assert::<*const UnsafeCell<i32>>(); //~ ERROR: is not implemented\n+    assert::<*const UnsafeCell<i32>>(); //~ ERROR E0277\n }"}, {"sha": "fd0f830a17d877ec79beb9383dd85de6a50e9de2", "filename": "src/test/compile-fail/not-panic-safe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -16,5 +16,5 @@ use std::panic::RecoverSafe;\n fn assert<T: RecoverSafe + ?Sized>() {}\n \n fn main() {\n-    assert::<&mut i32>(); //~ ERROR: RecoverSafe` is not implemented\n+    assert::<&mut i32>(); //~ ERROR: RecoverSafe` is not satisfied\n }"}, {"sha": "aa7a83a7baac9a3cd557af95b9ab386e28d7391a", "filename": "src/test/compile-fail/not-sync.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fnot-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fnot-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-sync.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -16,19 +16,19 @@ fn test<T: Sync>() {}\n \n fn main() {\n     test::<Cell<i32>>();\n-    //~^ ERROR marker::Sync` is not implemented for the type `std::cell::Cell<i32>`\n+    //~^ ERROR `std::cell::Cell<i32>: std::marker::Sync` is not satisfied\n     test::<RefCell<i32>>();\n-    //~^ ERROR marker::Sync` is not implemented for the type `std::cell::RefCell<i32>`\n+    //~^ ERROR `std::cell::RefCell<i32>: std::marker::Sync` is not satisfied\n \n     test::<Rc<i32>>();\n-    //~^ ERROR marker::Sync` is not implemented for the type `std::rc::Rc<i32>`\n+    //~^ ERROR `std::rc::Rc<i32>: std::marker::Sync` is not satisfied\n     test::<Weak<i32>>();\n-    //~^ ERROR marker::Sync` is not implemented for the type `std::rc::Weak<i32>`\n+    //~^ ERROR `std::rc::Weak<i32>: std::marker::Sync` is not satisfied\n \n     test::<Receiver<i32>>();\n-    //~^ ERROR marker::Sync` is not implemented for the type `std::sync::mpsc::Receiver<i32>`\n+    //~^ ERROR `std::sync::mpsc::Receiver<i32>: std::marker::Sync` is not satisfied\n     test::<Sender<i32>>();\n-    //~^ ERROR marker::Sync` is not implemented for the type `std::sync::mpsc::Sender<i32>`\n+    //~^ ERROR `std::sync::mpsc::Sender<i32>: std::marker::Sync` is not satisfied\n     test::<SyncSender<i32>>();\n-    //~^ ERROR marker::Sync` is not implemented for the type `std::sync::mpsc::SyncSender<i32>`\n+    //~^ ERROR `std::sync::mpsc::SyncSender<i32>: std::marker::Sync` is not satisfied\n }"}, {"sha": "6fa261dea71cb83cbb39b4f3e6ca544d516e2716", "filename": "src/test/compile-fail/object-does-not-impl-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fobject-does-not-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fobject-does-not-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-does-not-impl-trait.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -14,5 +14,5 @@\n trait Foo {}\n fn take_foo<F:Foo>(f: F) {}\n fn take_object(f: Box<Foo>) { take_foo(f); }\n-//~^ ERROR the trait `Foo` is not implemented\n+//~^ ERROR `Box<Foo>: Foo` is not satisfied\n fn main() {}"}, {"sha": "c84927ea266394e41e25e4a14415857a10dff276", "filename": "src/test/compile-fail/phantom-oibit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fphantom-oibit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fphantom-oibit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fphantom-oibit.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -31,11 +31,11 @@ struct Nested<T>(T);\n fn is_zen<T: Zen>(_: T) {}\n \n fn not_sync<T>(x: Guard<T>) {\n-    is_zen(x)  //~ error: the trait `std::marker::Sync` is not implemented for the type `T`\n+    is_zen(x)  //~ error: `T: std::marker::Sync` is not satisfied\n }\n \n fn nested_not_sync<T>(x: Nested<Guard<T>>) {\n-    is_zen(x)  //~ error: the trait `std::marker::Sync` is not implemented for the type `T`\n+    is_zen(x)  //~ error: `T: std::marker::Sync` is not satisfied\n }\n \n fn main() {}"}, {"sha": "895d2450cfed6c570c5ca2f72ee7594fe4caa64b", "filename": "src/test/compile-fail/range-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Frange-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Frange-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frange-1.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -22,6 +22,6 @@ pub fn main() {\n     // Unsized type.\n     let arr: &[_] = &[1, 2, 3];\n     let range = *arr..;\n-    //~^ ERROR the trait `std::marker::Sized` is not implemented\n-    //~| ERROR the trait `std::marker::Sized` is not implemented\n+    //~^ ERROR `[_]: std::marker::Sized` is not satisfied\n+    //~| ERROR `[_]: std::marker::Sized` is not satisfied\n }"}, {"sha": "7cac3f41d546d712b490f3e090e41dd3adef2134", "filename": "src/test/compile-fail/reflect-assoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Freflect-assoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Freflect-assoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Freflect-assoc.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -24,7 +24,7 @@ struct Struct<T>(T);\n fn is_reflect<T:Reflect>() { }\n \n fn a<T>() {\n-    is_reflect::<Box<Get<Output=T>>>(); //~ ERROR not implemented\n+    is_reflect::<Box<Get<Output=T>>>(); //~ ERROR E0277\n }\n \n fn ok_a<T: Reflect>() {"}, {"sha": "476b498ae6492157b8b270ffe9158613e9317413", "filename": "src/test/compile-fail/reflect-object-param.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Freflect-object-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Freflect-object-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Freflect-object-param.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -23,23 +23,23 @@ struct Struct<T>(T);\n fn is_reflect<T:Reflect>() { }\n \n fn a<T>() {\n-    is_reflect::<T>(); //~ ERROR not implemented\n+    is_reflect::<T>(); //~ ERROR E0277\n }\n \n fn ok_a<T: Reflect>() {\n     is_reflect::<T>(); // OK\n }\n \n fn b<T>() {\n-    is_reflect::<Box<Get<T>>>(); //~ ERROR not implemented\n+    is_reflect::<Box<Get<T>>>(); //~ ERROR E0277\n }\n \n fn ok_b<T: Reflect>() {\n     is_reflect::<Box<Get<T>>>(); // OK\n }\n \n fn c<T>() {\n-    is_reflect::<Box<Get<Struct<T>>>>(); //~ ERROR not implemented\n+    is_reflect::<Box<Get<Struct<T>>>>(); //~ ERROR E0277\n }\n \n fn main() {"}, {"sha": "fdd569e2c1b3fe9bac4540d766b8e7f196b0c554", "filename": "src/test/compile-fail/reflect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Freflect.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -22,15 +22,15 @@ struct Struct<T>(T);\n fn is_reflect<T:Reflect>() { }\n \n fn c<T>() {\n-    is_reflect::<Struct<T>>(); //~ ERROR not implemented\n+    is_reflect::<Struct<T>>(); //~ ERROR E0277\n }\n \n fn ok_c<T: Reflect>() {\n     is_reflect::<Struct<T>>(); // OK\n }\n \n fn d<T>() {\n-    is_reflect::<(i32, T)>(); //~ ERROR not implemented\n+    is_reflect::<(i32, T)>(); //~ ERROR E0277\n }\n \n fn main() {"}, {"sha": "adc870224037802c1e7c10c1eeb93bc79f64dc42", "filename": "src/test/compile-fail/reject-specialized-drops-8142.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Freject-specialized-drops-8142.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Freject-specialized-drops-8142.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Freject-specialized-drops-8142.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -47,7 +47,7 @@ impl              Drop for P<i8>          { fn drop(&mut self) { } } // REJECT\n //~^ ERROR Implementations of Drop cannot be specialized\n \n impl<Adds_bnd:Bound> Drop for Q<Adds_bnd> { fn drop(&mut self) { } } // REJECT\n-//~^ ERROR The requirement `Adds_bnd : Bound` is added only by the Drop impl.\n+//~^ ERROR The requirement `Adds_bnd: Bound` is added only by the Drop impl.\n \n impl<'rbnd,Adds_rbnd:'rbnd> Drop for R<Adds_rbnd> { fn drop(&mut self) { } } // REJECT\n //~^ ERROR The requirement `Adds_rbnd : 'rbnd` is added only by the Drop impl."}, {"sha": "88441594a7e9345f0f460fb994d35f5538205f0f", "filename": "src/test/compile-fail/repeat-to-run-dtor-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -25,5 +25,5 @@ impl Drop for Foo {\n fn main() {\n     let a = Foo { x: 3 };\n     let _ = [ a; 5 ];\n-    //~^ ERROR the trait `std::marker::Copy` is not implemented for the type `Foo`\n+    //~^ ERROR `Foo: std::marker::Copy` is not satisfied\n }"}, {"sha": "b972a09b5c4908fa9e200d0888fbbb1f64fe33b3", "filename": "src/test/compile-fail/str-idx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fstr-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fstr-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstr-idx.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -10,5 +10,5 @@\n \n pub fn main() {\n     let s: &str = \"hello\";\n-    let c: u8 = s[4]; //~ ERROR the trait `std::ops::Index<_>` is not implemented\n+    let c: u8 = s[4]; //~ ERROR `str: std::ops::Index<_>` is not satisfied\n }"}, {"sha": "8851e5e07973cd597d9cfcd3a390976c58ae9651", "filename": "src/test/compile-fail/str-mut-idx.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fstr-mut-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fstr-mut-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstr-mut-idx.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -12,11 +12,11 @@ fn bot<T>() -> T { loop {} }\n \n fn mutate(s: &mut str) {\n     s[1..2] = bot();\n-    //~^ ERROR `std::marker::Sized` is not implemented for the type `str`\n-    //~| ERROR `std::marker::Sized` is not implemented for the type `str`\n+    //~^ ERROR `str: std::marker::Sized` is not satisfied\n+    //~| ERROR `str: std::marker::Sized` is not satisfied\n     s[1usize] = bot();\n-    //~^ ERROR `std::ops::Index<usize>` is not implemented for the type `str`\n-    //~| ERROR `std::ops::IndexMut<usize>` is not implemented for the type `str`\n+    //~^ ERROR `str: std::ops::Index<usize>` is not satisfied\n+    //~| ERROR `str: std::ops::IndexMut<usize>` is not satisfied\n }\n \n pub fn main() {}"}, {"sha": "851e31b942ed1bca99742e3468edf8e7ca8b8c4b", "filename": "src/test/compile-fail/substs-ppaux.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fsubsts-ppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fsubsts-ppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsubsts-ppaux.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -0,0 +1,61 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+//\n+// revisions: verbose normal\n+//\n+//[verbose] compile-flags: -Z verbose\n+\n+trait Foo<'b, 'c, S=u32> {\n+    fn bar<'a, T>() where T: 'a {}\n+    fn baz() {}\n+}\n+\n+impl<'a,'b,T,S> Foo<'a, 'b, S> for T {}\n+\n+fn main() {}\n+\n+fn foo<'z>() where &'z (): Sized {\n+    let x: () = <i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>;\n+    //[verbose]~^ ERROR mismatched types\n+    //[verbose]~| expected `()`\n+    //[verbose]~| found `fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::bar::<ReStatic, char>}`\n+    //[normal]~^^^^ ERROR mismatched types\n+    //[normal]~| expected `()`\n+    //[normal]~| found  `fn() {<i8 as Foo<'static, 'static, u8>>::bar::<'static, char>}`\n+\n+\n+    let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>;\n+    //[verbose]~^ ERROR mismatched types\n+    //[verbose]~| expected `()`\n+    //[verbose]~| found `fn() {<i8 as Foo<ReStatic, ReStatic, u32>>::bar::<ReStatic, char>}`\n+    //[normal]~^^^^ ERROR mismatched types\n+    //[normal]~| expected `()`\n+    //[normal]~| found `fn() {<i8 as Foo<'static, 'static>>::bar::<'static, char>}`\n+\n+    let x: () = <i8 as Foo<'static, 'static,  u8>>::baz;\n+    //[verbose]~^ ERROR mismatched types\n+    //[verbose]~| expected `()`\n+    //[verbose]~| found `fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::baz}`\n+    //[normal]~^^^^ ERROR mismatched types\n+    //[normal]~| expected `()`\n+    //[normal]~| found `fn() {<i8 as Foo<'static, 'static, u8>>::baz}`\n+\n+    let x: () = foo::<'static>;\n+    //[verbose]~^ ERROR mismatched types\n+    //[verbose]~| expected `()`\n+    //[verbose]~| found `fn() {foo::<ReStatic>}`\n+    //[normal]~^^^^ ERROR mismatched types\n+    //[normal]~| expected `()`\n+    //[normal]~| found `fn() {foo::<'static>}`\n+\n+    <str as Foo<u8>>::bar;\n+    //[verbose]~^ ERROR `str: std::marker::Sized` is not satisfied\n+    //[normal]~^^ ERROR `str: std::marker::Sized` is not satisfied\n+}"}, {"sha": "a11df776e06d3ba1e2dc6f0add3390d80a92da6b", "filename": "src/test/compile-fail/task-rng-isnt-sendable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftask-rng-isnt-sendable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftask-rng-isnt-sendable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftask-rng-isnt-sendable.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -16,5 +16,5 @@ fn test_send<S: Send>() {}\n \n pub fn main() {\n     test_send::<rand::ThreadRng>();\n-    //~^ ERROR `std::marker::Send` is not implemented\n+    //~^ ERROR : std::marker::Send` is not satisfied\n }"}, {"sha": "3fffb2e19f289c5c96c390a30b7788d62b6f3cdf", "filename": "src/test/compile-fail/trait-bounds-impl-comparison-1.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-impl-comparison-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-impl-comparison-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-impl-comparison-1.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -34,15 +34,15 @@ trait Foo {\n impl Foo for isize {\n     // invalid bound for T, was defined as Eq in trait\n     fn test_error1_fn<T: Ord>(&self) {}\n-    //~^ ERROR the requirement `T : std::cmp::Ord` appears on the impl\n+    //~^ ERROR the requirement `T: std::cmp::Ord` appears on the impl\n \n     // invalid bound for T, was defined as Eq + Ord in trait\n     fn test_error2_fn<T: Eq + B>(&self) {}\n-    //~^ ERROR the requirement `T : B` appears on the impl\n+    //~^ ERROR the requirement `T: B` appears on the impl\n \n     // invalid bound for T, was defined as Eq + Ord in trait\n     fn test_error3_fn<T: B + Eq>(&self) {}\n-    //~^ ERROR the requirement `T : B` appears on the impl\n+    //~^ ERROR the requirement `T: B` appears on the impl\n \n     // multiple bounds, same order as in trait\n     fn test3_fn<T: Ord + Eq>(&self) {}\n@@ -52,16 +52,16 @@ impl Foo for isize {\n \n     // parameters in impls must be equal or more general than in the defining trait\n     fn test_error5_fn<T: B>(&self) {}\n-    //~^ ERROR the requirement `T : B` appears on the impl\n+    //~^ ERROR the requirement `T: B` appears on the impl\n \n     // bound `std::cmp::Eq` not enforced by this implementation, but this is OK\n     fn test6_fn<T: A>(&self) {}\n \n     fn test_error7_fn<T: A + Eq>(&self) {}\n-    //~^ ERROR the requirement `T : std::cmp::Eq` appears on the impl\n+    //~^ ERROR the requirement `T: std::cmp::Eq` appears on the impl\n \n     fn test_error8_fn<T: C>(&self) {}\n-    //~^ ERROR the requirement `T : C` appears on the impl\n+    //~^ ERROR the requirement `T: C` appears on the impl\n }\n \n trait Getter<T> {"}, {"sha": "8d587b29ba989331d57800761c613be2056ab41d", "filename": "src/test/compile-fail/trait-bounds-impl-comparison-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-impl-comparison-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-impl-comparison-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-impl-comparison-2.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -21,7 +21,7 @@ trait IteratorUtil<A>: Sized\n \n impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n     fn zip<B, U: Iterator<B>>(self, other: U) -> ZipIterator<T, U> {\n-    //~^ ERROR the requirement `U : Iterator<B>` appears on the impl method\n+    //~^ ERROR the requirement `U: Iterator<B>` appears on the impl method\n         ZipIterator{a: self, b: other}\n     }\n }"}, {"sha": "fd46d1a62962c5c5518f6b916dfb7c2dfe8eb8e2", "filename": "src/test/compile-fail/trait-bounds-not-on-bare-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-bare-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-bare-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-bare-trait.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -15,7 +15,7 @@ trait Foo {\n // This should emit the less confusing error, not the more confusing one.\n \n fn foo(_x: Foo + Send) {\n-    //~^ ERROR the trait `std::marker::Sized` is not implemented\n+    //~^ ERROR `Foo + Send + 'static: std::marker::Sized` is not satisfied\n }\n \n fn main() { }"}, {"sha": "6a271a7b7497ffd84493874bf966c2c6b19b4c05", "filename": "src/test/compile-fail/trait-bounds-on-structs-and-enums-in-fns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-in-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-in-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-in-fns.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -21,10 +21,10 @@ enum Bar<T:Trait> {\n }\n \n fn explode(x: Foo<u32>) {}\n-//~^ ERROR not implemented\n+//~^ ERROR E0277\n \n fn kaboom(y: Bar<f32>) {}\n-//~^ ERROR not implemented\n+//~^ ERROR E0277\n \n fn main() {\n }"}, {"sha": "77abe6f7f7473c084a0886d80ac66d9df2af839c", "filename": "src/test/compile-fail/trait-bounds-on-structs-and-enums-in-impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-in-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-in-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-in-impls.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -28,7 +28,7 @@ trait PolyTrait<T>\n struct Struct;\n \n impl PolyTrait<Foo<u16>> for Struct {\n-//~^ ERROR not implemented\n+//~^ ERROR E0277\n }\n \n fn main() {"}, {"sha": "9e680d17fb9ef5a8c865b8e1834d655f3f712109", "filename": "src/test/compile-fail/trait-bounds-on-structs-and-enums-locals.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-locals.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -18,10 +18,10 @@ struct Foo<T:Trait> {\n \n fn main() {\n     let foo = Foo {\n-    //~^ ERROR not implemented\n+    //~^ ERROR E0277\n         x: 3\n     };\n \n     let baz: Foo<usize> = loop { };\n-    //~^ ERROR not implemented\n+    //~^ ERROR E0277\n }"}, {"sha": "2b59fdcae3534a8658466f457bcca0cb277d1a79", "filename": "src/test/compile-fail/trait-bounds-on-structs-and-enums-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-static.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -17,7 +17,7 @@ struct Foo<T:Trait> {\n }\n \n static X: Foo<usize> = Foo {\n-//~^ ERROR not implemented\n+//~^ ERROR E0277\n     x: 1,\n };\n "}, {"sha": "975de00d02a33aa729057533a21374b0aaf72ef0", "filename": "src/test/compile-fail/trait-bounds-on-structs-and-enums-xc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-xc.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -15,10 +15,10 @@ extern crate trait_bounds_on_structs_and_enums_xc;\n use trait_bounds_on_structs_and_enums_xc::{Bar, Foo, Trait};\n \n fn explode(x: Foo<usize>) {}\n-//~^ ERROR not implemented\n+//~^ ERROR E0277\n \n fn kaboom(y: Bar<f32>) {}\n-//~^ ERROR not implemented\n+//~^ ERROR E0277\n \n fn main() {\n }"}, {"sha": "515684bcf42d275e585186be160a0edd4ea2805f", "filename": "src/test/compile-fail/trait-bounds-on-structs-and-enums-xc1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-xc1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-xc1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-xc1.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -16,10 +16,10 @@ use trait_bounds_on_structs_and_enums_xc::{Bar, Foo, Trait};\n \n fn main() {\n     let foo = Foo {\n-    //~^ ERROR not implemented\n+    //~^ ERROR E0277\n         x: 3\n     };\n     let bar: Bar<f64> = return;\n-    //~^ ERROR not implemented\n+    //~^ ERROR E0277\n     let _ = bar;\n }"}, {"sha": "24e2418e8d45e97ce88c5148f13340d965043ce0", "filename": "src/test/compile-fail/trait-bounds-on-structs-and-enums.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -21,32 +21,32 @@ enum Bar<T:Trait> {\n }\n \n impl<T> Foo<T> {\n-//~^ ERROR the trait `Trait` is not implemented\n+//~^ ERROR `T: Trait` is not satisfied\n     fn uhoh() {}\n }\n \n struct Baz {\n-    a: Foo<isize>, //~ ERROR not implemented\n+    a: Foo<isize>, //~ ERROR E0277\n }\n \n enum Boo {\n-    Quux(Bar<usize>), //~ ERROR not implemented\n+    Quux(Bar<usize>), //~ ERROR E0277\n }\n \n struct Badness<U> {\n-    b: Foo<U>, //~ ERROR not implemented\n+    b: Foo<U>, //~ ERROR E0277\n }\n \n enum MoreBadness<V> {\n-    EvenMoreBadness(Bar<V>), //~ ERROR not implemented\n+    EvenMoreBadness(Bar<V>), //~ ERROR E0277\n }\n \n struct TupleLike(\n-    Foo<i32>, //~ ERROR not implemented\n+    Foo<i32>, //~ ERROR E0277\n );\n \n enum Enum {\n-    DictionaryLike { field: Bar<u8> }, //~ ERROR not implemented\n+    DictionaryLike { field: Bar<u8> }, //~ ERROR E0277\n }\n \n fn main() {"}, {"sha": "dd64085f6f6668a17d8ab42553a0a61b0ab2659f", "filename": "src/test/compile-fail/trait-coercion-generic-bad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-bad.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -25,6 +25,6 @@ impl Trait<&'static str> for Struct {\n fn main() {\n     // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let s: Box<Trait<isize>> = Box::new(Struct { person: \"Fred\" });\n-    //~^ ERROR the trait `Trait<isize>` is not implemented for the type `Struct`\n+    //~^ ERROR `Struct: Trait<isize>` is not satisfied\n     s.f(1);\n }"}, {"sha": "6950bce7304c0256cca77c90114392471240b268", "filename": "src/test/compile-fail/trait-suggest-where-clause.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftrait-suggest-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftrait-suggest-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-suggest-where-clause.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -0,0 +1,67 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::mem;\n+\n+struct Misc<T:?Sized>(T);\n+\n+fn check<T: Iterator, U: ?Sized>() {\n+    // suggest a where-clause, if needed\n+    mem::size_of::<U>();\n+    //~^ ERROR `U: std::marker::Sized` is not satisfied\n+    //~| HELP E0277\n+    //~| HELP consider adding a `where U: std::marker::Sized` bound\n+    //~| NOTE required by `std::mem::size_of`\n+\n+    mem::size_of::<Misc<U>>();\n+    //~^ ERROR `U: std::marker::Sized` is not satisfied\n+    //~| HELP E0277\n+    //~| HELP consider adding a `where U: std::marker::Sized` bound\n+    //~| NOTE required because it appears within the type `Misc<U>`\n+    //~| NOTE required by `std::mem::size_of`\n+\n+    // ... even if T occurs as a type parameter\n+\n+    <u64 as From<T>>::from;\n+    //~^ ERROR `u64: std::convert::From<T>` is not satisfied\n+    //~| HELP E0277\n+    //~| HELP consider adding a `where u64: std::convert::From<T>` bound\n+    //~| NOTE required by `std::convert::From::from`\n+\n+    <u64 as From<<T as Iterator>::Item>>::from;\n+    //~^ ERROR `u64: std::convert::From<<T as std::iter::Iterator>::Item>` is not satisfied\n+    //~| HELP E0277\n+    //~| HELP consider adding a `where u64:\n+    //~| NOTE required by `std::convert::From::from`\n+\n+    // ... but not if there are inference variables\n+\n+    <Misc<_> as From<T>>::from;\n+    //~^ ERROR `Misc<_>: std::convert::From<T>` is not satisfied\n+    //~| HELP E0277\n+    //~| NOTE required by `std::convert::From::from`\n+\n+    // ... and also not if the error is not related to the type\n+\n+    mem::size_of::<[T]>();\n+    //~^ ERROR `[T]: std::marker::Sized` is not satisfied\n+    //~| HELP E0277\n+    //~| NOTE `[T]` does not have a constant size\n+    //~| NOTE required by `std::mem::size_of`\n+\n+    mem::size_of::<[&U]>();\n+    //~^ ERROR `[&U]: std::marker::Sized` is not satisfied\n+    //~| HELP E0277\n+    //~| NOTE `[&U]` does not have a constant size\n+    //~| NOTE required by `std::mem::size_of`\n+}\n+\n+fn main() {\n+}"}, {"sha": "8014f92e1734438b5765e21caaaeb77f01395927", "filename": "src/test/compile-fail/traits-negative-impls.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftraits-negative-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftraits-negative-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-negative-impls.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -31,40 +31,40 @@ fn dummy() {\n     impl !Send for TestType {}\n \n     Outer(TestType);\n-    //~^ ERROR the trait `std::marker::Send` is not implemented for the type `dummy::TestType`\n-    //~| ERROR the trait `std::marker::Send` is not implemented for the type `dummy::TestType`\n+    //~^ ERROR `dummy::TestType: std::marker::Send` is not satisfied\n+    //~| ERROR `dummy::TestType: std::marker::Send` is not satisfied\n }\n \n fn dummy1b() {\n     struct TestType;\n     impl !Send for TestType {}\n \n     is_send(TestType);\n-    //~^ ERROR the trait `std::marker::Send` is not implemented for the type `dummy1b::TestType`\n+    //~^ ERROR `dummy1b::TestType: std::marker::Send` is not satisfied\n }\n \n fn dummy1c() {\n     struct TestType;\n     impl !Send for TestType {}\n \n     is_send((8, TestType));\n-    //~^ ERROR the trait `std::marker::Send` is not implemented for the type `dummy1c::TestType`\n+    //~^ ERROR `dummy1c::TestType: std::marker::Send` is not satisfied\n }\n \n fn dummy2() {\n     struct TestType;\n     impl !Send for TestType {}\n \n     is_send(Box::new(TestType));\n-    //~^ ERROR the trait `std::marker::Send` is not implemented for the type `dummy2::TestType`\n+    //~^ ERROR `dummy2::TestType: std::marker::Send` is not satisfied\n }\n \n fn dummy3() {\n     struct TestType;\n     impl !Send for TestType {}\n \n     is_send(Box::new(Outer2(TestType)));\n-    //~^ ERROR the trait `std::marker::Send` is not implemented for the type `dummy3::TestType`\n+    //~^ ERROR `dummy3::TestType: std::marker::Send` is not satisfied\n }\n \n fn main() {\n@@ -74,5 +74,5 @@ fn main() {\n     // This will complain about a missing Send impl because `Sync` is implement *just*\n     // for T that are `Send`. Look at #20366 and #19950\n     is_sync(Outer2(TestType));\n-    //~^ ERROR the trait `std::marker::Send` is not implemented for the type `main::TestType`\n+    //~^ ERROR `main::TestType: std::marker::Send` is not satisfied\n }"}, {"sha": "3fc0d638dd6f1880be39caa81b4c71bdb4e4e35c", "filename": "src/test/compile-fail/traits-repeated-supertrait-ambig.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftraits-repeated-supertrait-ambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftraits-repeated-supertrait-ambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-repeated-supertrait-ambig.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -33,21 +33,21 @@ impl CompareTo<u64> for i64 {\n impl CompareToInts for i64 { }\n \n fn with_obj(c: &CompareToInts) -> bool {\n-    c.same_as(22) //~ ERROR `CompareTo<i32>` is not implemented\n+    c.same_as(22) //~ ERROR `CompareToInts: CompareTo<i32>` is not satisfied\n }\n \n fn with_trait<C:CompareToInts>(c: &C) -> bool {\n-    c.same_as(22) //~ ERROR `CompareTo<i32>` is not implemented\n+    c.same_as(22) //~ ERROR `C: CompareTo<i32>` is not satisfied\n }\n \n fn with_ufcs1<C:CompareToInts>(c: &C) -> bool {\n-    CompareToInts::same_as(c, 22) //~ ERROR `CompareTo<i32>` is not implemented\n+    CompareToInts::same_as(c, 22) //~ ERROR `CompareToInts: CompareTo<i32>` is not satisfied\n }\n \n fn with_ufcs2<C:CompareToInts>(c: &C) -> bool {\n-    CompareTo::same_as(c, 22) //~ ERROR `CompareTo<i32>` is not implemented\n+    CompareTo::same_as(c, 22) //~ ERROR `C: CompareTo<i32>` is not satisfied\n }\n \n fn main() {\n-    assert_eq!(22_i64.same_as(22), true); //~ ERROR `CompareTo<i32>` is not implemented\n+    assert_eq!(22_i64.same_as(22), true); //~ ERROR `i64: CompareTo<i32>` is not satisfied\n }"}, {"sha": "d07282763d85b398f44893fed97f11e6cc11640f", "filename": "src/test/compile-fail/type-params-in-different-spaces-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-2.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -17,13 +17,13 @@ trait Tr<T> : Sized {\n \n trait A:    Tr<Self> {\n     fn test<U>(u: U) -> Self {\n-        Tr::op(u)   //~ ERROR not implemented\n+        Tr::op(u)   //~ ERROR E0277\n     }\n }\n \n trait B<T>: Tr<T> {\n     fn test<U>(u: U) -> Self {\n-        Tr::op(u)   //~ ERROR not implemented\n+        Tr::op(u)   //~ ERROR E0277\n     }\n }\n "}, {"sha": "f8342c333a3638cc7bc42e9ecb3f5d1db3e84b49", "filename": "src/test/compile-fail/typeck-default-trait-impl-assoc-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-assoc-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-assoc-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-assoc-type.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -16,7 +16,7 @@ trait Trait {\n     fn dummy(&self) { }\n }\n fn bar<T:Trait+Send>() {\n-    is_send::<T::AssocType>(); //~ ERROR not implemented\n+    is_send::<T::AssocType>(); //~ ERROR E0277\n }\n \n fn is_send<T:Send>() {"}, {"sha": "8a46d6c76c30fad5dd6a9a20c8c87c4b893ff544", "filename": "src/test/compile-fail/typeck-default-trait-impl-constituent-types-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types-2.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -26,5 +26,5 @@ fn main() {\n     is_mytrait::<MyS>();\n \n     is_mytrait::<(MyS2, MyS)>();\n-    //~^ ERROR the trait `MyTrait` is not implemented for the type `MyS2`\n+    //~^ ERROR `MyS2: MyTrait` is not satisfied\n }"}, {"sha": "3d7746b369cc0a65315df93151bf3a63da5f2956", "filename": "src/test/compile-fail/typeck-default-trait-impl-constituent-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -29,5 +29,5 @@ fn main() {\n     is_mytrait::<MyS>();\n \n     is_mytrait::<MyS2>();\n-    //~^ ERROR the trait `MyTrait` is not implemented for the type `MyS2`\n+    //~^ ERROR `MyS2: MyTrait` is not satisfied\n }"}, {"sha": "853718f1e77d08ddcc68ca765eaa4173550cc76e", "filename": "src/test/compile-fail/typeck-default-trait-impl-negation-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation-send.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -27,5 +27,5 @@ fn is_send<T: Send>() {}\n fn main() {\n     is_send::<MySendable>();\n     is_send::<MyNotSendable>();\n-    //~^ ERROR the trait `std::marker::Send` is not implemented for the type `MyNotSendable`\n+    //~^ ERROR `MyNotSendable: std::marker::Send` is not satisfied\n }"}, {"sha": "cdf787a60ad43a9f7a58c716e1a400838f713c5e", "filename": "src/test/compile-fail/typeck-default-trait-impl-negation-sync.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation-sync.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -43,11 +43,11 @@ fn is_sync<T: Sync>() {}\n fn main() {\n     is_sync::<MySync>();\n     is_sync::<MyNotSync>();\n-    //~^ ERROR the trait `std::marker::Sync` is not implemented for the type `MyNotSync`\n+    //~^ ERROR `MyNotSync: std::marker::Sync` is not satisfied\n \n     is_sync::<MyTypeWUnsafe>();\n-    //~^ ERROR the trait `std::marker::Sync` is not implemented for the type `std::cell::UnsafeCell<u8>`\n+    //~^ ERROR `std::cell::UnsafeCell<u8>: std::marker::Sync` is not satisfied\n \n     is_sync::<MyTypeManaged>();\n-    //~^ ERROR the trait `std::marker::Sync` is not implemented for the type `Managed`\n+    //~^ ERROR `Managed: std::marker::Sync` is not satisfied\n }"}, {"sha": "8c2658b89a506f0cb3f49269544ff27c067c1349", "filename": "src/test/compile-fail/typeck-default-trait-impl-negation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -33,10 +33,10 @@ fn is_my_unsafe_trait<T: MyUnsafeTrait>() {}\n fn main() {\n     is_my_trait::<ThisImplsTrait>();\n     is_my_trait::<ThisImplsUnsafeTrait>();\n-    //~^ ERROR the trait `MyTrait` is not implemented for the type `ThisImplsUnsafeTrait`\n+    //~^ ERROR `ThisImplsUnsafeTrait: MyTrait` is not satisfied\n \n     is_my_unsafe_trait::<ThisImplsTrait>();\n-    //~^ ERROR the trait `MyUnsafeTrait` is not implemented for the type `ThisImplsTrait`\n+    //~^ ERROR `ThisImplsTrait: MyUnsafeTrait` is not satisfied\n \n     is_my_unsafe_trait::<ThisImplsUnsafeTrait>();\n }"}, {"sha": "66c7a1c75ffe47a71ea93ddbd6b75247f46d941e", "filename": "src/test/compile-fail/typeck-default-trait-impl-precedence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-precedence.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -27,5 +27,5 @@ impl Signed for i32 { }\n fn main() {\n     is_defaulted::<&'static i32>();\n     is_defaulted::<&'static u32>();\n-    //~^ ERROR the trait `Signed` is not implemented for the type `u32`\n+    //~^ ERROR `u32: Signed` is not satisfied\n }"}, {"sha": "0c548b3bd990961465eab24ea223550b31f5b943", "filename": "src/test/compile-fail/typeck-default-trait-impl-send-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-send-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-send-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-send-param.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -12,7 +12,7 @@\n // an explicit trait bound.\n \n fn foo<T>() {\n-    is_send::<T>() //~ ERROR not implemented\n+    is_send::<T>() //~ ERROR E0277\n }\n \n fn is_send<T:Send>() {"}, {"sha": "0b071a9acd0921cedcbde0626bd524e65b6c435f", "filename": "src/test/compile-fail/typeck-default-trait-impl-supertrait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-supertrait.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -24,6 +24,6 @@ fn foo<T:MyTrait>() { bar::<T>() }\n fn bar<T:NotImplemented>() { }\n \n fn main() {\n-    foo::<i32>(); //~ ERROR the trait `NotImplemented` is not implemented for the type `i32`\n-    bar::<i64>(); //~ ERROR the trait `NotImplemented` is not implemented for the type `i64`\n+    foo::<i32>(); //~ ERROR `i32: NotImplemented` is not satisfied\n+    bar::<i64>(); //~ ERROR `i64: NotImplemented` is not satisfied\n }"}, {"sha": "3085f45a83dd1f3d393376232ec540dbb445ea72", "filename": "src/test/compile-fail/typeck-default-trait-impl-trait-where-clause-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause-2.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -29,7 +29,7 @@ fn bar<T:NotImplemented>() { }\n \n fn test() {\n     bar::<Option<i32>>();\n-    //~^ ERROR the trait `NotImplemented` is not implemented for the type `std::option::Option<i32>`\n+    //~^ ERROR `std::option::Option<i32>: NotImplemented` is not satisfied\n }\n \n fn main() {"}, {"sha": "47e87c09d12b1c7e1f908ca155a5016c195da1f0", "filename": "src/test/compile-fail/typeck-default-trait-impl-trait-where-clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -26,7 +26,7 @@ impl NotImplemented for i32 {}\n impl MyTrait for .. {}\n \n fn foo<T:MyTrait>() {\n-    //~^ ERROR the trait `NotImplemented` is not implemented for the type `std::option::Option<T>`\n+    //~^ ERROR `std::option::Option<T>: NotImplemented` is not satisfied\n     // This should probably typecheck. This is #20671.\n }\n "}, {"sha": "6047f6770a7bdc17422c88bdb54f1e182f4ecc96", "filename": "src/test/compile-fail/typeck-unsafe-always-share.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Verify that UnsafeCell is *always* sync regardless if `T` is sync.\n+// Verify that UnsafeCell is *always* !Sync regardless if `T` is sync.\n \n #![feature(optin_builtin_traits)]\n \n@@ -27,16 +27,16 @@ fn test<T: Sync>(s: T) {}\n fn main() {\n     let us = UnsafeCell::new(MySync{u: UnsafeCell::new(0)});\n     test(us);\n-    //~^ ERROR `std::marker::Sync` is not implemented\n+    //~^ ERROR `std::cell::UnsafeCell<MySync<_>>: std::marker::Sync` is not satisfied\n \n     let uns = UnsafeCell::new(NoSync);\n     test(uns);\n-    //~^ ERROR `std::marker::Sync` is not implemented\n+    //~^ ERROR `std::cell::UnsafeCell<NoSync>: std::marker::Sync` is not satisfied\n \n     let ms = MySync{u: uns};\n     test(ms);\n-    //~^ ERROR `std::marker::Sync` is not implemented\n+    //~^ ERROR `std::cell::UnsafeCell<NoSync>: std::marker::Sync` is not satisfied\n \n     test(NoSync);\n-    //~^ ERROR `std::marker::Sync` is not implemented\n+    //~^ ERROR `NoSync: std::marker::Sync` is not satisfied\n }"}, {"sha": "94a98b1582af102c9851de6b226a739bf6db8890", "filename": "src/test/compile-fail/ufcs-qpath-self-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fufcs-qpath-self-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fufcs-qpath-self-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fufcs-qpath-self-mismatch.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -12,7 +12,7 @@ use std::ops::Add;\n \n fn main() {\n     <i32 as Add<u32>>::add(1, 2);\n-    //~^ ERROR the trait `std::ops::Add<u32>` is not implemented for the type `i32`\n+    //~^ ERROR `i32: std::ops::Add<u32>` is not satisfied\n     <i32 as Add<i32>>::add(1u32, 2);\n     //~^ ERROR mismatched types\n     <i32 as Add<i32>>::add(1, 2u32);"}, {"sha": "849f7e0573cffdca02ebc120a4db5969a7c6c9bd", "filename": "src/test/compile-fail/unboxed-closure-sugar-default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-default.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -29,7 +29,7 @@ fn test<'a,'b>() {\n \n     // In angle version, we supply something other than the default\n     eq::< Foo<(isize,),isize,Output=()>,      Foo(isize)                      >();\n-    //~^ ERROR not implemented\n+    //~^ ERROR E0277\n \n     // Supply default explicitly.\n     eq::< Foo<(isize,),(isize,),Output=()>,   Foo(isize)                      >();"}, {"sha": "0cf44a2ca61c27cf94ae31bf0e00fe371db2823a", "filename": "src/test/compile-fail/unboxed-closure-sugar-equiv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-equiv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-equiv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-equiv.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -52,7 +52,7 @@ fn test<'a,'b>() {\n     // Errors expected:\n     eq::< Foo<(),Output=()>,\n           Foo(char)                                               >();\n-    //~^^ ERROR not implemented\n+    //~^^ ERROR E0277\n }\n \n fn main() { }"}, {"sha": "b25b331880679fc2a638859dadca0f8275b5b392", "filename": "src/test/compile-fail/unboxed-closures-fnmut-as-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Funboxed-closures-fnmut-as-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Funboxed-closures-fnmut-as-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-fnmut-as-fn.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -36,5 +36,5 @@ fn call_it<F:Fn(isize)->isize>(f: &F, x: isize) -> isize {\n \n fn main() {\n     let x = call_it(&S, 22);\n-    //~^ ERROR not implemented\n+    //~^ ERROR E0277\n }"}, {"sha": "cba7ad82ee16343ee3a5b8fa97d6a75ceee734e0", "filename": "src/test/compile-fail/unboxed-closures-unsafe-extern-fn.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Funboxed-closures-unsafe-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Funboxed-closures-unsafe-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-unsafe-extern-fn.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -22,19 +22,19 @@ fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n \n fn a() {\n     let x = call_it(&square, 22);\n-    //~^ ERROR not implemented\n-    //~| ERROR not implemented\n+    //~^ ERROR E0277\n+    //~| ERROR E0277\n }\n \n fn b() {\n     let y = call_it_mut(&mut square, 22);\n-    //~^ ERROR not implemented\n-    //~| ERROR not implemented\n+    //~^ ERROR E0277\n+    //~| ERROR E0277\n }\n \n fn c() {\n     let z = call_it_once(square, 22);\n-    //~^ ERROR not implemented\n+    //~^ ERROR E0277\n }\n \n fn main() { }"}, {"sha": "dd891bc473cef97a9216b307694fe45a8cd12f75", "filename": "src/test/compile-fail/unboxed-closures-wrong-abi.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-abi.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -22,19 +22,19 @@ fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n \n fn a() {\n     let x = call_it(&square, 22);\n-    //~^ ERROR not implemented\n-    //~| ERROR not implemented\n+    //~^ ERROR E0277\n+    //~| ERROR E0277\n }\n \n fn b() {\n     let y = call_it_mut(&mut square, 22);\n-    //~^ ERROR not implemented\n-    //~| ERROR not implemented\n+    //~^ ERROR E0277\n+    //~| ERROR E0277\n }\n \n fn c() {\n     let z = call_it_once(square, 22);\n-    //~^ ERROR not implemented\n+    //~^ ERROR E0277\n }\n \n fn main() { }"}, {"sha": "f9edd5df6739f22c88cae7b45fd719bd23038c35", "filename": "src/test/compile-fail/unboxed-closures-wrong-arg-type-extern-fn.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-arg-type-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-arg-type-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-arg-type-extern-fn.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -23,19 +23,19 @@ fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n \n fn a() {\n     let x = call_it(&square, 22);\n-    //~^ ERROR not implemented\n-    //~| ERROR not implemented\n+    //~^ ERROR E0277\n+    //~| ERROR E0277\n }\n \n fn b() {\n     let y = call_it_mut(&mut square, 22);\n-    //~^ ERROR not implemented\n-    //~| ERROR not implemented\n+    //~^ ERROR E0277\n+    //~| ERROR E0277\n }\n \n fn c() {\n     let z = call_it_once(square, 22);\n-    //~^ ERROR not implemented\n+    //~^ ERROR E0277\n }\n \n fn main() { }"}, {"sha": "82aa49aa7061d2cfa5790129ec0515ac304c5444", "filename": "src/test/compile-fail/unique-unique-kind.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/455fa01abcc60be6393ca9045d49e6f895b88c3c/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455fa01abcc60be6393ca9045d49e6f895b88c3c/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs?ref=455fa01abcc60be6393ca9045d49e6f895b88c3c", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::rc::Rc;\n-\n-fn f<T:Send>(__isize: T) {\n-}\n-\n-fn main() {\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n-    let i = Box::new(Rc::new(100));\n-    f(i);\n-    //~^ ERROR `std::marker::Send` is not implemented\n-}"}, {"sha": "ed606dae55f21d2f3a85aee6e5d0ed1680d2a558", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/455fa01abcc60be6393ca9045d49e6f895b88c3c/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455fa01abcc60be6393ca9045d49e6f895b88c3c/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=455fa01abcc60be6393ca9045d49e6f895b88c3c", "patch": "@@ -1,42 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::cell::Cell;\n-\n-#[derive(Debug)]\n-struct r<'a> {\n-  i: &'a Cell<isize>,\n-}\n-\n-impl<'a> Drop for r<'a> {\n-    fn drop(&mut self) {\n-        unsafe {\n-            self.i.set(self.i.get() + 1);\n-        }\n-    }\n-}\n-\n-fn f<T>(__isize: Vec<T> , _j: Vec<T> ) {\n-}\n-\n-fn clone<T: Clone>(t: &T) -> T { t.clone() }\n-\n-fn main() {\n-    let i1 = &Cell::new(0);\n-    let i2 = &Cell::new(1);\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n-    let r1 = vec!(Box::new(r { i: i1 }));\n-    let r2 = vec!(Box::new(r { i: i2 }));\n-    f(clone(&r1), clone(&r2));\n-    //~^ ERROR the trait `std::clone::Clone` is not implemented for the type\n-    //~^^ ERROR the trait `std::clone::Clone` is not implemented for the type\n-    println!(\"{:?}\", (r2, i1.get()));\n-    println!(\"{:?}\", (r1, i2.get()));\n-}"}, {"sha": "3dcc7d248d72db316eb7848174d9f19ae48c38de", "filename": "src/test/compile-fail/unsized-bare-typaram.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Funsized-bare-typaram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Funsized-bare-typaram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-bare-typaram.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn bar<T: Sized>() { }\n-fn foo<T: ?Sized>() { bar::<T>() } //~ ERROR the trait `std::marker::Sized` is not implemented\n+fn foo<T: ?Sized>() { bar::<T>() } //~ ERROR `T: std::marker::Sized` is not satisfied\n fn main() { }"}, {"sha": "61b2b01b355841d5b998bbd74d1e882a23f983fc", "filename": "src/test/compile-fail/unsized-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -15,14 +15,14 @@ fn not_sized<T: ?Sized>() { }\n enum Foo<U> { FooSome(U), FooNone }\n fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n-//~^ ERROR the trait `std::marker::Sized` is not implemented\n+//~^ ERROR `T: std::marker::Sized` is not satisfied\n //\n // Not OK: `T` is not sized.\n \n enum Bar<U: ?Sized> { BarSome(U), BarNone }\n fn bar1<T: ?Sized>() { not_sized::<Bar<T>>() }\n fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }\n-//~^ ERROR the trait `std::marker::Sized` is not implemented\n+//~^ ERROR `T: std::marker::Sized` is not satisfied\n //\n // Not OK: `Bar<T>` is not sized, but it should be.\n "}, {"sha": "4d0774f2ce44157743fbdc6135a37874b7808eb7", "filename": "src/test/compile-fail/unsized-inherent-impl-self-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Funsized-inherent-impl-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Funsized-inherent-impl-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-inherent-impl-self-type.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -14,7 +14,7 @@\n \n struct S5<Y>(Y);\n \n-impl<X: ?Sized> S5<X> { //~ ERROR not implemented\n+impl<X: ?Sized> S5<X> { //~ ERROR E0277\n }\n \n fn main() { }"}, {"sha": "bbefb2fcecd80f7ba78fcd03abedf8d7fa702e7e", "filename": "src/test/compile-fail/unsized-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -15,14 +15,14 @@ fn not_sized<T: ?Sized>() { }\n struct Foo<T> { data: T }\n fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n-//~^ ERROR the trait `std::marker::Sized` is not implemented\n+//~^ ERROR `T: std::marker::Sized` is not satisfied\n //\n // Not OK: `T` is not sized.\n \n struct Bar<T: ?Sized> { data: T }\n fn bar1<T: ?Sized>() { not_sized::<Bar<T>>() }\n fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }\n-//~^ ERROR the trait `std::marker::Sized` is not implemented\n+//~^ ERROR `T: std::marker::Sized` is not satisfied\n //\n // Not OK: `Bar<T>` is not sized, but it should be.\n "}, {"sha": "c919bdf924f6566bb8b707451d7b860e3e397e31", "filename": "src/test/compile-fail/unsized-trait-impl-self-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-self-type.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -17,7 +17,7 @@ trait T3<Z: ?Sized> {\n \n struct S5<Y>(Y);\n \n-impl<X: ?Sized> T3<X> for S5<X> { //~ ERROR not implemented\n+impl<X: ?Sized> T3<X> for S5<X> { //~ ERROR E0277\n }\n \n fn main() { }"}, {"sha": "ad5e4c2daef9ea010cc8eb8f086f7a2721195e53", "filename": "src/test/compile-fail/unsized-trait-impl-trait-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-trait-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-trait-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-trait-arg.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -16,7 +16,7 @@ trait T2<Z> {\n }\n struct S4<Y: ?Sized>(Box<Y>);\n impl<X: ?Sized> T2<X> for S4<X> {\n-    //~^ ERROR `std::marker::Sized` is not implemented for the type `X`\n+    //~^ ERROR `X: std::marker::Sized` is not satisfied\n }\n \n fn main() { }"}, {"sha": "f88165c02e988cd5e34bc3af44292b6cdb0d2a9c", "filename": "src/test/compile-fail/unsized3.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized3.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -15,7 +15,7 @@ use std::marker;\n // Unbounded.\n fn f1<X: ?Sized>(x: &X) {\n     f2::<X>(x);\n-    //~^ ERROR the trait `std::marker::Sized` is not implemented\n+    //~^ ERROR `X: std::marker::Sized` is not satisfied\n }\n fn f2<X>(x: &X) {\n }\n@@ -26,7 +26,7 @@ trait T {\n }\n fn f3<X: ?Sized + T>(x: &X) {\n     f4::<X>(x);\n-    //~^ ERROR the trait `std::marker::Sized` is not implemented\n+    //~^ ERROR `X: std::marker::Sized` is not satisfied\n }\n fn f4<X: T>(x: &X) {\n }\n@@ -40,7 +40,7 @@ fn f5<Y>(x: &Y) {}\n fn f6<X: ?Sized>(x: &X) {}\n fn f7<X: ?Sized>(x1: &E<X>, x2: &E<X>) {\n     f5(x1);\n-    //~^ ERROR the trait `std::marker::Sized` is not implemented\n+    //~^ ERROR `X: std::marker::Sized` is not satisfied\n     f6(x2); // ok\n }\n \n@@ -52,19 +52,19 @@ struct S<X: ?Sized> {\n \n fn f8<X: ?Sized>(x1: &S<X>, x2: &S<X>) {\n     f5(x1);\n-    //~^ ERROR the trait `std::marker::Sized` is not implemented\n+    //~^ ERROR `X: std::marker::Sized` is not satisfied\n     f6(x2); // ok\n }\n \n // Test some tuples.\n fn f9<X: ?Sized>(x1: Box<S<X>>, x2: Box<E<X>>) {\n     f5(&(*x1, 34));\n-    //~^ ERROR the trait `std::marker::Sized` is not implemented\n+    //~^ ERROR `X: std::marker::Sized` is not satisfied\n }\n \n fn f10<X: ?Sized>(x1: Box<S<X>>, x2: Box<E<X>>) {\n     f5(&(32, *x2));\n-    //~^ ERROR the trait `std::marker::Sized` is not implemented\n+    //~^ ERROR `X: std::marker::Sized` is not satisfied\n }\n \n pub fn main() {"}, {"sha": "3e6c9cc4061e1cb8ff7a02bf94e5048404f4d410", "filename": "src/test/compile-fail/unsized5.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Funsized5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Funsized5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized5.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -11,27 +11,27 @@\n // Test `?Sized` types not allowed in fields (except the last one).\n \n struct S1<X: ?Sized> {\n-    f1: X, //~ ERROR `std::marker::Sized` is not implemented\n+    f1: X, //~ ERROR `X: std::marker::Sized` is not satisfied\n     f2: isize,\n }\n struct S2<X: ?Sized> {\n     f: isize,\n-    g: X, //~ ERROR `std::marker::Sized` is not implemented\n+    g: X, //~ ERROR `X: std::marker::Sized` is not satisfied\n     h: isize,\n }\n struct S3 {\n-    f: str, //~ ERROR `std::marker::Sized` is not implemented\n+    f: str, //~ ERROR `str: std::marker::Sized` is not satisfied\n     g: [usize]\n }\n struct S4 {\n-    f: [u8], //~ ERROR `std::marker::Sized` is not implemented\n+    f: [u8], //~ ERROR `[u8]: std::marker::Sized` is not satisfied\n     g: usize\n }\n enum E<X: ?Sized> {\n-    V1(X, isize), //~ERROR `std::marker::Sized` is not implemented\n+    V1(X, isize), //~ERROR `X: std::marker::Sized` is not satisfied\n }\n enum F<X: ?Sized> {\n-    V2{f1: X, f: isize}, //~ERROR `std::marker::Sized` is not implemented\n+    V2{f1: X, f: isize}, //~ERROR `X: std::marker::Sized` is not satisfied\n }\n \n pub fn main() {"}, {"sha": "663cb0a17161a6b26263bc3f6b7a8f090c77bcce", "filename": "src/test/compile-fail/unsized6.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized6.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -15,27 +15,27 @@ trait T {}\n fn f1<X: ?Sized>(x: &X) {\n     let _: X; // <-- this is OK, no bindings created, no initializer.\n     let _: (isize, (X, isize)); // same\n-    let y: X; //~ERROR the trait `std::marker::Sized` is not implemented\n-    let y: (isize, (X, isize)); //~ERROR the trait `std::marker::Sized` is not implemented\n+    let y: X; //~ERROR `X: std::marker::Sized` is not satisfied\n+    let y: (isize, (X, isize)); //~ERROR `X: std::marker::Sized` is not satisfied\n }\n fn f2<X: ?Sized + T>(x: &X) {\n-    let y: X; //~ERROR the trait `std::marker::Sized` is not implemented\n-    let y: (isize, (X, isize)); //~ERROR the trait `std::marker::Sized` is not implemented\n+    let y: X; //~ERROR `X: std::marker::Sized` is not satisfied\n+    let y: (isize, (X, isize)); //~ERROR `X: std::marker::Sized` is not satisfied\n }\n \n fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-    let y: X = *x1; //~ERROR the trait `std::marker::Sized` is not implemented\n-    let y = *x2; //~ERROR the trait `std::marker::Sized` is not implemented\n-    let (y, z) = (*x3, 4); //~ERROR the trait `std::marker::Sized` is not implemented\n+    let y: X = *x1; //~ERROR `X: std::marker::Sized` is not satisfied\n+    let y = *x2; //~ERROR `X: std::marker::Sized` is not satisfied\n+    let (y, z) = (*x3, 4); //~ERROR `X: std::marker::Sized` is not satisfied\n }\n fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-    let y: X = *x1;         //~ERROR the trait `std::marker::Sized` is not implemented\n-    let y = *x2;            //~ERROR the trait `std::marker::Sized` is not implemented\n-    let (y, z) = (*x3, 4); //~ERROR the trait `std::marker::Sized` is not implemented\n+    let y: X = *x1;         //~ERROR `X: std::marker::Sized` is not satisfied\n+    let y = *x2;            //~ERROR `X: std::marker::Sized` is not satisfied\n+    let (y, z) = (*x3, 4); //~ERROR `X: std::marker::Sized` is not satisfied\n }\n \n-fn g1<X: ?Sized>(x: X) {} //~ERROR the trait `std::marker::Sized` is not implemented\n-fn g2<X: ?Sized + T>(x: X) {} //~ERROR the trait `std::marker::Sized` is not implemented\n+fn g1<X: ?Sized>(x: X) {} //~ERROR `X: std::marker::Sized` is not satisfied\n+fn g2<X: ?Sized + T>(x: X) {} //~ERROR `X: std::marker::Sized` is not satisfied\n \n pub fn main() {\n }"}, {"sha": "25868c594feb675326960008eff1724b43b84763", "filename": "src/test/compile-fail/unsized7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Funsized7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Funsized7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized7.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -20,7 +20,7 @@ trait T1<Z: T> {\n \n struct S3<Y: ?Sized>(Box<Y>);\n impl<X: ?Sized + T> T1<X> for S3<X> {\n-    //~^ ERROR `std::marker::Sized` is not implemented for the type `X`\n+    //~^ ERROR `X: std::marker::Sized` is not satisfied\n }\n \n fn main() { }"}, {"sha": "eb0baff0005ddd53ce54853b1f31223495b7d2b2", "filename": "src/test/compile-fail/vtable-res-trait-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -24,7 +24,7 @@ impl TraitB for isize {\n \n fn call_it<B:TraitB>(b: B)  -> isize {\n     let y = 4;\n-    b.gimme_an_a(y) //~ ERROR the trait `TraitA` is not implemented\n+    b.gimme_an_a(y) //~ ERROR `_: TraitA` is not satisfied\n }\n \n fn main() {"}, {"sha": "1e82f609d2a7f7e91a0cf4a329137f449c120ef6", "filename": "src/test/compile-fail/wf-impl-associated-type-trait.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fwf-impl-associated-type-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fwf-impl-associated-type-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-impl-associated-type-trait.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -25,9 +25,8 @@ pub trait Foo {\n \n impl<T> Foo for T {\n     type Bar = MySet<T>;\n-    //~^ ERROR the trait `MyHash` is not implemented for the type `T`\n+    //~^ ERROR the trait bound `T: MyHash` is not satisfied\n }\n \n #[rustc_error]\n fn main() { }\n-"}, {"sha": "458ee6694247e29baf6c6010a11a8973cadffb7e", "filename": "src/test/compile-fail/where-clause-constraints-are-local-for-inherent-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fwhere-clause-constraints-are-local-for-inherent-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fwhere-clause-constraints-are-local-for-inherent-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhere-clause-constraints-are-local-for-inherent-impl.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -21,7 +21,7 @@ impl<T> Foo<T> {\n \n     fn fails_copy(self) {\n         require_copy(self.x);\n-        //~^ ERROR the trait `std::marker::Copy` is not implemented for the type `T`\n+        //~^ ERROR the trait bound `T: std::marker::Copy` is not satisfied\n     }\n }\n "}, {"sha": "b3f99f2ae253d9f026b779179f5afd40f918bca5", "filename": "src/test/compile-fail/where-clause-constraints-are-local-for-trait-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fwhere-clause-constraints-are-local-for-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fwhere-clause-constraints-are-local-for-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhere-clause-constraints-are-local-for-trait-impl.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -26,7 +26,7 @@ impl<T> Foo<T> for Bar<T> {\n \n     fn fails_copy(self) {\n         require_copy(self.x);\n-        //~^ ERROR the trait `std::marker::Copy` is not implemented for the type `T`\n+        //~^ ERROR the trait bound `T: std::marker::Copy` is not satisfied\n     }\n }\n "}, {"sha": "05a58daf906881b9fbe42e50d40c5c0a3e5baa07", "filename": "src/test/compile-fail/where-clause-method-substituion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fwhere-clause-method-substituion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fwhere-clause-method-substituion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhere-clause-method-substituion.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -28,5 +28,5 @@ impl Bar<X> for isize {\n \n fn main() {\n     1.method::<X>();\n-    //~^ ERROR the trait `Foo<X>` is not implemented for the type `X`\n+    //~^ ERROR the trait bound `X: Foo<X>` is not satisfied\n }"}, {"sha": "1ac03330afd195e06fd25392afffee75567818b3", "filename": "src/test/compile-fail/where-clauses-method-unsatisfied.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-method-unsatisfied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-method-unsatisfied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-method-unsatisfied.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -26,5 +26,5 @@ impl<T> Foo<T> {\n fn main() {\n     let x = Foo { value: Bar };\n     x.equals(&x);\n-    //~^ ERROR the trait `std::cmp::Eq` is not implemented for the type `Bar`\n+    //~^ ERROR `Bar: std::cmp::Eq` is not satisfied\n }"}, {"sha": "278a8db4e1ad481ddb518c4b01fc46926315a145", "filename": "src/test/compile-fail/where-clauses-unsatisfied.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-unsatisfied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-unsatisfied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-unsatisfied.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -15,5 +15,5 @@ struct Struct;\n \n fn main() {\n     drop(equal(&Struct, &Struct))\n-    //~^ ERROR the trait `std::cmp::Eq` is not implemented\n+    //~^ ERROR the trait bound `Struct: std::cmp::Eq` is not satisfied\n }"}, {"sha": "bf8fc29217338bf2e6e953ccac2ec4eb608ea196", "filename": "src/test/compile-fail/where-for-self-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fwhere-for-self-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a118a8932c99b902548cb7ca8c249222c053a/src%2Ftest%2Fcompile-fail%2Fwhere-for-self-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhere-for-self-2.rs?ref=444a118a8932c99b902548cb7ca8c249222c053a", "patch": "@@ -29,5 +29,5 @@ fn foo<T>(x: &T)\n \n fn main() {\n     foo(&X);\n-    //~^ error: `for<'a> Bar` is not implemented\n+    //~^ error: `for<'a> &'a _: Bar` is not satisfied\n }"}]}