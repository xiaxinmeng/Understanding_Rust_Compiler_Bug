{"sha": "8b2092803e71180cd352f42041bf1725dc4ad1f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMjA5MjgwM2U3MTE4MGNkMzUyZjQyMDQxYmYxNzI1ZGM0YWQxZjY=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-06-13T01:27:14Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-06-13T01:27:18Z"}, "message": "Stabilize Option::zip", "tree": {"sha": "768d865771ee2eb72f9f69522ee2886b22743dab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/768d865771ee2eb72f9f69522ee2886b22743dab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b2092803e71180cd352f42041bf1725dc4ad1f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b2092803e71180cd352f42041bf1725dc4ad1f6", "html_url": "https://github.com/rust-lang/rust/commit/8b2092803e71180cd352f42041bf1725dc4ad1f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b2092803e71180cd352f42041bf1725dc4ad1f6/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4fbb93113aa4f0a0cd08e74afb35381bbfbc7f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4fbb93113aa4f0a0cd08e74afb35381bbfbc7f0", "html_url": "https://github.com/rust-lang/rust/commit/f4fbb93113aa4f0a0cd08e74afb35381bbfbc7f0"}], "stats": {"total": 25, "additions": 10, "deletions": 15}, "files": [{"sha": "fe05e914e6d440cccad3964011f5978c49655402", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b2092803e71180cd352f42041bf1725dc4ad1f6/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b2092803e71180cd352f42041bf1725dc4ad1f6/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=8b2092803e71180cd352f42041bf1725dc4ad1f6", "patch": "@@ -145,7 +145,6 @@\n #![feature(associated_type_bounds)]\n #![feature(const_type_id)]\n #![feature(const_caller_location)]\n-#![feature(option_zip)]\n #![feature(no_niche)] // rust-lang/rust#68303\n \n #[prelude_import]"}, {"sha": "5f0a12678ff432a00b501a0419670a2540ab1694", "filename": "src/libcore/option.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b2092803e71180cd352f42041bf1725dc4ad1f6/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b2092803e71180cd352f42041bf1725dc4ad1f6/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=8b2092803e71180cd352f42041bf1725dc4ad1f6", "patch": "@@ -926,17 +926,19 @@ impl<T> Option<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(option_zip)]\n     /// let x = Some(1);\n     /// let y = Some(\"hi\");\n     /// let z = None::<u8>;\n     ///\n     /// assert_eq!(x.zip(y), Some((1, \"hi\")));\n     /// assert_eq!(x.zip(z), None);\n     /// ```\n-    #[unstable(feature = \"option_zip\", issue = \"70086\")]\n+    #[stable(feature = \"option_zip_option\", since = \"1.46.0\")]\n     pub fn zip<U>(self, other: Option<U>) -> Option<(T, U)> {\n-        self.zip_with(other, |a, b| (a, b))\n+        match (self, other) {\n+            (Some(a), Some(b)) => Some((a, b)),\n+            _ => None,\n+        }\n     }\n \n     /// Zips `self` and another `Option` with function `f`."}, {"sha": "ea886cd1f9e9b38c394184ed4f0eb0bbc9279bc9", "filename": "src/librustc_trait_selection/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b2092803e71180cd352f42041bf1725dc4ad1f6/src%2Flibrustc_trait_selection%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b2092803e71180cd352f42041bf1725dc4ad1f6/src%2Flibrustc_trait_selection%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Flib.rs?ref=8b2092803e71180cd352f42041bf1725dc4ad1f6", "patch": "@@ -16,7 +16,6 @@\n #![feature(in_band_lifetimes)]\n #![feature(crate_visibility_modifier)]\n #![feature(or_patterns)]\n-#![feature(option_zip)]\n #![recursion_limit = \"512\"] // For rustdoc\n \n #[macro_use]"}, {"sha": "88145015ba8bd529490705891d4fce901e481aaf", "filename": "src/tools/clippy/clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8b2092803e71180cd352f42041bf1725dc4ad1f6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b2092803e71180cd352f42041bf1725dc4ad1f6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=8b2092803e71180cd352f42041bf1725dc4ad1f6", "patch": "@@ -88,7 +88,7 @@ fn double_check<'a>(cx: &LateContext<'_, '_>, left: &'a Expr<'_>, right: &'a Exp\n         let upper = check_upper_bound(l);\n         let lower = check_lower_bound(r);\n \n-        transpose(upper, lower).and_then(|(l, r)| l.combine(r, cx))\n+        upper.zip(lower).and_then(|(l, r)| l.combine(r, cx))\n     };\n \n     upper_lower(left, right).or_else(|| upper_lower(right, left))\n@@ -131,7 +131,10 @@ impl<'a> Conversion<'a> {\n \n     /// Checks if the to-type is the same (if there is a type constraint)\n     fn has_compatible_to_type(&self, other: &Self) -> bool {\n-        transpose(self.to_type.as_ref(), other.to_type.as_ref()).map_or(true, |(l, r)| l == r)\n+        match (self.to_type, other.to_type) {\n+            (Some(l), Some(r)) => l == r,\n+            _ => true,\n+        }\n     }\n \n     /// Try to construct a new conversion if the conversion type is valid\n@@ -322,14 +325,6 @@ fn int_ty_to_sym<'tcx>(path: &QPath<'_>) -> Option<&'tcx str> {\n     }\n }\n \n-/// (Option<T>, Option<U>) -> Option<(T, U)>\n-fn transpose<T, U>(lhs: Option<T>, rhs: Option<U>) -> Option<(T, U)> {\n-    match (lhs, rhs) {\n-        (Some(l), Some(r)) => Some((l, r)),\n-        _ => None,\n-    }\n-}\n-\n /// Will return the expressions as if they were expr1 <= expr2\n fn normalize_le_ge<'a>(op: &BinOp, left: &'a Expr<'a>, right: &'a Expr<'a>) -> Option<(&'a Expr<'a>, &'a Expr<'a>)> {\n     match op.node {"}]}