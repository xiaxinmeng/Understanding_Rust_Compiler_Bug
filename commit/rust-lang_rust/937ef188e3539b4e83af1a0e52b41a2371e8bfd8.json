{"sha": "937ef188e3539b4e83af1a0e52b41a2371e8bfd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzN2VmMTg4ZTM1MzliNGU4M2FmMWEwZTUyYjQxYTIzNzFlOGJmZDg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-25T06:59:25Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-25T18:03:31Z"}, "message": "std: Remove unused iotask field `active`", "tree": {"sha": "c72c371a2596fc0ef833321fa7b7e201e1b5ff94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c72c371a2596fc0ef833321fa7b7e201e1b5ff94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/937ef188e3539b4e83af1a0e52b41a2371e8bfd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/937ef188e3539b4e83af1a0e52b41a2371e8bfd8", "html_url": "https://github.com/rust-lang/rust/commit/937ef188e3539b4e83af1a0e52b41a2371e8bfd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/937ef188e3539b4e83af1a0e52b41a2371e8bfd8/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81b8e20f31dbc5b2e985ba4109bf86fe6e06f2e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/81b8e20f31dbc5b2e985ba4109bf86fe6e06f2e2", "html_url": "https://github.com/rust-lang/rust/commit/81b8e20f31dbc5b2e985ba4109bf86fe6e06f2e2"}], "stats": {"total": 45, "additions": 17, "deletions": 28}, "files": [{"sha": "86401c880061a6783cb773d9e5a5d984403363fa", "filename": "src/libstd/uv_iotask.rs", "status": "modified", "additions": 17, "deletions": 28, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/937ef188e3539b4e83af1a0e52b41a2371e8bfd8/src%2Flibstd%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/937ef188e3539b4e83af1a0e52b41a2371e8bfd8/src%2Flibstd%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_iotask.rs?ref=937ef188e3539b4e83af1a0e52b41a2371e8bfd8", "patch": "@@ -114,7 +114,6 @@ fn run_loop(iotask_ch: chan<iotask>) unsafe {\n     // initialize our loop data and store it in the loop\n     let data: iotask_loop_data = {\n         async_handle: async_handle,\n-        mut active: true,\n         msg_po_ptr: addr_of(msg_po)\n     };\n     ll::set_data_for_uv_handle(async_handle, addr_of(data));\n@@ -137,7 +136,6 @@ fn run_loop(iotask_ch: chan<iotask>) unsafe {\n // data that lives for the lifetime of the high-evel oo\n type iotask_loop_data = {\n     async_handle: *ll::uv_async_t,\n-    mut active: bool,\n     msg_po_ptr: *port<iotask_msg>\n };\n \n@@ -158,29 +156,27 @@ crust fn wake_up_cb(async_handle: *ll::uv_async_t,\n                      async_handle, status));\n     let loop_ptr = ll::get_loop_for_uv_handle(async_handle);\n     let data = ll::get_data_for_uv_handle(async_handle) as *iotask_loop_data;\n-    // FIXME: What is this checking?\n-    if (*data).active {\n-        let msg_po = *((*data).msg_po_ptr);\n-        while msg_po.peek() {\n-            let msg = msg_po.recv();\n-            if (*data).active {\n-                alt msg {\n-                  interaction(cb) {\n-                    cb(loop_ptr);\n-                  }\n-                  teardown_loop {\n-                    begin_teardown(data);\n-                  }\n-                }\n-            } else {\n-                // FIXME: drop msg ?\n-            }\n+    let msg_po = *((*data).msg_po_ptr);\n+    while msg_po.peek() {\n+        let msg = msg_po.recv();\n+        alt msg {\n+          interaction(cb) {\n+            cb(loop_ptr);\n+          }\n+          teardown_loop {\n+            begin_teardown(data);\n+          }\n         }\n-    } else {\n-        // loop not active\n     }\n }\n \n+fn begin_teardown(data: *iotask_loop_data) unsafe {\n+    log(debug, \"iotask begin_teardown() called, close async_handle\");\n+    // call user-suppled before_tear_down cb\n+    let async_handle = (*data).async_handle;\n+    ll::close(async_handle as *c_void, tear_down_close_cb);\n+}\n+\n crust fn tear_down_close_cb(handle: *ll::uv_async_t) unsafe {\n     let loop_ptr = ll::get_loop_for_uv_handle(handle);\n     let loop_refs = ll::loop_refcount(loop_ptr);\n@@ -189,13 +185,6 @@ crust fn tear_down_close_cb(handle: *ll::uv_async_t) unsafe {\n     assert loop_refs == 1i32;\n }\n \n-fn begin_teardown(data: *iotask_loop_data) unsafe {\n-    log(debug, \"iotask begin_teardown() called, close async_handle\");\n-    // call user-suppled before_tear_down cb\n-    let async_handle = (*data).async_handle;\n-    ll::close(async_handle as *c_void, tear_down_close_cb);\n-}\n-\n #[cfg(test)]\n mod test {\n     crust fn async_close_cb(handle: *ll::uv_async_t) unsafe {"}]}