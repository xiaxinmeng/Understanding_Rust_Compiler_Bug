{"sha": "182b7c38d7a55bb6f9f238085c6bebf7d28367eb", "node_id": "C_kwDOAAsO6NoAKDE4MmI3YzM4ZDdhNTViYjZmOWYyMzgwODVjNmJlYmY3ZDI4MzY3ZWI", "commit": {"author": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-04-06T14:35:49Z"}, "committer": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-04-07T11:39:21Z"}, "message": "Fix `as_deref_mut` false positives in `needless_option_as_deref`\n\nAlso moves the lint to the methods directory", "tree": {"sha": "7580db26404bd324ee910bb5ab7dbd916d00904e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7580db26404bd324ee910bb5ab7dbd916d00904e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/182b7c38d7a55bb6f9f238085c6bebf7d28367eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/182b7c38d7a55bb6f9f238085c6bebf7d28367eb", "html_url": "https://github.com/rust-lang/rust/commit/182b7c38d7a55bb6f9f238085c6bebf7d28367eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/182b7c38d7a55bb6f9f238085c6bebf7d28367eb/comments", "author": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "409a936f3b65db06bf0a9d167afcdc7bfafad47f", "url": "https://api.github.com/repos/rust-lang/rust/commits/409a936f3b65db06bf0a9d167afcdc7bfafad47f", "html_url": "https://github.com/rust-lang/rust/commit/409a936f3b65db06bf0a9d167afcdc7bfafad47f"}], "stats": {"total": 211, "additions": 136, "deletions": 75}, "files": [{"sha": "341c7e397d351cd6491d24e475800d3d4baa5eb7", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/182b7c38d7a55bb6f9f238085c6bebf7d28367eb/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182b7c38d7a55bb6f9f238085c6bebf7d28367eb/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=182b7c38d7a55bb6f9f238085c6bebf7d28367eb", "patch": "@@ -176,6 +176,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(methods::MAP_COLLECT_RESULT_UNIT),\n     LintId::of(methods::MAP_FLATTEN),\n     LintId::of(methods::MAP_IDENTITY),\n+    LintId::of(methods::NEEDLESS_OPTION_AS_DEREF),\n     LintId::of(methods::NEEDLESS_SPLITN),\n     LintId::of(methods::NEW_RET_NO_SELF),\n     LintId::of(methods::OK_EXPECT),\n@@ -225,7 +226,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(needless_bool::NEEDLESS_BOOL),\n     LintId::of(needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE),\n     LintId::of(needless_late_init::NEEDLESS_LATE_INIT),\n-    LintId::of(needless_option_as_deref::NEEDLESS_OPTION_AS_DEREF),\n     LintId::of(needless_question_mark::NEEDLESS_QUESTION_MARK),\n     LintId::of(needless_update::NEEDLESS_UPDATE),\n     LintId::of(neg_cmp_op_on_partial_ord::NEG_CMP_OP_ON_PARTIAL_ORD),"}, {"sha": "10369a855ae6e007f43469e7c58e4f38e4368376", "filename": "clippy_lints/src/lib.register_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/182b7c38d7a55bb6f9f238085c6bebf7d28367eb/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182b7c38d7a55bb6f9f238085c6bebf7d28367eb/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_complexity.rs?ref=182b7c38d7a55bb6f9f238085c6bebf7d28367eb", "patch": "@@ -44,6 +44,7 @@ store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec!\n     LintId::of(methods::MANUAL_SPLIT_ONCE),\n     LintId::of(methods::MAP_FLATTEN),\n     LintId::of(methods::MAP_IDENTITY),\n+    LintId::of(methods::NEEDLESS_OPTION_AS_DEREF),\n     LintId::of(methods::NEEDLESS_SPLITN),\n     LintId::of(methods::OPTION_AS_REF_DEREF),\n     LintId::of(methods::OPTION_FILTER_MAP),\n@@ -60,7 +61,6 @@ store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec!\n     LintId::of(needless_bool::BOOL_COMPARISON),\n     LintId::of(needless_bool::NEEDLESS_BOOL),\n     LintId::of(needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE),\n-    LintId::of(needless_option_as_deref::NEEDLESS_OPTION_AS_DEREF),\n     LintId::of(needless_question_mark::NEEDLESS_QUESTION_MARK),\n     LintId::of(needless_update::NEEDLESS_UPDATE),\n     LintId::of(neg_cmp_op_on_partial_ord::NEG_CMP_OP_ON_PARTIAL_ORD),"}, {"sha": "e5f5c6cd31c867ed763f3777becfae966f5b32fc", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/182b7c38d7a55bb6f9f238085c6bebf7d28367eb/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182b7c38d7a55bb6f9f238085c6bebf7d28367eb/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=182b7c38d7a55bb6f9f238085c6bebf7d28367eb", "patch": "@@ -315,6 +315,7 @@ store.register_lints(&[\n     methods::MAP_FLATTEN,\n     methods::MAP_IDENTITY,\n     methods::MAP_UNWRAP_OR,\n+    methods::NEEDLESS_OPTION_AS_DEREF,\n     methods::NEEDLESS_SPLITN,\n     methods::NEW_RET_NO_SELF,\n     methods::OK_EXPECT,\n@@ -386,7 +387,6 @@ store.register_lints(&[\n     needless_continue::NEEDLESS_CONTINUE,\n     needless_for_each::NEEDLESS_FOR_EACH,\n     needless_late_init::NEEDLESS_LATE_INIT,\n-    needless_option_as_deref::NEEDLESS_OPTION_AS_DEREF,\n     needless_pass_by_value::NEEDLESS_PASS_BY_VALUE,\n     needless_question_mark::NEEDLESS_QUESTION_MARK,\n     needless_update::NEEDLESS_UPDATE,"}, {"sha": "a9a77f5ae046afd932612e8559be3822ddd2f2f4", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/182b7c38d7a55bb6f9f238085c6bebf7d28367eb/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182b7c38d7a55bb6f9f238085c6bebf7d28367eb/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=182b7c38d7a55bb6f9f238085c6bebf7d28367eb", "patch": "@@ -308,7 +308,6 @@ mod needless_borrowed_ref;\n mod needless_continue;\n mod needless_for_each;\n mod needless_late_init;\n-mod needless_option_as_deref;\n mod needless_pass_by_value;\n mod needless_question_mark;\n mod needless_update;\n@@ -536,7 +535,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(ptr::Ptr));\n     store.register_late_pass(|| Box::new(ptr_eq::PtrEq));\n     store.register_late_pass(|| Box::new(needless_bool::NeedlessBool));\n-    store.register_late_pass(|| Box::new(needless_option_as_deref::OptionNeedlessDeref));\n     store.register_late_pass(|| Box::new(needless_bool::BoolComparison));\n     store.register_late_pass(|| Box::new(needless_for_each::NeedlessForEach));\n     store.register_late_pass(|| Box::new(misc::MiscLints));"}, {"sha": "4a2bcca13b426de51d6146d2988ee066346feb37", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/182b7c38d7a55bb6f9f238085c6bebf7d28367eb/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182b7c38d7a55bb6f9f238085c6bebf7d28367eb/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=182b7c38d7a55bb6f9f238085c6bebf7d28367eb", "patch": "@@ -41,6 +41,7 @@ mod map_collect_result_unit;\n mod map_flatten;\n mod map_identity;\n mod map_unwrap_or;\n+mod needless_option_as_deref;\n mod ok_expect;\n mod option_as_ref_deref;\n mod option_map_or_none;\n@@ -2106,6 +2107,30 @@ declare_clippy_lint! {\n     \"using `.collect::<Vec<String>>().join(\\\"\\\")` on an iterator\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for no-op uses of `Option::{as_deref, as_deref_mut}`,\n+    /// for example, `Option<&T>::as_deref()` returns the same type.\n+    ///\n+    /// ### Why is this bad?\n+    /// Redundant code and improving readability.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let a = Some(&1);\n+    /// let b = a.as_deref(); // goes from Option<&i32> to Option<&i32>\n+    /// ```\n+    /// Could be written as:\n+    /// ```rust\n+    /// let a = Some(&1);\n+    /// let b = a;\n+    /// ```\n+    #[clippy::version = \"1.57.0\"]\n+    pub NEEDLESS_OPTION_AS_DEREF,\n+    complexity,\n+    \"no-op use of `deref` or `deref_mut` method to `Option`.\"\n+}\n+\n pub struct Methods {\n     avoid_breaking_exported_api: bool,\n     msrv: Option<RustcVersion>,\n@@ -2193,6 +2218,7 @@ impl_lint_pass!(Methods => [\n     UNNECESSARY_TO_OWNED,\n     UNNECESSARY_JOIN,\n     ERR_EXPECT,\n+    NEEDLESS_OPTION_AS_DEREF,\n ]);\n \n /// Extracts a method call name, args, and `Span` of the method name.\n@@ -2425,6 +2451,9 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n                     unnecessary_lazy_eval::check(cx, expr, recv, arg, \"and\");\n                 }\n             },\n+            (\"as_deref\" | \"as_deref_mut\", []) => {\n+                needless_option_as_deref::check(cx, expr, recv, name);\n+            },\n             (\"as_mut\", []) => useless_asref::check(cx, expr, \"as_mut\", recv),\n             (\"as_ref\", []) => useless_asref::check(cx, expr, \"as_ref\", recv),\n             (\"assume_init\", []) => uninit_assumed_init::check(cx, expr, recv),"}, {"sha": "7030baf19ff5cf9bd9fd714a8ac9e319e957a54d", "filename": "clippy_lints/src/methods/needless_option_as_deref.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/182b7c38d7a55bb6f9f238085c6bebf7d28367eb/clippy_lints%2Fsrc%2Fmethods%2Fneedless_option_as_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182b7c38d7a55bb6f9f238085c6bebf7d28367eb/clippy_lints%2Fsrc%2Fmethods%2Fneedless_option_as_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fneedless_option_as_deref.rs?ref=182b7c38d7a55bb6f9f238085c6bebf7d28367eb", "patch": "@@ -0,0 +1,37 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::path_res;\n+use clippy_utils::source::snippet_opt;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::usage::local_used_after_expr;\n+use rustc_errors::Applicability;\n+use rustc_hir::def::Res;\n+use rustc_hir::Expr;\n+use rustc_lint::LateContext;\n+use rustc_span::sym;\n+\n+use super::NEEDLESS_OPTION_AS_DEREF;\n+\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, name: &str) {\n+    let typeck = cx.typeck_results();\n+    let outer_ty = typeck.expr_ty(expr);\n+\n+    if is_type_diagnostic_item(cx, outer_ty, sym::Option) && outer_ty == typeck.expr_ty(recv) {\n+        if name == \"as_deref_mut\" && recv.is_syntactic_place_expr() {\n+            let Res::Local(binding_id) = path_res(cx, recv) else { return };\n+\n+            if local_used_after_expr(cx, binding_id, recv) {\n+                return;\n+            }\n+        }\n+\n+        span_lint_and_sugg(\n+            cx,\n+            NEEDLESS_OPTION_AS_DEREF,\n+            expr.span,\n+            \"derefed type is same as origin\",\n+            \"try this\",\n+            snippet_opt(cx, recv.span).unwrap(),\n+            Applicability::MachineApplicable,\n+        );\n+    }\n+}"}, {"sha": "9d3d7d1f24cbc3dfa86f5a8166fd38eadc02ecd2", "filename": "clippy_lints/src/needless_option_as_deref.rs", "status": "removed", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/409a936f3b65db06bf0a9d167afcdc7bfafad47f/clippy_lints%2Fsrc%2Fneedless_option_as_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409a936f3b65db06bf0a9d167afcdc7bfafad47f/clippy_lints%2Fsrc%2Fneedless_option_as_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_option_as_deref.rs?ref=409a936f3b65db06bf0a9d167afcdc7bfafad47f", "patch": "@@ -1,65 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::source::snippet_opt;\n-use clippy_utils::ty::is_type_diagnostic_item;\n-use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::symbol::sym;\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for no-op uses of Option::{as_deref,as_deref_mut},\n-    /// for example, `Option<&T>::as_deref()` returns the same type.\n-    ///\n-    /// ### Why is this bad?\n-    /// Redundant code and improving readability.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// let a = Some(&1);\n-    /// let b = a.as_deref(); // goes from Option<&i32> to Option<&i32>\n-    /// ```\n-    /// Could be written as:\n-    /// ```rust\n-    /// let a = Some(&1);\n-    /// let b = a;\n-    /// ```\n-    #[clippy::version = \"1.57.0\"]\n-    pub NEEDLESS_OPTION_AS_DEREF,\n-    complexity,\n-    \"no-op use of `deref` or `deref_mut` method to `Option`.\"\n-}\n-\n-declare_lint_pass!(OptionNeedlessDeref=> [\n-    NEEDLESS_OPTION_AS_DEREF,\n-]);\n-\n-impl<'tcx> LateLintPass<'tcx> for OptionNeedlessDeref {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if expr.span.from_expansion() {\n-            return;\n-        }\n-        let typeck = cx.typeck_results();\n-        let outer_ty = typeck.expr_ty(expr);\n-\n-        if_chain! {\n-            if is_type_diagnostic_item(cx,outer_ty,sym::Option);\n-            if let ExprKind::MethodCall(path, [sub_expr], _) = expr.kind;\n-            let symbol = path.ident.as_str();\n-            if symbol == \"as_deref\" || symbol == \"as_deref_mut\";\n-            if outer_ty == typeck.expr_ty(sub_expr);\n-            then{\n-                span_lint_and_sugg(\n-                    cx,\n-                    NEEDLESS_OPTION_AS_DEREF,\n-                    expr.span,\n-                    \"derefed type is same as origin\",\n-                    \"try this\",\n-                    snippet_opt(cx,sub_expr.span).unwrap(),\n-                    Applicability::MachineApplicable\n-                );\n-            }\n-        }\n-    }\n-}"}, {"sha": "c09b07db3dca9787a2c6d585057dcf188e39b508", "filename": "tests/ui/needless_option_as_deref.fixed", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/182b7c38d7a55bb6f9f238085c6bebf7d28367eb/tests%2Fui%2Fneedless_option_as_deref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/182b7c38d7a55bb6f9f238085c6bebf7d28367eb/tests%2Fui%2Fneedless_option_as_deref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_option_as_deref.fixed?ref=182b7c38d7a55bb6f9f238085c6bebf7d28367eb", "patch": "@@ -1,13 +1,41 @@\n // run-rustfix\n \n-#[warn(clippy::needless_option_as_deref)]\n+#![allow(unused)]\n+#![warn(clippy::needless_option_as_deref)]\n \n fn main() {\n     // should lint\n     let _: Option<&usize> = Some(&1);\n     let _: Option<&mut usize> = Some(&mut 1);\n \n+    let mut y = 0;\n+    let mut x = Some(&mut y);\n+    let _ = x;\n+\n     // should not lint\n     let _ = Some(Box::new(1)).as_deref();\n     let _ = Some(Box::new(1)).as_deref_mut();\n+\n+    // #7846\n+    let mut i = 0;\n+    let mut opt_vec = vec![Some(&mut i)];\n+    opt_vec[0].as_deref_mut().unwrap();\n+\n+    let mut i = 0;\n+    let x = &mut Some(&mut i);\n+    (*x).as_deref_mut();\n+\n+    // #8047\n+    let mut y = 0;\n+    let mut x = Some(&mut y);\n+    x.as_deref_mut();\n+    dbg!(x);\n+}\n+\n+struct S<'a> {\n+    opt: Option<&'a mut usize>,\n+}\n+\n+fn from_field<'a>(s: &'a mut S<'a>) -> Option<&'a mut usize> {\n+    s.opt.as_deref_mut()\n }"}, {"sha": "c3ba27ecccf22fe8c09ca1327c62944f8b72d75b", "filename": "tests/ui/needless_option_as_deref.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/182b7c38d7a55bb6f9f238085c6bebf7d28367eb/tests%2Fui%2Fneedless_option_as_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182b7c38d7a55bb6f9f238085c6bebf7d28367eb/tests%2Fui%2Fneedless_option_as_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_option_as_deref.rs?ref=182b7c38d7a55bb6f9f238085c6bebf7d28367eb", "patch": "@@ -1,13 +1,41 @@\n // run-rustfix\n \n-#[warn(clippy::needless_option_as_deref)]\n+#![allow(unused)]\n+#![warn(clippy::needless_option_as_deref)]\n \n fn main() {\n     // should lint\n     let _: Option<&usize> = Some(&1).as_deref();\n     let _: Option<&mut usize> = Some(&mut 1).as_deref_mut();\n \n+    let mut y = 0;\n+    let mut x = Some(&mut y);\n+    let _ = x.as_deref_mut();\n+\n     // should not lint\n     let _ = Some(Box::new(1)).as_deref();\n     let _ = Some(Box::new(1)).as_deref_mut();\n+\n+    // #7846\n+    let mut i = 0;\n+    let mut opt_vec = vec![Some(&mut i)];\n+    opt_vec[0].as_deref_mut().unwrap();\n+\n+    let mut i = 0;\n+    let x = &mut Some(&mut i);\n+    (*x).as_deref_mut();\n+\n+    // #8047\n+    let mut y = 0;\n+    let mut x = Some(&mut y);\n+    x.as_deref_mut();\n+    dbg!(x);\n+}\n+\n+struct S<'a> {\n+    opt: Option<&'a mut usize>,\n+}\n+\n+fn from_field<'a>(s: &'a mut S<'a>) -> Option<&'a mut usize> {\n+    s.opt.as_deref_mut()\n }"}, {"sha": "bc07db5b38ed3ffcb1f161dea22ad85445811857", "filename": "tests/ui/needless_option_as_deref.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/182b7c38d7a55bb6f9f238085c6bebf7d28367eb/tests%2Fui%2Fneedless_option_as_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/182b7c38d7a55bb6f9f238085c6bebf7d28367eb/tests%2Fui%2Fneedless_option_as_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_option_as_deref.stderr?ref=182b7c38d7a55bb6f9f238085c6bebf7d28367eb", "patch": "@@ -1,16 +1,22 @@\n error: derefed type is same as origin\n-  --> $DIR/needless_option_as_deref.rs:7:29\n+  --> $DIR/needless_option_as_deref.rs:8:29\n    |\n LL |     let _: Option<&usize> = Some(&1).as_deref();\n    |                             ^^^^^^^^^^^^^^^^^^^ help: try this: `Some(&1)`\n    |\n    = note: `-D clippy::needless-option-as-deref` implied by `-D warnings`\n \n error: derefed type is same as origin\n-  --> $DIR/needless_option_as_deref.rs:8:33\n+  --> $DIR/needless_option_as_deref.rs:9:33\n    |\n LL |     let _: Option<&mut usize> = Some(&mut 1).as_deref_mut();\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `Some(&mut 1)`\n \n-error: aborting due to 2 previous errors\n+error: derefed type is same as origin\n+  --> $DIR/needless_option_as_deref.rs:13:13\n+   |\n+LL |     let _ = x.as_deref_mut();\n+   |             ^^^^^^^^^^^^^^^^ help: try this: `x`\n+\n+error: aborting due to 3 previous errors\n "}]}