{"sha": "94c061729b66adc777cf346417ab236a5d7d8410", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0YzA2MTcyOWI2NmFkYzc3N2NmMzQ2NDE3YWIyMzZhNWQ3ZDg0MTA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-29T21:46:42Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-29T21:46:42Z"}, "message": "rustc: Resolve external modules and native modules to definition IDs as well", "tree": {"sha": "eadcdc9c3d3846df0a936ca30d99b37f7ebcaf62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eadcdc9c3d3846df0a936ca30d99b37f7ebcaf62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94c061729b66adc777cf346417ab236a5d7d8410", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94c061729b66adc777cf346417ab236a5d7d8410", "html_url": "https://github.com/rust-lang/rust/commit/94c061729b66adc777cf346417ab236a5d7d8410", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94c061729b66adc777cf346417ab236a5d7d8410/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77f85460e6179e1df01ec3c4f015a572b983be80", "url": "https://api.github.com/repos/rust-lang/rust/commits/77f85460e6179e1df01ec3c4f015a572b983be80", "html_url": "https://github.com/rust-lang/rust/commit/77f85460e6179e1df01ec3c4f015a572b983be80"}], "stats": {"total": 33, "additions": 22, "deletions": 11}, "files": [{"sha": "a08de2ab43905db14ffce1f6d186d440e808e6c5", "filename": "src/comp/front/creader.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/94c061729b66adc777cf346417ab236a5d7d8410/src%2Fcomp%2Ffront%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c061729b66adc777cf346417ab236a5d7d8410/src%2Fcomp%2Ffront%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fcreader.rs?ref=94c061729b66adc777cf346417ab236a5d7d8410", "patch": "@@ -360,6 +360,7 @@ impure fn move_to_item(&ebml.reader ebml_r, int item_id) {\n     }\n \n     log #fmt(\"move_to_item: item not found: %d\", item_id);\n+    fail;\n }\n \n // Looks up an item in the given metadata and returns an EBML reader pointing\n@@ -559,11 +560,13 @@ fn lookup_def(session.session sess, &span sp, int cnum, vec[ast.ident] path)\n     did = tup(cnum, did._1);\n \n     // FIXME: It'd be great if we had u8 char literals.\n-    if (kind_ch == ('c' as u8))      { ret ast.def_const(did);  }\n-    else if (kind_ch == ('f' as u8)) { ret ast.def_fn(did);     }\n-    else if (kind_ch == ('y' as u8)) { ret ast.def_ty(did);     }\n-    else if (kind_ch == ('o' as u8)) { ret ast.def_obj(did);    }\n-    else if (kind_ch == ('t' as u8)) { ret ast.def_ty(did);     }\n+    if (kind_ch == ('c' as u8))      { ret ast.def_const(did);      }\n+    else if (kind_ch == ('f' as u8)) { ret ast.def_fn(did);         }\n+    else if (kind_ch == ('y' as u8)) { ret ast.def_ty(did);         }\n+    else if (kind_ch == ('o' as u8)) { ret ast.def_obj(did);        }\n+    else if (kind_ch == ('t' as u8)) { ret ast.def_ty(did);         }\n+    else if (kind_ch == ('m' as u8)) { ret ast.def_mod(did);        }\n+    else if (kind_ch == ('n' as u8)) { ret ast.def_native_mod(did); }\n     else if (kind_ch == ('v' as u8)) {\n         auto tid = get_variant_tag_id(ebml_r);\n         tid = tup(cnum, tid._1);"}, {"sha": "a55fb848543b41b1be942d1287de83b5ebc2a778", "filename": "src/comp/middle/metadata.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/94c061729b66adc777cf346417ab236a5d7d8410/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c061729b66adc777cf346417ab236a5d7d8410/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fmetadata.rs?ref=94c061729b66adc777cf346417ab236a5d7d8410", "patch": "@@ -210,15 +210,17 @@ fn encode_module_item_paths(&ebml.writer ebml_w, &ast._mod module) {\n                 encode_def_id(ebml_w, did);\n                 ebml.end_tag(ebml_w);\n             }\n-            case (ast.item_mod(?id, ?_mod, _)) {\n+            case (ast.item_mod(?id, ?_mod, ?did)) {\n                 ebml.start_tag(ebml_w, tag_paths_mod);\n                 encode_name(ebml_w, id);\n+                encode_def_id(ebml_w, did);\n                 encode_module_item_paths(ebml_w, _mod);\n                 ebml.end_tag(ebml_w);\n             }\n-            case (ast.item_native_mod(?id, ?nmod, _)) {\n+            case (ast.item_native_mod(?id, ?nmod, ?did)) {\n                 ebml.start_tag(ebml_w, tag_paths_mod);\n                 encode_name(ebml_w, id);\n+                encode_def_id(ebml_w, did);\n                 encode_native_module_item_paths(ebml_w, nmod);\n                 ebml.end_tag(ebml_w);\n             }\n@@ -336,11 +338,17 @@ fn encode_info_for_item(@trans.crate_ctxt cx, &ebml.writer ebml_w,\n             encode_symbol(cx, ebml_w, did);\n             ebml.end_tag(ebml_w);\n         }\n-        case (ast.item_mod(_, _, _)) {\n-            // nothing to do\n+        case (ast.item_mod(_, _, ?did)) {\n+            ebml.start_tag(ebml_w, tag_items_item);\n+            encode_def_id(ebml_w, did);\n+            encode_kind(ebml_w, 'm' as u8);\n+            ebml.end_tag(ebml_w);\n         }\n-        case (ast.item_native_mod(_, _, _)) {\n-            // nothing to do\n+        case (ast.item_native_mod(_, _, ?did)) {\n+            ebml.start_tag(ebml_w, tag_items_item);\n+            encode_def_id(ebml_w, did);\n+            encode_kind(ebml_w, 'n' as u8);\n+            ebml.end_tag(ebml_w);\n         }\n         case (ast.item_ty(?id, _, ?tps, ?did, ?ann)) {\n             ebml.start_tag(ebml_w, tag_items_item);"}]}