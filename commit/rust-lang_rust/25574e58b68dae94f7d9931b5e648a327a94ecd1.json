{"sha": "25574e58b68dae94f7d9931b5e648a327a94ecd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NTc0ZTU4YjY4ZGFlOTRmN2Q5OTMxYjVlNjQ4YTMyN2E5NGVjZDE=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-01-09T19:39:23Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-01-09T19:39:23Z"}, "message": "Make core::ops::Place an unsafe trait", "tree": {"sha": "0679be6100cb262046d813cd2624e01a43f464fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0679be6100cb262046d813cd2624e01a43f464fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25574e58b68dae94f7d9931b5e648a327a94ecd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25574e58b68dae94f7d9931b5e648a327a94ecd1", "html_url": "https://github.com/rust-lang/rust/commit/25574e58b68dae94f7d9931b5e648a327a94ecd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25574e58b68dae94f7d9931b5e648a327a94ecd1/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e7a609e635b728eba65d471c985ab462dc4cfc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e7a609e635b728eba65d471c985ab462dc4cfc7", "html_url": "https://github.com/rust-lang/rust/commit/8e7a609e635b728eba65d471c985ab462dc4cfc7"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "3041f85cd4c3a9b4997220940d46de69a6598136", "filename": "src/liballoc/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25574e58b68dae94f7d9931b5e648a327a94ecd1/src%2Fliballoc%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25574e58b68dae94f7d9931b5e648a327a94ecd1/src%2Fliballoc%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbinary_heap.rs?ref=25574e58b68dae94f7d9931b5e648a327a94ecd1", "patch": "@@ -1211,7 +1211,7 @@ where T: Clone + Ord {\n #[unstable(feature = \"collection_placement\",\n            reason = \"placement protocol is subject to change\",\n            issue = \"30172\")]\n-impl<'a, T> Place<T> for BinaryHeapPlace<'a, T>\n+unsafe impl<'a, T> Place<T> for BinaryHeapPlace<'a, T>\n where T: Clone + Ord {\n     fn pointer(&mut self) -> *mut T {\n         self.place.pointer()"}, {"sha": "c8ab3f681f8d65da19917462b1e42e256e5666dc", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25574e58b68dae94f7d9931b5e648a327a94ecd1/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25574e58b68dae94f7d9931b5e648a327a94ecd1/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=25574e58b68dae94f7d9931b5e648a327a94ecd1", "patch": "@@ -142,7 +142,7 @@ pub struct IntermediateBox<T: ?Sized> {\n #[unstable(feature = \"placement_in\",\n            reason = \"placement box design is still being worked out.\",\n            issue = \"27779\")]\n-impl<T> Place<T> for IntermediateBox<T> {\n+unsafe impl<T> Place<T> for IntermediateBox<T> {\n     fn pointer(&mut self) -> *mut T {\n         self.ptr as *mut T\n     }"}, {"sha": "ccb2da46f8de43750a8b5e0dd886ebeed2b40409", "filename": "src/liballoc/linked_list.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25574e58b68dae94f7d9931b5e648a327a94ecd1/src%2Fliballoc%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25574e58b68dae94f7d9931b5e648a327a94ecd1/src%2Fliballoc%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flinked_list.rs?ref=25574e58b68dae94f7d9931b5e648a327a94ecd1", "patch": "@@ -1286,7 +1286,7 @@ impl<'a, T> Placer<T> for FrontPlace<'a, T> {\n #[unstable(feature = \"collection_placement\",\n            reason = \"placement protocol is subject to change\",\n            issue = \"30172\")]\n-impl<'a, T> Place<T> for FrontPlace<'a, T> {\n+unsafe impl<'a, T> Place<T> for FrontPlace<'a, T> {\n     fn pointer(&mut self) -> *mut T {\n         unsafe { &mut (*self.node.pointer()).element }\n     }\n@@ -1341,7 +1341,7 @@ impl<'a, T> Placer<T> for BackPlace<'a, T> {\n #[unstable(feature = \"collection_placement\",\n            reason = \"placement protocol is subject to change\",\n            issue = \"30172\")]\n-impl<'a, T> Place<T> for BackPlace<'a, T> {\n+unsafe impl<'a, T> Place<T> for BackPlace<'a, T> {\n     fn pointer(&mut self) -> *mut T {\n         unsafe { &mut (*self.node.pointer()).element }\n     }"}, {"sha": "4a8982bf85c1fed63cfc29d8c1d55d0c157028d9", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25574e58b68dae94f7d9931b5e648a327a94ecd1/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25574e58b68dae94f7d9931b5e648a327a94ecd1/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=25574e58b68dae94f7d9931b5e648a327a94ecd1", "patch": "@@ -2544,7 +2544,7 @@ impl<'a, T> Placer<T> for PlaceBack<'a, T> {\n #[unstable(feature = \"collection_placement\",\n            reason = \"placement protocol is subject to change\",\n            issue = \"30172\")]\n-impl<'a, T> Place<T> for PlaceBack<'a, T> {\n+unsafe impl<'a, T> Place<T> for PlaceBack<'a, T> {\n     fn pointer(&mut self) -> *mut T {\n         unsafe { self.vec.as_mut_ptr().offset(self.vec.len as isize) }\n     }"}, {"sha": "df49c1df0828fd1e47b79828793cfb89210140d7", "filename": "src/liballoc/vec_deque.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25574e58b68dae94f7d9931b5e648a327a94ecd1/src%2Fliballoc%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25574e58b68dae94f7d9931b5e648a327a94ecd1/src%2Fliballoc%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec_deque.rs?ref=25574e58b68dae94f7d9931b5e648a327a94ecd1", "patch": "@@ -2564,7 +2564,7 @@ impl<'a, T> Placer<T> for PlaceBack<'a, T> {\n #[unstable(feature = \"collection_placement\",\n            reason = \"placement protocol is subject to change\",\n            issue = \"30172\")]\n-impl<'a, T> Place<T> for PlaceBack<'a, T> {\n+unsafe impl<'a, T> Place<T> for PlaceBack<'a, T> {\n     fn pointer(&mut self) -> *mut T {\n         unsafe { self.vec_deque.ptr().offset(self.vec_deque.head as isize) }\n     }\n@@ -2610,7 +2610,7 @@ impl<'a, T> Placer<T> for PlaceFront<'a, T> {\n #[unstable(feature = \"collection_placement\",\n            reason = \"placement protocol is subject to change\",\n            issue = \"30172\")]\n-impl<'a, T> Place<T> for PlaceFront<'a, T> {\n+unsafe impl<'a, T> Place<T> for PlaceFront<'a, T> {\n     fn pointer(&mut self) -> *mut T {\n         let tail = self.vec_deque.wrap_sub(self.vec_deque.tail, 1);\n         unsafe { self.vec_deque.ptr().offset(tail as isize) }"}, {"sha": "4c8c6e63fc6c1149e6829199fc4e1f285b6cd805", "filename": "src/libcore/ops/place.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/25574e58b68dae94f7d9931b5e648a327a94ecd1/src%2Flibcore%2Fops%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25574e58b68dae94f7d9931b5e648a327a94ecd1/src%2Flibcore%2Fops%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fplace.rs?ref=25574e58b68dae94f7d9931b5e648a327a94ecd1", "patch": "@@ -27,10 +27,13 @@\n /// implementation of Place to clean up any intermediate state\n /// (e.g. deallocate box storage, pop a stack, etc).\n #[unstable(feature = \"placement_new_protocol\", issue = \"27779\")]\n-pub trait Place<Data: ?Sized> {\n+pub unsafe trait Place<Data: ?Sized> {\n     /// Returns the address where the input value will be written.\n     /// Note that the data at this address is generally uninitialized,\n     /// and thus one should use `ptr::write` for initializing it.\n+    ///\n+    /// This function must return a valid (non-zero) pointer to\n+    /// a location at which a value of type `Data` can be written.\n     fn pointer(&mut self) -> *mut Data;\n }\n "}, {"sha": "595b01ff77c8f59e932a2839184db95ae9c1efb7", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25574e58b68dae94f7d9931b5e648a327a94ecd1/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25574e58b68dae94f7d9931b5e648a327a94ecd1/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=25574e58b68dae94f7d9931b5e648a327a94ecd1", "patch": "@@ -1932,7 +1932,7 @@ impl<'a, K, V> Placer<V> for Entry<'a, K, V> {\n #[unstable(feature = \"collection_placement\",\n            reason = \"placement protocol is subject to change\",\n            issue = \"30172\")]\n-impl<'a, K, V> Place<V> for EntryPlace<'a, K, V> {\n+unsafe impl<'a, K, V> Place<V> for EntryPlace<'a, K, V> {\n     fn pointer(&mut self) -> *mut V {\n         self.bucket.read_mut().1\n     }"}]}