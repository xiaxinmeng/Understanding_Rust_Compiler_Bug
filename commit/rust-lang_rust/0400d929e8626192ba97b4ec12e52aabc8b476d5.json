{"sha": "0400d929e8626192ba97b4ec12e52aabc8b476d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MDBkOTI5ZTg2MjYxOTJiYTk3YjRlYzEyZTUyYWFiYzhiNDc2ZDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-02T02:40:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-02T02:40:07Z"}, "message": "Auto merge of #32001 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #31919, #31982, #31985, #31989, #31999\n- Failed merges:", "tree": {"sha": "1d76a2732d288f0076f65b618e3ce17c9411e340", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d76a2732d288f0076f65b618e3ce17c9411e340"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0400d929e8626192ba97b4ec12e52aabc8b476d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0400d929e8626192ba97b4ec12e52aabc8b476d5", "html_url": "https://github.com/rust-lang/rust/commit/0400d929e8626192ba97b4ec12e52aabc8b476d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0400d929e8626192ba97b4ec12e52aabc8b476d5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "339a409bfdb6c1e9b280388b5d8d9e898217840f", "url": "https://api.github.com/repos/rust-lang/rust/commits/339a409bfdb6c1e9b280388b5d8d9e898217840f", "html_url": "https://github.com/rust-lang/rust/commit/339a409bfdb6c1e9b280388b5d8d9e898217840f"}, {"sha": "b515bb3b6b6c50539f81bd6e3a1c3c9d92f43e40", "url": "https://api.github.com/repos/rust-lang/rust/commits/b515bb3b6b6c50539f81bd6e3a1c3c9d92f43e40", "html_url": "https://github.com/rust-lang/rust/commit/b515bb3b6b6c50539f81bd6e3a1c3c9d92f43e40"}], "stats": {"total": 353, "additions": 163, "deletions": 190}, "files": [{"sha": "b84b37dbf752cdb8467804368b67e90d8dcab552", "filename": "src/libcollectionstest/str.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0400d929e8626192ba97b4ec12e52aabc8b476d5/src%2Flibcollectionstest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0400d929e8626192ba97b4ec12e52aabc8b476d5/src%2Flibcollectionstest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstr.rs?ref=0400d929e8626192ba97b4ec12e52aabc8b476d5", "patch": "@@ -1508,6 +1508,19 @@ generate_iterator_test! {\n     with str::rsplitn;\n }\n \n+#[test]\n+fn different_str_pattern_forwarding_lifetimes() {\n+    use std::str::pattern::Pattern;\n+\n+    fn foo<'a, P>(p: P) where for<'b> &'b P: Pattern<'a> {\n+        for _ in 0..3 {\n+            \"asdf\".find(&p);\n+        }\n+    }\n+\n+    foo::<&str>(\"x\");\n+}\n+\n mod bench {\n     use test::{Bencher, black_box};\n "}, {"sha": "144adde12e42b119b962b47907941aa226f850ff", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0400d929e8626192ba97b4ec12e52aabc8b476d5/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0400d929e8626192ba97b4ec12e52aabc8b476d5/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=0400d929e8626192ba97b4ec12e52aabc8b476d5", "patch": "@@ -241,6 +241,9 @@ impl<T:Copy> Cell<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T> Send for Cell<T> where T: Send {}\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T> !Sync for Cell<T> {}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T:Copy> Clone for Cell<T> {\n     #[inline]\n@@ -461,6 +464,9 @@ impl<T: ?Sized> RefCell<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T: ?Sized> Send for RefCell<T> where T: Send {}\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: ?Sized> !Sync for RefCell<T> {}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Clone> Clone for RefCell<T> {\n     #[inline]"}, {"sha": "fb15533f33c5405221d5653d4f73760a70e2bece", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0400d929e8626192ba97b4ec12e52aabc8b476d5/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0400d929e8626192ba97b4ec12e52aabc8b476d5/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=0400d929e8626192ba97b4ec12e52aabc8b476d5", "patch": "@@ -285,12 +285,12 @@ impl<T> SliceExt for [T] {\n \n     #[inline]\n     unsafe fn get_unchecked(&self, index: usize) -> &T {\n-        &*(self.repr().data.offset(index as isize))\n+        &*(self.as_ptr().offset(index as isize))\n     }\n \n     #[inline]\n     fn as_ptr(&self) -> *const T {\n-        self.repr().data\n+        self as *const [T] as *const T\n     }\n \n     fn binary_search_by<F>(&self, mut f: F) -> Result<usize, usize> where\n@@ -448,12 +448,12 @@ impl<T> SliceExt for [T] {\n \n     #[inline]\n     unsafe fn get_unchecked_mut(&mut self, index: usize) -> &mut T {\n-        &mut *(self.repr().data as *mut T).offset(index as isize)\n+        &mut *self.as_mut_ptr().offset(index as isize)\n     }\n \n     #[inline]\n     fn as_mut_ptr(&mut self) -> *mut T {\n-        self.repr().data as *mut T\n+        self as *mut [T] as *mut T\n     }\n \n     #[inline]"}, {"sha": "a555b8592912ee9ff4eb127d715eb0c30b1994e4", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0400d929e8626192ba97b4ec12e52aabc8b476d5/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0400d929e8626192ba97b4ec12e52aabc8b476d5/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=0400d929e8626192ba97b4ec12e52aabc8b476d5", "patch": "@@ -1894,7 +1894,7 @@ impl StrExt for str {\n \n     #[inline]\n     fn as_ptr(&self) -> *const u8 {\n-        self.repr().data\n+        self as *const str as *const u8\n     }\n \n     #[inline]"}, {"sha": "abad29cb7751eda4c5662f917312cf4e8bed3623", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0400d929e8626192ba97b4ec12e52aabc8b476d5/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0400d929e8626192ba97b4ec12e52aabc8b476d5/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=0400d929e8626192ba97b4ec12e52aabc8b476d5", "patch": "@@ -492,7 +492,7 @@ impl<'a, F> Pattern<'a> for F where F: FnMut(char) -> bool {\n /////////////////////////////////////////////////////////////////////////////\n \n /// Delegates to the `&str` impl.\n-impl<'a, 'b> Pattern<'a> for &'b &'b str {\n+impl<'a, 'b, 'c> Pattern<'a> for &'c &'b str {\n     pattern_methods!(StrSearcher<'a, 'b>, |&s| s, |s| s);\n }\n "}, {"sha": "e0ede288523b436c0295bc995dd315ddd27b6f60", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 15, "deletions": 70, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/0400d929e8626192ba97b4ec12e52aabc8b476d5/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0400d929e8626192ba97b4ec12e52aabc8b476d5/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=0400d929e8626192ba97b4ec12e52aabc8b476d5", "patch": "@@ -1129,43 +1129,19 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n \n struct SanePrivacyVisitor<'a, 'tcx: 'a> {\n     tcx: &'a ty::ctxt<'tcx>,\n-    in_block: bool,\n }\n \n impl<'a, 'tcx, 'v> Visitor<'v> for SanePrivacyVisitor<'a, 'tcx> {\n-    /// We want to visit items in the context of their containing\n-    /// module and so forth, so supply a crate for doing a deep walk.\n-    fn visit_nested_item(&mut self, item: hir::ItemId) {\n-        self.visit_item(self.tcx.map.expect_item(item.id))\n-    }\n-\n     fn visit_item(&mut self, item: &hir::Item) {\n         self.check_sane_privacy(item);\n-        if self.in_block {\n-            self.check_all_inherited(item);\n-        }\n-\n-        let orig_in_block = self.in_block;\n-\n-        // Modules turn privacy back on, otherwise we inherit\n-        self.in_block = if let hir::ItemMod(..) = item.node { false } else { orig_in_block };\n-\n         intravisit::walk_item(self, item);\n-        self.in_block = orig_in_block;\n-    }\n-\n-    fn visit_block(&mut self, b: &'v hir::Block) {\n-        let orig_in_block = replace(&mut self.in_block, true);\n-        intravisit::walk_block(self, b);\n-        self.in_block = orig_in_block;\n     }\n }\n \n impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n-    /// Validates all of the visibility qualifiers placed on the item given. This\n-    /// ensures that there are no extraneous qualifiers that don't actually do\n-    /// anything. In theory these qualifiers wouldn't parse, but that may happen\n-    /// later on down the road...\n+    /// Validate that items that shouldn't have visibility qualifiers don't have them.\n+    /// Such qualifiers can be set by syntax extensions even if the parser doesn't allow them,\n+    /// so we check things like variant fields too.\n     fn check_sane_privacy(&self, item: &hir::Item) {\n         let check_inherited = |sp, vis, note: &str| {\n             if vis != hir::Inherited {\n@@ -1179,13 +1155,12 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n         };\n \n         match item.node {\n-            // implementations of traits don't need visibility qualifiers because\n-            // that's controlled by having the trait in scope.\n             hir::ItemImpl(_, _, _, Some(..), _, ref impl_items) => {\n                 check_inherited(item.span, item.vis,\n                                 \"visibility qualifiers have no effect on trait impls\");\n                 for impl_item in impl_items {\n-                    check_inherited(impl_item.span, impl_item.vis, \"\");\n+                    check_inherited(impl_item.span, impl_item.vis,\n+                                    \"visibility qualifiers have no effect on trait impl items\");\n                 }\n             }\n             hir::ItemImpl(_, _, _, None, _, _) => {\n@@ -1200,41 +1175,15 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n                 check_inherited(item.span, item.vis,\n                                 \"place qualifiers on individual functions instead\");\n             }\n-            hir::ItemStruct(..) | hir::ItemEnum(..) | hir::ItemTrait(..) |\n-            hir::ItemConst(..) | hir::ItemStatic(..) | hir::ItemFn(..) |\n-            hir::ItemMod(..) | hir::ItemExternCrate(..) |\n-            hir::ItemUse(..) | hir::ItemTy(..) => {}\n-        }\n-    }\n-\n-    /// When inside of something like a function or a method, visibility has no\n-    /// control over anything so this forbids any mention of any visibility\n-    fn check_all_inherited(&self, item: &hir::Item) {\n-        let check_inherited = |sp, vis| {\n-            if vis != hir::Inherited {\n-                span_err!(self.tcx.sess, sp, E0447,\n-                          \"visibility has no effect inside functions or block expressions\");\n-            }\n-        };\n-\n-        check_inherited(item.span, item.vis);\n-        match item.node {\n-            hir::ItemImpl(_, _, _, _, _, ref impl_items) => {\n-                for impl_item in impl_items {\n-                    check_inherited(impl_item.span, impl_item.vis);\n-                }\n-            }\n-            hir::ItemForeignMod(ref fm) => {\n-                for fi in &fm.items {\n-                    check_inherited(fi.span, fi.vis);\n-                }\n-            }\n-            hir::ItemStruct(ref vdata, _) => {\n-                for f in vdata.fields() {\n-                    check_inherited(f.span, f.node.kind.visibility());\n+            hir::ItemEnum(ref def, _) => {\n+                for variant in &def.variants {\n+                    for field in variant.node.data.fields() {\n+                        check_inherited(field.span, field.node.kind.visibility(),\n+                                        \"visibility qualifiers have no effect on variant fields\");\n+                    }\n                 }\n             }\n-            hir::ItemDefaultImpl(..) | hir::ItemEnum(..) | hir::ItemTrait(..) |\n+            hir::ItemStruct(..) | hir::ItemTrait(..) |\n             hir::ItemConst(..) | hir::ItemStatic(..) | hir::ItemFn(..) |\n             hir::ItemMod(..) | hir::ItemExternCrate(..) |\n             hir::ItemUse(..) | hir::ItemTy(..) => {}\n@@ -1821,13 +1770,9 @@ pub fn check_crate(tcx: &ty::ctxt,\n \n     let krate = tcx.map.krate();\n \n-    // Sanity check to make sure that all privacy usage and controls are\n-    // reasonable.\n-    let mut visitor = SanePrivacyVisitor {\n-        tcx: tcx,\n-        in_block: false,\n-    };\n-    intravisit::walk_crate(&mut visitor, krate);\n+    // Sanity check to make sure that all privacy usage is reasonable.\n+    let mut visitor = SanePrivacyVisitor { tcx: tcx };\n+    krate.visit_all_items(&mut visitor);\n \n     // Figure out who everyone's parent is\n     let mut visitor = ParentVisitor {"}, {"sha": "a1144a964fd37ea6016cb2b24237cf3bfbe7891e", "filename": "src/libstd/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0400d929e8626192ba97b4ec12e52aabc8b476d5/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0400d929e8626192ba97b4ec12e52aabc8b476d5/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=0400d929e8626192ba97b4ec12e52aabc8b476d5", "patch": "@@ -23,7 +23,7 @@ fn main() {\n \n     let target = env::var(\"TARGET\").unwrap();\n     let host = env::var(\"HOST\").unwrap();\n-    if !target.contains(\"apple\") && !target.contains(\"msvc\") {\n+    if !target.contains(\"apple\") && !target.contains(\"msvc\") && !target.contains(\"emscripten\"){\n         build_libbacktrace(&host, &target);\n     }\n "}, {"sha": "dbcc2bc95bc2147511f201a82960373ad591ef25", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0400d929e8626192ba97b4ec12e52aabc8b476d5/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0400d929e8626192ba97b4ec12e52aabc8b476d5/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=0400d929e8626192ba97b4ec12e52aabc8b476d5", "patch": "@@ -299,6 +299,9 @@ pub struct Receiver<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T: Send> Send for Receiver<T> { }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T> !Sync for Receiver<T> { }\n+\n /// An iterator over messages on a receiver, this iterator will block\n /// whenever `next` is called, waiting for a new message, and `None` will be\n /// returned when the corresponding channel has hung up.\n@@ -327,6 +330,9 @@ pub struct Sender<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T: Send> Send for Sender<T> { }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T> !Sync for Sender<T> { }\n+\n /// The sending-half of Rust's synchronous channel type. This half can only be\n /// owned by one thread, but it can be cloned to send to other threads.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "305acfec40114aad89cc92258594b8cc07c338b4", "filename": "src/test/compile-fail/comm-not-freeze-receiver.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/339a409bfdb6c1e9b280388b5d8d9e898217840f/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339a409bfdb6c1e9b280388b5d8d9e898217840f/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze-receiver.rs?ref=339a409bfdb6c1e9b280388b5d8d9e898217840f", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::sync::mpsc::Receiver;\n-\n-fn test<T: Sync>() {}\n-\n-fn main() {\n-    test::<Receiver<isize>>();   //~ ERROR: `core::marker::Sync` is not implemented\n-}"}, {"sha": "de2c96920c38b45d8bcbfe5d38a32eb54a2c0ec3", "filename": "src/test/compile-fail/comm-not-freeze.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/339a409bfdb6c1e9b280388b5d8d9e898217840f/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339a409bfdb6c1e9b280388b5d8d9e898217840f/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze.rs?ref=339a409bfdb6c1e9b280388b5d8d9e898217840f", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::sync::mpsc::Sender;\n-\n-fn test<T: Sync>() {}\n-\n-fn main() {\n-    test::<Sender<isize>>();     //~ ERROR: `core::marker::Sync` is not implemented\n-}"}, {"sha": "4bc3442871f5d749dba9e83d1e297ea1b0a0e281", "filename": "src/test/compile-fail/no_share-rc.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/339a409bfdb6c1e9b280388b5d8d9e898217840f/src%2Ftest%2Fcompile-fail%2Fno_share-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339a409bfdb6c1e9b280388b5d8d9e898217840f/src%2Ftest%2Fcompile-fail%2Fno_share-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_share-rc.rs?ref=339a409bfdb6c1e9b280388b5d8d9e898217840f", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::rc::Rc;\n-use std::cell::RefCell;\n-\n-fn bar<T: Sync>(_: T) {}\n-\n-fn main() {\n-    let x = Rc::new(RefCell::new(5));\n-    bar(x);\n-    //~^ ERROR the trait `core::marker::Sync` is not implemented\n-}"}, {"sha": "a60138c6e1f69aa13884b3bd56ccf68fc2ea097f", "filename": "src/test/compile-fail/not-sync.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0400d929e8626192ba97b4ec12e52aabc8b476d5/src%2Ftest%2Fcompile-fail%2Fnot-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0400d929e8626192ba97b4ec12e52aabc8b476d5/src%2Ftest%2Fcompile-fail%2Fnot-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-sync.rs?ref=0400d929e8626192ba97b4ec12e52aabc8b476d5", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::cell::{Cell, RefCell};\n+use std::rc::{Rc, Weak};\n+use std::sync::mpsc::{Receiver, Sender, SyncSender};\n+\n+fn test<T: Sync>() {}\n+\n+fn main() {\n+    test::<Cell<i32>>();\n+    //~^ ERROR marker::Sync` is not implemented for the type `core::cell::Cell<i32>`\n+    test::<RefCell<i32>>();\n+    //~^ ERROR marker::Sync` is not implemented for the type `core::cell::RefCell<i32>`\n+\n+    test::<Rc<i32>>();\n+    //~^ ERROR marker::Sync` is not implemented for the type `alloc::rc::Rc<i32>`\n+    test::<Weak<i32>>();\n+    //~^ ERROR marker::Sync` is not implemented for the type `alloc::rc::Weak<i32>`\n+\n+    test::<Receiver<i32>>();\n+    //~^ ERROR marker::Sync` is not implemented for the type `std::sync::mpsc::Receiver<i32>`\n+    test::<Sender<i32>>();\n+    //~^ ERROR marker::Sync` is not implemented for the type `std::sync::mpsc::Sender<i32>`\n+    test::<SyncSender<i32>>();\n+    //~^ ERROR marker::Sync` is not implemented for the type `std::sync::mpsc::SyncSender<i32>`\n+}"}, {"sha": "063848f62aa9ee9f23c5cd100fd0ce657586cd36", "filename": "src/test/compile-fail/privacy-sanity.rs", "status": "modified", "additions": 18, "deletions": 32, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0400d929e8626192ba97b4ec12e52aabc8b476d5/src%2Ftest%2Fcompile-fail%2Fprivacy-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0400d929e8626192ba97b4ec12e52aabc8b476d5/src%2Ftest%2Fcompile-fail%2Fprivacy-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy-sanity.rs?ref=0400d929e8626192ba97b4ec12e52aabc8b476d5", "patch": "@@ -40,74 +40,60 @@ pub extern \"C\" { //~ ERROR unnecessary visibility qualifier\n \n const MAIN: u8 = {\n     trait MarkerTr {}\n-    pub trait Tr { //~ ERROR visibility has no effect inside functions or block\n+    pub trait Tr {\n         fn f();\n         const C: u8;\n         type T;\n     }\n-    pub struct S { //~ ERROR visibility has no effect inside functions or block\n-        pub a: u8 //~ ERROR visibility has no effect inside functions or block\n+    pub struct S {\n+        pub a: u8\n     }\n-    struct Ts(pub u8); //~ ERROR visibility has no effect inside functions or block\n+    struct Ts(pub u8);\n \n     pub impl MarkerTr for .. {} //~ ERROR unnecessary visibility qualifier\n-    //~^ ERROR visibility has no effect inside functions or block\n     pub impl Tr for S {  //~ ERROR unnecessary visibility qualifier\n-    //~^ ERROR visibility has no effect inside functions or block\n         pub fn f() {} //~ ERROR unnecessary visibility qualifier\n-        //~^ ERROR visibility has no effect inside functions or block\n         pub const C: u8 = 0; //~ ERROR unnecessary visibility qualifier\n-        //~^ ERROR visibility has no effect inside functions or block\n         pub type T = u8; //~ ERROR unnecessary visibility qualifier\n-        //~^ ERROR visibility has no effect inside functions or block\n     }\n     pub impl S { //~ ERROR unnecessary visibility qualifier\n-    //~^ ERROR visibility has no effect inside functions or block\n-        pub fn f() {} //~ ERROR visibility has no effect inside functions or block\n-        pub const C: u8 = 0; //~ ERROR visibility has no effect inside functions or block\n-        // pub type T = u8; // ERROR visibility has no effect inside functions or block\n+        pub fn f() {}\n+        pub const C: u8 = 0;\n+        // pub type T = u8;\n     }\n     pub extern \"C\" { //~ ERROR unnecessary visibility qualifier\n-    //~^ ERROR visibility has no effect inside functions or block\n-        pub fn f(); //~ ERROR visibility has no effect inside functions or block\n-        pub static St: u8; //~ ERROR visibility has no effect inside functions or block\n+        pub fn f();\n+        pub static St: u8;\n     }\n \n     0\n };\n \n fn main() {\n     trait MarkerTr {}\n-    pub trait Tr { //~ ERROR visibility has no effect inside functions or block\n+    pub trait Tr {\n         fn f();\n         const C: u8;\n         type T;\n     }\n-    pub struct S { //~ ERROR visibility has no effect inside functions or block\n-        pub a: u8 //~ ERROR visibility has no effect inside functions or block\n+    pub struct S {\n+        pub a: u8\n     }\n-    struct Ts(pub u8); //~ ERROR visibility has no effect inside functions or block\n+    struct Ts(pub u8);\n \n     pub impl MarkerTr for .. {} //~ ERROR unnecessary visibility qualifier\n-    //~^ ERROR visibility has no effect inside functions or block\n     pub impl Tr for S {  //~ ERROR unnecessary visibility qualifier\n-    //~^ ERROR visibility has no effect inside functions or block\n         pub fn f() {} //~ ERROR unnecessary visibility qualifier\n-        //~^ ERROR visibility has no effect inside functions or block\n         pub const C: u8 = 0; //~ ERROR unnecessary visibility qualifier\n-        //~^ ERROR visibility has no effect inside functions or block\n         pub type T = u8; //~ ERROR unnecessary visibility qualifier\n-        //~^ ERROR visibility has no effect inside functions or block\n     }\n     pub impl S { //~ ERROR unnecessary visibility qualifier\n-    //~^ ERROR visibility has no effect inside functions or block\n-        pub fn f() {} //~ ERROR visibility has no effect inside functions or block\n-        pub const C: u8 = 0; //~ ERROR visibility has no effect inside functions or block\n-        // pub type T = u8; // ERROR visibility has no effect inside functions or block\n+        pub fn f() {}\n+        pub const C: u8 = 0;\n+        // pub type T = u8;\n     }\n     pub extern \"C\" { //~ ERROR unnecessary visibility qualifier\n-    //~^ ERROR visibility has no effect inside functions or block\n-        pub fn f(); //~ ERROR visibility has no effect inside functions or block\n-        pub static St: u8; //~ ERROR visibility has no effect inside functions or block\n+        pub fn f();\n+        pub static St: u8;\n     }\n }"}, {"sha": "113393490cb6de18fb5c3c60dcdcaeca9a530a01", "filename": "src/test/compile-fail/unnecessary-private.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/339a409bfdb6c1e9b280388b5d8d9e898217840f/src%2Ftest%2Fcompile-fail%2Funnecessary-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339a409bfdb6c1e9b280388b5d8d9e898217840f/src%2Ftest%2Fcompile-fail%2Funnecessary-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funnecessary-private.rs?ref=339a409bfdb6c1e9b280388b5d8d9e898217840f", "patch": "@@ -1,27 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    pub use std::usize; //~ ERROR: visibility has no effect\n-    pub struct A; //~ ERROR: visibility has no effect\n-    pub enum B {} //~ ERROR: visibility has no effect\n-    pub trait C { //~ ERROR: visibility has no effect\n-        fn foo(&self) {}\n-    }\n-    impl A {\n-        pub fn foo(&self) {} //~ ERROR: visibility has no effect\n-    }\n-\n-    struct D {\n-        pub foo: isize, //~ ERROR: visibility has no effect\n-    }\n-    pub fn foo() {} //~ ERROR: visibility has no effect\n-    pub mod bar {} //~ ERROR: visibility has no effect\n-}"}, {"sha": "a12e569df2bc925625ec8094a0085f60d2509521", "filename": "src/test/run-pass/issue-31776.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/0400d929e8626192ba97b4ec12e52aabc8b476d5/src%2Ftest%2Frun-pass%2Fissue-31776.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0400d929e8626192ba97b4ec12e52aabc8b476d5/src%2Ftest%2Frun-pass%2Fissue-31776.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-31776.rs?ref=0400d929e8626192ba97b4ec12e52aabc8b476d5", "patch": "@@ -0,0 +1,64 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Various scenarios in which `pub` is required in blocks\n+\n+struct S;\n+\n+mod m {\n+    fn f() {\n+        impl ::S {\n+            pub fn s(&self) {}\n+        }\n+    }\n+}\n+\n+// ------------------------------------------------------\n+\n+pub trait Tr {\n+    type A;\n+}\n+pub struct S1;\n+\n+fn f() {\n+    pub struct Z;\n+\n+    impl ::Tr for ::S1 {\n+        type A = Z; // Private-in-public error unless `struct Z` is pub\n+    }\n+}\n+\n+// ------------------------------------------------------\n+\n+trait Tr1 {\n+    type A;\n+    fn pull(&self) -> Self::A;\n+}\n+struct S2;\n+\n+mod m1 {\n+    fn f() {\n+        struct Z {\n+            pub field: u8\n+        }\n+\n+        impl ::Tr1 for ::S2 {\n+            type A = Z;\n+            fn pull(&self) -> Self::A { Z{field: 10} }\n+        }\n+    }\n+}\n+\n+// ------------------------------------------------------\n+\n+fn main() {\n+    S.s(); // Privacy error, unless `fn s` is pub\n+    let a = S2.pull().field; // Privacy error unless `field: u8` is pub\n+}"}]}