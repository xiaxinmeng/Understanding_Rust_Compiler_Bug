{"sha": "679000cc0e98b2810a2d1c76ae77ce2574a4ab91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3OTAwMGNjMGU5OGIyODEwYTJkMWM3NmFlNzdjZTI1NzRhNGFiOTE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-16T21:31:46Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-18T07:48:56Z"}, "message": "allow_internal_unstable: Avoid some more allocations", "tree": {"sha": "9a4933e716a54fa28bc8b38ee1910536558e47e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a4933e716a54fa28bc8b38ee1910536558e47e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/679000cc0e98b2810a2d1c76ae77ce2574a4ab91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/679000cc0e98b2810a2d1c76ae77ce2574a4ab91", "html_url": "https://github.com/rust-lang/rust/commit/679000cc0e98b2810a2d1c76ae77ce2574a4ab91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/679000cc0e98b2810a2d1c76ae77ce2574a4ab91/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "961ba8f9efbb51d80e7e73a609f6587c0ffa0623", "url": "https://api.github.com/repos/rust-lang/rust/commits/961ba8f9efbb51d80e7e73a609f6587c0ffa0623", "html_url": "https://github.com/rust-lang/rust/commit/961ba8f9efbb51d80e7e73a609f6587c0ffa0623"}], "stats": {"total": 39, "additions": 16, "deletions": 23}, "files": [{"sha": "a491b1a099b8a70ab2d8963c2dc12b74fae91760", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/679000cc0e98b2810a2d1c76ae77ce2574a4ab91/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/679000cc0e98b2810a2d1c76ae77ce2574a4ab91/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=679000cc0e98b2810a2d1c76ae77ce2574a4ab91", "patch": "@@ -142,6 +142,9 @@ pub struct LoweringContext<'a> {\n     current_hir_id_owner: Vec<(DefIndex, u32)>,\n     item_local_id_counters: NodeMap<u32>,\n     node_id_to_hir_id: IndexVec<NodeId, hir::HirId>,\n+\n+    allow_try_trait: Option<Lrc<[Symbol]>>,\n+    allow_gen_future: Option<Lrc<[Symbol]>>,\n }\n \n pub trait Resolver {\n@@ -267,6 +270,8 @@ pub fn lower_crate(\n         lifetimes_to_define: Vec::new(),\n         is_collecting_in_band_lifetimes: false,\n         in_scope_lifetimes: Vec::new(),\n+        allow_try_trait: Some([sym::try_trait][..].into()),\n+        allow_gen_future: Some([sym::gen_future][..].into()),\n     }.lower_crate(krate)\n }\n \n@@ -1156,7 +1161,7 @@ impl<'a> LoweringContext<'a> {\n         let unstable_span = self.mark_span_with_reason(\n             CompilerDesugaringKind::Async,\n             span,\n-            Some(vec![sym::gen_future].into()),\n+            self.allow_gen_future.clone(),\n         );\n         let gen_future = self.expr_std_path(\n             unstable_span, &[sym::future, sym::from_generator], None, ThinVec::new());\n@@ -4382,7 +4387,7 @@ impl<'a> LoweringContext<'a> {\n                     let unstable_span = this.mark_span_with_reason(\n                         CompilerDesugaringKind::TryBlock,\n                         body.span,\n-                        Some(vec![sym::try_trait].into()),\n+                        this.allow_try_trait.clone(),\n                     );\n                     let mut block = this.lower_block(body, true).into_inner();\n                     let tail = block.expr.take().map_or_else(\n@@ -4968,13 +4973,13 @@ impl<'a> LoweringContext<'a> {\n                 let unstable_span = self.mark_span_with_reason(\n                     CompilerDesugaringKind::QuestionMark,\n                     e.span,\n-                    Some(vec![sym::try_trait].into()),\n+                    self.allow_try_trait.clone(),\n                 );\n                 let try_span = self.sess.source_map().end_point(e.span);\n                 let try_span = self.mark_span_with_reason(\n                     CompilerDesugaringKind::QuestionMark,\n                     try_span,\n-                    Some(vec![sym::try_trait].into()),\n+                    self.allow_try_trait.clone(),\n                 );\n \n                 // `Try::into_result(<expr>)`\n@@ -5776,7 +5781,7 @@ impl<'a> LoweringContext<'a> {\n         let gen_future_span = self.mark_span_with_reason(\n             CompilerDesugaringKind::Await,\n             await_span,\n-            Some(vec![sym::gen_future].into()),\n+            self.allow_gen_future.clone(),\n         );\n \n         // let mut pinned = <expr>;"}, {"sha": "1fe6094fca6861eeb1f2ba417f99769b2e5ed0ef", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/679000cc0e98b2810a2d1c76ae77ce2574a4ab91/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/679000cc0e98b2810a2d1c76ae77ce2574a4ab91/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=679000cc0e98b2810a2d1c76ae77ce2574a4ab91", "patch": "@@ -6,7 +6,6 @@ use syntax::edition::Edition;\n use syntax::ext::base::{Annotatable, ExtCtxt, Resolver, MultiItemModifier};\n use syntax::ext::base::{SyntaxExtension, SyntaxExtensionKind};\n use syntax::ext::build::AstBuilder;\n-use syntax::ext::hygiene::{Mark, SyntaxContext};\n use syntax::ptr::P;\n use syntax::symbol::{Symbol, sym};\n use syntax_pos::Span;\n@@ -71,6 +70,7 @@ macro_rules! derive_traits {\n \n         pub fn register_builtin_derives(resolver: &mut dyn Resolver, edition: Edition) {\n             let allow_internal_unstable = Some([\n+                sym::core_intrinsics,\n                 sym::rustc_attrs,\n                 Symbol::intern(\"derive_clone_copy\"),\n                 Symbol::intern(\"derive_eq\"),\n@@ -163,24 +163,11 @@ fn hygienic_type_parameter(item: &Annotatable, base: &str) -> String {\n \n /// Constructs an expression that calls an intrinsic\n fn call_intrinsic(cx: &ExtCtxt<'_>,\n-                  mut span: Span,\n+                  span: Span,\n                   intrinsic: &str,\n                   args: Vec<P<ast::Expr>>)\n                   -> P<ast::Expr> {\n-    let intrinsic_allowed_via_allow_internal_unstable = cx\n-        .current_expansion.mark.expn_info().unwrap()\n-        .allow_internal_unstable.map_or(false, |features| features.iter().any(|&s|\n-            s == sym::core_intrinsics\n-        ));\n-    if intrinsic_allowed_via_allow_internal_unstable {\n-        span = span.with_ctxt(cx.backtrace());\n-    } else { // Avoid instability errors with user defined curstom derives, cc #36316\n-        let mut info = cx.current_expansion.mark.expn_info().unwrap();\n-        info.allow_internal_unstable = Some(vec![sym::core_intrinsics].into());\n-        let mark = Mark::fresh(Mark::root());\n-        mark.set_expn_info(info);\n-        span = span.with_ctxt(SyntaxContext::empty().apply_mark(mark));\n-    }\n+    let span = span.with_ctxt(cx.backtrace());\n     let path = cx.std_path(&[sym::intrinsics, Symbol::intern(intrinsic)]);\n     let call = cx.expr_call_global(span, path, args);\n "}, {"sha": "b868f5b273c4e6942671bc09f1276a5af34a4274", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/679000cc0e98b2810a2d1c76ae77ce2574a4ab91/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/679000cc0e98b2810a2d1c76ae77ce2574a4ab91/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=679000cc0e98b2810a2d1c76ae77ce2574a4ab91", "patch": "@@ -103,14 +103,15 @@ pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n     }\n \n     // format_args uses `unstable` things internally.\n+    let allow_internal_unstable = Some([sym::fmt_internals][..].into());\n     register(Symbol::intern(\"format_args\"), SyntaxExtension {\n-        allow_internal_unstable: Some([sym::fmt_internals][..].into()),\n+        allow_internal_unstable: allow_internal_unstable.clone(),\n         ..SyntaxExtension::default(\n             SyntaxExtensionKind::LegacyBang(Box::new(format::expand_format_args)), edition\n         )\n     });\n     register(sym::format_args_nl, SyntaxExtension {\n-        allow_internal_unstable: Some([sym::fmt_internals][..].into()),\n+        allow_internal_unstable,\n         ..SyntaxExtension::default(\n             SyntaxExtensionKind::LegacyBang(Box::new(format::expand_format_args_nl)), edition\n         )"}]}