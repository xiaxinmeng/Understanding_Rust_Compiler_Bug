{"sha": "80459bbf774f6238936837ace61fa6c1c95051ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwNDU5YmJmNzc0ZjYyMzg5MzY4MzdhY2U2MWZhNmMxYzk1MDUxZWM=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-19T21:22:55Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-27T21:26:36Z"}, "message": "Improve concurrency tests.", "tree": {"sha": "e5fa9af50eed4fa8f6ffe5dd688d36dfe866e744", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5fa9af50eed4fa8f6ffe5dd688d36dfe866e744"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80459bbf774f6238936837ace61fa6c1c95051ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80459bbf774f6238936837ace61fa6c1c95051ec", "html_url": "https://github.com/rust-lang/rust/commit/80459bbf774f6238936837ace61fa6c1c95051ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80459bbf774f6238936837ace61fa6c1c95051ec/comments", "author": null, "committer": null, "parents": [{"sha": "94cbe88e8073381dbf7aeed2f0cf720b08f05785", "url": "https://api.github.com/repos/rust-lang/rust/commits/94cbe88e8073381dbf7aeed2f0cf720b08f05785", "html_url": "https://github.com/rust-lang/rust/commit/94cbe88e8073381dbf7aeed2f0cf720b08f05785"}], "stats": {"total": 166, "additions": 87, "deletions": 79}, "files": [{"sha": "684dd0e86f60827b2ed73966853196c36a5c3395", "filename": "tests/compile-fail/concurrency/dangling_tls_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80459bbf774f6238936837ace61fa6c1c95051ec/tests%2Fcompile-fail%2Fconcurrency%2Fdangling_tls_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80459bbf774f6238936837ace61fa6c1c95051ec/tests%2Fcompile-fail%2Fconcurrency%2Fdangling_tls_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconcurrency%2Fdangling_tls_lib.rs?ref=80459bbf774f6238936837ace61fa6c1c95051ec", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows\n+// ignore-windows: Concurrency on Windows is not supported yet.\n \n #![feature(thread_local_internals)]\n "}, {"sha": "19dce431c8b1cb710dc8e4ad8080765667aa62e4", "filename": "tests/compile-fail/concurrency/libc_pthread_rwlock_write_read_deadlock.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/94cbe88e8073381dbf7aeed2f0cf720b08f05785/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_rwlock_write_read_deadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94cbe88e8073381dbf7aeed2f0cf720b08f05785/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_rwlock_write_read_deadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_rwlock_write_read_deadlock.rs?ref=94cbe88e8073381dbf7aeed2f0cf720b08f05785", "patch": "@@ -1,32 +0,0 @@\n-// ignore-windows: No libc on Windows\n-\n-#![feature(rustc_private)]\n-\n-extern crate libc;\n-\n-use std::cell::UnsafeCell;\n-use std::sync::Arc;\n-use std::thread;\n-\n-struct RwLock(UnsafeCell<libc::pthread_rwlock_t>);\n-\n-unsafe impl Send for RwLock {}\n-unsafe impl Sync for RwLock {}\n-\n-fn new_lock() -> Arc<RwLock> {\n-    Arc::new(RwLock(UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER)))\n-}\n-\n-fn main() {\n-    unsafe {\n-        let lock = new_lock();\n-        assert_eq!(libc::pthread_rwlock_rdlock(lock.0.get() as *mut _), 0);\n-\n-        let lock_copy = lock.clone();\n-        thread::spawn(move || {\n-            assert_eq!(libc::pthread_rwlock_wrlock(lock_copy.0.get() as *mut _), 0); //~ ERROR: deadlock\n-        })\n-        .join()\n-        .unwrap();\n-    }\n-}"}, {"sha": "098c1c2fe26cc7b8ab0e2746bf05a1002f3d8389", "filename": "tests/compile-fail/concurrency/libc_pthread_rwlock_write_write_deadlock.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/94cbe88e8073381dbf7aeed2f0cf720b08f05785/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_rwlock_write_write_deadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94cbe88e8073381dbf7aeed2f0cf720b08f05785/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_rwlock_write_write_deadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_rwlock_write_write_deadlock.rs?ref=94cbe88e8073381dbf7aeed2f0cf720b08f05785", "patch": "@@ -1,32 +0,0 @@\n-// ignore-windows: No libc on Windows\n-\n-#![feature(rustc_private)]\n-\n-extern crate libc;\n-\n-use std::cell::UnsafeCell;\n-use std::sync::Arc;\n-use std::thread;\n-\n-struct RwLock(UnsafeCell<libc::pthread_rwlock_t>);\n-\n-unsafe impl Send for RwLock {}\n-unsafe impl Sync for RwLock {}\n-\n-fn new_lock() -> Arc<RwLock> {\n-    Arc::new(RwLock(UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER)))\n-}\n-\n-fn main() {\n-    unsafe {\n-        let lock = new_lock();\n-        assert_eq!(libc::pthread_rwlock_wrlock(lock.0.get() as *mut _), 0);\n-\n-        let lock_copy = lock.clone();\n-        thread::spawn(move || {\n-            assert_eq!(libc::pthread_rwlock_wrlock(lock_copy.0.get() as *mut _), 0); //~ ERROR: deadlock\n-        })\n-        .join()\n-        .unwrap();\n-    }\n-}"}, {"sha": "f0e4ab3817d343580114f7283e311fa9cc87e285", "filename": "tests/compile-fail/concurrency/thread-spawn.rs", "status": "renamed", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/80459bbf774f6238936837ace61fa6c1c95051ec/tests%2Fcompile-fail%2Fconcurrency%2Fthread-spawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80459bbf774f6238936837ace61fa6c1c95051ec/tests%2Fcompile-fail%2Fconcurrency%2Fthread-spawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconcurrency%2Fthread-spawn.rs?ref=80459bbf774f6238936837ace61fa6c1c95051ec", "patch": "@@ -1,5 +1,6 @@\n-// ignore-linux\n-// ignore-macos\n+// ignore-linux: Only Windows is not supported.\n+// ignore-macos: Only Windows is not supported.\n+\n use std::thread;\n \n // error-pattern: Miri does not support threading", "previous_filename": "tests/compile-fail/thread-spawn.rs"}, {"sha": "5d04635a36c8883e1c5c4c9061cc51b5ae0fd16e", "filename": "tests/compile-fail/sync/libc_pthread_mutex_deadlock.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/80459bbf774f6238936837ace61fa6c1c95051ec/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_mutex_deadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80459bbf774f6238936837ace61fa6c1c95051ec/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_mutex_deadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_mutex_deadlock.rs?ref=80459bbf774f6238936837ace61fa6c1c95051ec", "previous_filename": "tests/compile-fail/concurrency/libc_pthread_mutex_deadlock.rs"}, {"sha": "3009721abe2e13ec3e57608e4e3e7855b1b3d449", "filename": "tests/compile-fail/sync/libc_pthread_mutex_wrong_owner.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/80459bbf774f6238936837ace61fa6c1c95051ec/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_mutex_wrong_owner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80459bbf774f6238936837ace61fa6c1c95051ec/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_mutex_wrong_owner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_mutex_wrong_owner.rs?ref=80459bbf774f6238936837ace61fa6c1c95051ec", "previous_filename": "tests/compile-fail/concurrency/libc_pthread_mutex_wrong_owner.rs"}, {"sha": "19dce431c8b1cb710dc8e4ad8080765667aa62e4", "filename": "tests/compile-fail/sync/libc_pthread_rwlock_write_read_deadlock.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/80459bbf774f6238936837ace61fa6c1c95051ec/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80459bbf774f6238936837ace61fa6c1c95051ec/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock.rs?ref=80459bbf774f6238936837ace61fa6c1c95051ec", "patch": "@@ -4,10 +4,29 @@\n \n extern crate libc;\n \n+use std::cell::UnsafeCell;\n+use std::sync::Arc;\n+use std::thread;\n+\n+struct RwLock(UnsafeCell<libc::pthread_rwlock_t>);\n+\n+unsafe impl Send for RwLock {}\n+unsafe impl Sync for RwLock {}\n+\n+fn new_lock() -> Arc<RwLock> {\n+    Arc::new(RwLock(UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER)))\n+}\n+\n fn main() {\n-    let rw = std::cell::UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER);\n     unsafe {\n-        assert_eq!(libc::pthread_rwlock_wrlock(rw.get()), 0);\n-        libc::pthread_rwlock_rdlock(rw.get()); //~ ERROR: deadlock\n+        let lock = new_lock();\n+        assert_eq!(libc::pthread_rwlock_rdlock(lock.0.get() as *mut _), 0);\n+\n+        let lock_copy = lock.clone();\n+        thread::spawn(move || {\n+            assert_eq!(libc::pthread_rwlock_wrlock(lock_copy.0.get() as *mut _), 0); //~ ERROR: deadlock\n+        })\n+        .join()\n+        .unwrap();\n     }\n }"}, {"sha": "1b460e7174d28f40f8c56fc89fc15d7762ff4596", "filename": "tests/compile-fail/sync/libc_pthread_rwlock_write_read_deadlock_single_thread.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/80459bbf774f6238936837ace61fa6c1c95051ec/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock_single_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80459bbf774f6238936837ace61fa6c1c95051ec/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock_single_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock_single_thread.rs?ref=80459bbf774f6238936837ace61fa6c1c95051ec", "patch": "@@ -0,0 +1,13 @@\n+// ignore-windows: No libc on Windows\n+\n+#![feature(rustc_private)]\n+\n+extern crate libc;\n+\n+fn main() {\n+    let rw = std::cell::UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER);\n+    unsafe {\n+        assert_eq!(libc::pthread_rwlock_wrlock(rw.get()), 0);\n+        libc::pthread_rwlock_rdlock(rw.get()); //~ ERROR: deadlock\n+    }\n+}"}, {"sha": "098c1c2fe26cc7b8ab0e2746bf05a1002f3d8389", "filename": "tests/compile-fail/sync/libc_pthread_rwlock_write_write_deadlock.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/80459bbf774f6238936837ace61fa6c1c95051ec/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80459bbf774f6238936837ace61fa6c1c95051ec/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock.rs?ref=80459bbf774f6238936837ace61fa6c1c95051ec", "patch": "@@ -4,10 +4,29 @@\n \n extern crate libc;\n \n+use std::cell::UnsafeCell;\n+use std::sync::Arc;\n+use std::thread;\n+\n+struct RwLock(UnsafeCell<libc::pthread_rwlock_t>);\n+\n+unsafe impl Send for RwLock {}\n+unsafe impl Sync for RwLock {}\n+\n+fn new_lock() -> Arc<RwLock> {\n+    Arc::new(RwLock(UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER)))\n+}\n+\n fn main() {\n-    let rw = std::cell::UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER);\n     unsafe {\n-        assert_eq!(libc::pthread_rwlock_wrlock(rw.get()), 0);\n-        libc::pthread_rwlock_wrlock(rw.get()); //~ ERROR: deadlock\n+        let lock = new_lock();\n+        assert_eq!(libc::pthread_rwlock_wrlock(lock.0.get() as *mut _), 0);\n+\n+        let lock_copy = lock.clone();\n+        thread::spawn(move || {\n+            assert_eq!(libc::pthread_rwlock_wrlock(lock_copy.0.get() as *mut _), 0); //~ ERROR: deadlock\n+        })\n+        .join()\n+        .unwrap();\n     }\n }"}, {"sha": "cc327ec46bc2989ed0302bb1d91afec0230d6662", "filename": "tests/compile-fail/sync/libc_pthread_rwlock_write_write_deadlock_single_thread.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/80459bbf774f6238936837ace61fa6c1c95051ec/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock_single_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80459bbf774f6238936837ace61fa6c1c95051ec/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock_single_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock_single_thread.rs?ref=80459bbf774f6238936837ace61fa6c1c95051ec", "patch": "@@ -0,0 +1,13 @@\n+// ignore-windows: No libc on Windows\n+\n+#![feature(rustc_private)]\n+\n+extern crate libc;\n+\n+fn main() {\n+    let rw = std::cell::UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER);\n+    unsafe {\n+        assert_eq!(libc::pthread_rwlock_wrlock(rw.get()), 0);\n+        libc::pthread_rwlock_wrlock(rw.get()); //~ ERROR: deadlock\n+    }\n+}"}, {"sha": "f5469712c5f55fe318b1ff1e6294b801f1d08e5d", "filename": "tests/run-pass/concurrency/locks.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/80459bbf774f6238936837ace61fa6c1c95051ec/tests%2Frun-pass%2Fconcurrency%2Flocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80459bbf774f6238936837ace61fa6c1c95051ec/tests%2Frun-pass%2Fconcurrency%2Flocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Flocks.rs?ref=80459bbf774f6238936837ace61fa6c1c95051ec", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows\n+// ignore-windows: Concurrency on Windows is not supported yet.\n \n use std::sync::{Arc, Mutex, RwLock};\n use std::thread;\n@@ -11,6 +11,7 @@ fn check_mutex() {\n         let data = Arc::clone(&data);\n         let thread = thread::spawn(move || {\n             let mut data = data.lock().unwrap();\n+            thread::yield_now();\n             *data += 1;\n         });\n         threads.push(thread);\n@@ -34,6 +35,7 @@ fn check_rwlock_write() {\n         let data = Arc::clone(&data);\n         let thread = thread::spawn(move || {\n             let mut data = data.write().unwrap();\n+            thread::yield_now();\n             *data += 1;\n         });\n         threads.push(thread);"}, {"sha": "2dbfb7721d3683fb4d82c2ce771e3784be86fdc9", "filename": "tests/run-pass/concurrency/locks.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80459bbf774f6238936837ace61fa6c1c95051ec/tests%2Frun-pass%2Fconcurrency%2Flocks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/80459bbf774f6238936837ace61fa6c1c95051ec/tests%2Frun-pass%2Fconcurrency%2Flocks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Flocks.stderr?ref=80459bbf774f6238936837ace61fa6c1c95051ec", "patch": "@@ -1,2 +1,2 @@\n-warning: The thread support is experimental. For example, Miri does not detect data races yet.\n+warning: thread support is experimental. For example, Miri does not detect data races yet.\n "}, {"sha": "ad47bb144b58db6b9cd50e124ce7b2283b7d2757", "filename": "tests/run-pass/concurrency/simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80459bbf774f6238936837ace61fa6c1c95051ec/tests%2Frun-pass%2Fconcurrency%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80459bbf774f6238936837ace61fa6c1c95051ec/tests%2Frun-pass%2Fconcurrency%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fsimple.rs?ref=80459bbf774f6238936837ace61fa6c1c95051ec", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows\n+// ignore-windows: Concurrency on Windows is not supported yet.\n \n use std::thread;\n "}, {"sha": "2dbfb7721d3683fb4d82c2ce771e3784be86fdc9", "filename": "tests/run-pass/concurrency/simple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80459bbf774f6238936837ace61fa6c1c95051ec/tests%2Frun-pass%2Fconcurrency%2Fsimple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/80459bbf774f6238936837ace61fa6c1c95051ec/tests%2Frun-pass%2Fconcurrency%2Fsimple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fsimple.stderr?ref=80459bbf774f6238936837ace61fa6c1c95051ec", "patch": "@@ -1,2 +1,2 @@\n-warning: The thread support is experimental. For example, Miri does not detect data races yet.\n+warning: thread support is experimental. For example, Miri does not detect data races yet.\n "}, {"sha": "384c2ac9155b21969d34cc4cfcb3c6eafa620c59", "filename": "tests/run-pass/concurrency/thread_locals.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/80459bbf774f6238936837ace61fa6c1c95051ec/tests%2Frun-pass%2Fconcurrency%2Fthread_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80459bbf774f6238936837ace61fa6c1c95051ec/tests%2Frun-pass%2Fconcurrency%2Fthread_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fthread_locals.rs?ref=80459bbf774f6238936837ace61fa6c1c95051ec", "patch": "@@ -1,4 +1,9 @@\n-// ignore-windows\n+// ignore-windows: Concurrency on Windows is not supported yet.\n+\n+//! The main purpose of this test is to check that if we take a pointer to\n+//! thread's `t1` thread-local `A` and send it to another thread `t2`,\n+//! dereferencing the pointer on `t2` resolves to `t1`'s thread-local. In this\n+//! test, we also check that thread-locals act as per-thread statics.\n \n #![feature(thread_local)]\n "}, {"sha": "2dbfb7721d3683fb4d82c2ce771e3784be86fdc9", "filename": "tests/run-pass/concurrency/thread_locals.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80459bbf774f6238936837ace61fa6c1c95051ec/tests%2Frun-pass%2Fconcurrency%2Fthread_locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/80459bbf774f6238936837ace61fa6c1c95051ec/tests%2Frun-pass%2Fconcurrency%2Fthread_locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fthread_locals.stderr?ref=80459bbf774f6238936837ace61fa6c1c95051ec", "patch": "@@ -1,2 +1,2 @@\n-warning: The thread support is experimental. For example, Miri does not detect data races yet.\n+warning: thread support is experimental. For example, Miri does not detect data races yet.\n "}]}