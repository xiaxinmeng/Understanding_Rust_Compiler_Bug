{"sha": "268d7bc459d436d28171e37050edec287f950bfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2OGQ3YmM0NTlkNDM2ZDI4MTcxZTM3MDUwZWRlYzI4N2Y5NTBiZmU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-01-27T09:36:40Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-01-27T09:36:40Z"}, "message": "Remove fn_sig_for_fn_abi", "tree": {"sha": "707b7c761548e730a5c84f38b4343382fce2b577", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/707b7c761548e730a5c84f38b4343382fce2b577"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/268d7bc459d436d28171e37050edec287f950bfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/268d7bc459d436d28171e37050edec287f950bfe", "html_url": "https://github.com/rust-lang/rust/commit/268d7bc459d436d28171e37050edec287f950bfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/268d7bc459d436d28171e37050edec287f950bfe/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e564a0ad319c8fabddc3e62616be0dbfd761ecec", "url": "https://api.github.com/repos/rust-lang/rust/commits/e564a0ad319c8fabddc3e62616be0dbfd761ecec", "html_url": "https://github.com/rust-lang/rust/commit/e564a0ad319c8fabddc3e62616be0dbfd761ecec"}], "stats": {"total": 87, "additions": 4, "deletions": 83}, "files": [{"sha": "92d6b3897538b51b30c284e0752b6b057747af03", "filename": "src/abi/mod.rs", "status": "modified", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/268d7bc459d436d28171e37050edec287f950bfe/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/268d7bc459d436d28171e37050edec287f950bfe/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=268d7bc459d436d28171e37050edec287f950bfe", "patch": "@@ -18,84 +18,6 @@ use crate::prelude::*;\n \n pub(crate) use self::returning::{can_return_to_ssa_var, codegen_return};\n \n-// FIXME remove\n-// Copied from https://github.com/rust-lang/rust/blob/f52c72948aa1dd718cc1f168d21c91c584c0a662/src/librustc_middle/ty/layout.rs#L2301\n-#[rustfmt::skip]\n-pub(crate) fn fn_sig_for_fn_abi<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> ty::PolyFnSig<'tcx> {\n-    use rustc_middle::ty::subst::Subst;\n-\n-    // FIXME(davidtwco,eddyb): A `ParamEnv` should be passed through to this function.\n-    let ty = instance.ty(tcx, ty::ParamEnv::reveal_all());\n-    match *ty.kind() {\n-        ty::FnDef(..) => {\n-            // HACK(davidtwco,eddyb): This is a workaround for polymorphization considering\n-            // parameters unused if they show up in the signature, but not in the `mir::Body`\n-            // (i.e. due to being inside a projection that got normalized, see\n-            // `src/test/ui/polymorphization/normalized_sig_types.rs`), and codegen not keeping\n-            // track of a polymorphization `ParamEnv` to allow normalizing later.\n-            let mut sig = match *ty.kind() {\n-                ty::FnDef(def_id, substs) => tcx\n-                    .normalize_erasing_regions(tcx.param_env(def_id), tcx.fn_sig(def_id))\n-                    .subst(tcx, substs),\n-                _ => unreachable!(),\n-            };\n-\n-            if let ty::InstanceDef::VtableShim(..) = instance.def {\n-                // Modify `fn(self, ...)` to `fn(self: *mut Self, ...)`.\n-                sig = sig.map_bound(|mut sig| {\n-                    let mut inputs_and_output = sig.inputs_and_output.to_vec();\n-                    inputs_and_output[0] = tcx.mk_mut_ptr(inputs_and_output[0]);\n-                    sig.inputs_and_output = tcx.intern_type_list(&inputs_and_output);\n-                    sig\n-                });\n-            }\n-            sig\n-        }\n-        ty::Closure(def_id, substs) => {\n-            let sig = substs.as_closure().sig();\n-\n-            let env_ty = tcx.closure_env_ty(def_id, substs).unwrap();\n-            sig.map_bound(|sig| {\n-                tcx.mk_fn_sig(\n-                    std::iter::once(env_ty.skip_binder()).chain(sig.inputs().iter().cloned()),\n-                    sig.output(),\n-                    sig.c_variadic,\n-                    sig.unsafety,\n-                    sig.abi,\n-                )\n-            })\n-        }\n-        ty::Generator(_, substs, _) => {\n-            let sig = substs.as_generator().poly_sig();\n-\n-            let env_region = ty::ReLateBound(ty::INNERMOST, ty::BoundRegion { kind: ty::BrEnv });\n-            let env_ty = tcx.mk_mut_ref(tcx.mk_region(env_region), ty);\n-\n-            let pin_did = tcx.require_lang_item(rustc_hir::LangItem::Pin, None);\n-            let pin_adt_ref = tcx.adt_def(pin_did);\n-            let pin_substs = tcx.intern_substs(&[env_ty.into()]);\n-            let env_ty = tcx.mk_adt(pin_adt_ref, pin_substs);\n-\n-            sig.map_bound(|sig| {\n-                let state_did = tcx.require_lang_item(rustc_hir::LangItem::GeneratorState, None);\n-                let state_adt_ref = tcx.adt_def(state_did);\n-                let state_substs =\n-                    tcx.intern_substs(&[sig.yield_ty.into(), sig.return_ty.into()]);\n-                let ret_ty = tcx.mk_adt(state_adt_ref, state_substs);\n-\n-                tcx.mk_fn_sig(\n-                    [env_ty, sig.resume_ty].iter(),\n-                    &ret_ty,\n-                    false,\n-                    rustc_hir::Unsafety::Normal,\n-                    rustc_target::spec::abi::Abi::Rust,\n-                )\n-            })\n-        }\n-        _ => bug!(\"unexpected type {:?} in Instance::fn_sig\", ty),\n-    }\n-}\n-\n fn clif_sig_from_fn_abi<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     triple: &target_lexicon::Triple,"}, {"sha": "f4a15ab12d5112fbc8b9c324f65ca2c7adf19e4e", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/268d7bc459d436d28171e37050edec287f950bfe/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/268d7bc459d436d28171e37050edec287f950bfe/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=268d7bc459d436d28171e37050edec287f950bfe", "patch": "@@ -61,7 +61,9 @@ use cranelift_codegen::{\n     write::{FuncWriter, PlainWriter},\n };\n \n+use rustc_middle::ty::layout::FnAbiExt;\n use rustc_session::config::OutputType;\n+use rustc_target::abi::call::FnAbi;\n \n use crate::prelude::*;\n \n@@ -78,11 +80,8 @@ impl CommentWriter {\n                 format!(\"symbol {}\", tcx.symbol_name(instance).name),\n                 format!(\"instance {:?}\", instance),\n                 format!(\n-                    \"sig {:?}\",\n-                    tcx.normalize_erasing_late_bound_regions(\n-                        ParamEnv::reveal_all(),\n-                        crate::abi::fn_sig_for_fn_abi(tcx, instance)\n-                    )\n+                    \"abi {:?}\",\n+                    FnAbi::of_instance(&RevealAllLayoutCx(tcx), instance, &[])\n                 ),\n                 String::new(),\n             ]"}]}