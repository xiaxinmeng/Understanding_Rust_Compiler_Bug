{"sha": "3a225c77bba8576333924e7435493cb4d4e0cbaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMjI1Yzc3YmJhODU3NjMzMzkyNGU3NDM1NDkzY2I0ZDRlMGNiYWY=", "commit": {"author": {"name": "Philip Craig", "email": "philipjcraig@gmail.com", "date": "2017-10-03T09:44:58Z"}, "committer": {"name": "Philip Craig", "email": "philipjcraig@gmail.com", "date": "2017-10-03T09:47:33Z"}, "message": "Rename FileMap::path and change to an Option", "tree": {"sha": "5c2d2bf700d90f2f9f7507997f876937dc9ab805", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c2d2bf700d90f2f9f7507997f876937dc9ab805"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a225c77bba8576333924e7435493cb4d4e0cbaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a225c77bba8576333924e7435493cb4d4e0cbaf", "html_url": "https://github.com/rust-lang/rust/commit/3a225c77bba8576333924e7435493cb4d4e0cbaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a225c77bba8576333924e7435493cb4d4e0cbaf/comments", "author": {"login": "philipc", "id": 330342, "node_id": "MDQ6VXNlcjMzMDM0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/330342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philipc", "html_url": "https://github.com/philipc", "followers_url": "https://api.github.com/users/philipc/followers", "following_url": "https://api.github.com/users/philipc/following{/other_user}", "gists_url": "https://api.github.com/users/philipc/gists{/gist_id}", "starred_url": "https://api.github.com/users/philipc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philipc/subscriptions", "organizations_url": "https://api.github.com/users/philipc/orgs", "repos_url": "https://api.github.com/users/philipc/repos", "events_url": "https://api.github.com/users/philipc/events{/privacy}", "received_events_url": "https://api.github.com/users/philipc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philipc", "id": 330342, "node_id": "MDQ6VXNlcjMzMDM0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/330342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philipc", "html_url": "https://github.com/philipc", "followers_url": "https://api.github.com/users/philipc/followers", "following_url": "https://api.github.com/users/philipc/following{/other_user}", "gists_url": "https://api.github.com/users/philipc/gists{/gist_id}", "starred_url": "https://api.github.com/users/philipc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philipc/subscriptions", "organizations_url": "https://api.github.com/users/philipc/orgs", "repos_url": "https://api.github.com/users/philipc/repos", "events_url": "https://api.github.com/users/philipc/events{/privacy}", "received_events_url": "https://api.github.com/users/philipc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c27a82f19352f37a6b04d7733d28c84494c3afd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c27a82f19352f37a6b04d7733d28c84494c3afd4", "html_url": "https://github.com/rust-lang/rust/commit/c27a82f19352f37a6b04d7733d28c84494c3afd4"}], "stats": {"total": 39, "additions": 23, "deletions": 16}, "files": [{"sha": "799e790b85fb576d5f27fbaa94d13276ba1edadf", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a225c77bba8576333924e7435493cb4d4e0cbaf/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a225c77bba8576333924e7435493cb4d4e0cbaf/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=3a225c77bba8576333924e7435493cb4d4e0cbaf", "patch": "@@ -354,7 +354,7 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for FileMap {\n         let FileMap {\n             ref name,\n             name_was_remapped,\n-            path: _,\n+            unmapped_path: _,\n             crate_of_origin,\n             // Do not hash the source as it is not encoded\n             src: _,"}, {"sha": "efaa5e5e3dab2c467afd13844b20757204265791", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3a225c77bba8576333924e7435493cb4d4e0cbaf/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a225c77bba8576333924e7435493cb4d4e0cbaf/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=3a225c77bba8576333924e7435493cb4d4e0cbaf", "patch": "@@ -167,11 +167,16 @@ impl CodeMap {\n         // Note that filename may not be a valid path, eg it may be `<anon>` etc,\n         // but this is okay because the directory determined by `path.pop()` will\n         // be empty, so the working directory will be used.\n-        let path = PathBuf::from(filename.clone());\n+        let unmapped_path = PathBuf::from(filename.clone());\n \n         let (filename, was_remapped) = self.path_mapping.map_prefix(filename);\n-        let filemap =\n-            Rc::new(FileMap::new(filename, was_remapped, path, src, Pos::from_usize(start_pos)));\n+        let filemap = Rc::new(FileMap::new(\n+            filename,\n+            was_remapped,\n+            unmapped_path,\n+            src,\n+            Pos::from_usize(start_pos),\n+        ));\n \n         files.push(filemap.clone());\n \n@@ -223,7 +228,7 @@ impl CodeMap {\n         let filemap = Rc::new(FileMap {\n             name: filename,\n             name_was_remapped,\n-            path: PathBuf::new(),\n+            unmapped_path: None,\n             crate_of_origin,\n             src: None,\n             src_hash,\n@@ -353,8 +358,9 @@ impl CodeMap {\n         self.lookup_char_pos(sp.lo()).file.name.clone()\n     }\n \n-    pub fn span_to_path(&self, sp: Span) -> PathBuf {\n-        self.lookup_char_pos(sp.lo()).file.path.clone()\n+    pub fn span_to_unmapped_path(&self, sp: Span) -> PathBuf {\n+        self.lookup_char_pos(sp.lo()).file.unmapped_path.clone()\n+            .expect(\"CodeMap::span_to_unmapped_path called for imported FileMap?\")\n     }\n \n     pub fn span_to_lines(&self, sp: Span) -> FileLinesResult {"}, {"sha": "614c4a10e6d80d172173d7f72a88f1cd8f6646df", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a225c77bba8576333924e7435493cb4d4e0cbaf/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a225c77bba8576333924e7435493cb4d4e0cbaf/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=3a225c77bba8576333924e7435493cb4d4e0cbaf", "patch": "@@ -199,7 +199,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         self.cx.crate_root = std_inject::injected_crate_name(&krate);\n         let mut module = ModuleData {\n             mod_path: vec![Ident::from_str(&self.cx.ecfg.crate_name)],\n-            directory: self.cx.codemap().span_to_path(krate.span),\n+            directory: self.cx.codemap().span_to_unmapped_path(krate.span),\n         };\n         module.directory.pop();\n         self.cx.current_expansion.module = Rc::new(module);\n@@ -951,7 +951,7 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n                         module.directory.push(&*item.ident.name.as_str());\n                     }\n                 } else {\n-                    let mut path = self.cx.parse_sess.codemap().span_to_path(inner);\n+                    let mut path = self.cx.parse_sess.codemap().span_to_unmapped_path(inner);\n                     let directory_ownership = match path.file_name().unwrap().to_str() {\n                         Some(\"mod.rs\") => DirectoryOwnership::Owned,\n                         _ => DirectoryOwnership::UnownedViaMod(false),"}, {"sha": "86657e675b2def4f9c4333e0023344b6c77445fc", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a225c77bba8576333924e7435493cb4d4e0cbaf/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a225c77bba8576333924e7435493cb4d4e0cbaf/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=3a225c77bba8576333924e7435493cb4d4e0cbaf", "patch": "@@ -197,7 +197,7 @@ fn res_rel_file(cx: &mut ExtCtxt, sp: syntax_pos::Span, arg: &Path) -> PathBuf {\n     // after macro expansion (that is, they are unhygienic).\n     if !arg.is_absolute() {\n         let callsite = sp.source_callsite();\n-        let mut path = cx.codemap().span_to_path(callsite);\n+        let mut path = cx.codemap().span_to_unmapped_path(callsite);\n         path.pop();\n         path.push(arg);\n         path"}, {"sha": "65dabe98a063c059a8f675d717badb5b217d4c17", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a225c77bba8576333924e7435493cb4d4e0cbaf/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a225c77bba8576333924e7435493cb4d4e0cbaf/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=3a225c77bba8576333924e7435493cb4d4e0cbaf", "patch": "@@ -525,7 +525,7 @@ impl<'a> Parser<'a> {\n         if let Some(directory) = directory {\n             parser.directory = directory;\n         } else if parser.span != syntax_pos::DUMMY_SP {\n-            parser.directory.path = sess.codemap().span_to_path(parser.span);\n+            parser.directory.path = sess.codemap().span_to_unmapped_path(parser.span);\n             parser.directory.path.pop();\n         }\n "}, {"sha": "2000db9703cf9c7e6ee6eb5fbaae4920fe14112c", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3a225c77bba8576333924e7435493cb4d4e0cbaf/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a225c77bba8576333924e7435493cb4d4e0cbaf/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=3a225c77bba8576333924e7435493cb4d4e0cbaf", "patch": "@@ -502,8 +502,9 @@ pub struct FileMap {\n     pub name: FileName,\n     /// True if the `name` field above has been modified by -Zremap-path-prefix\n     pub name_was_remapped: bool,\n-    /// The path of the file that the source came from.\n-    pub path: PathBuf,\n+    /// The unmapped path of the file that the source came from.\n+    /// Set to `None` if the FileMap was imported from an external crate.\n+    pub unmapped_path: Option<PathBuf>,\n     /// Indicates which crate this FileMap was imported from.\n     pub crate_of_origin: u32,\n     /// The complete source code\n@@ -629,7 +630,7 @@ impl Decodable for FileMap {\n             Ok(FileMap {\n                 name,\n                 name_was_remapped,\n-                path: PathBuf::new(),\n+                unmapped_path: None,\n                 // `crate_of_origin` has to be set by the importer.\n                 // This value matches up with rustc::hir::def_id::INVALID_CRATE.\n                 // That constant is not available here unfortunately :(\n@@ -655,7 +656,7 @@ impl fmt::Debug for FileMap {\n impl FileMap {\n     pub fn new(name: FileName,\n                name_was_remapped: bool,\n-               path: PathBuf,\n+               unmapped_path: PathBuf,\n                mut src: String,\n                start_pos: BytePos) -> FileMap {\n         remove_bom(&mut src);\n@@ -669,7 +670,7 @@ impl FileMap {\n         FileMap {\n             name,\n             name_was_remapped,\n-            path,\n+            unmapped_path: Some(unmapped_path),\n             crate_of_origin: 0,\n             src: Some(Rc::new(src)),\n             src_hash,"}]}