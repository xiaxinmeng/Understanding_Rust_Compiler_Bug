{"sha": "280dffd82cba287bdac74cc23a0ea8359d7cd4e8", "node_id": "C_kwDOAAsO6NoAKDI4MGRmZmQ4MmNiYTI4N2JkYWM3NGNjMjNhMGVhODM1OWQ3Y2Q0ZTg", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-14T18:32:19Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-14T18:41:22Z"}, "message": "Build rtstartup for none sysroot too\n\nEven mini_core needs it", "tree": {"sha": "4c2ed047891382060b4961034941e81ed8f576eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c2ed047891382060b4961034941e81ed8f576eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/280dffd82cba287bdac74cc23a0ea8359d7cd4e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/280dffd82cba287bdac74cc23a0ea8359d7cd4e8", "html_url": "https://github.com/rust-lang/rust/commit/280dffd82cba287bdac74cc23a0ea8359d7cd4e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/280dffd82cba287bdac74cc23a0ea8359d7cd4e8/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd83b2794536514ba5fb46f51ba76ea2a82c6841", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd83b2794536514ba5fb46f51ba76ea2a82c6841", "html_url": "https://github.com/rust-lang/rust/commit/fd83b2794536514ba5fb46f51ba76ea2a82c6841"}], "stats": {"total": 57, "additions": 32, "deletions": 25}, "files": [{"sha": "f92841ab993d1a9c71422a68d1c59a6594a04d26", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 32, "deletions": 25, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/280dffd82cba287bdac74cc23a0ea8359d7cd4e8/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/280dffd82cba287bdac74cc23a0ea8359d7cd4e8/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=280dffd82cba287bdac74cc23a0ea8359d7cd4e8", "patch": "@@ -129,7 +129,8 @@ fn build_sysroot_for_triple(\n     sysroot_kind: SysrootKind,\n ) -> SysrootTarget {\n     match sysroot_kind {\n-        SysrootKind::None => SysrootTarget { triple: compiler.triple, libs: vec![] },\n+        SysrootKind::None => build_rtstartup(dirs, &compiler)\n+            .unwrap_or(SysrootTarget { triple: compiler.triple, libs: vec![] }),\n         SysrootKind::Llvm => build_llvm_sysroot_for_triple(compiler),\n         SysrootKind::Clif => {\n             build_clif_sysroot_for_triple(dirs, channel, compiler, &cg_clif_dylib_path)\n@@ -198,31 +199,10 @@ fn build_clif_sysroot_for_triple(\n \n     let mut target_libs = SysrootTarget { triple: compiler.triple.clone(), libs: vec![] };\n \n-    if compiler.triple.ends_with(\"windows-gnu\") {\n-        eprintln!(\"[BUILD] rtstartup for {}\", compiler.triple);\n-\n-        RTSTARTUP_SYSROOT.ensure_fresh(dirs);\n-\n-        let rtstartup_src = SYSROOT_SRC.to_path(dirs).join(\"library\").join(\"rtstartup\");\n-        let mut rtstartup_target_libs =\n-            SysrootTarget { triple: compiler.triple.clone(), libs: vec![] };\n-\n-        for file in [\"rsbegin\", \"rsend\"] {\n-            let obj = RTSTARTUP_SYSROOT.to_path(dirs).join(format!(\"{file}.o\"));\n-            let mut build_rtstartup_cmd = Command::new(&compiler.rustc);\n-            build_rtstartup_cmd\n-                .arg(\"--target\")\n-                .arg(&compiler.triple)\n-                .arg(\"--emit=obj\")\n-                .arg(\"-o\")\n-                .arg(&obj)\n-                .arg(rtstartup_src.join(format!(\"{file}.rs\")));\n-            spawn_and_wait(build_rtstartup_cmd);\n-            rtstartup_target_libs.libs.push(obj.clone());\n-            target_libs.libs.push(obj);\n-        }\n-\n+    if let Some(rtstartup_target_libs) = build_rtstartup(dirs, &compiler) {\n         rtstartup_target_libs.install_into_sysroot(&RTSTARTUP_SYSROOT.to_path(dirs));\n+\n+        target_libs.libs.extend(rtstartup_target_libs.libs);\n     }\n \n     let build_dir = STANDARD_LIBRARY.target_dir(dirs).join(&compiler.triple).join(channel);\n@@ -266,3 +246,30 @@ fn build_clif_sysroot_for_triple(\n \n     target_libs\n }\n+\n+fn build_rtstartup(dirs: &Dirs, compiler: &Compiler) -> Option<SysrootTarget> {\n+    if !compiler.triple.ends_with(\"windows-gnu\") {\n+        return None;\n+    }\n+\n+    RTSTARTUP_SYSROOT.ensure_fresh(dirs);\n+\n+    let rtstartup_src = SYSROOT_SRC.to_path(dirs).join(\"library\").join(\"rtstartup\");\n+    let mut target_libs = SysrootTarget { triple: compiler.triple.clone(), libs: vec![] };\n+\n+    for file in [\"rsbegin\", \"rsend\"] {\n+        let obj = RTSTARTUP_SYSROOT.to_path(dirs).join(format!(\"{file}.o\"));\n+        let mut build_rtstartup_cmd = Command::new(&compiler.rustc);\n+        build_rtstartup_cmd\n+            .arg(\"--target\")\n+            .arg(&compiler.triple)\n+            .arg(\"--emit=obj\")\n+            .arg(\"-o\")\n+            .arg(&obj)\n+            .arg(rtstartup_src.join(format!(\"{file}.rs\")));\n+        spawn_and_wait(build_rtstartup_cmd);\n+        target_libs.libs.push(obj.clone());\n+    }\n+\n+    Some(target_libs)\n+}"}]}