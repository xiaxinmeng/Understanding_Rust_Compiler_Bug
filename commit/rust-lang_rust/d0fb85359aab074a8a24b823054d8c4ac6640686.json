{"sha": "d0fb85359aab074a8a24b823054d8c4ac6640686", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwZmI4NTM1OWFhYjA3NGE4YTI0YjgyMzA1NGQ4YzRhYzY2NDA2ODY=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-23T19:53:18Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-23T20:06:29Z"}, "message": "Add task::spawn_unlinked and start migrating away from task::unsupervise", "tree": {"sha": "b28319aa78515f243354ffc7bdcf4d86644ceacb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b28319aa78515f243354ffc7bdcf4d86644ceacb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0fb85359aab074a8a24b823054d8c4ac6640686", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0fb85359aab074a8a24b823054d8c4ac6640686", "html_url": "https://github.com/rust-lang/rust/commit/d0fb85359aab074a8a24b823054d8c4ac6640686", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0fb85359aab074a8a24b823054d8c4ac6640686/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e21b5fd227d2428e734d1ee6e7679696ae05e47", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e21b5fd227d2428e734d1ee6e7679696ae05e47", "html_url": "https://github.com/rust-lang/rust/commit/6e21b5fd227d2428e734d1ee6e7679696ae05e47"}], "stats": {"total": 99, "additions": 39, "deletions": 60}, "files": [{"sha": "e20278bc3931c845939480a2eb27b568f19b7435", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0fb85359aab074a8a24b823054d8c4ac6640686/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fb85359aab074a8a24b823054d8c4ac6640686/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=d0fb85359aab074a8a24b823054d8c4ac6640686", "patch": "@@ -474,9 +474,7 @@ fn test_listen() {\n #[ignore(cfg(windows))]\n fn test_port_detach_fail() {\n     for iter::repeat(100u) {\n-        let builder = task::builder();\n-        task::unsupervise(builder);\n-        do task::run(builder) {\n+        do task::spawn_unlinked {\n             let po = port();\n             let ch = po.chan();\n "}, {"sha": "010717c3445c0045c87c8b09d747e0ec2e8d94e6", "filename": "src/libcore/priv.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d0fb85359aab074a8a24b823054d8c4ac6640686/src%2Flibcore%2Fpriv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fb85359aab074a8a24b823054d8c4ac6640686/src%2Flibcore%2Fpriv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpriv.rs?ref=d0fb85359aab074a8a24b823054d8c4ac6640686", "patch": "@@ -210,9 +210,7 @@ fn test_weaken_task_then_unweaken() {\n \n #[test]\n fn test_weaken_task_wait() {\n-    let builder = task::builder();\n-    task::unsupervise(builder);\n-    do task::run(builder) {\n+    do task::spawn_unlinked {\n         unsafe {\n             do weaken_task |po| {\n                 comm::recv(po);\n@@ -231,9 +229,7 @@ fn test_weaken_task_stress() {\n                 }\n             }\n         }\n-        let builder = task::builder();\n-        task::unsupervise(builder);\n-        do task::run(builder) {\n+        do task::spawn_unlinked {\n             unsafe {\n                 do weaken_task |po| {\n                     // Wait for it to tell us to die"}, {"sha": "4d187a01e7fed66aac179952aae9e388cd099c37", "filename": "src/libcore/task.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d0fb85359aab074a8a24b823054d8c4ac6640686/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fb85359aab074a8a24b823054d8c4ac6640686/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=d0fb85359aab074a8a24b823054d8c4ac6640686", "patch": "@@ -51,6 +51,7 @@ export run_listener;\n export run_with;\n \n export spawn;\n+export spawn_unlinked;\n export spawn_with;\n export spawn_listener;\n export spawn_sched;\n@@ -430,6 +431,17 @@ fn spawn(+f: fn~()) {\n     run(builder(), f);\n }\n \n+fn spawn_unlinked(+f: fn~()) {\n+    /*!\n+     * Creates a child task unlinked from the current one. If either this\n+     * task or the child task fails, the other will not be killed.\n+     */\n+\n+    let b = builder();\n+    unsupervise(b);\n+    run(b, f);\n+}\n+\n fn spawn_with<A:send>(+arg: A, +f: fn~(+A)) {\n     /*!\n      * Runs a task, while transfering ownership of one argument to the\n@@ -1159,12 +1171,8 @@ fn test_spawn_raw_unsupervise() {\n fn test_spawn_unlinked_unsup_no_fail_down() { // grandchild sends on a port\n     let po = comm::port();\n     let ch = comm::chan(po);\n-    let builder = task::builder();\n-    task::unsupervise(builder);\n-    do task::run(builder) {\n-        let builder = task::builder();\n-        task::unsupervise(builder);\n-        do task::run(builder) {\n+    do task::spawn_unlinked {\n+        do task::spawn_unlinked {\n             // Give middle task a chance to fail-but-not-kill-us.\n             for iter::repeat(8192) { task::yield(); }\n             comm::send(ch, ()); // If killed first, grandparent hangs.\n@@ -1175,9 +1183,7 @@ fn test_spawn_unlinked_unsup_no_fail_down() { // grandchild sends on a port\n }\n #[test] #[ignore(cfg(windows))]\n fn test_spawn_unlinked_unsup_no_fail_up() { // child unlinked fails\n-    let builder = task::builder();\n-    task::unsupervise(builder);\n-    do task::run(builder) { fail; }\n+    do task::spawn_unlinked { fail; }\n }\n #[test] #[ignore(cfg(windows))]\n fn test_spawn_unlinked_sup_no_fail_up() { // child unlinked fails"}, {"sha": "b9c33a5f1a9508af27e41526b91c12da2c972f17", "filename": "src/test/run-pass/lots-a-fail.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0fb85359aab074a8a24b823054d8c4ac6640686/src%2Ftest%2Frun-pass%2Flots-a-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fb85359aab074a8a24b823054d8c4ac6640686/src%2Ftest%2Frun-pass%2Flots-a-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flots-a-fail.rs?ref=d0fb85359aab074a8a24b823054d8c4ac6640686", "patch": "@@ -14,8 +14,6 @@ fn iloop() {\n \n fn main() {\n     for uint::range(0u, 100u) |_i| {\n-        let builder = task::builder();\n-        task::unsupervise(builder);\n-        task::run(builder, || iloop() );\n+        task::spawn_unlinked(|| iloop() );\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "924670093654f587f5e2facb4ace560168fd0dcf", "filename": "src/test/run-pass/pipe-detect-term.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0fb85359aab074a8a24b823054d8c4ac6640686/src%2Ftest%2Frun-pass%2Fpipe-detect-term.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fb85359aab074a8a24b823054d8c4ac6640686/src%2Ftest%2Frun-pass%2Fpipe-detect-term.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-detect-term.rs?ref=d0fb85359aab074a8a24b823054d8c4ac6640686", "patch": "@@ -27,9 +27,7 @@ fn main() {\n \n     sleep(iotask, 100);\n \n-    let b = task::builder();\n-    task::unsupervise(b);\n-    task::run(b, failtest);\n+    task::spawn_unlinked(failtest);\n }\n \n // Make sure the right thing happens during failure."}, {"sha": "d0a1c5c98177f6afa66d171a00f91bd67e57d04c", "filename": "src/test/run-pass/send-iloop.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0fb85359aab074a8a24b823054d8c4ac6640686/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fb85359aab074a8a24b823054d8c4ac6640686/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-iloop.rs?ref=d0fb85359aab074a8a24b823054d8c4ac6640686", "patch": "@@ -22,8 +22,6 @@ fn iloop() {\n \n fn main() {\n     for uint::range(0u, 16u) |_i| {\n-        let builder = task::builder();\n-        task::unsupervise(builder);\n-        task::run(builder, || iloop() );\n+        task::spawn_unlinked(|| iloop() );\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "3acf30b65d3e61b6f88f625d80159869da240390", "filename": "src/test/run-pass/task-killjoin-rsrc.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d0fb85359aab074a8a24b823054d8c4ac6640686/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fb85359aab074a8a24b823054d8c4ac6640686/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs?ref=d0fb85359aab074a8a24b823054d8c4ac6640686", "patch": "@@ -33,7 +33,7 @@ fn joinable(f: fn~()) -> comm::port<bool> {\n     }\n     let p = comm::port();\n     let c = comm::chan(p);\n-    let _ = task::spawn {|| wrapper((c, f)) };\n+    let _ = task::spawn_unlinked {|| wrapper((c, f)) };\n     p\n }\n \n@@ -50,17 +50,14 @@ fn supervised() {\n     fail;\n }\n \n-fn supervisor(b: task::builder) {\n-    // Unsupervise this task so the process doesn't return a failure status as\n-    // a result of the main task being killed.\n-    task::unsupervise(b);\n+fn supervisor() {\n     #error[\"supervisor task=%?\", task::get_task()];\n     let t = joinable(supervised);\n     join(t);\n }\n \n fn main() {\n-    join(joinable({|| supervisor(task::builder())}));\n+    join(joinable({|| supervisor()}));\n }\n \n // Local Variables:"}, {"sha": "a13fc097dcd9f48d4b1f965a3e119db55f43f00e", "filename": "src/test/run-pass/task-killjoin.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0fb85359aab074a8a24b823054d8c4ac6640686/src%2Ftest%2Frun-pass%2Ftask-killjoin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fb85359aab074a8a24b823054d8c4ac6640686/src%2Ftest%2Frun-pass%2Ftask-killjoin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin.rs?ref=d0fb85359aab074a8a24b823054d8c4ac6640686", "patch": "@@ -20,13 +20,11 @@ fn supervisor() {\n     // Unsupervise this task so the process doesn't return a failure status as\n     // a result of the main task being killed.\n     let f = supervised;\n-    task::try(|| supervised() );\n+    task::try(supervised);\n }\n \n fn main() {\n-    let builder = task::builder();\n-    task::unsupervise(builder);\n-    task::run(builder, || supervisor() )\n+    task::spawn_unlinked(supervisor)\n }\n \n // Local Variables:"}, {"sha": "0896a6a2bcdf570e05332009f5a8544e73ff4205", "filename": "src/test/run-pass/too-much-recursion.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d0fb85359aab074a8a24b823054d8c4ac6640686/src%2Ftest%2Frun-pass%2Ftoo-much-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fb85359aab074a8a24b823054d8c4ac6640686/src%2Ftest%2Frun-pass%2Ftoo-much-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftoo-much-recursion.rs?ref=d0fb85359aab074a8a24b823054d8c4ac6640686", "patch": "@@ -1,14 +1,12 @@\n // xfail-win32\n // error-pattern:ran out of stack\n \n-// Test that the task fails after hiting the recursion limit, but\n+// Test that the task fails after hitting the recursion limit, but\n // that it doesn't bring down the whole proc\n \n fn main() {\n-    let builder = task::builder();\n-    task::unsupervise(builder);\n-    do task::run(builder) {\n+    do task::spawn_unlinked {\n         fn f() { f() };\n         f();\n     };\n-}\n\\ No newline at end of file\n+}"}, {"sha": "d5e977e4d2af8982ae679d81c17aaf11702433b6", "filename": "src/test/run-pass/unwind-box.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0fb85359aab074a8a24b823054d8c4ac6640686/src%2Ftest%2Frun-pass%2Funwind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fb85359aab074a8a24b823054d8c4ac6640686/src%2Ftest%2Frun-pass%2Funwind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-box.rs?ref=d0fb85359aab074a8a24b823054d8c4ac6640686", "patch": "@@ -8,7 +8,5 @@ fn f() {\n }\n \n fn main() {\n-    let builder = task::builder();\n-    task::unsupervise(builder);\n-    task::run(builder, || f() );\n-}\n\\ No newline at end of file\n+    task::spawn_unlinked(f);\n+}"}, {"sha": "cddf8824508f008d5b4beec13c6659e206db4517", "filename": "src/test/run-pass/unwind-resource.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0fb85359aab074a8a24b823054d8c4ac6640686/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fb85359aab074a8a24b823054d8c4ac6640686/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource.rs?ref=d0fb85359aab074a8a24b823054d8c4ac6640686", "patch": "@@ -21,9 +21,7 @@ fn f(c: comm::chan<bool>) {\n fn main() {\n     let p = comm::port();\n     let c = comm::chan(p);\n-    let builder = task::builder();\n-    task::unsupervise(builder);\n-    task::run(builder, || f(c) );\n+    task::spawn_unlinked(|| f(c) );\n     #error(\"hiiiiiiiii\");\n     assert comm::recv(p);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "79847cafaf451338d9473dff88f7bf09b0ec545c", "filename": "src/test/run-pass/unwind-resource2.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0fb85359aab074a8a24b823054d8c4ac6640686/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fb85359aab074a8a24b823054d8c4ac6640686/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource2.rs?ref=d0fb85359aab074a8a24b823054d8c4ac6640686", "patch": "@@ -15,7 +15,5 @@ fn f() {\n }\n \n fn main() {\n-    let builder = task::builder();\n-    task::unsupervise(builder);\n-    task::run(builder, || f() );\n-}\n\\ No newline at end of file\n+    task::spawn_unlinked(f);\n+}"}, {"sha": "fb2805f2b0ba77698fa05f20d57f22f1048b37dc", "filename": "src/test/run-pass/unwind-unique.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0fb85359aab074a8a24b823054d8c4ac6640686/src%2Ftest%2Frun-pass%2Funwind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fb85359aab074a8a24b823054d8c4ac6640686/src%2Ftest%2Frun-pass%2Funwind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-unique.rs?ref=d0fb85359aab074a8a24b823054d8c4ac6640686", "patch": "@@ -8,7 +8,5 @@ fn f() {\n }\n \n fn main() {\n-    let builder = task::builder();\n-    task::unsupervise(builder);\n-    task::run(builder, || f() );\n-}\n\\ No newline at end of file\n+    task::spawn_unlinked(f);\n+}"}]}