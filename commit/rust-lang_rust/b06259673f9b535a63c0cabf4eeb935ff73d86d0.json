{"sha": "b06259673f9b535a63c0cabf4eeb935ff73d86d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNjI1OTY3M2Y5YjUzNWE2M2MwY2FiZjRlZWI5MzVmZjczZDg2ZDA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-02T15:34:31Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-02T15:49:44Z"}, "message": "rename mock_analysis -> fixture", "tree": {"sha": "a1d9c304711806c393163547fe6da69289aa9f16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1d9c304711806c393163547fe6da69289aa9f16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b06259673f9b535a63c0cabf4eeb935ff73d86d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b06259673f9b535a63c0cabf4eeb935ff73d86d0", "html_url": "https://github.com/rust-lang/rust/commit/b06259673f9b535a63c0cabf4eeb935ff73d86d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b06259673f9b535a63c0cabf4eeb935ff73d86d0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09348b247465864c6462a39055803bcbb0156cfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/09348b247465864c6462a39055803bcbb0156cfe", "html_url": "https://github.com/rust-lang/rust/commit/09348b247465864c6462a39055803bcbb0156cfe"}], "stats": {"total": 189, "additions": 90, "deletions": 99}, "files": [{"sha": "d2cf2cc7dfae713dc2bb92a5b0cdbe61b72d8d87", "filename": "crates/ide/src/call_hierarchy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs?ref=b06259673f9b535a63c0cabf4eeb935ff73d86d0", "patch": "@@ -139,15 +139,15 @@ impl CallLocations {\n mod tests {\n     use base_db::FilePosition;\n \n-    use crate::mock_analysis::analysis_and_position;\n+    use crate::fixture;\n \n     fn check_hierarchy(\n         ra_fixture: &str,\n         expected: &str,\n         expected_incoming: &[&str],\n         expected_outgoing: &[&str],\n     ) {\n-        let (analysis, pos) = analysis_and_position(ra_fixture);\n+        let (analysis, pos) = fixture::position(ra_fixture);\n \n         let mut navs = analysis.call_hierarchy(pos).unwrap().unwrap().info;\n         assert_eq!(navs.len(), 1);"}, {"sha": "d7b2b926e75742453fb2019a4cb9a079482a8ccd", "filename": "crates/ide/src/call_info.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcall_info.rs?ref=b06259673f9b535a63c0cabf4eeb935ff73d86d0", "patch": "@@ -232,10 +232,10 @@ mod tests {\n     use expect_test::{expect, Expect};\n     use test_utils::mark;\n \n-    use crate::mock_analysis::analysis_and_position;\n+    use crate::fixture;\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let (analysis, position) = analysis_and_position(ra_fixture);\n+        let (analysis, position) = fixture::position(ra_fixture);\n         let call_info = analysis.call_info(position).unwrap();\n         let actual = match call_info {\n             Some(call_info) => {"}, {"sha": "697f691b04211570d5907bfc23342e23e513004a", "filename": "crates/ide/src/completion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion.rs?ref=b06259673f9b535a63c0cabf4eeb935ff73d86d0", "patch": "@@ -133,15 +133,15 @@ pub(crate) fn completions(\n #[cfg(test)]\n mod tests {\n     use crate::completion::completion_config::CompletionConfig;\n-    use crate::mock_analysis::analysis_and_position;\n+    use crate::fixture;\n \n     struct DetailAndDocumentation<'a> {\n         detail: &'a str,\n         documentation: &'a str,\n     }\n \n     fn check_detail_and_documentation(ra_fixture: &str, expected: DetailAndDocumentation) {\n-        let (analysis, position) = analysis_and_position(ra_fixture);\n+        let (analysis, position) = fixture::position(ra_fixture);\n         let config = CompletionConfig::default();\n         let completions = analysis.completions(&config, position).unwrap().unwrap();\n         for item in completions {"}, {"sha": "feb8cd2a6eec8b3385fa6767681b518ad6caa1d5", "filename": "crates/ide/src/completion/test_utils.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Ftest_utils.rs?ref=b06259673f9b535a63c0cabf4eeb935ff73d86d0", "patch": "@@ -8,8 +8,7 @@ use test_utils::assert_eq_text;\n \n use crate::{\n     completion::{completion_item::CompletionKind, CompletionConfig},\n-    mock_analysis::analysis_and_position,\n-    CompletionItem,\n+    fixture, CompletionItem,\n };\n \n pub(crate) fn do_completion(code: &str, kind: CompletionKind) -> Vec<CompletionItem> {\n@@ -80,7 +79,7 @@ pub(crate) fn check_edit_with_config(\n     ra_fixture_after: &str,\n ) {\n     let ra_fixture_after = trim_indent(ra_fixture_after);\n-    let (analysis, position) = analysis_and_position(ra_fixture_before);\n+    let (analysis, position) = fixture::position(ra_fixture_before);\n     let completions: Vec<CompletionItem> =\n         analysis.completions(&config, position).unwrap().unwrap().into();\n     let (completion,) = completions\n@@ -94,7 +93,7 @@ pub(crate) fn check_edit_with_config(\n }\n \n pub(crate) fn check_pattern_is_applicable(code: &str, check: fn(SyntaxElement) -> bool) {\n-    let (analysis, pos) = analysis_and_position(code);\n+    let (analysis, pos) = fixture::position(code);\n     analysis\n         .with_db(|db| {\n             let sema = Semantics::new(db);\n@@ -109,6 +108,6 @@ pub(crate) fn get_all_completion_items(\n     config: CompletionConfig,\n     code: &str,\n ) -> Vec<CompletionItem> {\n-    let (analysis, position) = analysis_and_position(code);\n+    let (analysis, position) = fixture::position(code);\n     analysis.completions(&config, position).unwrap().unwrap().into()\n }"}, {"sha": "f5d627b6efb816f26571bcc8bd8cfc427d919c87", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=b06259673f9b535a63c0cabf4eeb935ff73d86d0", "patch": "@@ -218,10 +218,7 @@ mod tests {\n     use stdx::trim_indent;\n     use test_utils::assert_eq_text;\n \n-    use crate::{\n-        mock_analysis::{analysis_and_position, many_files, single_file},\n-        DiagnosticsConfig,\n-    };\n+    use crate::{fixture, DiagnosticsConfig};\n \n     /// Takes a multi-file input fixture with annotated cursor positions,\n     /// and checks that:\n@@ -231,7 +228,7 @@ mod tests {\n     fn check_fix(ra_fixture_before: &str, ra_fixture_after: &str) {\n         let after = trim_indent(ra_fixture_after);\n \n-        let (analysis, file_position) = analysis_and_position(ra_fixture_before);\n+        let (analysis, file_position) = fixture::position(ra_fixture_before);\n         let diagnostic = analysis\n             .diagnostics(&DiagnosticsConfig::default(), file_position.file_id)\n             .unwrap()\n@@ -260,7 +257,7 @@ mod tests {\n     /// which has a fix that can apply to other files.\n     fn check_apply_diagnostic_fix_in_other_file(ra_fixture_before: &str, ra_fixture_after: &str) {\n         let ra_fixture_after = &trim_indent(ra_fixture_after);\n-        let (analysis, file_pos) = analysis_and_position(ra_fixture_before);\n+        let (analysis, file_pos) = fixture::position(ra_fixture_before);\n         let current_file_id = file_pos.file_id;\n         let diagnostic = analysis\n             .diagnostics(&DiagnosticsConfig::default(), current_file_id)\n@@ -282,7 +279,7 @@ mod tests {\n     /// Takes a multi-file input fixture with annotated cursor position and checks that no diagnostics\n     /// apply to the file containing the cursor.\n     fn check_no_diagnostics(ra_fixture: &str) {\n-        let (analysis, files) = many_files(ra_fixture);\n+        let (analysis, files) = fixture::files(ra_fixture);\n         let diagnostics = files\n             .into_iter()\n             .flat_map(|file_id| {\n@@ -293,7 +290,7 @@ mod tests {\n     }\n \n     fn check_expect(ra_fixture: &str, expect: Expect) {\n-        let (analysis, file_id) = single_file(ra_fixture);\n+        let (analysis, file_id) = fixture::file(ra_fixture);\n         let diagnostics = analysis.diagnostics(&DiagnosticsConfig::default(), file_id).unwrap();\n         expect.assert_debug_eq(&diagnostics)\n     }\n@@ -785,7 +782,7 @@ struct Foo {\n         let mut config = DiagnosticsConfig::default();\n         config.disabled.insert(\"unresolved-module\".into());\n \n-        let (analysis, file_id) = single_file(r#\"mod foo;\"#);\n+        let (analysis, file_id) = fixture::file(r#\"mod foo;\"#);\n \n         let diagnostics = analysis.diagnostics(&config, file_id).unwrap();\n         assert!(diagnostics.is_empty());"}, {"sha": "cf9d617dc0c30cc2f98f96980654bb0eb9ad6888", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=b06259673f9b535a63c0cabf4eeb935ff73d86d0", "patch": "@@ -423,11 +423,11 @@ pub(crate) fn description_from_symbol(db: &RootDatabase, symbol: &FileSymbol) ->\n mod tests {\n     use expect_test::expect;\n \n-    use crate::{mock_analysis::single_file, Query};\n+    use crate::{fixture, Query};\n \n     #[test]\n     fn test_nav_for_symbol() {\n-        let (analysis, _) = single_file(\n+        let (analysis, _) = fixture::file(\n             r#\"\n enum FooInner { }\n fn foo() { enum FooInner { } }\n@@ -478,7 +478,7 @@ fn foo() { enum FooInner { } }\n \n     #[test]\n     fn test_world_symbols_are_case_sensitive() {\n-        let (analysis, _) = single_file(\n+        let (analysis, _) = fixture::file(\n             r#\"\n fn foo() {}\n struct Foo;"}, {"sha": "8d75e0f05c0fb1486c5373cfd889cc623737859b", "filename": "crates/ide/src/expand_macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fexpand_macro.rs?ref=b06259673f9b535a63c0cabf4eeb935ff73d86d0", "patch": "@@ -122,10 +122,10 @@ fn insert_whitespaces(syn: SyntaxNode) -> String {\n mod tests {\n     use expect_test::{expect, Expect};\n \n-    use crate::mock_analysis::analysis_and_position;\n+    use crate::fixture;\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let (analysis, pos) = analysis_and_position(ra_fixture);\n+        let (analysis, pos) = fixture::position(ra_fixture);\n         let expansion = analysis.expand_macro(pos).unwrap().unwrap();\n         let actual = format!(\"{}\\n{}\", expansion.name, expansion.expansion);\n         expect.assert_eq(&actual);"}, {"sha": "3ee0af8ad430a02d89e33a410447a35d3b311e53", "filename": "crates/ide/src/extend_selection.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fextend_selection.rs?ref=b06259673f9b535a63c0cabf4eeb935ff73d86d0", "patch": "@@ -315,12 +315,12 @@ fn adj_comments(comment: &ast::Comment, dir: Direction) -> ast::Comment {\n \n #[cfg(test)]\n mod tests {\n-    use crate::mock_analysis::analysis_and_position;\n+    use crate::fixture;\n \n     use super::*;\n \n     fn do_check(before: &str, afters: &[&str]) {\n-        let (analysis, position) = analysis_and_position(&before);\n+        let (analysis, position) = fixture::position(&before);\n         let before = analysis.file_text(position.file_id).unwrap();\n         let range = TextRange::empty(position.offset);\n         let mut frange = FileRange { file_id: position.file_id, range };"}, {"sha": "ed06689f0cd76700116874e2deb8537126636b63", "filename": "crates/ide/src/fixture.rs", "status": "renamed", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffixture.rs?ref=b06259673f9b535a63c0cabf4eeb935ff73d86d0", "patch": "@@ -1,41 +1,40 @@\n-//! FIXME: write short doc here\n-\n+//! Utilities for creating `Analysis` instances for tests.\n use base_db::fixture::ChangeFixture;\n use test_utils::{extract_annotations, RangeOrOffset};\n \n use crate::{Analysis, AnalysisHost, FileId, FilePosition, FileRange};\n \n-/// Creates analysis from a multi-file fixture, returns positions marked with <|>.\n-pub(crate) fn analysis_and_position(ra_fixture: &str) -> (Analysis, FilePosition) {\n+/// Creates analysis for a single file.\n+pub(crate) fn file(ra_fixture: &str) -> (Analysis, FileId) {\n     let mut host = AnalysisHost::default();\n     let change_fixture = ChangeFixture::parse(ra_fixture);\n     host.db.apply_change(change_fixture.change);\n-    let (file_id, range_or_offset) = change_fixture.file_position.expect(\"expected a marker (<|>)\");\n-    let offset = match range_or_offset {\n-        RangeOrOffset::Range(_) => panic!(),\n-        RangeOrOffset::Offset(it) => it,\n-    };\n-    (host.analysis(), FilePosition { file_id, offset })\n+    (host.analysis(), change_fixture.files[0])\n }\n \n-/// Creates analysis for a single file.\n-pub(crate) fn single_file(ra_fixture: &str) -> (Analysis, FileId) {\n+/// Creates analysis for many files.\n+pub(crate) fn files(ra_fixture: &str) -> (Analysis, Vec<FileId>) {\n     let mut host = AnalysisHost::default();\n     let change_fixture = ChangeFixture::parse(ra_fixture);\n     host.db.apply_change(change_fixture.change);\n-    (host.analysis(), change_fixture.files[0])\n+    (host.analysis(), change_fixture.files)\n }\n \n-/// Creates analysis for a single file.\n-pub(crate) fn many_files(ra_fixture: &str) -> (Analysis, Vec<FileId>) {\n+/// Creates analysis from a multi-file fixture, returns positions marked with <|>.\n+pub(crate) fn position(ra_fixture: &str) -> (Analysis, FilePosition) {\n     let mut host = AnalysisHost::default();\n     let change_fixture = ChangeFixture::parse(ra_fixture);\n     host.db.apply_change(change_fixture.change);\n-    (host.analysis(), change_fixture.files)\n+    let (file_id, range_or_offset) = change_fixture.file_position.expect(\"expected a marker (<|>)\");\n+    let offset = match range_or_offset {\n+        RangeOrOffset::Range(_) => panic!(),\n+        RangeOrOffset::Offset(it) => it,\n+    };\n+    (host.analysis(), FilePosition { file_id, offset })\n }\n \n /// Creates analysis for a single file, returns range marked with a pair of <|>.\n-pub(crate) fn analysis_and_range(ra_fixture: &str) -> (Analysis, FileRange) {\n+pub(crate) fn range(ra_fixture: &str) -> (Analysis, FileRange) {\n     let mut host = AnalysisHost::default();\n     let change_fixture = ChangeFixture::parse(ra_fixture);\n     host.db.apply_change(change_fixture.change);\n@@ -48,9 +47,7 @@ pub(crate) fn analysis_and_range(ra_fixture: &str) -> (Analysis, FileRange) {\n }\n \n /// Creates analysis from a multi-file fixture, returns positions marked with <|>.\n-pub(crate) fn analysis_and_annotations(\n-    ra_fixture: &str,\n-) -> (Analysis, FilePosition, Vec<(FileRange, String)>) {\n+pub(crate) fn annotations(ra_fixture: &str) -> (Analysis, FilePosition, Vec<(FileRange, String)>) {\n     let mut host = AnalysisHost::default();\n     let change_fixture = ChangeFixture::parse(ra_fixture);\n     host.db.apply_change(change_fixture.change);", "previous_filename": "crates/ide/src/mock_analysis.rs"}, {"sha": "459f201ed805a60e0f746d3af7334f9bb4ec31e8", "filename": "crates/ide/src/fn_references.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Ffn_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Ffn_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffn_references.rs?ref=b06259673f9b535a63c0cabf4eeb935ff73d86d0", "patch": "@@ -25,15 +25,14 @@ fn method_range(item: SyntaxNode, file_id: FileId) -> Option<FileRange> {\n \n #[cfg(test)]\n mod tests {\n-    use crate::mock_analysis::analysis_and_position;\n+    use crate::fixture;\n     use crate::{FileRange, TextSize};\n     use std::ops::RangeInclusive;\n \n     #[test]\n     fn test_find_all_methods() {\n-        let (analysis, pos) = analysis_and_position(\n+        let (analysis, pos) = fixture::position(\n             r#\"\n-            //- /lib.rs\n             fn private_fn() {<|>}\n \n             pub fn pub_fn() {}\n@@ -48,9 +47,8 @@ mod tests {\n \n     #[test]\n     fn test_find_trait_methods() {\n-        let (analysis, pos) = analysis_and_position(\n+        let (analysis, pos) = fixture::position(\n             r#\"\n-            //- /lib.rs\n             trait Foo {\n                 fn bar() {<|>}\n                 fn baz() {}\n@@ -64,7 +62,7 @@ mod tests {\n \n     #[test]\n     fn test_skip_tests() {\n-        let (analysis, pos) = analysis_and_position(\n+        let (analysis, pos) = fixture::position(\n             r#\"\n             //- /lib.rs\n             #[test]"}, {"sha": "582bf4837d53f38527d9f3f8120ec59b19e06a8f", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=b06259673f9b535a63c0cabf4eeb935ff73d86d0", "patch": "@@ -103,10 +103,10 @@ mod tests {\n     use base_db::FileRange;\n     use syntax::{TextRange, TextSize};\n \n-    use crate::mock_analysis::analysis_and_annotations;\n+    use crate::fixture;\n \n     fn check(ra_fixture: &str) {\n-        let (analysis, position, mut annotations) = analysis_and_annotations(ra_fixture);\n+        let (analysis, position, mut annotations) = fixture::annotations(ra_fixture);\n         let (mut expected, data) = annotations.pop().unwrap();\n         match data.as_str() {\n             \"\" => (),"}, {"sha": "6c586bbd120e1dd100f6b31df9577fd2e91536c0", "filename": "crates/ide/src/goto_implementation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_implementation.rs?ref=b06259673f9b535a63c0cabf4eeb935ff73d86d0", "patch": "@@ -76,10 +76,10 @@ fn impls_for_trait(\n mod tests {\n     use base_db::FileRange;\n \n-    use crate::mock_analysis::analysis_and_annotations;\n+    use crate::fixture;\n \n     fn check(ra_fixture: &str) {\n-        let (analysis, position, annotations) = analysis_and_annotations(ra_fixture);\n+        let (analysis, position, annotations) = fixture::annotations(ra_fixture);\n \n         let navs = analysis.goto_implementation(position).unwrap().unwrap().info;\n "}, {"sha": "6d0df04dd065ec9ada30e8bd767a678743924bd7", "filename": "crates/ide/src/goto_type_definition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs?ref=b06259673f9b535a63c0cabf4eeb935ff73d86d0", "patch": "@@ -56,10 +56,10 @@ fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n mod tests {\n     use base_db::FileRange;\n \n-    use crate::mock_analysis::analysis_and_annotations;\n+    use crate::fixture;\n \n     fn check(ra_fixture: &str) {\n-        let (analysis, position, mut annotations) = analysis_and_annotations(ra_fixture);\n+        let (analysis, position, mut annotations) = fixture::annotations(ra_fixture);\n         let (expected, data) = annotations.pop().unwrap();\n         assert!(data.is_empty());\n "}, {"sha": "9cf02f0a32fe829b5734a529f08a0379913ee0ef", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=b06259673f9b535a63c0cabf4eeb935ff73d86d0", "patch": "@@ -377,17 +377,17 @@ mod tests {\n     use base_db::FileLoader;\n     use expect_test::{expect, Expect};\n \n-    use crate::mock_analysis::analysis_and_position;\n+    use crate::fixture;\n \n     use super::*;\n \n     fn check_hover_no_result(ra_fixture: &str) {\n-        let (analysis, position) = analysis_and_position(ra_fixture);\n+        let (analysis, position) = fixture::position(ra_fixture);\n         assert!(analysis.hover(position, true).unwrap().is_none());\n     }\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let (analysis, position) = analysis_and_position(ra_fixture);\n+        let (analysis, position) = fixture::position(ra_fixture);\n         let hover = analysis.hover(position, true).unwrap().unwrap();\n \n         let content = analysis.db.file_text(position.file_id);\n@@ -398,7 +398,7 @@ mod tests {\n     }\n \n     fn check_hover_no_links(ra_fixture: &str, expect: Expect) {\n-        let (analysis, position) = analysis_and_position(ra_fixture);\n+        let (analysis, position) = fixture::position(ra_fixture);\n         let hover = analysis.hover(position, false).unwrap().unwrap();\n \n         let content = analysis.db.file_text(position.file_id);\n@@ -409,7 +409,7 @@ mod tests {\n     }\n \n     fn check_actions(ra_fixture: &str, expect: Expect) {\n-        let (analysis, position) = analysis_and_position(ra_fixture);\n+        let (analysis, position) = fixture::position(ra_fixture);\n         let hover = analysis.hover(position, true).unwrap().unwrap();\n         expect.assert_debug_eq(&hover.info.actions)\n     }\n@@ -963,7 +963,7 @@ impl Thing {\n             \"#]],\n         )\n     } /* FIXME: revive these tests\n-              let (analysis, position) = analysis_and_position(\n+              let (analysis, position) = fixture::position(\n                   \"\n                   struct Thing { x: u32 }\n                   impl Thing {\n@@ -977,7 +977,7 @@ impl Thing {\n               let hover = analysis.hover(position).unwrap().unwrap();\n               assert_eq!(trim_markup(&hover.info.markup.as_str()), (\"Thing\"));\n \n-              let (analysis, position) = analysis_and_position(\n+              let (analysis, position) = fixture::position(\n                   \"\n                   enum Thing { A }\n                   impl Thing {\n@@ -990,7 +990,7 @@ impl Thing {\n               let hover = analysis.hover(position).unwrap().unwrap();\n               assert_eq!(trim_markup(&hover.info.markup.as_str()), (\"enum Thing\"));\n \n-              let (analysis, position) = analysis_and_position(\n+              let (analysis, position) = fixture::position(\n                   \"\n                   enum Thing { A }\n                   impl Thing {"}, {"sha": "0afe5f8fd2dc128db8df098483c0ca4473b94701", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=b06259673f9b535a63c0cabf4eeb935ff73d86d0", "patch": "@@ -339,14 +339,14 @@ mod tests {\n     use expect_test::{expect, Expect};\n     use test_utils::extract_annotations;\n \n-    use crate::{inlay_hints::InlayHintsConfig, mock_analysis::single_file};\n+    use crate::{fixture, inlay_hints::InlayHintsConfig};\n \n     fn check(ra_fixture: &str) {\n         check_with_config(InlayHintsConfig::default(), ra_fixture);\n     }\n \n     fn check_with_config(config: InlayHintsConfig, ra_fixture: &str) {\n-        let (analysis, file_id) = single_file(ra_fixture);\n+        let (analysis, file_id) = fixture::file(ra_fixture);\n         let expected = extract_annotations(&*analysis.file_text(file_id).unwrap());\n         let inlay_hints = analysis.inlay_hints(file_id, &config).unwrap();\n         let actual =\n@@ -355,7 +355,7 @@ mod tests {\n     }\n \n     fn check_expect(config: InlayHintsConfig, ra_fixture: &str, expect: Expect) {\n-        let (analysis, file_id) = single_file(ra_fixture);\n+        let (analysis, file_id) = fixture::file(ra_fixture);\n         let inlay_hints = analysis.inlay_hints(file_id, &config).unwrap();\n         expect.assert_debug_eq(&inlay_hints)\n     }"}, {"sha": "1aa673cf8a730439913c8085cb29a7072351d648", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=b06259673f9b535a63c0cabf4eeb935ff73d86d0", "patch": "@@ -16,7 +16,7 @@ macro_rules! eprintln {\n }\n \n #[cfg(test)]\n-mod mock_analysis;\n+mod fixture;\n \n mod markup;\n mod prime_caches;"}, {"sha": "ef94acfecd9e9d0a787141cc353044b8b52aaff1", "filename": "crates/ide/src/parent_module.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Fparent_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Fparent_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fparent_module.rs?ref=b06259673f9b535a63c0cabf4eeb935ff73d86d0", "patch": "@@ -65,11 +65,11 @@ pub(crate) fn crate_for(db: &RootDatabase, file_id: FileId) -> Vec<CrateId> {\n mod tests {\n     use test_utils::mark;\n \n-    use crate::mock_analysis::{analysis_and_position, single_file};\n+    use crate::fixture::{self};\n \n     #[test]\n     fn test_resolve_parent_module() {\n-        let (analysis, pos) = analysis_and_position(\n+        let (analysis, pos) = fixture::position(\n             \"\n             //- /lib.rs\n             mod foo;\n@@ -84,7 +84,7 @@ mod tests {\n     #[test]\n     fn test_resolve_parent_module_on_module_decl() {\n         mark::check!(test_resolve_parent_module_on_module_decl);\n-        let (analysis, pos) = analysis_and_position(\n+        let (analysis, pos) = fixture::position(\n             \"\n             //- /lib.rs\n             mod foo;\n@@ -102,7 +102,7 @@ mod tests {\n \n     #[test]\n     fn test_resolve_parent_module_for_inline() {\n-        let (analysis, pos) = analysis_and_position(\n+        let (analysis, pos) = fixture::position(\n             \"\n             //- /lib.rs\n             mod foo {\n@@ -118,7 +118,7 @@ mod tests {\n \n     #[test]\n     fn test_resolve_crate_root() {\n-        let (analysis, file_id) = single_file(\n+        let (analysis, file_id) = fixture::file(\n             r#\"\n //- /main.rs\n mod foo;"}, {"sha": "e0830eb4fc6fbcc49ca263c15dc008ea456a82c7", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=b06259673f9b535a63c0cabf4eeb935ff73d86d0", "patch": "@@ -194,7 +194,7 @@ mod tests {\n     use expect_test::{expect, Expect};\n     use stdx::format_to;\n \n-    use crate::{mock_analysis::analysis_and_position, SearchScope};\n+    use crate::{fixture, SearchScope};\n \n     #[test]\n     fn test_struct_literal_after_space() {\n@@ -674,7 +674,7 @@ fn g() { f(); }\n     }\n \n     fn check_with_scope(ra_fixture: &str, search_scope: Option<SearchScope>, expect: Expect) {\n-        let (analysis, pos) = analysis_and_position(ra_fixture);\n+        let (analysis, pos) = fixture::position(ra_fixture);\n         let refs = analysis.find_all_refs(pos, search_scope).unwrap().unwrap();\n \n         let mut actual = String::new();"}, {"sha": "8cbe1ae5a290f01c0459e3a4c59e7d9b02d0f90d", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=b06259673f9b535a63c0cabf4eeb935ff73d86d0", "patch": "@@ -275,11 +275,11 @@ mod tests {\n     use test_utils::{assert_eq_text, mark};\n     use text_edit::TextEdit;\n \n-    use crate::{mock_analysis::analysis_and_position, FileId};\n+    use crate::{fixture, FileId};\n \n     fn check(new_name: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n         let ra_fixture_after = &trim_indent(ra_fixture_after);\n-        let (analysis, position) = analysis_and_position(ra_fixture_before);\n+        let (analysis, position) = fixture::position(ra_fixture_before);\n         let source_change = analysis.rename(position, new_name).unwrap();\n         let mut text_edit_builder = TextEdit::builder();\n         let mut file_id: Option<FileId> = None;\n@@ -297,7 +297,7 @@ mod tests {\n     }\n \n     fn check_expect(new_name: &str, ra_fixture: &str, expect: Expect) {\n-        let (analysis, position) = analysis_and_position(ra_fixture);\n+        let (analysis, position) = fixture::position(ra_fixture);\n         let source_change = analysis.rename(position, new_name).unwrap().unwrap();\n         expect.assert_debug_eq(&source_change)\n     }\n@@ -314,7 +314,7 @@ mod tests {\n \n     #[test]\n     fn test_rename_to_invalid_identifier() {\n-        let (analysis, position) = analysis_and_position(r#\"fn main() { let i<|> = 1; }\"#);\n+        let (analysis, position) = fixture::position(r#\"fn main() { let i<|> = 1; }\"#);\n         let new_name = \"invalid!\";\n         let source_change = analysis.rename(position, new_name).unwrap();\n         assert!(source_change.is_none());"}, {"sha": "752ef2f21911f4997c9d8b9b2fe14b3db98bc23f", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=b06259673f9b535a63c0cabf4eeb935ff73d86d0", "patch": "@@ -292,7 +292,7 @@ fn has_test_function_or_multiple_test_submodules(module: &ast::Module) -> bool {\n mod tests {\n     use expect_test::{expect, Expect};\n \n-    use crate::mock_analysis::analysis_and_position;\n+    use crate::fixture;\n \n     use super::{RunnableAction, BENCH, BIN, DOCTEST, TEST};\n \n@@ -302,7 +302,7 @@ mod tests {\n         actions: &[&RunnableAction],\n         expect: Expect,\n     ) {\n-        let (analysis, position) = analysis_and_position(ra_fixture);\n+        let (analysis, position) = fixture::position(ra_fixture);\n         let runnables = analysis.runnables(position.file_id).unwrap();\n         expect.assert_debug_eq(&runnables);\n         assert_eq!("}, {"sha": "694c4b7fa1537d23eb370cd6a9609904475d56af", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=b06259673f9b535a63c0cabf4eeb935ff73d86d0", "patch": "@@ -3,7 +3,7 @@ use std::fs;\n use expect_test::{expect_file, ExpectFile};\n use test_utils::project_dir;\n \n-use crate::{mock_analysis::single_file, FileRange, TextRange};\n+use crate::{fixture, FileRange, TextRange};\n \n #[test]\n fn test_highlighting() {\n@@ -178,7 +178,7 @@ fn accidentally_quadratic() {\n     let file = project_dir().join(\"crates/syntax/test_data/accidentally_quadratic\");\n     let src = fs::read_to_string(file).unwrap();\n \n-    let (analysis, file_id) = single_file(&src);\n+    let (analysis, file_id) = fixture::file(&src);\n \n     // let t = std::time::Instant::now();\n     let _ = analysis.highlight(file_id).unwrap();\n@@ -187,7 +187,7 @@ fn accidentally_quadratic() {\n \n #[test]\n fn test_ranges() {\n-    let (analysis, file_id) = single_file(\n+    let (analysis, file_id) = fixture::file(\n         r#\"\n #[derive(Clone, Debug)]\n struct Foo {\n@@ -228,7 +228,7 @@ fn main() {\n \n #[test]\n fn ranges_sorted() {\n-    let (analysis, file_id) = single_file(\n+    let (analysis, file_id) = fixture::file(\n         r#\"\n #[foo(bar = \"bar\")]\n macro_rules! test {}\n@@ -479,7 +479,7 @@ fn test_extern_crate() {\n /// result as HTML, and compares it with the HTML file given as `snapshot`.\n /// Note that the `snapshot` file is overwritten by the rendered HTML.\n fn check_highlighting(ra_fixture: &str, expect: ExpectFile, rainbow: bool) {\n-    let (analysis, file_id) = single_file(ra_fixture);\n+    let (analysis, file_id) = fixture::file(ra_fixture);\n     let actual_html = &analysis.highlight_as_html(file_id, rainbow).unwrap();\n     expect.assert_eq(actual_html)\n }"}, {"sha": "0eed2dbd78adbcdb12becf6dad3d4595f8fd2727", "filename": "crates/ide/src/syntax_tree.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Fsyntax_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Fsyntax_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_tree.rs?ref=b06259673f9b535a63c0cabf4eeb935ff73d86d0", "patch": "@@ -104,12 +104,12 @@ fn syntax_tree_for_token(node: &SyntaxToken, text_range: TextRange) -> Option<St\n mod tests {\n     use test_utils::assert_eq_text;\n \n-    use crate::mock_analysis::{analysis_and_range, single_file};\n+    use crate::fixture;\n \n     #[test]\n     fn test_syntax_tree_without_range() {\n         // Basic syntax\n-        let (analysis, file_id) = single_file(r#\"fn foo() {}\"#);\n+        let (analysis, file_id) = fixture::file(r#\"fn foo() {}\"#);\n         let syn = analysis.syntax_tree(file_id, None).unwrap();\n \n         assert_eq_text!(\n@@ -132,7 +132,7 @@ SOURCE_FILE@0..11\n             .trim()\n         );\n \n-        let (analysis, file_id) = single_file(\n+        let (analysis, file_id) = fixture::file(\n             r#\"\n fn test() {\n     assert!(\"\n@@ -184,7 +184,7 @@ SOURCE_FILE@0..60\n \n     #[test]\n     fn test_syntax_tree_with_range() {\n-        let (analysis, range) = analysis_and_range(r#\"<|>fn foo() {}<|>\"#.trim());\n+        let (analysis, range) = fixture::range(r#\"<|>fn foo() {}<|>\"#.trim());\n         let syn = analysis.syntax_tree(range.file_id, Some(range.range)).unwrap();\n \n         assert_eq_text!(\n@@ -206,7 +206,7 @@ FN@0..11\n             .trim()\n         );\n \n-        let (analysis, range) = analysis_and_range(\n+        let (analysis, range) = fixture::range(\n             r#\"fn test() {\n     <|>assert!(\"\n     fn foo() {\n@@ -242,7 +242,7 @@ EXPR_STMT@16..58\n \n     #[test]\n     fn test_syntax_tree_inside_string() {\n-        let (analysis, range) = analysis_and_range(\n+        let (analysis, range) = fixture::range(\n             r#\"fn test() {\n     assert!(\"\n <|>fn foo() {\n@@ -276,7 +276,7 @@ SOURCE_FILE@0..12\n         );\n \n         // With a raw string\n-        let (analysis, range) = analysis_and_range(\n+        let (analysis, range) = fixture::range(\n             r###\"fn test() {\n     assert!(r#\"\n <|>fn foo() {\n@@ -310,7 +310,7 @@ SOURCE_FILE@0..12\n         );\n \n         // With a raw string\n-        let (analysis, range) = analysis_and_range(\n+        let (analysis, range) = fixture::range(\n             r###\"fn test() {\n     assert!(r<|>#\"\n fn foo() {"}, {"sha": "a0dc4b9df6eceebead5c257951fa224c7b75aa3c", "filename": "crates/ide/src/typing/on_enter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Ftyping%2Fon_enter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06259673f9b535a63c0cabf4eeb935ff73d86d0/crates%2Fide%2Fsrc%2Ftyping%2Fon_enter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ftyping%2Fon_enter.rs?ref=b06259673f9b535a63c0cabf4eeb935ff73d86d0", "patch": "@@ -109,10 +109,10 @@ mod tests {\n     use stdx::trim_indent;\n     use test_utils::{assert_eq_text, mark};\n \n-    use crate::mock_analysis::analysis_and_position;\n+    use crate::fixture;\n \n     fn apply_on_enter(before: &str) -> Option<String> {\n-        let (analysis, position) = analysis_and_position(&before);\n+        let (analysis, position) = fixture::position(&before);\n         let result = analysis.on_enter(position).unwrap()?;\n \n         let mut actual = analysis.file_text(position.file_id).unwrap().to_string();"}]}