{"sha": "88f8f0779417963fe04aaba6719f1752ff1ce487", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ZjhmMDc3OTQxNzk2M2ZlMDRhYWJhNjcxOWYxNzUyZmYxY2U0ODc=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-03-24T17:54:56Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-03-24T17:54:56Z"}, "message": "Move `CtorOf` into `hir::def`.\n\nThis commit moves the definition of `CtorOf` from `rustc::hir` to\n`rustc::hir::def` and adds imports wherever it is used.", "tree": {"sha": "76ecf2fa97f25a876caa93f4749f390624e046f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76ecf2fa97f25a876caa93f4749f390624e046f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88f8f0779417963fe04aaba6719f1752ff1ce487", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlyXxN8ACgkQAXYLT59T\n8VRTkQ/8DgM5DtXKAiIunnDWvbG0OstY/XTgCf9gAxeCVJtYbLYrLPv8NmgYOZhU\nE0qvyInMZPqm64rpu6NexaVK19tz0ZaNipCXawMiRCm79SoPV93SfO0yLQskQGQr\n+wwigkMa7/jvsTKMVrwziHniB4esEoVIHPxctqF/07yA+fbqwQXKvzpjce2kGOqG\nC5mVqIel3XCOsQh+Ftjp4j6EZoUL95B76654qXWZqE6A5a8R4QZHBv3dhc79VfQ4\nRHnheXW9+DbcwAcXXsGMwDqg513lHGyAGogTVHXBNfNzUkZ6ydisgZtfXDRmYWBs\noSe5i+Q/1AfQIcnY9//bHo6MM5IVfi72RBOOycMq0mP5dYgaZw64r6UJoKdNb7YJ\nanFN73WnlmFtY7m4ltvXqddFzfp1B2KdiZxF3HihpzS2KrhnVEuzmO6e+jPp3Jou\n5+xhbshjWwL//b5+dc8d/p/TbvizroaN+hp530a5lFeZs27X7lo+07V2MIIZ5YU+\nHBKymne0ZKEVhZKP/aaJqMFvPMYiJb5xlLOrFzFDZy4r2dP8MbQUnTAgivjF807G\nE5lPhOwgYWHQcPRAYoqslms9jGMP17O2EjE74ylCekZ7jT7dNvhGbJq3DYw1+4C0\n8mI3nCvZtV0NkZKHfTu0GzyAhyD6lyRXDTV1lIPt5O7RFCLxbj8=\n=LhUs\n-----END PGP SIGNATURE-----", "payload": "tree 76ecf2fa97f25a876caa93f4749f390624e046f0\nparent db4770f699bb5e700c5946d5d1a1651c3ad0bfcc\nauthor David Wood <david@davidtw.co> 1553450096 +0100\ncommitter David Wood <david@davidtw.co> 1553450096 +0100\n\nMove `CtorOf` into `hir::def`.\n\nThis commit moves the definition of `CtorOf` from `rustc::hir` to\n`rustc::hir::def` and adds imports wherever it is used.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88f8f0779417963fe04aaba6719f1752ff1ce487", "html_url": "https://github.com/rust-lang/rust/commit/88f8f0779417963fe04aaba6719f1752ff1ce487", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88f8f0779417963fe04aaba6719f1752ff1ce487/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db4770f699bb5e700c5946d5d1a1651c3ad0bfcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/db4770f699bb5e700c5946d5d1a1651c3ad0bfcc", "html_url": "https://github.com/rust-lang/rust/commit/db4770f699bb5e700c5946d5d1a1651c3ad0bfcc"}], "stats": {"total": 111, "additions": 55, "deletions": 56}, "files": [{"sha": "e30d4a1a648e1991663b9e1ac23e8656d20e968b", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/88f8f0779417963fe04aaba6719f1752ff1ce487/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f8f0779417963fe04aaba6719f1752ff1ce487/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=88f8f0779417963fe04aaba6719f1752ff1ce487", "patch": "@@ -9,6 +9,15 @@ use crate::ty;\n \n use self::Namespace::*;\n \n+/// Encodes if a `Def::Ctor` is the constructor of an enum variant or a struct.\n+#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, HashStable)]\n+pub enum CtorOf {\n+    /// This `Def::Ctor` is a synthesized constructor of a tuple or unit struct.\n+    Struct,\n+    /// This `Def::Ctor` is a synthesized constructor of a tuple or unit variant.\n+    Variant,\n+}\n+\n #[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, HashStable)]\n pub enum CtorKind {\n     /// Constructor function automatically created by a tuple struct/variant.\n@@ -64,7 +73,7 @@ pub enum Def {\n     ConstParam(DefId),\n     Static(DefId, bool /* is_mutbl */),\n     /// `DefId` refers to the struct or enum variant's constructor.\n-    Ctor(hir::CtorOf, DefId, CtorKind),\n+    Ctor(CtorOf, DefId, CtorKind),\n     SelfCtor(DefId /* impl */),  // `DefId` refers to the impl\n     Method(DefId),\n     AssociatedConst(DefId),\n@@ -306,13 +315,13 @@ impl Def {\n             Def::Static(..) => \"static\",\n             Def::Enum(..) => \"enum\",\n             Def::Variant(..) => \"variant\",\n-            Def::Ctor(hir::CtorOf::Variant, _, CtorKind::Fn) => \"tuple variant\",\n-            Def::Ctor(hir::CtorOf::Variant, _, CtorKind::Const) => \"unit variant\",\n-            Def::Ctor(hir::CtorOf::Variant, _, CtorKind::Fictive) => \"struct variant\",\n+            Def::Ctor(CtorOf::Variant, _, CtorKind::Fn) => \"tuple variant\",\n+            Def::Ctor(CtorOf::Variant, _, CtorKind::Const) => \"unit variant\",\n+            Def::Ctor(CtorOf::Variant, _, CtorKind::Fictive) => \"struct variant\",\n             Def::Struct(..) => \"struct\",\n-            Def::Ctor(hir::CtorOf::Struct, _, CtorKind::Fn) => \"tuple struct\",\n-            Def::Ctor(hir::CtorOf::Struct, _, CtorKind::Const) => \"unit struct\",\n-            Def::Ctor(hir::CtorOf::Struct, _, CtorKind::Fictive) =>\n+            Def::Ctor(CtorOf::Struct, _, CtorKind::Fn) => \"tuple struct\",\n+            Def::Ctor(CtorOf::Struct, _, CtorKind::Const) => \"unit struct\",\n+            Def::Ctor(CtorOf::Struct, _, CtorKind::Fictive) =>\n                 bug!(\"impossible struct constructor\"),\n             Def::Existential(..) => \"existential type\",\n             Def::TyAlias(..) => \"type alias\","}, {"sha": "b94ccd90abdad48c87bd54b69a4c9311d0989316", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f8f0779417963fe04aaba6719f1752ff1ce487/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f8f0779417963fe04aaba6719f1752ff1ce487/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=88f8f0779417963fe04aaba6719f1752ff1ce487", "patch": "@@ -371,8 +371,8 @@ impl<'hir> Map<'hir> {\n             }\n             Node::Ctor(variant_data) => {\n                 let ctor_of = match self.find(self.get_parent_node(node_id)) {\n-                    Some(Node::Item(..)) => CtorOf::Struct,\n-                    Some(Node::Variant(..)) => CtorOf::Variant,\n+                    Some(Node::Item(..)) => def::CtorOf::Struct,\n+                    Some(Node::Variant(..)) => def::CtorOf::Variant,\n                     _ => unreachable!(),\n                 };\n                 variant_data.ctor_hir_id()"}, {"sha": "1bf7eed71bf0ff67dcfd7d504b9929ef2c7fe959", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/88f8f0779417963fe04aaba6719f1752ff1ce487/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f8f0779417963fe04aaba6719f1752ff1ce487/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=88f8f0779417963fe04aaba6719f1752ff1ce487", "patch": "@@ -2559,15 +2559,6 @@ impl CodegenFnAttrs {\n     }\n }\n \n-/// Encodes if a `Node::Ctor` is the constructor of an enum variant or a struct.\n-#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, HashStable)]\n-pub enum CtorOf {\n-    /// This `Node::Ctor` is a synthesized constructor of a tuple or unit struct.\n-    Struct,\n-    /// This `Node::Ctor` is a synthesized constructor of a tuple or unit variant.\n-    Variant,\n-}\n-\n #[derive(Copy, Clone, Debug)]\n pub enum Node<'hir> {\n     Item(&'hir Item),"}, {"sha": "bce559b17fa0015092b40833f99c301f970c215b", "filename": "src/librustc/hir/pat_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f8f0779417963fe04aaba6719f1752ff1ce487/src%2Flibrustc%2Fhir%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f8f0779417963fe04aaba6719f1752ff1ce487/src%2Flibrustc%2Fhir%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fpat_util.rs?ref=88f8f0779417963fe04aaba6719f1752ff1ce487", "patch": "@@ -1,4 +1,4 @@\n-use crate::hir::def::Def;\n+use crate::hir::def::{CtorOf, Def};\n use crate::hir::def_id::DefId;\n use crate::hir::{self, HirId, PatKind};\n use syntax::ast;\n@@ -126,7 +126,7 @@ impl hir::Pat {\n                 PatKind::Struct(hir::QPath::Resolved(_, ref path), ..) => {\n                     match path.def {\n                         Def::Variant(id) => variants.push(id),\n-                        Def::Ctor(hir::CtorOf::Variant, id, _) => variants.push(id),\n+                        Def::Ctor(CtorOf::Variant, id, _) => variants.push(id),\n                         _ => ()\n                     }\n                 }"}, {"sha": "da62423000261a8d6fb69a0cf9e662f316680988", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f8f0779417963fe04aaba6719f1752ff1ce487/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f8f0779417963fe04aaba6719f1752ff1ce487/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=88f8f0779417963fe04aaba6719f1752ff1ce487", "patch": "@@ -7,7 +7,7 @@ use crate::hir::{self, PatKind, TyKind};\n use crate::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use crate::hir::itemlikevisit::ItemLikeVisitor;\n \n-use crate::hir::def::Def;\n+use crate::hir::def::{CtorOf, Def};\n use crate::hir::CodegenFnAttrFlags;\n use crate::hir::def_id::{DefId, LOCAL_CRATE};\n use crate::lint;\n@@ -76,7 +76,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n             _ if self.in_pat => (),\n             Def::PrimTy(..) | Def::SelfTy(..) | Def::SelfCtor(..) |\n             Def::Local(..) | Def::Upvar(..) => {}\n-            Def::Ctor(hir::CtorOf::Variant, ctor_def_id, ..) => {\n+            Def::Ctor(CtorOf::Variant, ctor_def_id, ..) => {\n                 let variant_id = self.tcx.parent(ctor_def_id).unwrap();\n                 let enum_id = self.tcx.parent(variant_id).unwrap();\n                 self.check_def_id(enum_id);"}, {"sha": "f92331b35d847fda146d81c344f898f5040297db", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f8f0779417963fe04aaba6719f1752ff1ce487/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f8f0779417963fe04aaba6719f1752ff1ce487/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=88f8f0779417963fe04aaba6719f1752ff1ce487", "patch": "@@ -9,7 +9,7 @@ pub use self::MatchMode::*;\n use self::TrackMatchMode::*;\n use self::OverloadedCallType::*;\n \n-use crate::hir::def::Def;\n+use crate::hir::def::{CtorOf, Def};\n use crate::hir::def_id::DefId;\n use crate::infer::InferCtxt;\n use crate::middle::mem_categorization as mc;\n@@ -902,7 +902,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n             };\n             let def = mc.tables.qpath_def(qpath, pat.hir_id);\n             match def {\n-                Def::Ctor(hir::CtorOf::Variant, variant_ctor_did, ..) => {\n+                Def::Ctor(CtorOf::Variant, variant_ctor_did, ..) => {\n                     let variant_did = mc.tcx.parent(variant_ctor_did).unwrap();\n                     let downcast_cmt = mc.cat_downcast_if_needed(pat, cmt_pat, variant_did);\n "}, {"sha": "c907cbba4fd2f63a5451b64a3fc9c0c40c1a21fb", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/88f8f0779417963fe04aaba6719f1752ff1ce487/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f8f0779417963fe04aaba6719f1752ff1ce487/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=88f8f0779417963fe04aaba6719f1752ff1ce487", "patch": "@@ -62,7 +62,7 @@ use crate::middle::region;\n use crate::hir::def_id::{DefId, LocalDefId};\n use crate::hir::Node;\n use crate::infer::InferCtxt;\n-use crate::hir::def::{Def, CtorKind};\n+use crate::hir::def::{CtorOf, Def, CtorKind};\n use crate::ty::adjustment;\n use crate::ty::{self, DefIdTree, Ty, TyCtxt};\n use crate::ty::fold::TypeFoldable;\n@@ -1274,14 +1274,14 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                         debug!(\"access to unresolvable pattern {:?}\", pat);\n                         return Err(())\n                     }\n-                    Def::Ctor(hir::CtorOf::Variant, variant_ctor_did, CtorKind::Fn) => {\n+                    Def::Ctor(CtorOf::Variant, variant_ctor_did, CtorKind::Fn) => {\n                         let variant_did = self.tcx.parent(variant_ctor_did).unwrap();\n                         let enum_did = self.tcx.parent(variant_did).unwrap();\n                         (self.cat_downcast_if_needed(pat, cmt, variant_did),\n                          self.tcx.adt_def(enum_did)\n                              .variant_with_ctor_id(variant_ctor_did).fields.len())\n                     }\n-                    Def::Ctor(hir::CtorOf::Struct, _, CtorKind::Fn) | Def::SelfCtor(..) => {\n+                    Def::Ctor(CtorOf::Struct, _, CtorKind::Fn) | Def::SelfCtor(..) => {\n                         let ty = self.pat_ty_unadjusted(&pat)?;\n                         match ty.sty {\n                             ty::Adt(adt_def, _) => {\n@@ -1316,7 +1316,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                         debug!(\"access to unresolvable pattern {:?}\", pat);\n                         return Err(())\n                     }\n-                    Def::Ctor(hir::CtorOf::Variant, variant_ctor_did, _) => {\n+                    Def::Ctor(CtorOf::Variant, variant_ctor_did, _) => {\n                         let variant_did = self.tcx.parent(variant_ctor_did).unwrap();\n                         self.cat_downcast_if_needed(pat, cmt, variant_did)\n                     }"}, {"sha": "f32b290a7e6bf86540f300cd7c8a8d962c220871", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88f8f0779417963fe04aaba6719f1752ff1ce487/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f8f0779417963fe04aaba6719f1752ff1ce487/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=88f8f0779417963fe04aaba6719f1752ff1ce487", "patch": "@@ -6,7 +6,7 @@ pub use self::fold::TypeFoldable;\n \n use crate::hir::{map as hir_map, FreevarMap, GlobMap, TraitMap};\n use crate::hir::{HirId, Node};\n-use crate::hir::def::{Def, CtorKind, ExportMap};\n+use crate::hir::def::{Def, CtorOf, CtorKind, ExportMap};\n use crate::hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_data_structures::svh::Svh;\n use rustc_macros::HashStable;\n@@ -2941,12 +2941,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             Def::Struct(did) | Def::Union(did) => {\n                 self.adt_def(did).non_enum_variant()\n             }\n-            Def::Ctor(hir::CtorOf::Variant, variant_ctor_did, ..) => {\n+            Def::Ctor(CtorOf::Variant, variant_ctor_did, ..) => {\n                 let variant_did = self.parent(variant_ctor_did).unwrap();\n                 let enum_did = self.parent(variant_did).unwrap();\n                 self.adt_def(enum_did).variant_with_ctor_id(variant_ctor_did)\n             }\n-            Def::Ctor(hir::CtorOf::Struct, ctor_did, ..) => {\n+            Def::Ctor(CtorOf::Struct, ctor_did, ..) => {\n                 let struct_did = self.parent(ctor_did).expect(\"struct ctor has no parent\");\n                 self.adt_def(struct_did).non_enum_variant()\n             }"}, {"sha": "ecce27f4969d68dbeb2d0d159b65470659a930db", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88f8f0779417963fe04aaba6719f1752ff1ce487/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f8f0779417963fe04aaba6719f1752ff1ce487/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=88f8f0779417963fe04aaba6719f1752ff1ce487", "patch": "@@ -8,7 +8,7 @@ use rustc::hir::map::{DefKey, DefPath, DefPathData, DefPathHash, Definitions};\n use rustc::hir;\n use rustc::middle::cstore::LinkagePreference;\n use rustc::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n-use rustc::hir::def::{self, Def, CtorKind};\n+use rustc::hir::def::{self, Def, CtorOf, CtorKind};\n use rustc::hir::def_id::{CrateNum, DefId, DefIndex, DefIndexAddressSpace,\n                          CRATE_DEF_INDEX, LOCAL_CRATE, LocalDefId};\n use rustc::hir::map::definitions::DefPathTable;\n@@ -817,7 +817,7 @@ impl<'a, 'tcx> CrateMetadata {\n                             if let Some(ctor_def_id) = self.get_ctor_def_id(child_index) {\n                                 let ctor_kind = self.get_ctor_kind(child_index);\n                                 let ctor_def = Def::Ctor(\n-                                    hir::CtorOf::Struct, ctor_def_id, ctor_kind);\n+                                    hir::def::CtorOf::Struct, ctor_def_id, ctor_kind);\n                                 let vis = self.get_visibility(ctor_def_id.index);\n                                 callback(def::Export { def: ctor_def, vis, ident, span });\n                             }\n@@ -829,7 +829,7 @@ impl<'a, 'tcx> CrateMetadata {\n                             // error will be reported on any use of such resolution anyway.\n                             let ctor_def_id = self.get_ctor_def_id(child_index).unwrap_or(def_id);\n                             let ctor_kind = self.get_ctor_kind(child_index);\n-                            let ctor_def = Def::Ctor(hir::CtorOf::Variant, ctor_def_id, ctor_kind);\n+                            let ctor_def = Def::Ctor(CtorOf::Variant, ctor_def_id, ctor_kind);\n                             let vis = self.get_visibility(ctor_def_id.index);\n                             callback(def::Export { def: ctor_def, ident, vis, span });\n                         }"}, {"sha": "805d386b190beb6bc9ec947736b781258bdac464", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f8f0779417963fe04aaba6719f1752ff1ce487/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f8f0779417963fe04aaba6719f1752ff1ce487/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=88f8f0779417963fe04aaba6719f1752ff1ce487", "patch": "@@ -4,7 +4,7 @@ use crate::hair::cx::block;\n use crate::hair::cx::to_ref::ToRef;\n use crate::hair::util::UserAnnotatedTyHelpers;\n use rustc_data_structures::indexed_vec::Idx;\n-use rustc::hir::def::{Def, CtorKind};\n+use rustc::hir::def::{CtorOf, Def, CtorKind};\n use rustc::mir::interpret::{GlobalId, ErrorHandled, ConstValue};\n use rustc::ty::{self, AdtKind, Ty};\n use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow, AutoBorrowMutability};\n@@ -675,7 +675,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                         .ty_adt_def()\n                         .and_then(|adt_def| {\n                         match def {\n-                            Def::Ctor(hir::CtorOf::Variant, variant_ctor_id, CtorKind::Const) => {\n+                            Def::Ctor(CtorOf::Variant, variant_ctor_id, CtorKind::Const) => {\n                                 let idx = adt_def.variant_index_with_ctor_id(variant_ctor_id);\n                                 let (d, o) = adt_def.discriminant_def_for_variant(idx);\n                                 use rustc::ty::util::IntTypeExt;"}, {"sha": "83a281ac7a791cbbd3917e8208be56dbc76f1107", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88f8f0779417963fe04aaba6719f1752ff1ce487/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f8f0779417963fe04aaba6719f1752ff1ce487/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=88f8f0779417963fe04aaba6719f1752ff1ce487", "patch": "@@ -18,7 +18,7 @@ use rustc::ty::{CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTyp\n use rustc::ty::subst::{SubstsRef, Kind};\n use rustc::ty::layout::VariantIdx;\n use rustc::hir::{self, PatKind, RangeEnd};\n-use rustc::hir::def::{Def, CtorKind};\n+use rustc::hir::def::{CtorOf, Def, CtorKind};\n use rustc::hir::pat_util::EnumerateAndAdjustIterator;\n \n use rustc_data_structures::indexed_vec::Idx;\n@@ -734,7 +734,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n         subpatterns: Vec<FieldPattern<'tcx>>,\n     ) -> PatternKind<'tcx> {\n         let def = match def {\n-            Def::Ctor(hir::CtorOf::Variant, variant_ctor_id, ..) => {\n+            Def::Ctor(CtorOf::Variant, variant_ctor_id, ..) => {\n                 let variant_id = self.tcx.parent(variant_ctor_id).unwrap();\n                 Def::Variant(variant_id)\n             },\n@@ -765,7 +765,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                 }\n             }\n \n-            Def::Struct(..) | Def::Ctor(hir::CtorOf::Struct, ..) | Def::Union(..) |\n+            Def::Struct(..) | Def::Ctor(CtorOf::Struct, ..) | Def::Union(..) |\n             Def::TyAlias(..) | Def::AssociatedTy(..) | Def::SelfTy(..) | Def::SelfCtor(..) => {\n                 PatternKind::Leaf { subpatterns }\n             }"}, {"sha": "a62df699e050b11bd9286cb8b7040d23ffb9c8e4", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/88f8f0779417963fe04aaba6719f1752ff1ce487/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f8f0779417963fe04aaba6719f1752ff1ce487/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=88f8f0779417963fe04aaba6719f1752ff1ce487", "patch": "@@ -12,7 +12,7 @@ use crate::Namespace::{self, TypeNS, ValueNS, MacroNS};\n use crate::{resolve_error, resolve_struct_error, ResolutionError};\n \n use rustc::bug;\n-use rustc::hir::{self, def::*};\n+use rustc::hir::def::*;\n use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, LOCAL_CRATE, DefId};\n use rustc::ty;\n use rustc::middle::cstore::CrateStore;\n@@ -533,7 +533,7 @@ impl<'a> Resolver<'a> {\n                 // If this is a tuple or unit struct, define a name\n                 // in the value namespace as well.\n                 if let Some(ctor_node_id) = struct_def.ctor_id() {\n-                    let ctor_def = Def::Ctor(hir::CtorOf::Struct,\n+                    let ctor_def = Def::Ctor(CtorOf::Struct,\n                                              self.definitions.local_def_id(ctor_node_id),\n                                              CtorKind::from_ast(struct_def));\n                     self.define(parent, ident, ValueNS, (ctor_def, ctor_vis, sp, expansion));\n@@ -596,7 +596,7 @@ impl<'a> Resolver<'a> {\n         let ctor_node_id = variant.node.data.ctor_id().unwrap_or(variant.node.id);\n         let ctor_def_id = self.definitions.local_def_id(ctor_node_id);\n         let ctor_kind = CtorKind::from_ast(&variant.node.data);\n-        let ctor_def = Def::Ctor(hir::CtorOf::Variant, ctor_def_id, ctor_kind);\n+        let ctor_def = Def::Ctor(CtorOf::Variant, ctor_def_id, ctor_kind);\n         self.define(parent, ident, ValueNS, (ctor_def, vis, variant.span, expansion));\n     }\n \n@@ -654,10 +654,10 @@ impl<'a> Resolver<'a> {\n                 self.define(parent, ident, TypeNS, (def, vis, DUMMY_SP, expansion));\n             }\n             Def::Fn(..) | Def::Static(..) | Def::Const(..) |\n-            Def::Ctor(hir::CtorOf::Variant, ..) => {\n+            Def::Ctor(CtorOf::Variant, ..) => {\n                 self.define(parent, ident, ValueNS, (def, vis, DUMMY_SP, expansion));\n             }\n-            Def::Ctor(hir::CtorOf::Struct, def_id, ..) => {\n+            Def::Ctor(CtorOf::Struct, def_id, ..) => {\n                 self.define(parent, ident, ValueNS, (def, vis, DUMMY_SP, expansion));\n \n                 if let Some(struct_def_id) ="}, {"sha": "5021353b7dff8f0df34c3c7ac6e24dbcb4695f57", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f8f0779417963fe04aaba6719f1752ff1ce487/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f8f0779417963fe04aaba6719f1752ff1ce487/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=88f8f0779417963fe04aaba6719f1752ff1ce487", "patch": "@@ -1360,7 +1360,7 @@ impl<'a> NameBinding<'a> {\n     fn is_variant(&self) -> bool {\n         match self.kind {\n             NameBindingKind::Def(Def::Variant(..), _) |\n-            NameBindingKind::Def(Def::Ctor(hir::CtorOf::Variant, ..), _) => true,\n+            NameBindingKind::Def(Def::Ctor(CtorOf::Variant, ..), _) => true,\n             _ => false,\n         }\n     }"}, {"sha": "96a0b364678c314001ce442eee2473bd33c3b4e2", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f8f0779417963fe04aaba6719f1752ff1ce487/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f8f0779417963fe04aaba6719f1752ff1ce487/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=88f8f0779417963fe04aaba6719f1752ff1ce487", "patch": "@@ -14,7 +14,7 @@ mod span_utils;\n mod sig;\n \n use rustc::hir;\n-use rustc::hir::def::Def as HirDef;\n+use rustc::hir::def::{CtorOf, Def as HirDef};\n use rustc::hir::Node;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::middle::privacy::AccessLevels;\n@@ -757,7 +757,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     ref_id: id_from_def_id(def_id),\n                 })\n             }\n-            HirDef::Ctor(hir::CtorOf::Struct, def_id, _) => {\n+            HirDef::Ctor(CtorOf::Struct, def_id, _) => {\n                 // This is a reference to a tuple struct where the def_id points\n                 // to an invisible constructor function. That is not a very useful\n                 // def, so adjust to point to the tuple struct itself."}, {"sha": "3d289a5c48df82daf552953aa9e73787bc39562e", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88f8f0779417963fe04aaba6719f1752ff1ce487/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f8f0779417963fe04aaba6719f1752ff1ce487/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=88f8f0779417963fe04aaba6719f1752ff1ce487", "patch": "@@ -4,7 +4,7 @@\n \n use errors::{Applicability, DiagnosticId};\n use crate::hir::{self, GenericArg, GenericArgs, ExprKind};\n-use crate::hir::def::Def;\n+use crate::hir::def::{CtorOf, Def};\n use crate::hir::def_id::DefId;\n use crate::hir::HirVec;\n use crate::lint;\n@@ -1596,7 +1596,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n \n         match def {\n             // Case 1. Reference to a struct constructor.\n-            Def::Ctor(hir::CtorOf::Struct, def_id, ..) |\n+            Def::Ctor(CtorOf::Struct, def_id, ..) |\n             Def::SelfCtor(.., def_id) => {\n                 // Everything but the final segment should have no\n                 // parameters at all.\n@@ -1608,7 +1608,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n             }\n \n             // Case 2. Reference to a variant constructor.\n-            Def::Ctor(hir::CtorOf::Variant, def_id, ..) | Def::Variant(def_id, ..) => {\n+            Def::Ctor(CtorOf::Variant, def_id, ..) | Def::Variant(def_id, ..) => {\n                 let adt_def = self_ty.map(|t| t.ty_adt_def().unwrap());\n                 let (generics_def_id, index) = if let Some(adt_def) = adt_def {\n                     debug_assert!(adt_def.is_enum());"}, {"sha": "5c6bbe2dee5affcb99823fd3ff4504e469e4743e", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/88f8f0779417963fe04aaba6719f1752ff1ce487/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f8f0779417963fe04aaba6719f1752ff1ce487/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=88f8f0779417963fe04aaba6719f1752ff1ce487", "patch": "@@ -15,7 +15,7 @@ use crate::namespace::Namespace;\n use errors::{Applicability, DiagnosticBuilder};\n use rustc_data_structures::sync::Lrc;\n use rustc::hir;\n-use rustc::hir::def::Def;\n+use rustc::hir::def::{CtorOf, Def};\n use rustc::hir::def_id::DefId;\n use rustc::traits;\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n@@ -422,8 +422,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     // them as well. It's ok to use the variant's id as a ctor id since an\n                     // error will be reported on any use of such resolution anyway.\n                     let ctor_def_id = variant_def.ctor_def_id.unwrap_or(variant_def.def_id);\n-                    let def = Def::Ctor(hir::CtorOf::Variant, ctor_def_id, variant_def.ctor_kind);\n-\n+                    let def = Def::Ctor(CtorOf::Variant, ctor_def_id, variant_def.ctor_kind);\n                     tcx.check_stability(def.def_id(), Some(expr_id), span);\n                     return Ok(def);\n                 }"}, {"sha": "1c3c0f479f699d2eb32bf78a07e7632c4aad36d2", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88f8f0779417963fe04aaba6719f1752ff1ce487/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f8f0779417963fe04aaba6719f1752ff1ce487/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=88f8f0779417963fe04aaba6719f1752ff1ce487", "patch": "@@ -86,7 +86,7 @@ mod op;\n use crate::astconv::{AstConv, PathSeg};\n use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc::hir::{self, ExprKind, GenericArg, ItemKind, Node, PatKind, QPath};\n-use rustc::hir::def::{CtorKind, Def};\n+use rustc::hir::def::{CtorOf, CtorKind, Def};\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n@@ -5345,7 +5345,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 Some(adt_def) if adt_def.has_ctor() => {\n                     let variant = adt_def.non_enum_variant();\n                     let ctor_def_id = variant.ctor_def_id.unwrap();\n-                    let def = Def::Ctor(hir::CtorOf::Struct, ctor_def_id, variant.ctor_kind);\n+                    let def = Def::Ctor(CtorOf::Struct, ctor_def_id, variant.ctor_kind);\n                     (def, ctor_def_id, tcx.type_of(ctor_def_id))\n                 }\n                 _ => {\n@@ -5418,7 +5418,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let mut user_self_ty = None;\n         let mut is_alias_variant_ctor = false;\n         match def {\n-            Def::Ctor(hir::CtorOf::Variant, _, _) => {\n+            Def::Ctor(CtorOf::Variant, _, _) => {\n                 if let Some(self_ty) = self_ty {\n                     let adt_def = self_ty.ty_adt_def().unwrap();\n                     user_self_ty = Some(UserSelfTy {"}]}