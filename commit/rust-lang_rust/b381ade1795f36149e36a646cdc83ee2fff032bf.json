{"sha": "b381ade1795f36149e36a646cdc83ee2fff032bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzODFhZGUxNzk1ZjM2MTQ5ZTM2YTY0NmNkYzgzZWUyZmZmMDMyYmY=", "commit": {"author": {"name": "Christoph Walcher", "email": "christoph-wa@gmx.de", "date": "2020-08-14T23:40:47Z"}, "committer": {"name": "Christoph Walcher", "email": "christoph-wa@gmx.de", "date": "2020-08-14T23:40:55Z"}, "message": "elide lifetimes", "tree": {"sha": "b2cf31b1b3f13c50ef69b1e790cde34183bdc1ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2cf31b1b3f13c50ef69b1e790cde34183bdc1ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b381ade1795f36149e36a646cdc83ee2fff032bf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE2xeoiquC04hUiBqUoZMWSk0F7kQFAl83IQcACgkQoZMWSk0F\n7kTdrgf/WwxcrfgQUUpIDrtgAfV3sxzkjAMhwQaIIkIhsrK1WnvCExTgPuo88Y+E\npblR0zIN0ioN1OA6DifjhhnXzamtabZdxGiMpXhbHKANHhuJWW3TYKH1piq1TE9j\nlWpchM6q7Fno73FSqPgl+J/gQea9/1QD81M31+he8r2nQczoAvTV5So4yqezLN6D\nNgm0P7zDCYMX5xr6MN1YlRwbXUO6QyBGpQ8S1aTwemvWDQ77y9ofeYZI0gAbnQYs\nUmnxg6lIfWx2lPJc29wv0U2H0ZalEiCZylJlNmXMYh+cHq67C/QdvxMf4mD/pK1h\nRdEwMg4nE7LsHAKSY+JJ+VhZXj81oA==\n=HZV2\n-----END PGP SIGNATURE-----", "payload": "tree b2cf31b1b3f13c50ef69b1e790cde34183bdc1ee\nparent ae56e988a2ae7b59c684cbbc5c326cb8097b3688\nauthor Christoph Walcher <christoph-wa@gmx.de> 1597448447 +0200\ncommitter Christoph Walcher <christoph-wa@gmx.de> 1597448455 +0200\n\nelide lifetimes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b381ade1795f36149e36a646cdc83ee2fff032bf", "html_url": "https://github.com/rust-lang/rust/commit/b381ade1795f36149e36a646cdc83ee2fff032bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b381ade1795f36149e36a646cdc83ee2fff032bf/comments", "author": {"login": "wiomoc", "id": 10638299, "node_id": "MDQ6VXNlcjEwNjM4Mjk5", "avatar_url": "https://avatars.githubusercontent.com/u/10638299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wiomoc", "html_url": "https://github.com/wiomoc", "followers_url": "https://api.github.com/users/wiomoc/followers", "following_url": "https://api.github.com/users/wiomoc/following{/other_user}", "gists_url": "https://api.github.com/users/wiomoc/gists{/gist_id}", "starred_url": "https://api.github.com/users/wiomoc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wiomoc/subscriptions", "organizations_url": "https://api.github.com/users/wiomoc/orgs", "repos_url": "https://api.github.com/users/wiomoc/repos", "events_url": "https://api.github.com/users/wiomoc/events{/privacy}", "received_events_url": "https://api.github.com/users/wiomoc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wiomoc", "id": 10638299, "node_id": "MDQ6VXNlcjEwNjM4Mjk5", "avatar_url": "https://avatars.githubusercontent.com/u/10638299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wiomoc", "html_url": "https://github.com/wiomoc", "followers_url": "https://api.github.com/users/wiomoc/followers", "following_url": "https://api.github.com/users/wiomoc/following{/other_user}", "gists_url": "https://api.github.com/users/wiomoc/gists{/gist_id}", "starred_url": "https://api.github.com/users/wiomoc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wiomoc/subscriptions", "organizations_url": "https://api.github.com/users/wiomoc/orgs", "repos_url": "https://api.github.com/users/wiomoc/repos", "events_url": "https://api.github.com/users/wiomoc/events{/privacy}", "received_events_url": "https://api.github.com/users/wiomoc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae56e988a2ae7b59c684cbbc5c326cb8097b3688", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae56e988a2ae7b59c684cbbc5c326cb8097b3688", "html_url": "https://github.com/rust-lang/rust/commit/ae56e988a2ae7b59c684cbbc5c326cb8097b3688"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "614773a7e26bf1faf10a0cfbd42b2e15737defa4", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b381ade1795f36149e36a646cdc83ee2fff032bf/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b381ade1795f36149e36a646cdc83ee2fff032bf/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=b381ade1795f36149e36a646cdc83ee2fff032bf", "patch": "@@ -1310,7 +1310,7 @@ declare_clippy_lint! {\n     /// **What it does:** Warns when using push_str with a single-character string literal,\n     /// and push with a char would work fine.\n     ///\n-    /// **Why is this bad?** it's less clear that we are pushing a single character\n+    /// **Why is this bad?** It's less clear that we are pushing a single character\n     ///\n     /// **Known problems:** None\n     ///\n@@ -3154,9 +3154,9 @@ fn lint_chars_last_cmp_with_unwrap<'tcx>(cx: &LateContext<'tcx>, info: &BinaryEx\n     }\n }\n \n-fn get_hint_if_single_char_arg<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    arg: &'tcx hir::Expr<'_>,\n+fn get_hint_if_single_char_arg(\n+    cx: &LateContext<'_>,\n+    arg: &hir::Expr<'_>,\n     applicability: &mut Applicability,\n ) -> Option<String> {\n     if_chain! {\n@@ -3183,7 +3183,7 @@ fn get_hint_if_single_char_arg<'tcx>(\n }\n \n /// lint for length-1 `str`s for methods in `PATTERN_METHODS`\n-fn lint_single_char_pattern<'tcx>(cx: &LateContext<'tcx>, _expr: &'tcx hir::Expr<'_>, arg: &'tcx hir::Expr<'_>) {\n+fn lint_single_char_pattern(cx: &LateContext<'_>, _expr: &hir::Expr<'_>, arg: &hir::Expr<'_>) {\n     let mut applicability = Applicability::MachineApplicable;\n     if let Some(hint) = get_hint_if_single_char_arg(cx, arg, &mut applicability) {\n         span_lint_and_sugg(\n@@ -3199,7 +3199,7 @@ fn lint_single_char_pattern<'tcx>(cx: &LateContext<'tcx>, _expr: &'tcx hir::Expr\n }\n \n /// lint for length-1 `str`s as argument for `push_str`\n-fn lint_single_char_push_string<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, args: &'tcx [hir::Expr<'_>]) {\n+fn lint_single_char_push_string(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<'_>]) {\n     let mut applicability = Applicability::MachineApplicable;\n     if let Some(extension_string) = get_hint_if_single_char_arg(cx, &args[1], &mut applicability) {\n         let base_string_snippet = snippet_with_applicability(cx, args[0].span, \"_\", &mut applicability);"}]}