{"sha": "125f33aa4c45a6eff14a23d2505455b55a3b0d15", "node_id": "C_kwDOAAsO6NoAKDEyNWYzM2FhNGM0NWE2ZWZmMTRhMjNkMjUwNTQ1NWI1NWEzYjBkMTU", "commit": {"author": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2022-07-02T18:50:55Z"}, "committer": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2022-07-02T18:58:16Z"}, "message": "Only obey optimize-tests flag on UI tests that are run-pass\n\n```\noptimize-tests = false, master\n25.98s\n\noptimize-tests = true, master\n34.69s\n\noptimize-tests = true, patched\n28.79s\n```\n\nEffects:\n\n- faster UI tests\n- llvm asserts get exercised less on build-pass tests\n- the difference between opt and nopt builds shrinks a bit\n- aux libs don't get optimized since they don't have a pass mode and almost never have explicit compile flags", "tree": {"sha": "27779847fcd9641efdc421d8a15a3fc3decef446", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27779847fcd9641efdc421d8a15a3fc3decef446"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/125f33aa4c45a6eff14a23d2505455b55a3b0d15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/125f33aa4c45a6eff14a23d2505455b55a3b0d15", "html_url": "https://github.com/rust-lang/rust/commit/125f33aa4c45a6eff14a23d2505455b55a3b0d15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/125f33aa4c45a6eff14a23d2505455b55a3b0d15/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4118ad24d6c41cca330dc3f9e8f218690944d0ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/4118ad24d6c41cca330dc3f9e8f218690944d0ff", "html_url": "https://github.com/rust-lang/rust/commit/4118ad24d6c41cca330dc3f9e8f218690944d0ff"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "65d7a264edd91e8e363ad19b87e8eab1abea7833", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/125f33aa4c45a6eff14a23d2505455b55a3b0d15/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125f33aa4c45a6eff14a23d2505455b55a3b0d15/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=125f33aa4c45a6eff14a23d2505455b55a3b0d15", "patch": "@@ -1365,11 +1365,14 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n         }\n \n         let mut flags = if is_rustdoc { Vec::new() } else { vec![\"-Crpath\".to_string()] };\n-        if !is_rustdoc {\n+        if !is_rustdoc && mode != \"ui\" {\n             if builder.config.rust_optimize_tests {\n                 flags.push(\"-O\".to_string());\n             }\n         }\n+        if builder.config.rust_optimize_tests {\n+            cmd.arg(\"--optimize-tests\");\n+        }\n         flags.push(format!(\"-Cdebuginfo={}\", builder.config.rust_debuginfo_level_tests));\n         flags.push(builder.config.cmd.rustc_args().join(\" \"));\n "}, {"sha": "bd058bcda41f1664cef214c2cd0a8c8160183788", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/125f33aa4c45a6eff14a23d2505455b55a3b0d15/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125f33aa4c45a6eff14a23d2505455b55a3b0d15/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=125f33aa4c45a6eff14a23d2505455b55a3b0d15", "patch": "@@ -269,6 +269,11 @@ pub struct Config {\n     /// Flags to pass to the compiler when building for the target\n     pub target_rustcflags: Option<String>,\n \n+    /// Whether tests should be optimized.\n+    /// Currently only provides a default for UI-tests that are run-pass.\n+    /// Other tests are controlled by rustcflags or the testfiles themselves.\n+    pub optimize_tests: bool,\n+\n     /// What panic strategy the target is built with.  Unwind supports Abort, but\n     /// not vice versa.\n     pub target_panic: PanicStrategy,"}, {"sha": "7cf4a88c47043593e870e675e51d0dfcf2100ac4", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/125f33aa4c45a6eff14a23d2505455b55a3b0d15/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125f33aa4c45a6eff14a23d2505455b55a3b0d15/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=125f33aa4c45a6eff14a23d2505455b55a3b0d15", "patch": "@@ -244,6 +244,7 @@ impl TestProps {\n \n         // copy over select properties to the aux build:\n         props.incremental_dir = self.incremental_dir.clone();\n+        props.ignore_pass = true;\n         props.load_from(testfile, cfg, config);\n \n         props"}, {"sha": "28ab3a72ef68b0f97d9272e8444b1ad38210800e", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/125f33aa4c45a6eff14a23d2505455b55a3b0d15/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125f33aa4c45a6eff14a23d2505455b55a3b0d15/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=125f33aa4c45a6eff14a23d2505455b55a3b0d15", "patch": "@@ -102,6 +102,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         )\n         .optmulti(\"\", \"host-rustcflags\", \"flags to pass to rustc for host\", \"FLAGS\")\n         .optmulti(\"\", \"target-rustcflags\", \"flags to pass to rustc for target\", \"FLAGS\")\n+        .optflag(\"\", \"optimize-tests\", \"build UI tests with optimization enabled\")\n         .optopt(\"\", \"target-panic\", \"what panic strategy the target supports\", \"unwind | abort\")\n         .optflag(\"\", \"verbose\", \"run tests verbosely, showing all output\")\n         .optflag(\n@@ -253,6 +254,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         runtool: matches.opt_str(\"runtool\"),\n         host_rustcflags: Some(matches.opt_strs(\"host-rustcflags\").join(\" \")),\n         target_rustcflags: Some(matches.opt_strs(\"target-rustcflags\").join(\" \")),\n+        optimize_tests: matches.opt_present(\"optimize-tests\"),\n         target_panic: match matches.opt_str(\"target-panic\").as_deref() {\n             Some(\"unwind\") | None => PanicStrategy::Unwind,\n             Some(\"abort\") => PanicStrategy::Abort,"}, {"sha": "8c98f87c48ca831cc34c271f957059a950e6d480", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/125f33aa4c45a6eff14a23d2505455b55a3b0d15/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125f33aa4c45a6eff14a23d2505455b55a3b0d15/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=125f33aa4c45a6eff14a23d2505455b55a3b0d15", "patch": "@@ -1875,6 +1875,18 @@ impl<'test> TestCx<'test> {\n                 rustc.arg(\"-Zdeduplicate-diagnostics=no\");\n             }\n             Ui => {\n+                // If optimize-tests is true we still only want to optimize tests that actually get\n+                // executed and that don't specify their own optimization levels\n+                if self.config.optimize_tests\n+                    && self.props.pass_mode(&self.config) == Some(PassMode::Run)\n+                    && !self\n+                        .props\n+                        .compile_flags\n+                        .iter()\n+                        .any(|arg| arg == \"-O\" || arg.contains(\"opt-level\"))\n+                {\n+                    rustc.arg(\"-O\");\n+                }\n                 if !self.props.compile_flags.iter().any(|s| s.starts_with(\"--error-format\")) {\n                     rustc.args(&[\"--error-format\", \"json\"]);\n                     rustc.args(&[\"--json\", \"future-incompat\"]);"}]}