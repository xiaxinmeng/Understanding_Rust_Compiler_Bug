{"sha": "92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyYzMyZDJkOGNhNGRjN2ZiOGRkZjkyOTY1ODBiMGM1NzMzNTBjNmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-10T03:52:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-10T03:52:19Z"}, "message": "Auto merge of #47308 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 5 pull requests\n\n- Successful merges: #46762, #46777, #47262, #47285, #47301\n- Failed merges:", "tree": {"sha": "bf55bcc379417cdfe1370f389c123dcce9aababa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf55bcc379417cdfe1370f389c123dcce9aababa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a", "html_url": "https://github.com/rust-lang/rust/commit/92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "107e65ec019ce1654d50e415dbbf742f7f1a5e15", "url": "https://api.github.com/repos/rust-lang/rust/commits/107e65ec019ce1654d50e415dbbf742f7f1a5e15", "html_url": "https://github.com/rust-lang/rust/commit/107e65ec019ce1654d50e415dbbf742f7f1a5e15"}, {"sha": "8fbfd2c940f644cbe8358d971f6a134819eedefe", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fbfd2c940f644cbe8358d971f6a134819eedefe", "html_url": "https://github.com/rust-lang/rust/commit/8fbfd2c940f644cbe8358d971f6a134819eedefe"}], "stats": {"total": 779, "additions": 501, "deletions": 278}, "files": [{"sha": "5f216169efe2ce8a81df17f66eaaaf1383cf484f", "filename": "src/doc/rust.css", "status": "modified", "additions": 266, "deletions": 223, "changes": 489, "blob_url": "https://github.com/rust-lang/rust/blob/92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a/src%2Fdoc%2Frust.css", "raw_url": "https://github.com/rust-lang/rust/raw/92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a/src%2Fdoc%2Frust.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.css?ref=92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a", "patch": "@@ -11,181 +11,181 @@\n  * except according to those terms.\n  */\n @font-face {\n-    font-family: 'Fira Sans';\n-    font-style: normal;\n-    font-weight: 400;\n-    src: local('Fira Sans'), url(\"FiraSans-Regular.woff\") format('woff');\n+\tfont-family: 'Fira Sans';\n+\tfont-style: normal;\n+\tfont-weight: 400;\n+\tsrc: local('Fira Sans'), url(\"FiraSans-Regular.woff\") format('woff');\n }\n @font-face {\n-    font-family: 'Fira Sans';\n-    font-style: normal;\n-    font-weight: 500;\n-    src: local('Fira Sans Medium'), url(\"FiraSans-Medium.woff\") format('woff');\n+\tfont-family: 'Fira Sans';\n+\tfont-style: normal;\n+\tfont-weight: 500;\n+\tsrc: local('Fira Sans Medium'), url(\"FiraSans-Medium.woff\") format('woff');\n }\n @font-face {\n-    font-family: 'Source Serif Pro';\n-    font-style: normal;\n-    font-weight: 400;\n-    src: local('Source Serif Pro'), url(\"SourceSerifPro-Regular.woff\") format('woff');\n+\tfont-family: 'Source Serif Pro';\n+\tfont-style: normal;\n+\tfont-weight: 400;\n+\tsrc: local('Source Serif Pro'), url(\"SourceSerifPro-Regular.woff\") format('woff');\n }\n @font-face {\n-    font-family: 'Source Serif Pro';\n-    font-style: italic;\n-    font-weight: 400;\n-    src: url(\"Heuristica-Italic.woff\") format('woff');\n+\tfont-family: 'Source Serif Pro';\n+\tfont-style: italic;\n+\tfont-weight: 400;\n+\tsrc: url(\"Heuristica-Italic.woff\") format('woff');\n }\n @font-face {\n-    font-family: 'Source Serif Pro';\n-    font-style: normal;\n-    font-weight: 700;\n-    src: local('Source Serif Pro Bold'), url(\"SourceSerifPro-Bold.woff\") format('woff');\n+\tfont-family: 'Source Serif Pro';\n+\tfont-style: normal;\n+\tfont-weight: 700;\n+\tsrc: local('Source Serif Pro Bold'), url(\"SourceSerifPro-Bold.woff\") format('woff');\n }\n @font-face {\n-    font-family: 'Source Code Pro';\n-    font-style: normal;\n-    font-weight: 400;\n-    /* Avoid using locally installed font because bad versions are in circulation:\n-     * see https://github.com/rust-lang/rust/issues/24355 */\n-    src: url(\"SourceCodePro-Regular.woff\") format('woff');\n+\tfont-family: 'Source Code Pro';\n+\tfont-style: normal;\n+\tfont-weight: 400;\n+\t/* Avoid using locally installed font because bad versions are in circulation:\n+\t * see https://github.com/rust-lang/rust/issues/24355 */\n+\tsrc: url(\"SourceCodePro-Regular.woff\") format('woff');\n }\n \n *:not(body) {\n   -webkit-box-sizing: border-box;\n-     -moz-box-sizing: border-box;\n-          box-sizing: border-box;\n+\t -moz-box-sizing: border-box;\n+\t\t  box-sizing: border-box;\n }\n \n /* General structure */\n \n body {\n-    background-color: white;\n-    margin: 0 auto;\n-    padding: 0 15px;\n-    font-family: \"Source Serif Pro\", Georgia, Times, \"Times New Roman\", serif;\n-    font-size: 18px;\n-    color: #333;\n-    line-height: 1.428571429;\n-\n-    -webkit-font-feature-settings: \"kern\", \"liga\";\n-    -moz-font-feature-settings: \"kern\", \"liga\";\n-    font-feature-settings: \"kern\", \"liga\";\n+\tbackground-color: white;\n+\tmargin: 0 auto;\n+\tpadding: 0 15px;\n+\tfont-family: \"Source Serif Pro\", Georgia, Times, \"Times New Roman\", serif;\n+\tfont-size: 18px;\n+\tcolor: #333;\n+\tline-height: 1.428571429;\n+\n+\t-webkit-font-feature-settings: \"kern\", \"liga\";\n+\t-moz-font-feature-settings: \"kern\", \"liga\";\n+\tfont-feature-settings: \"kern\", \"liga\";\n }\n @media (min-width: 768px) {\n-    body {\n-        max-width: 750px;\n-    }\n+\tbody {\n+\t\tmax-width: 750px;\n+\t}\n }\n \n h1, h2, h3, h4, h5, h6, nav, #versioninfo {\n-    font-family: \"Fira Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n+\tfont-family: \"Fira Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n }\n h1, h2, h3, h4, h5, h6 {\n-    color: black;\n-    font-weight: 400;\n-    line-height: 1.1;\n+\tcolor: black;\n+\tfont-weight: 400;\n+\tline-height: 1.1;\n }\n h1, h2, h3 {\n-    margin-top: 20px;\n-    margin-bottom: 15px;\n+\tmargin-top: 20px;\n+\tmargin-bottom: 15px;\n }\n h1 {\n-    margin-bottom: 20px;\n+\tmargin-bottom: 20px;\n }\n h4, h5, h6 {\n-    margin-top: 12px;\n-    margin-bottom: 10px;\n-    padding: 5px 10px;\n+\tmargin-top: 12px;\n+\tmargin-bottom: 10px;\n+\tpadding: 5px 10px;\n }\n h5, h6 {\n-    text-decoration: underline;\n+\ttext-decoration: underline;\n }\n \n h1 {\n-    font-size: 28px;\n-    font-weight: 500;\n-    padding: .1em .4em;\n-    border-bottom: 2px solid #ddd;\n+\tfont-size: 28px;\n+\tfont-weight: 500;\n+\tpadding: .1em .4em;\n+\tborder-bottom: 2px solid #ddd;\n }\n h1.title {\n-    line-height: 1.5em;\n+\tline-height: 1.5em;\n }\n h2 {\n-    font-size: 26px;\n-    padding: .2em .5em;\n-    border-bottom: 1px solid #ddd;\n+\tfont-size: 26px;\n+\tpadding: .2em .5em;\n+\tborder-bottom: 1px solid #ddd;\n }\n h3 {\n-    font-size: 24px;\n-    padding: .2em .7em;\n-    border-bottom: 1px solid #DDE8FC;\n+\tfont-size: 24px;\n+\tpadding: .2em .7em;\n+\tborder-bottom: 1px solid #DDE8FC;\n }\n h4 {\n-    font-size: 22px;\n+\tfont-size: 22px;\n }\n h5 {\n-    font-size: 20px;\n+\tfont-size: 20px;\n }\n h6 {\n-    font-size: 18px;\n+\tfont-size: 18px;\n }\n @media (min-width: 992px) {\n-    h1 {\n-        font-size: 36px;\n-    }\n-    h2 {\n-        font-size: 30px;\n-    }\n-    h3 {\n-        font-size: 26px;\n-    }\n+\th1 {\n+\t\tfont-size: 36px;\n+\t}\n+\th2 {\n+\t\tfont-size: 30px;\n+\t}\n+\th3 {\n+\t\tfont-size: 26px;\n+\t}\n }\n \n nav {\n-    column-count: 2;\n-    -moz-column-count: 2;\n-    -webkit-column-count: 2;\n-    font-size: 15px;\n-    margin: 0 0 1em 0;\n+\tcolumn-count: 2;\n+\t-moz-column-count: 2;\n+\t-webkit-column-count: 2;\n+\tfont-size: 15px;\n+\tmargin: 0 0 1em 0;\n }\n p {\n-    margin: 0 0 1em 0;\n+\tmargin: 0 0 1em 0;\n }\n \n strong {\n-    font-weight: bold;\n+\tfont-weight: bold;\n }\n \n em {\n-    font-style: italic;\n+\tfont-style: italic;\n }\n \n footer {\n-    border-top: 1px solid #ddd;\n-    font-size: 14px;\n-    font-style: italic;\n-    padding-top: 5px;\n-    margin-top: 3em;\n-    margin-bottom: 1em;\n+\tborder-top: 1px solid #ddd;\n+\tfont-size: 14px;\n+\tfont-style: italic;\n+\tpadding-top: 5px;\n+\tmargin-top: 3em;\n+\tmargin-bottom: 1em;\n }\n \n /* Links layout */\n \n a {\n-    text-decoration: none;\n-    color: #428BCA;\n-    background: transparent;\n+\ttext-decoration: none;\n+\tcolor: #428BCA;\n+\tbackground: transparent;\n }\n a:hover, a:focus {\n-    color: #2A6496;\n-    text-decoration: underline;\n+\tcolor: #2A6496;\n+\ttext-decoration: underline;\n }\n a:focus {\n-    outline: thin dotted #333;\n-    outline: 5px auto -webkit-focus-ring-color;\n-    outline-offset: -2px;\n+\toutline: thin dotted #333;\n+\toutline: 5px auto -webkit-focus-ring-color;\n+\toutline-offset: -2px;\n }\n a:hover, a:active {\n-    outline: 0;\n+\toutline: 0;\n }\n \n h1 a:link, h1 a:visited, h2 a:link, h2 a:visited,\n@@ -197,34 +197,34 @@ h5 a:hover {text-decoration: none;}\n /* Code */\n \n pre, code {\n-    font-family: \"Source Code Pro\", Menlo, Monaco, Consolas, \"DejaVu Sans Mono\", monospace;\n-    word-wrap: break-word;\n+\tfont-family: \"Source Code Pro\", Menlo, Monaco, Consolas, \"DejaVu Sans Mono\", monospace;\n+\tword-wrap: break-word;\n }\n pre {\n-    border-left: 2px solid #eee;\n-    white-space: pre-wrap;\n-    padding: 14px;\n-    padding-right: 0;\n-    margin: 20px 0;\n-    font-size: 13px;\n-    word-break: break-all;\n+\tborder-left: 2px solid #eee;\n+\twhite-space: pre-wrap;\n+\tpadding: 14px;\n+\tpadding-right: 0;\n+\tmargin: 20px 0;\n+\tfont-size: 15px;\n+\tword-break: break-all;\n }\n code {\n-    padding: 0 2px;\n-    color: #8D1A38;\n+\tpadding: 0 2px;\n+\tcolor: #8D1A38;\n }\n pre code {\n-    padding: 0;\n-    font-size: inherit;\n-    color: inherit;\n+\tpadding: 0;\n+\tfont-size: inherit;\n+\tcolor: inherit;\n }\n \n a > code {\n-    color: #428BCA;\n+\tcolor: #428BCA;\n }\n \n .section-header > a > code {\n-    color: #8D1A38;\n+\tcolor: #8D1A38;\n }\n \n /* Code highlighting */\n@@ -241,178 +241,221 @@ pre.rust .lifetime { color: #B76514; }\n /* The rest */\n \n #versioninfo {\n-    text-align: center;\n-    margin: 0.5em;\n-    font-size: 1.1em;\n+\ttext-align: center;\n+\tmargin: 0.5em;\n+\tfont-size: 1.1em;\n }\n @media (min-width: 992px) {\n-    #versioninfo {\n-        font-size: 0.8em;\n-        position: fixed;\n-        bottom: 0px;\n-        right: 0px;\n-    }\n-    .white-sticker {\n-        background-color: #fff;\n-        margin: 2px;\n-        padding: 0 2px;\n-        border-radius: .2em;\n-    }\n+\t#versioninfo {\n+\t\tfont-size: 0.8em;\n+\t\tposition: fixed;\n+\t\tbottom: 0px;\n+\t\tright: 0px;\n+\t}\n+\t.white-sticker {\n+\t\tbackground-color: #fff;\n+\t\tmargin: 2px;\n+\t\tpadding: 0 2px;\n+\t\tborder-radius: .2em;\n+\t}\n }\n #versioninfo a.hash {\n-    color: gray;\n-    font-size: 80%;\n+\tcolor: gray;\n+\tfont-size: 80%;\n }\n \n blockquote {\n-    color: #000;\n-    margin: 20px 0;\n-    padding: 15px 20px;\n-    background-color: #f2f7f9;\n-    border-top: .1em solid #e5eef2;\n-    border-bottom: .1em solid #e5eef2;\n+\tcolor: #000;\n+\tmargin: 20px 0;\n+\tpadding: 15px 20px;\n+\tbackground-color: #f2f7f9;\n+\tborder-top: .1em solid #e5eef2;\n+\tborder-bottom: .1em solid #e5eef2;\n }\n blockquote p {\n-    font-size: 17px;\n-    font-weight: 300;\n-    line-height: 1.4;\n+\tfont-size: 17px;\n+\tfont-weight: 300;\n+\tline-height: 1.4;\n }\n blockquote p:last-child {\n-    margin-bottom: 0;\n+\tmargin-bottom: 0;\n }\n \n ul, ol {\n-    padding-left: 25px;\n+\tpadding-left: 25px;\n }\n ul ul, ol ul, ul ol, ol ol {\n-    margin-bottom: 0;\n+\tmargin-bottom: 0;\n }\n dl {\n-    margin-bottom: 20px;\n+\tmargin-bottom: 20px;\n }\n dd {\n-    margin-left: 0;\n+\tmargin-left: 0;\n }\n \n nav ul {\n-    list-style-type: none;\n-    margin: 0;\n-    padding-left: 0px;\n+\tlist-style-type: none;\n+\tmargin: 0;\n+\tpadding-left: 0px;\n }\n \n /* Only display one level of hierarchy in the TOC */\n nav ul ul {\n-    display: none;\n+\tdisplay: none;\n }\n \n sub,\n sup {\n-    font-size: 75%;\n-    line-height: 0;\n-    position: relative;\n+\tfont-size: 75%;\n+\tline-height: 0;\n+\tposition: relative;\n }\n \n hr {\n-    margin-top: 20px;\n-    margin-bottom: 20px;\n-    border: 0;\n-    border-top: 1px solid #eeeeee;\n+\tmargin-top: 20px;\n+\tmargin-bottom: 20px;\n+\tborder: 0;\n+\tborder-top: 1px solid #eeeeee;\n }\n \n table {\n-    border-collapse: collapse;\n-    border-spacing: 0;\n-    overflow-x: auto;\n-    display: block;\n+\tborder-collapse: collapse;\n+\tborder-spacing: 0;\n+\toverflow-x: auto;\n+\tdisplay: block;\n }\n \n table tr.odd {\n-    background: #eee;\n+\tbackground: #eee;\n }\n \n table td,\n table th {\n-    border: 1px solid #ddd;\n-    padding: 5px;\n+\tborder: 1px solid #ddd;\n+\tpadding: 5px;\n }\n \n /* Code snippets */\n \n pre.rust { position: relative; }\n a.test-arrow {\n-    background-color: rgba(78, 139, 202, 0.2);\n-    display: inline-block;\n-    position: absolute;\n-    color: #f5f5f5;\n-    padding: 5px 10px 5px 10px;\n-    border-radius: 5px;\n-    font-size: 130%;\n-    top: 5px;\n-    right: 5px;\n+\tbackground-color: rgba(78, 139, 202, 0.2);\n+\tdisplay: inline-block;\n+\tposition: absolute;\n+\tcolor: #f5f5f5;\n+\tpadding: 5px 10px 5px 10px;\n+\tborder-radius: 5px;\n+\tfont-size: 130%;\n+\ttop: 5px;\n+\tright: 5px;\n }\n a.test-arrow:hover{\n-    background-color: #4e8bca;\n-    text-decoration: none;\n+\tbackground-color: #4e8bca;\n+\ttext-decoration: none;\n }\n \n .unstable-feature {\n-    border: 2px solid red;\n-    padding: 5px;\n+\tborder: 2px solid red;\n+\tpadding: 5px;\n }\n \n @media (min-width: 1170px) {\n-    pre {\n-        font-size: 15px;\n-    }\n+\tpre {\n+\t\tfont-size: 15px;\n+\t}\n }\n \n @media print {\n-    * {\n-        text-shadow: none !important;\n-        color: #000 !important;\n-        background: transparent !important;\n-        box-shadow: none !important;\n-    }\n-    a, a:visited {\n-        text-decoration: underline;\n-    }\n-    p a[href]:after {\n-        content: \" (\" attr(href) \")\";\n-    }\n-    footer a[href]:after {\n-        content: \"\";\n-    }\n-    a[href^=\"javascript:\"]:after, a[href^=\"#\"]:after {\n-        content: \"\";\n-    }\n-    pre, blockquote {\n-        border: 1px solid #999;\n-        page-break-inside: avoid;\n-    }\n-    @page {\n-        margin: 2cm .5cm;\n-    }\n-    h1:not(.title), h2, h3 {\n-        border-bottom: 0px none;\n-    }\n-    p, h2, h3 {\n-        orphans: 3;\n-        widows: 3;\n-    }\n-    h2, h3 {\n-        page-break-after: avoid;\n-    }\n-    table {\n-        border-collapse: collapse !important;\n-    }\n-    table td, table th {\n-        background-color: #fff !important;\n-    }\n+\t* {\n+\t\ttext-shadow: none !important;\n+\t\tcolor: #000 !important;\n+\t\tbackground: transparent !important;\n+\t\tbox-shadow: none !important;\n+\t}\n+\ta, a:visited {\n+\t\ttext-decoration: underline;\n+\t}\n+\tp a[href]:after {\n+\t\tcontent: \" (\" attr(href) \")\";\n+\t}\n+\tfooter a[href]:after {\n+\t\tcontent: \"\";\n+\t}\n+\ta[href^=\"javascript:\"]:after, a[href^=\"#\"]:after {\n+\t\tcontent: \"\";\n+\t}\n+\tpre, blockquote {\n+\t\tborder: 1px solid #999;\n+\t\tpage-break-inside: avoid;\n+\t}\n+\t@page {\n+\t\tmargin: 2cm .5cm;\n+\t}\n+\th1:not(.title), h2, h3 {\n+\t\tborder-bottom: 0px none;\n+\t}\n+\tp, h2, h3 {\n+\t\torphans: 3;\n+\t\twidows: 3;\n+\t}\n+\th2, h3 {\n+\t\tpage-break-after: avoid;\n+\t}\n+\ttable {\n+\t\tborder-collapse: collapse !important;\n+\t}\n+\ttable td, table th {\n+\t\tbackground-color: #fff !important;\n+\t}\n }\n \n #keyword-table-marker + table thead { display: none; }\n #keyword-table-marker + table td { border: none; }\n #keyword-table-marker + table {\n-    margin-left: 2em;\n-    margin-bottom: 1em;\n+\tmargin-left: 2em;\n+\tmargin-bottom: 1em;\n+}\n+\n+.error-described {\n+\tposition: relative;\n+}\n+\n+.information {\n+\tposition: absolute;\n+\tleft: -25px;\n+\tmargin-top: 7px;\n+\tz-index: 1;\n+}\n+\n+.tooltip {\n+\tposition: relative;\n+\tdisplay: inline-block;\n+\tcursor: pointer;\n+}\n+\n+.tooltip .tooltiptext {\n+\twidth: 120px;\n+\tdisplay: none;\n+\ttext-align: center;\n+\tpadding: 5px 3px;\n+\tborder-radius: 6px;\n+\tmargin-left: 5px;\n+\ttop: -5px;\n+\tleft: 105%;\n+\tz-index: 1;\n+}\n+\n+.tooltip:hover .tooltiptext {\n+\tdisplay: inline;\n+}\n+\n+.tooltip .tooltiptext::after {\n+\tcontent: \" \";\n+\tposition: absolute;\n+\ttop: 50%;\n+\tleft: 13px;\n+\tmargin-top: -5px;\n+\tborder-width: 5px;\n+\tborder-style: solid;\n }"}, {"sha": "ee5182a1d46637cf59306139c4de621820f04281", "filename": "src/liballoc/benches/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a/src%2Fliballoc%2Fbenches%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a/src%2Fliballoc%2Fbenches%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbenches%2Fslice.rs?ref=92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a", "patch": "@@ -343,7 +343,7 @@ macro_rules! rotate {\n         fn $name(b: &mut Bencher) {\n             let size = mem::size_of_val(&$gen(1)[0]);\n             let mut v = $gen($len * 8 / size);\n-            b.iter(|| black_box(&mut v).rotate(($mid*8+size-1)/size));\n+            b.iter(|| black_box(&mut v).rotate_left(($mid*8+size-1)/size));\n             b.bytes = (v.len() * size) as u64;\n         }\n     }"}, {"sha": "28caccbc87fdea9633db2cb5ff62f8e97787c183", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 64, "deletions": 35, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a", "patch": "@@ -1360,24 +1360,61 @@ impl<T> [T] {\n         core_slice::SliceExt::sort_unstable_by_key(self, f);\n     }\n \n-    /// Permutes the slice in-place such that `self[mid..]` moves to the\n-    /// beginning of the slice while `self[..mid]` moves to the end of the\n-    /// slice.  Equivalently, rotates the slice `mid` places to the left\n-    /// or `k = self.len() - mid` places to the right.\n+    /// Rotates the slice in-place such that the first `mid` elements of the\n+    /// slice move to the end while the last `self.len() - mid` elements move to\n+    /// the front. After calling `rotate_left`, the element previously at index\n+    /// `mid` will become the first element in the slice.\n     ///\n-    /// This is a \"k-rotation\", a permutation in which item `i` moves to\n-    /// position `i + k`, modulo the length of the slice.  See _Elements\n-    /// of Programming_ [\u00a710.4][eop].\n+    /// # Panics\n+    ///\n+    /// This function will panic if `mid` is greater than the length of the\n+    /// slice. Note that `mid == self.len()` does _not_ panic and is a no-op\n+    /// rotation.\n+    ///\n+    /// # Complexity\n+    ///\n+    /// Takes linear (in `self.len()`) time.\n+    ///\n+    /// # Examples\n     ///\n-    /// Rotation by `mid` and rotation by `k` are inverse operations.\n+    /// ```\n+    /// #![feature(slice_rotate)]\n     ///\n-    /// [eop]: https://books.google.com/books?id=CO9ULZGINlsC&pg=PA178&q=k-rotation\n+    /// let mut a = ['a', 'b', 'c', 'd', 'e', 'f'];\n+    /// a.rotate_left(2);\n+    /// assert_eq!(a, ['c', 'd', 'e', 'f', 'a', 'b']);\n+    /// ```\n+    ///\n+    /// Rotating a subslice:\n+    ///\n+    /// ```\n+    /// #![feature(slice_rotate)]\n+    ///\n+    /// let mut a = ['a', 'b', 'c', 'd', 'e', 'f'];\n+    /// a[1..5].rotate_left(1);\n+    /// assert_eq!(a, ['a', 'c', 'd', 'e', 'b', 'f']);\n+    /// ```\n+    #[unstable(feature = \"slice_rotate\", issue = \"41891\")]\n+    pub fn rotate_left(&mut self, mid: usize) {\n+        core_slice::SliceExt::rotate_left(self, mid);\n+    }\n+\n+    #[unstable(feature = \"slice_rotate\", issue = \"41891\")]\n+    #[rustc_deprecated(since = \"\", reason = \"renamed to `rotate_left`\")]\n+    pub fn rotate(&mut self, mid: usize) {\n+        core_slice::SliceExt::rotate_left(self, mid);\n+    }\n+\n+    /// Rotates the slice in-place such that the first `self.len() - k`\n+    /// elements of the slice move to the end while the last `k` elements move\n+    /// to the front. After calling `rotate_right`, the element previously at\n+    /// index `self.len() - k` will become the first element in the slice.\n     ///\n     /// # Panics\n     ///\n-    /// This function will panic if `mid` is greater than the length of the\n-    /// slice.  (Note that `mid == self.len()` does _not_ panic; it's a nop\n-    /// rotation with `k == 0`, the inverse of a rotation with `mid == 0`.)\n+    /// This function will panic if `k` is greater than the length of the\n+    /// slice. Note that `k == self.len()` does _not_ panic and is a no-op\n+    /// rotation.\n     ///\n     /// # Complexity\n     ///\n@@ -1388,31 +1425,23 @@ impl<T> [T] {\n     /// ```\n     /// #![feature(slice_rotate)]\n     ///\n-    /// let mut a = [1, 2, 3, 4, 5, 6, 7];\n-    /// let mid = 2;\n-    /// a.rotate(mid);\n-    /// assert_eq!(&a, &[3, 4, 5, 6, 7, 1, 2]);\n-    /// let k = a.len() - mid;\n-    /// a.rotate(k);\n-    /// assert_eq!(&a, &[1, 2, 3, 4, 5, 6, 7]);\n-    ///\n-    /// use std::ops::Range;\n-    /// fn slide<T>(slice: &mut [T], range: Range<usize>, to: usize) {\n-    ///     if to < range.start {\n-    ///         slice[to..range.end].rotate(range.start-to);\n-    ///     } else if to > range.end {\n-    ///         slice[range.start..to].rotate(range.end-range.start);\n-    ///     }\n-    /// }\n-    /// let mut v: Vec<_> = (0..10).collect();\n-    /// slide(&mut v, 1..4, 7);\n-    /// assert_eq!(&v, &[0, 4, 5, 6, 1, 2, 3, 7, 8, 9]);\n-    /// slide(&mut v, 6..8, 1);\n-    /// assert_eq!(&v, &[0, 3, 7, 4, 5, 6, 1, 2, 8, 9]);\n+    /// let mut a = ['a', 'b', 'c', 'd', 'e', 'f'];\n+    /// a.rotate_right(2);\n+    /// assert_eq!(a, ['e', 'f', 'a', 'b', 'c', 'd']);\n+    /// ```\n+    ///\n+    /// Rotate a subslice:\n+    ///\n+    /// ```\n+    /// #![feature(slice_rotate)]\n+    ///\n+    /// let mut a = ['a', 'b', 'c', 'd', 'e', 'f'];\n+    /// a[1..5].rotate_right(1);\n+    /// assert_eq!(a, ['a', 'e', 'b', 'c', 'd', 'f']);\n     /// ```\n     #[unstable(feature = \"slice_rotate\", issue = \"41891\")]\n-    pub fn rotate(&mut self, mid: usize) {\n-        core_slice::SliceExt::rotate(self, mid);\n+    pub fn rotate_right(&mut self, k: usize) {\n+        core_slice::SliceExt::rotate_right(self, k);\n     }\n \n     /// Copies the elements from `src` into `self`."}, {"sha": "49bdc9e1b90de5c252ac2321e9d0e85da3643899", "filename": "src/liballoc/tests/slice.rs", "status": "modified", "additions": 43, "deletions": 8, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a/src%2Fliballoc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a/src%2Fliballoc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fslice.rs?ref=92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a", "patch": "@@ -494,37 +494,72 @@ fn test_sort_stability() {\n }\n \n #[test]\n-fn test_rotate() {\n+fn test_rotate_left() {\n     let expected: Vec<_> = (0..13).collect();\n     let mut v = Vec::new();\n \n     // no-ops\n     v.clone_from(&expected);\n-    v.rotate(0);\n+    v.rotate_left(0);\n     assert_eq!(v, expected);\n-    v.rotate(expected.len());\n+    v.rotate_left(expected.len());\n     assert_eq!(v, expected);\n     let mut zst_array = [(), (), ()];\n-    zst_array.rotate(2);\n+    zst_array.rotate_left(2);\n \n     // happy path\n     v = (5..13).chain(0..5).collect();\n-    v.rotate(8);\n+    v.rotate_left(8);\n     assert_eq!(v, expected);\n \n     let expected: Vec<_> = (0..1000).collect();\n \n     // small rotations in large slice, uses ptr::copy\n     v = (2..1000).chain(0..2).collect();\n-    v.rotate(998);\n+    v.rotate_left(998);\n     assert_eq!(v, expected);\n     v = (998..1000).chain(0..998).collect();\n-    v.rotate(2);\n+    v.rotate_left(2);\n     assert_eq!(v, expected);\n \n     // non-small prime rotation, has a few rounds of swapping\n     v = (389..1000).chain(0..389).collect();\n-    v.rotate(1000-389);\n+    v.rotate_left(1000-389);\n+    assert_eq!(v, expected);\n+}\n+\n+#[test]\n+fn test_rotate_right() {\n+    let expected: Vec<_> = (0..13).collect();\n+    let mut v = Vec::new();\n+\n+    // no-ops\n+    v.clone_from(&expected);\n+    v.rotate_right(0);\n+    assert_eq!(v, expected);\n+    v.rotate_right(expected.len());\n+    assert_eq!(v, expected);\n+    let mut zst_array = [(), (), ()];\n+    zst_array.rotate_right(2);\n+\n+    // happy path\n+    v = (5..13).chain(0..5).collect();\n+    v.rotate_right(5);\n+    assert_eq!(v, expected);\n+\n+    let expected: Vec<_> = (0..1000).collect();\n+\n+    // small rotations in large slice, uses ptr::copy\n+    v = (2..1000).chain(0..2).collect();\n+    v.rotate_right(2);\n+    assert_eq!(v, expected);\n+    v = (998..1000).chain(0..998).collect();\n+    v.rotate_right(998);\n+    assert_eq!(v, expected);\n+\n+    // non-small prime rotation, has a few rounds of swapping\n+    v = (389..1000).chain(0..389).collect();\n+    v.rotate_right(389);\n     assert_eq!(v, expected);\n }\n "}, {"sha": "e6b79314aa96d47a2dd19800b1ce5731be430282", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a", "patch": "@@ -206,7 +206,10 @@ pub trait SliceExt {\n     fn ends_with(&self, needle: &[Self::Item]) -> bool where Self::Item: PartialEq;\n \n     #[unstable(feature = \"slice_rotate\", issue = \"41891\")]\n-    fn rotate(&mut self, mid: usize);\n+    fn rotate_left(&mut self, mid: usize);\n+\n+    #[unstable(feature = \"slice_rotate\", issue = \"41891\")]\n+    fn rotate_right(&mut self, k: usize);\n \n     #[stable(feature = \"clone_from_slice\", since = \"1.7.0\")]\n     fn clone_from_slice(&mut self, src: &[Self::Item]) where Self::Item: Clone;\n@@ -645,7 +648,7 @@ impl<T> SliceExt for [T] {\n         self.binary_search_by(|p| p.cmp(x))\n     }\n \n-    fn rotate(&mut self, mid: usize) {\n+    fn rotate_left(&mut self, mid: usize) {\n         assert!(mid <= self.len());\n         let k = self.len() - mid;\n \n@@ -655,6 +658,16 @@ impl<T> SliceExt for [T] {\n         }\n     }\n \n+    fn rotate_right(&mut self, k: usize) {\n+        assert!(k <= self.len());\n+        let mid = self.len() - k;\n+\n+        unsafe {\n+            let p = self.as_mut_ptr();\n+            rotate::ptr_rotate(mid, p.offset(mid as isize), k);\n+        }\n+    }\n+\n     #[inline]\n     fn clone_from_slice(&mut self, src: &[T]) where T: Clone {\n         assert!(self.len() == src.len(),"}, {"sha": "40e5fe5758ac987e629444ee0a612d15c3f183d7", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a", "patch": "@@ -329,17 +329,32 @@ fn test_iter_folds() {\n }\n \n #[test]\n-fn test_rotate() {\n+fn test_rotate_left() {\n     const N: usize = 600;\n     let a: &mut [_] = &mut [0; N];\n     for i in 0..N {\n         a[i] = i;\n     }\n \n-    a.rotate(42);\n+    a.rotate_left(42);\n     let k = N - 42;\n \n     for i in 0..N {\n-        assert_eq!(a[(i+k)%N], i);\n+        assert_eq!(a[(i + k) % N], i);\n+    }\n+}\n+\n+#[test]\n+fn test_rotate_right() {\n+    const N: usize = 600;\n+    let a: &mut [_] = &mut [0; N];\n+    for i in 0..N {\n+        a[i] = i;\n+    }\n+\n+    a.rotate_right(42);\n+\n+    for i in 0..N {\n+        assert_eq!(a[(i + 42) % N], i);\n     }\n }"}, {"sha": "ffb844632e46fe54e982b7add61c2c401b61fccf", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a", "patch": "@@ -1214,8 +1214,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidNoMangleItems {\n                     // don't have anything to attach a symbol to\n                     let msg = \"const items should never be #[no_mangle]\";\n                     let mut err = cx.struct_span_lint(NO_MANGLE_CONST_ITEMS, it.span, msg);\n+\n+                    // account for \"pub const\" (#45562)\n+                    let start = cx.tcx.sess.codemap().span_to_snippet(it.span)\n+                        .map(|snippet| snippet.find(\"const\").unwrap_or(0))\n+                        .unwrap_or(0) as u32;\n                     // `const` is 5 chars\n-                    let const_span = it.span.with_hi(BytePos(it.span.lo().0 + 5));\n+                    let const_span = it.span.with_hi(BytePos(it.span.lo().0 + start + 5));\n                     err.span_suggestion(const_span,\n                                         \"try a static value\",\n                                         \"pub static\".to_owned());"}, {"sha": "f058b1caef509c87213e4d3215e6b0f632561b8f", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a", "patch": "@@ -283,7 +283,7 @@ pub mod builtin {\n     /// Unconditionally causes compilation to fail with the given error message when encountered.\n     ///\n     /// This macro should be used when a crate uses a conditional compilation strategy to provide\n-    /// better error messages for errornous conditions.\n+    /// better error messages for erroneous conditions.\n     ///\n     /// # Examples\n     ///"}, {"sha": "f91eaf433d766de3de583b3b95d2cadb2c8ef362", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a", "patch": "@@ -316,7 +316,6 @@ impl<'a> Location<'a> {\n     /// # Examples\n     ///\n     /// ```should_panic\n-    /// #![feature(panic_col)]\n     /// use std::panic;\n     ///\n     /// panic::set_hook(Box::new(|panic_info| {\n@@ -329,7 +328,7 @@ impl<'a> Location<'a> {\n     ///\n     /// panic!(\"Normal panic\");\n     /// ```\n-    #[unstable(feature = \"panic_col\", reason = \"recently added\", issue = \"42939\")]\n+    #[stable(feature = \"panic_col\", since = \"1.25\")]\n     pub fn column(&self) -> u32 {\n         self.col\n     }"}, {"sha": "f493df56f949d9e06d3fa37f0e4105ded9d1d714", "filename": "src/test/ui/suggestions/issue-45562.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a/src%2Ftest%2Fui%2Fsuggestions%2Fissue-45562.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a/src%2Ftest%2Fui%2Fsuggestions%2Fissue-45562.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-45562.rs?ref=92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[no_mangle] pub const RAH: usize = 5;\n+//~^ ERROR const items should never be #[no_mangle]\n+\n+fn main() {}"}, {"sha": "2f8c4cd3f2e72fd61a2fb6292a0acdf7ec50ffe4", "filename": "src/test/ui/suggestions/issue-45562.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a/src%2Ftest%2Fui%2Fsuggestions%2Fissue-45562.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a/src%2Ftest%2Fui%2Fsuggestions%2Fissue-45562.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-45562.stderr?ref=92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a", "patch": "@@ -0,0 +1,12 @@\n+error: const items should never be #[no_mangle]\n+  --> $DIR/issue-45562.rs:11:14\n+   |\n+11 | #[no_mangle] pub const RAH: usize = 5;\n+   |              ---------^^^^^^^^^^^^^^^^\n+   |              |\n+   |              help: try a static value: `pub static`\n+   |\n+   = note: #[deny(no_mangle_const_items)] on by default\n+\n+error: aborting due to previous error\n+"}, {"sha": "d1643c0aa4b63c162049e2a1fbacb356083b4b2b", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a", "patch": "@@ -2867,7 +2867,7 @@ fn read2_abbreviated(mut child: Child) -> io::Result<Output> {\n                     *skipped += data.len();\n                     if data.len() <= TAIL_LEN {\n                         tail[..data.len()].copy_from_slice(data);\n-                        tail.rotate(data.len());\n+                        tail.rotate_left(data.len());\n                     } else {\n                         tail.copy_from_slice(&data[(data.len() - TAIL_LEN)..]);\n                     }"}, {"sha": "aedae366c411995038bdfac700ac4eba0e659d10", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 59, "deletions": 1, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=92c32d2d8ca4dc7fb8ddf9296580b0c573350c6a", "patch": "@@ -109,7 +109,65 @@ impl Formatter for HTMLFormatter {\n     }\n \n     fn footer(&self, output: &mut Write) -> Result<(), Box<Error>> {\n-        write!(output, \"</body>\\n</html>\")?;\n+        write!(output, r##\"<script>\n+function onEach(arr, func) {{\n+    if (arr && arr.length > 0 && func) {{\n+        for (var i = 0; i < arr.length; i++) {{\n+            func(arr[i]);\n+        }}\n+    }}\n+}}\n+\n+function hasClass(elem, className) {{\n+    if (elem && className && elem.className) {{\n+        var elemClass = elem.className;\n+        var start = elemClass.indexOf(className);\n+        if (start === -1) {{\n+            return false;\n+        }} else if (elemClass.length === className.length) {{\n+            return true;\n+        }} else {{\n+            if (start > 0 && elemClass[start - 1] !== ' ') {{\n+                return false;\n+            }}\n+            var end = start + className.length;\n+            if (end < elemClass.length && elemClass[end] !== ' ') {{\n+                return false;\n+            }}\n+            return true;\n+        }}\n+        if (start > 0 && elemClass[start - 1] !== ' ') {{\n+            return false;\n+        }}\n+        var end = start + className.length;\n+        if (end < elemClass.length && elemClass[end] !== ' ') {{\n+            return false;\n+        }}\n+        return true;\n+    }}\n+    return false;\n+}}\n+\n+onEach(document.getElementsByClassName('rust-example-rendered'), function(e) {{\n+    if (hasClass(e, 'compile_fail')) {{\n+        e.addEventListener(\"mouseover\", function(event) {{\n+            e.previousElementSibling.childNodes[0].style.color = '#f00';\n+        }});\n+        e.addEventListener(\"mouseout\", function(event) {{\n+            e.previousElementSibling.childNodes[0].style.color = '';\n+        }});\n+    }} else if (hasClass(e, 'ignore')) {{\n+        e.addEventListener(\"mouseover\", function(event) {{\n+            e.previousElementSibling.childNodes[0].style.color = '#ff9200';\n+        }});\n+        e.addEventListener(\"mouseout\", function(event) {{\n+            e.previousElementSibling.childNodes[0].style.color = '';\n+        }});\n+    }}\n+}});\n+</script>\n+</body>\n+</html>\"##)?;\n         Ok(())\n     }\n }"}]}