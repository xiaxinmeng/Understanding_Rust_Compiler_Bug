{"sha": "b9c406741780945de12aa0e3b2c8ccd99a5e6316", "node_id": "C_kwDOAAsO6NoAKGI5YzQwNjc0MTc4MDk0NWRlMTJhYTBlM2IyYzhjY2Q5OWE1ZTYzMTY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-22T05:48:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-22T05:48:49Z"}, "message": "Auto merge of #95158 - sunfishcode:sunfishcode/windows-8, r=joshtriplett\n\nPreserve the Windows `GetLastError` error in `HandleOrInvalid`.\n\nIn the `TryFrom<HandleOrInvalid> for OwnedHandle` and\n`TryFrom<HandleOrNull> for OwnedHandle` implemenations, `forget` the\nowned handle on the error path, to avoid calling `CloseHandle` on an\ninvalid handle. It's harmless, except that it may overwrite the\nthread's `GetLastError` error.\n\nr? `@joshtriplett`", "tree": {"sha": "fae0a9a614795162cf68b0b687a683999d62f6d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fae0a9a614795162cf68b0b687a683999d62f6d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9c406741780945de12aa0e3b2c8ccd99a5e6316", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9c406741780945de12aa0e3b2c8ccd99a5e6316", "html_url": "https://github.com/rust-lang/rust/commit/b9c406741780945de12aa0e3b2c8ccd99a5e6316", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9c406741780945de12aa0e3b2c8ccd99a5e6316/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d15732f6eec3d50ed1ad4a79c36b07d8b896474", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d15732f6eec3d50ed1ad4a79c36b07d8b896474", "html_url": "https://github.com/rust-lang/rust/commit/2d15732f6eec3d50ed1ad4a79c36b07d8b896474"}, {"sha": "6c407d0592288d3890d45590466b80a364f42982", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c407d0592288d3890d45590466b80a364f42982", "html_url": "https://github.com/rust-lang/rust/commit/6c407d0592288d3890d45590466b80a364f42982"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "3fa731c95298347931ebaef3fd6202100dfd9823", "filename": "library/std/src/fs/tests.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b9c406741780945de12aa0e3b2c8ccd99a5e6316/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c406741780945de12aa0e3b2c8ccd99a5e6316/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs?ref=b9c406741780945de12aa0e3b2c8ccd99a5e6316", "patch": "@@ -1359,6 +1359,12 @@ fn read_dir_not_found() {\n     assert_eq!(res.err().unwrap().kind(), ErrorKind::NotFound);\n }\n \n+#[test]\n+fn file_open_not_found() {\n+    let res = File::open(\"/path/that/does/not/exist\");\n+    assert_eq!(res.err().unwrap().kind(), ErrorKind::NotFound);\n+}\n+\n #[test]\n fn create_dir_all_with_junctions() {\n     let tmpdir = tmpdir();"}, {"sha": "120af9f99dd9b063f0e4e7583ca3538224320b57", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b9c406741780945de12aa0e3b2c8ccd99a5e6316/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c406741780945de12aa0e3b2c8ccd99a5e6316/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=b9c406741780945de12aa0e3b2c8ccd99a5e6316", "patch": "@@ -147,7 +147,15 @@ impl TryFrom<HandleOrNull> for OwnedHandle {\n     #[inline]\n     fn try_from(handle_or_null: HandleOrNull) -> Result<Self, ()> {\n         let owned_handle = handle_or_null.0;\n-        if owned_handle.handle.is_null() { Err(()) } else { Ok(owned_handle) }\n+        if owned_handle.handle.is_null() {\n+            // Don't call `CloseHandle`; it'd be harmless, except that it could\n+            // overwrite the `GetLastError` error.\n+            forget(owned_handle);\n+\n+            Err(())\n+        } else {\n+            Ok(owned_handle)\n+        }\n     }\n }\n \n@@ -197,7 +205,15 @@ impl TryFrom<HandleOrInvalid> for OwnedHandle {\n     #[inline]\n     fn try_from(handle_or_invalid: HandleOrInvalid) -> Result<Self, ()> {\n         let owned_handle = handle_or_invalid.0;\n-        if owned_handle.handle == c::INVALID_HANDLE_VALUE { Err(()) } else { Ok(owned_handle) }\n+        if owned_handle.handle == c::INVALID_HANDLE_VALUE {\n+            // Don't call `CloseHandle`; it'd be harmless, except that it could\n+            // overwrite the `GetLastError` error.\n+            forget(owned_handle);\n+\n+            Err(())\n+        } else {\n+            Ok(owned_handle)\n+        }\n     }\n }\n "}]}