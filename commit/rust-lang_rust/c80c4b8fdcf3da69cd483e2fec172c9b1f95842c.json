{"sha": "c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "node_id": "C_kwDOAAsO6NoAKGM4MGM0YjhmZGNmM2RhNjljZDQ4M2UyZmVjMTcyYzliMWY5NTg0MmM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-26T19:02:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-26T19:02:00Z"}, "message": "Auto merge of #98545 - matthiaskrgr:rollup-njely29, r=matthiaskrgr\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #97140 (std: use an event-flag-based thread parker on SOLID)\n - #97295 ([rustc_parse] Forbid `let`s in certain places)\n - #97743 (make const_err show up in future breakage reports)\n - #97908 (Stabilize NonZero* checked operations constness.)\n - #98297 (Transform help popup into a pocket menu)\n - #98428 (macros: use typed identifiers in diag and subdiag derive)\n - #98528 (Respect --color when building rustbuild itself)\n - #98535 (Add regression test for generic const in rustdoc)\n - #98538 (Add a ui test for issue #91883)\n - #98540 (Add regression test for #87558)\n - #98541 (Update `std::alloc::System` doc example code style)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d80e4c65e8e9264599d1145fcbfa1c3419d9c3df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d80e4c65e8e9264599d1145fcbfa1c3419d9c3df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "html_url": "https://github.com/rust-lang/rust/commit/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "788ddedb0d88e40db9cd62b6163d5a471813044b", "url": "https://api.github.com/repos/rust-lang/rust/commits/788ddedb0d88e40db9cd62b6163d5a471813044b", "html_url": "https://github.com/rust-lang/rust/commit/788ddedb0d88e40db9cd62b6163d5a471813044b"}, {"sha": "935958e6e434f2a60a774fface59492275a87996", "url": "https://api.github.com/repos/rust-lang/rust/commits/935958e6e434f2a60a774fface59492275a87996", "html_url": "https://github.com/rust-lang/rust/commit/935958e6e434f2a60a774fface59492275a87996"}], "stats": {"total": 5995, "additions": 4911, "deletions": 1084}, "files": [{"sha": "aa355150b4f816f1913f7277a625f51f084ae255", "filename": "compiler/rustc_builtin_macros/src/cfg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg.rs?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -36,15 +36,15 @@ pub fn expand_cfg(\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(slug = \"builtin-macros-requires-cfg-pattern\")]\n+#[error(builtin_macros::requires_cfg_pattern)]\n struct RequiresCfgPattern {\n     #[primary_span]\n     #[label]\n     span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(slug = \"builtin-macros-expected-one-cfg-pattern\")]\n+#[error(builtin_macros::expected_one_cfg_pattern)]\n struct OneCfgPattern {\n     #[primary_span]\n     span: Span,"}, {"sha": "4a42d52f71004c851b27f04b98b0dc5ce83db328", "filename": "compiler/rustc_error_messages/locales/en-US/builtin_macros.ftl", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fbuiltin_macros.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fbuiltin_macros.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fbuiltin_macros.ftl?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -1,5 +1,5 @@\n-builtin-macros-requires-cfg-pattern =\n+builtin_macros-requires-cfg-pattern =\n     macro requires a cfg-pattern as an argument\n     .label = cfg-pattern required\n \n-builtin-macros-expected-one-cfg-pattern = expected 1 cfg-pattern\n+builtin_macros-expected-one-cfg-pattern = expected 1 cfg-pattern"}, {"sha": "673e160cc1e74d589ce19aa110f647b92e22c590", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -258,18 +258,6 @@ pub enum SubdiagnosticMessage {\n     FluentAttr(FluentId),\n }\n \n-impl SubdiagnosticMessage {\n-    /// Create a `SubdiagnosticMessage` for the provided Fluent attribute.\n-    pub fn attr(id: impl Into<FluentId>) -> Self {\n-        SubdiagnosticMessage::FluentAttr(id.into())\n-    }\n-\n-    /// Create a `SubdiagnosticMessage` for the provided Fluent identifier.\n-    pub fn message(id: impl Into<FluentId>) -> Self {\n-        SubdiagnosticMessage::FluentIdentifier(id.into())\n-    }\n-}\n-\n /// `From` impl that enables existing diagnostic calls to functions which now take\n /// `impl Into<SubdiagnosticMessage>` to continue to work as before.\n impl<S: Into<String>> From<S> for SubdiagnosticMessage {\n@@ -332,11 +320,6 @@ impl DiagnosticMessage {\n             _ => panic!(\"expected non-translatable diagnostic message\"),\n         }\n     }\n-\n-    /// Create a `DiagnosticMessage` for the provided Fluent identifier.\n-    pub fn new(id: impl Into<FluentId>) -> Self {\n-        DiagnosticMessage::FluentIdentifier(id.into(), None)\n-    }\n }\n \n /// `From` impl that enables existing diagnostic calls to functions which now take\n@@ -347,6 +330,27 @@ impl<S: Into<String>> From<S> for DiagnosticMessage {\n     }\n }\n \n+/// Translating *into* a subdiagnostic message from a diagnostic message is a little strange - but\n+/// the subdiagnostic functions (e.g. `span_label`) take a `SubdiagnosticMessage` and the\n+/// subdiagnostic derive refers to typed identifiers that are `DiagnosticMessage`s, so need to be\n+/// able to convert between these, as much as they'll be converted back into `DiagnosticMessage`\n+/// using `with_subdiagnostic_message` eventually. Don't use this other than for the derive.\n+impl Into<SubdiagnosticMessage> for DiagnosticMessage {\n+    fn into(self) -> SubdiagnosticMessage {\n+        match self {\n+            DiagnosticMessage::Str(s) => SubdiagnosticMessage::Str(s),\n+            DiagnosticMessage::FluentIdentifier(id, None) => {\n+                SubdiagnosticMessage::FluentIdentifier(id)\n+            }\n+            // There isn't really a sensible behaviour for this because it loses information but\n+            // this is the most sensible of the behaviours.\n+            DiagnosticMessage::FluentIdentifier(_, Some(attr)) => {\n+                SubdiagnosticMessage::FluentAttr(attr)\n+            }\n+        }\n+    }\n+}\n+\n /// A span together with some additional data.\n #[derive(Clone, Debug)]\n pub struct SpanLabel {"}, {"sha": "d52455e2576c926f9e2ca8afe094bb140863baca", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -289,6 +289,7 @@ declare_lint! {\n     \"constant evaluation encountered erroneous expression\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #71800 <https://github.com/rust-lang/rust/issues/71800>\",\n+        reason: FutureIncompatibilityReason::FutureReleaseErrorReportNow,\n     };\n     report_in_external_macro\n }"}, {"sha": "d0c8652718969a91e88c485683c168e1f279747c", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic.rs", "status": "modified", "additions": 284, "deletions": 176, "changes": 460, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -12,7 +12,9 @@ use proc_macro2::{Ident, TokenStream};\n use quote::{format_ident, quote};\n use std::collections::HashMap;\n use std::str::FromStr;\n-use syn::{spanned::Spanned, Attribute, Meta, MetaList, MetaNameValue, Type};\n+use syn::{\n+    parse_quote, spanned::Spanned, Attribute, Meta, MetaList, MetaNameValue, NestedMeta, Path, Type,\n+};\n use synstructure::{BindingInfo, Structure};\n \n /// The central struct for constructing the `into_diagnostic` method from an annotated struct.\n@@ -118,23 +120,23 @@ impl<'a> SessionDiagnosticDerive<'a> {\n                         return SessionDiagnosticDeriveError::ErrorHandled.to_compile_error();\n                     }\n                     (Some((kind, _)), None) => {\n-                        span_err(span, \"`slug` not specified\")\n-                            .help(&format!(\"use the `#[{}(slug = \\\"...\\\")]` attribute to set this diagnostic's slug\", kind.descr()))\n+                        span_err(span, \"diagnostic slug not specified\")\n+                            .help(&format!(\n+                                \"specify the slug as the first argument to the attribute, such as \\\n+                                 `#[{}(typeck::example_error)]`\",\n+                                kind.descr()\n+                            ))\n                             .emit();\n                         return SessionDiagnosticDeriveError::ErrorHandled.to_compile_error();\n                     }\n                     (Some((SessionDiagnosticKind::Error, _)), Some((slug, _))) => {\n                         quote! {\n-                            let mut #diag = #sess.struct_err(\n-                                rustc_errors::DiagnosticMessage::new(#slug),\n-                            );\n+                            let mut #diag = #sess.struct_err(rustc_errors::fluent::#slug);\n                         }\n                     }\n                     (Some((SessionDiagnosticKind::Warn, _)), Some((slug, _))) => {\n                         quote! {\n-                            let mut #diag = #sess.struct_warn(\n-                                rustc_errors::DiagnosticMessage::new(#slug),\n-                            );\n+                            let mut #diag = #sess.struct_warn(rustc_errors::fluent::#slug);\n                         }\n                     }\n                 };\n@@ -226,7 +228,7 @@ struct SessionDiagnosticDeriveBuilder {\n     kind: Option<(SessionDiagnosticKind, proc_macro::Span)>,\n     /// Slug is a mandatory part of the struct attribute as corresponds to the Fluent message that\n     /// has the actual diagnostic message.\n-    slug: Option<(String, proc_macro::Span)>,\n+    slug: Option<(Path, proc_macro::Span)>,\n     /// Error codes are a optional part of the struct attribute - this is only set to detect\n     /// multiple specifications.\n     code: Option<(String, proc_macro::Span)>,\n@@ -240,79 +242,104 @@ impl HasFieldMap for SessionDiagnosticDeriveBuilder {\n \n impl SessionDiagnosticDeriveBuilder {\n     /// Establishes state in the `SessionDiagnosticDeriveBuilder` resulting from the struct\n-    /// attributes like `#[error(..)#`, such as the diagnostic kind and slug. Generates\n+    /// attributes like `#[error(..)`, such as the diagnostic kind and slug. Generates\n     /// diagnostic builder calls for setting error code and creating note/help messages.\n     fn generate_structure_code(\n         &mut self,\n         attr: &Attribute,\n     ) -> Result<TokenStream, SessionDiagnosticDeriveError> {\n+        let diag = &self.diag;\n         let span = attr.span().unwrap();\n \n         let name = attr.path.segments.last().unwrap().ident.to_string();\n         let name = name.as_str();\n         let meta = attr.parse_meta()?;\n \n-        if matches!(name, \"help\" | \"note\") && matches!(meta, Meta::Path(_) | Meta::NameValue(_)) {\n-            let diag = &self.diag;\n-            let id = match meta {\n-                Meta::Path(..) => quote! { #name },\n-                Meta::NameValue(MetaNameValue { lit: syn::Lit::Str(s), .. }) => {\n-                    quote! { #s }\n-                }\n-                _ => unreachable!(),\n-            };\n-            let fn_name = proc_macro2::Ident::new(name, attr.span());\n-\n-            return Ok(quote! {\n-                #diag.#fn_name(rustc_errors::SubdiagnosticMessage::attr(#id));\n-            });\n-        }\n+        let is_help_or_note = matches!(name, \"help\" | \"note\");\n \n         let nested = match meta {\n+            // Most attributes are lists, like `#[error(..)]`/`#[warning(..)]` for most cases or\n+            // `#[help(..)]`/`#[note(..)]` when the user is specifying a alternative slug.\n             Meta::List(MetaList { ref nested, .. }) => nested,\n+            // Subdiagnostics without spans can be applied to the type too, and these are just\n+            // paths: `#[help]` and `#[note]`\n+            Meta::Path(_) if is_help_or_note => {\n+                let fn_name = proc_macro2::Ident::new(name, attr.span());\n+                return Ok(quote! { #diag.#fn_name(rustc_errors::fluent::_subdiag::#fn_name); });\n+            }\n             _ => throw_invalid_attr!(attr, &meta),\n         };\n \n-        let kind = match name {\n-            \"error\" => SessionDiagnosticKind::Error,\n-            \"warning\" => SessionDiagnosticKind::Warn,\n+        // Check the kind before doing any further processing so that there aren't misleading\n+        // \"no kind specified\" errors if there are failures later.\n+        match name {\n+            \"error\" => self.kind.set_once((SessionDiagnosticKind::Error, span)),\n+            \"warning\" => self.kind.set_once((SessionDiagnosticKind::Warn, span)),\n+            \"help\" | \"note\" => (),\n             _ => throw_invalid_attr!(attr, &meta, |diag| {\n-                diag.help(\"only `error` and `warning` are valid attributes\")\n+                diag.help(\"only `error`, `warning`, `help` and `note` are valid attributes\")\n             }),\n-        };\n-        self.kind.set_once((kind, span));\n+        }\n+\n+        // First nested element should always be the path, e.g. `#[error(typeck::invalid)]` or\n+        // `#[help(typeck::another_help)]`.\n+        let mut nested_iter = nested.into_iter();\n+        if let Some(nested_attr) = nested_iter.next() {\n+            // Report an error if there are any other list items after the path.\n+            if is_help_or_note && nested_iter.next().is_some() {\n+                throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n+                    diag.help(\"`help` and `note` struct attributes can only have one argument\")\n+                });\n+            }\n \n+            match nested_attr {\n+                NestedMeta::Meta(Meta::Path(path)) if is_help_or_note => {\n+                    let fn_name = proc_macro2::Ident::new(name, attr.span());\n+                    return Ok(quote! { #diag.#fn_name(rustc_errors::fluent::#path); });\n+                }\n+                NestedMeta::Meta(Meta::Path(path)) => {\n+                    self.slug.set_once((path.clone(), span));\n+                }\n+                NestedMeta::Meta(meta @ Meta::NameValue(_))\n+                    if !is_help_or_note\n+                        && meta.path().segments.last().unwrap().ident.to_string() == \"code\" =>\n+                {\n+                    // don't error for valid follow-up attributes\n+                }\n+                nested_attr => throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n+                    diag.help(\"first argument of the attribute should be the diagnostic slug\")\n+                }),\n+            };\n+        }\n+\n+        // Remaining attributes are optional, only `code = \"..\"` at the moment.\n         let mut tokens = Vec::new();\n-        for nested_attr in nested {\n+        for nested_attr in nested_iter {\n             let meta = match nested_attr {\n                 syn::NestedMeta::Meta(meta) => meta,\n                 _ => throw_invalid_nested_attr!(attr, &nested_attr),\n             };\n \n             let path = meta.path();\n             let nested_name = path.segments.last().unwrap().ident.to_string();\n-            match &meta {\n-                // Struct attributes are only allowed to be applied once, and the diagnostic\n-                // changes will be set in the initialisation code.\n-                Meta::NameValue(MetaNameValue { lit: syn::Lit::Str(s), .. }) => {\n-                    let span = s.span().unwrap();\n-                    match nested_name.as_str() {\n-                        \"slug\" => {\n-                            self.slug.set_once((s.value(), span));\n-                        }\n-                        \"code\" => {\n-                            self.code.set_once((s.value(), span));\n-                            let (diag, code) = (&self.diag, &self.code.as_ref().map(|(v, _)| v));\n-                            tokens.push(quote! {\n-                                #diag.code(rustc_errors::DiagnosticId::Error(#code.to_string()));\n-                            });\n-                        }\n-                        _ => invalid_nested_attr(attr, &nested_attr)\n-                            .help(\"only `slug` and `code` are valid nested attributes\")\n-                            .emit(),\n+            // Struct attributes are only allowed to be applied once, and the diagnostic\n+            // changes will be set in the initialisation code.\n+            if let Meta::NameValue(MetaNameValue { lit: syn::Lit::Str(s), .. }) = &meta {\n+                let span = s.span().unwrap();\n+                match nested_name.as_str() {\n+                    \"code\" => {\n+                        self.code.set_once((s.value(), span));\n+                        let code = &self.code.as_ref().map(|(v, _)| v);\n+                        tokens.push(quote! {\n+                            #diag.code(rustc_errors::DiagnosticId::Error(#code.to_string()));\n+                        });\n                     }\n+                    _ => invalid_nested_attr(attr, &nested_attr)\n+                        .help(\"only `code` is a valid nested attributes following the slug\")\n+                        .emit(),\n                 }\n-                _ => invalid_nested_attr(attr, &nested_attr).emit(),\n+            } else {\n+                invalid_nested_attr(attr, &nested_attr).emit()\n             }\n         }\n \n@@ -382,142 +409,215 @@ impl SessionDiagnosticDeriveBuilder {\n         info: FieldInfo<'_>,\n         binding: TokenStream,\n     ) -> Result<TokenStream, SessionDiagnosticDeriveError> {\n+        let meta = attr.parse_meta()?;\n+        match meta {\n+            Meta::Path(_) => self.generate_inner_field_code_path(attr, info, binding),\n+            Meta::List(MetaList { .. }) => self.generate_inner_field_code_list(attr, info, binding),\n+            _ => throw_invalid_attr!(attr, &meta),\n+        }\n+    }\n+\n+    fn generate_inner_field_code_path(\n+        &mut self,\n+        attr: &Attribute,\n+        info: FieldInfo<'_>,\n+        binding: TokenStream,\n+    ) -> Result<TokenStream, SessionDiagnosticDeriveError> {\n+        assert!(matches!(attr.parse_meta()?, Meta::Path(_)));\n         let diag = &self.diag;\n \n+        let meta = attr.parse_meta()?;\n+\n         let ident = &attr.path.segments.last().unwrap().ident;\n         let name = ident.to_string();\n         let name = name.as_str();\n+        match name {\n+            \"skip_arg\" => {\n+                // Don't need to do anything - by virtue of the attribute existing, the\n+                // `set_arg` call will not be generated.\n+                Ok(quote! {})\n+            }\n+            \"primary_span\" => {\n+                report_error_if_not_applied_to_span(attr, &info)?;\n+                Ok(quote! {\n+                    #diag.set_span(#binding);\n+                })\n+            }\n+            \"label\" => {\n+                report_error_if_not_applied_to_span(attr, &info)?;\n+                Ok(self.add_spanned_subdiagnostic(binding, ident, parse_quote! { _subdiag::label }))\n+            }\n+            \"note\" | \"help\" => {\n+                let path = match name {\n+                    \"note\" => parse_quote! { _subdiag::note },\n+                    \"help\" => parse_quote! { _subdiag::help },\n+                    _ => unreachable!(),\n+                };\n+                if type_matches_path(&info.ty, &[\"rustc_span\", \"Span\"]) {\n+                    Ok(self.add_spanned_subdiagnostic(binding, ident, path))\n+                } else if type_is_unit(&info.ty) {\n+                    Ok(self.add_subdiagnostic(ident, path))\n+                } else {\n+                    report_type_error(attr, \"`Span` or `()`\")?;\n+                }\n+            }\n+            \"subdiagnostic\" => Ok(quote! { #diag.subdiagnostic(#binding); }),\n+            _ => throw_invalid_attr!(attr, &meta, |diag| {\n+                diag.help(\n+                    \"only `skip_arg`, `primary_span`, `label`, `note`, `help` and `subdiagnostic` \\\n+                     are valid field attributes\",\n+                )\n+            }),\n+        }\n+    }\n \n+    fn generate_inner_field_code_list(\n+        &mut self,\n+        attr: &Attribute,\n+        info: FieldInfo<'_>,\n+        binding: TokenStream,\n+    ) -> Result<TokenStream, SessionDiagnosticDeriveError> {\n         let meta = attr.parse_meta()?;\n-        match meta {\n-            Meta::Path(_) => match name {\n-                \"skip_arg\" => {\n-                    // Don't need to do anything - by virtue of the attribute existing, the\n-                    // `set_arg` call will not be generated.\n-                    Ok(quote! {})\n-                }\n-                \"primary_span\" => {\n-                    report_error_if_not_applied_to_span(attr, &info)?;\n-                    Ok(quote! {\n-                        #diag.set_span(#binding);\n-                    })\n-                }\n-                \"label\" => {\n-                    report_error_if_not_applied_to_span(attr, &info)?;\n-                    Ok(self.add_spanned_subdiagnostic(binding, ident, name))\n-                }\n-                \"note\" | \"help\" => {\n-                    if type_matches_path(&info.ty, &[\"rustc_span\", \"Span\"]) {\n-                        Ok(self.add_spanned_subdiagnostic(binding, ident, name))\n-                    } else if type_is_unit(&info.ty) {\n-                        Ok(self.add_subdiagnostic(ident, name))\n-                    } else {\n-                        report_type_error(attr, \"`Span` or `()`\")?;\n-                    }\n-                }\n-                \"subdiagnostic\" => Ok(quote! { #diag.subdiagnostic(#binding); }),\n-                _ => throw_invalid_attr!(attr, &meta, |diag| {\n-                    diag\n-                        .help(\"only `skip_arg`, `primary_span`, `label`, `note`, `help` and `subdiagnostic` are valid field attributes\")\n-                }),\n-            },\n-            Meta::NameValue(MetaNameValue { lit: syn::Lit::Str(ref s), .. }) => match name {\n-                \"label\" => {\n-                    report_error_if_not_applied_to_span(attr, &info)?;\n-                    Ok(self.add_spanned_subdiagnostic(binding, ident, &s.value()))\n-                }\n-                \"note\" | \"help\" => {\n-                    if type_matches_path(&info.ty, &[\"rustc_span\", \"Span\"]) {\n-                        Ok(self.add_spanned_subdiagnostic(binding, ident, &s.value()))\n-                    } else if type_is_unit(&info.ty) {\n-                        Ok(self.add_subdiagnostic(ident, &s.value()))\n-                    } else {\n-                        report_type_error(attr, \"`Span` or `()`\")?;\n-                    }\n-                }\n-                _ => throw_invalid_attr!(attr, &meta, |diag| {\n-                    diag.help(\"only `label`, `note` and `help` are valid field attributes\")\n-                }),\n-            },\n-            Meta::List(MetaList { ref path, ref nested, .. }) => {\n-                let name = path.segments.last().unwrap().ident.to_string();\n-                let name = name.as_ref();\n-\n-                match name {\n-                    \"suggestion\" | \"suggestion_short\" | \"suggestion_hidden\"\n-                    | \"suggestion_verbose\" => (),\n-                    _ => throw_invalid_attr!(attr, &meta, |diag| {\n-                        diag\n-                            .help(\"only `suggestion{,_short,_hidden,_verbose}` are valid field attributes\")\n-                    }),\n-                };\n+        let Meta::List(MetaList { ref path, ref nested, .. }) = meta  else { unreachable!() };\n \n-                let (span_field, mut applicability) = self.span_and_applicability_of_ty(info)?;\n+        let ident = &attr.path.segments.last().unwrap().ident;\n+        let name = path.segments.last().unwrap().ident.to_string();\n+        let name = name.as_ref();\n+        match name {\n+            \"suggestion\" | \"suggestion_short\" | \"suggestion_hidden\" | \"suggestion_verbose\" => {\n+                return self.generate_inner_field_code_suggestion(attr, info);\n+            }\n+            \"label\" | \"help\" | \"note\" => (),\n+            _ => throw_invalid_attr!(attr, &meta, |diag| {\n+                diag.help(\n+                    \"only `label`, `note`, `help` or `suggestion{,_short,_hidden,_verbose}` are \\\n+                     valid field attributes\",\n+                )\n+            }),\n+        }\n \n-                let mut msg = None;\n-                let mut code = None;\n+        // For `#[label(..)]`, `#[note(..)]` and `#[help(..)]`, the first nested element must be a\n+        // path, e.g. `#[label(typeck::label)]`.\n+        let mut nested_iter = nested.into_iter();\n+        let msg = match nested_iter.next() {\n+            Some(NestedMeta::Meta(Meta::Path(path))) => path.clone(),\n+            Some(nested_attr) => throw_invalid_nested_attr!(attr, &nested_attr),\n+            None => throw_invalid_attr!(attr, &meta),\n+        };\n \n-                for nested_attr in nested {\n-                    let meta = match nested_attr {\n-                        syn::NestedMeta::Meta(ref meta) => meta,\n-                        syn::NestedMeta::Lit(_) => throw_invalid_nested_attr!(attr, &nested_attr),\n-                    };\n+        // None of these attributes should have anything following the slug.\n+        if nested_iter.next().is_some() {\n+            throw_invalid_attr!(attr, &meta);\n+        }\n \n-                    let nested_name = meta.path().segments.last().unwrap().ident.to_string();\n-                    let nested_name = nested_name.as_str();\n-                    match meta {\n-                        Meta::NameValue(MetaNameValue { lit: syn::Lit::Str(s), .. }) => {\n-                            let span = meta.span().unwrap();\n-                            match nested_name {\n-                                \"message\" => {\n-                                    msg = Some(s.value());\n-                                }\n-                                \"code\" => {\n-                                    let formatted_str = self.build_format(&s.value(), s.span());\n-                                    code = Some(formatted_str);\n+        match name {\n+            \"label\" => {\n+                report_error_if_not_applied_to_span(attr, &info)?;\n+                Ok(self.add_spanned_subdiagnostic(binding, ident, msg))\n+            }\n+            \"note\" | \"help\" if type_matches_path(&info.ty, &[\"rustc_span\", \"Span\"]) => {\n+                Ok(self.add_spanned_subdiagnostic(binding, ident, msg))\n+            }\n+            \"note\" | \"help\" if type_is_unit(&info.ty) => Ok(self.add_subdiagnostic(ident, msg)),\n+            \"note\" | \"help\" => {\n+                report_type_error(attr, \"`Span` or `()`\")?;\n+            }\n+            _ => unreachable!(),\n+        }\n+    }\n+\n+    fn generate_inner_field_code_suggestion(\n+        &mut self,\n+        attr: &Attribute,\n+        info: FieldInfo<'_>,\n+    ) -> Result<TokenStream, SessionDiagnosticDeriveError> {\n+        let diag = &self.diag;\n+\n+        let mut meta = attr.parse_meta()?;\n+        let Meta::List(MetaList { ref path, ref mut nested, .. }) = meta  else { unreachable!() };\n+\n+        let (span_field, mut applicability) = self.span_and_applicability_of_ty(info)?;\n+\n+        let mut msg = None;\n+        let mut code = None;\n+\n+        let mut nested_iter = nested.into_iter().peekable();\n+        if let Some(nested_attr) = nested_iter.peek() {\n+            if let NestedMeta::Meta(Meta::Path(path)) = nested_attr {\n+                msg = Some(path.clone());\n+            }\n+        };\n+        // Move the iterator forward if a path was found (don't otherwise so that\n+        // code/applicability can be found or an error emitted).\n+        if msg.is_some() {\n+            let _ = nested_iter.next();\n+        }\n+\n+        for nested_attr in nested_iter {\n+            let meta = match nested_attr {\n+                syn::NestedMeta::Meta(ref meta) => meta,\n+                syn::NestedMeta::Lit(_) => throw_invalid_nested_attr!(attr, &nested_attr),\n+            };\n+\n+            let nested_name = meta.path().segments.last().unwrap().ident.to_string();\n+            let nested_name = nested_name.as_str();\n+            match meta {\n+                Meta::NameValue(MetaNameValue { lit: syn::Lit::Str(s), .. }) => {\n+                    let span = meta.span().unwrap();\n+                    match nested_name {\n+                        \"code\" => {\n+                            let formatted_str = self.build_format(&s.value(), s.span());\n+                            code = Some(formatted_str);\n+                        }\n+                        \"applicability\" => {\n+                            applicability = match applicability {\n+                                Some(v) => {\n+                                    span_err(\n+                                        span,\n+                                        \"applicability cannot be set in both the field and \\\n+                                         attribute\",\n+                                    )\n+                                    .emit();\n+                                    Some(v)\n                                 }\n-                                \"applicability\" => {\n-                                    applicability = match applicability {\n-                                        Some(v) => {\n-                                            span_err(\n-                                                span,\n-                                                \"applicability cannot be set in both the field and attribute\"\n-                                            ).emit();\n-                                            Some(v)\n-                                        }\n-                                        None => match Applicability::from_str(&s.value()) {\n-                                            Ok(v) => Some(quote! { #v }),\n-                                            Err(()) => {\n-                                                span_err(span, \"invalid applicability\").emit();\n-                                                None\n-                                            }\n-                                        },\n+                                None => match Applicability::from_str(&s.value()) {\n+                                    Ok(v) => Some(quote! { #v }),\n+                                    Err(()) => {\n+                                        span_err(span, \"invalid applicability\").emit();\n+                                        None\n                                     }\n-                                }\n-                                _ => throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n-                                    diag.help(\n-                                        \"only `message`, `code` and `applicability` are valid field attributes\",\n-                                    )\n-                                }),\n+                                },\n                             }\n                         }\n-                        _ => throw_invalid_nested_attr!(attr, &nested_attr),\n+                        _ => throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n+                            diag.help(\n+                                \"only `message`, `code` and `applicability` are valid field \\\n+                                 attributes\",\n+                            )\n+                        }),\n                     }\n                 }\n+                _ => throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n+                    if matches!(meta, Meta::Path(_)) {\n+                        diag.help(\"a diagnostic slug must be the first argument to the attribute\")\n+                    } else {\n+                        diag\n+                    }\n+                }),\n+            }\n+        }\n \n-                let applicability = applicability\n-                    .unwrap_or_else(|| quote!(rustc_errors::Applicability::Unspecified));\n+        let applicability =\n+            applicability.unwrap_or_else(|| quote!(rustc_errors::Applicability::Unspecified));\n \n-                let method = format_ident!(\"span_{}\", name);\n+        let name = path.segments.last().unwrap().ident.to_string();\n+        let method = format_ident!(\"span_{}\", name);\n \n-                let msg = msg.as_deref().unwrap_or(\"suggestion\");\n-                let msg = quote! { rustc_errors::SubdiagnosticMessage::attr(#msg) };\n-                let code = code.unwrap_or_else(|| quote! { String::new() });\n+        let msg = msg.unwrap_or_else(|| parse_quote! { _subdiag::suggestion });\n+        let msg = quote! { rustc_errors::fluent::#msg };\n+        let code = code.unwrap_or_else(|| quote! { String::new() });\n \n-                Ok(quote! { #diag.#method(#span_field, #msg, #code, #applicability); })\n-            }\n-            _ => throw_invalid_attr!(attr, &meta),\n-        }\n+        Ok(quote! { #diag.#method(#span_field, #msg, #code, #applicability); })\n     }\n \n     /// Adds a spanned subdiagnostic by generating a `diag.span_$kind` call with the current slug\n@@ -526,24 +626,24 @@ impl SessionDiagnosticDeriveBuilder {\n         &self,\n         field_binding: TokenStream,\n         kind: &Ident,\n-        fluent_attr_identifier: &str,\n+        fluent_attr_identifier: Path,\n     ) -> TokenStream {\n         let diag = &self.diag;\n         let fn_name = format_ident!(\"span_{}\", kind);\n         quote! {\n             #diag.#fn_name(\n                 #field_binding,\n-                rustc_errors::SubdiagnosticMessage::attr(#fluent_attr_identifier)\n+                rustc_errors::fluent::#fluent_attr_identifier\n             );\n         }\n     }\n \n     /// Adds a subdiagnostic by generating a `diag.span_$kind` call with the current slug\n     /// and `fluent_attr_identifier`.\n-    fn add_subdiagnostic(&self, kind: &Ident, fluent_attr_identifier: &str) -> TokenStream {\n+    fn add_subdiagnostic(&self, kind: &Ident, fluent_attr_identifier: Path) -> TokenStream {\n         let diag = &self.diag;\n         quote! {\n-            #diag.#kind(rustc_errors::SubdiagnosticMessage::attr(#fluent_attr_identifier));\n+            #diag.#kind(rustc_errors::fluent::#fluent_attr_identifier);\n         }\n     }\n \n@@ -569,7 +669,8 @@ impl SessionDiagnosticDeriveBuilder {\n                         } else {\n                             throw_span_err!(\n                                 info.span.unwrap(),\n-                                \"type of field annotated with `#[suggestion(...)]` contains more than one `Span`\"\n+                                \"type of field annotated with `#[suggestion(...)]` contains more \\\n+                                 than one `Span`\"\n                             );\n                         }\n                     } else if type_matches_path(elem, &[\"rustc_errors\", \"Applicability\"]) {\n@@ -578,7 +679,8 @@ impl SessionDiagnosticDeriveBuilder {\n                         } else {\n                             throw_span_err!(\n                                 info.span.unwrap(),\n-                                \"type of field annotated with `#[suggestion(...)]` contains more than one Applicability\"\n+                                \"type of field annotated with `#[suggestion(...)]` contains more \\\n+                                 than one Applicability\"\n                             );\n                         }\n                     }\n@@ -595,12 +697,18 @@ impl SessionDiagnosticDeriveBuilder {\n                 }\n \n                 throw_span_err!(info.span.unwrap(), \"wrong types for suggestion\", |diag| {\n-                    diag.help(\"`#[suggestion(...)]` on a tuple field must be applied to fields of type `(Span, Applicability)`\")\n+                    diag.help(\n+                        \"`#[suggestion(...)]` on a tuple field must be applied to fields of type \\\n+                         `(Span, Applicability)`\",\n+                    )\n                 });\n             }\n             // If `ty` isn't a `Span` or `(Span, Applicability)` then emit an error.\n             _ => throw_span_err!(info.span.unwrap(), \"wrong field type for suggestion\", |diag| {\n-                diag.help(\"`#[suggestion(...)]` should be applied to fields of type `Span` or `(Span, Applicability)`\")\n+                diag.help(\n+                    \"`#[suggestion(...)]` should be applied to fields of type `Span` or \\\n+                     `(Span, Applicability)`\",\n+                )\n             }),\n         }\n     }"}, {"sha": "d088402abc6da21db0ac3bc62f6c078802d73d91", "filename": "compiler/rustc_macros/src/diagnostics/error.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ferror.rs?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -39,6 +39,19 @@ pub(crate) fn _throw_err(\n     SessionDiagnosticDeriveError::ErrorHandled\n }\n \n+/// Helper function for printing `syn::Path` - doesn't handle arguments in paths and these are\n+/// unlikely to come up much in use of the macro.\n+fn path_to_string(path: &syn::Path) -> String {\n+    let mut out = String::new();\n+    for (i, segment) in path.segments.iter().enumerate() {\n+        if i > 0 || path.leading_colon.is_some() {\n+            out.push_str(\"::\");\n+        }\n+        out.push_str(&segment.ident.to_string());\n+    }\n+    out\n+}\n+\n /// Returns an error diagnostic on span `span` with msg `msg`.\n pub(crate) fn span_err(span: impl MultiSpan, msg: &str) -> Diagnostic {\n     Diagnostic::spanned(span, Level::Error, msg)\n@@ -61,15 +74,13 @@ pub(crate) use throw_span_err;\n /// Returns an error diagnostic for an invalid attribute.\n pub(crate) fn invalid_attr(attr: &Attribute, meta: &Meta) -> Diagnostic {\n     let span = attr.span().unwrap();\n-    let name = attr.path.segments.last().unwrap().ident.to_string();\n-    let name = name.as_str();\n-\n+    let path = path_to_string(&attr.path);\n     match meta {\n-        Meta::Path(_) => span_err(span, &format!(\"`#[{}]` is not a valid attribute\", name)),\n+        Meta::Path(_) => span_err(span, &format!(\"`#[{}]` is not a valid attribute\", path)),\n         Meta::NameValue(_) => {\n-            span_err(span, &format!(\"`#[{} = ...]` is not a valid attribute\", name))\n+            span_err(span, &format!(\"`#[{} = ...]` is not a valid attribute\", path))\n         }\n-        Meta::List(_) => span_err(span, &format!(\"`#[{}(...)]` is not a valid attribute\", name)),\n+        Meta::List(_) => span_err(span, &format!(\"`#[{}(...)]` is not a valid attribute\", path)),\n     }\n }\n \n@@ -101,18 +112,16 @@ pub(crate) fn invalid_nested_attr(attr: &Attribute, nested: &NestedMeta) -> Diag\n     };\n \n     let span = meta.span().unwrap();\n-    let nested_name = meta.path().segments.last().unwrap().ident.to_string();\n-    let nested_name = nested_name.as_str();\n+    let path = path_to_string(meta.path());\n     match meta {\n-        Meta::NameValue(..) => span_err(\n-            span,\n-            &format!(\"`#[{}({} = ...)]` is not a valid attribute\", name, nested_name),\n-        ),\n+        Meta::NameValue(..) => {\n+            span_err(span, &format!(\"`#[{}({} = ...)]` is not a valid attribute\", name, path))\n+        }\n         Meta::Path(..) => {\n-            span_err(span, &format!(\"`#[{}({})]` is not a valid attribute\", name, nested_name))\n+            span_err(span, &format!(\"`#[{}({})]` is not a valid attribute\", name, path))\n         }\n         Meta::List(..) => {\n-            span_err(span, &format!(\"`#[{}({}(...))]` is not a valid attribute\", name, nested_name))\n+            span_err(span, &format!(\"`#[{}({}(...))]` is not a valid attribute\", name, path))\n         }\n     }\n }"}, {"sha": "2317186e65502d522809b84fd629b6db50610a3f", "filename": "compiler/rustc_macros/src/diagnostics/fluent.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -254,6 +254,17 @@ pub(crate) fn fluent_messages(input: proc_macro::TokenStream) -> proc_macro::Tok\n             ];\n \n             #generated\n+\n+            pub mod _subdiag {\n+                pub const note: crate::SubdiagnosticMessage =\n+                    crate::SubdiagnosticMessage::FluentAttr(std::borrow::Cow::Borrowed(\"note\"));\n+                pub const help: crate::SubdiagnosticMessage =\n+                    crate::SubdiagnosticMessage::FluentAttr(std::borrow::Cow::Borrowed(\"help\"));\n+                pub const label: crate::SubdiagnosticMessage =\n+                    crate::SubdiagnosticMessage::FluentAttr(std::borrow::Cow::Borrowed(\"label\"));\n+                pub const suggestion: crate::SubdiagnosticMessage =\n+                    crate::SubdiagnosticMessage::FluentAttr(std::borrow::Cow::Borrowed(\"suggestion\"));\n+            }\n         }\n     }\n     .into()"}, {"sha": "2eee4bfb5dd45bce0a254ce43cb15668b59183a4", "filename": "compiler/rustc_macros/src/diagnostics/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -22,14 +22,14 @@ use synstructure::Structure;\n /// # extern crate rust_middle;\n /// # use rustc_middle::ty::Ty;\n /// #[derive(SessionDiagnostic)]\n-/// #[error(code = \"E0505\", slug = \"borrowck-move-out-of-borrow\")]\n+/// #[error(borrowck::move_out_of_borrow, code = \"E0505\")]\n /// pub struct MoveOutOfBorrowError<'tcx> {\n ///     pub name: Ident,\n ///     pub ty: Ty<'tcx>,\n ///     #[primary_span]\n ///     #[label]\n ///     pub span: Span,\n-///     #[label = \"first-borrow-label\"]\n+///     #[label(borrowck::first_borrow_label)]\n ///     pub first_borrow_span: Span,\n ///     #[suggestion(code = \"{name}.clone()\")]\n ///     pub clone_sugg: Option<(Span, Applicability)>\n@@ -72,12 +72,12 @@ pub fn session_diagnostic_derive(s: Structure<'_>) -> TokenStream {\n /// ```ignore (rust)\n /// #[derive(SessionSubdiagnostic)]\n /// pub enum ExpectedIdentifierLabel<'tcx> {\n-///     #[label(slug = \"parser-expected-identifier\")]\n+///     #[label(parser::expected_identifier)]\n ///     WithoutFound {\n ///         #[primary_span]\n ///         span: Span,\n ///     }\n-///     #[label(slug = \"parser-expected-identifier-found\")]\n+///     #[label(parser::expected_identifier_found)]\n ///     WithFound {\n ///         #[primary_span]\n ///         span: Span,\n@@ -86,7 +86,7 @@ pub fn session_diagnostic_derive(s: Structure<'_>) -> TokenStream {\n /// }\n ///\n /// #[derive(SessionSubdiagnostic)]\n-/// #[suggestion_verbose(slug = \"parser-raw-identifier\")]\n+/// #[suggestion_verbose(parser::raw_identifier)]\n /// pub struct RawIdentifierSuggestion<'tcx> {\n ///     #[primary_span]\n ///     span: Span,"}, {"sha": "eab954a9c1bf9c886577b3b63b1d627a29ed8ab7", "filename": "compiler/rustc_macros/src/diagnostics/subdiagnostic.rs", "status": "modified", "additions": 72, "deletions": 12, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -13,7 +13,7 @@ use quote::{format_ident, quote};\n use std::collections::HashMap;\n use std::fmt;\n use std::str::FromStr;\n-use syn::{spanned::Spanned, Meta, MetaList, MetaNameValue};\n+use syn::{parse_quote, spanned::Spanned, Meta, MetaList, MetaNameValue, NestedMeta, Path};\n use synstructure::{BindingInfo, Structure, VariantInfo};\n \n /// Which kind of suggestion is being created?\n@@ -194,8 +194,8 @@ struct SessionSubdiagnosticDeriveBuilder<'a> {\n     kind: Option<(SubdiagnosticKind, proc_macro::Span)>,\n \n     /// Slug of the subdiagnostic - corresponds to the Fluent identifier for the message - from the\n-    /// `#[kind(slug = \"...\")]` attribute on the type or variant.\n-    slug: Option<(String, proc_macro::Span)>,\n+    /// `#[kind(slug)]` attribute on the type or variant.\n+    slug: Option<(Path, proc_macro::Span)>,\n     /// If a suggestion, the code to suggest as a replacement - from the `#[kind(code = \"...\")]`\n     /// attribute on the type or variant.\n     code: Option<(TokenStream, proc_macro::Span)>,\n@@ -224,9 +224,34 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n             let meta = attr.parse_meta()?;\n             let kind = match meta {\n                 Meta::List(MetaList { ref nested, .. }) => {\n-                    for nested_attr in nested {\n+                    let mut nested_iter = nested.into_iter();\n+                    if let Some(nested_attr) = nested_iter.next() {\n+                        match nested_attr {\n+                            NestedMeta::Meta(Meta::Path(path)) => {\n+                                self.slug.set_once((path.clone(), span));\n+                            }\n+                            NestedMeta::Meta(meta @ Meta::NameValue(_))\n+                                if matches!(\n+                                    meta.path().segments.last().unwrap().ident.to_string().as_str(),\n+                                    \"code\" | \"applicability\"\n+                                ) =>\n+                            {\n+                                // don't error for valid follow-up attributes\n+                            }\n+                            nested_attr => {\n+                                throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n+                                    diag.help(\n+                                        \"first argument of the attribute should be the diagnostic \\\n+                                         slug\",\n+                                    )\n+                                })\n+                            }\n+                        };\n+                    }\n+\n+                    for nested_attr in nested_iter {\n                         let meta = match nested_attr {\n-                            syn::NestedMeta::Meta(ref meta) => meta,\n+                            NestedMeta::Meta(ref meta) => meta,\n                             _ => throw_invalid_nested_attr!(attr, &nested_attr),\n                         };\n \n@@ -241,7 +266,6 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n                                         let formatted_str = self.build_format(&s.value(), s.span());\n                                         self.code.set_once((formatted_str, span));\n                                     }\n-                                    \"slug\" => self.slug.set_once((s.value(), span)),\n                                     \"applicability\" => {\n                                         let value = match Applicability::from_str(&s.value()) {\n                                             Ok(v) => v,\n@@ -253,11 +277,23 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n                                         self.applicability.set_once((quote! { #value }, span));\n                                     }\n                                     _ => throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n-                                        diag.help(\"only `code`, `slug` and `applicability` are valid nested attributes\")\n+                                        diag.help(\n+                                            \"only `code` and `applicability` are valid nested \\\n+                                             attributes\",\n+                                        )\n                                     }),\n                                 }\n                             }\n-                            _ => throw_invalid_nested_attr!(attr, &nested_attr),\n+                            _ => throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n+                                if matches!(meta, Meta::Path(_)) {\n+                                    diag.help(\n+                                        \"a diagnostic slug must be the first argument to the \\\n+                                         attribute\",\n+                                    )\n+                                } else {\n+                                    diag\n+                                }\n+                            }),\n                         }\n                     }\n \n@@ -281,10 +317,27 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n                 );\n             }\n \n+            if matches!(\n+                kind,\n+                SubdiagnosticKind::Label | SubdiagnosticKind::Help | SubdiagnosticKind::Note\n+            ) && self.applicability.is_some()\n+            {\n+                throw_span_err!(\n+                    span,\n+                    &format!(\n+                        \"`applicability` is not a valid nested attribute of a `{}` attribute\",\n+                        name\n+                    )\n+                );\n+            }\n+\n             if self.slug.is_none() {\n                 throw_span_err!(\n                     span,\n-                    &format!(\"`slug` must be set in a `#[{}(...)]` attribute\", name)\n+                    &format!(\n+                        \"diagnostic slug must be first argument of a `#[{}(...)]` attribute\",\n+                        name\n+                    )\n                 );\n             }\n \n@@ -335,7 +388,10 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n                         return Ok(quote! {});\n                     }\n                     _ => throw_invalid_attr!(attr, &meta, |diag| {\n-                        diag.help(\"only `primary_span`, `applicability` and `skip_arg` are valid field attributes\")\n+                        diag.help(\n+                            \"only `primary_span`, `applicability` and `skip_arg` are valid field \\\n+                             attributes\",\n+                        )\n                     }),\n                 },\n                 _ => throw_invalid_attr!(attr, &meta),\n@@ -375,7 +431,11 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n         }\n \n         // Missing slug errors will already have been reported.\n-        let slug = self.slug.as_ref().map(|(slug, _)| &**slug).unwrap_or(\"missing-slug\");\n+        let slug = self\n+            .slug\n+            .as_ref()\n+            .map(|(slug, _)| slug.clone())\n+            .unwrap_or_else(|| parse_quote! { you::need::to::specify::a::slug });\n         let code = match self.code.as_ref() {\n             Some((code, _)) => Some(quote! { #code }),\n             None if is_suggestion => {\n@@ -397,7 +457,7 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n \n         let diag = &self.diag;\n         let name = format_ident!(\"{}{}\", if span_field.is_some() { \"span_\" } else { \"\" }, kind);\n-        let message = quote! { rustc_errors::SubdiagnosticMessage::message(#slug) };\n+        let message = quote! { rustc_errors::fluent::#slug };\n         let call = if matches!(kind, SubdiagnosticKind::Suggestion(..)) {\n             if let Some(span) = span_field {\n                 quote! { #diag.#name(#span, #message, #code, #applicability); }"}, {"sha": "58d5d43cfbfa83ff4e32cb38f294a9dfaa9ae149", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -244,7 +244,7 @@ impl MultiSugg {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(slug = \"parser-maybe-report-ambiguous-plus\")]\n+#[error(parser::maybe_report_ambiguous_plus)]\n struct AmbiguousPlus {\n     pub sum_ty: String,\n     #[primary_span]\n@@ -253,7 +253,7 @@ struct AmbiguousPlus {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0178\", slug = \"parser-maybe-recover-from-bad-type-plus\")]\n+#[error(parser::maybe_recover_from_bad_type_plus, code = \"E0178\")]\n struct BadTypePlus {\n     pub ty: String,\n     #[primary_span]\n@@ -265,7 +265,7 @@ struct BadTypePlus {\n #[derive(SessionSubdiagnostic)]\n pub enum BadTypePlusSub {\n     #[suggestion(\n-        slug = \"parser-add-paren\",\n+        parser::add_paren,\n         code = \"{sum_with_parens}\",\n         applicability = \"machine-applicable\"\n     )]\n@@ -274,20 +274,20 @@ pub enum BadTypePlusSub {\n         #[primary_span]\n         span: Span,\n     },\n-    #[label(slug = \"parser-forgot-paren\")]\n+    #[label(parser::forgot_paren)]\n     ForgotParen {\n         #[primary_span]\n         span: Span,\n     },\n-    #[label(slug = \"parser-expect-path\")]\n+    #[label(parser::expect_path)]\n     ExpectPath {\n         #[primary_span]\n         span: Span,\n     },\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(slug = \"parser-maybe-recover-from-bad-qpath-stage-2\")]\n+#[error(parser::maybe_recover_from_bad_qpath_stage_2)]\n struct BadQPathStage2 {\n     #[primary_span]\n     #[suggestion(applicability = \"maybe-incorrect\")]\n@@ -296,7 +296,7 @@ struct BadQPathStage2 {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(slug = \"parser-incorrect-semicolon\")]\n+#[error(parser::incorrect_semicolon)]\n struct IncorrectSemicolon<'a> {\n     #[primary_span]\n     #[suggestion_short(applicability = \"machine-applicable\")]\n@@ -307,26 +307,26 @@ struct IncorrectSemicolon<'a> {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(slug = \"parser-incorrect-use-of-await\")]\n+#[error(parser::incorrect_use_of_await)]\n struct IncorrectUseOfAwait {\n     #[primary_span]\n-    #[suggestion(message = \"parentheses-suggestion\", applicability = \"machine-applicable\")]\n+    #[suggestion(parser::parentheses_suggestion, applicability = \"machine-applicable\")]\n     span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(slug = \"parser-incorrect-use-of-await\")]\n+#[error(parser::incorrect_use_of_await)]\n struct IncorrectAwait {\n     #[primary_span]\n     span: Span,\n-    #[suggestion(message = \"postfix-suggestion\", code = \"{expr}.await{question_mark}\")]\n+    #[suggestion(parser::postfix_suggestion, code = \"{expr}.await{question_mark}\")]\n     sugg_span: (Span, Applicability),\n     expr: String,\n     question_mark: &'static str,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(slug = \"parser-in-in-typo\")]\n+#[error(parser::in_in_typo)]\n struct InInTypo {\n     #[primary_span]\n     span: Span,"}, {"sha": "2c43563b10474c9214fdf1972032081931572720", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -7,6 +7,7 @@ use super::{\n };\n use crate::maybe_recover_from_interpolated_ty_qpath;\n \n+use core::mem;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Delimiter, Token, TokenKind};\n use rustc_ast::tokenstream::Spacing;\n@@ -26,7 +27,6 @@ use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_span::source_map::{self, Span, Spanned};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, Pos};\n-use std::mem;\n \n /// Possibly accepts an `token::Interpolated` expression (a pre-parsed expression\n /// dropped into the token stream, which happens while parsing the result of\n@@ -2343,7 +2343,9 @@ impl<'a> Parser<'a> {\n \n     /// Parses the condition of a `if` or `while` expression.\n     fn parse_cond_expr(&mut self) -> PResult<'a, P<Expr>> {\n-        let cond = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;\n+        let cond = self.with_let_management(true, |local_self| {\n+            local_self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)\n+        })?;\n \n         if let ExprKind::Let(..) = cond.kind {\n             // Remove the last feature gating of a `let` expression since it's stable.\n@@ -2356,6 +2358,13 @@ impl<'a> Parser<'a> {\n     /// Parses a `let $pat = $expr` pseudo-expression.\n     /// The `let` token has already been eaten.\n     fn parse_let_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {\n+        if !self.let_expr_allowed {\n+            self.struct_span_err(\n+                self.prev_token.span,\n+                \"expected expression, found `let` statement\",\n+            )\n+            .emit();\n+        }\n         let lo = self.prev_token.span;\n         let pat = self.parse_pat_allow_top_alt(\n             None,\n@@ -2672,6 +2681,8 @@ impl<'a> Parser<'a> {\n     }\n \n     pub(super) fn parse_arm(&mut self) -> PResult<'a, Arm> {\n+        // Used to check the `let_chains` and `if_let_guard` features mostly by scaning\n+        // `&&` tokens.\n         fn check_let_expr(expr: &Expr) -> (bool, bool) {\n             match expr.kind {\n                 ExprKind::Binary(_, ref lhs, ref rhs) => {\n@@ -2694,7 +2705,7 @@ impl<'a> Parser<'a> {\n             )?;\n             let guard = if this.eat_keyword(kw::If) {\n                 let if_span = this.prev_token.span;\n-                let cond = this.parse_expr()?;\n+                let cond = this.with_let_management(true, |local_this| local_this.parse_expr())?;\n                 let (has_let_expr, does_not_have_bin_op) = check_let_expr(&cond);\n                 if has_let_expr {\n                     if does_not_have_bin_op {\n@@ -3256,4 +3267,17 @@ impl<'a> Parser<'a> {\n             Ok((res, trailing))\n         })\n     }\n+\n+    // Calls `f` with the internal `let_expr_allowed` set to `let_expr_allowed` and then\n+    // sets the internal `let_expr_allowed` back to its original value.\n+    fn with_let_management<T>(\n+        &mut self,\n+        let_expr_allowed: bool,\n+        f: impl FnOnce(&mut Self) -> T,\n+    ) -> T {\n+        let last_let_expr_allowed = mem::replace(&mut self.let_expr_allowed, let_expr_allowed);\n+        let rslt = f(self);\n+        self.let_expr_allowed = last_let_expr_allowed;\n+        rslt\n+    }\n }"}, {"sha": "acdf121522ad9e635613857bc7318beee1145919", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -147,12 +147,15 @@ pub struct Parser<'a> {\n     /// This allows us to recover when the user forget to add braces around\n     /// multiple statements in the closure body.\n     pub current_closure: Option<ClosureSpans>,\n+    /// Used to track where `let`s are allowed. For example, `if true && let 1 = 1` is valid\n+    /// but `[1, 2, 3][let _ = ()]` is not.\n+    let_expr_allowed: bool,\n }\n \n // This type is used a lot, e.g. it's cloned when matching many declarative macro rules. Make sure\n // it doesn't unintentionally get bigger.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(Parser<'_>, 328);\n+rustc_data_structures::static_assert_size!(Parser<'_>, 336);\n \n /// Stores span information about a closure.\n #[derive(Clone)]\n@@ -455,6 +458,7 @@ impl<'a> Parser<'a> {\n                 inner_attr_ranges: Default::default(),\n             },\n             current_closure: None,\n+            let_expr_allowed: false,\n         };\n \n         // Make parser point to the first token."}, {"sha": "4cdec615d8290352067207817dc8dd95ddff0823", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -6,18 +6,18 @@ use rustc_session::{parse::ParseSess, SessionDiagnostic};\n use rustc_span::{symbol::Ident, Span, Symbol};\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0062\", slug = \"typeck-field-multiply-specified-in-initializer\")]\n+#[error(typeck::field_multiply_specified_in_initializer, code = \"E0062\")]\n pub struct FieldMultiplySpecifiedInInitializer {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n-    #[label = \"previous-use-label\"]\n+    #[label(typeck::previous_use_label)]\n     pub prev_span: Span,\n     pub ident: Ident,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0092\", slug = \"typeck-unrecognized-atomic-operation\")]\n+#[error(typeck::unrecognized_atomic_operation, code = \"E0092\")]\n pub struct UnrecognizedAtomicOperation<'a> {\n     #[primary_span]\n     #[label]\n@@ -26,7 +26,7 @@ pub struct UnrecognizedAtomicOperation<'a> {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0094\", slug = \"typeck-wrong-number-of-generic-arguments-to-intrinsic\")]\n+#[error(typeck::wrong_number_of_generic_arguments_to_intrinsic, code = \"E0094\")]\n pub struct WrongNumberOfGenericArgumentsToIntrinsic<'a> {\n     #[primary_span]\n     #[label]\n@@ -37,7 +37,7 @@ pub struct WrongNumberOfGenericArgumentsToIntrinsic<'a> {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0093\", slug = \"typeck-unrecognized-intrinsic-function\")]\n+#[error(typeck::unrecognized_intrinsic_function, code = \"E0093\")]\n pub struct UnrecognizedIntrinsicFunction {\n     #[primary_span]\n     #[label]\n@@ -46,92 +46,92 @@ pub struct UnrecognizedIntrinsicFunction {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0195\", slug = \"typeck-lifetimes-or-bounds-mismatch-on-trait\")]\n+#[error(typeck::lifetimes_or_bounds_mismatch_on_trait, code = \"E0195\")]\n pub struct LifetimesOrBoundsMismatchOnTrait {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n-    #[label = \"generics-label\"]\n+    #[label(typeck::generics_label)]\n     pub generics_span: Option<Span>,\n     pub item_kind: &'static str,\n     pub ident: Ident,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0120\", slug = \"typeck-drop-impl-on-wrong-item\")]\n+#[error(typeck::drop_impl_on_wrong_item, code = \"E0120\")]\n pub struct DropImplOnWrongItem {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0124\", slug = \"typeck-field-already-declared\")]\n+#[error(typeck::field_already_declared, code = \"E0124\")]\n pub struct FieldAlreadyDeclared {\n     pub field_name: Ident,\n     #[primary_span]\n     #[label]\n     pub span: Span,\n-    #[label = \"previous-decl-label\"]\n+    #[label(typeck::previous_decl_label)]\n     pub prev_span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0184\", slug = \"typeck-copy-impl-on-type-with-dtor\")]\n+#[error(typeck::copy_impl_on_type_with_dtor, code = \"E0184\")]\n pub struct CopyImplOnTypeWithDtor {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0203\", slug = \"typeck-multiple-relaxed-default-bounds\")]\n+#[error(typeck::multiple_relaxed_default_bounds, code = \"E0203\")]\n pub struct MultipleRelaxedDefaultBounds {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0206\", slug = \"typeck-copy-impl-on-non-adt\")]\n+#[error(typeck::copy_impl_on_non_adt, code = \"E0206\")]\n pub struct CopyImplOnNonAdt {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0224\", slug = \"typeck-trait-object-declared-with-no-traits\")]\n+#[error(typeck::trait_object_declared_with_no_traits, code = \"E0224\")]\n pub struct TraitObjectDeclaredWithNoTraits {\n     #[primary_span]\n     pub span: Span,\n-    #[label = \"alias-span\"]\n+    #[label(typeck::alias_span)]\n     pub trait_alias_span: Option<Span>,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0227\", slug = \"typeck-ambiguous-lifetime-bound\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0227\")]\n pub struct AmbiguousLifetimeBound {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0229\", slug = \"typeck-assoc-type-binding-not-allowed\")]\n+#[error(typeck::assoc_type_binding_not_allowed, code = \"E0229\")]\n pub struct AssocTypeBindingNotAllowed {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0436\", slug = \"typeck-functional-record-update-on-non-struct\")]\n+#[error(typeck::functional_record_update_on_non_struct, code = \"E0436\")]\n pub struct FunctionalRecordUpdateOnNonStruct {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0516\", slug = \"typeck-typeof-reserved-keyword-used\")]\n+#[error(typeck::typeof_reserved_keyword_used, code = \"E0516\")]\n pub struct TypeofReservedKeywordUsed<'tcx> {\n     pub ty: Ty<'tcx>,\n     #[primary_span]\n@@ -142,52 +142,52 @@ pub struct TypeofReservedKeywordUsed<'tcx> {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0572\", slug = \"typeck-return-stmt-outside-of-fn-body\")]\n+#[error(typeck::return_stmt_outside_of_fn_body, code = \"E0572\")]\n pub struct ReturnStmtOutsideOfFnBody {\n     #[primary_span]\n     pub span: Span,\n-    #[label = \"encl-body-label\"]\n+    #[label(typeck::encl_body_label)]\n     pub encl_body_span: Option<Span>,\n-    #[label = \"encl-fn-label\"]\n+    #[label(typeck::encl_fn_label)]\n     pub encl_fn_span: Option<Span>,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0627\", slug = \"typeck-yield-expr-outside-of-generator\")]\n+#[error(typeck::yield_expr_outside_of_generator, code = \"E0627\")]\n pub struct YieldExprOutsideOfGenerator {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0639\", slug = \"typeck-struct-expr-non-exhaustive\")]\n+#[error(typeck::struct_expr_non_exhaustive, code = \"E0639\")]\n pub struct StructExprNonExhaustive {\n     #[primary_span]\n     pub span: Span,\n     pub what: &'static str,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0699\", slug = \"typeck-method-call-on-unknown-type\")]\n+#[error(typeck::method_call_on_unknown_type, code = \"E0699\")]\n pub struct MethodCallOnUnknownType {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0719\", slug = \"typeck-value-of-associated-struct-already-specified\")]\n+#[error(typeck::value_of_associated_struct_already_specified, code = \"E0719\")]\n pub struct ValueOfAssociatedStructAlreadySpecified {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n-    #[label = \"previous-bound-label\"]\n+    #[label(typeck::previous_bound_label)]\n     pub prev_span: Span,\n     pub item_name: Ident,\n     pub def_path: String,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0745\", slug = \"typeck-address-of-temporary-taken\")]\n+#[error(typeck::address_of_temporary_taken, code = \"E0745\")]\n pub struct AddressOfTemporaryTaken {\n     #[primary_span]\n     #[label]\n@@ -197,7 +197,7 @@ pub struct AddressOfTemporaryTaken {\n #[derive(SessionSubdiagnostic)]\n pub enum AddReturnTypeSuggestion<'tcx> {\n     #[suggestion(\n-        slug = \"typeck-add-return-type-add\",\n+        typeck::add_return_type_add,\n         code = \"-> {found} \",\n         applicability = \"machine-applicable\"\n     )]\n@@ -207,7 +207,7 @@ pub enum AddReturnTypeSuggestion<'tcx> {\n         found: Ty<'tcx>,\n     },\n     #[suggestion(\n-        slug = \"typeck-add-return-type-missing-here\",\n+        typeck::add_return_type_missing_here,\n         code = \"-> _ \",\n         applicability = \"has-placeholders\"\n     )]\n@@ -219,12 +219,12 @@ pub enum AddReturnTypeSuggestion<'tcx> {\n \n #[derive(SessionSubdiagnostic)]\n pub enum ExpectedReturnTypeLabel<'tcx> {\n-    #[label(slug = \"typeck-expected-default-return-type\")]\n+    #[label(typeck::expected_default_return_type)]\n     Unit {\n         #[primary_span]\n         span: Span,\n     },\n-    #[label(slug = \"typeck-expected-return-type\")]\n+    #[label(typeck::expected_return_type)]\n     Other {\n         #[primary_span]\n         span: Span,\n@@ -233,7 +233,7 @@ pub enum ExpectedReturnTypeLabel<'tcx> {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(slug = \"typeck-unconstrained-opaque-type\")]\n+#[error(typeck::unconstrained_opaque_type)]\n #[note]\n pub struct UnconstrainedOpaqueType {\n     #[primary_span]\n@@ -301,7 +301,7 @@ impl<'a> SessionDiagnostic<'a> for MissingTypeParams {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0183\", slug = \"typeck-manual-implementation\")]\n+#[error(typeck::manual_implementation, code = \"E0183\")]\n #[help]\n pub struct ManualImplementation {\n     #[primary_span]\n@@ -311,7 +311,7 @@ pub struct ManualImplementation {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(slug = \"typeck-substs-on-overridden-impl\")]\n+#[error(typeck::substs_on_overridden_impl)]\n pub struct SubstsOnOverriddenImpl {\n     #[primary_span]\n     pub span: Span,"}, {"sha": "e570d831cc6078536820e1e8413ab753b47186dd", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -316,7 +316,6 @@ macro_rules! nonzero_unsigned_operations {\n                 /// # Examples\n                 ///\n                 /// ```\n-                /// #![feature(nonzero_ops)]\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 ///\n                 /// # fn main() { test().unwrap(); }\n@@ -331,7 +330,8 @@ macro_rules! nonzero_unsigned_operations {\n                 /// # Some(())\n                 /// # }\n                 /// ```\n-                #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[stable(feature = \"nonzero_checked_ops\", since = \"1.64.0\")]\n+                #[rustc_const_stable(feature = \"const_nonzero_checked_ops\", since = \"1.64.0\")]\n                 #[must_use = \"this returns the result of the operation, \\\n                               without modifying the original\"]\n                 #[inline]\n@@ -351,7 +351,6 @@ macro_rules! nonzero_unsigned_operations {\n                 /// # Examples\n                 ///\n                 /// ```\n-                /// #![feature(nonzero_ops)]\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 ///\n                 /// # fn main() { test().unwrap(); }\n@@ -366,7 +365,8 @@ macro_rules! nonzero_unsigned_operations {\n                 /// # Some(())\n                 /// # }\n                 /// ```\n-                #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[stable(feature = \"nonzero_checked_ops\", since = \"1.64.0\")]\n+                #[rustc_const_stable(feature = \"const_nonzero_checked_ops\", since = \"1.64.0\")]\n                 #[must_use = \"this returns the result of the operation, \\\n                               without modifying the original\"]\n                 #[inline]\n@@ -415,7 +415,6 @@ macro_rules! nonzero_unsigned_operations {\n                 /// # Examples\n                 ///\n                 /// ```\n-                /// #![feature(nonzero_ops)]\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 ///\n                 /// # fn main() { test().unwrap(); }\n@@ -432,7 +431,8 @@ macro_rules! nonzero_unsigned_operations {\n                 /// # Some(())\n                 /// # }\n                 /// ```\n-                #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[stable(feature = \"nonzero_checked_ops\", since = \"1.64.0\")]\n+                #[rustc_const_stable(feature = \"const_nonzero_checked_ops\", since = \"1.64.0\")]\n                 #[must_use = \"this returns the result of the operation, \\\n                               without modifying the original\"]\n                 #[inline]\n@@ -521,7 +521,6 @@ macro_rules! nonzero_signed_operations {\n                 /// # Example\n                 ///\n                 /// ```\n-                /// #![feature(nonzero_ops)]\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 ///\n                 /// # fn main() { test().unwrap(); }\n@@ -534,7 +533,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # Some(())\n                 /// # }\n                 /// ```\n-                #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[stable(feature = \"nonzero_checked_ops\", since = \"1.64.0\")]\n+                #[rustc_const_stable(feature = \"const_nonzero_checked_ops\", since = \"1.64.0\")]\n                 #[must_use = \"this returns the result of the operation, \\\n                               without modifying the original\"]\n                 #[inline]\n@@ -551,7 +551,6 @@ macro_rules! nonzero_signed_operations {\n                 /// # Example\n                 ///\n                 /// ```\n-                /// #![feature(nonzero_ops)]\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 ///\n                 /// # fn main() { test().unwrap(); }\n@@ -566,7 +565,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # Some(())\n                 /// # }\n                 /// ```\n-                #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[stable(feature = \"nonzero_checked_ops\", since = \"1.64.0\")]\n+                #[rustc_const_stable(feature = \"const_nonzero_checked_ops\", since = \"1.64.0\")]\n                 #[must_use = \"this returns the result of the operation, \\\n                               without modifying the original\"]\n                 #[inline]\n@@ -586,7 +586,6 @@ macro_rules! nonzero_signed_operations {\n                 /// # Example\n                 ///\n                 /// ```\n-                /// #![feature(nonzero_ops)]\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 ///\n                 /// # fn main() { test().unwrap(); }\n@@ -602,7 +601,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # Some(())\n                 /// # }\n                 /// ```\n-                #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[stable(feature = \"nonzero_checked_ops\", since = \"1.64.0\")]\n+                #[rustc_const_stable(feature = \"const_nonzero_checked_ops\", since = \"1.64.0\")]\n                 #[must_use = \"this returns the result of the operation, \\\n                               without modifying the original\"]\n                 #[inline]\n@@ -621,7 +621,6 @@ macro_rules! nonzero_signed_operations {\n                 /// # Example\n                 ///\n                 /// ```\n-                /// #![feature(nonzero_ops)]\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 ///\n                 /// # fn main() { test().unwrap(); }\n@@ -642,7 +641,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # Some(())\n                 /// # }\n                 /// ```\n-                #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[stable(feature = \"nonzero_checked_ops\", since = \"1.64.0\")]\n+                #[rustc_const_stable(feature = \"const_nonzero_checked_ops\", since = \"1.64.0\")]\n                 #[must_use = \"this returns the result of the operation, \\\n                               without modifying the original\"]\n                 #[inline]\n@@ -657,7 +657,6 @@ macro_rules! nonzero_signed_operations {\n                 /// # Example\n                 ///\n                 /// ```\n-                /// #![feature(nonzero_ops)]\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 ///\n                 /// # fn main() { test().unwrap(); }\n@@ -677,7 +676,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # Some(())\n                 /// # }\n                 /// ```\n-                #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[stable(feature = \"nonzero_checked_ops\", since = \"1.64.0\")]\n+                #[rustc_const_stable(feature = \"const_nonzero_checked_ops\", since = \"1.64.0\")]\n                 #[must_use = \"this returns the result of the operation, \\\n                               without modifying the original\"]\n                 #[inline]\n@@ -692,7 +692,6 @@ macro_rules! nonzero_signed_operations {\n                 /// # Example\n                 ///\n                 /// ```\n-                /// #![feature(nonzero_ops)]\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 #[doc = concat!(\"# use std::num::\", stringify!($Uty), \";\")]\n                 ///\n@@ -712,7 +711,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # Some(())\n                 /// # }\n                 /// ```\n-                #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[stable(feature = \"nonzero_checked_ops\", since = \"1.64.0\")]\n+                #[rustc_const_stable(feature = \"const_nonzero_checked_ops\", since = \"1.64.0\")]\n                 #[must_use = \"this returns the result of the operation, \\\n                               without modifying the original\"]\n                 #[inline]\n@@ -746,7 +746,6 @@ macro_rules! nonzero_unsigned_signed_operations {\n                 /// # Examples\n                 ///\n                 /// ```\n-                /// #![feature(nonzero_ops)]\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 ///\n                 /// # fn main() { test().unwrap(); }\n@@ -761,7 +760,8 @@ macro_rules! nonzero_unsigned_signed_operations {\n                 /// # Some(())\n                 /// # }\n                 /// ```\n-                #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[stable(feature = \"nonzero_checked_ops\", since = \"1.64.0\")]\n+                #[rustc_const_stable(feature = \"const_nonzero_checked_ops\", since = \"1.64.0\")]\n                 #[must_use = \"this returns the result of the operation, \\\n                               without modifying the original\"]\n                 #[inline]\n@@ -782,7 +782,6 @@ macro_rules! nonzero_unsigned_signed_operations {\n                 /// # Examples\n                 ///\n                 /// ```\n-                /// #![feature(nonzero_ops)]\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 ///\n                 /// # fn main() { test().unwrap(); }\n@@ -797,7 +796,8 @@ macro_rules! nonzero_unsigned_signed_operations {\n                 /// # Some(())\n                 /// # }\n                 /// ```\n-                #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[stable(feature = \"nonzero_checked_ops\", since = \"1.64.0\")]\n+                #[rustc_const_stable(feature = \"const_nonzero_checked_ops\", since = \"1.64.0\")]\n                 #[must_use = \"this returns the result of the operation, \\\n                               without modifying the original\"]\n                 #[inline]\n@@ -855,7 +855,6 @@ macro_rules! nonzero_unsigned_signed_operations {\n                 /// # Examples\n                 ///\n                 /// ```\n-                /// #![feature(nonzero_ops)]\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 ///\n                 /// # fn main() { test().unwrap(); }\n@@ -870,7 +869,8 @@ macro_rules! nonzero_unsigned_signed_operations {\n                 /// # Some(())\n                 /// # }\n                 /// ```\n-                #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[stable(feature = \"nonzero_checked_ops\", since = \"1.64.0\")]\n+                #[rustc_const_stable(feature = \"const_nonzero_checked_ops\", since = \"1.64.0\")]\n                 #[must_use = \"this returns the result of the operation, \\\n                               without modifying the original\"]\n                 #[inline]\n@@ -899,7 +899,6 @@ macro_rules! nonzero_unsigned_signed_operations {\n                 /// # Examples\n                 ///\n                 /// ```\n-                /// #![feature(nonzero_ops)]\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 ///\n                 /// # fn main() { test().unwrap(); }\n@@ -914,7 +913,8 @@ macro_rules! nonzero_unsigned_signed_operations {\n                 /// # Some(())\n                 /// # }\n                 /// ```\n-                #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[stable(feature = \"nonzero_checked_ops\", since = \"1.64.0\")]\n+                #[rustc_const_stable(feature = \"const_nonzero_checked_ops\", since = \"1.64.0\")]\n                 #[must_use = \"this returns the result of the operation, \\\n                               without modifying the original\"]\n                 #[inline]"}, {"sha": "a05e0db3af71663a3ff7596773e16940b90207dc", "filename": "library/std/src/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/library%2Fstd%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/library%2Fstd%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Falloc.rs?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -102,7 +102,7 @@ pub use alloc_crate::alloc::*;\n ///         if !ret.is_null() {\n ///             ALLOCATED.fetch_add(layout.size(), SeqCst);\n ///         }\n-///         return ret\n+///         ret\n ///     }\n ///\n ///     unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {"}, {"sha": "5eb14bb7e534be11226565e0b243a987bec50588", "filename": "library/std/src/sys/itron/abi.rs", "status": "modified", "additions": 45, "deletions": 3, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fabi.rs?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -30,15 +30,32 @@ pub type ER = int_t;\n /// Error code type, `ID` on success\n pub type ER_ID = int_t;\n \n+/// Service call operational mode\n+pub type MODE = uint_t;\n+\n+/// OR waiting condition for an eventflag\n+pub const TWF_ORW: MODE = 0x01;\n+\n+/// Object attributes\n+pub type ATR = uint_t;\n+\n+/// FIFO wait order\n+pub const TA_FIFO: ATR = 0;\n+/// Only one task is allowed to be in the waiting state for the eventflag\n+pub const TA_WSGL: ATR = 0;\n+/// The eventflag\u2019s bit pattern is cleared when a task is released from the\n+/// waiting state for that eventflag.\n+pub const TA_CLR: ATR = 0x04;\n+\n+/// Bit pattern of an eventflag\n+pub type FLGPTN = uint_t;\n+\n /// Task or interrupt priority\n pub type PRI = int_t;\n \n /// The special value of `PRI` representing the current task's priority.\n pub const TPRI_SELF: PRI = 0;\n \n-/// Object attributes\n-pub type ATR = uint_t;\n-\n /// Use the priority inheritance protocol\n #[cfg(target_os = \"solid_asp3\")]\n pub const TA_INHERIT: ATR = 0x02;\n@@ -90,6 +107,13 @@ pub struct T_CSEM {\n     pub maxsem: uint_t,\n }\n \n+#[derive(Clone, Copy)]\n+#[repr(C)]\n+pub struct T_CFLG {\n+    pub flgatr: ATR,\n+    pub iflgptn: FLGPTN,\n+}\n+\n #[derive(Clone, Copy)]\n #[repr(C)]\n pub struct T_CMTX {\n@@ -139,6 +163,24 @@ extern \"C\" {\n     pub fn sns_dsp() -> bool_t;\n     #[link_name = \"__asp3_get_tim\"]\n     pub fn get_tim(p_systim: *mut SYSTIM) -> ER;\n+    #[link_name = \"__asp3_acre_flg\"]\n+    pub fn acre_flg(pk_cflg: *const T_CFLG) -> ER_ID;\n+    #[link_name = \"__asp3_del_flg\"]\n+    pub fn del_flg(flgid: ID) -> ER;\n+    #[link_name = \"__asp3_set_flg\"]\n+    pub fn set_flg(flgid: ID, setptn: FLGPTN) -> ER;\n+    #[link_name = \"__asp3_clr_flg\"]\n+    pub fn clr_flg(flgid: ID, clrptn: FLGPTN) -> ER;\n+    #[link_name = \"__asp3_wai_flg\"]\n+    pub fn wai_flg(flgid: ID, waiptn: FLGPTN, wfmode: MODE, p_flgptn: *mut FLGPTN) -> ER;\n+    #[link_name = \"__asp3_twai_flg\"]\n+    pub fn twai_flg(\n+        flgid: ID,\n+        waiptn: FLGPTN,\n+        wfmode: MODE,\n+        p_flgptn: *mut FLGPTN,\n+        tmout: TMO,\n+    ) -> ER;\n     #[link_name = \"__asp3_acre_mtx\"]\n     pub fn acre_mtx(pk_cmtx: *const T_CMTX) -> ER_ID;\n     #[link_name = \"__asp3_del_mtx\"]"}, {"sha": "e432edd207754e5151252c136a0946d0821d1a6a", "filename": "library/std/src/sys/itron/wait_flag.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fwait_flag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fwait_flag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fwait_flag.rs?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -0,0 +1,72 @@\n+use crate::mem::MaybeUninit;\n+use crate::time::Duration;\n+\n+use super::{\n+    abi,\n+    error::{expect_success, fail},\n+    time::with_tmos,\n+};\n+\n+const CLEAR: abi::FLGPTN = 0;\n+const RAISED: abi::FLGPTN = 1;\n+\n+/// A thread parking primitive that is not susceptible to race conditions,\n+/// but provides no atomic ordering guarantees and allows only one `raise` per wait.\n+pub struct WaitFlag {\n+    flag: abi::ID,\n+}\n+\n+impl WaitFlag {\n+    /// Creates a new wait flag.\n+    pub fn new() -> WaitFlag {\n+        let flag = expect_success(\n+            unsafe {\n+                abi::acre_flg(&abi::T_CFLG {\n+                    flgatr: abi::TA_FIFO | abi::TA_WSGL | abi::TA_CLR,\n+                    iflgptn: CLEAR,\n+                })\n+            },\n+            &\"acre_flg\",\n+        );\n+\n+        WaitFlag { flag }\n+    }\n+\n+    /// Wait for the wait flag to be raised.\n+    pub fn wait(&self) {\n+        let mut token = MaybeUninit::uninit();\n+        expect_success(\n+            unsafe { abi::wai_flg(self.flag, RAISED, abi::TWF_ORW, token.as_mut_ptr()) },\n+            &\"wai_flg\",\n+        );\n+    }\n+\n+    /// Wait for the wait flag to be raised or the timeout to occur.\n+    ///\n+    /// Returns whether the flag was raised (`true`) or the operation timed out (`false`).\n+    pub fn wait_timeout(&self, dur: Duration) -> bool {\n+        let mut token = MaybeUninit::uninit();\n+        let res = with_tmos(dur, |tmout| unsafe {\n+            abi::twai_flg(self.flag, RAISED, abi::TWF_ORW, token.as_mut_ptr(), tmout)\n+        });\n+\n+        match res {\n+            abi::E_OK => true,\n+            abi::E_TMOUT => false,\n+            error => fail(error, &\"twai_flg\"),\n+        }\n+    }\n+\n+    /// Raise the wait flag.\n+    ///\n+    /// Calls to this function should be balanced with the number of successful waits.\n+    pub fn raise(&self) {\n+        expect_success(unsafe { abi::set_flg(self.flag, RAISED) }, &\"set_flg\");\n+    }\n+}\n+\n+impl Drop for WaitFlag {\n+    fn drop(&mut self) {\n+        expect_success(unsafe { abi::del_flg(self.flag) }, &\"del_flg\");\n+    }\n+}"}, {"sha": "2d21e4764fc210a21ecb23341ab64c5ed4160811", "filename": "library/std/src/sys/solid/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fmod.rs?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -15,6 +15,7 @@ mod itron {\n     pub mod thread;\n     pub(super) mod time;\n     use super::unsupported;\n+    pub mod wait_flag;\n }\n \n pub mod alloc;\n@@ -43,6 +44,7 @@ pub mod memchr;\n pub mod thread_local_dtor;\n pub mod thread_local_key;\n pub mod time;\n+pub use self::itron::wait_flag;\n \n mod rwlock;\n "}, {"sha": "cbd7832eb7a4c8e0a1cc932a3463d6c6d1249da1", "filename": "library/std/src/sys_common/thread_parker/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -10,9 +10,10 @@ cfg_if::cfg_if! {\n     ))] {\n         mod futex;\n         pub use futex::Parker;\n-    } else if #[cfg(windows)] {\n-        pub use crate::sys::thread_parker::Parker;\n-    } else if #[cfg(target_family = \"unix\")] {\n+    } else if #[cfg(target_os = \"solid_asp3\")] {\n+        mod wait_flag;\n+        pub use wait_flag::Parker;\n+    } else if #[cfg(any(windows, target_family = \"unix\"))] {\n         pub use crate::sys::thread_parker::Parker;\n     } else {\n         mod generic;"}, {"sha": "6561c186655a5cbbb61e1f9194394c22b6981211", "filename": "library/std/src/sys_common/thread_parker/wait_flag.rs", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fwait_flag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fwait_flag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fwait_flag.rs?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -0,0 +1,102 @@\n+//! A wait-flag-based thread parker.\n+//!\n+//! Some operating systems provide low-level parking primitives like wait counts,\n+//! event flags or semaphores which are not susceptible to race conditions (meaning\n+//! the wakeup can occur before the wait operation). To implement the `std` thread\n+//! parker on top of these primitives, we only have to ensure that parking is fast\n+//! when the thread token is available, the atomic ordering guarantees are maintained\n+//! and spurious wakeups are minimized.\n+//!\n+//! To achieve this, this parker uses an atomic variable with three states: `EMPTY`,\n+//! `PARKED` and `NOTIFIED`:\n+//! * `EMPTY` means the token has not been made available, but the thread is not\n+//!    currently waiting on it.\n+//! * `PARKED` means the token is not available and the thread is parked.\n+//! * `NOTIFIED` means the token is available.\n+//!\n+//! `park` and `park_timeout` change the state from `EMPTY` to `PARKED` and from\n+//! `NOTIFIED` to `EMPTY`. If the state was `NOTIFIED`, the thread was unparked and\n+//! execution can continue without calling into the OS. If the state was `EMPTY`,\n+//! the token is not available and the thread waits on the primitive (here called\n+//! \"wait flag\").\n+//!\n+//! `unpark` changes the state to `NOTIFIED`. If the state was `PARKED`, the thread\n+//! is or will be sleeping on the wait flag, so we raise it.\n+\n+use crate::pin::Pin;\n+use crate::sync::atomic::AtomicI8;\n+use crate::sync::atomic::Ordering::{Acquire, Relaxed, Release};\n+use crate::sys::wait_flag::WaitFlag;\n+use crate::time::Duration;\n+\n+const EMPTY: i8 = 0;\n+const PARKED: i8 = -1;\n+const NOTIFIED: i8 = 1;\n+\n+pub struct Parker {\n+    state: AtomicI8,\n+    wait_flag: WaitFlag,\n+}\n+\n+impl Parker {\n+    /// Construct a parker for the current thread. The UNIX parker\n+    /// implementation requires this to happen in-place.\n+    pub unsafe fn new(parker: *mut Parker) {\n+        parker.write(Parker { state: AtomicI8::new(EMPTY), wait_flag: WaitFlag::new() })\n+    }\n+\n+    // This implementation doesn't require `unsafe` and `Pin`, but other implementations do.\n+    pub unsafe fn park(self: Pin<&Self>) {\n+        match self.state.fetch_sub(1, Acquire) {\n+            // NOTIFIED => EMPTY\n+            NOTIFIED => return,\n+            // EMPTY => PARKED\n+            EMPTY => (),\n+            _ => panic!(\"inconsistent park state\"),\n+        }\n+\n+        // Avoid waking up from spurious wakeups (these are quite likely, see below).\n+        loop {\n+            self.wait_flag.wait();\n+\n+            match self.state.compare_exchange(NOTIFIED, EMPTY, Acquire, Relaxed) {\n+                Ok(_) => return,\n+                Err(PARKED) => (),\n+                Err(_) => panic!(\"inconsistent park state\"),\n+            }\n+        }\n+    }\n+\n+    // This implementation doesn't require `unsafe` and `Pin`, but other implementations do.\n+    pub unsafe fn park_timeout(self: Pin<&Self>, dur: Duration) {\n+        match self.state.fetch_sub(1, Acquire) {\n+            NOTIFIED => return,\n+            EMPTY => (),\n+            _ => panic!(\"inconsistent park state\"),\n+        }\n+\n+        self.wait_flag.wait_timeout(dur);\n+\n+        // Either a wakeup or a timeout occurred. Wakeups may be spurious, as there can be\n+        // a race condition when `unpark` is performed between receiving the timeout and\n+        // resetting the state, resulting in the eventflag being set unnecessarily. `park`\n+        // is protected against this by looping until the token is actually given, but\n+        // here we cannot easily tell.\n+\n+        // Use `swap` to provide acquire ordering.\n+        match self.state.swap(EMPTY, Acquire) {\n+            NOTIFIED => (),\n+            PARKED => (),\n+            _ => panic!(\"inconsistent park state\"),\n+        }\n+    }\n+\n+    // This implementation doesn't require `Pin`, but other implementations do.\n+    pub fn unpark(self: Pin<&Self>) {\n+        let state = self.state.swap(NOTIFIED, Release);\n+\n+        if state == PARKED {\n+            self.wait_flag.raise();\n+        }\n+    }\n+}"}, {"sha": "8000e60f64d470ecd5c57d9d6b36a1245ccb24d0", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -743,7 +743,7 @@ def bootstrap_binary(self):\n         \"\"\"\n         return os.path.join(self.build_dir, \"bootstrap\", \"debug\", \"bootstrap\")\n \n-    def build_bootstrap(self):\n+    def build_bootstrap(self, color):\n         \"\"\"Build bootstrap\"\"\"\n         print(\"Building rustbuild\")\n         build_dir = os.path.join(self.build_dir, \"bootstrap\")\n@@ -800,6 +800,11 @@ def build_bootstrap(self):\n         if self.get_toml(\"metrics\", \"build\"):\n             args.append(\"--features\")\n             args.append(\"build-metrics\")\n+        if color == \"always\":\n+            args.append(\"--color=always\")\n+        elif color == \"never\":\n+            args.append(\"--color=never\")\n+\n         run(args, env=env, verbose=self.verbose)\n \n     def build_triple(self):\n@@ -862,6 +867,7 @@ def bootstrap(help_triggered):\n     parser = argparse.ArgumentParser(description='Build rust')\n     parser.add_argument('--config')\n     parser.add_argument('--build')\n+    parser.add_argument('--color', choices=['always', 'never', 'auto'])\n     parser.add_argument('--clean', action='store_true')\n     parser.add_argument('-v', '--verbose', action='count', default=0)\n \n@@ -930,7 +936,7 @@ def bootstrap(help_triggered):\n     # Fetch/build the bootstrap\n     build.download_toolchain()\n     sys.stdout.flush()\n-    build.build_bootstrap()\n+    build.build_bootstrap(args.color)\n     sys.stdout.flush()\n \n     # Run the bootstrap"}, {"sha": "5d0756d30fb53e52907844fd9e7980bfe19f660a", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 41, "deletions": 33, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -983,60 +983,69 @@ table,\n \tfont-weight: normal;\n }\n \n-body.blur > :not(#help) {\n-\tfilter: blur(8px);\n-\t-webkit-filter: blur(8px);\n-\topacity: .7;\n+.popover {\n+\tfont-size: 1rem;\n+\tposition: absolute;\n+\tright: 0;\n+\tz-index: 2;\n+\tdisplay: block;\n+\tmargin-top: 7px;\n+\tborder-radius: 3px;\n+\tborder: 1px solid;\n+\tfont-size: 1rem;\n }\n \n-#help {\n-\twidth: 100%;\n-\theight: 100vh;\n-\tposition: fixed;\n-\ttop: 0;\n-\tleft: 0;\n-\tdisplay: flex;\n-\tjustify-content: center;\n-\talign-items: center;\n+/* This rule is to draw the little arrow connecting the settings menu to the gear icon. */\n+.popover::before {\n+\tcontent: '';\n+\tposition: absolute;\n+\tright: 11px;\n+\tborder: solid;\n+\tborder-width: 1px 1px 0 0;\n+\tdisplay: inline-block;\n+\tpadding: 4px;\n+\ttransform: rotate(-45deg);\n+\ttop: -5px;\n }\n-#help > div {\n-\tflex: 0 0 auto;\n-\tbox-shadow: 0 0 6px rgba(0,0,0,.2);\n-\twidth: 550px;\n-\theight: auto;\n-\tborder: 1px solid;\n+\n+#help-button .popover {\n+\tmax-width: 600px;\n }\n-#help dt {\n+\n+#help-button .popover::before {\n+\tright: 48px;\n+}\n+\n+#help-button dt {\n \tfloat: left;\n \tclear: left;\n \tdisplay: block;\n \tmargin-right: 0.5rem;\n }\n-#help span.top, #help span.bottom {\n+#help-button span.top, #help-button span.bottom {\n \ttext-align: center;\n \tdisplay: block;\n \tfont-size: 1.125rem;\n-\n }\n-#help span.top {\n+#help-button span.top {\n \ttext-align: center;\n \tdisplay: block;\n \tmargin: 10px 0;\n \tborder-bottom: 1px solid;\n \tpadding-bottom: 4px;\n \tmargin-bottom: 6px;\n }\n-#help span.bottom {\n+#help-button span.bottom {\n \tclear: both;\n \tborder-top: 1px solid;\n }\n-#help dd { margin: 5px 35px; }\n-#help .infos { padding-left: 0; }\n-#help h1, #help h2 { margin-top: 0; }\n-#help > div div {\n+.side-by-side {\n+\ttext-align: initial;\n+}\n+.side-by-side > div {\n \twidth: 50%;\n \tfloat: left;\n-\tpadding: 0 20px 20px 17px;;\n+\tpadding: 0 20px 20px 17px;\n }\n \n .item-info .stab {\n@@ -1391,7 +1400,7 @@ pre.rust {\n #copy-path {\n \theight: 34px;\n }\n-#settings-menu > a, #help-button, #copy-path {\n+#settings-menu > a, #help-button > button, #copy-path {\n \tpadding: 5px;\n \twidth: 33px;\n \tborder: 1px solid;\n@@ -1401,9 +1410,8 @@ pre.rust {\n #settings-menu {\n \tpadding: 0;\n }\n-#settings-menu > a {\n+#settings-menu > a, #help-button > button {\n \tpadding: 5px;\n-\twidth: 100%;\n \theight: 100%;\n \tdisplay: block;\n }\n@@ -1420,7 +1428,7 @@ pre.rust {\n \tanimation: rotating 2s linear infinite;\n }\n \n-#help-button {\n+#help-button > button {\n \tfont-family: \"Fira Sans\", Arial, sans-serif;\n \ttext-align: center;\n \t/* Rare exception to specifying font sizes in rem. Since this is acting"}, {"sha": "e531e6ce6bbdeee1b6c74cf8690b7777df689ed9", "filename": "src/librustdoc/html/static/css/settings.css", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -86,27 +86,6 @@ input:checked + .slider:before {\n \tdisplay: block;\n }\n \n-div#settings {\n-\tposition: absolute;\n-\tright: 0;\n-\tz-index: 1;\n-\tdisplay: block;\n-\tmargin-top: 7px;\n-\tborder-radius: 3px;\n-\tborder: 1px solid;\n-}\n #settings .setting-line {\n \tmargin: 1.2em 0.6em;\n }\n-/* This rule is to draw the little arrow connecting the settings menu to the gear icon. */\n-div#settings::before {\n-\tcontent: '';\n-\tposition: absolute;\n-\tright: 11px;\n-\tborder: solid;\n-\tborder-width: 1px 1px 0 0;\n-\tdisplay: inline-block;\n-\tpadding: 4px;\n-\ttransform: rotate(-45deg);\n-\ttop: -5px;\n-}"}, {"sha": "b7d0db1f0020f09c291182ee6b4316ff40b743f7", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -5,7 +5,7 @@ Original by Dempfi (https://github.com/dempfi/ayu)\n \n /* General structure and fonts */\n \n-body, #settings-menu #settings, #settings-menu #settings::before {\n+body, .popover, .popover::before {\n \tbackground-color: #0f1419;\n \tcolor: #c5c5c5;\n }\n@@ -567,7 +567,7 @@ kbd {\n \tbox-shadow: inset 0 -1px 0 #5c6773;\n }\n \n-#settings-menu > a, #help-button {\n+#settings-menu > a, #help-button > button {\n \tborder-color: #5c6773;\n \tbackground-color: #0f1419;\n \tcolor: #fff;\n@@ -577,7 +577,8 @@ kbd {\n \tfilter: invert(100);\n }\n \n-#settings-menu #settings, #settings-menu #settings::before {\n+.popover, .popover::before,\n+#help-button span.top, #help-button span.bottom {\n \tborder-color: #5c6773;\n }\n \n@@ -592,7 +593,7 @@ kbd {\n }\n \n #settings-menu > a:hover, #settings-menu > a:focus,\n-#help-button:hover, #help-button:focus {\n+#help-button > button:hover, #help-button > button:focus {\n \tborder-color: #e0e0e0;\n }\n "}, {"sha": "eb64ef3e7710bbdb4a192d321ce1c0dd5d861f4e", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -1,4 +1,4 @@\n-body, #settings-menu #settings, #settings-menu #settings::before {\n+body, .popover, .popover::before {\n \tbackground-color: #353535;\n \tcolor: #ddd;\n }\n@@ -442,18 +442,19 @@ kbd {\n \tbox-shadow: inset 0 -1px 0 #c6cbd1;\n }\n \n-#settings-menu > a, #help-button {\n+#settings-menu > a, #help-button > button {\n \tborder-color: #e0e0e0;\n \tbackground: #f0f0f0;\n \tcolor: #000;\n }\n \n #settings-menu > a:hover, #settings-menu > a:focus,\n-#help-button:hover, #help-button:focus {\n+#help-button > button:hover, #help-button > button:focus {\n \tborder-color: #ffb900;\n }\n \n-#settings-menu #settings, #settings-menu #settings::before {\n+.popover, .popover::before,\n+#help-button span.top, #help-button span.bottom {\n \tborder-color: #d2d2d2;\n }\n "}, {"sha": "00cdf83589716c5a98d48201c7a02a1aebcd690d", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -1,6 +1,6 @@\n /* General structure and fonts */\n \n-body, #settings-menu #settings, #settings-menu #settings::before {\n+body, .popover, .popover::before {\n \tbackground-color: white;\n \tcolor: black;\n }\n@@ -427,17 +427,18 @@ kbd {\n \tbox-shadow: inset 0 -1px 0 #c6cbd1;\n }\n \n-#settings-menu > a, #help-button {\n+#settings-menu > a, #help-button > button {\n \tborder-color: #e0e0e0;\n \tbackground-color: #fff;\n }\n \n #settings-menu > a:hover, #settings-menu > a:focus,\n-#help-button:hover, #help-button:focus {\n+#help-button > button:hover, #help-button > button:focus {\n \tborder-color: #717171;\n }\n \n-#settings-menu #settings, #settings-menu #settings::before {\n+.popover, .popover::before,\n+#help-button span.top, #help-button span.bottom {\n \tborder-color: #DDDDDD;\n }\n "}, {"sha": "70dbfd444254070184ee241350caeaf3ce7b83bb", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 103, "deletions": 74, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -63,6 +63,24 @@ function showMain() {\n     removeClass(document.getElementById(MAIN_ID), \"hidden\");\n }\n \n+function elemIsInParent(elem, parent) {\n+    while (elem && elem !== document.body) {\n+        if (elem === parent) {\n+            return true;\n+        }\n+        elem = elem.parentElement;\n+    }\n+    return false;\n+}\n+\n+function blurHandler(event, parentElem, hideCallback) {\n+    if (!elemIsInParent(document.activeElement, parentElem) &&\n+        !elemIsInParent(event.relatedTarget, parentElem)\n+    ) {\n+        hideCallback();\n+    }\n+}\n+\n (function() {\n     window.rootPath = getVar(\"root-path\");\n     window.currentCrate = getVar(\"current-crate\");\n@@ -104,20 +122,21 @@ const MAIN_ID = \"main-content\";\n const SETTINGS_BUTTON_ID = \"settings-menu\";\n const ALTERNATIVE_DISPLAY_ID = \"alternative-display\";\n const NOT_DISPLAYED_ID = \"not-displayed\";\n+const HELP_BUTTON_ID = \"help-button\";\n \n function getSettingsButton() {\n     return document.getElementById(SETTINGS_BUTTON_ID);\n }\n \n+function getHelpButton() {\n+    return document.getElementById(HELP_BUTTON_ID);\n+}\n+\n // Returns the current URL without any query parameter or hash.\n function getNakedUrl() {\n     return window.location.href.split(\"?\")[0].split(\"#\")[0];\n }\n \n-window.hideSettings = () => {\n-    // Does nothing by default.\n-};\n-\n /**\n  * This function inserts `newNode` after `referenceNode`. It doesn't work if `referenceNode`\n  * doesn't have a parent node.\n@@ -381,55 +400,16 @@ function loadCss(cssFileName) {\n         openParentDetails(document.getElementById(id));\n     }\n \n-    function getHelpElement(build) {\n-        if (build) {\n-            buildHelperPopup();\n-        }\n-        return document.getElementById(\"help\");\n-    }\n-\n-    /**\n-     * Show the help popup.\n-     *\n-     * @param {boolean} display    - Whether to show or hide the popup\n-     * @param {Event}   ev         - The event that triggered this call\n-     * @param {Element} [help]     - The help element if it already exists\n-     */\n-    function displayHelp(display, ev, help) {\n-        if (display) {\n-            help = help ? help : getHelpElement(true);\n-            if (hasClass(help, \"hidden\")) {\n-                ev.preventDefault();\n-                removeClass(help, \"hidden\");\n-                addClass(document.body, \"blur\");\n-            }\n-        } else {\n-            // No need to build the help popup if we want to hide it in case it hasn't been\n-            // built yet...\n-            help = help ? help : getHelpElement(false);\n-            if (help && !hasClass(help, \"hidden\")) {\n-                ev.preventDefault();\n-                addClass(help, \"hidden\");\n-                removeClass(document.body, \"blur\");\n-            }\n-        }\n-    }\n-\n     function handleEscape(ev) {\n         searchState.clearInputTimeout();\n-        const help = getHelpElement(false);\n-        if (help && !hasClass(help, \"hidden\")) {\n-            displayHelp(false, ev, help);\n-        } else {\n-            switchDisplayedElement(null);\n-            if (browserSupportsHistoryApi()) {\n-                history.replaceState(null, window.currentCrate + \" - Rust\",\n-                    getNakedUrl() + window.location.hash);\n-            }\n-            ev.preventDefault();\n+        switchDisplayedElement(null);\n+        if (browserSupportsHistoryApi()) {\n+            history.replaceState(null, window.currentCrate + \" - Rust\",\n+                getNakedUrl() + window.location.hash);\n         }\n+        ev.preventDefault();\n         searchState.defocus();\n-        window.hideSettings();\n+        window.hidePopoverMenus();\n     }\n \n     const disableShortcuts = getSettingValue(\"disable-shortcuts\") === \"true\";\n@@ -453,7 +433,6 @@ function loadCss(cssFileName) {\n \n             case \"s\":\n             case \"S\":\n-                displayHelp(false, ev);\n                 ev.preventDefault();\n                 searchState.focus();\n                 break;\n@@ -465,7 +444,7 @@ function loadCss(cssFileName) {\n                 break;\n \n             case \"?\":\n-                displayHelp(true, ev);\n+                showHelp();\n                 break;\n \n             default:\n@@ -796,9 +775,6 @@ function loadCss(cssFileName) {\n             elem.addEventListener(\"click\", f);\n         }\n     }\n-    handleClick(\"help-button\", ev => {\n-        displayHelp(true, ev);\n-    });\n     handleClick(MAIN_ID, () => {\n         hideSidebar();\n     });\n@@ -842,24 +818,16 @@ function loadCss(cssFileName) {\n         });\n     }\n \n-    let buildHelperPopup = () => {\n-        const popup = document.createElement(\"aside\");\n-        addClass(popup, \"hidden\");\n-        popup.id = \"help\";\n-\n-        popup.addEventListener(\"click\", ev => {\n-            if (ev.target === popup) {\n-                // Clicked the blurred zone outside the help popup; dismiss help.\n-                displayHelp(false, ev);\n-            }\n-        });\n+    function helpBlurHandler(event) {\n+        blurHandler(event, getHelpButton(), window.hidePopoverMenus);\n+    }\n \n+    function buildHelpMenu() {\n         const book_info = document.createElement(\"span\");\n         book_info.className = \"top\";\n         book_info.innerHTML = \"You can find more information in \\\n             <a href=\\\"https://doc.rust-lang.org/rustdoc/\\\">the rustdoc book</a>.\";\n \n-        const container = document.createElement(\"div\");\n         const shortcuts = [\n             [\"?\", \"Show this help dialog\"],\n             [\"S\", \"Focus the search field\"],\n@@ -895,24 +863,85 @@ function loadCss(cssFileName) {\n         addClass(div_infos, \"infos\");\n         div_infos.innerHTML = \"<h2>Search Tricks</h2>\" + infos;\n \n-        container.appendChild(book_info);\n-        container.appendChild(div_shortcuts);\n-        container.appendChild(div_infos);\n-\n         const rustdoc_version = document.createElement(\"span\");\n         rustdoc_version.className = \"bottom\";\n         const rustdoc_version_code = document.createElement(\"code\");\n         rustdoc_version_code.innerText = \"rustdoc \" + getVar(\"rustdoc-version\");\n         rustdoc_version.appendChild(rustdoc_version_code);\n \n+        const container = document.createElement(\"div\");\n+        container.className = \"popover\";\n+        container.style.display = \"none\";\n+\n+        const side_by_side = document.createElement(\"div\");\n+        side_by_side.className = \"side-by-side\";\n+        side_by_side.appendChild(div_shortcuts);\n+        side_by_side.appendChild(div_infos);\n+\n+        container.appendChild(book_info);\n+        container.appendChild(side_by_side);\n         container.appendChild(rustdoc_version);\n \n-        popup.appendChild(container);\n-        insertAfter(popup, document.querySelector(\"main\"));\n-        // So that it's only built once and then it'll do nothing when called!\n-        buildHelperPopup = () => {};\n+        const help_button = getHelpButton();\n+        help_button.appendChild(container);\n+\n+        container.onblur = helpBlurHandler;\n+        container.onclick = event => {\n+            event.preventDefault();\n+        };\n+        help_button.onblur = helpBlurHandler;\n+        help_button.children[0].onblur = helpBlurHandler;\n+\n+        return container;\n+    }\n+\n+    /**\n+     * Hide all the popover menus.\n+     */\n+    window.hidePopoverMenus = function() {\n+        onEachLazy(document.querySelectorAll(\".search-container .popover\"), elem => {\n+            elem.style.display = \"none\";\n+        });\n     };\n \n+    /**\n+     * Returns the help menu element (not the button).\n+     *\n+     * @param {boolean} buildNeeded - If this argument is `false`, the help menu element won't be\n+     *                                built if it doesn't exist.\n+     *\n+     * @return {HTMLElement}\n+     */\n+    function getHelpMenu(buildNeeded) {\n+        let menu = getHelpButton().querySelector(\".popover\");\n+        if (!menu && buildNeeded) {\n+            menu = buildHelpMenu();\n+        }\n+        return menu;\n+    }\n+\n+    /**\n+     * Show the help popup menu.\n+     */\n+    function showHelp() {\n+        const menu = getHelpMenu(true);\n+        if (menu.style.display === \"none\") {\n+            menu.style.display = \"\";\n+        }\n+    }\n+\n+    document.querySelector(`#${HELP_BUTTON_ID} > button`).addEventListener(\"click\", event => {\n+        const target = event.target;\n+        if (target.tagName !== \"BUTTON\" || target.parentElement.id !== HELP_BUTTON_ID) {\n+            return;\n+        }\n+        const menu = getHelpMenu(true);\n+        const shouldShowHelp = menu.style.display === \"none\";\n+        if (shouldShowHelp) {\n+            showHelp();\n+        }\n+    });\n+\n     setMobileTopbar();\n     addSidebarItems();\n     addSidebarCrates();"}, {"sha": "797b931afc643b82d7b5744df52275d5ed9fcff2", "filename": "src/librustdoc/html/static/js/settings.js", "status": "modified", "additions": 12, "deletions": 28, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -1,6 +1,6 @@\n // Local js definitions:\n /* global getSettingValue, getVirtualKey, updateLocalStorage, updateSystemTheme */\n-/* global addClass, removeClass, onEach, onEachLazy */\n+/* global addClass, removeClass, onEach, onEachLazy, blurHandler, elemIsInParent */\n /* global MAIN_ID, getVar, getSettingsButton */\n \n \"use strict\";\n@@ -209,6 +209,7 @@\n         const innerHTML = `<div class=\"settings\">${buildSettingsPageSections(settings)}</div>`;\n         const el = document.createElement(elementKind);\n         el.id = \"settings\";\n+        el.className = \"popover\";\n         el.innerHTML = innerHTML;\n \n         if (isSettingsPage) {\n@@ -226,23 +227,8 @@\n         settingsMenu.style.display = \"\";\n     }\n \n-    function elemIsInParent(elem, parent) {\n-        while (elem && elem !== document.body) {\n-            if (elem === parent) {\n-                return true;\n-            }\n-            elem = elem.parentElement;\n-        }\n-        return false;\n-    }\n-\n-    function blurHandler(event) {\n-        const settingsButton = getSettingsButton();\n-        if (!elemIsInParent(document.activeElement, settingsButton) &&\n-            !elemIsInParent(event.relatedTarget, settingsButton)\n-        ) {\n-            window.hideSettings();\n-        }\n+    function settingsBlurHandler(event) {\n+        blurHandler(event, getSettingsButton(), window.hidePopoverMenus);\n     }\n \n     if (isSettingsPage) {\n@@ -254,26 +240,24 @@\n         // We replace the existing \"onclick\" callback.\n         const settingsButton = getSettingsButton();\n         const settingsMenu = document.getElementById(\"settings\");\n-        window.hideSettings = function() {\n-            settingsMenu.style.display = \"none\";\n-        };\n         settingsButton.onclick = function(event) {\n             if (elemIsInParent(event.target, settingsMenu)) {\n                 return;\n             }\n             event.preventDefault();\n-            if (settingsMenu.style.display !== \"none\") {\n-                window.hideSettings();\n-            } else {\n+            const shouldDisplaySettings = settingsMenu.style.display === \"none\";\n+\n+            window.hidePopoverMenus();\n+            if (shouldDisplaySettings) {\n                 displaySettings();\n             }\n         };\n-        settingsButton.onblur = blurHandler;\n-        settingsButton.querySelector(\"a\").onblur = blurHandler;\n+        settingsButton.onblur = settingsBlurHandler;\n+        settingsButton.querySelector(\"a\").onblur = settingsBlurHandler;\n         onEachLazy(settingsMenu.querySelectorAll(\"input\"), el => {\n-            el.onblur = blurHandler;\n+            el.onblur = settingsBlurHandler;\n         });\n-        settingsMenu.onblur = blurHandler;\n+        settingsMenu.onblur = settingsBlurHandler;\n     }\n \n     // We now wait a bit for the web browser to end re-computing the DOM..."}, {"sha": "dfb3e4e6a2ccd5a93479bb2f3ae6a51a40bf663c", "filename": "src/librustdoc/html/templates/page.html", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -119,7 +119,9 @@ <h2 class=\"location\"></h2>\n                                 spellcheck=\"false\" {# -#}\n                                 placeholder=\"Click or press \u2018S\u2019 to search, \u2018?\u2019 for more options\u2026\" {# -#}\n                                 type=\"search\"> {#- -#}\n-                            <button type=\"button\" id=\"help-button\" title=\"help\">?</button> {#- -#}\n+                            <div id=\"help-button\" title=\"help\" tabindex=\"-1\"> {#- -#}\n+                                <button type=\"button\">?</button> {#- -#}\n+                            </div> {#- -#}\n                             <div id=\"settings-menu\" tabindex=\"-1\">\n                                 <a href=\"{{page.root_path|safe}}settings.html\" title=\"settings\"> {#- -#}\n                                     <img width=\"22\" height=\"22\" alt=\"Change settings\" {# -#}"}, {"sha": "d083b0ae0c9319e8af6b6fb746eb8638b778f572", "filename": "src/test/rustdoc-gui/escape-key.goml", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Frustdoc-gui%2Fescape-key.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Frustdoc-gui%2Fescape-key.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fescape-key.goml?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -21,25 +21,13 @@ wait-for: \"#alternative-display #search\"\n assert-attribute: (\"#main-content\", {\"class\": \"content hidden\"})\n assert-document-property: ({\"URL\": \"index.html?search=test\"}, ENDS_WITH)\n \n-// Now let's check that when the help popup is displayed and we press Escape, it doesn't\n-// hide the search results too.\n-click: \"#help-button\"\n-assert-document-property: ({\"URL\": \"index.html?search=test\"}, [ENDS_WITH])\n-assert-attribute: (\"#help\", {\"class\": \"\"})\n-press-key: \"Escape\"\n-wait-for: \"#alternative-display #search\"\n-assert-attribute: (\"#help\", {\"class\": \"hidden\"})\n-assert-attribute: (\"#main-content\", {\"class\": \"content hidden\"})\n-assert-document-property: ({\"URL\": \"index.html?search=test\"}, [ENDS_WITH])\n-\n // Check that Escape hides the search results when a search result is focused.\n focus: \".search-input\"\n assert: \".search-input:focus\"\n press-key: \"ArrowDown\"\n assert-false: \".search-input:focus\"\n assert: \"#results a:focus\"\n press-key: \"Escape\"\n-assert-attribute: (\"#help\", {\"class\": \"hidden\"})\n wait-for: \"#not-displayed #search\"\n assert-false: \"#alternative-display #search\"\n assert-attribute: (\"#main-content\", {\"class\": \"content\"})"}, {"sha": "ba2986e969a3506d0adf8601fa8b31cd736a6b29", "filename": "src/test/rustdoc-gui/pocket-menu.goml", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Frustdoc-gui%2Fpocket-menu.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Frustdoc-gui%2Fpocket-menu.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fpocket-menu.goml?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -0,0 +1,72 @@\n+// This test ensures that the \"pocket menus\" are working as expected.\n+goto: file://|DOC_PATH|/test_docs/index.html\n+// First we check that the help menu doesn't exist yet.\n+assert-false: \"#help-button .popover\"\n+// Then we display the help menu.\n+click: \"#help-button\"\n+assert: \"#help-button .popover\"\n+assert-css: (\"#help-button .popover\", {\"display\": \"block\"})\n+\n+// Now we click somewhere else on the page to ensure it is handling the blur event\n+// correctly.\n+click: \".sidebar\"\n+assert-css: (\"#help-button .popover\", {\"display\": \"none\"})\n+\n+// Now we will check that we cannot have two \"pocket menus\" displayed at the same time.\n+click: \"#help-button\"\n+assert-css: (\"#help-button .popover\", {\"display\": \"block\"})\n+click: \"#settings-menu\"\n+assert-css: (\"#help-button .popover\", {\"display\": \"none\"})\n+assert-css: (\"#settings-menu .popover\", {\"display\": \"block\"})\n+\n+// Now the other way.\n+click: \"#help-button\"\n+assert-css: (\"#help-button .popover\", {\"display\": \"block\"})\n+assert-css: (\"#settings-menu .popover\", {\"display\": \"none\"})\n+\n+// We check the borders color now:\n+\n+// Ayu theme\n+local-storage: {\n+    \"rustdoc-theme\": \"ayu\",\n+    \"rustdoc-use-system-theme\": \"false\",\n+}\n+reload:\n+\n+click: \"#help-button\"\n+assert-css: (\n+    \"#help-button .popover\",\n+    {\"display\": \"block\", \"border-color\": \"rgb(92, 103, 115)\"},\n+)\n+compare-elements-css: (\"#help-button .popover\", \"#help-button .top\", [\"border-color\"])\n+compare-elements-css: (\"#help-button .popover\", \"#help-button .bottom\", [\"border-color\"])\n+\n+// Dark theme\n+local-storage: {\n+    \"rustdoc-theme\": \"dark\",\n+    \"rustdoc-use-system-theme\": \"false\",\n+}\n+reload:\n+\n+click: \"#help-button\"\n+assert-css: (\n+    \"#help-button .popover\",\n+    {\"display\": \"block\", \"border-color\": \"rgb(210, 210, 210)\"},\n+)\n+compare-elements-css: (\"#help-button .popover\", \"#help-button .top\", [\"border-color\"])\n+compare-elements-css: (\"#help-button .popover\", \"#help-button .bottom\", [\"border-color\"])\n+\n+// Light theme\n+local-storage: {\n+    \"rustdoc-theme\": \"light\",\n+    \"rustdoc-use-system-theme\": \"false\",\n+}\n+reload:\n+\n+click: \"#help-button\"\n+assert-css: (\n+    \"#help-button .popover\",\n+    {\"display\": \"block\", \"border-color\": \"rgb(221, 221, 221)\"},\n+)\n+compare-elements-css: (\"#help-button .popover\", \"#help-button .top\", [\"border-color\"])\n+compare-elements-css: (\"#help-button .popover\", \"#help-button .bottom\", [\"border-color\"])"}, {"sha": "1f20a0eaa9982d21630b0fcad056e01356bacabf", "filename": "src/test/rustdoc-gui/shortcuts.goml", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Frustdoc-gui%2Fshortcuts.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Frustdoc-gui%2Fshortcuts.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fshortcuts.goml?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -8,7 +8,6 @@ press-key: \"Escape\"\n assert-false: \"input.search-input:focus\"\n // We now check for the help popup.\n press-key: \"?\"\n-assert-css: (\"#help\", {\"display\": \"flex\"})\n-assert-false: \"#help.hidden\"\n+assert-css: (\"#help-button .popover\", {\"display\": \"block\"})\n press-key: \"Escape\"\n-assert-css: (\"#help.hidden\", {\"display\": \"none\"})\n+assert-css: (\"#help-button .popover\", {\"display\": \"none\"})"}, {"sha": "6ff591639754620ceb10a73e9e4cf78c72893b56", "filename": "src/test/rustdoc/generic_const_exprs.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Frustdoc%2Fgeneric_const_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Frustdoc%2Fgeneric_const_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fgeneric_const_exprs.rs?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -0,0 +1,24 @@\n+// Regression test for <https://github.com/rust-lang/rust/issues/92859>.\n+\n+#![allow(incomplete_features)]\n+#![feature(generic_const_exprs)]\n+\n+#![crate_name = \"foo\"]\n+\n+// @has 'foo/trait.Foo.html'\n+\n+pub trait Foo: Sized {\n+    const WIDTH: usize;\n+\n+    fn arrayify(self) -> [Self; Self::WIDTH];\n+}\n+\n+impl<T: Sized> Foo for T {\n+    const WIDTH: usize = 1;\n+\n+    // @has - '//*[@id=\"tymethod.arrayify\"]/*[@class=\"code-header\"]' \\\n+    // 'fn arrayify(self) -> [Self; Self::WIDTH]'\n+    fn arrayify(self) -> [Self; Self::WIDTH] {\n+        [self]\n+    }\n+}"}, {"sha": "d6f63d44ba6a87d7398205dfc51773f32dd6c826", "filename": "src/test/ui-fulldeps/internal-lints/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -16,14 +16,14 @@ use rustc_session::{parse::ParseSess, SessionDiagnostic};\n use rustc_span::Span;\n \n #[derive(SessionDiagnostic)]\n-#[error(slug = \"parser-expect-path\")]\n+#[error(parser::expect_path)]\n struct DeriveSessionDiagnostic {\n     #[primary_span]\n     span: Span,\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[note(slug = \"note\")]\n+#[note(parser::add_paren)]\n struct Note {\n     #[primary_span]\n     span: Span,"}, {"sha": "7bec1897fa53e56fd637ba4e8d9682dcb515d4d6", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 137, "deletions": 104, "changes": 241, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -26,29 +26,29 @@ use rustc_errors::Applicability;\n extern crate rustc_session;\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"hello-world\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct Hello {}\n \n #[derive(SessionDiagnostic)]\n-#[warning(code = \"E0123\", slug = \"hello-world\")]\n+#[warning(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct HelloWarn {}\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n //~^ ERROR `#[derive(SessionDiagnostic)]` can only be used on structs\n enum SessionDiagnosticOnEnum {\n     Foo,\n     Bar,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n #[error = \"E0123\"]\n //~^ ERROR `#[error = ...]` is not a valid attribute\n struct WrongStructAttrStyle {}\n \n #[derive(SessionDiagnostic)]\n-#[nonsense(code = \"E0123\", slug = \"foo\")]\n+#[nonsense(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n //~^ ERROR `#[nonsense(...)]` is not a valid attribute\n //~^^ ERROR diagnostic kind not specified\n //~^^^ ERROR cannot find attribute `nonsense` in this scope\n@@ -57,84 +57,93 @@ struct InvalidStructAttr {}\n #[derive(SessionDiagnostic)]\n #[error(\"E0123\")]\n //~^ ERROR `#[error(\"...\")]` is not a valid attribute\n-//~^^ ERROR `slug` not specified\n+//~^^ ERROR diagnostic slug not specified\n struct InvalidLitNestedAttr {}\n \n #[derive(SessionDiagnostic)]\n-#[error(nonsense, code = \"E0123\", slug = \"foo\")]\n-//~^ ERROR `#[error(nonsense)]` is not a valid attribute\n+#[error(nonsense, code = \"E0123\")]\n+//~^ ERROR cannot find value `nonsense` in module `rustc_errors::fluent`\n struct InvalidNestedStructAttr {}\n \n #[derive(SessionDiagnostic)]\n #[error(nonsense(\"foo\"), code = \"E0123\", slug = \"foo\")]\n //~^ ERROR `#[error(nonsense(...))]` is not a valid attribute\n+//~^^ ERROR diagnostic slug not specified\n struct InvalidNestedStructAttr1 {}\n \n #[derive(SessionDiagnostic)]\n #[error(nonsense = \"...\", code = \"E0123\", slug = \"foo\")]\n //~^ ERROR `#[error(nonsense = ...)]` is not a valid attribute\n+//~^^ ERROR diagnostic slug not specified\n struct InvalidNestedStructAttr2 {}\n \n #[derive(SessionDiagnostic)]\n #[error(nonsense = 4, code = \"E0123\", slug = \"foo\")]\n //~^ ERROR `#[error(nonsense = ...)]` is not a valid attribute\n+//~^^ ERROR diagnostic slug not specified\n struct InvalidNestedStructAttr3 {}\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\", slug = \"foo\")]\n+//~^ ERROR `#[error(slug = ...)]` is not a valid attribute\n+struct InvalidNestedStructAttr4 {}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct WrongPlaceField {\n     #[suggestion = \"bar\"]\n     //~^ ERROR `#[suggestion = ...]` is not a valid attribute\n     sp: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n-#[error(code = \"E0456\", slug = \"bar\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n //~^ ERROR specified multiple times\n //~^^ ERROR specified multiple times\n //~^^^ ERROR specified multiple times\n struct ErrorSpecifiedTwice {}\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n-#[warning(code = \"E0293\", slug = \"bar\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[warning(typeck::ambiguous_lifetime_bound, code = \"E0293\")]\n //~^ ERROR specified multiple times\n //~^^ ERROR specified multiple times\n //~^^^ ERROR specified multiple times\n struct WarnSpecifiedAfterError {}\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0456\", code = \"E0457\", slug = \"bar\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0456\", code = \"E0457\")]\n //~^ ERROR specified multiple times\n struct CodeSpecifiedTwice {}\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0456\", slug = \"foo\", slug = \"bar\")]\n-//~^ ERROR specified multiple times\n+#[error(typeck::ambiguous_lifetime_bound, typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n+//~^ ERROR `#[error(typeck::ambiguous_lifetime_bound)]` is not a valid attribute\n struct SlugSpecifiedTwice {}\n \n #[derive(SessionDiagnostic)]\n struct KindNotProvided {} //~ ERROR diagnostic kind not specified\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0456\")] //~ ERROR `slug` not specified\n+#[error(code = \"E0456\")]\n+//~^ ERROR diagnostic slug not specified\n struct SlugNotProvided {}\n \n #[derive(SessionDiagnostic)]\n-#[error(slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound)]\n struct CodeNotProvided {}\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct MessageWrongType {\n     #[primary_span]\n     //~^ ERROR `#[primary_span]` attribute can only be applied to fields of type `Span`\n     foo: String,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct InvalidPathFieldAttr {\n     #[nonsense]\n     //~^ ERROR `#[nonsense]` is not a valid attribute\n@@ -143,183 +152,183 @@ struct InvalidPathFieldAttr {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithField {\n     name: String,\n-    #[label = \"bar\"]\n+    #[label(typeck::label)]\n     span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithMessageAppliedToField {\n-    #[label = \"bar\"]\n-    //~^ ERROR the `#[label = ...]` attribute can only be applied to fields of type `Span`\n+    #[label(typeck::label)]\n+    //~^ ERROR the `#[label(...)]` attribute can only be applied to fields of type `Span`\n     name: String,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithNonexistentField {\n-    #[suggestion(message = \"bar\", code = \"{name}\")]\n+    #[suggestion(typeck::suggestion, code = \"{name}\")]\n     //~^ ERROR `name` doesn't refer to a field on this type\n     suggestion: (Span, Applicability),\n }\n \n #[derive(SessionDiagnostic)]\n //~^ ERROR invalid format string: expected `'}'`\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorMissingClosingBrace {\n-    #[suggestion(message = \"bar\", code = \"{name\")]\n+    #[suggestion(typeck::suggestion, code = \"{name\")]\n     suggestion: (Span, Applicability),\n     name: String,\n     val: usize,\n }\n \n #[derive(SessionDiagnostic)]\n //~^ ERROR invalid format string: unmatched `}`\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorMissingOpeningBrace {\n-    #[suggestion(message = \"bar\", code = \"name}\")]\n+    #[suggestion(typeck::suggestion, code = \"name}\")]\n     suggestion: (Span, Applicability),\n     name: String,\n     val: usize,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct LabelOnSpan {\n-    #[label = \"bar\"]\n+    #[label(typeck::label)]\n     sp: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct LabelOnNonSpan {\n-    #[label = \"bar\"]\n-    //~^ ERROR the `#[label = ...]` attribute can only be applied to fields of type `Span`\n+    #[label(typeck::label)]\n+    //~^ ERROR the `#[label(...)]` attribute can only be applied to fields of type `Span`\n     id: u32,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct Suggest {\n-    #[suggestion(message = \"bar\", code = \"This is the suggested code\")]\n-    #[suggestion_short(message = \"qux\", code = \"This is the suggested code\")]\n-    #[suggestion_hidden(message = \"foobar\", code = \"This is the suggested code\")]\n-    #[suggestion_verbose(message = \"fooqux\", code = \"This is the suggested code\")]\n+    #[suggestion(typeck::suggestion, code = \"This is the suggested code\")]\n+    #[suggestion_short(typeck::suggestion, code = \"This is the suggested code\")]\n+    #[suggestion_hidden(typeck::suggestion, code = \"This is the suggested code\")]\n+    #[suggestion_verbose(typeck::suggestion, code = \"This is the suggested code\")]\n     suggestion: (Span, Applicability),\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithoutCode {\n-    #[suggestion(message = \"bar\")]\n+    #[suggestion(typeck::suggestion)]\n     suggestion: (Span, Applicability),\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithBadKey {\n     #[suggestion(nonsense = \"bar\")]\n     //~^ ERROR `#[suggestion(nonsense = ...)]` is not a valid attribute\n     suggestion: (Span, Applicability),\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithShorthandMsg {\n     #[suggestion(msg = \"bar\")]\n     //~^ ERROR `#[suggestion(msg = ...)]` is not a valid attribute\n     suggestion: (Span, Applicability),\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithoutMsg {\n     #[suggestion(code = \"bar\")]\n     suggestion: (Span, Applicability),\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithTypesSwapped {\n-    #[suggestion(message = \"bar\", code = \"This is suggested code\")]\n+    #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n     suggestion: (Applicability, Span),\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithWrongTypeApplicabilityOnly {\n-    #[suggestion(message = \"bar\", code = \"This is suggested code\")]\n+    #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n     //~^ ERROR wrong field type for suggestion\n     suggestion: Applicability,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithSpanOnly {\n-    #[suggestion(message = \"bar\", code = \"This is suggested code\")]\n+    #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n     suggestion: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithDuplicateSpanAndApplicability {\n-    #[suggestion(message = \"bar\", code = \"This is suggested code\")]\n+    #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n     //~^ ERROR type of field annotated with `#[suggestion(...)]` contains more than one `Span`\n     suggestion: (Span, Span, Applicability),\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithDuplicateApplicabilityAndSpan {\n-    #[suggestion(message = \"bar\", code = \"This is suggested code\")]\n+    #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n     //~^ ERROR type of field annotated with `#[suggestion(...)]` contains more than one\n     suggestion: (Applicability, Applicability, Span),\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct WrongKindOfAnnotation {\n-    #[label(\"bar\")]\n-    //~^ ERROR `#[label(...)]` is not a valid attribute\n+    #[label = \"bar\"]\n+    //~^ ERROR `#[label = ...]` is not a valid attribute\n     z: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct OptionsInErrors {\n-    #[label = \"bar\"]\n+    #[label(typeck::label)]\n     label: Option<Span>,\n-    #[suggestion(message = \"bar\")]\n+    #[suggestion(typeck::suggestion)]\n     opt_sugg: Option<(Span, Applicability)>,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0456\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n struct MoveOutOfBorrowError<'tcx> {\n     name: Ident,\n     ty: Ty<'tcx>,\n     #[primary_span]\n-    #[label = \"bar\"]\n+    #[label(typeck::label)]\n     span: Span,\n-    #[label = \"qux\"]\n+    #[label(typeck::label)]\n     other_span: Span,\n-    #[suggestion(message = \"bar\", code = \"{name}.clone()\")]\n+    #[suggestion(typeck::suggestion, code = \"{name}.clone()\")]\n     opt_sugg: Option<(Span, Applicability)>,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithLifetime<'a> {\n-    #[label = \"bar\"]\n+    #[label(typeck::label)]\n     span: Span,\n     name: &'a str,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithDefaultLabelAttr<'a> {\n     #[label]\n     span: Span,\n@@ -328,15 +337,15 @@ struct ErrorWithDefaultLabelAttr<'a> {\n \n #[derive(SessionDiagnostic)]\n //~^ ERROR the trait bound `Hello: IntoDiagnosticArg` is not satisfied\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ArgFieldWithoutSkip {\n     #[primary_span]\n     span: Span,\n     other: Hello,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ArgFieldWithSkip {\n     #[primary_span]\n     span: Span,\n@@ -347,156 +356,180 @@ struct ArgFieldWithSkip {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithSpannedNote {\n     #[note]\n     span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithSpannedNoteCustom {\n-    #[note = \"bar\"]\n+    #[note(typeck::note)]\n     span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n #[note]\n struct ErrorWithNote {\n     val: String,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n-#[note = \"bar\"]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[note(typeck::note)]\n struct ErrorWithNoteCustom {\n     val: String,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithSpannedHelp {\n     #[help]\n     span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithSpannedHelpCustom {\n-    #[help = \"bar\"]\n+    #[help(typeck::help)]\n     span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n #[help]\n struct ErrorWithHelp {\n     val: String,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n-#[help = \"bar\"]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[help(typeck::help)]\n struct ErrorWithHelpCustom {\n     val: String,\n }\n \n #[derive(SessionDiagnostic)]\n #[help]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithHelpWrongOrder {\n     val: String,\n }\n \n #[derive(SessionDiagnostic)]\n-#[help = \"bar\"]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[help(typeck::help)]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithHelpCustomWrongOrder {\n     val: String,\n }\n \n #[derive(SessionDiagnostic)]\n #[note]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithNoteWrongOrder {\n     val: String,\n }\n \n #[derive(SessionDiagnostic)]\n-#[note = \"bar\"]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[note(typeck::note)]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithNoteCustomWrongOrder {\n     val: String,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ApplicabilityInBoth {\n-    #[suggestion(message = \"bar\", code = \"...\", applicability = \"maybe-incorrect\")]\n+    #[suggestion(typeck::suggestion, code = \"...\", applicability = \"maybe-incorrect\")]\n     //~^ ERROR applicability cannot be set in both the field and attribute\n     suggestion: (Span, Applicability),\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct InvalidApplicability {\n-    #[suggestion(message = \"bar\", code = \"...\", applicability = \"batman\")]\n+    #[suggestion(typeck::suggestion, code = \"...\", applicability = \"batman\")]\n     //~^ ERROR invalid applicability\n     suggestion: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ValidApplicability {\n-    #[suggestion(message = \"bar\", code = \"...\", applicability = \"maybe-incorrect\")]\n+    #[suggestion(typeck::suggestion, code = \"...\", applicability = \"maybe-incorrect\")]\n     suggestion: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct NoApplicability {\n-    #[suggestion(message = \"bar\", code = \"...\")]\n+    #[suggestion(typeck::suggestion, code = \"...\")]\n     suggestion: Span,\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[note(slug = \"note\")]\n+#[note(parser::add_paren)]\n struct Note;\n \n #[derive(SessionDiagnostic)]\n-#[error(slug = \"subdiagnostic\")]\n+#[error(typeck::ambiguous_lifetime_bound)]\n struct Subdiagnostic {\n     #[subdiagnostic]\n     note: Note,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct VecField {\n     #[primary_span]\n     #[label]\n     spans: Vec<Span>,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct UnitField {\n     #[primary_span]\n     spans: Span,\n     #[help]\n     foo: (),\n-    #[help = \"a\"]\n+    #[help(typeck::help)]\n     bar: (),\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct OptUnitField {\n     #[primary_span]\n     spans: Span,\n     #[help]\n     foo: Option<()>,\n-    #[help = \"a\"]\n+    #[help(typeck::help)]\n     bar: Option<()>,\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+struct LabelWithTrailingPath {\n+    #[label(typeck::label, foo)]\n+    //~^ ERROR `#[label(...)]` is not a valid attribute\n+    span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+struct LabelWithTrailingNameValue {\n+    #[label(typeck::label, foo = \"...\")]\n+    //~^ ERROR `#[label(...)]` is not a valid attribute\n+    span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+struct LabelWithTrailingList {\n+    #[label(typeck::label, foo(\"...\"))]\n+    //~^ ERROR `#[label(...)]` is not a valid attribute\n+    span: Span,\n+}"}, {"sha": "0d9690e1f5a998437943d7715c784956bd8fa2f0", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 172, "deletions": 115, "changes": 287, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -1,7 +1,7 @@\n error: `#[derive(SessionDiagnostic)]` can only be used on structs\n   --> $DIR/diagnostic-derive.rs:37:1\n    |\n-LL | / #[error(code = \"E0123\", slug = \"foo\")]\n+LL | / #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n LL | |\n LL | | enum SessionDiagnosticOnEnum {\n LL | |     Foo,\n@@ -18,15 +18,15 @@ LL | #[error = \"E0123\"]\n error: `#[nonsense(...)]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:51:1\n    |\n-LL | #[nonsense(code = \"E0123\", slug = \"foo\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[nonsense(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: only `error` and `warning` are valid attributes\n+   = help: only `error`, `warning`, `help` and `note` are valid attributes\n \n error: diagnostic kind not specified\n   --> $DIR/diagnostic-derive.rs:51:1\n    |\n-LL | / #[nonsense(code = \"E0123\", slug = \"foo\")]\n+LL | / #[nonsense(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n LL | |\n LL | |\n LL | |\n@@ -40,8 +40,10 @@ error: `#[error(\"...\")]` is not a valid attribute\n    |\n LL | #[error(\"E0123\")]\n    |         ^^^^^^^\n+   |\n+   = help: first argument of the attribute should be the diagnostic slug\n \n-error: `slug` not specified\n+error: diagnostic slug not specified\n   --> $DIR/diagnostic-derive.rs:58:1\n    |\n LL | / #[error(\"E0123\")]\n@@ -50,183 +52,215 @@ LL | |\n LL | | struct InvalidLitNestedAttr {}\n    | |______________________________^\n    |\n-   = help: use the `#[error(slug = \"...\")]` attribute to set this diagnostic's slug\n-\n-error: `#[error(nonsense)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:64:9\n-   |\n-LL | #[error(nonsense, code = \"E0123\", slug = \"foo\")]\n-   |         ^^^^^^^^\n+   = help: specify the slug as the first argument to the attribute, such as `#[error(typeck::example_error)]`\n \n error: `#[error(nonsense(...))]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:69:9\n    |\n LL | #[error(nonsense(\"foo\"), code = \"E0123\", slug = \"foo\")]\n    |         ^^^^^^^^^^^^^^^\n+   |\n+   = help: first argument of the attribute should be the diagnostic slug\n+\n+error: diagnostic slug not specified\n+  --> $DIR/diagnostic-derive.rs:69:1\n+   |\n+LL | / #[error(nonsense(\"foo\"), code = \"E0123\", slug = \"foo\")]\n+LL | |\n+LL | |\n+LL | | struct InvalidNestedStructAttr1 {}\n+   | |__________________________________^\n+   |\n+   = help: specify the slug as the first argument to the attribute, such as `#[error(typeck::example_error)]`\n \n error: `#[error(nonsense = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:74:9\n+  --> $DIR/diagnostic-derive.rs:75:9\n    |\n LL | #[error(nonsense = \"...\", code = \"E0123\", slug = \"foo\")]\n    |         ^^^^^^^^^^^^^^^^\n    |\n-   = help: only `slug` and `code` are valid nested attributes\n+   = help: first argument of the attribute should be the diagnostic slug\n+\n+error: diagnostic slug not specified\n+  --> $DIR/diagnostic-derive.rs:75:1\n+   |\n+LL | / #[error(nonsense = \"...\", code = \"E0123\", slug = \"foo\")]\n+LL | |\n+LL | |\n+LL | | struct InvalidNestedStructAttr2 {}\n+   | |__________________________________^\n+   |\n+   = help: specify the slug as the first argument to the attribute, such as `#[error(typeck::example_error)]`\n \n error: `#[error(nonsense = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:79:9\n+  --> $DIR/diagnostic-derive.rs:81:9\n    |\n LL | #[error(nonsense = 4, code = \"E0123\", slug = \"foo\")]\n    |         ^^^^^^^^^^^^\n+   |\n+   = help: first argument of the attribute should be the diagnostic slug\n \n-error: `#[suggestion = ...]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:86:5\n+error: diagnostic slug not specified\n+  --> $DIR/diagnostic-derive.rs:81:1\n    |\n-LL |     #[suggestion = \"bar\"]\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+LL | / #[error(nonsense = 4, code = \"E0123\", slug = \"foo\")]\n+LL | |\n+LL | |\n+LL | | struct InvalidNestedStructAttr3 {}\n+   | |__________________________________^\n    |\n-   = help: only `label`, `note` and `help` are valid field attributes\n+   = help: specify the slug as the first argument to the attribute, such as `#[error(typeck::example_error)]`\n \n-error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:93:1\n+error: `#[error(slug = ...)]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:87:59\n    |\n-LL | #[error(code = \"E0456\", slug = \"bar\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\", slug = \"foo\")]\n+   |                                                           ^^^^^^^^^^^^\n    |\n-note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:92:1\n+   = help: only `code` is a valid nested attributes following the slug\n+\n+error: `#[suggestion = ...]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:94:5\n    |\n-LL | #[error(code = \"E0123\", slug = \"foo\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[suggestion = \"bar\"]\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:93:16\n+  --> $DIR/diagnostic-derive.rs:101:1\n    |\n-LL | #[error(code = \"E0456\", slug = \"bar\")]\n-   |                ^^^^^^^\n+LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:92:16\n+  --> $DIR/diagnostic-derive.rs:100:1\n    |\n-LL | #[error(code = \"E0123\", slug = \"foo\")]\n-   |                ^^^^^^^\n+LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:93:32\n+  --> $DIR/diagnostic-derive.rs:101:1\n    |\n-LL | #[error(code = \"E0456\", slug = \"bar\")]\n-   |                                ^^^^^\n+LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:92:32\n+  --> $DIR/diagnostic-derive.rs:100:1\n    |\n-LL | #[error(code = \"E0123\", slug = \"foo\")]\n-   |                                ^^^^^\n+LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:101:1\n+  --> $DIR/diagnostic-derive.rs:101:50\n    |\n-LL | #[warning(code = \"E0293\", slug = \"bar\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n+   |                                                  ^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:100:1\n+  --> $DIR/diagnostic-derive.rs:100:50\n    |\n-LL | #[error(code = \"E0123\", slug = \"foo\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+   |                                                  ^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:101:18\n+  --> $DIR/diagnostic-derive.rs:109:1\n    |\n-LL | #[warning(code = \"E0293\", slug = \"bar\")]\n-   |                  ^^^^^^^\n+LL | #[warning(typeck::ambiguous_lifetime_bound, code = \"E0293\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:100:16\n+  --> $DIR/diagnostic-derive.rs:108:1\n    |\n-LL | #[error(code = \"E0123\", slug = \"foo\")]\n-   |                ^^^^^^^\n+LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:101:34\n+  --> $DIR/diagnostic-derive.rs:109:1\n    |\n-LL | #[warning(code = \"E0293\", slug = \"bar\")]\n-   |                                  ^^^^^\n+LL | #[warning(typeck::ambiguous_lifetime_bound, code = \"E0293\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:100:32\n+  --> $DIR/diagnostic-derive.rs:108:1\n    |\n-LL | #[error(code = \"E0123\", slug = \"foo\")]\n-   |                                ^^^^^\n+LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:108:32\n+  --> $DIR/diagnostic-derive.rs:109:52\n    |\n-LL | #[error(code = \"E0456\", code = \"E0457\", slug = \"bar\")]\n-   |                                ^^^^^^^\n+LL | #[warning(typeck::ambiguous_lifetime_bound, code = \"E0293\")]\n+   |                                                    ^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:108:16\n+  --> $DIR/diagnostic-derive.rs:108:50\n    |\n-LL | #[error(code = \"E0456\", code = \"E0457\", slug = \"bar\")]\n-   |                ^^^^^^^\n+LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+   |                                                  ^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:113:46\n+  --> $DIR/diagnostic-derive.rs:116:66\n    |\n-LL | #[error(code = \"E0456\", slug = \"foo\", slug = \"bar\")]\n-   |                                              ^^^^^\n+LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0456\", code = \"E0457\")]\n+   |                                                                  ^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:113:32\n+  --> $DIR/diagnostic-derive.rs:116:50\n    |\n-LL | #[error(code = \"E0456\", slug = \"foo\", slug = \"bar\")]\n-   |                                ^^^^^\n+LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0456\", code = \"E0457\")]\n+   |                                                  ^^^^^^^\n+\n+error: `#[error(typeck::ambiguous_lifetime_bound)]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:121:43\n+   |\n+LL | #[error(typeck::ambiguous_lifetime_bound, typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostic kind not specified\n-  --> $DIR/diagnostic-derive.rs:118:1\n+  --> $DIR/diagnostic-derive.rs:126:1\n    |\n LL | struct KindNotProvided {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use the `#[error(...)]` attribute to create an error\n \n-error: `slug` not specified\n-  --> $DIR/diagnostic-derive.rs:121:1\n+error: diagnostic slug not specified\n+  --> $DIR/diagnostic-derive.rs:129:1\n    |\n LL | / #[error(code = \"E0456\")]\n+LL | |\n LL | | struct SlugNotProvided {}\n    | |_________________________^\n    |\n-   = help: use the `#[error(slug = \"...\")]` attribute to set this diagnostic's slug\n+   = help: specify the slug as the first argument to the attribute, such as `#[error(typeck::example_error)]`\n \n error: the `#[primary_span]` attribute can only be applied to fields of type `Span`\n-  --> $DIR/diagnostic-derive.rs:131:5\n+  --> $DIR/diagnostic-derive.rs:140:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n \n error: `#[nonsense]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:139:5\n+  --> $DIR/diagnostic-derive.rs:148:5\n    |\n LL |     #[nonsense]\n    |     ^^^^^^^^^^^\n    |\n    = help: only `skip_arg`, `primary_span`, `label`, `note`, `help` and `subdiagnostic` are valid field attributes\n \n-error: the `#[label = ...]` attribute can only be applied to fields of type `Span`\n-  --> $DIR/diagnostic-derive.rs:156:5\n+error: the `#[label(...)]` attribute can only be applied to fields of type `Span`\n+  --> $DIR/diagnostic-derive.rs:165:5\n    |\n-LL |     #[label = \"bar\"]\n-   |     ^^^^^^^^^^^^^^^^\n+LL |     #[label(typeck::label)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `name` doesn't refer to a field on this type\n-  --> $DIR/diagnostic-derive.rs:164:42\n+  --> $DIR/diagnostic-derive.rs:173:45\n    |\n-LL |     #[suggestion(message = \"bar\", code = \"{name}\")]\n-   |                                          ^^^^^^^^\n+LL |     #[suggestion(typeck::suggestion, code = \"{name}\")]\n+   |                                             ^^^^^^^^\n \n error: invalid format string: expected `'}'` but string was terminated\n-  --> $DIR/diagnostic-derive.rs:169:16\n+  --> $DIR/diagnostic-derive.rs:178:16\n    |\n LL | #[derive(SessionDiagnostic)]\n    |           -    ^ expected `'}'` in format string\n@@ -237,96 +271,118 @@ LL | #[derive(SessionDiagnostic)]\n    = note: this error originates in the derive macro `SessionDiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: invalid format string: unmatched `}` found\n-  --> $DIR/diagnostic-derive.rs:179:15\n+  --> $DIR/diagnostic-derive.rs:188:15\n    |\n LL | #[derive(SessionDiagnostic)]\n    |               ^ unmatched `}` in format string\n    |\n    = note: if you intended to print `}`, you can escape it using `}}`\n    = note: this error originates in the derive macro `SessionDiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: the `#[label = ...]` attribute can only be applied to fields of type `Span`\n-  --> $DIR/diagnostic-derive.rs:199:5\n+error: the `#[label(...)]` attribute can only be applied to fields of type `Span`\n+  --> $DIR/diagnostic-derive.rs:208:5\n    |\n-LL |     #[label = \"bar\"]\n-   |     ^^^^^^^^^^^^^^^^\n+LL |     #[label(typeck::label)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion(nonsense = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:224:18\n+  --> $DIR/diagnostic-derive.rs:233:18\n    |\n LL |     #[suggestion(nonsense = \"bar\")]\n    |                  ^^^^^^^^^^^^^^^^\n    |\n    = help: only `message`, `code` and `applicability` are valid field attributes\n \n error: `#[suggestion(msg = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:232:18\n+  --> $DIR/diagnostic-derive.rs:241:18\n    |\n LL |     #[suggestion(msg = \"bar\")]\n    |                  ^^^^^^^^^^^\n    |\n    = help: only `message`, `code` and `applicability` are valid field attributes\n \n error: wrong field type for suggestion\n-  --> $DIR/diagnostic-derive.rs:254:5\n+  --> $DIR/diagnostic-derive.rs:263:5\n    |\n-LL | /     #[suggestion(message = \"bar\", code = \"This is suggested code\")]\n+LL | /     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n LL | |\n LL | |     suggestion: Applicability,\n    | |_____________________________^\n    |\n    = help: `#[suggestion(...)]` should be applied to fields of type `Span` or `(Span, Applicability)`\n \n error: type of field annotated with `#[suggestion(...)]` contains more than one `Span`\n-  --> $DIR/diagnostic-derive.rs:269:5\n+  --> $DIR/diagnostic-derive.rs:278:5\n    |\n-LL | /     #[suggestion(message = \"bar\", code = \"This is suggested code\")]\n+LL | /     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n LL | |\n LL | |     suggestion: (Span, Span, Applicability),\n    | |___________________________________________^\n \n error: type of field annotated with `#[suggestion(...)]` contains more than one Applicability\n-  --> $DIR/diagnostic-derive.rs:277:5\n+  --> $DIR/diagnostic-derive.rs:286:5\n    |\n-LL | /     #[suggestion(message = \"bar\", code = \"This is suggested code\")]\n+LL | /     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n LL | |\n LL | |     suggestion: (Applicability, Applicability, Span),\n    | |____________________________________________________^\n \n-error: `#[label(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:285:5\n-   |\n-LL |     #[label(\"bar\")]\n-   |     ^^^^^^^^^^^^^^^\n+error: `#[label = ...]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:294:5\n    |\n-   = help: only `suggestion{,_short,_hidden,_verbose}` are valid field attributes\n+LL |     #[label = \"bar\"]\n+   |     ^^^^^^^^^^^^^^^^\n \n error: applicability cannot be set in both the field and attribute\n-  --> $DIR/diagnostic-derive.rs:436:49\n+  --> $DIR/diagnostic-derive.rs:445:52\n    |\n-LL |     #[suggestion(message = \"bar\", code = \"...\", applicability = \"maybe-incorrect\")]\n-   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[suggestion(typeck::suggestion, code = \"...\", applicability = \"maybe-incorrect\")]\n+   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: invalid applicability\n-  --> $DIR/diagnostic-derive.rs:444:49\n+  --> $DIR/diagnostic-derive.rs:453:52\n+   |\n+LL |     #[suggestion(typeck::suggestion, code = \"...\", applicability = \"batman\")]\n+   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `#[label(...)]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:516:5\n+   |\n+LL |     #[label(typeck::label, foo)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `#[label(...)]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:524:5\n+   |\n+LL |     #[label(typeck::label, foo = \"...\")]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `#[label(...)]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:532:5\n    |\n-LL |     #[suggestion(message = \"bar\", code = \"...\", applicability = \"batman\")]\n-   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[label(typeck::label, foo(\"...\"))]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: cannot find attribute `nonsense` in this scope\n   --> $DIR/diagnostic-derive.rs:51:3\n    |\n-LL | #[nonsense(code = \"E0123\", slug = \"foo\")]\n+LL | #[nonsense(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    |   ^^^^^^^^\n \n error: cannot find attribute `nonsense` in this scope\n-  --> $DIR/diagnostic-derive.rs:139:7\n+  --> $DIR/diagnostic-derive.rs:148:7\n    |\n LL |     #[nonsense]\n    |       ^^^^^^^^\n \n+error[E0425]: cannot find value `nonsense` in module `rustc_errors::fluent`\n+  --> $DIR/diagnostic-derive.rs:64:9\n+   |\n+LL | #[error(nonsense, code = \"E0123\")]\n+   |         ^^^^^^^^ not found in `rustc_errors::fluent`\n+\n error[E0277]: the trait bound `Hello: IntoDiagnosticArg` is not satisfied\n-  --> $DIR/diagnostic-derive.rs:329:10\n+  --> $DIR/diagnostic-derive.rs:338:10\n    |\n LL | #[derive(SessionDiagnostic)]\n    |          ^^^^^^^^^^^^^^^^^ the trait `IntoDiagnosticArg` is not implemented for `Hello`\n@@ -345,6 +401,7 @@ LL |         arg: impl IntoDiagnosticArg,\n    |                   ^^^^^^^^^^^^^^^^^ required by this bound in `DiagnosticBuilder::<'a, G>::set_arg`\n    = note: this error originates in the derive macro `SessionDiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 39 previous errors\n+error: aborting due to 46 previous errors\n \n-For more information about this error, try `rustc --explain E0277`.\n+Some errors have detailed explanations: E0277, E0425.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "6f4b6105b3e49314b8965abb3b887b7884cbc1b9", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.rs", "status": "modified", "additions": 84, "deletions": 75, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -20,7 +20,7 @@ use rustc_span::Span;\n use rustc_macros::SessionSubdiagnostic;\n \n #[derive(SessionSubdiagnostic)]\n-#[label(slug = \"label-a\")]\n+#[label(parser::add_paren)]\n struct A {\n     #[primary_span]\n     span: Span,\n@@ -29,13 +29,13 @@ struct A {\n \n #[derive(SessionSubdiagnostic)]\n enum B {\n-    #[label(slug = \"label-b-a\")]\n+    #[label(parser::add_paren)]\n     A {\n         #[primary_span]\n         span: Span,\n         var: String,\n     },\n-    #[label(slug = \"label-b-b\")]\n+    #[label(parser::add_paren)]\n     B {\n         #[primary_span]\n         span: Span,\n@@ -44,7 +44,7 @@ enum B {\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[label(slug = \"label-c\")]\n+#[label(parser::add_paren)]\n //~^ ERROR label without `#[primary_span]` field\n struct C {\n     var: String,\n@@ -116,7 +116,8 @@ struct K {\n \n #[derive(SessionSubdiagnostic)]\n #[label(slug)]\n-//~^ ERROR `#[label(slug)]` is not a valid attribute\n+//~^ ERROR cannot find value `slug` in module `rustc_errors::fluent`\n+//~^^ NOTE not found in `rustc_errors::fluent`\n struct L {\n     #[primary_span]\n     span: Span,\n@@ -125,28 +126,37 @@ struct L {\n \n #[derive(SessionSubdiagnostic)]\n #[label()]\n-//~^ ERROR `slug` must be set in a `#[label(...)]` attribute\n+//~^ ERROR diagnostic slug must be first argument of a `#[label(...)]` attribute\n struct M {\n     #[primary_span]\n     span: Span,\n     var: String,\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[label(code = \"...\")]\n+#[label(parser::add_paren, code = \"...\")]\n //~^ ERROR `code` is not a valid nested attribute of a `label` attribute\n struct N {\n     #[primary_span]\n     span: Span,\n     var: String,\n }\n \n+#[derive(SessionSubdiagnostic)]\n+#[label(parser::add_paren, applicability = \"machine-applicable\")]\n+//~^ ERROR `applicability` is not a valid nested attribute of a `label` attribute\n+struct O {\n+    #[primary_span]\n+    span: Span,\n+    var: String,\n+}\n+\n #[derive(SessionSubdiagnostic)]\n #[foo]\n //~^ ERROR cannot find attribute `foo` in this scope\n //~^^ ERROR unsupported type attribute for subdiagnostic enum\n-enum O {\n-    #[label(slug = \"...\")]\n+enum P {\n+    #[label(parser::add_paren)]\n     A {\n         #[primary_span]\n         span: Span,\n@@ -155,7 +165,7 @@ enum O {\n }\n \n #[derive(SessionSubdiagnostic)]\n-enum P {\n+enum Q {\n     #[bar]\n //~^ ERROR `#[bar]` is not a valid attribute\n //~^^ ERROR cannot find attribute `bar` in this scope\n@@ -167,7 +177,7 @@ enum P {\n }\n \n #[derive(SessionSubdiagnostic)]\n-enum Q {\n+enum R {\n     #[bar = \"...\"]\n //~^ ERROR `#[bar = ...]` is not a valid attribute\n //~^^ ERROR cannot find attribute `bar` in this scope\n@@ -179,7 +189,7 @@ enum Q {\n }\n \n #[derive(SessionSubdiagnostic)]\n-enum R {\n+enum S {\n     #[bar = 4]\n //~^ ERROR `#[bar = ...]` is not a valid attribute\n //~^^ ERROR cannot find attribute `bar` in this scope\n@@ -191,7 +201,7 @@ enum R {\n }\n \n #[derive(SessionSubdiagnostic)]\n-enum S {\n+enum T {\n     #[bar(\"...\")]\n //~^ ERROR `#[bar(\"...\")]` is not a valid attribute\n //~^^ ERROR cannot find attribute `bar` in this scope\n@@ -203,9 +213,9 @@ enum S {\n }\n \n #[derive(SessionSubdiagnostic)]\n-enum T {\n+enum U {\n     #[label(code = \"...\")]\n-//~^ ERROR `code` is not a valid nested attribute of a `label`\n+//~^ ERROR diagnostic slug must be first argument of a `#[label(...)]` attribute\n     A {\n         #[primary_span]\n         span: Span,\n@@ -214,8 +224,8 @@ enum T {\n }\n \n #[derive(SessionSubdiagnostic)]\n-enum U {\n-    #[label(slug = \"label-u\")]\n+enum V {\n+    #[label(parser::add_paren)]\n     A {\n         #[primary_span]\n         span: Span,\n@@ -230,17 +240,17 @@ enum U {\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[label(slug = \"...\")]\n+#[label(parser::add_paren)]\n //~^ ERROR label without `#[primary_span]` field\n-struct V {\n+struct W {\n     #[primary_span]\n     //~^ ERROR the `#[primary_span]` attribute can only be applied to fields of type `Span`\n     span: String,\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[label(slug = \"...\")]\n-struct W {\n+#[label(parser::add_paren)]\n+struct X {\n     #[primary_span]\n     span: Span,\n     #[applicability]\n@@ -249,8 +259,8 @@ struct W {\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[label(slug = \"...\")]\n-struct X {\n+#[label(parser::add_paren)]\n+struct Y {\n     #[primary_span]\n     span: Span,\n     #[bar]\n@@ -260,8 +270,8 @@ struct X {\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[label(slug = \"...\")]\n-struct Y {\n+#[label(parser::add_paren)]\n+struct Z {\n     #[primary_span]\n     span: Span,\n     #[bar = \"...\"]\n@@ -271,8 +281,8 @@ struct Y {\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[label(slug = \"...\")]\n-struct Z {\n+#[label(parser::add_paren)]\n+struct AA {\n     #[primary_span]\n     span: Span,\n     #[bar(\"...\")]\n@@ -282,45 +292,44 @@ struct Z {\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[label(slug = \"label-aa\")]\n-struct AA {\n+#[label(parser::add_paren)]\n+struct AB {\n     #[primary_span]\n     span: Span,\n     #[skip_arg]\n     z: Z\n }\n \n #[derive(SessionSubdiagnostic)]\n-union AB {\n+union AC {\n //~^ ERROR unexpected unsupported untagged union\n     span: u32,\n     b: u64\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[label(slug = \"label-ac-1\")]\n+#[label(parser::add_paren)]\n //~^ NOTE previously specified here\n //~^^ NOTE previously specified here\n-#[label(slug = \"label-ac-2\")]\n+#[label(parser::add_paren)]\n //~^ ERROR specified multiple times\n //~^^ ERROR specified multiple times\n-struct AC {\n+struct AD {\n     #[primary_span]\n     span: Span,\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[label(slug = \"label-ad-1\", slug = \"label-ad-2\")]\n-//~^ ERROR specified multiple times\n-//~^^ NOTE previously specified here\n-struct AD {\n+#[label(parser::add_paren, parser::add_paren)]\n+//~^ ERROR `#[label(parser::add_paren)]` is not a valid attribute\n+struct AE {\n     #[primary_span]\n     span: Span,\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[label(slug = \"label-ad-1\")]\n-struct AE {\n+#[label(parser::add_paren)]\n+struct AF {\n     #[primary_span]\n //~^ NOTE previously specified here\n     span_a: Span,\n@@ -330,15 +339,15 @@ struct AE {\n }\n \n #[derive(SessionSubdiagnostic)]\n-struct AF {\n+struct AG {\n //~^ ERROR subdiagnostic kind not specified\n     #[primary_span]\n     span: Span,\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[suggestion(slug = \"suggestion-af\", code = \"...\")]\n-struct AG {\n+#[suggestion(parser::add_paren, code = \"...\")]\n+struct AH {\n     #[primary_span]\n     span: Span,\n     #[applicability]\n@@ -347,16 +356,16 @@ struct AG {\n }\n \n #[derive(SessionSubdiagnostic)]\n-enum AH {\n-    #[suggestion(slug = \"suggestion-ag-a\", code = \"...\")]\n+enum AI {\n+    #[suggestion(parser::add_paren, code = \"...\")]\n     A {\n         #[primary_span]\n         span: Span,\n         #[applicability]\n         applicability: Applicability,\n         var: String,\n     },\n-    #[suggestion(slug = \"suggestion-ag-b\", code = \"...\")]\n+    #[suggestion(parser::add_paren, code = \"...\")]\n     B {\n         #[primary_span]\n         span: Span,\n@@ -367,19 +376,19 @@ enum AH {\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[suggestion(slug = \"...\", code = \"...\", code = \"...\")]\n+#[suggestion(parser::add_paren, code = \"...\", code = \"...\")]\n //~^ ERROR specified multiple times\n //~^^ NOTE previously specified here\n-struct AI {\n+struct AJ {\n     #[primary_span]\n     span: Span,\n     #[applicability]\n     applicability: Applicability,\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[suggestion(slug = \"...\", code = \"...\")]\n-struct AJ {\n+#[suggestion(parser::add_paren, code = \"...\")]\n+struct AK {\n     #[primary_span]\n     span: Span,\n     #[applicability]\n@@ -391,9 +400,9 @@ struct AJ {\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[suggestion(slug = \"...\", code = \"...\")]\n+#[suggestion(parser::add_paren, code = \"...\")]\n //~^ ERROR suggestion without `applicability`\n-struct AK {\n+struct AL {\n     #[primary_span]\n     span: Span,\n     #[applicability]\n@@ -402,61 +411,61 @@ struct AK {\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[suggestion(slug = \"...\", code = \"...\")]\n+#[suggestion(parser::add_paren, code = \"...\")]\n //~^ ERROR suggestion without `applicability`\n-struct AL {\n+struct AM {\n     #[primary_span]\n     span: Span,\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[suggestion(slug = \"...\")]\n+#[suggestion(parser::add_paren)]\n //~^ ERROR suggestion without `code = \"...\"`\n-struct AM {\n+struct AN {\n     #[primary_span]\n     span: Span,\n     #[applicability]\n     applicability: Applicability,\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[suggestion(slug = \"...\", code =\"...\", applicability = \"foo\")]\n+#[suggestion(parser::add_paren, code =\"...\", applicability = \"foo\")]\n //~^ ERROR invalid applicability\n-struct AN {\n+struct AO {\n     #[primary_span]\n     span: Span,\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[help(slug = \"label-am\")]\n-struct AO {\n+#[help(parser::add_paren)]\n+struct AP {\n     var: String\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[note(slug = \"label-an\")]\n-struct AP;\n+#[note(parser::add_paren)]\n+struct AQ;\n \n #[derive(SessionSubdiagnostic)]\n-#[suggestion(slug = \"...\", code = \"...\")]\n+#[suggestion(parser::add_paren, code = \"...\")]\n //~^ ERROR suggestion without `applicability`\n //~^^ ERROR suggestion without `#[primary_span]` field\n-struct AQ {\n+struct AR {\n     var: String,\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[suggestion(slug = \"...\", code =\"...\", applicability = \"machine-applicable\")]\n-struct AR {\n+#[suggestion(parser::add_paren, code =\"...\", applicability = \"machine-applicable\")]\n+struct AS {\n     #[primary_span]\n     span: Span,\n }\n \n #[derive(SessionSubdiagnostic)]\n #[label]\n //~^ ERROR unsupported type attribute for subdiagnostic enum\n-enum AS {\n-    #[label(slug = \"...\")]\n+enum AT {\n+    #[label(parser::add_paren)]\n     A {\n         #[primary_span]\n         span: Span,\n@@ -465,24 +474,24 @@ enum AS {\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[suggestion(slug = \"...\", code =\"{var}\", applicability = \"machine-applicable\")]\n-struct AT {\n+#[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n+struct AU {\n     #[primary_span]\n     span: Span,\n     var: String,\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[suggestion(slug = \"...\", code =\"{var}\", applicability = \"machine-applicable\")]\n+#[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n //~^ ERROR `var` doesn't refer to a field on this type\n-struct AU {\n+struct AV {\n     #[primary_span]\n     span: Span,\n }\n \n #[derive(SessionSubdiagnostic)]\n-enum AV {\n-    #[suggestion(slug = \"...\", code =\"{var}\", applicability = \"machine-applicable\")]\n+enum AW {\n+    #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n     A {\n         #[primary_span]\n         span: Span,\n@@ -491,8 +500,8 @@ enum AV {\n }\n \n #[derive(SessionSubdiagnostic)]\n-enum AW {\n-    #[suggestion(slug = \"...\", code =\"{var}\", applicability = \"machine-applicable\")]\n+enum AX {\n+    #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n //~^ ERROR `var` doesn't refer to a field on this type\n     A {\n         #[primary_span]"}, {"sha": "f833bd210f7f59880965347f1bb358c597100646", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.stderr", "status": "modified", "additions": 109, "deletions": 98, "changes": 207, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -1,7 +1,7 @@\n error: label without `#[primary_span]` field\n   --> $DIR/subdiagnostic-derive.rs:47:1\n    |\n-LL | / #[label(slug = \"label-c\")]\n+LL | / #[label(parser::add_paren)]\n LL | |\n LL | | struct C {\n LL | |     var: String,\n@@ -32,304 +32,308 @@ error: `#[label(bug = ...)]` is not a valid attribute\n LL | #[label(bug = \"...\")]\n    |         ^^^^^^^^^^^\n    |\n-   = help: only `code`, `slug` and `applicability` are valid nested attributes\n+   = help: first argument of the attribute should be the diagnostic slug\n \n error: `#[label(\"...\")]` is not a valid attribute\n   --> $DIR/subdiagnostic-derive.rs:91:9\n    |\n LL | #[label(\"...\")]\n    |         ^^^^^\n+   |\n+   = help: first argument of the attribute should be the diagnostic slug\n \n error: `#[label(slug = ...)]` is not a valid attribute\n   --> $DIR/subdiagnostic-derive.rs:100:9\n    |\n LL | #[label(slug = 4)]\n    |         ^^^^^^^^\n+   |\n+   = help: first argument of the attribute should be the diagnostic slug\n \n error: `#[label(slug(...))]` is not a valid attribute\n   --> $DIR/subdiagnostic-derive.rs:109:9\n    |\n LL | #[label(slug(\"...\"))]\n    |         ^^^^^^^^^^^\n-\n-error: `#[label(slug)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:118:9\n    |\n-LL | #[label(slug)]\n-   |         ^^^^\n+   = help: first argument of the attribute should be the diagnostic slug\n \n-error: `slug` must be set in a `#[label(...)]` attribute\n-  --> $DIR/subdiagnostic-derive.rs:127:1\n+error: diagnostic slug must be first argument of a `#[label(...)]` attribute\n+  --> $DIR/subdiagnostic-derive.rs:128:1\n    |\n LL | #[label()]\n    | ^^^^^^^^^^\n \n error: `code` is not a valid nested attribute of a `label` attribute\n-  --> $DIR/subdiagnostic-derive.rs:136:1\n+  --> $DIR/subdiagnostic-derive.rs:137:1\n+   |\n+LL | #[label(parser::add_paren, code = \"...\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `applicability` is not a valid nested attribute of a `label` attribute\n+  --> $DIR/subdiagnostic-derive.rs:146:1\n    |\n-LL | #[label(code = \"...\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[label(parser::add_paren, applicability = \"machine-applicable\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: unsupported type attribute for subdiagnostic enum\n-  --> $DIR/subdiagnostic-derive.rs:145:1\n+  --> $DIR/subdiagnostic-derive.rs:155:1\n    |\n LL | #[foo]\n    | ^^^^^^\n \n error: `#[bar]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:159:5\n+  --> $DIR/subdiagnostic-derive.rs:169:5\n    |\n LL |     #[bar]\n    |     ^^^^^^\n \n error: `#[bar = ...]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:171:5\n+  --> $DIR/subdiagnostic-derive.rs:181:5\n    |\n LL |     #[bar = \"...\"]\n    |     ^^^^^^^^^^^^^^\n \n error: `#[bar = ...]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:183:5\n+  --> $DIR/subdiagnostic-derive.rs:193:5\n    |\n LL |     #[bar = 4]\n    |     ^^^^^^^^^^\n \n error: `#[bar(\"...\")]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:195:11\n+  --> $DIR/subdiagnostic-derive.rs:205:11\n    |\n LL |     #[bar(\"...\")]\n    |           ^^^^^\n+   |\n+   = help: first argument of the attribute should be the diagnostic slug\n \n-error: `code` is not a valid nested attribute of a `label` attribute\n-  --> $DIR/subdiagnostic-derive.rs:207:5\n+error: diagnostic slug must be first argument of a `#[label(...)]` attribute\n+  --> $DIR/subdiagnostic-derive.rs:217:5\n    |\n LL |     #[label(code = \"...\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: subdiagnostic kind not specified\n-  --> $DIR/subdiagnostic-derive.rs:224:5\n+  --> $DIR/subdiagnostic-derive.rs:234:5\n    |\n LL |     B {\n    |     ^\n \n error: the `#[primary_span]` attribute can only be applied to fields of type `Span`\n-  --> $DIR/subdiagnostic-derive.rs:236:5\n+  --> $DIR/subdiagnostic-derive.rs:246:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n \n error: label without `#[primary_span]` field\n-  --> $DIR/subdiagnostic-derive.rs:233:1\n+  --> $DIR/subdiagnostic-derive.rs:243:1\n    |\n-LL | / #[label(slug = \"...\")]\n+LL | / #[label(parser::add_paren)]\n LL | |\n-LL | | struct V {\n+LL | | struct W {\n LL | |     #[primary_span]\n LL | |\n LL | |     span: String,\n LL | | }\n    | |_^\n \n error: `#[applicability]` is only valid on suggestions\n-  --> $DIR/subdiagnostic-derive.rs:246:5\n+  --> $DIR/subdiagnostic-derive.rs:256:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n \n error: `#[bar]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:256:5\n+  --> $DIR/subdiagnostic-derive.rs:266:5\n    |\n LL |     #[bar]\n    |     ^^^^^^\n    |\n    = help: only `primary_span`, `applicability` and `skip_arg` are valid field attributes\n \n error: `#[bar = ...]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:267:5\n+  --> $DIR/subdiagnostic-derive.rs:277:5\n    |\n LL |     #[bar = \"...\"]\n    |     ^^^^^^^^^^^^^^\n \n error: `#[bar(...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:278:5\n+  --> $DIR/subdiagnostic-derive.rs:288:5\n    |\n LL |     #[bar(\"...\")]\n    |     ^^^^^^^^^^^^^\n \n error: unexpected unsupported untagged union\n-  --> $DIR/subdiagnostic-derive.rs:294:1\n+  --> $DIR/subdiagnostic-derive.rs:304:1\n    |\n-LL | / union AB {\n+LL | / union AC {\n LL | |\n LL | |     span: u32,\n LL | |     b: u64\n LL | | }\n    | |_^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:304:9\n+  --> $DIR/subdiagnostic-derive.rs:314:1\n    |\n-LL | #[label(slug = \"label-ac-2\")]\n-   |         ^^^^^^^^^^^^^^^^^^^\n+LL | #[label(parser::add_paren)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:301:9\n+  --> $DIR/subdiagnostic-derive.rs:311:1\n    |\n-LL | #[label(slug = \"label-ac-1\")]\n-   |         ^^^^^^^^^^^^^^^^^^^\n+LL | #[label(parser::add_paren)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:304:1\n+  --> $DIR/subdiagnostic-derive.rs:314:1\n    |\n-LL | #[label(slug = \"label-ac-2\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[label(parser::add_paren)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:301:1\n+  --> $DIR/subdiagnostic-derive.rs:311:1\n    |\n-LL | #[label(slug = \"label-ac-1\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[label(parser::add_paren)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:313:30\n+error: `#[label(parser::add_paren)]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:323:28\n    |\n-LL | #[label(slug = \"label-ad-1\", slug = \"label-ad-2\")]\n-   |                              ^^^^^^^^^^^^^^^^^^^\n+LL | #[label(parser::add_paren, parser::add_paren)]\n+   |                            ^^^^^^^^^^^^^^^^^\n    |\n-note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:313:9\n-   |\n-LL | #[label(slug = \"label-ad-1\", slug = \"label-ad-2\")]\n-   |         ^^^^^^^^^^^^^^^^^^^\n+   = help: a diagnostic slug must be the first argument to the attribute\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:327:5\n+  --> $DIR/subdiagnostic-derive.rs:336:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:324:5\n+  --> $DIR/subdiagnostic-derive.rs:333:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n \n error: subdiagnostic kind not specified\n-  --> $DIR/subdiagnostic-derive.rs:333:8\n+  --> $DIR/subdiagnostic-derive.rs:342:8\n    |\n-LL | struct AF {\n+LL | struct AG {\n    |        ^^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:370:42\n+  --> $DIR/subdiagnostic-derive.rs:379:47\n    |\n-LL | #[suggestion(slug = \"...\", code = \"...\", code = \"...\")]\n-   |                                          ^^^^^^^^^^^^\n+LL | #[suggestion(parser::add_paren, code = \"...\", code = \"...\")]\n+   |                                               ^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:370:28\n+  --> $DIR/subdiagnostic-derive.rs:379:33\n    |\n-LL | #[suggestion(slug = \"...\", code = \"...\", code = \"...\")]\n-   |                            ^^^^^^^^^^^^\n+LL | #[suggestion(parser::add_paren, code = \"...\", code = \"...\")]\n+   |                                 ^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:388:5\n+  --> $DIR/subdiagnostic-derive.rs:397:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:385:5\n+  --> $DIR/subdiagnostic-derive.rs:394:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n \n error: the `#[applicability]` attribute can only be applied to fields of type `Applicability`\n-  --> $DIR/subdiagnostic-derive.rs:399:5\n+  --> $DIR/subdiagnostic-derive.rs:408:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n \n error: suggestion without `applicability`\n-  --> $DIR/subdiagnostic-derive.rs:394:1\n+  --> $DIR/subdiagnostic-derive.rs:403:1\n    |\n-LL | / #[suggestion(slug = \"...\", code = \"...\")]\n+LL | / #[suggestion(parser::add_paren, code = \"...\")]\n LL | |\n-LL | | struct AK {\n+LL | | struct AL {\n LL | |     #[primary_span]\n ...  |\n LL | |     applicability: Span,\n LL | | }\n    | |_^\n \n error: suggestion without `applicability`\n-  --> $DIR/subdiagnostic-derive.rs:405:1\n+  --> $DIR/subdiagnostic-derive.rs:414:1\n    |\n-LL | / #[suggestion(slug = \"...\", code = \"...\")]\n+LL | / #[suggestion(parser::add_paren, code = \"...\")]\n LL | |\n-LL | | struct AL {\n+LL | | struct AM {\n LL | |     #[primary_span]\n LL | |     span: Span,\n LL | | }\n    | |_^\n \n error: suggestion without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:413:1\n+  --> $DIR/subdiagnostic-derive.rs:422:1\n    |\n-LL | / #[suggestion(slug = \"...\")]\n+LL | / #[suggestion(parser::add_paren)]\n LL | |\n-LL | | struct AM {\n+LL | | struct AN {\n LL | |     #[primary_span]\n ...  |\n LL | |     applicability: Applicability,\n LL | | }\n    | |_^\n \n error: invalid applicability\n-  --> $DIR/subdiagnostic-derive.rs:423:41\n+  --> $DIR/subdiagnostic-derive.rs:432:46\n    |\n-LL | #[suggestion(slug = \"...\", code =\"...\", applicability = \"foo\")]\n-   |                                         ^^^^^^^^^^^^^^^^^^^^^\n+LL | #[suggestion(parser::add_paren, code =\"...\", applicability = \"foo\")]\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^\n \n error: suggestion without `applicability`\n-  --> $DIR/subdiagnostic-derive.rs:441:1\n+  --> $DIR/subdiagnostic-derive.rs:450:1\n    |\n-LL | / #[suggestion(slug = \"...\", code = \"...\")]\n+LL | / #[suggestion(parser::add_paren, code = \"...\")]\n LL | |\n LL | |\n-LL | | struct AQ {\n+LL | | struct AR {\n LL | |     var: String,\n LL | | }\n    | |_^\n \n error: suggestion without `#[primary_span]` field\n-  --> $DIR/subdiagnostic-derive.rs:441:1\n+  --> $DIR/subdiagnostic-derive.rs:450:1\n    |\n-LL | / #[suggestion(slug = \"...\", code = \"...\")]\n+LL | / #[suggestion(parser::add_paren, code = \"...\")]\n LL | |\n LL | |\n-LL | | struct AQ {\n+LL | | struct AR {\n LL | |     var: String,\n LL | | }\n    | |_^\n \n error: unsupported type attribute for subdiagnostic enum\n-  --> $DIR/subdiagnostic-derive.rs:456:1\n+  --> $DIR/subdiagnostic-derive.rs:465:1\n    |\n LL | #[label]\n    | ^^^^^^^^\n \n error: `var` doesn't refer to a field on this type\n-  --> $DIR/subdiagnostic-derive.rs:476:34\n+  --> $DIR/subdiagnostic-derive.rs:485:39\n    |\n-LL | #[suggestion(slug = \"...\", code =\"{var}\", applicability = \"machine-applicable\")]\n-   |                                  ^^^^^^^\n+LL | #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n+   |                                       ^^^^^^^\n \n error: `var` doesn't refer to a field on this type\n-  --> $DIR/subdiagnostic-derive.rs:495:38\n+  --> $DIR/subdiagnostic-derive.rs:504:43\n    |\n-LL |     #[suggestion(slug = \"...\", code =\"{var}\", applicability = \"machine-applicable\")]\n-   |                                      ^^^^^^^\n+LL |     #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n+   |                                           ^^^^^^^\n \n error: cannot find attribute `foo` in this scope\n   --> $DIR/subdiagnostic-derive.rs:63:3\n@@ -338,52 +342,59 @@ LL | #[foo]\n    |   ^^^\n \n error: cannot find attribute `foo` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:145:3\n+  --> $DIR/subdiagnostic-derive.rs:155:3\n    |\n LL | #[foo]\n    |   ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:159:7\n+  --> $DIR/subdiagnostic-derive.rs:169:7\n    |\n LL |     #[bar]\n    |       ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:171:7\n+  --> $DIR/subdiagnostic-derive.rs:181:7\n    |\n LL |     #[bar = \"...\"]\n    |       ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:183:7\n+  --> $DIR/subdiagnostic-derive.rs:193:7\n    |\n LL |     #[bar = 4]\n    |       ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:195:7\n+  --> $DIR/subdiagnostic-derive.rs:205:7\n    |\n LL |     #[bar(\"...\")]\n    |       ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:256:7\n+  --> $DIR/subdiagnostic-derive.rs:266:7\n    |\n LL |     #[bar]\n    |       ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:267:7\n+  --> $DIR/subdiagnostic-derive.rs:277:7\n    |\n LL |     #[bar = \"...\"]\n    |       ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:278:7\n+  --> $DIR/subdiagnostic-derive.rs:288:7\n    |\n LL |     #[bar(\"...\")]\n    |       ^^^\n \n-error: aborting due to 51 previous errors\n+error[E0425]: cannot find value `slug` in module `rustc_errors::fluent`\n+  --> $DIR/subdiagnostic-derive.rs:118:9\n+   |\n+LL | #[label(slug)]\n+   |         ^^^^ not found in `rustc_errors::fluent`\n+\n+error: aborting due to 52 previous errors\n \n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "b44251efdea42cab06e388df0e585fc54a80f3df", "filename": "src/test/ui/array-slice-vec/array_const_index-0.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-0.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -12,3 +12,16 @@ LL | const B: i32 = (&A)[1];\n \n error: aborting due to previous error\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/array_const_index-0.rs:2:16\n+   |\n+LL | const B: i32 = (&A)[1];\n+   | ---------------^^^^^^^-\n+   |                |\n+   |                index out of bounds: the length is 0 but the index is 1\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "8beebafb04c32a5179b115025fd28c171db5c54c", "filename": "src/test/ui/array-slice-vec/array_const_index-1.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-1.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -12,3 +12,16 @@ LL | const B: i32 = A[1];\n \n error: aborting due to previous error\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/array_const_index-1.rs:2:16\n+   |\n+LL | const B: i32 = A[1];\n+   | ---------------^^^^-\n+   |                |\n+   |                index out of bounds: the length is 0 but the index is 1\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "f04ea0b74770551a7a41c95587af07e86b190ca9", "filename": "src/test/ui/associated-consts/defaults-not-assumed-fail.stderr", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -29,3 +29,28 @@ LL |     assert_eq!(<() as Tr>::B, 0);    // causes the error above\n error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/defaults-not-assumed-fail.rs:8:19\n+   |\n+LL |     const B: u8 = Self::A + 1;\n+   |     --------------^^^^^^^^^^^-\n+   |                   |\n+   |                   attempt to compute `u8::MAX + 1_u8`, which would overflow\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: erroneous constant used\n+  --> $DIR/defaults-not-assumed-fail.rs:34:5\n+   |\n+LL |     assert_eq!(<() as Tr>::B, 0);    // causes the error above\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}, {"sha": "e7345ff3f9a6436f2ad779ee9171f469135eb560", "filename": "src/test/ui/borrowck/issue-81899.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -27,3 +27,16 @@ LL | const _CONST: &[u8] = &f(&[], |_| {});\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/issue-81899.rs:4:23\n+   |\n+LL | const _CONST: &[u8] = &f(&[], |_| {});\n+   | ----------------------^^^^^^^^^^^^^^^-\n+   |                       |\n+   |                       referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "47d83c653558323aa3d5db84ad589a467902068c", "filename": "src/test/ui/borrowck/issue-88434-minimal-example.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -27,3 +27,16 @@ LL | const _CONST: &() = &f(&|_| {});\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/issue-88434-minimal-example.rs:3:21\n+   |\n+LL | const _CONST: &() = &f(&|_| {});\n+   | --------------------^^^^^^^^^^^-\n+   |                     |\n+   |                     referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "b08a7cfc7fe1a01a6650821aec3f59df0ef97aaa", "filename": "src/test/ui/borrowck/issue-88434-removal-index-should-be-less.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -27,3 +27,16 @@ LL | const _CONST: &[u8] = &f(&[], |_| {});\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/issue-88434-removal-index-should-be-less.rs:3:23\n+   |\n+LL | const _CONST: &[u8] = &f(&[], |_| {});\n+   | ----------------------^^^^^^^^^^^^^^^-\n+   |                       |\n+   |                       referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "89f8f2ffc55cb88e40b96a6f79c8d36ec12307aa", "filename": "src/test/ui/consts/assert-type-intrinsics.stderr", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -37,3 +37,45 @@ LL | |     };\n \n error: aborting due to 3 previous errors\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/assert-type-intrinsics.rs:14:9\n+   |\n+LL | /     const _BAD1: () = unsafe {\n+LL | |         MaybeUninit::<!>::uninit().assume_init();\n+   | |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to instantiate uninhabited type `!`\n+LL | |     };\n+   | |______-\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/assert-type-intrinsics.rs:17:9\n+   |\n+LL | /     const _BAD2: () = unsafe {\n+LL | |         intrinsics::assert_uninit_valid::<bool>();\n+   | |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to leave type `bool` uninitialized, which is invalid\n+LL | |     };\n+   | |______-\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/assert-type-intrinsics.rs:20:9\n+   |\n+LL | /     const _BAD3: () = unsafe {\n+LL | |         intrinsics::assert_zero_valid::<&'static i32>();\n+   | |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to zero-initialize type `&i32`, which is invalid\n+LL | |     };\n+   | |______-\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "cccf62a8ff6d3b6f44ee5bb9cb93a93227c261d2", "filename": "src/test/ui/consts/assoc_const_generic_impl.stderr", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -22,3 +22,20 @@ LL |         let () = Self::I_AM_ZERO_SIZED;\n \n error: aborting due to previous error; 1 warning emitted\n \n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/assoc_const_generic_impl.rs:11:34\n+   |\n+LL |     const I_AM_ZERO_SIZED: ()  = [()][std::mem::size_of::<Self>()];\n+   |     -----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                                  |\n+   |                                  index out of bounds: the length is 1 but the index is 4\n+   |\n+note: the lint level is defined here\n+  --> $DIR/assoc_const_generic_impl.rs:3:9\n+   |\n+LL | #![warn(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "385e770eb4f0128e973515aa90e37eafdd257183", "filename": "src/test/ui/consts/const-err-early.stderr", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -60,3 +60,88 @@ LL | pub const E: u8 = [5u8][1];\n \n error: aborting due to 5 previous errors\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-err-early.rs:3:19\n+   |\n+LL | pub const A: i8 = -i8::MIN;\n+   | ------------------^^^^^^^^-\n+   |                   |\n+   |                   attempt to negate `i8::MIN`, which would overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-err-early.rs:1:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-err-early.rs:5:19\n+   |\n+LL | pub const B: u8 = 200u8 + 200u8;\n+   | ------------------^^^^^^^^^^^^^-\n+   |                   |\n+   |                   attempt to compute `200_u8 + 200_u8`, which would overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-err-early.rs:1:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-err-early.rs:7:19\n+   |\n+LL | pub const C: u8 = 200u8 * 4;\n+   | ------------------^^^^^^^^^-\n+   |                   |\n+   |                   attempt to compute `200_u8 * 4_u8`, which would overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-err-early.rs:1:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-err-early.rs:9:19\n+   |\n+LL | pub const D: u8 = 42u8 - (42u8 + 1);\n+   | ------------------^^^^^^^^^^^^^^^^^-\n+   |                   |\n+   |                   attempt to compute `42_u8 - 43_u8`, which would overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-err-early.rs:1:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-err-early.rs:11:19\n+   |\n+LL | pub const E: u8 = [5u8][1];\n+   | ------------------^^^^^^^^-\n+   |                   |\n+   |                   index out of bounds: the length is 1 but the index is 1\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-err-early.rs:1:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "a195459ff0884e40d3a32cbeb4bcf6a60579e09a", "filename": "src/test/ui/consts/const-err-multi.stderr", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -49,3 +49,71 @@ LL | pub const D: i8 = 50 - A;\n \n error: aborting due to 4 previous errors\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-err-multi.rs:3:19\n+   |\n+LL | pub const A: i8 = -i8::MIN;\n+   | ------------------^^^^^^^^-\n+   |                   |\n+   |                   attempt to negate `i8::MIN`, which would overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-err-multi.rs:1:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-err-multi.rs:6:19\n+   |\n+LL | pub const B: i8 = A;\n+   | ------------------^-\n+   |                   |\n+   |                   referenced constant has errors\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-err-multi.rs:1:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-err-multi.rs:9:19\n+   |\n+LL | pub const C: u8 = A as u8;\n+   | ------------------^-------\n+   |                   |\n+   |                   referenced constant has errors\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-err-multi.rs:1:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-err-multi.rs:12:24\n+   |\n+LL | pub const D: i8 = 50 - A;\n+   | -----------------------^-\n+   |                        |\n+   |                        referenced constant has errors\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-err-multi.rs:1:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "3b03e702dc4aec7d6342f1bcdef32d743d568aa3", "filename": "src/test/ui/consts/const-err.stderr", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -29,3 +29,20 @@ LL |     black_box((FOO, FOO));\n error: aborting due to 2 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/const-err.rs:11:17\n+   |\n+LL | const FOO: u8 = [5u8][1];\n+   | ----------------^^^^^^^^-\n+   |                 |\n+   |                 index out of bounds: the length is 1 but the index is 1\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-err.rs:5:9\n+   |\n+LL | #![warn(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "f88bf4454260bc1d09587ae021863993ba787c57", "filename": "src/test/ui/consts/const-eval/conditional_array_execution.stderr", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -33,3 +33,36 @@ LL |     println!(\"{}\", FOO);\n error: aborting due to previous error; 2 warnings emitted\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/conditional_array_execution.rs:7:19\n+   |\n+LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n+   | ------------------^^^^^---------------------------\n+   |                   |\n+   |                   attempt to compute `5_u32 - 6_u32`, which would overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/conditional_array_execution.rs:3:9\n+   |\n+LL | #![warn(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+warning: erroneous constant used\n+  --> $DIR/conditional_array_execution.rs:12:20\n+   |\n+LL |     println!(\"{}\", FOO);\n+   |                    ^^^ referenced constant has errors\n+   |\n+note: the lint level is defined here\n+  --> $DIR/conditional_array_execution.rs:3:9\n+   |\n+LL | #![warn(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: this warning originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}, {"sha": "1c74b978827c64a830254800e224aa1803331d71", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-2.stderr", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-2.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -12,3 +12,20 @@ LL |         NEG_NEG_128 => println!(\"A\"),\n \n error: aborting due to 2 previous errors\n \n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow-2.rs:11:25\n+   |\n+LL | const NEG_NEG_128: i8 = -NEG_128;\n+   | ------------------------^^^^^^^^-\n+   |                         |\n+   |                         attempt to negate `i8::MIN`, which would overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow-2.rs:4:36\n+   |\n+LL | #![allow(unused_imports, warnings, const_err)]\n+   |                                    ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "948ead521ea34100c9e50461c81136a315730427", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2.stderr", "status": "modified", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -107,3 +107,153 @@ LL | |      );\n \n error: aborting due to 8 previous errors\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2.rs:14:6\n+   |\n+LL | / const VALS_I8: (i8,) =\n+LL | |     (\n+LL | |      i8::MIN - 1,\n+   | |      ^^^^^^^^^^^ attempt to compute `i8::MIN - 1_i8`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2.rs:21:6\n+   |\n+LL | / const VALS_I16: (i16,) =\n+LL | |     (\n+LL | |      i16::MIN - 1,\n+   | |      ^^^^^^^^^^^^ attempt to compute `i16::MIN - 1_i16`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2.rs:28:6\n+   |\n+LL | / const VALS_I32: (i32,) =\n+LL | |     (\n+LL | |      i32::MIN - 1,\n+   | |      ^^^^^^^^^^^^ attempt to compute `i32::MIN - 1_i32`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2.rs:35:6\n+   |\n+LL | / const VALS_I64: (i64,) =\n+LL | |     (\n+LL | |      i64::MIN - 1,\n+   | |      ^^^^^^^^^^^^ attempt to compute `i64::MIN - 1_i64`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2.rs:42:6\n+   |\n+LL | / const VALS_U8: (u8,) =\n+LL | |     (\n+LL | |      u8::MIN - 1,\n+   | |      ^^^^^^^^^^^ attempt to compute `0_u8 - 1_u8`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2.rs:48:6\n+   |\n+LL | / const VALS_U16: (u16,) = (\n+LL | |      u16::MIN - 1,\n+   | |      ^^^^^^^^^^^^ attempt to compute `0_u16 - 1_u16`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2.rs:54:6\n+   |\n+LL | / const VALS_U32: (u32,) = (\n+LL | |      u32::MIN - 1,\n+   | |      ^^^^^^^^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2.rs:61:6\n+   |\n+LL | / const VALS_U64: (u64,) =\n+LL | |     (\n+LL | |      u64::MIN - 1,\n+   | |      ^^^^^^^^^^^^ attempt to compute `0_u64 - 1_u64`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "5db6a49a98b0c23d44d082a15aa9def30cd97931", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2b.stderr", "status": "modified", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -107,3 +107,153 @@ LL | |      );\n \n error: aborting due to 8 previous errors\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2b.rs:14:6\n+   |\n+LL | / const VALS_I8: (i8,) =\n+LL | |     (\n+LL | |      i8::MAX + 1,\n+   | |      ^^^^^^^^^^^ attempt to compute `i8::MAX + 1_i8`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2b.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2b.rs:21:6\n+   |\n+LL | / const VALS_I16: (i16,) =\n+LL | |     (\n+LL | |      i16::MAX + 1,\n+   | |      ^^^^^^^^^^^^ attempt to compute `i16::MAX + 1_i16`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2b.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2b.rs:28:6\n+   |\n+LL | / const VALS_I32: (i32,) =\n+LL | |     (\n+LL | |      i32::MAX + 1,\n+   | |      ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2b.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2b.rs:35:6\n+   |\n+LL | / const VALS_I64: (i64,) =\n+LL | |     (\n+LL | |      i64::MAX + 1,\n+   | |      ^^^^^^^^^^^^ attempt to compute `i64::MAX + 1_i64`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2b.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2b.rs:42:6\n+   |\n+LL | / const VALS_U8: (u8,) =\n+LL | |     (\n+LL | |      u8::MAX + 1,\n+   | |      ^^^^^^^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2b.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2b.rs:48:6\n+   |\n+LL | / const VALS_U16: (u16,) = (\n+LL | |      u16::MAX + 1,\n+   | |      ^^^^^^^^^^^^ attempt to compute `u16::MAX + 1_u16`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2b.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2b.rs:54:6\n+   |\n+LL | / const VALS_U32: (u32,) = (\n+LL | |      u32::MAX + 1,\n+   | |      ^^^^^^^^^^^^ attempt to compute `u32::MAX + 1_u32`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2b.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2b.rs:61:6\n+   |\n+LL | / const VALS_U64: (u64,) =\n+LL | |     (\n+LL | |      u64::MAX + 1,\n+   | |      ^^^^^^^^^^^^ attempt to compute `u64::MAX + 1_u64`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2b.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "ec3f3c110596bb2f5bd4d0b0f290173c18ca3136", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2c.stderr", "status": "modified", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -107,3 +107,153 @@ LL | |      );\n \n error: aborting due to 8 previous errors\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2c.rs:14:6\n+   |\n+LL | / const VALS_I8: (i8,) =\n+LL | |     (\n+LL | |      i8::MIN * 2,\n+   | |      ^^^^^^^^^^^ attempt to compute `i8::MIN * 2_i8`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2c.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2c.rs:21:6\n+   |\n+LL | / const VALS_I16: (i16,) =\n+LL | |     (\n+LL | |      i16::MIN * 2,\n+   | |      ^^^^^^^^^^^^ attempt to compute `i16::MIN * 2_i16`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2c.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2c.rs:28:6\n+   |\n+LL | / const VALS_I32: (i32,) =\n+LL | |     (\n+LL | |      i32::MIN * 2,\n+   | |      ^^^^^^^^^^^^ attempt to compute `i32::MIN * 2_i32`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2c.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2c.rs:35:6\n+   |\n+LL | / const VALS_I64: (i64,) =\n+LL | |     (\n+LL | |      i64::MIN * 2,\n+   | |      ^^^^^^^^^^^^ attempt to compute `i64::MIN * 2_i64`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2c.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2c.rs:42:6\n+   |\n+LL | / const VALS_U8: (u8,) =\n+LL | |     (\n+LL | |      u8::MAX * 2,\n+   | |      ^^^^^^^^^^^ attempt to compute `u8::MAX * 2_u8`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2c.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2c.rs:48:6\n+   |\n+LL | / const VALS_U16: (u16,) = (\n+LL | |      u16::MAX * 2,\n+   | |      ^^^^^^^^^^^^ attempt to compute `u16::MAX * 2_u16`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2c.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2c.rs:54:6\n+   |\n+LL | / const VALS_U32: (u32,) = (\n+LL | |      u32::MAX * 2,\n+   | |      ^^^^^^^^^^^^ attempt to compute `u32::MAX * 2_u32`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2c.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2c.rs:61:6\n+   |\n+LL | / const VALS_U64: (u64,) =\n+LL | |     (\n+LL | |      u64::MAX * 2,\n+   | |      ^^^^^^^^^^^^ attempt to compute `u64::MAX * 2_u64`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2c.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "bbec2a830e64b42082881e7925210f51fc336cb2", "filename": "src/test/ui/consts/const-eval/const-eval-query-stack.stderr", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -35,3 +35,31 @@ query stack during panic:\n #1 [optimized_mir] optimizing MIR for `main`\n #2 [collect_and_partition_mono_items] collect_and_partition_mono_items\n end of query stack\n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/const-eval-query-stack.rs:19:16\n+   |\n+LL | const X: i32 = 1 / 0;\n+   | ---------------^^^^^-\n+   |                |\n+   |                attempt to divide `1_i32` by zero\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-query-stack.rs:18:8\n+   |\n+LL | #[warn(const_err)]\n+   |        ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: erroneous constant used\n+  --> $DIR/const-eval-query-stack.rs:23:27\n+   |\n+LL |     let x: &'static i32 = &X;\n+   |                           ^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "b004637fd8300b87601e4a1d26663a68e8676db7", "filename": "src/test/ui/consts/const-eval/const-pointer-values-in-various-types.64bit.stderr", "status": "modified", "additions": 351, "deletions": 0, "changes": 351, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.64bit.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -321,3 +321,354 @@ LL |     const STR_CHAR_UNION: char = unsafe { Nonsense { stringy: \"3\" }.charact\n error: aborting due to 29 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:26:49\n+   |\n+LL |     const I32_REF_USIZE_UNION: usize = unsafe { Nonsense { int_32_ref: &3 }.u };\n+   |     --------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                                 |\n+   |                                                 unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:30:43\n+   |\n+LL |     const I32_REF_U8_UNION: u8 = unsafe { Nonsense { int_32_ref: &3 }.uint_8 };\n+   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                           |\n+   |                                           unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:34:45\n+   |\n+LL |     const I32_REF_U16_UNION: u16 = unsafe { Nonsense { int_32_ref: &3 }.uint_16 };\n+   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                             |\n+   |                                             unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:38:45\n+   |\n+LL |     const I32_REF_U32_UNION: u32 = unsafe { Nonsense { int_32_ref: &3 }.uint_32 };\n+   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                             |\n+   |                                             unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:42:45\n+   |\n+LL |     const I32_REF_U64_UNION: u64 = unsafe { Nonsense { int_32_ref: &3 }.uint_64 };\n+   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                             |\n+   |                                             unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:49:43\n+   |\n+LL |     const I32_REF_I8_UNION: i8 = unsafe { Nonsense { int_32_ref: &3 }.int_8 };\n+   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                           |\n+   |                                           unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:53:45\n+   |\n+LL |     const I32_REF_I16_UNION: i16 = unsafe { Nonsense { int_32_ref: &3 }.int_16 };\n+   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                             |\n+   |                                             unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:57:45\n+   |\n+LL |     const I32_REF_I32_UNION: i32 = unsafe { Nonsense { int_32_ref: &3 }.int_32 };\n+   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                             |\n+   |                                             unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:61:45\n+   |\n+LL |     const I32_REF_I64_UNION: i64 = unsafe { Nonsense { int_32_ref: &3 }.int_64 };\n+   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                             |\n+   |                                             unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:68:45\n+   |\n+LL |     const I32_REF_F32_UNION: f32 = unsafe { Nonsense { int_32_ref: &3 }.float_32 };\n+   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                             |\n+   |                                             unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:72:45\n+   |\n+LL |     const I32_REF_F64_UNION: f64 = unsafe { Nonsense { int_32_ref: &3 }.float_64 };\n+   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                             |\n+   |                                             unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:76:47\n+   |\n+LL |     const I32_REF_BOOL_UNION: bool = unsafe { Nonsense { int_32_ref: &3 }.truthy_falsey };\n+   |     ------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                               |\n+   |                                               unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:80:47\n+   |\n+LL |     const I32_REF_CHAR_UNION: char = unsafe { Nonsense { int_32_ref: &3 }.character };\n+   |     ------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                               |\n+   |                                               unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:84:39\n+   |\n+LL |     const STR_U8_UNION: u8 = unsafe { Nonsense { stringy: \"3\" }.uint_8 };\n+   |     ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                       |\n+   |                                       unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:88:41\n+   |\n+LL |     const STR_U16_UNION: u16 = unsafe { Nonsense { stringy: \"3\" }.uint_16 };\n+   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                         |\n+   |                                         unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:92:41\n+   |\n+LL |     const STR_U32_UNION: u32 = unsafe { Nonsense { stringy: \"3\" }.uint_32 };\n+   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                         |\n+   |                                         unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:96:41\n+   |\n+LL |     const STR_U64_UNION: u64 = unsafe { Nonsense { stringy: \"3\" }.uint_64 };\n+   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                         |\n+   |                                         unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:100:43\n+   |\n+LL |     const STR_U128_UNION: u128 = unsafe { Nonsense { stringy: \"3\" }.uint_128 };\n+   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                           |\n+   |                                           unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:104:39\n+   |\n+LL |     const STR_I8_UNION: i8 = unsafe { Nonsense { stringy: \"3\" }.int_8 };\n+   |     ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                       |\n+   |                                       unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:108:41\n+   |\n+LL |     const STR_I16_UNION: i16 = unsafe { Nonsense { stringy: \"3\" }.int_16 };\n+   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                         |\n+   |                                         unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:112:41\n+   |\n+LL |     const STR_I32_UNION: i32 = unsafe { Nonsense { stringy: \"3\" }.int_32 };\n+   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                         |\n+   |                                         unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:116:41\n+   |\n+LL |     const STR_I64_UNION: i64 = unsafe { Nonsense { stringy: \"3\" }.int_64 };\n+   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                         |\n+   |                                         unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:120:43\n+   |\n+LL |     const STR_I128_UNION: i128 = unsafe { Nonsense { stringy: \"3\" }.int_128 };\n+   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                           |\n+   |                                           unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:124:41\n+   |\n+LL |     const STR_F32_UNION: f32 = unsafe { Nonsense { stringy: \"3\" }.float_32 };\n+   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                         |\n+   |                                         unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:128:41\n+   |\n+LL |     const STR_F64_UNION: f64 = unsafe { Nonsense { stringy: \"3\" }.float_64 };\n+   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                         |\n+   |                                         unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:132:43\n+   |\n+LL |     const STR_BOOL_UNION: bool = unsafe { Nonsense { stringy: \"3\" }.truthy_falsey };\n+   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                           |\n+   |                                           unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:136:43\n+   |\n+LL |     const STR_CHAR_UNION: char = unsafe { Nonsense { stringy: \"3\" }.character };\n+   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                           |\n+   |                                           unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "daf3d8927c19a3a99380dc14e2a5b2b9321e4871", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.stderr", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -21,3 +21,79 @@ LL |     x(y)\n error: aborting due to 2 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/const_fn_ptr_fail2.rs:12:5\n+   |\n+LL |     x(y)\n+   |     ^^^^\n+   |     |\n+   |     calling non-const function `double`\n+   |     inside `bar` at $DIR/const_fn_ptr_fail2.rs:12:5\n+   |     inside `Y` at $DIR/const_fn_ptr_fail2.rs:15:18\n+...\n+LL | const Y: usize = bar(X, 2); // FIXME: should fail to typeck someday\n+   | ---------------------------\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const_fn_ptr_fail2.rs:4:10\n+   |\n+LL | #![allow(const_err)]\n+   |          ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/const_fn_ptr_fail2.rs:12:5\n+   |\n+LL |     x(y)\n+   |     ^^^^\n+   |     |\n+   |     calling non-const function `double`\n+   |     inside `bar` at $DIR/const_fn_ptr_fail2.rs:12:5\n+   |     inside `Z` at $DIR/const_fn_ptr_fail2.rs:16:18\n+...\n+LL | const Z: usize = bar(double, 2); // FIXME: should fail to typeck someday\n+   | --------------------------------\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const_fn_ptr_fail2.rs:4:10\n+   |\n+LL | #![allow(const_err)]\n+   |          ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+warning: erroneous constant used\n+  --> $DIR/const_fn_ptr_fail2.rs:19:5\n+   |\n+LL |     assert_eq!(Y, 4);\n+   |     ^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const_fn_ptr_fail2.rs:4:10\n+   |\n+LL | #![allow(const_err)]\n+   |          ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: this warning originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+Future breakage diagnostic:\n+warning: erroneous constant used\n+  --> $DIR/const_fn_ptr_fail2.rs:21:5\n+   |\n+LL |     assert_eq!(Z, 4);\n+   |     ^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const_fn_ptr_fail2.rs:4:10\n+   |\n+LL | #![allow(const_err)]\n+   |          ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: this warning originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}, {"sha": "9057b58ded9da6d1b30d6e07c29577ab55e28c22", "filename": "src/test/ui/consts/const-eval/erroneous-const.stderr", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -41,3 +41,20 @@ LL | pub static FOO: () = no_codegen::<i32>();\n error: aborting due to previous error; 2 warnings emitted\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/erroneous-const.rs:6:22\n+   |\n+LL |     const VOID: () = [()][2];\n+   |     -----------------^^^^^^^-\n+   |                      |\n+   |                      index out of bounds: the length is 1 but the index is 2\n+   |\n+note: the lint level is defined here\n+  --> $DIR/erroneous-const.rs:2:9\n+   |\n+LL | #![warn(const_err, unconditional_panic)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "bf6cc8410a7ee1905db27277210ab4a66c686b61", "filename": "src/test/ui/consts/const-eval/erroneous-const2.stderr", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -35,3 +35,20 @@ LL |         let _ = PrintName::<i32>::VOID;\n error: aborting due to previous error; 2 warnings emitted\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/erroneous-const2.rs:6:22\n+   |\n+LL |     const VOID: () = [()][2];\n+   |     -----------------^^^^^^^-\n+   |                      |\n+   |                      index out of bounds: the length is 1 but the index is 2\n+   |\n+note: the lint level is defined here\n+  --> $DIR/erroneous-const2.rs:2:9\n+   |\n+LL | #![warn(const_err, unconditional_panic)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "b00cadcea991fd79ab116cc23fce5746142bda65", "filename": "src/test/ui/consts/const-eval/format.stderr", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -76,3 +76,49 @@ LL |     println!(\"{:?}\", 0);\n error: aborting due to 8 previous errors\n \n For more information about this error, try `rustc --explain E0015`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: erroneous constant used\n+  --> $DIR/format.rs:2:12\n+   |\n+LL |     panic!(\"{:?}\", 0);\n+   |            ^^^^^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: erroneous constant used\n+  --> $DIR/format.rs:2:20\n+   |\n+LL |     panic!(\"{:?}\", 0);\n+   |                    ^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: this error originates in the macro `$crate::const_format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+Future breakage diagnostic:\n+error: erroneous constant used\n+  --> $DIR/format.rs:11:14\n+   |\n+LL |     println!(\"{:?}\", 0);\n+   |              ^^^^^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: erroneous constant used\n+  --> $DIR/format.rs:11:22\n+   |\n+LL |     println!(\"{:?}\", 0);\n+   |                      ^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}, {"sha": "7b3e46fccca7b8e8fce0c96c8bc51dce4fedbc40", "filename": "src/test/ui/consts/const-eval/index-out-of-bounds-never-type.stderr", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -22,3 +22,20 @@ LL |     let _ = PrintName::<T>::VOID;\n \n error: aborting due to previous error; 1 warning emitted\n \n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/index-out-of-bounds-never-type.rs:10:61\n+   |\n+LL |     const VOID: ! = { let x = 0 * std::mem::size_of::<T>(); [][x] };\n+   |     --------------------------------------------------------^^^^^---\n+   |                                                             |\n+   |                                                             index out of bounds: the length is 0 but the index is 0\n+   |\n+note: the lint level is defined here\n+  --> $DIR/index-out-of-bounds-never-type.rs:4:9\n+   |\n+LL | #![warn(const_err, unconditional_panic)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "53ed32638ced2333834af9e06c4b0bef55a1d6ee", "filename": "src/test/ui/consts/const-eval/issue-43197.stderr", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -60,3 +60,69 @@ LL |     println!(\"{} {}\", X, Y);\n error: aborting due to 2 previous errors; 4 warnings emitted\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/issue-43197.rs:10:20\n+   |\n+LL |     const X: u32 = 0 - 1;\n+   |     ---------------^^^^^-\n+   |                    |\n+   |                    attempt to compute `0_u32 - 1_u32`, which would overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-43197.rs:3:9\n+   |\n+LL | #![warn(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/issue-43197.rs:13:24\n+   |\n+LL |     const Y: u32 = foo(0 - 1);\n+   |     -------------------^^^^^--\n+   |                        |\n+   |                        attempt to compute `0_u32 - 1_u32`, which would overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-43197.rs:3:9\n+   |\n+LL | #![warn(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+warning: erroneous constant used\n+  --> $DIR/issue-43197.rs:16:23\n+   |\n+LL |     println!(\"{} {}\", X, Y);\n+   |                       ^ referenced constant has errors\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-43197.rs:3:9\n+   |\n+LL | #![warn(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: this warning originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+Future breakage diagnostic:\n+warning: erroneous constant used\n+  --> $DIR/issue-43197.rs:16:26\n+   |\n+LL |     println!(\"{} {}\", X, Y);\n+   |                          ^ referenced constant has errors\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-43197.rs:3:9\n+   |\n+LL | #![warn(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: this warning originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}, {"sha": "5ecdb7ef5568b497315b9de06f2e6389b573f230", "filename": "src/test/ui/consts/const-eval/issue-44578.stderr", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -7,3 +7,36 @@ LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/issue-44578.rs:15:24\n+   |\n+LL |     const AMT: usize = [A::AMT][(A::AMT > B::AMT) as usize];\n+   |     -------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                        |\n+   |                        index out of bounds: the length is 1 but the index is 1\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-44578.rs:3:10\n+   |\n+LL | #![allow(const_err)]\n+   |          ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+warning: erroneous constant used\n+  --> $DIR/issue-44578.rs:27:20\n+   |\n+LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-44578.rs:3:10\n+   |\n+LL | #![allow(const_err)]\n+   |          ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: this warning originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}, {"sha": "67af3b2b1d3aee8b00ba331850678d7ff87295da", "filename": "src/test/ui/consts/const-eval/issue-50814-2.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -25,3 +25,16 @@ LL |     println!(\"{:x}\", foo::<()>() as *const usize as usize);\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/issue-50814-2.rs:14:24\n+   |\n+LL |     const BAR: usize = [5, 6, 7][T::BOO];\n+   |     -------------------^^^^^^^^^^^^^^^^^-\n+   |                        |\n+   |                        index out of bounds: the length is 3 but the index is 42\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "b82bc9ca2f81ac867032a7a81536fd7f088f1050", "filename": "src/test/ui/consts/const-eval/issue-50814.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -25,3 +25,16 @@ LL |     foo(0);\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/issue-50814.rs:15:21\n+   |\n+LL |     const MAX: u8 = A::MAX + B::MAX;\n+   |     ----------------^^^^^^^^^^^^^^^-\n+   |                     |\n+   |                     attempt to compute `u8::MAX + u8::MAX`, which would overflow\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "1a7d386142097d61943ecfdfac17cdf057d4bd64", "filename": "src/test/ui/consts/const-eval/partial_ptr_overwrite.stderr", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpartial_ptr_overwrite.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpartial_ptr_overwrite.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpartial_ptr_overwrite.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -18,3 +18,22 @@ LL | | };\n \n error: aborting due to previous error\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/partial_ptr_overwrite.rs:8:9\n+   |\n+LL | / const PARTIAL_OVERWRITE: () = {\n+LL | |     let mut p = &42;\n+LL | |     unsafe {\n+LL | |         let ptr: *mut _ = &mut p;\n+LL | |         *(ptr as *mut u8) = 123;\n+   | |         ^^^^^^^^^^^^^^^^^^^^^^^ unable to overwrite parts of a pointer in memory at alloc4\n+...  |\n+LL | |     let x = *p;\n+LL | | };\n+   | |__-\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "be845339dfe67d80efe22237bc3c6ec1b8428550", "filename": "src/test/ui/consts/const-eval/promoted_errors.noopt.stderr", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -85,3 +85,53 @@ LL | | };\n \n warning: 7 warnings emitted\n \n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/promoted_errors.rs:15:5\n+   |\n+LL |       0 - 1\n+   |       ^^^^^\n+   |       |\n+   |       attempt to compute `0_u32 - 1_u32`, which would overflow\n+   |       inside `overflow` at $DIR/promoted_errors.rs:15:5\n+   |       inside `X` at $DIR/promoted_errors.rs:43:29\n+...\n+LL | / const X: () = {\n+LL | |     let _x: &'static u32 = &overflow();\n+LL | |\n+LL | |\n+...  |\n+LL | |     let _x: &'static i32 = &oob();\n+LL | | };\n+   | |__-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:11:9\n+   |\n+LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/promoted_errors.rs:43:28\n+   |\n+LL | / const X: () = {\n+LL | |     let _x: &'static u32 = &overflow();\n+   | |                            ^^^^^^^^^^^ referenced constant has errors\n+LL | |\n+LL | |\n+...  |\n+LL | |     let _x: &'static i32 = &oob();\n+LL | | };\n+   | |__-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:11:9\n+   |\n+LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "c91d52336c36d9f997f2f443d1bee837744c541a", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt.stderr", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -86,3 +86,54 @@ LL | | };\n \n warning: 7 warnings emitted\n \n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/promoted_errors.rs:21:5\n+   |\n+LL |       1 / 0\n+   |       ^^^^^\n+   |       |\n+   |       attempt to divide `1_i32` by zero\n+   |       inside `div_by_zero1` at $DIR/promoted_errors.rs:21:5\n+   |       inside `X` at $DIR/promoted_errors.rs:46:29\n+...\n+LL | / const X: () = {\n+LL | |     let _x: &'static u32 = &overflow();\n+LL | |\n+LL | |\n+...  |\n+LL | |     let _x: &'static i32 = &oob();\n+LL | | };\n+   | |__-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:11:9\n+   |\n+LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/promoted_errors.rs:46:28\n+   |\n+LL | / const X: () = {\n+LL | |     let _x: &'static u32 = &overflow();\n+LL | |\n+LL | |\n+LL | |     let _x: &'static i32 = &div_by_zero1();\n+   | |                            ^^^^^^^^^^^^^^^ referenced constant has errors\n+...  |\n+LL | |     let _x: &'static i32 = &oob();\n+LL | | };\n+   | |__-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:11:9\n+   |\n+LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "be845339dfe67d80efe22237bc3c6ec1b8428550", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt_with_overflow_checks.stderr", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -85,3 +85,53 @@ LL | | };\n \n warning: 7 warnings emitted\n \n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/promoted_errors.rs:15:5\n+   |\n+LL |       0 - 1\n+   |       ^^^^^\n+   |       |\n+   |       attempt to compute `0_u32 - 1_u32`, which would overflow\n+   |       inside `overflow` at $DIR/promoted_errors.rs:15:5\n+   |       inside `X` at $DIR/promoted_errors.rs:43:29\n+...\n+LL | / const X: () = {\n+LL | |     let _x: &'static u32 = &overflow();\n+LL | |\n+LL | |\n+...  |\n+LL | |     let _x: &'static i32 = &oob();\n+LL | | };\n+   | |__-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:11:9\n+   |\n+LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/promoted_errors.rs:43:28\n+   |\n+LL | / const X: () = {\n+LL | |     let _x: &'static u32 = &overflow();\n+   | |                            ^^^^^^^^^^^ referenced constant has errors\n+LL | |\n+LL | |\n+...  |\n+LL | |     let _x: &'static i32 = &oob();\n+LL | | };\n+   | |__-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:11:9\n+   |\n+LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "56d66827626b9a9476ac0463d0cc5fbdab1efb78", "filename": "src/test/ui/consts/const-eval/pub_const_err.stderr", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -16,3 +16,20 @@ LL | #![warn(const_err)]\n \n warning: 1 warning emitted\n \n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/pub_const_err.rs:6:20\n+   |\n+LL | pub const Z: u32 = 0 - 1;\n+   | -------------------^^^^^-\n+   |                    |\n+   |                    attempt to compute `0_u32 - 1_u32`, which would overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/pub_const_err.rs:2:9\n+   |\n+LL | #![warn(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "202ea781e975df18d5b8ac9222b2b89890c0a409", "filename": "src/test/ui/consts/const-eval/pub_const_err_bin.stderr", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -16,3 +16,20 @@ LL | #![warn(const_err)]\n \n warning: 1 warning emitted\n \n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/pub_const_err_bin.rs:4:20\n+   |\n+LL | pub const Z: u32 = 0 - 1;\n+   | -------------------^^^^^-\n+   |                    |\n+   |                    attempt to compute `0_u32 - 1_u32`, which would overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/pub_const_err_bin.rs:2:9\n+   |\n+LL | #![warn(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "a55fd8c156e07833a7be1ee42f75a5ea17f48fb8", "filename": "src/test/ui/consts/const-eval/ref_to_int_match.32bit.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.32bit.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -24,3 +24,16 @@ LL |         10..=BAR => {},\n \n error: aborting due to 3 previous errors\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ref_to_int_match.rs:25:27\n+   |\n+LL | const BAR: Int = unsafe { Foo { r: &42 }.f };\n+   | --------------------------^^^^^^^^^^^^^^^^---\n+   |                           |\n+   |                           unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "a55fd8c156e07833a7be1ee42f75a5ea17f48fb8", "filename": "src/test/ui/consts/const-eval/ref_to_int_match.64bit.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.64bit.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -24,3 +24,16 @@ LL |         10..=BAR => {},\n \n error: aborting due to 3 previous errors\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ref_to_int_match.rs:25:27\n+   |\n+LL | const BAR: Int = unsafe { Foo { r: &42 }.f };\n+   | --------------------------^^^^^^^^^^^^^^^^---\n+   |                           |\n+   |                           unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "2440cd2272c6ca69a6b20e7b1296a482b0f84aa4", "filename": "src/test/ui/consts/const-eval/ub-enum.32bit.stderr", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.32bit.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -125,3 +125,58 @@ LL | const BAD_UNINHABITED_WITH_DATA2: Result<(i32, !), (i32, Never)> = unsafe {\n error: aborting due to 13 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-enum.rs:26:1\n+   |\n+LL | const BAD_ENUM_PTR: Enum = unsafe { mem::transmute(&1) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-enum.rs:30:1\n+   |\n+LL | const BAD_ENUM_WRAPPED: Wrap<Enum> = unsafe { mem::transmute(&1) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-enum.rs:45:1\n+   |\n+LL | const BAD_ENUM2_PTR: Enum2 = unsafe { mem::transmute(&0) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-enum.rs:49:1\n+   |\n+LL | const BAD_ENUM2_WRAPPED: Wrap<Enum2> = unsafe { mem::transmute(&0) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-enum.rs:63:1\n+   |\n+LL | const BAD_ENUM2_OPTION_PTR: Option<Enum2> = unsafe { mem::transmute(&0) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "e9b4023068e94930a93aa6ecccce49880c360af9", "filename": "src/test/ui/consts/const-eval/ub-enum.64bit.stderr", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.64bit.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -125,3 +125,58 @@ LL | const BAD_UNINHABITED_WITH_DATA2: Result<(i32, !), (i32, Never)> = unsafe {\n error: aborting due to 13 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-enum.rs:26:1\n+   |\n+LL | const BAD_ENUM_PTR: Enum = unsafe { mem::transmute(&1) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-enum.rs:30:1\n+   |\n+LL | const BAD_ENUM_WRAPPED: Wrap<Enum> = unsafe { mem::transmute(&1) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-enum.rs:45:1\n+   |\n+LL | const BAD_ENUM2_PTR: Enum2 = unsafe { mem::transmute(&0) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-enum.rs:49:1\n+   |\n+LL | const BAD_ENUM2_WRAPPED: Wrap<Enum2> = unsafe { mem::transmute(&0) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-enum.rs:63:1\n+   |\n+LL | const BAD_ENUM2_OPTION_PTR: Option<Enum2> = unsafe { mem::transmute(&0) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "10a0ccd552b6d25384141e35d50151f9831cc438", "filename": "src/test/ui/consts/const-eval/ub-ref-ptr.32bit.stderr", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -176,3 +176,66 @@ LL | const DATA_FN_PTR: fn() = unsafe { mem::transmute(&13) };\n error: aborting due to 16 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-ref-ptr.rs:31:1\n+   |\n+LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-ref-ptr.rs:35:39\n+   |\n+LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n+   | --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                                       |\n+   |                                       unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-ref-ptr.rs:35:38\n+   |\n+LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n+   | -------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                                      |\n+   |                                      referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-ref-ptr.rs:41:86\n+   |\n+LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n+   | -------------------------------------------------------------------------------------^^^^^^^^^^^^^^^^^^^^----\n+   |                                                                                      |\n+   |                                                                                      unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-ref-ptr.rs:41:85\n+   |\n+LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n+   | ------------------------------------------------------------------------------------^^^^^^^^^^^^^^^^^^^^^----\n+   |                                                                                     |\n+   |                                                                                     referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "e9fcefe12c7d97b21d3716eb661a0399c04f6f62", "filename": "src/test/ui/consts/const-eval/ub-ref-ptr.64bit.stderr", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -176,3 +176,66 @@ LL | const DATA_FN_PTR: fn() = unsafe { mem::transmute(&13) };\n error: aborting due to 16 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-ref-ptr.rs:31:1\n+   |\n+LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-ref-ptr.rs:35:39\n+   |\n+LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n+   | --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                                       |\n+   |                                       unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-ref-ptr.rs:35:38\n+   |\n+LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n+   | -------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                                      |\n+   |                                      referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-ref-ptr.rs:41:86\n+   |\n+LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n+   | -------------------------------------------------------------------------------------^^^^^^^^^^^^^^^^^^^^----\n+   |                                                                                      |\n+   |                                                                                      unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-ref-ptr.rs:41:85\n+   |\n+LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n+   | ------------------------------------------------------------------------------------^^^^^^^^^^^^^^^^^^^^^----\n+   |                                                                                     |\n+   |                                                                                     referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "0c398f5bfd45e151c17095000982c76bfbaa72ab", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.32bit.stderr", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -344,3 +344,86 @@ LL |     mem::transmute::<_, &dyn Trait>((&92u8, &3u64))\n error: aborting due to 32 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:42:1\n+   |\n+LL | const STR_LENGTH_PTR: &str = unsafe { mem::transmute((&42u8, &3)) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:46:1\n+   |\n+LL | const MY_STR_LENGTH_PTR: &MyStr = unsafe { mem::transmute((&42u8, &3)) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:75:1\n+   |\n+LL | const SLICE_LENGTH_PTR: &[u8] = unsafe { mem::transmute((&42u8, &3)) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:82:1\n+   |\n+LL | const SLICE_LENGTH_PTR_BOX: Box<[u8]> = unsafe { mem::transmute((&42u8, &3)) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:87:40\n+   |\n+LL | const SLICE_CONTENT_INVALID: &[bool] = &[unsafe { mem::transmute(3u8) }];\n+   | ---------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                                        |\n+   |                                        referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:95:42\n+   |\n+LL | const MYSLICE_PREFIX_BAD: &MySliceBool = &MySlice(unsafe { mem::transmute(3u8) }, [false]);\n+   | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                                          |\n+   |                                          referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:100:42\n+   |\n+LL | const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { mem::transmute(3u8) }]);\n+   | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                                          |\n+   |                                          referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "bf53995d956c5621651f5a1f628e25ad19c18369", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.64bit.stderr", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -344,3 +344,86 @@ LL |     mem::transmute::<_, &dyn Trait>((&92u8, &3u64))\n error: aborting due to 32 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:42:1\n+   |\n+LL | const STR_LENGTH_PTR: &str = unsafe { mem::transmute((&42u8, &3)) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:46:1\n+   |\n+LL | const MY_STR_LENGTH_PTR: &MyStr = unsafe { mem::transmute((&42u8, &3)) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:75:1\n+   |\n+LL | const SLICE_LENGTH_PTR: &[u8] = unsafe { mem::transmute((&42u8, &3)) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:82:1\n+   |\n+LL | const SLICE_LENGTH_PTR_BOX: Box<[u8]> = unsafe { mem::transmute((&42u8, &3)) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:87:40\n+   |\n+LL | const SLICE_CONTENT_INVALID: &[bool] = &[unsafe { mem::transmute(3u8) }];\n+   | ---------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                                        |\n+   |                                        referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:95:42\n+   |\n+LL | const MYSLICE_PREFIX_BAD: &MySliceBool = &MySlice(unsafe { mem::transmute(3u8) }, [false]);\n+   | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                                          |\n+   |                                          referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:100:42\n+   |\n+LL | const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { mem::transmute(3u8) }]);\n+   | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                                          |\n+   |                                          referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "bfc076aa5e64f1b6b48f940ab86753a275fe99a7", "filename": "src/test/ui/consts/const-eval/unused-broken-const.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -12,3 +12,16 @@ LL | const FOO: i32 = [][0];\n \n error: aborting due to previous error\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/unused-broken-const.rs:5:18\n+   |\n+LL | const FOO: i32 = [][0];\n+   | -----------------^^^^^-\n+   |                  |\n+   |                  index out of bounds: the length is 0 but the index is 0\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "205ee92dfd7cf28ba7c6a66767b3f67816e785b0", "filename": "src/test/ui/consts/const-external-macro-const-err.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -11,3 +11,15 @@ LL |     static_assert!(2 + 2 == 5);\n \n error: aborting due to previous error\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-external-macro-const-err.rs:12:5\n+   |\n+LL |     static_assert!(2 + 2 == 5);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: this error originates in the macro `static_assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}, {"sha": "d822171df7234dc8f4fe1fdcc26276f64db0e40f", "filename": "src/test/ui/consts/const-float-bits-reject-conv.stderr", "status": "modified", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -214,3 +214,115 @@ LL |         const_assert!(f64::from_bits(MASKED_NAN2).to_bits(), MASKED_NAN2);\n error: aborting due to 12 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-float-bits-reject-conv.rs:30:34\n+   |\n+LL |             const _: () = assert!($a);\n+   |             --------------------------\n+...\n+LL |     const_assert!(f32::from_bits(MASKED_NAN1).is_nan());\n+   |                                  ^^^^^^^^^^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-float-bits-reject-conv.rs:33:34\n+   |\n+LL |             const _: () = assert!($a);\n+   |             --------------------------\n+...\n+LL |     const_assert!(f32::from_bits(MASKED_NAN1).is_nan());\n+   |                                  ^^^^^^^^^^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-float-bits-reject-conv.rs:41:38\n+   |\n+LL |             const _: () = assert!($a == $b);\n+   |             --------------------------------\n+...\n+LL |         const_assert!(f32::from_bits(MASKED_NAN1).to_bits(), MASKED_NAN1);\n+   |                                      ^^^^^^^^^^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-float-bits-reject-conv.rs:44:38\n+   |\n+LL |             const _: () = assert!($a == $b);\n+   |             --------------------------------\n+...\n+LL |         const_assert!(f32::from_bits(MASKED_NAN2).to_bits(), MASKED_NAN2);\n+   |                                      ^^^^^^^^^^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-float-bits-reject-conv.rs:57:34\n+   |\n+LL |             const _: () = assert!($a);\n+   |             --------------------------\n+...\n+LL |     const_assert!(f64::from_bits(MASKED_NAN1).is_nan());\n+   |                                  ^^^^^^^^^^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-float-bits-reject-conv.rs:60:34\n+   |\n+LL |             const _: () = assert!($a);\n+   |             --------------------------\n+...\n+LL |     const_assert!(f64::from_bits(MASKED_NAN1).is_nan());\n+   |                                  ^^^^^^^^^^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-float-bits-reject-conv.rs:66:38\n+   |\n+LL |             const _: () = assert!($a == $b);\n+   |             --------------------------------\n+...\n+LL |         const_assert!(f64::from_bits(MASKED_NAN1).to_bits(), MASKED_NAN1);\n+   |                                      ^^^^^^^^^^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-float-bits-reject-conv.rs:69:38\n+   |\n+LL |             const _: () = assert!($a == $b);\n+   |             --------------------------------\n+...\n+LL |         const_assert!(f64::from_bits(MASKED_NAN2).to_bits(), MASKED_NAN2);\n+   |                                      ^^^^^^^^^^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "0c10783476abc6d666b0a4d15d4049e66913e8ee", "filename": "src/test/ui/consts/const-len-underflow-separate-spans.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -19,3 +19,16 @@ LL |     let a: [i8; LEN] = unimplemented!();\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-len-underflow-separate-spans.rs:7:20\n+   |\n+LL | const LEN: usize = ONE - TWO;\n+   | -------------------^^^^^^^^^-\n+   |                    |\n+   |                    attempt to compute `1_usize - 2_usize`, which would overflow\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "a60cd16f05a18968aef3936f9be238a406fe2bf5", "filename": "src/test/ui/consts/const-prop-read-static-in-const.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -20,3 +20,16 @@ LL | const TEST: u8 = MY_STATIC;\n \n error: aborting due to previous error; 1 warning emitted\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-prop-read-static-in-const.rs:5:18\n+   |\n+LL | const TEST: u8 = MY_STATIC;\n+   | -----------------^^^^^^^^^-\n+   |                  |\n+   |                  constant accesses static\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "c6e0b321124b1e52792a49f2c379fdd1bdf8b7c2", "filename": "src/test/ui/consts/const-size_of_val-align_of_val-extern-type.stderr", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -23,3 +23,29 @@ LL | const _ALIGN: usize = unsafe { min_align_of_val(&4 as *const i32 as *const\n \n error: aborting due to 2 previous errors\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-size_of_val-align_of_val-extern-type.rs:11:31\n+   |\n+LL | const _SIZE: usize = unsafe { size_of_val(&4 as *const i32 as *const Opaque) };\n+   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                               |\n+   |                               `extern type` does not have known layout\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-size_of_val-align_of_val-extern-type.rs:13:32\n+   |\n+LL | const _ALIGN: usize = unsafe { min_align_of_val(&4 as *const i32 as *const Opaque) };\n+   | -------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                |\n+   |                                `extern type` does not have known layout\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "c9f949727bc633d62e863668b82067efc9b71fea", "filename": "src/test/ui/consts/const-slice-oob.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -12,3 +12,16 @@ LL | const BAR: u32 = FOO[5];\n \n error: aborting due to previous error\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-slice-oob.rs:4:18\n+   |\n+LL | const BAR: u32 = FOO[5];\n+   | -----------------^^^^^^-\n+   |                  |\n+   |                  index out of bounds: the length is 3 but the index is 5\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "ee95b0d518050a95a67d387329aaf70f2be3fceb", "filename": "src/test/ui/consts/const_limit/const_eval_limit_reached.stderr", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -17,3 +17,21 @@ LL | | };\n \n error: aborting due to previous error\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const_eval_limit_reached.rs:6:11\n+   |\n+LL | / const X: usize = {\n+LL | |     let mut x = 0;\n+LL | |     while x != 1000 {\n+   | |           ^^^^^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n+LL | |\n+...  |\n+LL | |     x\n+LL | | };\n+   | |__-\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "bd7c95342f7f942467ca0a6bf3a417904c712b4b", "filename": "src/test/ui/consts/invalid-union.32bit.stderr", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -22,3 +22,14 @@ LL |     let _: &'static _ = &C;\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: erroneous constant used\n+  --> $DIR/invalid-union.rs:41:25\n+   |\n+LL |     let _: &'static _ = &C;\n+   |                         ^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "0d8b8ffcc161b76a0a6ea01c3df9742e038a5579", "filename": "src/test/ui/consts/invalid-union.64bit.stderr", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -22,3 +22,14 @@ LL |     let _: &'static _ = &C;\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: erroneous constant used\n+  --> $DIR/invalid-union.rs:41:25\n+   |\n+LL |     let _: &'static _ = &C;\n+   |                         ^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "73a0f8ec0d04f9d90abcef63f4f6227416d60d0a", "filename": "src/test/ui/consts/issue-56164.stderr", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -26,3 +26,14 @@ LL | const fn foo() { (||{})() }\n error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0015`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: erroneous constant used\n+  --> $DIR/issue-56164.rs:1:18\n+   |\n+LL | const fn foo() { (||{})() }\n+   |                  ^^^^^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "929f905ae918be05d91d9e25e7ff92d74b16361f", "filename": "src/test/ui/consts/issue-66693.stderr", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -34,3 +34,14 @@ LL |     panic!(&1);\n \n error: aborting due to 4 previous errors\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: erroneous constant used\n+  --> $DIR/issue-66693.rs:11:12\n+   |\n+LL |     panic!(&1);\n+   |            ^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "e76a1f96b46a568919502c273ba523b431c0c19d", "filename": "src/test/ui/consts/issue-miri-1910.stderr", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -24,3 +24,28 @@ LL | | };\n \n error: aborting due to previous error\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |\n+LL |           copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |           |\n+   |           unable to turn pointer into raw bytes\n+   |           inside `std::ptr::read::<u8>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |           inside `ptr::const_ptr::<impl *const u8>::read` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |           inside `C` at $DIR/issue-miri-1910.rs:7:5\n+   |\n+  ::: $DIR/issue-miri-1910.rs:4:1\n+   |\n+LL | / const C: () = unsafe {\n+LL | |     let foo = Some(&42 as *const i32);\n+LL | |     let one_and_a_half_pointers = std::mem::size_of::<*const i32>()/2*3;\n+LL | |     (&foo as *const _ as *const u8).add(one_and_a_half_pointers).read();\n+LL | | };\n+   | |__-\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "1765c9ed10a30725d4c6a00c64c4c54266269774", "filename": "src/test/ui/consts/miri_unleashed/assoc_const.stderr", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -15,3 +15,28 @@ LL |     const F: u32 = (U::X, 42).1;\n error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |\n+LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | |\n+   | calling non-const function `<Vec<u32> as Drop>::drop`\n+   | inside `std::ptr::drop_in_place::<Vec<u32>> - shim(Some(Vec<u32>))` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   | inside `std::ptr::drop_in_place::<(Vec<u32>, u32)> - shim(Some((Vec<u32>, u32)))` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   | inside `<String as Bar<Vec<u32>, String>>::F` at $DIR/assoc_const.rs:14:31\n+   |\n+  ::: $DIR/assoc_const.rs:14:5\n+   |\n+LL |     const F: u32 = (U::X, 42).1;\n+   |     ----------------------------\n+   |\n+note: the lint level is defined here\n+  --> $DIR/assoc_const.rs:4:10\n+   |\n+LL | #![allow(const_err)]\n+   |          ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "f7be42de03fd646e12651817842cc1f0ca525863", "filename": "src/test/ui/consts/miri_unleashed/assoc_const_2.stderr", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -7,3 +7,20 @@ LL |     let y = <String as Bar<String>>::F;\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/assoc_const_2.rs:12:20\n+   |\n+LL |     const F: u32 = 100 / U::X;\n+   |     ---------------^^^^^^^^^^-\n+   |                    |\n+   |                    attempt to divide `100_u32` by zero\n+   |\n+note: the lint level is defined here\n+  --> $DIR/assoc_const_2.rs:3:10\n+   |\n+LL | #![allow(const_err)]\n+   |          ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "98d4dff648a5f1e52f9560cb95fcf8b6e1109b16", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static.stderr", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -47,3 +47,58 @@ LL | const READ_MUT: u32 = unsafe { MUTABLE };\n error: aborting due to 3 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/const_refers_to_static.rs:13:5\n+   |\n+LL | / const MUTATE_INTERIOR_MUT: usize = {\n+LL | |     static FOO: AtomicUsize = AtomicUsize::new(0);\n+LL | |     FOO.fetch_add(1, Ordering::Relaxed)\n+   | |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ calling non-const function `AtomicUsize::fetch_add`\n+LL | | };\n+   | |__-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const_refers_to_static.rs:3:10\n+   |\n+LL | #![allow(const_err)]\n+   |          ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/const_refers_to_static.rs:18:14\n+   |\n+LL | / const READ_INTERIOR_MUT: usize = {\n+LL | |     static FOO: AtomicUsize = AtomicUsize::new(0);\n+LL | |     unsafe { *(&FOO as *const _ as *const usize) }\n+   | |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n+LL | | };\n+   | |__-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const_refers_to_static.rs:3:10\n+   |\n+LL | #![allow(const_err)]\n+   |          ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/const_refers_to_static.rs:22:32\n+   |\n+LL | const READ_MUT: u32 = unsafe { MUTABLE };\n+   | -------------------------------^^^^^^^---\n+   |                                |\n+   |                                constant accesses static\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const_refers_to_static.rs:3:10\n+   |\n+LL | #![allow(const_err)]\n+   |          ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "2a0766294d3e0b22a37e80906c17329ea8039187", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.32bit.stderr", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.32bit.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -170,3 +170,45 @@ LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None =>\n error: aborting due to 10 previous errors; 3 warnings emitted\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/const_refers_to_static_cross_crate.rs:25:15\n+   |\n+LL | / const U8_MUT2: &u8 = {\n+LL | |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n+   | |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n+LL | |\n+LL | |\n+LL | |\n+LL | | };\n+   | |__-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const_refers_to_static_cross_crate.rs:23:8\n+   |\n+LL | #[warn(const_err)]\n+   |        ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n+   |\n+LL | / const U8_MUT3: &u8 = {\n+LL | |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n+   | |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n+LL | |\n+LL | |\n+LL | |\n+LL | | };\n+   | |__-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const_refers_to_static_cross_crate.rs:30:8\n+   |\n+LL | #[warn(const_err)]\n+   |        ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "2d4f038d91490f5af0f13a484f5c2fa1bf8618cf", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.64bit.stderr", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -170,3 +170,45 @@ LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None =>\n error: aborting due to 10 previous errors; 3 warnings emitted\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/const_refers_to_static_cross_crate.rs:25:15\n+   |\n+LL | / const U8_MUT2: &u8 = {\n+LL | |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n+   | |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n+LL | |\n+LL | |\n+LL | |\n+LL | | };\n+   | |__-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const_refers_to_static_cross_crate.rs:23:8\n+   |\n+LL | #[warn(const_err)]\n+   |        ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n+   |\n+LL | / const U8_MUT3: &u8 = {\n+LL | |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n+   | |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n+LL | |\n+LL | |\n+LL | |\n+LL | | };\n+   | |__-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const_refers_to_static_cross_crate.rs:30:8\n+   |\n+LL | #[warn(const_err)]\n+   |        ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "594576fe2cf3d8adf81353e0156787efaacc728d", "filename": "src/test/ui/consts/ptr_comparisons.stderr", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -44,3 +44,29 @@ LL | const _: usize = unsafe { *std::mem::transmute::<&&usize, &usize>(&FOO) + 4\n error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ptr_comparisons.rs:65:27\n+   |\n+LL | const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n+   | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                           |\n+   |                           unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ptr_comparisons.rs:70:27\n+   |\n+LL | const _: usize = unsafe { *std::mem::transmute::<&&usize, &usize>(&FOO) + 4 };\n+   | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------\n+   |                           |\n+   |                           unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "8d1e10d4176fff4fcc392ba64dda72ce19bb0159", "filename": "src/test/ui/consts/recursive.stderr", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -29,3 +29,22 @@ LL | const X: () = f(1);\n \n error: aborting due to previous error; 1 warning emitted\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/recursive.rs:4:5\n+   |\n+LL |     f(x);\n+   |     ^^^^\n+   |     |\n+   |     reached the configured maximum number of stack frames\n+   |     inside `f::<i32>` at $DIR/recursive.rs:4:5\n+   |     [... 126 additional calls inside `f::<i32>` at $DIR/recursive.rs:4:5 ...]\n+   |     inside `X` at $DIR/recursive.rs:9:15\n+...\n+LL | const X: () = f(1);\n+   | -------------------\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "17dd6131436c39b01fa590986b9ef134eaea96f0", "filename": "src/test/ui/consts/uninhabited-const-issue-61744.stderr", "status": "modified", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -150,3 +150,147 @@ LL |     dbg!(i32::CONSTANT);\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     reached the configured maximum number of stack frames\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<i32>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `<i32 as Const>::CONSTANT` at $DIR/uninhabited-const-issue-61744.rs:13:36\n+...\n+LL |     const CONSTANT: i32 = unsafe { fake_type() };\n+   |     ---------------------------------------------\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "3d4585a44df8055a78096a7d348d3048ed552983", "filename": "src/test/ui/generic-associated-types/issue-91883.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91883.rs?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -0,0 +1,42 @@\n+#![feature(generic_associated_types)]\n+\n+use std::fmt::Debug;\n+use std::marker::PhantomData;\n+\n+#[derive(Debug)]\n+pub struct TransactionImpl<'db> {\n+    _marker: PhantomData<&'db ()>,\n+}\n+\n+#[derive(Debug)]\n+pub struct CursorImpl<'txn> {\n+    _marker: PhantomData<&'txn ()>,\n+}\n+\n+pub trait Cursor<'txn> {}\n+\n+pub trait Transaction<'db>: Send + Sync + Debug + Sized {\n+    type Cursor<'tx>: Cursor<'tx>\n+    where\n+        'db: 'tx,\n+        Self: 'tx;\n+\n+    fn cursor<'tx>(&'tx self) -> Result<Self::Cursor<'tx>, ()>\n+    where\n+        'db: 'tx;\n+}\n+\n+impl<'tx> Cursor<'tx> for CursorImpl<'tx> {}\n+\n+impl<'db> Transaction<'db> for TransactionImpl<'db> {\n+    type Cursor<'tx> = CursorImpl<'tx>; //~ ERROR lifetime bound not satisfied\n+\n+    fn cursor<'tx>(&'tx self) -> Result<Self::Cursor<'tx>, ()>\n+    where\n+        'db: 'tx,\n+    {\n+        loop {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "ed700876e02dd97016a57e6befce474011ad5424", "filename": "src/test/ui/generic-associated-types/issue-91883.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91883.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91883.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91883.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -0,0 +1,26 @@\n+error[E0478]: lifetime bound not satisfied\n+  --> $DIR/issue-91883.rs:32:24\n+   |\n+LL | /     type Cursor<'tx>: Cursor<'tx>\n+LL | |     where\n+LL | |         'db: 'tx,\n+LL | |         Self: 'tx;\n+   | |__________________- definition of `Cursor` from trait\n+...\n+LL |       type Cursor<'tx> = CursorImpl<'tx>;\n+   |                          ^^^^^^^^^^^^^^^- help: try copying these clauses from the trait: `where 'db: 'tx, Self: 'tx`\n+   |\n+note: lifetime parameter instantiated with the lifetime `'db` as defined here\n+  --> $DIR/issue-91883.rs:31:6\n+   |\n+LL | impl<'db> Transaction<'db> for TransactionImpl<'db> {\n+   |      ^^^\n+note: but lifetime parameter must outlive the lifetime `'tx` as defined here\n+  --> $DIR/issue-91883.rs:32:17\n+   |\n+LL |     type Cursor<'tx> = CursorImpl<'tx>;\n+   |                 ^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0478`."}, {"sha": "1402d1387037ec04f60467bab8ecd14d46ce85ca", "filename": "src/test/ui/limits/issue-55878.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -23,3 +23,15 @@ LL |     println!(\"Size: {}\", std::mem::size_of::<[u8; u64::MAX as usize]>());\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: erroneous constant used\n+  --> $DIR/issue-55878.rs:7:26\n+   |\n+LL |     println!(\"Size: {}\", std::mem::size_of::<[u8; u64::MAX as usize]>());\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}, {"sha": "c14529a7d090a2106eae46719360bf77f4fa04bc", "filename": "src/test/ui/lint/force-warn/allowed-cli-deny-by-default-lint.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-cli-deny-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-cli-deny-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-cli-deny-by-default-lint.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -12,3 +12,16 @@ LL | const C: i32 = 1 / 0;\n \n warning: 1 warning emitted\n \n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/allowed-cli-deny-by-default-lint.rs:6:16\n+   |\n+LL | const C: i32 = 1 / 0;\n+   | ---------------^^^^^-\n+   |                |\n+   |                attempt to divide `1_i32` by zero\n+   |\n+   = note: requested on the command line with `--force-warn const-err`\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "dd71a168960ab0b9070182c9a5fdcf9b1aa59641", "filename": "src/test/ui/lint/force-warn/allowed-deny-by-default-lint.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-deny-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-deny-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-deny-by-default-lint.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -12,3 +12,16 @@ LL | const C: i32 = 1 / 0;\n \n warning: 1 warning emitted\n \n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/allowed-deny-by-default-lint.rs:7:16\n+   |\n+LL | const C: i32 = 1 / 0;\n+   | ---------------^^^^^-\n+   |                |\n+   |                attempt to divide `1_i32` by zero\n+   |\n+   = note: requested on the command line with `--force-warn const-err`\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "d4e80584669aecda80963e2b4ccd60617ac5a72f", "filename": "src/test/ui/lint/force-warn/deny-by-default-lint.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fdeny-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fdeny-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fdeny-by-default-lint.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -12,3 +12,16 @@ LL | const C: i32 = 1 / 0;\n \n warning: 1 warning emitted\n \n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/deny-by-default-lint.rs:5:16\n+   |\n+LL | const C: i32 = 1 / 0;\n+   | ---------------^^^^^-\n+   |                |\n+   |                attempt to divide `1_i32` by zero\n+   |\n+   = note: requested on the command line with `--force-warn const-err`\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "635050f376c8a73c50f2eb946648600e9bfbd34e", "filename": "src/test/ui/mir/issue-92893.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fmir%2Fissue-92893.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fmir%2Fissue-92893.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-92893.rs?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -1,6 +1,7 @@\n struct Bug<A = [(); (let a = (), 1).1]> {\n     //~^ `let` expressions are not supported here\n-    //~^^ `let` expressions in this position are unstable [E0658]\n+    //~| `let` expressions in this position are unstable [E0658]\n+    //~| expected expression, found `let` statement\n     a: A\n }\n "}, {"sha": "4a0fcce31d7c7b0a6f208a5b2abb65fb69db26f1", "filename": "src/test/ui/mir/issue-92893.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fmir%2Fissue-92893.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Fmir%2Fissue-92893.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-92893.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -1,3 +1,9 @@\n+error: expected expression, found `let` statement\n+  --> $DIR/issue-92893.rs:1:22\n+   |\n+LL | struct Bug<A = [(); (let a = (), 1).1]> {\n+   |                      ^^^\n+\n error: `let` expressions are not supported here\n   --> $DIR/issue-92893.rs:1:22\n    |\n@@ -15,6 +21,6 @@ LL | struct Bug<A = [(); (let a = (), 1).1]> {\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "bb1aff70d8995d03a1db837458e276e9b6188485", "filename": "src/test/ui/rfc-2294-if-let-guard/feature-gate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -58,8 +58,10 @@ fn _macros() {\n     }\n     use_expr!((let 0 = 1 && 0 == 0));\n     //~^ ERROR `let` expressions in this position are unstable\n+    //~| ERROR expected expression, found `let` statement\n     use_expr!((let 0 = 1));\n     //~^ ERROR `let` expressions in this position are unstable\n+    //~| ERROR expected expression, found `let` statement\n     match () {\n         #[cfg(FALSE)]\n         () if let 0 = 1 => {}"}, {"sha": "370a57318fdd05f04dbdf30f34b879015b6c3cde", "filename": "src/test/ui/rfc-2294-if-let-guard/feature-gate.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -1,5 +1,17 @@\n+error: expected expression, found `let` statement\n+  --> $DIR/feature-gate.rs:59:16\n+   |\n+LL |     use_expr!((let 0 = 1 && 0 == 0));\n+   |                ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/feature-gate.rs:62:16\n+   |\n+LL |     use_expr!((let 0 = 1));\n+   |                ^^^\n+\n error: no rules expected the token `let`\n-  --> $DIR/feature-gate.rs:69:15\n+  --> $DIR/feature-gate.rs:71:15\n    |\n LL |     macro_rules! use_expr {\n    |     --------------------- when calling this macro\n@@ -58,7 +70,7 @@ LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n error[E0658]: `if let` guards are experimental\n-  --> $DIR/feature-gate.rs:65:12\n+  --> $DIR/feature-gate.rs:67:12\n    |\n LL |         () if let 0 = 1 => {}\n    |            ^^^^^^^^^^^^\n@@ -203,14 +215,14 @@ LL |     use_expr!((let 0 = 1 && 0 == 0));\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:61:16\n+  --> $DIR/feature-gate.rs:62:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n-error: aborting due to 23 previous errors\n+error: aborting due to 25 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "36b730505c29eeebc17569eb369d29ea9a9a8db1", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.rs", "status": "modified", "additions": 71, "deletions": 17, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -81,9 +81,11 @@ fn _macros() {\n     use_expr!((let 0 = 1 && 0 == 0));\n     //~^ ERROR `let` expressions are not supported here\n     //~| ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n     use_expr!((let 0 = 1));\n     //~^ ERROR `let` expressions are not supported here\n     //~| ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n }\n \n fn nested_within_if_expr() {\n@@ -147,7 +149,8 @@ fn nested_within_if_expr() {\n     //~| ERROR mismatched types\n     //~| ERROR mismatched types\n \n-    if let true = let true = true {} //~ ERROR `let` expressions are not supported here\n+    if let true = let true = true {}\n+    //~^ ERROR `let` expressions are not supported here\n }\n \n fn nested_within_while_expr() {\n@@ -211,7 +214,8 @@ fn nested_within_while_expr() {\n     //~| ERROR mismatched types\n     //~| ERROR mismatched types\n \n-    while let true = let true = true {} //~ ERROR `let` expressions are not supported here\n+    while let true = let true = true {}\n+    //~^ ERROR `let` expressions are not supported here\n }\n \n fn not_error_because_clarified_intent() {\n@@ -225,45 +229,85 @@ fn not_error_because_clarified_intent() {\n }\n \n fn outside_if_and_while_expr() {\n-    &let 0 = 0; //~ ERROR `let` expressions are not supported here\n+    &let 0 = 0;\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n \n-    !let 0 = 0; //~ ERROR `let` expressions are not supported here\n-    *let 0 = 0; //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR type `bool` cannot be dereferenced\n-    -let 0 = 0; //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR cannot apply unary operator `-` to type `bool`\n+    !let 0 = 0;\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    *let 0 = 0;\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR type `bool` cannot be dereferenced\n+    //~| ERROR expected expression, found `let` statement\n+    -let 0 = 0;\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR cannot apply unary operator `-` to type `bool`\n+    //~| ERROR expected expression, found `let` statement\n \n     fn _check_try_binds_tighter() -> Result<(), ()> {\n         let 0 = 0?;\n         //~^ ERROR the `?` operator can only be applied to values that implement `Try`\n         Ok(())\n     }\n-    (let 0 = 0)?; //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR the `?` operator can only be used in a function that returns `Result`\n+    (let 0 = 0)?;\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR the `?` operator can only be used in a function that returns `Result`\n     //~| ERROR the `?` operator can only be applied to values that implement `Try`\n+    //~| ERROR expected expression, found `let` statement\n \n-    true || let 0 = 0; //~ ERROR `let` expressions are not supported here\n-    (true || let 0 = 0); //~ ERROR `let` expressions are not supported here\n-    true && (true || let 0 = 0); //~ ERROR `let` expressions are not supported here\n+    true || let 0 = 0;\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    (true || let 0 = 0);\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    true && (true || let 0 = 0);\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n \n     let mut x = true;\n-    x = let 0 = 0; //~ ERROR `let` expressions are not supported here\n+    x = let 0 = 0;\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n \n-    true..(let 0 = 0); //~ ERROR `let` expressions are not supported here\n-    ..(let 0 = 0); //~ ERROR `let` expressions are not supported here\n-    (let 0 = 0)..; //~ ERROR `let` expressions are not supported here\n+    true..(let 0 = 0);\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    ..(let 0 = 0);\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    (let 0 = 0)..;\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n \n     (let Range { start: _, end: _ } = true..true || false);\n     //~^ ERROR `let` expressions are not supported here\n     //~| ERROR mismatched types\n+    //~| ERROR expected expression, found `let` statement\n \n     (let true = let true = true);\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    //~| ERROR expected expression, found `let` statement\n+\n+    {\n+        #[cfg(FALSE)]\n+        let x = true && let y = 1;\n+        //~^ ERROR expected expression, found `let` statement\n+    }\n+\n+    #[cfg(FALSE)]\n+    {\n+        [1, 2, 3][let _ = ()]\n+        //~^ ERROR expected expression, found `let` statement\n+    }\n \n     // Check function tail position.\n     &let 0 = 0\n     //~^ ERROR `let` expressions are not supported here\n     //~| ERROR mismatched types\n+    //~| ERROR expected expression, found `let` statement\n }\n \n // Let's make sure that `let` inside const generic arguments are considered.\n@@ -335,4 +379,14 @@ fn with_parenthesis() {\n     let fun = || true;\n     if let true = (true && fun()) && (true) {\n     }\n+\n+    #[cfg(FALSE)]\n+    let x = (true && let y = 1);\n+    //~^ ERROR expected expression, found `let` statement\n+\n+    #[cfg(FALSE)]\n+    {\n+        ([1, 2, 3][let _ = ()])\n+        //~^ ERROR expected expression, found `let` statement\n+    }\n }"}, {"sha": "5cf06cf4b27cd42c60a28e63cbf42a599aa1bee1", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 287, "deletions": 155, "changes": 442, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -1,5 +1,113 @@\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:232:6\n+   |\n+LL |     &let 0 = 0;\n+   |      ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:236:6\n+   |\n+LL |     !let 0 = 0;\n+   |      ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:239:6\n+   |\n+LL |     *let 0 = 0;\n+   |      ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:243:6\n+   |\n+LL |     -let 0 = 0;\n+   |      ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:253:6\n+   |\n+LL |     (let 0 = 0)?;\n+   |      ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:259:13\n+   |\n+LL |     true || let 0 = 0;\n+   |             ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:262:14\n+   |\n+LL |     (true || let 0 = 0);\n+   |              ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:265:22\n+   |\n+LL |     true && (true || let 0 = 0);\n+   |                      ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:270:9\n+   |\n+LL |     x = let 0 = 0;\n+   |         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:274:12\n+   |\n+LL |     true..(let 0 = 0);\n+   |            ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:277:8\n+   |\n+LL |     ..(let 0 = 0);\n+   |        ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:280:6\n+   |\n+LL |     (let 0 = 0)..;\n+   |      ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:284:6\n+   |\n+LL |     (let Range { start: _, end: _ } = true..true || false);\n+   |      ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:289:6\n+   |\n+LL |     (let true = let true = true);\n+   |      ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:289:17\n+   |\n+LL |     (let true = let true = true);\n+   |                 ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:296:25\n+   |\n+LL |         let x = true && let y = 1;\n+   |                         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:302:19\n+   |\n+LL |         [1, 2, 3][let _ = ()]\n+   |                   ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:307:6\n+   |\n+LL |     &let 0 = 0\n+   |      ^^^\n+\n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/disallowed-positions.rs:293:9\n+  --> $DIR/disallowed-positions.rs:337:9\n    |\n LL |         true && let 1 = 1\n    |         ^^^^^^^^^^^^^^^^^\n@@ -9,6 +117,30 @@ help: enclose the `const` expression in braces\n LL |         { true && let 1 = 1 }\n    |         +                   +\n \n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:384:22\n+   |\n+LL |     let x = (true && let y = 1);\n+   |                      ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:389:20\n+   |\n+LL |         ([1, 2, 3][let _ = ()])\n+   |                    ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:81:16\n+   |\n+LL |     use_expr!((let 0 = 1 && 0 == 0));\n+   |                ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:85:16\n+   |\n+LL |     use_expr!((let 0 = 1));\n+   |                ^^^\n+\n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:29:9\n    |\n@@ -270,710 +402,710 @@ LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:84:16\n+  --> $DIR/disallowed-positions.rs:85:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:84:16\n+  --> $DIR/disallowed-positions.rs:85:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:84:16\n+  --> $DIR/disallowed-positions.rs:85:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:84:16\n+  --> $DIR/disallowed-positions.rs:85:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:90:9\n+  --> $DIR/disallowed-positions.rs:92:9\n    |\n LL |     if &let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:93:9\n+  --> $DIR/disallowed-positions.rs:95:9\n    |\n LL |     if !let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:94:9\n+  --> $DIR/disallowed-positions.rs:96:9\n    |\n LL |     if *let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:96:9\n+  --> $DIR/disallowed-positions.rs:98:9\n    |\n LL |     if -let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:104:9\n+  --> $DIR/disallowed-positions.rs:106:9\n    |\n LL |     if (let 0 = 0)? {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:104:9\n+  --> $DIR/disallowed-positions.rs:106:9\n    |\n LL |     if (let 0 = 0)? {}\n    |         ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:108:16\n+  --> $DIR/disallowed-positions.rs:110:16\n    |\n LL |     if true || let 0 = 0 {}\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:108:13\n+  --> $DIR/disallowed-positions.rs:110:13\n    |\n LL |     if true || let 0 = 0 {}\n    |             ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:109:17\n+  --> $DIR/disallowed-positions.rs:111:17\n    |\n LL |     if (true || let 0 = 0) {}\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:109:14\n+  --> $DIR/disallowed-positions.rs:111:14\n    |\n LL |     if (true || let 0 = 0) {}\n    |              ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:110:25\n+  --> $DIR/disallowed-positions.rs:112:25\n    |\n LL |     if true && (true || let 0 = 0) {}\n    |                         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:110:22\n+  --> $DIR/disallowed-positions.rs:112:22\n    |\n LL |     if true && (true || let 0 = 0) {}\n    |                      ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:111:25\n+  --> $DIR/disallowed-positions.rs:113:25\n    |\n LL |     if true || (true && let 0 = 0) {}\n    |                         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:111:17\n+  --> $DIR/disallowed-positions.rs:113:17\n    |\n LL |     if true || (true && let 0 = 0) {}\n    |                 ^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:114:12\n+  --> $DIR/disallowed-positions.rs:116:12\n    |\n LL |     if x = let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:117:15\n+  --> $DIR/disallowed-positions.rs:119:15\n    |\n LL |     if true..(let 0 = 0) {}\n    |               ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:117:15\n+  --> $DIR/disallowed-positions.rs:119:15\n    |\n LL |     if true..(let 0 = 0) {}\n    |               ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:119:11\n+  --> $DIR/disallowed-positions.rs:121:11\n    |\n LL |     if ..(let 0 = 0) {}\n    |           ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:119:11\n+  --> $DIR/disallowed-positions.rs:121:11\n    |\n LL |     if ..(let 0 = 0) {}\n    |           ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:121:9\n+  --> $DIR/disallowed-positions.rs:123:9\n    |\n LL |     if (let 0 = 0).. {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:121:9\n+  --> $DIR/disallowed-positions.rs:123:9\n    |\n LL |     if (let 0 = 0).. {}\n    |         ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:125:8\n+  --> $DIR/disallowed-positions.rs:127:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:129:8\n+  --> $DIR/disallowed-positions.rs:131:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:136:8\n+  --> $DIR/disallowed-positions.rs:138:8\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:144:8\n+  --> $DIR/disallowed-positions.rs:146:8\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:150:19\n+  --> $DIR/disallowed-positions.rs:152:19\n    |\n LL |     if let true = let true = true {}\n    |                   ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:154:12\n+  --> $DIR/disallowed-positions.rs:157:12\n    |\n LL |     while &let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:157:12\n+  --> $DIR/disallowed-positions.rs:160:12\n    |\n LL |     while !let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:158:12\n+  --> $DIR/disallowed-positions.rs:161:12\n    |\n LL |     while *let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:160:12\n+  --> $DIR/disallowed-positions.rs:163:12\n    |\n LL |     while -let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:168:12\n+  --> $DIR/disallowed-positions.rs:171:12\n    |\n LL |     while (let 0 = 0)? {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:168:12\n+  --> $DIR/disallowed-positions.rs:171:12\n    |\n LL |     while (let 0 = 0)? {}\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:172:19\n+  --> $DIR/disallowed-positions.rs:175:19\n    |\n LL |     while true || let 0 = 0 {}\n    |                   ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:172:16\n+  --> $DIR/disallowed-positions.rs:175:16\n    |\n LL |     while true || let 0 = 0 {}\n    |                ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:173:20\n+  --> $DIR/disallowed-positions.rs:176:20\n    |\n LL |     while (true || let 0 = 0) {}\n    |                    ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:173:17\n+  --> $DIR/disallowed-positions.rs:176:17\n    |\n LL |     while (true || let 0 = 0) {}\n    |                 ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:174:28\n+  --> $DIR/disallowed-positions.rs:177:28\n    |\n LL |     while true && (true || let 0 = 0) {}\n    |                            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:174:25\n+  --> $DIR/disallowed-positions.rs:177:25\n    |\n LL |     while true && (true || let 0 = 0) {}\n    |                         ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:175:28\n+  --> $DIR/disallowed-positions.rs:178:28\n    |\n LL |     while true || (true && let 0 = 0) {}\n    |                            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:175:20\n+  --> $DIR/disallowed-positions.rs:178:20\n    |\n LL |     while true || (true && let 0 = 0) {}\n    |                    ^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:178:15\n+  --> $DIR/disallowed-positions.rs:181:15\n    |\n LL |     while x = let 0 = 0 {}\n    |               ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:181:18\n+  --> $DIR/disallowed-positions.rs:184:18\n    |\n LL |     while true..(let 0 = 0) {}\n    |                  ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:181:18\n+  --> $DIR/disallowed-positions.rs:184:18\n    |\n LL |     while true..(let 0 = 0) {}\n    |                  ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:183:14\n+  --> $DIR/disallowed-positions.rs:186:14\n    |\n LL |     while ..(let 0 = 0) {}\n    |              ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:183:14\n+  --> $DIR/disallowed-positions.rs:186:14\n    |\n LL |     while ..(let 0 = 0) {}\n    |              ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:185:12\n+  --> $DIR/disallowed-positions.rs:188:12\n    |\n LL |     while (let 0 = 0).. {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:185:12\n+  --> $DIR/disallowed-positions.rs:188:12\n    |\n LL |     while (let 0 = 0).. {}\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:189:11\n+  --> $DIR/disallowed-positions.rs:192:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:193:11\n+  --> $DIR/disallowed-positions.rs:196:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:200:11\n+  --> $DIR/disallowed-positions.rs:203:11\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:208:11\n+  --> $DIR/disallowed-positions.rs:211:11\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:214:22\n+  --> $DIR/disallowed-positions.rs:217:22\n    |\n LL |     while let true = let true = true {}\n    |                      ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:228:6\n+  --> $DIR/disallowed-positions.rs:232:6\n    |\n LL |     &let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:230:6\n+  --> $DIR/disallowed-positions.rs:236:6\n    |\n LL |     !let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:231:6\n+  --> $DIR/disallowed-positions.rs:239:6\n    |\n LL |     *let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:233:6\n+  --> $DIR/disallowed-positions.rs:243:6\n    |\n LL |     -let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:241:6\n+  --> $DIR/disallowed-positions.rs:253:6\n    |\n LL |     (let 0 = 0)?;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:241:6\n+  --> $DIR/disallowed-positions.rs:253:6\n    |\n LL |     (let 0 = 0)?;\n    |      ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:245:13\n+  --> $DIR/disallowed-positions.rs:259:13\n    |\n LL |     true || let 0 = 0;\n    |             ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:245:10\n+  --> $DIR/disallowed-positions.rs:259:10\n    |\n LL |     true || let 0 = 0;\n    |          ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:246:14\n+  --> $DIR/disallowed-positions.rs:262:14\n    |\n LL |     (true || let 0 = 0);\n    |              ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:246:11\n+  --> $DIR/disallowed-positions.rs:262:11\n    |\n LL |     (true || let 0 = 0);\n    |           ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:247:22\n+  --> $DIR/disallowed-positions.rs:265:22\n    |\n LL |     true && (true || let 0 = 0);\n    |                      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:247:19\n+  --> $DIR/disallowed-positions.rs:265:19\n    |\n LL |     true && (true || let 0 = 0);\n    |                   ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:250:9\n+  --> $DIR/disallowed-positions.rs:270:9\n    |\n LL |     x = let 0 = 0;\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:252:12\n+  --> $DIR/disallowed-positions.rs:274:12\n    |\n LL |     true..(let 0 = 0);\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:252:12\n+  --> $DIR/disallowed-positions.rs:274:12\n    |\n LL |     true..(let 0 = 0);\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:253:8\n+  --> $DIR/disallowed-positions.rs:277:8\n    |\n LL |     ..(let 0 = 0);\n    |        ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:253:8\n+  --> $DIR/disallowed-positions.rs:277:8\n    |\n LL |     ..(let 0 = 0);\n    |        ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:254:6\n+  --> $DIR/disallowed-positions.rs:280:6\n    |\n LL |     (let 0 = 0)..;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:254:6\n+  --> $DIR/disallowed-positions.rs:280:6\n    |\n LL |     (let 0 = 0)..;\n    |      ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:256:6\n+  --> $DIR/disallowed-positions.rs:284:6\n    |\n LL |     (let Range { start: _, end: _ } = true..true || false);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:260:6\n+  --> $DIR/disallowed-positions.rs:289:6\n    |\n LL |     (let true = let true = true);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:260:6\n+  --> $DIR/disallowed-positions.rs:289:6\n    |\n LL |     (let true = let true = true);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:264:6\n+  --> $DIR/disallowed-positions.rs:307:6\n    |\n LL |     &let 0 = 0\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:275:17\n+  --> $DIR/disallowed-positions.rs:319:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:279:17\n+  --> $DIR/disallowed-positions.rs:323:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:283:17\n+  --> $DIR/disallowed-positions.rs:327:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:293:17\n+  --> $DIR/disallowed-positions.rs:337:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:302:9\n+  --> $DIR/disallowed-positions.rs:346:9\n    |\n LL |     if (let Some(a) = opt && true) {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:302:9\n+  --> $DIR/disallowed-positions.rs:346:9\n    |\n LL |     if (let Some(a) = opt && true) {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:306:9\n+  --> $DIR/disallowed-positions.rs:350:9\n    |\n LL |     if (let Some(a) = opt) && true {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:306:9\n+  --> $DIR/disallowed-positions.rs:350:9\n    |\n LL |     if (let Some(a) = opt) && true {\n    |         ^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:309:9\n+  --> $DIR/disallowed-positions.rs:353:9\n    |\n LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:309:9\n+  --> $DIR/disallowed-positions.rs:353:9\n    |\n LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n    |         ^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:309:32\n+  --> $DIR/disallowed-positions.rs:353:32\n    |\n LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n    |                                ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:309:32\n+  --> $DIR/disallowed-positions.rs:353:32\n    |\n LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n    |                                ^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:316:9\n+  --> $DIR/disallowed-positions.rs:360:9\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:316:9\n+  --> $DIR/disallowed-positions.rs:360:9\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:316:31\n+  --> $DIR/disallowed-positions.rs:360:31\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    |                               ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:316:31\n+  --> $DIR/disallowed-positions.rs:360:31\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    |                               ^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:320:9\n+  --> $DIR/disallowed-positions.rs:364:9\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:320:9\n+  --> $DIR/disallowed-positions.rs:364:9\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:320:31\n+  --> $DIR/disallowed-positions.rs:364:31\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n    |                               ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:320:31\n+  --> $DIR/disallowed-positions.rs:364:31\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n    |                               ^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:324:9\n+  --> $DIR/disallowed-positions.rs:368:9\n    |\n LL |     if (let Some(a) = opt && (true)) && true {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:324:9\n+  --> $DIR/disallowed-positions.rs:368:9\n    |\n LL |     if (let Some(a) = opt && (true)) && true {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:90:8\n+  --> $DIR/disallowed-positions.rs:92:8\n    |\n LL |     if &let 0 = 0 {}\n    |        ^^^^^^^^^^ expected `bool`, found `&bool`\n@@ -985,27 +1117,27 @@ LL +     if let 0 = 0 {}\n    |\n \n error[E0614]: type `bool` cannot be dereferenced\n-  --> $DIR/disallowed-positions.rs:94:8\n+  --> $DIR/disallowed-positions.rs:96:8\n    |\n LL |     if *let 0 = 0 {}\n    |        ^^^^^^^^^^\n \n error[E0600]: cannot apply unary operator `-` to type `bool`\n-  --> $DIR/disallowed-positions.rs:96:8\n+  --> $DIR/disallowed-positions.rs:98:8\n    |\n LL |     if -let 0 = 0 {}\n    |        ^^^^^^^^^^ cannot apply unary operator `-`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:104:8\n+  --> $DIR/disallowed-positions.rs:106:8\n    |\n LL |     if (let 0 = 0)? {}\n    |        ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n-  --> $DIR/disallowed-positions.rs:104:19\n+  --> $DIR/disallowed-positions.rs:106:19\n    |\n LL | / fn nested_within_if_expr() {\n LL | |     if &let 0 = 0 {}\n@@ -1015,14 +1147,14 @@ LL | |\n LL | |     if (let 0 = 0)? {}\n    | |                   ^ cannot use the `?` operator in a function that returns `()`\n ...  |\n-LL | |     if let true = let true = true {}\n+LL | |\n LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:114:8\n+  --> $DIR/disallowed-positions.rs:116:8\n    |\n LL |     if x = let 0 = 0 {}\n    |        ^^^^^^^^^^^^^ expected `bool`, found `()`\n@@ -1033,7 +1165,7 @@ LL |     if x == let 0 = 0 {}\n    |          ~~\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:117:8\n+  --> $DIR/disallowed-positions.rs:119:8\n    |\n LL |     if true..(let 0 = 0) {}\n    |        ^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1042,7 +1174,7 @@ LL |     if true..(let 0 = 0) {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:119:8\n+  --> $DIR/disallowed-positions.rs:121:8\n    |\n LL |     if ..(let 0 = 0) {}\n    |        ^^^^^^^^^^^^^ expected `bool`, found struct `RangeTo`\n@@ -1051,7 +1183,7 @@ LL |     if ..(let 0 = 0) {}\n             found struct `RangeTo<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:121:8\n+  --> $DIR/disallowed-positions.rs:123:8\n    |\n LL |     if (let 0 = 0).. {}\n    |        ^^^^^^^^^^^^^ expected `bool`, found struct `RangeFrom`\n@@ -1060,7 +1192,7 @@ LL |     if (let 0 = 0).. {}\n             found struct `RangeFrom<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:125:12\n+  --> $DIR/disallowed-positions.rs:127:12\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1071,7 +1203,7 @@ LL |     if let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:125:8\n+  --> $DIR/disallowed-positions.rs:127:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1080,7 +1212,7 @@ LL |     if let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:129:12\n+  --> $DIR/disallowed-positions.rs:131:12\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1091,7 +1223,7 @@ LL |     if let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:129:8\n+  --> $DIR/disallowed-positions.rs:131:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1100,7 +1232,7 @@ LL |     if let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:136:12\n+  --> $DIR/disallowed-positions.rs:138:12\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `fn() -> bool`\n@@ -1111,20 +1243,20 @@ LL |     if let Range { start: F, end } = F..|| true {}\n                   found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:136:41\n+  --> $DIR/disallowed-positions.rs:138:41\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |                                         ^^^^^^^ expected `bool`, found closure\n    |\n    = note: expected type `bool`\n-           found closure `[closure@$DIR/disallowed-positions.rs:136:41: 136:48]`\n+           found closure `[closure@$DIR/disallowed-positions.rs:138:41: 138:48]`\n help: use parentheses to call this closure\n    |\n LL |     if let Range { start: F, end } = F..(|| true)() {}\n    |                                         +       +++\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:136:8\n+  --> $DIR/disallowed-positions.rs:138:8\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1133,7 +1265,7 @@ LL |     if let Range { start: F, end } = F..|| true {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:144:12\n+  --> $DIR/disallowed-positions.rs:146:12\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `&&bool`\n@@ -1144,7 +1276,7 @@ LL |     if let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:144:44\n+  --> $DIR/disallowed-positions.rs:146:44\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |                                            ^^^^^^^ expected `bool`, found `&&bool`\n@@ -1156,7 +1288,7 @@ LL +     if let Range { start: true, end } = t..false {}\n    |\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:144:8\n+  --> $DIR/disallowed-positions.rs:146:8\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1165,15 +1297,15 @@ LL |     if let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:100:20\n+  --> $DIR/disallowed-positions.rs:102:20\n    |\n LL |         if let 0 = 0? {}\n    |                    ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:154:11\n+  --> $DIR/disallowed-positions.rs:157:11\n    |\n LL |     while &let 0 = 0 {}\n    |           ^^^^^^^^^^ expected `bool`, found `&bool`\n@@ -1185,27 +1317,27 @@ LL +     while let 0 = 0 {}\n    |\n \n error[E0614]: type `bool` cannot be dereferenced\n-  --> $DIR/disallowed-positions.rs:158:11\n+  --> $DIR/disallowed-positions.rs:161:11\n    |\n LL |     while *let 0 = 0 {}\n    |           ^^^^^^^^^^\n \n error[E0600]: cannot apply unary operator `-` to type `bool`\n-  --> $DIR/disallowed-positions.rs:160:11\n+  --> $DIR/disallowed-positions.rs:163:11\n    |\n LL |     while -let 0 = 0 {}\n    |           ^^^^^^^^^^ cannot apply unary operator `-`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:168:11\n+  --> $DIR/disallowed-positions.rs:171:11\n    |\n LL |     while (let 0 = 0)? {}\n    |           ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n-  --> $DIR/disallowed-positions.rs:168:22\n+  --> $DIR/disallowed-positions.rs:171:22\n    |\n LL | / fn nested_within_while_expr() {\n LL | |     while &let 0 = 0 {}\n@@ -1215,14 +1347,14 @@ LL | |\n LL | |     while (let 0 = 0)? {}\n    | |                      ^ cannot use the `?` operator in a function that returns `()`\n ...  |\n-LL | |     while let true = let true = true {}\n+LL | |\n LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:178:11\n+  --> $DIR/disallowed-positions.rs:181:11\n    |\n LL |     while x = let 0 = 0 {}\n    |           ^^^^^^^^^^^^^ expected `bool`, found `()`\n@@ -1233,7 +1365,7 @@ LL |     while x == let 0 = 0 {}\n    |             ~~\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:181:11\n+  --> $DIR/disallowed-positions.rs:184:11\n    |\n LL |     while true..(let 0 = 0) {}\n    |           ^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1242,7 +1374,7 @@ LL |     while true..(let 0 = 0) {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:183:11\n+  --> $DIR/disallowed-positions.rs:186:11\n    |\n LL |     while ..(let 0 = 0) {}\n    |           ^^^^^^^^^^^^^ expected `bool`, found struct `RangeTo`\n@@ -1251,7 +1383,7 @@ LL |     while ..(let 0 = 0) {}\n             found struct `RangeTo<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:185:11\n+  --> $DIR/disallowed-positions.rs:188:11\n    |\n LL |     while (let 0 = 0).. {}\n    |           ^^^^^^^^^^^^^ expected `bool`, found struct `RangeFrom`\n@@ -1260,7 +1392,7 @@ LL |     while (let 0 = 0).. {}\n             found struct `RangeFrom<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:189:15\n+  --> $DIR/disallowed-positions.rs:192:15\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1271,7 +1403,7 @@ LL |     while let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:189:11\n+  --> $DIR/disallowed-positions.rs:192:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1280,7 +1412,7 @@ LL |     while let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:193:15\n+  --> $DIR/disallowed-positions.rs:196:15\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1291,7 +1423,7 @@ LL |     while let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:193:11\n+  --> $DIR/disallowed-positions.rs:196:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1300,7 +1432,7 @@ LL |     while let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:200:15\n+  --> $DIR/disallowed-positions.rs:203:15\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `fn() -> bool`\n@@ -1311,20 +1443,20 @@ LL |     while let Range { start: F, end } = F..|| true {}\n                   found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:200:44\n+  --> $DIR/disallowed-positions.rs:203:44\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |                                            ^^^^^^^ expected `bool`, found closure\n    |\n    = note: expected type `bool`\n-           found closure `[closure@$DIR/disallowed-positions.rs:200:44: 200:51]`\n+           found closure `[closure@$DIR/disallowed-positions.rs:203:44: 203:51]`\n help: use parentheses to call this closure\n    |\n LL |     while let Range { start: F, end } = F..(|| true)() {}\n    |                                            +       +++\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:200:11\n+  --> $DIR/disallowed-positions.rs:203:11\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1333,7 +1465,7 @@ LL |     while let Range { start: F, end } = F..|| true {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:208:15\n+  --> $DIR/disallowed-positions.rs:211:15\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `&&bool`\n@@ -1344,7 +1476,7 @@ LL |     while let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:208:47\n+  --> $DIR/disallowed-positions.rs:211:47\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |                                               ^^^^^^^ expected `bool`, found `&&bool`\n@@ -1356,7 +1488,7 @@ LL +     while let Range { start: true, end } = t..false {}\n    |\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:208:11\n+  --> $DIR/disallowed-positions.rs:211:11\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1365,40 +1497,40 @@ LL |     while let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:164:23\n+  --> $DIR/disallowed-positions.rs:167:23\n    |\n LL |         while let 0 = 0? {}\n    |                       ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n \n error[E0614]: type `bool` cannot be dereferenced\n-  --> $DIR/disallowed-positions.rs:231:5\n+  --> $DIR/disallowed-positions.rs:239:5\n    |\n LL |     *let 0 = 0;\n    |     ^^^^^^^^^^\n \n error[E0600]: cannot apply unary operator `-` to type `bool`\n-  --> $DIR/disallowed-positions.rs:233:5\n+  --> $DIR/disallowed-positions.rs:243:5\n    |\n LL |     -let 0 = 0;\n    |     ^^^^^^^^^^ cannot apply unary operator `-`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:241:5\n+  --> $DIR/disallowed-positions.rs:253:5\n    |\n LL |     (let 0 = 0)?;\n    |     ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n-  --> $DIR/disallowed-positions.rs:241:16\n+  --> $DIR/disallowed-positions.rs:253:16\n    |\n LL | / fn outside_if_and_while_expr() {\n LL | |     &let 0 = 0;\n LL | |\n-LL | |     !let 0 = 0;\n+LL | |\n ...  |\n LL | |     (let 0 = 0)?;\n    | |                ^ cannot use the `?` operator in a function that returns `()`\n@@ -1410,7 +1542,7 @@ LL | | }\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:256:10\n+  --> $DIR/disallowed-positions.rs:284:10\n    |\n LL |     (let Range { start: _, end: _ } = true..true || false);\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1421,7 +1553,7 @@ LL |     (let Range { start: _, end: _ } = true..true || false);\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:264:5\n+  --> $DIR/disallowed-positions.rs:307:5\n    |\n LL | fn outside_if_and_while_expr() {\n    |                                - help: try adding a return type: `-> &bool`\n@@ -1430,14 +1562,14 @@ LL |     &let 0 = 0\n    |     ^^^^^^^^^^ expected `()`, found `&bool`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:237:17\n+  --> $DIR/disallowed-positions.rs:249:17\n    |\n LL |         let 0 = 0?;\n    |                 ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n \n-error: aborting due to 134 previous errors\n+error: aborting due to 156 previous errors\n \n Some errors have detailed explanations: E0277, E0308, E0600, E0614.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "12befc637c787b5d5dcc6c78d9eac342bda7a50d", "filename": "src/test/ui/rfc-2497-if-let-chains/ensure-that-let-else-does-not-interact-with-let-chains.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.rs?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -17,6 +17,7 @@ fn main() {\n     //~| ERROR `let` expressions are not supported here\n     //~| ERROR mismatched types\n     //~| ERROR mismatched types\n+    //~| ERROR expected expression, found `let` statement\n         return;\n     };\n "}, {"sha": "498a112fa9bb3f7434e6031827821cf9ba38bb69", "filename": "src/test/ui/rfc-2497-if-let-chains/ensure-that-let-else-does-not-interact-with-let-chains.stderr", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -9,6 +9,12 @@ help: wrap the expression in parentheses\n LL |     let Some(n) = (opt && n == 1) else {\n    |                   +             +\n \n+error: expected expression, found `let` statement\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:15:26\n+   |\n+LL |     let Some(n) = opt && let another = n else {\n+   |                          ^^^\n+\n error: a `&&` expression cannot be directly assigned in `let...else`\n   --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:15:19\n    |\n@@ -21,43 +27,43 @@ LL |     let Some(n) = (opt && let another = n) else {\n    |                   +                      +\n \n error: this `if` expression is missing a block after the condition\n-  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:23:5\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:24:5\n    |\n LL |     if let Some(n) = opt else {\n    |     ^^\n    |\n help: add a block here\n-  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:23:25\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:24:25\n    |\n LL |     if let Some(n) = opt else {\n    |                         ^\n \n error: this `if` expression is missing a block after the condition\n-  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:27:5\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:28:5\n    |\n LL |     if let Some(n) = opt && n == 1 else {\n    |     ^^\n    |\n help: add a block here\n-  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:27:35\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:28:35\n    |\n LL |     if let Some(n) = opt && n == 1 else {\n    |                                   ^\n \n error: this `if` expression is missing a block after the condition\n-  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:31:5\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:32:5\n    |\n LL |     if let Some(n) = opt && let another = n else {\n    |     ^^\n    |\n help: add a block here\n-  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:31:44\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:32:44\n    |\n LL |     if let Some(n) = opt && let another = n else {\n    |                                            ^\n \n error: expected `{`, found keyword `else`\n-  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:37:33\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:38:33\n    |\n LL |         while let Some(n) = opt else {\n    |         ----- ----------------- ^^^^ expected `{`\n@@ -66,7 +72,7 @@ LL |         while let Some(n) = opt else {\n    |         while parsing the body of this `while` expression\n \n error: expected `{`, found keyword `else`\n-  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:43:43\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:44:43\n    |\n LL |         while let Some(n) = opt && n == 1 else {\n    |         ----- --------------------------- ^^^^ expected `{`\n@@ -75,7 +81,7 @@ LL |         while let Some(n) = opt && n == 1 else {\n    |         while parsing the body of this `while` expression\n \n error: expected `{`, found keyword `else`\n-  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:49:52\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:50:52\n    |\n LL |         while let Some(n) = opt && let another = n else {\n    |         ----- ------------------------------------ ^^^^ expected `{`\n@@ -131,6 +137,6 @@ LL |     let Some(n) = opt && let another = n else {\n    = note: expected type `bool`\n               found enum `Option<_>`\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 14 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "87718211308484ce64f128fc7fd162a2ca56d753", "filename": "src/test/ui/rfc-2497-if-let-chains/feature-gate.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -39,6 +39,7 @@ fn _macros() {\n \n     noop_expr!((let 0 = 1));\n     //~^ ERROR `let` expressions in this position are unstable [E0658]\n+    //~| ERROR expected expression, found `let` statement\n \n     macro_rules! use_expr {\n         ($e:expr) => {\n@@ -48,9 +49,9 @@ fn _macros() {\n     }\n     #[cfg(FALSE)] (let 0 = 1);\n     //~^ ERROR `let` expressions in this position are unstable [E0658]\n+    //~| ERROR expected expression, found `let` statement\n     use_expr!(let 0 = 1);\n     //~^ ERROR no rules expected the token `let`\n-    // ^--- FIXME(53667): Consider whether `Let` can be added to `ident_can_begin_expr`.\n }\n \n fn main() {}"}, {"sha": "bcea8bbaa730bfc6e895cb21a1d6d32f5848367f", "filename": "src/test/ui/rfc-2497-if-let-chains/feature-gate.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -1,5 +1,17 @@\n+error: expected expression, found `let` statement\n+  --> $DIR/feature-gate.rs:50:20\n+   |\n+LL |     #[cfg(FALSE)] (let 0 = 1);\n+   |                    ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/feature-gate.rs:40:17\n+   |\n+LL |     noop_expr!((let 0 = 1));\n+   |                 ^^^\n+\n error: no rules expected the token `let`\n-  --> $DIR/feature-gate.rs:51:15\n+  --> $DIR/feature-gate.rs:53:15\n    |\n LL |     macro_rules! use_expr {\n    |     --------------------- when calling this macro\n@@ -62,7 +74,7 @@ LL |     while let Range { start: _, end: _ } = (true..true) && false {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:49:20\n+  --> $DIR/feature-gate.rs:50:20\n    |\n LL |     #[cfg(FALSE)] (let 0 = 1);\n    |                    ^^^^^^^^^\n@@ -79,6 +91,6 @@ LL |     noop_expr!((let 0 = 1));\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 11 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "6cc53a1935b9556a5d1dff07ea6d965f3d757a74", "filename": "src/test/ui/rfc-2497-if-let-chains/invalid-let-in-a-valid-let-context.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Finvalid-let-in-a-valid-let-context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Finvalid-let-in-a-valid-let-context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Finvalid-let-in-a-valid-let-context.rs?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+// known-bug\n+\n+#![feature(let_chains)]\n+\n+fn main() {\n+    let _opt = Some(1i32);\n+\n+    #[cfg(FALSE)]\n+    {\n+        if let Some(elem) = _opt && {\n+            [1, 2, 3][let _ = ()];\n+            true\n+        } {\n+        }\n+    }\n+}"}, {"sha": "c5d86bd637b2b8e1dd7c37ff2a7adb2b0b0543b1", "filename": "src/test/ui/traits/issue-87558.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Ftraits%2Fissue-87558.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Ftraits%2Fissue-87558.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-87558.rs?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -0,0 +1,9 @@\n+struct ErrorKind;\n+struct Error(ErrorKind);\n+impl Fn(&isize) for Error {\n+    //~^ ERROR manual implementations of `Fn` are experimental\n+    //~| ERROR associated type bindings are not allowed here\n+    fn from() {} //~ ERROR method `from` is not a member of trait `Fn`\n+}\n+\n+fn main() {}"}, {"sha": "494274d8c3075b1c35975f87d622e29b2e8b4c77", "filename": "src/test/ui/traits/issue-87558.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Ftraits%2Fissue-87558.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80c4b8fdcf3da69cd483e2fec172c9b1f95842c/src%2Ftest%2Fui%2Ftraits%2Fissue-87558.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-87558.stderr?ref=c80c4b8fdcf3da69cd483e2fec172c9b1f95842c", "patch": "@@ -0,0 +1,24 @@\n+error[E0407]: method `from` is not a member of trait `Fn`\n+  --> $DIR/issue-87558.rs:6:5\n+   |\n+LL |     fn from() {}\n+   |     ^^^^^^^^^^^^ not a member of trait `Fn`\n+\n+error[E0183]: manual implementations of `Fn` are experimental\n+  --> $DIR/issue-87558.rs:3:6\n+   |\n+LL | impl Fn(&isize) for Error {\n+   |      ^^^^^^^^^^ manual implementations of `Fn` are experimental\n+   |\n+   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n+\n+error[E0229]: associated type bindings are not allowed here\n+  --> $DIR/issue-87558.rs:3:6\n+   |\n+LL | impl Fn(&isize) for Error {\n+   |      ^^^^^^^^^^ associated type not allowed here\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0183, E0229, E0407.\n+For more information about an error, try `rustc --explain E0183`."}]}