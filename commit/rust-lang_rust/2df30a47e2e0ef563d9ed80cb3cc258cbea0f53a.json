{"sha": "2df30a47e2e0ef563d9ed80cb3cc258cbea0f53a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZjMwYTQ3ZTJlMGVmNTYzZDllZDgwY2IzY2MyNThjYmVhMGY1M2E=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-15T04:20:43Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-19T15:51:00Z"}, "message": "libserialize: use `#[deriving(Copy)]`", "tree": {"sha": "ecceb5c02b019d5c4359ef0cb8cf438ce545231f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecceb5c02b019d5c4359ef0cb8cf438ce545231f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2df30a47e2e0ef563d9ed80cb3cc258cbea0f53a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2df30a47e2e0ef563d9ed80cb3cc258cbea0f53a", "html_url": "https://github.com/rust-lang/rust/commit/2df30a47e2e0ef563d9ed80cb3cc258cbea0f53a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2df30a47e2e0ef563d9ed80cb3cc258cbea0f53a/comments", "author": null, "committer": null, "parents": [{"sha": "1d25271e054fdefe5e940ab4cc5e098f47c46966", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d25271e054fdefe5e940ab4cc5e098f47c46966", "html_url": "https://github.com/rust-lang/rust/commit/1d25271e054fdefe5e940ab4cc5e098f47c46966"}], "stats": {"total": 23, "additions": 7, "deletions": 16}, "files": [{"sha": "f1dffa55bb01a29560115192cdf81f35fdc9120b", "filename": "src/libserialize/base64.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2df30a47e2e0ef563d9ed80cb3cc258cbea0f53a/src%2Flibserialize%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df30a47e2e0ef563d9ed80cb3cc258cbea0f53a/src%2Flibserialize%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fbase64.rs?ref=2df30a47e2e0ef563d9ed80cb3cc258cbea0f53a", "patch": "@@ -19,26 +19,25 @@ use std::fmt;\n use std::error;\n \n /// Available encoding character sets\n+#[deriving(Copy)]\n pub enum CharacterSet {\n     /// The standard character set (uses `+` and `/`)\n     Standard,\n     /// The URL safe character set (uses `-` and `_`)\n     UrlSafe\n }\n \n-impl Copy for CharacterSet {}\n-\n /// Available newline types\n+#[deriving(Copy)]\n pub enum Newline {\n     /// A linefeed (i.e. Unix-style newline)\n     LF,\n     /// A carriage return and a linefeed (i.e. Windows-style newline)\n     CRLF\n }\n \n-impl Copy for Newline {}\n-\n /// Contains configuration parameters for `to_base64`.\n+#[deriving(Copy)]\n pub struct Config {\n     /// Character set to use\n     pub char_set: CharacterSet,\n@@ -50,8 +49,6 @@ pub struct Config {\n     pub line_length: Option<uint>\n }\n \n-impl Copy for Config {}\n-\n /// Configuration for RFC 4648 standard base64 encoding\n pub static STANDARD: Config =\n     Config {char_set: Standard, newline: Newline::CRLF, pad: true, line_length: None};\n@@ -180,15 +177,14 @@ pub trait FromBase64 for Sized? {\n }\n \n /// Errors that can occur when decoding a base64 encoded string\n+#[deriving(Copy)]\n pub enum FromBase64Error {\n     /// The input contained a character not part of the base64 format\n     InvalidBase64Byte(u8, uint),\n     /// The input had an invalid length\n     InvalidBase64Length,\n }\n \n-impl Copy for FromBase64Error {}\n-\n impl fmt::Show for FromBase64Error {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {"}, {"sha": "977a31c240bd31e8333ca41439f772b706a3b784", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2df30a47e2e0ef563d9ed80cb3cc258cbea0f53a/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df30a47e2e0ef563d9ed80cb3cc258cbea0f53a/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=2df30a47e2e0ef563d9ed80cb3cc258cbea0f53a", "patch": "@@ -61,15 +61,14 @@ pub trait FromHex for Sized? {\n }\n \n /// Errors that can occur when decoding a hex encoded string\n+#[deriving(Copy)]\n pub enum FromHexError {\n     /// The input contained a character not part of the hex format\n     InvalidHexCharacter(char, uint),\n     /// The input had an invalid length\n     InvalidHexLength,\n }\n \n-impl Copy for FromHexError {}\n-\n impl fmt::Show for FromHexError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {"}, {"sha": "d3d1aa1d788791da44619bd8c2fd8fafab9423bb", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2df30a47e2e0ef563d9ed80cb3cc258cbea0f53a/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df30a47e2e0ef563d9ed80cb3cc258cbea0f53a/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=2df30a47e2e0ef563d9ed80cb3cc258cbea0f53a", "patch": "@@ -226,7 +226,7 @@ pub type Array = Vec<Json>;\n pub type Object = BTreeMap<string::String, Json>;\n \n /// The errors that can arise while parsing a JSON stream.\n-#[deriving(Clone, PartialEq)]\n+#[deriving(Clone, Copy, PartialEq)]\n pub enum ErrorCode {\n     InvalidSyntax,\n     InvalidNumber,\n@@ -247,17 +247,13 @@ pub enum ErrorCode {\n     NotUtf8,\n }\n \n-impl Copy for ErrorCode {}\n-\n-#[deriving(Clone, PartialEq, Show)]\n+#[deriving(Clone, Copy, PartialEq, Show)]\n pub enum ParserError {\n     /// msg, line, col\n     SyntaxError(ErrorCode, uint, uint),\n     IoError(io::IoErrorKind, &'static str),\n }\n \n-impl Copy for ParserError {}\n-\n // Builder and Parser have the same errors.\n pub type BuilderError = ParserError;\n "}]}