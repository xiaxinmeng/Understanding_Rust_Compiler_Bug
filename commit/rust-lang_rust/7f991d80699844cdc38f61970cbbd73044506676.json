{"sha": "7f991d80699844cdc38f61970cbbd73044506676", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmOTkxZDgwNjk5ODQ0Y2RjMzhmNjE5NzBjYmJkNzMwNDQ1MDY2NzY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-09T16:28:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-09T16:28:35Z"}, "message": "Merge #5283\n\n5283: Arg count mismatch diagnostic: Handle tuple struct/variant ctors r=jonas-schievink a=jonas-schievink\n\nI didn't know `callable_item_signature` was a thing, that makes this really easy.\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>", "tree": {"sha": "def218466a0889571c5422ab39e5e0d3b9def085", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/def218466a0889571c5422ab39e5e0d3b9def085"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f991d80699844cdc38f61970cbbd73044506676", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfB0WzCRBK7hj4Ov3rIwAAdHIIAI1cpvbBc/nKXvd5yCIwdVvt\nCyMD01FCq4t0bE68KAaGICnFMHEq3wStCdvAMYS66xxkdgnH5E3S3hQi63aZJKzz\nWPfJ94CjhOeD1TOBwSf1dxDpCvV/rTmqcpcAvZUYUlWsfoDSWaI99ILsp8ro4GTT\nOpyh3IhxOLAgr2DNhC088Zo05WEvUrI4OlUpEDbWrOzcbTgf83y6/YUxlf5BPUbC\nUecpKtctOQItlPLWWjR/fs3uOy5HdVJV6ALwvCFiMPUkuWejgc3WeLcefKAb9Nhd\nkoH0UyScjzCo9neFDkBQMucYNtlfewdqxgvwBpKRYVR0hPbDy2DQL62TOkmNdGI=\n=a/9v\n-----END PGP SIGNATURE-----\n", "payload": "tree def218466a0889571c5422ab39e5e0d3b9def085\nparent 89c7c559953f103f224caacad6c9497d36660c76\nparent 74aa0ab9f79490c862e48a4e6b3dad9e4073817f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1594312115 +0000\ncommitter GitHub <noreply@github.com> 1594312115 +0000\n\nMerge #5283\n\n5283: Arg count mismatch diagnostic: Handle tuple struct/variant ctors r=jonas-schievink a=jonas-schievink\n\nI didn't know `callable_item_signature` was a thing, that makes this really easy.\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f991d80699844cdc38f61970cbbd73044506676", "html_url": "https://github.com/rust-lang/rust/commit/7f991d80699844cdc38f61970cbbd73044506676", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f991d80699844cdc38f61970cbbd73044506676/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89c7c559953f103f224caacad6c9497d36660c76", "url": "https://api.github.com/repos/rust-lang/rust/commits/89c7c559953f103f224caacad6c9497d36660c76", "html_url": "https://github.com/rust-lang/rust/commit/89c7c559953f103f224caacad6c9497d36660c76"}, {"sha": "74aa0ab9f79490c862e48a4e6b3dad9e4073817f", "url": "https://api.github.com/repos/rust-lang/rust/commits/74aa0ab9f79490c862e48a4e6b3dad9e4073817f", "html_url": "https://github.com/rust-lang/rust/commit/74aa0ab9f79490c862e48a4e6b3dad9e4073817f"}], "stats": {"total": 51, "additions": 34, "deletions": 17}, "files": [{"sha": "72577d114c4d244261b1a260b42cc56ed8130e10", "filename": "crates/ra_hir_ty/src/expr.rs", "status": "modified", "additions": 34, "deletions": 17, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/7f991d80699844cdc38f61970cbbd73044506676/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f991d80699844cdc38f61970cbbd73044506676/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs?ref=7f991d80699844cdc38f61970cbbd73044506676", "patch": "@@ -13,7 +13,7 @@ use crate::{\n         MismatchedArgCount, MissingFields, MissingMatchArms, MissingOkInTailExpr, MissingPatFields,\n     },\n     utils::variant_data,\n-    ApplicationTy, CallableDef, InferenceResult, Ty, TypeCtor,\n+    ApplicationTy, InferenceResult, Ty, TypeCtor,\n     _match::{is_useful, MatchCheckCtx, Matrix, PatStack, Usefulness},\n };\n \n@@ -162,35 +162,24 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             Expr::Call { callee, args } => {\n                 let callee = &self.infer.type_of_expr[*callee];\n                 let (callable, _) = callee.as_callable()?;\n-                let callee = match callable {\n-                    CallableDef::FunctionId(func) => func,\n \n-                    // FIXME: Handle tuple struct/variant constructor calls.\n-                    _ => return None,\n-                };\n-\n-                (callee, args.clone())\n+                (callable, args.clone())\n             }\n             Expr::MethodCall { receiver, args, .. } => {\n                 let callee = self.infer.method_resolution(call_id)?;\n                 let mut args = args.clone();\n                 args.insert(0, *receiver);\n-                (callee, args)\n+                (callee.into(), args)\n             }\n             _ => return None,\n         };\n \n-        let loc = callee.lookup(db.upcast());\n-        let ast = loc.source(db.upcast());\n-        let params = ast.value.param_list()?;\n+        let sig = db.callable_item_signature(callee);\n+        let params = sig.value.params();\n \n-        let mut param_count = params.params().count();\n+        let mut param_count = params.len();\n         let mut arg_count = args.len();\n \n-        if params.self_param().is_some() {\n-            param_count += 1;\n-        }\n-\n         if arg_count != param_count {\n             let (_, source_map) = db.body_with_source_map(self.func.into());\n             if let Ok(source_ptr) = source_map.expr_syntax(call_id) {\n@@ -501,4 +490,32 @@ mod tests {\n             \",\n         );\n     }\n+\n+    #[test]\n+    fn tuple_struct() {\n+        check_diagnostic(\n+            r\"\n+            struct Tup(u8, u16);\n+            fn f() {\n+                Tup(0);\n+            }\n+            \",\n+            expect![[\"\\\"Tup(0)\\\": Expected 2 arguments, found 1\\n\"]],\n+        )\n+    }\n+\n+    #[test]\n+    fn enum_variant() {\n+        check_diagnostic(\n+            r\"\n+            enum En {\n+                Variant(u8, u16),\n+            }\n+            fn f() {\n+                En::Variant(0);\n+            }\n+            \",\n+            expect![[\"\\\"En::Variant(0)\\\": Expected 2 arguments, found 1\\n\"]],\n+        )\n+    }\n }"}]}