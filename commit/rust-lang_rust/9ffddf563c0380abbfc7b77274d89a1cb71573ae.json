{"sha": "9ffddf563c0380abbfc7b77274d89a1cb71573ae", "node_id": "C_kwDOAAsO6NoAKDlmZmRkZjU2M2MwMzgwYWJiZmM3Yjc3Mjc0ZDg5YTFjYjcxNTczYWU", "commit": {"author": {"name": "miam-miam100", "email": "49870539+miam-miam100@users.noreply.github.com", "date": "2022-06-23T19:09:47Z"}, "committer": {"name": "miam-miam100", "email": "49870539+miam-miam100@users.noreply.github.com", "date": "2022-08-09T20:03:41Z"}, "message": "Add new lint [`positional_named_format_parameters`]", "tree": {"sha": "63912274c456c84aa7e3dc8a11cd38785dc55570", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63912274c456c84aa7e3dc8a11cd38785dc55570"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ffddf563c0380abbfc7b77274d89a1cb71573ae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQR5DKPUXZIl5Aixb+MMNzAQGVP33QUCYvK9nQAKCRAMNzAQGVP3\n3daMAQC3aysM1xoIjNjO09huKfXPsS2dPt5dDegwU4+YeGIZpgD9HWLYRzgLivRt\nH78SmMISLC+EZ0XHvulYrINlIWe6uQc=\n=JWz4\n-----END PGP SIGNATURE-----", "payload": "tree 63912274c456c84aa7e3dc8a11cd38785dc55570\nparent 3c7e7dbc1583a0b06df5bd7623dd354a4debd23d\nauthor miam-miam100 <49870539+miam-miam100@users.noreply.github.com> 1656011387 +0100\ncommitter miam-miam100 <49870539+miam-miam100@users.noreply.github.com> 1660075421 +0100\n\nAdd new lint [`positional_named_format_parameters`]\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ffddf563c0380abbfc7b77274d89a1cb71573ae", "html_url": "https://github.com/rust-lang/rust/commit/9ffddf563c0380abbfc7b77274d89a1cb71573ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ffddf563c0380abbfc7b77274d89a1cb71573ae/comments", "author": {"login": "miam-miam100", "id": 49870539, "node_id": "MDQ6VXNlcjQ5ODcwNTM5", "avatar_url": "https://avatars.githubusercontent.com/u/49870539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miam-miam100", "html_url": "https://github.com/miam-miam100", "followers_url": "https://api.github.com/users/miam-miam100/followers", "following_url": "https://api.github.com/users/miam-miam100/following{/other_user}", "gists_url": "https://api.github.com/users/miam-miam100/gists{/gist_id}", "starred_url": "https://api.github.com/users/miam-miam100/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miam-miam100/subscriptions", "organizations_url": "https://api.github.com/users/miam-miam100/orgs", "repos_url": "https://api.github.com/users/miam-miam100/repos", "events_url": "https://api.github.com/users/miam-miam100/events{/privacy}", "received_events_url": "https://api.github.com/users/miam-miam100/received_events", "type": "User", "site_admin": false}, "committer": {"login": "miam-miam100", "id": 49870539, "node_id": "MDQ6VXNlcjQ5ODcwNTM5", "avatar_url": "https://avatars.githubusercontent.com/u/49870539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miam-miam100", "html_url": "https://github.com/miam-miam100", "followers_url": "https://api.github.com/users/miam-miam100/followers", "following_url": "https://api.github.com/users/miam-miam100/following{/other_user}", "gists_url": "https://api.github.com/users/miam-miam100/gists{/gist_id}", "starred_url": "https://api.github.com/users/miam-miam100/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miam-miam100/subscriptions", "organizations_url": "https://api.github.com/users/miam-miam100/orgs", "repos_url": "https://api.github.com/users/miam-miam100/repos", "events_url": "https://api.github.com/users/miam-miam100/events{/privacy}", "received_events_url": "https://api.github.com/users/miam-miam100/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c7e7dbc1583a0b06df5bd7623dd354a4debd23d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d", "html_url": "https://github.com/rust-lang/rust/commit/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d"}], "stats": {"total": 663, "additions": 657, "deletions": 6}, "files": [{"sha": "569020db5b705ca9d1f471534d76cd6531c40c70", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ffddf563c0380abbfc7b77274d89a1cb71573ae/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ffddf563c0380abbfc7b77274d89a1cb71573ae/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=9ffddf563c0380abbfc7b77274d89a1cb71573ae", "patch": "@@ -3823,6 +3823,7 @@ Released 2018-09-13\n [`partialeq_ne_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#partialeq_ne_impl\n [`path_buf_push_overwrite`]: https://rust-lang.github.io/rust-clippy/master/index.html#path_buf_push_overwrite\n [`pattern_type_mismatch`]: https://rust-lang.github.io/rust-clippy/master/index.html#pattern_type_mismatch\n+[`positional_named_format_parameters`]: https://rust-lang.github.io/rust-clippy/master/index.html#positional_named_format_parameters\n [`possible_missing_comma`]: https://rust-lang.github.io/rust-clippy/master/index.html#possible_missing_comma\n [`precedence`]: https://rust-lang.github.io/rust-clippy/master/index.html#precedence\n [`print_in_format_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#print_in_format_impl"}, {"sha": "88b2dd487dd6858caef4c68e0f852cb9bf65550c", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ffddf563c0380abbfc7b77274d89a1cb71573ae/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffddf563c0380abbfc7b77274d89a1cb71573ae/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=9ffddf563c0380abbfc7b77274d89a1cb71573ae", "patch": "@@ -345,6 +345,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(vec::USELESS_VEC),\n     LintId::of(vec_init_then_push::VEC_INIT_THEN_PUSH),\n     LintId::of(vec_resize_to_zero::VEC_RESIZE_TO_ZERO),\n+    LintId::of(write::POSITIONAL_NAMED_FORMAT_PARAMETERS),\n     LintId::of(write::PRINTLN_EMPTY_STRING),\n     LintId::of(write::PRINT_LITERAL),\n     LintId::of(write::PRINT_WITH_NEWLINE),"}, {"sha": "dacdae0c4a9f25a3d0f9496faf96a825289b2029", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ffddf563c0380abbfc7b77274d89a1cb71573ae/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffddf563c0380abbfc7b77274d89a1cb71573ae/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=9ffddf563c0380abbfc7b77274d89a1cb71573ae", "patch": "@@ -583,6 +583,7 @@ store.register_lints(&[\n     verbose_file_reads::VERBOSE_FILE_READS,\n     wildcard_imports::ENUM_GLOB_USE,\n     wildcard_imports::WILDCARD_IMPORTS,\n+    write::POSITIONAL_NAMED_FORMAT_PARAMETERS,\n     write::PRINTLN_EMPTY_STRING,\n     write::PRINT_LITERAL,\n     write::PRINT_STDERR,"}, {"sha": "2aea0bf8c4591fe961559aa03aca4f7f2bbeea96", "filename": "clippy_lints/src/lib.register_suspicious.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ffddf563c0380abbfc7b77274d89a1cb71573ae/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffddf563c0380abbfc7b77274d89a1cb71573ae/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=9ffddf563c0380abbfc7b77274d89a1cb71573ae", "patch": "@@ -33,4 +33,5 @@ store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec!\n     LintId::of(suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n     LintId::of(suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n     LintId::of(swap_ptr_to_ref::SWAP_PTR_TO_REF),\n+    LintId::of(write::POSITIONAL_NAMED_FORMAT_PARAMETERS),\n ])"}, {"sha": "31890707644b1b80069335bdb7ebb5733fcfd6f9", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 123, "deletions": 6, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/9ffddf563c0380abbfc7b77274d89a1cb71573ae/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffddf563c0380abbfc7b77274d89a1cb71573ae/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=9ffddf563c0380abbfc7b77274d89a1cb71573ae", "patch": "@@ -3,8 +3,9 @@ use std::iter;\n use std::ops::{Deref, Range};\n \n use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg, span_lint_and_then};\n-use clippy_utils::source::{snippet_opt, snippet_with_applicability};\n+use clippy_utils::source::{snippet, snippet_opt, snippet_with_applicability};\n use rustc_ast::ast::{Expr, ExprKind, Impl, Item, ItemKind, MacCall, Path, StrLit, StrStyle};\n+use rustc_ast::ptr::P;\n use rustc_ast::token::{self, LitKind};\n use rustc_ast::tokenstream::TokenStream;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n@@ -256,6 +257,28 @@ declare_clippy_lint! {\n     \"writing a literal with a format string\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// This lint warns when a named parameter in a format string is used as a positional one.\n+    ///\n+    /// ### Why is this bad?\n+    /// It may be confused for an assignment and obfuscates which parameter is being used.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// println!(\"{}\", x = 10);\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// println!(\"{x}\", x = 10);\n+    /// ```\n+    #[clippy::version = \"1.63.0\"]\n+    pub POSITIONAL_NAMED_FORMAT_PARAMETERS,\n+    suspicious,\n+    \"named parameter in a format string is used positionally\"\n+}\n+\n #[derive(Default)]\n pub struct Write {\n     in_debug_impl: bool,\n@@ -270,7 +293,8 @@ impl_lint_pass!(Write => [\n     PRINT_LITERAL,\n     WRITE_WITH_NEWLINE,\n     WRITELN_EMPTY_STRING,\n-    WRITE_LITERAL\n+    WRITE_LITERAL,\n+    POSITIONAL_NAMED_FORMAT_PARAMETERS,\n ]);\n \n impl EarlyLintPass for Write {\n@@ -408,6 +432,7 @@ fn newline_span(fmtstr: &StrLit) -> (Span, bool) {\n #[derive(Default)]\n struct SimpleFormatArgs {\n     unnamed: Vec<Vec<Span>>,\n+    complex_unnamed: Vec<Vec<Span>>,\n     named: Vec<(Symbol, Vec<Span>)>,\n }\n impl SimpleFormatArgs {\n@@ -419,6 +444,10 @@ impl SimpleFormatArgs {\n         })\n     }\n \n+    fn get_complex_unnamed(&self) -> impl Iterator<Item = &[Span]> {\n+        self.complex_unnamed.iter().map(Vec::as_slice)\n+    }\n+\n     fn get_named(&self, n: &Path) -> &[Span] {\n         self.named.iter().find(|x| *n == x.0).map_or(&[], |x| x.1.as_slice())\n     }\n@@ -479,6 +508,61 @@ impl SimpleFormatArgs {\n             },\n         };\n     }\n+\n+    fn push_to_complex(&mut self, span: Span, position: usize) {\n+        if self.complex_unnamed.len() <= position {\n+            self.complex_unnamed.resize_with(position, Vec::new);\n+            self.complex_unnamed.push(vec![span]);\n+        } else {\n+            let args: &mut Vec<Span> = &mut self.complex_unnamed[position];\n+            args.push(span);\n+        }\n+    }\n+\n+    fn push_complex(\n+        &mut self,\n+        cx: &EarlyContext<'_>,\n+        arg: rustc_parse_format::Argument<'_>,\n+        str_lit_span: Span,\n+        fmt_span: Span,\n+    ) {\n+        use rustc_parse_format::{ArgumentImplicitlyIs, ArgumentIs, CountIsParam};\n+\n+        let snippet = snippet_opt(cx, fmt_span);\n+\n+        let end = snippet\n+            .as_ref()\n+            .and_then(|s| s.find(':'))\n+            .or_else(|| fmt_span.hi().0.checked_sub(fmt_span.lo().0 + 1).map(|u| u as usize));\n+\n+        if let (ArgumentIs(n) | ArgumentImplicitlyIs(n), Some(end)) = (arg.position, end) {\n+            let span = fmt_span.from_inner(InnerSpan::new(1, end));\n+            self.push_to_complex(span, n);\n+        };\n+\n+        if let (CountIsParam(n), Some(span)) = (arg.format.precision, arg.format.precision_span) {\n+            // We need to do this hack as precision spans should be converted from .* to .foo$\n+            let hack = if snippet.as_ref().and_then(|s| s.find('*')).is_some() {\n+                0\n+            } else {\n+                1\n+            };\n+\n+            let span = str_lit_span.from_inner(InnerSpan {\n+                start: span.start + 1,\n+                end: span.end - hack,\n+            });\n+            self.push_to_complex(span, n);\n+        };\n+\n+        if let (CountIsParam(n), Some(span)) = (arg.format.width, arg.format.width_span) {\n+            let span = str_lit_span.from_inner(InnerSpan {\n+                start: span.start,\n+                end: span.end - 1,\n+            });\n+            self.push_to_complex(span, n);\n+        };\n+    }\n }\n \n impl Write {\n@@ -511,8 +595,8 @@ impl Write {\n                 // FIXME: modify rustc's fmt string parser to give us the current span\n                 span_lint(cx, USE_DEBUG, span, \"use of `Debug`-based formatting\");\n             }\n-\n             args.push(arg, span);\n+            args.push_complex(cx, arg, str_lit.span, span);\n         }\n \n         parser.errors.is_empty().then_some(args)\n@@ -566,6 +650,7 @@ impl Write {\n \n         let lint = if is_write { WRITE_LITERAL } else { PRINT_LITERAL };\n         let mut unnamed_args = args.get_unnamed();\n+        let mut complex_unnamed_args = args.get_complex_unnamed();\n         loop {\n             if !parser.eat(&token::Comma) {\n                 return (Some(fmtstr), expr);\n@@ -577,11 +662,20 @@ impl Write {\n             } else {\n                 return (Some(fmtstr), None);\n             };\n+            let complex_unnamed_arg = complex_unnamed_args.next();\n+\n             let (fmt_spans, lit) = match &token_expr.kind {\n                 ExprKind::Lit(lit) => (unnamed_args.next().unwrap_or(&[]), lit),\n-                ExprKind::Assign(lhs, rhs, _) => match (&lhs.kind, &rhs.kind) {\n-                    (ExprKind::Path(_, p), ExprKind::Lit(lit)) => (args.get_named(p), lit),\n-                    _ => continue,\n+                ExprKind::Assign(lhs, rhs, _) => {\n+                    if let Some(span) = complex_unnamed_arg {\n+                        for x in span {\n+                            Self::report_positional_named_param(cx, *x, lhs, rhs);\n+                        }\n+                    }\n+                    match (&lhs.kind, &rhs.kind) {\n+                        (ExprKind::Path(_, p), ExprKind::Lit(lit)) => (args.get_named(p), lit),\n+                        _ => continue,\n+                    }\n                 },\n                 _ => {\n                     unnamed_args.next();\n@@ -637,6 +731,29 @@ impl Write {\n         }\n     }\n \n+    fn report_positional_named_param(cx: &EarlyContext<'_>, span: Span, lhs: &P<Expr>, _rhs: &P<Expr>) {\n+        if let ExprKind::Path(_, _p) = &lhs.kind {\n+            let mut applicability = Applicability::MachineApplicable;\n+            let name = snippet_with_applicability(cx, lhs.span, \"name\", &mut applicability);\n+            // We need to do this hack as precision spans should be converted from .* to .foo$\n+            let hack = snippet(cx, span, \"\").contains('*');\n+\n+            span_lint_and_sugg(\n+                cx,\n+                POSITIONAL_NAMED_FORMAT_PARAMETERS,\n+                span,\n+                &format!(\"named parameter {} is used as a positional parameter\", name),\n+                \"replace it with\",\n+                if hack {\n+                    format!(\"{}$\", name)\n+                } else {\n+                    format!(\"{}\", name)\n+                },\n+                applicability,\n+            );\n+        };\n+    }\n+\n     fn lint_println_empty_string(&self, cx: &EarlyContext<'_>, mac: &MacCall) {\n         if let (Some(fmt_str), _) = self.check_tts(cx, mac.args.inner_tokens(), false) {\n             if fmt_str.symbol == kw::Empty {"}, {"sha": "4170e109820457a5d4c667cc00941e9be3fc1fc0", "filename": "tests/ui/positional_named_format_parameters.fixed", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9ffddf563c0380abbfc7b77274d89a1cb71573ae/tests%2Fui%2Fpositional_named_format_parameters.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9ffddf563c0380abbfc7b77274d89a1cb71573ae/tests%2Fui%2Fpositional_named_format_parameters.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpositional_named_format_parameters.fixed?ref=9ffddf563c0380abbfc7b77274d89a1cb71573ae", "patch": "@@ -0,0 +1,56 @@\n+// run-rustfix\n+#![allow(unused_must_use)]\n+#![allow(named_arguments_used_positionally)] // Unstable at time of writing.\n+#![warn(clippy::positional_named_format_parameters)]\n+\n+use std::io::Write;\n+\n+fn main() {\n+    let mut v = Vec::new();\n+    let hello = \"Hello\";\n+\n+    println!(\"{hello:.foo$}\", foo = 2);\n+    writeln!(v, \"{hello:.foo$}\", foo = 2);\n+\n+    // Warnings\n+    println!(\"{zero} {one:?}\", zero = 0, one = 1);\n+    println!(\"This is a test {zero} {one:?}\", zero = 0, one = 1);\n+    println!(\"Hello {one} is {two:.zero$}\", zero = 5, one = hello, two = 0.01);\n+    println!(\"Hello {one:zero$}!\", zero = 5, one = 1);\n+    println!(\"Hello {zero:one$}!\", zero = 4, one = 1);\n+    println!(\"Hello {zero:0one$}!\", zero = 4, one = 1);\n+    println!(\"Hello is {one:.zero$}\", zero = 5, one = 0.01);\n+    println!(\"Hello is {one:<6.zero$}\", zero = 5, one = 0.01);\n+    println!(\"{zero}, `{two:>8.one$}` has 3\", zero = hello, one = 3, two = hello);\n+    println!(\"Hello {one} is {two:.zero$}\", zero = 5, one = hello, two = 0.01);\n+    println!(\"Hello {world} {world}!\", world = 5);\n+\n+    writeln!(v, \"{zero} {one:?}\", zero = 0, one = 1);\n+    writeln!(v, \"This is a test {zero} {one:?}\", zero = 0, one = 1);\n+    writeln!(v, \"Hello {one} is {two:.zero$}\", zero = 5, one = hello, two = 0.01);\n+    writeln!(v, \"Hello {one:zero$}!\", zero = 4, one = 1);\n+    writeln!(v, \"Hello {zero:one$}!\", zero = 4, one = 1);\n+    writeln!(v, \"Hello {zero:0one$}!\", zero = 4, one = 1);\n+    writeln!(v, \"Hello is {one:.zero$}\", zero = 3, one = 0.01);\n+    writeln!(v, \"Hello is {one:<6.zero$}\", zero = 2, one = 0.01);\n+    writeln!(v, \"{zero}, `{two:>8.one$}` has 3\", zero = hello, one = 3, two = hello);\n+    writeln!(v, \"Hello {one} is {two:.zero$}\", zero = 1, one = hello, two = 0.01);\n+    writeln!(v, \"Hello {world} {world}!\", world = 0);\n+\n+    // Tests from other files\n+    println!(\"{w:w$}\", w = 1);\n+    println!(\"{p:.p$}\", p = 1);\n+    println!(\"{v}\", v = 1);\n+    println!(\"{v:v$}\", v = 1);\n+    println!(\"{v:v$}\", v = 1);\n+    println!(\"{v:v$.v$}\", v = 1);\n+    println!(\"{v:v$.v$}\", v = 1);\n+    println!(\"{v:v$.v$}\", v = 1);\n+    println!(\"{v:v$.v$}\", v = 1);\n+    println!(\"{v:v$.v$}\", v = 1);\n+    println!(\"{v:v$.v$}\", v = 1);\n+    println!(\"{v:v$.v$}\", v = 1);\n+    println!(\"{w:w$}\", w = 1);\n+    println!(\"{p:.p$}\", p = 1);\n+    println!(\"{:p$.w$}\", 1, w = 1, p = 1);\n+}"}, {"sha": "553d8494ecc04303778cb9aa184faef5178e996a", "filename": "tests/ui/positional_named_format_parameters.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9ffddf563c0380abbfc7b77274d89a1cb71573ae/tests%2Fui%2Fpositional_named_format_parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffddf563c0380abbfc7b77274d89a1cb71573ae/tests%2Fui%2Fpositional_named_format_parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpositional_named_format_parameters.rs?ref=9ffddf563c0380abbfc7b77274d89a1cb71573ae", "patch": "@@ -0,0 +1,56 @@\n+// run-rustfix\n+#![allow(unused_must_use)]\n+#![allow(named_arguments_used_positionally)] // Unstable at time of writing.\n+#![warn(clippy::positional_named_format_parameters)]\n+\n+use std::io::Write;\n+\n+fn main() {\n+    let mut v = Vec::new();\n+    let hello = \"Hello\";\n+\n+    println!(\"{hello:.foo$}\", foo = 2);\n+    writeln!(v, \"{hello:.foo$}\", foo = 2);\n+\n+    // Warnings\n+    println!(\"{} {1:?}\", zero = 0, one = 1);\n+    println!(\"This is a test { } {000001:?}\", zero = 0, one = 1);\n+    println!(\"Hello {1} is {2:.0$}\", zero = 5, one = hello, two = 0.01);\n+    println!(\"Hello {1:0$}!\", zero = 5, one = 1);\n+    println!(\"Hello {0:1$}!\", zero = 4, one = 1);\n+    println!(\"Hello {0:01$}!\", zero = 4, one = 1);\n+    println!(\"Hello is {1:.*}\", zero = 5, one = 0.01);\n+    println!(\"Hello is {:<6.*}\", zero = 5, one = 0.01);\n+    println!(\"{}, `{two:>8.*}` has 3\", zero = hello, one = 3, two = hello);\n+    println!(\"Hello {1} is {2:.0$}\", zero = 5, one = hello, two = 0.01);\n+    println!(\"Hello {world} {}!\", world = 5);\n+\n+    writeln!(v, \"{} {1:?}\", zero = 0, one = 1);\n+    writeln!(v, \"This is a test { } {000001:?}\", zero = 0, one = 1);\n+    writeln!(v, \"Hello {1} is {2:.0$}\", zero = 5, one = hello, two = 0.01);\n+    writeln!(v, \"Hello {1:0$}!\", zero = 4, one = 1);\n+    writeln!(v, \"Hello {0:1$}!\", zero = 4, one = 1);\n+    writeln!(v, \"Hello {0:01$}!\", zero = 4, one = 1);\n+    writeln!(v, \"Hello is {1:.*}\", zero = 3, one = 0.01);\n+    writeln!(v, \"Hello is {:<6.*}\", zero = 2, one = 0.01);\n+    writeln!(v, \"{}, `{two:>8.*}` has 3\", zero = hello, one = 3, two = hello);\n+    writeln!(v, \"Hello {1} is {2:.0$}\", zero = 1, one = hello, two = 0.01);\n+    writeln!(v, \"Hello {world} {}!\", world = 0);\n+\n+    // Tests from other files\n+    println!(\"{:w$}\", w = 1);\n+    println!(\"{:.p$}\", p = 1);\n+    println!(\"{}\", v = 1);\n+    println!(\"{:0$}\", v = 1);\n+    println!(\"{0:0$}\", v = 1);\n+    println!(\"{:0$.0$}\", v = 1);\n+    println!(\"{0:0$.0$}\", v = 1);\n+    println!(\"{0:0$.v$}\", v = 1);\n+    println!(\"{0:v$.0$}\", v = 1);\n+    println!(\"{v:0$.0$}\", v = 1);\n+    println!(\"{v:v$.0$}\", v = 1);\n+    println!(\"{v:0$.v$}\", v = 1);\n+    println!(\"{:w$}\", w = 1);\n+    println!(\"{:.p$}\", p = 1);\n+    println!(\"{:p$.w$}\", 1, w = 1, p = 1);\n+}"}, {"sha": "48ddb6d67ad246084bdbb951887d8759969c297d", "filename": "tests/ui/positional_named_format_parameters.stderr", "status": "added", "additions": 418, "deletions": 0, "changes": 418, "blob_url": "https://github.com/rust-lang/rust/blob/9ffddf563c0380abbfc7b77274d89a1cb71573ae/tests%2Fui%2Fpositional_named_format_parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ffddf563c0380abbfc7b77274d89a1cb71573ae/tests%2Fui%2Fpositional_named_format_parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpositional_named_format_parameters.stderr?ref=9ffddf563c0380abbfc7b77274d89a1cb71573ae", "patch": "@@ -0,0 +1,418 @@\n+error: named parameter zero is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:16:16\n+   |\n+LL |     println!(\"{} {1:?}\", zero = 0, one = 1);\n+   |                ^ help: replace it with: `zero`\n+   |\n+   = note: `-D clippy::positional-named-format-parameters` implied by `-D warnings`\n+\n+error: named parameter one is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:16:19\n+   |\n+LL |     println!(\"{} {1:?}\", zero = 0, one = 1);\n+   |                   ^ help: replace it with: `one`\n+\n+error: named parameter zero is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:17:31\n+   |\n+LL |     println!(\"This is a test { } {000001:?}\", zero = 0, one = 1);\n+   |                               ^ help: replace it with: `zero`\n+\n+error: named parameter one is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:17:35\n+   |\n+LL |     println!(\"This is a test { } {000001:?}\", zero = 0, one = 1);\n+   |                                   ^^^^^^ help: replace it with: `one`\n+\n+error: named parameter zero is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:18:32\n+   |\n+LL |     println!(\"Hello {1} is {2:.0$}\", zero = 5, one = hello, two = 0.01);\n+   |                                ^ help: replace it with: `zero`\n+\n+error: named parameter one is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:18:22\n+   |\n+LL |     println!(\"Hello {1} is {2:.0$}\", zero = 5, one = hello, two = 0.01);\n+   |                      ^ help: replace it with: `one`\n+\n+error: named parameter two is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:18:29\n+   |\n+LL |     println!(\"Hello {1} is {2:.0$}\", zero = 5, one = hello, two = 0.01);\n+   |                             ^ help: replace it with: `two`\n+\n+error: named parameter zero is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:19:24\n+   |\n+LL |     println!(\"Hello {1:0$}!\", zero = 5, one = 1);\n+   |                        ^ help: replace it with: `zero`\n+\n+error: named parameter one is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:19:22\n+   |\n+LL |     println!(\"Hello {1:0$}!\", zero = 5, one = 1);\n+   |                      ^ help: replace it with: `one`\n+\n+error: named parameter zero is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:20:22\n+   |\n+LL |     println!(\"Hello {0:1$}!\", zero = 4, one = 1);\n+   |                      ^ help: replace it with: `zero`\n+\n+error: named parameter one is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:20:24\n+   |\n+LL |     println!(\"Hello {0:1$}!\", zero = 4, one = 1);\n+   |                        ^ help: replace it with: `one`\n+\n+error: named parameter zero is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:21:22\n+   |\n+LL |     println!(\"Hello {0:01$}!\", zero = 4, one = 1);\n+   |                      ^ help: replace it with: `zero`\n+\n+error: named parameter one is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:21:25\n+   |\n+LL |     println!(\"Hello {0:01$}!\", zero = 4, one = 1);\n+   |                         ^ help: replace it with: `one`\n+\n+error: named parameter zero is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:22:28\n+   |\n+LL |     println!(\"Hello is {1:.*}\", zero = 5, one = 0.01);\n+   |                            ^ help: replace it with: `zero$`\n+\n+error: named parameter one is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:22:25\n+   |\n+LL |     println!(\"Hello is {1:.*}\", zero = 5, one = 0.01);\n+   |                         ^ help: replace it with: `one`\n+\n+error: named parameter zero is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:23:29\n+   |\n+LL |     println!(\"Hello is {:<6.*}\", zero = 5, one = 0.01);\n+   |                             ^ help: replace it with: `zero$`\n+\n+error: named parameter one is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:23:25\n+   |\n+LL |     println!(\"Hello is {:<6.*}\", zero = 5, one = 0.01);\n+   |                         ^ help: replace it with: `one`\n+\n+error: named parameter zero is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:24:16\n+   |\n+LL |     println!(\"{}, `{two:>8.*}` has 3\", zero = hello, one = 3, two = hello);\n+   |                ^ help: replace it with: `zero`\n+\n+error: named parameter one is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:24:28\n+   |\n+LL |     println!(\"{}, `{two:>8.*}` has 3\", zero = hello, one = 3, two = hello);\n+   |                            ^ help: replace it with: `one$`\n+\n+error: named parameter zero is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:25:32\n+   |\n+LL |     println!(\"Hello {1} is {2:.0$}\", zero = 5, one = hello, two = 0.01);\n+   |                                ^ help: replace it with: `zero`\n+\n+error: named parameter one is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:25:22\n+   |\n+LL |     println!(\"Hello {1} is {2:.0$}\", zero = 5, one = hello, two = 0.01);\n+   |                      ^ help: replace it with: `one`\n+\n+error: named parameter two is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:25:29\n+   |\n+LL |     println!(\"Hello {1} is {2:.0$}\", zero = 5, one = hello, two = 0.01);\n+   |                             ^ help: replace it with: `two`\n+\n+error: named parameter world is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:26:30\n+   |\n+LL |     println!(\"Hello {world} {}!\", world = 5);\n+   |                              ^ help: replace it with: `world`\n+\n+error: named parameter zero is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:28:19\n+   |\n+LL |     writeln!(v, \"{} {1:?}\", zero = 0, one = 1);\n+   |                   ^ help: replace it with: `zero`\n+\n+error: named parameter one is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:28:22\n+   |\n+LL |     writeln!(v, \"{} {1:?}\", zero = 0, one = 1);\n+   |                      ^ help: replace it with: `one`\n+\n+error: named parameter zero is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:29:34\n+   |\n+LL |     writeln!(v, \"This is a test { } {000001:?}\", zero = 0, one = 1);\n+   |                                  ^ help: replace it with: `zero`\n+\n+error: named parameter one is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:29:38\n+   |\n+LL |     writeln!(v, \"This is a test { } {000001:?}\", zero = 0, one = 1);\n+   |                                      ^^^^^^ help: replace it with: `one`\n+\n+error: named parameter zero is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:30:35\n+   |\n+LL |     writeln!(v, \"Hello {1} is {2:.0$}\", zero = 5, one = hello, two = 0.01);\n+   |                                   ^ help: replace it with: `zero`\n+\n+error: named parameter one is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:30:25\n+   |\n+LL |     writeln!(v, \"Hello {1} is {2:.0$}\", zero = 5, one = hello, two = 0.01);\n+   |                         ^ help: replace it with: `one`\n+\n+error: named parameter two is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:30:32\n+   |\n+LL |     writeln!(v, \"Hello {1} is {2:.0$}\", zero = 5, one = hello, two = 0.01);\n+   |                                ^ help: replace it with: `two`\n+\n+error: named parameter zero is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:31:27\n+   |\n+LL |     writeln!(v, \"Hello {1:0$}!\", zero = 4, one = 1);\n+   |                           ^ help: replace it with: `zero`\n+\n+error: named parameter one is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:31:25\n+   |\n+LL |     writeln!(v, \"Hello {1:0$}!\", zero = 4, one = 1);\n+   |                         ^ help: replace it with: `one`\n+\n+error: named parameter zero is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:32:25\n+   |\n+LL |     writeln!(v, \"Hello {0:1$}!\", zero = 4, one = 1);\n+   |                         ^ help: replace it with: `zero`\n+\n+error: named parameter one is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:32:27\n+   |\n+LL |     writeln!(v, \"Hello {0:1$}!\", zero = 4, one = 1);\n+   |                           ^ help: replace it with: `one`\n+\n+error: named parameter zero is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:33:25\n+   |\n+LL |     writeln!(v, \"Hello {0:01$}!\", zero = 4, one = 1);\n+   |                         ^ help: replace it with: `zero`\n+\n+error: named parameter one is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:33:28\n+   |\n+LL |     writeln!(v, \"Hello {0:01$}!\", zero = 4, one = 1);\n+   |                            ^ help: replace it with: `one`\n+\n+error: named parameter zero is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:34:31\n+   |\n+LL |     writeln!(v, \"Hello is {1:.*}\", zero = 3, one = 0.01);\n+   |                               ^ help: replace it with: `zero$`\n+\n+error: named parameter one is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:34:28\n+   |\n+LL |     writeln!(v, \"Hello is {1:.*}\", zero = 3, one = 0.01);\n+   |                            ^ help: replace it with: `one`\n+\n+error: named parameter zero is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:35:32\n+   |\n+LL |     writeln!(v, \"Hello is {:<6.*}\", zero = 2, one = 0.01);\n+   |                                ^ help: replace it with: `zero$`\n+\n+error: named parameter one is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:35:28\n+   |\n+LL |     writeln!(v, \"Hello is {:<6.*}\", zero = 2, one = 0.01);\n+   |                            ^ help: replace it with: `one`\n+\n+error: named parameter zero is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:36:19\n+   |\n+LL |     writeln!(v, \"{}, `{two:>8.*}` has 3\", zero = hello, one = 3, two = hello);\n+   |                   ^ help: replace it with: `zero`\n+\n+error: named parameter one is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:36:31\n+   |\n+LL |     writeln!(v, \"{}, `{two:>8.*}` has 3\", zero = hello, one = 3, two = hello);\n+   |                               ^ help: replace it with: `one$`\n+\n+error: named parameter zero is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:37:35\n+   |\n+LL |     writeln!(v, \"Hello {1} is {2:.0$}\", zero = 1, one = hello, two = 0.01);\n+   |                                   ^ help: replace it with: `zero`\n+\n+error: named parameter one is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:37:25\n+   |\n+LL |     writeln!(v, \"Hello {1} is {2:.0$}\", zero = 1, one = hello, two = 0.01);\n+   |                         ^ help: replace it with: `one`\n+\n+error: named parameter two is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:37:32\n+   |\n+LL |     writeln!(v, \"Hello {1} is {2:.0$}\", zero = 1, one = hello, two = 0.01);\n+   |                                ^ help: replace it with: `two`\n+\n+error: named parameter world is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:38:33\n+   |\n+LL |     writeln!(v, \"Hello {world} {}!\", world = 0);\n+   |                                 ^ help: replace it with: `world`\n+\n+error: named parameter w is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:41:16\n+   |\n+LL |     println!(\"{:w$}\", w = 1);\n+   |                ^ help: replace it with: `w`\n+\n+error: named parameter p is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:42:16\n+   |\n+LL |     println!(\"{:.p$}\", p = 1);\n+   |                ^ help: replace it with: `p`\n+\n+error: named parameter v is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:43:16\n+   |\n+LL |     println!(\"{}\", v = 1);\n+   |                ^ help: replace it with: `v`\n+\n+error: named parameter v is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:44:16\n+   |\n+LL |     println!(\"{:0$}\", v = 1);\n+   |                ^ help: replace it with: `v`\n+\n+error: named parameter v is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:44:17\n+   |\n+LL |     println!(\"{:0$}\", v = 1);\n+   |                 ^ help: replace it with: `v`\n+\n+error: named parameter v is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:45:16\n+   |\n+LL |     println!(\"{0:0$}\", v = 1);\n+   |                ^ help: replace it with: `v`\n+\n+error: named parameter v is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:45:18\n+   |\n+LL |     println!(\"{0:0$}\", v = 1);\n+   |                  ^ help: replace it with: `v`\n+\n+error: named parameter v is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:46:16\n+   |\n+LL |     println!(\"{:0$.0$}\", v = 1);\n+   |                ^ help: replace it with: `v`\n+\n+error: named parameter v is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:46:20\n+   |\n+LL |     println!(\"{:0$.0$}\", v = 1);\n+   |                    ^ help: replace it with: `v`\n+\n+error: named parameter v is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:46:17\n+   |\n+LL |     println!(\"{:0$.0$}\", v = 1);\n+   |                 ^ help: replace it with: `v`\n+\n+error: named parameter v is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:47:16\n+   |\n+LL |     println!(\"{0:0$.0$}\", v = 1);\n+   |                ^ help: replace it with: `v`\n+\n+error: named parameter v is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:47:21\n+   |\n+LL |     println!(\"{0:0$.0$}\", v = 1);\n+   |                     ^ help: replace it with: `v`\n+\n+error: named parameter v is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:47:18\n+   |\n+LL |     println!(\"{0:0$.0$}\", v = 1);\n+   |                  ^ help: replace it with: `v`\n+\n+error: named parameter v is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:48:16\n+   |\n+LL |     println!(\"{0:0$.v$}\", v = 1);\n+   |                ^ help: replace it with: `v`\n+\n+error: named parameter v is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:48:18\n+   |\n+LL |     println!(\"{0:0$.v$}\", v = 1);\n+   |                  ^ help: replace it with: `v`\n+\n+error: named parameter v is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:49:16\n+   |\n+LL |     println!(\"{0:v$.0$}\", v = 1);\n+   |                ^ help: replace it with: `v`\n+\n+error: named parameter v is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:49:21\n+   |\n+LL |     println!(\"{0:v$.0$}\", v = 1);\n+   |                     ^ help: replace it with: `v`\n+\n+error: named parameter v is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:50:21\n+   |\n+LL |     println!(\"{v:0$.0$}\", v = 1);\n+   |                     ^ help: replace it with: `v`\n+\n+error: named parameter v is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:50:18\n+   |\n+LL |     println!(\"{v:0$.0$}\", v = 1);\n+   |                  ^ help: replace it with: `v`\n+\n+error: named parameter v is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:51:21\n+   |\n+LL |     println!(\"{v:v$.0$}\", v = 1);\n+   |                     ^ help: replace it with: `v`\n+\n+error: named parameter v is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:52:18\n+   |\n+LL |     println!(\"{v:0$.v$}\", v = 1);\n+   |                  ^ help: replace it with: `v`\n+\n+error: named parameter w is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:53:16\n+   |\n+LL |     println!(\"{:w$}\", w = 1);\n+   |                ^ help: replace it with: `w`\n+\n+error: named parameter p is used as a positional parameter\n+  --> $DIR/positional_named_format_parameters.rs:54:16\n+   |\n+LL |     println!(\"{:.p$}\", p = 1);\n+   |                ^ help: replace it with: `p`\n+\n+error: aborting due to 69 previous errors\n+"}]}