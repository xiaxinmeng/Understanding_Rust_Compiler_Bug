{"sha": "ced10626de2906444fb73315449dc02eceb513cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlZDEwNjI2ZGUyOTA2NDQ0ZmI3MzMxNTQ0OWRjMDJlY2ViNTEzY2Q=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-26T20:18:48Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-30T10:57:57Z"}, "message": "Address @eddyb nit by simplifying `ClosureEnv`.", "tree": {"sha": "090e95b141eaf47362478dcc03bc8c234408c897", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/090e95b141eaf47362478dcc03bc8c234408c897"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ced10626de2906444fb73315449dc02eceb513cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ced10626de2906444fb73315449dc02eceb513cd", "html_url": "https://github.com/rust-lang/rust/commit/ced10626de2906444fb73315449dc02eceb513cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ced10626de2906444fb73315449dc02eceb513cd/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a962bdb3daa45da703b8a25fd76e6eebeb97635e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a962bdb3daa45da703b8a25fd76e6eebeb97635e", "html_url": "https://github.com/rust-lang/rust/commit/a962bdb3daa45da703b8a25fd76e6eebeb97635e"}], "stats": {"total": 67, "additions": 29, "deletions": 38}, "files": [{"sha": "7b4acfac4b3b71396a8f622b8c5ba84848f45c07", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ced10626de2906444fb73315449dc02eceb513cd/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced10626de2906444fb73315449dc02eceb513cd/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=ced10626de2906444fb73315449dc02eceb513cd", "patch": "@@ -1775,7 +1775,7 @@ pub fn trans_closure<'a, 'b, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                    _attributes: &[ast::Attribute],\n                                    output_type: ty::FnOutput<'tcx>,\n                                    abi: Abi,\n-                                   closure_env: closure::ClosureEnv<'b, 'tcx>) {\n+                                   closure_env: closure::ClosureEnv<'b>) {\n     ccx.stats().n_closures.set(ccx.stats().n_closures.get() + 1);\n \n     let _icx = push_ctxt(\"trans_closure\");\n@@ -1784,12 +1784,17 @@ pub fn trans_closure<'a, 'b, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     debug!(\"trans_closure(..., param_substs={})\",\n            param_substs.repr(ccx.tcx()));\n \n+    let has_env = match closure_env {\n+        closure::ClosureEnv::Closure(_) => true,\n+        closure::ClosureEnv::NotClosure => false,\n+    };\n+\n     let (arena, fcx): (TypedArena<_>, FunctionContext);\n     arena = TypedArena::new();\n     fcx = new_fn_ctxt(ccx,\n                       llfndecl,\n                       fn_ast_id,\n-                      closure_env.kind != closure::ClosureKind::NotClosure,\n+                      has_env,\n                       output_type,\n                       param_substs,\n                       Some(body.span),\n@@ -1808,13 +1813,13 @@ pub fn trans_closure<'a, 'b, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         decl.inputs.iter()\n                    .map(|arg| node_id_type(bcx, arg.id))\n                    .collect::<Vec<_>>();\n-    let monomorphized_arg_types = match closure_env.kind {\n-        closure::ClosureKind::NotClosure => {\n+    let monomorphized_arg_types = match closure_env {\n+        closure::ClosureEnv::NotClosure => {\n             monomorphized_arg_types\n         }\n \n         // Tuple up closure argument types for the \"rust-call\" ABI.\n-        closure::ClosureKind::Closure => {\n+        closure::ClosureEnv::Closure(_) => {\n             vec![ty::mk_tup(ccx.tcx(), monomorphized_arg_types)]\n         }\n     };\n@@ -1835,14 +1840,14 @@ pub fn trans_closure<'a, 'b, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n             &monomorphized_arg_types[])\n     };\n \n-    bcx = match closure_env.kind {\n-        closure::ClosureKind::NotClosure => {\n+    bcx = match closure_env {\n+        closure::ClosureEnv::NotClosure => {\n             copy_args_to_allocas(bcx,\n                                  arg_scope,\n                                  &decl.inputs[],\n                                  arg_datums)\n         }\n-        closure::ClosureKind::Closure => {\n+        closure::ClosureEnv::Closure(_) => {\n             copy_closure_args_to_allocas(\n                 bcx,\n                 arg_scope,\n@@ -1932,7 +1937,7 @@ pub fn trans_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                   attrs,\n                   output_type,\n                   abi,\n-                  closure::ClosureEnv::new(&[], closure::ClosureKind::NotClosure));\n+                  closure::ClosureEnv::NotClosure);\n }\n \n pub fn trans_enum_variant<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,"}, {"sha": "a15ede095a709be359a6e271f70af896bcbf05e8", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 15, "deletions": 29, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ced10626de2906444fb73315449dc02eceb513cd/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced10626de2906444fb73315449dc02eceb513cd/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=ced10626de2906444fb73315449dc02eceb513cd", "patch": "@@ -97,37 +97,23 @@ fn load_closure_environment<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     bcx\n }\n \n-#[derive(PartialEq)]\n-pub enum ClosureKind<'tcx> {\n+pub enum ClosureEnv<'a> {\n     NotClosure,\n-    Closure,\n+    Closure(&'a [ty::Freevar]),\n }\n \n-pub struct ClosureEnv<'a, 'tcx> {\n-    freevars: &'a [ty::Freevar],\n-    pub kind: ClosureKind<'tcx>\n-}\n-\n-impl<'a, 'tcx> ClosureEnv<'a, 'tcx> {\n-    pub fn new(freevars: &'a [ty::Freevar], kind: ClosureKind<'tcx>)\n-               -> ClosureEnv<'a, 'tcx> {\n-        ClosureEnv {\n-            freevars: freevars,\n-            kind: kind\n-        }\n-    }\n-\n-    pub fn load<'blk>(self, bcx: Block<'blk, 'tcx>, arg_scope: ScopeId)\n-                      -> Block<'blk, 'tcx> {\n-        // Don't bother to create the block if there's nothing to load\n-        if self.freevars.is_empty() {\n-            return bcx;\n-        }\n-\n-        match self.kind {\n-            ClosureKind::NotClosure => bcx,\n-            ClosureKind::Closure => {\n-                load_closure_environment(bcx, arg_scope, self.freevars)\n+impl<'a> ClosureEnv<'a> {\n+    pub fn load<'blk,'tcx>(self, bcx: Block<'blk, 'tcx>, arg_scope: ScopeId)\n+                           -> Block<'blk, 'tcx>\n+    {\n+        match self {\n+            ClosureEnv::NotClosure => bcx,\n+            ClosureEnv::Closure(freevars) => {\n+                if freevars.is_empty() {\n+                    bcx\n+                } else {\n+                    load_closure_environment(bcx, arg_scope, freevars)\n+                }\n             }\n         }\n     }\n@@ -224,7 +210,7 @@ pub fn trans_closure_expr<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                   &[],\n                   sig.output,\n                   function_type.abi,\n-                  ClosureEnv::new(&freevars[], ClosureKind::Closure));\n+                  ClosureEnv::Closure(&freevars[]));\n \n     // Don't hoist this to the top of the function. It's perfectly legitimate\n     // to have a zero-size closure (in which case dest will be `Ignore`) and"}]}