{"sha": "7644f8e2a1774c426f520efc50fe3626b31e028c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2NDRmOGUyYTE3NzRjNDI2ZjUyMGVmYzUwZmUzNjI2YjMxZTAyOGM=", "commit": {"author": {"name": "Pyriphlegethon", "email": "pyriphlegethon.github@gmail.com", "date": "2015-10-07T11:15:14Z"}, "committer": {"name": "Pyriphlegethon", "email": "pyriphlegethon.github@gmail.com", "date": "2015-10-07T11:46:51Z"}, "message": "Add \"nonsensical OpenOptions\" lint", "tree": {"sha": "1722436dcfe4ee4cbfe8ae6ac326eace5f735860", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1722436dcfe4ee4cbfe8ae6ac326eace5f735860"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7644f8e2a1774c426f520efc50fe3626b31e028c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7644f8e2a1774c426f520efc50fe3626b31e028c", "html_url": "https://github.com/rust-lang/rust/commit/7644f8e2a1774c426f520efc50fe3626b31e028c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7644f8e2a1774c426f520efc50fe3626b31e028c/comments", "author": {"login": "Pyriphlegethon", "id": 13908830, "node_id": "MDQ6VXNlcjEzOTA4ODMw", "avatar_url": "https://avatars.githubusercontent.com/u/13908830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pyriphlegethon", "html_url": "https://github.com/Pyriphlegethon", "followers_url": "https://api.github.com/users/Pyriphlegethon/followers", "following_url": "https://api.github.com/users/Pyriphlegethon/following{/other_user}", "gists_url": "https://api.github.com/users/Pyriphlegethon/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pyriphlegethon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pyriphlegethon/subscriptions", "organizations_url": "https://api.github.com/users/Pyriphlegethon/orgs", "repos_url": "https://api.github.com/users/Pyriphlegethon/repos", "events_url": "https://api.github.com/users/Pyriphlegethon/events{/privacy}", "received_events_url": "https://api.github.com/users/Pyriphlegethon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Pyriphlegethon", "id": 13908830, "node_id": "MDQ6VXNlcjEzOTA4ODMw", "avatar_url": "https://avatars.githubusercontent.com/u/13908830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pyriphlegethon", "html_url": "https://github.com/Pyriphlegethon", "followers_url": "https://api.github.com/users/Pyriphlegethon/followers", "following_url": "https://api.github.com/users/Pyriphlegethon/following{/other_user}", "gists_url": "https://api.github.com/users/Pyriphlegethon/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pyriphlegethon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pyriphlegethon/subscriptions", "organizations_url": "https://api.github.com/users/Pyriphlegethon/orgs", "repos_url": "https://api.github.com/users/Pyriphlegethon/repos", "events_url": "https://api.github.com/users/Pyriphlegethon/events{/privacy}", "received_events_url": "https://api.github.com/users/Pyriphlegethon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e475e9588bbd0235a85b2b30b42e34b0bbdf36a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e475e9588bbd0235a85b2b30b42e34b0bbdf36a", "html_url": "https://github.com/rust-lang/rust/commit/3e475e9588bbd0235a85b2b30b42e34b0bbdf36a"}], "stats": {"total": 172, "additions": 166, "deletions": 6}, "files": [{"sha": "96465d9fd35a682e27f5265f7bb5a1ed7e2e3d60", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7644f8e2a1774c426f520efc50fe3626b31e028c/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/7644f8e2a1774c426f520efc50fe3626b31e028c/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=7644f8e2a1774c426f520efc50fe3626b31e028c", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 59 lints included in this crate:\n+There are 60 lints included in this crate:\n \n name                                                                                                   | default | meaning\n -------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -42,6 +42,7 @@ name\n [needless_range_loop](https://github.com/Manishearth/rust-clippy/wiki#needless_range_loop)             | warn    | for-looping over a range of indices where an iterator over items would do\n [needless_return](https://github.com/Manishearth/rust-clippy/wiki#needless_return)                     | warn    | using a return statement like `return expr;` where an expression would suffice\n [non_ascii_literal](https://github.com/Manishearth/rust-clippy/wiki#non_ascii_literal)                 | allow   | using any literal non-ASCII chars in a string literal; suggests using the \\\\u escape instead\n+[nonsensical_open_options](https://github.com/Manishearth/rust-clippy/wiki#nonsensical_open_options)   | warn    | The options used for opening a file are nonsensical\n [option_unwrap_used](https://github.com/Manishearth/rust-clippy/wiki#option_unwrap_used)               | allow   | using `Option.unwrap()`, which should at least get a better message using `expect()`\n [precedence](https://github.com/Manishearth/rust-clippy/wiki#precedence)                               | warn    | catches operations where precedence may be unclear. See the wiki for a list of cases caught\n [ptr_arg](https://github.com/Manishearth/rust-clippy/wiki#ptr_arg)                                     | allow   | fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` instead, respectively"}, {"sha": "44f8e9e5b984e543bf7513e563c5c9c3b6eae116", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7644f8e2a1774c426f520efc50fe3626b31e028c/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7644f8e2a1774c426f520efc50fe3626b31e028c/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=7644f8e2a1774c426f520efc50fe3626b31e028c", "patch": "@@ -47,6 +47,7 @@ pub mod loops;\n pub mod ranges;\n pub mod matches;\n pub mod precedence;\n+pub mod open_options;\n \n mod reexport {\n     pub use syntax::ast::{Name, Ident, NodeId};\n@@ -88,6 +89,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box matches::MatchPass);\n     reg.register_late_lint_pass(box misc::PatternPass);\n     reg.register_late_lint_pass(box minmax::MinMaxPass);\n+    reg.register_late_lint_pass(box open_options::NonSensicalOpenOptions);\n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n         methods::OPTION_UNWRAP_USED,\n@@ -142,6 +144,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         misc::TOPLEVEL_REF_ARG,\n         mut_reference::UNNECESSARY_MUT_PASSED,\n         needless_bool::NEEDLESS_BOOL,\n+        open_options::NONSENSICAL_OPEN_OPTIONS,\n         precedence::PRECEDENCE,\n         ranges::RANGE_STEP_BY_ZERO,\n         returns::LET_AND_RETURN,"}, {"sha": "d91305c36c2e45db8039e825cc4ae4d877c283b0", "filename": "src/open_options.rs", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/7644f8e2a1774c426f520efc50fe3626b31e028c/src%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7644f8e2a1774c426f520efc50fe3626b31e028c/src%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fopen_options.rs?ref=7644f8e2a1774c426f520efc50fe3626b31e028c", "patch": "@@ -0,0 +1,139 @@\n+use rustc::lint::*;\n+use rustc_front::hir::{Expr, ExprMethodCall, ExprLit};\n+use utils::{walk_ptrs_ty_depth, match_type, span_lint, OPEN_OPTIONS_PATH};\n+use syntax::codemap::{Span, Spanned};\n+use syntax::ast::Lit_::LitBool;\n+\n+declare_lint! {\n+    pub NONSENSICAL_OPEN_OPTIONS,\n+    Warn,\n+    \"The options used for opening a file are nonsensical\"\n+}\n+\n+\n+#[derive(Copy,Clone)]\n+pub struct NonSensicalOpenOptions;\n+\n+impl LintPass for NonSensicalOpenOptions {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(NONSENSICAL_OPEN_OPTIONS)\n+    }\n+}\n+\n+impl LateLintPass for NonSensicalOpenOptions {\n+    fn check_expr(&mut self, cx: &LateContext, e: &Expr) {\n+        if let ExprMethodCall(ref name, _, ref arguments) = e.node {\n+            let (obj_ty, _) = walk_ptrs_ty_depth(cx.tcx.expr_ty(&arguments[0]));\n+            if name.node.as_str() == \"open\" && match_type(cx, obj_ty, &OPEN_OPTIONS_PATH){\n+                let mut options = Vec::new();\n+                get_open_options(cx, &arguments[0], &mut options);\n+                check_open_options(cx, &options, e.span);\n+            }\n+        }\n+    }\n+}\n+\n+#[derive(Debug)]\n+enum Argument {\n+    True,\n+    False,\n+    Unknown\n+}\n+\n+#[derive(Debug)]\n+enum OpenOption {\n+    Write(Argument),\n+    Read(Argument),\n+    Truncate(Argument),\n+    Create(Argument),\n+    Append(Argument)\n+}\n+\n+fn get_open_options(cx: &LateContext, argument: &Expr, options: &mut Vec<OpenOption>) {\n+    if let ExprMethodCall(ref name, _, ref arguments) = argument.node {\n+        let (obj_ty, _) = walk_ptrs_ty_depth(cx.tcx.expr_ty(&arguments[0]));\n+        \n+        // Only proceed if this is a call on some object of type std::fs::OpenOptions\n+        if match_type(cx, obj_ty, &OPEN_OPTIONS_PATH) && arguments.len() >= 2 {\n+            \n+            let argument_option = match arguments[1].node {\n+                ExprLit(ref span) => {\n+                    if let Spanned {node: LitBool(lit), span: _} = **span {\n+                        if lit {Argument::True} else {Argument::False}\n+                    } else {\n+                        return; // The function is called with a literal\n+                                // which is not a boolean literal. This is theoretically\n+                                // possible, but not very likely.\n+                    }\n+                },\n+                _ => {\n+                    Argument::Unknown\n+                }\n+            };\n+            \n+            match &*name.node.as_str() {\n+                \"create\" => {\n+                    options.push(OpenOption::Create(argument_option));\n+                },\n+                \"append\" => {\n+                    options.push(OpenOption::Append(argument_option));\n+                },\n+                \"truncate\" => {\n+                    options.push(OpenOption::Truncate(argument_option));\n+                },\n+                \"read\" => {\n+                    options.push(OpenOption::Read(argument_option));\n+                },\n+                \"write\" => {\n+                    options.push(OpenOption::Write(argument_option));\n+                },\n+                _ => {}\n+            }\n+            \n+            get_open_options(cx, &arguments[0], options);\n+        }\n+    }\n+}\n+\n+fn check_for_duplicates(cx: &LateContext, options: &[OpenOption], span: Span) {\n+    // This code is almost duplicated (oh, the irony), but I haven't found a way to unify it.\n+    if options.iter().filter(|o| if let OpenOption::Create(_) = **o {true} else {false}).count() > 1 {\n+        span_lint(cx, NONSENSICAL_OPEN_OPTIONS, span, \"The method \\\"create\\\" \\\n+                                                       is called more than once\");\n+    }\n+    if options.iter().filter(|o| if let OpenOption::Append(_) = **o {true} else {false}).count() > 1 {\n+        span_lint(cx, NONSENSICAL_OPEN_OPTIONS, span, \"The method \\\"append\\\" \\\n+                                                       is called more than once\");\n+    }\n+    if options.iter().filter(|o| if let OpenOption::Truncate(_) = **o {true} else {false}).count() > 1 {\n+        span_lint(cx, NONSENSICAL_OPEN_OPTIONS, span, \"The method \\\"truncate\\\" \\\n+                                                       is called more than once\");\n+    }\n+    if options.iter().filter(|o| if let OpenOption::Read(_) = **o {true} else {false}).count() > 1 {\n+        span_lint(cx, NONSENSICAL_OPEN_OPTIONS, span, \"The method \\\"read\\\" \\\n+                                                       is called more than once\");\n+    }\n+    if options.iter().filter(|o| if let OpenOption::Write(_) = **o {true} else {false}).count() > 1 {\n+        span_lint(cx, NONSENSICAL_OPEN_OPTIONS, span, \"The method \\\"write\\\" \\\n+                                                       is called more than once\");\n+    }\n+}\n+\n+fn check_for_inconsistencies(cx: &LateContext, options: &[OpenOption], span: Span) {\n+    // Truncate + read makes no sense.\n+    if options.iter().filter(|o| if let OpenOption::Read(Argument::True) = **o {true} else {false}).count() > 0 &&\n+       options.iter().filter(|o| if let OpenOption::Truncate(Argument::True) = **o {true} else {false}).count() > 0 {\n+        span_lint(cx, NONSENSICAL_OPEN_OPTIONS, span, \"File opened with \\\"truncate\\\" and \\\"read\\\"\");\n+    }\n+    \n+    // Append + truncate makes no sense.\n+    if options.iter().filter(|o| if let OpenOption::Append(Argument::True) = **o {true} else {false}).count() > 0 &&\n+       options.iter().filter(|o| if let OpenOption::Truncate(Argument::True) = **o {true} else {false}).count() > 0 {\n+        span_lint(cx, NONSENSICAL_OPEN_OPTIONS, span, \"File opened with \\\"append\\\" and \\\"truncate\\\"\");\n+    }\n+}\n+\n+fn check_open_options(cx: &LateContext, options: &[OpenOption], span: Span) {\n+    check_for_duplicates(cx, options, span);\n+    check_for_inconsistencies(cx, options, span);\n+}"}, {"sha": "1f4fb2b251d80fe0dad75bf05c6de79de2af2e51", "filename": "src/utils.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7644f8e2a1774c426f520efc50fe3626b31e028c/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7644f8e2a1774c426f520efc50fe3626b31e028c/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=7644f8e2a1774c426f520efc50fe3626b31e028c", "patch": "@@ -9,11 +9,12 @@ use std::borrow::Cow;\n use syntax::ast::Lit_::*;\n \n // module DefPaths for certain structs/enums we check for\n-pub const OPTION_PATH: [&'static str; 3] = [\"core\", \"option\", \"Option\"];\n-pub const RESULT_PATH: [&'static str; 3] = [\"core\", \"result\", \"Result\"];\n-pub const STRING_PATH: [&'static str; 3] = [\"collections\", \"string\", \"String\"];\n-pub const VEC_PATH:    [&'static str; 3] = [\"collections\", \"vec\", \"Vec\"];\n-pub const LL_PATH:     [&'static str; 3] = [\"collections\", \"linked_list\", \"LinkedList\"];\n+pub const OPTION_PATH:       [&'static str; 3] = [\"core\", \"option\", \"Option\"];\n+pub const RESULT_PATH:       [&'static str; 3] = [\"core\", \"result\", \"Result\"];\n+pub const STRING_PATH:       [&'static str; 3] = [\"collections\", \"string\", \"String\"];\n+pub const VEC_PATH:          [&'static str; 3] = [\"collections\", \"vec\", \"Vec\"];\n+pub const LL_PATH:           [&'static str; 3] = [\"collections\", \"linked_list\", \"LinkedList\"];\n+pub const OPEN_OPTIONS_PATH: [&'static str; 3] = [\"std\", \"fs\", \"OpenOptions\"];\n \n /// returns true this expn_info was expanded by any macro\n pub fn in_macro(cx: &LateContext, span: Span) -> bool {"}, {"sha": "35cc91c9d0fe9bc2c4ee85d4b0e6d7571bcdbc44", "filename": "tests/compile-fail/open_options.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7644f8e2a1774c426f520efc50fe3626b31e028c/tests%2Fcompile-fail%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7644f8e2a1774c426f520efc50fe3626b31e028c/tests%2Fcompile-fail%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fopen_options.rs?ref=7644f8e2a1774c426f520efc50fe3626b31e028c", "patch": "@@ -0,0 +1,16 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+use std::fs::OpenOptions;\n+\n+#[allow(unused_must_use)]\n+#[deny(nonsensical_open_options)]\n+fn main() {\n+\tOpenOptions::new().read(true).truncate(true).open(\"foo.txt\"); //~ERROR File opened with \"truncate\" and \"read\"\n+\tOpenOptions::new().append(true).truncate(true).open(\"foo.txt\"); //~ERROR File opened with \"append\" and \"truncate\"\n+    \n+\tOpenOptions::new().read(true).read(false).open(\"foo.txt\"); //~ERROR The method \"read\" is called more than once\n+\tOpenOptions::new().create(true).create(false).open(\"foo.txt\"); //~ERROR The method \"create\" is called more than once\n+\tOpenOptions::new().write(true).write(false).open(\"foo.txt\"); //~ERROR The method \"write\" is called more than once\n+\tOpenOptions::new().append(true).append(false).open(\"foo.txt\"); //~ERROR The method \"append\" is called more than once\n+\tOpenOptions::new().truncate(true).truncate(false).open(\"foo.txt\"); //~ERROR The method \"truncate\" is called more than once\n+}"}]}