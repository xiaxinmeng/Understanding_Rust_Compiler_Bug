{"sha": "f5e093f504f6cba8976e84c272826545489532ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1ZTA5M2Y1MDRmNmNiYTg5NzZlODRjMjcyODI2NTQ1NDg5NTMyYWU=", "commit": {"author": {"name": "Ahmed Charles", "email": "acharles@outlook.com", "date": "2015-01-19T10:51:34Z"}, "committer": {"name": "Ahmed Charles", "email": "acharles@outlook.com", "date": "2015-01-21T08:05:57Z"}, "message": "Remove write_metric_diff and supporting code.", "tree": {"sha": "86134bec98f631b39fff53c12c15a156e97f2db1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86134bec98f631b39fff53c12c15a156e97f2db1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5e093f504f6cba8976e84c272826545489532ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5e093f504f6cba8976e84c272826545489532ae", "html_url": "https://github.com/rust-lang/rust/commit/f5e093f504f6cba8976e84c272826545489532ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5e093f504f6cba8976e84c272826545489532ae/comments", "author": {"login": "ahmedcharles", "id": 3112514, "node_id": "MDQ6VXNlcjMxMTI1MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3112514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmedcharles", "html_url": "https://github.com/ahmedcharles", "followers_url": "https://api.github.com/users/ahmedcharles/followers", "following_url": "https://api.github.com/users/ahmedcharles/following{/other_user}", "gists_url": "https://api.github.com/users/ahmedcharles/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmedcharles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmedcharles/subscriptions", "organizations_url": "https://api.github.com/users/ahmedcharles/orgs", "repos_url": "https://api.github.com/users/ahmedcharles/repos", "events_url": "https://api.github.com/users/ahmedcharles/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmedcharles/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ahmedcharles", "id": 3112514, "node_id": "MDQ6VXNlcjMxMTI1MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3112514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmedcharles", "html_url": "https://github.com/ahmedcharles", "followers_url": "https://api.github.com/users/ahmedcharles/followers", "following_url": "https://api.github.com/users/ahmedcharles/following{/other_user}", "gists_url": "https://api.github.com/users/ahmedcharles/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmedcharles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmedcharles/subscriptions", "organizations_url": "https://api.github.com/users/ahmedcharles/orgs", "repos_url": "https://api.github.com/users/ahmedcharles/repos", "events_url": "https://api.github.com/users/ahmedcharles/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmedcharles/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51e28dd0c88030b8661f0c414eb0af3e09840b31", "url": "https://api.github.com/repos/rust-lang/rust/commits/51e28dd0c88030b8661f0c414eb0af3e09840b31", "html_url": "https://github.com/rust-lang/rust/commit/51e28dd0c88030b8661f0c414eb0af3e09840b31"}], "stats": {"total": 130, "additions": 7, "deletions": 123}, "files": [{"sha": "f99ecebab391d5c3e54d2ef98ac1c2e11d2dfec6", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 7, "deletions": 123, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/f5e093f504f6cba8976e84c272826545489532ae/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e093f504f6cba8976e84c272826545489532ae/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=f5e093f504f6cba8976e84c272826545489532ae", "patch": "@@ -44,7 +44,6 @@ extern crate \"serialize\" as rustc_serialize;\n extern crate term;\n \n pub use self::TestFn::*;\n-pub use self::MetricChange::*;\n pub use self::ColorConfig::*;\n pub use self::TestResult::*;\n pub use self::TestName::*;\n@@ -62,7 +61,6 @@ use term::color::{Color, RED, YELLOW, GREEN, CYAN};\n use std::any::Any;\n use std::cmp;\n use std::collections::BTreeMap;\n-use std::f64;\n use std::fmt::Show;\n use std::fmt;\n use std::io::fs::PathExtensions;\n@@ -82,8 +80,7 @@ use std::time::Duration;\n pub mod test {\n     pub use {Bencher, TestName, TestResult, TestDesc,\n              TestDescAndFn, TestOpts, TrFailed, TrIgnored, TrOk,\n-             Metric, MetricMap, MetricAdded, MetricRemoved,\n-             MetricChange, Improvement, Regression, LikelyNoise,\n+             Metric, MetricMap,\n              StaticTestFn, StaticTestName, DynTestName, DynTestFn,\n              run_test, test_main, test_main_static, filter_tests,\n              parse_opts, StaticBenchFn, ShouldFail};\n@@ -244,13 +241,7 @@ impl Clone for MetricMap {\n \n /// Analysis of a single change in metric\n #[derive(Copy, PartialEq, Show)]\n-pub enum MetricChange {\n-    LikelyNoise,\n-    MetricAdded,\n-    MetricRemoved,\n-    Improvement(f64),\n-    Regression(f64)\n-}\n+pub struct MetricChange;\n \n pub type MetricDiff = BTreeMap<String,MetricChange>;\n \n@@ -602,22 +593,6 @@ impl<T: Writer> ConsoleTestState<T> {\n         self.write_pretty(\"bench\", term::color::CYAN)\n     }\n \n-    pub fn write_added(&mut self) -> io::IoResult<()> {\n-        self.write_pretty(\"added\", term::color::GREEN)\n-    }\n-\n-    pub fn write_improved(&mut self) -> io::IoResult<()> {\n-        self.write_pretty(\"improved\", term::color::GREEN)\n-    }\n-\n-    pub fn write_removed(&mut self) -> io::IoResult<()> {\n-        self.write_pretty(\"removed\", term::color::YELLOW)\n-    }\n-\n-    pub fn write_regressed(&mut self) -> io::IoResult<()> {\n-        self.write_pretty(\"regressed\", term::color::RED)\n-    }\n-\n     pub fn write_pretty(&mut self,\n                         word: &str,\n                         color: term::color::Color) -> io::IoResult<()> {\n@@ -741,55 +716,6 @@ impl<T: Writer> ConsoleTestState<T> {\n         Ok(())\n     }\n \n-    pub fn write_metric_diff(&mut self, diff: &MetricDiff) -> io::IoResult<()> {\n-        let mut noise = 0u;\n-        let mut improved = 0u;\n-        let mut regressed = 0u;\n-        let mut added = 0u;\n-        let mut removed = 0u;\n-\n-        for (k, v) in diff.iter() {\n-            match *v {\n-                LikelyNoise => noise += 1,\n-                MetricAdded => {\n-                    added += 1;\n-                    try!(self.write_added());\n-                    try!(self.write_plain(format!(\": {}\\n\", *k).as_slice()));\n-                }\n-                MetricRemoved => {\n-                    removed += 1;\n-                    try!(self.write_removed());\n-                    try!(self.write_plain(format!(\": {}\\n\", *k).as_slice()));\n-                }\n-                Improvement(pct) => {\n-                    improved += 1;\n-                    try!(self.write_plain(format!(\": {} \", *k).as_slice()));\n-                    try!(self.write_improved());\n-                    try!(self.write_plain(format!(\" by {:.2}%\\n\",\n-                                                  pct as f64).as_slice()));\n-                }\n-                Regression(pct) => {\n-                    regressed += 1;\n-                    try!(self.write_plain(format!(\": {} \", *k).as_slice()));\n-                    try!(self.write_regressed());\n-                    try!(self.write_plain(format!(\" by {:.2}%\\n\",\n-                                                  pct as f64).as_slice()));\n-                }\n-            }\n-        }\n-        try!(self.write_plain(format!(\"result of ratchet: {} metrics added, \\\n-                                        {} removed, {} improved, {} regressed, \\\n-                                        {} noise\\n\",\n-                                       added, removed, improved, regressed,\n-                                       noise).as_slice()));\n-        if regressed == 0 {\n-            try!(self.write_plain(\"updated ratchet file\\n\"));\n-        } else {\n-            try!(self.write_plain(\"left ratchet file untouched\\n\"));\n-        }\n-        Ok(())\n-    }\n-\n     pub fn write_run_finish(&mut self,\n                             ratchet_metrics: &Option<Path>,\n                             ratchet_pct: Option<f64>) -> io::IoResult<bool> {\n@@ -807,9 +733,7 @@ impl<T: Writer> ConsoleTestState<T> {\n                                                          forced to: {}%\\n\",\n                                                         pct).as_slice()))\n                 }\n-                let (diff, ok) = self.metrics.ratchet(pth, ratchet_pct);\n-                try!(self.write_metric_diff(&diff));\n-                ok\n+                true\n             }\n         };\n \n@@ -1233,47 +1157,35 @@ impl MetricMap {\n         let MetricMap(ref selfmap) = *self;\n         let MetricMap(ref old) = *old;\n         for (k, vold) in old.iter() {\n-            let r = match selfmap.get(k) {\n-                None => MetricRemoved,\n+            match selfmap.get(k) {\n+                None => (),\n                 Some(v) => {\n                     let delta = v.value - vold.value;\n                     let noise = match noise_pct {\n                         None => vold.noise.abs().max(v.noise.abs()),\n                         Some(pct) => vold.value * pct / 100.0\n                     };\n                     if delta.abs() <= noise {\n-                        LikelyNoise\n                     } else {\n-                        let pct = delta.abs() / vold.value.max(f64::EPSILON) * 100.0;\n                         if vold.noise < 0.0 {\n                             // When 'noise' is negative, it means we want\n                             // to see deltas that go up over time, and can\n                             // only tolerate slight negative movement.\n                             if delta < 0.0 {\n-                                Regression(pct)\n                             } else {\n-                                Improvement(pct)\n                             }\n                         } else {\n                             // When 'noise' is positive, it means we want\n                             // to see deltas that go down over time, and\n                             // can only tolerate slight positive movements.\n                             if delta < 0.0 {\n-                                Improvement(pct)\n                             } else {\n-                                Regression(pct)\n                             }\n                         }\n                     }\n                 }\n             };\n-            diff.insert((*k).clone(), r);\n-        }\n-        let MetricMap(ref map) = *self;\n-        for (k, _) in map.iter() {\n-            if !diff.contains_key(k) {\n-                diff.insert((*k).clone(), MetricAdded);\n-            }\n+            diff.insert((*k).clone(), MetricChange);\n         }\n         diff\n     }\n@@ -1316,7 +1228,6 @@ impl MetricMap {\n         let diff : MetricDiff = self.compare_to_old(&old, pct);\n         let ok = diff.iter().all(|(_, v)| {\n             match *v {\n-                Regression(_) => false,\n                 _ => true\n             }\n         });\n@@ -1467,8 +1378,7 @@ pub mod bench {\n mod tests {\n     use test::{TrFailed, TrIgnored, TrOk, filter_tests, parse_opts,\n                TestDesc, TestDescAndFn, TestOpts, run_test,\n-               Metric, MetricMap, MetricAdded, MetricRemoved,\n-               Improvement, Regression, LikelyNoise,\n+               Metric, MetricMap,\n                StaticTestName, DynTestName, DynTestFn, ShouldFail};\n     use std::io::TempDir;\n     use std::thunk::Thunk;\n@@ -1737,32 +1647,10 @@ mod tests {\n \n         let diff1 = m2.compare_to_old(&m1, None);\n \n-        assert_eq!(*(diff1.get(&\"in-both-noise\".to_string()).unwrap()), LikelyNoise);\n-        assert_eq!(*(diff1.get(&\"in-first-noise\".to_string()).unwrap()), MetricRemoved);\n-        assert_eq!(*(diff1.get(&\"in-second-noise\".to_string()).unwrap()), MetricAdded);\n-        assert_eq!(*(diff1.get(&\"in-both-want-downwards-but-regressed\".to_string()).unwrap()),\n-                   Regression(100.0));\n-        assert_eq!(*(diff1.get(&\"in-both-want-downwards-and-improved\".to_string()).unwrap()),\n-                   Improvement(50.0));\n-        assert_eq!(*(diff1.get(&\"in-both-want-upwards-but-regressed\".to_string()).unwrap()),\n-                   Regression(50.0));\n-        assert_eq!(*(diff1.get(&\"in-both-want-upwards-and-improved\".to_string()).unwrap()),\n-                   Improvement(100.0));\n         assert_eq!(diff1.len(), 7);\n \n         let diff2 = m2.compare_to_old(&m1, Some(200.0));\n \n-        assert_eq!(*(diff2.get(&\"in-both-noise\".to_string()).unwrap()), LikelyNoise);\n-        assert_eq!(*(diff2.get(&\"in-first-noise\".to_string()).unwrap()), MetricRemoved);\n-        assert_eq!(*(diff2.get(&\"in-second-noise\".to_string()).unwrap()), MetricAdded);\n-        assert_eq!(*(diff2.get(&\"in-both-want-downwards-but-regressed\".to_string()).unwrap()),\n-                   LikelyNoise);\n-        assert_eq!(*(diff2.get(&\"in-both-want-downwards-and-improved\".to_string()).unwrap()),\n-                   LikelyNoise);\n-        assert_eq!(*(diff2.get(&\"in-both-want-upwards-but-regressed\".to_string()).unwrap()),\n-                   LikelyNoise);\n-        assert_eq!(*(diff2.get(&\"in-both-want-upwards-and-improved\".to_string()).unwrap()),\n-                   LikelyNoise);\n         assert_eq!(diff2.len(), 7);\n     }\n \n@@ -1786,8 +1674,6 @@ mod tests {\n         let (diff1, ok1) = m2.ratchet(&pth, None);\n         assert_eq!(ok1, false);\n         assert_eq!(diff1.len(), 2);\n-        assert_eq!(*(diff1.get(&\"runtime\".to_string()).unwrap()), Regression(10.0));\n-        assert_eq!(*(diff1.get(&\"throughput\".to_string()).unwrap()), LikelyNoise);\n \n         // Check that it was not rewritten.\n         let m3 = MetricMap::load(&pth);\n@@ -1801,8 +1687,6 @@ mod tests {\n         let (diff2, ok2) = m2.ratchet(&pth, Some(10.0));\n         assert_eq!(ok2, true);\n         assert_eq!(diff2.len(), 2);\n-        assert_eq!(*(diff2.get(&\"runtime\".to_string()).unwrap()), LikelyNoise);\n-        assert_eq!(*(diff2.get(&\"throughput\".to_string()).unwrap()), LikelyNoise);\n \n         // Check that it was rewritten.\n         let m4 = MetricMap::load(&pth);"}]}