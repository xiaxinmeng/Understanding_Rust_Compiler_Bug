{"sha": "5e1ad0d1e448a4ead87c52dd622e12a35c66a7f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMWFkMGQxZTQ0OGE0ZWFkODdjNTJkZDYyMmUxMmEzNWM2NmE3ZjI=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-14T11:41:32Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-04-05T13:21:08Z"}, "message": "Remove Arcs in queries.", "tree": {"sha": "61c95e612da97fd6296d26de5475e779faa00770", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61c95e612da97fd6296d26de5475e779faa00770"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e1ad0d1e448a4ead87c52dd622e12a35c66a7f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e1ad0d1e448a4ead87c52dd622e12a35c66a7f2", "html_url": "https://github.com/rust-lang/rust/commit/5e1ad0d1e448a4ead87c52dd622e12a35c66a7f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e1ad0d1e448a4ead87c52dd622e12a35c66a7f2/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c0edc895ff4d3d82e93c9dc61bb4a8a24da5fad", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c0edc895ff4d3d82e93c9dc61bb4a8a24da5fad", "html_url": "https://github.com/rust-lang/rust/commit/3c0edc895ff4d3d82e93c9dc61bb4a8a24da5fad"}], "stats": {"total": 58, "additions": 27, "deletions": 31}, "files": [{"sha": "daa723495f6b346622b896c258fea5656f40a928", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5e1ad0d1e448a4ead87c52dd622e12a35c66a7f2/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1ad0d1e448a4ead87c52dd622e12a35c66a7f2/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=5e1ad0d1e448a4ead87c52dd622e12a35c66a7f2", "patch": "@@ -26,7 +26,6 @@ use rustc_target::spec::{HasTargetSpec, Target};\n use std::cell::{Cell, RefCell};\n use std::ffi::CStr;\n use std::str;\n-use std::sync::Arc;\n \n /// There is one `CodegenCx` per compilation unit. Each one has its own LLVM\n /// `llvm::Context` so that several compilation units may be optimized in parallel.\n@@ -39,7 +38,7 @@ pub struct CodegenCx<'ll, 'tcx> {\n \n     pub llmod: &'ll llvm::Module,\n     pub llcx: &'ll llvm::Context,\n-    pub codegen_unit: Arc<CodegenUnit<'tcx>>,\n+    pub codegen_unit: &'tcx CodegenUnit<'tcx>,\n \n     /// Cache instances of monomorphic and polymorphic items\n     pub instances: RefCell<FxHashMap<Instance<'tcx>, &'ll Value>>,\n@@ -232,7 +231,7 @@ pub unsafe fn create_module(\n impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n     crate fn new(\n         tcx: TyCtxt<'tcx>,\n-        codegen_unit: Arc<CodegenUnit<'tcx>>,\n+        codegen_unit: &'tcx CodegenUnit<'tcx>,\n         llvm_module: &'ll crate::ModuleLlvm,\n     ) -> Self {\n         // An interesting part of Windows which MSVC forces our hand on (and\n@@ -402,8 +401,8 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         self.check_overflow\n     }\n \n-    fn codegen_unit(&self) -> &Arc<CodegenUnit<'tcx>> {\n-        &self.codegen_unit\n+    fn codegen_unit(&self) -> &'tcx CodegenUnit<'tcx> {\n+        self.codegen_unit\n     }\n \n     fn used_statics(&self) -> &RefCell<Vec<&'ll Value>> {"}, {"sha": "cb39bf382093365a6c39a77e3d251467878c8ceb", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5e1ad0d1e448a4ead87c52dd622e12a35c66a7f2/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1ad0d1e448a4ead87c52dd622e12a35c66a7f2/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=5e1ad0d1e448a4ead87c52dd622e12a35c66a7f2", "patch": "@@ -1,5 +1,4 @@\n use std::collections::hash_map::Entry::*;\n-use std::sync::Arc;\n \n use rustc_ast::expand::allocator::ALLOCATOR_METHODS;\n use rustc_data_structures::fingerprint::Fingerprint;\n@@ -164,11 +163,11 @@ fn is_reachable_non_generic_provider_extern(tcx: TyCtxt<'_>, def_id: DefId) -> b\n fn exported_symbols_provider_local(\n     tcx: TyCtxt<'_>,\n     cnum: CrateNum,\n-) -> Arc<Vec<(ExportedSymbol<'_>, SymbolExportLevel)>> {\n+) -> &'tcx [(ExportedSymbol<'_>, SymbolExportLevel)] {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     if !tcx.sess.opts.output_types.should_codegen() {\n-        return Arc::new(vec![]);\n+        return &[];\n     }\n \n     let mut symbols: Vec<_> = tcx\n@@ -274,7 +273,7 @@ fn exported_symbols_provider_local(\n     // Sort so we get a stable incr. comp. hash.\n     symbols.sort_by_cached_key(|s| s.0.symbol_name_for_local_instance(tcx));\n \n-    Arc::new(symbols)\n+    tcx.arena.alloc_from_iter(symbols)\n }\n \n fn upstream_monomorphizations_provider("}, {"sha": "a7eb4f3ab01754dd9be95b511b6e3ae36b691f23", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e1ad0d1e448a4ead87c52dd622e12a35c66a7f2/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1ad0d1e448a4ead87c52dd622e12a35c66a7f2/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=5e1ad0d1e448a4ead87c52dd622e12a35c66a7f2", "patch": "@@ -533,15 +533,14 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n     // Run the monomorphization collector and partition the collected items into\n     // codegen units.\n     let codegen_units = tcx.collect_and_partition_mono_items(LOCAL_CRATE).1;\n-    let codegen_units = (*codegen_units).clone();\n \n     // Force all codegen_unit queries so they are already either red or green\n     // when compile_codegen_unit accesses them. We are not able to re-execute\n     // the codegen_unit query from just the DepNode, so an unknown color would\n     // lead to having to re-execute compile_codegen_unit, possibly\n     // unnecessarily.\n     if tcx.dep_graph.is_fully_enabled() {\n-        for cgu in &codegen_units {\n+        for cgu in codegen_units {\n             tcx.codegen_unit(cgu.name());\n         }\n     }\n@@ -603,7 +602,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n     // We sort the codegen units by size. This way we can schedule work for LLVM\n     // a bit more efficiently.\n     let codegen_units = {\n-        let mut codegen_units = codegen_units;\n+        let mut codegen_units = codegen_units.iter().collect::<Vec<_>>();\n         codegen_units.sort_by_cached_key(|cgu| cmp::Reverse(cgu.size_estimate()));\n         codegen_units\n     };"}, {"sha": "fc57a9a80b26142529040ce0ab19ff7d2f541ce8", "filename": "src/librustc_codegen_ssa/traits/misc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e1ad0d1e448a4ead87c52dd622e12a35c66a7f2/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1ad0d1e448a4ead87c52dd622e12a35c66a7f2/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs?ref=5e1ad0d1e448a4ead87c52dd622e12a35c66a7f2", "patch": "@@ -4,7 +4,6 @@ use rustc_middle::mir::mono::CodegenUnit;\n use rustc_middle::ty::{self, Instance, Ty};\n use rustc_session::Session;\n use std::cell::RefCell;\n-use std::sync::Arc;\n \n pub trait MiscMethods<'tcx>: BackendTypes {\n     fn vtables(\n@@ -15,7 +14,7 @@ pub trait MiscMethods<'tcx>: BackendTypes {\n     fn get_fn_addr(&self, instance: Instance<'tcx>) -> Self::Value;\n     fn eh_personality(&self) -> Self::Value;\n     fn sess(&self) -> &Session;\n-    fn codegen_unit(&self) -> &Arc<CodegenUnit<'tcx>>;\n+    fn codegen_unit(&self) -> &'tcx CodegenUnit<'tcx>;\n     fn used_statics(&self) -> &RefCell<Vec<Self::Value>>;\n     fn set_frame_pointer_elimination(&self, llfn: Self::Function);\n     fn apply_target_cpu_attr(&self, llfn: Self::Function);"}, {"sha": "82b9b9693f3883d4608ef72c9da69e91c0c38d87", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e1ad0d1e448a4ead87c52dd622e12a35c66a7f2/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1ad0d1e448a4ead87c52dd622e12a35c66a7f2/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=5e1ad0d1e448a4ead87c52dd622e12a35c66a7f2", "patch": "@@ -1343,13 +1343,13 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     fn exported_symbols(\n         &self,\n         tcx: TyCtxt<'tcx>,\n-    ) -> Vec<(ExportedSymbol<'tcx>, SymbolExportLevel)> {\n+    ) -> &'tcx [(ExportedSymbol<'tcx>, SymbolExportLevel)] {\n         if self.root.is_proc_macro_crate() {\n             // If this crate is a custom derive crate, then we're not even going to\n             // link those in so we skip those crates.\n-            vec![]\n+            &[]\n         } else {\n-            self.root.exported_symbols.decode((self, tcx)).collect()\n+            tcx.arena.alloc_from_iter(self.root.exported_symbols.decode((self, tcx)))\n         }\n     }\n "}, {"sha": "1cbde23aceb8a3a2e846ac745072771acc2a58a5", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e1ad0d1e448a4ead87c52dd622e12a35c66a7f2/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1ad0d1e448a4ead87c52dd622e12a35c66a7f2/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=5e1ad0d1e448a4ead87c52dd622e12a35c66a7f2", "patch": "@@ -26,7 +26,6 @@ use rustc_span::symbol::Symbol;\n use rustc_data_structures::sync::Lrc;\n use smallvec::SmallVec;\n use std::any::Any;\n-use std::sync::Arc;\n \n macro_rules! provide {\n     (<$lt:tt> $tcx:ident, $def_id:ident, $other:ident, $cdata:ident,\n@@ -239,7 +238,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n         // to block export of generics from dylibs, but we must fix\n         // rust-lang/rust#65890 before we can do that robustly.\n \n-        Arc::new(syms)\n+        syms\n     }\n }\n "}, {"sha": "979621d92406180fa25eda7eb4bb9f082ea37350", "filename": "src/librustc_middle/arena.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e1ad0d1e448a4ead87c52dd622e12a35c66a7f2/src%2Flibrustc_middle%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1ad0d1e448a4ead87c52dd622e12a35c66a7f2/src%2Flibrustc_middle%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Farena.rs?ref=5e1ad0d1e448a4ead87c52dd622e12a35c66a7f2", "patch": "@@ -117,6 +117,7 @@ macro_rules! arena_types {\n             [few] inferred_outlives_crate: rustc_middle::ty::CratePredicatesMap<'tcx>,\n             [] upvars: rustc_data_structures::fx::FxIndexMap<rustc_hir::HirId, rustc_hir::Upvar>,\n             [] object_safety_violations: rustc_middle::traits::ObjectSafetyViolation,\n+            [] codegen_unit: rustc_middle::mir::mono::CodegenUnit<$tcx>,\n \n             // Interned types\n             [] tys: rustc_middle::ty::TyS<$tcx>,"}, {"sha": "dc8834cf0ad3a33adee83627280ea156ac10be78", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e1ad0d1e448a4ead87c52dd622e12a35c66a7f2/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1ad0d1e448a4ead87c52dd622e12a35c66a7f2/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=5e1ad0d1e448a4ead87c52dd622e12a35c66a7f2", "patch": "@@ -1075,19 +1075,19 @@ rustc_queries! {\n         ///   correspond to a publicly visible symbol in `cnum` machine code.\n         /// - The `exported_symbols` sets of different crates do not intersect.\n         query exported_symbols(_: CrateNum)\n-            -> Arc<Vec<(ExportedSymbol<'tcx>, SymbolExportLevel)>> {\n+            -> &'tcx [(ExportedSymbol<'tcx>, SymbolExportLevel)] {\n             desc { \"exported_symbols\" }\n         }\n     }\n \n     Codegen {\n         query collect_and_partition_mono_items(_: CrateNum)\n-            -> (Arc<DefIdSet>, Arc<Vec<Arc<CodegenUnit<'tcx>>>>) {\n+            -> (&'tcx DefIdSet, &'tcx [CodegenUnit<'tcx>]) {\n             eval_always\n             desc { \"collect_and_partition_mono_items\" }\n         }\n         query is_codegened_item(_: DefId) -> bool {}\n-        query codegen_unit(_: Symbol) -> Arc<CodegenUnit<'tcx>> {\n+        query codegen_unit(_: Symbol) -> &'tcx CodegenUnit<'tcx> {\n             desc { \"codegen_unit\" }\n         }\n         query backend_optimization_level(_: CrateNum) -> OptLevel {"}, {"sha": "d842b8a5f38fb57f0173d937c4d37a5ad4e1da88", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5e1ad0d1e448a4ead87c52dd622e12a35c66a7f2/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1ad0d1e448a4ead87c52dd622e12a35c66a7f2/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=5e1ad0d1e448a4ead87c52dd622e12a35c66a7f2", "patch": "@@ -94,7 +94,6 @@\n \n use std::cmp;\n use std::collections::hash_map::Entry;\n-use std::sync::Arc;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync;\n@@ -883,7 +882,7 @@ where\n fn collect_and_partition_mono_items(\n     tcx: TyCtxt<'_>,\n     cnum: CrateNum,\n-) -> (Arc<DefIdSet>, Arc<Vec<Arc<CodegenUnit<'_>>>>) {\n+) -> (&'tcx DefIdSet, &'tcx [CodegenUnit<'_>]) {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     let collection_mode = match tcx.sess.opts.debugging_opts.print_mono_items {\n@@ -921,10 +920,12 @@ fn collect_and_partition_mono_items(\n     let (codegen_units, _) = tcx.sess.time(\"partition_and_assert_distinct_symbols\", || {\n         sync::join(\n             || {\n-                partition(tcx, items.iter().cloned(), tcx.sess.codegen_units(), &inlining_map)\n-                    .into_iter()\n-                    .map(Arc::new)\n-                    .collect::<Vec<_>>()\n+                &*tcx.arena.alloc_from_iter(partition(\n+                    tcx,\n+                    items.iter().cloned(),\n+                    tcx.sess.codegen_units(),\n+                    &inlining_map,\n+                ))\n             },\n             || assert_symbols_are_distinct(tcx, items.iter()),\n         )\n@@ -942,7 +943,7 @@ fn collect_and_partition_mono_items(\n     if tcx.sess.opts.debugging_opts.print_mono_items.is_some() {\n         let mut item_to_cgus: FxHashMap<_, Vec<_>> = Default::default();\n \n-        for cgu in &codegen_units {\n+        for cgu in codegen_units {\n             for (&mono_item, &linkage) in cgu.items() {\n                 item_to_cgus.entry(mono_item).or_default().push((cgu.name(), linkage));\n             }\n@@ -990,7 +991,7 @@ fn collect_and_partition_mono_items(\n         }\n     }\n \n-    (Arc::new(mono_items), Arc::new(codegen_units))\n+    (tcx.arena.alloc(mono_items), codegen_units)\n }\n \n pub fn provide(providers: &mut Providers<'_>) {\n@@ -1005,7 +1006,6 @@ pub fn provide(providers: &mut Providers<'_>) {\n         let (_, all) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n         all.iter()\n             .find(|cgu| cgu.name() == name)\n-            .cloned()\n             .unwrap_or_else(|| panic!(\"failed to find cgu with name {:?}\", name))\n     };\n }"}]}