{"sha": "f6a5b608ef81311030f9852e074bca3d290651cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2YTViNjA4ZWY4MTMxMTAzMGY5ODUyZTA3NGJjYTNkMjkwNjUxY2Q=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-12-22T14:56:34Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-12-22T14:56:34Z"}, "message": "Rustup to rust-lang/rust#66931", "tree": {"sha": "6676a3638e0da52006dbf19c360f945d8ebceca8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6676a3638e0da52006dbf19c360f945d8ebceca8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6a5b608ef81311030f9852e074bca3d290651cd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl3/hCIACgkQaTCGhp1Q\nZjeWvxAAqSCUwEeQOj/RCV+9QSL5hyT88CryRTHmyDmg0gMkwI68XPFUGuTEi9XY\nA2oEnJDZvdew3qUVwBG0T9dovRdAQ1kZuKty9KimQSdXSbqvBFMdUibnE22Oa68I\n/yMBAXmn6YzggGXdY/enzaj/Y+fKkuF1hWlb53Wjb+V+6qH55Vm17eJaakgFK6P0\ny3rKUEu+W0wTFa3cRmMcz0BsKgQcNXIw2sjfODyhcGhiUDOTi7SyVyGf1Cj5tgl9\nZ8TS8ST/16EqD3/4I5gTilcSh13nQVuAp4+1E5oIjnTIG7vbLgpDo4Qvpw7/4zAJ\n5GeM99STi4j53zucOy8MPqse4aNz+qV67MnQftW9azZGPf12f9Wow9vHowyfZA1p\n6o38dv5y5Q7NtngGZoKUB4c9X61Xs+lp9oYXecdMj/c4OaKoD/zyg/wOYxvgrbs+\niX6Wk63Occ6nQhf1rpn6Ig+VZ1fHFiraZSxxRIjinNDrUcHpLvouR5KtWp9F1aSv\nTPFpxfHKAmKv0a8S0VGciX/JmKmqMJze6obDErA59C/OGVGgFtH+U/dT3f6J/vEU\nMdJv3lFRi4B+YVLksk5a89iFlRtuEH5ufLlxpP8/Ib/9bWoneF4v3MnvCcXyhb6D\nD/aOoM2dSNF+8cN3WXPi90SQDbH4bQMWsZEw4qnbALGiiEu3qBU=\n=XcTD\n-----END PGP SIGNATURE-----", "payload": "tree 6676a3638e0da52006dbf19c360f945d8ebceca8\nparent 9632e2748799f32c9c877643fa8f182d806d7563\nauthor flip1995 <hello@philkrones.com> 1577026594 +0100\ncommitter flip1995 <hello@philkrones.com> 1577026594 +0100\n\nRustup to rust-lang/rust#66931\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6a5b608ef81311030f9852e074bca3d290651cd", "html_url": "https://github.com/rust-lang/rust/commit/f6a5b608ef81311030f9852e074bca3d290651cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6a5b608ef81311030f9852e074bca3d290651cd/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9632e2748799f32c9c877643fa8f182d806d7563", "url": "https://api.github.com/repos/rust-lang/rust/commits/9632e2748799f32c9c877643fa8f182d806d7563", "html_url": "https://github.com/rust-lang/rust/commit/9632e2748799f32c9c877643fa8f182d806d7563"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "410da312a5c0b9f33267cd6fe624398b509d0c8a", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6a5b608ef81311030f9852e074bca3d290651cd/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a5b608ef81311030f9852e074bca3d290651cd/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=f6a5b608ef81311030f9852e074bca3d290651cd", "patch": "@@ -232,7 +232,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Attributes {\n             ItemKind::ExternCrate(..) | ItemKind::Use(..) => {\n                 let skip_unused_imports = item.attrs.iter().any(|attr| attr.check_name(sym!(macro_use)));\n \n-                for attr in &item.attrs {\n+                for attr in item.attrs {\n                     if in_external_macro(cx.sess(), attr.span) {\n                         return;\n                     }"}, {"sha": "33ddf69fa51f06cd43abed6a3c7db641822e0d43", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6a5b608ef81311030f9852e074bca3d290651cd/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a5b608ef81311030f9852e074bca3d290651cd/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=f6a5b608ef81311030f9852e074bca3d290651cd", "patch": "@@ -46,7 +46,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnportableVariant {\n             return;\n         }\n         if let ItemKind::Enum(def, _) = &item.kind {\n-            for var in &def.variants {\n+            for var in def.variants {\n                 if let Some(anon_const) = &var.disr_expr {\n                     let param_env = ty::ParamEnv::empty();\n                     let def_id = cx.tcx.hir().body_owner_def_id(anon_const.body);"}, {"sha": "7f4f1d85941d8f90173fdb32fb5f205f33c78225", "filename": "clippy_lints/src/enum_glob_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6a5b608ef81311030f9852e074bca3d290651cd/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a5b608ef81311030f9852e074bca3d290651cd/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_glob_use.rs?ref=f6a5b608ef81311030f9852e074bca3d290651cd", "patch": "@@ -32,7 +32,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EnumGlobUse {\n     fn check_mod(&mut self, cx: &LateContext<'a, 'tcx>, m: &'tcx Mod<'_>, _: Span, _: HirId) {\n         let map = cx.tcx.hir();\n         // only check top level `use` statements\n-        for item in &m.item_ids {\n+        for item in m.item_ids {\n             lint_item(cx, map.expect_item(item.id));\n         }\n     }"}, {"sha": "d0ffc6c8eed971bb92bf1b268411a359d2a1fc4b", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6a5b608ef81311030f9852e074bca3d290651cd/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a5b608ef81311030f9852e074bca3d290651cd/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=f6a5b608ef81311030f9852e074bca3d290651cd", "patch": "@@ -36,7 +36,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for FallibleImplFrom {\n         // check for `impl From<???> for ..`\n         let impl_def_id = cx.tcx.hir().local_def_id(item.hir_id);\n         if_chain! {\n-            if let hir::ItemKind::Impl(.., ref impl_items) = item.kind;\n+            if let hir::ItemKind::Impl(.., impl_items) = item.kind;\n             if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(impl_def_id);\n             if match_def_path(cx, impl_trait_ref.def_id, &FROM_TRAIT);\n             then {\n@@ -46,7 +46,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for FallibleImplFrom {\n     }\n }\n \n-fn lint_impl_body<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, impl_span: Span, impl_items: &hir::HirVec<hir::ImplItemRef>) {\n+fn lint_impl_body<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, impl_span: Span, impl_items: &[hir::ImplItemRef]) {\n     use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n     use rustc::hir::*;\n "}, {"sha": "790f070e4940e83fd8c22ab300fec2f03d40e690", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6a5b608ef81311030f9852e074bca3d290651cd/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a5b608ef81311030f9852e074bca3d290651cd/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=f6a5b608ef81311030f9852e074bca3d290651cd", "patch": "@@ -94,7 +94,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingInline {\n                 let desc = \"a function\";\n                 check_missing_inline_attrs(cx, &it.attrs, it.span, desc);\n             },\n-            hir::ItemKind::Trait(ref _is_auto, ref _unsafe, ref _generics, ref _bounds, ref trait_items) => {\n+            hir::ItemKind::Trait(ref _is_auto, ref _unsafe, ref _generics, ref _bounds, trait_items) => {\n                 // note: we need to check if the trait is exported so we can't use\n                 // `LateLintPass::check_trait_item` here.\n                 for tit in trait_items {"}, {"sha": "986cd94cfb3cb794f819004ad84003f1effa099b", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6a5b608ef81311030f9852e074bca3d290651cd/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a5b608ef81311030f9852e074bca3d290651cd/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=f6a5b608ef81311030f9852e074bca3d290651cd", "patch": "@@ -144,7 +144,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n         let fn_sig = cx.tcx.fn_sig(fn_def_id);\n         let fn_sig = cx.tcx.erase_late_bound_regions(&fn_sig);\n \n-        for (idx, ((input, &ty), arg)) in decl.inputs.iter().zip(fn_sig.inputs()).zip(&body.params).enumerate() {\n+        for (idx, ((input, &ty), arg)) in decl.inputs.iter().zip(fn_sig.inputs()).zip(body.params).enumerate() {\n             // All spans generated from a proc-macro invocation are the same...\n             if span == input.span {\n                 return;"}, {"sha": "fea21ab1c46bbb9296eddb660bb29f4c0bd7db05", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6a5b608ef81311030f9852e074bca3d290651cd/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a5b608ef81311030f9852e074bca3d290651cd/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=f6a5b608ef81311030f9852e074bca3d290651cd", "patch": "@@ -94,7 +94,7 @@ impl_lint_pass!(NewWithoutDefault => [NEW_WITHOUT_DEFAULT]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item<'_>) {\n-        if let hir::ItemKind::Impl(_, _, _, _, None, _, ref items) = item.kind {\n+        if let hir::ItemKind::Impl(_, _, _, _, None, _, items) = item.kind {\n             for assoc_item in items {\n                 if let hir::AssocItemKind::Method { has_self: false } = assoc_item.kind {\n                     let impl_item = cx.tcx.hir().impl_item(assoc_item.id);"}, {"sha": "b84a8840d5ee76841ad887d940aeac37c5c11e97", "filename": "clippy_lints/src/partialeq_ne_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6a5b608ef81311030f9852e074bca3d290651cd/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a5b608ef81311030f9852e074bca3d290651cd/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=f6a5b608ef81311030f9852e074bca3d290651cd", "patch": "@@ -34,7 +34,7 @@ declare_lint_pass!(PartialEqNeImpl => [PARTIALEQ_NE_IMPL]);\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PartialEqNeImpl {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item<'_>) {\n         if_chain! {\n-            if let ItemKind::Impl(_, _, _, _, Some(ref trait_ref), _, ref impl_items) = item.kind;\n+            if let ItemKind::Impl(_, _, _, _, Some(ref trait_ref), _, impl_items) = item.kind;\n             if !is_automatically_derived(&*item.attrs);\n             if let Some(eq_trait) = cx.tcx.lang_items().eq_trait();\n             if trait_ref.path.res.def_id() == eq_trait;"}, {"sha": "15cf50f802129f68f32efb6bf931dd5f755ed1d5", "filename": "clippy_lints/src/serde_api.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6a5b608ef81311030f9852e074bca3d290651cd/clippy_lints%2Fsrc%2Fserde_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a5b608ef81311030f9852e074bca3d290651cd/clippy_lints%2Fsrc%2Fserde_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fserde_api.rs?ref=f6a5b608ef81311030f9852e074bca3d290651cd", "patch": "@@ -23,7 +23,7 @@ declare_lint_pass!(SerdeAPI => [SERDE_API_MISUSE]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for SerdeAPI {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item<'_>) {\n-        if let ItemKind::Impl(_, _, _, _, Some(ref trait_ref), _, ref items) = item.kind {\n+        if let ItemKind::Impl(_, _, _, _, Some(ref trait_ref), _, items) = item.kind {\n             let did = trait_ref.path.res.def_id();\n             if let Some(visit_did) = get_trait_def_id(cx, &paths::SERDE_DE_VISITOR) {\n                 if did == visit_did {"}, {"sha": "00c919ee863c1eaeadc0cb9a89dea7d75cd012d4", "filename": "clippy_lints/src/unused_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6a5b608ef81311030f9852e074bca3d290651cd/clippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a5b608ef81311030f9852e074bca3d290651cd/clippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_self.rs?ref=f6a5b608ef81311030f9852e074bca3d290651cd", "patch": "@@ -44,7 +44,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedSelf {\n         if item.span.from_expansion() {\n             return;\n         }\n-        if let ItemKind::Impl(_, _, _, _, None, _, ref impl_item_refs) = item.kind {\n+        if let ItemKind::Impl(_, _, _, _, None, _, impl_item_refs) = item.kind {\n             for impl_item_ref in impl_item_refs {\n                 if_chain! {\n                     if let ImplItemRef {"}, {"sha": "37b6c19ff2ba68101503f06eebd590a7ef52338d", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6a5b608ef81311030f9852e074bca3d290651cd/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a5b608ef81311030f9852e074bca3d290651cd/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=f6a5b608ef81311030f9852e074bca3d290651cd", "patch": "@@ -170,7 +170,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UseSelf {\n             return;\n         }\n         if_chain! {\n-            if let ItemKind::Impl(.., ref item_type, ref refs) = item.kind;\n+            if let ItemKind::Impl(.., ref item_type, refs) = item.kind;\n             if let TyKind::Path(QPath::Resolved(_, ref item_path)) = item_type.kind;\n             then {\n                 let parameters = &item_path.segments.last().expect(SEGMENTS_MSG).args;"}]}