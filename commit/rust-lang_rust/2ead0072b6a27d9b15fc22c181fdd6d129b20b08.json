{"sha": "2ead0072b6a27d9b15fc22c181fdd6d129b20b08", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlYWQwMDcyYjZhMjdkOWIxNWZjMjJjMTgxZmRkNmQxMjliMjBiMDg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-20T06:36:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-20T06:36:01Z"}, "message": "Rollup merge of #61782 - Electron-libre:suggest_tuple_struct_syntax, r=estebank\n\nsuggest tuple struct syntax\n\nrefs #57242", "tree": {"sha": "8e2bd13dcaeb0ba1cffe52facaf6bd195171b1ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e2bd13dcaeb0ba1cffe52facaf6bd195171b1ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ead0072b6a27d9b15fc22c181fdd6d129b20b08", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdCylSCRBK7hj4Ov3rIwAAdHIIAKpfMYtXHQeHi3/JziJpZqk5\n90r+g55az8Q5QacUfNU9lzPNFUvAj5dx1CM3pEzO9em/scclTvNAppnmG4HDsubM\nZiYTjteDRMIcaoJBrASLIb+/mrwhr5OaNESVcYB+tUl17okL53LmK1AGxjf47kgy\n5U6H336n7uiSGCoigZTwMZlF3b/qjtBeaIFPVmxUYOBVpY6GK81zTzqaGeZkARGY\nLXUVd93ur4SyvzOOrfNI/xC/WWu1so3aeJd18SBGALKGHymnzesYCLhFG2F2rPoE\nhvYIYZ75Rm6nnntJOWS58aMgZEXH7nfT57hsuFES9fM9bSNH+KKH758Llh5pfXw=\n=r49x\n-----END PGP SIGNATURE-----\n", "payload": "tree 8e2bd13dcaeb0ba1cffe52facaf6bd195171b1ea\nparent 2e7e131b8e4ee2addf7f0ae64108a4da8210b369\nparent b72b1ac062a66819cd06a3f147486678e99b4f40\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1561012561 +0200\ncommitter GitHub <noreply@github.com> 1561012561 +0200\n\nRollup merge of #61782 - Electron-libre:suggest_tuple_struct_syntax, r=estebank\n\nsuggest tuple struct syntax\n\nrefs #57242\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ead0072b6a27d9b15fc22c181fdd6d129b20b08", "html_url": "https://github.com/rust-lang/rust/commit/2ead0072b6a27d9b15fc22c181fdd6d129b20b08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ead0072b6a27d9b15fc22c181fdd6d129b20b08/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e7e131b8e4ee2addf7f0ae64108a4da8210b369", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e7e131b8e4ee2addf7f0ae64108a4da8210b369", "html_url": "https://github.com/rust-lang/rust/commit/2e7e131b8e4ee2addf7f0ae64108a4da8210b369"}, {"sha": "b72b1ac062a66819cd06a3f147486678e99b4f40", "url": "https://api.github.com/repos/rust-lang/rust/commits/b72b1ac062a66819cd06a3f147486678e99b4f40", "html_url": "https://github.com/rust-lang/rust/commit/b72b1ac062a66819cd06a3f147486678e99b4f40"}], "stats": {"total": 97, "additions": 63, "deletions": 34}, "files": [{"sha": "8ca1b85ad9aee49a54f321398196227f557c5bce", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 51, "deletions": 30, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/2ead0072b6a27d9b15fc22c181fdd6d129b20b08/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ead0072b6a27d9b15fc22c181fdd6d129b20b08/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=2ead0072b6a27d9b15fc22c181fdd6d129b20b08", "patch": "@@ -1125,7 +1125,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                     err.emit();\n                 } else {\n-                    self.report_unknown_field(adt_ty, variant, field, ast_fields, kind_name);\n+                    self.report_unknown_field(adt_ty, variant, field, ast_fields, kind_name, span);\n                 }\n \n                 tcx.types.err\n@@ -1196,6 +1196,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         field: &hir::Field,\n         skip_fields: &[hir::Field],\n         kind_name: &str,\n+        ty_span: Span\n     ) {\n         if variant.recovered {\n             return;\n@@ -1215,37 +1216,57 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             },\n             ty);\n-        // prevent all specified fields from being suggested\n-        let skip_fields = skip_fields.iter().map(|ref x| x.ident.as_str());\n-        if let Some(field_name) = Self::suggest_field_name(variant,\n-                                                           &field.ident.as_str(),\n-                                                           skip_fields.collect()) {\n-            err.span_suggestion(\n-                field.ident.span,\n-                \"a field with a similar name exists\",\n-                field_name.to_string(),\n-                Applicability::MaybeIncorrect,\n-            );\n-        } else {\n-            match ty.sty {\n-                ty::Adt(adt, ..) => {\n-                    if adt.is_enum() {\n-                        err.span_label(field.ident.span,\n-                                       format!(\"`{}::{}` does not have this field\",\n-                                               ty, variant.ident));\n-                    } else {\n-                        err.span_label(field.ident.span,\n-                                       format!(\"`{}` does not have this field\", ty));\n-                    }\n-                    let available_field_names = self.available_field_names(variant);\n-                    if !available_field_names.is_empty() {\n-                        err.note(&format!(\"available fields are: {}\",\n-                                          self.name_series_display(available_field_names)));\n+        match variant.ctor_kind {\n+            CtorKind::Fn => {\n+                err.span_label(variant.ident.span, format!(\"`{adt}` defined here\", adt=ty));\n+                err.span_label(field.ident.span, \"field does not exist\");\n+                err.span_label(ty_span, format!(\n+                        \"`{adt}` is a tuple {kind_name}, \\\n+                         use the appropriate syntax: `{adt}(/* fields */)`\",\n+                    adt=ty,\n+                    kind_name=kind_name\n+                ));\n+            }\n+            _ => {\n+                // prevent all specified fields from being suggested\n+                let skip_fields = skip_fields.iter().map(|ref x| x.ident.as_str());\n+                if let Some(field_name) = Self::suggest_field_name(\n+                    variant,\n+                    &field.ident.as_str(),\n+                    skip_fields.collect()\n+                ) {\n+                    err.span_suggestion(\n+                        field.ident.span,\n+                        \"a field with a similar name exists\",\n+                        field_name.to_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                } else {\n+                    match ty.sty {\n+                        ty::Adt(adt, ..) => {\n+                            if adt.is_enum() {\n+                                err.span_label(field.ident.span, format!(\n+                                    \"`{}::{}` does not have this field\",\n+                                    ty,\n+                                    variant.ident\n+                                ));\n+                            } else {\n+                                err.span_label(field.ident.span, format!(\n+                                    \"`{}` does not have this field\",\n+                                    ty\n+                                ));\n+                            }\n+                            let available_field_names = self.available_field_names(variant);\n+                            if !available_field_names.is_empty() {\n+                                err.note(&format!(\"available fields are: {}\",\n+                                                  self.name_series_display(available_field_names)));\n+                            }\n+                        }\n+                        _ => bug!(\"non-ADT passed to report_unknown_field\")\n                     }\n-                }\n-                _ => bug!(\"non-ADT passed to report_unknown_field\")\n+                };\n             }\n-        };\n+        }\n         err.emit();\n     }\n "}, {"sha": "257ec914a61ca028979c4952b061b09f13f15bed", "filename": "src/test/ui/issues/issue-4736.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2ead0072b6a27d9b15fc22c181fdd6d129b20b08/src%2Ftest%2Fui%2Fissues%2Fissue-4736.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ead0072b6a27d9b15fc22c181fdd6d129b20b08/src%2Ftest%2Fui%2Fissues%2Fissue-4736.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4736.stderr?ref=2ead0072b6a27d9b15fc22c181fdd6d129b20b08", "patch": "@@ -1,8 +1,13 @@\n error[E0560]: struct `NonCopyable` has no field named `p`\n   --> $DIR/issue-4736.rs:4:26\n    |\n+LL | struct NonCopyable(());\n+   |        ----------- `NonCopyable` defined here\n+...\n LL |     let z = NonCopyable{ p: () };\n-   |                          ^ help: a field with a similar name exists: `0`\n+   |             -----------  ^ field does not exist\n+   |             |\n+   |             `NonCopyable` is a tuple struct, use the appropriate syntax: `NonCopyable(/* fields */)`\n \n error: aborting due to previous error\n "}, {"sha": "5202393f559c9aa3828820434b10fe475ccbd28a", "filename": "src/test/ui/numeric/numeric-fields.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2ead0072b6a27d9b15fc22c181fdd6d129b20b08/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ead0072b6a27d9b15fc22c181fdd6d129b20b08/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-fields.stderr?ref=2ead0072b6a27d9b15fc22c181fdd6d129b20b08", "patch": "@@ -1,10 +1,13 @@\n error[E0560]: struct `S` has no field named `0b1`\n   --> $DIR/numeric-fields.rs:4:15\n    |\n+LL | struct S(u8, u16);\n+   |        - `S` defined here\n+...\n LL |     let s = S{0b1: 10, 0: 11};\n-   |               ^^^ `S` does not have this field\n-   |\n-   = note: available fields are: `0`, `1`\n+   |             - ^^^ field does not exist\n+   |             |\n+   |             `S` is a tuple struct, use the appropriate syntax: `S(/* fields */)`\n \n error[E0026]: struct `S` does not have a field named `0x1`\n   --> $DIR/numeric-fields.rs:7:17"}]}