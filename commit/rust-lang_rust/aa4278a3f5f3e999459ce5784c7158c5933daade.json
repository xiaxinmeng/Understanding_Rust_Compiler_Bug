{"sha": "aa4278a3f5f3e999459ce5784c7158c5933daade", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNDI3OGEzZjVmM2U5OTk0NTljZTU3ODRjNzE1OGM1OTMzZGFhZGU=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-04-18T15:08:32Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-04-18T15:21:39Z"}, "message": "Require values to be copyable when cast\n\nCloses #2222", "tree": {"sha": "1551e1673ab5f9949578d4a026b9cbfa6ba0ab2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1551e1673ab5f9949578d4a026b9cbfa6ba0ab2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa4278a3f5f3e999459ce5784c7158c5933daade", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa4278a3f5f3e999459ce5784c7158c5933daade", "html_url": "https://github.com/rust-lang/rust/commit/aa4278a3f5f3e999459ce5784c7158c5933daade", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa4278a3f5f3e999459ce5784c7158c5933daade/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a65af017ca154dcb31dbbd405a75733d0348a25a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a65af017ca154dcb31dbbd405a75733d0348a25a", "html_url": "https://github.com/rust-lang/rust/commit/a65af017ca154dcb31dbbd405a75733d0348a25a"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "0b29b0c52cd70319da29a6fe43ae09d8bc7bad98", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa4278a3f5f3e999459ce5784c7158c5933daade/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa4278a3f5f3e999459ce5784c7158c5933daade/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=aa4278a3f5f3e999459ce5784c7158c5933daade", "patch": "@@ -141,7 +141,7 @@ fn check_expr(e: @expr, cx: ctx, v: visit::vt<ctx>) {\n     alt e.node {\n       expr_assign(_, ex) | expr_assign_op(_, _, ex) |\n       expr_unary(box(_), ex) | expr_unary(uniq(_), ex) |\n-      expr_ret(some(ex)) { maybe_copy(cx, ex); }\n+      expr_ret(some(ex)) | expr_cast(ex, _) { maybe_copy(cx, ex); }\n       expr_copy(expr) { check_copy_ex(cx, expr, false); }\n       // Vector add copies.\n       expr_binary(add, ls, rs) { maybe_copy(cx, ls); maybe_copy(cx, rs); }"}, {"sha": "4a6e48a681f144fbef35062ebbacdbf10426e4a5", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/aa4278a3f5f3e999459ce5784c7158c5933daade/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa4278a3f5f3e999459ce5784c7158c5933daade/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=aa4278a3f5f3e999459ce5784c7158c5933daade", "patch": "@@ -376,7 +376,8 @@ impl of region_scope for @fn_ctxt {\n }\n \n enum anon_rscope = {anon: ty::region, base: region_scope};\n-fn in_anon_rscope<RS: region_scope>(self: RS, r: ty::region) -> @anon_rscope {\n+fn in_anon_rscope<RS: region_scope copy>(self: RS, r: ty::region)\n+    -> @anon_rscope {\n     @anon_rscope({anon: r, base: self as region_scope})\n }\n impl of region_scope for @anon_rscope {\n@@ -395,7 +396,7 @@ impl of region_scope for self_rscope {\n }\n \n enum binding_rscope = {base: region_scope};\n-fn in_binding_rscope<RS: region_scope>(self: RS) -> @binding_rscope {\n+fn in_binding_rscope<RS: region_scope copy>(self: RS) -> @binding_rscope {\n     let base = self as region_scope;\n     @binding_rscope({base: base})\n }\n@@ -410,7 +411,7 @@ impl of region_scope for @binding_rscope {\n     }\n }\n \n-fn ast_region_to_region<AC: ast_conv, RS: region_scope>(\n+fn ast_region_to_region<AC: ast_conv, RS: region_scope copy>(\n     self: AC, rscope: RS, span: span, a_r: ast::region) -> ty::region {\n \n     alt a_r.node {\n@@ -437,16 +438,16 @@ fn ast_region_to_region<AC: ast_conv, RS: region_scope>(\n // Parses the programmer's textual representation of a type into our\n // internal notion of a type. `getter` is a function that returns the type\n // corresponding to a definition ID:\n-fn ast_ty_to_ty<AC: ast_conv, RS: region_scope>(\n+fn ast_ty_to_ty<AC: ast_conv, RS: region_scope copy>(\n     self: AC, rscope: RS, &&ast_ty: @ast::ty) -> ty::t {\n \n-    fn ast_mt_to_mt<AC: ast_conv, RS: region_scope>(\n+    fn ast_mt_to_mt<AC: ast_conv, RS: region_scope copy>(\n         self: AC, rscope: RS, mt: ast::mt) -> ty::mt {\n \n         ret {ty: ast_ty_to_ty(self, rscope, mt.ty), mutbl: mt.mutbl};\n     }\n \n-    fn instantiate<AC: ast_conv, RS: region_scope>(\n+    fn instantiate<AC: ast_conv, RS: region_scope copy>(\n         self: AC, rscope: RS, sp: span, id: ast::def_id,\n         path_id: ast::node_id, args: [@ast::ty]) -> ty::t {\n \n@@ -478,7 +479,7 @@ fn ast_ty_to_ty<AC: ast_conv, RS: region_scope>(\n         ret ty;\n     }\n \n-    fn mk_vstore<AC: ast_conv, RS: region_scope>(\n+    fn mk_vstore<AC: ast_conv, RS: region_scope copy>(\n         self: AC, rscope: RS, a_seq_ty: @ast::ty, vst: ty::vstore) -> ty::t {\n \n         let tcx = self.tcx();\n@@ -819,7 +820,7 @@ fn replace_bound_regions(\n     }\n }\n \n-fn ty_of_arg<AC: ast_conv, RS: region_scope>(\n+fn ty_of_arg<AC: ast_conv, RS: region_scope copy>(\n     self: AC, rscope: RS, a: ast::arg) -> ty::arg {\n \n     fn arg_mode(tcx: ty::ctxt, m: ast::mode, ty: ty::t) -> ast::mode {\n@@ -849,7 +850,7 @@ fn ty_of_arg<AC: ast_conv, RS: region_scope>(\n     let mode = arg_mode(self.tcx(), a.mode, ty);\n     {mode: mode, ty: ty}\n }\n-fn ty_of_fn_decl<AC: ast_conv, RS: region_scope>(\n+fn ty_of_fn_decl<AC: ast_conv, RS: region_scope copy>(\n     self: AC, rscope: RS,\n     proto: ast::proto,\n     decl: ast::fn_decl) -> ty::fn_ty {"}]}