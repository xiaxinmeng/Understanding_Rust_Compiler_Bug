{"sha": "7824a9d47df8aea31b0cc694c70b654a8090f411", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4MjRhOWQ0N2RmOGFlYTMxYjBjYzY5NGM3MGI2NTRhODA5MGY0MTE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-02-27T05:38:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-27T05:38:09Z"}, "message": "Rollup merge of #69500 - cuviper:par_for_each_in-item, r=Mark-Simulacrum\n\nSimplify the signature of par_for_each_in\n\nGiven `T: IntoIterator`/`IntoParallelIterator`, `T::Item` is\nunambiguous, so we don't need the explicit trait casting.", "tree": {"sha": "a1d17b19b9e6967b7c7ae3f2f35174b019e47fd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1d17b19b9e6967b7c7ae3f2f35174b019e47fd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7824a9d47df8aea31b0cc694c70b654a8090f411", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeV1XBCRBK7hj4Ov3rIwAAdHIIAGqNFwrFMLKQ3M2at9lG1TRz\n5pgyqpn3WmYoWPLr3eoyl5UZH46Cy3aooQbbx8QCR4+rgdXbzr7Vx3TCUkExNCtB\nOOMw6Jpqw+jm+SS/yg5qnTf51sMAeBmqPkr+Be0ZasLcoJLqjolgT2+RLzPeCiLZ\nWQyNapxkCgz32ZgDH1PUqI20TMEd9gBH5g9ZTjnNPyt4PP3KZX+IRFV55jx3BeqI\n63sQ4AW947d1VSQvVOU/F23qBZKzzBATthziedYLqYV4TjGlKWFI2g2l4DNLPiFw\nKlc0F/r/BBI9rzgR5iv55fC6E8l0wBnvpFOpgSgB6iqa/TqxRObNOotdPyLJn8M=\n=DJAG\n-----END PGP SIGNATURE-----\n", "payload": "tree a1d17b19b9e6967b7c7ae3f2f35174b019e47fd3\nparent 6e66bfd4cc168a59e1c81f3b26105a8e41fa1c36\nparent 3d47ebeb0e96e328f247cb691f376e6431f258aa\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1582781889 +0900\ncommitter GitHub <noreply@github.com> 1582781889 +0900\n\nRollup merge of #69500 - cuviper:par_for_each_in-item, r=Mark-Simulacrum\n\nSimplify the signature of par_for_each_in\n\nGiven `T: IntoIterator`/`IntoParallelIterator`, `T::Item` is\nunambiguous, so we don't need the explicit trait casting.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7824a9d47df8aea31b0cc694c70b654a8090f411", "html_url": "https://github.com/rust-lang/rust/commit/7824a9d47df8aea31b0cc694c70b654a8090f411", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7824a9d47df8aea31b0cc694c70b654a8090f411/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e66bfd4cc168a59e1c81f3b26105a8e41fa1c36", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e66bfd4cc168a59e1c81f3b26105a8e41fa1c36", "html_url": "https://github.com/rust-lang/rust/commit/6e66bfd4cc168a59e1c81f3b26105a8e41fa1c36"}, {"sha": "3d47ebeb0e96e328f247cb691f376e6431f258aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d47ebeb0e96e328f247cb691f376e6431f258aa", "html_url": "https://github.com/rust-lang/rust/commit/3d47ebeb0e96e328f247cb691f376e6431f258aa"}], "stats": {"total": 10, "additions": 2, "deletions": 8}, "files": [{"sha": "9051b1751b119426d2a6101dfe6ee867492834b1", "filename": "src/librustc_data_structures/sync.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7824a9d47df8aea31b0cc694c70b654a8090f411/src%2Flibrustc_data_structures%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7824a9d47df8aea31b0cc694c70b654a8090f411/src%2Flibrustc_data_structures%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsync.rs?ref=7824a9d47df8aea31b0cc694c70b654a8090f411", "patch": "@@ -203,11 +203,7 @@ cfg_if! {\n             t.into_iter()\n         }\n \n-        pub fn par_for_each_in<T: IntoIterator>(\n-            t: T,\n-            for_each:\n-                impl Fn(<<T as IntoIterator>::IntoIter as Iterator>::Item) + Sync + Send\n-        ) {\n+        pub fn par_for_each_in<T: IntoIterator>(t: T, for_each: impl Fn(T::Item) + Sync + Send) {\n             // We catch panics here ensuring that all the loop iterations execute.\n             // This makes behavior consistent with the parallel compiler.\n             let mut panic = None;\n@@ -397,9 +393,7 @@ cfg_if! {\n \n         pub fn par_for_each_in<T: IntoParallelIterator>(\n             t: T,\n-            for_each: impl Fn(\n-                <<T as IntoParallelIterator>::Iter as ParallelIterator>::Item\n-            ) + Sync + Send\n+            for_each: impl Fn(T::Item) + Sync + Send,\n         ) {\n             t.into_par_iter().for_each(for_each)\n         }"}]}