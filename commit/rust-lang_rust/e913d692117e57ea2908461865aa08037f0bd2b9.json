{"sha": "e913d692117e57ea2908461865aa08037f0bd2b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5MTNkNjkyMTE3ZTU3ZWEyOTA4NDYxODY1YWEwODAzN2YwYmQyYjk=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-05-08T09:58:54Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-05-14T04:41:34Z"}, "message": "Remove `StringReader::col`.\n\nIt only has a single use, within code handling indented block comments.\nWe can replace that with the new `FileMap::col_pos()`, which computes\nthe col position (BytePos instead of CharPos) based on the record of the\nlast newline char (which we already record).\n\nThis is actually an improvement, because\n`trim_whitespace_prefix_and_push_line()` was using `col`, which is a\n`CharPos`, as a slice index, which is a byte/char confusion.", "tree": {"sha": "b756de98b23cedccbf0fd731d3c7e71876960f5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b756de98b23cedccbf0fd731d3c7e71876960f5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e913d692117e57ea2908461865aa08037f0bd2b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e913d692117e57ea2908461865aa08037f0bd2b9", "html_url": "https://github.com/rust-lang/rust/commit/e913d692117e57ea2908461865aa08037f0bd2b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e913d692117e57ea2908461865aa08037f0bd2b9/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "444b770f4cd8d817e7b7fec683ea301620034d13", "url": "https://api.github.com/repos/rust-lang/rust/commits/444b770f4cd8d817e7b7fec683ea301620034d13", "html_url": "https://github.com/rust-lang/rust/commit/444b770f4cd8d817e7b7fec683ea301620034d13"}], "stats": {"total": 29, "additions": 22, "deletions": 7}, "files": [{"sha": "672b0b9bbd16da8006ab5ae94f6a6e70fb39725f", "filename": "src/libsyntax/parse/lexer/comments.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e913d692117e57ea2908461865aa08037f0bd2b9/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e913d692117e57ea2908461865aa08037f0bd2b9/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs?ref=e913d692117e57ea2908461865aa08037f0bd2b9", "patch": "@@ -238,7 +238,19 @@ fn read_block_comment(rdr: &mut StringReader,\n     debug!(\">>> block comment\");\n     let p = rdr.pos;\n     let mut lines: Vec<String> = Vec::new();\n-    let col = rdr.col;\n+\n+    // Count the number of chars since the start of the line by rescanning.\n+    let mut src_index = rdr.src_index(rdr.filemap.line_begin_pos());\n+    let end_src_index = rdr.src_index(rdr.pos);\n+    assert!(src_index <= end_src_index);\n+    let mut n = 0;\n+    while src_index < end_src_index {\n+        let c = char_at(&rdr.src, src_index);\n+        src_index += c.len_utf8();\n+        n += 1;\n+    }\n+    let col = CharPos(n);\n+\n     rdr.bump();\n     rdr.bump();\n "}, {"sha": "566e0c213b119d9aa89a83c9e0f3420245dd44a0", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e913d692117e57ea2908461865aa08037f0bd2b9/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e913d692117e57ea2908461865aa08037f0bd2b9/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=e913d692117e57ea2908461865aa08037f0bd2b9", "patch": "@@ -44,8 +44,6 @@ pub struct StringReader<'a> {\n     pub next_pos: BytePos,\n     /// The absolute offset within the codemap of the current character\n     pub pos: BytePos,\n-    /// The column of the next character to read\n-    pub col: CharPos,\n     /// The current character (which has been read from self.pos)\n     pub ch: Option<char>,\n     pub filemap: Lrc<syntax_pos::FileMap>,\n@@ -175,7 +173,6 @@ impl<'a> StringReader<'a> {\n             sess,\n             next_pos: filemap.start_pos,\n             pos: filemap.start_pos,\n-            col: CharPos(0),\n             ch: Some('\\n'),\n             filemap,\n             end_src_index: src.len(),\n@@ -442,9 +439,6 @@ impl<'a> StringReader<'a> {\n                 if self.save_new_lines_and_multibyte {\n                     self.filemap.next_line(self.next_pos);\n                 }\n-                self.col = CharPos(0);\n-            } else {\n-                self.col = self.col + CharPos(1);\n             }\n             if next_ch_len > 1 {\n                 if self.save_new_lines_and_multibyte {"}, {"sha": "26ab5d0a34ba54f1a2554d1b3695dad68568021d", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e913d692117e57ea2908461865aa08037f0bd2b9/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e913d692117e57ea2908461865aa08037f0bd2b9/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=e913d692117e57ea2908461865aa08037f0bd2b9", "patch": "@@ -971,6 +971,15 @@ impl FileMap {\n         lines.push(pos);\n     }\n \n+    /// Return the BytePos of the beginning of the current line.\n+    pub fn line_begin_pos(&self) -> BytePos {\n+        let lines = self.lines.borrow();\n+        match lines.last() {\n+            Some(&line_pos) => line_pos,\n+            None => self.start_pos,\n+        }\n+    }\n+\n     /// Add externally loaded source.\n     /// If the hash of the input doesn't match or no input is supplied via None,\n     /// it is interpreted as an error and the corresponding enum variant is set."}]}