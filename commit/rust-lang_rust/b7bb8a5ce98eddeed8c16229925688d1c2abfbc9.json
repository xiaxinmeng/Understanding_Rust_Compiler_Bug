{"sha": "b7bb8a5ce98eddeed8c16229925688d1c2abfbc9", "node_id": "C_kwDOAAsO6NoAKGI3YmI4YTVjZTk4ZWRkZWVkOGMxNjIyOTkyNTY4OGQxYzJhYmZiYzk", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-05T18:23:16Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-11T16:29:25Z"}, "message": "Do not filter substs in `remap_generic_params_to_declaration_params`.\n\nThe relevant filtering should have been performed by borrowck.", "tree": {"sha": "5bd81e7ab9df2caa0de77377bd9cebc133226fc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bd81e7ab9df2caa0de77377bd9cebc133226fc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7bb8a5ce98eddeed8c16229925688d1c2abfbc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7bb8a5ce98eddeed8c16229925688d1c2abfbc9", "html_url": "https://github.com/rust-lang/rust/commit/b7bb8a5ce98eddeed8c16229925688d1c2abfbc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7bb8a5ce98eddeed8c16229925688d1c2abfbc9/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b22c152958eade17a71d899b29a2d39bcc77aa48", "url": "https://api.github.com/repos/rust-lang/rust/commits/b22c152958eade17a71d899b29a2d39bcc77aa48", "html_url": "https://github.com/rust-lang/rust/commit/b22c152958eade17a71d899b29a2d39bcc77aa48"}], "stats": {"total": 69, "additions": 41, "deletions": 28}, "files": [{"sha": "5f9b4e74e9c5af19e9f6e5081561f28f9daad857", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7bb8a5ce98eddeed8c16229925688d1c2abfbc9/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7bb8a5ce98eddeed8c16229925688d1c2abfbc9/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=b7bb8a5ce98eddeed8c16229925688d1c2abfbc9", "patch": "@@ -250,7 +250,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         }\n \n         let definition_ty = instantiated_ty\n-            .remap_generic_params_to_declaration_params(opaque_type_key, self.tcx, false, origin)\n+            .remap_generic_params_to_declaration_params(opaque_type_key, self.tcx, false)\n             .ty;\n \n         if !check_opaque_type_parameter_valid("}, {"sha": "30ef7f3ba2927f28aec03cbf13af091278ce4422", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7bb8a5ce98eddeed8c16229925688d1c2abfbc9/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7bb8a5ce98eddeed8c16229925688d1c2abfbc9/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=b7bb8a5ce98eddeed8c16229925688d1c2abfbc9", "patch": "@@ -564,7 +564,6 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n                 opaque_type_key,\n                 self.fcx.infcx.tcx,\n                 true,\n-                decl.origin,\n             );\n \n             self.typeck_results.concrete_opaque_types.insert(opaque_type_key.def_id, hidden_type);"}, {"sha": "d5f2fe3ac3792c1a4304c7fa125155cf2128f26c", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b7bb8a5ce98eddeed8c16229925688d1c2abfbc9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7bb8a5ce98eddeed8c16229925688d1c2abfbc9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=b7bb8a5ce98eddeed8c16229925688d1c2abfbc9", "patch": "@@ -28,7 +28,6 @@ use crate::ty::util::Discr;\n pub use adt::*;\n pub use assoc::*;\n pub use generics::*;\n-use hir::OpaqueTyOrigin;\n use rustc_ast as ast;\n use rustc_ast::node_id::NodeMap;\n use rustc_attr as attr;\n@@ -1316,7 +1315,6 @@ impl<'tcx> OpaqueHiddenType<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         // typeck errors have subpar spans for opaque types, so delay error reporting until borrowck.\n         ignore_errors: bool,\n-        origin: OpaqueTyOrigin,\n     ) -> Self {\n         let OpaqueTypeKey { def_id, substs } = opaque_type_key;\n \n@@ -1332,30 +1330,7 @@ impl<'tcx> OpaqueHiddenType<'tcx> {\n         // This zip may have several times the same lifetime in `substs` paired with a different\n         // lifetime from `id_substs`.  Simply `collect`ing the iterator is the correct behaviour:\n         // it will pick the last one, which is the one we introduced in the impl-trait desugaring.\n-        let map = substs.iter().zip(id_substs);\n-\n-        let map: FxHashMap<GenericArg<'tcx>, GenericArg<'tcx>> = match origin {\n-            // HACK: The HIR lowering for async fn does not generate\n-            // any `+ Captures<'x>` bounds for the `impl Future<...>`, so all async fns with lifetimes\n-            // would now fail to compile. We should probably just make hir lowering fill this in properly.\n-            OpaqueTyOrigin::AsyncFn(_) => map.collect(),\n-            OpaqueTyOrigin::FnReturn(_) | OpaqueTyOrigin::TyAlias => {\n-                // Opaque types may only use regions that are bound. So for\n-                // ```rust\n-                // type Foo<'a, 'b, 'c> = impl Trait<'a> + 'b;\n-                // ```\n-                // we may not use `'c` in the hidden type.\n-                let variances = tcx.variances_of(def_id);\n-                debug!(?variances);\n-\n-                map.filter(|(_, v)| {\n-                    let ty::GenericArgKind::Lifetime(lt) = v.unpack() else { return true };\n-                    let ty::ReEarlyBound(ebr) = lt.kind() else { bug!() };\n-                    variances[ebr.index as usize] == ty::Variance::Invariant\n-                })\n-                .collect()\n-            }\n-        };\n+        let map = substs.iter().zip(id_substs).collect();\n         debug!(\"map = {:#?}\", map);\n \n         // Convert the type from the function into a type valid outside"}, {"sha": "06dc2d4c8d34bf812d0b69eb61e90c453fc8247b", "filename": "tests/ui/impl-trait/issues/issue-105826.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b7bb8a5ce98eddeed8c16229925688d1c2abfbc9/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-105826.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7bb8a5ce98eddeed8c16229925688d1c2abfbc9/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-105826.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-105826.rs?ref=b7bb8a5ce98eddeed8c16229925688d1c2abfbc9", "patch": "@@ -0,0 +1,39 @@\n+// check-pass\n+\n+use std::io::Write;\n+\n+struct A(Vec<u8>);\n+\n+struct B<'a> {\n+    one: &'a mut A,\n+    two: &'a mut Vec<u8>,\n+    three: Vec<u8>,\n+}\n+\n+impl<'a> B<'a> {\n+    fn one(&mut self) -> &mut impl Write {\n+        &mut self.one.0\n+    }\n+    fn two(&mut self) -> &mut impl Write {\n+        &mut *self.two\n+    }\n+    fn three(&mut self) -> &mut impl Write {\n+        &mut self.three\n+    }\n+}\n+\n+struct C<'a>(B<'a>);\n+\n+impl<'a> C<'a> {\n+    fn one(&mut self) -> &mut impl Write {\n+        self.0.one()\n+    }\n+    fn two(&mut self) -> &mut impl Write {\n+        self.0.two()\n+    }\n+    fn three(&mut self) -> &mut impl Write {\n+        self.0.three()\n+    }\n+}\n+\n+fn main() {}"}]}