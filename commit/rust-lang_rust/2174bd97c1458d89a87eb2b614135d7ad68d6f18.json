{"sha": "2174bd97c1458d89a87eb2b614135d7ad68d6f18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNzRiZDk3YzE0NThkODlhODdlYjJiNjE0MTM1ZDdhZDY4ZDZmMTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-14T23:02:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-14T23:02:32Z"}, "message": "Auto merge of #32960 - steveklabnik:rollup, r=steveklabnik\n\nRollup of 15 pull requests\n\n- Successful merges: #32646, #32855, #32856, #32865, #32868, #32869, #32876, #32884, #32885, #32893, #32894, #32932, #32937, #32940, #32941\n- Failed merges: #32912", "tree": {"sha": "f74e2705da05ee32cf98bcb44b3144c2ae0d3c2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f74e2705da05ee32cf98bcb44b3144c2ae0d3c2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2174bd97c1458d89a87eb2b614135d7ad68d6f18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2174bd97c1458d89a87eb2b614135d7ad68d6f18", "html_url": "https://github.com/rust-lang/rust/commit/2174bd97c1458d89a87eb2b614135d7ad68d6f18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2174bd97c1458d89a87eb2b614135d7ad68d6f18/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b5d24ac5a3b5dc2ca8efe317f3c0771295ba8fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b5d24ac5a3b5dc2ca8efe317f3c0771295ba8fd", "html_url": "https://github.com/rust-lang/rust/commit/2b5d24ac5a3b5dc2ca8efe317f3c0771295ba8fd"}, {"sha": "7e2302b253bc52c49d46de2166b2274f8a8be046", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e2302b253bc52c49d46de2166b2274f8a8be046", "html_url": "https://github.com/rust-lang/rust/commit/7e2302b253bc52c49d46de2166b2274f8a8be046"}], "stats": {"total": 107, "additions": 77, "deletions": 30}, "files": [{"sha": "6533102a92d56fe2449f629d643fda74290e8a8a", "filename": "RELEASES.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2174bd97c1458d89a87eb2b614135d7ad68d6f18/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/2174bd97c1458d89a87eb2b614135d7ad68d6f18/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=2174bd97c1458d89a87eb2b614135d7ad68d6f18", "patch": "@@ -418,7 +418,7 @@ Compatibility Notes\n   numbers [no longer return platform-specific types][1.8r], but\n   instead return widened integers. [RFC 1415].\n * [Modules sourced from the filesystem cannot appear within arbitrary\n-  blocks, but only within other modules][1.8m].\n+  blocks, but only within other modules][1.8mf].\n * [`--cfg` compiler flags are parsed strictly as identifiers][1.8c].\n * On Unix, [stack overflow triggers a runtime abort instead of a\n   SIGSEGV][1.8so].\n@@ -448,7 +448,7 @@ Compatibility Notes\n [1.8h]: https://github.com/rust-lang/rust/pull/31460\n [1.8l]: https://github.com/rust-lang/rust/pull/31668\n [1.8m]: https://github.com/rust-lang/rust/pull/31020\n-[1.8m]: https://github.com/rust-lang/rust/pull/31534\n+[1.8mf]: https://github.com/rust-lang/rust/pull/31534\n [1.8mp]: https://github.com/rust-lang/rust/pull/30894\n [1.8mr]: https://users.rust-lang.org/t/multirust-0-8-with-cross-std-installation/4901\n [1.8ms]: https://github.com/rust-lang/rust/pull/30448"}, {"sha": "431de6a3f9c80b3588e9c9a00bb6f20cbca84bef", "filename": "mk/main.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2174bd97c1458d89a87eb2b614135d7ad68d6f18/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/2174bd97c1458d89a87eb2b614135d7ad68d6f18/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=2174bd97c1458d89a87eb2b614135d7ad68d6f18", "patch": "@@ -13,7 +13,7 @@\n ######################################################################\n \n # The version number\n-CFG_RELEASE_NUM=1.9.0\n+CFG_RELEASE_NUM=1.10.0\n \n # An optional number to put after the label, e.g. '.2' -> '-beta.2'\n # NB Make sure it starts with a dot to conform to semver pre-release"}, {"sha": "9bb3e79744bb634b0f5838b5e9f87ff8c2b1d893", "filename": "src/bootstrap/Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Fbootstrap%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Fbootstrap%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.lock?ref=2174bd97c1458d89a87eb2b614135d7ad68d6f18", "patch": "@@ -3,7 +3,7 @@ name = \"bootstrap\"\n version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n- \"cmake 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"gcc 0.3.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -21,7 +21,7 @@ version = \"0.1.0\"\n \n [[package]]\n name = \"cmake\"\n-version = \"0.1.16\"\n+version = \"0.1.17\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"gcc 0.3.26 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "7b379e1c7b6b9443dacb55701ccfe4dda278d1ba", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=2174bd97c1458d89a87eb2b614135d7ad68d6f18", "patch": "@@ -21,7 +21,7 @@ path = \"rustdoc.rs\"\n \n [dependencies]\n build_helper = { path = \"../build_helper\" }\n-cmake = \"0.1.10\"\n+cmake = \"0.1.17\"\n filetime = \"0.1\"\n num_cpus = \"0.2\"\n toml = \"0.1\""}, {"sha": "98fdaae64a5f202cd73d3c510daec05cfaa1fb82", "filename": "src/bootstrap/build/config.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Fbootstrap%2Fbuild%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Fbootstrap%2Fbuild%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fconfig.rs?ref=2174bd97c1458d89a87eb2b614135d7ad68d6f18", "patch": "@@ -31,6 +31,7 @@ use toml::{Parser, Decoder, Value};\n #[derive(Default)]\n pub struct Config {\n     pub ccache: bool,\n+    pub ninja: bool,\n     pub verbose: bool,\n     pub submodules: bool,\n     pub compiler_docs: bool,\n@@ -107,6 +108,7 @@ struct Build {\n #[derive(RustcDecodable, Default)]\n struct Llvm {\n     ccache: Option<bool>,\n+    ninja: Option<bool>,\n     assertions: Option<bool>,\n     optimize: Option<bool>,\n     version_check: Option<bool>,\n@@ -200,9 +202,9 @@ impl Config {\n \n         if let Some(ref llvm) = toml.llvm {\n             set(&mut config.ccache, llvm.ccache);\n+            set(&mut config.ninja, llvm.ninja);\n             set(&mut config.llvm_assertions, llvm.assertions);\n             set(&mut config.llvm_optimize, llvm.optimize);\n-            set(&mut config.llvm_optimize, llvm.optimize);\n             set(&mut config.llvm_version_check, llvm.version_check);\n             set(&mut config.llvm_static_stdcpp, llvm.static_libstdcpp);\n         }"}, {"sha": "91bc0924b1fef36ca07a17347bc834601100197a", "filename": "src/bootstrap/build/native.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Fbootstrap%2Fbuild%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Fbootstrap%2Fbuild%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fnative.rs?ref=2174bd97c1458d89a87eb2b614135d7ad68d6f18", "patch": "@@ -43,6 +43,9 @@ pub fn llvm(build: &Build, target: &str) {\n \n     // http://llvm.org/docs/CMake.html\n     let mut cfg = cmake::Config::new(build.src.join(\"src/llvm\"));\n+    if build.config.ninja {\n+        cfg.generator(\"Ninja\");\n+    }\n     cfg.target(target)\n        .host(&build.config.build)\n        .out_dir(&dst)"}, {"sha": "50fd9c2453826f897607cb3219e2cfbc394dc522", "filename": "src/bootstrap/build/sanity.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Fbootstrap%2Fbuild%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Fbootstrap%2Fbuild%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fsanity.rs?ref=2174bd97c1458d89a87eb2b614135d7ad68d6f18", "patch": "@@ -48,6 +48,9 @@ pub fn check(build: &mut Build) {\n             }\n         }\n         need_cmd(\"cmake\".as_ref());\n+        if build.config.ninja {\n+            need_cmd(\"ninja\".as_ref())\n+        }\n         break\n     }\n "}, {"sha": "a2067e33a60aaad69e60294004e2c79713c194b7", "filename": "src/doc/book/guessing-game.md", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Fdoc%2Fbook%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Fdoc%2Fbook%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fguessing-game.md?ref=2174bd97c1458d89a87eb2b614135d7ad68d6f18", "patch": "@@ -988,8 +988,7 @@ fn main() {\n \n # Complete!\n \n-At this point, you have successfully built the Guessing Game! Congratulations!\n+This project showed you a lot: `let`, `match`, methods, associated\n+functions, using external crates, and more.\n \n-This first project showed you a lot: `let`, `match`, methods, associated\n-functions, using external crates, and more. Our next project will show off\n-even more.\n+At this point, you have successfully built the Guessing Game! Congratulations!"}, {"sha": "2059943bfdf6140ca9ecb615338a21a2b5773ded", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=2174bd97c1458d89a87eb2b614135d7ad68d6f18", "patch": "@@ -634,9 +634,9 @@ impl str {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// let s = \"Per Martin-L\u00f6f\";\n+    /// let mut s = \"Per Martin-L\u00f6f\".to_string();\n     ///\n-    /// let (first, last) = s.split_at(3);\n+    /// let (first, last) = s.split_at_mut(3);\n     ///\n     /// assert_eq!(\"Per\", first);\n     /// assert_eq!(\" Martin-L\u00f6f\", last);"}, {"sha": "a1820a1cb96e3901b973454ce802f4a23494c909", "filename": "src/libcollectionstest/str.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Flibcollectionstest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Flibcollectionstest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstr.rs?ref=2174bd97c1458d89a87eb2b614135d7ad68d6f18", "patch": "@@ -346,6 +346,22 @@ fn test_slice_fail() {\n     &\"\u4e2d\u534eVi\u1ec7t Nam\"[0..2];\n }\n \n+\n+#[test]\n+fn test_is_char_boundary() {\n+    let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam \u03b2-release \ud83d\udc31123\";\n+    assert!(s.is_char_boundary(0));\n+    assert!(s.is_char_boundary(s.len()));\n+    assert!(!s.is_char_boundary(s.len() + 1));\n+    for (i, ch) in s.char_indices() {\n+        // ensure character locations are boundaries and continuation bytes are not\n+        assert!(s.is_char_boundary(i), \"{} is a char boundary in {:?}\", i, s);\n+        for j in 1..ch.len_utf8() {\n+            assert!(!s.is_char_boundary(i + j),\n+                    \"{} should not be a char boundary in {:?}\", i + j, s);\n+        }\n+    }\n+}\n const LOREM_PARAGRAPH: &'static str = \"\\\n Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse quis lorem sit amet dolor \\\n ultricies condimentum. Praesent iaculis purus elit, ac malesuada quam malesuada in. Duis sed orci \\"}, {"sha": "ad90b44750854b98895220e3d9113f107584ead0", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=2174bd97c1458d89a87eb2b614135d7ad68d6f18", "patch": "@@ -182,7 +182,7 @@ macro_rules! debug_assert_eq {\n /// fn write_to_file_using_match() -> Result<(), io::Error> {\n ///     let mut file = try!(File::create(\"my_best_friends.txt\"));\n ///     match file.write_all(b\"This is a list of my best friends.\") {\n-///         Ok(_) => (),\n+///         Ok(v) => v,\n ///         Err(e) => return Err(e),\n ///     }\n ///     println!(\"I wrote to the file\");"}, {"sha": "4ea6baca367847e8337cc3ece63393e75b5cdbc4", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=2174bd97c1458d89a87eb2b614135d7ad68d6f18", "patch": "@@ -892,7 +892,7 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n         opt::multi_s(\"L\", \"\",   \"Add a directory to the library search path\",\n                    \"[KIND=]PATH\"),\n         opt::multi_s(\"l\", \"\",   \"Link the generated crate(s) to the specified native\n-                             library NAME. The optional KIND can be one of,\n+                             library NAME. The optional KIND can be one of\n                              static, dylib, or framework. If omitted, dylib is\n                              assumed.\", \"[KIND=]NAME\"),\n         opt::multi_s(\"\", \"crate-type\", \"Comma separated list of types of crates"}, {"sha": "72c99d57963c5da70a56fb5dfef4cd3480dba268", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=2174bd97c1458d89a87eb2b614135d7ad68d6f18", "patch": "@@ -27,8 +27,7 @@\n //! rustc will search each directory in the environment variable\n //! `RUST_TARGET_PATH` for a file named `TRIPLE.json`. The first one found will\n //! be loaded. If no file is found in any of those directories, a fatal error\n-//! will be given.  `RUST_TARGET_PATH` includes `/etc/rustc` as its last entry,\n-//! to be searched by default.\n+//! will be given.\n //!\n //! Projects defining their own targets should use\n //! `--target=path/to/my-awesome-platform.json` instead of adding to"}, {"sha": "5883013ac72f2ac4029c6c86b4d672ec5204499f", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=2174bd97c1458d89a87eb2b614135d7ad68d6f18", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub use self::Constructor::*;\n+use self::Constructor::*;\n use self::Usefulness::*;\n use self::WitnessPreference::*;\n "}, {"sha": "ccb2099dcc75ddcd0024cd83835d53e2933d937f", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=2174bd97c1458d89a87eb2b614135d7ad68d6f18", "patch": "@@ -434,7 +434,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n     /// But there may also be candidates that the test just doesn't\n     /// apply to. For example, consider the case of #29740:\n     ///\n-    /// ```rust\n+    /// ```rust,ignore\n     /// match x {\n     ///     \"foo\" => ...,\n     ///     \"bar\" => ...,"}, {"sha": "e5f2c7543786e61dc964bf7cae9664aace2288e3", "filename": "src/librustc_mir/build/matches/util.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs?ref=2174bd97c1458d89a87eb2b614135d7ad68d6f18", "patch": "@@ -32,14 +32,18 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n     /// this function converts the prefix (`x`, `y`) and suffix (`z`) into\n     /// distinct match pairs:\n     ///\n+    /// ```rust,ignore\n     ///     lv[0 of 3] @ x  // see ProjectionElem::ConstantIndex (and its Debug impl)\n     ///     lv[1 of 3] @ y  // to explain the `[x of y]` notation\n     ///     lv[-1 of 3] @ z\n+    /// ```\n     ///\n     /// If a slice like `s` is present, then the function also creates\n     /// a temporary like:\n     ///\n+    /// ```rust,ignore\n     ///     tmp0 = lv[2..-1] // using the special Rvalue::Slice\n+    /// ```\n     ///\n     /// and creates a match pair `tmp0 @ s`\n     pub fn prefix_suffix_slice<'pat>(&mut self,"}, {"sha": "bfbf27d46d005f5a7aa72b984435c203065e06ee", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=2174bd97c1458d89a87eb2b614135d7ad68d6f18", "patch": "@@ -47,7 +47,7 @@ set of scheduled drops up front, and so whenever we exit from the\n scope we only drop the values scheduled thus far. For example, consider\n the scope S corresponding to this loop:\n \n-```\n+```rust,ignore\n loop {\n     let x = ...;\n     if cond { break; }"}, {"sha": "77e8e37ef7493f1e267fa620a4ec543b27d9dca0", "filename": "src/librustc_mir/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Flibrustc_mir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Flibrustc_mir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fpretty.rs?ref=2174bd97c1458d89a87eb2b614135d7ad68d6f18", "patch": "@@ -23,7 +23,7 @@ const INDENT: &'static str = \"    \";\n /// If the session is properly configured, dumps a human-readable\n /// representation of the mir into:\n ///\n-/// ```\n+/// ```text\n /// rustc.node<node_id>.<pass_name>.<disambiguator>\n /// ```\n ///"}, {"sha": "c58b5c877246163edebe4b466478205377acd86b", "filename": "src/librustc_mir/traversal.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Flibrustc_mir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Flibrustc_mir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftraversal.rs?ref=2174bd97c1458d89a87eb2b614135d7ad68d6f18", "patch": "@@ -19,13 +19,16 @@ use rustc::mir::repr::*;\n /// Preorder traversal is when each node is visited before an of it's\n /// successors\n ///\n+/// ```text\n+///\n ///         A\n ///        / \\\n ///       /   \\\n ///      B     C\n ///       \\   /\n ///        \\ /\n ///         D\n+/// ```\n ///\n /// A preorder traversal of this graph is either `A B D C` or `A C D B`\n #[derive(Clone)]\n@@ -80,13 +83,17 @@ impl<'a, 'tcx> Iterator for Preorder<'a, 'tcx> {\n /// Postorder traversal is when each node is visited after all of it's\n /// successors, except when the successor is only reachable by a back-edge\n ///\n+///\n+/// ```text\n+///\n ///         A\n ///        / \\\n ///       /   \\\n ///      B     C\n ///       \\   /\n ///        \\ /\n ///         D\n+/// ```\n ///\n /// A Postorder traversal of this graph is `D B C A` or `D C B A`\n pub struct Postorder<'a, 'tcx: 'a> {\n@@ -215,13 +222,16 @@ impl<'a, 'tcx> Iterator for Postorder<'a, 'tcx> {\n /// This is different to a preorder traversal and represents a natural\n /// linearisation of control-flow.\n ///\n+/// ```text\n+///\n ///         A\n ///        / \\\n ///       /   \\\n ///      B     C\n ///       \\   /\n ///        \\ /\n ///         D\n+/// ```\n ///\n /// A reverse postorder traversal of this graph is either `A B C D` or `A C B D`\n /// Note that for a graph containing no loops (i.e. A DAG), this is equivalent to"}, {"sha": "e390aa32dfee8414da6ed16c7ff5ef7436b28a4b", "filename": "src/librustc_trans/_match.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Flibrustc_trans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Flibrustc_trans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2F_match.rs?ref=2174bd97c1458d89a87eb2b614135d7ad68d6f18", "patch": "@@ -189,7 +189,7 @@ use self::Opt::*;\n use self::FailureHandler::*;\n \n use llvm::{ValueRef, BasicBlockRef};\n-use rustc_const_eval::check_match::{self, StaticInliner};\n+use rustc_const_eval::check_match::{self, Constructor, StaticInliner};\n use rustc_const_eval::{compare_lit_exprs, eval_const_expr};\n use rustc::hir::def::{Def, DefMap};\n use rustc::hir::def_id::DefId;\n@@ -609,19 +609,19 @@ fn enter_opt<'a, 'p, 'blk, 'tcx>(\n     let _indenter = indenter();\n \n     let ctor = match opt {\n-        &ConstantValue(ConstantExpr(expr), _) => check_match::ConstantValue(\n+        &ConstantValue(ConstantExpr(expr), _) => Constructor::ConstantValue(\n             eval_const_expr(bcx.tcx(), &expr)\n         ),\n-        &ConstantRange(ConstantExpr(lo), ConstantExpr(hi), _) => check_match::ConstantRange(\n+        &ConstantRange(ConstantExpr(lo), ConstantExpr(hi), _) => Constructor::ConstantRange(\n             eval_const_expr(bcx.tcx(), &lo),\n             eval_const_expr(bcx.tcx(), &hi)\n         ),\n         &SliceLengthEqual(n, _) =>\n-            check_match::Slice(n),\n+            Constructor::Slice(n),\n         &SliceLengthGreaterOrEqual(before, after, _) =>\n-            check_match::SliceWithSubslice(before, after),\n+            Constructor::SliceWithSubslice(before, after),\n         &Variant(_, _, def_id, _) =>\n-            check_match::Constructor::Variant(def_id)\n+            Constructor::Variant(def_id)\n     };\n \n     let param_env = bcx.tcx().empty_parameter_environment();\n@@ -1229,7 +1229,7 @@ fn compile_submatch_continue<'a, 'p, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n         Some(field_vals) => {\n             let pats = enter_match(bcx, dm, m, col, val, |pats|\n                 check_match::specialize(&mcx, pats,\n-                                        &check_match::Single, col,\n+                                        &Constructor::Single, col,\n                                         field_vals.len())\n             );\n             let mut vals: Vec<_> = field_vals.into_iter()"}, {"sha": "d914d143e7011ae3683c30054ecd817a91a83992", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=2174bd97c1458d89a87eb2b614135d7ad68d6f18", "patch": "@@ -1505,6 +1505,11 @@ impl<T: Read> Read for Take<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: BufRead> BufRead for Take<T> {\n     fn fill_buf(&mut self) -> Result<&[u8]> {\n+        // Don't call into inner reader at all at EOF because it may still block\n+        if self.limit == 0 {\n+            return Ok(&[]);\n+        }\n+\n         let buf = self.inner.fill_buf()?;\n         let cap = cmp::min(buf.len() as u64, self.limit) as usize;\n         Ok(&buf[..cap])\n@@ -1860,9 +1865,16 @@ mod tests {\n                 Err(io::Error::new(io::ErrorKind::Other, \"\"))\n             }\n         }\n+        impl BufRead for R {\n+            fn fill_buf(&mut self) -> io::Result<&[u8]> {\n+                Err(io::Error::new(io::ErrorKind::Other, \"\"))\n+            }\n+            fn consume(&mut self, _amt: usize) { }\n+        }\n \n         let mut buf = [0; 1];\n         assert_eq!(0, R.take(0).read(&mut buf).unwrap());\n+        assert_eq!(b\"\", R.take(0).fill_buf().unwrap());\n     }\n \n     fn cmp_bufread<Br1: BufRead, Br2: BufRead>(mut br1: Br1, mut br2: Br2, exp: &[u8]) {"}, {"sha": "3cf9f3e81e1ae4ab5b6384e21319a78618d53690", "filename": "src/snapshots.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=2174bd97c1458d89a87eb2b614135d7ad68d6f18", "patch": "@@ -6,6 +6,7 @@ S 2016-03-18 235d774\n   winnt-i386 7703869608cc4192b8f1943e51b19ba1a03c0110\n   winnt-x86_64 8512b5ecc0c53a2cd3552e4f5688577de95cd978\n   openbsd-x86_64 c5b6feda38138a12cd5c05574b585dadebbb5e87\n+  freebsd-i386 b5a87e66e3e3eed5f0b68367ad22f25f0be2d4ea\n   freebsd-x86_64 390b9a9f60f3d0d6a52c04d939a0355f572d03b3\n \n S 2016-02-17 4d3eebf"}, {"sha": "b05c7323962c576d66d46335463b346ebd3a7532", "filename": "src/test/compile-fail/feature-gate-try-operator.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Ftest%2Fcompile-fail%2Ffeature-gate-try-operator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2174bd97c1458d89a87eb2b614135d7ad68d6f18/src%2Ftest%2Fcompile-fail%2Ffeature-gate-try-operator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-try-operator.rs?ref=2174bd97c1458d89a87eb2b614135d7ad68d6f18", "patch": "@@ -14,7 +14,5 @@ macro_rules! id {\n \n fn main() {\n     id!(x?);  //~ error: the `?` operator is not stable (see issue #31436)\n-    //~^ help: add #![feature(question_mark)] to the crate attributes to enable\n     y?;  //~ error: the `?` operator is not stable (see issue #31436)\n-    //~^ help: add #![feature(question_mark)] to the crate attributes to enable\n }"}]}