{"sha": "7b6b7649177db8edc9ef5c5075eb6cf9b00d8a9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNmI3NjQ5MTc3ZGI4ZWRjOWVmNWM1MDc1ZWI2Y2Y5YjAwZDhhOWQ=", "commit": {"author": {"name": "Dan Gohman", "email": "sunfish@mozilla.com", "date": "2017-11-11T15:08:00Z"}, "committer": {"name": "Dan Gohman", "email": "sunfish@mozilla.com", "date": "2017-11-11T20:15:43Z"}, "message": "Control LLVM's TrapUnreachable feature through rustc's TargetOptions.", "tree": {"sha": "dbb1a4bffeefc3121d8f3f96fab9fd117318b6c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbb1a4bffeefc3121d8f3f96fab9fd117318b6c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b6b7649177db8edc9ef5c5075eb6cf9b00d8a9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b6b7649177db8edc9ef5c5075eb6cf9b00d8a9d", "html_url": "https://github.com/rust-lang/rust/commit/7b6b7649177db8edc9ef5c5075eb6cf9b00d8a9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b6b7649177db8edc9ef5c5075eb6cf9b00d8a9d/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "365c159b8074a89c72cfab54e53fe767f3a63900", "url": "https://api.github.com/repos/rust-lang/rust/commits/365c159b8074a89c72cfab54e53fe767f3a63900", "html_url": "https://github.com/rust-lang/rust/commit/365c159b8074a89c72cfab54e53fe767f3a63900"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "d60d6438b4d61d96723e5bc04b1402e8a2917b4c", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7b6b7649177db8edc9ef5c5075eb6cf9b00d8a9d/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6b7649177db8edc9ef5c5075eb6cf9b00d8a9d/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=7b6b7649177db8edc9ef5c5075eb6cf9b00d8a9d", "patch": "@@ -435,6 +435,10 @@ pub struct TargetOptions {\n \n     /// Default number of codegen units to use in debug mode\n     pub default_codegen_units: Option<u64>,\n+\n+    /// Whether to generate trap instructions in places where optimization would\n+    /// otherwise produce control flow that falls through into unrelated memory.\n+    pub trap_unreachable: bool,\n }\n \n impl Default for TargetOptions {\n@@ -498,6 +502,7 @@ impl Default for TargetOptions {\n             stack_probes: false,\n             min_global_align: None,\n             default_codegen_units: None,\n+            trap_unreachable: true,\n         }\n     }\n }\n@@ -739,6 +744,7 @@ impl Target {\n         key!(stack_probes, bool);\n         key!(min_global_align, Option<u64>);\n         key!(default_codegen_units, Option<u64>);\n+        key!(trap_unreachable, bool);\n \n         if let Some(array) = obj.find(\"abi-blacklist\").and_then(Json::as_array) {\n             for name in array.iter().filter_map(|abi| abi.as_string()) {\n@@ -932,6 +938,7 @@ impl ToJson for Target {\n         target_option_val!(stack_probes);\n         target_option_val!(min_global_align);\n         target_option_val!(default_codegen_units);\n+        target_option_val!(trap_unreachable);\n \n         if default.abi_blacklist != self.options.abi_blacklist {\n             d.insert(\"abi-blacklist\".to_string(), self.options.abi_blacklist.iter()"}, {"sha": "24c3963fbc4b31b9388376cc6af18496ca9e0714", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b6b7649177db8edc9ef5c5075eb6cf9b00d8a9d/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6b7649177db8edc9ef5c5075eb6cf9b00d8a9d/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=7b6b7649177db8edc9ef5c5075eb6cf9b00d8a9d", "patch": "@@ -1605,7 +1605,8 @@ extern \"C\" {\n                                        UseSoftFP: bool,\n                                        PositionIndependentExecutable: bool,\n                                        FunctionSections: bool,\n-                                       DataSections: bool)\n+                                       DataSections: bool,\n+                                       TrapUnreachable: bool)\n                                        -> TargetMachineRef;\n     pub fn LLVMRustDisposeTargetMachine(T: TargetMachineRef);\n     pub fn LLVMRustAddAnalysisPasses(T: TargetMachineRef, PM: PassManagerRef, M: ModuleRef);"}, {"sha": "e443f13a7a1ca5ef2207df6a2ec240a9a8f9e2bf", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b6b7649177db8edc9ef5c5075eb6cf9b00d8a9d/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6b7649177db8edc9ef5c5075eb6cf9b00d8a9d/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=7b6b7649177db8edc9ef5c5075eb6cf9b00d8a9d", "patch": "@@ -196,6 +196,7 @@ pub fn target_machine_factory(sess: &Session)\n     let cpu = CString::new(cpu.as_bytes()).unwrap();\n     let features = CString::new(target_feature(sess).as_bytes()).unwrap();\n     let is_pie_binary = is_pie_binary(sess);\n+    let trap_unreachable = sess.target.target.options.trap_unreachable;\n \n     Arc::new(move || {\n         let tm = unsafe {\n@@ -208,6 +209,7 @@ pub fn target_machine_factory(sess: &Session)\n                 is_pie_binary,\n                 ffunction_sections,\n                 fdata_sections,\n+                trap_unreachable,\n             )\n         };\n "}, {"sha": "b4116c96ba130afd3a35decf2baf8a582e868e38", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7b6b7649177db8edc9ef5c5075eb6cf9b00d8a9d/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7b6b7649177db8edc9ef5c5075eb6cf9b00d8a9d/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=7b6b7649177db8edc9ef5c5075eb6cf9b00d8a9d", "patch": "@@ -366,7 +366,7 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n     LLVMRustCodeModel RustCM, LLVMRustRelocMode RustReloc,\n     LLVMRustCodeGenOptLevel RustOptLevel, bool UseSoftFloat,\n     bool PositionIndependentExecutable, bool FunctionSections,\n-    bool DataSections) {\n+    bool DataSections, bool TrapUnreachable) {\n \n   auto CM = fromRust(RustCM);\n   auto OptLevel = fromRust(RustOptLevel);\n@@ -398,11 +398,13 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n   Options.DataSections = DataSections;\n   Options.FunctionSections = FunctionSections;\n \n-  // Tell LLVM to translate `unreachable` into an explicit trap instruction.\n-  // This limits the extent of possible undefined behavior in some cases, as it\n-  // prevents control flow from \"falling through\" into whatever code happens to\n-  // be laid out next in memory.\n-  Options.TrapUnreachable = true;\n+  if (TrapUnreachable) {\n+    // Tell LLVM to translate `unreachable` into an explicit trap instruction.\n+    // This limits the extent of possible undefined behavior in some cases, as\n+    // it prevents control flow from \"falling through\" into whatever code\n+    // happens to be laid out next in memory.\n+    Options.TrapUnreachable = true;\n+  }\n \n   TargetMachine *TM = TheTarget->createTargetMachine(\n       Trip.getTriple(), RealCPU, Feature, Options, RM, CM, OptLevel);"}]}