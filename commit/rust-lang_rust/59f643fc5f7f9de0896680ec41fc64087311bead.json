{"sha": "59f643fc5f7f9de0896680ec41fc64087311bead", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZjY0M2ZjNWY3ZjlkZTA4OTY2ODBlYzQxZmM2NDA4NzMxMWJlYWQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-12-20T22:00:30Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-12-20T22:00:30Z"}, "message": "Point to return span when writing `return;` on non-() fn", "tree": {"sha": "f1168d351e08550a2b193cbe5b6fb5553cc85212", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1168d351e08550a2b193cbe5b6fb5553cc85212"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59f643fc5f7f9de0896680ec41fc64087311bead", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59f643fc5f7f9de0896680ec41fc64087311bead", "html_url": "https://github.com/rust-lang/rust/commit/59f643fc5f7f9de0896680ec41fc64087311bead", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59f643fc5f7f9de0896680ec41fc64087311bead/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4a421ee3cf1259f0750ac7fabd19da1d8551e4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4a421ee3cf1259f0750ac7fabd19da1d8551e4c", "html_url": "https://github.com/rust-lang/rust/commit/f4a421ee3cf1259f0750ac7fabd19da1d8551e4c"}], "stats": {"total": 43, "additions": 37, "deletions": 6}, "files": [{"sha": "58733a83b253b764b3d4558f0245b4353e529d8d", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/59f643fc5f7f9de0896680ec41fc64087311bead/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f643fc5f7f9de0896680ec41fc64087311bead/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=59f643fc5f7f9de0896680ec41fc64087311bead", "patch": "@@ -1979,6 +1979,15 @@ pub enum FunctionRetTy {\n     Return(P<Ty>),\n }\n \n+impl fmt::Display for FunctionRetTy {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            Return(ref ty) => print::to_string(print::NO_ANN, |s| s.print_type(ty)).fmt(f),\n+            DefaultReturn(_) => \"()\".fmt(f),\n+        }\n+    }\n+}\n+\n impl FunctionRetTy {\n     pub fn span(&self) -> Span {\n         match *self {"}, {"sha": "0b99a30b67dc800d7714799efea0d215e55227a3", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59f643fc5f7f9de0896680ec41fc64087311bead/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f643fc5f7f9de0896680ec41fc64087311bead/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=59f643fc5f7f9de0896680ec41fc64087311bead", "patch": "@@ -1143,7 +1143,6 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n             // `expression_ty` will be unit).\n             //\n             // Another example is `break` with no argument expression.\n-            assert!(expression_ty.is_unit());\n             assert!(expression_ty.is_unit(), \"if let hack without unit type\");\n             fcx.at(cause, fcx.param_env)\n                .eq_exp(label_expression_as_expected, expression_ty, self.merged_ty())\n@@ -1190,7 +1189,7 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n                         db = struct_span_err!(\n                             fcx.tcx.sess, cause.span, E0069,\n                             \"`return;` in a function whose return type is not `()`\");\n-                        db.span_label(cause.span, \"return type is not ()\");\n+                        db.span_label(cause.span, \"return type is not `()`\");\n                     }\n                     ObligationCauseCode::BlockTailExpression(blk_id) => {\n                         db = fcx.report_mismatched_types(cause, expected, found, err);"}, {"sha": "d40afbbc3025bb195c17da32ecb3eda63b9ab5ba", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/59f643fc5f7f9de0896680ec41fc64087311bead/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f643fc5f7f9de0896680ec41fc64087311bead/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=59f643fc5f7f9de0896680ec41fc64087311bead", "patch": "@@ -4103,7 +4103,24 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 } else {\n                     let mut coercion = self.ret_coercion.as_ref().unwrap().borrow_mut();\n                     let cause = self.cause(expr.span, ObligationCauseCode::ReturnNoExpression);\n-                    coercion.coerce_forced_unit(self, &cause, &mut |_| (), true);\n+                    if let Some((fn_decl, _)) = self.get_fn_decl(expr.id) {\n+                        coercion.coerce_forced_unit(\n+                            self,\n+                            &cause,\n+                            &mut |db| {\n+                                db.span_label(\n+                                    fn_decl.output.span(),\n+                                    format!(\n+                                        \"expected `{}` because of this return type\",\n+                                        fn_decl.output,\n+                                    ),\n+                                );\n+                            },\n+                            true,\n+                        );\n+                    } else {\n+                        coercion.coerce_forced_unit(self, &cause, &mut |_| (), true);\n+                    }\n                 }\n                 tcx.types.never\n             }"}, {"sha": "12b778f42e22ca7cba305e89defe55f4bdeeaee8", "filename": "src/test/ui/error-codes/E0069.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59f643fc5f7f9de0896680ec41fc64087311bead/src%2Ftest%2Fui%2Ferror-codes%2FE0069.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59f643fc5f7f9de0896680ec41fc64087311bead/src%2Ftest%2Fui%2Ferror-codes%2FE0069.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0069.stderr?ref=59f643fc5f7f9de0896680ec41fc64087311bead", "patch": "@@ -1,8 +1,10 @@\n error[E0069]: `return;` in a function whose return type is not `()`\n   --> $DIR/E0069.rs:12:5\n    |\n+LL | fn foo() -> u8 {\n+   |             -- expected `u8` because of this return type\n LL |     return;\n-   |     ^^^^^^ return type is not ()\n+   |     ^^^^^^ return type is not `()`\n \n error: aborting due to previous error\n "}, {"sha": "e0fdc8c67edf7fedcb13ffcb486e69e5335bfd7f", "filename": "src/test/ui/ret-non-nil.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59f643fc5f7f9de0896680ec41fc64087311bead/src%2Ftest%2Fui%2Fret-non-nil.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59f643fc5f7f9de0896680ec41fc64087311bead/src%2Ftest%2Fui%2Fret-non-nil.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fret-non-nil.stderr?ref=59f643fc5f7f9de0896680ec41fc64087311bead", "patch": "@@ -2,7 +2,9 @@ error[E0069]: `return;` in a function whose return type is not `()`\n   --> $DIR/ret-non-nil.rs:15:19\n    |\n LL | fn g() -> isize { return; }\n-   |                   ^^^^^^ return type is not ()\n+   |           -----   ^^^^^^ return type is not `()`\n+   |           |\n+   |           expected `isize` because of this return type\n \n error: aborting due to previous error\n "}, {"sha": "5a9f0877cc6b6957dfcc4be8c7ba39427e92d093", "filename": "src/test/ui/return/return-unit-from-diverging.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59f643fc5f7f9de0896680ec41fc64087311bead/src%2Ftest%2Fui%2Freturn%2Freturn-unit-from-diverging.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59f643fc5f7f9de0896680ec41fc64087311bead/src%2Ftest%2Fui%2Freturn%2Freturn-unit-from-diverging.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Freturn-unit-from-diverging.stderr?ref=59f643fc5f7f9de0896680ec41fc64087311bead", "patch": "@@ -1,8 +1,10 @@\n error[E0069]: `return;` in a function whose return type is not `()`\n   --> $DIR/return-unit-from-diverging.rs:15:5\n    |\n+LL | fn fail() -> ! {\n+   |              - expected `!` because of this return type\n LL |     return; //~ ERROR in a function whose return type is not\n-   |     ^^^^^^ return type is not ()\n+   |     ^^^^^^ return type is not `()`\n \n error: aborting due to previous error\n "}]}