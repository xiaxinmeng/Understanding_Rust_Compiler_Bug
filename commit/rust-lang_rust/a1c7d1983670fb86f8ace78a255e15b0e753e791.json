{"sha": "a1c7d1983670fb86f8ace78a255e15b0e753e791", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExYzdkMTk4MzY3MGZiODZmOGFjZTc4YTI1NWUxNWIwZTc1M2U3OTE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-07T00:50:24Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-07T00:50:24Z"}, "message": "rustc: Translate tag constructors. Can't call them at the moment due to lack of alias args, though.", "tree": {"sha": "38129099609c5342037f57ba910abe1c771ac0c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38129099609c5342037f57ba910abe1c771ac0c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1c7d1983670fb86f8ace78a255e15b0e753e791", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1c7d1983670fb86f8ace78a255e15b0e753e791", "html_url": "https://github.com/rust-lang/rust/commit/a1c7d1983670fb86f8ace78a255e15b0e753e791", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1c7d1983670fb86f8ace78a255e15b0e753e791/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb05d9184b83bc92dbeb7e4b8c0e2404ac8172f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb05d9184b83bc92dbeb7e4b8c0e2404ac8172f5", "html_url": "https://github.com/rust-lang/rust/commit/fb05d9184b83bc92dbeb7e4b8c0e2404ac8172f5"}], "stats": {"total": 96, "additions": 92, "deletions": 4}, "files": [{"sha": "9b6450cb9b814600f382b97a8ed9f0e859f0130f", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 75, "deletions": 4, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/a1c7d1983670fb86f8ace78a255e15b0e753e791/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c7d1983670fb86f8ace78a255e15b0e753e791/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=a1c7d1983670fb86f8ace78a255e15b0e753e791", "patch": "@@ -327,6 +327,14 @@ fn type_of_inner(@crate_ctxt cx, @typeck.ty t) -> TypeRef {\n     fail;\n }\n \n+fn type_of_arg(@crate_ctxt cx, &typeck.arg arg) -> TypeRef {\n+    auto ty = type_of(cx, arg.ty);\n+    if (arg.mode == ast.alias) {\n+        ty = T_ptr(ty);\n+    }\n+    ret ty;\n+}\n+\n // LLVM constant constructors.\n \n fn C_null(TypeRef t) -> ValueRef {\n@@ -1823,7 +1831,7 @@ fn copy_args_to_allocas(@block_ctxt cx, vec[ast.arg] args,\n     let uint arg_n = 0u;\n \n     for (ast.arg aarg in args) {\n-        auto arg_t = type_of(cx.fcx.ccx, arg_tys.(arg_n).ty);\n+        auto arg_t = type_of_arg(cx.fcx.ccx, arg_tys.(arg_n));\n         auto alloca = cx.build.Alloca(arg_t);\n         auto argval = cx.fcx.llargs.get(aarg.id);\n         cx.build.Store(argval, alloca);\n@@ -1864,12 +1872,73 @@ impure fn trans_fn(@crate_ctxt cx, &ast._fn f, ast.def_id fid,\n }\n \n fn trans_tag_variant(@crate_ctxt cx, ast.def_id tag_id,\n-                     &ast.variant variant) {\n+                     &ast.variant variant, int index) {\n     if (_vec.len[ast.variant_arg](variant.args) == 0u) {\n         ret;    // nullary constructors are just constants\n     }\n \n-    // TODO\n+    // Translate variant arguments to function arguments.\n+    let vec[ast.arg] fn_args = vec();\n+    auto i = 0u;\n+    for (ast.variant_arg varg in variant.args) {\n+        fn_args += vec(rec(mode=ast.alias,\n+                           ty=varg.ty,\n+                           ident=\"arg\" + _uint.to_str(i, 10u),\n+                           id=varg.id));\n+    }\n+\n+    auto var_ty = typeck.ann_to_type(variant.ann);\n+    auto llfnty = type_of(cx, var_ty);\n+\n+    let str s = cx.names.next(\"_rust_tag\") + \".\" + cx.path;\n+    let ValueRef llfn = decl_fastcall_fn(cx.llmod, s, llfnty);\n+    cx.item_ids.insert(variant.id, llfn);\n+\n+    auto fcx = new_fn_ctxt(cx, cx.path, fn_args, variant.id);\n+    auto bcx = new_top_block_ctxt(fcx);\n+\n+    auto arg_tys = arg_tys_of_fn(variant.ann);\n+    copy_args_to_allocas(bcx, fn_args, arg_tys);\n+\n+    auto info = cx.tags.get(tag_id);\n+\n+    auto lltagty = T_struct(vec(T_int(), T_array(T_i8(), info.size)));\n+\n+    // FIXME: better name.\n+    llvm.LLVMAddTypeName(cx.llmod, _str.buf(\"tag\"), lltagty);\n+\n+    auto lltagptr = bcx.build.Alloca(lltagty);\n+    auto lldiscrimptr = bcx.build.GEP(lltagptr, vec(C_int(0), C_int(0)));\n+    bcx.build.Store(C_int(index), lldiscrimptr);\n+\n+    auto llblobptr = bcx.build.GEP(lltagptr, vec(C_int(0), C_int(1)));\n+\n+    // First, generate the union type.\n+    let vec[TypeRef] llargtys = vec();\n+    for (typeck.arg arg in arg_tys) {\n+        llargtys += vec(type_of(cx, arg.ty));\n+    }\n+\n+    auto llunionty = T_struct(llargtys);\n+    auto llunionptr = bcx.build.TruncOrBitCast(llblobptr, T_ptr(llunionty));\n+\n+    i = 0u;\n+    for (ast.variant_arg va in variant.args) {\n+        auto llargalias = bcx.build.Load(fcx.llargs.get(va.id));\n+        auto llargval = bcx.build.Load(llargalias);\n+\n+        llvm.LLVMDumpValue(llunionptr);\n+\n+        auto lldestptr = bcx.build.GEP(llunionptr,\n+                                       vec(C_int(0), C_int(i as int)));\n+\n+        bcx.build.Store(llargval, lldestptr);\n+        i += 1u;\n+    }\n+\n+    auto lltagval = bcx.build.Load(lltagptr);\n+    bcx = trans_block_cleanups(bcx, find_scope_cx(bcx));\n+    bcx.build.Ret(lltagval);\n }\n \n impure fn trans_item(@crate_ctxt cx, &ast.item item) {\n@@ -1884,8 +1953,10 @@ impure fn trans_item(@crate_ctxt cx, &ast.item item) {\n         }\n         case (ast.item_tag(?name, ?variants, _, ?tag_id)) {\n             auto sub_cx = @rec(path=cx.path + \".\" + name with *cx);\n+            auto i = 0;\n             for (ast.variant variant in variants) {\n-                trans_tag_variant(sub_cx, tag_id, variant);\n+                trans_tag_variant(sub_cx, tag_id, variant, i);\n+                i += 1;\n             }\n         }\n         case (_) { /* fall through */ }"}, {"sha": "5caaef62415d607ee942f27202fcee21201f1719", "filename": "src/etc/x86.supp", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a1c7d1983670fb86f8ace78a255e15b0e753e791/src%2Fetc%2Fx86.supp", "raw_url": "https://github.com/rust-lang/rust/raw/a1c7d1983670fb86f8ace78a255e15b0e753e791/src%2Fetc%2Fx86.supp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fx86.supp?ref=a1c7d1983670fb86f8ace78a255e15b0e753e791", "patch": "@@ -22,3 +22,20 @@\n    obj:*\n }\n \n+{\n+   mac-dlopen-weirdness\n+   Memcheck:Cond\n+   fun:_ZNK16ImageLoaderMachO9getRPathsERKN11ImageLoader11LinkContextERSt6vectorIPKcSaIS6_EE\n+   fun:_ZN11ImageLoader22recursiveLoadLibrariesERKNS_11LinkContextEbRKNS_10RPathChainE\n+   fun:_ZN11ImageLoader4linkERKNS_11LinkContextEbbRKNS_10RPathChainE\n+   fun:_ZN4dyld4linkEP11ImageLoaderbRKNS0_10RPathChainE\n+   fun:dlopen\n+   fun:dlopen\n+   fun:_ZN16rust_crate_cache3libC1EP8rust_domPKc\n+   fun:_ZN16rust_crate_cache7get_libEmPKc\n+   fun:_ZL11fetch_c_symP9rust_taskPK10rust_cratemmPKcS5_\n+   fun:upcall_require_c_sym\n+}\n+\n+\n+"}]}