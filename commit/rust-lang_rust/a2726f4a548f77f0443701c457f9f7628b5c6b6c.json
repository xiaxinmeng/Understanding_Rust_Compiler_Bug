{"sha": "a2726f4a548f77f0443701c457f9f7628b5c6b6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyNzI2ZjRhNTQ4Zjc3ZjA0NDM3MDFjNDU3ZjlmNzYyOGI1YzZiNmM=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-09-19T09:37:12Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-09-20T17:30:55Z"}, "message": "rustc: allow less and handle fn pointers in the type hashing algorithm.", "tree": {"sha": "bd77138c4a3f029dc2931bce8acdd98baeb35f8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd77138c4a3f029dc2931bce8acdd98baeb35f8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2726f4a548f77f0443701c457f9f7628b5c6b6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2726f4a548f77f0443701c457f9f7628b5c6b6c", "html_url": "https://github.com/rust-lang/rust/commit/a2726f4a548f77f0443701c457f9f7628b5c6b6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2726f4a548f77f0443701c457f9f7628b5c6b6c/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ade79d760905ab589851ca9e9ab3bb583e4da7c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ade79d760905ab589851ca9e9ab3bb583e4da7c4", "html_url": "https://github.com/rust-lang/rust/commit/ade79d760905ab589851ca9e9ab3bb583e4da7c4"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "d834a7d485a389fb5ad7b44d52f0ee3512aa22fe", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a2726f4a548f77f0443701c457f9f7628b5c6b6c/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2726f4a548f77f0443701c457f9f7628b5c6b6c/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=a2726f4a548f77f0443701c457f9f7628b5c6b6c", "patch": "@@ -436,17 +436,18 @@ impl<'a, 'gcx, 'tcx, H: Hasher> TypeVisitor<'tcx> for TypeIdHasher<'a, 'gcx, 'tc\n             TyInt(i) => self.hash(i),\n             TyUint(u) => self.hash(u),\n             TyFloat(f) => self.hash(f),\n-            TyAdt(d, _) => self.def_id(d.did),\n             TyArray(_, n) => self.hash(n),\n             TyRawPtr(m) |\n             TyRef(_, m) => self.hash(m.mutbl),\n             TyClosure(def_id, _) |\n             TyAnon(def_id, _) |\n             TyFnDef(def_id, ..) => self.def_id(def_id),\n+            TyAdt(d, _) => self.def_id(d.did),\n             TyFnPtr(f) => {\n                 self.hash(f.unsafety);\n                 self.hash(f.abi);\n                 self.hash(f.sig.variadic());\n+                self.hash(f.sig.inputs().skip_binder().len());\n             }\n             TyTrait(ref data) => {\n                 self.def_id(data.principal.def_id());\n@@ -468,32 +469,34 @@ impl<'a, 'gcx, 'tcx, H: Hasher> TypeVisitor<'tcx> for TypeIdHasher<'a, 'gcx, 'tc\n             TyChar |\n             TyStr |\n             TyBox(_) |\n-            TySlice(_) |\n-            TyError => {}\n-            TyInfer(_) => bug!()\n+            TySlice(_) => {}\n+\n+            TyError |\n+            TyInfer(_) => bug!(\"TypeIdHasher: unexpected type {}\", ty)\n         }\n \n         ty.super_visit_with(self)\n     }\n \n     fn visit_region(&mut self, r: &'tcx ty::Region) -> bool {\n         match *r {\n-            ty::ReStatic | ty::ReErased => {\n+            ty::ReErased => {\n                 self.hash::<u32>(0);\n             }\n             ty::ReLateBound(db, ty::BrAnon(i)) => {\n                 assert!(db.depth > 0);\n                 self.hash::<u32>(db.depth);\n                 self.hash(i);\n             }\n+            ty::ReStatic |\n             ty::ReEmpty |\n             ty::ReEarlyBound(..) |\n             ty::ReLateBound(..) |\n             ty::ReFree(..) |\n             ty::ReScope(..) |\n             ty::ReVar(..) |\n             ty::ReSkolemized(..) => {\n-                bug!(\"unexpected region found when hashing a type\")\n+                bug!(\"TypeIdHasher: unexpected region {:?}\", r)\n             }\n         }\n         false"}, {"sha": "7b0122798722271da9aa89e7c26bdf907903ea0b", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2726f4a548f77f0443701c457f9f7628b5c6b6c/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2726f4a548f77f0443701c457f9f7628b5c6b6c/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=a2726f4a548f77f0443701c457f9f7628b5c6b6c", "patch": "@@ -92,6 +92,8 @@ pub fn get_drop_glue_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                     t: Ty<'tcx>) -> Ty<'tcx> {\n     assert!(t.is_normalized_for_trans());\n \n+    let t = tcx.erase_regions(&t);\n+\n     // Even if there is no dtor for t, there might be one deeper down and we\n     // might need to pass in the vtable ptr.\n     if !type_is_sized(tcx, t) {"}, {"sha": "54d5415a5539b6e952803c7c597434da22e3c054", "filename": "src/test/run-pass/typeid-intrinsic.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2726f4a548f77f0443701c457f9f7628b5c6b6c/src%2Ftest%2Frun-pass%2Ftypeid-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2726f4a548f77f0443701c457f9f7628b5c6b6c/src%2Ftest%2Frun-pass%2Ftypeid-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeid-intrinsic.rs?ref=a2726f4a548f77f0443701c457f9f7628b5c6b6c", "patch": "@@ -87,4 +87,8 @@ pub fn main() {\n     assert_eq!(other1::id_u32_iterator(), other2::id_u32_iterator());\n     assert!(other1::id_i32_iterator() != other1::id_u32_iterator());\n     assert!(TypeId::of::<other1::I32Iterator>() != TypeId::of::<other1::U32Iterator>());\n+\n+    // Check fn pointer against collisions\n+    assert!(TypeId::of::<fn(fn(A) -> A) -> A>() !=\n+            TypeId::of::<fn(fn() -> A, A) -> A>());\n }"}]}