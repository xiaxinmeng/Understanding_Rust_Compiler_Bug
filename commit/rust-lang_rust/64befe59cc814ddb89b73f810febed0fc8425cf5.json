{"sha": "64befe59cc814ddb89b73f810febed0fc8425cf5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0YmVmZTU5Y2M4MTRkZGI4OWI3M2Y4MTBmZWJlZDBmYzg0MjVjZjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-27T19:57:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-27T19:57:44Z"}, "message": "Auto merge of #5377 - matthiaskrgr:rustup_38, r=flip1995\n\nrustup\n\nchangelog: none", "tree": {"sha": "898f4f5ea0ca0d61a571cf8893bb241bd85c014f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/898f4f5ea0ca0d61a571cf8893bb241bd85c014f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64befe59cc814ddb89b73f810febed0fc8425cf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64befe59cc814ddb89b73f810febed0fc8425cf5", "html_url": "https://github.com/rust-lang/rust/commit/64befe59cc814ddb89b73f810febed0fc8425cf5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64befe59cc814ddb89b73f810febed0fc8425cf5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ff568d746e4641b992c0b74bea046e43a637997", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ff568d746e4641b992c0b74bea046e43a637997", "html_url": "https://github.com/rust-lang/rust/commit/2ff568d746e4641b992c0b74bea046e43a637997"}, {"sha": "0982097e4d9b8a69e5f1d82bffc1f74098cd2e3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0982097e4d9b8a69e5f1d82bffc1f74098cd2e3b", "html_url": "https://github.com/rust-lang/rust/commit/0982097e4d9b8a69e5f1d82bffc1f74098cd2e3b"}], "stats": {"total": 68, "additions": 40, "deletions": 28}, "files": [{"sha": "eaff716e14503a298d8c6dc050c544442eabcacf", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/64befe59cc814ddb89b73f810febed0fc8425cf5/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64befe59cc814ddb89b73f810febed0fc8425cf5/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=64befe59cc814ddb89b73f810febed0fc8425cf5", "patch": "@@ -94,7 +94,8 @@ fn check_hash_peq<'a, 'tcx>(\n     if_chain! {\n         if match_path(&trait_ref.path, &paths::HASH);\n         if let Some(peq_trait_def_id) = cx.tcx.lang_items().eq_trait();\n-        if !&trait_ref.trait_def_id().is_local();\n+        if let Some(def_id) = &trait_ref.trait_def_id();\n+        if !def_id.is_local();\n         then {\n             // Look for the PartialEq implementations for `ty`\n             cx.tcx.for_each_relevant_impl(peq_trait_def_id, ty, |impl_id| {"}, {"sha": "2483370542255359c6fa6753b59a33dfab72ea86", "filename": "clippy_lints/src/if_let_some_result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64befe59cc814ddb89b73f810febed0fc8425cf5/clippy_lints%2Fsrc%2Fif_let_some_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64befe59cc814ddb89b73f810febed0fc8425cf5/clippy_lints%2Fsrc%2Fif_let_some_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_some_result.rs?ref=64befe59cc814ddb89b73f810febed0fc8425cf5", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::{match_type, method_chain_args, paths, snippet_with_applicability, span_lint_and_sugg};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{print, Expr, ExprKind, MatchSource, PatKind, QPath};\n+use rustc_hir::{Expr, ExprKind, MatchSource, PatKind, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -46,7 +46,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OkIfLet {\n             if let PatKind::TupleStruct(QPath::Resolved(_, ref x), ref y, _)  = body[0].pat.kind; //get operation\n             if method_chain_args(op, &[\"ok\"]).is_some(); //test to see if using ok() methoduse std::marker::Sized;\n             let is_result_type = match_type(cx, cx.tables.expr_ty(&result_types[0]), &paths::RESULT);\n-            if print::to_string(print::NO_ANN, |s| s.print_path(x, false)) == \"Some\" && is_result_type;\n+            if rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| s.print_path(x, false)) == \"Some\" && is_result_type;\n \n             then {\n                 let mut applicability = Applicability::MachineApplicable;"}, {"sha": "108e28235c427f5adb013e118ebc375bb16b27d6", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64befe59cc814ddb89b73f810febed0fc8425cf5/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64befe59cc814ddb89b73f810febed0fc8425cf5/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=64befe59cc814ddb89b73f810febed0fc8425cf5", "patch": "@@ -34,6 +34,8 @@ extern crate rustc_errors;\n #[allow(unused_extern_crates)]\n extern crate rustc_hir;\n #[allow(unused_extern_crates)]\n+extern crate rustc_hir_pretty;\n+#[allow(unused_extern_crates)]\n extern crate rustc_index;\n #[allow(unused_extern_crates)]\n extern crate rustc_infer;"}, {"sha": "2d477653e2718ef0b000e5036baf154077a3e53f", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64befe59cc814ddb89b73f810febed0fc8425cf5/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64befe59cc814ddb89b73f810febed0fc8425cf5/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=64befe59cc814ddb89b73f810febed0fc8425cf5", "patch": "@@ -720,7 +720,7 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n         ExprKind::Struct(_, _, None)\n         | ExprKind::Yield(_, _)\n         | ExprKind::Closure(_, _, _, _, _)\n-        | ExprKind::InlineAsm(_)\n+        | ExprKind::LlvmInlineAsm(_)\n         | ExprKind::Path(_)\n         | ExprKind::Lit(_)\n         | ExprKind::Err => NeverLoopResult::Otherwise,"}, {"sha": "8d4e8595b12d0a0dcbe51709c0406ebaec4995b6", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/64befe59cc814ddb89b73f810febed0fc8425cf5/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64befe59cc814ddb89b73f810febed0fc8425cf5/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=64befe59cc814ddb89b73f810febed0fc8425cf5", "patch": "@@ -15,8 +15,8 @@ use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::def::CtorKind;\n use rustc_hir::{\n-    print, Arm, BindingAnnotation, Block, BorrowKind, Expr, ExprKind, Local, MatchSource, Mutability, Node, Pat,\n-    PatKind, QPath, RangeEnd,\n+    Arm, BindingAnnotation, Block, BorrowKind, Expr, ExprKind, Local, MatchSource, Mutability, Node, Pat, PatKind,\n+    QPath, RangeEnd,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -536,10 +536,12 @@ fn check_single_match_opt_like(\n             if !inner.iter().all(is_wild) {\n                 return;\n             }\n-            print::to_string(print::NO_ANN, |s| s.print_qpath(path, false))\n+            rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| s.print_qpath(path, false))\n         },\n         PatKind::Binding(BindingAnnotation::Unannotated, .., ident, None) => ident.to_string(),\n-        PatKind::Path(ref path) => print::to_string(print::NO_ANN, |s| s.print_qpath(path, false)),\n+        PatKind::Path(ref path) => {\n+            rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| s.print_qpath(path, false))\n+        },\n         _ => return,\n     };\n \n@@ -638,7 +640,7 @@ fn check_wild_err_arm(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n     if match_type(cx, ex_ty, &paths::RESULT) {\n         for arm in arms {\n             if let PatKind::TupleStruct(ref path, ref inner, _) = arm.pat.kind {\n-                let path_str = print::to_string(print::NO_ANN, |s| s.print_qpath(path, false));\n+                let path_str = rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| s.print_qpath(path, false));\n                 if path_str == \"Err\" {\n                     let mut matching_wild = inner.iter().any(is_wild);\n                     let mut ident_bind_name = String::from(\"_\");"}, {"sha": "55cb7e4a087a5e3987e6e24380454a49a0730eb7", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64befe59cc814ddb89b73f810febed0fc8425cf5/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64befe59cc814ddb89b73f810febed0fc8425cf5/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=64befe59cc814ddb89b73f810febed0fc8425cf5", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::span_lint;\n use rustc::ty::subst::Subst;\n use rustc::ty::{self, Ty};\n-use rustc_hir::{print, BorrowKind, Expr, ExprKind, Mutability};\n+use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -34,7 +34,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnnecessaryMutPassed {\n                         cx,\n                         arguments,\n                         cx.tables.expr_ty(fn_expr),\n-                        &print::to_string(print::NO_ANN, |s| s.print_qpath(path, false)),\n+                        &rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| s.print_qpath(path, false)),\n                     );\n                 }\n             },"}, {"sha": "afd36c30a370d031f2845ea74dd025740faf8150", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64befe59cc814ddb89b73f810febed0fc8425cf5/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64befe59cc814ddb89b73f810febed0fc8425cf5/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=64befe59cc814ddb89b73f810febed0fc8425cf5", "patch": "@@ -14,8 +14,8 @@ use rustc_hir::intravisit::FnKind;\n use rustc_hir::{def_id, Body, FnDecl, HirId};\n use rustc_index::bit_set::{BitSet, HybridBitSet};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_mir::dataflow::generic::{Analysis, AnalysisDomain, GenKill, GenKillAnalysis, ResultsCursor};\n use rustc_mir::dataflow::BottomValue;\n+use rustc_mir::dataflow::{Analysis, AnalysisDomain, GenKill, GenKillAnalysis, ResultsCursor};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::{BytePos, Span};\n use std::convert::TryFrom;"}, {"sha": "075df19a71e289aabcda714b1d0b782ae46108a0", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/64befe59cc814ddb89b73f810febed0fc8425cf5/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64befe59cc814ddb89b73f810febed0fc8425cf5/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=64befe59cc814ddb89b73f810febed0fc8425cf5", "patch": "@@ -1,5 +1,6 @@\n-use crate::utils::{in_macro, snippet, span_lint_and_help, SpanlessHash};\n+use crate::utils::{in_macro, snippet, snippet_with_applicability, span_lint_and_help, SpanlessHash};\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_errors::Applicability;\n use rustc_hir::{GenericBound, Generics, WherePredicate};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -41,6 +42,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TraitBounds {\n             hasher.finish()\n         };\n         let mut map = FxHashMap::default();\n+        let mut applicability = Applicability::MaybeIncorrect;\n         for bound in gen.where_clause.predicates {\n             if let WherePredicate::BoundPredicate(ref p) = bound {\n                 let h = hash(&p.bounded_ty);\n@@ -52,13 +54,19 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TraitBounds {\n                     for b in v.iter() {\n                         if let GenericBound::Trait(ref poly_trait_ref, _) = b {\n                             let path = &poly_trait_ref.trait_ref.path;\n-                            hint_string.push_str(&format!(\" {} +\", path));\n+                            hint_string.push_str(&format!(\n+                                \" {} +\",\n+                                snippet_with_applicability(cx, path.span, \"..\", &mut applicability)\n+                            ));\n                         }\n                     }\n                     for b in p.bounds.iter() {\n                         if let GenericBound::Trait(ref poly_trait_ref, _) = b {\n                             let path = &poly_trait_ref.trait_ref.path;\n-                            hint_string.push_str(&format!(\" {} +\", path));\n+                            hint_string.push_str(&format!(\n+                                \" {} +\",\n+                                snippet_with_applicability(cx, path.span, \"..\", &mut applicability)\n+                            ));\n                         }\n                     }\n                     hint_string.truncate(hint_string.len() - 2);"}, {"sha": "20f3929251cad328c890c87cc68c45823b40b886", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64befe59cc814ddb89b73f810febed0fc8425cf5/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64befe59cc814ddb89b73f810febed0fc8425cf5/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=64befe59cc814ddb89b73f810febed0fc8425cf5", "patch": "@@ -468,9 +468,9 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                     println!(\"Ret(None) = {};\", current);\n                 }\n             },\n-            ExprKind::InlineAsm(_) => {\n-                println!(\"InlineAsm(_) = {};\", current);\n-                println!(\"    // unimplemented: `ExprKind::InlineAsm` is not further destructured at the moment\");\n+            ExprKind::LlvmInlineAsm(_) => {\n+                println!(\"LlvmInlineAsm(_) = {};\", current);\n+                println!(\"    // unimplemented: `ExprKind::LlvmInlineAsm` is not further destructured at the moment\");\n             },\n             ExprKind::Struct(ref path, ref fields, ref opt_base) => {\n                 let path_pat = self.next(\"path\");"}, {"sha": "8f29b7e1336866184574439609782a3feceb9f76", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64befe59cc814ddb89b73f810febed0fc8425cf5/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64befe59cc814ddb89b73f810febed0fc8425cf5/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=64befe59cc814ddb89b73f810febed0fc8425cf5", "patch": "@@ -474,7 +474,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 self.hash_expr(a);\n                 self.hash_expr(i);\n             },\n-            ExprKind::InlineAsm(..) | ExprKind::Err => {},\n+            ExprKind::LlvmInlineAsm(..) | ExprKind::Err => {},\n             ExprKind::Lit(ref l) => {\n                 l.node.hash(&mut self.s);\n             },"}, {"sha": "b97fc9547e55a8bb9aa821b8ef0fbe070cd87c3c", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/64befe59cc814ddb89b73f810febed0fc8425cf5/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64befe59cc814ddb89b73f810febed0fc8425cf5/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=64befe59cc814ddb89b73f810febed0fc8425cf5", "patch": "@@ -3,7 +3,6 @@\n use crate::utils::get_attr;\n use rustc_ast::ast::Attribute;\n use rustc_hir as hir;\n-use rustc_hir::print;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_session::Session;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -50,7 +49,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DeepCodeInspector {\n             hir::VisibilityKind::Crate(_) => println!(\"visible crate wide\"),\n             hir::VisibilityKind::Restricted { ref path, .. } => println!(\n                 \"visible in module `{}`\",\n-                print::to_string(print::NO_ANN, |s| s.print_path(path, false))\n+                rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| s.print_path(path, false))\n             ),\n             hir::VisibilityKind::Inherited => println!(\"visibility inherited from outer item\"),\n         }\n@@ -283,10 +282,10 @@ fn print_expr(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, indent: usize) {\n                 print_expr(cx, e, indent + 1);\n             }\n         },\n-        hir::ExprKind::InlineAsm(ref asm) => {\n+        hir::ExprKind::LlvmInlineAsm(ref asm) => {\n             let inputs = &asm.inputs_exprs;\n             let outputs = &asm.outputs_exprs;\n-            println!(\"{}InlineAsm\", ind);\n+            println!(\"{}LlvmInlineAsm\", ind);\n             println!(\"{}inputs:\", ind);\n             for e in inputs.iter() {\n                 print_expr(cx, e, indent + 1);\n@@ -333,7 +332,7 @@ fn print_item(cx: &LateContext<'_, '_>, item: &hir::Item<'_>) {\n         hir::VisibilityKind::Crate(_) => println!(\"visible crate wide\"),\n         hir::VisibilityKind::Restricted { ref path, .. } => println!(\n             \"visible in module `{}`\",\n-            print::to_string(print::NO_ANN, |s| s.print_path(path, false))\n+            rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| s.print_path(path, false))\n         ),\n         hir::VisibilityKind::Inherited => println!(\"visibility inherited from outer item\"),\n     }\n@@ -427,7 +426,7 @@ fn print_pat(cx: &LateContext<'_, '_>, pat: &hir::Pat<'_>, indent: usize) {\n             println!(\n                 \"{}name: {}\",\n                 ind,\n-                print::to_string(print::NO_ANN, |s| s.print_qpath(path, false))\n+                rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| s.print_qpath(path, false))\n             );\n             println!(\"{}ignore leftover fields: {}\", ind, ignore);\n             println!(\"{}fields:\", ind);\n@@ -444,7 +443,7 @@ fn print_pat(cx: &LateContext<'_, '_>, pat: &hir::Pat<'_>, indent: usize) {\n             println!(\n                 \"{}path: {}\",\n                 ind,\n-                print::to_string(print::NO_ANN, |s| s.print_qpath(path, false))\n+                rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| s.print_qpath(path, false))\n             );\n             if let Some(dot_position) = opt_dots_position {\n                 println!(\"{}dot position: {}\", ind, dot_position);"}, {"sha": "8957121a0a55e572e2ec8431f0d2e6d46ee2268a", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64befe59cc814ddb89b73f810febed0fc8425cf5/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64befe59cc814ddb89b73f810febed0fc8425cf5/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=64befe59cc814ddb89b73f810febed0fc8425cf5", "patch": "@@ -108,7 +108,7 @@ impl<'a> Sugg<'a> {\n             | hir::ExprKind::Call(..)\n             | hir::ExprKind::Field(..)\n             | hir::ExprKind::Index(..)\n-            | hir::ExprKind::InlineAsm(..)\n+            | hir::ExprKind::LlvmInlineAsm(..)\n             | hir::ExprKind::Lit(..)\n             | hir::ExprKind::Loop(..)\n             | hir::ExprKind::MethodCall(..)\n@@ -150,7 +150,7 @@ impl<'a> Sugg<'a> {\n             | ast::ExprKind::Field(..)\n             | ast::ExprKind::ForLoop(..)\n             | ast::ExprKind::Index(..)\n-            | ast::ExprKind::InlineAsm(..)\n+            | ast::ExprKind::LlvmInlineAsm(..)\n             | ast::ExprKind::Lit(..)\n             | ast::ExprKind::Loop(..)\n             | ast::ExprKind::MacCall(..)"}]}