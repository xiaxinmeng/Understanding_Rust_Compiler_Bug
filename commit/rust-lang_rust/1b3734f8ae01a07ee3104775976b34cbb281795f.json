{"sha": "1b3734f8ae01a07ee3104775976b34cbb281795f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiMzczNGY4YWUwMWEwN2VlMzEwNDc3NTk3NmIzNGNiYjI4MTc5NWY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-18T20:27:41Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-02T17:06:59Z"}, "message": "Fix fallout from change, adding explicit `Sized` annotations where necessary.", "tree": {"sha": "1743fc7e68e620738da0f263cc2d297a2f7b57c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1743fc7e68e620738da0f263cc2d297a2f7b57c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b3734f8ae01a07ee3104775976b34cbb281795f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b3734f8ae01a07ee3104775976b34cbb281795f", "html_url": "https://github.com/rust-lang/rust/commit/1b3734f8ae01a07ee3104775976b34cbb281795f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b3734f8ae01a07ee3104775976b34cbb281795f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f887c8c5773307033fd821a5045cdc10b790ea5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f887c8c5773307033fd821a5045cdc10b790ea5", "html_url": "https://github.com/rust-lang/rust/commit/1f887c8c5773307033fd821a5045cdc10b790ea5"}], "stats": {"total": 82, "additions": 62, "deletions": 20}, "files": [{"sha": "159c2a505d51b89c1b06b062b4b7d6ab70e41872", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b3734f8ae01a07ee3104775976b34cbb281795f/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3734f8ae01a07ee3104775976b34cbb281795f/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=1b3734f8ae01a07ee3104775976b34cbb281795f", "patch": "@@ -25,7 +25,7 @@ use kinds::Sized;\n \n /// A common trait for cloning an object.\n #[stable]\n-pub trait Clone {\n+pub trait Clone : Sized {\n     /// Returns a copy of the value.\n     #[stable]\n     fn clone(&self) -> Self;"}, {"sha": "43f0d72eeba9219a5fa80daa36f60035afa2f8af", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1b3734f8ae01a07ee3104775976b34cbb281795f/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3734f8ae01a07ee3104775976b34cbb281795f/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=1b3734f8ae01a07ee3104775976b34cbb281795f", "patch": "@@ -74,7 +74,26 @@ pub trait FormatWriter {\n     ///\n     /// This method should generally not be invoked manually, but rather through\n     /// the `write!` macro itself.\n-    fn write_fmt(&mut self, args: Arguments) -> Result { write(self, args) }\n+    fn write_fmt(&mut self, args: Arguments) -> Result {\n+        // This Adapter is needed to allow `self` (of type `&mut\n+        // Self`) to be cast to a FormatWriter (below) without\n+        // requiring a `Sized` bound.\n+        struct Adapter<'a,Sized? T:'a>(&'a mut T);\n+\n+        impl<'a, Sized? T> FormatWriter for Adapter<'a, T>\n+            where T: FormatWriter\n+        {\n+            fn write(&mut self, bytes: &[u8]) -> Result {\n+                self.0.write(bytes)\n+            }\n+\n+            fn write_fmt(&mut self, args: Arguments) -> Result {\n+                self.0.write_fmt(args)\n+            }\n+        }\n+\n+        write(&mut Adapter(self), args)\n+    }\n }\n \n /// A struct to represent both where to emit formatting strings to and how they"}, {"sha": "229777f68431160e148e5d73a4e2b1db5107ecfc", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1b3734f8ae01a07ee3104775976b34cbb281795f/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3734f8ae01a07ee3104775976b34cbb281795f/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=1b3734f8ae01a07ee3104775976b34cbb281795f", "patch": "@@ -65,6 +65,7 @@ use num::{ToPrimitive, Int};\n use ops::{Add, Deref, FnMut};\n use option::Option;\n use option::Option::{Some, None};\n+use std::kinds::Sized;\n use uint;\n \n #[deprecated = \"renamed to Extend\"] pub use self::Extend as Extendable;\n@@ -109,7 +110,7 @@ pub trait Extend<A> {\n \n #[unstable = \"new convention for extension traits\"]\n /// An extension trait providing numerous methods applicable to all iterators.\n-pub trait IteratorExt<A>: Iterator<A> {\n+pub trait IteratorExt<A>: Iterator<A> + Sized {\n     /// Chain this iterator with another, returning a new iterator that will\n     /// finish iterating over the current iterator, and then iterate\n     /// over the other specified iterator.\n@@ -692,7 +693,7 @@ impl<A, I> IteratorExt<A> for I where I: Iterator<A> {}\n \n /// Extention trait for iterators of pairs.\n #[unstable = \"newly added trait, likely to be merged with IteratorExt\"]\n-pub trait IteratorPairExt<A, B>: Iterator<(A, B)> {\n+pub trait IteratorPairExt<A, B>: Iterator<(A, B)> + Sized {\n     /// Converts an iterator of pairs into a pair of containers.\n     ///\n     /// Loops through the entire iterator, collecting the first component of\n@@ -738,7 +739,7 @@ pub trait DoubleEndedIterator<A>: Iterator<A> {\n \n /// Extension methods for double-ended iterators.\n #[unstable = \"new extension trait convention\"]\n-pub trait DoubleEndedIteratorExt<A>: DoubleEndedIterator<A> {\n+pub trait DoubleEndedIteratorExt<A>: DoubleEndedIterator<A> + Sized {\n     /// Change the direction of the iterator\n     ///\n     /// The flipped iterator swaps the ends on an iterator that can already"}, {"sha": "d16478dd6cc7ee290f5187dabff5905c3f9de72f", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b3734f8ae01a07ee3104775976b34cbb281795f/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3734f8ae01a07ee3104775976b34cbb281795f/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=1b3734f8ae01a07ee3104775976b34cbb281795f", "patch": "@@ -980,7 +980,7 @@ impl_to_primitive_float! { f64 }\n \n /// A generic trait for converting a number to a value.\n #[experimental = \"trait is likely to be removed\"]\n-pub trait FromPrimitive {\n+pub trait FromPrimitive : ::kinds::Sized {\n     /// Convert an `int` to return an optional value of this type. If the\n     /// value cannot be represented by this value, the `None` is returned.\n     #[inline]"}, {"sha": "38e47a5ad334e92acd22f83c1ed9b045268103d0", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b3734f8ae01a07ee3104775976b34cbb281795f/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3734f8ae01a07ee3104775976b34cbb281795f/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=1b3734f8ae01a07ee3104775976b34cbb281795f", "patch": "@@ -92,7 +92,7 @@ use mem;\n use clone::Clone;\n use intrinsics;\n use option::Option::{mod, Some, None};\n-use kinds::{Send, Sync};\n+use kinds::{Send, Sized, Sync};\n \n use cmp::{PartialEq, Eq, Ord, PartialOrd, Equiv};\n use cmp::Ordering::{mod, Less, Equal, Greater};\n@@ -243,7 +243,7 @@ pub unsafe fn write<T>(dst: *mut T, src: T) {\n \n /// Methods on raw pointers\n #[stable]\n-pub trait PtrExt<T> {\n+pub trait PtrExt<T> : Sized {\n     /// Returns the null pointer.\n     #[deprecated = \"call ptr::null instead\"]\n     fn null() -> Self;"}, {"sha": "bbcd99afdea9331330a1349e565f19964ada79f4", "filename": "src/librand/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b3734f8ae01a07ee3104775976b34cbb281795f/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3734f8ae01a07ee3104775976b34cbb281795f/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=1b3734f8ae01a07ee3104775976b34cbb281795f", "patch": "@@ -52,14 +52,14 @@ pub mod reseeding;\n mod rand_impls;\n \n /// A type that can be randomly generated using an `Rng`.\n-pub trait Rand {\n+pub trait Rand : Sized {\n     /// Generates a random instance of this type using the specified source of\n     /// randomness.\n     fn rand<R: Rng>(rng: &mut R) -> Self;\n }\n \n /// A random number generator.\n-pub trait Rng {\n+pub trait Rng : Sized {\n     /// Return the next random u32.\n     ///\n     /// This rarely needs to be called directly, prefer `r.gen()` to"}, {"sha": "ab6f6b601f6d039c4afbee04ec68dd5e0cb5d802", "filename": "src/librustc/middle/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b3734f8ae01a07ee3104775976b34cbb281795f/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3734f8ae01a07ee3104775976b34cbb281795f/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs?ref=1b3734f8ae01a07ee3104775976b34cbb281795f", "patch": "@@ -57,7 +57,7 @@ use syntax::ast;\n use syntax::abi;\n use syntax::codemap::Span;\n \n-pub trait Combine<'tcx> {\n+pub trait Combine<'tcx> : Sized {\n     fn infcx<'a>(&'a self) -> &'a InferCtxt<'a, 'tcx>;\n     fn tcx<'a>(&'a self) -> &'a ty::ctxt<'tcx> { self.infcx().tcx }\n     fn tag(&self) -> String;"}, {"sha": "97e74b9f6bbb9ecb8987db0c2534da9a5ba10e32", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b3734f8ae01a07ee3104775976b34cbb281795f/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3734f8ae01a07ee3104775976b34cbb281795f/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=1b3734f8ae01a07ee3104775976b34cbb281795f", "patch": "@@ -519,7 +519,7 @@ impl<'a,T> Iterator<(ParamSpace, uint, &'a T)> for EnumeratedItems<'a,T> {\n // `foo`. Or use `foo.subst_spanned(tcx, substs, Some(span))` when\n // there is more information available (for better errors).\n \n-pub trait Subst<'tcx> {\n+pub trait Subst<'tcx> : Sized {\n     fn subst(&self, tcx: &ty::ctxt<'tcx>, substs: &Substs<'tcx>) -> Self {\n         self.subst_spanned(tcx, substs, None)\n     }"}, {"sha": "7b13bea7d79c7093fec3a9eeece7b4c77f9762ab", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b3734f8ae01a07ee3104775976b34cbb281795f/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3734f8ae01a07ee3104775976b34cbb281795f/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=1b3734f8ae01a07ee3104775976b34cbb281795f", "patch": "@@ -56,7 +56,7 @@ pub trait TypeFoldable<'tcx> {\n /// default implementation that does an \"identity\" fold. Within each\n /// identity fold, it should invoke `foo.fold_with(self)` to fold each\n /// sub-item.\n-pub trait TypeFolder<'tcx> {\n+pub trait TypeFolder<'tcx> : Sized {\n     fn tcx<'a>(&'a self) -> &'a ty::ctxt<'tcx>;\n \n     /// Invoked by the `super_*` routines when we enter a region"}, {"sha": "a89292cfacbbbb1a5f0033ff7e8546c2c8efb6da", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b3734f8ae01a07ee3104775976b34cbb281795f/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3734f8ae01a07ee3104775976b34cbb281795f/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=1b3734f8ae01a07ee3104775976b34cbb281795f", "patch": "@@ -141,7 +141,7 @@ impl PpSourceMode {\n     }\n }\n \n-trait PrinterSupport<'ast>: pprust::PpAnn {\n+trait PrinterSupport<'ast>: pprust::PpAnn + Sized {\n     /// Provides a uniform interface for re-extracting a reference to a\n     /// `Session` from a value that now owns it.\n     fn sess<'a>(&'a self) -> &'a Session;"}, {"sha": "4f277cc868a1a04873ed3abbcbc2a04e57e689ae", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b3734f8ae01a07ee3104775976b34cbb281795f/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3734f8ae01a07ee3104775976b34cbb281795f/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=1b3734f8ae01a07ee3104775976b34cbb281795f", "patch": "@@ -12,7 +12,7 @@ use clean::*;\n use std::iter::Extend;\n use std::mem::{replace, swap};\n \n-pub trait DocFolder {\n+pub trait DocFolder : Sized {\n     fn fold_item(&mut self, item: Item) -> Option<Item> {\n         self.fold_item_recur(item)\n     }"}, {"sha": "cc8a67249d4cfe6fbe12fc585abcd6f0e04d50b0", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1b3734f8ae01a07ee3104775976b34cbb281795f/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3734f8ae01a07ee3104775976b34cbb281795f/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=1b3734f8ae01a07ee3104775976b34cbb281795f", "patch": "@@ -232,6 +232,7 @@ use error::{FromError, Error};\n use fmt;\n use int;\n use iter::{Iterator, IteratorExt};\n+use kinds::Sized;\n use mem::transmute;\n use ops::{BitOr, BitXor, BitAnd, Sub, Not, FnOnce};\n use option::Option;\n@@ -1030,11 +1031,25 @@ pub trait Writer {\n     fn write_fmt(&mut self, fmt: fmt::Arguments) -> IoResult<()> {\n         // Create a shim which translates a Writer to a FormatWriter and saves\n         // off I/O errors. instead of discarding them\n-        struct Adaptor<'a, T:'a> {\n+        struct Adaptor<'a, Sized? T:'a> {\n             inner: &'a mut T,\n             error: IoResult<()>,\n         }\n \n+        #[cfg(not(stage0))]\n+        impl<'a, Sized? T: Writer> fmt::FormatWriter for Adaptor<'a, T> {\n+            fn write(&mut self, bytes: &[u8]) -> fmt::Result {\n+                match self.inner.write(bytes) {\n+                    Ok(()) => Ok(()),\n+                    Err(e) => {\n+                        self.error = Err(e);\n+                        Err(fmt::Error)\n+                    }\n+                }\n+            }\n+        }\n+\n+        #[cfg(stage0)]\n         impl<'a, T: Writer> fmt::FormatWriter for Adaptor<'a, T> {\n             fn write(&mut self, bytes: &[u8]) -> fmt::Result {\n                 match self.inner.write(bytes) {\n@@ -1629,16 +1644,24 @@ pub trait Acceptor<T> {\n /// `Some`. The `Some` contains the `IoResult` representing whether the\n /// connection attempt was successful.  A successful connection will be wrapped\n /// in `Ok`. A failed connection is represented as an `Err`.\n-pub struct IncomingConnections<'a, A:'a> {\n+pub struct IncomingConnections<'a, Sized? A:'a> {\n     inc: &'a mut A,\n }\n \n+#[cfg(stage0)]\n impl<'a, T, A: Acceptor<T>> Iterator<IoResult<T>> for IncomingConnections<'a, A> {\n     fn next(&mut self) -> Option<IoResult<T>> {\n         Some(self.inc.accept())\n     }\n }\n \n+#[cfg(not(stage0))]\n+impl<'a, T, Sized? A: Acceptor<T>> Iterator<IoResult<T>> for IncomingConnections<'a, A> {\n+    fn next(&mut self) -> Option<IoResult<T>> {\n+        Some(self.inc.accept())\n+    }\n+}\n+\n /// Creates a standard error for a commonly used flavor of error. The `detail`\n /// field of the returned error will always be `None`.\n ///"}, {"sha": "5234837a456c810c909bc34a15922d8332074a47", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b3734f8ae01a07ee3104775976b34cbb281795f/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3734f8ae01a07ee3104775976b34cbb281795f/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=1b3734f8ae01a07ee3104775976b34cbb281795f", "patch": "@@ -53,7 +53,7 @@ impl<T> MoveMap<T> for OwnedSlice<T> {\n     }\n }\n \n-pub trait Folder {\n+pub trait Folder : Sized {\n     // Any additions to this trait should happen in form\n     // of a call to a public `noop_*` function that only calls\n     // out to the folder again, not other `noop_*` functions."}, {"sha": "0b4a1fbdd2294634954a3a65a88f27c6c0119fc3", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1b3734f8ae01a07ee3104775976b34cbb281795f/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3734f8ae01a07ee3104775976b34cbb281795f/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=1b3734f8ae01a07ee3104775976b34cbb281795f", "patch": "@@ -54,8 +54,7 @@ pub enum FnKind<'a> {\n /// explicitly, you need to override each method.  (And you also need\n /// to monitor future changes to `Visitor` in case a new method with a\n /// new default implementation gets introduced.)\n-pub trait Visitor<'v> {\n-\n+pub trait Visitor<'v> : Sized {\n     fn visit_name(&mut self, _span: Span, _name: Name) {\n         // Nothing to do.\n     }"}]}