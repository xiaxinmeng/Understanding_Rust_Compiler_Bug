{"sha": "41affd03eb169830773cd1b11efda562ab81fad0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxYWZmZDAzZWIxNjk4MzA3NzNjZDFiMTFlZmRhNTYyYWI4MWZhZDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-04T18:36:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-04T18:36:50Z"}, "message": "Auto merge of #51340 - Amanieu:hashmap_layout2, r=SimonSapin\n\nOptimize layout calculations in HashMap\n\nThis now produces the same assembly code as the previous implementation.\n\ncc #51163 @nnethercote @gnzlbg @andjo403", "tree": {"sha": "0c05503cee2272a9dd4abe4aac25588152ae402c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c05503cee2272a9dd4abe4aac25588152ae402c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41affd03eb169830773cd1b11efda562ab81fad0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41affd03eb169830773cd1b11efda562ab81fad0", "html_url": "https://github.com/rust-lang/rust/commit/41affd03eb169830773cd1b11efda562ab81fad0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41affd03eb169830773cd1b11efda562ab81fad0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdc193db993eadab74d9ea439613e8f9d3725ac7", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdc193db993eadab74d9ea439613e8f9d3725ac7", "html_url": "https://github.com/rust-lang/rust/commit/cdc193db993eadab74d9ea439613e8f9d3725ac7"}, {"sha": "b69724f37cca68249340e7245e5ac2832d8b2c30", "url": "https://api.github.com/repos/rust-lang/rust/commits/b69724f37cca68249340e7245e5ac2832d8b2c30", "html_url": "https://github.com/rust-lang/rust/commit/b69724f37cca68249340e7245e5ac2832d8b2c30"}], "stats": {"total": 19, "additions": 16, "deletions": 3}, "files": [{"sha": "d997fb28d4286595d5c313b669e9dbfbc7582827", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/41affd03eb169830773cd1b11efda562ab81fad0/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41affd03eb169830773cd1b11efda562ab81fad0/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=41affd03eb169830773cd1b11efda562ab81fad0", "patch": "@@ -15,6 +15,7 @@ use mem::{size_of, needs_drop};\n use mem;\n use ops::{Deref, DerefMut};\n use ptr::{self, Unique, NonNull};\n+use hint;\n \n use self::BucketState::*;\n \n@@ -655,7 +656,17 @@ impl<K, V, M> GapThenFull<K, V, M>\n fn calculate_layout<K, V>(capacity: usize) -> Result<(Layout, usize), LayoutErr> {\n     let hashes = Layout::array::<HashUint>(capacity)?;\n     let pairs = Layout::array::<(K, V)>(capacity)?;\n-    hashes.extend(pairs)\n+    hashes.extend(pairs).map(|(layout, _)| {\n+        // LLVM seems to have trouble properly const-propagating pairs.align(),\n+        // possibly due to the use of NonZeroUsize. This little hack allows it\n+        // to generate optimal code.\n+        //\n+        // See https://github.com/rust-lang/rust/issues/51346 for more details.\n+        (\n+            layout,\n+            hashes.size() + hashes.padding_needed_for(mem::align_of::<(K, V)>()),\n+        )\n+    })\n }\n \n pub(crate) enum Fallibility {\n@@ -711,7 +722,8 @@ impl<K, V> RawTable<K, V> {\n     }\n \n     fn raw_bucket_at(&self, index: usize) -> RawBucket<K, V> {\n-        let (_, pairs_offset) = calculate_layout::<K, V>(self.capacity()).unwrap();\n+        let (_, pairs_offset) = calculate_layout::<K, V>(self.capacity())\n+            .unwrap_or_else(|_| unsafe { hint::unreachable_unchecked() });\n         let buffer = self.hashes.ptr() as *mut u8;\n         unsafe {\n             RawBucket {\n@@ -1109,7 +1121,8 @@ unsafe impl<#[may_dangle] K, #[may_dangle] V> Drop for RawTable<K, V> {\n             }\n         }\n \n-        let (layout, _) = calculate_layout::<K, V>(self.capacity()).unwrap();\n+        let (layout, _) = calculate_layout::<K, V>(self.capacity())\n+            .unwrap_or_else(|_| unsafe { hint::unreachable_unchecked() });\n         unsafe {\n             Global.dealloc(NonNull::new_unchecked(self.hashes.ptr()).as_opaque(), layout);\n             // Remember how everything was allocated out of one buffer"}]}