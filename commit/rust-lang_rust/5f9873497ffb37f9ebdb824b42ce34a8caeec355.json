{"sha": "5f9873497ffb37f9ebdb824b42ce34a8caeec355", "node_id": "C_kwDOAAsO6NoAKDVmOTg3MzQ5N2ZmYjM3ZjllYmRiODI0YjQyY2UzNGE4Y2FlZWMzNTU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-09T16:35:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-09T16:35:30Z"}, "message": "Auto merge of #10467 - blyxyas:underscore_typed, r=Jarcho\n\nAdd `let_with_type_underscore` lint\n\nFixes #10463\nchangelog: [`let_with_type_underscore`]: Add the lint.", "tree": {"sha": "8c7164ced29615dbde36198dc3ca0ab3653092d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c7164ced29615dbde36198dc3ca0ab3653092d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f9873497ffb37f9ebdb824b42ce34a8caeec355", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f9873497ffb37f9ebdb824b42ce34a8caeec355", "html_url": "https://github.com/rust-lang/rust/commit/5f9873497ffb37f9ebdb824b42ce34a8caeec355", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f9873497ffb37f9ebdb824b42ce34a8caeec355/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea4ebed2edf387344077a52a2e47f2d2536fce01", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea4ebed2edf387344077a52a2e47f2d2536fce01", "html_url": "https://github.com/rust-lang/rust/commit/ea4ebed2edf387344077a52a2e47f2d2536fce01"}, {"sha": "ca3bf94c431efa5355f3928e3bfd587ae125bd38", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca3bf94c431efa5355f3928e3bfd587ae125bd38", "html_url": "https://github.com/rust-lang/rust/commit/ca3bf94c431efa5355f3928e3bfd587ae125bd38"}], "stats": {"total": 243, "additions": 178, "deletions": 65}, "files": [{"sha": "82911231ec90ad2f1aa18f6c0da9cbafdb50cbfb", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f9873497ffb37f9ebdb824b42ce34a8caeec355/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/5f9873497ffb37f9ebdb824b42ce34a8caeec355/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=5f9873497ffb37f9ebdb824b42ce34a8caeec355", "patch": "@@ -4643,6 +4643,7 @@ Released 2018-09-13\n [`let_underscore_must_use`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_must_use\n [`let_underscore_untyped`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_untyped\n [`let_unit_value`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_unit_value\n+[`let_with_type_underscore`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_with_type_underscore\n [`linkedlist`]: https://rust-lang.github.io/rust-clippy/master/index.html#linkedlist\n [`logic_bug`]: https://rust-lang.github.io/rust-clippy/master/index.html#logic_bug\n [`lossy_float_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#lossy_float_literal"}, {"sha": "cc6024b87cdaea02572bc279dd7b057a98e0e9d3", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f9873497ffb37f9ebdb824b42ce34a8caeec355/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9873497ffb37f9ebdb824b42ce34a8caeec355/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=5f9873497ffb37f9ebdb824b42ce34a8caeec355", "patch": "@@ -227,6 +227,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::let_underscore::LET_UNDERSCORE_LOCK_INFO,\n     crate::let_underscore::LET_UNDERSCORE_MUST_USE_INFO,\n     crate::let_underscore::LET_UNDERSCORE_UNTYPED_INFO,\n+    crate::let_with_type_underscore::LET_WITH_TYPE_UNDERSCORE_INFO,\n     crate::lifetimes::EXTRA_UNUSED_LIFETIMES_INFO,\n     crate::lifetimes::NEEDLESS_LIFETIMES_INFO,\n     crate::literal_representation::DECIMAL_LITERAL_REPRESENTATION_INFO,"}, {"sha": "ba51973f2f9c40902a3e4c6a79333a19185df3d8", "filename": "clippy_lints/src/let_with_type_underscore.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5f9873497ffb37f9ebdb824b42ce34a8caeec355/clippy_lints%2Fsrc%2Flet_with_type_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9873497ffb37f9ebdb824b42ce34a8caeec355/clippy_lints%2Fsrc%2Flet_with_type_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_with_type_underscore.rs?ref=5f9873497ffb37f9ebdb824b42ce34a8caeec355", "patch": "@@ -0,0 +1,45 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use rustc_hir::*;\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Detects when a variable is declared with an explicit type of `_`.\n+    /// ### Why is this bad?\n+    /// It adds noise, `: _` provides zero clarity or utility.\n+    /// ### Example\n+    /// ```rust,ignore\n+    /// let my_number: _ = 1;\n+    /// ```\n+    /// Use instead:\n+    /// ```rust,ignore\n+    /// let my_number = 1;\n+    /// ```\n+    #[clippy::version = \"1.69.0\"]\n+    pub LET_WITH_TYPE_UNDERSCORE,\n+    complexity,\n+    \"unneeded underscore type (`_`) in a variable declaration\"\n+}\n+declare_lint_pass!(UnderscoreTyped => [LET_WITH_TYPE_UNDERSCORE]);\n+\n+impl LateLintPass<'_> for UnderscoreTyped {\n+    fn check_local<'tcx>(&mut self, cx: &LateContext<'tcx>, local: &'tcx Local<'tcx>) {\n+        if_chain! {\n+            if !in_external_macro(cx.tcx.sess, local.span);\n+            if let Some(ty) = local.ty; // Ensure that it has a type defined\n+            if let TyKind::Infer = &ty.kind; // that type is '_'\n+            if local.span.ctxt() == ty.span.ctxt();\n+            then {\n+                span_lint_and_help(cx,\n+                    LET_WITH_TYPE_UNDERSCORE,\n+                    local.span,\n+                    \"variable declared with type underscore\",\n+                    Some(ty.span.with_lo(local.pat.span.hi())),\n+                    \"remove the explicit type `_` declaration\"\n+                )\n+            }\n+        };\n+    }\n+}"}, {"sha": "ce50c4657d87f6e5cc0507a35a9358b81e9ede0e", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f9873497ffb37f9ebdb824b42ce34a8caeec355/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9873497ffb37f9ebdb824b42ce34a8caeec355/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=5f9873497ffb37f9ebdb824b42ce34a8caeec355", "patch": "@@ -167,6 +167,7 @@ mod large_stack_arrays;\n mod len_zero;\n mod let_if_seq;\n mod let_underscore;\n+mod let_with_type_underscore;\n mod lifetimes;\n mod literal_representation;\n mod loops;\n@@ -930,6 +931,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(collection_is_never_read::CollectionIsNeverRead));\n     store.register_late_pass(|_| Box::new(missing_assert_message::MissingAssertMessage));\n     store.register_early_pass(|| Box::new(redundant_async_block::RedundantAsyncBlock));\n+    store.register_late_pass(|_| Box::new(let_with_type_underscore::UnderscoreTyped));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "ce1895851e2d91d0d28acd024c3bb8e0bb7ca197", "filename": "tests/ui/crashes/ice-6179.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f9873497ffb37f9ebdb824b42ce34a8caeec355/tests%2Fui%2Fcrashes%2Fice-6179.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9873497ffb37f9ebdb824b42ce34a8caeec355/tests%2Fui%2Fcrashes%2Fice-6179.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6179.rs?ref=5f9873497ffb37f9ebdb824b42ce34a8caeec355", "patch": "@@ -2,7 +2,7 @@\n //! The ICE is mainly caused by using `hir_ty_to_ty`. See the discussion in the PR for details.\n \n #![warn(clippy::use_self)]\n-#![allow(dead_code)]\n+#![allow(dead_code, clippy::let_with_type_underscore)]\n \n struct Foo;\n "}, {"sha": "a9e5fd159afca95e288e7269ce147da7b2cc7a96", "filename": "tests/ui/default_numeric_fallback_f64.fixed", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f9873497ffb37f9ebdb824b42ce34a8caeec355/tests%2Fui%2Fdefault_numeric_fallback_f64.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5f9873497ffb37f9ebdb824b42ce34a8caeec355/tests%2Fui%2Fdefault_numeric_fallback_f64.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_f64.fixed?ref=5f9873497ffb37f9ebdb824b42ce34a8caeec355", "patch": "@@ -9,7 +9,8 @@\n     clippy::unnecessary_operation,\n     clippy::branches_sharing_code,\n     clippy::match_single_binding,\n-    clippy::let_unit_value\n+    clippy::let_unit_value,\n+    clippy::let_with_type_underscore\n )]\n \n #[macro_use]"}, {"sha": "085f8f452b2e6eed4d52af8f2ab6171af276e9db", "filename": "tests/ui/default_numeric_fallback_f64.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f9873497ffb37f9ebdb824b42ce34a8caeec355/tests%2Fui%2Fdefault_numeric_fallback_f64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9873497ffb37f9ebdb824b42ce34a8caeec355/tests%2Fui%2Fdefault_numeric_fallback_f64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_f64.rs?ref=5f9873497ffb37f9ebdb824b42ce34a8caeec355", "patch": "@@ -9,7 +9,8 @@\n     clippy::unnecessary_operation,\n     clippy::branches_sharing_code,\n     clippy::match_single_binding,\n-    clippy::let_unit_value\n+    clippy::let_unit_value,\n+    clippy::let_with_type_underscore\n )]\n \n #[macro_use]"}, {"sha": "44c6f1a9bea9b9058783276ac8d49b31724fb068", "filename": "tests/ui/default_numeric_fallback_f64.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5f9873497ffb37f9ebdb824b42ce34a8caeec355/tests%2Fui%2Fdefault_numeric_fallback_f64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f9873497ffb37f9ebdb824b42ce34a8caeec355/tests%2Fui%2Fdefault_numeric_fallback_f64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_f64.stderr?ref=5f9873497ffb37f9ebdb824b42ce34a8caeec355", "patch": "@@ -1,145 +1,145 @@\n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:21:17\n+  --> $DIR/default_numeric_fallback_f64.rs:22:17\n    |\n LL |         let x = 0.12;\n    |                 ^^^^ help: consider adding suffix: `0.12_f64`\n    |\n    = note: `-D clippy::default-numeric-fallback` implied by `-D warnings`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:22:18\n+  --> $DIR/default_numeric_fallback_f64.rs:23:18\n    |\n LL |         let x = [1., 2., 3.];\n    |                  ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:22:22\n+  --> $DIR/default_numeric_fallback_f64.rs:23:22\n    |\n LL |         let x = [1., 2., 3.];\n    |                      ^^ help: consider adding suffix: `2.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:22:26\n+  --> $DIR/default_numeric_fallback_f64.rs:23:26\n    |\n LL |         let x = [1., 2., 3.];\n    |                          ^^ help: consider adding suffix: `3.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:23:28\n+  --> $DIR/default_numeric_fallback_f64.rs:24:28\n    |\n LL |         let x = if true { (1., 2.) } else { (3., 4.) };\n    |                            ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:23:32\n+  --> $DIR/default_numeric_fallback_f64.rs:24:32\n    |\n LL |         let x = if true { (1., 2.) } else { (3., 4.) };\n    |                                ^^ help: consider adding suffix: `2.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:23:46\n+  --> $DIR/default_numeric_fallback_f64.rs:24:46\n    |\n LL |         let x = if true { (1., 2.) } else { (3., 4.) };\n    |                                              ^^ help: consider adding suffix: `3.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:23:50\n+  --> $DIR/default_numeric_fallback_f64.rs:24:50\n    |\n LL |         let x = if true { (1., 2.) } else { (3., 4.) };\n    |                                                  ^^ help: consider adding suffix: `4.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:24:23\n+  --> $DIR/default_numeric_fallback_f64.rs:25:23\n    |\n LL |         let x = match 1. {\n    |                       ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:25:18\n+  --> $DIR/default_numeric_fallback_f64.rs:26:18\n    |\n LL |             _ => 1.,\n    |                  ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:44:21\n+  --> $DIR/default_numeric_fallback_f64.rs:45:21\n    |\n LL |             let y = 1.;\n    |                     ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:52:21\n+  --> $DIR/default_numeric_fallback_f64.rs:53:21\n    |\n LL |             let y = 1.;\n    |                     ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:58:21\n+  --> $DIR/default_numeric_fallback_f64.rs:59:21\n    |\n LL |             let y = 1.;\n    |                     ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:66:21\n+  --> $DIR/default_numeric_fallback_f64.rs:67:21\n    |\n LL |             let y = 1.;\n    |                     ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:78:9\n+  --> $DIR/default_numeric_fallback_f64.rs:79:9\n    |\n LL |         1.\n    |         ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:84:27\n+  --> $DIR/default_numeric_fallback_f64.rs:85:27\n    |\n LL |         let f = || -> _ { 1. };\n    |                           ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:88:29\n+  --> $DIR/default_numeric_fallback_f64.rs:89:29\n    |\n LL |         let f = || -> f64 { 1. };\n    |                             ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:102:21\n+  --> $DIR/default_numeric_fallback_f64.rs:103:21\n    |\n LL |         generic_arg(1.);\n    |                     ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:105:32\n+  --> $DIR/default_numeric_fallback_f64.rs:106:32\n    |\n LL |         let x: _ = generic_arg(1.);\n    |                                ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:123:28\n+  --> $DIR/default_numeric_fallback_f64.rs:124:28\n    |\n LL |         GenericStruct { x: 1. };\n    |                            ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:126:36\n+  --> $DIR/default_numeric_fallback_f64.rs:127:36\n    |\n LL |         let _ = GenericStruct { x: 1. };\n    |                                    ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:144:24\n+  --> $DIR/default_numeric_fallback_f64.rs:145:24\n    |\n LL |         GenericEnum::X(1.);\n    |                        ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:164:23\n+  --> $DIR/default_numeric_fallback_f64.rs:165:23\n    |\n LL |         s.generic_arg(1.);\n    |                       ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:171:21\n+  --> $DIR/default_numeric_fallback_f64.rs:172:21\n    |\n LL |             let x = 22.;\n    |                     ^^^ help: consider adding suffix: `22.0_f64`"}, {"sha": "63ac4d5aeb6f300072af772a3ed7a58d45dfa81c", "filename": "tests/ui/default_numeric_fallback_i32.fixed", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f9873497ffb37f9ebdb824b42ce34a8caeec355/tests%2Fui%2Fdefault_numeric_fallback_i32.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5f9873497ffb37f9ebdb824b42ce34a8caeec355/tests%2Fui%2Fdefault_numeric_fallback_i32.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_i32.fixed?ref=5f9873497ffb37f9ebdb824b42ce34a8caeec355", "patch": "@@ -9,7 +9,8 @@\n     clippy::no_effect,\n     clippy::unnecessary_operation,\n     clippy::branches_sharing_code,\n-    clippy::let_unit_value\n+    clippy::let_unit_value,\n+    clippy::let_with_type_underscore\n )]\n \n #[macro_use]"}, {"sha": "28e6eceb80e2e0f1904ff9658d995a73b10f9300", "filename": "tests/ui/default_numeric_fallback_i32.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f9873497ffb37f9ebdb824b42ce34a8caeec355/tests%2Fui%2Fdefault_numeric_fallback_i32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9873497ffb37f9ebdb824b42ce34a8caeec355/tests%2Fui%2Fdefault_numeric_fallback_i32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_i32.rs?ref=5f9873497ffb37f9ebdb824b42ce34a8caeec355", "patch": "@@ -9,7 +9,8 @@\n     clippy::no_effect,\n     clippy::unnecessary_operation,\n     clippy::branches_sharing_code,\n-    clippy::let_unit_value\n+    clippy::let_unit_value,\n+    clippy::let_with_type_underscore\n )]\n \n #[macro_use]"}, {"sha": "dd91574d5b34783d461759121b6cb91fd0aa6f37", "filename": "tests/ui/default_numeric_fallback_i32.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/5f9873497ffb37f9ebdb824b42ce34a8caeec355/tests%2Fui%2Fdefault_numeric_fallback_i32.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f9873497ffb37f9ebdb824b42ce34a8caeec355/tests%2Fui%2Fdefault_numeric_fallback_i32.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_i32.stderr?ref=5f9873497ffb37f9ebdb824b42ce34a8caeec355", "patch": "@@ -1,157 +1,157 @@\n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:21:17\n+  --> $DIR/default_numeric_fallback_i32.rs:22:17\n    |\n LL |         let x = 22;\n    |                 ^^ help: consider adding suffix: `22_i32`\n    |\n    = note: `-D clippy::default-numeric-fallback` implied by `-D warnings`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:22:18\n+  --> $DIR/default_numeric_fallback_i32.rs:23:18\n    |\n LL |         let x = [1, 2, 3];\n    |                  ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:22:21\n+  --> $DIR/default_numeric_fallback_i32.rs:23:21\n    |\n LL |         let x = [1, 2, 3];\n    |                     ^ help: consider adding suffix: `2_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:22:24\n+  --> $DIR/default_numeric_fallback_i32.rs:23:24\n    |\n LL |         let x = [1, 2, 3];\n    |                        ^ help: consider adding suffix: `3_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:23:28\n+  --> $DIR/default_numeric_fallback_i32.rs:24:28\n    |\n LL |         let x = if true { (1, 2) } else { (3, 4) };\n    |                            ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:23:31\n+  --> $DIR/default_numeric_fallback_i32.rs:24:31\n    |\n LL |         let x = if true { (1, 2) } else { (3, 4) };\n    |                               ^ help: consider adding suffix: `2_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:23:44\n+  --> $DIR/default_numeric_fallback_i32.rs:24:44\n    |\n LL |         let x = if true { (1, 2) } else { (3, 4) };\n    |                                            ^ help: consider adding suffix: `3_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:23:47\n+  --> $DIR/default_numeric_fallback_i32.rs:24:47\n    |\n LL |         let x = if true { (1, 2) } else { (3, 4) };\n    |                                               ^ help: consider adding suffix: `4_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:24:23\n+  --> $DIR/default_numeric_fallback_i32.rs:25:23\n    |\n LL |         let x = match 1 {\n    |                       ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:25:13\n+  --> $DIR/default_numeric_fallback_i32.rs:26:13\n    |\n LL |             1 => 1,\n    |             ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:25:18\n+  --> $DIR/default_numeric_fallback_i32.rs:26:18\n    |\n LL |             1 => 1,\n    |                  ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:26:18\n+  --> $DIR/default_numeric_fallback_i32.rs:27:18\n    |\n LL |             _ => 2,\n    |                  ^ help: consider adding suffix: `2_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:45:21\n+  --> $DIR/default_numeric_fallback_i32.rs:46:21\n    |\n LL |             let y = 1;\n    |                     ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:53:21\n+  --> $DIR/default_numeric_fallback_i32.rs:54:21\n    |\n LL |             let y = 1;\n    |                     ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:59:21\n+  --> $DIR/default_numeric_fallback_i32.rs:60:21\n    |\n LL |             let y = 1;\n    |                     ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:67:21\n+  --> $DIR/default_numeric_fallback_i32.rs:68:21\n    |\n LL |             let y = 1;\n    |                     ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:79:9\n+  --> $DIR/default_numeric_fallback_i32.rs:80:9\n    |\n LL |         1\n    |         ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:85:27\n+  --> $DIR/default_numeric_fallback_i32.rs:86:27\n    |\n LL |         let f = || -> _ { 1 };\n    |                           ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:89:29\n+  --> $DIR/default_numeric_fallback_i32.rs:90:29\n    |\n LL |         let f = || -> i32 { 1 };\n    |                             ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:103:21\n+  --> $DIR/default_numeric_fallback_i32.rs:104:21\n    |\n LL |         generic_arg(1);\n    |                     ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:106:32\n+  --> $DIR/default_numeric_fallback_i32.rs:107:32\n    |\n LL |         let x: _ = generic_arg(1);\n    |                                ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:124:28\n+  --> $DIR/default_numeric_fallback_i32.rs:125:28\n    |\n LL |         GenericStruct { x: 1 };\n    |                            ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:127:36\n+  --> $DIR/default_numeric_fallback_i32.rs:128:36\n    |\n LL |         let _ = GenericStruct { x: 1 };\n    |                                    ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:145:24\n+  --> $DIR/default_numeric_fallback_i32.rs:146:24\n    |\n LL |         GenericEnum::X(1);\n    |                        ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:165:23\n+  --> $DIR/default_numeric_fallback_i32.rs:166:23\n    |\n LL |         s.generic_arg(1);\n    |                       ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:172:21\n+  --> $DIR/default_numeric_fallback_i32.rs:173:21\n    |\n LL |             let x = 22;\n    |                     ^^ help: consider adding suffix: `22_i32`"}, {"sha": "175718b94c8e6a591f8aa87f571491d367452f5d", "filename": "tests/ui/let_with_type_underscore.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5f9873497ffb37f9ebdb824b42ce34a8caeec355/tests%2Fui%2Flet_with_type_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9873497ffb37f9ebdb824b42ce34a8caeec355/tests%2Fui%2Flet_with_type_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_with_type_underscore.rs?ref=5f9873497ffb37f9ebdb824b42ce34a8caeec355", "patch": "@@ -0,0 +1,19 @@\n+#![allow(unused)]\n+#![warn(clippy::let_with_type_underscore)]\n+#![allow(clippy::let_unit_value)]\n+\n+fn func() -> &'static str {\n+    \"\"\n+}\n+\n+fn main() {\n+    // Will lint\n+    let x: _ = 1;\n+    let _: _ = 2;\n+    let x: _ = func();\n+\n+    let x = 1; // Will not lint, Rust inferres this to an integer before Clippy\n+    let x = func();\n+    let x: Vec<_> = Vec::<u32>::new();\n+    let x: [_; 1] = [1];\n+}"}, {"sha": "16bf83c708fe8522368186d350f96ee425e8e415", "filename": "tests/ui/let_with_type_underscore.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5f9873497ffb37f9ebdb824b42ce34a8caeec355/tests%2Fui%2Flet_with_type_underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f9873497ffb37f9ebdb824b42ce34a8caeec355/tests%2Fui%2Flet_with_type_underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_with_type_underscore.stderr?ref=5f9873497ffb37f9ebdb824b42ce34a8caeec355", "patch": "@@ -0,0 +1,39 @@\n+error: variable declared with type underscore\n+  --> $DIR/let_with_type_underscore.rs:11:5\n+   |\n+LL |     let x: _ = 1;\n+   |     ^^^^^^^^^^^^^\n+   |\n+help: remove the explicit type `_` declaration\n+  --> $DIR/let_with_type_underscore.rs:11:10\n+   |\n+LL |     let x: _ = 1;\n+   |          ^^^\n+   = note: `-D clippy::let-with-type-underscore` implied by `-D warnings`\n+\n+error: variable declared with type underscore\n+  --> $DIR/let_with_type_underscore.rs:12:5\n+   |\n+LL |     let _: _ = 2;\n+   |     ^^^^^^^^^^^^^\n+   |\n+help: remove the explicit type `_` declaration\n+  --> $DIR/let_with_type_underscore.rs:12:10\n+   |\n+LL |     let _: _ = 2;\n+   |          ^^^\n+\n+error: variable declared with type underscore\n+  --> $DIR/let_with_type_underscore.rs:13:5\n+   |\n+LL |     let x: _ = func();\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+help: remove the explicit type `_` declaration\n+  --> $DIR/let_with_type_underscore.rs:13:10\n+   |\n+LL |     let x: _ = func();\n+   |          ^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "6916a284a20a1b7663e7129f9935229b0a0d7202", "filename": "tests/ui/manual_rem_euclid.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f9873497ffb37f9ebdb824b42ce34a8caeec355/tests%2Fui%2Fmanual_rem_euclid.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5f9873497ffb37f9ebdb824b42ce34a8caeec355/tests%2Fui%2Fmanual_rem_euclid.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_rem_euclid.fixed?ref=5f9873497ffb37f9ebdb824b42ce34a8caeec355", "patch": "@@ -2,6 +2,7 @@\n // aux-build:macro_rules.rs\n \n #![warn(clippy::manual_rem_euclid)]\n+#![allow(clippy::let_with_type_underscore)]\n \n #[macro_use]\n extern crate macro_rules;"}, {"sha": "412dbddb4266b3cd465fdfb999a6bd613079c47e", "filename": "tests/ui/manual_rem_euclid.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f9873497ffb37f9ebdb824b42ce34a8caeec355/tests%2Fui%2Fmanual_rem_euclid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9873497ffb37f9ebdb824b42ce34a8caeec355/tests%2Fui%2Fmanual_rem_euclid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_rem_euclid.rs?ref=5f9873497ffb37f9ebdb824b42ce34a8caeec355", "patch": "@@ -2,6 +2,7 @@\n // aux-build:macro_rules.rs\n \n #![warn(clippy::manual_rem_euclid)]\n+#![allow(clippy::let_with_type_underscore)]\n \n #[macro_use]\n extern crate macro_rules;"}, {"sha": "6d06654638b3c94680ed127a00ba447b47c3921d", "filename": "tests/ui/manual_rem_euclid.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5f9873497ffb37f9ebdb824b42ce34a8caeec355/tests%2Fui%2Fmanual_rem_euclid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f9873497ffb37f9ebdb824b42ce34a8caeec355/tests%2Fui%2Fmanual_rem_euclid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_rem_euclid.stderr?ref=5f9873497ffb37f9ebdb824b42ce34a8caeec355", "patch": "@@ -1,37 +1,37 @@\n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:19:18\n+  --> $DIR/manual_rem_euclid.rs:20:18\n    |\n LL |     let _: i32 = ((value % 4) + 4) % 4;\n    |                  ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n    |\n    = note: `-D clippy::manual-rem-euclid` implied by `-D warnings`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:20:18\n+  --> $DIR/manual_rem_euclid.rs:21:18\n    |\n LL |     let _: i32 = (4 + (value % 4)) % 4;\n    |                  ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:21:18\n+  --> $DIR/manual_rem_euclid.rs:22:18\n    |\n LL |     let _: i32 = (value % 4 + 4) % 4;\n    |                  ^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:22:18\n+  --> $DIR/manual_rem_euclid.rs:23:18\n    |\n LL |     let _: i32 = (4 + value % 4) % 4;\n    |                  ^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:23:22\n+  --> $DIR/manual_rem_euclid.rs:24:22\n    |\n LL |     let _: i32 = 1 + (4 + value % 4) % 4;\n    |                      ^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:12:22\n+  --> $DIR/manual_rem_euclid.rs:13:22\n    |\n LL |         let _: i32 = ((value % 4) + 4) % 4;\n    |                      ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n@@ -42,25 +42,25 @@ LL |     internal_rem_euclid!();\n    = note: this error originates in the macro `internal_rem_euclid` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:49:5\n+  --> $DIR/manual_rem_euclid.rs:50:5\n    |\n LL |     ((num % 4) + 4) % 4\n    |     ^^^^^^^^^^^^^^^^^^^ help: consider using: `num.rem_euclid(4)`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:54:5\n+  --> $DIR/manual_rem_euclid.rs:55:5\n    |\n LL |     ((num % 4) + 4) % 4\n    |     ^^^^^^^^^^^^^^^^^^^ help: consider using: `num.rem_euclid(4)`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:66:18\n+  --> $DIR/manual_rem_euclid.rs:67:18\n    |\n LL |     let _: i32 = ((x % 4) + 4) % 4;\n    |                  ^^^^^^^^^^^^^^^^^ help: consider using: `x.rem_euclid(4)`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:79:18\n+  --> $DIR/manual_rem_euclid.rs:80:18\n    |\n LL |     let _: i32 = ((x % 4) + 4) % 4;\n    |                  ^^^^^^^^^^^^^^^^^ help: consider using: `x.rem_euclid(4)`"}]}