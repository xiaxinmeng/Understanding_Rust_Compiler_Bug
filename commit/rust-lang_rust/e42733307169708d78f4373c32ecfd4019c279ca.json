{"sha": "e42733307169708d78f4373c32ecfd4019c279ca", "node_id": "C_kwDOAAsO6NoAKGU0MjczMzMwNzE2OTcwOGQ3OGY0MzczYzMyZWNmZDQwMTljMjc5Y2E", "commit": {"author": {"name": "Hans Kratz", "email": "hans@appfour.com", "date": "2022-02-28T09:34:06Z"}, "committer": {"name": "Hans Kratz", "email": "hans@appfour.com", "date": "2022-03-04T12:33:35Z"}, "message": "remove_dir_all(): try recursing first instead of trying to unlink()\n\nThis only affects the `slow` code path, if there is no `dirent.d_type` or if\nthe type is `DT_UNKNOWN`.\n\nPOSIX specifies that calling `unlink()` or `unlinkat(..., 0)` on a directory can\nsucceed:\n> \"The _path_ argument shall not name a directory unless the process has\n> appropriate privileges and the implementation supports using _unlink()_ on\n> directories.\"\nThis however can cause orphaned directories requiring an fsck e.g. on Illumos\nUFS, so we have to avoid that in the common case. We now just try to recurse\ninto it first and unlink() if we can't open it as a directory.", "tree": {"sha": "c8360b990a926529c6304c3870ba0f058dd98a2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8360b990a926529c6304c3870ba0f058dd98a2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e42733307169708d78f4373c32ecfd4019c279ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e42733307169708d78f4373c32ecfd4019c279ca", "html_url": "https://github.com/rust-lang/rust/commit/e42733307169708d78f4373c32ecfd4019c279ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e42733307169708d78f4373c32ecfd4019c279ca/comments", "author": {"login": "hkratz", "id": 3736990, "node_id": "MDQ6VXNlcjM3MzY5OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3736990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkratz", "html_url": "https://github.com/hkratz", "followers_url": "https://api.github.com/users/hkratz/followers", "following_url": "https://api.github.com/users/hkratz/following{/other_user}", "gists_url": "https://api.github.com/users/hkratz/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkratz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkratz/subscriptions", "organizations_url": "https://api.github.com/users/hkratz/orgs", "repos_url": "https://api.github.com/users/hkratz/repos", "events_url": "https://api.github.com/users/hkratz/events{/privacy}", "received_events_url": "https://api.github.com/users/hkratz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hkratz", "id": 3736990, "node_id": "MDQ6VXNlcjM3MzY5OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3736990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkratz", "html_url": "https://github.com/hkratz", "followers_url": "https://api.github.com/users/hkratz/followers", "following_url": "https://api.github.com/users/hkratz/following{/other_user}", "gists_url": "https://api.github.com/users/hkratz/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkratz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkratz/subscriptions", "organizations_url": "https://api.github.com/users/hkratz/orgs", "repos_url": "https://api.github.com/users/hkratz/repos", "events_url": "https://api.github.com/users/hkratz/events{/privacy}", "received_events_url": "https://api.github.com/users/hkratz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97cde9fe08804a3a5208d77f6870ad7d43f8c9c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/97cde9fe08804a3a5208d77f6870ad7d43f8c9c3", "html_url": "https://github.com/rust-lang/rust/commit/97cde9fe08804a3a5208d77f6870ad7d43f8c9c3"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "8fc0b337761d767ea366ba809147b3f8d442a7b7", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e42733307169708d78f4373c32ecfd4019c279ca/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e42733307169708d78f4373c32ecfd4019c279ca/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=e42733307169708d78f4373c32ecfd4019c279ca", "patch": "@@ -1683,8 +1683,21 @@ mod remove_dir_impl {\n     fn remove_dir_all_recursive(parent_fd: Option<RawFd>, p: &Path) -> io::Result<()> {\n         let pcstr = cstr(p)?;\n \n-        // entry is expected to be a directory, open as such\n-        let fd = openat_nofollow_dironly(parent_fd, &pcstr)?;\n+        // try opening as directory\n+        let fd = match openat_nofollow_dironly(parent_fd, &pcstr) {\n+            Err(err) if err.raw_os_error() == Some(libc::ENOTDIR) => {\n+                // not a directory - don't traverse further\n+                return match parent_fd {\n+                    // unlink...\n+                    Some(parent_fd) => {\n+                        cvt(unsafe { unlinkat(parent_fd, pcstr.as_ptr(), 0) }).map(drop)\n+                    }\n+                    // ...unless this was supposed to be the deletion root directory\n+                    None => Err(err),\n+                };\n+            }\n+            result => result?,\n+        };\n \n         // open the directory passing ownership of the fd\n         let (dir, fd) = fdreaddir(fd)?;\n@@ -1697,19 +1710,13 @@ mod remove_dir_impl {\n                 Some(false) => {\n                     cvt(unsafe { unlinkat(fd, child.name_cstr().as_ptr(), 0) })?;\n                 }\n-                None => match cvt(unsafe { unlinkat(fd, child.name_cstr().as_ptr(), 0) }) {\n-                    // type unknown - try to unlink\n-                    Err(err)\n-                        if err.raw_os_error() == Some(libc::EISDIR)\n-                            || err.raw_os_error() == Some(libc::EPERM) =>\n-                    {\n-                        // if the file is a directory unlink fails with EISDIR on Linux and EPERM everyhwere else\n-                        remove_dir_all_recursive(Some(fd), Path::new(&child.file_name()))?;\n-                    }\n-                    result => {\n-                        result?;\n-                    }\n-                },\n+                None => {\n+                    // POSIX specifies that calling unlink()/unlinkat(..., 0) on a directory can succeed\n+                    // if the process has the appropriate privileges. This however can causing orphaned\n+                    // directories requiring an fsck e.g. on Solaris and Illumos. So we try recursing\n+                    // into it first instead of trying to unlink() it.\n+                    remove_dir_all_recursive(Some(fd), Path::new(&child.file_name()))?;\n+                }\n             }\n         }\n "}]}