{"sha": "d7eebd9706ebc48fc4c6e09249dc45baa9e1dc61", "node_id": "C_kwDOAAsO6NoAKGQ3ZWViZDk3MDZlYmM0OGZjNGM2ZTA5MjQ5ZGM0NWJhYTllMWRjNjE", "commit": {"author": {"name": "Hongxu Xu", "email": "xuhongxu96@hotmail.com", "date": "2022-06-14T13:41:09Z"}, "committer": {"name": "Hongxu Xu", "email": "xuhongxu96@hotmail.com", "date": "2022-06-14T13:41:09Z"}, "message": "add test cases to complete fn generated by macro in pub trait", "tree": {"sha": "28713759ca1ef6bf898085faf94b6fd83a2a548f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28713759ca1ef6bf898085faf94b6fd83a2a548f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7eebd9706ebc48fc4c6e09249dc45baa9e1dc61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7eebd9706ebc48fc4c6e09249dc45baa9e1dc61", "html_url": "https://github.com/rust-lang/rust/commit/d7eebd9706ebc48fc4c6e09249dc45baa9e1dc61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7eebd9706ebc48fc4c6e09249dc45baa9e1dc61/comments", "author": {"login": "xuhongxu96", "id": 2201482, "node_id": "MDQ6VXNlcjIyMDE0ODI=", "avatar_url": "https://avatars.githubusercontent.com/u/2201482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xuhongxu96", "html_url": "https://github.com/xuhongxu96", "followers_url": "https://api.github.com/users/xuhongxu96/followers", "following_url": "https://api.github.com/users/xuhongxu96/following{/other_user}", "gists_url": "https://api.github.com/users/xuhongxu96/gists{/gist_id}", "starred_url": "https://api.github.com/users/xuhongxu96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xuhongxu96/subscriptions", "organizations_url": "https://api.github.com/users/xuhongxu96/orgs", "repos_url": "https://api.github.com/users/xuhongxu96/repos", "events_url": "https://api.github.com/users/xuhongxu96/events{/privacy}", "received_events_url": "https://api.github.com/users/xuhongxu96/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xuhongxu96", "id": 2201482, "node_id": "MDQ6VXNlcjIyMDE0ODI=", "avatar_url": "https://avatars.githubusercontent.com/u/2201482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xuhongxu96", "html_url": "https://github.com/xuhongxu96", "followers_url": "https://api.github.com/users/xuhongxu96/followers", "following_url": "https://api.github.com/users/xuhongxu96/following{/other_user}", "gists_url": "https://api.github.com/users/xuhongxu96/gists{/gist_id}", "starred_url": "https://api.github.com/users/xuhongxu96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xuhongxu96/subscriptions", "organizations_url": "https://api.github.com/users/xuhongxu96/orgs", "repos_url": "https://api.github.com/users/xuhongxu96/repos", "events_url": "https://api.github.com/users/xuhongxu96/events{/privacy}", "received_events_url": "https://api.github.com/users/xuhongxu96/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "366bd7242ed00c65f293497a26eb81c7510ac682", "url": "https://api.github.com/repos/rust-lang/rust/commits/366bd7242ed00c65f293497a26eb81c7510ac682", "html_url": "https://github.com/rust-lang/rust/commit/366bd7242ed00c65f293497a26eb81c7510ac682"}], "stats": {"total": 111, "additions": 110, "deletions": 1}, "files": [{"sha": "8231336237ebd2183d016132a244f5672321329b", "filename": "crates/ide-completion/src/tests/special.rs", "status": "modified", "additions": 110, "deletions": 1, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/d7eebd9706ebc48fc4c6e09249dc45baa9e1dc61/crates%2Fide-completion%2Fsrc%2Ftests%2Fspecial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7eebd9706ebc48fc4c6e09249dc45baa9e1dc61/crates%2Fide-completion%2Fsrc%2Ftests%2Fspecial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fspecial.rs?ref=d7eebd9706ebc48fc4c6e09249dc45baa9e1dc61", "patch": "@@ -2,13 +2,21 @@\n \n use expect_test::{expect, Expect};\n \n-use crate::tests::{check_edit, completion_list_no_kw};\n+use crate::{\n+    tests::{check_edit, completion_list_no_kw, completion_list_with_config, TEST_CONFIG},\n+    CompletionConfig,\n+};\n \n fn check(ra_fixture: &str, expect: Expect) {\n     let actual = completion_list_no_kw(ra_fixture);\n     expect.assert_eq(&actual)\n }\n \n+fn check_with_config(config: CompletionConfig, ra_fixture: &str, expect: Expect) {\n+    let actual = completion_list_with_config(config, ra_fixture, true, None);\n+    expect.assert_eq(&actual)\n+}\n+\n #[test]\n fn completes_if_prefix_is_keyword() {\n     check_edit(\n@@ -636,3 +644,104 @@ fn bar() -> Bar {\n             \"#]],\n     )\n }\n+\n+#[test]\n+fn completes_fn_in_pub_trait_generated_by_macro() {\n+    let mut config = TEST_CONFIG.clone();\n+    config.enable_private_editable = false;\n+\n+    check_with_config(\n+        config,\n+        r#\"\n+mod other_mod {\n+    macro_rules! make_method {\n+        ($name:ident) => {\n+            fn $name(&self) {}\n+        };\n+    }\n+\n+    pub trait MyTrait {\n+        make_method! { by_macro }\n+        fn not_by_macro(&self) {}\n+    }\n+\n+    pub struct Foo {}\n+\n+    impl MyTrait for Foo {}\n+}\n+\n+fn main() {\n+    use other_mod::{Foo, MyTrait};\n+    let f = Foo {};\n+    f.$0\n+}\n+\"#,\n+        expect![[r#\"\n+            me by_macro() (as MyTrait) fn(&self)\n+            me not_by_macro() (as MyTrait) fn(&self)\n+            sn box                    Box::new(expr)\n+            sn call                   function(expr)\n+            sn dbg                    dbg!(expr)\n+            sn dbgr                   dbg!(&expr)\n+            sn let                    let\n+            sn letm                   let mut\n+            sn match                  match expr {}\n+            sn ref                    &expr\n+            sn refm                   &mut expr\n+        \"#]],\n+    )\n+}\n+\n+\n+#[test]\n+fn completes_fn_in_pub_trait_generated_by_recursive_macro() {\n+    let mut config = TEST_CONFIG.clone();\n+    config.enable_private_editable = false;\n+\n+    check_with_config(\n+        config,\n+        r#\"\n+mod other_mod {\n+    macro_rules! make_method {\n+        ($name:ident) => {\n+            fn $name(&self) {}\n+        };\n+    }\n+\n+    macro_rules! make_trait {\n+        () => {\n+            pub trait MyTrait {\n+                make_method! { by_macro }\n+                fn not_by_macro(&self) {}\n+            }\n+        }\n+    }\n+\n+    make_trait!();\n+\n+    pub struct Foo {}\n+\n+    impl MyTrait for Foo {}\n+}\n+\n+fn main() {\n+    use other_mod::{Foo, MyTrait};\n+    let f = Foo {};\n+    f.$0\n+}\n+\"#,\n+        expect![[r#\"\n+            me by_macro() (as MyTrait) fn(&self)\n+            me not_by_macro() (as MyTrait) fn(&self)\n+            sn box                    Box::new(expr)\n+            sn call                   function(expr)\n+            sn dbg                    dbg!(expr)\n+            sn dbgr                   dbg!(&expr)\n+            sn let                    let\n+            sn letm                   let mut\n+            sn match                  match expr {}\n+            sn ref                    &expr\n+            sn refm                   &mut expr\n+        \"#]],\n+    )\n+}\n\\ No newline at end of file"}]}