{"sha": "18fef6bbd73d8d2dc721df458cb3b2a22e6b79c9", "node_id": "C_kwDOAAsO6NoAKDE4ZmVmNmJiZDczZDhkMmRjNzIxZGY0NThjYjNiMmEyMmU2Yjc5Yzk", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-30T00:16:34Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-07-01T05:16:17Z"}, "message": "Remove lifetime support in deriving code.\n\nIt's unused.", "tree": {"sha": "a50f39adff5e4322dae060dd8103d738dfcf40ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a50f39adff5e4322dae060dd8103d738dfcf40ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18fef6bbd73d8d2dc721df458cb3b2a22e6b79c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18fef6bbd73d8d2dc721df458cb3b2a22e6b79c9", "html_url": "https://github.com/rust-lang/rust/commit/18fef6bbd73d8d2dc721df458cb3b2a22e6b79c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18fef6bbd73d8d2dc721df458cb3b2a22e6b79c9/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b94246693ac3ad95ee942ef77aed8e762474ddf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b94246693ac3ad95ee942ef77aed8e762474ddf7", "html_url": "https://github.com/rust-lang/rust/commit/b94246693ac3ad95ee942ef77aed8e762474ddf7"}], "stats": {"total": 43, "additions": 11, "deletions": 32}, "files": [{"sha": "dfc3e8c6ef2b7c0b3e31f8adfc044ce2b864cf00", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/18fef6bbd73d8d2dc721df458cb3b2a22e6b79c9/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18fef6bbd73d8d2dc721df458cb3b2a22e6b79c9/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=18fef6bbd73d8d2dc721df458cb3b2a22e6b79c9", "patch": "@@ -18,7 +18,6 @@ pub fn expand_deriving_partial_ord(\n     let ordering_ty = Literal(path_std!(cmp::Ordering));\n     let ret_ty = Literal(Path::new_(\n         pathvec_std!(option::Option),\n-        None,\n         vec![Box::new(ordering_ty)],\n         PathKind::Std,\n     ));"}, {"sha": "4bd8340e099dfe84363c0499fff44107bca2ddf9", "filename": "compiler/rustc_builtin_macros/src/deriving/decodable.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/18fef6bbd73d8d2dc721df458cb3b2a22e6b79c9/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18fef6bbd73d8d2dc721df458cb3b2a22e6b79c9/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs?ref=18fef6bbd73d8d2dc721df458cb3b2a22e6b79c9", "patch": "@@ -23,7 +23,7 @@ pub fn expand_deriving_rustc_decodable(\n     let trait_def = TraitDef {\n         span,\n         attributes: Vec::new(),\n-        path: Path::new_(vec![krate, sym::Decodable], None, vec![], PathKind::Global),\n+        path: Path::new_(vec![krate, sym::Decodable], vec![], PathKind::Global),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n         supports_unions: false,\n@@ -32,19 +32,17 @@ pub fn expand_deriving_rustc_decodable(\n             generics: Bounds {\n                 bounds: vec![(\n                     typaram,\n-                    vec![Path::new_(vec![krate, sym::Decoder], None, vec![], PathKind::Global)],\n+                    vec![Path::new_(vec![krate, sym::Decoder], vec![], PathKind::Global)],\n                 )],\n             },\n             explicit_self: false,\n             args: vec![(Ref(Box::new(Literal(Path::new_local(typaram))), Mutability::Mut), sym::d)],\n             ret_ty: Literal(Path::new_(\n                 pathvec_std!(result::Result),\n-                None,\n                 vec![\n                     Box::new(Self_),\n                     Box::new(Literal(Path::new_(\n                         vec![typaram, sym::Error],\n-                        None,\n                         vec![],\n                         PathKind::Local,\n                     ))),"}, {"sha": "829e258c36b42399f8af6efb53e86422b308a550", "filename": "compiler/rustc_builtin_macros/src/deriving/encodable.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/18fef6bbd73d8d2dc721df458cb3b2a22e6b79c9/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18fef6bbd73d8d2dc721df458cb3b2a22e6b79c9/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs?ref=18fef6bbd73d8d2dc721df458cb3b2a22e6b79c9", "patch": "@@ -108,7 +108,7 @@ pub fn expand_deriving_rustc_encodable(\n     let trait_def = TraitDef {\n         span,\n         attributes: Vec::new(),\n-        path: Path::new_(vec![krate, sym::Encodable], None, vec![], PathKind::Global),\n+        path: Path::new_(vec![krate, sym::Encodable], vec![], PathKind::Global),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n         supports_unions: false,\n@@ -117,19 +117,17 @@ pub fn expand_deriving_rustc_encodable(\n             generics: Bounds {\n                 bounds: vec![(\n                     typaram,\n-                    vec![Path::new_(vec![krate, sym::Encoder], None, vec![], PathKind::Global)],\n+                    vec![Path::new_(vec![krate, sym::Encoder], vec![], PathKind::Global)],\n                 )],\n             },\n             explicit_self: true,\n             args: vec![(Ref(Box::new(Literal(Path::new_local(typaram))), Mutability::Mut), sym::s)],\n             ret_ty: Literal(Path::new_(\n                 pathvec_std!(result::Result),\n-                None,\n                 vec![\n                     Box::new(Tuple(Vec::new())),\n                     Box::new(Literal(Path::new_(\n                         vec![typaram, sym::Error],\n-                        None,\n                         vec![],\n                         PathKind::Local,\n                     ))),"}, {"sha": "6b2f31c64e14dc94d64189a41d725bceda5eaff5", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/ty.rs", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/18fef6bbd73d8d2dc721df458cb3b2a22e6b79c9/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18fef6bbd73d8d2dc721df458cb3b2a22e6b79c9/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs?ref=18fef6bbd73d8d2dc721df458cb3b2a22e6b79c9", "patch": "@@ -11,11 +11,10 @@ use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_span::Span;\n \n /// A path, e.g., `::std::option::Option::<i32>` (global). Has support\n-/// for type parameters and a lifetime.\n+/// for type parameters.\n #[derive(Clone)]\n pub struct Path {\n     path: Vec<Symbol>,\n-    lifetime: Option<Ident>,\n     params: Vec<Box<Ty>>,\n     kind: PathKind,\n }\n@@ -29,18 +28,13 @@ pub enum PathKind {\n \n impl Path {\n     pub fn new(path: Vec<Symbol>) -> Path {\n-        Path::new_(path, None, Vec::new(), PathKind::Std)\n+        Path::new_(path, Vec::new(), PathKind::Std)\n     }\n     pub fn new_local(path: Symbol) -> Path {\n-        Path::new_(vec![path], None, Vec::new(), PathKind::Local)\n+        Path::new_(vec![path], Vec::new(), PathKind::Local)\n     }\n-    pub fn new_(\n-        path: Vec<Symbol>,\n-        lifetime: Option<Ident>,\n-        params: Vec<Box<Ty>>,\n-        kind: PathKind,\n-    ) -> Path {\n-        Path { path, lifetime, params, kind }\n+    pub fn new_(path: Vec<Symbol>, params: Vec<Box<Ty>>, kind: PathKind) -> Path {\n+        Path { path, params, kind }\n     }\n \n     pub fn to_ty(\n@@ -60,10 +54,8 @@ impl Path {\n         self_generics: &Generics,\n     ) -> ast::Path {\n         let mut idents = self.path.iter().map(|s| Ident::new(*s, span)).collect();\n-        let lt = mk_lifetimes(cx, span, &self.lifetime);\n         let tys = self.params.iter().map(|t| t.to_ty(cx, span, self_ty, self_generics));\n-        let params =\n-            lt.into_iter().map(GenericArg::Lifetime).chain(tys.map(GenericArg::Type)).collect();\n+        let params = tys.map(GenericArg::Type).collect();\n \n         match self.kind {\n             PathKind::Global => cx.path_all(span, true, idents, params),\n@@ -98,14 +90,6 @@ pub fn nil_ty() -> Ty {\n     Tuple(Vec::new())\n }\n \n-fn mk_lifetime(cx: &ExtCtxt<'_>, span: Span, lt: &Option<Ident>) -> Option<ast::Lifetime> {\n-    lt.map(|ident| cx.lifetime(span, ident))\n-}\n-\n-fn mk_lifetimes(cx: &ExtCtxt<'_>, span: Span, lt: &Option<Ident>) -> Vec<ast::Lifetime> {\n-    mk_lifetime(cx, span, lt).into_iter().collect()\n-}\n-\n impl Ty {\n     pub fn to_ty(\n         &self,"}, {"sha": "906eef32f798d1b33c9975fd1932c95792b0f62f", "filename": "compiler/rustc_builtin_macros/src/deriving/hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18fef6bbd73d8d2dc721df458cb3b2a22e6b79c9/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18fef6bbd73d8d2dc721df458cb3b2a22e6b79c9/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs?ref=18fef6bbd73d8d2dc721df458cb3b2a22e6b79c9", "patch": "@@ -15,7 +15,7 @@ pub fn expand_deriving_hash(\n     item: &Annotatable,\n     push: &mut dyn FnMut(Annotatable),\n ) {\n-    let path = Path::new_(pathvec_std!(hash::Hash), None, vec![], PathKind::Std);\n+    let path = Path::new_(pathvec_std!(hash::Hash), vec![], PathKind::Std);\n \n     let typaram = sym::__H;\n "}]}