{"sha": "959bd48887d431a0f30090af18ef40d8c5606d77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1OWJkNDg4ODdkNDMxYTBmMzAwOTBhZjE4ZWY0MGQ4YzU2MDZkNzc=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-05-17T23:34:34Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-05-18T06:51:39Z"}, "message": "Add some more `rfold` implementations.", "tree": {"sha": "7a05666990075e52f6389696bc7be72ab3a159e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a05666990075e52f6389696bc7be72ab3a159e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/959bd48887d431a0f30090af18ef40d8c5606d77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/959bd48887d431a0f30090af18ef40d8c5606d77", "html_url": "https://github.com/rust-lang/rust/commit/959bd48887d431a0f30090af18ef40d8c5606d77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/959bd48887d431a0f30090af18ef40d8c5606d77/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2abf8f9c30a979ca756ed84e085e3507c3227e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2abf8f9c30a979ca756ed84e085e3507c3227e9", "html_url": "https://github.com/rust-lang/rust/commit/c2abf8f9c30a979ca756ed84e085e3507c3227e9"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "195847ee98dc4755944db419326f636e743961da", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/959bd48887d431a0f30090af18ef40d8c5606d77/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959bd48887d431a0f30090af18ef40d8c5606d77/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=959bd48887d431a0f30090af18ef40d8c5606d77", "patch": "@@ -724,6 +724,29 @@ where\n             }\n         }\n     }\n+\n+    #[inline]\n+    fn rfold<Acc, F>(mut self, init: Acc, mut f: F) -> Acc\n+    where\n+        Self: Sized,\n+        F: FnMut(Acc, Self::Item) -> Acc,\n+    {\n+        #[inline]\n+        fn nth_back<I: DoubleEndedIterator>(\n+            iter: &mut I,\n+            step: usize,\n+        ) -> impl FnMut() -> Option<I::Item> + '_ {\n+            move || iter.nth_back(step)\n+        }\n+\n+        match self.next_back() {\n+            None => init,\n+            Some(x) => {\n+                let acc = f(init, x);\n+                from_fn(nth_back(&mut self.iter, self.step)).fold(acc, f)\n+            }\n+        }\n+    }\n }\n \n // StepBy can only make the iterator shorter, so the len will still fit.\n@@ -2056,6 +2079,18 @@ where\n             self.iter.try_rfold(init, check(n, fold)).into_try()\n         }\n     }\n+\n+    fn rfold<Acc, Fold>(mut self, init: Acc, fold: Fold) -> Acc\n+    where\n+        Fold: FnMut(Acc, Self::Item) -> Acc,\n+    {\n+        #[inline]\n+        fn ok<Acc, T>(mut f: impl FnMut(Acc, T) -> Acc) -> impl FnMut(Acc, T) -> Result<Acc, !> {\n+            move |acc, x| Ok(f(acc, x))\n+        }\n+\n+        self.try_rfold(init, ok(fold)).unwrap()\n+    }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n@@ -2220,6 +2255,24 @@ where\n             }\n         }\n     }\n+\n+    #[inline]\n+    fn rfold<Acc, Fold>(mut self, init: Acc, fold: Fold) -> Acc\n+    where\n+        Self: Sized,\n+        Fold: FnMut(Acc, Self::Item) -> Acc,\n+    {\n+        if self.n == 0 {\n+            init\n+        } else {\n+            let len = self.iter.len();\n+            if len > self.n && self.iter.nth_back(len - self.n - 1).is_none() {\n+                init\n+            } else {\n+                self.iter.rfold(init, fold)\n+            }\n+        }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "388a5548a31a5e0f0adeb8440822619d6d36faa5", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/959bd48887d431a0f30090af18ef40d8c5606d77/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959bd48887d431a0f30090af18ef40d8c5606d77/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=959bd48887d431a0f30090af18ef40d8c5606d77", "patch": "@@ -671,6 +671,7 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n \n         self.try_fold(init, ok(f)).unwrap()\n     }\n+\n     #[inline]\n     fn last(mut self) -> Option<A> {\n         self.next_back()\n@@ -759,6 +760,20 @@ impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> {\n \n         Try::from_ok(accum)\n     }\n+\n+    #[inline]\n+    fn rfold<B, F>(mut self, init: B, f: F) -> B\n+    where\n+        Self: Sized,\n+        F: FnMut(B, Self::Item) -> B,\n+    {\n+        #[inline]\n+        fn ok<B, T>(mut f: impl FnMut(B, T) -> B) -> impl FnMut(B, T) -> Result<B, !> {\n+            move |acc, x| Ok(f(acc, x))\n+        }\n+\n+        self.try_rfold(init, ok(f)).unwrap()\n+    }\n }\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]"}]}