{"sha": "2be7a31d11691103c15b50b06370a8c8b7b26454", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiZTdhMzFkMTE2OTExMDNjMTViNTBiMDYzNzBhOGM4YjdiMjY0NTQ=", "commit": {"author": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2017-12-05T01:01:31Z"}, "committer": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2017-12-11T18:38:47Z"}, "message": "Add more Duration methods for consistency.", "tree": {"sha": "5eb03e36b5cb373a9e118f553681d68cd0a8b240", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5eb03e36b5cb373a9e118f553681d68cd0a8b240"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2be7a31d11691103c15b50b06370a8c8b7b26454", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2be7a31d11691103c15b50b06370a8c8b7b26454", "html_url": "https://github.com/rust-lang/rust/commit/2be7a31d11691103c15b50b06370a8c8b7b26454", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2be7a31d11691103c15b50b06370a8c8b7b26454/comments", "author": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33245fe682874fd138bb6d49b9e5d72e5b915800", "url": "https://api.github.com/repos/rust-lang/rust/commits/33245fe682874fd138bb6d49b9e5d72e5b915800", "html_url": "https://github.com/rust-lang/rust/commit/33245fe682874fd138bb6d49b9e5d72e5b915800"}], "stats": {"total": 63, "additions": 62, "deletions": 1}, "files": [{"sha": "a74e8a21c42a6970d41bac48d06822042cde9fd5", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 62, "deletions": 1, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/2be7a31d11691103c15b50b06370a8c8b7b26454/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2be7a31d11691103c15b50b06370a8c8b7b26454/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=2be7a31d11691103c15b50b06370a8c8b7b26454", "patch": "@@ -108,7 +108,7 @@ impl Duration {\n     /// let duration = Duration::from_millis(2569);\n     ///\n     /// assert_eq!(2, duration.as_secs());\n-    /// assert_eq!(569000000, duration.subsec_nanos());\n+    /// assert_eq!(569_000_000, duration.subsec_nanos());\n     /// ```\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[inline]\n@@ -139,6 +139,27 @@ impl Duration {\n         Duration { secs: secs, nanos: nanos }\n     }\n \n+    /// Creates a new `Duration` from the specified number of nanoseconds.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(duration_extras)]\n+    /// use std::time::Duration;\n+    ///\n+    /// let duration = Duration::from_nanos(1_000_000_123);\n+    ///\n+    /// assert_eq!(1, duration.as_secs());\n+    /// assert_eq!(123, duration.subsec_nanos());\n+    /// ```\n+    #[unstable(feature = \"duration_extras\", issue = \"46507\")]\n+    #[inline]\n+    pub fn from_nanos(nanos: u64) -> Duration {\n+        let secs = nanos / (NANOS_PER_SEC as u64);\n+        let nanos = (nanos % (NANOS_PER_SEC as u64)) as u32;\n+        Duration { secs: secs, nanos: nanos }\n+    }\n+\n     /// Returns the number of _whole_ seconds contained by this `Duration`.\n     ///\n     /// The returned value does not include the fractional (nanosecond) part of the\n@@ -171,6 +192,46 @@ impl Duration {\n     #[inline]\n     pub fn as_secs(&self) -> u64 { self.secs }\n \n+    /// Returns the fractional part of this `Duration`, in milliseconds.\n+    ///\n+    /// This method does **not** return the length of the duration when\n+    /// represented by milliseconds. The returned number always represents a\n+    /// fractional portion of a second (i.e. it is less than one thousand).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(duration_extras)]\n+    /// use std::time::Duration;\n+    ///\n+    /// let duration = Duration::from_millis(5432);\n+    /// assert_eq!(duration.as_secs(), 5);\n+    /// assert_eq!(duration.subsec_nanos(), 432_000_000);\n+    /// ```\n+    #[unstable(feature = \"duration_extras\", issue = \"46507\")]\n+    #[inline]\n+    pub fn subsec_millis(&self) -> u32 { self.nanos / NANOS_PER_MILLI }\n+\n+    /// Returns the fractional part of this `Duration`, in microseconds.\n+    ///\n+    /// This method does **not** return the length of the duration when\n+    /// represented by microseconds. The returned number always represents a\n+    /// fractional portion of a second (i.e. it is less than one million).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(duration_extras, duration_from_micros)]\n+    /// use std::time::Duration;\n+    ///\n+    /// let duration = Duration::from_micros(1_234_567);\n+    /// assert_eq!(duration.as_secs(), 1);\n+    /// assert_eq!(duration.subsec_nanos(), 234_567_000);\n+    /// ```\n+    #[unstable(feature = \"duration_extras\", issue = \"46507\")]\n+    #[inline]\n+    pub fn subsec_micros(&self) -> u32 { self.nanos / NANOS_PER_MICRO }\n+\n     /// Returns the fractional part of this `Duration`, in nanoseconds.\n     ///\n     /// This method does **not** return the length of the duration when"}]}