{"sha": "5827fbadf6feaa3da42d7223ac9f10148c827a89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MjdmYmFkZjZmZWFhM2RhNDJkNzIyM2FjOWYxMDE0OGM4MjdhODk=", "commit": {"author": {"name": "Vishnunarayan K I", "email": "appukuttancr@gmail.com", "date": "2020-11-03T11:44:51Z"}, "committer": {"name": "Vishnunarayan K I", "email": "appukuttancr@gmail.com", "date": "2020-11-03T11:44:51Z"}, "message": "review comments", "tree": {"sha": "73ca0f4a6e214a8293fdbbedc4a6ba48b64a327c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73ca0f4a6e214a8293fdbbedc4a6ba48b64a327c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5827fbadf6feaa3da42d7223ac9f10148c827a89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5827fbadf6feaa3da42d7223ac9f10148c827a89", "html_url": "https://github.com/rust-lang/rust/commit/5827fbadf6feaa3da42d7223ac9f10148c827a89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5827fbadf6feaa3da42d7223ac9f10148c827a89/comments", "author": {"login": "vn-ki", "id": 31964688, "node_id": "MDQ6VXNlcjMxOTY0Njg4", "avatar_url": "https://avatars.githubusercontent.com/u/31964688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vn-ki", "html_url": "https://github.com/vn-ki", "followers_url": "https://api.github.com/users/vn-ki/followers", "following_url": "https://api.github.com/users/vn-ki/following{/other_user}", "gists_url": "https://api.github.com/users/vn-ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/vn-ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vn-ki/subscriptions", "organizations_url": "https://api.github.com/users/vn-ki/orgs", "repos_url": "https://api.github.com/users/vn-ki/repos", "events_url": "https://api.github.com/users/vn-ki/events{/privacy}", "received_events_url": "https://api.github.com/users/vn-ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vn-ki", "id": 31964688, "node_id": "MDQ6VXNlcjMxOTY0Njg4", "avatar_url": "https://avatars.githubusercontent.com/u/31964688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vn-ki", "html_url": "https://github.com/vn-ki", "followers_url": "https://api.github.com/users/vn-ki/followers", "following_url": "https://api.github.com/users/vn-ki/following{/other_user}", "gists_url": "https://api.github.com/users/vn-ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/vn-ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vn-ki/subscriptions", "organizations_url": "https://api.github.com/users/vn-ki/orgs", "repos_url": "https://api.github.com/users/vn-ki/repos", "events_url": "https://api.github.com/users/vn-ki/events{/privacy}", "received_events_url": "https://api.github.com/users/vn-ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f44f96d61c11e439e9d4092258e3322e126418bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/f44f96d61c11e439e9d4092258e3322e126418bf", "html_url": "https://github.com/rust-lang/rust/commit/f44f96d61c11e439e9d4092258e3322e126418bf"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "29fc23c324f44898501f7589f2e5ee1a3d189b17", "filename": "compiler/rustc_mir_build/src/build/matches/simplify.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5827fbadf6feaa3da42d7223ac9f10148c827a89/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5827fbadf6feaa3da42d7223ac9f10148c827a89/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs?ref=5827fbadf6feaa3da42d7223ac9f10148c827a89", "patch": "@@ -44,10 +44,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         candidate: &mut Candidate<'pat, 'tcx>,\n     ) -> bool {\n         // repeatedly simplify match pairs until fixed point is reached\n-        debug!(\"simplify_candidate(candidate={:?})\", candidate);\n+        debug!(?candidate, \"simplify_candidate\");\n \n-        // exisiting_bindings and new_bindings exists to keep the semantics in order\n-        // reversing the binding order for bindings after `@` change binding order in places\n+        // existing_bindings and new_bindings exists to keep the semantics in order.\n+        // Reversing the binding order for bindings after `@` changes the binding order in places\n         // it shouldn't be changed, for example `let (Some(a), Some(b)) = (x, y)`\n         //\n         // To avoid this, the binding occurs in the following manner:\n@@ -64,16 +64,16 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         // binding in iter 2: [6, 7]\n         //\n         // final binding: [1, 2, 3, 6, 7, 4, 5]\n-        let mut exisiting_bindings = mem::take(&mut candidate.bindings);\n+        let mut existing_bindings = mem::take(&mut candidate.bindings);\n         let mut new_bindings = Vec::new();\n         loop {\n             let match_pairs = mem::take(&mut candidate.match_pairs);\n \n             if let [MatchPair { pattern: Pat { kind: box PatKind::Or { pats }, .. }, place }] =\n                 *match_pairs\n             {\n-                exisiting_bindings.extend_from_slice(&new_bindings);\n-                mem::swap(&mut candidate.bindings, &mut exisiting_bindings);\n+                existing_bindings.extend_from_slice(&new_bindings);\n+                mem::swap(&mut candidate.bindings, &mut existing_bindings);\n                 candidate.subcandidates = self.create_or_subcandidates(candidate, place, pats);\n                 return true;\n             }\n@@ -89,7 +89,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     }\n                 }\n             }\n-            // issue #69971: the binding order should be right to left if there are more\n+            // Avoid issue #69971: the binding order should be right to left if there are more\n             // bindings after `@` to please the borrow checker\n             // Ex\n             // struct NonCopyStruct {\n@@ -107,15 +107,15 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             candidate.bindings.clear();\n \n             if !changed {\n-                exisiting_bindings.extend_from_slice(&new_bindings);\n-                mem::swap(&mut candidate.bindings, &mut exisiting_bindings);\n+                existing_bindings.extend_from_slice(&new_bindings);\n+                mem::swap(&mut candidate.bindings, &mut existing_bindings);\n                 // Move or-patterns to the end, because they can result in us\n                 // creating additional candidates, so we want to test them as\n                 // late as possible.\n                 candidate\n                     .match_pairs\n                     .sort_by_key(|pair| matches!(*pair.pattern.kind, PatKind::Or { .. }));\n-                debug!(\"simplify_candidate: simplifed {:?}\", candidate);\n+                debug!(simplified = ?candidate, \"simplify_candidate\");\n                 return false; // if we were not able to simplify any, done.\n             }\n         }"}, {"sha": "f731aa2e96327415c53d730954aeb738925076e8", "filename": "src/test/ui/pattern/bindings-after-at/copy-and-move-mixed.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5827fbadf6feaa3da42d7223ac9f10148c827a89/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5827fbadf6feaa3da42d7223ac9f10148c827a89/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.rs?ref=5827fbadf6feaa3da42d7223ac9f10148c827a89", "patch": "@@ -8,6 +8,9 @@ struct C;\n struct NC<A, B>(A, B);\n \n fn main() {\n+    // this compiles\n+    let a @ NC(b, c) = NC(C, C);\n+\n     let a @ NC(b, c @ NC(d, e)) = NC(C, NC(C, C));\n     //~^ ERROR use of partially moved value\n }"}, {"sha": "183a37176ec6c070ae994bb5afae8adaa754b851", "filename": "src/test/ui/pattern/bindings-after-at/copy-and-move-mixed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5827fbadf6feaa3da42d7223ac9f10148c827a89/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5827fbadf6feaa3da42d7223ac9f10148c827a89/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr?ref=5827fbadf6feaa3da42d7223ac9f10148c827a89", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of partially moved value\n-  --> $DIR/copy-and-move-mixed.rs:11:9\n+  --> $DIR/copy-and-move-mixed.rs:14:9\n    |\n LL |     let a @ NC(b, c @ NC(d, e)) = NC(C, NC(C, C));\n    |         ^^^^^^^^^^------------^"}]}