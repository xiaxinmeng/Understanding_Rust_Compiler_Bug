{"sha": "2af3dd73dbc71e0f345746e123df4ac71d3f392c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhZjNkZDczZGJjNzFlMGYzNDU3NDZlMTIzZGY0YWM3MWQzZjM5MmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-20T19:49:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-20T19:49:46Z"}, "message": "Auto merge of #32010 - devonhollowood:non-c-like-enum-repr, r=Aatch\n\nAdd tests for #26114\n\nFirst step in fixing #26114", "tree": {"sha": "6fd6e286356b6cfcd3dece5681b80a04467a46bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fd6e286356b6cfcd3dece5681b80a04467a46bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2af3dd73dbc71e0f345746e123df4ac71d3f392c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2af3dd73dbc71e0f345746e123df4ac71d3f392c", "html_url": "https://github.com/rust-lang/rust/commit/2af3dd73dbc71e0f345746e123df4ac71d3f392c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2af3dd73dbc71e0f345746e123df4ac71d3f392c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "978bc070a66f7f4f82dc0f2c4a4e4e35478851b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/978bc070a66f7f4f82dc0f2c4a4e4e35478851b6", "html_url": "https://github.com/rust-lang/rust/commit/978bc070a66f7f4f82dc0f2c4a4e4e35478851b6"}, {"sha": "b5be09564188b39aa2fbc73b057c1e35e99ee99f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5be09564188b39aa2fbc73b057c1e35e99ee99f", "html_url": "https://github.com/rust-lang/rust/commit/b5be09564188b39aa2fbc73b057c1e35e99ee99f"}], "stats": {"total": 52, "additions": 46, "deletions": 6}, "files": [{"sha": "db0fa2a64bde61091f20f5a89b28d1626f9412bb", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2af3dd73dbc71e0f345746e123df4ac71d3f392c/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2af3dd73dbc71e0f345746e123df4ac71d3f392c/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=2af3dd73dbc71e0f345746e123df4ac71d3f392c", "patch": "@@ -396,6 +396,15 @@ fn represent_type_uncached<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                     }\n                 }\n             }\n+\n+            // If the alignment is smaller than the chosen discriminant size, don't use the\n+            // alignment as the final size.\n+            let min_ty = ll_inttype(&cx, min_ity);\n+            let min_size = machine::llsize_of_real(cx, min_ty);\n+            if (align as u64) < min_size {\n+                use_align = false;\n+            }\n+\n             let ity = if use_align {\n                 // Use the overall alignment\n                 match align {\n@@ -813,11 +822,11 @@ fn generic_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             // FIXME #10604: this breaks when vector types are present.\n             let (size, align) = union_size_and_align(&sts[..]);\n             let align_s = align as u64;\n-            assert_eq!(size % align_s, 0);\n-            let align_units = size / align_s - 1;\n-\n             let discr_ty = ll_inttype(cx, ity);\n             let discr_size = machine::llsize_of_alloc(cx, discr_ty);\n+            let padded_discr_size = roundup(discr_size, align);\n+            assert_eq!(size % align_s, 0); // Ensure division in align_units comes out evenly\n+            let align_units = (size - padded_discr_size) / align_s;\n             let fill_ty = match align_s {\n                 1 => Type::array(&Type::i8(cx), align_units),\n                 2 => Type::array(&Type::i16(cx), align_units),\n@@ -829,10 +838,10 @@ fn generic_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 _ => panic!(\"unsupported enum alignment: {}\", align)\n             };\n             assert_eq!(machine::llalign_of_min(cx, fill_ty), align);\n-            assert_eq!(align_s % discr_size, 0);\n+            assert_eq!(padded_discr_size % discr_size, 0); // Ensure discr_ty can fill pad evenly\n             let mut fields: Vec<Type> =\n                 [discr_ty,\n-                 Type::array(&discr_ty, align_s / discr_size - 1),\n+                 Type::array(&discr_ty, (padded_discr_size - discr_size)/discr_size),\n                  fill_ty].iter().cloned().collect();\n             if delay_drop_flag && dtor_needed {\n                 fields.pop();"}, {"sha": "3bbc107e0b99e20bdbc227f0bbdad29aaecd4d95", "filename": "src/test/run-pass/enum-discrim-manual-sizing.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2af3dd73dbc71e0f345746e123df4ac71d3f392c/src%2Ftest%2Frun-pass%2Fenum-discrim-manual-sizing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2af3dd73dbc71e0f345746e123df4ac71d3f392c/src%2Ftest%2Frun-pass%2Fenum-discrim-manual-sizing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-discrim-manual-sizing.rs?ref=2af3dd73dbc71e0f345746e123df4ac71d3f392c", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-use std::mem::size_of;\n+use std::mem::{size_of, align_of};\n \n #[repr(i8)]\n enum Ei8 {\n@@ -71,6 +71,24 @@ enum Euint {\n     Buint = 1\n }\n \n+#[repr(u8)]\n+enum Eu8NonCLike<T> {\n+    _None,\n+    _Some(T),\n+}\n+\n+#[repr(i64)]\n+enum Ei64NonCLike<T> {\n+    _None,\n+    _Some(T),\n+}\n+\n+#[repr(u64)]\n+enum Eu64NonCLike<T> {\n+    _None,\n+    _Some(T),\n+}\n+\n pub fn main() {\n     assert_eq!(size_of::<Ei8>(), 1);\n     assert_eq!(size_of::<Eu8>(), 1);\n@@ -82,4 +100,17 @@ pub fn main() {\n     assert_eq!(size_of::<Eu64>(), 8);\n     assert_eq!(size_of::<Eint>(), size_of::<isize>());\n     assert_eq!(size_of::<Euint>(), size_of::<usize>());\n+    assert_eq!(size_of::<Eu8NonCLike<()>>(), 1);\n+    assert_eq!(size_of::<Ei64NonCLike<()>>(), 8);\n+    assert_eq!(size_of::<Eu64NonCLike<()>>(), 8);\n+    let u8_expected_size = round_up(9, align_of::<Eu64NonCLike<u8>>());\n+    assert_eq!(size_of::<Eu64NonCLike<u8>>(), u8_expected_size);\n+    let array_expected_size = round_up(28, align_of::<Eu64NonCLike<[u32; 5]>>());\n+    assert_eq!(size_of::<Eu64NonCLike<[u32; 5]>>(), array_expected_size);\n+    assert_eq!(size_of::<Eu64NonCLike<[u32; 6]>>(), 32);\n+}\n+\n+// Rounds x up to the next multiple of a\n+fn round_up(x: usize, a: usize) -> usize {\n+    ((x + (a - 1)) / a) * a\n }"}]}