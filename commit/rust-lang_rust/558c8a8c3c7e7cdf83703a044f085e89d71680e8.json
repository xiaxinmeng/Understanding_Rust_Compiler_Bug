{"sha": "558c8a8c3c7e7cdf83703a044f085e89d71680e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1OGM4YThjM2M3ZTdjZGY4MzcwM2EwNDRmMDg1ZTg5ZDcxNjgwZTg=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-06-26T18:30:14Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-06-26T18:30:28Z"}, "message": "Handle stores to projections correctly in liveness analysis\n\nPreviously, we were too conservative and `x.field = 4` was treated as a\n\"use\" of `x`.", "tree": {"sha": "d4db3a5b000732254eabed5f9c09e3b487accceb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4db3a5b000732254eabed5f9c09e3b487accceb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/558c8a8c3c7e7cdf83703a044f085e89d71680e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/558c8a8c3c7e7cdf83703a044f085e89d71680e8", "html_url": "https://github.com/rust-lang/rust/commit/558c8a8c3c7e7cdf83703a044f085e89d71680e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/558c8a8c3c7e7cdf83703a044f085e89d71680e8/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "html_url": "https://github.com/rust-lang/rust/commit/9672b5e95c520774cc17bffc7031c80a1bcf4b4c"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "784b0bd9293e25f8b65072d726059ce503fa9f99", "filename": "src/librustc_mir/dataflow/impls/liveness.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/558c8a8c3c7e7cdf83703a044f085e89d71680e8/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558c8a8c3c7e7cdf83703a044f085e89d71680e8/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fliveness.rs?ref=558c8a8c3c7e7cdf83703a044f085e89d71680e8", "patch": "@@ -92,7 +92,27 @@ impl<'tcx, T> Visitor<'tcx> for TransferFunction<'_, T>\n where\n     T: GenKill<Local>,\n {\n+    fn visit_place(&mut self, place: &mir::Place<'tcx>, context: PlaceContext, location: Location) {\n+        let mir::Place { projection, local } = *place;\n+\n+        // We purposefully do not call `super_place` here to avoid calling `visit_local` for this\n+        // place with one of the `Projection` variants of `PlaceContext`.\n+        self.visit_projection(local, projection, context, location);\n+\n+        match DefUse::for_place(context) {\n+            // Treat derefs as a use of the base local. `*p = 4` is not a def of `p` but a use.\n+            Some(_) if place.is_indirect() => self.0.gen(local),\n+\n+            Some(DefUse::Def) if projection.is_empty() => self.0.kill(local),\n+            Some(DefUse::Use) => self.0.gen(local),\n+            _ => {}\n+        }\n+    }\n+\n     fn visit_local(&mut self, &local: &Local, context: PlaceContext, _: Location) {\n+        // Because we do not call `super_place` above, `visit_local` is only called for locals that\n+        // do not appear as part of  a `Place` in the MIR. This handles cases like the implicit use\n+        // of the return place in a `Return` terminator or the index in an `Index` projection.\n         match DefUse::for_place(context) {\n             Some(DefUse::Def) => self.0.kill(local),\n             Some(DefUse::Use) => self.0.gen(local),\n@@ -126,19 +146,22 @@ impl DefUse {\n                 | MutatingUseContext::AsmOutput\n                 | MutatingUseContext::Borrow\n                 | MutatingUseContext::Drop\n-                | MutatingUseContext::Projection\n                 | MutatingUseContext::Retag,\n             )\n             | PlaceContext::NonMutatingUse(\n                 NonMutatingUseContext::AddressOf\n                 | NonMutatingUseContext::Copy\n                 | NonMutatingUseContext::Inspect\n                 | NonMutatingUseContext::Move\n-                | NonMutatingUseContext::Projection\n                 | NonMutatingUseContext::ShallowBorrow\n                 | NonMutatingUseContext::SharedBorrow\n                 | NonMutatingUseContext::UniqueBorrow,\n             ) => Some(DefUse::Use),\n+\n+            PlaceContext::MutatingUse(MutatingUseContext::Projection)\n+            | PlaceContext::NonMutatingUse(NonMutatingUseContext::Projection) => {\n+                unreachable!(\"A projection could be a def or a use and must be handled separately\")\n+            }\n         }\n     }\n }"}]}