{"sha": "5acac4c9797b701285a827bb734416dc3a31d78d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhY2FjNGM5Nzk3YjcwMTI4NWE4MjdiYjczNDQxNmRjM2EzMWQ3OGQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-01-10T07:56:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-10T07:56:03Z"}, "message": "Rollup merge of #80825 - GuillaumeGomez:rustdoc-cleanup-bis-repetita, r=jyn514\n\nRemove under-used ImplPolarity enum\n\nIt doesn't make much sense to have an enum with only two possible values and to store it inside an `Option` in my opinion when you can do all the same with a simple boolean. I don't expect any chances, performance or RSS usage wise.\n\nr? ``@jyn514``", "tree": {"sha": "3c1ad6fb2ed32098483e66bb642fa2e81d1715b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c1ad6fb2ed32098483e66bb642fa2e81d1715b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5acac4c9797b701285a827bb734416dc3a31d78d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf+rMUCRBK7hj4Ov3rIwAAdHIIAGeGwfGdZ5TEF+mC7BaLm9TT\niDr0f+qTeK/IBizHK96PAjTLZha/5vIX5W/QJI4CRbuoUh3ogtso9Irtep9lsU+l\nEnCYadq6oXbs/pPqV50IqxmNUcDcRxB+AnRqkWqf25jpzSsVCJoc+TlxE1xN0oQZ\ngQPcyXmJqpTuSPEZCIJlIA4OCXu6xDXpYKPPw8rskxlqOrVOISw/Op7xqBk47Pg/\nxQpmu03gYhRLsgy04/U+gozKsYp9gZMCGuQh69VkOc8TBcYIUBcjFEEaM6LFk043\ndYNO0AuxWxNkOa2TOfU9sezlbs+5o9YsbfLUEUU6PUiqkfHi3zD+dDfta/ovn+o=\n=4lAX\n-----END PGP SIGNATURE-----\n", "payload": "tree 3c1ad6fb2ed32098483e66bb642fa2e81d1715b3\nparent 4f43b77bb63eae2b8d11a1f2f8bb2f41294506f8\nparent 34d128a263ee7a28d49110fafd59c26296f9c686\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1610265363 +0900\ncommitter GitHub <noreply@github.com> 1610265363 +0900\n\nRollup merge of #80825 - GuillaumeGomez:rustdoc-cleanup-bis-repetita, r=jyn514\n\nRemove under-used ImplPolarity enum\n\nIt doesn't make much sense to have an enum with only two possible values and to store it inside an `Option` in my opinion when you can do all the same with a simple boolean. I don't expect any chances, performance or RSS usage wise.\n\nr? ``@jyn514``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5acac4c9797b701285a827bb734416dc3a31d78d", "html_url": "https://github.com/rust-lang/rust/commit/5acac4c9797b701285a827bb734416dc3a31d78d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5acac4c9797b701285a827bb734416dc3a31d78d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f43b77bb63eae2b8d11a1f2f8bb2f41294506f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f43b77bb63eae2b8d11a1f2f8bb2f41294506f8", "html_url": "https://github.com/rust-lang/rust/commit/4f43b77bb63eae2b8d11a1f2f8bb2f41294506f8"}, {"sha": "34d128a263ee7a28d49110fafd59c26296f9c686", "url": "https://api.github.com/repos/rust-lang/rust/commits/34d128a263ee7a28d49110fafd59c26296f9c686", "html_url": "https://github.com/rust-lang/rust/commit/34d128a263ee7a28d49110fafd59c26296f9c686"}], "stats": {"total": 60, "additions": 28, "deletions": 32}, "files": [{"sha": "43fb53ba18fdae738b8a515d00d583153b631dc2", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5acac4c9797b701285a827bb734416dc3a31d78d/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5acac4c9797b701285a827bb734416dc3a31d78d/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=5acac4c9797b701285a827bb734416dc3a31d78d", "patch": "@@ -84,14 +84,14 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                         new_generics\n                     });\n \n-                let polarity;\n+                let negative_polarity;\n                 let new_generics = match result {\n                     AutoTraitResult::PositiveImpl(new_generics) => {\n-                        polarity = None;\n+                        negative_polarity = false;\n                         new_generics\n                     }\n                     AutoTraitResult::NegativeImpl => {\n-                        polarity = Some(ImplPolarity::Negative);\n+                        negative_polarity = true;\n \n                         // For negative impls, we use the generic params, but *not* the predicates,\n                         // from the original type. Otherwise, the displayed impl appears to be a\n@@ -130,7 +130,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                         trait_: Some(trait_ref.clean(self.cx).get_trait_type().unwrap()),\n                         for_: ty.clean(self.cx),\n                         items: Vec::new(),\n-                        polarity,\n+                        negative_polarity,\n                         synthetic: true,\n                         blanket_impl: None,\n                     }),"}, {"sha": "f1c26feea46ec4376675ea9036e9dc4733fcdafe", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5acac4c9797b701285a827bb734416dc3a31d78d/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5acac4c9797b701285a827bb734416dc3a31d78d/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=5acac4c9797b701285a827bb734416dc3a31d78d", "patch": "@@ -131,7 +131,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                             .in_definition_order()\n                             .collect::<Vec<_>>()\n                             .clean(self.cx),\n-                        polarity: None,\n+                        negative_polarity: false,\n                         synthetic: false,\n                         blanket_impl: Some(trait_ref.self_ty().clean(self.cx)),\n                     }),"}, {"sha": "2507bee2e51c0d85765369bbc2926883e83234c9", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5acac4c9797b701285a827bb734416dc3a31d78d/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5acac4c9797b701285a827bb734416dc3a31d78d/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=5acac4c9797b701285a827bb734416dc3a31d78d", "patch": "@@ -428,7 +428,7 @@ crate fn build_impl(\n             trait_,\n             for_,\n             items: trait_items,\n-            polarity: Some(polarity.clean(cx)),\n+            negative_polarity: polarity.clean(cx),\n             synthetic: false,\n             blanket_impl: None,\n         }),"}, {"sha": "14564e7f64aa5acc71311609a7014cbf8b8d890b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5acac4c9797b701285a827bb734416dc3a31d78d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5acac4c9797b701285a827bb734416dc3a31d78d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5acac4c9797b701285a827bb734416dc3a31d78d", "patch": "@@ -2069,13 +2069,14 @@ impl Clean<Item> for hir::Variant<'_> {\n     }\n }\n \n-impl Clean<ImplPolarity> for ty::ImplPolarity {\n-    fn clean(&self, _: &DocContext<'_>) -> ImplPolarity {\n+impl Clean<bool> for ty::ImplPolarity {\n+    /// Returns whether the impl has negative polarity.\n+    fn clean(&self, _: &DocContext<'_>) -> bool {\n         match self {\n             &ty::ImplPolarity::Positive |\n             // FIXME: do we want to do something else here?\n-            &ty::ImplPolarity::Reservation => ImplPolarity::Positive,\n-            &ty::ImplPolarity::Negative => ImplPolarity::Negative,\n+            &ty::ImplPolarity::Reservation => false,\n+            &ty::ImplPolarity::Negative => true,\n         }\n     }\n }\n@@ -2116,7 +2117,7 @@ fn clean_impl(impl_: &hir::Item<'_>, cx: &DocContext<'_>) -> Vec<Item> {\n             trait_,\n             for_,\n             items,\n-            polarity: Some(cx.tcx.impl_polarity(def_id).clean(cx)),\n+            negative_polarity: cx.tcx.impl_polarity(def_id).clean(cx),\n             synthetic: false,\n             blanket_impl: None,\n         });"}, {"sha": "7e567bedc7875a8ce52665569d80e95dfa7cf494", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5acac4c9797b701285a827bb734416dc3a31d78d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5acac4c9797b701285a827bb734416dc3a31d78d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=5acac4c9797b701285a827bb734416dc3a31d78d", "patch": "@@ -175,9 +175,11 @@ impl Item {\n     }\n \n     crate fn is_crate(&self) -> bool {\n-        matches!(*self.kind,\n+        matches!(\n+            *self.kind,\n             StrippedItem(box ModuleItem(Module { is_crate: true, .. }))\n-            | ModuleItem(Module { is_crate: true, .. }))\n+                | ModuleItem(Module { is_crate: true, .. })\n+        )\n     }\n     crate fn is_mod(&self) -> bool {\n         self.type_() == ItemType::Module\n@@ -1226,6 +1228,7 @@ crate enum Type {\n     BareFunction(Box<BareFunctionDecl>),\n     Tuple(Vec<Type>),\n     Slice(Box<Type>),\n+    /// The `String` field is about the size or the constant representing the array's length.\n     Array(Box<Type>, String),\n     Never,\n     RawPointer(Mutability, Box<Type>),\n@@ -1857,12 +1860,6 @@ crate struct Constant {\n     crate is_literal: bool,\n }\n \n-#[derive(Clone, PartialEq, Debug)]\n-crate enum ImplPolarity {\n-    Positive,\n-    Negative,\n-}\n-\n #[derive(Clone, Debug)]\n crate struct Impl {\n     crate unsafety: hir::Unsafety,\n@@ -1871,7 +1868,7 @@ crate struct Impl {\n     crate trait_: Option<Type>,\n     crate for_: Type,\n     crate items: Vec<Item>,\n-    crate polarity: Option<ImplPolarity>,\n+    crate negative_polarity: bool,\n     crate synthetic: bool,\n     crate blanket_impl: Option<Type>,\n }"}, {"sha": "5c2adca3126f71da5bb188dcc7df18d476b577b3", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5acac4c9797b701285a827bb734416dc3a31d78d/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5acac4c9797b701285a827bb734416dc3a31d78d/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=5acac4c9797b701285a827bb734416dc3a31d78d", "patch": "@@ -870,7 +870,7 @@ impl clean::Impl {\n             }\n \n             if let Some(ref ty) = self.trait_ {\n-                if self.polarity == Some(clean::ImplPolarity::Negative) {\n+                if self.negative_polarity {\n                     write!(f, \"!\")?;\n                 }\n "}, {"sha": "6a32be609911adb590160926c9dbc5d06c042977", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5acac4c9797b701285a827bb734416dc3a31d78d/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5acac4c9797b701285a827bb734416dc3a31d78d/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=5acac4c9797b701285a827bb734416dc3a31d78d", "patch": "@@ -4327,16 +4327,15 @@ fn sidebar_assoc_items(cx: &Context<'_>, it: &clean::Item) -> String {\n \n                 let mut ret = impls\n                     .iter()\n-                    .filter_map(|i| {\n-                        let is_negative_impl = is_negative_impl(i.inner_impl());\n-                        if let Some(ref i) = i.inner_impl().trait_ {\n+                    .filter_map(|it| {\n+                        if let Some(ref i) = it.inner_impl().trait_ {\n                             let i_display = format!(\"{:#}\", i.print());\n                             let out = Escape(&i_display);\n                             let encoded = small_url_encode(&format!(\"{:#}\", i.print()));\n                             let generated = format!(\n                                 \"<a href=\\\"#impl-{}\\\">{}{}</a>\",\n                                 encoded,\n-                                if is_negative_impl { \"!\" } else { \"\" },\n+                                if it.inner_impl().negative_polarity { \"!\" } else { \"\" },\n                                 out\n                             );\n                             if links.insert(generated.clone()) { Some(generated) } else { None }\n@@ -4503,10 +4502,6 @@ fn extract_for_impl_name(item: &clean::Item) -> Option<(String, String)> {\n     }\n }\n \n-fn is_negative_impl(i: &clean::Impl) -> bool {\n-    i.polarity == Some(clean::ImplPolarity::Negative)\n-}\n-\n fn sidebar_trait(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, t: &clean::Trait) {\n     let mut sidebar = String::new();\n "}, {"sha": "5dea64ef145871a72b7ab42eb03f59fd7682433e", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5acac4c9797b701285a827bb734416dc3a31d78d/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5acac4c9797b701285a827bb734416dc3a31d78d/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=5acac4c9797b701285a827bb734416dc3a31d78d", "patch": "@@ -422,7 +422,7 @@ impl From<clean::Impl> for Impl {\n             trait_,\n             for_,\n             items,\n-            polarity,\n+            negative_polarity,\n             synthetic,\n             blanket_impl,\n         } = impl_;\n@@ -436,7 +436,7 @@ impl From<clean::Impl> for Impl {\n             trait_: trait_.map(Into::into),\n             for_: for_.into(),\n             items: ids(items),\n-            negative: polarity == Some(clean::ImplPolarity::Negative),\n+            negative: negative_polarity,\n             synthetic,\n             blanket_impl: blanket_impl.map(Into::into),\n         }"}, {"sha": "24d5770541273da00532a6e290c8e71d41b6dec8", "filename": "src/librustdoc/theme.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5acac4c9797b701285a827bb734416dc3a31d78d/src%2Flibrustdoc%2Ftheme.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5acac4c9797b701285a827bb734416dc3a31d78d/src%2Flibrustdoc%2Ftheme.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftheme.rs?ref=5acac4c9797b701285a827bb734416dc3a31d78d", "patch": "@@ -70,7 +70,10 @@ impl Events {\n     }\n \n     fn is_comment(&self) -> bool {\n-        matches!(self, Events::StartLineComment(_) | Events::StartComment(_) | Events::EndComment(_))\n+        matches!(\n+            self,\n+            Events::StartLineComment(_) | Events::StartComment(_) | Events::EndComment(_)\n+        )\n     }\n }\n "}]}