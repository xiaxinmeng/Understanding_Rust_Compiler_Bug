{"sha": "840a09c86ed354be8ed29a0b657bb7289c754442", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0MGEwOWM4NmVkMzU0YmU4ZWQyOWEwYjY1N2JiNzI4OWM3NTQ0NDI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-31T01:17:35Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-02T17:39:12Z"}, "message": "Add a --no-trans command line option\n\nRuns all passes before translation. This will be used for pretty-printing\ntests to verify that the results are still probably valid Rust code.", "tree": {"sha": "96cd9f5a898a5ab2b6d12f89c878a6e3a4154883", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96cd9f5a898a5ab2b6d12f89c878a6e3a4154883"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/840a09c86ed354be8ed29a0b657bb7289c754442", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/840a09c86ed354be8ed29a0b657bb7289c754442", "html_url": "https://github.com/rust-lang/rust/commit/840a09c86ed354be8ed29a0b657bb7289c754442", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/840a09c86ed354be8ed29a0b657bb7289c754442/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f4b7e1ba7121955ce4805cd55a51bc856d1f5b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f4b7e1ba7121955ce4805cd55a51bc856d1f5b2", "html_url": "https://github.com/rust-lang/rust/commit/5f4b7e1ba7121955ce4805cd55a51bc856d1f5b2"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "c6167eedc14adfcbb57f4d1ec625c74162495154", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/840a09c86ed354be8ed29a0b657bb7289c754442/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/840a09c86ed354be8ed29a0b657bb7289c754442/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=840a09c86ed354be8ed29a0b657bb7289c754442", "patch": "@@ -121,7 +121,7 @@ fn compile_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n     let time_passes = sess.get_opts().time_passes;\n     let crate =\n         time(time_passes, \"parsing\", bind parse_input(sess, cfg, input));\n-    if sess.get_opts().output_type == link::output_type_none { ret; }\n+    if sess.get_opts().parse_only { ret; }\n     crate =\n         time(time_passes, \"configuration\",\n              bind front::config::strip_unconfigured_items(crate));\n@@ -158,6 +158,7 @@ fn compile_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n          bind middle::alias::check_crate(ty_cx, crate));\n     time[()](time_passes, \"kind checking\",\n              bind kind::check_crate(ty_cx, crate));\n+    if sess.get_opts().no_trans { ret; }\n     let llmod =\n         time[llvm::llvm::ModuleRef](time_passes, \"translation\",\n                                     bind trans::trans_crate(sess, crate,\n@@ -258,6 +259,7 @@ options:\n     --noverify         suppress LLVM verification step (slight speedup)\n     --depend           print dependencies, in makefile-rule form\n     --parse-only       parse only; do not compile, assemble, or link\n+    --no-trans         run all passes except translation; no output\n     -g                 produce debug info\n     --OptLevel=        optimize with possible levels 0-3\n     -O                 equivalent to --OptLevel=2\n@@ -330,8 +332,11 @@ fn build_session_options(binary: str, match: getopts::match, binary_dir: str)\n     let lsp_vec = getopts::opt_strs(match, \"L\");\n     for lsp: str  in lsp_vec { library_search_paths += ~[lsp]; }\n \n+    let parse_only = opt_present(match, \"parse-only\");\n+    let no_trans = opt_present(match, \"no-trans\");\n+\n     let output_type =\n-        if opt_present(match, \"parse-only\") {\n+        if parse_only || no_trans {\n             link::output_type_none\n         } else if (opt_present(match, \"S\")) {\n             link::output_type_assembly\n@@ -392,7 +397,9 @@ fn build_session_options(binary: str, match: getopts::match, binary_dir: str)\n           sysroot: sysroot,\n           cfg: cfg,\n           test: test,\n-          dps: dps};\n+          dps: dps,\n+          parse_only: parse_only,\n+          no_trans: no_trans};\n     ret sopts;\n }\n \n@@ -418,6 +425,7 @@ fn opts() -> vec[getopts::opt] {\n     ret [optflag(\"h\"), optflag(\"help\"), optflag(\"v\"), optflag(\"version\"),\n          optflag(\"glue\"), optflag(\"emit-llvm\"), optflagopt(\"pretty\"),\n          optflagopt(\"expand\"), optflag(\"ls\"), optflag(\"parse-only\"),\n+         optflag(\"no-trans\"),\n          optflag(\"O\"), optopt(\"OptLevel\"), optmulti(\"L\"), optflag(\"S\"),\n          optflag(\"c\"), optopt(\"o\"), optflag(\"g\"), optflag(\"save-temps\"),\n          optopt(\"sysroot\"), optflag(\"stats\"), optflag(\"time-passes\"),\n@@ -510,7 +518,7 @@ fn main(args: vec[str]) {\n         vec::pop[str](parts);\n         saved_out_filename = parts.(0);\n         alt sopts.output_type {\n-          link::output_type_none. { parts += [\"pp\"]; }\n+          link::output_type_none. { parts += [\"none\"]; }\n           link::output_type_bitcode. { parts += [\"bc\"]; }\n           link::output_type_assembly. { parts += [\"s\"]; }\n "}, {"sha": "2ded0723845ab6bc65524ee996e17802bb5c855c", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/840a09c86ed354be8ed29a0b657bb7289c754442/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/840a09c86ed354be8ed29a0b657bb7289c754442/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=840a09c86ed354be8ed29a0b657bb7289c754442", "patch": "@@ -41,7 +41,10 @@ type options =\n      sysroot: str,\n      cfg: ast::crate_cfg,\n      test: bool,\n-     dps: bool};\n+     dps: bool,\n+     parse_only: bool,\n+     no_trans: bool\n+     };\n \n type crate_metadata = {name: str, data: u8[]};\n "}]}