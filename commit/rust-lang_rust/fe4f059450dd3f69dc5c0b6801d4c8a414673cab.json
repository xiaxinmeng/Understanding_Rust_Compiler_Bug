{"sha": "fe4f059450dd3f69dc5c0b6801d4c8a414673cab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlNGYwNTk0NTBkZDNmNjlkYzVjMGI2ODAxZDRjOGE0MTQ2NzNjYWI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-14T14:07:51Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-14T14:07:51Z"}, "message": "internal: prepare to merge hir::BinaryOp and ast::BinOp", "tree": {"sha": "eabb1f9d59d1cee53091cc59f8349483b7640914", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eabb1f9d59d1cee53091cc59f8349483b7640914"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe4f059450dd3f69dc5c0b6801d4c8a414673cab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe4f059450dd3f69dc5c0b6801d4c8a414673cab", "html_url": "https://github.com/rust-lang/rust/commit/fe4f059450dd3f69dc5c0b6801d4c8a414673cab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe4f059450dd3f69dc5c0b6801d4c8a414673cab/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6df00f8495e2c8aa5e7312a6e293dee169be137b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6df00f8495e2c8aa5e7312a6e293dee169be137b", "html_url": "https://github.com/rust-lang/rust/commit/6df00f8495e2c8aa5e7312a6e293dee169be137b"}], "stats": {"total": 194, "additions": 97, "deletions": 97}, "files": [{"sha": "1c8a33a33aa76dcd55fc673d50d4cea8f1f67e70", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 2, "deletions": 47, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/fe4f059450dd3f69dc5c0b6801d4c8a414673cab/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe4f059450dd3f69dc5c0b6801d4c8a414673cab/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=fe4f059450dd3f69dc5c0b6801d4c8a414673cab", "patch": "@@ -27,9 +27,8 @@ use crate::{\n     builtin_type::{BuiltinFloat, BuiltinInt, BuiltinUint},\n     db::DefDatabase,\n     expr::{\n-        dummy_expr_id, ArithOp, Array, BinaryOp, BindingAnnotation, CmpOp, Expr, ExprId, Label,\n-        LabelId, Literal, LogicOp, MatchArm, MatchGuard, Ordering, Pat, PatId, RecordFieldPat,\n-        RecordLitField, Statement,\n+        dummy_expr_id, Array, BinaryOp, BindingAnnotation, Expr, ExprId, Label, LabelId, Literal,\n+        MatchArm, MatchGuard, Pat, PatId, RecordFieldPat, RecordLitField, Statement,\n     },\n     intern::Interned,\n     item_scope::BuiltinShadowMode,\n@@ -954,50 +953,6 @@ impl ExprCollector<'_> {\n     }\n }\n \n-impl From<ast::BinOp> for BinaryOp {\n-    fn from(ast_op: ast::BinOp) -> Self {\n-        match ast_op {\n-            ast::BinOp::BooleanOr => BinaryOp::LogicOp(LogicOp::Or),\n-            ast::BinOp::BooleanAnd => BinaryOp::LogicOp(LogicOp::And),\n-            ast::BinOp::EqualityTest => BinaryOp::CmpOp(CmpOp::Eq { negated: false }),\n-            ast::BinOp::NegatedEqualityTest => BinaryOp::CmpOp(CmpOp::Eq { negated: true }),\n-            ast::BinOp::LesserEqualTest => {\n-                BinaryOp::CmpOp(CmpOp::Ord { ordering: Ordering::Less, strict: false })\n-            }\n-            ast::BinOp::GreaterEqualTest => {\n-                BinaryOp::CmpOp(CmpOp::Ord { ordering: Ordering::Greater, strict: false })\n-            }\n-            ast::BinOp::LesserTest => {\n-                BinaryOp::CmpOp(CmpOp::Ord { ordering: Ordering::Less, strict: true })\n-            }\n-            ast::BinOp::GreaterTest => {\n-                BinaryOp::CmpOp(CmpOp::Ord { ordering: Ordering::Greater, strict: true })\n-            }\n-            ast::BinOp::Addition => BinaryOp::ArithOp(ArithOp::Add),\n-            ast::BinOp::Multiplication => BinaryOp::ArithOp(ArithOp::Mul),\n-            ast::BinOp::Subtraction => BinaryOp::ArithOp(ArithOp::Sub),\n-            ast::BinOp::Division => BinaryOp::ArithOp(ArithOp::Div),\n-            ast::BinOp::Remainder => BinaryOp::ArithOp(ArithOp::Rem),\n-            ast::BinOp::LeftShift => BinaryOp::ArithOp(ArithOp::Shl),\n-            ast::BinOp::RightShift => BinaryOp::ArithOp(ArithOp::Shr),\n-            ast::BinOp::BitwiseXor => BinaryOp::ArithOp(ArithOp::BitXor),\n-            ast::BinOp::BitwiseOr => BinaryOp::ArithOp(ArithOp::BitOr),\n-            ast::BinOp::BitwiseAnd => BinaryOp::ArithOp(ArithOp::BitAnd),\n-            ast::BinOp::Assignment => BinaryOp::Assignment { op: None },\n-            ast::BinOp::AddAssign => BinaryOp::Assignment { op: Some(ArithOp::Add) },\n-            ast::BinOp::DivAssign => BinaryOp::Assignment { op: Some(ArithOp::Div) },\n-            ast::BinOp::MulAssign => BinaryOp::Assignment { op: Some(ArithOp::Mul) },\n-            ast::BinOp::RemAssign => BinaryOp::Assignment { op: Some(ArithOp::Rem) },\n-            ast::BinOp::ShlAssign => BinaryOp::Assignment { op: Some(ArithOp::Shl) },\n-            ast::BinOp::ShrAssign => BinaryOp::Assignment { op: Some(ArithOp::Shr) },\n-            ast::BinOp::SubAssign => BinaryOp::Assignment { op: Some(ArithOp::Sub) },\n-            ast::BinOp::BitOrAssign => BinaryOp::Assignment { op: Some(ArithOp::BitOr) },\n-            ast::BinOp::BitAndAssign => BinaryOp::Assignment { op: Some(ArithOp::BitAnd) },\n-            ast::BinOp::BitXorAssign => BinaryOp::Assignment { op: Some(ArithOp::BitXor) },\n-        }\n-    }\n-}\n-\n impl From<ast::LiteralKind> for Literal {\n     fn from(ast_lit_kind: ast::LiteralKind) -> Self {\n         match ast_lit_kind {"}, {"sha": "b508d875e819a2768ecbf09de97aa1b93b6acdee", "filename": "crates/hir_def/src/expr.rs", "status": "modified", "additions": 2, "deletions": 42, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/fe4f059450dd3f69dc5c0b6801d4c8a414673cab/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe4f059450dd3f69dc5c0b6801d4c8a414673cab/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fexpr.rs?ref=fe4f059450dd3f69dc5c0b6801d4c8a414673cab", "patch": "@@ -14,7 +14,6 @@\n \n use hir_expand::name::Name;\n use la_arena::{Idx, RawIdx};\n-use syntax::ast::RangeOp;\n \n use crate::{\n     builtin_type::{BuiltinFloat, BuiltinInt, BuiltinUint},\n@@ -24,6 +23,8 @@ use crate::{\n     BlockId,\n };\n \n+pub use syntax::ast::{ArithOp, BinaryOp, CmpOp, LogicOp, Ordering, RangeOp, UnaryOp};\n+\n pub type ExprId = Idx<Expr>;\n pub(crate) fn dummy_expr_id() -> ExprId {\n     ExprId::from_raw(RawIdx::from(!0))\n@@ -179,47 +180,6 @@ pub enum Expr {\n     Literal(Literal),\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n-pub enum BinaryOp {\n-    LogicOp(LogicOp),\n-    ArithOp(ArithOp),\n-    CmpOp(CmpOp),\n-    Assignment { op: Option<ArithOp> },\n-}\n-\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n-pub enum LogicOp {\n-    And,\n-    Or,\n-}\n-\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n-pub enum CmpOp {\n-    Eq { negated: bool },\n-    Ord { ordering: Ordering, strict: bool },\n-}\n-\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n-pub enum Ordering {\n-    Less,\n-    Greater,\n-}\n-\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n-pub enum ArithOp {\n-    Add,\n-    Mul,\n-    Sub,\n-    Div,\n-    Rem,\n-    Shl,\n-    Shr,\n-    BitXor,\n-    BitOr,\n-    BitAnd,\n-}\n-\n-pub use syntax::ast::UnaryOp;\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub enum Array {\n     ElementList(Vec<ExprId>),"}, {"sha": "799ba0ced9d1ce1ad4eb4b7e430473b1183e569a", "filename": "crates/syntax/src/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe4f059450dd3f69dc5c0b6801d4c8a414673cab/crates%2Fsyntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe4f059450dd3f69dc5c0b6801d4c8a414673cab/crates%2Fsyntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast.rs?ref=fe4f059450dd3f69dc5c0b6801d4c8a414673cab", "patch": "@@ -24,10 +24,10 @@ pub use self::{\n         AttrKind, AttrsOwnerNode, FieldKind, Macro, NameLike, NameOrNameRef, PathSegmentKind,\n         SelfParamKind, SlicePatComponents, StructKind, TypeBoundKind, VisibilityKind,\n     },\n-    operators::{RangeOp, UnaryOp},\n+    operators::{ArithOp, BinaryOp, CmpOp, LogicOp, RangeOp, UnaryOp, Ordering},\n     token_ext::{\n-        CommentKind, CommentPlacement, CommentShape, HasFormatSpecifier, IsString, QuoteOffsets,\n-        Radix,\n+        CommentKind, CommentPlacement, CommentShape, FormatSpecifier, HasFormatSpecifier, IsString,\n+        QuoteOffsets, Radix,\n     },\n     traits::{\n         ArgListOwner, AttrsOwner, CommentIter, DocCommentsOwner, GenericParamsOwner, LoopBodyOwner,"}, {"sha": "84cb7c0b0127de9fb1a82fc276a0d6545e8073ca", "filename": "crates/syntax/src/ast/operators.rs", "status": "modified", "additions": 90, "deletions": 5, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/fe4f059450dd3f69dc5c0b6801d4c8a414673cab/crates%2Fsyntax%2Fsrc%2Fast%2Foperators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe4f059450dd3f69dc5c0b6801d4c8a414673cab/crates%2Fsyntax%2Fsrc%2Fast%2Foperators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Foperators.rs?ref=fe4f059450dd3f69dc5c0b6801d4c8a414673cab", "patch": "@@ -1,3 +1,11 @@\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+pub enum RangeOp {\n+    /// `..`\n+    Exclusive,\n+    /// `..=`\n+    Inclusive,\n+}\n+\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub enum UnaryOp {\n     /// The `*` operator for dereferencing\n@@ -9,9 +17,86 @@ pub enum UnaryOp {\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n-pub enum RangeOp {\n-    /// `..`\n-    Exclusive,\n-    /// `..=`\n-    Inclusive,\n+pub enum BinaryOp {\n+    LogicOp(LogicOp),\n+    ArithOp(ArithOp),\n+    CmpOp(CmpOp),\n+    Assignment { op: Option<ArithOp> },\n+}\n+\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+pub enum LogicOp {\n+    And,\n+    Or,\n+}\n+\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+pub enum CmpOp {\n+    Eq { negated: bool },\n+    Ord { ordering: Ordering, strict: bool },\n+}\n+\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+pub enum Ordering {\n+    Less,\n+    Greater,\n+}\n+\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+pub enum ArithOp {\n+    Add,\n+    Mul,\n+    Sub,\n+    Div,\n+    Rem,\n+    Shl,\n+    Shr,\n+    BitXor,\n+    BitOr,\n+    BitAnd,\n+}\n+\n+use crate::ast;\n+impl From<ast::BinOp> for BinaryOp {\n+    fn from(ast_op: ast::BinOp) -> Self {\n+        match ast_op {\n+            ast::BinOp::BooleanOr => BinaryOp::LogicOp(LogicOp::Or),\n+            ast::BinOp::BooleanAnd => BinaryOp::LogicOp(LogicOp::And),\n+            ast::BinOp::EqualityTest => BinaryOp::CmpOp(CmpOp::Eq { negated: false }),\n+            ast::BinOp::NegatedEqualityTest => BinaryOp::CmpOp(CmpOp::Eq { negated: true }),\n+            ast::BinOp::LesserEqualTest => {\n+                BinaryOp::CmpOp(CmpOp::Ord { ordering: Ordering::Less, strict: false })\n+            }\n+            ast::BinOp::GreaterEqualTest => {\n+                BinaryOp::CmpOp(CmpOp::Ord { ordering: Ordering::Greater, strict: false })\n+            }\n+            ast::BinOp::LesserTest => {\n+                BinaryOp::CmpOp(CmpOp::Ord { ordering: Ordering::Less, strict: true })\n+            }\n+            ast::BinOp::GreaterTest => {\n+                BinaryOp::CmpOp(CmpOp::Ord { ordering: Ordering::Greater, strict: true })\n+            }\n+            ast::BinOp::Addition => BinaryOp::ArithOp(ArithOp::Add),\n+            ast::BinOp::Multiplication => BinaryOp::ArithOp(ArithOp::Mul),\n+            ast::BinOp::Subtraction => BinaryOp::ArithOp(ArithOp::Sub),\n+            ast::BinOp::Division => BinaryOp::ArithOp(ArithOp::Div),\n+            ast::BinOp::Remainder => BinaryOp::ArithOp(ArithOp::Rem),\n+            ast::BinOp::LeftShift => BinaryOp::ArithOp(ArithOp::Shl),\n+            ast::BinOp::RightShift => BinaryOp::ArithOp(ArithOp::Shr),\n+            ast::BinOp::BitwiseXor => BinaryOp::ArithOp(ArithOp::BitXor),\n+            ast::BinOp::BitwiseOr => BinaryOp::ArithOp(ArithOp::BitOr),\n+            ast::BinOp::BitwiseAnd => BinaryOp::ArithOp(ArithOp::BitAnd),\n+            ast::BinOp::Assignment => BinaryOp::Assignment { op: None },\n+            ast::BinOp::AddAssign => BinaryOp::Assignment { op: Some(ArithOp::Add) },\n+            ast::BinOp::DivAssign => BinaryOp::Assignment { op: Some(ArithOp::Div) },\n+            ast::BinOp::MulAssign => BinaryOp::Assignment { op: Some(ArithOp::Mul) },\n+            ast::BinOp::RemAssign => BinaryOp::Assignment { op: Some(ArithOp::Rem) },\n+            ast::BinOp::ShlAssign => BinaryOp::Assignment { op: Some(ArithOp::Shl) },\n+            ast::BinOp::ShrAssign => BinaryOp::Assignment { op: Some(ArithOp::Shr) },\n+            ast::BinOp::SubAssign => BinaryOp::Assignment { op: Some(ArithOp::Sub) },\n+            ast::BinOp::BitOrAssign => BinaryOp::Assignment { op: Some(ArithOp::BitOr) },\n+            ast::BinOp::BitAndAssign => BinaryOp::Assignment { op: Some(ArithOp::BitAnd) },\n+            ast::BinOp::BitXorAssign => BinaryOp::Assignment { op: Some(ArithOp::BitXor) },\n+        }\n+    }\n }"}]}