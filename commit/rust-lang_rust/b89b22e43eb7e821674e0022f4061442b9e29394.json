{"sha": "b89b22e43eb7e821674e0022f4061442b9e29394", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4OWIyMmU0M2ViN2U4MjE2NzRlMDAyMmY0MDYxNDQyYjllMjkzOTQ=", "commit": {"author": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-04T22:13:46Z"}, "committer": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-04T22:13:46Z"}, "message": "vscode: yet another refactor commit", "tree": {"sha": "05ca0a665569aad393bd6c83cc9bcb0933d5085f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05ca0a665569aad393bd6c83cc9bcb0933d5085f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b89b22e43eb7e821674e0022f4061442b9e29394", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b89b22e43eb7e821674e0022f4061442b9e29394", "html_url": "https://github.com/rust-lang/rust/commit/b89b22e43eb7e821674e0022f4061442b9e29394", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b89b22e43eb7e821674e0022f4061442b9e29394/comments", "author": null, "committer": null, "parents": [{"sha": "c9e1aab8803264a40023aa09600b0a8fab8e00ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9e1aab8803264a40023aa09600b0a8fab8e00ff", "html_url": "https://github.com/rust-lang/rust/commit/c9e1aab8803264a40023aa09600b0a8fab8e00ff"}], "stats": {"total": 65, "additions": 30, "deletions": 35}, "files": [{"sha": "66d5040665ac897a18fcbb962bc8821392f3b9f7", "filename": "editors/code/package-lock.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b89b22e43eb7e821674e0022f4061442b9e29394/editors%2Fcode%2Fpackage-lock.json", "raw_url": "https://github.com/rust-lang/rust/raw/b89b22e43eb7e821674e0022f4061442b9e29394/editors%2Fcode%2Fpackage-lock.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage-lock.json?ref=b89b22e43eb7e821674e0022f4061442b9e29394", "patch": "@@ -878,7 +878,7 @@\n         \"vscode-languageclient\": {\n             \"version\": \"6.1.0\",\n             \"resolved\": \"https://registry.npmjs.org/vscode-languageclient/-/vscode-languageclient-6.1.0.tgz\",\n-            \"integrity\": \"sha512-Tcp0VoOaa0YzxL4nEfK9tsmcy76Eo8jNLvFQZwh2c8oMm02luL8uGYPLQNAiZ3XGgegfcwiQFZMqbW7DNV0vxA==\",\n+            \"integrity\": \"sha1-7mfAt4GMQs4CgVctBcia38xPWjg=\",\n             \"requires\": {\n                 \"semver\": \"^6.3.0\",\n                 \"vscode-languageserver-protocol\": \"^3.15.2\""}, {"sha": "7e7e909ddab8e95537bca66a3608a62269150ad9", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b89b22e43eb7e821674e0022f4061442b9e29394/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b89b22e43eb7e821674e0022f4061442b9e29394/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=b89b22e43eb7e821674e0022f4061442b9e29394", "patch": "@@ -7,25 +7,21 @@ import { Config } from './config';\n \n export function createClient(config: Config): lc.LanguageClient {\n     // '.' Is the fallback if no folder is open\n-    // TODO?: Workspace folders support Uri's (eg: file://test.txt). It might be a good idea to test if the uri points to a file.\n-    let folder: string = '.';\n-    if (workspace.workspaceFolders !== undefined) {\n-        folder = workspace.workspaceFolders[0].uri.fsPath.toString();\n-    }\n+    // TODO?: Workspace folders support Uri's (eg: file://test.txt).\n+    // It might be a good idea to test if the uri points to a file.\n+    const workspaceFolderPath = workspace.workspaceFolders?.[0]?.uri.fsPath ?? '.';\n \n-    const command = expandPathResolving(config.raLspServerPath);\n-    if (spawnSync(command, [\"--version\"]).status !== 0) {\n+    const raLspServerPath = expandPathResolving(config.raLspServerPath);\n+    if (spawnSync(raLspServerPath, [\"--version\"]).status !== 0) {\n         window.showErrorMessage(\n-            `Unable to execute '${command} --version'\n-\n-Perhaps it is not in $PATH?\n-\n-PATH=${process.env.PATH}\n-`);\n+            `Unable to execute '${raLspServerPath} --version'\\n\\n` +\n+            `Perhaps it is not in $PATH?\\n\\n` +\n+            `PATH=${process.env.PATH}\\n`\n+        );\n     }\n     const run: lc.Executable = {\n-        command,\n-        options: { cwd: folder },\n+        command: raLspServerPath,\n+        options: { cwd: workspaceFolderPath },\n     };\n     const serverOptions: lc.ServerOptions = {\n         run,\n@@ -43,8 +39,7 @@ PATH=${process.env.PATH}\n             cargoWatchEnable: config.cargoWatchOptions.enable,\n             cargoWatchArgs: config.cargoWatchOptions.arguments,\n             cargoWatchCommand: config.cargoWatchOptions.command,\n-            cargoWatchAllTargets:\n-                config.cargoWatchOptions.allTargets,\n+            cargoWatchAllTargets: config.cargoWatchOptions.allTargets,\n             excludeGlobs: config.excludeGlobs,\n             useClientWatching: config.useClientWatching,\n             featureFlags: config.featureFlags,"}, {"sha": "a6957a76ef3dd17a95187e19dcf4743f833f9b7c", "filename": "editors/code/src/color_theme.ts", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b89b22e43eb7e821674e0022f4061442b9e29394/editors%2Fcode%2Fsrc%2Fcolor_theme.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b89b22e43eb7e821674e0022f4061442b9e29394/editors%2Fcode%2Fsrc%2Fcolor_theme.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcolor_theme.ts?ref=b89b22e43eb7e821674e0022f4061442b9e29394", "patch": "@@ -33,6 +33,7 @@ export class ColorTheme {\n                 : typeof rule.scope === 'string'\n                     ? [rule.scope]\n                     : rule.scope;\n+\n             for (const scope of scopes) {\n                 res.rules.set(scope, rule.settings);\n             }\n@@ -69,13 +70,13 @@ function loadThemeNamed(themeName: string): ColorTheme {\n         );\n     }\n \n-    const themePaths = vscode.extensions.all\n+    const themePaths: string[] = vscode.extensions.all\n         .filter(isTheme)\n-        .flatMap(ext => {\n-            return ext.packageJSON.contributes.themes\n+        .flatMap(\n+            ext => ext.packageJSON.contributes.themes\n                 .filter((it: any) => (it.id || it.label) === themeName)\n-                .map((it: any) => path.join(ext.extensionPath, it.path));\n-        });\n+                .map((it: any) => path.join(ext.extensionPath, it.path))\n+        );\n \n     const res = new ColorTheme();\n     for (const themePath of themePaths) {\n@@ -96,13 +97,12 @@ function loadThemeFile(themePath: string): ColorTheme {\n         return new ColorTheme();\n     }\n     const obj = jsonc.parse(text);\n-    const tokenColors = obj?.tokenColors ?? [];\n+    const tokenColors: TextMateRule[] = obj?.tokenColors ?? [];\n     const res = ColorTheme.fromRules(tokenColors);\n \n-    for (const include in obj?.include ?? []) {\n+    for (const include of obj?.include ?? []) {\n         const includePath = path.join(path.dirname(themePath), include);\n-        const tmp = loadThemeFile(includePath);\n-        res.mergeFrom(tmp);\n+        res.mergeFrom(loadThemeFile(includePath));\n     }\n \n     return res;"}, {"sha": "25eaebcbecc56e9ae8e3ad21e8df6062da8b5681", "filename": "editors/code/src/commands/on_enter.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b89b22e43eb7e821674e0022f4061442b9e29394/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b89b22e43eb7e821674e0022f4061442b9e29394/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts?ref=b89b22e43eb7e821674e0022f4061442b9e29394", "patch": "@@ -7,7 +7,7 @@ import { Cmd, Ctx } from '../ctx';\n async function handleKeypress(ctx: Ctx) {\n     const editor = ctx.activeRustEditor;\n     const client = ctx.client;\n-    if (!editor) return false;\n+\n     if (!editor || !client) return false;\n \n     const request: lc.TextDocumentPositionParams = {"}, {"sha": "c750b2d5c861bab5d6348af4bf57970c0af26fbd", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b89b22e43eb7e821674e0022f4061442b9e29394/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b89b22e43eb7e821674e0022f4061442b9e29394/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=b89b22e43eb7e821674e0022f4061442b9e29394", "patch": "@@ -23,9 +23,9 @@ export class Config {\n     lruCapacity: null | number = null;\n     displayInlayHints = true;\n     maxInlayHintLength: null | number = null;\n-    excludeGlobs = [];\n+    excludeGlobs: string[] = [];\n     useClientWatching = true;\n-    featureFlags = {};\n+    featureFlags: Record<string, boolean> = {};\n     // for internal use\n     withSysroot: null | boolean = null;\n     cargoWatchOptions: CargoWatchOptions = {"}, {"sha": "e90fb8acc1f5de6aae8d08b175c60dd02abc5016", "filename": "editors/code/src/highlighting.ts", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b89b22e43eb7e821674e0022f4061442b9e29394/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b89b22e43eb7e821674e0022f4061442b9e29394/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fhighlighting.ts?ref=b89b22e43eb7e821674e0022f4061442b9e29394", "patch": "@@ -69,7 +69,7 @@ interface Decoration {\n \n // Based on this HSL-based color generator: https://gist.github.com/bendc/76c48ce53299e6078a76\n function fancify(seed: string, shade: 'light' | 'dark') {\n-    const random = randomU32Numbers(hashString(seed))\n+    const random = randomU32Numbers(hashString(seed));\n     const randomInt = (min: number, max: number) => {\n         return Math.abs(random()) % (max - min + 1) + min;\n     };\n@@ -253,14 +253,14 @@ function randomU32Numbers(seed: number) {\n         random ^= random >> 17;\n         random ^= random << 5;\n         random |= 0;\n-        return random\n-    }\n+        return random;\n+    };\n }\n \n function hashString(str: string): number {\n     let res = 0;\n     for (let i = 0; i < str.length; ++i) {\n-        const c = str.codePointAt(i)!!;\n+        const c = str.codePointAt(i)!;\n         res = (res * 31 + c) & ~0;\n     }\n     return res;"}, {"sha": "5efce41f404f26228ba4cfd61d4c88d980fb3468", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b89b22e43eb7e821674e0022f4061442b9e29394/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b89b22e43eb7e821674e0022f4061442b9e29394/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=b89b22e43eb7e821674e0022f4061442b9e29394", "patch": "@@ -6,7 +6,7 @@ import { activateStatusDisplay } from './status_display';\n import { Ctx } from './ctx';\n import { activateHighlighting } from './highlighting';\n \n-let ctx!: Ctx;\n+let ctx: Ctx | undefined;\n \n export async function activate(context: vscode.ExtensionContext) {\n     ctx = new Ctx(context);"}]}