{"sha": "870a6dc230f14347fe71b7a27919607630cef033", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3MGE2ZGMyMzBmMTQzNDdmZTcxYjdhMjc5MTk2MDc2MzBjZWYwMzM=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-06-03T16:35:50Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-06-19T07:52:35Z"}, "message": "Don't ICE when pattern matching packed structs", "tree": {"sha": "f8bf9583fe216d8aa9d78da00b0292adc4429a2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8bf9583fe216d8aa9d78da00b0292adc4429a2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/870a6dc230f14347fe71b7a27919607630cef033", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/870a6dc230f14347fe71b7a27919607630cef033", "html_url": "https://github.com/rust-lang/rust/commit/870a6dc230f14347fe71b7a27919607630cef033", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/870a6dc230f14347fe71b7a27919607630cef033/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21b1bd69b0fcd4861aad98ed2fef37a71cb70850", "url": "https://api.github.com/repos/rust-lang/rust/commits/21b1bd69b0fcd4861aad98ed2fef37a71cb70850", "html_url": "https://github.com/rust-lang/rust/commit/21b1bd69b0fcd4861aad98ed2fef37a71cb70850"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "ef8d0bb1e277e6dc90e0ca604193eaabb9e57441", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/870a6dc230f14347fe71b7a27919607630cef033/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870a6dc230f14347fe71b7a27919607630cef033/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=870a6dc230f14347fe71b7a27919607630cef033", "patch": "@@ -482,7 +482,12 @@ pub fn const_field<'tcx>(\n     trace!(\"const_field: {:?}, {:?}\", field, value);\n     let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env);\n     // get the operand again\n-    let op = ecx.eval_const_to_op(value, None).unwrap();\n+    let mut op = ecx.eval_const_to_op(value, None).unwrap();\n+    // adjust the alignment of `op` to the one of the allocation, since it may be a field of a\n+    // packed struct and thus end up causing an alignment error if we read from it.\n+    if let ConstValue::ByRef(_, alloc) = value.val {\n+        op.force_alignment(alloc.align);\n+    }\n     // downcast\n     let down = match variant {\n         None => op,"}, {"sha": "8e0260988505e042cda5a486e2367ba8a6d693fe", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/870a6dc230f14347fe71b7a27919607630cef033/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870a6dc230f14347fe71b7a27919607630cef033/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=870a6dc230f14347fe71b7a27919607630cef033", "patch": "@@ -4,7 +4,9 @@\n use std::convert::TryInto;\n \n use rustc::{mir, ty};\n-use rustc::ty::layout::{self, Size, LayoutOf, TyLayout, HasDataLayout, IntegerExt, VariantIdx};\n+use rustc::ty::layout::{\n+    self, Size, LayoutOf, TyLayout, HasDataLayout, IntegerExt, VariantIdx, Align,\n+};\n \n use rustc::mir::interpret::{\n     GlobalId, AllocId, CheckInAllocMsg,\n@@ -177,6 +179,21 @@ impl<'tcx, Tag> From<ImmTy<'tcx, Tag>> for OpTy<'tcx, Tag> {\n     }\n }\n \n+impl<'tcx, Tag> OpTy<'tcx, Tag> {\n+    /// This function exists solely for pattern matching. If we pattern match a packed struct with\n+    /// an ADT field, the constant representing that field will have lost the information about the\n+    /// packedness. We could clone the allocation and adjust the alignment, but that seems wasteful,\n+    /// since the alignment is already encoded in the allocation. We know it is alright, because\n+    /// validation checked everything before the initial constant entered match checking.\n+    pub(crate) fn force_alignment(&mut self, align: Align) {\n+        if let Operand::Indirect(mplace) = &mut self.op {\n+            if align < mplace.align {\n+                mplace.align = align;\n+            }\n+        }\n+    }\n+}\n+\n impl<'tcx, Tag: Copy> ImmTy<'tcx, Tag>\n {\n     #[inline]"}]}