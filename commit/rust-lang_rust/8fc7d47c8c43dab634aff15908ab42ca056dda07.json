{"sha": "8fc7d47c8c43dab634aff15908ab42ca056dda07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmYzdkNDdjOGM0M2RhYjYzNGFmZjE1OTA4YWI0MmNhMDU2ZGRhMDc=", "commit": {"author": {"name": "Roman Proskuryakov", "email": "humbug@deeptown.org", "date": "2020-07-05T16:56:41Z"}, "committer": {"name": "Roman Proskuryakov", "email": "humbug@deeptown.org", "date": "2020-07-05T16:56:41Z"}, "message": "Fix array docs (remove mentions about 0 to 32 where possible)", "tree": {"sha": "73888cd8b09e56fa47bfe234b359b242047763e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73888cd8b09e56fa47bfe234b359b242047763e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fc7d47c8c43dab634aff15908ab42ca056dda07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fc7d47c8c43dab634aff15908ab42ca056dda07", "html_url": "https://github.com/rust-lang/rust/commit/8fc7d47c8c43dab634aff15908ab42ca056dda07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fc7d47c8c43dab634aff15908ab42ca056dda07/comments", "author": {"login": "kpp", "id": 467709, "node_id": "MDQ6VXNlcjQ2NzcwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/467709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kpp", "html_url": "https://github.com/kpp", "followers_url": "https://api.github.com/users/kpp/followers", "following_url": "https://api.github.com/users/kpp/following{/other_user}", "gists_url": "https://api.github.com/users/kpp/gists{/gist_id}", "starred_url": "https://api.github.com/users/kpp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kpp/subscriptions", "organizations_url": "https://api.github.com/users/kpp/orgs", "repos_url": "https://api.github.com/users/kpp/repos", "events_url": "https://api.github.com/users/kpp/events{/privacy}", "received_events_url": "https://api.github.com/users/kpp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kpp", "id": 467709, "node_id": "MDQ6VXNlcjQ2NzcwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/467709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kpp", "html_url": "https://github.com/kpp", "followers_url": "https://api.github.com/users/kpp/followers", "following_url": "https://api.github.com/users/kpp/following{/other_user}", "gists_url": "https://api.github.com/users/kpp/gists{/gist_id}", "starred_url": "https://api.github.com/users/kpp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kpp/subscriptions", "organizations_url": "https://api.github.com/users/kpp/orgs", "repos_url": "https://api.github.com/users/kpp/repos", "events_url": "https://api.github.com/users/kpp/events{/privacy}", "received_events_url": "https://api.github.com/users/kpp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44dd95e4d008e9edc112dc1a599eac028889e015", "url": "https://api.github.com/repos/rust-lang/rust/commits/44dd95e4d008e9edc112dc1a599eac028889e015", "html_url": "https://github.com/rust-lang/rust/commit/44dd95e4d008e9edc112dc1a599eac028889e015"}], "stats": {"total": 13, "additions": 4, "deletions": 9}, "files": [{"sha": "86de509e80a106ab0930531df3e7163359bd23b5", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8fc7d47c8c43dab634aff15908ab42ca056dda07/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fc7d47c8c43dab634aff15908ab42ca056dda07/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=8fc7d47c8c43dab634aff15908ab42ca056dda07", "patch": "@@ -460,21 +460,17 @@ mod prim_pointer {}\n /// * A repeat expression `[x; N]`, which produces an array with `N` copies of `x`.\n ///   The type of `x` must be [`Copy`][copy].\n ///\n-/// Arrays of sizes from 0 to 32 (inclusive) implement the following traits if\n-/// the element type allows it:\n+/// Arrays of *any* size implement the following traits if the element type allows it:\n ///\n /// - [`Debug`][debug]\n /// - [`IntoIterator`][intoiterator] (implemented for `&[T; N]` and `&mut [T; N]`)\n /// - [`PartialEq`][partialeq], [`PartialOrd`][partialord], [`Eq`][eq], [`Ord`][ord]\n /// - [`Hash`][hash]\n /// - [`AsRef`][asref], [`AsMut`][asmut]\n /// - [`Borrow`][borrow], [`BorrowMut`][borrowmut]\n-/// - [`Default`][default]\n ///\n-/// This limitation on the size `N` exists because Rust does not yet support\n-/// code that is generic over the size of an array type. `[Foo; 3]` and `[Bar; 3]`\n-/// are instances of same generic type `[T; 3]`, but `[Foo; 3]` and `[Foo; 5]` are\n-/// entirely different types. As a stopgap, trait implementations are\n+/// Arrays of sizes from 0 to 32 (inclusive) implement [`Default`][default] trait\n+/// if the element type allows it. As a stopgap, trait implementations are\n /// statically generated up to size 32.\n ///\n /// Arrays of *any* size are [`Copy`][copy] if the element type is [`Copy`][copy]\n@@ -521,8 +517,7 @@ mod prim_pointer {}\n /// for x in array.iter() { }\n /// ```\n ///\n-/// If the array has 32 or fewer elements (see above), you can also use the\n-/// array reference's [`IntoIterator`] implementation:\n+/// You can also use the array reference's [`IntoIterator`] implementation:\n ///\n /// ```\n /// # let array: [i32; 3] = [0; 3];"}]}