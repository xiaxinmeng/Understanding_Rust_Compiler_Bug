{"sha": "42f28d31bf68abc03141d62054625c50d002c872", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyZjI4ZDMxYmY2OGFiYzAzMTQxZDYyMDU0NjI1YzUwZDAwMmM4NzI=", "commit": {"author": {"name": "QuietMisdreavus", "email": "bryan@icesoldier.me", "date": "2016-10-15T14:46:43Z"}, "committer": {"name": "QuietMisdreavus", "email": "bryan@icesoldier.me", "date": "2016-10-15T14:58:04Z"}, "message": "rustdoc: apply proper indent when where clauses aren't on their own line", "tree": {"sha": "3ba5f768c3fb8fa51bcc1de289a392eb103eb95e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ba5f768c3fb8fa51bcc1de289a392eb103eb95e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42f28d31bf68abc03141d62054625c50d002c872", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42f28d31bf68abc03141d62054625c50d002c872", "html_url": "https://github.com/rust-lang/rust/commit/42f28d31bf68abc03141d62054625c50d002c872", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42f28d31bf68abc03141d62054625c50d002c872/comments", "author": null, "committer": null, "parents": [{"sha": "c6ab68528a468aab1c501f9572926ca64dbdaced", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6ab68528a468aab1c501f9572926ca64dbdaced", "html_url": "https://github.com/rust-lang/rust/commit/c6ab68528a468aab1c501f9572926ca64dbdaced"}], "stats": {"total": 126, "additions": 96, "deletions": 30}, "files": [{"sha": "3b2f2430993a15cc902d851cb6330e089f7082f3", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/42f28d31bf68abc03141d62054625c50d002c872/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42f28d31bf68abc03141d62054625c50d002c872/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=42f28d31bf68abc03141d62054625c50d002c872", "patch": "@@ -50,7 +50,7 @@ pub struct MutableSpace(pub clean::Mutability);\n #[derive(Copy, Clone)]\n pub struct RawMutableSpace(pub clean::Mutability);\n /// Wrapper struct for emitting a where clause from Generics.\n-pub struct WhereClause<'a>(pub &'a clean::Generics);\n+pub struct WhereClause<'a>(pub &'a clean::Generics, pub String);\n /// Wrapper struct for emitting type parameter bounds.\n pub struct TyParamBounds<'a>(pub &'a [clean::TyParamBound]);\n /// Wrapper struct for emitting a comma-separated list of items\n@@ -157,7 +157,7 @@ impl fmt::Display for clean::Generics {\n \n impl<'a> fmt::Display for WhereClause<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        let &WhereClause(gens) = self;\n+        let &WhereClause(gens, ref pad) = self;\n         if gens.where_predicates.is_empty() {\n             return Ok(());\n         }\n@@ -207,8 +207,8 @@ impl<'a> fmt::Display for WhereClause<'a> {\n         if !f.alternate() {\n             clause.push_str(\"</span>\");\n             let plain = format!(\"{:#}\", self);\n-            if plain.len() > 80 {\n-                let padding = repeat(\"&nbsp;\").take(8).collect::<String>();\n+            if plain.len() + pad.len() > 80 {\n+                let padding = repeat(\"&nbsp;\").take(pad.len() + 6).collect::<String>();\n                 clause = clause.replace(\"<br>\", &format!(\"<br>{}\", padding));\n             } else {\n                 clause = clause.replace(\"<br>\", \" \");\n@@ -730,30 +730,44 @@ impl fmt::Display for clean::Type {\n }\n \n fn fmt_impl(i: &clean::Impl, f: &mut fmt::Formatter, link_trait: bool) -> fmt::Result {\n+    let mut plain = String::new();\n+\n     if f.alternate() {\n         write!(f, \"impl{:#} \", i.generics)?;\n     } else {\n         write!(f, \"impl{} \", i.generics)?;\n     }\n+    plain.push_str(&format!(\"impl{:#} \", i.generics));\n+\n     if let Some(ref ty) = i.trait_ {\n-        write!(f, \"{}\",\n-               if i.polarity == Some(clean::ImplPolarity::Negative) { \"!\" } else { \"\" })?;\n+        if i.polarity == Some(clean::ImplPolarity::Negative) {\n+            write!(f, \"!\")?;\n+            plain.push_str(\"!\");\n+        }\n+\n         if link_trait {\n             fmt::Display::fmt(ty, f)?;\n+            plain.push_str(&format!(\"{:#}\", ty));\n         } else {\n             match *ty {\n                 clean::ResolvedPath{ typarams: None, ref path, is_generic: false, .. } => {\n                     let last = path.segments.last().unwrap();\n                     fmt::Display::fmt(&last.name, f)?;\n                     fmt::Display::fmt(&last.params, f)?;\n+                    plain.push_str(&format!(\"{:#}{:#}\", last.name, last.params));\n                 }\n                 _ => unreachable!(),\n             }\n         }\n         write!(f, \" for \")?;\n+        plain.push_str(\" for \");\n     }\n+\n     fmt::Display::fmt(&i.for_, f)?;\n-    fmt::Display::fmt(&WhereClause(&i.generics), f)?;\n+    plain.push_str(&format!(\"{:#}\", i.for_));\n+\n+    let pad = repeat(\" \").take(plain.len() + 1).collect::<String>();\n+    fmt::Display::fmt(&WhereClause(&i.generics, pad), f)?;\n     Ok(())\n }\n \n@@ -899,7 +913,11 @@ impl<'a> fmt::Display for Method<'a> {\n         } else {\n             output = output.replace(\"<br>\", \"\");\n         }\n-        write!(f, \"{}\", output)\n+        if f.alternate() {\n+            write!(f, \"{}\", output.replace(\"<br>\", \"\\n\"))\n+        } else {\n+            write!(f, \"{}\", output)\n+        }\n     }\n }\n "}, {"sha": "067cffc877934e3fc215daf5356e730b65d6b1c9", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 70, "deletions": 22, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/42f28d31bf68abc03141d62054625c50d002c872/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42f28d31bf68abc03141d62054625c50d002c872/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=42f28d31bf68abc03141d62054625c50d002c872", "patch": "@@ -1983,33 +1983,43 @@ fn item_function(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n            abi = AbiSpace(f.abi),\n            name = it.name.as_ref().unwrap(),\n            generics = f.generics,\n-           where_clause = WhereClause(&f.generics),\n+           where_clause = WhereClause(&f.generics, \"  \".to_string()),\n            decl = Method(&f.decl, &indent))?;\n     document(w, cx, it)\n }\n \n fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n               t: &clean::Trait) -> fmt::Result {\n     let mut bounds = String::new();\n+    let mut bounds_plain = String::new();\n     if !t.bounds.is_empty() {\n         if !bounds.is_empty() {\n             bounds.push(' ');\n+            bounds_plain.push(' ');\n         }\n         bounds.push_str(\": \");\n+        bounds_plain.push_str(\": \");\n         for (i, p) in t.bounds.iter().enumerate() {\n-            if i > 0 { bounds.push_str(\" + \"); }\n+            if i > 0 {\n+                bounds.push_str(\" + \");\n+                bounds_plain.push_str(\" + \");\n+            }\n             bounds.push_str(&format!(\"{}\", *p));\n+            bounds_plain.push_str(&format!(\"{:#}\", *p));\n         }\n     }\n \n+    // Where clauses in traits are indented nine spaces, per rustdoc.css\n+    let indent = \"         \".to_string();\n+\n     // Output the trait definition\n     write!(w, \"<pre class='rust trait'>{}{}trait {}{}{}{} \",\n            VisSpace(&it.visibility),\n            UnsafetySpace(t.unsafety),\n            it.name.as_ref().unwrap(),\n            t.generics,\n            bounds,\n-           WhereClause(&t.generics))?;\n+           WhereClause(&t.generics, indent))?;\n \n     let types = t.items.iter().filter(|m| m.is_associated_type()).collect::<Vec<_>>();\n     let consts = t.items.iter().filter(|m| m.is_associated_const()).collect::<Vec<_>>();\n@@ -2023,31 +2033,31 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n         write!(w, \"{{\\n\")?;\n         for t in &types {\n             write!(w, \"    \")?;\n-            render_assoc_item(w, t, AssocItemLink::Anchor(None))?;\n+            render_assoc_item(w, t, AssocItemLink::Anchor(None), ItemType::Trait)?;\n             write!(w, \";\\n\")?;\n         }\n         if !types.is_empty() && !consts.is_empty() {\n             w.write_str(\"\\n\")?;\n         }\n         for t in &consts {\n             write!(w, \"    \")?;\n-            render_assoc_item(w, t, AssocItemLink::Anchor(None))?;\n+            render_assoc_item(w, t, AssocItemLink::Anchor(None), ItemType::Trait)?;\n             write!(w, \";\\n\")?;\n         }\n         if !consts.is_empty() && !required.is_empty() {\n             w.write_str(\"\\n\")?;\n         }\n         for m in &required {\n             write!(w, \"    \")?;\n-            render_assoc_item(w, m, AssocItemLink::Anchor(None))?;\n+            render_assoc_item(w, m, AssocItemLink::Anchor(None), ItemType::Trait)?;\n             write!(w, \";\\n\")?;\n         }\n         if !required.is_empty() && !provided.is_empty() {\n             w.write_str(\"\\n\")?;\n         }\n         for m in &provided {\n             write!(w, \"    \")?;\n-            render_assoc_item(w, m, AssocItemLink::Anchor(None))?;\n+            render_assoc_item(w, m, AssocItemLink::Anchor(None), ItemType::Trait)?;\n             write!(w, \" {{ ... }}\\n\")?;\n         }\n         write!(w, \"}}\")?;\n@@ -2068,7 +2078,7 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                id = id,\n                stab = m.stability_class(),\n                ns_id = ns_id)?;\n-        render_assoc_item(w, m, AssocItemLink::Anchor(Some(&id)))?;\n+        render_assoc_item(w, m, AssocItemLink::Anchor(Some(&id)), ItemType::Impl)?;\n         write!(w, \"</code>\")?;\n         render_stability_since(w, m, t)?;\n         write!(w, \"</span></h3>\")?;\n@@ -2222,15 +2232,17 @@ fn render_stability_since(w: &mut fmt::Formatter,\n \n fn render_assoc_item(w: &mut fmt::Formatter,\n                      item: &clean::Item,\n-                     link: AssocItemLink) -> fmt::Result {\n+                     link: AssocItemLink,\n+                     parent: ItemType) -> fmt::Result {\n     fn method(w: &mut fmt::Formatter,\n               meth: &clean::Item,\n               unsafety: hir::Unsafety,\n               constness: hir::Constness,\n               abi: abi::Abi,\n               g: &clean::Generics,\n               d: &clean::FnDecl,\n-              link: AssocItemLink)\n+              link: AssocItemLink,\n+              parent: ItemType)\n               -> fmt::Result {\n         let name = meth.name.as_ref().unwrap();\n         let anchor = format!(\"#{}.{}\", meth.type_(), name);\n@@ -2260,7 +2272,17 @@ fn render_assoc_item(w: &mut fmt::Formatter,\n                              AbiSpace(abi),\n                              name,\n                              *g);\n-        let indent = repeat(\"&nbsp;\").take(prefix.len()).collect::<String>();\n+        let mut indent = repeat(\"&nbsp;\").take(prefix.len()).collect::<String>();\n+        let where_indent = if parent == ItemType::Trait {\n+            indent += \"&nbsp;&nbsp;&nbsp;&nbsp;\";\n+            \"        \".to_string()\n+        } else if parent == ItemType::Impl {\n+            \"  \".to_string()\n+        } else {\n+            let prefix = prefix + &format!(\"{:#}\", Method(d, &indent));\n+            let prefix = prefix.lines().last().unwrap();\n+            repeat(\" \").take(prefix.len() + 1).collect::<String>()\n+        };\n         write!(w, \"{}{}{}fn <a href='{href}' class='fnname'>{name}</a>\\\n                    {generics}{decl}{where_clause}\",\n                ConstnessSpace(vis_constness),\n@@ -2270,18 +2292,17 @@ fn render_assoc_item(w: &mut fmt::Formatter,\n                name = name,\n                generics = *g,\n                decl = Method(d, &indent),\n-               where_clause = WhereClause(g))\n+               where_clause = WhereClause(g, where_indent))\n     }\n     match item.inner {\n         clean::StrippedItem(..) => Ok(()),\n         clean::TyMethodItem(ref m) => {\n             method(w, item, m.unsafety, hir::Constness::NotConst,\n-                   m.abi, &m.generics, &m.decl, link)\n+                   m.abi, &m.generics, &m.decl, link, parent)\n         }\n         clean::MethodItem(ref m) => {\n             method(w, item, m.unsafety, m.constness,\n-                   m.abi, &m.generics, &m.decl,\n-                   link)\n+                   m.abi, &m.generics, &m.decl, link, parent)\n         }\n         clean::AssociatedConstItem(ref ty, ref default) => {\n             assoc_const(w, item, ty, default.as_ref(), link)\n@@ -2378,11 +2399,15 @@ fn item_enum(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n              e: &clean::Enum) -> fmt::Result {\n     write!(w, \"<pre class='rust enum'>\")?;\n     render_attributes(w, it)?;\n+    let padding = format!(\"{}enum {}{:#} \",\n+                          VisSpace(&it.visibility),\n+                          it.name.as_ref().unwrap(),\n+                          e.generics);\n     write!(w, \"{}enum {}{}{}\",\n            VisSpace(&it.visibility),\n            it.name.as_ref().unwrap(),\n            e.generics,\n-           WhereClause(&e.generics))?;\n+           WhereClause(&e.generics, padding))?;\n     if e.variants.is_empty() && !e.variants_stripped {\n         write!(w, \" {{}}\")?;\n     } else {\n@@ -2517,17 +2542,24 @@ fn render_struct(w: &mut fmt::Formatter, it: &clean::Item,\n                  fields: &[clean::Item],\n                  tab: &str,\n                  structhead: bool) -> fmt::Result {\n+    let mut plain = String::new();\n     write!(w, \"{}{}{}\",\n            VisSpace(&it.visibility),\n            if structhead {\"struct \"} else {\"\"},\n            it.name.as_ref().unwrap())?;\n+    plain.push_str(&format!(\"{}{}{}\",\n+                            VisSpace(&it.visibility),\n+                            if structhead {\"struct \"} else {\"\"},\n+                            it.name.as_ref().unwrap()));\n     if let Some(g) = g {\n+        plain.push_str(&format!(\"{:#}\", g));\n         write!(w, \"{}\", g)?\n     }\n     match ty {\n         doctree::Plain => {\n             if let Some(g) = g {\n-                write!(w, \"{}\", WhereClause(g))?\n+                let pad = repeat(\" \").take(plain.len() + 1).collect::<String>();\n+                write!(w, \"{}\", WhereClause(g, pad))?\n             }\n             let mut has_visible_fields = false;\n             write!(w, \" {{\")?;\n@@ -2556,30 +2588,37 @@ fn render_struct(w: &mut fmt::Formatter, it: &clean::Item,\n         }\n         doctree::Tuple => {\n             write!(w, \"(\")?;\n+            plain.push_str(\"(\");\n             for (i, field) in fields.iter().enumerate() {\n                 if i > 0 {\n                     write!(w, \", \")?;\n+                    plain.push_str(\", \");\n                 }\n                 match field.inner {\n                     clean::StrippedItem(box clean::StructFieldItem(..)) => {\n+                        plain.push_str(\"_\");\n                         write!(w, \"_\")?\n                     }\n                     clean::StructFieldItem(ref ty) => {\n+                        plain.push_str(&format!(\"{}{:#}\", VisSpace(&field.visibility), *ty));\n                         write!(w, \"{}{}\", VisSpace(&field.visibility), *ty)?\n                     }\n                     _ => unreachable!()\n                 }\n             }\n             write!(w, \")\")?;\n+            plain.push_str(\")\");\n             if let Some(g) = g {\n-                write!(w, \"{}\", WhereClause(g))?\n+                let pad = repeat(\" \").take(plain.len() + 1).collect::<String>();\n+                write!(w, \"{}\", WhereClause(g, pad))?\n             }\n             write!(w, \";\")?;\n         }\n         doctree::Unit => {\n             // Needed for PhantomData.\n             if let Some(g) = g {\n-                write!(w, \"{}\", WhereClause(g))?\n+                let pad = repeat(\" \").take(plain.len() + 1).collect::<String>();\n+                write!(w, \"{}\", WhereClause(g, pad))?\n             }\n             write!(w, \";\")?;\n         }\n@@ -2592,13 +2631,20 @@ fn render_union(w: &mut fmt::Formatter, it: &clean::Item,\n                 fields: &[clean::Item],\n                 tab: &str,\n                 structhead: bool) -> fmt::Result {\n+    let mut plain = String::new();\n     write!(w, \"{}{}{}\",\n            VisSpace(&it.visibility),\n            if structhead {\"union \"} else {\"\"},\n            it.name.as_ref().unwrap())?;\n+    plain.push_str(&format!(\"{}{}{}\",\n+                            VisSpace(&it.visibility),\n+                            if structhead {\"union \"} else {\"\"},\n+                            it.name.as_ref().unwrap()));\n     if let Some(g) = g {\n         write!(w, \"{}\", g)?;\n-        write!(w, \"{}\", WhereClause(g))?;\n+        plain.push_str(&format!(\"{:#}\", g));\n+        let pad = repeat(\" \").take(plain.len() + 1).collect::<String>();\n+        write!(w, \"{}\", WhereClause(g, pad))?;\n     }\n \n     write!(w, \" {{\\n{}\", tab)?;\n@@ -2789,7 +2835,7 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n                     write!(w, \"<h4 id='{}' class='{}'>\", id, item_type)?;\n                     write!(w, \"<span id='{}' class='invisible'>\", ns_id)?;\n                     write!(w, \"<code>\")?;\n-                    render_assoc_item(w, item, link.anchor(&id))?;\n+                    render_assoc_item(w, item, link.anchor(&id), ItemType::Impl)?;\n                     write!(w, \"</code>\")?;\n                     render_stability_since_raw(w, item.stable_since(), outer_version)?;\n                     write!(w, \"</span></h4>\\n\")?;\n@@ -2899,10 +2945,12 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n \n fn item_typedef(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                 t: &clean::Typedef) -> fmt::Result {\n+    let indent = format!(\"type {}{:#} \", it.name.as_ref().unwrap(), t.generics);\n+    let indent = repeat(\" \").take(indent.len()).collect::<String>();\n     write!(w, \"<pre class='rust typedef'>type {}{}{where_clause} = {type_};</pre>\",\n            it.name.as_ref().unwrap(),\n            t.generics,\n-           where_clause = WhereClause(&t.generics),\n+           where_clause = WhereClause(&t.generics, indent),\n            type_ = t.type_)?;\n \n     document(w, cx, it)"}]}