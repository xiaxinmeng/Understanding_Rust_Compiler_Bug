{"sha": "18f7b8f20120897ea2f64f0435e0eca0c095a72b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4ZjdiOGYyMDEyMDg5N2VhMmY2NGYwNDM1ZTBlY2EwYzA5NWE3MmI=", "commit": {"author": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-07-25T04:32:42Z"}, "committer": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-07-25T04:32:42Z"}, "message": "Add methods for obtaining iterators over the keys and values of a TreeMap", "tree": {"sha": "c194f44dccd53cdfa6ca01767898af606e4f3be7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c194f44dccd53cdfa6ca01767898af606e4f3be7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18f7b8f20120897ea2f64f0435e0eca0c095a72b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18f7b8f20120897ea2f64f0435e0eca0c095a72b", "html_url": "https://github.com/rust-lang/rust/commit/18f7b8f20120897ea2f64f0435e0eca0c095a72b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18f7b8f20120897ea2f64f0435e0eca0c095a72b/comments", "author": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4553453a0f928a4d49492d87b352552919ae4c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4553453a0f928a4d49492d87b352552919ae4c2", "html_url": "https://github.com/rust-lang/rust/commit/a4553453a0f928a4d49492d87b352552919ae4c2"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "9bc0a1abbc5f5206e62f08f2d813d75634361de3", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/18f7b8f20120897ea2f64f0435e0eca0c095a72b/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18f7b8f20120897ea2f64f0435e0eca0c095a72b/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=18f7b8f20120897ea2f64f0435e0eca0c095a72b", "patch": "@@ -141,6 +141,16 @@ impl<K: Ord, V> TreeMap<K, V> {\n     /// Create an empty TreeMap\n     pub fn new() -> TreeMap<K, V> { TreeMap{root: None, length: 0} }\n \n+    /// Get a lazy iterator over the keys in the map.\n+    pub fn keys<'a>(&'a self) -> Keys<'a, K, V> {\n+        self.iter().map(|(k, _v)| k)\n+    }\n+\n+    /// Get a lazy iterator over the values in the map.\n+    pub fn values<'a>(&'a self) -> Values<'a, K, V> {\n+        self.iter().map(|(_k, v)| v)\n+    }\n+\n     /// Get a lazy iterator over the key-value pairs in the map.\n     /// Requires that it be frozen (immutable).\n     pub fn iter<'a>(&'a self) -> Entries<'a, K, V> {\n@@ -381,6 +391,15 @@ pub struct RevMutEntries<'a, K, V> {\n }\n \n \n+/// TreeMap keys iterator\n+pub type Keys<'a, K, V> =\n+    iter::Map<'static, (&'a K, &'a V), &'a K, Entries<'a, K, V>>;\n+\n+/// TreeMap values iterator\n+pub type Values<'a, K, V> =\n+    iter::Map<'static, (&'a K, &'a V), &'a V, Entries<'a, K, V>>;\n+\n+\n // FIXME #5846 we want to be able to choose between &x and &mut x\n // (with many different `x`) below, so we need to optionally pass mut\n // as a tt, but the only thing we can do with a `tt` is pass them to\n@@ -1470,6 +1489,28 @@ mod test_treemap {\n         assert!(m_upper.iter().all(|(_, &x)| x == 0));\n     }\n \n+    #[test]\n+    fn test_keys() {\n+        let vec = vec![(1i, 'a'), (2i, 'b'), (3i, 'c')];\n+        let map = vec.move_iter().collect::<TreeMap<int, char>>();\n+        let keys = map.keys().map(|&k| k).collect::<Vec<int>>();\n+        assert_eq!(keys.len(), 3);\n+        assert!(keys.contains(&1));\n+        assert!(keys.contains(&2));\n+        assert!(keys.contains(&3));\n+    }\n+\n+    #[test]\n+    fn test_values() {\n+        let vec = vec![(1i, 'a'), (2i, 'b'), (3i, 'c')];\n+        let map = vec.move_iter().collect::<TreeMap<int, char>>();\n+        let values = map.values().map(|&v| v).collect::<Vec<char>>();\n+        assert_eq!(values.len(), 3);\n+        assert!(values.contains(&'a'));\n+        assert!(values.contains(&'b'));\n+        assert!(values.contains(&'c'));\n+    }\n+\n     #[test]\n     fn test_eq() {\n         let mut a = TreeMap::new();"}]}