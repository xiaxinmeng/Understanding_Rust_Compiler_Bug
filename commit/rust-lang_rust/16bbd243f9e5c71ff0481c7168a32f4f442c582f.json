{"sha": "16bbd243f9e5c71ff0481c7168a32f4f442c582f", "node_id": "C_kwDOAAsO6NoAKDE2YmJkMjQzZjllNWM3MWZmMDQ4MWM3MTY4YTMyZjRmNDQyYzU4MmY", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-03-25T00:17:25Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-12-06T18:33:02Z"}, "message": "Simplify needless_bool", "tree": {"sha": "4e403bd04c84f0774174771283186d86d8c4b7aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e403bd04c84f0774174771283186d86d8c4b7aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16bbd243f9e5c71ff0481c7168a32f4f442c582f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16bbd243f9e5c71ff0481c7168a32f4f442c582f", "html_url": "https://github.com/rust-lang/rust/commit/16bbd243f9e5c71ff0481c7168a32f4f442c582f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16bbd243f9e5c71ff0481c7168a32f4f442c582f/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f690ef6f5c0d6af58e8e908b8e08c09c4921ac35", "url": "https://api.github.com/repos/rust-lang/rust/commits/f690ef6f5c0d6af58e8e908b8e08c09c4921ac35", "html_url": "https://github.com/rust-lang/rust/commit/f690ef6f5c0d6af58e8e908b8e08c09c4921ac35"}], "stats": {"total": 63, "additions": 19, "deletions": 44}, "files": [{"sha": "d391fbecf82e14ea9b2cffde2267704bd6f8ecf4", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 19, "deletions": 44, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/16bbd243f9e5c71ff0481c7168a32f4f442c582f/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16bbd243f9e5c71ff0481c7168a32f4f442c582f/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=16bbd243f9e5c71ff0481c7168a32f4f442c582f", "patch": "@@ -6,10 +6,10 @@ use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg};\n use clippy_utils::higher;\n use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::sugg::Sugg;\n-use clippy_utils::{get_parent_node, is_else_clause, is_expn_of};\n+use clippy_utils::{get_parent_node, is_else_clause, is_expn_of, peel_blocks, peel_blocks_with_stmt};\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n-use rustc_hir::{BinOpKind, Block, Expr, ExprKind, HirId, Node, StmtKind, UnOp};\n+use rustc_hir::{BinOpKind, Block, Expr, ExprKind, HirId, Node, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Spanned;\n@@ -143,8 +143,8 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessBool {\n                     applicability,\n                 );\n             };\n-            if let ExprKind::Block(then, _) = then.kind {\n-                match (fetch_bool_block(then), fetch_bool_expr(r#else)) {\n+            if let Some((a, b)) = fetch_bool_block(then).and_then(|a| Some((a, fetch_bool_block(r#else)?))) {\n+                match (a, b) {\n                     (RetBool(true), RetBool(true)) | (Bool(true), Bool(true)) => {\n                         span_lint(\n                             cx,\n@@ -167,8 +167,6 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessBool {\n                     (Bool(false), Bool(true)) => reduce(false, true),\n                     _ => (),\n                 }\n-            } else {\n-                panic!(\"IfExpr `then` node is not an `ExprKind::Block`\");\n             }\n         }\n     }\n@@ -271,8 +269,6 @@ fn check_comparison<'a, 'tcx>(\n     right_false: Option<(impl FnOnce(Sugg<'a>) -> Sugg<'a>, &str)>,\n     no_literal: Option<(impl FnOnce(Sugg<'a>, Sugg<'a>) -> Sugg<'a>, &str)>,\n ) {\n-    use self::Expression::{Bool, Other};\n-\n     if let ExprKind::Binary(op, left_side, right_side) = e.kind {\n         let (l_ty, r_ty) = (\n             cx.typeck_results().expr_ty(left_side),\n@@ -304,19 +300,19 @@ fn check_comparison<'a, 'tcx>(\n             }\n \n             match (fetch_bool_expr(left_side), fetch_bool_expr(right_side)) {\n-                (Bool(true), Other) => left_true.map_or((), |(h, m)| {\n+                (Some(true), None) => left_true.map_or((), |(h, m)| {\n                     suggest_bool_comparison(cx, e, right_side, applicability, m, h);\n                 }),\n-                (Other, Bool(true)) => right_true.map_or((), |(h, m)| {\n+                (None, Some(true)) => right_true.map_or((), |(h, m)| {\n                     suggest_bool_comparison(cx, e, left_side, applicability, m, h);\n                 }),\n-                (Bool(false), Other) => left_false.map_or((), |(h, m)| {\n+                (Some(false), None) => left_false.map_or((), |(h, m)| {\n                     suggest_bool_comparison(cx, e, right_side, applicability, m, h);\n                 }),\n-                (Other, Bool(false)) => right_false.map_or((), |(h, m)| {\n+                (None, Some(false)) => right_false.map_or((), |(h, m)| {\n                     suggest_bool_comparison(cx, e, left_side, applicability, m, h);\n                 }),\n-                (Other, Other) => no_literal.map_or((), |(h, m)| {\n+                (None, None) => no_literal.map_or((), |(h, m)| {\n                     let left_side = Sugg::hir_with_applicability(cx, left_side, \"..\", &mut applicability);\n                     let right_side = Sugg::hir_with_applicability(cx, right_side, \"..\", &mut applicability);\n                     span_lint_and_sugg(\n@@ -365,41 +361,20 @@ fn suggest_bool_comparison<'a, 'tcx>(\n enum Expression {\n     Bool(bool),\n     RetBool(bool),\n-    Other,\n }\n \n-fn fetch_bool_block(block: &Block<'_>) -> Expression {\n-    match (&*block.stmts, block.expr.as_ref()) {\n-        (&[], Some(e)) => fetch_bool_expr(&**e),\n-        (&[ref e], None) => {\n-            if let StmtKind::Semi(e) = e.kind {\n-                if let ExprKind::Ret(_) = e.kind {\n-                    fetch_bool_expr(e)\n-                } else {\n-                    Expression::Other\n-                }\n-            } else {\n-                Expression::Other\n-            }\n-        },\n-        _ => Expression::Other,\n+fn fetch_bool_block(expr: &Expr<'_>) -> Option<Expression> {\n+    match peel_blocks_with_stmt(expr).kind {\n+        ExprKind::Ret(Some(ret)) => Some(Expression::RetBool(fetch_bool_expr(ret)?)),\n+        _ => Some(Expression::Bool(fetch_bool_expr(expr)?)),\n     }\n }\n \n-fn fetch_bool_expr(expr: &Expr<'_>) -> Expression {\n-    match expr.kind {\n-        ExprKind::Block(block, _) => fetch_bool_block(block),\n-        ExprKind::Lit(ref lit_ptr) => {\n-            if let LitKind::Bool(value) = lit_ptr.node {\n-                Expression::Bool(value)\n-            } else {\n-                Expression::Other\n-            }\n-        },\n-        ExprKind::Ret(Some(expr)) => match fetch_bool_expr(expr) {\n-            Expression::Bool(value) => Expression::RetBool(value),\n-            _ => Expression::Other,\n-        },\n-        _ => Expression::Other,\n+fn fetch_bool_expr(expr: &Expr<'_>) -> Option<bool> {\n+    if let ExprKind::Lit(ref lit_ptr) = peel_blocks(expr).kind {\n+        if let LitKind::Bool(value) = lit_ptr.node {\n+            return Some(value);\n+        }\n     }\n+    None\n }"}]}