{"sha": "0708fbf5cb6ace691559dcb08423099829519772", "node_id": "C_kwDOAAsO6NoAKDA3MDhmYmY1Y2I2YWNlNjkxNTU5ZGNiMDg0MjMwOTk4Mjk1MTk3NzI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-31T06:03:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-31T06:03:15Z"}, "message": "Rollup merge of #109784 - beetrees:riscv32-time64, r=cuviper\n\nRefactor glibc time64 support, riscv32 always has 64-bit `time_t`\n\nRefactor existing support for 64-bit `time_t` on 32-bit glibc platforms, as riscv32 `time_t` is 64-bit by default. Split out of #109773.", "tree": {"sha": "e71ac3bd746bae7a7cf84f8f18a0fd3ae2d42b21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e71ac3bd746bae7a7cf84f8f18a0fd3ae2d42b21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0708fbf5cb6ace691559dcb08423099829519772", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkJnejCRBK7hj4Ov3rIwAApikIAIWwOsE7LyY1ORRO/cVNY41h\nxBDGGCPxFuZ6vWRrOkGcu8d6o1dkZZL5NKxoDGP33xZaQnCx4l+9xEC6QD5N4tKm\nrC+clhKDL8eEKFjCNW8w2LoqF6WBe3yk1M1tdq2Y4QYevD2TkRKJZ79a6vF7a8nw\nZHaebjxcuQR/8Mr86hhAoFI7bgngxAfzYtB44ikEoEUwl2HPQYABz3dK2G5wQhr7\nlEPrBj437uyVMYD40wuZuNqvDlvx7cNVP2fGQxBznbFjdWBujhirKfAZE2gHJv2/\nz84Lju1Q8n+L17bhOWA5YTt7r1SOQViTYEc/a2606ZT2wrIreBBeo6JIFnKUx5c=\n=r22Y\n-----END PGP SIGNATURE-----\n", "payload": "tree e71ac3bd746bae7a7cf84f8f18a0fd3ae2d42b21\nparent 3f30b514ab19bdc876b75b4ca3bf65d3e9b9017b\nparent 8d1bf505ff256a36be34f5f8ce676182ee0e5145\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1680242595 +0200\ncommitter GitHub <noreply@github.com> 1680242595 +0200\n\nRollup merge of #109784 - beetrees:riscv32-time64, r=cuviper\n\nRefactor glibc time64 support, riscv32 always has 64-bit `time_t`\n\nRefactor existing support for 64-bit `time_t` on 32-bit glibc platforms, as riscv32 `time_t` is 64-bit by default. Split out of #109773.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0708fbf5cb6ace691559dcb08423099829519772", "html_url": "https://github.com/rust-lang/rust/commit/0708fbf5cb6ace691559dcb08423099829519772", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0708fbf5cb6ace691559dcb08423099829519772/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f30b514ab19bdc876b75b4ca3bf65d3e9b9017b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f30b514ab19bdc876b75b4ca3bf65d3e9b9017b", "html_url": "https://github.com/rust-lang/rust/commit/3f30b514ab19bdc876b75b4ca3bf65d3e9b9017b"}, {"sha": "8d1bf505ff256a36be34f5f8ce676182ee0e5145", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d1bf505ff256a36be34f5f8ce676182ee0e5145", "html_url": "https://github.com/rust-lang/rust/commit/8d1bf505ff256a36be34f5f8ce676182ee0e5145"}], "stats": {"total": 50, "additions": 36, "deletions": 14}, "files": [{"sha": "6f53583409db2883d39dfa204816e5a849f643f7", "filename": "library/std/src/sys/unix/time.rs", "status": "modified", "additions": 36, "deletions": 14, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0708fbf5cb6ace691559dcb08423099829519772/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0708fbf5cb6ace691559dcb08423099829519772/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs?ref=0708fbf5cb6ace691559dcb08423099829519772", "patch": "@@ -174,6 +174,34 @@ impl From<libc::timespec> for Timespec {\n     }\n }\n \n+#[cfg(all(\n+    target_os = \"linux\",\n+    target_env = \"gnu\",\n+    target_pointer_width = \"32\",\n+    not(target_arch = \"riscv32\")\n+))]\n+#[repr(C)]\n+pub(in crate::sys::unix) struct __timespec64 {\n+    pub(in crate::sys::unix) tv_sec: i64,\n+    #[cfg(target_endian = \"big\")]\n+    _padding: i32,\n+    pub(in crate::sys::unix) tv_nsec: i32,\n+    #[cfg(target_endian = \"little\")]\n+    _padding: i32,\n+}\n+\n+#[cfg(all(\n+    target_os = \"linux\",\n+    target_env = \"gnu\",\n+    target_pointer_width = \"32\",\n+    not(target_arch = \"riscv32\")\n+))]\n+impl From<__timespec64> for Timespec {\n+    fn from(t: __timespec64) -> Timespec {\n+        Timespec::new(t.tv_sec, t.tv_nsec.into())\n+    }\n+}\n+\n #[cfg(any(\n     all(target_os = \"macos\", any(not(target_arch = \"aarch64\"))),\n     target_os = \"ios\",\n@@ -352,29 +380,23 @@ mod inner {\n     impl Timespec {\n         pub fn now(clock: libc::clockid_t) -> Timespec {\n             // Try to use 64-bit time in preparation for Y2038.\n-            #[cfg(all(target_os = \"linux\", target_env = \"gnu\", target_pointer_width = \"32\"))]\n+            #[cfg(all(\n+                target_os = \"linux\",\n+                target_env = \"gnu\",\n+                target_pointer_width = \"32\",\n+                not(target_arch = \"riscv32\")\n+            ))]\n             {\n                 use crate::sys::weak::weak;\n \n                 // __clock_gettime64 was added to 32-bit arches in glibc 2.34,\n                 // and it handles both vDSO calls and ENOSYS fallbacks itself.\n-                weak!(fn __clock_gettime64(libc::clockid_t, *mut __timespec64) -> libc::c_int);\n-\n-                #[repr(C)]\n-                struct __timespec64 {\n-                    tv_sec: i64,\n-                    #[cfg(target_endian = \"big\")]\n-                    _padding: i32,\n-                    tv_nsec: i32,\n-                    #[cfg(target_endian = \"little\")]\n-                    _padding: i32,\n-                }\n+                weak!(fn __clock_gettime64(libc::clockid_t, *mut super::__timespec64) -> libc::c_int);\n \n                 if let Some(clock_gettime64) = __clock_gettime64.get() {\n                     let mut t = MaybeUninit::uninit();\n                     cvt(unsafe { clock_gettime64(clock, t.as_mut_ptr()) }).unwrap();\n-                    let t = unsafe { t.assume_init() };\n-                    return Timespec::new(t.tv_sec, t.tv_nsec as i64);\n+                    return Timespec::from(unsafe { t.assume_init() });\n                 }\n             }\n "}]}