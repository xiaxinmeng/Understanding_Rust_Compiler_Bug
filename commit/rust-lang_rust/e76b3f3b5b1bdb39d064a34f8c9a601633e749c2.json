{"sha": "e76b3f3b5b1bdb39d064a34f8c9a601633e749c2", "node_id": "C_kwDOAAsO6NoAKGU3NmIzZjNiNWIxYmRiMzlkMDY0YTM0ZjhjOWE2MDE2MzNlNzQ5YzI", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-04-09T21:14:35Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-05-12T00:16:25Z"}, "message": "Rename `unsigned_offset_from` to `sub_ptr`", "tree": {"sha": "d3f8806a82da3810133c3520cdf89acb8a1186a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3f8806a82da3810133c3520cdf89acb8a1186a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e76b3f3b5b1bdb39d064a34f8c9a601633e749c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e76b3f3b5b1bdb39d064a34f8c9a601633e749c2", "html_url": "https://github.com/rust-lang/rust/commit/e76b3f3b5b1bdb39d064a34f8c9a601633e749c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e76b3f3b5b1bdb39d064a34f8c9a601633e749c2/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89a18cb60053a6c1b3b5f817246ddfd917be1e3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/89a18cb60053a6c1b3b5f817246ddfd917be1e3e", "html_url": "https://github.com/rust-lang/rust/commit/89a18cb60053a6c1b3b5f817246ddfd917be1e3e"}], "stats": {"total": 68, "additions": 46, "deletions": 22}, "files": [{"sha": "f7a83373e870bed0b8893c9e36e2a10484078913", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e76b3f3b5b1bdb39d064a34f8c9a601633e749c2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76b3f3b5b1bdb39d064a34f8c9a601633e749c2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=e76b3f3b5b1bdb39d064a34f8c9a601633e749c2", "patch": "@@ -721,7 +721,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             let diff_bytes = fx.bcx.ins().isub(ptr, base);\n             // FIXME this can be an exact division.\n             let diff = if intrinsic == sym::ptr_offset_from_unsigned {\n-                // Because diff_bytes ULT isize::MAX, this would be fine as signed,\n+                // Because diff_bytes ULE isize::MAX, this would be fine as signed,\n                 // but unsigned is slightly easier to codegen, so might as well.\n                 fx.bcx.ins().udiv_imm(diff_bytes, pointee_size as i64)\n             } else {"}, {"sha": "199b3c9d0290c22abdd80a6aac327a539d67885e", "filename": "library/alloc/src/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e76b3f3b5b1bdb39d064a34f8c9a601633e749c2/library%2Falloc%2Fsrc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76b3f3b5b1bdb39d064a34f8c9a601633e749c2/library%2Falloc%2Fsrc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fslice.rs?ref=e76b3f3b5b1bdb39d064a34f8c9a601633e749c2", "patch": "@@ -1056,7 +1056,7 @@ where\n         fn drop(&mut self) {\n             // `T` is not a zero-sized type, and these are pointers into a slice's elements.\n             unsafe {\n-                let len = self.end.unsigned_offset_from(self.start);\n+                let len = self.end.sub_ptr(self.start);\n                 ptr::copy_nonoverlapping(self.start, self.dest, len);\n             }\n         }"}, {"sha": "5cdee0bd4da492fb082151f98ee1633672262105", "filename": "library/alloc/src/vec/drain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e76b3f3b5b1bdb39d064a34f8c9a601633e749c2/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76b3f3b5b1bdb39d064a34f8c9a601633e749c2/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs?ref=e76b3f3b5b1bdb39d064a34f8c9a601633e749c2", "patch": "@@ -163,7 +163,7 @@ impl<T, A: Allocator> Drop for Drain<'_, T, A> {\n             // it from the original vec but also avoid creating a &mut to the front since that could\n             // invalidate raw pointers to it which some unsafe code might rely on.\n             let vec_ptr = vec.as_mut().as_mut_ptr();\n-            let drop_offset = drop_ptr.unsigned_offset_from(vec_ptr);\n+            let drop_offset = drop_ptr.sub_ptr(vec_ptr);\n             let to_drop = ptr::slice_from_raw_parts_mut(vec_ptr.add(drop_offset), drop_len);\n             ptr::drop_in_place(to_drop);\n         }"}, {"sha": "55dcb84ad16f922d55d198a620ea151ab8e10d91", "filename": "library/alloc/src/vec/in_place_collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e76b3f3b5b1bdb39d064a34f8c9a601633e749c2/library%2Falloc%2Fsrc%2Fvec%2Fin_place_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76b3f3b5b1bdb39d064a34f8c9a601633e749c2/library%2Falloc%2Fsrc%2Fvec%2Fin_place_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fin_place_collect.rs?ref=e76b3f3b5b1bdb39d064a34f8c9a601633e749c2", "patch": "@@ -250,7 +250,7 @@ where\n         let sink =\n             self.try_fold::<_, _, Result<_, !>>(sink, write_in_place_with_drop(end)).unwrap();\n         // iteration succeeded, don't drop head\n-        unsafe { ManuallyDrop::new(sink).dst.unsigned_offset_from(dst_buf) }\n+        unsafe { ManuallyDrop::new(sink).dst.sub_ptr(dst_buf) }\n     }\n }\n "}, {"sha": "1b1ef9130face38781d9b97912f5f314bfdd7bdf", "filename": "library/alloc/src/vec/in_place_drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e76b3f3b5b1bdb39d064a34f8c9a601633e749c2/library%2Falloc%2Fsrc%2Fvec%2Fin_place_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76b3f3b5b1bdb39d064a34f8c9a601633e749c2/library%2Falloc%2Fsrc%2Fvec%2Fin_place_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fin_place_drop.rs?ref=e76b3f3b5b1bdb39d064a34f8c9a601633e749c2", "patch": "@@ -10,7 +10,7 @@ pub(super) struct InPlaceDrop<T> {\n \n impl<T> InPlaceDrop<T> {\n     fn len(&self) -> usize {\n-        unsafe { self.dst.unsigned_offset_from(self.inner) }\n+        unsafe { self.dst.sub_ptr(self.inner) }\n     }\n }\n "}, {"sha": "9b84a1d9b4b641594887d028c961a35e77632e2d", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e76b3f3b5b1bdb39d064a34f8c9a601633e749c2/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76b3f3b5b1bdb39d064a34f8c9a601633e749c2/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=e76b3f3b5b1bdb39d064a34f8c9a601633e749c2", "patch": "@@ -169,7 +169,7 @@ impl<T, A: Allocator> Iterator for IntoIter<T, A> {\n         let exact = if mem::size_of::<T>() == 0 {\n             self.end.addr().wrapping_sub(self.ptr.addr())\n         } else {\n-            unsafe { self.end.unsigned_offset_from(self.ptr) }\n+            unsafe { self.end.sub_ptr(self.ptr) }\n         };\n         (exact, Some(exact))\n     }"}, {"sha": "88e4262922dc515f72a6cf80ecdba672dae4a5fd", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e76b3f3b5b1bdb39d064a34f8c9a601633e749c2/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76b3f3b5b1bdb39d064a34f8c9a601633e749c2/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=e76b3f3b5b1bdb39d064a34f8c9a601633e749c2", "patch": "@@ -1903,7 +1903,7 @@ extern \"rust-intrinsic\" {\n     #[rustc_const_unstable(feature = \"const_ptr_offset_from\", issue = \"92980\")]\n     pub fn ptr_offset_from<T>(ptr: *const T, base: *const T) -> isize;\n \n-    /// See documentation of `<*const T>::unsigned_offset_from` for details.\n+    /// See documentation of `<*const T>::sub_ptr` for details.\n     #[rustc_const_unstable(feature = \"const_ptr_offset_from\", issue = \"92980\")]\n     #[cfg(not(bootstrap))]\n     pub fn ptr_offset_from_unsigned<T>(ptr: *const T, base: *const T) -> usize;"}, {"sha": "5be855bfabb5186b4c7cbaf16aff91df0f448549", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e76b3f3b5b1bdb39d064a34f8c9a601633e749c2/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76b3f3b5b1bdb39d064a34f8c9a601633e749c2/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=e76b3f3b5b1bdb39d064a34f8c9a601633e749c2", "patch": "@@ -622,8 +622,20 @@ impl<T: ?Sized> *const T {\n     /// but it provides slightly more information to the optimizer, which can\n     /// sometimes allow it to optimize slightly better with some backends.\n     ///\n-    /// This method is the inverse of [`add`](#method.add) (and, with the parameters\n-    /// in the other order, of [`sub`](#method.sub)).\n+    /// This method can be though of as recovering the `count` that was passed\n+    /// to [`add`](#method.add) (or, with the parameters in the other order,\n+    /// to [`sub`](#method.sub)).  The following are all equivalent, assuming\n+    /// that their safety preconditions are met:\n+    /// ```rust\n+    /// # #![feature(ptr_unsigned_offset_from)]\n+    /// # unsafe fn blah(ptr: *const i32, origin: *const i32, count: usize) -> bool {\n+    /// ptr.sub_ptr(origin) == count\n+    /// # &&\n+    /// origin.add(count) == ptr\n+    /// # &&\n+    /// ptr.sub(count) == origin\n+    /// # }\n+    /// ```\n     ///\n     /// # Safety\n     ///\n@@ -650,10 +662,10 @@ impl<T: ?Sized> *const T {\n     /// let ptr1: *const i32 = &a[1];\n     /// let ptr2: *const i32 = &a[3];\n     /// unsafe {\n-    ///     assert_eq!(ptr2.unsigned_offset_from(ptr1), 2);\n+    ///     assert_eq!(ptr2.sub_ptr(ptr1), 2);\n     ///     assert_eq!(ptr1.add(2), ptr2);\n     ///     assert_eq!(ptr2.sub(2), ptr1);\n-    ///     assert_eq!(ptr2.unsigned_offset_from(ptr2), 0);\n+    ///     assert_eq!(ptr2.sub_ptr(ptr2), 0);\n     /// }\n     ///\n     /// // This would be incorrect, as the pointers are not correctly ordered:\n@@ -662,7 +674,7 @@ impl<T: ?Sized> *const T {\n     #[unstable(feature = \"ptr_unsigned_offset_from\", issue = \"88888888\")]\n     #[rustc_const_unstable(feature = \"const_ptr_offset_from\", issue = \"92980\")]\n     #[inline]\n-    pub const unsafe fn unsigned_offset_from(self, origin: *const T) -> usize\n+    pub const unsafe fn sub_ptr(self, origin: *const T) -> usize\n     where\n         T: Sized,\n     {"}, {"sha": "c7f297f426bdb0a18bbba119fc3f4fd2e92f2281", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e76b3f3b5b1bdb39d064a34f8c9a601633e749c2/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76b3f3b5b1bdb39d064a34f8c9a601633e749c2/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=e76b3f3b5b1bdb39d064a34f8c9a601633e749c2", "patch": "@@ -798,8 +798,20 @@ impl<T: ?Sized> *mut T {\n     /// but it provides slightly more information to the optimizer, which can\n     /// sometimes allow it to optimize slightly better with some backends.\n     ///\n-    /// This method is the inverse of [`add`](#method.add) (and, with the parameters\n-    /// in the other order, of [`sub`](#method.sub)).\n+    /// This method can be though of as recovering the `count` that was passed\n+    /// to [`add`](#method.add) (or, with the parameters in the other order,\n+    /// to [`sub`](#method.sub)).  The following are all equivalent, assuming\n+    /// that their safety preconditions are met:\n+    /// ```rust\n+    /// # #![feature(ptr_unsigned_offset_from)]\n+    /// # unsafe fn blah(ptr: *mut i32, origin: *mut i32, count: usize) -> bool {\n+    /// ptr.sub_ptr(origin) == count\n+    /// # &&\n+    /// origin.add(count) == ptr\n+    /// # &&\n+    /// ptr.sub(count) == origin\n+    /// # }\n+    /// ```\n     ///\n     /// # Safety\n     ///\n@@ -828,23 +840,23 @@ impl<T: ?Sized> *mut T {\n     ///     let ptr1: *mut i32 = p.add(1);\n     ///     let ptr2: *mut i32 = p.add(3);\n     ///\n-    ///     assert_eq!(ptr2.unsigned_offset_from(ptr1), 2);\n+    ///     assert_eq!(ptr2.sub_ptr(ptr1), 2);\n     ///     assert_eq!(ptr1.add(2), ptr2);\n     ///     assert_eq!(ptr2.sub(2), ptr1);\n-    ///     assert_eq!(ptr2.unsigned_offset_from(ptr2), 0);\n+    ///     assert_eq!(ptr2.sub_ptr(ptr2), 0);\n     /// }\n     ///\n     /// // This would be incorrect, as the pointers are not correctly ordered:\n     /// // ptr1.offset_from(ptr2)\n     #[unstable(feature = \"ptr_unsigned_offset_from\", issue = \"88888888\")]\n     #[rustc_const_unstable(feature = \"const_ptr_offset_from\", issue = \"92980\")]\n     #[inline]\n-    pub const unsafe fn unsigned_offset_from(self, origin: *const T) -> usize\n+    pub const unsafe fn sub_ptr(self, origin: *const T) -> usize\n     where\n         T: Sized,\n     {\n-        // SAFETY: the caller must uphold the safety contract for `unsigned_offset_from`.\n-        unsafe { (self as *const T).unsigned_offset_from(origin) }\n+        // SAFETY: the caller must uphold the safety contract for `sub_ptr`.\n+        unsafe { (self as *const T).sub_ptr(origin) }\n     }\n \n     /// Calculates the offset from a pointer (convenience for `.offset(count as isize)`)."}, {"sha": "6bc60b04b5c64eeaae0b4a7a1c19eb74627bb7b6", "filename": "library/core/src/slice/raw.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e76b3f3b5b1bdb39d064a34f8c9a601633e749c2/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76b3f3b5b1bdb39d064a34f8c9a601633e749c2/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs?ref=e76b3f3b5b1bdb39d064a34f8c9a601633e749c2", "patch": "@@ -215,7 +215,7 @@ pub const fn from_mut<T>(s: &mut T) -> &mut [T] {\n #[unstable(feature = \"slice_from_ptr_range\", issue = \"89792\")]\n pub unsafe fn from_ptr_range<'a, T>(range: Range<*const T>) -> &'a [T] {\n     // SAFETY: the caller must uphold the safety contract for `from_ptr_range`.\n-    unsafe { from_raw_parts(range.start, range.end.unsigned_offset_from(range.start)) }\n+    unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n }\n \n /// Performs the same functionality as [`from_ptr_range`], except that a\n@@ -265,5 +265,5 @@ pub unsafe fn from_ptr_range<'a, T>(range: Range<*const T>) -> &'a [T] {\n #[unstable(feature = \"slice_from_ptr_range\", issue = \"89792\")]\n pub unsafe fn from_mut_ptr_range<'a, T>(range: Range<*mut T>) -> &'a mut [T] {\n     // SAFETY: the caller must uphold the safety contract for `from_mut_ptr_range`.\n-    unsafe { from_raw_parts_mut(range.start, range.end.unsigned_offset_from(range.start)) }\n+    unsafe { from_raw_parts_mut(range.start, range.end.sub_ptr(range.start)) }\n }"}, {"sha": "ad834e885a51ced33aefad37b3c14d75e958d08b", "filename": "src/test/ui/consts/offset_from.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e76b3f3b5b1bdb39d064a34f8c9a601633e749c2/src%2Ftest%2Fui%2Fconsts%2Foffset_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76b3f3b5b1bdb39d064a34f8c9a601633e749c2/src%2Ftest%2Fui%2Fconsts%2Foffset_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from.rs?ref=e76b3f3b5b1bdb39d064a34f8c9a601633e749c2", "patch": "@@ -47,7 +47,7 @@ pub const OFFSET_EQUAL_INTS: isize = {\n pub const OFFSET_UNSIGNED: usize = {\n     let a = ['a', 'b', 'c'];\n     let ptr = a.as_ptr();\n-    unsafe { ptr.add(2).unsigned_offset_from(ptr) }\n+    unsafe { ptr.add(2).sub_ptr(ptr) }\n };\n \n fn main() {"}]}