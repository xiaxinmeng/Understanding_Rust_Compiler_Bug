{"sha": "93199002af05f3a3dfd274fe10633372f2471b73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMTk5MDAyYWYwNWYzYTNkZmQyNzRmZTEwNjMzMzcyZjI0NzFiNzM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-10-08T09:52:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-08T09:52:22Z"}, "message": "Merge #1922\n\n1922: feat(assists): Make raw string unescaped r=matklad a=Geobert\n\nLast piece of https://github.com/rust-analyzer/rust-analyzer/issues/1730\n\nCo-authored-by: Geobert Quach <geobert@protonmail.com>", "tree": {"sha": "7200deed270b234ad2d4c9bcef32242dff46aaba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7200deed270b234ad2d4c9bcef32242dff46aaba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93199002af05f3a3dfd274fe10633372f2471b73", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdnFxWCRBK7hj4Ov3rIwAAdHIIACwfVy11UwQWNSr3nFyoEUV0\nahcH67e9r33SYjYqvsPpnVzmLdSdTQvkCOH+ypgPJqlA3D4y2AYwf+u9SinZmsJx\n3pRgBJlbkJLmSSWT7ltIuwe1PBvDuANv/ltYZgClBQJhe3vaPU7rY0M+tRd0MLLx\n43nxOhqEwya7kHkH586x0vvgFyr3w2WKq95yz6KvdC2Ngsj1lrgLo+03GoY3+boG\nPsmbpXVsab/n7VRlaLZzKQAM4I5wC5F/kXg8psy9tHzh27ueLjXjdEfT1vvRprrS\n9Pb2WEwssoYsaDu57f5hIJlFxWJmZvp2k7FOxltr9r11o5RYe91tK1fK6AR9b4A=\n=g3Xf\n-----END PGP SIGNATURE-----\n", "payload": "tree 7200deed270b234ad2d4c9bcef32242dff46aaba\nparent d9338dfa98964c0dac8fc082c3d9201807feced0\nparent 31663c1368aedfdc52aaea7b54de0097c13cf889\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1570528342 +0000\ncommitter GitHub <noreply@github.com> 1570528342 +0000\n\nMerge #1922\n\n1922: feat(assists): Make raw string unescaped r=matklad a=Geobert\n\nLast piece of https://github.com/rust-analyzer/rust-analyzer/issues/1730\n\nCo-authored-by: Geobert Quach <geobert@protonmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93199002af05f3a3dfd274fe10633372f2471b73", "html_url": "https://github.com/rust-lang/rust/commit/93199002af05f3a3dfd274fe10633372f2471b73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93199002af05f3a3dfd274fe10633372f2471b73/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9338dfa98964c0dac8fc082c3d9201807feced0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9338dfa98964c0dac8fc082c3d9201807feced0", "html_url": "https://github.com/rust-lang/rust/commit/d9338dfa98964c0dac8fc082c3d9201807feced0"}, {"sha": "31663c1368aedfdc52aaea7b54de0097c13cf889", "url": "https://api.github.com/repos/rust-lang/rust/commits/31663c1368aedfdc52aaea7b54de0097c13cf889", "html_url": "https://github.com/rust-lang/rust/commit/31663c1368aedfdc52aaea7b54de0097c13cf889"}], "stats": {"total": 119, "additions": 98, "deletions": 21}, "files": [{"sha": "e9383a89a8521e1786f0bc61091ad65801c4b1e2", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93199002af05f3a3dfd274fe10633372f2471b73/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/93199002af05f3a3dfd274fe10633372f2471b73/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=93199002af05f3a3dfd274fe10633372f2471b73", "patch": "@@ -904,6 +904,7 @@ dependencies = [\n  \"ra_syntax 0.1.0\",\n  \"ra_text_edit 0.1.0\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc_lexer 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"test_utils 0.1.0\",\n ]\n "}, {"sha": "d3b6aeb36a75a0c52c213e322fd0adf9da3b653e", "filename": "crates/ra_assists/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93199002af05f3a3dfd274fe10633372f2471b73/crates%2Fra_assists%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/93199002af05f3a3dfd274fe10633372f2471b73/crates%2Fra_assists%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2FCargo.toml?ref=93199002af05f3a3dfd274fe10633372f2471b73", "patch": "@@ -11,6 +11,7 @@ join_to_string = \"0.1.3\"\n itertools = \"0.8.0\"\n arrayvec = \"0.4.10\"\n rustc-hash = \"1.0.1\"\n+rustc_lexer = \"0.1.0\"\n \n ra_syntax = { path = \"../ra_syntax\" }\n ra_text_edit = { path = \"../ra_text_edit\" }"}, {"sha": "2d2e31e5134d82397399f734a72e9aa4763b3402", "filename": "crates/ra_assists/src/assists/raw_string.rs", "status": "modified", "additions": 92, "deletions": 18, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/93199002af05f3a3dfd274fe10633372f2471b73/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93199002af05f3a3dfd274fe10633372f2471b73/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs?ref=93199002af05f3a3dfd274fe10633372f2471b73", "patch": "@@ -2,6 +2,7 @@\n \n use hir::db::HirDatabase;\n use ra_syntax::{ast::AstNode, ast::Literal, TextRange, TextUnit};\n+use rustc_lexer;\n \n use crate::{Assist, AssistCtx, AssistId};\n \n@@ -10,13 +11,51 @@ pub(crate) fn make_raw_string(mut ctx: AssistCtx<impl HirDatabase>) -> Option<As\n     if literal.token().kind() != ra_syntax::SyntaxKind::STRING {\n         return None;\n     }\n+    let token = literal.token();\n+    let text = token.text().as_str();\n+    let usual_string_range = find_usual_string_range(text)?;\n+    let start_of_inside = usual_string_range.start().to_usize() + 1;\n+    let end_of_inside = usual_string_range.end().to_usize();\n+    let inside_str = &text[start_of_inside..end_of_inside];\n+    let mut unescaped = String::with_capacity(inside_str.len());\n+    let mut error = Ok(());\n+    rustc_lexer::unescape::unescape_str(\n+        inside_str,\n+        &mut |_, unescaped_char| match unescaped_char {\n+            Ok(c) => unescaped.push(c),\n+            Err(_) => error = Err(()),\n+        },\n+    );\n+    if error.is_err() {\n+        return None;\n+    }\n     ctx.add_action(AssistId(\"make_raw_string\"), \"make raw string\", |edit| {\n         edit.target(literal.syntax().text_range());\n-        edit.insert(literal.syntax().text_range().start(), \"r\");\n+        let max_hash_streak = count_hashes(&unescaped);\n+        let mut hashes = String::with_capacity(max_hash_streak + 1);\n+        for _ in 0..hashes.capacity() {\n+            hashes.push('#');\n+        }\n+        edit.replace(\n+            literal.syntax().text_range(),\n+            format!(\"r{}\\\"{}\\\"{}\", hashes, unescaped, hashes),\n+        );\n     });\n     ctx.build()\n }\n \n+fn count_hashes(s: &str) -> usize {\n+    let mut max_hash_streak = 0usize;\n+    for idx in s.match_indices(\"\\\"#\").map(|(i, _)| i) {\n+        let (_, sub) = s.split_at(idx + 1);\n+        let nb_hash = sub.chars().take_while(|c| *c == '#').count();\n+        if nb_hash > max_hash_streak {\n+            max_hash_streak = nb_hash;\n+        }\n+    }\n+    max_hash_streak\n+}\n+\n fn find_usual_string_range(s: &str) -> Option<TextRange> {\n     Some(TextRange::from_to(\n         TextUnit::from(s.find('\"')? as u32),\n@@ -94,10 +133,10 @@ mod test {\n             make_raw_string,\n             r#\"\n             fn f() {\n-                let s = <|>\"random string\";\n+                let s = <|>\"random\\nstring\";\n             }\n             \"#,\n-            r#\"\"random string\"\"#,\n+            r#\"\"random\\nstring\"\"#,\n         );\n     }\n \n@@ -107,44 +146,69 @@ mod test {\n             make_raw_string,\n             r#\"\n             fn f() {\n-                let s = <|>\"random string\";\n+                let s = <|>\"random\\nstring\";\n             }\n             \"#,\n-            r#\"\n+            r##\"\n             fn f() {\n-                let s = <|>r\"random string\";\n+                let s = <|>r#\"random\n+string\"#;\n             }\n-            \"#,\n+            \"##,\n         )\n     }\n \n     #[test]\n-    fn make_raw_string_with_escaped_works() {\n+    fn make_raw_string_hashes_inside_works() {\n         check_assist(\n             make_raw_string,\n-            r#\"\n+            r###\"\n             fn f() {\n-                let s = <|>\"random\\nstring\";\n+                let s = <|>\"#random##\\nstring\";\n             }\n-            \"#,\n-            r#\"\n+            \"###,\n+            r####\"\n             fn f() {\n-                let s = <|>r\"random\\nstring\";\n+                let s = <|>r#\"#random##\n+string\"#;\n             }\n-            \"#,\n+            \"####,\n         )\n     }\n \n     #[test]\n-    fn make_raw_string_not_works() {\n-        check_assist_not_applicable(\n+    fn make_raw_string_closing_hashes_inside_works() {\n+        check_assist(\n+            make_raw_string,\n+            r###\"\n+            fn f() {\n+                let s = <|>\"#random\\\"##\\nstring\";\n+            }\n+            \"###,\n+            r####\"\n+            fn f() {\n+                let s = <|>r###\"#random\"##\n+string\"###;\n+            }\n+            \"####,\n+        )\n+    }\n+\n+    #[test]\n+    fn make_raw_string_nothing_to_unescape_works() {\n+        check_assist(\n             make_raw_string,\n             r#\"\n             fn f() {\n-                let s = <|>r\"random string\";\n+                let s = <|>\"random string\";\n             }\n             \"#,\n-        );\n+            r##\"\n+            fn f() {\n+                let s = <|>r#\"random string\"#;\n+            }\n+            \"##,\n+        )\n     }\n \n     #[test]\n@@ -369,4 +433,14 @@ mod test {\n             \"#,\n         );\n     }\n+\n+    #[test]\n+    fn count_hashes_test() {\n+        assert_eq!(0, count_hashes(\"abc\"));\n+        assert_eq!(0, count_hashes(\"###\"));\n+        assert_eq!(1, count_hashes(\"\\\"#abc\"));\n+        assert_eq!(0, count_hashes(\"#abc\"));\n+        assert_eq!(2, count_hashes(\"#ab\\\"##c\"));\n+        assert_eq!(4, count_hashes(\"#ab\\\"##\\\"####c\"));\n+    }\n }"}, {"sha": "8b7a8d7fc1895429c60b15e02df18bf068900bff", "filename": "docs/user/features.md", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/93199002af05f3a3dfd274fe10633372f2471b73/docs%2Fuser%2Ffeatures.md", "raw_url": "https://github.com/rust-lang/rust/raw/93199002af05f3a3dfd274fe10633372f2471b73/docs%2Fuser%2Ffeatures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Ffeatures.md?ref=93199002af05f3a3dfd274fe10633372f2471b73", "patch": "@@ -459,17 +459,18 @@ fn foo<T: u32, F: FnOnce(T) -> T>() {}\n fn foo<T, F>() where T: u32, F: FnOnce(T) -> T {}\n ```\n \n-- Make raw string\n+- Make raw string unescaped\n \n ```rust\n // before:\n fn f() {\n-    let s = <|>\"abcd\";\n+    let s = <|>\"ab\\ncd\";\n }\n \n // after:\n fn f() {\n-    let s = <|>r\"abcd\";\n+    let s = <|>r#\"ab\n+cd\"#;\n }\n ```\n "}]}