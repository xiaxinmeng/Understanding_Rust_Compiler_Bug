{"sha": "c9588d5bf8db14d80249b029b07f79026956ae85", "node_id": "C_kwDOAAsO6NoAKGM5NTg4ZDViZjhkYjE0ZDgwMjQ5YjAyOWIwN2Y3OTAyNjk1NmFlODU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-19T13:14:22Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-20T13:43:41Z"}, "message": "Hackily fix an opaque type ICE", "tree": {"sha": "6a71d00e2666899b310478f1c37a2a3839168f5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a71d00e2666899b310478f1c37a2a3839168f5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9588d5bf8db14d80249b029b07f79026956ae85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9588d5bf8db14d80249b029b07f79026956ae85", "html_url": "https://github.com/rust-lang/rust/commit/c9588d5bf8db14d80249b029b07f79026956ae85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9588d5bf8db14d80249b029b07f79026956ae85/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e405dabf7dc99cbcd5f483592e8f9b5ea621d110", "url": "https://api.github.com/repos/rust-lang/rust/commits/e405dabf7dc99cbcd5f483592e8f9b5ea621d110", "html_url": "https://github.com/rust-lang/rust/commit/e405dabf7dc99cbcd5f483592e8f9b5ea621d110"}], "stats": {"total": 28, "additions": 23, "deletions": 5}, "files": [{"sha": "bcc8afbfd952d15763d32cd6239c5c129ee8f35b", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9588d5bf8db14d80249b029b07f79026956ae85/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9588d5bf8db14d80249b029b07f79026956ae85/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=c9588d5bf8db14d80249b029b07f79026956ae85", "patch": "@@ -18,9 +18,9 @@ use rustc_infer::infer::{\n use rustc_middle::hir::place::PlaceBase;\n use rustc_middle::mir::{ConstraintCategory, ReturnConstraint};\n use rustc_middle::ty::subst::InternalSubsts;\n-use rustc_middle::ty::Region;\n use rustc_middle::ty::TypeVisitor;\n use rustc_middle::ty::{self, RegionVid, Ty};\n+use rustc_middle::ty::{Region, TyCtxt};\n use rustc_span::symbol::{kw, Ident};\n use rustc_span::{Span, DUMMY_SP};\n \n@@ -70,14 +70,16 @@ impl<'tcx> ConstraintDescription for ConstraintCategory<'tcx> {\n ///\n /// Usually we expect this to either be empty or contain a small number of items, so we can avoid\n /// allocation most of the time.\n-#[derive(Default)]\n-pub(crate) struct RegionErrors<'tcx>(Vec<RegionErrorKind<'tcx>>);\n+pub(crate) struct RegionErrors<'tcx>(Vec<RegionErrorKind<'tcx>>, TyCtxt<'tcx>);\n \n impl<'tcx> RegionErrors<'tcx> {\n+    pub fn new(tcx: TyCtxt<'tcx>) -> Self {\n+        Self(vec![], tcx)\n+    }\n     #[track_caller]\n     pub fn push(&mut self, val: impl Into<RegionErrorKind<'tcx>>) {\n         let val = val.into();\n-        ty::tls::with(|tcx| tcx.sess.delay_span_bug(DUMMY_SP, \"{val:?}\"));\n+        self.1.sess.delay_span_bug(DUMMY_SP, \"{val:?}\");\n         self.0.push(val);\n     }\n     pub fn is_empty(&self) -> bool {"}, {"sha": "308f6e19a73e86b2277985a092a5748a77827bd2", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9588d5bf8db14d80249b029b07f79026956ae85/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9588d5bf8db14d80249b029b07f79026956ae85/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=c9588d5bf8db14d80249b029b07f79026956ae85", "patch": "@@ -562,7 +562,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let mir_def_id = body.source.def_id();\n         self.propagate_constraints(body);\n \n-        let mut errors_buffer = RegionErrors::default();\n+        let mut errors_buffer = RegionErrors::new(infcx.tcx);\n \n         // If this is a closure, we can propagate unsatisfied\n         // `outlives_requirements` to our creator, so create a vector"}, {"sha": "247607ff29e20717196020ee862ae279fbb268b6", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9588d5bf8db14d80249b029b07f79026956ae85/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9588d5bf8db14d80249b029b07f79026956ae85/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=c9588d5bf8db14d80249b029b07f79026956ae85", "patch": "@@ -1159,6 +1159,12 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         let tcx = self.infcx.tcx;\n \n         for proj in &user_ty.projs {\n+            if let ty::Alias(ty::Opaque, ..) = curr_projected_ty.ty.kind() {\n+                // There is nothing that we can compare here if we go through an opaque type.\n+                // We're always in its defining scope as we can otherwise not project through\n+                // it, so we're constraining it anyways.\n+                return Ok(());\n+            }\n             let projected_ty = curr_projected_ty.projection_ty_core(\n                 tcx,\n                 self.param_env,"}, {"sha": "b752e58380a897e43aab7fd81123af3a03515242", "filename": "src/test/ui/type-alias-impl-trait/destructuring.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9588d5bf8db14d80249b029b07f79026956ae85/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdestructuring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9588d5bf8db14d80249b029b07f79026956ae85/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdestructuring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdestructuring.rs?ref=c9588d5bf8db14d80249b029b07f79026956ae85", "patch": "@@ -0,0 +1,10 @@\n+#![feature(type_alias_impl_trait)]\n+\n+// check-pass\n+\n+// issue: https://github.com/rust-lang/rust/issues/104551\n+\n+fn main() {\n+    type T = impl Sized;\n+    let (_a, _b): T = (1u32, 2u32);\n+}"}]}