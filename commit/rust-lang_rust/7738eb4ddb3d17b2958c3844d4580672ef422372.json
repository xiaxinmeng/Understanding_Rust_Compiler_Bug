{"sha": "7738eb4ddb3d17b2958c3844d4580672ef422372", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MzhlYjRkZGIzZDE3YjI5NThjMzg0NGQ0NTgwNjcyZWY0MjIzNzI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-24T23:52:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-24T23:52:09Z"}, "message": "Rollup merge of #48392 - estebank:string, r=petrochenkov\n\nHandle custom diagnostic for `&str + String`\n\nNow all of `&str + &str`, `&str + String` and `String + String` have relevant diagnostic output.", "tree": {"sha": "fcf617f5b7d792778099f682fa83b5a129f18b2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcf617f5b7d792778099f682fa83b5a129f18b2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7738eb4ddb3d17b2958c3844d4580672ef422372", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJakfqpCRBK7hj4Ov3rIwAAdHIIAFketQDfnFkqz3gR8OXdoZxZ\nVVDxsuF/j53fpUnOZOLeVFfTW7xiwgVx4kNC6OAK4hkJTpDZHsvzkWdwow8v3/JJ\ns3O46u4f1CLN9W8pdGxGvFUrOFuv5IqatVGeLm9bfBnsYHaQJH25ZKpWtkUDKxTA\nzcbSXXYRPa+T242afHkjEglrOmQ/+nJh0YtdpGlmtkBdRLLUBw8Ob4FNWM+W6XX8\nvfQOKUAQSn16ouzaqSI0nVvdCfkCWqfSUieYNVljGwiYdKm0/AWD/EB+hCY4TCRK\nEng3l+TiFVa8kCyRpl0MWSGzZOaLvu/f9e0LFt3db1OrwYp4niv6hucy5cfbSUU=\n=OW5W\n-----END PGP SIGNATURE-----\n", "payload": "tree fcf617f5b7d792778099f682fa83b5a129f18b2b\nparent d45c4a6d27773b06efb2ea8cae4983cbdf0cfc34\nparent 20bc72e693372940183e97a32e7d07d2f9180182\nauthor Manish Goregaokar <manishsmail@gmail.com> 1519516329 -0800\ncommitter GitHub <noreply@github.com> 1519516329 -0800\n\nRollup merge of #48392 - estebank:string, r=petrochenkov\n\nHandle custom diagnostic for `&str + String`\n\nNow all of `&str + &str`, `&str + String` and `String + String` have relevant diagnostic output.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7738eb4ddb3d17b2958c3844d4580672ef422372", "html_url": "https://github.com/rust-lang/rust/commit/7738eb4ddb3d17b2958c3844d4580672ef422372", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7738eb4ddb3d17b2958c3844d4580672ef422372/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d45c4a6d27773b06efb2ea8cae4983cbdf0cfc34", "url": "https://api.github.com/repos/rust-lang/rust/commits/d45c4a6d27773b06efb2ea8cae4983cbdf0cfc34", "html_url": "https://github.com/rust-lang/rust/commit/d45c4a6d27773b06efb2ea8cae4983cbdf0cfc34"}, {"sha": "20bc72e693372940183e97a32e7d07d2f9180182", "url": "https://api.github.com/repos/rust-lang/rust/commits/20bc72e693372940183e97a32e7d07d2f9180182", "html_url": "https://github.com/rust-lang/rust/commit/20bc72e693372940183e97a32e7d07d2f9180182"}], "stats": {"total": 88, "additions": 61, "deletions": 27}, "files": [{"sha": "a28625be2c73963e3e09465dc4328150a0ddac0d", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 43, "deletions": 26, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/7738eb4ddb3d17b2958c3844d4580672ef422372/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7738eb4ddb3d17b2958c3844d4580672ef422372/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=7738eb4ddb3d17b2958c3844d4580672ef422372", "patch": "@@ -13,7 +13,7 @@\n use super::{FnCtxt, Needs};\n use super::method::MethodCallee;\n use rustc::ty::{self, Ty, TypeFoldable, TypeVariants};\n-use rustc::ty::TypeVariants::{TyStr, TyRef};\n+use rustc::ty::TypeVariants::{TyStr, TyRef, TyAdt};\n use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow, AutoBorrowMutability};\n use rustc::infer::type_variable::TypeVariableOrigin;\n use errors;\n@@ -299,7 +299,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n                         if let Some(missing_trait) = missing_trait {\n                             if missing_trait == \"std::ops::Add\" &&\n-                                self.check_str_addition(expr, lhs_expr, lhs_ty,\n+                                self.check_str_addition(expr, lhs_expr, rhs_expr, lhs_ty,\n                                                         rhs_ty, &mut err) {\n                                 // This has nothing here because it means we did string\n                                 // concatenation (e.g. \"Hello \" + \"World!\"). This means\n@@ -328,37 +328,54 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     fn check_str_addition(&self,\n                           expr: &'gcx hir::Expr,\n                           lhs_expr: &'gcx hir::Expr,\n+                          rhs_expr: &'gcx hir::Expr,\n                           lhs_ty: Ty<'tcx>,\n                           rhs_ty: Ty<'tcx>,\n                           err: &mut errors::DiagnosticBuilder) -> bool {\n+        let codemap = self.tcx.sess.codemap();\n+        let msg = \"`to_owned()` can be used to create an owned `String` \\\n+                   from a string reference. String concatenation \\\n+                   appends the string on the right to the string \\\n+                   on the left and may require reallocation. This \\\n+                   requires ownership of the string on the left\";\n         // If this function returns true it means a note was printed, so we don't need\n         // to print the normal \"implementation of `std::ops::Add` might be missing\" note\n-        let mut is_string_addition = false;\n-        if let TyRef(_, l_ty) = lhs_ty.sty {\n-            if let TyRef(_, r_ty) = rhs_ty.sty {\n-                if l_ty.ty.sty == TyStr && r_ty.ty.sty == TyStr {\n-                    err.span_label(expr.span,\n-                        \"`+` can't be used to concatenate two `&str` strings\");\n-                    let codemap = self.tcx.sess.codemap();\n-                    let suggestion =\n-                        match codemap.span_to_snippet(lhs_expr.span) {\n-                            Ok(lstring) => format!(\"{}.to_owned()\", lstring),\n-                            _ => format!(\"<expression>\")\n-                        };\n-                    err.span_suggestion(lhs_expr.span,\n-                        &format!(\"`to_owned()` can be used to create an owned `String` \\\n-                                  from a string reference. String concatenation \\\n-                                  appends the string on the right to the string \\\n-                                  on the left and may require reallocation. This \\\n-                                  requires ownership of the string on the left\"), suggestion);\n-                    is_string_addition = true;\n-                }\n-\n+        match (&lhs_ty.sty, &rhs_ty.sty) {\n+            (&TyRef(_, ref l_ty), &TyRef(_, ref r_ty))\n+            if l_ty.ty.sty == TyStr && r_ty.ty.sty == TyStr => {\n+                err.span_label(expr.span,\n+                    \"`+` can't be used to concatenate two `&str` strings\");\n+                match codemap.span_to_snippet(lhs_expr.span) {\n+                    Ok(lstring) => err.span_suggestion(lhs_expr.span,\n+                                                       msg,\n+                                                       format!(\"{}.to_owned()\", lstring)),\n+                    _ => err.help(msg),\n+                };\n+                true\n             }\n-\n+            (&TyRef(_, ref l_ty), &TyAdt(..))\n+            if l_ty.ty.sty == TyStr && &format!(\"{:?}\", rhs_ty) == \"std::string::String\" => {\n+                err.span_label(expr.span,\n+                    \"`+` can't be used to concatenate a `&str` with a `String`\");\n+                match codemap.span_to_snippet(lhs_expr.span) {\n+                    Ok(lstring) => err.span_suggestion(lhs_expr.span,\n+                                                       msg,\n+                                                       format!(\"{}.to_owned()\", lstring)),\n+                    _ => err.help(msg),\n+                };\n+                match codemap.span_to_snippet(rhs_expr.span) {\n+                    Ok(rstring) => {\n+                        err.span_suggestion(rhs_expr.span,\n+                                            \"you also need to borrow the `String` on the right to \\\n+                                             get a `&str`\",\n+                                            format!(\"&{}\", rstring));\n+                    }\n+                    _ => {}\n+                };\n+                true\n+            }\n+            _ => false,\n         }\n-\n-        is_string_addition\n     }\n \n     pub fn check_user_unop(&self,"}, {"sha": "7b3288fd29cc190d956279022591c27d755a8800", "filename": "src/test/ui/span/issue-39018.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7738eb4ddb3d17b2958c3844d4580672ef422372/src%2Ftest%2Fui%2Fspan%2Fissue-39018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7738eb4ddb3d17b2958c3844d4580672ef422372/src%2Ftest%2Fui%2Fspan%2Fissue-39018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.rs?ref=7738eb4ddb3d17b2958c3844d4580672ef422372", "patch": "@@ -17,6 +17,9 @@ pub fn main() {\n     // that won't output for the above string concatenation\n     let y = World::Hello + World::Goodbye;\n     //~^ ERROR cannot be applied to type\n+\n+    let x = \"Hello \" + \"World!\".to_owned();\n+    //~^ ERROR cannot be applied to type\n }\n \n enum World {"}, {"sha": "70f8ecf42cb2d91f5afbab1ffc69179a2dba0d72", "filename": "src/test/ui/span/issue-39018.stderr", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7738eb4ddb3d17b2958c3844d4580672ef422372/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7738eb4ddb3d17b2958c3844d4580672ef422372/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr?ref=7738eb4ddb3d17b2958c3844d4580672ef422372", "patch": "@@ -16,5 +16,19 @@ error[E0369]: binary operation `+` cannot be applied to type `World`\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `World`\n \n-error: aborting due to 2 previous errors\n+error[E0369]: binary operation `+` cannot be applied to type `&str`\n+  --> $DIR/issue-39018.rs:21:13\n+   |\n+21 |     let x = \"Hello \" + \"World!\".to_owned();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `+` can't be used to concatenate a `&str` with a `String`\n+help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   |\n+21 |     let x = \"Hello \".to_owned() + \"World!\".to_owned();\n+   |             ^^^^^^^^^^^^^^^^^^^\n+help: you also need to borrow the `String` on the right to get a `&str`\n+   |\n+21 |     let x = \"Hello \" + &\"World!\".to_owned();\n+   |                        ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n "}]}