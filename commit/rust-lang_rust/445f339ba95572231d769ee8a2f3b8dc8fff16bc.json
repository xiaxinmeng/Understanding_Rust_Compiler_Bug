{"sha": "445f339ba95572231d769ee8a2f3b8dc8fff16bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0NWYzMzliYTk1NTcyMjMxZDc2OWVlOGEyZjNiOGRjOGZmZjE2YmM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-15T10:00:56Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-15T10:03:03Z"}, "message": "address review comments", "tree": {"sha": "cef3ede1a9376b0bd70458e1a6593e66487b69e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cef3ede1a9376b0bd70458e1a6593e66487b69e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/445f339ba95572231d769ee8a2f3b8dc8fff16bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/445f339ba95572231d769ee8a2f3b8dc8fff16bc", "html_url": "https://github.com/rust-lang/rust/commit/445f339ba95572231d769ee8a2f3b8dc8fff16bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/445f339ba95572231d769ee8a2f3b8dc8fff16bc/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38546ba9fa5678755c03721efe83425911812ccd", "url": "https://api.github.com/repos/rust-lang/rust/commits/38546ba9fa5678755c03721efe83425911812ccd", "html_url": "https://github.com/rust-lang/rust/commit/38546ba9fa5678755c03721efe83425911812ccd"}], "stats": {"total": 23, "additions": 10, "deletions": 13}, "files": [{"sha": "ca40780bd8103f9df4de900703c03c1accf5080d", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/445f339ba95572231d769ee8a2f3b8dc8fff16bc/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445f339ba95572231d769ee8a2f3b8dc8fff16bc/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=445f339ba95572231d769ee8a2f3b8dc8fff16bc", "patch": "@@ -2702,7 +2702,7 @@ impl<'a> Resolver<'a> {\n                         }\n                         return (err, candidates);\n                     },\n-                    (Def::Struct(def_id), _) if ns == ValueNS && is_struct_like(def) => {\n+                    (Def::Struct(def_id), _) if ns == ValueNS => {\n                         if let Some((ctor_def, ctor_vis))\n                                 = this.struct_constructors.get(&def_id).cloned() {\n                             let accessible_ctor = this.is_accessible(ctor_vis);\n@@ -2711,14 +2711,10 @@ impl<'a> Resolver<'a> {\n                                                               here due to private fields\"));\n                             } else if accessible_ctor {\n                                 let block = match ctor_def {\n-                                    Def::StructCtor(_, CtorKind::Fn) |\n-                                    Def::VariantCtor(_, CtorKind::Fn) => \"(/* fields */)\",\n-                                    Def::StructCtor(_, CtorKind::Fictive) |\n-                                    Def::VariantCtor(_, CtorKind::Fictive) => {\n-                                        \" { /* fields */ }\"\n-                                    }\n-                                    def => bug!(\"found def `{:?}` when looking for a ctor\",\n-                                                def),\n+                                    Def::StructCtor(_, CtorKind::Fn) => \"(/* fields */)\",\n+                                    Def::StructCtor(_, CtorKind::Const) => \"\",\n+                                    Def::Struct(..) => \" { /* fields */ }\",\n+                                    def => bug!(\"found def `{:?}` when looking for a ctor\", def),\n                                 };\n                                 err.span_label(span, format!(\"did you mean `{}{}`?\",\n                                                              path_str,\n@@ -2730,9 +2726,10 @@ impl<'a> Resolver<'a> {\n                         }\n                         return (err, candidates);\n                     }\n-                    (Def::VariantCtor(_, ctor_kind), _) if ns == ValueNS && is_struct_like(def) => {\n+                    (Def::VariantCtor(_, CtorKind::Fictive), _) if ns == ValueNS => {\n                         let block = match ctor_kind {\n                             CtorKind::Fn => \"(/* fields */)\",\n+                            CtorKind::Const => \"\",\n                             CtorKind::Fictive => \" { /* fields */ }\",\n                             def => bug!(\"found def `{:?}` when looking for a ctor\",\n                                         def),\n@@ -2742,9 +2739,9 @@ impl<'a> Resolver<'a> {\n                                                      block));\n                         return (err, candidates);\n                     }\n-                    (Def::SelfTy(_, _), _) if ns == ValueNS && is_struct_like(def) => {\n-                        err.note(\"can't instantiate `Self`, you must use the implemented struct \\\n-                                  directly\");\n+                    (Def::SelfTy(..), _) if ns == ValueNS {\n+                        err.note(\"can't use `Self` as a constructor, you must use the \\\n+                                  implemented struct\");\n                     }\n                     _ => {}\n                 }"}]}