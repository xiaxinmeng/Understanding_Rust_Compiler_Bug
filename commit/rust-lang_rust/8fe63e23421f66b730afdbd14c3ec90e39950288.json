{"sha": "8fe63e23421f66b730afdbd14c3ec90e39950288", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmZTYzZTIzNDIxZjY2YjczMGFmZGJkMTRjM2VjOTBlMzk5NTAyODg=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-12-18T22:38:28Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2016-03-14T22:04:33Z"}, "message": "Add `default` as contextual keyword, and parse it for impl items.", "tree": {"sha": "6b1fcefd268964fede314d9d915593c1b57bfaf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b1fcefd268964fede314d9d915593c1b57bfaf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fe63e23421f66b730afdbd14c3ec90e39950288", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fe63e23421f66b730afdbd14c3ec90e39950288", "html_url": "https://github.com/rust-lang/rust/commit/8fe63e23421f66b730afdbd14c3ec90e39950288", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fe63e23421f66b730afdbd14c3ec90e39950288/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "659ba09b2d9dfe1c9ae50d86ab87fc9acb55a03e", "url": "https://api.github.com/repos/rust-lang/rust/commits/659ba09b2d9dfe1c9ae50d86ab87fc9acb55a03e", "html_url": "https://github.com/rust-lang/rust/commit/659ba09b2d9dfe1c9ae50d86ab87fc9acb55a03e"}], "stats": {"total": 208, "additions": 150, "deletions": 58}, "files": [{"sha": "6ae59122f71c49a85525eb8534972ecfa41eca3c", "filename": "src/librustc_front/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8fe63e23421f66b730afdbd14c3ec90e39950288/src%2Flibrustc_front%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe63e23421f66b730afdbd14c3ec90e39950288/src%2Flibrustc_front%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Ffold.rs?ref=8fe63e23421f66b730afdbd14c3ec90e39950288", "patch": "@@ -839,6 +839,7 @@ pub fn noop_fold_impl_item<T: Folder>(i: ImplItem, folder: &mut T) -> ImplItem {\n         name: folder.fold_name(i.name),\n         attrs: fold_attrs(i.attrs, folder),\n         vis: i.vis,\n+        defaultness: i.defaultness,\n         node: match i.node {\n             ImplItemKind::Const(ty, expr) => {\n                 ImplItemKind::Const(folder.fold_ty(ty), folder.fold_expr(expr))"}, {"sha": "939b527fad30283bf0520f44abe7fac2c6c0a073", "filename": "src/librustc_front/hir.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8fe63e23421f66b730afdbd14c3ec90e39950288/src%2Flibrustc_front%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe63e23421f66b730afdbd14c3ec90e39950288/src%2Flibrustc_front%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fhir.rs?ref=8fe63e23421f66b730afdbd14c3ec90e39950288", "patch": "@@ -864,10 +864,10 @@ pub struct MethodSig {\n     pub explicit_self: ExplicitSelf,\n }\n \n-/// Represents a method declaration in a trait declaration, possibly including\n-/// a default implementation A trait method is either required (meaning it\n-/// doesn't have an implementation, just a signature) or provided (meaning it\n-/// has a default implementation).\n+/// Represents an item declaration within a trait declaration,\n+/// possibly including a default implementation. A trait item is\n+/// either required (meaning it doesn't have an implementation, just a\n+/// signature) or provided (meaning it has a default implementation).\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct TraitItem {\n     pub id: NodeId,\n@@ -889,6 +889,7 @@ pub struct ImplItem {\n     pub id: NodeId,\n     pub name: Name,\n     pub vis: Visibility,\n+    pub defaultness: Defaultness,\n     pub attrs: HirVec<Attribute>,\n     pub node: ImplItemKind,\n     pub span: Span,\n@@ -1046,6 +1047,12 @@ pub enum Constness {\n     NotConst,\n }\n \n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub enum Defaultness {\n+    Default,\n+    Final,\n+}\n+\n impl fmt::Display for Unsafety {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Display::fmt(match *self {"}, {"sha": "825ab3fbd4c8227107c4c71846e79b5bb3972b5d", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8fe63e23421f66b730afdbd14c3ec90e39950288/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe63e23421f66b730afdbd14c3ec90e39950288/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=8fe63e23421f66b730afdbd14c3ec90e39950288", "patch": "@@ -756,6 +756,7 @@ pub fn lower_impl_item(lctx: &LoweringContext, i: &ImplItem) -> hir::ImplItem {\n         name: i.ident.name,\n         attrs: lower_attrs(lctx, &i.attrs),\n         vis: lower_visibility(lctx, i.vis),\n+        defaultness: lower_defaultness(lctx, i.defaultness),\n         node: match i.node {\n             ImplItemKind::Const(ref ty, ref expr) => {\n                 hir::ImplItemKind::Const(lower_ty(lctx, ty), lower_expr(lctx, expr))\n@@ -1707,6 +1708,13 @@ pub fn lower_visibility(_lctx: &LoweringContext, v: Visibility) -> hir::Visibili\n     }\n }\n \n+pub fn lower_defaultness(_lctx: &LoweringContext, d: Defaultness) -> hir::Defaultness {\n+    match d {\n+        Defaultness::Default => hir::Defaultness::Default,\n+        Defaultness::Final => hir::Defaultness::Final,\n+    }\n+}\n+\n pub fn lower_block_check_mode(lctx: &LoweringContext, b: &BlockCheckMode) -> hir::BlockCheckMode {\n     match *b {\n         BlockCheckMode::Default => hir::DefaultBlock,"}, {"sha": "c830fed5db9a71a0c70a87a500cc784c114cba52", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8fe63e23421f66b730afdbd14c3ec90e39950288/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe63e23421f66b730afdbd14c3ec90e39950288/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=8fe63e23421f66b730afdbd14c3ec90e39950288", "patch": "@@ -1328,10 +1328,10 @@ pub struct MethodSig {\n     pub explicit_self: ExplicitSelf,\n }\n \n-/// Represents a method declaration in a trait declaration, possibly including\n-/// a default implementation. A trait method is either required (meaning it\n-/// doesn't have an implementation, just a signature) or provided (meaning it\n-/// has a default implementation).\n+/// Represents an item declaration within a trait declaration,\n+/// possibly including a default implementation. A trait item is\n+/// either required (meaning it doesn't have an implementation, just a\n+/// signature) or provided (meaning it has a default implementation).\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct TraitItem {\n     pub id: NodeId,\n@@ -1353,6 +1353,7 @@ pub struct ImplItem {\n     pub id: NodeId,\n     pub ident: Ident,\n     pub vis: Visibility,\n+    pub defaultness: Defaultness,\n     pub attrs: Vec<Attribute>,\n     pub node: ImplItemKind,\n     pub span: Span,\n@@ -1654,6 +1655,12 @@ pub enum Constness {\n     NotConst,\n }\n \n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub enum Defaultness {\n+    Default,\n+    Final,\n+}\n+\n impl fmt::Display for Unsafety {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Display::fmt(match *self {"}, {"sha": "5bfdab791d638a0b4d72e8324fcec42423fcaecc", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8fe63e23421f66b730afdbd14c3ec90e39950288/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe63e23421f66b730afdbd14c3ec90e39950288/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=8fe63e23421f66b730afdbd14c3ec90e39950288", "patch": "@@ -1061,6 +1061,7 @@ fn expand_impl_item(ii: ast::ImplItem, fld: &mut MacroExpander)\n             ident: ii.ident,\n             attrs: ii.attrs,\n             vis: ii.vis,\n+            defaultness: ii.defaultness,\n             node: match ii.node  {\n                 ast::ImplItemKind::Method(sig, body) => {\n                     let (sig, body) = expand_and_rename_method(sig, body, fld);"}, {"sha": "cd8998a211ae7491e37448ace64086a0609b136e", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8fe63e23421f66b730afdbd14c3ec90e39950288/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe63e23421f66b730afdbd14c3ec90e39950288/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=8fe63e23421f66b730afdbd14c3ec90e39950288", "patch": "@@ -993,6 +993,7 @@ pub fn noop_fold_impl_item<T: Folder>(i: ImplItem, folder: &mut T)\n         ident: folder.fold_ident(i.ident),\n         attrs: fold_attrs(i.attrs, folder),\n         vis: i.vis,\n+        defaultness: i.defaultness,\n         node: match i.node  {\n             ast::ImplItemKind::Const(ty, expr) => {\n                 ast::ImplItemKind::Const(folder.fold_ty(ty), folder.fold_expr(expr))"}, {"sha": "969d39056aa7548933e4bf1c7c08a31bd61c6f66", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8fe63e23421f66b730afdbd14c3ec90e39950288/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe63e23421f66b730afdbd14c3ec90e39950288/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8fe63e23421f66b730afdbd14c3ec90e39950288", "patch": "@@ -18,7 +18,7 @@ use ast::{Mod, Arg, Arm, Attribute, BindingMode, TraitItemKind};\n use ast::Block;\n use ast::{BlockCheckMode, CaptureBy};\n use ast::{Constness, Crate, CrateConfig};\n-use ast::{Decl, DeclKind};\n+use ast::{Decl, DeclKind, Defaultness};\n use ast::{EMPTY_CTXT, EnumDef, ExplicitSelf};\n use ast::{Expr, ExprKind, RangeLimits};\n use ast::{Field, FnDecl};\n@@ -644,6 +644,25 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    pub fn check_contextual_keyword(&mut self, ident: Ident) -> bool {\n+        let tok = token::Ident(ident, token::Plain);\n+        self.expected_tokens.push(TokenType::Token(tok));\n+        if let token::Ident(ref cur_ident, _) = self.token {\n+            cur_ident.name == ident.name\n+        } else {\n+            false\n+        }\n+    }\n+\n+    pub fn eat_contextual_keyword(&mut self, ident: Ident) -> PResult<bool> {\n+        if self.check_contextual_keyword(ident) {\n+            try!(self.bump());\n+            Ok(true)\n+        } else {\n+            Ok(false)\n+        }\n+    }\n+\n     /// If the given word is not a keyword, signal an error.\n     /// If the next token is not the given word, signal an error.\n     /// Otherwise, eat it.\n@@ -705,7 +724,6 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-\n     /// Attempt to consume a `<`. If `<<` is seen, replace it with a single\n     /// `<` and continue. If a `<` is not seen, return false.\n     ///\n@@ -4846,6 +4864,7 @@ impl<'a> Parser<'a> {\n         let mut attrs = try!(self.parse_outer_attributes());\n         let lo = self.span.lo;\n         let vis = try!(self.parse_visibility());\n+        let defaultness = try!(self.parse_defaultness());\n         let (name, node) = if self.eat_keyword(keywords::Type) {\n             let name = try!(self.parse_ident());\n             try!(self.expect(&token::Eq));\n@@ -4872,6 +4891,7 @@ impl<'a> Parser<'a> {\n             span: mk_sp(lo, self.last_span.hi),\n             ident: name,\n             vis: vis,\n+            defaultness: defaultness,\n             attrs: attrs,\n             node: node\n         })\n@@ -5208,6 +5228,15 @@ impl<'a> Parser<'a> {\n         else { Ok(Visibility::Inherited) }\n     }\n \n+    /// Parse defaultness: DEFAULT or nothing\n+    fn parse_defaultness(&mut self) -> PResult<Defaultness> {\n+        if try!(self.eat_contextual_keyword(special_idents::DEFAULT)) {\n+            Ok(Defaultness::Default)\n+        } else {\n+            Ok(Defaultness::Final)\n+        }\n+    }\n+\n     /// Given a termination token, parse all of the items in a module\n     fn parse_mod_items(&mut self, term: &token::Token, inner_lo: BytePos) -> PResult<'a, Mod> {\n         let mut items = vec![];"}, {"sha": "033ac9440bcecbc0e7802db682862155d5d74ebc", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 49, "deletions": 48, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/8fe63e23421f66b730afdbd14c3ec90e39950288/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe63e23421f66b730afdbd14c3ec90e39950288/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=8fe63e23421f66b730afdbd14c3ec90e39950288", "patch": "@@ -545,66 +545,67 @@ declare_special_idents_and_keywords! {\n         (9,                          __unused1,              \"<__unused1>\");\n         (super::SELF_TYPE_KEYWORD_NAME_NUM, type_self,       \"Self\");\n         (11,                         prelude_import,         \"prelude_import\");\n+        (12,                         DEFAULT,                \"default\");\n     }\n \n     pub mod keywords {\n         // These ones are variants of the Keyword enum\n \n         'strict:\n-        (12,                         As,         \"as\");\n-        (13,                         Break,      \"break\");\n-        (14,                         Crate,      \"crate\");\n-        (15,                         Else,       \"else\");\n-        (16,                         Enum,       \"enum\");\n-        (17,                         Extern,     \"extern\");\n-        (18,                         False,      \"false\");\n-        (19,                         Fn,         \"fn\");\n-        (20,                         For,        \"for\");\n-        (21,                         If,         \"if\");\n-        (22,                         Impl,       \"impl\");\n-        (23,                         In,         \"in\");\n-        (24,                         Let,        \"let\");\n-        (25,                         Loop,       \"loop\");\n-        (26,                         Match,      \"match\");\n-        (27,                         Mod,        \"mod\");\n-        (28,                         Move,       \"move\");\n-        (29,                         Mut,        \"mut\");\n-        (30,                         Pub,        \"pub\");\n-        (31,                         Ref,        \"ref\");\n-        (32,                         Return,     \"return\");\n+        (13,                         As,         \"as\");\n+        (14,                         Break,      \"break\");\n+        (15,                         Crate,      \"crate\");\n+        (16,                         Else,       \"else\");\n+        (17,                         Enum,       \"enum\");\n+        (18,                         Extern,     \"extern\");\n+        (19,                         False,      \"false\");\n+        (20,                         Fn,         \"fn\");\n+        (21,                         For,        \"for\");\n+        (22,                         If,         \"if\");\n+        (23,                         Impl,       \"impl\");\n+        (24,                         In,         \"in\");\n+        (25,                         Let,        \"let\");\n+        (26,                         Loop,       \"loop\");\n+        (27,                         Match,      \"match\");\n+        (28,                         Mod,        \"mod\");\n+        (29,                         Move,       \"move\");\n+        (30,                         Mut,        \"mut\");\n+        (31,                         Pub,        \"pub\");\n+        (32,                         Ref,        \"ref\");\n+        (33,                         Return,     \"return\");\n         // Static and Self are also special idents (prefill de-dupes)\n         (super::STATIC_KEYWORD_NAME_NUM, Static, \"static\");\n         (super::SELF_KEYWORD_NAME_NUM, SelfValue, \"self\");\n         (super::SELF_TYPE_KEYWORD_NAME_NUM, SelfType, \"Self\");\n-        (33,                         Struct,     \"struct\");\n+        (34,                         Struct,     \"struct\");\n         (super::SUPER_KEYWORD_NAME_NUM, Super,   \"super\");\n-        (34,                         True,       \"true\");\n-        (35,                         Trait,      \"trait\");\n-        (36,                         Type,       \"type\");\n-        (37,                         Unsafe,     \"unsafe\");\n-        (38,                         Use,        \"use\");\n-        (39,                         While,      \"while\");\n-        (40,                         Continue,   \"continue\");\n-        (41,                         Box,        \"box\");\n-        (42,                         Const,      \"const\");\n-        (43,                         Where,      \"where\");\n+        (35,                         True,       \"true\");\n+        (36,                         Trait,      \"trait\");\n+        (37,                         Type,       \"type\");\n+        (38,                         Unsafe,     \"unsafe\");\n+        (39,                         Use,        \"use\");\n+        (40,                         While,      \"while\");\n+        (41,                         Continue,   \"continue\");\n+        (42,                         Box,        \"box\");\n+        (43,                         Const,      \"const\");\n+        (44,                         Where,      \"where\");\n         'reserved:\n-        (44,                         Virtual,    \"virtual\");\n-        (45,                         Proc,       \"proc\");\n-        (46,                         Alignof,    \"alignof\");\n-        (47,                         Become,     \"become\");\n-        (48,                         Offsetof,   \"offsetof\");\n-        (49,                         Priv,       \"priv\");\n-        (50,                         Pure,       \"pure\");\n-        (51,                         Sizeof,     \"sizeof\");\n-        (52,                         Typeof,     \"typeof\");\n-        (53,                         Unsized,    \"unsized\");\n-        (54,                         Yield,      \"yield\");\n-        (55,                         Do,         \"do\");\n-        (56,                         Abstract,   \"abstract\");\n-        (57,                         Final,      \"final\");\n-        (58,                         Override,   \"override\");\n-        (59,                         Macro,      \"macro\");\n+        (45,                         Virtual,    \"virtual\");\n+        (46,                         Proc,       \"proc\");\n+        (47,                         Alignof,    \"alignof\");\n+        (48,                         Become,     \"become\");\n+        (49,                         Offsetof,   \"offsetof\");\n+        (50,                         Priv,       \"priv\");\n+        (51,                         Pure,       \"pure\");\n+        (52,                         Sizeof,     \"sizeof\");\n+        (53,                         Typeof,     \"typeof\");\n+        (54,                         Unsized,    \"unsized\");\n+        (55,                         Yield,      \"yield\");\n+        (56,                         Do,         \"do\");\n+        (57,                         Abstract,   \"abstract\");\n+        (58,                         Final,      \"final\");\n+        (59,                         Override,   \"override\");\n+        (60,                         Macro,      \"macro\");\n     }\n }\n "}, {"sha": "937055fcfa6724f55d6456893bc76f7a05f4ed9f", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fe63e23421f66b730afdbd14c3ec90e39950288/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe63e23421f66b730afdbd14c3ec90e39950288/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=8fe63e23421f66b730afdbd14c3ec90e39950288", "patch": "@@ -476,6 +476,7 @@ impl<'a> TraitDef<'a> {\n                 span: self.span,\n                 ident: ident,\n                 vis: ast::Visibility::Inherited,\n+                defaultness: ast::Defaultness::Final,\n                 attrs: Vec::new(),\n                 node: ast::ImplItemKind::Type(type_def.to_ty(cx,\n                     self.span,\n@@ -893,6 +894,7 @@ impl<'a> MethodDef<'a> {\n             attrs: self.attributes.clone(),\n             span: trait_.span,\n             vis: ast::Visibility::Inherited,\n+            defaultness: ast::Defaultness::Final,\n             ident: method_ident,\n             node: ast::ImplItemKind::Method(ast::MethodSig {\n                 generics: fn_generics,"}, {"sha": "d18401e67646c7f69e214f3b63d101553a82e133", "filename": "src/test/parse-fail/default.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8fe63e23421f66b730afdbd14c3ec90e39950288/src%2Ftest%2Fparse-fail%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe63e23421f66b730afdbd14c3ec90e39950288/src%2Ftest%2Fparse-fail%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fdefault.rs?ref=8fe63e23421f66b730afdbd14c3ec90e39950288", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z parse-only\n+\n+// Test successful and unsucessful parsing of the `default` contextual keyword\n+\n+trait Foo {\n+    fn foo<T: Default>() -> T;\n+}\n+\n+impl Foo for u8 {\n+    default fn foo<T: Default>() -> T {\n+        T::default()\n+    }\n+}\n+\n+impl Foo for u16 {\n+    pub default fn foo<T: Default>() -> T {\n+        T::default()\n+    }\n+}\n+\n+impl Foo for u32 {\n+    default pub fn foo<T: Default>() -> T { T::default() } //~ ERROR expected one of\n+}\n+\n+fn main() {}"}]}