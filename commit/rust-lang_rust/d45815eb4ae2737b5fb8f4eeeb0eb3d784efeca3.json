{"sha": "d45815eb4ae2737b5fb8f4eeeb0eb3d784efeca3", "node_id": "C_kwDOAAsO6NoAKGQ0NTgxNWViNGFlMjczN2I1ZmI4ZjRlZWViMGViM2Q3ODRlZmVjYTM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-15T20:16:28Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-27T18:22:45Z"}, "message": "Only consider a local to be SSA if assignment dominates all uses.", "tree": {"sha": "24dee6f9b1bde5249e936185402d81f71df092ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24dee6f9b1bde5249e936185402d81f71df092ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d45815eb4ae2737b5fb8f4eeeb0eb3d784efeca3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d45815eb4ae2737b5fb8f4eeeb0eb3d784efeca3", "html_url": "https://github.com/rust-lang/rust/commit/d45815eb4ae2737b5fb8f4eeeb0eb3d784efeca3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d45815eb4ae2737b5fb8f4eeeb0eb3d784efeca3/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38b55dc68459bf68cd5489b8c5d808b6902c83d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/38b55dc68459bf68cd5489b8c5d808b6902c83d1", "html_url": "https://github.com/rust-lang/rust/commit/38b55dc68459bf68cd5489b8c5d808b6902c83d1"}], "stats": {"total": 78, "additions": 76, "deletions": 2}, "files": [{"sha": "13a182695857f2e4c8c79fce261d0b925b8c9702", "filename": "compiler/rustc_mir_transform/src/copy_prop.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d45815eb4ae2737b5fb8f4eeeb0eb3d784efeca3/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45815eb4ae2737b5fb8f4eeeb0eb3d784efeca3/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs?ref=d45815eb4ae2737b5fb8f4eeeb0eb3d784efeca3", "patch": "@@ -1,4 +1,5 @@\n use either::Either;\n+use rustc_data_structures::graph::dominators::Dominators;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n use rustc_middle::middle::resolve_lifetime::Set1;\n@@ -65,6 +66,7 @@ enum LocationExtended {\n \n #[derive(Debug)]\n struct SsaLocals {\n+    dominators: Dominators<BasicBlock>,\n     /// Assignments to each local.  This defines whether the local is SSA.\n     assignments: IndexVec<Local, Set1<LocationExtended>>,\n     /// We visit the body in reverse postorder, to ensure each local is assigned before it is used.\n@@ -78,7 +80,8 @@ impl SsaLocals {\n         let assignment_order = Vec::new();\n \n         let assignments = IndexVec::from_elem(Set1::Empty, &body.local_decls);\n-        let mut this = SsaLocals { assignments, assignment_order };\n+        let dominators = body.basic_blocks.dominators();\n+        let mut this = SsaLocals { assignments, assignment_order, dominators };\n \n         let borrowed = borrowed_locals(body);\n         for (local, decl) in body.local_decls.iter_enumerated() {\n@@ -117,7 +120,23 @@ impl<'tcx> Visitor<'tcx> for SsaLocals {\n             PlaceContext::MutatingUse(_) => self.assignments[local] = Set1::Many,\n             // Immutable borrows and AddressOf are taken into account in `SsaLocals::new` by\n             // removing non-freeze locals.\n-            PlaceContext::NonMutatingUse(_) | PlaceContext::NonUse(_) => {}\n+            PlaceContext::NonMutatingUse(_) => {\n+                let set = &mut self.assignments[local];\n+                let assign_dominates = match *set {\n+                    Set1::Empty | Set1::Many => false,\n+                    Set1::One(LocationExtended::Arg) => true,\n+                    Set1::One(LocationExtended::Plain(assign)) => {\n+                        assign.dominates(loc, &self.dominators)\n+                    }\n+                };\n+                // We are visiting a use that is not dominated by an assignment.\n+                // Either there is a cycle involved, or we are reading for uninitialized local.\n+                // Bail out.\n+                if !assign_dominates {\n+                    *set = Set1::Many;\n+                }\n+            }\n+            PlaceContext::NonUse(_) => {}\n         }\n     }\n }"}, {"sha": "9760fd3740fb90af6717b5921bc8b202f5b7ff46", "filename": "tests/mir-opt/copy-prop/non_dominate.f.CopyProp.diff", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d45815eb4ae2737b5fb8f4eeeb0eb3d784efeca3/tests%2Fmir-opt%2Fcopy-prop%2Fnon_dominate.f.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d45815eb4ae2737b5fb8f4eeeb0eb3d784efeca3/tests%2Fmir-opt%2Fcopy-prop%2Fnon_dominate.f.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fnon_dominate.f.CopyProp.diff?ref=d45815eb4ae2737b5fb8f4eeeb0eb3d784efeca3", "patch": "@@ -0,0 +1,29 @@\n+- // MIR for `f` before CopyProp\n++ // MIR for `f` after CopyProp\n+  \n+  fn f(_1: bool) -> bool {\n+      let mut _0: bool;                    // return place in scope 0 at $DIR/non_dominate.rs:+0:18: +0:22\n+      let mut _2: bool;                    // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _3: bool;                    // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+  \n+      bb0: {\n+          goto -> bb1;                     // scope 0 at $DIR/non_dominate.rs:+4:11: +4:20\n+      }\n+  \n+      bb1: {\n+          _3 = _1;                         // scope 0 at $DIR/non_dominate.rs:+5:17: +5:22\n+          switchInt(_3) -> [0: bb3, otherwise: bb2]; // scope 0 at $DIR/non_dominate.rs:+5:24: +5:58\n+      }\n+  \n+      bb2: {\n+          _2 = _3;                         // scope 0 at $DIR/non_dominate.rs:+8:17: +8:22\n+          _1 = const false;                // scope 0 at $DIR/non_dominate.rs:+8:24: +8:33\n+          goto -> bb1;                     // scope 0 at $DIR/non_dominate.rs:+8:35: +8:44\n+      }\n+  \n+      bb3: {\n+          _0 = _2;                         // scope 0 at $DIR/non_dominate.rs:+9:17: +9:24\n+          return;                          // scope 0 at $DIR/non_dominate.rs:+9:26: +9:34\n+      }\n+  }\n+  "}, {"sha": "c0ea838e1c885ff23490ce5fde0913542158b413", "filename": "tests/mir-opt/copy-prop/non_dominate.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d45815eb4ae2737b5fb8f4eeeb0eb3d784efeca3/tests%2Fmir-opt%2Fcopy-prop%2Fnon_dominate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45815eb4ae2737b5fb8f4eeeb0eb3d784efeca3/tests%2Fmir-opt%2Fcopy-prop%2Fnon_dominate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fnon_dominate.rs?ref=d45815eb4ae2737b5fb8f4eeeb0eb3d784efeca3", "patch": "@@ -0,0 +1,26 @@\n+// unit-test: CopyProp\n+\n+#![feature(custom_mir, core_intrinsics)]\n+#![allow(unused_assignments)]\n+extern crate core;\n+use core::intrinsics::mir::*;\n+\n+#[custom_mir(dialect = \"analysis\", phase = \"post-cleanup\")]\n+fn f(c: bool) -> bool {\n+    mir!(\n+        let a: bool;\n+        let b: bool;\n+        { Goto(bb1) }\n+        bb1 = { b = c; match b { false => bb3, _ => bb2 }}\n+        // This assignment to `a` does not dominate the use in `bb3`.\n+        // It should not be replaced by `b`.\n+        bb2 = { a = b; c = false; Goto(bb1) }\n+        bb3 = { RET = a; Return() }\n+    )\n+}\n+\n+fn main() {\n+    assert_eq!(true, f(true));\n+}\n+\n+// EMIT_MIR non_dominate.f.CopyProp.diff"}]}