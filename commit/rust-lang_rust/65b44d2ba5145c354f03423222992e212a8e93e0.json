{"sha": "65b44d2ba5145c354f03423222992e212a8e93e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1YjQ0ZDJiYTUxNDVjMzU0ZjAzNDIzMjIyOTkyZTIxMmE4ZTkzZTA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-03T07:36:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-03T07:36:49Z"}, "message": "Merge #6421\n\n6421: Check for allow(..) attributes in case check diagnostic r=popzxc a=popzxc\n\nResolves #6348\r\n\r\nThis is not a full-fledged solution, as it doesn't looks up for parent elements (e.g. function -> module -> parent module -> crate root), but it does at least checks attributes of item being checked.\r\nI played a bit with code, and it seems that implementing a proper solution (which will also check for `deny` / `warn` attributes overriding values for `allow`s from above).\r\n\r\nSo, this solution should fix all the macros which intentionally do \"weird\" naming and wrap it with `allow`, such as `lazy_static`.\r\n\r\ncc @ArifRoktim \r\n\n\nCo-authored-by: Igor Aleksanov <popzxc@yandex.ru>", "tree": {"sha": "2aaaf2f4e3fb8b58f61be04ece95e00cc8fda922", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2aaaf2f4e3fb8b58f61be04ece95e00cc8fda922"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65b44d2ba5145c354f03423222992e212a8e93e0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfoQiRCRBK7hj4Ov3rIwAAdHIIAADbI4ANQWiDMaQCzvN+40D7\nP5ZnM+gC8p6S4hbcUmrqXqbMt+vAT8OOEja6k/aIeN95CNp+Q0brUX8MU0kKf8Ra\nlYN1KtHfvIFpyyGRt6S/EesBHr1LSc1I7Mlq/l1ZPDOAA+rNzMClR/qczQBH5nMc\n/71Uc+xOaCRYL1nnBUyI6jiVTNP7s0Z594uzudgYl+FAA6cQqlZ/dWn1Db4MSVIN\nflTUD75dk70wDrHqxmTh2DtlgcRqY4zt8kClMFnKY6GAlfNTwOFqLKnQCbSDnC18\nYd7kAbHOvRxxKcDj7kYkoinSOGJJl5Y7zIXWSLtGfKhgDH+1y/Zeo4cftJtWT9g=\n=v48/\n-----END PGP SIGNATURE-----\n", "payload": "tree 2aaaf2f4e3fb8b58f61be04ece95e00cc8fda922\nparent 245e1b533b5be5ea4a917957fb02d7f57e6b4661\nparent dd2febf05a4ceca23679bb664848cc15fce2f0e9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1604389009 +0000\ncommitter GitHub <noreply@github.com> 1604389009 +0000\n\nMerge #6421\n\n6421: Check for allow(..) attributes in case check diagnostic r=popzxc a=popzxc\n\nResolves #6348\r\n\r\nThis is not a full-fledged solution, as it doesn't looks up for parent elements (e.g. function -> module -> parent module -> crate root), but it does at least checks attributes of item being checked.\r\nI played a bit with code, and it seems that implementing a proper solution (which will also check for `deny` / `warn` attributes overriding values for `allow`s from above).\r\n\r\nSo, this solution should fix all the macros which intentionally do \"weird\" naming and wrap it with `allow`, such as `lazy_static`.\r\n\r\ncc @ArifRoktim \r\n\n\nCo-authored-by: Igor Aleksanov <popzxc@yandex.ru>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65b44d2ba5145c354f03423222992e212a8e93e0", "html_url": "https://github.com/rust-lang/rust/commit/65b44d2ba5145c354f03423222992e212a8e93e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65b44d2ba5145c354f03423222992e212a8e93e0/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "245e1b533b5be5ea4a917957fb02d7f57e6b4661", "url": "https://api.github.com/repos/rust-lang/rust/commits/245e1b533b5be5ea4a917957fb02d7f57e6b4661", "html_url": "https://github.com/rust-lang/rust/commit/245e1b533b5be5ea4a917957fb02d7f57e6b4661"}, {"sha": "dd2febf05a4ceca23679bb664848cc15fce2f0e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd2febf05a4ceca23679bb664848cc15fce2f0e9", "html_url": "https://github.com/rust-lang/rust/commit/dd2febf05a4ceca23679bb664848cc15fce2f0e9"}], "stats": {"total": 126, "additions": 96, "deletions": 30}, "files": [{"sha": "4b3e2fa8f66b6e9152a6c9d1b675028e54ff1b6f", "filename": "crates/hir_ty/src/diagnostics/decl_check.rs", "status": "modified", "additions": 96, "deletions": 30, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/65b44d2ba5145c354f03423222992e212a8e93e0/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b44d2ba5145c354f03423222992e212a8e93e0/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs?ref=65b44d2ba5145c354f03423222992e212a8e93e0", "patch": "@@ -16,7 +16,7 @@ use hir_def::{\n     adt::VariantData,\n     expr::{Pat, PatId},\n     src::HasSource,\n-    AdtId, ConstId, EnumId, FunctionId, Lookup, ModuleDefId, StaticId, StructId,\n+    AdtId, AttrDefId, ConstId, EnumId, FunctionId, Lookup, ModuleDefId, StaticId, StructId,\n };\n use hir_expand::{\n     diagnostics::DiagnosticSink,\n@@ -32,6 +32,12 @@ use crate::{\n     diagnostics::{decl_check::case_conv::*, CaseType, IncorrectCase},\n };\n \n+mod allow {\n+    pub(super) const NON_SNAKE_CASE: &str = \"non_snake_case\";\n+    pub(super) const NON_UPPER_CASE_GLOBAL: &str = \"non_upper_case_globals\";\n+    pub(super) const NON_CAMEL_CASE_TYPES: &str = \"non_camel_case_types\";\n+}\n+\n pub(super) struct DeclValidator<'a, 'b: 'a> {\n     owner: ModuleDefId,\n     sink: &'a mut DiagnosticSink<'b>,\n@@ -72,11 +78,29 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n         }\n     }\n \n+    /// Checks whether not following the convention is allowed for this item.\n+    ///\n+    /// Currently this method doesn't check parent attributes.\n+    fn allowed(&self, db: &dyn HirDatabase, id: AttrDefId, allow_name: &str) -> bool {\n+        db.attrs(id).by_key(\"allow\").tt_values().any(|tt| tt.to_string().contains(allow_name))\n+    }\n+\n     fn validate_func(&mut self, db: &dyn HirDatabase, func: FunctionId) {\n         let data = db.function_data(func);\n         let body = db.body(func.into());\n \n-        // 1. Check the function name.\n+        // Recursively validate inner scope items, such as static variables and constants.\n+        for (item_id, _) in body.item_scope.values() {\n+            let mut validator = DeclValidator::new(item_id, self.sink);\n+            validator.validate_item(db);\n+        }\n+\n+        // Check whether non-snake case identifiers are allowed for this function.\n+        if self.allowed(db, func.into(), allow::NON_SNAKE_CASE) {\n+            return;\n+        }\n+\n+        // Check the function name.\n         let function_name = data.name.to_string();\n         let fn_name_replacement = if let Some(new_name) = to_lower_snake_case(&function_name) {\n             let replacement = Replacement {\n@@ -89,7 +113,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             None\n         };\n \n-        // 2. Check the param names.\n+        // Check the param names.\n         let mut fn_param_replacements = Vec::new();\n \n         for pat_id in body.params.iter().cloned() {\n@@ -111,7 +135,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             }\n         }\n \n-        // 3. Check the patterns inside the function body.\n+        // Check the patterns inside the function body.\n         let mut pats_replacements = Vec::new();\n \n         for (pat_idx, pat) in body.pats.iter() {\n@@ -136,20 +160,14 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             }\n         }\n \n-        // 4. If there is at least one element to spawn a warning on, go to the source map and generate a warning.\n+        // If there is at least one element to spawn a warning on, go to the source map and generate a warning.\n         self.create_incorrect_case_diagnostic_for_func(\n             func,\n             db,\n             fn_name_replacement,\n             fn_param_replacements,\n         );\n         self.create_incorrect_case_diagnostic_for_variables(func, db, pats_replacements);\n-\n-        // 5. Recursively validate inner scope items, such as static variables and constants.\n-        for (item_id, _) in body.item_scope.values() {\n-            let mut validator = DeclValidator::new(item_id, self.sink);\n-            validator.validate_item(db);\n-        }\n     }\n \n     /// Given the information about incorrect names in the function declaration, looks up into the source code\n@@ -169,7 +187,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n         let fn_loc = func.lookup(db.upcast());\n         let fn_src = fn_loc.source(db.upcast());\n \n-        // 1. Diagnostic for function name.\n+        // Diagnostic for function name.\n         if let Some(replacement) = fn_name_replacement {\n             let ast_ptr = match fn_src.value.name() {\n                 Some(name) => name,\n@@ -196,7 +214,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             self.sink.push(diagnostic);\n         }\n \n-        // 2. Diagnostics for function params.\n+        // Diagnostics for function params.\n         let fn_params_list = match fn_src.value.param_list() {\n             Some(params) => params,\n             None => {\n@@ -312,37 +330,47 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n     fn validate_struct(&mut self, db: &dyn HirDatabase, struct_id: StructId) {\n         let data = db.struct_data(struct_id);\n \n-        // 1. Check the structure name.\n+        let non_camel_case_allowed =\n+            self.allowed(db, struct_id.into(), allow::NON_CAMEL_CASE_TYPES);\n+        let non_snake_case_allowed = self.allowed(db, struct_id.into(), allow::NON_SNAKE_CASE);\n+\n+        // Check the structure name.\n         let struct_name = data.name.to_string();\n         let struct_name_replacement = if let Some(new_name) = to_camel_case(&struct_name) {\n             let replacement = Replacement {\n                 current_name: data.name.clone(),\n                 suggested_text: new_name,\n                 expected_case: CaseType::UpperCamelCase,\n             };\n-            Some(replacement)\n+            if non_camel_case_allowed {\n+                None\n+            } else {\n+                Some(replacement)\n+            }\n         } else {\n             None\n         };\n \n-        // 2. Check the field names.\n+        // Check the field names.\n         let mut struct_fields_replacements = Vec::new();\n \n-        if let VariantData::Record(fields) = data.variant_data.as_ref() {\n-            for (_, field) in fields.iter() {\n-                let field_name = field.name.to_string();\n-                if let Some(new_name) = to_lower_snake_case(&field_name) {\n-                    let replacement = Replacement {\n-                        current_name: field.name.clone(),\n-                        suggested_text: new_name,\n-                        expected_case: CaseType::LowerSnakeCase,\n-                    };\n-                    struct_fields_replacements.push(replacement);\n+        if !non_snake_case_allowed {\n+            if let VariantData::Record(fields) = data.variant_data.as_ref() {\n+                for (_, field) in fields.iter() {\n+                    let field_name = field.name.to_string();\n+                    if let Some(new_name) = to_lower_snake_case(&field_name) {\n+                        let replacement = Replacement {\n+                            current_name: field.name.clone(),\n+                            suggested_text: new_name,\n+                            expected_case: CaseType::LowerSnakeCase,\n+                        };\n+                        struct_fields_replacements.push(replacement);\n+                    }\n                 }\n             }\n         }\n \n-        // 3. If there is at least one element to spawn a warning on, go to the source map and generate a warning.\n+        // If there is at least one element to spawn a warning on, go to the source map and generate a warning.\n         self.create_incorrect_case_diagnostic_for_struct(\n             struct_id,\n             db,\n@@ -442,7 +470,12 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n     fn validate_enum(&mut self, db: &dyn HirDatabase, enum_id: EnumId) {\n         let data = db.enum_data(enum_id);\n \n-        // 1. Check the enum name.\n+        // Check whether non-camel case names are allowed for this enum.\n+        if self.allowed(db, enum_id.into(), allow::NON_CAMEL_CASE_TYPES) {\n+            return;\n+        }\n+\n+        // Check the enum name.\n         let enum_name = data.name.to_string();\n         let enum_name_replacement = if let Some(new_name) = to_camel_case(&enum_name) {\n             let replacement = Replacement {\n@@ -455,7 +488,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             None\n         };\n \n-        // 2. Check the field names.\n+        // Check the field names.\n         let mut enum_fields_replacements = Vec::new();\n \n         for (_, variant) in data.variants.iter() {\n@@ -470,7 +503,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             }\n         }\n \n-        // 3. If there is at least one element to spawn a warning on, go to the source map and generate a warning.\n+        // If there is at least one element to spawn a warning on, go to the source map and generate a warning.\n         self.create_incorrect_case_diagnostic_for_enum(\n             enum_id,\n             db,\n@@ -572,6 +605,10 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n     fn validate_const(&mut self, db: &dyn HirDatabase, const_id: ConstId) {\n         let data = db.const_data(const_id);\n \n+        if self.allowed(db, const_id.into(), allow::NON_UPPER_CASE_GLOBAL) {\n+            return;\n+        }\n+\n         let name = match &data.name {\n             Some(name) => name,\n             None => return,\n@@ -612,6 +649,10 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n     fn validate_static(&mut self, db: &dyn HirDatabase, static_id: StaticId) {\n         let data = db.static_data(static_id);\n \n+        if self.allowed(db, static_id.into(), allow::NON_UPPER_CASE_GLOBAL) {\n+            return;\n+        }\n+\n         let name = match &data.name {\n             Some(name) => name,\n             None => return,\n@@ -854,4 +895,29 @@ fn main() {\n \"#,\n         );\n     }\n+\n+    #[test]\n+    fn allow_attributes() {\n+        check_diagnostics(\n+            r#\"\n+            #[allow(non_snake_case)]\n+    fn NonSnakeCaseName(SOME_VAR: u8) -> u8{\n+        let OtherVar = SOME_VAR + 1;\n+        OtherVar\n+    }\n+\n+    #[allow(non_snake_case, non_camel_case_types)]\n+    pub struct some_type {\n+        SOME_FIELD: u8,\n+        SomeField: u16,\n+    }\n+\n+    #[allow(non_upper_case_globals)]\n+    pub const some_const: u8 = 10;\n+\n+    #[allow(non_upper_case_globals)]\n+    pub static SomeStatic: u8 = 10;\n+    \"#,\n+        );\n+    }\n }"}]}