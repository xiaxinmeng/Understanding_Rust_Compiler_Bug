{"sha": "9866b090f48fc5f45ca9c80618976e41987fc25d", "node_id": "C_kwDOAAsO6NoAKDk4NjZiMDkwZjQ4ZmM1ZjQ1Y2E5YzgwNjE4OTc2ZTQxOTg3ZmMyNWQ", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-10-04T20:58:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-04T20:58:17Z"}, "message": "Rollup merge of #89508 - jhpratt:stabilize-const_panic, r=joshtriplett\n\nStabilize `const_panic`\n\nCloses #51999\n\nFCP completed in #89006\n\n```@rustbot``` label +A-const-eval +A-const-fn +T-lang\n\ncc ```@oli-obk``` for review (not `r?`'ing as not on lang team)", "tree": {"sha": "2684f9670ab0a20213c782cf681e637d30095459", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2684f9670ab0a20213c782cf681e637d30095459"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9866b090f48fc5f45ca9c80618976e41987fc25d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhW2rqCRBK7hj4Ov3rIwAAf50IABIPWOMvKouvWh02EXdzdf9j\nTknwJjGbnWBTvM3b08wGIjBnK2G/WA5RTHZbvIHkcms/LpQj8jj3vLl/L5lUM50x\nqWP7CId6uBkqVX9tkWrqvRzbw8dz8Hl8B5ygK79H042VTPq/x/NXxPjUhfqYcZVS\nmZDBIP1SjpgqjNlInqdqzwlo2Edd1pSRSZYDqdjI1yRsdLy2leprblHXXlZCReSu\nHqA8QAEYwht7CSc+ONew6zuwqINndbdKK8RPtVBaTyKQe5Bo7PxTgTPMLLuOKUES\njoenFaCXOxgpbMB9ynXZshzRsxXfQkgX2nOXTKbnvJnXcvw4EsKOV4cjJu6GsSw=\n=SFNZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 2684f9670ab0a20213c782cf681e637d30095459\nparent 3d4467dfcc512fcb2dc2454c9cf77c23ff3de343\nparent bce86219830e386d1247364b6018ede2e85d3036\nauthor Jubilee <46493976+workingjubilee@users.noreply.github.com> 1633381097 -0700\ncommitter GitHub <noreply@github.com> 1633381097 -0700\n\nRollup merge of #89508 - jhpratt:stabilize-const_panic, r=joshtriplett\n\nStabilize `const_panic`\n\nCloses #51999\n\nFCP completed in #89006\n\n```@rustbot``` label +A-const-eval +A-const-fn +T-lang\n\ncc ```@oli-obk``` for review (not `r?`'ing as not on lang team)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9866b090f48fc5f45ca9c80618976e41987fc25d", "html_url": "https://github.com/rust-lang/rust/commit/9866b090f48fc5f45ca9c80618976e41987fc25d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9866b090f48fc5f45ca9c80618976e41987fc25d/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d4467dfcc512fcb2dc2454c9cf77c23ff3de343", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d4467dfcc512fcb2dc2454c9cf77c23ff3de343", "html_url": "https://github.com/rust-lang/rust/commit/3d4467dfcc512fcb2dc2454c9cf77c23ff3de343"}, {"sha": "bce86219830e386d1247364b6018ede2e85d3036", "url": "https://api.github.com/repos/rust-lang/rust/commits/bce86219830e386d1247364b6018ede2e85d3036", "html_url": "https://github.com/rust-lang/rust/commit/bce86219830e386d1247364b6018ede2e85d3036"}], "stats": {"total": 329, "additions": 100, "deletions": 229}, "files": [{"sha": "e6260157d11a752bda23d4f6b0022fff47477b7d", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -2,7 +2,7 @@\n \n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n-#![feature(const_panic)]\n+#![cfg_attr(bootstrap, feature(const_panic))]\n #![feature(crate_visibility_modifier)]\n #![feature(format_args_capture)]\n #![feature(in_band_lifetimes)]"}, {"sha": "fd5cd269a3a9e7e7ba77ad40e3f355d52903e288", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -887,8 +887,6 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n \n                 // At this point, we are calling a function, `callee`, whose `DefId` is known...\n                 if is_lang_panic_fn(tcx, callee) {\n-                    self.check_op(ops::Panic);\n-\n                     // `begin_panic` and `panic_display` are generic functions that accept\n                     // types other than str. Check to enforce that only str can be used in\n                     // const-eval."}, {"sha": "f08f51ec6279ac8f52ffc958af00ca071c8a909e", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -368,23 +368,6 @@ impl NonConstOp for MutDeref {\n     }\n }\n \n-#[derive(Debug)]\n-pub struct Panic;\n-impl NonConstOp for Panic {\n-    fn status_in_item(&self, _: &ConstCx<'_, '_>) -> Status {\n-        Status::Unstable(sym::const_panic)\n-    }\n-\n-    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n-        feature_err(\n-            &ccx.tcx.sess.parse_sess,\n-            sym::const_panic,\n-            span,\n-            &format!(\"panicking in {}s is unstable\", ccx.const_kind()),\n-        )\n-    }\n-}\n-\n /// A call to a `panic()` lang item where the first argument is _not_ a `&str`.\n #[derive(Debug)]\n pub struct PanicNonStr;"}, {"sha": "94e115ed498564ae4cdc81be69a8be8222016ac0", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -11,7 +11,7 @@\n #![feature(associated_type_bounds)]\n #![feature(auto_traits)]\n #![feature(bool_to_option)]\n-#![feature(const_panic)]\n+#![cfg_attr(bootstrap, feature(const_panic))]\n #![feature(control_flow_enum)]\n #![feature(core_intrinsics)]\n #![feature(extend_one)]"}, {"sha": "2ef0e0f6b1e56e6e6b7c293a69caa870e60b50c3", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -297,6 +297,8 @@ declare_features! (\n     (accepted, arbitrary_enum_discriminant, \"1.56.0\", Some(60553), None),\n     /// Allows macro attributes to observe output of `#[derive]`.\n     (accepted, macro_attributes_in_derive_output, \"1.57.0\", Some(81119), None),\n+    /// Allows panicking during const eval (producing compile-time errors).\n+    (accepted, const_panic, \"1.57.0\", Some(51999), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features"}, {"sha": "eae7f7854ecb1bb44a0cd97c3bd77a176d69d347", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -425,9 +425,6 @@ declare_features! (\n     /// Allows using the `amdgpu-kernel` ABI.\n     (active, abi_amdgpu_kernel, \"1.29.0\", Some(51575), None),\n \n-    /// Allows panicking during const eval (producing compile-time errors).\n-    (active, const_panic, \"1.30.0\", Some(51999), None),\n-\n     /// Allows `#[marker]` on certain traits allowing overlapping implementations.\n     (active, marker_trait_attr, \"1.30.0\", Some(29864), None),\n "}, {"sha": "8831524683432352848f7fb692d97d86323fc585", "filename": "compiler/rustc_index/src/vec.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec.rs?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -124,7 +124,9 @@ macro_rules! newtype_index {\n \n             #[inline]\n             $v const fn from_usize(value: usize) -> Self {\n-                // FIXME: replace with `assert!(value <= ($max as usize));` once `const_panic` is stable\n+                #[cfg(not(bootstrap))]\n+                assert!(value <= ($max as usize));\n+                #[cfg(bootstrap)]\n                 [()][(value > ($max as usize)) as usize];\n                 unsafe {\n                     Self::from_u32_unchecked(value as u32)\n@@ -133,7 +135,9 @@ macro_rules! newtype_index {\n \n             #[inline]\n             $v const fn from_u32(value: u32) -> Self {\n-                // FIXME: replace with `assert!(value <= $max);` once `const_panic` is stable\n+                #[cfg(not(bootstrap))]\n+                assert!(value <= $max);\n+                #[cfg(bootstrap)]\n                 [()][(value > $max) as usize];\n                 unsafe {\n                     Self::from_u32_unchecked(value)"}, {"sha": "402391b87eaa93e177dee350192a0beacc64e7ea", "filename": "compiler/rustc_mir_dataflow/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -2,7 +2,7 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![feature(const_panic)]\n+#![cfg_attr(bootstrap, feature(const_panic))]\n #![feature(exact_size_is_empty)]\n #![feature(in_band_lifetimes)]\n #![feature(iter_zip)]"}, {"sha": "0ca640cd7b17347486099695a5eb8657a6213376", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -1,7 +1,7 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]\n-#![feature(const_panic)]\n+#![cfg_attr(bootstrap, feature(const_panic))]\n #![feature(in_band_lifetimes)]\n #![feature(iter_zip)]\n #![feature(map_try_insert)]"}, {"sha": "4742970f9542bc448e5bb7aa03e0c1bea2816710", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -124,7 +124,7 @@\n #![feature(const_fn_trait_bound)]\n #![feature(const_impl_trait)]\n #![feature(const_mut_refs)]\n-#![feature(const_panic)]\n+#![cfg_attr(bootstrap, feature(const_panic))]\n #![feature(const_precise_live_drops)]\n #![feature(const_raw_ptr_deref)]\n #![feature(const_refs_to_cell)]"}, {"sha": "017746647ab0db4b2b06e4ecc5b39a7f0f3af66e", "filename": "src/test/mir-opt/remove-never-const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fmir-opt%2Fremove-never-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fmir-opt%2Fremove-never-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove-never-const.rs?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -5,7 +5,6 @@\n // Force generation of optimized mir for functions that do not reach codegen.\n // compile-flags: --emit mir,link\n \n-#![feature(const_panic)]\n #![feature(never_type)]\n #![warn(const_err)]\n "}, {"sha": "bf62c8441fd110d3b8ab3feb9d3e531fe08a73eb", "filename": "src/test/mir-opt/remove_never_const.no_codegen.PreCodegen.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fmir-opt%2Fremove_never_const.no_codegen.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fmir-opt%2Fremove_never_const.no_codegen.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_never_const.no_codegen.PreCodegen.after.mir?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -1,11 +1,11 @@\n // MIR for `no_codegen` after PreCodegen\n \n fn no_codegen() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/remove-never-const.rs:19:20: 19:20\n+    let mut _0: ();                      // return place in scope 0 at $DIR/remove-never-const.rs:18:20: 18:20\n     scope 1 {\n     }\n \n     bb0: {\n-        unreachable;                     // scope 0 at $DIR/remove-never-const.rs:20:13: 20:33\n+        unreachable;                     // scope 0 at $DIR/remove-never-const.rs:19:13: 19:33\n     }\n }"}, {"sha": "5b9a8f8e2a279ce341083e1b7ae00be55a2cb8c4", "filename": "src/test/ui/consts/const-eval/const_panic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_panic)]\n #![allow(non_fmt_panics)]\n #![crate_type = \"lib\"]\n "}, {"sha": "3932c2bc0ac73c74432c3626266101461319298a", "filename": "src/test/ui/consts/const-eval/const_panic.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -1,96 +1,96 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic.rs:7:15\n+  --> $DIR/const_panic.rs:6:15\n    |\n LL | const Z: () = std::panic!(\"cheese\");\n-   |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'cheese', $DIR/const_panic.rs:7:15\n+   |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'cheese', $DIR/const_panic.rs:6:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic.rs:10:16\n+  --> $DIR/const_panic.rs:9:16\n    |\n LL | const Z2: () = std::panic!();\n-   |                ^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:10:16\n+   |                ^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:9:16\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic.rs:13:15\n+  --> $DIR/const_panic.rs:12:15\n    |\n LL | const Y: () = std::unreachable!();\n-   |               ^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:13:15\n+   |               ^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:12:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic.rs:16:15\n+  --> $DIR/const_panic.rs:15:15\n    |\n LL | const X: () = std::unimplemented!();\n-   |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:16:15\n+   |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:15:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic.rs:19:15\n+  --> $DIR/const_panic.rs:18:15\n    |\n LL | const W: () = std::panic!(MSG);\n-   |               ^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:19:15\n+   |               ^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:18:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic.rs:22:16\n+  --> $DIR/const_panic.rs:21:16\n    |\n LL | const W2: () = std::panic!(\"{}\", MSG);\n-   |                ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:22:16\n+   |                ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:21:16\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic.rs:25:20\n+  --> $DIR/const_panic.rs:24:20\n    |\n LL | const Z_CORE: () = core::panic!(\"cheese\");\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'cheese', $DIR/const_panic.rs:25:20\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'cheese', $DIR/const_panic.rs:24:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic.rs:28:21\n+  --> $DIR/const_panic.rs:27:21\n    |\n LL | const Z2_CORE: () = core::panic!();\n-   |                     ^^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:28:21\n+   |                     ^^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:27:21\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic.rs:31:20\n+  --> $DIR/const_panic.rs:30:20\n    |\n LL | const Y_CORE: () = core::unreachable!();\n-   |                    ^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:31:20\n+   |                    ^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:30:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic.rs:34:20\n+  --> $DIR/const_panic.rs:33:20\n    |\n LL | const X_CORE: () = core::unimplemented!();\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:34:20\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:33:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic.rs:37:20\n+  --> $DIR/const_panic.rs:36:20\n    |\n LL | const W_CORE: () = core::panic!(MSG);\n-   |                    ^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:37:20\n+   |                    ^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:36:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic.rs:40:21\n+  --> $DIR/const_panic.rs:39:21\n    |\n LL | const W2_CORE: () = core::panic!(\"{}\", MSG);\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:40:21\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:39:21\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "4702aa2f5f01ca0c711344011d66a1a822cdea44", "filename": "src/test/ui/consts/const-eval/const_panic_2021.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.rs?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -1,5 +1,4 @@\n // edition:2021\n-#![feature(const_panic)]\n #![crate_type = \"lib\"]\n \n const MSG: &str = \"hello\";"}, {"sha": "975a07e2b0efac1171de5b349480993586019469", "filename": "src/test/ui/consts/const-eval/const_panic_2021.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.stderr?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -1,80 +1,80 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:7:15\n+  --> $DIR/const_panic_2021.rs:6:15\n    |\n LL | const A: () = std::panic!(\"bl\u00e5haj\");\n-   |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'bl\u00e5haj', $DIR/const_panic_2021.rs:7:15\n+   |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'bl\u00e5haj', $DIR/const_panic_2021.rs:6:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:10:15\n+  --> $DIR/const_panic_2021.rs:9:15\n    |\n LL | const B: () = std::panic!();\n-   |               ^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic_2021.rs:10:15\n+   |               ^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic_2021.rs:9:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:13:15\n+  --> $DIR/const_panic_2021.rs:12:15\n    |\n LL | const C: () = std::unreachable!();\n-   |               ^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_2021.rs:13:15\n+   |               ^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_2021.rs:12:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:16:15\n+  --> $DIR/const_panic_2021.rs:15:15\n    |\n LL | const D: () = std::unimplemented!();\n-   |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic_2021.rs:16:15\n+   |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic_2021.rs:15:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:19:15\n+  --> $DIR/const_panic_2021.rs:18:15\n    |\n LL | const E: () = std::panic!(\"{}\", MSG);\n-   |               ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic_2021.rs:19:15\n+   |               ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic_2021.rs:18:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:22:20\n+  --> $DIR/const_panic_2021.rs:21:20\n    |\n LL | const A_CORE: () = core::panic!(\"shark\");\n-   |                    ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'shark', $DIR/const_panic_2021.rs:22:20\n+   |                    ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'shark', $DIR/const_panic_2021.rs:21:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:25:20\n+  --> $DIR/const_panic_2021.rs:24:20\n    |\n LL | const B_CORE: () = core::panic!();\n-   |                    ^^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic_2021.rs:25:20\n+   |                    ^^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic_2021.rs:24:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:28:20\n+  --> $DIR/const_panic_2021.rs:27:20\n    |\n LL | const C_CORE: () = core::unreachable!();\n-   |                    ^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_2021.rs:28:20\n+   |                    ^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_2021.rs:27:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:31:20\n+  --> $DIR/const_panic_2021.rs:30:20\n    |\n LL | const D_CORE: () = core::unimplemented!();\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic_2021.rs:31:20\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic_2021.rs:30:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:34:20\n+  --> $DIR/const_panic_2021.rs:33:20\n    |\n LL | const E_CORE: () = core::panic!(\"{}\", MSG);\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic_2021.rs:34:20\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic_2021.rs:33:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "d4dc1a51d73aae76e79af9001097e959a7ea2bb6", "filename": "src/test/ui/consts/const-eval/const_panic_libcore_bin.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.rs?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -1,6 +1,5 @@\n #![crate_type = \"bin\"]\n #![feature(lang_items)]\n-#![feature(const_panic)]\n #![no_main]\n #![no_std]\n "}, {"sha": "b3fa38241a4ef792a4a08e0f9ecee6fab2f73e6e", "filename": "src/test/ui/consts/const-eval/const_panic_libcore_bin.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -1,24 +1,24 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_libcore_bin.rs:9:15\n+  --> $DIR/const_panic_libcore_bin.rs:8:15\n    |\n LL | const Z: () = panic!(\"cheese\");\n-   |               ^^^^^^^^^^^^^^^^ the evaluated program panicked at 'cheese', $DIR/const_panic_libcore_bin.rs:9:15\n+   |               ^^^^^^^^^^^^^^^^ the evaluated program panicked at 'cheese', $DIR/const_panic_libcore_bin.rs:8:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_libcore_bin.rs:12:15\n+  --> $DIR/const_panic_libcore_bin.rs:11:15\n    |\n LL | const Y: () = unreachable!();\n-   |               ^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore_bin.rs:12:15\n+   |               ^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore_bin.rs:11:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_libcore_bin.rs:15:15\n+  --> $DIR/const_panic_libcore_bin.rs:14:15\n    |\n LL | const X: () = unimplemented!();\n-   |               ^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic_libcore_bin.rs:15:15\n+   |               ^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic_libcore_bin.rs:14:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "9cf7a3ba7dc1cfb74b903954b3a14cef0dea7ee2", "filename": "src/test/ui/consts/const-eval/const_panic_track_caller.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_track_caller.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_track_caller.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_track_caller.rs?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_panic)]\n #![allow(non_fmt_panics)]\n #![crate_type = \"lib\"]\n "}, {"sha": "5c3b412d37fcc1752520abd7df779648c8e14705", "filename": "src/test/ui/consts/const-eval/const_panic_track_caller.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_track_caller.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_track_caller.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_track_caller.stderr?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -1,14 +1,14 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_track_caller.rs:16:5\n+  --> $DIR/const_panic_track_caller.rs:15:5\n    |\n LL |     b()\n    |     ^^^\n    |     |\n-   |     the evaluated program panicked at 'hey', $DIR/const_panic_track_caller.rs:16:5\n-   |     inside `c` at $DIR/const_panic_track_caller.rs:16:5\n+   |     the evaluated program panicked at 'hey', $DIR/const_panic_track_caller.rs:15:5\n+   |     inside `c` at $DIR/const_panic_track_caller.rs:15:5\n ...\n LL | const X: u32 = c();\n-   |                --- inside `X` at $DIR/const_panic_track_caller.rs:22:16\n+   |                --- inside `X` at $DIR/const_panic_track_caller.rs:21:16\n \n error: aborting due to previous error\n "}, {"sha": "ba5b07239a2006756a85d2649529e7f650160e19", "filename": "src/test/ui/consts/const-eval/feature-gate-const_panic.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3d4467dfcc512fcb2dc2454c9cf77c23ff3de343/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d4467dfcc512fcb2dc2454c9cf77c23ff3de343/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_panic.rs?ref=3d4467dfcc512fcb2dc2454c9cf77c23ff3de343", "patch": "@@ -1,10 +0,0 @@\n-fn main() {}\n-\n-const Z: () = panic!(\"cheese\");\n-//~^ ERROR panicking in constants is unstable\n-\n-const Y: () = unreachable!();\n-//~^ ERROR panicking in constants is unstable\n-\n-const X: () = unimplemented!();\n-//~^ ERROR panicking in constants is unstable"}, {"sha": "8d8e94cd4ff8af1d142a7ff223ae99f734d1c1a6", "filename": "src/test/ui/consts/const-eval/feature-gate-const_panic.stderr", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3d4467dfcc512fcb2dc2454c9cf77c23ff3de343/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d4467dfcc512fcb2dc2454c9cf77c23ff3de343/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_panic.stderr?ref=3d4467dfcc512fcb2dc2454c9cf77c23ff3de343", "patch": "@@ -1,33 +0,0 @@\n-error[E0658]: panicking in constants is unstable\n-  --> $DIR/feature-gate-const_panic.rs:3:15\n-   |\n-LL | const Z: () = panic!(\"cheese\");\n-   |               ^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n-   = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0658]: panicking in constants is unstable\n-  --> $DIR/feature-gate-const_panic.rs:6:15\n-   |\n-LL | const Y: () = unreachable!();\n-   |               ^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n-   = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0658]: panicking in constants is unstable\n-  --> $DIR/feature-gate-const_panic.rs:9:15\n-   |\n-LL | const X: () = unimplemented!();\n-   |               ^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n-   = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "2bdf5d5476576b5804efa6fd1845a6f3d3513843", "filename": "src/test/ui/consts/const-eval/panic-assoc-never-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -2,7 +2,6 @@\n \n // Regression test for #66975\n #![warn(const_err)]\n-#![feature(const_panic)]\n #![feature(never_type)]\n \n struct PrintName;"}, {"sha": "9631b7748b546ad875a3c2207f9cf67a83b715fd", "filename": "src/test/ui/consts/const-eval/panic-assoc-never-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -1,8 +1,8 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/panic-assoc-never-type.rs:11:21\n+  --> $DIR/panic-assoc-never-type.rs:10:21\n    |\n LL |     const VOID: ! = panic!();\n-   |                     ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/panic-assoc-never-type.rs:11:21\n+   |                     ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/panic-assoc-never-type.rs:10:21\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "a74d3ba2971899a420ccaea980c9e0a4dbbc261c", "filename": "src/test/ui/consts/const-eval/panic-never-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -1,6 +1,5 @@\n // Regression test for #66975\n #![warn(const_err)]\n-#![feature(const_panic)]\n #![feature(never_type)]\n \n const VOID: ! = panic!();"}, {"sha": "8f312d673a175bcc2d618297aa3be0b60d4101f7", "filename": "src/test/ui/consts/const-eval/panic-never-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -1,8 +1,8 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/panic-never-type.rs:6:17\n+  --> $DIR/panic-never-type.rs:5:17\n    |\n LL | const VOID: ! = panic!();\n-   |                 ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/panic-never-type.rs:6:17\n+   |                 ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/panic-never-type.rs:5:17\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "2b0e58166c2547b65c8a1a233ede479c499b58b5", "filename": "src/test/ui/consts/const-eval/unwind-abort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -1,4 +1,4 @@\n-#![feature(c_unwind, const_panic, const_extern_fn)]\n+#![feature(c_unwind, const_extern_fn)]\n \n const extern \"C\" fn foo() {\n     panic!() //~ ERROR evaluation of constant value failed"}, {"sha": "c857ad6df2de24cec2e01771bdf1553f92789817", "filename": "src/test/ui/consts/const-float-bits-conv.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-conv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-conv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-conv.rs?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -1,7 +1,6 @@\n // compile-flags: -Zmir-opt-level=0\n // run-pass\n \n-#![feature(const_panic)]\n #![feature(const_float_bits_conv)]\n #![feature(const_float_classify)]\n "}, {"sha": "74238d0dd923191f655184bc42ff3fea385c9bc8", "filename": "src/test/ui/consts/const-float-classify.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fconst-float-classify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fconst-float-classify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-float-classify.rs?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -1,7 +1,6 @@\n // compile-flags: -Zmir-opt-level=0\n // run-pass\n \n-#![feature(const_panic)]\n #![feature(const_float_bits_conv)]\n #![feature(const_float_classify)]\n #![feature(const_trait_impl)]"}, {"sha": "9d17f65b93cab803f0ddac3ab0ca9a57bc91d9ce", "filename": "src/test/ui/consts/control-flow/assert.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.rs?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -1,14 +1,8 @@\n-// Test that `assert` works when `const_panic` is enabled.\n-\n-// revisions: stock const_panic\n-\n-#![cfg_attr(const_panic, feature(const_panic))]\n+// Test that `assert` works in consts.\n \n const _: () = assert!(true);\n-//[stock]~^ ERROR panicking in constants is unstable\n \n const _: () = assert!(false);\n-//[stock]~^ ERROR panicking in constants is unstable\n-//[const_panic]~^^ ERROR evaluation of constant value failed\n+//~^ ERROR evaluation of constant value failed\n \n fn main() {}"}, {"sha": "8b1ca183de98b63d8a0c3f07eef946e3ed13f96a", "filename": "src/test/ui/consts/control-flow/assert.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.stderr?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -1,8 +1,8 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/assert.rs:10:15\n+  --> $DIR/assert.rs:5:15\n    |\n LL | const _: () = assert!(false);\n-   |               ^^^^^^^^^^^^^^ the evaluated program panicked at 'assertion failed: false', $DIR/assert.rs:10:15\n+   |               ^^^^^^^^^^^^^^ the evaluated program panicked at 'assertion failed: false', $DIR/assert.rs:5:15\n    |\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n ", "previous_filename": "src/test/ui/consts/control-flow/assert.const_panic.stderr"}, {"sha": "0caaeca4ad23f128576fedbe22b1d38df6fbad30", "filename": "src/test/ui/consts/control-flow/assert.stock.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3d4467dfcc512fcb2dc2454c9cf77c23ff3de343/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d4467dfcc512fcb2dc2454c9cf77c23ff3de343/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.stock.stderr?ref=3d4467dfcc512fcb2dc2454c9cf77c23ff3de343", "patch": "@@ -1,23 +0,0 @@\n-error[E0658]: panicking in constants is unstable\n-  --> $DIR/assert.rs:7:15\n-   |\n-LL | const _: () = assert!(true);\n-   |               ^^^^^^^^^^^^^\n-   |\n-   = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n-   = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0658]: panicking in constants is unstable\n-  --> $DIR/assert.rs:10:15\n-   |\n-LL | const _: () = assert!(false);\n-   |               ^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n-   = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "02e5501f10cfe7948b91571fb51e88c59eb4ae69", "filename": "src/test/ui/consts/control-flow/basics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fbasics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fbasics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fbasics.rs?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -2,8 +2,6 @@\n \n // run-pass\n \n-#![feature(const_panic)]\n-\n const X: u32 = 4;\n const Y: u32 = 5;\n "}, {"sha": "8a58d06ac87bd6aae746f6dbf0a38e1d66e66c4b", "filename": "src/test/ui/consts/control-flow/short-circuit-let.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit-let.rs?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -2,8 +2,6 @@\n \n // run-pass\n \n-#![feature(const_panic)]\n-\n const X: i32 = {\n     let mut x = 0;\n     let _ = true && { x = 1; false };"}, {"sha": "6abe107855f80c040105f21814adb97004a59766", "filename": "src/test/ui/consts/control-flow/short-circuit.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit.rs?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -3,8 +3,6 @@\n // Test that both `&&` and `||` actually short-circuit.\n // Formerly, both sides were evaluated unconditionally\n \n-#![feature(const_panic)]\n-\n const TRUE: bool = true || panic!();\n const FALSE: bool = false && panic!();\n "}, {"sha": "25f323b9803c8b7ebcad4fc9b84e1c6ed52d2206", "filename": "src/test/ui/consts/issue-32829.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fissue-32829.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fissue-32829.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-32829.rs?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -1,5 +1,5 @@\n static S : u64 = { { panic!(\"foo\"); 0 } };\n-//~^ ERROR panicking in statics is unstable\n+//~^ ERROR could not evaluate static initializer\n \n fn main() {\n     println!(\"{:?}\", S);"}, {"sha": "4b25bf1c99e189a5caa5cd61c3e4ec2599d0add7", "filename": "src/test/ui/consts/issue-32829.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fissue-32829.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fissue-32829.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-32829.stderr?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -1,13 +1,11 @@\n-error[E0658]: panicking in statics is unstable\n+error[E0080]: could not evaluate static initializer\n   --> $DIR/issue-32829.rs:1:22\n    |\n LL | static S : u64 = { { panic!(\"foo\"); 0 } };\n-   |                      ^^^^^^^^^^^^^^\n+   |                      ^^^^^^^^^^^^^^ the evaluated program panicked at 'foo', $DIR/issue-32829.rs:1:22\n    |\n-   = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n-   = help: add `#![feature(const_panic)]` to the crate attributes to enable\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`.\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "fc0dcd7a44daa046dc50374d8159b3e3295440a3", "filename": "src/test/ui/consts/issue-66693-panic-in-array-len.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fissue-66693-panic-in-array-len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fissue-66693-panic-in-array-len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66693-panic-in-array-len.rs?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -2,8 +2,6 @@\n // in a separate stage before `const`s and `statics` and so the error below is hit and\n // the compiler exits before generating errors for the others.\n \n-#![feature(const_panic)]\n-\n fn main() {\n     let _ = [0i32; panic!(2f32)];\n     //~^ ERROR: argument to `panic!()` in a const context must have type `&str`"}, {"sha": "4ccbeb73c8a25095f3698a71f7010b7e3674f2f6", "filename": "src/test/ui/consts/issue-66693-panic-in-array-len.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fissue-66693-panic-in-array-len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fissue-66693-panic-in-array-len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66693-panic-in-array-len.stderr?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -1,16 +1,16 @@\n error: argument to `panic!()` in a const context must have type `&str`\n-  --> $DIR/issue-66693-panic-in-array-len.rs:8:20\n+  --> $DIR/issue-66693-panic-in-array-len.rs:6:20\n    |\n LL |     let _ = [0i32; panic!(2f32)];\n    |                    ^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-66693-panic-in-array-len.rs:12:21\n+  --> $DIR/issue-66693-panic-in-array-len.rs:10:21\n    |\n LL |     let _ = [false; panic!()];\n-   |                     ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/issue-66693-panic-in-array-len.rs:12:21\n+   |                     ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/issue-66693-panic-in-array-len.rs:10:21\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "909bef7aefbd396230cba1bfecae7f9706614855", "filename": "src/test/ui/consts/issue-66693.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.rs?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -1,8 +1,6 @@\n // Tests that the compiler does not ICE when const-evaluating a `panic!()` invocation with a\n // non-`&str` argument.\n \n-#![feature(const_panic)]\n-\n const _: () = panic!(1);\n //~^ ERROR: argument to `panic!()` in a const context must have type `&str`\n "}, {"sha": "3db6716a72e8b91a8f1e71a6037e1900d0dbc733", "filename": "src/test/ui/consts/issue-66693.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -1,21 +1,21 @@\n error: argument to `panic!()` in a const context must have type `&str`\n-  --> $DIR/issue-66693.rs:6:15\n+  --> $DIR/issue-66693.rs:4:15\n    |\n LL | const _: () = panic!(1);\n    |               ^^^^^^^^^\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: argument to `panic!()` in a const context must have type `&str`\n-  --> $DIR/issue-66693.rs:9:19\n+  --> $DIR/issue-66693.rs:7:19\n    |\n LL | static _FOO: () = panic!(true);\n    |                   ^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: argument to `panic!()` in a const context must have type `&str`\n-  --> $DIR/issue-66693.rs:13:5\n+  --> $DIR/issue-66693.rs:11:5\n    |\n LL |     panic!(&1);\n    |     ^^^^^^^^^^^"}, {"sha": "3c153ad726e28c14384f6f36a1b95c4c5cb6a9e1", "filename": "src/test/ui/consts/issue-76064.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.rs?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -1,5 +1,3 @@\n-// Note: non-`&str` panic arguments gained a separate error in PR #80734\n-// which is why this doesn't match the issue\n-struct Bug([u8; panic!(\"panic\")]); //~ ERROR panicking in constants is unstable\n+struct Bug([u8; panic!(\"panic\")]); //~ ERROR evaluation of constant value failed\n \n fn main() {}"}, {"sha": "ef9d140536a3d84b0e2034f9117f94887de1d3b4", "filename": "src/test/ui/consts/issue-76064.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.stderr?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -1,13 +1,11 @@\n-error[E0658]: panicking in constants is unstable\n-  --> $DIR/issue-76064.rs:3:17\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-76064.rs:1:17\n    |\n LL | struct Bug([u8; panic!(\"panic\")]);\n-   |                 ^^^^^^^^^^^^^^^\n+   |                 ^^^^^^^^^^^^^^^ the evaluated program panicked at 'panic', $DIR/issue-76064.rs:1:17\n    |\n-   = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n-   = help: add `#![feature(const_panic)]` to the crate attributes to enable\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`.\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "186c5b1856baaf0ccbe4fa41bc364fca836dc1cd", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.32bit.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.32bit.stderr?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -161,17 +161,11 @@ help: skipping check that does not even have a feature gate\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: skipping check for `const_panic` feature\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:77\n-   |\n-LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n-   |                                                                             ^^^^^^^^\n help: skipping check that does not even have a feature gate\n   --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this warning originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 10 previous errors; 3 warnings emitted\n "}, {"sha": "7a64abd7b9cb8c57a3bc83b0367ccc2b5086063c", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.64bit.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -161,17 +161,11 @@ help: skipping check that does not even have a feature gate\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: skipping check for `const_panic` feature\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:77\n-   |\n-LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n-   |                                                                             ^^^^^^^^\n help: skipping check that does not even have a feature gate\n   --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this warning originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 10 previous errors; 3 warnings emitted\n "}, {"sha": "971b7c3cb179af680cea13be5d2acc7d79fdb77a", "filename": "src/test/ui/consts/ptr_comparisons.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -5,7 +5,6 @@\n // normalize-stderr-64bit: \"size 8\" -> \"size $$WORD\"\n \n #![feature(\n-    const_panic,\n     core_intrinsics,\n     const_raw_ptr_comparison,\n     const_ptr_offset,"}, {"sha": "48cd5da213f3df9f7e91c81e3e111c415ecdeab3", "filename": "src/test/ui/consts/ptr_comparisons.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -7,19 +7,19 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  pointer arithmetic failed: alloc3 has size $WORD, so pointer to $TWO_WORDS bytes starting at offset 0 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const usize>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/ptr_comparisons.rs:61:34\n+  ::: $DIR/ptr_comparisons.rs:60:34\n    |\n LL | const _: *const usize = unsafe { (FOO as *const usize).offset(2) };\n-   |                                  ------------------------------- inside `_` at $DIR/ptr_comparisons.rs:61:34\n+   |                                  ------------------------------- inside `_` at $DIR/ptr_comparisons.rs:60:34\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ptr_comparisons.rs:64:33\n+  --> $DIR/ptr_comparisons.rs:63:33\n    |\n LL |     unsafe { std::ptr::addr_of!((*(FOO as *const usize as *const [u8; 1000]))[999]) };\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: alloc3 has size $WORD, so pointer to 1000 bytes starting at offset 0 is out-of-bounds\n \n error: any use of this value will cause an error\n-  --> $DIR/ptr_comparisons.rs:68:27\n+  --> $DIR/ptr_comparisons.rs:67:27\n    |\n LL | const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n    | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -31,7 +31,7 @@ LL | const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) +\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/ptr_comparisons.rs:73:27\n+  --> $DIR/ptr_comparisons.rs:72:27\n    |\n LL | const _: usize = unsafe { *std::mem::transmute::<&&usize, &usize>(&FOO) + 4 };\n    | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---"}, {"sha": "8babb68585dea0c9e7397d3e3fcde20ff2519a94", "filename": "src/test/ui/consts/ptr_is_null.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fptr_is_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Fptr_is_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_is_null.rs?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -1,7 +1,7 @@\n // compile-flags: --crate-type=lib\n // check-pass\n \n-#![feature(const_ptr_is_null, const_panic)]\n+#![feature(const_ptr_is_null)]\n \n const FOO: &usize = &42;\n "}, {"sha": "6c94fc7b98b7575b48ed74c43522419f8789089e", "filename": "src/test/ui/consts/unwind-abort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Funwind-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fconsts%2Funwind-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funwind-abort.rs?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![feature(c_unwind, const_panic, const_extern_fn)]\n+#![feature(c_unwind, const_extern_fn)]\n \n // We don't unwind in const-eval anyways.\n const extern \"C\" fn foo() {"}, {"sha": "8d30610504f7d4ed46fc4d522f7ed15d38e7c567", "filename": "src/test/ui/enum-discriminant/niche.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fenum-discriminant%2Fniche.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Fenum-discriminant%2Fniche.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fniche.rs?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(const_panic)]\n-\n //! Make sure that we read and write enum discriminants correctly for corner cases caused\n //! by layout optimizations.\n "}, {"sha": "292017a1de24d80272d7a9c04cf123f010b91b89", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9866b090f48fc5f45ca9c80618976e41987fc25d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs?ref=9866b090f48fc5f45ca9c80618976e41987fc25d", "patch": "@@ -3,7 +3,6 @@\n #![feature(const_trait_impl)]\n #![feature(const_fn_trait_bound)]\n #![feature(const_mut_refs)]\n-#![feature(const_panic)]\n #![cfg_attr(precise, feature(const_precise_live_drops))]\n \n struct S<'a>(&'a mut u8);"}]}