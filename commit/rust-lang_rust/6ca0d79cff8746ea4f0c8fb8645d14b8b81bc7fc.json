{"sha": "6ca0d79cff8746ea4f0c8fb8645d14b8b81bc7fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjYTBkNzljZmY4NzQ2ZWE0ZjBjOGZiODY0NWQxNGI4YjgxYmM3ZmM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-13T06:57:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-13T06:57:13Z"}, "message": "Merge #2225\n\n2225: Reduce duplication between uncertain floats & ints r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "d03397ce4ab1a3d4dc90582f611805c8b2c82a74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d03397ce4ab1a3d4dc90582f611805c8b2c82a74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ca0d79cff8746ea4f0c8fb8645d14b8b81bc7fc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdy6lJCRBK7hj4Ov3rIwAAdHIIACyUCQjE+wBPrAKEVUbnPp2i\nnqPqBsrIhgTY9cnBKZA+hB7IqRqlZO8+ufMAZLPsDedMmzhsMwjJnLMMDXUMcNh2\n2s36M0BjYdyjaFOaz9fG04yJ7k+4thlpCJzFh1+X7w2W2K5pdapagqIJAXhP0iBv\n4Z/zKEFoRFijCkYpOCN8d1ituvBRgH5HvLIepYQMY4Z59drppuN5ND70x5WF43GX\n7eg1OudJDBCMYL5tmuVJvn6iGi2TDdrZC7WpjmCSuPkYPh9UmY7zTSq2Sfkbnhs/\nfWEp/wiePkW8hWRdKTZS92dpV58Ul5GRPnZ/iAnV0J44GIa5jcHZdAjTI/Y/K0U=\n=EvpA\n-----END PGP SIGNATURE-----\n", "payload": "tree d03397ce4ab1a3d4dc90582f611805c8b2c82a74\nparent 3322d65addd9ec61b8c5bc055803f6549946da8b\nparent 70dd70b1fcbbbe2e60849412412ef05e7d31eb0a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1573628233 +0000\ncommitter GitHub <noreply@github.com> 1573628233 +0000\n\nMerge #2225\n\n2225: Reduce duplication between uncertain floats & ints r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ca0d79cff8746ea4f0c8fb8645d14b8b81bc7fc", "html_url": "https://github.com/rust-lang/rust/commit/6ca0d79cff8746ea4f0c8fb8645d14b8b81bc7fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ca0d79cff8746ea4f0c8fb8645d14b8b81bc7fc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3322d65addd9ec61b8c5bc055803f6549946da8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3322d65addd9ec61b8c5bc055803f6549946da8b", "html_url": "https://github.com/rust-lang/rust/commit/3322d65addd9ec61b8c5bc055803f6549946da8b"}, {"sha": "70dd70b1fcbbbe2e60849412412ef05e7d31eb0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/70dd70b1fcbbbe2e60849412412ef05e7d31eb0a", "html_url": "https://github.com/rust-lang/rust/commit/70dd70b1fcbbbe2e60849412412ef05e7d31eb0a"}], "stats": {"total": 125, "additions": 55, "deletions": 70}, "files": [{"sha": "5ba847d3515934e2167f3a684258e798f16bc64a", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ca0d79cff8746ea4f0c8fb8645d14b8b81bc7fc/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca0d79cff8746ea4f0c8fb8645d14b8b81bc7fc/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=6ca0d79cff8746ea4f0c8fb8645d14b8b81bc7fc", "patch": "@@ -77,9 +77,7 @@ pub use crate::{\n     source_binder::{PathResolution, ScopeEntryWithSyntax, SourceAnalyzer},\n     ty::{\n         display::HirDisplay,\n-        primitive::{\n-            FloatBitness, FloatTy, IntBitness, IntTy, Signedness, UncertainFloatTy, UncertainIntTy,\n-        },\n+        primitive::{FloatBitness, FloatTy, IntBitness, IntTy, Signedness, Uncertain},\n         ApplicationTy, CallableDef, Substs, TraitRef, Ty, TypeCtor, TypeWalk,\n     },\n };"}, {"sha": "ff6030ac42647bfe97b4135f1092b2c222e24850", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ca0d79cff8746ea4f0c8fb8645d14b8b81bc7fc/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca0d79cff8746ea4f0c8fb8645d14b8b81bc7fc/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=6ca0d79cff8746ea4f0c8fb8645d14b8b81bc7fc", "patch": "@@ -21,7 +21,7 @@ use crate::{\n     expr::ExprId,\n     generics::{GenericParams, HasGenericParams},\n     util::make_mut_slice,\n-    Adt, Crate, DefWithBody, Mutability, Name, Trait, TypeAlias,\n+    Adt, Crate, DefWithBody, FloatTy, IntTy, Mutability, Name, Trait, TypeAlias, Uncertain,\n };\n use display::{HirDisplay, HirFormatter};\n \n@@ -47,10 +47,10 @@ pub enum TypeCtor {\n     Char,\n \n     /// A primitive integer type. For example, `i32`.\n-    Int(primitive::UncertainIntTy),\n+    Int(Uncertain<IntTy>),\n \n     /// A primitive floating-point type. For example, `f64`.\n-    Float(primitive::UncertainFloatTy),\n+    Float(Uncertain<FloatTy>),\n \n     /// Structures, enumerations and unions.\n     Adt(Adt),"}, {"sha": "c092608642d678b81212d88c752e97af8767cd86", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6ca0d79cff8746ea4f0c8fb8645d14b8b81bc7fc/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca0d79cff8746ea4f0c8fb8645d14b8b81bc7fc/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=6ca0d79cff8746ea4f0c8fb8645d14b8b81bc7fc", "patch": "@@ -31,10 +31,10 @@ use ra_prof::profile;\n use test_utils::tested_by;\n \n use super::{\n-    lower, primitive,\n+    lower,\n     traits::{Guidance, Obligation, ProjectionPredicate, Solution},\n     ApplicationTy, InEnvironment, ProjectionTy, Substs, TraitEnvironment, TraitRef, Ty, TypableDef,\n-    TypeCtor, TypeWalk,\n+    TypeCtor, TypeWalk, Uncertain,\n };\n use crate::{\n     adt::VariantDef,\n@@ -43,7 +43,7 @@ use crate::{\n     expr::{BindingAnnotation, Body, ExprId, PatId},\n     resolve::{Resolver, TypeNs},\n     ty::infer::diagnostics::InferenceDiagnostic,\n-    Adt, AssocItem, ConstData, DefWithBody, FnData, Function, Path, StructField,\n+    Adt, AssocItem, ConstData, DefWithBody, FloatTy, FnData, Function, IntTy, Path, StructField,\n };\n \n macro_rules! ty_app {\n@@ -358,14 +358,12 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     fn insert_type_vars_shallow(&mut self, ty: Ty) -> Ty {\n         match ty {\n             Ty::Unknown => self.new_type_var(),\n-            Ty::Apply(ApplicationTy {\n-                ctor: TypeCtor::Int(primitive::UncertainIntTy::Unknown),\n-                ..\n-            }) => self.new_integer_var(),\n-            Ty::Apply(ApplicationTy {\n-                ctor: TypeCtor::Float(primitive::UncertainFloatTy::Unknown),\n-                ..\n-            }) => self.new_float_var(),\n+            Ty::Apply(ApplicationTy { ctor: TypeCtor::Int(Uncertain::Unknown), .. }) => {\n+                self.new_integer_var()\n+            }\n+            Ty::Apply(ApplicationTy { ctor: TypeCtor::Float(Uncertain::Unknown), .. }) => {\n+                self.new_float_var()\n+            }\n             _ => ty,\n         }\n     }\n@@ -684,12 +682,8 @@ impl InferTy {\n     fn fallback_value(self) -> Ty {\n         match self {\n             InferTy::TypeVar(..) => Ty::Unknown,\n-            InferTy::IntVar(..) => {\n-                Ty::simple(TypeCtor::Int(primitive::UncertainIntTy::Known(primitive::IntTy::i32())))\n-            }\n-            InferTy::FloatVar(..) => Ty::simple(TypeCtor::Float(\n-                primitive::UncertainFloatTy::Known(primitive::FloatTy::f64()),\n-            )),\n+            InferTy::IntVar(..) => Ty::simple(TypeCtor::Int(Uncertain::Known(IntTy::i32()))),\n+            InferTy::FloatVar(..) => Ty::simple(TypeCtor::Float(Uncertain::Known(FloatTy::f64()))),\n             InferTy::MaybeNeverTypeVar(..) => Ty::simple(TypeCtor::Never),\n         }\n     }"}, {"sha": "5e68a1678f44275ba18e37fd46e733d7affbaf0a", "filename": "crates/ra_hir/src/ty/infer/expr.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6ca0d79cff8746ea4f0c8fb8645d14b8b81bc7fc/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca0d79cff8746ea4f0c8fb8645d14b8b81bc7fc/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs?ref=6ca0d79cff8746ea4f0c8fb8645d14b8b81bc7fc", "patch": "@@ -3,7 +3,10 @@\n use std::iter::{repeat, repeat_with};\n use std::sync::Arc;\n \n-use hir_def::path::{GenericArg, GenericArgs};\n+use hir_def::{\n+    builtin_type::Signedness,\n+    path::{GenericArg, GenericArgs},\n+};\n use hir_expand::name;\n \n use super::{BindingMode, Expectation, InferenceContext, InferenceDiagnostic, TypeMismatch};\n@@ -12,8 +15,9 @@ use crate::{\n     expr::{self, Array, BinaryOp, Expr, ExprId, Literal, Statement, UnaryOp},\n     generics::{GenericParams, HasGenericParams},\n     ty::{\n-        autoderef, method_resolution, op, primitive, CallableDef, InferTy, Mutability, Namespace,\n+        autoderef, method_resolution, op, CallableDef, InferTy, IntTy, Mutability, Namespace,\n         Obligation, ProjectionPredicate, ProjectionTy, Substs, TraitRef, Ty, TypeCtor, TypeWalk,\n+        Uncertain,\n     },\n     Adt, Name,\n };\n@@ -337,13 +341,11 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     UnaryOp::Neg => {\n                         match &inner_ty {\n                             Ty::Apply(a_ty) => match a_ty.ctor {\n-                                TypeCtor::Int(primitive::UncertainIntTy::Unknown)\n-                                | TypeCtor::Int(primitive::UncertainIntTy::Known(\n-                                    primitive::IntTy {\n-                                        signedness: primitive::Signedness::Signed,\n-                                        ..\n-                                    },\n-                                ))\n+                                TypeCtor::Int(Uncertain::Unknown)\n+                                | TypeCtor::Int(Uncertain::Known(IntTy {\n+                                    signedness: Signedness::Signed,\n+                                    ..\n+                                }))\n                                 | TypeCtor::Float(..) => inner_ty,\n                                 _ => Ty::Unknown,\n                             },\n@@ -428,9 +430,9 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                         );\n                         self.infer_expr(\n                             *repeat,\n-                            &Expectation::has_type(Ty::simple(TypeCtor::Int(\n-                                primitive::UncertainIntTy::Known(primitive::IntTy::usize()),\n-                            ))),\n+                            &Expectation::has_type(Ty::simple(TypeCtor::Int(Uncertain::Known(\n+                                IntTy::usize(),\n+                            )))),\n                         );\n                     }\n                 }\n@@ -443,9 +445,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     Ty::apply_one(TypeCtor::Ref(Mutability::Shared), Ty::simple(TypeCtor::Str))\n                 }\n                 Literal::ByteString(..) => {\n-                    let byte_type = Ty::simple(TypeCtor::Int(primitive::UncertainIntTy::Known(\n-                        primitive::IntTy::u8(),\n-                    )));\n+                    let byte_type = Ty::simple(TypeCtor::Int(Uncertain::Known(IntTy::u8())));\n                     let slice_type = Ty::apply_one(TypeCtor::Slice, byte_type);\n                     Ty::apply_one(TypeCtor::Ref(Mutability::Shared), slice_type)\n                 }"}, {"sha": "de3c56097bd119930fb991910a07fbe2d868ed82", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6ca0d79cff8746ea4f0c8fb8645d14b8b81bc7fc/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca0d79cff8746ea4f0c8fb8645d14b8b81bc7fc/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=6ca0d79cff8746ea4f0c8fb8645d14b8b81bc7fc", "patch": "@@ -25,7 +25,7 @@ use crate::{\n     generics::{GenericDef, WherePredicate},\n     resolve::{Resolver, TypeNs},\n     ty::{\n-        primitive::{FloatTy, IntTy, UncertainFloatTy, UncertainIntTy},\n+        primitive::{FloatTy, IntTy, Uncertain},\n         Adt,\n     },\n     util::make_mut_slice,\n@@ -674,20 +674,20 @@ impl From<BuiltinFloat> for FloatTy {\n     }\n }\n \n-impl From<Option<BuiltinInt>> for UncertainIntTy {\n+impl From<Option<BuiltinInt>> for Uncertain<IntTy> {\n     fn from(t: Option<BuiltinInt>) -> Self {\n         match t {\n-            None => UncertainIntTy::Unknown,\n-            Some(t) => UncertainIntTy::Known(t.into()),\n+            None => Uncertain::Unknown,\n+            Some(t) => Uncertain::Known(t.into()),\n         }\n     }\n }\n \n-impl From<Option<BuiltinFloat>> for UncertainFloatTy {\n+impl From<Option<BuiltinFloat>> for Uncertain<FloatTy> {\n     fn from(t: Option<BuiltinFloat>) -> Self {\n         match t {\n-            None => UncertainFloatTy::Unknown,\n-            Some(t) => UncertainFloatTy::Known(t.into()),\n+            None => Uncertain::Unknown,\n+            Some(t) => Uncertain::Known(t.into()),\n         }\n     }\n }"}, {"sha": "eb5ca6769a1d286e98334be0b9f662fdab8634a6", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6ca0d79cff8746ea4f0c8fb8645d14b8b81bc7fc/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca0d79cff8746ea4f0c8fb8645d14b8b81bc7fc/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=6ca0d79cff8746ea4f0c8fb8645d14b8b81bc7fc", "patch": "@@ -8,16 +8,17 @@ use arrayvec::ArrayVec;\n use hir_def::CrateModuleId;\n use rustc_hash::FxHashMap;\n \n-use super::{autoderef, lower, Canonical, InEnvironment, TraitEnvironment, TraitRef};\n use crate::{\n     db::HirDatabase,\n     impl_block::{ImplBlock, ImplId},\n     resolve::Resolver,\n-    ty::primitive::{FloatBitness, UncertainFloatTy, UncertainIntTy},\n+    ty::primitive::{FloatBitness, Uncertain},\n     ty::{Ty, TypeCtor},\n     AssocItem, Crate, Function, Module, Mutability, Name, Trait,\n };\n \n+use super::{autoderef, lower, Canonical, InEnvironment, TraitEnvironment, TraitRef};\n+\n /// This is used as a key for indexing impls.\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub enum TyFingerprint {\n@@ -140,14 +141,12 @@ fn def_crates(db: &impl HirDatabase, cur_crate: Crate, ty: &Ty) -> Option<ArrayV\n             TypeCtor::Adt(def_id) => Some(std::iter::once(def_id.krate(db)?).collect()),\n             TypeCtor::Bool => lang_item_crate!(db, cur_crate, \"bool\"),\n             TypeCtor::Char => lang_item_crate!(db, cur_crate, \"char\"),\n-            TypeCtor::Float(UncertainFloatTy::Known(f)) => match f.bitness {\n+            TypeCtor::Float(Uncertain::Known(f)) => match f.bitness {\n                 // There are two lang items: one in libcore (fXX) and one in libstd (fXX_runtime)\n                 FloatBitness::X32 => lang_item_crate!(db, cur_crate, \"f32\", \"f32_runtime\"),\n                 FloatBitness::X64 => lang_item_crate!(db, cur_crate, \"f64\", \"f64_runtime\"),\n             },\n-            TypeCtor::Int(UncertainIntTy::Known(i)) => {\n-                lang_item_crate!(db, cur_crate, i.ty_to_string())\n-            }\n+            TypeCtor::Int(Uncertain::Known(i)) => lang_item_crate!(db, cur_crate, i.ty_to_string()),\n             TypeCtor::Str => lang_item_crate!(db, cur_crate, \"str_alloc\", \"str\"),\n             TypeCtor::Slice => lang_item_crate!(db, cur_crate, \"slice_alloc\", \"slice\"),\n             TypeCtor::RawPtr(Mutability::Shared) => lang_item_crate!(db, cur_crate, \"const_ptr\"),"}, {"sha": "47789db8775c1eb298f6f8fa24b64a6a33f49742", "filename": "crates/ra_hir/src/ty/primitive.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6ca0d79cff8746ea4f0c8fb8645d14b8b81bc7fc/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca0d79cff8746ea4f0c8fb8645d14b8b81bc7fc/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs?ref=6ca0d79cff8746ea4f0c8fb8645d14b8b81bc7fc", "patch": "@@ -4,44 +4,38 @@ use std::fmt;\n \n pub use hir_def::builtin_type::{FloatBitness, IntBitness, Signedness};\n \n-#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]\n-pub enum UncertainIntTy {\n+#[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]\n+pub enum Uncertain<T> {\n     Unknown,\n-    Known(IntTy),\n+    Known(T),\n }\n \n-impl From<IntTy> for UncertainIntTy {\n+impl From<IntTy> for Uncertain<IntTy> {\n     fn from(ty: IntTy) -> Self {\n-        UncertainIntTy::Known(ty)\n+        Uncertain::Known(ty)\n     }\n }\n \n-impl fmt::Display for UncertainIntTy {\n+impl fmt::Display for Uncertain<IntTy> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n-            UncertainIntTy::Unknown => write!(f, \"{{integer}}\"),\n-            UncertainIntTy::Known(ty) => write!(f, \"{}\", ty),\n+            Uncertain::Unknown => write!(f, \"{{integer}}\"),\n+            Uncertain::Known(ty) => write!(f, \"{}\", ty),\n         }\n     }\n }\n \n-#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]\n-pub enum UncertainFloatTy {\n-    Unknown,\n-    Known(FloatTy),\n-}\n-\n-impl From<FloatTy> for UncertainFloatTy {\n+impl From<FloatTy> for Uncertain<FloatTy> {\n     fn from(ty: FloatTy) -> Self {\n-        UncertainFloatTy::Known(ty)\n+        Uncertain::Known(ty)\n     }\n }\n \n-impl fmt::Display for UncertainFloatTy {\n+impl fmt::Display for Uncertain<FloatTy> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n-            UncertainFloatTy::Unknown => write!(f, \"{{float}}\"),\n-            UncertainFloatTy::Known(ty) => write!(f, \"{}\", ty),\n+            Uncertain::Unknown => write!(f, \"{{float}}\"),\n+            Uncertain::Known(ty) => write!(f, \"{}\", ty),\n         }\n     }\n }"}]}