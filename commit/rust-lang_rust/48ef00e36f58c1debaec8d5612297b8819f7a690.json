{"sha": "48ef00e36f58c1debaec8d5612297b8819f7a690", "node_id": "C_kwDOAAsO6NoAKDQ4ZWYwMGUzNmY1OGMxZGViYWVjOGQ1NjEyMjk3Yjg4MTlmN2E2OTA", "commit": {"author": {"name": "David Carlier", "email": "devnexen@gmail.com", "date": "2022-04-27T05:01:05Z"}, "committer": {"name": "David Carlier", "email": "devnexen@gmail.com", "date": "2022-07-06T18:52:56Z"}, "message": "doc additions", "tree": {"sha": "eb5afa1f1e330c7b63228625d4374a68fc7e41d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb5afa1f1e330c7b63228625d4374a68fc7e41d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48ef00e36f58c1debaec8d5612297b8819f7a690", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48ef00e36f58c1debaec8d5612297b8819f7a690", "html_url": "https://github.com/rust-lang/rust/commit/48ef00e36f58c1debaec8d5612297b8819f7a690", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48ef00e36f58c1debaec8d5612297b8819f7a690/comments", "author": {"login": "devnexen", "id": 4922778, "node_id": "MDQ6VXNlcjQ5MjI3Nzg=", "avatar_url": "https://avatars.githubusercontent.com/u/4922778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devnexen", "html_url": "https://github.com/devnexen", "followers_url": "https://api.github.com/users/devnexen/followers", "following_url": "https://api.github.com/users/devnexen/following{/other_user}", "gists_url": "https://api.github.com/users/devnexen/gists{/gist_id}", "starred_url": "https://api.github.com/users/devnexen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devnexen/subscriptions", "organizations_url": "https://api.github.com/users/devnexen/orgs", "repos_url": "https://api.github.com/users/devnexen/repos", "events_url": "https://api.github.com/users/devnexen/events{/privacy}", "received_events_url": "https://api.github.com/users/devnexen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "devnexen", "id": 4922778, "node_id": "MDQ6VXNlcjQ5MjI3Nzg=", "avatar_url": "https://avatars.githubusercontent.com/u/4922778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devnexen", "html_url": "https://github.com/devnexen", "followers_url": "https://api.github.com/users/devnexen/followers", "following_url": "https://api.github.com/users/devnexen/following{/other_user}", "gists_url": "https://api.github.com/users/devnexen/gists{/gist_id}", "starred_url": "https://api.github.com/users/devnexen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devnexen/subscriptions", "organizations_url": "https://api.github.com/users/devnexen/orgs", "repos_url": "https://api.github.com/users/devnexen/repos", "events_url": "https://api.github.com/users/devnexen/events{/privacy}", "received_events_url": "https://api.github.com/users/devnexen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14d288fe125813b130a6571bbf2ae49c5f247174", "url": "https://api.github.com/repos/rust-lang/rust/commits/14d288fe125813b130a6571bbf2ae49c5f247174", "html_url": "https://github.com/rust-lang/rust/commit/14d288fe125813b130a6571bbf2ae49c5f247174"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "7f5d760481b868bc02247d958f63b021bbd61fe1", "filename": "library/std/src/os/unix/net/datagram.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/48ef00e36f58c1debaec8d5612297b8819f7a690/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ef00e36f58c1debaec8d5612297b8819f7a690/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs?ref=48ef00e36f58c1debaec8d5612297b8819f7a690", "patch": "@@ -838,6 +838,25 @@ impl UnixDatagram {\n         self.0.passcred()\n     }\n \n+    /// Set the id of the socket for network filtering purpose\n+    /// and is only a setter.\n+    ///\n+    /// ```no_run\n+    /// #![feature(unix_set_mark)]\n+    /// use std::os::unix::net::UnixDatagram;\n+    ///\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let sock = UnixDatagram::unbound()?;\n+    ///     sock.set_mark(32 as u32).expect(\"set_mark function failed\");\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[cfg(any(doc, target_os = \"linux\", target_os = \"freebsd\", target_os = \"openbsd\",))]\n+    #[unstable(feature = \"unix_set_mark\", issue = \"none\")]\n+    pub fn set_mark(&self, mark: u32) -> io::Result<()> {\n+        self.0.set_mark(mark)\n+    }\n+\n     /// Returns the value of the `SO_ERROR` option.\n     ///\n     /// # Examples"}, {"sha": "7ecb81340ac8db037a6f3998bc0d83be84c6e4ec", "filename": "library/std/src/os/unix/net/stream.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/48ef00e36f58c1debaec8d5612297b8819f7a690/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ef00e36f58c1debaec8d5612297b8819f7a690/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs?ref=48ef00e36f58c1debaec8d5612297b8819f7a690", "patch": "@@ -424,7 +424,20 @@ impl UnixStream {\n         self.0.passcred()\n     }\n \n-    #[cfg(any(doc, target_os = \"linux\", target_os = \"freebsd\",))]\n+    /// Set the id of the socket for network filtering purpose\n+    /// and is only a setter.\n+    ///\n+    /// ```no_run\n+    /// #![feature(unix_set_mark)]\n+    /// use std::os::unix::net::UnixStream;\n+    ///\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let sock = UnixStream::connect(\"/tmp/sock\")?;\n+    ///     sock.set_mark(32 as u32).expect(\"set_mark function failed\");\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[cfg(any(doc, target_os = \"linux\", target_os = \"freebsd\", target_os = \"openbsd\",))]\n     #[unstable(feature = \"unix_set_mark\", issue = \"none\")]\n     pub fn set_mark(&self, mark: u32) -> io::Result<()> {\n         self.0.set_mark(mark)"}, {"sha": "30667edafbaef8cbff3c966c67dc7fc9184c3b09", "filename": "library/std/src/sys/unix/net.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/48ef00e36f58c1debaec8d5612297b8819f7a690/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ef00e36f58c1debaec8d5612297b8819f7a690/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs?ref=48ef00e36f58c1debaec8d5612297b8819f7a690", "patch": "@@ -437,6 +437,11 @@ impl Socket {\n         setsockopt(self, libc::SOL_SOCKET, libc::SO_USER_COOKIE, mark)\n     }\n \n+    #[cfg(target_os = \"openbsd\")]\n+    pub fn set_mark(&self, mark: u32) -> io::Result<()> {\n+        setsockopt(self, libc::SOL_SOCKET, libc::SO_RTABLE, mark as libc::c_int)\n+    }\n+\n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n         let raw: c_int = getsockopt(self, libc::SOL_SOCKET, libc::SO_ERROR)?;\n         if raw == 0 { Ok(None) } else { Ok(Some(io::Error::from_raw_os_error(raw as i32))) }"}]}