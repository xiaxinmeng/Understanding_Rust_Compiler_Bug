{"sha": "7c27ec72d1e95926e27dd67ef58608eea0ee37b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjMjdlYzcyZDFlOTU5MjZlMjdkZDY3ZWY1ODYwOGVlYTBlZTM3YjM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-25T01:30:53Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-25T01:44:05Z"}, "message": "rustc: Add some simple region checking (no region vars yet)\n\nAmazingly, this causes no test cases to fail!", "tree": {"sha": "5206724eb6a7f682f72fe35fe826f1bfbd757c84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5206724eb6a7f682f72fe35fe826f1bfbd757c84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c27ec72d1e95926e27dd67ef58608eea0ee37b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c27ec72d1e95926e27dd67ef58608eea0ee37b3", "html_url": "https://github.com/rust-lang/rust/commit/7c27ec72d1e95926e27dd67ef58608eea0ee37b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c27ec72d1e95926e27dd67ef58608eea0ee37b3/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e385a80d4adc9d5a49655f9a755eb2f627cf674", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e385a80d4adc9d5a49655f9a755eb2f627cf674", "html_url": "https://github.com/rust-lang/rust/commit/3e385a80d4adc9d5a49655f9a755eb2f627cf674"}], "stats": {"total": 96, "additions": 39, "deletions": 57}, "files": [{"sha": "5222f28ad4a9917ad6076d90f53cbe4bc4904116", "filename": "src/rustc/middle/infer.rs", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7c27ec72d1e95926e27dd67ef58608eea0ee37b3/src%2Frustc%2Fmiddle%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c27ec72d1e95926e27dd67ef58608eea0ee37b3/src%2Frustc%2Fmiddle%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Finfer.rs?ref=7c27ec72d1e95926e27dd67ef58608eea0ee37b3", "patch": "@@ -294,9 +294,41 @@ impl unify_methods for infer_ctxt {\n         iter2(as, bs) {|a,b| self.tys(a,b) }\n     }\n \n-    fn regions(_a: ty::region, _b: ty::region) -> ures {\n-        // FIXME: pcwalton!\n-        self.uok()\n+    fn regions(a: ty::region, b: ty::region) -> ures {\n+        alt (a, b) {\n+          (ty::re_var(_), _) | (_, ty::re_var(_)) {\n+            self.uok()  // FIXME: We need region variables!\n+          }\n+          (ty::re_inferred, _) | (_, ty::re_inferred) {\n+            fail \"tried to unify inferred regions\"\n+          }\n+          (ty::re_param(_), ty::re_param(_)) |\n+          (ty::re_self, ty::re_self) {\n+            if a == b {\n+                self.uok()\n+            } else {\n+                self.uerr(ty::terr_regions_differ(false, a, b))\n+            }\n+          }\n+          (ty::re_param(_), ty::re_block(_)) |\n+          (ty::re_self, ty::re_block(_)) {\n+            self.uok()\n+          }\n+          (ty::re_block(_), ty::re_param(_)) |\n+          (ty::re_block(_), ty::re_self) {\n+            self.uerr(ty::terr_regions_differ(false, a, b))\n+          }\n+          (ty::re_block(superblock), ty::re_block(subblock)) {\n+            // The region corresponding to an outer block is a subtype of the\n+            // region corresponding to an inner block.\n+            let rm = self.tcx.region_map;\n+            if region::scope_contains(rm, subblock, superblock) {\n+                self.uok()\n+            } else {\n+                self.uerr(ty::terr_regions_differ(false, a, b))\n+            }\n+          }\n+        }\n     }\n \n     fn mts(a: ty::mt, b: ty::mt) -> ures {\n@@ -650,4 +682,4 @@ impl resolve_methods for infer_ctxt {\n           some(var_id) { ret self.rerr(var_id); }\n         }\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "04a4b0787844e65ce26f8f9fceee64ac5d3caf34", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 53, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/7c27ec72d1e95926e27dd67ef58608eea0ee37b3/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c27ec72d1e95926e27dd67ef58608eea0ee37b3/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=7c27ec72d1e95926e27dd67ef58608eea0ee37b3", "patch": "@@ -1682,59 +1682,9 @@ mod unify {\n     }\n \n     fn unify_regions<T:copy>(\n-        cx: @uctxt, e_region: region, a_region: region,\n-        nxt: fn(region) -> ures<T>) -> ures<T> {\n-        let sub = a_region, super = e_region;\n-\n-        // FIXME: Should have a way of unifying regions that relies on bounds,\n-        // not on unification.\n-        alt (super, sub) {\n-            (ty::re_var(superkey), ty::re_var(subkey)) {\n-                ret union_region_sets(cx, subkey, superkey,\n-                                      {|| nxt(sub) });\n-            }\n-            (ty::re_var(superkey), _) {\n-                ret record_region_binding(cx, superkey, sub, nxt);\n-            }\n-            (_, ty::re_var(subkey)) {\n-                ret record_region_binding(cx, subkey, super, nxt);\n-            }\n-            _ { /* fall through */ }\n-        }\n-\n-        alt (super, sub) {\n-            (ty::re_var(_), _) | (_, ty::re_var(_)) {\n-                fail \"should have been handled above\";\n-            }\n-            (ty::re_inferred, _) | (_, ty::re_inferred) {\n-                fail \"tried to unify inferred regions\";\n-            }\n-            (ty::re_param(_), ty::re_param(_)) |\n-            (ty::re_self, ty::re_self) {\n-                ret if super == sub {\n-                    nxt(ty::re_self)\n-                } else {\n-                    err(terr_regions_differ(false, super, sub))\n-                };\n-            }\n-            (ty::re_param(_), ty::re_block(_)) |\n-            (ty::re_self, ty::re_block(_)) {\n-                ret nxt(super);\n-            }\n-            (ty::re_block(_), ty::re_param(_)) |\n-            (ty::re_block(_), ty::re_self) {\n-                ret err(terr_regions_differ(false, super, sub));\n-            }\n-            (ty::re_block(superblock), ty::re_block(subblock)) {\n-                // Outer regions are subtypes of inner regions. (This is\n-                // somewhat surprising!)\n-                let rm = cx.tcx.region_map;\n-                if region::scope_contains(rm, subblock, superblock) {\n-                    ret nxt(super);\n-                }\n-                ret err(terr_regions_differ(false, sub, super));\n-            }\n-        }\n+            _cx: @uctxt, _e_region: region, _a_region: region,\n+            _nxt: fn(region) -> ures<T>) -> ures<T> {\n+        fail;   // unused\n     }\n }\n "}]}