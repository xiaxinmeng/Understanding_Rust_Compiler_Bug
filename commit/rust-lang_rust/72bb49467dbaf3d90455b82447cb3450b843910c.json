{"sha": "72bb49467dbaf3d90455b82447cb3450b843910c", "node_id": "C_kwDOAAsO6NoAKDcyYmI0OTQ2N2RiYWYzZDkwNDU1YjgyNDQ3Y2IzNDUwYjg0MzkxMGM", "commit": {"author": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2021-09-25T17:06:04Z"}, "committer": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2021-09-27T13:23:50Z"}, "message": "Remove SourceMap", "tree": {"sha": "df310c8f083cdcd1b6b0bfb15495e7d4af061bad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df310c8f083cdcd1b6b0bfb15495e7d4af061bad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72bb49467dbaf3d90455b82447cb3450b843910c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72bb49467dbaf3d90455b82447cb3450b843910c", "html_url": "https://github.com/rust-lang/rust/commit/72bb49467dbaf3d90455b82447cb3450b843910c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72bb49467dbaf3d90455b82447cb3450b843910c/comments", "author": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe2b1615de352b65827fc73ce409a160901617e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe2b1615de352b65827fc73ce409a160901617e7", "html_url": "https://github.com/rust-lang/rust/commit/fe2b1615de352b65827fc73ce409a160901617e7"}], "stats": {"total": 45, "additions": 11, "deletions": 34}, "files": [{"sha": "0921ecea6fcad288a441f5fb3439f38560aede78", "filename": "crates/hir_def/src/generics.rs", "status": "modified", "additions": 6, "deletions": 27, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/72bb49467dbaf3d90455b82447cb3450b843910c/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bb49467dbaf3d90455b82447cb3450b843910c/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fgenerics.rs?ref=72bb49467dbaf3d90455b82447cb3450b843910c", "patch": "@@ -90,13 +90,6 @@ pub enum WherePredicateTypeTarget {\n     TypeParam(LocalTypeParamId),\n }\n \n-#[derive(Default)]\n-pub(crate) struct SourceMap {\n-    pub(crate) type_params: ArenaMap<LocalTypeParamId, Either<ast::TypeParam, ast::Trait>>,\n-    lifetime_params: ArenaMap<LocalLifetimeParamId, ast::LifetimeParam>,\n-    const_params: ArenaMap<LocalConstParamId, ast::ConstParam>,\n-}\n-\n impl GenericParams {\n     pub(crate) fn generic_params_query(\n         db: &dyn DefDatabase,\n@@ -153,14 +146,9 @@ impl GenericParams {\n         }\n     }\n \n-    pub(crate) fn fill(\n-        &mut self,\n-        lower_ctx: &LowerCtx,\n-        sm: &mut SourceMap,\n-        node: &dyn HasGenericParams,\n-    ) {\n+    pub(crate) fn fill(&mut self, lower_ctx: &LowerCtx, node: &dyn HasGenericParams) {\n         if let Some(params) = node.generic_param_list() {\n-            self.fill_params(lower_ctx, sm, params)\n+            self.fill_params(lower_ctx, params)\n         }\n         if let Some(where_clause) = node.where_clause() {\n             self.fill_where_predicates(lower_ctx, where_clause);\n@@ -180,12 +168,7 @@ impl GenericParams {\n         }\n     }\n \n-    fn fill_params(\n-        &mut self,\n-        lower_ctx: &LowerCtx,\n-        sm: &mut SourceMap,\n-        params: ast::GenericParamList,\n-    ) {\n+    fn fill_params(&mut self, lower_ctx: &LowerCtx, params: ast::GenericParamList) {\n         for type_param in params.type_params() {\n             let name = type_param.name().map_or_else(Name::missing, |it| it.as_name());\n             // FIXME: Use `Path::from_src`\n@@ -196,27 +179,23 @@ impl GenericParams {\n                 default,\n                 provenance: TypeParamProvenance::TypeParamList,\n             };\n-            let param_id = self.types.alloc(param);\n-            sm.type_params.insert(param_id, Either::Left(type_param.clone()));\n-\n+            self.types.alloc(param);\n             let type_ref = TypeRef::Path(name.into());\n             self.fill_bounds(lower_ctx, &type_param, Either::Left(type_ref));\n         }\n         for lifetime_param in params.lifetime_params() {\n             let name =\n                 lifetime_param.lifetime().map_or_else(Name::missing, |lt| Name::new_lifetime(&lt));\n             let param = LifetimeParamData { name: name.clone() };\n-            let param_id = self.lifetimes.alloc(param);\n-            sm.lifetime_params.insert(param_id, lifetime_param.clone());\n+            self.lifetimes.alloc(param);\n             let lifetime_ref = LifetimeRef::new_name(name);\n             self.fill_bounds(lower_ctx, &lifetime_param, Either::Right(lifetime_ref));\n         }\n         for const_param in params.const_params() {\n             let name = const_param.name().map_or_else(Name::missing, |it| it.as_name());\n             let ty = const_param.ty().map_or(TypeRef::Error, |it| TypeRef::from_ast(lower_ctx, it));\n             let param = ConstParamData { name, ty: Interned::new(ty) };\n-            let param_id = self.consts.alloc(param);\n-            sm.const_params.insert(param_id, const_param.clone());\n+            self.consts.alloc(param);\n         }\n     }\n "}, {"sha": "6d34556b3eafaa0f559575e897aa7c5e5d9db20c", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/72bb49467dbaf3d90455b82447cb3450b843910c/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bb49467dbaf3d90455b82447cb3450b843910c/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=72bb49467dbaf3d90455b82447cb3450b843910c", "patch": "@@ -662,11 +662,10 @@ impl<'a> Ctx<'a> {\n         owner: GenericsOwner<'_>,\n         node: &impl ast::HasGenericParams,\n     ) -> Interned<GenericParams> {\n-        let mut sm = &mut Default::default();\n         let mut generics = GenericParams::default();\n         match owner {\n             GenericsOwner::Function(func) => {\n-                generics.fill(&self.body_ctx, sm, node);\n+                generics.fill(&self.body_ctx, node);\n                 // lower `impl Trait` in arguments\n                 for id in func.params.clone() {\n                     if let Param::Normal(ty) = &self.data().params[id] {\n@@ -678,27 +677,26 @@ impl<'a> Ctx<'a> {\n             | GenericsOwner::Enum\n             | GenericsOwner::Union\n             | GenericsOwner::TypeAlias => {\n-                generics.fill(&self.body_ctx, sm, node);\n+                generics.fill(&self.body_ctx, node);\n             }\n             GenericsOwner::Trait(trait_def) => {\n                 // traits get the Self type as an implicit first type parameter\n-                let self_param_id = generics.types.alloc(TypeParamData {\n+                generics.types.alloc(TypeParamData {\n                     name: Some(name![Self]),\n                     default: None,\n                     provenance: TypeParamProvenance::TraitSelf,\n                 });\n-                sm.type_params.insert(self_param_id, Either::Right(trait_def.clone()));\n                 // add super traits as bounds on Self\n                 // i.e., trait Foo: Bar is equivalent to trait Foo where Self: Bar\n                 let self_param = TypeRef::Path(name![Self].into());\n                 generics.fill_bounds(&self.body_ctx, trait_def, Either::Left(self_param));\n-                generics.fill(&self.body_ctx, &mut sm, node);\n+                generics.fill(&self.body_ctx, node);\n             }\n             GenericsOwner::Impl => {\n                 // Note that we don't add `Self` here: in `impl`s, `Self` is not a\n                 // type-parameter, but rather is a type-alias for impl's target\n                 // type, so this is handled by the resolver.\n-                generics.fill(&self.body_ctx, &mut sm, node);\n+                generics.fill(&self.body_ctx, node);\n             }\n         }\n "}]}