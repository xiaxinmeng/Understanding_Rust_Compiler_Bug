{"sha": "429bbbd39a7bcb8650b522a9d683d20d76269770", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyOWJiYmQzOWE3YmNiODY1MGI1MjJhOWQ2ODNkMjBkNzYyNjk3NzA=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-03T15:41:14Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-08T12:08:54Z"}, "message": "Make ToChalk implementations identity", "tree": {"sha": "3aaefc8f6c15b5f464a1304c8b1519203827b9b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3aaefc8f6c15b5f464a1304c8b1519203827b9b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/429bbbd39a7bcb8650b522a9d683d20d76269770", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/429bbbd39a7bcb8650b522a9d683d20d76269770", "html_url": "https://github.com/rust-lang/rust/commit/429bbbd39a7bcb8650b522a9d683d20d76269770", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/429bbbd39a7bcb8650b522a9d683d20d76269770/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77d974ae6b73f8b733f12e18d220fa8c4fc1ee38", "url": "https://api.github.com/repos/rust-lang/rust/commits/77d974ae6b73f8b733f12e18d220fa8c4fc1ee38", "html_url": "https://github.com/rust-lang/rust/commit/77d974ae6b73f8b733f12e18d220fa8c4fc1ee38"}], "stats": {"total": 314, "additions": 42, "deletions": 272}, "files": [{"sha": "cc1d2ca182b78ed326b40d88d0bc0198c98df132", "filename": "crates/hir_ty/src/traits.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/429bbbd39a7bcb8650b522a9d683d20d76269770/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/429bbbd39a7bcb8650b522a9d683d20d76269770/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits.rs?ref=429bbbd39a7bcb8650b522a9d683d20d76269770", "patch": "@@ -173,20 +173,7 @@ fn solution_from_chalk(\n     db: &dyn HirDatabase,\n     solution: chalk_solve::Solution<Interner>,\n ) -> Solution {\n-    match solution {\n-        chalk_solve::Solution::Unique(constr_subst) => {\n-            Solution::Unique(from_chalk(db, constr_subst))\n-        }\n-        chalk_solve::Solution::Ambig(chalk_solve::Guidance::Definite(subst)) => {\n-            Solution::Ambig(Guidance::Definite(from_chalk(db, subst)))\n-        }\n-        chalk_solve::Solution::Ambig(chalk_solve::Guidance::Suggested(subst)) => {\n-            Solution::Ambig(Guidance::Suggested(from_chalk(db, subst)))\n-        }\n-        chalk_solve::Solution::Ambig(chalk_solve::Guidance::Unknown) => {\n-            Solution::Ambig(Guidance::Unknown)\n-        }\n-    }\n+    solution\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]"}, {"sha": "c2e2896606722a58c8402b06007c783ba71a464a", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 41, "deletions": 258, "changes": 299, "blob_url": "https://github.com/rust-lang/rust/blob/429bbbd39a7bcb8650b522a9d683d20d76269770/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/429bbbd39a7bcb8650b522a9d683d20d76269770/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=429bbbd39a7bcb8650b522a9d683d20d76269770", "patch": "@@ -21,212 +21,49 @@ use super::*;\n impl ToChalk for Ty {\n     type Chalk = chalk_ir::Ty<Interner>;\n     fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::Ty<Interner> {\n-        match self.into_inner() {\n-            TyKind::Ref(m, lt, ty) => {\n-                chalk_ir::TyKind::Ref(m, lt, ty.to_chalk(db)).intern(&Interner)\n-            }\n-            TyKind::Array(ty, size) => {\n-                chalk_ir::TyKind::Array(ty.to_chalk(db), size).intern(&Interner)\n-            }\n-            TyKind::Function(FnPointer { sig, substitution: substs, num_binders }) => {\n-                let substitution = chalk_ir::FnSubst(substs.0.to_chalk(db));\n-                chalk_ir::TyKind::Function(chalk_ir::FnPointer { num_binders, sig, substitution })\n-                    .intern(&Interner)\n-            }\n-            TyKind::AssociatedType(assoc_type_id, substs) => {\n-                let substitution = substs.to_chalk(db);\n-                chalk_ir::TyKind::AssociatedType(assoc_type_id, substitution).intern(&Interner)\n-            }\n-\n-            TyKind::OpaqueType(id, substs) => {\n-                let substitution = substs.to_chalk(db);\n-                chalk_ir::TyKind::OpaqueType(id, substitution).intern(&Interner)\n-            }\n-\n-            TyKind::Foreign(id) => chalk_ir::TyKind::Foreign(id).intern(&Interner),\n-\n-            TyKind::Scalar(scalar) => chalk_ir::TyKind::Scalar(scalar).intern(&Interner),\n-\n-            TyKind::Tuple(cardinality, substs) => {\n-                let substitution = substs.to_chalk(db);\n-                chalk_ir::TyKind::Tuple(cardinality, substitution).intern(&Interner)\n-            }\n-            TyKind::Raw(mutability, ty) => {\n-                let ty = ty.to_chalk(db);\n-                chalk_ir::TyKind::Raw(mutability, ty).intern(&Interner)\n-            }\n-            TyKind::Slice(ty) => chalk_ir::TyKind::Slice(ty.to_chalk(db)).intern(&Interner),\n-            TyKind::Str => chalk_ir::TyKind::Str.intern(&Interner),\n-            TyKind::FnDef(id, substs) => {\n-                let substitution = substs.to_chalk(db);\n-                chalk_ir::TyKind::FnDef(id, substitution).intern(&Interner)\n-            }\n-            TyKind::Never => chalk_ir::TyKind::Never.intern(&Interner),\n-\n-            TyKind::Closure(closure_id, substs) => {\n-                let substitution = substs.to_chalk(db);\n-                chalk_ir::TyKind::Closure(closure_id, substitution).intern(&Interner)\n-            }\n-\n-            TyKind::Adt(adt_id, substs) => {\n-                let substitution = substs.to_chalk(db);\n-                chalk_ir::TyKind::Adt(adt_id, substitution).intern(&Interner)\n-            }\n-            TyKind::Alias(AliasTy::Projection(proj_ty)) => {\n-                chalk_ir::AliasTy::Projection(proj_ty.to_chalk(db))\n-                    .cast(&Interner)\n-                    .intern(&Interner)\n-            }\n-            TyKind::Alias(AliasTy::Opaque(opaque_ty)) => {\n-                chalk_ir::AliasTy::Opaque(opaque_ty.to_chalk(db)).cast(&Interner).intern(&Interner)\n-            }\n-            TyKind::Placeholder(idx) => idx.to_ty::<Interner>(&Interner),\n-            TyKind::BoundVar(idx) => chalk_ir::TyKind::BoundVar(idx).intern(&Interner),\n-            TyKind::InferenceVar(..) => panic!(\"uncanonicalized infer ty\"),\n-            TyKind::Dyn(dyn_ty) => {\n-                let (bounds, binders) = dyn_ty.bounds.into_value_and_skipped_binders();\n-                let where_clauses = chalk_ir::QuantifiedWhereClauses::from_iter(\n-                    &Interner,\n-                    bounds.interned().iter().cloned().map(|p| p.to_chalk(db)),\n-                );\n-                let bounded_ty = chalk_ir::DynTy {\n-                    bounds: chalk_ir::Binders::new(binders, where_clauses),\n-                    lifetime: dyn_ty.lifetime,\n-                };\n-                chalk_ir::TyKind::Dyn(bounded_ty).intern(&Interner)\n-            }\n-            TyKind::Error => chalk_ir::TyKind::Error.intern(&Interner),\n-        }\n+        self\n     }\n     fn from_chalk(db: &dyn HirDatabase, chalk: chalk_ir::Ty<Interner>) -> Self {\n-        match chalk.data(&Interner).kind.clone() {\n-            chalk_ir::TyKind::Error => TyKind::Error,\n-            chalk_ir::TyKind::Array(ty, size) => TyKind::Array(from_chalk(db, ty), size),\n-            chalk_ir::TyKind::Placeholder(idx) => TyKind::Placeholder(idx),\n-            chalk_ir::TyKind::Alias(chalk_ir::AliasTy::Projection(proj)) => {\n-                TyKind::Alias(AliasTy::Projection(from_chalk(db, proj)))\n-            }\n-            chalk_ir::TyKind::Alias(chalk_ir::AliasTy::Opaque(opaque_ty)) => {\n-                TyKind::Alias(AliasTy::Opaque(from_chalk(db, opaque_ty)))\n-            }\n-            chalk_ir::TyKind::Function(chalk_ir::FnPointer {\n-                num_binders,\n-                sig,\n-                substitution,\n-                ..\n-            }) => {\n-                assert_eq!(num_binders, 0);\n-                let substs = crate::FnSubst(from_chalk(db, substitution.0));\n-                TyKind::Function(FnPointer { num_binders, sig, substitution: substs })\n-            }\n-            chalk_ir::TyKind::BoundVar(idx) => TyKind::BoundVar(idx),\n-            chalk_ir::TyKind::InferenceVar(_iv, _kind) => TyKind::Error,\n-            chalk_ir::TyKind::Dyn(dyn_ty) => {\n-                assert_eq!(dyn_ty.bounds.binders.len(&Interner), 1);\n-                let (bounds, binders) = dyn_ty.bounds.into_value_and_skipped_binders();\n-                let where_clauses = crate::QuantifiedWhereClauses::from_iter(\n-                    &Interner,\n-                    bounds.interned().iter().cloned().map(|p| from_chalk(db, p)),\n-                );\n-                TyKind::Dyn(crate::DynTy {\n-                    bounds: crate::Binders::new(binders, where_clauses),\n-                    // HACK: we sometimes get lifetime variables back in solutions\n-                    // from Chalk, and don't have the infrastructure to substitute\n-                    // them yet. So for now we just turn them into 'static right\n-                    // when we get them\n-                    lifetime: static_lifetime(),\n-                })\n-            }\n-\n-            chalk_ir::TyKind::Adt(adt_id, subst) => TyKind::Adt(adt_id, from_chalk(db, subst)),\n-            chalk_ir::TyKind::AssociatedType(type_id, subst) => {\n-                TyKind::AssociatedType(type_id, from_chalk(db, subst))\n-            }\n-\n-            chalk_ir::TyKind::OpaqueType(opaque_type_id, subst) => {\n-                TyKind::OpaqueType(opaque_type_id, from_chalk(db, subst))\n-            }\n-\n-            chalk_ir::TyKind::Scalar(scalar) => TyKind::Scalar(scalar),\n-            chalk_ir::TyKind::Tuple(cardinality, subst) => {\n-                TyKind::Tuple(cardinality, from_chalk(db, subst))\n-            }\n-            chalk_ir::TyKind::Raw(mutability, ty) => TyKind::Raw(mutability, from_chalk(db, ty)),\n-            chalk_ir::TyKind::Slice(ty) => TyKind::Slice(from_chalk(db, ty)),\n-            chalk_ir::TyKind::Ref(mutability, _lifetime, ty) => {\n-                // HACK: we sometimes get lifetime variables back in solutions\n-                // from Chalk, and don't have the infrastructure to substitute\n-                // them yet. So for now we just turn them into 'static right\n-                // when we get them\n-                TyKind::Ref(mutability, static_lifetime(), from_chalk(db, ty))\n-            }\n-            chalk_ir::TyKind::Str => TyKind::Str,\n-            chalk_ir::TyKind::Never => TyKind::Never,\n-\n-            chalk_ir::TyKind::FnDef(fn_def_id, subst) => {\n-                TyKind::FnDef(fn_def_id, from_chalk(db, subst))\n-            }\n-\n-            chalk_ir::TyKind::Closure(id, subst) => TyKind::Closure(id, from_chalk(db, subst)),\n-\n-            chalk_ir::TyKind::Foreign(foreign_def_id) => TyKind::Foreign(foreign_def_id),\n-            chalk_ir::TyKind::Generator(_, _) => unimplemented!(), // FIXME\n-            chalk_ir::TyKind::GeneratorWitness(_, _) => unimplemented!(), // FIXME\n-        }\n-        .intern(&Interner)\n+        chalk\n     }\n }\n \n impl ToChalk for GenericArg {\n     type Chalk = chalk_ir::GenericArg<Interner>;\n \n     fn to_chalk(self, db: &dyn HirDatabase) -> Self::Chalk {\n-        match self.interned() {\n-            crate::GenericArgData::Ty(ty) => ty.clone().to_chalk(db).cast(&Interner),\n-        }\n+        self\n     }\n \n     fn from_chalk(db: &dyn HirDatabase, chalk: Self::Chalk) -> Self {\n-        match chalk.interned() {\n-            chalk_ir::GenericArgData::Ty(ty) => Ty::from_chalk(db, ty.clone()).cast(&Interner),\n-            chalk_ir::GenericArgData::Lifetime(_) => unimplemented!(),\n-            chalk_ir::GenericArgData::Const(_) => unimplemented!(),\n-        }\n+        chalk\n     }\n }\n \n impl ToChalk for Substitution {\n     type Chalk = chalk_ir::Substitution<Interner>;\n \n     fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::Substitution<Interner> {\n-        chalk_ir::Substitution::from_iter(\n-            &Interner,\n-            self.iter(&Interner).map(|ty| ty.clone().to_chalk(db)),\n-        )\n+        self\n     }\n \n     fn from_chalk(\n         db: &dyn HirDatabase,\n         parameters: chalk_ir::Substitution<Interner>,\n     ) -> Substitution {\n-        let tys = parameters.iter(&Interner).map(|p| from_chalk(db, p.clone())).collect();\n-        Substitution::intern(tys)\n+        parameters\n     }\n }\n \n impl ToChalk for TraitRef {\n     type Chalk = chalk_ir::TraitRef<Interner>;\n \n     fn to_chalk(self: TraitRef, db: &dyn HirDatabase) -> chalk_ir::TraitRef<Interner> {\n-        let trait_id = self.trait_id;\n-        let substitution = self.substitution.to_chalk(db);\n-        chalk_ir::TraitRef { trait_id, substitution }\n+        self\n     }\n \n     fn from_chalk(db: &dyn HirDatabase, trait_ref: chalk_ir::TraitRef<Interner>) -> Self {\n-        let trait_id = trait_ref.trait_id;\n-        let substs = from_chalk(db, trait_ref.substitution);\n-        TraitRef { trait_id, substitution: substs }\n+        trait_ref\n     }\n }\n \n@@ -287,187 +124,133 @@ impl ToChalk for WhereClause {\n     type Chalk = chalk_ir::WhereClause<Interner>;\n \n     fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::WhereClause<Interner> {\n-        match self {\n-            WhereClause::Implemented(trait_ref) => {\n-                chalk_ir::WhereClause::Implemented(trait_ref.to_chalk(db))\n-            }\n-            WhereClause::AliasEq(alias_eq) => chalk_ir::WhereClause::AliasEq(alias_eq.to_chalk(db)),\n-        }\n+        self\n     }\n \n     fn from_chalk(\n         db: &dyn HirDatabase,\n         where_clause: chalk_ir::WhereClause<Interner>,\n     ) -> WhereClause {\n-        match where_clause {\n-            chalk_ir::WhereClause::Implemented(tr) => WhereClause::Implemented(from_chalk(db, tr)),\n-            chalk_ir::WhereClause::AliasEq(alias_eq) => {\n-                WhereClause::AliasEq(from_chalk(db, alias_eq))\n-            }\n-\n-            chalk_ir::WhereClause::LifetimeOutlives(_) => {\n-                // we shouldn't get these from Chalk\n-                panic!(\"encountered LifetimeOutlives from Chalk\")\n-            }\n-\n-            chalk_ir::WhereClause::TypeOutlives(_) => {\n-                // we shouldn't get these from Chalk\n-                panic!(\"encountered TypeOutlives from Chalk\")\n-            }\n-        }\n+        where_clause\n     }\n }\n \n impl ToChalk for ProjectionTy {\n     type Chalk = chalk_ir::ProjectionTy<Interner>;\n \n     fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::ProjectionTy<Interner> {\n-        chalk_ir::ProjectionTy {\n-            associated_ty_id: self.associated_ty_id,\n-            substitution: self.substitution.to_chalk(db),\n-        }\n+        self\n     }\n \n     fn from_chalk(\n         db: &dyn HirDatabase,\n         projection_ty: chalk_ir::ProjectionTy<Interner>,\n     ) -> ProjectionTy {\n-        ProjectionTy {\n-            associated_ty_id: projection_ty.associated_ty_id,\n-            substitution: from_chalk(db, projection_ty.substitution),\n-        }\n+        projection_ty\n     }\n }\n impl ToChalk for OpaqueTy {\n     type Chalk = chalk_ir::OpaqueTy<Interner>;\n \n     fn to_chalk(self, db: &dyn HirDatabase) -> Self::Chalk {\n-        chalk_ir::OpaqueTy {\n-            opaque_ty_id: self.opaque_ty_id,\n-            substitution: self.substitution.to_chalk(db),\n-        }\n+        self\n     }\n \n     fn from_chalk(db: &dyn HirDatabase, chalk: Self::Chalk) -> Self {\n-        OpaqueTy {\n-            opaque_ty_id: chalk.opaque_ty_id,\n-            substitution: from_chalk(db, chalk.substitution),\n-        }\n+        chalk\n     }\n }\n \n impl ToChalk for AliasTy {\n     type Chalk = chalk_ir::AliasTy<Interner>;\n \n     fn to_chalk(self, db: &dyn HirDatabase) -> Self::Chalk {\n-        match self {\n-            AliasTy::Projection(projection_ty) => {\n-                chalk_ir::AliasTy::Projection(projection_ty.to_chalk(db))\n-            }\n-            AliasTy::Opaque(opaque_ty) => chalk_ir::AliasTy::Opaque(opaque_ty.to_chalk(db)),\n-        }\n+        self\n     }\n \n     fn from_chalk(db: &dyn HirDatabase, chalk: Self::Chalk) -> Self {\n-        match chalk {\n-            chalk_ir::AliasTy::Projection(projection_ty) => {\n-                AliasTy::Projection(from_chalk(db, projection_ty))\n-            }\n-            chalk_ir::AliasTy::Opaque(opaque_ty) => AliasTy::Opaque(from_chalk(db, opaque_ty)),\n-        }\n+        chalk\n     }\n }\n \n impl ToChalk for AliasEq {\n     type Chalk = chalk_ir::AliasEq<Interner>;\n \n     fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::AliasEq<Interner> {\n-        chalk_ir::AliasEq { alias: self.alias.to_chalk(db), ty: self.ty.to_chalk(db) }\n+        self\n     }\n \n     fn from_chalk(db: &dyn HirDatabase, alias_eq: chalk_ir::AliasEq<Interner>) -> Self {\n-        AliasEq { alias: from_chalk(db, alias_eq.alias), ty: from_chalk(db, alias_eq.ty) }\n+        alias_eq\n     }\n }\n \n impl ToChalk for DomainGoal {\n     type Chalk = chalk_ir::DomainGoal<Interner>;\n \n     fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::DomainGoal<Interner> {\n-        match self {\n-            DomainGoal::Holds(WhereClause::Implemented(tr)) => tr.to_chalk(db).cast(&Interner),\n-            DomainGoal::Holds(WhereClause::AliasEq(alias_eq)) => {\n-                alias_eq.to_chalk(db).cast(&Interner)\n-            }\n-        }\n+        self\n     }\n \n-    fn from_chalk(_db: &dyn HirDatabase, _goal: chalk_ir::DomainGoal<Interner>) -> Self {\n-        unimplemented!()\n+    fn from_chalk(_db: &dyn HirDatabase, goal: chalk_ir::DomainGoal<Interner>) -> Self {\n+        goal\n     }\n }\n \n impl<T> ToChalk for Canonical<T>\n where\n-    T: ToChalk,\n-    T::Chalk: HasInterner<Interner = Interner>,\n+    T: HasInterner<Interner = Interner>,\n {\n-    type Chalk = chalk_ir::Canonical<T::Chalk>;\n+    type Chalk = chalk_ir::Canonical<T>;\n \n-    fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::Canonical<T::Chalk> {\n-        let value = self.value.to_chalk(db);\n-        chalk_ir::Canonical { value, binders: self.binders }\n+    fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::Canonical<T> {\n+        self\n     }\n \n-    fn from_chalk(db: &dyn HirDatabase, canonical: chalk_ir::Canonical<T::Chalk>) -> Canonical<T> {\n-        Canonical { binders: canonical.binders, value: from_chalk(db, canonical.value) }\n+    fn from_chalk(db: &dyn HirDatabase, canonical: chalk_ir::Canonical<T>) -> Canonical<T> {\n+        canonical\n     }\n }\n \n impl<T: ToChalk> ToChalk for InEnvironment<T>\n where\n-    T::Chalk: chalk_ir::interner::HasInterner<Interner = Interner>,\n+    T: HasInterner<Interner = Interner>,\n {\n-    type Chalk = chalk_ir::InEnvironment<T::Chalk>;\n+    type Chalk = chalk_ir::InEnvironment<T>;\n \n-    fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::InEnvironment<T::Chalk> {\n-        chalk_ir::InEnvironment { environment: self.environment, goal: self.goal.to_chalk(db) }\n+    fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::InEnvironment<T> {\n+        self\n     }\n \n-    fn from_chalk(\n-        _db: &dyn HirDatabase,\n-        _in_env: chalk_ir::InEnvironment<T::Chalk>,\n-    ) -> InEnvironment<T> {\n-        unimplemented!()\n+    fn from_chalk(_db: &dyn HirDatabase, in_env: chalk_ir::InEnvironment<T>) -> InEnvironment<T> {\n+        in_env\n     }\n }\n \n impl<T: ToChalk> ToChalk for crate::Binders<T>\n where\n-    T::Chalk: chalk_ir::interner::HasInterner<Interner = Interner>,\n+    T: HasInterner<Interner = Interner>,\n {\n-    type Chalk = chalk_ir::Binders<T::Chalk>;\n+    type Chalk = chalk_ir::Binders<T>;\n \n-    fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::Binders<T::Chalk> {\n-        let (value, binders) = self.into_value_and_skipped_binders();\n-        chalk_ir::Binders::new(binders, value.to_chalk(db))\n+    fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::Binders<T> {\n+        self\n     }\n \n-    fn from_chalk(db: &dyn HirDatabase, binders: chalk_ir::Binders<T::Chalk>) -> crate::Binders<T> {\n-        let (v, b) = binders.into_value_and_skipped_binders();\n-        crate::Binders::new(b, from_chalk(db, v))\n+    fn from_chalk(db: &dyn HirDatabase, binders: chalk_ir::Binders<T>) -> crate::Binders<T> {\n+        binders\n     }\n }\n \n impl ToChalk for crate::ConstrainedSubst {\n     type Chalk = chalk_ir::ConstrainedSubst<Interner>;\n \n     fn to_chalk(self, _db: &dyn HirDatabase) -> Self::Chalk {\n-        unimplemented!()\n+        self\n     }\n \n     fn from_chalk(db: &dyn HirDatabase, chalk: Self::Chalk) -> Self {\n-        ConstrainedSubst { subst: from_chalk(db, chalk.subst) }\n+        chalk\n     }\n }\n "}]}