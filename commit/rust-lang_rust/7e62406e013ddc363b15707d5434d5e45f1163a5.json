{"sha": "7e62406e013ddc363b15707d5434d5e45f1163a5", "node_id": "C_kwDOAAsO6NoAKDdlNjI0MDZlMDEzZGRjMzYzYjE1NzA3ZDU0MzRkNWU0NWYxMTYzYTU", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-10-31T02:31:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-31T02:31:37Z"}, "message": "Rollup merge of #101428 - JakobDegen:build-tests, r=oli-obk\n\nAdd mir building test directory\n\nThe first commit renames `mir-map.0` mir dumps to `built.after` dumps. I am happy to drop this commit if someone can explain the origin of the name.\n\nThe second commit moves a bunch of mir building tests into their own directory. I did my best to make sure that all of these tests are actually testing mir building, and not just incidentally using `built.after`\n\nr? ``@oli-obk``", "tree": {"sha": "222ce382b310f21e048804105feeb10e29355b5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/222ce382b310f21e048804105feeb10e29355b5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e62406e013ddc363b15707d5434d5e45f1163a5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjXzOJCRBK7hj4Ov3rIwAA0k4IAEZgUDBi6AEedhlZFCJ38xZ3\ncj0kFaDkfzx26JMl8AIg9EeTkT/wnyBwGnajMii1E2iKdO8DZplRV392AaIFL21S\nHwomj/oML++QH6Aj+6TtjgXllfirpjX/QBxYzOz8lg9/cmq20fTUr37zvRXlz37b\ngLcHC0we5vOvh+WygKLHhYRG6vH4jiOEmNxL/vRGy4g9aI0M05/cAtzTrUN8MGHX\nI4cksdhL3cczwsO6N2Rj8gLoMUZdo0yov9GrflpNY9vHO25quT3bJZchjYtA5CgO\n1j4h2xwU/kNLOvAH8FezcH6NknwTIP2agP8cjKtdQow6CWvUBY5hQE8WjcMocnc=\n=Gf4g\n-----END PGP SIGNATURE-----\n", "payload": "tree 222ce382b310f21e048804105feeb10e29355b5c\nparent 9911229650a2a621f4fc9ad448276c3942f3d00d\nparent 51b03639d6ccc6efb97e046b7466538130e14ec1\nauthor Michael Howell <michael@notriddle.com> 1667183497 -0700\ncommitter GitHub <noreply@github.com> 1667183497 -0700\n\nRollup merge of #101428 - JakobDegen:build-tests, r=oli-obk\n\nAdd mir building test directory\n\nThe first commit renames `mir-map.0` mir dumps to `built.after` dumps. I am happy to drop this commit if someone can explain the origin of the name.\n\nThe second commit moves a bunch of mir building tests into their own directory. I did my best to make sure that all of these tests are actually testing mir building, and not just incidentally using `built.after`\n\nr? ``@oli-obk``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e62406e013ddc363b15707d5434d5e45f1163a5", "html_url": "https://github.com/rust-lang/rust/commit/7e62406e013ddc363b15707d5434d5e45f1163a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e62406e013ddc363b15707d5434d5e45f1163a5/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9911229650a2a621f4fc9ad448276c3942f3d00d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9911229650a2a621f4fc9ad448276c3942f3d00d", "html_url": "https://github.com/rust-lang/rust/commit/9911229650a2a621f4fc9ad448276c3942f3d00d"}, {"sha": "51b03639d6ccc6efb97e046b7466538130e14ec1", "url": "https://api.github.com/repos/rust-lang/rust/commits/51b03639d6ccc6efb97e046b7466538130e14ec1", "html_url": "https://github.com/rust-lang/rust/commit/51b03639d6ccc6efb97e046b7466538130e14ec1"}], "stats": {"total": 248, "additions": 136, "deletions": 112}, "files": [{"sha": "4791be1306c1b09235074c849503800298cf8ae6", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -288,7 +288,7 @@ fn mir_const<'tcx>(\n \n     let mut body = tcx.mir_built(def).steal();\n \n-    rustc_middle::mir::dump_mir(tcx, None, \"mir_map\", &0, &body, |_, _| Ok(()));\n+    pass_manager::dump_mir_for_phase_change(tcx, &body);\n \n     pm::run_passes(\n         tcx,"}, {"sha": "bf5906741441dad8f301eff8ac2eca8188818189", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -845,7 +845,7 @@ pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> Body<'_> {\n         span,\n     );\n \n-    rustc_middle::mir::dump_mir(tcx, None, \"mir_map\", &0, &body, |_, _| Ok(()));\n+    crate::pass_manager::dump_mir_for_phase_change(tcx, &body);\n \n     body\n }"}, {"sha": "194b107bead89c32be70c17690bde0a9818aa0dc", "filename": "src/test/mir-opt/building/enum_cast.bar.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.bar.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.bar.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.bar.built.after.mir?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `bar` 0 mir_map\n+// MIR for `bar` after built\n \n fn bar(_1: Bar) -> usize {\n     debug bar => _1;                     // in scope 0 at $DIR/enum_cast.rs:+0:8: +0:11", "previous_filename": "src/test/mir-opt/enum_cast.bar.mir_map.0.mir"}, {"sha": "dde26afc77a0c7e3a249290faba4d6a363f30015", "filename": "src/test/mir-opt/building/enum_cast.boo.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.boo.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.boo.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.boo.built.after.mir?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `boo` 0 mir_map\n+// MIR for `boo` after built\n \n fn boo(_1: Boo) -> usize {\n     debug boo => _1;                     // in scope 0 at $DIR/enum_cast.rs:+0:8: +0:11", "previous_filename": "src/test/mir-opt/enum_cast.boo.mir_map.0.mir"}, {"sha": "a43c523c71f3c00ac0d820c8fd20d5241d76e817", "filename": "src/test/mir-opt/building/enum_cast.droppy.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.droppy.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.droppy.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.droppy.built.after.mir?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `droppy` 0 mir_map\n+// MIR for `droppy` after built\n \n fn droppy() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/enum_cast.rs:+0:13: +0:13", "previous_filename": "src/test/mir-opt/enum_cast.droppy.mir_map.0.mir"}, {"sha": "17e0abf2e319359419256cb63765b2f4a6853f4a", "filename": "src/test/mir-opt/building/enum_cast.foo.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.foo.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.foo.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.foo.built.after.mir?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `foo` 0 mir_map\n+// MIR for `foo` after built\n \n fn foo(_1: Foo) -> usize {\n     debug foo => _1;                     // in scope 0 at $DIR/enum_cast.rs:+0:8: +0:11", "previous_filename": "src/test/mir-opt/enum_cast.foo.mir_map.0.mir"}, {"sha": "98fd5acfb14f964014365f4bff32677a6c319cc0", "filename": "src/test/mir-opt/building/enum_cast.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.rs?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,6 +1,6 @@\n-// EMIT_MIR enum_cast.foo.mir_map.0.mir\n-// EMIT_MIR enum_cast.bar.mir_map.0.mir\n-// EMIT_MIR enum_cast.boo.mir_map.0.mir\n+// EMIT_MIR enum_cast.foo.built.after.mir\n+// EMIT_MIR enum_cast.bar.built.after.mir\n+// EMIT_MIR enum_cast.boo.built.after.mir\n \n enum Foo {\n     A\n@@ -27,7 +27,7 @@ fn boo(boo: Boo) -> usize {\n     boo as usize\n }\n \n-// EMIT_MIR enum_cast.droppy.mir_map.0.mir\n+// EMIT_MIR enum_cast.droppy.built.after.mir\n enum Droppy {\n     A, B, C\n }", "previous_filename": "src/test/mir-opt/enum_cast.rs"}, {"sha": "a32d8cb37142c84fe57b503718d0e56b0d575cbd", "filename": "src/test/mir-opt/building/issue-101867.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue-101867.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue-101867.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue-101867.rs?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,4 +1,4 @@\n-// EMIT_MIR issue_101867.main.mir_map.0.mir\n+// EMIT_MIR issue_101867.main.built.after.mir\n fn main() {\n     let x: Option<u8> = Some(1);\n     let Some(y) = x else {", "previous_filename": "src/test/mir-opt/issue-101867.rs"}, {"sha": "7e9f0de81f749808ee3b8efff39fc873266857d0", "filename": "src/test/mir-opt/building/issue-49232.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue-49232.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue-49232.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue-49232.rs?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,7 +1,7 @@\n // We must mark a variable whose initialization fails due to an\n // abort statement as StorageDead.\n \n-// EMIT_MIR issue_49232.main.mir_map.0.mir\n+// EMIT_MIR issue_49232.main.built.after.mir\n fn main() {\n     loop {\n         let beacon = {", "previous_filename": "src/test/mir-opt/issue-49232.rs"}, {"sha": "6834205b649b2a8012c8e909a3de32b8c04f7f19", "filename": "src/test/mir-opt/building/issue_101867.main.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue_101867.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue_101867.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue_101867.main.built.after.mir?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `main` 0 mir_map\n+// MIR for `main` after built\n \n | User Type Annotations\n | 0: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(std::option::Option<u8>) }, span: $DIR/issue-101867.rs:3:12: 3:22, inferred_ty: std::option::Option<u8>", "previous_filename": "src/test/mir-opt/issue_101867.main.mir_map.0.mir"}, {"sha": "b90f8c13589fa4e2d95c9cedc0dfaa701ab07fb5", "filename": "src/test/mir-opt/building/issue_49232.main.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue_49232.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue_49232.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue_49232.main.built.after.mir?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `main` 0 mir_map\n+// MIR for `main` after built\n \n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/issue-49232.rs:+0:11: +0:11", "previous_filename": "src/test/mir-opt/issue_49232.main.mir_map.0.mir"}, {"sha": "9a190c3d60ea49607f9e76a3ceb031bb659e18f8", "filename": "src/test/mir-opt/building/match_false_edges.full_tested_match.built.after.mir", "status": "renamed", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.full_tested_match.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.full_tested_match.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.full_tested_match.built.after.mir?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `full_tested_match` after PromoteTemps\n+// MIR for `full_tested_match` after built\n \n fn full_tested_match() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/match_false_edges.rs:+0:28: +0:28\n@@ -12,7 +12,6 @@ fn full_tested_match() -> () {\n     let mut _8: i32;                     // in scope 0 at $DIR/match_false_edges.rs:+2:35: +2:36\n     let _9: i32;                         // in scope 0 at $DIR/match_false_edges.rs:+3:14: +3:15\n     let mut _10: i32;                    // in scope 0 at $DIR/match_false_edges.rs:+3:24: +3:25\n-    let mut _11: &std::option::Option<i32>; // in scope 0 at $DIR/match_false_edges.rs:+2:14: +2:15\n     scope 1 {\n     }\n     scope 2 {\n@@ -34,15 +33,15 @@ fn full_tested_match() -> () {\n \n     bb1: {\n         _1 = (const 3_i32, const 3_i32); // scope 0 at $DIR/match_false_edges.rs:+4:17: +4:23\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:+4:17: +4:23\n+        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:+4:17: +4:23\n     }\n \n     bb2: {\n         falseEdge -> [real: bb5, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:+2:9: +2:16\n     }\n \n     bb3: {\n-        falseEdge -> [real: bb9, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:+3:9: +3:16\n+        falseEdge -> [real: bb10, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:+3:9: +3:16\n     }\n \n     bb4: {\n@@ -51,14 +50,10 @@ fn full_tested_match() -> () {\n \n     bb5: {\n         StorageLive(_6);                 // scope 0 at $DIR/match_false_edges.rs:+2:14: +2:15\n-        _11 = const _;                   // scope 0 at $DIR/match_false_edges.rs:+2:14: +2:15\n-                                         // mir::Constant\n-                                         // + span: $DIR/match_false_edges.rs:14:14: 14:15\n-                                         // + literal: Const { ty: &Option<i32>, val: Unevaluated(full_tested_match, [], Some(promoted[0])) }\n-        _6 = &(((*_11) as Some).0: i32); // scope 0 at $DIR/match_false_edges.rs:+2:14: +2:15\n+        _6 = &((_2 as Some).0: i32);     // scope 0 at $DIR/match_false_edges.rs:+2:14: +2:15\n         _4 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:27\n         StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n-        _7 = guard() -> [return: bb6, unwind: bb11]; // scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n+        _7 = guard() -> [return: bb6, unwind: bb12]; // scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:14:20: 14:25\n                                          // + literal: Const { ty: fn() -> bool {guard}, val: Value(<ZST>) }\n@@ -80,34 +75,38 @@ fn full_tested_match() -> () {\n         StorageDead(_8);                 // scope 2 at $DIR/match_false_edges.rs:+2:36: +2:37\n         StorageDead(_5);                 // scope 0 at $DIR/match_false_edges.rs:+2:36: +2:37\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:+2:36: +2:37\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:+2:36: +2:37\n+        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:+2:36: +2:37\n     }\n \n     bb8: {\n+        goto -> bb9;                     // scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n+    }\n+\n+    bb9: {\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:+2:26: +2:27\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:+2:36: +2:37\n         goto -> bb3;                     // scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n     }\n \n-    bb9: {\n+    bb10: {\n         StorageLive(_9);                 // scope 0 at $DIR/match_false_edges.rs:+3:14: +3:15\n         _9 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:+3:14: +3:15\n         StorageLive(_10);                // scope 3 at $DIR/match_false_edges.rs:+3:24: +3:25\n         _10 = _9;                        // scope 3 at $DIR/match_false_edges.rs:+3:24: +3:25\n         _1 = (const 2_i32, move _10);    // scope 3 at $DIR/match_false_edges.rs:+3:20: +3:26\n         StorageDead(_10);                // scope 3 at $DIR/match_false_edges.rs:+3:25: +3:26\n         StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:+3:25: +3:26\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:+3:25: +3:26\n+        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:+3:25: +3:26\n     }\n \n-    bb10: {\n+    bb11: {\n         StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:+5:6: +5:7\n         StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:+5:6: +5:7\n         _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:+0:28: +6:2\n         return;                          // scope 0 at $DIR/match_false_edges.rs:+6:2: +6:2\n     }\n \n-    bb11 (cleanup): {\n+    bb12 (cleanup): {\n         resume;                          // scope 0 at $DIR/match_false_edges.rs:+0:1: +6:2\n     }\n }", "previous_filename": "src/test/mir-opt/match_false_edges.full_tested_match.PromoteTemps.after.mir"}, {"sha": "1c9953e7efc11ec538638eeed0355ad50f1a1024", "filename": "src/test/mir-opt/building/match_false_edges.full_tested_match2.built.after.mir", "status": "renamed", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.full_tested_match2.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.full_tested_match2.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.full_tested_match2.built.after.mir?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `full_tested_match2` before PromoteTemps\n+// MIR for `full_tested_match2` after built\n \n fn full_tested_match2() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/match_false_edges.rs:+0:29: +0:29\n@@ -32,7 +32,7 @@ fn full_tested_match2() -> () {\n     }\n \n     bb1: {\n-        falseEdge -> [real: bb9, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:+3:9: +3:13\n+        falseEdge -> [real: bb10, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:+3:9: +3:13\n     }\n \n     bb2: {\n@@ -47,7 +47,7 @@ fn full_tested_match2() -> () {\n         _1 = (const 2_i32, move _10);    // scope 3 at $DIR/match_false_edges.rs:+4:20: +4:26\n         StorageDead(_10);                // scope 3 at $DIR/match_false_edges.rs:+4:25: +4:26\n         StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:+4:25: +4:26\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:+4:25: +4:26\n+        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:+4:25: +4:26\n     }\n \n     bb4: {\n@@ -59,7 +59,7 @@ fn full_tested_match2() -> () {\n         _6 = &((_2 as Some).0: i32);     // scope 0 at $DIR/match_false_edges.rs:+2:14: +2:15\n         _4 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:27\n         StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n-        _7 = guard() -> [return: bb6, unwind: bb11]; // scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n+        _7 = guard() -> [return: bb6, unwind: bb12]; // scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:25:20: 25:25\n                                          // + literal: Const { ty: fn() -> bool {guard}, val: Value(<ZST>) }\n@@ -81,28 +81,32 @@ fn full_tested_match2() -> () {\n         StorageDead(_8);                 // scope 2 at $DIR/match_false_edges.rs:+2:36: +2:37\n         StorageDead(_5);                 // scope 0 at $DIR/match_false_edges.rs:+2:36: +2:37\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:+2:36: +2:37\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:+2:36: +2:37\n+        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:+2:36: +2:37\n     }\n \n     bb8: {\n+        goto -> bb9;                     // scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n+    }\n+\n+    bb9: {\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:+2:26: +2:27\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:+2:36: +2:37\n         falseEdge -> [real: bb3, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n     }\n \n-    bb9: {\n+    bb10: {\n         _1 = (const 3_i32, const 3_i32); // scope 0 at $DIR/match_false_edges.rs:+3:17: +3:23\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:+3:17: +3:23\n+        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:+3:17: +3:23\n     }\n \n-    bb10: {\n+    bb11: {\n         StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:+5:6: +5:7\n         StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:+5:6: +5:7\n         _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:+0:29: +6:2\n         return;                          // scope 0 at $DIR/match_false_edges.rs:+6:2: +6:2\n     }\n \n-    bb11 (cleanup): {\n+    bb12 (cleanup): {\n         resume;                          // scope 0 at $DIR/match_false_edges.rs:+0:1: +6:2\n     }\n }", "previous_filename": "src/test/mir-opt/match_false_edges.full_tested_match2.PromoteTemps.before.mir"}, {"sha": "08c67d39d78074f393be1f3963fa60d8be60db3e", "filename": "src/test/mir-opt/building/match_false_edges.main.built.after.mir", "status": "renamed", "additions": 47, "deletions": 26, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.main.built.after.mir?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `main` before PromoteTemps\n+// MIR for `main` after built\n \n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/match_false_edges.rs:+0:11: +0:11\n@@ -43,41 +43,54 @@ fn main() -> () {\n     }\n \n     bb1: {\n-        falseEdge -> [real: bb9, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:+3:9: +3:11\n+        falseEdge -> [real: bb13, imaginary: bb6]; // scope 0 at $DIR/match_false_edges.rs:+3:9: +3:11\n     }\n \n     bb2: {\n-        falseEdge -> [real: bb5, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:+2:9: +2:17\n+        falseEdge -> [real: bb8, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:+2:9: +2:17\n     }\n \n     bb3: {\n+        goto -> bb1;                     // scope 0 at $DIR/match_false_edges.rs:+1:13: +1:26\n+    }\n+\n+    bb4: {\n+        _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:26\n+        switchInt(move _3) -> [1_isize: bb6, otherwise: bb5]; // scope 0 at $DIR/match_false_edges.rs:+1:13: +1:26\n+    }\n+\n+    bb5: {\n         StorageLive(_14);                // scope 0 at $DIR/match_false_edges.rs:+5:9: +5:11\n         _14 = _2;                        // scope 0 at $DIR/match_false_edges.rs:+5:9: +5:11\n         _1 = const 4_i32;                // scope 5 at $DIR/match_false_edges.rs:+5:15: +5:16\n         StorageDead(_14);                // scope 0 at $DIR/match_false_edges.rs:+5:15: +5:16\n-        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:+5:15: +5:16\n+        goto -> bb19;                    // scope 0 at $DIR/match_false_edges.rs:+5:15: +5:16\n     }\n \n-    bb4: {\n-        falseEdge -> [real: bb10, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:+4:9: +4:16\n+    bb6: {\n+        falseEdge -> [real: bb14, imaginary: bb5]; // scope 0 at $DIR/match_false_edges.rs:+4:9: +4:16\n     }\n \n-    bb5: {\n+    bb7: {\n+        goto -> bb5;                     // scope 0 at $DIR/match_false_edges.rs:+1:13: +1:26\n+    }\n+\n+    bb8: {\n         StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:+2:14: +2:16\n         _7 = &((_2 as Some).0: i32);     // scope 0 at $DIR/match_false_edges.rs:+2:14: +2:16\n         _5 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:26\n         StorageLive(_8);                 // scope 0 at $DIR/match_false_edges.rs:+2:21: +2:28\n-        _8 = guard() -> [return: bb6, unwind: bb15]; // scope 0 at $DIR/match_false_edges.rs:+2:21: +2:28\n+        _8 = guard() -> [return: bb9, unwind: bb20]; // scope 0 at $DIR/match_false_edges.rs:+2:21: +2:28\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:34:21: 34:26\n                                          // + literal: Const { ty: fn() -> bool {guard}, val: Value(<ZST>) }\n     }\n \n-    bb6: {\n-        switchInt(move _8) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/match_false_edges.rs:+2:21: +2:28\n+    bb9: {\n+        switchInt(move _8) -> [false: bb11, otherwise: bb10]; // scope 0 at $DIR/match_false_edges.rs:+2:21: +2:28\n     }\n \n-    bb7: {\n+    bb10: {\n         StorageDead(_8);                 // scope 0 at $DIR/match_false_edges.rs:+2:27: +2:28\n         FakeRead(ForMatchGuard, _5);     // scope 0 at $DIR/match_false_edges.rs:+2:27: +2:28\n         FakeRead(ForGuardBinding, _7);   // scope 0 at $DIR/match_false_edges.rs:+2:27: +2:28\n@@ -86,41 +99,45 @@ fn main() -> () {\n         _1 = const 1_i32;                // scope 2 at $DIR/match_false_edges.rs:+2:32: +2:33\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:+2:32: +2:33\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:+2:32: +2:33\n-        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:+2:32: +2:33\n+        goto -> bb19;                    // scope 0 at $DIR/match_false_edges.rs:+2:32: +2:33\n     }\n \n-    bb8: {\n+    bb11: {\n+        goto -> bb12;                    // scope 0 at $DIR/match_false_edges.rs:+2:21: +2:28\n+    }\n+\n+    bb12: {\n         StorageDead(_8);                 // scope 0 at $DIR/match_false_edges.rs:+2:27: +2:28\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:+2:32: +2:33\n-        falseEdge -> [real: bb1, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:+2:21: +2:28\n+        falseEdge -> [real: bb3, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:+2:21: +2:28\n     }\n \n-    bb9: {\n+    bb13: {\n         StorageLive(_9);                 // scope 0 at $DIR/match_false_edges.rs:+3:9: +3:11\n         _9 = _2;                         // scope 0 at $DIR/match_false_edges.rs:+3:9: +3:11\n         _1 = const 2_i32;                // scope 3 at $DIR/match_false_edges.rs:+3:15: +3:16\n         StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:+3:15: +3:16\n-        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:+3:15: +3:16\n+        goto -> bb19;                    // scope 0 at $DIR/match_false_edges.rs:+3:15: +3:16\n     }\n \n-    bb10: {\n+    bb14: {\n         StorageLive(_11);                // scope 0 at $DIR/match_false_edges.rs:+4:14: +4:15\n         _11 = &((_2 as Some).0: i32);    // scope 0 at $DIR/match_false_edges.rs:+4:14: +4:15\n         _5 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:26\n         StorageLive(_12);                // scope 0 at $DIR/match_false_edges.rs:+4:20: +4:29\n         StorageLive(_13);                // scope 0 at $DIR/match_false_edges.rs:+4:27: +4:28\n         _13 = (*_11);                    // scope 0 at $DIR/match_false_edges.rs:+4:27: +4:28\n-        _12 = guard2(move _13) -> [return: bb11, unwind: bb15]; // scope 0 at $DIR/match_false_edges.rs:+4:20: +4:29\n+        _12 = guard2(move _13) -> [return: bb15, unwind: bb20]; // scope 0 at $DIR/match_false_edges.rs:+4:20: +4:29\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:36:20: 36:26\n                                          // + literal: Const { ty: fn(i32) -> bool {guard2}, val: Value(<ZST>) }\n     }\n \n-    bb11: {\n-        switchInt(move _12) -> [false: bb13, otherwise: bb12]; // scope 0 at $DIR/match_false_edges.rs:+4:20: +4:29\n+    bb15: {\n+        switchInt(move _12) -> [false: bb17, otherwise: bb16]; // scope 0 at $DIR/match_false_edges.rs:+4:20: +4:29\n     }\n \n-    bb12: {\n+    bb16: {\n         StorageDead(_13);                // scope 0 at $DIR/match_false_edges.rs:+4:28: +4:29\n         StorageDead(_12);                // scope 0 at $DIR/match_false_edges.rs:+4:28: +4:29\n         FakeRead(ForMatchGuard, _5);     // scope 0 at $DIR/match_false_edges.rs:+4:28: +4:29\n@@ -130,24 +147,28 @@ fn main() -> () {\n         _1 = const 3_i32;                // scope 4 at $DIR/match_false_edges.rs:+4:33: +4:34\n         StorageDead(_10);                // scope 0 at $DIR/match_false_edges.rs:+4:33: +4:34\n         StorageDead(_11);                // scope 0 at $DIR/match_false_edges.rs:+4:33: +4:34\n-        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:+4:33: +4:34\n+        goto -> bb19;                    // scope 0 at $DIR/match_false_edges.rs:+4:33: +4:34\n     }\n \n-    bb13: {\n+    bb17: {\n+        goto -> bb18;                    // scope 0 at $DIR/match_false_edges.rs:+4:20: +4:29\n+    }\n+\n+    bb18: {\n         StorageDead(_13);                // scope 0 at $DIR/match_false_edges.rs:+4:28: +4:29\n         StorageDead(_12);                // scope 0 at $DIR/match_false_edges.rs:+4:28: +4:29\n         StorageDead(_11);                // scope 0 at $DIR/match_false_edges.rs:+4:33: +4:34\n-        falseEdge -> [real: bb3, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:+4:20: +4:29\n+        falseEdge -> [real: bb7, imaginary: bb5]; // scope 0 at $DIR/match_false_edges.rs:+4:20: +4:29\n     }\n \n-    bb14: {\n+    bb19: {\n         StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:+6:6: +6:7\n         StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:+6:6: +6:7\n         _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:+0:11: +7:2\n         return;                          // scope 0 at $DIR/match_false_edges.rs:+7:2: +7:2\n     }\n \n-    bb15 (cleanup): {\n+    bb20 (cleanup): {\n         resume;                          // scope 0 at $DIR/match_false_edges.rs:+0:1: +7:2\n     }\n }", "previous_filename": "src/test/mir-opt/match_false_edges.main.PromoteTemps.before.mir"}, {"sha": "ddfcc149319187e09adcf016e11416f650a30204", "filename": "src/test/mir-opt/building/match_false_edges.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.rs?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -8,7 +8,7 @@ fn guard2(_: i32) -> bool {\n \n // no_mangle to make sure this gets instantiated even in an executable.\n #[no_mangle]\n-// EMIT_MIR match_false_edges.full_tested_match.PromoteTemps.after.mir\n+// EMIT_MIR match_false_edges.full_tested_match.built.after.mir\n pub fn full_tested_match() {\n     let _ = match Some(42) {\n         Some(x) if guard() => (1, x),\n@@ -19,7 +19,7 @@ pub fn full_tested_match() {\n \n // no_mangle to make sure this gets instantiated even in an executable.\n #[no_mangle]\n-// EMIT_MIR match_false_edges.full_tested_match2.PromoteTemps.before.mir\n+// EMIT_MIR match_false_edges.full_tested_match2.built.after.mir\n pub fn full_tested_match2() {\n     let _ = match Some(42) {\n         Some(x) if guard() => (1, x),\n@@ -28,7 +28,7 @@ pub fn full_tested_match2() {\n     };\n }\n \n-// EMIT_MIR match_false_edges.main.PromoteTemps.before.mir\n+// EMIT_MIR match_false_edges.main.built.after.mir\n fn main() {\n     let _ = match Some(1) {\n         Some(_w) if guard() => 1,", "previous_filename": "src/test/mir-opt/match_false_edges.rs"}, {"sha": "668530968fe51de0067773ae034bd9fc503b3a12", "filename": "src/test/mir-opt/building/receiver-ptr-mutability.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Freceiver-ptr-mutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Freceiver-ptr-mutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Freceiver-ptr-mutability.rs?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,4 +1,4 @@\n-// EMIT_MIR receiver_ptr_mutability.main.mir_map.0.mir\n+// EMIT_MIR receiver_ptr_mutability.main.built.after.mir\n \n #![feature(arbitrary_self_types)]\n ", "previous_filename": "src/test/mir-opt/receiver-ptr-mutability.rs"}, {"sha": "0192bdc2d5e3e06d51eb11471d856eeaa318af81", "filename": "src/test/mir-opt/building/receiver_ptr_mutability.main.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Freceiver_ptr_mutability.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Freceiver_ptr_mutability.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Freceiver_ptr_mutability.main.built.after.mir?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `main` 0 mir_map\n+// MIR for `main` after built\n \n | User Type Annotations\n | 0: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*mut Test) }, span: $DIR/receiver-ptr-mutability.rs:14:14: 14:23, inferred_ty: *mut Test", "previous_filename": "src/test/mir-opt/receiver_ptr_mutability.main.mir_map.0.mir"}, {"sha": "0ef97dde6363173c00a65f7b558cd9c39e8b19c0", "filename": "src/test/mir-opt/building/simple-match.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fsimple-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fsimple-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fsimple-match.rs?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,7 +1,7 @@\n // Test that we don't generate unnecessarily large MIR for very simple matches\n \n \n-// EMIT_MIR simple_match.match_bool.mir_map.0.mir\n+// EMIT_MIR simple_match.match_bool.built.after.mir\n fn match_bool(x: bool) -> usize {\n     match x {\n         true => 10,", "previous_filename": "src/test/mir-opt/simple-match.rs"}, {"sha": "5b101cbdee7750e0810310e18cc945ef5d6ba6d5", "filename": "src/test/mir-opt/building/simple_match.match_bool.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fsimple_match.match_bool.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fsimple_match.match_bool.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fsimple_match.match_bool.built.after.mir?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `match_bool` 0 mir_map\n+// MIR for `match_bool` after built\n \n fn match_bool(_1: bool) -> usize {\n     debug x => _1;                       // in scope 0 at $DIR/simple-match.rs:+0:15: +0:16", "previous_filename": "src/test/mir-opt/simple_match.match_bool.mir_map.0.mir"}, {"sha": "1d3f77e079bafef6baf43cd1b410184215adf8e5", "filename": "src/test/mir-opt/building/storage_live_dead_in_statics.XXX.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fstorage_live_dead_in_statics.XXX.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fstorage_live_dead_in_statics.XXX.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fstorage_live_dead_in_statics.XXX.built.after.mir?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `XXX` 0 mir_map\n+// MIR for `XXX` after built\n \n static XXX: &Foo = {\n     let mut _0: &Foo;                    // return place in scope 0 at $DIR/storage_live_dead_in_statics.rs:+0:13: +0:25", "previous_filename": "src/test/mir-opt/storage_live_dead_in_statics.XXX.mir_map.0.mir"}, {"sha": "79f709148e30422fe202f91b603acc9fe52f531a", "filename": "src/test/mir-opt/building/storage_live_dead_in_statics.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fstorage_live_dead_in_statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fstorage_live_dead_in_statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fstorage_live_dead_in_statics.rs?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,7 +1,7 @@\n // Check that when we compile the static `XXX` into MIR, we do not\n // generate `StorageStart` or `StorageEnd` statements.\n \n-// EMIT_MIR storage_live_dead_in_statics.XXX.mir_map.0.mir\n+// EMIT_MIR storage_live_dead_in_statics.XXX.built.after.mir\n static XXX: &'static Foo = &Foo {\n     tup: \"hi\",\n     data: &[", "previous_filename": "src/test/mir-opt/storage_live_dead_in_statics.rs"}, {"sha": "234cd083977398ccac7711c3ae1df185adfc54f1", "filename": "src/test/mir-opt/building/uniform_array_move_out.move_out_by_subslice.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_by_subslice.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_by_subslice.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_by_subslice.built.after.mir?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `move_out_by_subslice` 0 mir_map\n+// MIR for `move_out_by_subslice` after built\n \n fn move_out_by_subslice() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/uniform_array_move_out.rs:+0:27: +0:27", "previous_filename": "src/test/mir-opt/uniform_array_move_out.move_out_by_subslice.mir_map.0.mir"}, {"sha": "24a189498d347d838628d7e10edd6a7f4236617b", "filename": "src/test/mir-opt/building/uniform_array_move_out.move_out_from_end.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_from_end.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_from_end.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_from_end.built.after.mir?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `move_out_from_end` 0 mir_map\n+// MIR for `move_out_from_end` after built\n \n fn move_out_from_end() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/uniform_array_move_out.rs:+0:24: +0:24", "previous_filename": "src/test/mir-opt/uniform_array_move_out.move_out_from_end.mir_map.0.mir"}, {"sha": "e925036ecf69adba60643c23d2dfed451092586e", "filename": "src/test/mir-opt/building/uniform_array_move_out.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.rs?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,12 +1,12 @@\n #![feature(box_syntax)]\n \n-// EMIT_MIR uniform_array_move_out.move_out_from_end.mir_map.0.mir\n+// EMIT_MIR uniform_array_move_out.move_out_from_end.built.after.mir\n fn move_out_from_end() {\n     let a = [box 1, box 2];\n     let [.., _y] = a;\n }\n \n-// EMIT_MIR uniform_array_move_out.move_out_by_subslice.mir_map.0.mir\n+// EMIT_MIR uniform_array_move_out.move_out_by_subslice.built.after.mir\n fn move_out_by_subslice() {\n     let a = [box 1, box 2];\n     let [_y @ ..] = a;", "previous_filename": "src/test/mir-opt/uniform_array_move_out.rs"}, {"sha": "e4261cfe504470dd4d8662f91db7b21f4b0a0a2e", "filename": "src/test/mir-opt/const-promotion-extern-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static.rs?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -12,7 +12,7 @@ static mut BAR: *const &i32 = [&Y].as_ptr();\n // EMIT_MIR const_promotion_extern_static.FOO-promoted[0].SimplifyCfg-elaborate-drops.after.mir\n static mut FOO: *const &i32 = [unsafe { &X }].as_ptr();\n \n-// EMIT_MIR const_promotion_extern_static.BOP.mir_map.0.mir\n+// EMIT_MIR const_promotion_extern_static.BOP.built.after.mir\n static BOP: &i32 = &13;\n \n fn main() {}"}, {"sha": "5bda86bbd4f5051cdcd95d994b476c7b83755b09", "filename": "src/test/mir-opt/const_promotion_extern_static.BOP.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BOP.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BOP.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BOP.built.after.mir?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `BOP` 0 mir_map\n+// MIR for `BOP` after built\n \n static BOP: &i32 = {\n     let mut _0: &i32;                    // return place in scope 0 at $DIR/const-promotion-extern-static.rs:+0:13: +0:17", "previous_filename": "src/test/mir-opt/const_promotion_extern_static.BOP.mir_map.0.mir"}, {"sha": "8d1da7f1b9651c5224281abf544534966c29f886", "filename": "src/test/mir-opt/graphviz.main.built.after.dot", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fgraphviz.main.built.after.dot", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fgraphviz.main.built.after.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgraphviz.main.built.after.dot?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "previous_filename": "src/test/mir-opt/graphviz.main.mir_map.0.dot"}, {"sha": "6906b86c2a5f429abe98edc015d14a9095328d85", "filename": "src/test/mir-opt/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgraphviz.rs?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,5 +1,5 @@\n // Test graphviz output\n // compile-flags: -Z dump-mir-graphviz\n \n-// EMIT_MIR graphviz.main.mir_map.0.dot\n+// EMIT_MIR graphviz.main.built.after.dot\n fn main() {}"}, {"sha": "8ae2599ec73f8fc025fddb85d0f1237d11273be3", "filename": "src/test/mir-opt/issue-72181-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fissue-72181-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fissue-72181-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181-1.rs?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -6,12 +6,12 @@\n \n enum Void {}\n \n-// EMIT_MIR issue_72181_1.f.mir_map.0.mir\n+// EMIT_MIR issue_72181_1.f.built.after.mir\n fn f(v: Void) -> ! {\n     match v {}\n }\n \n-// EMIT_MIR issue_72181_1.main.mir_map.0.mir\n+// EMIT_MIR issue_72181_1.main.built.after.mir\n fn main() {\n     let v: Void = unsafe {\n         std::mem::transmute::<(), Void>(())"}, {"sha": "6a32d4bbee2f7355a9171c35ae0c2eec69bceb13", "filename": "src/test/mir-opt/issue-72181.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fissue-72181.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fissue-72181.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181.rs?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -12,14 +12,14 @@ union Foo {\n }\n \n \n-// EMIT_MIR issue_72181.foo.mir_map.0.mir\n+// EMIT_MIR issue_72181.foo.built.after.mir\n fn foo(xs: [(Never, u32); 1]) -> u32 { xs[0].1 }\n \n-// EMIT_MIR issue_72181.bar.mir_map.0.mir\n+// EMIT_MIR issue_72181.bar.built.after.mir\n fn bar([(_, x)]: [(Never, u32); 1]) -> u32 { x }\n \n \n-// EMIT_MIR issue_72181.main.mir_map.0.mir\n+// EMIT_MIR issue_72181.main.built.after.mir\n fn main() {\n     let _ = mem::size_of::<Foo>();\n "}, {"sha": "9127cacc97c5debd487278d63530591e0d0b29c9", "filename": "src/test/mir-opt/issue-91633.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fissue-91633.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fissue-91633.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-91633.rs?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,28 +1,28 @@\n // compile-flags: -Z mir-opt-level=0\n-// EMIT_MIR issue_91633.hey.mir_map.0.mir\n+// EMIT_MIR issue_91633.hey.built.after.mir\n fn hey<T> (it: &[T])\n  where\n      [T] : std::ops::Index<usize>,\n  {\n      let _ = &it[0];\n  }\n \n-// EMIT_MIR issue_91633.bar.mir_map.0.mir\n+// EMIT_MIR issue_91633.bar.built.after.mir\n fn bar<T> (it: Box<[T]>)\n  where\n      [T] : std::ops::Index<usize>,\n  {\n      let _ = it[0];\n  }\n \n-// EMIT_MIR issue_91633.fun.mir_map.0.mir\n+// EMIT_MIR issue_91633.fun.built.after.mir\n fn fun<T> (it: &[T]) -> &T\n  {\n      let f = &it[0];\n      f\n  }\n \n-// EMIT_MIR issue_91633.foo.mir_map.0.mir\n+// EMIT_MIR issue_91633.foo.built.after.mir\n fn foo<T: Clone> (it: Box<[T]>) -> T\n  {\n      let f = it[0].clone();"}, {"sha": "fe819cddb2c34b6e7997454c58997432fa438cea", "filename": "src/test/mir-opt/issue-99325.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fissue-99325.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fissue-99325.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-99325.rs?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -5,7 +5,7 @@ pub fn function_with_bytes<const BYTES: &'static [u8; 4]>() -> &'static [u8] {\n     BYTES\n }\n \n-// EMIT_MIR issue_99325.main.mir_map.0.mir\n+// EMIT_MIR issue_99325.main.built.after.mir\n pub fn main() {\n     assert_eq!(function_with_bytes::<b\"AAAA\">(), &[0x41, 0x41, 0x41, 0x41]);\n     assert_eq!(function_with_bytes::<{ &[0x41, 0x41, 0x41, 0x41] }>(), b\"AAAA\");"}, {"sha": "aa9c9986aac19e1207d2c109d90521f245d38e9b", "filename": "src/test/mir-opt/issue_72181.bar.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.built.after.mir?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `bar` 0 mir_map\n+// MIR for `bar` after built\n \n fn bar(_1: [(Never, u32); 1]) -> u32 {\n     let mut _0: u32;                     // return place in scope 0 at $DIR/issue-72181.rs:+0:40: +0:43", "previous_filename": "src/test/mir-opt/issue_72181.bar.mir_map.0.mir"}, {"sha": "1d771ad3656d2e28f44f425238c24eb76830b864", "filename": "src/test/mir-opt/issue_72181.foo.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.built.after.mir?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `foo` 0 mir_map\n+// MIR for `foo` after built\n \n fn foo(_1: [(Never, u32); 1]) -> u32 {\n     debug xs => _1;                      // in scope 0 at $DIR/issue-72181.rs:+0:8: +0:10", "previous_filename": "src/test/mir-opt/issue_72181.foo.mir_map.0.mir"}, {"sha": "afa09b16fe9642c25583e2ba42c892e87940cef3", "filename": "src/test/mir-opt/issue_72181.main.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fissue_72181.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fissue_72181.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.main.built.after.mir?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `main` 0 mir_map\n+// MIR for `main` after built\n \n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/issue-72181.rs:+0:11: +0:11", "previous_filename": "src/test/mir-opt/issue_72181.main.mir_map.0.mir"}, {"sha": "31e997f9b33d9ab7a50990bc2613a85b8defceb6", "filename": "src/test/mir-opt/issue_72181_1.f.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fissue_72181_1.f.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fissue_72181_1.f.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181_1.f.built.after.mir?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `f` 0 mir_map\n+// MIR for `f` after built\n \n fn f(_1: Void) -> ! {\n     debug v => _1;                       // in scope 0 at $DIR/issue-72181-1.rs:+0:6: +0:7", "previous_filename": "src/test/mir-opt/issue_72181_1.f.mir_map.0.mir"}, {"sha": "65177a81b03b45da8e1e056ae1359bb83b6a7393", "filename": "src/test/mir-opt/issue_72181_1.main.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.built.after.mir?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `main` 0 mir_map\n+// MIR for `main` after built\n \n | User Type Annotations\n | 0: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(Void) }, span: $DIR/issue-72181-1.rs:16:12: 16:16, inferred_ty: Void", "previous_filename": "src/test/mir-opt/issue_72181_1.main.mir_map.0.mir"}, {"sha": "19b1b6fe12b8b4e15194f5002023be092030265a", "filename": "src/test/mir-opt/issue_91633.bar.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fissue_91633.bar.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fissue_91633.bar.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_91633.bar.built.after.mir?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `bar` 0 mir_map\n+// MIR for `bar` after built\n \n fn bar(_1: Box<[T]>) -> () {\n     debug it => _1;                      // in scope 0 at $DIR/issue-91633.rs:+0:12: +0:14", "previous_filename": "src/test/mir-opt/issue_91633.bar.mir_map.0.mir"}, {"sha": "1a6eee93d36892aa885bbf34672ddb535ad4b6aa", "filename": "src/test/mir-opt/issue_91633.foo.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fissue_91633.foo.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fissue_91633.foo.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_91633.foo.built.after.mir?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `foo` 0 mir_map\n+// MIR for `foo` after built\n \n fn foo(_1: Box<[T]>) -> T {\n     debug it => _1;                      // in scope 0 at $DIR/issue-91633.rs:+0:19: +0:21", "previous_filename": "src/test/mir-opt/issue_91633.foo.mir_map.0.mir"}, {"sha": "b3eea600330119604b96b020d23024b0d285a4a0", "filename": "src/test/mir-opt/issue_91633.fun.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fissue_91633.fun.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fissue_91633.fun.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_91633.fun.built.after.mir?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `fun` 0 mir_map\n+// MIR for `fun` after built\n \n fn fun(_1: &[T]) -> &T {\n     debug it => _1;                      // in scope 0 at $DIR/issue-91633.rs:+0:12: +0:14", "previous_filename": "src/test/mir-opt/issue_91633.fun.mir_map.0.mir"}, {"sha": "e7e31ad33c1be871fcae9d5a4d8cf546189e2db8", "filename": "src/test/mir-opt/issue_91633.hey.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fissue_91633.hey.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fissue_91633.hey.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_91633.hey.built.after.mir?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `hey` 0 mir_map\n+// MIR for `hey` after built\n \n fn hey(_1: &[T]) -> () {\n     debug it => _1;                      // in scope 0 at $DIR/issue-91633.rs:+0:12: +0:14", "previous_filename": "src/test/mir-opt/issue_91633.hey.mir_map.0.mir"}, {"sha": "f588f06b7e4a39caaf2feca8190d5884ccf81cb5", "filename": "src/test/mir-opt/issue_99325.main.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fissue_99325.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fissue_99325.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_99325.main.built.after.mir?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `main` 0 mir_map\n+// MIR for `main` after built\n \n | User Type Annotations\n | 0: user_ty: Canonical { max_universe: U0, variables: [], value: TypeOf(DefId(0:3 ~ issue_99325[8f58]::function_with_bytes), UserSubsts { substs: [Const { ty: &'static [u8; 4], kind: Value(Branch([Leaf(0x41), Leaf(0x41), Leaf(0x41), Leaf(0x41)])) }], user_self_ty: None }) }, span: $DIR/issue-99325.rs:10:16: 10:46, inferred_ty: fn() -> &'static [u8] {function_with_bytes::<&*b\"AAAA\">}", "previous_filename": "src/test/mir-opt/issue_99325.main.mir_map.0.mir"}, {"sha": "0ecf35ad6a2e86b71b41c99cd45447c761a1749e", "filename": "src/test/mir-opt/spanview-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fspanview-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fspanview-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fspanview-block.rs?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,5 +1,5 @@\n // Test spanview block output\n // compile-flags: -Z dump-mir-spanview=block\n \n-// EMIT_MIR spanview_block.main.mir_map.0.html\n+// EMIT_MIR spanview_block.main.built.after.html\n fn main() {}"}, {"sha": "457052617b788a8e5c2e3a88ef84d9e3ef09fbd3", "filename": "src/test/mir-opt/spanview-statement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fspanview-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fspanview-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fspanview-statement.rs?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,5 +1,5 @@\n // Test spanview output (the default value for `-Z dump-mir-spanview` is \"statement\")\n // compile-flags: -Z dump-mir-spanview\n \n-// EMIT_MIR spanview_statement.main.mir_map.0.html\n+// EMIT_MIR spanview_statement.main.built.after.html\n fn main() {}"}, {"sha": "76fced188f1db71d72ed2ae73b4eb366df1eeb9a", "filename": "src/test/mir-opt/spanview-terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fspanview-terminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fspanview-terminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fspanview-terminator.rs?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,5 +1,5 @@\n // Test spanview terminator output\n // compile-flags: -Z dump-mir-spanview=terminator\n \n-// EMIT_MIR spanview_terminator.main.mir_map.0.html\n+// EMIT_MIR spanview_terminator.main.built.after.html\n fn main() {}"}, {"sha": "fbf751d6d30b49bd1e29a98d7e862d2ed1f93678", "filename": "src/test/mir-opt/spanview_block.main.built.after.html", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fspanview_block.main.built.after.html", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fspanview_block.main.built.after.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fspanview_block.main.built.after.html?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,7 +1,7 @@\n <!DOCTYPE html>\n <html>\n <head>\n-<title>spanview_block.main.mir_map.0</title>\n+<title>spanview_block.main.built.after</title>\n <style>\n     .line {\n         counter-increment: line;", "previous_filename": "src/test/mir-opt/spanview_block.main.mir_map.0.html"}, {"sha": "02b2720feefc9b93136c5d8765f082111f3499de", "filename": "src/test/mir-opt/spanview_statement.main.built.after.html", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fspanview_statement.main.built.after.html", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fspanview_statement.main.built.after.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fspanview_statement.main.built.after.html?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,7 +1,7 @@\n <!DOCTYPE html>\n <html>\n <head>\n-<title>spanview_statement.main.mir_map.0</title>\n+<title>spanview_statement.main.built.after</title>\n <style>\n     .line {\n         counter-increment: line;", "previous_filename": "src/test/mir-opt/spanview_statement.main.mir_map.0.html"}, {"sha": "a4cda7dd67ec62fc1341f1258fd7b79c6549b92c", "filename": "src/test/mir-opt/spanview_terminator.main.built.after.html", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fspanview_terminator.main.built.after.html", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Fspanview_terminator.main.built.after.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fspanview_terminator.main.built.after.html?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,7 +1,7 @@\n <!DOCTYPE html>\n <html>\n <head>\n-<title>spanview_terminator.main.mir_map.0</title>\n+<title>spanview_terminator.main.built.after</title>\n <style>\n     .line {\n         counter-increment: line;", "previous_filename": "src/test/mir-opt/spanview_terminator.main.mir_map.0.html"}, {"sha": "6dad636416f228826ad35746c125fe047e06ac99", "filename": "src/test/mir-opt/unusual-item-types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -5,19 +5,19 @@\n \n struct A;\n \n-// EMIT_MIR unusual_item_types.{impl#0}-ASSOCIATED_CONSTANT.mir_map.0.mir\n+// EMIT_MIR unusual_item_types.{impl#0}-ASSOCIATED_CONSTANT.built.after.mir\n impl A {\n     const ASSOCIATED_CONSTANT: i32 = 2;\n }\n \n // See #59021\n-// EMIT_MIR unusual_item_types.Test-X-{constructor#0}.mir_map.0.mir\n+// EMIT_MIR unusual_item_types.Test-X-{constructor#0}.built.after.mir\n enum Test {\n     X(usize),\n     Y { a: usize },\n }\n \n-// EMIT_MIR unusual_item_types.E-V-{constant#0}.mir_map.0.mir\n+// EMIT_MIR unusual_item_types.E-V-{constant#0}.built.after.mir\n enum E {\n     V = 5,\n }"}, {"sha": "c8b0f8e41b77cb89fed8e2edf88f0211df0375f2", "filename": "src/test/mir-opt/unusual_item_types.E-V-{constant#0}.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.built.after.mir?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `E::V::{constant#0}` 0 mir_map\n+// MIR for `E::V::{constant#0}` after built\n \n E::V::{constant#0}: isize = {\n     let mut _0: isize;                   // return place in scope 0 at $DIR/unusual-item-types.rs:+0:9: +0:10", "previous_filename": "src/test/mir-opt/unusual_item_types.E-V-{constant#0}.mir_map.0.mir"}, {"sha": "a46e60173774e6ee1624c3cb48fc84cbc6c1582e", "filename": "src/test/mir-opt/unusual_item_types.Test-X-{constructor#0}.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.built.after.mir?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `Test::X` 0 mir_map\n+// MIR for `Test::X` after built\n \n fn Test::X(_1: usize) -> Test {\n     let mut _0: Test;                    // return place in scope 0 at $DIR/unusual-item-types.rs:+0:5: +0:6", "previous_filename": "src/test/mir-opt/unusual_item_types.Test-X-{constructor#0}.mir_map.0.mir"}, {"sha": "7cb9050bc4bc6bbda74e07dcfa6e3000daeda95f", "filename": "src/test/mir-opt/unusual_item_types.{impl#0}-ASSOCIATED_CONSTANT.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7e62406e013ddc363b15707d5434d5e45f1163a5/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.built.after.mir?ref=7e62406e013ddc363b15707d5434d5e45f1163a5", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `<impl at $DIR/unusual-item-types.rs:9:1: 9:7>::ASSOCIATED_CONSTANT` 0 mir_map\n+// MIR for `<impl at $DIR/unusual-item-types.rs:9:1: 9:7>::ASSOCIATED_CONSTANT` after built\n \n const <impl at $DIR/unusual-item-types.rs:9:1: 9:7>::ASSOCIATED_CONSTANT: i32 = {\n     let mut _0: i32;                     // return place in scope 0 at $DIR/unusual-item-types.rs:+0:32: +0:35", "previous_filename": "src/test/mir-opt/unusual_item_types.{impl#0}-ASSOCIATED_CONSTANT.mir_map.0.mir"}]}