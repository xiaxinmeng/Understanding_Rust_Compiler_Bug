{"sha": "6b1ff19af36f7bbf1974579ec1b9bf2c8ccd595e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMWZmMTlhZjM2ZjdiYmYxOTc0NTc5ZWMxYjliZjJjOGNjZDU5NWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-18T02:50:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-18T02:50:39Z"}, "message": "Auto merge of #53437 - alexcrichton:fix-target-features, r=michaelwoerister\n\nSet more llvm function attributes for __rust_try\n\nThis shim is generated elsewhere in the compiler so this commit adds support to\nensure it goes through similar paths as the rest of the compiler to set llvm\nfunction attributes like target features.\n\ncc #53372", "tree": {"sha": "90f9b6c020f0684dbf0dd6c4856ae23ae1f4d887", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90f9b6c020f0684dbf0dd6c4856ae23ae1f4d887"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b1ff19af36f7bbf1974579ec1b9bf2c8ccd595e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b1ff19af36f7bbf1974579ec1b9bf2c8ccd595e", "html_url": "https://github.com/rust-lang/rust/commit/6b1ff19af36f7bbf1974579ec1b9bf2c8ccd595e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b1ff19af36f7bbf1974579ec1b9bf2c8ccd595e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d5ef325e060743cba2ef587912f40b8b3b87cc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d5ef325e060743cba2ef587912f40b8b3b87cc4", "html_url": "https://github.com/rust-lang/rust/commit/4d5ef325e060743cba2ef587912f40b8b3b87cc4"}, {"sha": "31884427eb6677703b370426617926e8ae0123d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/31884427eb6677703b370426617926e8ae0123d0", "html_url": "https://github.com/rust-lang/rust/commit/31884427eb6677703b370426617926e8ae0123d0"}], "stats": {"total": 79, "additions": 44, "deletions": 35}, "files": [{"sha": "2b64642b766ab9d8a5d85580e0844081d8b089c8", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 40, "deletions": 12, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/6b1ff19af36f7bbf1974579ec1b9bf2c8ccd595e/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1ff19af36f7bbf1974579ec1b9bf2c8ccd595e/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=6b1ff19af36f7bbf1974579ec1b9bf2c8ccd595e", "patch": "@@ -11,7 +11,7 @@\n \n use std::ffi::CString;\n \n-use rustc::hir::CodegenFnAttrFlags;\n+use rustc::hir::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::session::Session;\n use rustc::session::config::Sanitizer;\n@@ -134,11 +134,37 @@ pub fn apply_target_cpu_attr(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n \n /// Composite function which sets LLVM attributes for function depending on its AST (#[attribute])\n /// attributes.\n-pub fn from_fn_attrs(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value, id: DefId) {\n-    let codegen_fn_attrs = cx.tcx.codegen_fn_attrs(id);\n+pub fn from_fn_attrs(\n+    cx: &CodegenCx<'ll, '_>,\n+    llfn: &'ll Value,\n+    id: Option<DefId>,\n+) {\n+    let codegen_fn_attrs = id.map(|id| cx.tcx.codegen_fn_attrs(id))\n+        .unwrap_or(CodegenFnAttrs::new());\n \n     inline(llfn, codegen_fn_attrs.inline);\n \n+    // The `uwtable` attribute according to LLVM is:\n+    //\n+    //     This attribute indicates that the ABI being targeted requires that an\n+    //     unwind table entry be produced for this function even if we can show\n+    //     that no exceptions passes by it. This is normally the case for the\n+    //     ELF x86-64 abi, but it can be disabled for some compilation units.\n+    //\n+    // Typically when we're compiling with `-C panic=abort` (which implies this\n+    // `no_landing_pads` check) we don't need `uwtable` because we can't\n+    // generate any exceptions! On Windows, however, exceptions include other\n+    // events such as illegal instructions, segfaults, etc. This means that on\n+    // Windows we end up still needing the `uwtable` attribute even if the `-C\n+    // panic=abort` flag is passed.\n+    //\n+    // You can also find more info on why Windows is whitelisted here in:\n+    //      https://bugzilla.mozilla.org/show_bug.cgi?id=1302078\n+    if !cx.sess().no_landing_pads() ||\n+       cx.sess().target.target.options.requires_uwtable {\n+        attributes::emit_uwtable(llfn, true);\n+    }\n+\n     set_frame_pointer_elimination(cx, llfn);\n     set_probestack(cx, llfn);\n \n@@ -162,7 +188,7 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value, id: DefId) {\n     // *in Rust code* may unwind. Foreign items like `extern \"C\" {\n     // fn foo(); }` are assumed not to unwind **unless** they have\n     // a `#[unwind]` attribute.\n-    } else if !cx.tcx.is_foreign_item(id) {\n+    } else if id.map(|id| !cx.tcx.is_foreign_item(id)).unwrap_or(false) {\n         Some(true)\n     } else {\n         None\n@@ -208,14 +234,16 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value, id: DefId) {\n     // Note that currently the `wasm-import-module` doesn't do anything, but\n     // eventually LLVM 7 should read this and ferry the appropriate import\n     // module to the output file.\n-    if cx.tcx.sess.target.target.arch == \"wasm32\" {\n-        if let Some(module) = wasm_import_module(cx.tcx, id) {\n-            llvm::AddFunctionAttrStringValue(\n-                llfn,\n-                llvm::AttributePlace::Function,\n-                const_cstr!(\"wasm-import-module\"),\n-                &module,\n-            );\n+    if let Some(id) = id {\n+        if cx.tcx.sess.target.target.arch == \"wasm32\" {\n+            if let Some(module) = wasm_import_module(cx.tcx, id) {\n+                llvm::AddFunctionAttrStringValue(\n+                    llfn,\n+                    llvm::AttributePlace::Function,\n+                    const_cstr!(\"wasm-import-module\"),\n+                    &module,\n+                );\n+            }\n         }\n     }\n }"}, {"sha": "bd0c62e4766aed81588e0a0cdef2a048e7cbb337", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6b1ff19af36f7bbf1974579ec1b9bf2c8ccd595e/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1ff19af36f7bbf1974579ec1b9bf2c8ccd595e/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=6b1ff19af36f7bbf1974579ec1b9bf2c8ccd595e", "patch": "@@ -503,27 +503,6 @@ pub fn codegen_instance<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, instance: Instance<'\n \n     cx.stats.borrow_mut().n_closures += 1;\n \n-    // The `uwtable` attribute according to LLVM is:\n-    //\n-    //     This attribute indicates that the ABI being targeted requires that an\n-    //     unwind table entry be produced for this function even if we can show\n-    //     that no exceptions passes by it. This is normally the case for the\n-    //     ELF x86-64 abi, but it can be disabled for some compilation units.\n-    //\n-    // Typically when we're compiling with `-C panic=abort` (which implies this\n-    // `no_landing_pads` check) we don't need `uwtable` because we can't\n-    // generate any exceptions! On Windows, however, exceptions include other\n-    // events such as illegal instructions, segfaults, etc. This means that on\n-    // Windows we end up still needing the `uwtable` attribute even if the `-C\n-    // panic=abort` flag is passed.\n-    //\n-    // You can also find more info on why Windows is whitelisted here in:\n-    //      https://bugzilla.mozilla.org/show_bug.cgi?id=1302078\n-    if !cx.sess().no_landing_pads() ||\n-       cx.sess().target.target.options.requires_uwtable {\n-        attributes::emit_uwtable(lldecl, true);\n-    }\n-\n     let mir = cx.tcx.instance_mir(instance.def);\n     mir::codegen_mir(cx, lldecl, &mir, instance, sig);\n }"}, {"sha": "2e90f95fa8e2d88b7032f05b05ebe4b85eaa8f50", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b1ff19af36f7bbf1974579ec1b9bf2c8ccd595e/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1ff19af36f7bbf1974579ec1b9bf2c8ccd595e/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=6b1ff19af36f7bbf1974579ec1b9bf2c8ccd595e", "patch": "@@ -98,7 +98,7 @@ pub fn get_fn(\n         if instance.def.is_inline(tcx) {\n             attributes::inline(llfn, attributes::InlineAttr::Hint);\n         }\n-        attributes::from_fn_attrs(cx, llfn, instance.def.def_id());\n+        attributes::from_fn_attrs(cx, llfn, Some(instance.def.def_id()));\n \n         let instance_def_id = instance.def_id();\n "}, {"sha": "099d8562aa536ce025c4eef696e11fe99ff85a86", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b1ff19af36f7bbf1974579ec1b9bf2c8ccd595e/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1ff19af36f7bbf1974579ec1b9bf2c8ccd595e/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=6b1ff19af36f7bbf1974579ec1b9bf2c8ccd595e", "patch": "@@ -10,6 +10,7 @@\n \n #![allow(non_upper_case_globals)]\n \n+use attributes;\n use intrinsics::{self, Intrinsic};\n use llvm::{self, TypeKind};\n use abi::{Abi, FnType, LlvmType, PassMode};\n@@ -944,6 +945,7 @@ fn gen_fn<'ll, 'tcx>(\n         Abi::Rust\n     )));\n     let llfn = declare::define_internal_fn(cx, name, rust_fn_ty);\n+    attributes::from_fn_attrs(cx, llfn, None);\n     let bx = Builder::new_block(cx, llfn, \"entry-block\");\n     codegen(bx);\n     llfn"}, {"sha": "7f25911abec35a11813c73bf9401104f1435bad3", "filename": "src/librustc_codegen_llvm/mono_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b1ff19af36f7bbf1974579ec1b9bf2c8ccd595e/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1ff19af36f7bbf1974579ec1b9bf2c8ccd595e/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmono_item.rs?ref=6b1ff19af36f7bbf1974579ec1b9bf2c8ccd595e", "patch": "@@ -182,7 +182,7 @@ fn predefine_fn<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n     if instance.def.is_inline(cx.tcx) {\n         attributes::inline(lldecl, attributes::InlineAttr::Hint);\n     }\n-    attributes::from_fn_attrs(cx, lldecl, instance.def.def_id());\n+    attributes::from_fn_attrs(cx, lldecl, Some(instance.def.def_id()));\n \n     cx.instances.borrow_mut().insert(instance, lldecl);\n }"}]}