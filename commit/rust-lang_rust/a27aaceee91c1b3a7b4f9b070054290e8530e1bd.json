{"sha": "a27aaceee91c1b3a7b4f9b070054290e8530e1bd", "node_id": "C_kwDOAAsO6NoAKGEyN2FhY2VlZTkxYzFiM2E3YjRmOWIwNzAwNTQyOTBlODUzMGUxYmQ", "commit": {"author": {"name": "Raoul Strackx", "email": "raoul.strackx@fortanix.com", "date": "2022-03-22T16:34:44Z"}, "committer": {"name": "Raoul Strackx", "email": "raoul.strackx@fortanix.com", "date": "2022-06-15T13:01:42Z"}, "message": "Test `copy_to_userspace` function", "tree": {"sha": "ca74c754020041f328712f2df9240e377e46af71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca74c754020041f328712f2df9240e377e46af71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a27aaceee91c1b3a7b4f9b070054290e8530e1bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a27aaceee91c1b3a7b4f9b070054290e8530e1bd", "html_url": "https://github.com/rust-lang/rust/commit/a27aaceee91c1b3a7b4f9b070054290e8530e1bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a27aaceee91c1b3a7b4f9b070054290e8530e1bd/comments", "author": {"login": "raoulstrackx", "id": 56830709, "node_id": "MDQ6VXNlcjU2ODMwNzA5", "avatar_url": "https://avatars.githubusercontent.com/u/56830709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raoulstrackx", "html_url": "https://github.com/raoulstrackx", "followers_url": "https://api.github.com/users/raoulstrackx/followers", "following_url": "https://api.github.com/users/raoulstrackx/following{/other_user}", "gists_url": "https://api.github.com/users/raoulstrackx/gists{/gist_id}", "starred_url": "https://api.github.com/users/raoulstrackx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raoulstrackx/subscriptions", "organizations_url": "https://api.github.com/users/raoulstrackx/orgs", "repos_url": "https://api.github.com/users/raoulstrackx/repos", "events_url": "https://api.github.com/users/raoulstrackx/events{/privacy}", "received_events_url": "https://api.github.com/users/raoulstrackx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "raoulstrackx", "id": 56830709, "node_id": "MDQ6VXNlcjU2ODMwNzA5", "avatar_url": "https://avatars.githubusercontent.com/u/56830709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raoulstrackx", "html_url": "https://github.com/raoulstrackx", "followers_url": "https://api.github.com/users/raoulstrackx/followers", "following_url": "https://api.github.com/users/raoulstrackx/following{/other_user}", "gists_url": "https://api.github.com/users/raoulstrackx/gists{/gist_id}", "starred_url": "https://api.github.com/users/raoulstrackx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raoulstrackx/subscriptions", "organizations_url": "https://api.github.com/users/raoulstrackx/orgs", "repos_url": "https://api.github.com/users/raoulstrackx/repos", "events_url": "https://api.github.com/users/raoulstrackx/events{/privacy}", "received_events_url": "https://api.github.com/users/raoulstrackx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f7d1937e20edf00ea2b5d7c2c8ce2dab2830452", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f7d1937e20edf00ea2b5d7c2c8ce2dab2830452", "html_url": "https://github.com/rust-lang/rust/commit/6f7d1937e20edf00ea2b5d7c2c8ce2dab2830452"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "4ac27e85f8ba8e51dc40ea1f8e37bac814127ddd", "filename": "library/std/src/sys/sgx/abi/usercalls/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a27aaceee91c1b3a7b4f9b070054290e8530e1bd/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a27aaceee91c1b3a7b4f9b070054290e8530e1bd/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs?ref=a27aaceee91c1b3a7b4f9b070054290e8530e1bd", "patch": "@@ -317,7 +317,7 @@ where\n /// * The `dst` pointer is null\n /// * The `src` memory range is not in enclave memory\n /// * The `dst` memory range is not in user memory\n-unsafe fn copy_to_userspace(src: *const u8, dst: *mut u8, len: usize) {\n+pub(crate) unsafe fn copy_to_userspace(src: *const u8, dst: *mut u8, len: usize) {\n     unsafe fn copy_bytewise_to_userspace(src: *const u8, dst: *mut u8, len: usize) {\n         unsafe {\n             let seg_sel: u16 = 0;"}, {"sha": "79d1db5e1c50db01029ae14b2461cbe927843594", "filename": "library/std/src/sys/sgx/abi/usercalls/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a27aaceee91c1b3a7b4f9b070054290e8530e1bd/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a27aaceee91c1b3a7b4f9b070054290e8530e1bd/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs?ref=a27aaceee91c1b3a7b4f9b070054290e8530e1bd", "patch": "@@ -6,6 +6,8 @@ use crate::time::{Duration, Instant};\n pub(crate) mod alloc;\n #[macro_use]\n pub(crate) mod raw;\n+#[cfg(test)]\n+mod tests;\n \n use self::raw::*;\n "}, {"sha": "cbf7d7d54f7a2f0dd475261a1a7dad74c84a4df4", "filename": "library/std/src/sys/sgx/abi/usercalls/tests.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a27aaceee91c1b3a7b4f9b070054290e8530e1bd/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a27aaceee91c1b3a7b4f9b070054290e8530e1bd/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Ftests.rs?ref=a27aaceee91c1b3a7b4f9b070054290e8530e1bd", "patch": "@@ -0,0 +1,30 @@\n+use super::alloc::copy_to_userspace;\n+use super::alloc::User;\n+\n+#[test]\n+fn test_copy_function() {\n+    let mut src = [0u8; 100];\n+    let mut dst = User::<[u8]>::uninitialized(100);\n+\n+    for i in 0..src.len() {\n+        src[i] = i as _;\n+    }\n+\n+    for size in 0..48 {\n+        // For all possible alignment\n+        for offset in 0..8 {\n+            // overwrite complete dst\n+            dst.copy_from_enclave(&[0u8; 100]);\n+\n+            // Copy src[0..size] to dst + offset\n+            unsafe { copy_to_userspace(src.as_ptr(), dst.as_mut_ptr().offset(offset), size) };\n+\n+            // Verify copy\n+            for byte in 0..size {\n+                unsafe {\n+                    assert_eq!(*dst.as_ptr().offset(offset + byte as isize), src[byte as usize]);\n+                }\n+            }\n+        }\n+    }\n+}"}]}