{"sha": "88cd36714c6d62393f18d8efa2ea2724e1ec4a9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4Y2QzNjcxNGM2ZDYyMzkzZjE4ZDhlZmEyZWEyNzI0ZTFlYzRhOWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-26T11:07:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-26T11:07:14Z"}, "message": "Auto merge of #50245 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #50177 (mark std::str::replace(,n) as #[must_use])\n - #50207 (Hash EntryKind::AssociatedConst const data)\n - #50214 (Js improvements)\n - #50219 (Added missing `.` in docs.)\n\nFailed merges:\n\n - #50229 (Add setting to go to item if there is only one result)", "tree": {"sha": "5586d3e94e8d9f5d7c8ceee076b7d2bad179503a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5586d3e94e8d9f5d7c8ceee076b7d2bad179503a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88cd36714c6d62393f18d8efa2ea2724e1ec4a9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88cd36714c6d62393f18d8efa2ea2724e1ec4a9d", "html_url": "https://github.com/rust-lang/rust/commit/88cd36714c6d62393f18d8efa2ea2724e1ec4a9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88cd36714c6d62393f18d8efa2ea2724e1ec4a9d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3eca70a0c55e9f081ebff9a7af6fa25390d99b4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3eca70a0c55e9f081ebff9a7af6fa25390d99b4c", "html_url": "https://github.com/rust-lang/rust/commit/3eca70a0c55e9f081ebff9a7af6fa25390d99b4c"}, {"sha": "438f3ca01c325fcf5e2f0080c8a78b6b4a3f9095", "url": "https://api.github.com/repos/rust-lang/rust/commits/438f3ca01c325fcf5e2f0080c8a78b6b4a3f9095", "html_url": "https://github.com/rust-lang/rust/commit/438f3ca01c325fcf5e2f0080c8a78b6b4a3f9095"}], "stats": {"total": 64, "additions": 30, "deletions": 34}, "files": [{"sha": "e52a0216dd329fecc07496b0210740027d8db93f", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88cd36714c6d62393f18d8efa2ea2724e1ec4a9d/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88cd36714c6d62393f18d8efa2ea2724e1ec4a9d/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=88cd36714c6d62393f18d8efa2ea2724e1ec4a9d", "patch": "@@ -60,7 +60,7 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n /// ## Thread Safety\n ///\n /// Unlike [`Rc<T>`], `Arc<T>` uses atomic operations for its reference\n-/// counting  This means that it is thread-safe. The disadvantage is that\n+/// counting. This means that it is thread-safe. The disadvantage is that\n /// atomic operations are more expensive than ordinary memory accesses. If you\n /// are not sharing reference-counted values between threads, consider using\n /// [`Rc<T>`] for lower overhead. [`Rc<T>`] is a safe default, because the"}, {"sha": "021395d0c824a0c88f19d45157a24b17f776644a", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88cd36714c6d62393f18d8efa2ea2724e1ec4a9d/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88cd36714c6d62393f18d8efa2ea2724e1ec4a9d/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=88cd36714c6d62393f18d8efa2ea2724e1ec4a9d", "patch": "@@ -96,6 +96,7 @@\n #![feature(dropck_eyepatch)]\n #![feature(exact_size_is_empty)]\n #![feature(fmt_internals)]\n+#![feature(fn_must_use)]\n #![feature(from_ref)]\n #![feature(fundamental)]\n #![feature(lang_items)]"}, {"sha": "0cbe65db53cadadb80c7f09bd0a09e7a84b9e219", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88cd36714c6d62393f18d8efa2ea2724e1ec4a9d/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88cd36714c6d62393f18d8efa2ea2724e1ec4a9d/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=88cd36714c6d62393f18d8efa2ea2724e1ec4a9d", "patch": "@@ -207,6 +207,7 @@ impl str {\n     /// let s = \"this is old\";\n     /// assert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn replace<'a, P: Pattern<'a>>(&'a self, from: P, to: &str) -> String {\n@@ -246,6 +247,7 @@ impl str {\n     /// let s = \"this is old\";\n     /// assert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"str_replacen\", since = \"1.16.0\")]\n     pub fn replacen<'a, P: Pattern<'a>>(&'a self, pat: P, to: &str, count: usize) -> String {\n         // Hope to reduce the times of re-allocation"}, {"sha": "ddeb797f1bef5282564548030048839b7a3ccc39", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88cd36714c6d62393f18d8efa2ea2724e1ec4a9d/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88cd36714c6d62393f18d8efa2ea2724e1ec4a9d/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=88cd36714c6d62393f18d8efa2ea2724e1ec4a9d", "patch": "@@ -373,9 +373,10 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for EntryKind<'gcx> {\n             EntryKind::AssociatedType(associated_container) => {\n                 associated_container.hash_stable(hcx, hasher);\n             }\n-            EntryKind::AssociatedConst(associated_container, qualif, _) => {\n+            EntryKind::AssociatedConst(associated_container, qualif, ref const_data) => {\n                 associated_container.hash_stable(hcx, hasher);\n                 qualif.hash_stable(hcx, hasher);\n+                const_data.hash_stable(hcx, hasher);\n             }\n         }\n     }"}, {"sha": "58a57f43d374580a495876cc7348adc86610fea4", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 24, "deletions": 32, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/88cd36714c6d62393f18d8efa2ea2724e1ec4a9d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/88cd36714c6d62393f18d8efa2ea2724e1ec4a9d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=88cd36714c6d62393f18d8efa2ea2724e1ec4a9d", "patch": "@@ -40,6 +40,8 @@\n                      \"union\",\n                      \"foreigntype\"];\n \n+    var search_input = document.getElementsByClassName('search-input')[0];\n+\n     // On the search screen, so you remain on the last tab you opened.\n     //\n     // 0 for \"In Names\"\n@@ -411,8 +413,8 @@\n         // but only if the input bar is empty. This avoid the obnoxious issue\n         // where you start trying to do a search, and the index loads, and\n         // suddenly your search is gone!\n-        if (document.getElementsByClassName(\"search-input\")[0].value === \"\") {\n-            document.getElementsByClassName(\"search-input\")[0].value = params.search || '';\n+        if (search_input.value === \"\") {\n+            search_input.value = params.search || '';\n         }\n \n         /**\n@@ -1118,7 +1120,6 @@\n                 });\n             });\n \n-            var search_input = document.getElementsByClassName('search-input')[0];\n             search_input.onkeydown = function(e) {\n                 // \"actives\" references the currently highlighted item in each search tab.\n                 // Each array in \"actives\" represents a tab.\n@@ -1169,7 +1170,7 @@\n                     // Does nothing, it's just to avoid losing \"focus\" on the highlighted element.\n                 } else if (e.which === 27) { // escape\n                     removeClass(actives[currentTab][0], 'highlighted');\n-                    document.getElementsByClassName('search-input')[0].value = '';\n+                    search_input.value = '';\n                     defocusSearchBar();\n                 } else if (actives[currentTab].length > 0) {\n                     removeClass(actives[currentTab][0], 'highlighted');\n@@ -1206,7 +1207,6 @@\n                         return;\n                     }\n \n-                    console.log(item);\n                     shown.push(id_ty);\n                     name = item.name;\n                     type = itemTypes[item.ty];\n@@ -1268,7 +1268,7 @@\n         }\n \n         function showResults(results) {\n-            var output, query = getQuery(document.getElementsByClassName('search-input')[0].value);\n+            var output, query = getQuery(search_input.value);\n \n             currentResults = query.id;\n             output = '<h1>Results for ' + escape(query.query) +\n@@ -1375,14 +1375,13 @@\n \n         function search(e) {\n             var params = getQueryStringParams();\n-            var search_input = document.getElementsByClassName('search-input')[0];\n             var query = getQuery(search_input.value.trim());\n \n             if (e) {\n                 e.preventDefault();\n             }\n \n-            if (!query.query || query.id === currentResults) {\n+            if (query.query.length === 0 || query.id === currentResults) {\n                 if (query.query.length > 0) {\n                     putBackSearch(search_input);\n                 }\n@@ -1468,9 +1467,6 @@\n         function startSearch() {\n             var searchTimeout;\n             var callback = function() {\n-                var search_input = document.getElementsByClassName('search-input');\n-                if (search_input.length < 1) { return; }\n-                search_input = search_input[0];\n                 clearTimeout(searchTimeout);\n                 if (search_input.value.length === 0) {\n                     if (browserSupportsHistoryApi()) {\n@@ -1488,7 +1484,6 @@\n                     searchTimeout = setTimeout(search, 500);\n                 }\n             };\n-            var search_input = document.getElementsByClassName(\"search-input\")[0];\n             search_input.onkeyup = callback;\n             search_input.oninput = callback;\n             document.getElementsByClassName(\"search-form\")[0].onsubmit = function(e) {\n@@ -1538,9 +1533,9 @@\n                     // nothing there, which lets you really go back to a\n                     // previous state with nothing in the bar.\n                     if (params.search) {\n-                        document.getElementsByClassName('search-input')[0].value = params.search;\n+                        search_input.value = params.search;\n                     } else {\n-                        document.getElementsByClassName('search-input')[0].value = '';\n+                        search_input.value = '';\n                     }\n                     // Some browsers fire 'onpopstate' for every page load\n                     // (Chrome), while others fire the event only when actually\n@@ -1950,28 +1945,14 @@\n         return wrapper;\n     }\n \n-    onEach(document.getElementById('main').getElementsByClassName('docblock'), function(e) {\n-        if (e.parentNode.id === \"main\") {\n-            var otherMessage;\n-            if (hasClass(e, \"type-decl\")) {\n-                otherMessage = '&nbsp;Show&nbsp;type&nbsp;declaration';\n-            }\n-            e.parentNode.insertBefore(createToggle(otherMessage), e);\n-            if (otherMessage && getCurrentValue('rustdoc-item-declarations') !== \"false\") {\n-                collapseDocs(e.previousSibling.childNodes[0], \"toggle\");\n-            }\n-        }\n-    });\n-\n     onEach(document.getElementsByClassName('docblock'), function(e) {\n         if (hasClass(e, 'autohide')) {\n             var wrap = e.previousElementSibling;\n             if (wrap && hasClass(wrap, 'toggle-wrapper')) {\n                 var toggle = wrap.childNodes[0];\n+                var extra = false;\n                 if (e.childNodes[0].tagName === 'H3') {\n-                    onEach(toggle.getElementsByClassName('toggle-label'), function(i_e) {\n-                        i_e.innerHTML = \" Show \" + e.childNodes[0].innerHTML;\n-                    });\n+                    extra = true;\n                 }\n                 e.style.display = 'none';\n                 addClass(wrap, 'collapsed');\n@@ -1980,9 +1961,22 @@\n                 });\n                 onEach(toggle.getElementsByClassName('toggle-label'), function(e) {\n                     e.style.display = 'inline-block';\n+                    if (extra === true) {\n+                        i_e.innerHTML = \" Show \" + e.childNodes[0].innerHTML;\n+                    }\n                 });\n             }\n         }\n+        if (e.parentNode.id === \"main\") {\n+            var otherMessage;\n+            if (hasClass(e, \"type-decl\")) {\n+                otherMessage = '&nbsp;Show&nbsp;type&nbsp;declaration';\n+            }\n+            e.parentNode.insertBefore(createToggle(otherMessage), e);\n+            if (otherMessage && getCurrentValue('rustdoc-item-declarations') !== \"false\") {\n+                collapseDocs(e.previousSibling.childNodes[0], \"toggle\");\n+            }\n+        }\n     })\n \n     autoCollapseAllImpls(getPageId());\n@@ -2088,8 +2082,6 @@\n         }\n     }\n \n-    var search_input = document.getElementsByClassName(\"search-input\")[0];\n-\n     if (search_input) {\n         search_input.onfocus = function() {\n             putBackSearch(this);"}]}