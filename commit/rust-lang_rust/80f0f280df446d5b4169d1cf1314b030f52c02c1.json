{"sha": "80f0f280df446d5b4169d1cf1314b030f52c02c1", "node_id": "C_kwDOAAsO6NoAKDgwZjBmMjgwZGY0NDZkNWI0MTY5ZDFjZjEzMTRiMDMwZjUyYzAyYzE", "commit": {"author": {"name": "Michael Krasnitski", "email": "michael.krasnitski@gmail.com", "date": "2022-08-04T03:06:12Z"}, "committer": {"name": "Michael Krasnitski", "email": "michael.krasnitski@gmail.com", "date": "2022-08-04T03:18:59Z"}, "message": "Extend `if_then_some_else_none` to also suggest `bool::then_some`", "tree": {"sha": "6a03faf79aa74e4d62dc19773d5f163b5de8d261", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a03faf79aa74e4d62dc19773d5f163b5de8d261"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80f0f280df446d5b4169d1cf1314b030f52c02c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80f0f280df446d5b4169d1cf1314b030f52c02c1", "html_url": "https://github.com/rust-lang/rust/commit/80f0f280df446d5b4169d1cf1314b030f52c02c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80f0f280df446d5b4169d1cf1314b030f52c02c1/comments", "author": {"login": "mkrasnitski", "id": 42564254, "node_id": "MDQ6VXNlcjQyNTY0MjU0", "avatar_url": "https://avatars.githubusercontent.com/u/42564254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mkrasnitski", "html_url": "https://github.com/mkrasnitski", "followers_url": "https://api.github.com/users/mkrasnitski/followers", "following_url": "https://api.github.com/users/mkrasnitski/following{/other_user}", "gists_url": "https://api.github.com/users/mkrasnitski/gists{/gist_id}", "starred_url": "https://api.github.com/users/mkrasnitski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mkrasnitski/subscriptions", "organizations_url": "https://api.github.com/users/mkrasnitski/orgs", "repos_url": "https://api.github.com/users/mkrasnitski/repos", "events_url": "https://api.github.com/users/mkrasnitski/events{/privacy}", "received_events_url": "https://api.github.com/users/mkrasnitski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mkrasnitski", "id": 42564254, "node_id": "MDQ6VXNlcjQyNTY0MjU0", "avatar_url": "https://avatars.githubusercontent.com/u/42564254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mkrasnitski", "html_url": "https://github.com/mkrasnitski", "followers_url": "https://api.github.com/users/mkrasnitski/followers", "following_url": "https://api.github.com/users/mkrasnitski/following{/other_user}", "gists_url": "https://api.github.com/users/mkrasnitski/gists{/gist_id}", "starred_url": "https://api.github.com/users/mkrasnitski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mkrasnitski/subscriptions", "organizations_url": "https://api.github.com/users/mkrasnitski/orgs", "repos_url": "https://api.github.com/users/mkrasnitski/repos", "events_url": "https://api.github.com/users/mkrasnitski/events{/privacy}", "received_events_url": "https://api.github.com/users/mkrasnitski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71777465cc71b365ca08db8afd5c25eb99bd3f08", "url": "https://api.github.com/repos/rust-lang/rust/commits/71777465cc71b365ca08db8afd5c25eb99bd3f08", "html_url": "https://github.com/rust-lang/rust/commit/71777465cc71b365ca08db8afd5c25eb99bd3f08"}], "stats": {"total": 90, "additions": 47, "deletions": 43}, "files": [{"sha": "20fcba90773b5cfb89c0949e2f75bd4e649d8ae3", "filename": "clippy_lints/src/if_then_some_else_none.rs", "status": "modified", "additions": 43, "deletions": 39, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/80f0f280df446d5b4169d1cf1314b030f52c02c1/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80f0f280df446d5b4169d1cf1314b030f52c02c1/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs?ref=80f0f280df446d5b4169d1cf1314b030f52c02c1", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::eager_or_lazy::switch_to_eager_eval;\n use clippy_utils::source::snippet_with_macro_callsite;\n use clippy_utils::{contains_return, higher, is_else_clause, is_lang_ctor, meets_msrv, msrvs, peel_blocks};\n-use if_chain::if_chain;\n use rustc_hir::LangItem::{OptionNone, OptionSome};\n use rustc_hir::{Expr, ExprKind, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n@@ -56,7 +56,7 @@ impl IfThenSomeElseNone {\n impl_lint_pass!(IfThenSomeElseNone => [IF_THEN_SOME_ELSE_NONE]);\n \n impl<'tcx> LateLintPass<'tcx> for IfThenSomeElseNone {\n-    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &'tcx Expr<'_>) {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n         if !meets_msrv(self.msrv, msrvs::BOOL_THEN) {\n             return;\n         }\n@@ -70,43 +70,47 @@ impl<'tcx> LateLintPass<'tcx> for IfThenSomeElseNone {\n             return;\n         }\n \n-        if_chain! {\n-            if let Some(higher::If { cond, then, r#else: Some(els) }) = higher::If::hir(expr);\n-            if let ExprKind::Block(then_block, _) = then.kind;\n-            if let Some(then_expr) = then_block.expr;\n-            if let ExprKind::Call(then_call, [then_arg]) = then_expr.kind;\n-            if let ExprKind::Path(ref then_call_qpath) = then_call.kind;\n-            if is_lang_ctor(cx, then_call_qpath, OptionSome);\n-            if let ExprKind::Path(ref qpath) = peel_blocks(els).kind;\n-            if is_lang_ctor(cx, qpath, OptionNone);\n-            if !stmts_contains_early_return(then_block.stmts);\n-            then {\n-                let cond_snip = snippet_with_macro_callsite(cx, cond.span, \"[condition]\");\n-                let cond_snip = if matches!(cond.kind, ExprKind::Unary(_, _) | ExprKind::Binary(_, _, _)) {\n-                    format!(\"({})\", cond_snip)\n-                } else {\n-                    cond_snip.into_owned()\n-                };\n-                let arg_snip = snippet_with_macro_callsite(cx, then_arg.span, \"\");\n-                let closure_body = if then_block.stmts.is_empty() {\n-                    arg_snip.into_owned()\n-                } else {\n-                    format!(\"{{ /* snippet */ {} }}\", arg_snip)\n-                };\n-                let help = format!(\n-                    \"consider using `bool::then` like: `{}.then(|| {})`\",\n-                    cond_snip,\n-                    closure_body,\n-                );\n-                span_lint_and_help(\n-                    cx,\n-                    IF_THEN_SOME_ELSE_NONE,\n-                    expr.span,\n-                    \"this could be simplified with `bool::then`\",\n-                    None,\n-                    &help,\n-                );\n-            }\n+        if let Some(higher::If { cond, then, r#else: Some(els) }) = higher::If::hir(expr)\n+            && let ExprKind::Block(then_block, _) = then.kind\n+            && let Some(then_expr) = then_block.expr\n+            && let ExprKind::Call(then_call, [then_arg]) = then_expr.kind\n+            && let ExprKind::Path(ref then_call_qpath) = then_call.kind\n+            && is_lang_ctor(cx, then_call_qpath, OptionSome)\n+            && let ExprKind::Path(ref qpath) = peel_blocks(els).kind\n+            && is_lang_ctor(cx, qpath, OptionNone)\n+            && !stmts_contains_early_return(then_block.stmts)\n+        {\n+            let cond_snip = snippet_with_macro_callsite(cx, cond.span, \"[condition]\");\n+            let cond_snip = if matches!(cond.kind, ExprKind::Unary(_, _) | ExprKind::Binary(_, _, _)) {\n+                format!(\"({})\", cond_snip)\n+            } else {\n+                cond_snip.into_owned()\n+            };\n+            let arg_snip = snippet_with_macro_callsite(cx, then_arg.span, \"\");\n+            let mut method_body = if then_block.stmts.is_empty() {\n+                arg_snip.into_owned()\n+            } else {\n+                format!(\"{{ /* snippet */ {} }}\", arg_snip)\n+            };\n+            let method_name = if switch_to_eager_eval(cx, expr) && meets_msrv(self.msrv, msrvs::BOOL_THEN_SOME) {\n+                \"then_some\"\n+            } else {\n+                method_body.insert_str(0, \"|| \");\n+                \"then\"\n+            };\n+\n+            let help = format!(\n+                \"consider using `bool::{}` like: `{}.{}({})`\",\n+                method_name, cond_snip, method_name, method_body,\n+            );\n+            span_lint_and_help(\n+                cx,\n+                IF_THEN_SOME_ELSE_NONE,\n+                expr.span,\n+                &format!(\"this could be simplified with `bool::{}`\", method_name),\n+                None,\n+                &help,\n+            );\n         }\n     }\n "}, {"sha": "c22ace30d2dc21defe9cefa3108599f228860f27", "filename": "tests/ui/if_then_some_else_none.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/80f0f280df446d5b4169d1cf1314b030f52c02c1/tests%2Fui%2Fif_then_some_else_none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/80f0f280df446d5b4169d1cf1314b030f52c02c1/tests%2Fui%2Fif_then_some_else_none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_then_some_else_none.stderr?ref=80f0f280df446d5b4169d1cf1314b030f52c02c1", "patch": "@@ -27,21 +27,21 @@ LL | |     };\n    |\n    = help: consider using `bool::then` like: `matches!(true, true).then(|| { /* snippet */ matches!(true, false) })`\n \n-error: this could be simplified with `bool::then`\n+error: this could be simplified with `bool::then_some`\n   --> $DIR/if_then_some_else_none.rs:23:28\n    |\n LL |     let _ = x.and_then(|o| if o < 32 { Some(o) } else { None });\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider using `bool::then` like: `(o < 32).then(|| o)`\n+   = help: consider using `bool::then_some` like: `(o < 32).then_some(o)`\n \n-error: this could be simplified with `bool::then`\n+error: this could be simplified with `bool::then_some`\n   --> $DIR/if_then_some_else_none.rs:27:13\n    |\n LL |     let _ = if !x { Some(0) } else { None };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider using `bool::then` like: `(!x).then(|| 0)`\n+   = help: consider using `bool::then_some` like: `(!x).then_some(0)`\n \n error: this could be simplified with `bool::then`\n   --> $DIR/if_then_some_else_none.rs:82:13"}]}