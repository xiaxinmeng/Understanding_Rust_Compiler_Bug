{"sha": "4cc4a67cea385194ff0fd0d400bba894beceb759", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjYzRhNjdjZWEzODUxOTRmZjBmZDBkNDAwYmJhODk0YmVjZWI3NTk=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-05-03T18:16:39Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-05-03T18:16:39Z"}, "message": "Rollup merge of #50406 - ExpHP:concat-nonzero-idents, r=dtolnay\n\nForbid constructing empty identifiers from concat_idents\n\nThe empty identifier is a [reserved identifier](https://github.com/rust-lang/rust/blob/8a37c75a3a661385cc607d934c70e86a9eaf5fd7/src/libsyntax_pos/symbol.rs#L300-L305) in rust, apparently used for black magicks like representing the crate root or somesuch... and therefore, being able to construct it is Ungood.  Presumably.\n\n...even if the macro that lets you construct it is so useless that you can't actually do any damage with it. (and believe me, I tried)\n\nFixes #50403.\n\n**Note:** I noticed that when you try to do something similar with `proc_macro::Term`, the compiler actually catches it and flags the identifier as reserved.  Perhaps a better solution would be to somehow have that same check applied here.", "tree": {"sha": "d782627ea4d4f28298090fc87a2128c0c51a3282", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d782627ea4d4f28298090fc87a2128c0c51a3282"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cc4a67cea385194ff0fd0d400bba894beceb759", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlrrUgcACgkQ/vbIBR0O\nATwDlg/8DyyBkIhVQ3OXNz2LTDu0jP1i7ecKoajHJKdmQF3H1f+GviKnOLlDy1A/\n9DfevAnmglTygUfWXNWUYzm3UyCwM8F5//oqcC4gBR/gq4HrpnWFj/K7nvoBa4bt\n+L5q1bBQWTYsBkQn3w8mHPhOu5OB/hW80fcseMCyR1xdSJQeNharg4txLmo3gGhK\n1FdEhVgoQ+0GINKLEfhEqPBaAxZGNTTzVUXjDRKqmFiiXQLBZR+9d5kpYLjpos9h\nyV2Gs5dGOj6NmuDzhwcS8cgqhKQ1h61B5e2Wn0bQ2FclRXudnU/4kqcNoF3YOLYv\n1j/OEiWIbKYf65C363DThYBMPuR7hdFzI0NTl7wN+swoxqpTmfu3ItPI2h+1Thbm\nuu5sGy7fB1AZQiZQPgeue5rHos6NErDLO3Mc5ltT6eCXEJ1n8GJwetcSTmdoCpzm\nZQ+2XY8yt0Hdx1RQssLKCSXntuD75Uni6r6qpb276InlrPaUJ70+cSmqdF9dRXha\nvPcwoQekER1CD4/bt8oCTSwrh0GBNJ8E5iJL912pwD/e8CUZKxAf6N6Dh07Vcn2v\nkBTmd4DJREciTLzmkmXx956ROCJQjC/a7xNxVL2JEgtB7P4W0TwU0AgqnAzainz4\nCd+WoxYq4jINRmRPhl48GNbcyZDWIwaVJo6ebkcFzuSWyN0eWzA=\n=J9R1\n-----END PGP SIGNATURE-----", "payload": "tree d782627ea4d4f28298090fc87a2128c0c51a3282\nparent dfb32af87d9524caae3edb2c74d6165380eda063\nparent 8e38d02d986a5fa5ef51b6995058d7327aa0da4b\nauthor kennytm <kennytm@gmail.com> 1525371399 +0800\ncommitter kennytm <kennytm@gmail.com> 1525371399 +0800\n\nRollup merge of #50406 - ExpHP:concat-nonzero-idents, r=dtolnay\n\nForbid constructing empty identifiers from concat_idents\n\nThe empty identifier is a [reserved identifier](https://github.com/rust-lang/rust/blob/8a37c75a3a661385cc607d934c70e86a9eaf5fd7/src/libsyntax_pos/symbol.rs#L300-L305) in rust, apparently used for black magicks like representing the crate root or somesuch... and therefore, being able to construct it is Ungood.  Presumably.\n\n...even if the macro that lets you construct it is so useless that you can't actually do any damage with it. (and believe me, I tried)\n\nFixes #50403.\n\n**Note:** I noticed that when you try to do something similar with `proc_macro::Term`, the compiler actually catches it and flags the identifier as reserved.  Perhaps a better solution would be to somehow have that same check applied here.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cc4a67cea385194ff0fd0d400bba894beceb759", "html_url": "https://github.com/rust-lang/rust/commit/4cc4a67cea385194ff0fd0d400bba894beceb759", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cc4a67cea385194ff0fd0d400bba894beceb759/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfb32af87d9524caae3edb2c74d6165380eda063", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfb32af87d9524caae3edb2c74d6165380eda063", "html_url": "https://github.com/rust-lang/rust/commit/dfb32af87d9524caae3edb2c74d6165380eda063"}, {"sha": "8e38d02d986a5fa5ef51b6995058d7327aa0da4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e38d02d986a5fa5ef51b6995058d7327aa0da4b", "html_url": "https://github.com/rust-lang/rust/commit/8e38d02d986a5fa5ef51b6995058d7327aa0da4b"}], "stats": {"total": 36, "additions": 32, "deletions": 4}, "files": [{"sha": "c830c22ee5f50b1c58a46732cbe56036882756c2", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cc4a67cea385194ff0fd0d400bba894beceb759/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc4a67cea385194ff0fd0d400bba894beceb759/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=4cc4a67cea385194ff0fd0d400bba894beceb759", "patch": "@@ -606,8 +606,8 @@ mod builtin {\n     #[macro_export]\n     #[cfg(dox)]\n     macro_rules! concat_idents {\n-        ($($e:ident),*) => ({ /* compiler built-in */ });\n-        ($($e:ident,)*) => ({ /* compiler built-in */ });\n+        ($($e:ident),+) => ({ /* compiler built-in */ });\n+        ($($e:ident,)+) => ({ /* compiler built-in */ });\n     }\n \n     /// Concatenates literals into a static string slice."}, {"sha": "d1274a4090087b61351444b37d2dc510aeb75ec6", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cc4a67cea385194ff0fd0d400bba894beceb759/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc4a67cea385194ff0fd0d400bba894beceb759/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=4cc4a67cea385194ff0fd0d400bba894beceb759", "patch": "@@ -450,8 +450,8 @@ pub mod builtin {\n     #[unstable(feature = \"concat_idents_macro\", issue = \"29599\")]\n     #[macro_export]\n     macro_rules! concat_idents {\n-        ($($e:ident),*) => ({ /* compiler built-in */ });\n-        ($($e:ident,)*) => ({ /* compiler built-in */ });\n+        ($($e:ident),+) => ({ /* compiler built-in */ });\n+        ($($e:ident,)+) => ({ /* compiler built-in */ });\n     }\n \n     /// Concatenates literals into a static string slice."}, {"sha": "b8345e7cf40c109431a740ab8aea7b19efb46a24", "filename": "src/libsyntax_ext/concat_idents.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4cc4a67cea385194ff0fd0d400bba894beceb759/src%2Flibsyntax_ext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc4a67cea385194ff0fd0d400bba894beceb759/src%2Flibsyntax_ext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat_idents.rs?ref=4cc4a67cea385194ff0fd0d400bba894beceb759", "patch": "@@ -31,6 +31,11 @@ pub fn expand_syntax_ext<'cx>(cx: &'cx mut ExtCtxt,\n         return base::DummyResult::expr(sp);\n     }\n \n+    if tts.is_empty() {\n+        cx.span_err(sp, \"concat_idents! takes 1 or more arguments.\");\n+        return DummyResult::expr(sp);\n+    }\n+\n     let mut res_str = String::new();\n     for (i, e) in tts.iter().enumerate() {\n         if i & 1 == 1 {"}, {"sha": "8d4c6c5140fd68dd815aa3acdf7bcb23f71d2344", "filename": "src/test/ui/issue-50403.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4cc4a67cea385194ff0fd0d400bba894beceb759/src%2Ftest%2Fui%2Fissue-50403.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc4a67cea385194ff0fd0d400bba894beceb759/src%2Ftest%2Fui%2Fissue-50403.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-50403.rs?ref=4cc4a67cea385194ff0fd0d400bba894beceb759", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(concat_idents)]\n+\n+fn main() {\n+    let x = concat_idents!(); //~ ERROR concat_idents! takes 1 or more arguments\n+}"}, {"sha": "f2871c72e25af5bc02f678cc98137c80f8fc9c4b", "filename": "src/test/ui/issue-50403.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4cc4a67cea385194ff0fd0d400bba894beceb759/src%2Ftest%2Fui%2Fissue-50403.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4cc4a67cea385194ff0fd0d400bba894beceb759/src%2Ftest%2Fui%2Fissue-50403.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-50403.stderr?ref=4cc4a67cea385194ff0fd0d400bba894beceb759", "patch": "@@ -0,0 +1,8 @@\n+error: concat_idents! takes 1 or more arguments.\n+  --> $DIR/issue-50403.rs:14:13\n+   |\n+LL |     let x = concat_idents!(); //~ ERROR concat_idents! takes 1 or more arguments\n+   |             ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}