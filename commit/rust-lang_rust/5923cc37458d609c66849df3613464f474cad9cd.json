{"sha": "5923cc37458d609c66849df3613464f474cad9cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MjNjYzM3NDU4ZDYwOWM2Njg0OWRmMzYxMzQ2NGY0NzRjYWQ5Y2Q=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-10T05:21:01Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-16T20:24:24Z"}, "message": "rt: Remove rust_env", "tree": {"sha": "e500df4234b44b8aa9e7ecebeb573a5f130d4b8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e500df4234b44b8aa9e7ecebeb573a5f130d4b8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5923cc37458d609c66849df3613464f474cad9cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5923cc37458d609c66849df3613464f474cad9cd", "html_url": "https://github.com/rust-lang/rust/commit/5923cc37458d609c66849df3613464f474cad9cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5923cc37458d609c66849df3613464f474cad9cd/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "680eb71564ebba5e76ce1e1a8287b30042332cc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/680eb71564ebba5e76ce1e1a8287b30042332cc5", "html_url": "https://github.com/rust-lang/rust/commit/680eb71564ebba5e76ce1e1a8287b30042332cc5"}], "stats": {"total": 257, "additions": 53, "deletions": 204}, "files": [{"sha": "6caa67e1a25d30f816d957e80b46c858b5488350", "filename": "mk/rt.mk", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5923cc37458d609c66849df3613464f474cad9cd/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/5923cc37458d609c66849df3613464f474cad9cd/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=5923cc37458d609c66849df3613464f474cad9cd", "patch": "@@ -68,7 +68,6 @@ RUNTIME_CXXS_$(1)_$(2) := \\\n               rt/sync/rust_thread.cpp \\\n               rt/rust_builtin.cpp \\\n               rt/rust_run_program.cpp \\\n-              rt/rust_env.cpp \\\n               rt/rust_rng.cpp \\\n               rt/rust_stack.cpp \\\n               rt/rust_upcall.cpp \\"}, {"sha": "064648a9671a171d39b04696f7934a539f35524e", "filename": "src/rt/boxed_region.cpp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5923cc37458d609c66849df3613464f474cad9cd/src%2Frt%2Fboxed_region.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/5923cc37458d609c66849df3613464f474cad9cd/src%2Frt%2Fboxed_region.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fboxed_region.cpp?ref=5923cc37458d609c66849df3613464f474cad9cd", "patch": "@@ -11,7 +11,6 @@\n #include \"memory_region.h\"\n #include \"boxed_region.h\"\n #include \"rust_globals.h\"\n-#include \"rust_env.h\"\n #include \"rust_util.h\"\n \n // #define DUMP_BOXED_REGION"}, {"sha": "080dae7d7af85efc11e97d3b88cd9954043f6c27", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5923cc37458d609c66849df3613464f474cad9cd/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/5923cc37458d609c66849df3613464f474cad9cd/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=5923cc37458d609c66849df3613464f474cad9cd", "patch": "@@ -571,7 +571,47 @@ rust_running_on_valgrind() {\n     return RUNNING_ON_VALGRIND;\n }\n \n-extern int get_num_cpus();\n+#if defined(__WIN32__)\n+int\n+get_num_cpus() {\n+    SYSTEM_INFO sysinfo;\n+    GetSystemInfo(&sysinfo);\n+\n+    return (int) sysinfo.dwNumberOfProcessors;\n+}\n+#elif defined(__BSD__)\n+int\n+get_num_cpus() {\n+    /* swiped from http://stackoverflow.com/questions/150355/\n+       programmatically-find-the-number-of-cores-on-a-machine */\n+\n+    unsigned int numCPU;\n+    int mib[4];\n+    size_t len = sizeof(numCPU);\n+\n+    /* set the mib for hw.ncpu */\n+    mib[0] = CTL_HW;\n+    mib[1] = HW_AVAILCPU;  // alternatively, try HW_NCPU;\n+\n+    /* get the number of CPUs from the system */\n+    sysctl(mib, 2, &numCPU, &len, NULL, 0);\n+\n+    if( numCPU < 1 ) {\n+        mib[1] = HW_NCPU;\n+        sysctl( mib, 2, &numCPU, &len, NULL, 0 );\n+\n+        if( numCPU < 1 ) {\n+            numCPU = 1;\n+        }\n+    }\n+    return numCPU;\n+}\n+#elif defined(__GNUC__)\n+int\n+get_num_cpus() {\n+    return sysconf(_SC_NPROCESSORS_ONLN);\n+}\n+#endif\n \n extern \"C\" CDECL uintptr_t\n rust_get_num_cpus() {\n@@ -629,6 +669,18 @@ rust_get_task() {\n     return 0;\n }\n \n+static lock_and_signal env_lock;\n+\n+extern \"C\" CDECL void\n+rust_take_env_lock() {\n+    env_lock.lock();\n+}\n+\n+extern \"C\" CDECL void\n+rust_drop_env_lock() {\n+    env_lock.unlock();\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "1a29cae2c8b7d3b5fb46eb12708ad679862bec0b", "filename": "src/rt/rust_env.cpp", "status": "removed", "additions": 0, "deletions": 163, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Frt%2Frust_env.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Frt%2Frust_env.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_env.cpp?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -1,163 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// The runtime wants to pull a number of variables out of the\n-// environment but calling getenv is not threadsafe, so every value\n-// that might come from the environment is loaded here, once, during\n-// init.\n-\n-#include \"sync/lock_and_signal.h\"\n-#include \"rust_env.h\"\n-\n-// The environment variables that the runtime knows about\n-#define RUST_THREADS \"RUST_THREADS\"\n-#define RUST_MIN_STACK \"RUST_MIN_STACK\"\n-#define RUST_MAX_STACK \"RUST_MAX_STACK\"\n-#define RUST_LOG \"RUST_LOG\"\n-#define DETAILED_LEAKS \"DETAILED_LEAKS\"\n-#define RUST_SEED \"RUST_SEED\"\n-#define RUST_POISON_ON_FREE \"RUST_POISON_ON_FREE\"\n-#define RUST_DEBUG_MEM \"RUST_DEBUG_MEM\"\n-#define RUST_DEBUG_BORROW \"RUST_DEBUG_BORROW\"\n-\n-#define DEFAULT_RUST_MIN_STACK_32 0x300\n-#define DEFAULT_RUST_MIN_STACK_64 0x400000\n-\n-static lock_and_signal env_lock;\n-\n-extern \"C\" CDECL void\n-rust_take_env_lock() {\n-    env_lock.lock();\n-}\n-\n-extern \"C\" CDECL void\n-rust_drop_env_lock() {\n-    env_lock.unlock();\n-}\n-\n-#if defined(__WIN32__)\n-int\n-get_num_cpus() {\n-    SYSTEM_INFO sysinfo;\n-    GetSystemInfo(&sysinfo);\n-\n-    return (int) sysinfo.dwNumberOfProcessors;\n-}\n-#elif defined(__BSD__)\n-int\n-get_num_cpus() {\n-    /* swiped from http://stackoverflow.com/questions/150355/\n-       programmatically-find-the-number-of-cores-on-a-machine */\n-\n-    unsigned int numCPU;\n-    int mib[4];\n-    size_t len = sizeof(numCPU);\n-\n-    /* set the mib for hw.ncpu */\n-    mib[0] = CTL_HW;\n-    mib[1] = HW_AVAILCPU;  // alternatively, try HW_NCPU;\n-\n-    /* get the number of CPUs from the system */\n-    sysctl(mib, 2, &numCPU, &len, NULL, 0);\n-\n-    if( numCPU < 1 ) {\n-        mib[1] = HW_NCPU;\n-        sysctl( mib, 2, &numCPU, &len, NULL, 0 );\n-\n-        if( numCPU < 1 ) {\n-            numCPU = 1;\n-        }\n-    }\n-    return numCPU;\n-}\n-#elif defined(__GNUC__)\n-int\n-get_num_cpus() {\n-    return sysconf(_SC_NPROCESSORS_ONLN);\n-}\n-#endif\n-\n-static int\n-get_num_threads()\n-{\n-    char *env = getenv(RUST_THREADS);\n-    if(env) {\n-        int num = atoi(env);\n-        if(num > 0)\n-            return num;\n-    }\n-    return get_num_cpus();\n-}\n-\n-static size_t\n-get_min_stk_size() {\n-    char *minsz = getenv(RUST_MIN_STACK);\n-    if(minsz) {\n-        return strtol(minsz, NULL, 0);\n-    }\n-    else if (sizeof(size_t) > 4) {\n-        return DEFAULT_RUST_MIN_STACK_64;\n-    } else {\n-        return DEFAULT_RUST_MIN_STACK_32;\n-    }\n-}\n-\n-static size_t\n-get_max_stk_size() {\n-    char *maxsz = getenv(RUST_MAX_STACK);\n-    if (maxsz) {\n-        return strtol(maxsz, NULL, 0);\n-    }\n-    else {\n-        return 1024*1024*1024;\n-    }\n-}\n-\n-static char*\n-copyenv(const char* name) {\n-    char *envvar = getenv(name);\n-    if (!envvar) {\n-        return NULL;\n-    } else {\n-        size_t slen = strlen(envvar);\n-        size_t buflen = slen + 1;\n-        char *var = (char*)malloc(buflen);\n-        memset(var, 0, buflen);\n-        strncpy(var, envvar, slen);\n-        return var;\n-    }\n-}\n-\n-rust_env*\n-load_env(int argc, char **argv) {\n-    scoped_lock with(env_lock);\n-\n-    rust_env *env = (rust_env*)malloc(sizeof(rust_env));\n-\n-    env->num_sched_threads = (size_t)get_num_threads();\n-    env->min_stack_size = get_min_stk_size();\n-    env->max_stack_size = get_max_stk_size();\n-    env->logspec = copyenv(RUST_LOG);\n-    env->detailed_leaks = getenv(DETAILED_LEAKS) != NULL;\n-    env->rust_seed = copyenv(RUST_SEED);\n-    env->poison_on_free = getenv(RUST_POISON_ON_FREE) != NULL;\n-    env->argc = argc;\n-    env->argv = argv;\n-    env->debug_mem = getenv(RUST_DEBUG_MEM) != NULL;\n-    env->debug_borrow = getenv(RUST_DEBUG_BORROW) != NULL;\n-    return env;\n-}\n-\n-void\n-free_env(rust_env *env) {\n-    free(env->logspec);\n-    free(env->rust_seed);\n-    free(env);\n-}"}, {"sha": "b897f0c09a90b7f625667d2a1b753ccf5fc5a981", "filename": "src/rt/rust_env.h", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Frt%2Frust_env.h", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Frt%2Frust_env.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_env.h?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -1,37 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-#ifndef RUST_ENV_H\n-#define RUST_ENV_H\n-\n-#include \"rust_globals.h\"\n-\n-// Avoiding 'bool' type here since I'm not sure it has a standard size\n-typedef uint8_t rust_bool;\n-\n-struct rust_env {\n-    size_t num_sched_threads;\n-    size_t min_stack_size;\n-    size_t max_stack_size;\n-    char* logspec;\n-    rust_bool detailed_leaks;\n-    char* rust_seed;\n-    rust_bool poison_on_free;\n-    int argc;\n-    char **argv;\n-    rust_bool debug_mem;\n-    rust_bool debug_borrow;\n-};\n-\n-rust_env* load_env(int argc, char **argv);\n-void free_env(rust_env *rust_env);\n-\n-#endif"}, {"sha": "7c531297ccddc4fc8e23e6e73d641a5b7a0accbd", "filename": "src/rt/rust_util.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5923cc37458d609c66849df3613464f474cad9cd/src%2Frt%2Frust_util.h", "raw_url": "https://github.com/rust-lang/rust/raw/5923cc37458d609c66849df3613464f474cad9cd/src%2Frt%2Frust_util.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_util.h?ref=5923cc37458d609c66849df3613464f474cad9cd", "patch": "@@ -14,7 +14,6 @@\n #include <limits.h>\n #include \"rust_exchange_alloc.h\"\n #include \"rust_type.h\"\n-#include \"rust_env.h\"\n \n extern struct type_desc str_body_tydesc;\n "}]}