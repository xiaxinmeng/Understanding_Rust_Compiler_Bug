{"sha": "717fd665ad1095b12907ed0f2426d8eb06c2bddc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxN2ZkNjY1YWQxMDk1YjEyOTA3ZWQwZjI0MjZkOGViMDZjMmJkZGM=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-05-26T17:21:58Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-05-31T21:30:55Z"}, "message": "Make `SourceMap` available for early debug-printing of `Span`s\n\nNormally, we debug-print `Spans` using the `SourceMap` retrieved from\nthe global `TyCtxt`. However, we fall back to printing out the `Span`'s\nraw fields (instead of a file and line number) when we try to print a\n`Span` before a `TyCtxt` is available. This makes debugging early phases\nof the compile, such as parsing, much more difficult.\n\nThis commit stores a `SourceMap` in `rustc_span::GlOBALS` as a fallback.\nWhen a `TyCtxt` is not available, we try to retrieve one from `GLOBALS`\n- only if this is not available do we fall back to the raw field output.\n\nI'm not sure how to write a test for this - however, this can be\nverified locally by setting `RUSTC_LOG=\"rustc_parse=debug\"`, and\nverifying that the output contains filenames and line numbers.", "tree": {"sha": "1b0ff7c2958b6022035bbacf5820ef3688e60270", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b0ff7c2958b6022035bbacf5820ef3688e60270"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/717fd665ad1095b12907ed0f2426d8eb06c2bddc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl7UIhAACgkQtAh+UQ6Y\nsWQ4xhAApXhxiI1d/2NRqcmGn00nfvrAZAcgpVJf9LRGbzJ2wJklFxGoy5OHvVRl\noaZLhEZjnGcbn4OEBuU8VVQGGjZ7Eq2D77YgZ1S4GXoVm5HdkYto7qB+Z18aafyO\neLO/pc/WCIiI1H3hEjT/f7xj5nZGQvbt9EbN0z5tqMakNBeMsVxv9O4B3Is2UgRt\ne4uM8UEALlpumSrlyXex0NfpL1Zpf6keX/PzZKoujk58QR3U+jNX1ugveVvBiYt+\nwdQ9FyzhUjwT686KKVBfHNu6cGvDK2bKFxrMkO7zj45XffGdjwt9ysW0nW9TK/nN\nbkgz9cqc13AcDILqxCEcmHf8VKT/iLxtfF3HuAYehtVVPDU0rd+K+qEqQnc2dMA0\nn9B8AUwb42reqAqEgLKY2AzsSt2vaBpnX44qIgveK77LPSd4/6WRBl449ekikpku\n0biXeRC98p/5zuTniQPetl0EjpVuvrHaztT/4UfUHjeFfYK2IKuzEWweZzIHdRGg\nU0spi8pP8c1Az2SSFoynT/ipH99xGU151g5upDvAs19jjJJLOGZvsTsbQx7AZSyf\nXate1HlpfIfK+2yUr/j3nFz6u2SshEHh1AdwEwmcua45FSh+yf5ZXQnVHZ0Uk9U7\nGnclpVmWPD7WNObodMGr3xNnZLikskftKNu9iE0+4jDT5jfvlrE=\n=z42Q\n-----END PGP SIGNATURE-----", "payload": "tree 1b0ff7c2958b6022035bbacf5820ef3688e60270\nparent 8c5402efdda733d163895d1edb9bcf7f401dd33b\nauthor Aaron Hill <aa1ronham@gmail.com> 1590513718 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1590960655 -0400\n\nMake `SourceMap` available for early debug-printing of `Span`s\n\nNormally, we debug-print `Spans` using the `SourceMap` retrieved from\nthe global `TyCtxt`. However, we fall back to printing out the `Span`'s\nraw fields (instead of a file and line number) when we try to print a\n`Span` before a `TyCtxt` is available. This makes debugging early phases\nof the compile, such as parsing, much more difficult.\n\nThis commit stores a `SourceMap` in `rustc_span::GlOBALS` as a fallback.\nWhen a `TyCtxt` is not available, we try to retrieve one from `GLOBALS`\n- only if this is not available do we fall back to the raw field output.\n\nI'm not sure how to write a test for this - however, this can be\nverified locally by setting `RUSTC_LOG=\"rustc_parse=debug\"`, and\nverifying that the output contains filenames and line numbers.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/717fd665ad1095b12907ed0f2426d8eb06c2bddc", "html_url": "https://github.com/rust-lang/rust/commit/717fd665ad1095b12907ed0f2426d8eb06c2bddc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/717fd665ad1095b12907ed0f2426d8eb06c2bddc/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c5402efdda733d163895d1edb9bcf7f401dd33b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c5402efdda733d163895d1edb9bcf7f401dd33b", "html_url": "https://github.com/rust-lang/rust/commit/8c5402efdda733d163895d1edb9bcf7f401dd33b"}], "stats": {"total": 69, "additions": 53, "deletions": 16}, "files": [{"sha": "5aad64f84cee3ac9368307f318e52ecedbc7ac5c", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/717fd665ad1095b12907ed0f2426d8eb06c2bddc/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/717fd665ad1095b12907ed0f2426d8eb06c2bddc/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=717fd665ad1095b12907ed0f2426d8eb06c2bddc", "patch": "@@ -186,17 +186,19 @@ pub fn run_compiler_in_existing_thread_pool<R>(\n         override_queries: config.override_queries,\n     };\n \n-    let r = {\n-        let _sess_abort_error = OnDrop(|| {\n-            compiler.sess.finish_diagnostics(registry);\n-        });\n-\n-        f(&compiler)\n-    };\n-\n-    let prof = compiler.sess.prof.clone();\n-    prof.generic_activity(\"drop_compiler\").run(move || drop(compiler));\n-    r\n+    rustc_span::with_source_map(compiler.sess.parse_sess.clone_source_map(), move || {\n+        let r = {\n+            let _sess_abort_error = OnDrop(|| {\n+                compiler.sess.finish_diagnostics(registry);\n+            });\n+\n+            f(&compiler)\n+        };\n+\n+        let prof = compiler.sess.prof.clone();\n+        prof.generic_activity(\"drop_compiler\").run(move || drop(compiler));\n+        r\n+    })\n }\n \n pub fn run_compiler<R: Send>(mut config: Config, f: impl FnOnce(&Compiler) -> R + Send) -> R {"}, {"sha": "0f2eec48b48093638ebca23b38114b659da1fc86", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 40, "deletions": 5, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/717fd665ad1095b12907ed0f2426d8eb06c2bddc/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/717fd665ad1095b12907ed0f2426d8eb06c2bddc/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=717fd665ad1095b12907ed0f2426d8eb06c2bddc", "patch": "@@ -25,6 +25,7 @@ use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n mod caching_source_map_view;\n pub mod source_map;\n pub use self::caching_source_map_view::CachingSourceMapView;\n+use source_map::SourceMap;\n \n pub mod edition;\n use edition::Edition;\n@@ -67,6 +68,7 @@ pub struct Globals {\n     symbol_interner: Lock<symbol::Interner>,\n     span_interner: Lock<span_encoding::SpanInterner>,\n     hygiene_data: Lock<hygiene::HygieneData>,\n+    source_map: Lock<Option<Lrc<SourceMap>>>,\n }\n \n impl Globals {\n@@ -75,6 +77,7 @@ impl Globals {\n             symbol_interner: Lock::new(symbol::Interner::fresh()),\n             span_interner: Lock::new(span_encoding::SpanInterner::default()),\n             hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),\n+            source_map: Lock::new(None),\n         }\n     }\n }\n@@ -641,12 +644,44 @@ impl rustc_serialize::UseSpecializedDecodable for Span {\n     }\n }\n \n+/// Calls the provided closure, using the provided `SourceMap` to format\n+/// any spans that are debug-printed during the closure'e exectuino.\n+///\n+/// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`\n+/// (see `rustc_interface::callbacks::span_debug1). However, some parts\n+/// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before\n+/// a `TyCtxt` is available. In this case, we fall back to\n+/// the `SourceMap` provided to this function. If that is not available,\n+/// we fall back to printing the raw `Span` field values\n+pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {\n+    GLOBALS.with(|globals| {\n+        *globals.source_map.borrow_mut() = Some(source_map);\n+    });\n+    struct ClearSourceMap;\n+    impl Drop for ClearSourceMap {\n+        fn drop(&mut self) {\n+            GLOBALS.with(|globals| {\n+                globals.source_map.borrow_mut().take();\n+            });\n+        }\n+    }\n+\n+    let _guard = ClearSourceMap;\n+    f()\n+}\n+\n pub fn default_span_debug(span: Span, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    f.debug_struct(\"Span\")\n-        .field(\"lo\", &span.lo())\n-        .field(\"hi\", &span.hi())\n-        .field(\"ctxt\", &span.ctxt())\n-        .finish()\n+    GLOBALS.with(|globals| {\n+        if let Some(source_map) = &*globals.source_map.borrow() {\n+            write!(f, \"{}\", source_map.span_to_string(span))\n+        } else {\n+            f.debug_struct(\"Span\")\n+                .field(\"lo\", &span.lo())\n+                .field(\"hi\", &span.hi())\n+                .field(\"ctxt\", &span.ctxt())\n+                .finish()\n+        }\n+    })\n }\n \n impl fmt::Debug for Span {"}]}