{"sha": "2ff1734c612094f009a1eff0c2f0bc58baa46a34", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmZjE3MzRjNjEyMDk0ZjAwOWExZWZmMGMyZjBiYzU4YmFhNDZhMzQ=", "commit": {"author": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2017-08-20T12:25:07Z"}, "committer": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2017-08-20T12:25:07Z"}, "message": "code review fixes", "tree": {"sha": "fddc97ef46a6ba18d2839eb4547ea350f9b67bc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fddc97ef46a6ba18d2839eb4547ea350f9b67bc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ff1734c612094f009a1eff0c2f0bc58baa46a34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ff1734c612094f009a1eff0c2f0bc58baa46a34", "html_url": "https://github.com/rust-lang/rust/commit/2ff1734c612094f009a1eff0c2f0bc58baa46a34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ff1734c612094f009a1eff0c2f0bc58baa46a34/comments", "author": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b89f3168d593e4bfd3babc0a37b624e9593aec1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b89f3168d593e4bfd3babc0a37b624e9593aec1", "html_url": "https://github.com/rust-lang/rust/commit/8b89f3168d593e4bfd3babc0a37b624e9593aec1"}], "stats": {"total": 59, "additions": 23, "deletions": 36}, "files": [{"sha": "1432294f67fb08625fc1f6fa9494a634ddf30e26", "filename": "src/librustc/infer/error_reporting/anon_anon_conflict.rs", "status": "modified", "additions": 23, "deletions": 36, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/2ff1734c612094f009a1eff0c2f0bc58baa46a34/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fanon_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ff1734c612094f009a1eff0c2f0bc58baa46a34/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fanon_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fanon_anon_conflict.rs?ref=2ff1734c612094f009a1eff0c2f0bc58baa46a34", "patch": "@@ -131,42 +131,29 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             if let Some(node_id) = self.tcx.hir.as_local_node_id(def_id) {\n                 let ret_ty = self.tcx.type_of(def_id);\n                 if let ty::TyFnDef(_, _) = ret_ty.sty {\n-                    if let hir_map::NodeItem(it) = self.tcx.hir.get(node_id) {\n-                        if let hir::ItemFn(ref fndecl, _, _, _, _, _) = it.node {\n-                            return fndecl\n-                                       .inputs\n-                                       .iter()\n-                                       .filter_map(|arg| {\n-                                                       self.find_component_for_bound_region(&**arg,\n-                                                                                            br)\n-                                                   })\n-                                       .next();\n-                        }\n-                    } else if let hir_map::NodeTraitItem(it) = self.tcx.hir.get(node_id) {\n-                        if let hir::TraitItemKind::Method(ref fndecl, _) = it.node {\n-                            return fndecl\n-                                       .decl\n-                                       .inputs\n-                                       .iter()\n-                                       .filter_map(|arg| {\n-                                                       self.find_component_for_bound_region(&**arg,\n-                                                                                            br)\n-                                                   })\n-                                       .next();\n-                        }\n-                    } else if let hir_map::NodeImplItem(it) = self.tcx.hir.get(node_id) {\n-                        if let hir::ImplItemKind::Method(ref fndecl, _) = it.node {\n-                            return fndecl\n-                                       .decl\n-                                       .inputs\n-                                       .iter()\n-                                       .filter_map(|arg| {\n-                                                       self.find_component_for_bound_region(&**arg,\n-                                                                                            br)\n-                                                   })\n-                                       .next();\n-                        }\n-                    }\n+                    let inputs: &[_] =\n+                        match self.tcx.hir.get(node_id) {\n+                            hir_map::NodeItem(&hir::Item {\n+                                                  node: hir::ItemFn(ref fndecl, ..), ..\n+                                              }) => &fndecl.inputs,\n+                            hir_map::NodeTraitItem(&hir::TraitItem {\n+                                                   node: hir::TraitItemKind::Method(ref fndecl, ..),\n+                                                   ..\n+                                               }) => &fndecl.decl.inputs,\n+                            hir_map::NodeImplItem(&hir::ImplItem {\n+                                                  node: hir::ImplItemKind::Method(ref fndecl, ..),\n+                                                  ..\n+                                              }) => &fndecl.decl.inputs,\n+\n+                            _ => &[],\n+                        };\n+\n+                    return inputs\n+                               .iter()\n+                               .filter_map(|arg| {\n+                                               self.find_component_for_bound_region(&**arg, br)\n+                                           })\n+                               .next();\n                 }\n             }\n         }"}]}