{"sha": "dca15fd5b95c01edd81ccee1c0f0bdbc28d3f05f", "node_id": "C_kwDOAAsO6NoAKGRjYTE1ZmQ1Yjk1YzAxZWRkODFjY2VlMWMwZjBiZGJjMjhkM2YwNWY", "commit": {"author": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2022-11-23T08:30:58Z"}, "committer": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2023-01-07T10:42:15Z"}, "message": "rename create_raw_ty -> handle_raw_ty", "tree": {"sha": "0ca2544470a05196cb7a944bd1a5ee3f6e09ba1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ca2544470a05196cb7a944bd1a5ee3f6e09ba1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dca15fd5b95c01edd81ccee1c0f0bdbc28d3f05f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dca15fd5b95c01edd81ccee1c0f0bdbc28d3f05f", "html_url": "https://github.com/rust-lang/rust/commit/dca15fd5b95c01edd81ccee1c0f0bdbc28d3f05f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dca15fd5b95c01edd81ccee1c0f0bdbc28d3f05f/comments", "author": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8afd3c47a800f0ebd40d1dc91d498ca02b3ab484", "url": "https://api.github.com/repos/rust-lang/rust/commits/8afd3c47a800f0ebd40d1dc91d498ca02b3ab484", "html_url": "https://github.com/rust-lang/rust/commit/8afd3c47a800f0ebd40d1dc91d498ca02b3ab484"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "970e84bf054e3f0d54fa4b928696ec8cf2b97a04", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dca15fd5b95c01edd81ccee1c0f0bdbc28d3f05f/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca15fd5b95c01edd81ccee1c0f0bdbc28d3f05f/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=dca15fd5b95c01edd81ccee1c0f0bdbc28d3f05f", "patch": "@@ -369,14 +369,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    pub fn create_raw_ty(&self, span: Span, ty: Ty<'tcx>) -> RawTy<'tcx> {\n+    pub fn handle_raw_ty(&self, span: Span, ty: Ty<'tcx>) -> RawTy<'tcx> {\n         RawTy { raw: ty, normalized: self.normalize(span, ty) }\n     }\n \n     pub fn to_ty(&self, ast_t: &hir::Ty<'_>) -> RawTy<'tcx> {\n         let t = <dyn AstConv<'_>>::ast_ty_to_ty(self, ast_t);\n         self.register_wf_obligation(t.into(), ast_t.span, traits::WellFormed(None));\n-        self.create_raw_ty(ast_t.span, t)\n+        self.handle_raw_ty(ast_t.span, t)\n     }\n \n     pub fn to_ty_saving_user_provided_ty(&self, ast_ty: &hir::Ty<'_>) -> Ty<'tcx> {\n@@ -767,7 +767,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // We manually call `register_wf_obligation` in the success path\n                 // below.\n                 let ty = <dyn AstConv<'_>>::ast_ty_to_ty_in_path(self, qself);\n-                (self.create_raw_ty(span, ty), qself, segment)\n+                (self.handle_raw_ty(span, ty), qself, segment)\n             }\n             QPath::LangItem(..) => {\n                 bug!(\"`resolve_ty_and_res_fully_qualified_call` called on `LangItem`\")"}, {"sha": "229220888957bc143b9ad456aba511ec0b94dd93", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dca15fd5b95c01edd81ccee1c0f0bdbc28d3f05f/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca15fd5b95c01edd81ccee1c0f0bdbc28d3f05f/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=dca15fd5b95c01edd81ccee1c0f0bdbc28d3f05f", "patch": "@@ -1683,7 +1683,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             QPath::Resolved(ref maybe_qself, ref path) => {\n                 let self_ty = maybe_qself.as_ref().map(|qself| self.to_ty(qself).raw);\n                 let ty = <dyn AstConv<'_>>::res_to_ty(self, self_ty, path, true);\n-                (path.res, self.create_raw_ty(path_span, ty))\n+                (path.res, self.handle_raw_ty(path_span, ty))\n             }\n             QPath::TypeRelative(ref qself, ref segment) => {\n                 let ty = self.to_ty(qself);\n@@ -1692,7 +1692,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     self, hir_id, path_span, ty.raw, qself, segment, true,\n                 );\n                 let ty = result.map(|(ty, _, _)| ty).unwrap_or_else(|_| self.tcx().ty_error());\n-                let ty = self.create_raw_ty(path_span, ty);\n+                let ty = self.handle_raw_ty(path_span, ty);\n                 let result = result.map(|(_, kind, def_id)| (kind, def_id));\n \n                 // Write back the new resolution.\n@@ -1702,7 +1702,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             QPath::LangItem(lang_item, span, id) => {\n                 let (res, ty) = self.resolve_lang_item_path(lang_item, span, hir_id, id);\n-                (res, self.create_raw_ty(path_span, ty))\n+                (res, self.handle_raw_ty(path_span, ty))\n             }\n         }\n     }"}]}