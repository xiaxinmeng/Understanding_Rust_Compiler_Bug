{"sha": "bbf31f9c78ad35ad1ef8fa91146e31cb447662b9", "node_id": "C_kwDOAAsO6NoAKGJiZjMxZjljNzhhZDM1YWQxZWY4ZmE5MTE0NmUzMWNiNDQ3NjYyYjk", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-05-20T12:54:10Z"}, "committer": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2022-07-19T23:37:34Z"}, "message": "Finish bumping stage0\n\nIt looks like the last time had left some remaining cfg's -- which made me think\nthat the stage0 bump was actually successful. This brings us to a released 1.62\nbeta though.", "tree": {"sha": "f4c2d344d7451f25244daccaa1df7295e7018ae4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4c2d344d7451f25244daccaa1df7295e7018ae4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbf31f9c78ad35ad1ef8fa91146e31cb447662b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbf31f9c78ad35ad1ef8fa91146e31cb447662b9", "html_url": "https://github.com/rust-lang/rust/commit/bbf31f9c78ad35ad1ef8fa91146e31cb447662b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbf31f9c78ad35ad1ef8fa91146e31cb447662b9/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64bef2910be17ca75ced3f0a99b4584f69114c74", "url": "https://api.github.com/repos/rust-lang/rust/commits/64bef2910be17ca75ced3f0a99b4584f69114c74", "html_url": "https://github.com/rust-lang/rust/commit/64bef2910be17ca75ced3f0a99b4584f69114c74"}], "stats": {"total": 20, "additions": 0, "deletions": 20}, "files": [{"sha": "6047890a09393a9ed990807f6c45981e7baebb98", "filename": "crates/core_simd/src/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbf31f9c78ad35ad1ef8fa91146e31cb447662b9/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf31f9c78ad35ad1ef8fa91146e31cb447662b9/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs?ref=bbf31f9c78ad35ad1ef8fa91146e31cb447662b9", "patch": "@@ -62,7 +62,6 @@ extern \"platform-intrinsic\" {\n     pub(crate) fn simd_xor<T>(x: T, y: T) -> T;\n \n     /// getelementptr (without inbounds)\n-    #[cfg(not(bootstrap))]\n     pub(crate) fn simd_arith_offset<T, U>(ptrs: T, offsets: U) -> T;\n \n     /// fptoui/fptosi/uitofp/sitofp"}, {"sha": "fa756344db91ae3d57b1096848849fe957e18345", "filename": "crates/core_simd/src/vector/ptr.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bbf31f9c78ad35ad1ef8fa91146e31cb447662b9/crates%2Fcore_simd%2Fsrc%2Fvector%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf31f9c78ad35ad1ef8fa91146e31cb447662b9/crates%2Fcore_simd%2Fsrc%2Fvector%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fptr.rs?ref=bbf31f9c78ad35ad1ef8fa91146e31cb447662b9", "patch": "@@ -1,9 +1,6 @@\n //! Private implementation details of public gather/scatter APIs.\n-#[cfg(not(bootstrap))]\n use crate::simd::intrinsics;\n use crate::simd::{LaneCount, Simd, SupportedLaneCount};\n-#[cfg(bootstrap)]\n-use core::mem;\n \n /// A vector of *const T.\n #[derive(Debug, Copy, Clone)]\n@@ -24,14 +21,6 @@ where\n     #[inline]\n     #[must_use]\n     pub fn wrapping_add(self, addend: Simd<usize, LANES>) -> Self {\n-        #[cfg(bootstrap)]\n-        // Safety: converting pointers to usize and vice-versa is safe\n-        // (even if using that pointer is not)\n-        unsafe {\n-            let x: Simd<usize, LANES> = mem::transmute_copy(&self);\n-            mem::transmute_copy(&{ x + (addend * Simd::splat(mem::size_of::<T>())) })\n-        }\n-        #[cfg(not(bootstrap))]\n         // Safety: this intrinsic doesn't have a precondition\n         unsafe { intrinsics::simd_arith_offset(self, addend) }\n     }\n@@ -56,14 +45,6 @@ where\n     #[inline]\n     #[must_use]\n     pub fn wrapping_add(self, addend: Simd<usize, LANES>) -> Self {\n-        #[cfg(bootstrap)]\n-        // Safety: converting pointers to usize and vice-versa is safe\n-        // (even if using that pointer is not)\n-        unsafe {\n-            let x: Simd<usize, LANES> = mem::transmute_copy(&self);\n-            mem::transmute_copy(&{ x + (addend * Simd::splat(mem::size_of::<T>())) })\n-        }\n-        #[cfg(not(bootstrap))]\n         // Safety: this intrinsic doesn't have a precondition\n         unsafe { intrinsics::simd_arith_offset(self, addend) }\n     }"}]}