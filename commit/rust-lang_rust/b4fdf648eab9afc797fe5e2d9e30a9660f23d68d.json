{"sha": "b4fdf648eab9afc797fe5e2d9e30a9660f23d68d", "node_id": "C_kwDOAAsO6NoAKGI0ZmRmNjQ4ZWFiOWFmYzc5N2ZlNWUyZDllMzBhOTY2MGYyM2Q2OGQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-07-27T03:50:48Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-07-31T22:11:15Z"}, "message": "Inline `first_token`.\n\nBecause it's tiny and hot.", "tree": {"sha": "43f1b10076d18d4485f5ab95db0bb1f5dfdfe34e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43f1b10076d18d4485f5ab95db0bb1f5dfdfe34e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4fdf648eab9afc797fe5e2d9e30a9660f23d68d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4fdf648eab9afc797fe5e2d9e30a9660f23d68d", "html_url": "https://github.com/rust-lang/rust/commit/b4fdf648eab9afc797fe5e2d9e30a9660f23d68d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4fdf648eab9afc797fe5e2d9e30a9660f23d68d/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd23d68b4133fdf849544e8cbd866d86b535934d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd23d68b4133fdf849544e8cbd866d86b535934d", "html_url": "https://github.com/rust-lang/rust/commit/bd23d68b4133fdf849544e8cbd866d86b535934d"}], "stats": {"total": 1, "additions": 1, "deletions": 0}, "files": [{"sha": "32260913491f491a0a5b573e6d6128d55fb1f9ff", "filename": "compiler/rustc_lexer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4fdf648eab9afc797fe5e2d9e30a9660f23d68d/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4fdf648eab9afc797fe5e2d9e30a9660f23d68d/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Flib.rs?ref=b4fdf648eab9afc797fe5e2d9e30a9660f23d68d", "patch": "@@ -221,6 +221,7 @@ pub fn strip_shebang(input: &str) -> Option<usize> {\n }\n \n /// Parses the first token from the provided input string.\n+#[inline]\n pub fn first_token(input: &str) -> Token {\n     debug_assert!(!input.is_empty());\n     Cursor::new(input).advance_token()"}]}