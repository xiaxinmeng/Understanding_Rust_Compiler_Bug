{"sha": "2f0f017d3e6a34a956c8d969b12a3905934a649b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmMGYwMTdkM2U2YTM0YTk1NmM4ZDk2OWIxMmEzOTA1OTM0YTY0OWI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-05-05T09:15:17Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-05-15T11:17:35Z"}, "message": "test: implement a no-alloc -> &str method for TestName.\n\nThis is far cheaper than the `.to_str` technique that was used previously.", "tree": {"sha": "728365f696d36bfc03a2c0951b64ecd60e617294", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/728365f696d36bfc03a2c0951b64ecd60e617294"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f0f017d3e6a34a956c8d969b12a3905934a649b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f0f017d3e6a34a956c8d969b12a3905934a649b", "html_url": "https://github.com/rust-lang/rust/commit/2f0f017d3e6a34a956c8d969b12a3905934a649b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f0f017d3e6a34a956c8d969b12a3905934a649b/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fedffa785eb1def61d012e8e614d562afaf19a6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fedffa785eb1def61d012e8e614d562afaf19a6e", "html_url": "https://github.com/rust-lang/rust/commit/fedffa785eb1def61d012e8e614d562afaf19a6e"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "2a985fcab4d01634338d8d1786ad3aad56ef4f50", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2f0f017d3e6a34a956c8d969b12a3905934a649b/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0f017d3e6a34a956c8d969b12a3905934a649b/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=2f0f017d3e6a34a956c8d969b12a3905934a649b", "patch": "@@ -53,6 +53,7 @@ use term::color::{Color, RED, YELLOW, GREEN, CYAN};\n use std::cmp;\n use std::f64;\n use std::fmt;\n+use std::fmt::Show;\n use std::from_str::FromStr;\n use std::io::stdio::StdWriter;\n use std::io::{File, ChanReader, ChanWriter};\n@@ -85,22 +86,27 @@ pub enum TestName {\n     StaticTestName(&'static str),\n     DynTestName(StrBuf)\n }\n-impl fmt::Show for TestName {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+impl TestName {\n+    fn as_slice<'a>(&'a self) -> &'a str {\n         match *self {\n-            StaticTestName(s) => f.buf.write_str(s),\n-            DynTestName(ref s) => f.buf.write_str(s.as_slice()),\n+            StaticTestName(s) => s,\n+            DynTestName(ref s) => s.as_slice()\n         }\n     }\n }\n+impl Show for TestName {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        self.as_slice().fmt(f)\n+    }\n+}\n \n #[deriving(Clone)]\n enum NamePadding { PadNone, PadOnLeft, PadOnRight }\n \n impl TestDesc {\n     fn padded_name(&self, column_count: uint, align: NamePadding) -> StrBuf {\n         use std::num::Saturating;\n-        let mut name = StrBuf::from_str(self.name.to_str());\n+        let mut name = StrBuf::from_str(self.name.as_slice());\n         let fill = column_count.saturating_sub(name.len());\n         let mut pad = StrBuf::from_owned_str(\" \".repeat(fill));\n         match align {\n@@ -590,7 +596,7 @@ impl<T: Writer> ConsoleTestState<T> {\n                         TrIgnored => \"ignored\".to_strbuf(),\n                         TrMetrics(ref mm) => fmt_metrics(mm),\n                         TrBench(ref bs) => fmt_bench_samples(bs)\n-                    }, test.name.to_str());\n+                    }, test.name.as_slice());\n                 o.write(s.as_bytes())\n             }\n         }\n@@ -604,7 +610,7 @@ impl<T: Writer> ConsoleTestState<T> {\n             failures.push(f.name.to_str());\n             if stdout.len() > 0 {\n                 fail_out.push_str(format!(\"---- {} stdout ----\\n\\t\",\n-                                  f.name.to_str()));\n+                                  f.name.as_slice()));\n                 let output = str::from_utf8_lossy(stdout.as_slice());\n                 fail_out.push_str(output.as_slice().replace(\"\\n\", \"\\n\\t\"));\n                 fail_out.push_str(\"\\n\");\n@@ -618,7 +624,7 @@ impl<T: Writer> ConsoleTestState<T> {\n         try!(self.write_plain(\"\\nfailures:\\n\"));\n         failures.as_mut_slice().sort();\n         for name in failures.iter() {\n-            try!(self.write_plain(format!(\"    {}\\n\", name.to_str())));\n+            try!(self.write_plain(format!(\"    {}\\n\", name.as_slice())));\n         }\n         Ok(())\n     }\n@@ -753,7 +759,7 @@ pub fn run_tests_console(opts: &TestOpts,\n                     TrOk => st.passed += 1,\n                     TrIgnored => st.ignored += 1,\n                     TrMetrics(mm) => {\n-                        let tname = test.name.to_str();\n+                        let tname = test.name.as_slice();\n                         let MetricMap(mm) = mm;\n                         for (k,v) in mm.iter() {\n                             st.metrics\n@@ -764,7 +770,7 @@ pub fn run_tests_console(opts: &TestOpts,\n                         st.measured += 1\n                     }\n                     TrBench(bs) => {\n-                        st.metrics.insert_metric(test.name.to_str(),\n+                        st.metrics.insert_metric(test.name.as_slice(),\n                                                  bs.ns_iter_summ.median,\n                                                  bs.ns_iter_summ.max - bs.ns_iter_summ.min);\n                         st.measured += 1\n@@ -782,12 +788,12 @@ pub fn run_tests_console(opts: &TestOpts,\n     fn len_if_padded(t: &TestDescAndFn) -> uint {\n         match t.testfn.padding() {\n             PadNone => 0u,\n-            PadOnLeft | PadOnRight => t.desc.name.to_str().len(),\n+            PadOnLeft | PadOnRight => t.desc.name.as_slice().len(),\n         }\n     }\n     match tests.iter().max_by(|t|len_if_padded(*t)) {\n         Some(t) => {\n-            let n = t.desc.name.to_str();\n+            let n = t.desc.name.as_slice();\n             st.max_name_len = n.len();\n         },\n         None => {}\n@@ -980,7 +986,7 @@ pub fn filter_tests(\n     };\n \n     // Sort the tests alphabetically\n-    filtered.sort_by(|t1, t2| t1.desc.name.to_str().cmp(&t2.desc.name.to_str()));\n+    filtered.sort_by(|t1, t2| t1.desc.name.as_slice().cmp(&t2.desc.name.as_slice()));\n \n     // Shard the remaining tests, if sharding requested.\n     match opts.test_shard {"}]}