{"sha": "a809da3feea30c2897f0e4fe6c90c34b09aa9641", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4MDlkYTNmZWVhMzBjMjg5N2YwZTRmZTZjOTBjMzRiMDlhYTk2NDE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-01-25T14:52:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-25T14:52:15Z"}, "message": "Rollup merge of #47702 - etaoins:fix-into-cast-paren-precedence, r=petrochenkov\n\nFix into() cast paren check precedence\n\nAs discussed in #47699 the logic for determining if an expression needs parenthesis when suggesting an `.into()` cast is incorrect. Two broken examples from nightly are:\n\n```\nerror[E0308]: mismatched types\n --> main.rs:4:10\n  |\n4 |     test(foo as i8);\n  |          ^^^^^^^^^ expected i32, found i8\nhelp: you can cast an `i8` to `i32`, which will sign-extend the source value\n  |\n4 |     test(foo as i8.into());\n  |\n```\n\n```\nerror[E0308]: mismatched types\n --> main.rs:4:10\n  |\n4 |     test(*foo);\n  |          ^^^^ expected i32, found i8\nhelp: you can cast an `i8` to `i32`, which will sign-extend the source value\n  |\n4 |     test(*foo.into());\n  |\n```\n\nAs suggested by @petrochenkov switch the precedence check to `PREC_POSTFIX`. This catches both `as` and unary operators. Fixes #47699.\n\nr? @petrochenkov", "tree": {"sha": "e8a2a4a4c03af7a7128515543e793240fb9130e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8a2a4a4c03af7a7128515543e793240fb9130e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a809da3feea30c2897f0e4fe6c90c34b09aa9641", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a809da3feea30c2897f0e4fe6c90c34b09aa9641", "html_url": "https://github.com/rust-lang/rust/commit/a809da3feea30c2897f0e4fe6c90c34b09aa9641", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a809da3feea30c2897f0e4fe6c90c34b09aa9641/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a863a3f456bf64658256d05cf51df61e957d74b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a863a3f456bf64658256d05cf51df61e957d74b", "html_url": "https://github.com/rust-lang/rust/commit/3a863a3f456bf64658256d05cf51df61e957d74b"}, {"sha": "65b1e86aed22bfcd3a4ce27da9be2b14c7d5738e", "url": "https://api.github.com/repos/rust-lang/rust/commits/65b1e86aed22bfcd3a4ce27da9be2b14c7d5738e", "html_url": "https://github.com/rust-lang/rust/commit/65b1e86aed22bfcd3a4ce27da9be2b14c7d5738e"}], "stats": {"total": 31, "additions": 28, "deletions": 3}, "files": [{"sha": "d2702d0810ed9253d3a6271b482458dcf797afc8", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a809da3feea30c2897f0e4fe6c90c34b09aa9641/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a809da3feea30c2897f0e4fe6c90c34b09aa9641/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=a809da3feea30c2897f0e4fe6c90c34b09aa9641", "patch": "@@ -15,7 +15,7 @@ use rustc::infer::InferOk;\n use rustc::traits::ObligationCause;\n \n use syntax::ast;\n-use syntax::util::parser::AssocOp;\n+use syntax::util::parser::PREC_POSTFIX;\n use syntax_pos::{self, Span};\n use rustc::hir;\n use rustc::hir::print;\n@@ -336,7 +336,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // For now, don't suggest casting with `as`.\n         let can_cast = false;\n \n-        let needs_paren = expr.precedence().order() < (AssocOp::As.precedence() as i8);\n+        let needs_paren = expr.precedence().order() < (PREC_POSTFIX as i8);\n \n         if let Ok(src) = self.tcx.sess.codemap().span_to_snippet(expr.span) {\n             let msg = format!(\"you can cast an `{}` to `{}`\", checked_ty, expected_ty);"}, {"sha": "69bfdfa94b13e0866c55986063d6e22ab7328f71", "filename": "src/test/ui/suggestions/numeric-cast.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a809da3feea30c2897f0e4fe6c90c34b09aa9641/src%2Ftest%2Fui%2Fsuggestions%2Fnumeric-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a809da3feea30c2897f0e4fe6c90c34b09aa9641/src%2Ftest%2Fui%2Fsuggestions%2Fnumeric-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fnumeric-cast.rs?ref=a809da3feea30c2897f0e4fe6c90c34b09aa9641", "patch": "@@ -312,4 +312,9 @@ fn main() {\n     foo::<f32>(x_f64);\n     //~^ ERROR mismatched types\n     foo::<f32>(x_f32);\n+\n+    foo::<u32>(x_u8 as u16);\n+    //~^ ERROR mismatched types\n+    foo::<i32>(-x_i8);\n+    //~^ ERROR mismatched types\n }"}, {"sha": "cef22ad922e849a23406cb4014e9e2929a98ad27", "filename": "src/test/ui/suggestions/numeric-cast.stderr", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a809da3feea30c2897f0e4fe6c90c34b09aa9641/src%2Ftest%2Fui%2Fsuggestions%2Fnumeric-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a809da3feea30c2897f0e4fe6c90c34b09aa9641/src%2Ftest%2Fui%2Fsuggestions%2Fnumeric-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fnumeric-cast.stderr?ref=a809da3feea30c2897f0e4fe6c90c34b09aa9641", "patch": "@@ -882,5 +882,25 @@ error[E0308]: mismatched types\n 312 |     foo::<f32>(x_f64);\n     |                ^^^^^ expected f32, found f64\n \n-error: aborting due to 132 previous errors\n+error[E0308]: mismatched types\n+   --> $DIR/numeric-cast.rs:316:16\n+    |\n+316 |     foo::<u32>(x_u8 as u16);\n+    |                ^^^^^^^^^^^ expected u32, found u16\n+help: you can cast an `u16` to `u32`, which will zero-extend the source value\n+    |\n+316 |     foo::<u32>((x_u8 as u16).into());\n+    |                ^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+   --> $DIR/numeric-cast.rs:318:16\n+    |\n+318 |     foo::<i32>(-x_i8);\n+    |                ^^^^^ expected i32, found i8\n+help: you can cast an `i8` to `i32`, which will sign-extend the source value\n+    |\n+318 |     foo::<i32>((-x_i8).into());\n+    |                ^^^^^^^^^^^^^^\n+\n+error: aborting due to 134 previous errors\n "}]}