{"sha": "a973e5a9db4877e8d259ca17d0f0f208fbe9e5a2", "node_id": "C_kwDOAAsO6NoAKGE5NzNlNWE5ZGI0ODc3ZThkMjU5Y2ExN2QwZjBmMjA4ZmJlOWU1YTI", "commit": {"author": {"name": "Eduardo Canellas", "email": "eduardocanellas98@gmail.com", "date": "2022-01-04T22:30:57Z"}, "committer": {"name": "Eduardo Canellas", "email": "eduardocanellas98@gmail.com", "date": "2022-01-04T22:30:57Z"}, "message": "refactor: apply review suggestions", "tree": {"sha": "4ccf41bd8eeb631d389d13524a7995f87a27c278", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ccf41bd8eeb631d389d13524a7995f87a27c278"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a973e5a9db4877e8d259ca17d0f0f208fbe9e5a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a973e5a9db4877e8d259ca17d0f0f208fbe9e5a2", "html_url": "https://github.com/rust-lang/rust/commit/a973e5a9db4877e8d259ca17d0f0f208fbe9e5a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a973e5a9db4877e8d259ca17d0f0f208fbe9e5a2/comments", "author": {"login": "dbofmmbt", "id": 34381457, "node_id": "MDQ6VXNlcjM0MzgxNDU3", "avatar_url": "https://avatars.githubusercontent.com/u/34381457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbofmmbt", "html_url": "https://github.com/dbofmmbt", "followers_url": "https://api.github.com/users/dbofmmbt/followers", "following_url": "https://api.github.com/users/dbofmmbt/following{/other_user}", "gists_url": "https://api.github.com/users/dbofmmbt/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbofmmbt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbofmmbt/subscriptions", "organizations_url": "https://api.github.com/users/dbofmmbt/orgs", "repos_url": "https://api.github.com/users/dbofmmbt/repos", "events_url": "https://api.github.com/users/dbofmmbt/events{/privacy}", "received_events_url": "https://api.github.com/users/dbofmmbt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dbofmmbt", "id": 34381457, "node_id": "MDQ6VXNlcjM0MzgxNDU3", "avatar_url": "https://avatars.githubusercontent.com/u/34381457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbofmmbt", "html_url": "https://github.com/dbofmmbt", "followers_url": "https://api.github.com/users/dbofmmbt/followers", "following_url": "https://api.github.com/users/dbofmmbt/following{/other_user}", "gists_url": "https://api.github.com/users/dbofmmbt/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbofmmbt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbofmmbt/subscriptions", "organizations_url": "https://api.github.com/users/dbofmmbt/orgs", "repos_url": "https://api.github.com/users/dbofmmbt/repos", "events_url": "https://api.github.com/users/dbofmmbt/events{/privacy}", "received_events_url": "https://api.github.com/users/dbofmmbt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30b7e92afaa6dc6b276d60b8e7b47485ca7c2ee3", "url": "https://api.github.com/repos/rust-lang/rust/commits/30b7e92afaa6dc6b276d60b8e7b47485ca7c2ee3", "html_url": "https://github.com/rust-lang/rust/commit/30b7e92afaa6dc6b276d60b8e7b47485ca7c2ee3"}], "stats": {"total": 35, "additions": 21, "deletions": 14}, "files": [{"sha": "bb4ce0a24dc00d13b29b8f757cb8c3755ee55c92", "filename": "crates/ide_completion/src/completions/fn_param.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a973e5a9db4877e8d259ca17d0f0f208fbe9e5a2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a973e5a9db4877e8d259ca17d0f0f208fbe9e5a2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs?ref=a973e5a9db4877e8d259ca17d0f0f208fbe9e5a2", "patch": "@@ -59,7 +59,7 @@ pub(crate) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext)\n     let function = ctx.token.ancestors().find_map(ast::Fn::cast)?;\n     let param_list = function.param_list()?;\n \n-    remove_duplicated(&mut file_params, param_list.params())?;\n+    remove_duplicated(&mut file_params, param_list.params());\n \n     let self_completion_items = [\"self\", \"&self\", \"mut self\", \"&mut self\"];\n     if should_add_self_completions(ctx, param_list) {\n@@ -69,24 +69,24 @@ pub(crate) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext)\n     }\n \n     file_params.into_iter().try_for_each(|(whole_param, binding)| {\n-        Some(add_new_item_to_acc(ctx, acc, surround_with_commas(ctx, whole_param)?, binding))\n+        Some(add_new_item_to_acc(ctx, acc, surround_with_commas(ctx, whole_param), binding))\n     })?;\n \n     Some(())\n }\n \n fn remove_duplicated(\n     file_params: &mut FxHashMap<String, String>,\n-    mut fn_params: ast::AstChildren<ast::Param>,\n-) -> Option<()> {\n-    fn_params.try_for_each(|param| {\n+    fn_params: ast::AstChildren<ast::Param>,\n+) {\n+    fn_params.for_each(|param| {\n         let whole_param = param.syntax().text().to_string();\n         file_params.remove(&whole_param);\n \n-        let binding = param.pat()?.syntax().text().to_string();\n-\n-        file_params.retain(|_, v| v != &binding);\n-        Some(())\n+        if let Some(pattern) = param.pat() {\n+            let binding = pattern.syntax().text().to_string();\n+            file_params.retain(|_, v| v != &binding);\n+        }\n     })\n }\n \n@@ -97,13 +97,20 @@ fn should_add_self_completions(ctx: &CompletionContext, param_list: ast::ParamLi\n     inside_impl && no_params\n }\n \n-fn surround_with_commas(ctx: &CompletionContext, param: String) -> Option<String> {\n+fn surround_with_commas(ctx: &CompletionContext, param: String) -> String {\n+    match fallible_surround_with_commas(ctx, &param) {\n+        Some(surrounded) => surrounded,\n+        // fallback to the original parameter\n+        None => param,\n+    }\n+}\n+\n+fn fallible_surround_with_commas(ctx: &CompletionContext, param: &str) -> Option<String> {\n     let next_token = {\n         let t = ctx.token.next_token()?;\n-        if !matches!(t.kind(), SyntaxKind::WHITESPACE) {\n-            t\n-        } else {\n-            t.next_token()?\n+        match t.kind() {\n+            SyntaxKind::WHITESPACE => t.next_token()?,\n+            _ => t,\n         }\n     };\n "}]}