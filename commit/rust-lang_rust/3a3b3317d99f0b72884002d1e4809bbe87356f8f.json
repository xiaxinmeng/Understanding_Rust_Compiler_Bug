{"sha": "3a3b3317d99f0b72884002d1e4809bbe87356f8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhM2IzMzE3ZDk5ZjBiNzI4ODQwMDJkMWU0ODA5YmJlODczNTZmOGY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-08-02T12:26:27Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-08-07T12:44:48Z"}, "message": "Fix issue around dllimport and ThinLTO as LLD runs it.", "tree": {"sha": "2d7518bcda06d29c0bdfed11c8edaaea62bbea56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d7518bcda06d29c0bdfed11c8edaaea62bbea56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a3b3317d99f0b72884002d1e4809bbe87356f8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a3b3317d99f0b72884002d1e4809bbe87356f8f", "html_url": "https://github.com/rust-lang/rust/commit/3a3b3317d99f0b72884002d1e4809bbe87356f8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a3b3317d99f0b72884002d1e4809bbe87356f8f/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5f8edfa103442e755e1ab3ba76dfd6b0418c043", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5f8edfa103442e755e1ab3ba76dfd6b0418c043", "html_url": "https://github.com/rust-lang/rust/commit/d5f8edfa103442e755e1ab3ba76dfd6b0418c043"}], "stats": {"total": 70, "additions": 55, "deletions": 15}, "files": [{"sha": "dddf921aec68c232ac664de80e8aaef21c2ed5af", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3a3b3317d99f0b72884002d1e4809bbe87356f8f/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a3b3317d99f0b72884002d1e4809bbe87356f8f/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=3a3b3317d99f0b72884002d1e4809bbe87356f8f", "patch": "@@ -2006,13 +2006,6 @@ pub fn build_session_options_and_crate_config(\n         (&None, &None) => None,\n     }.map(|m| PathBuf::from(m));\n \n-    if cg.lto != Lto::No && incremental.is_some() {\n-        early_error(\n-            error_format,\n-            \"can't perform LTO when compiling incrementally\",\n-        );\n-    }\n-\n     if debugging_opts.profile && incremental.is_some() {\n         early_error(\n             error_format,"}, {"sha": "505511a4a0c1cf15551526cbe296b6e9e2c6a9b8", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3a3b3317d99f0b72884002d1e4809bbe87356f8f/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a3b3317d99f0b72884002d1e4809bbe87356f8f/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=3a3b3317d99f0b72884002d1e4809bbe87356f8f", "patch": "@@ -20,7 +20,7 @@ use lint::builtin::BuiltinLintDiagnostics;\n use middle::allocator::AllocatorKind;\n use middle::dependency_format;\n use session::search_paths::PathKind;\n-use session::config::{OutputType};\n+use session::config::{OutputType, Lto};\n use ty::tls;\n use util::nodemap::{FxHashMap, FxHashSet};\n use util::common::{duration_to_secs_str, ErrorReported};\n@@ -1189,9 +1189,27 @@ pub fn build_session_(\n         driver_lint_caps: FxHashMap(),\n     };\n \n+    validate_commandline_args_with_session_available(&sess);\n+\n     sess\n }\n \n+// If it is useful to have a Session available already for validating a\n+// commandline argument, you can do so here.\n+fn validate_commandline_args_with_session_available(sess: &Session) {\n+\n+    if sess.lto() != Lto::No && sess.opts.incremental.is_some() {\n+        sess.err(\"can't perform LTO when compiling incrementally\");\n+    }\n+\n+    if sess.opts.debugging_opts.cross_lang_lto.enabled() &&\n+       sess.opts.cg.prefer_dynamic &&\n+       sess.target.target.options.is_like_msvc {\n+        sess.err(\"Linker plugin based LTO is not supported together with \\\n+                  `-C prefer-dynamic` when targeting MSVC\");\n+    }\n+}\n+\n /// Hash value constructed out of all the `-C metadata` arguments passed to the\n /// compiler. Together with the crate-name forms a unique global identifier for\n /// the crate."}, {"sha": "d7741230327bbf907676503e3b0c0b8af1982d9c", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a3b3317d99f0b72884002d1e4809bbe87356f8f/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a3b3317d99f0b72884002d1e4809bbe87356f8f/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=3a3b3317d99f0b72884002d1e4809bbe87356f8f", "patch": "@@ -195,6 +195,10 @@ pub(crate) fn run(cgcx: &CodegenContext,\n         }\n         Lto::Thin |\n         Lto::ThinLocal => {\n+            if cgcx.opts.debugging_opts.cross_lang_lto.enabled() {\n+                unreachable!(\"We should never reach this case if the LTO step \\\n+                              is deferred to the linker\");\n+            }\n             thin_lto(&diag_handler, modules, upstream_modules, &arr, timeline)\n         }\n         Lto::No => unreachable!(),"}, {"sha": "9d235eced2eab6201329fc01482e7ab17591f5b1", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3a3b3317d99f0b72884002d1e4809bbe87356f8f/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a3b3317d99f0b72884002d1e4809bbe87356f8f/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=3a3b3317d99f0b72884002d1e4809bbe87356f8f", "patch": "@@ -1351,6 +1351,8 @@ fn execute_work_item(cgcx: &CodegenContext,\n         unsafe {\n             optimize(cgcx, &diag_handler, &module, config, timeline)?;\n \n+            let linker_does_lto = cgcx.opts.debugging_opts.cross_lang_lto.enabled();\n+\n             // After we've done the initial round of optimizations we need to\n             // decide whether to synchronously codegen this module or ship it\n             // back to the coordinator thread for further LTO processing (which\n@@ -1361,6 +1363,11 @@ fn execute_work_item(cgcx: &CodegenContext,\n             let needs_lto = match cgcx.lto {\n                 Lto::No => false,\n \n+                // If the linker does LTO, we don't have to do it. Note that we\n+                // keep doing full LTO, if it is requested, as not to break the\n+                // assumption that the output will be a single module.\n+                Lto::Thin | Lto::ThinLocal if linker_does_lto => false,\n+\n                 // Here we've got a full crate graph LTO requested. We ignore\n                 // this, however, if the crate type is only an rlib as there's\n                 // no full crate graph to process, that'll happen later.\n@@ -1391,11 +1398,6 @@ fn execute_work_item(cgcx: &CodegenContext,\n             // settings.\n             let needs_lto = needs_lto && module.kind != ModuleKind::Metadata;\n \n-            // Don't run LTO passes when cross-lang LTO is enabled. The linker\n-            // will do that for us in this case.\n-            let needs_lto = needs_lto &&\n-                !cgcx.opts.debugging_opts.cross_lang_lto.enabled();\n-\n             if needs_lto {\n                 Ok(WorkItemResult::NeedsLTO(module))\n             } else {\n@@ -2375,8 +2377,18 @@ pub(crate) fn submit_codegened_module_to_llvm(tcx: TyCtxt,\n }\n \n fn msvc_imps_needed(tcx: TyCtxt) -> bool {\n+    // This should never be true (because it's not supported). If it is true,\n+    // something is wrong with commandline arg validation.\n+    assert!(!(tcx.sess.opts.debugging_opts.cross_lang_lto.enabled() &&\n+              tcx.sess.target.target.options.is_like_msvc &&\n+              tcx.sess.opts.cg.prefer_dynamic));\n+\n     tcx.sess.target.target.options.is_like_msvc &&\n-        tcx.sess.crate_types.borrow().iter().any(|ct| *ct == config::CrateType::Rlib)\n+        tcx.sess.crate_types.borrow().iter().any(|ct| *ct == config::CrateTypeRlib) &&\n+    // ThinLTO can't handle this workaround in all cases, so we don't\n+    // emit the `__imp_` symbols. Instead we make them unnecessary by disallowing\n+    // dynamic linking when cross-language LTO is enabled.\n+    !tcx.sess.opts.debugging_opts.cross_lang_lto.enabled()\n }\n \n // Create a `__imp_<symbol> = &symbol` global for every public static `symbol`."}, {"sha": "fafc0e723225d34eb54406870b0e92d1528b1ecb", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3a3b3317d99f0b72884002d1e4809bbe87356f8f/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a3b3317d99f0b72884002d1e4809bbe87356f8f/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=3a3b3317d99f0b72884002d1e4809bbe87356f8f", "patch": "@@ -189,7 +189,20 @@ pub fn get_static(cx: &CodegenCx<'ll, '_>, def_id: DefId) -> &'ll Value {\n             llvm::set_thread_local_mode(g, cx.tls_model);\n         }\n \n-        if cx.use_dll_storage_attrs && !cx.tcx.is_foreign_item(def_id) {\n+        let needs_dll_storage_attr =\n+            cx.use_dll_storage_attrs && !cx.tcx.is_foreign_item(def_id) &&\n+            // ThinLTO can't handle this workaround in all cases, so we don't\n+            // emit the attrs. Instead we make them unnecessary by disallowing\n+            // dynamic linking when cross-language LTO is enabled.\n+            !cx.tcx.sess.opts.debugging_opts.cross_lang_lto.enabled();\n+\n+        // If this assertion triggers, there's something wrong with commandline\n+        // argument validation.\n+        debug_assert!(!(cx.tcx.sess.opts.debugging_opts.cross_lang_lto.enabled() &&\n+                        cx.tcx.sess.target.target.options.is_like_msvc &&\n+                        cx.tcx.sess.opts.cg.prefer_dynamic));\n+\n+        if needs_dll_storage_attr {\n             // This item is external but not foreign, i.e. it originates from an external Rust\n             // crate. Since we don't know whether this crate will be linked dynamically or\n             // statically in the final application, we always mark such symbols as 'dllimport'."}]}