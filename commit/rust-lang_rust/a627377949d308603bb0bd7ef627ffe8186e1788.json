{"sha": "a627377949d308603bb0bd7ef627ffe8186e1788", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MjczNzc5NDlkMzA4NjAzYmIwYmQ3ZWY2MjdmZmU4MTg2ZTE3ODg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-19T12:13:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-19T12:13:21Z"}, "message": "Merge #8102\n\n8102: Cleanup qualify_path r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "6a8288ea62a10800f637ffbe14f182cd30d9194f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a8288ea62a10800f637ffbe14f182cd30d9194f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a627377949d308603bb0bd7ef627ffe8186e1788", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgVJVhCRBK7hj4Ov3rIwAAdHIIAEXCKNYSPywkfsBuFozkGc99\nsnduA6k/uB3316dok4nensnJC8ADEDKNjzYVfuKqzDgQSmpTrnpxOcGct1Lbb0EY\nN+u8Q1UJHChytJq5r4dPTzjWjdtR7Jh7yKbxTuTtMW+3QqeTixNZVNyaQaFmjcJt\naq1tSuYso8wtmBTe3XHDQfFr0EbL52xTe7KHUbmB8ouX+ffEw6XWhabuQKoI2Z4j\nncYIPby75jykW70GRl7VRGGvBjl4KtAnUp4yME3hx7YILhYVB6103pTnpVXUAqo7\n93h/5xPgT/nXgxkyNw1q/MhG/5Gr7olDBuCEOR/iFuJRB8QJnS0Sc3FITSlzZ0w=\n=3gzJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 6a8288ea62a10800f637ffbe14f182cd30d9194f\nparent 7200b994c9b1eeb97e80a3a64ca51ec452ab888b\nparent c34a9f10b161fce3017f2cdd6b31b92e314fa34b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1616156001 +0000\ncommitter GitHub <noreply@github.com> 1616156001 +0000\n\nMerge #8102\n\n8102: Cleanup qualify_path r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a627377949d308603bb0bd7ef627ffe8186e1788", "html_url": "https://github.com/rust-lang/rust/commit/a627377949d308603bb0bd7ef627ffe8186e1788", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a627377949d308603bb0bd7ef627ffe8186e1788/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7200b994c9b1eeb97e80a3a64ca51ec452ab888b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7200b994c9b1eeb97e80a3a64ca51ec452ab888b", "html_url": "https://github.com/rust-lang/rust/commit/7200b994c9b1eeb97e80a3a64ca51ec452ab888b"}, {"sha": "c34a9f10b161fce3017f2cdd6b31b92e314fa34b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c34a9f10b161fce3017f2cdd6b31b92e314fa34b", "html_url": "https://github.com/rust-lang/rust/commit/c34a9f10b161fce3017f2cdd6b31b92e314fa34b"}], "stats": {"total": 44, "additions": 17, "deletions": 27}, "files": [{"sha": "e7444f7dbbb0cc6630b826a390435b208adc63ba", "filename": "crates/ide_assists/src/handlers/qualify_path.rs", "status": "modified", "additions": 17, "deletions": 27, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a627377949d308603bb0bd7ef627ffe8186e1788/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a627377949d308603bb0bd7ef627ffe8186e1788/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs?ref=a627377949d308603bb0bd7ef627ffe8186e1788", "patch": "@@ -14,11 +14,10 @@ use syntax::{\n \n use crate::{\n     assist_context::{AssistContext, Assists},\n+    handlers::auto_import::find_importable_node,\n     AssistId, AssistKind, GroupLabel,\n };\n \n-use super::auto_import::find_importable_node;\n-\n // Assist: qualify_path\n //\n // If the name is unresolved, provides all possible qualified paths for it.\n@@ -43,22 +42,20 @@ pub(crate) fn qualify_path(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n         return None;\n     }\n \n-    let candidate = import_assets.import_candidate();\n     let range = ctx.sema.original_range(&syntax_under_caret).range;\n-\n+    let candidate = import_assets.import_candidate();\n     let qualify_candidate = match candidate {\n-        ImportCandidate::Path(candidate) => {\n-            if candidate.qualifier.is_some() {\n-                cov_mark::hit!(qualify_path_qualifier_start);\n-                let path = ast::Path::cast(syntax_under_caret)?;\n-                let (prev_segment, segment) = (path.qualifier()?.segment()?, path.segment()?);\n-                QualifyCandidate::QualifierStart(segment, prev_segment.generic_arg_list())\n-            } else {\n-                cov_mark::hit!(qualify_path_unqualified_name);\n-                let path = ast::Path::cast(syntax_under_caret)?;\n-                let generics = path.segment()?.generic_arg_list();\n-                QualifyCandidate::UnqualifiedName(generics)\n-            }\n+        ImportCandidate::Path(candidate) if candidate.qualifier.is_some() => {\n+            cov_mark::hit!(qualify_path_qualifier_start);\n+            let path = ast::Path::cast(syntax_under_caret)?;\n+            let (prev_segment, segment) = (path.qualifier()?.segment()?, path.segment()?);\n+            QualifyCandidate::QualifierStart(segment, prev_segment.generic_arg_list())\n+        }\n+        ImportCandidate::Path(_) => {\n+            cov_mark::hit!(qualify_path_unqualified_name);\n+            let path = ast::Path::cast(syntax_under_caret)?;\n+            let generics = path.segment()?.generic_arg_list();\n+            QualifyCandidate::UnqualifiedName(generics)\n         }\n         ImportCandidate::TraitAssocItem(_) => {\n             cov_mark::hit!(qualify_path_trait_assoc_item);\n@@ -119,7 +116,7 @@ impl QualifyCandidate<'_> {\n             QualifyCandidate::TraitAssocItem(qualifier, segment) => {\n                 replacer(format!(\"<{} as {}>::{}\", qualifier, import, segment));\n             }\n-            &QualifyCandidate::TraitMethod(db, ref mcall_expr) => {\n+            QualifyCandidate::TraitMethod(db, mcall_expr) => {\n                 Self::qualify_trait_method(db, mcall_expr, replacer, import, item);\n             }\n         }\n@@ -201,17 +198,10 @@ fn group_label(candidate: &ImportCandidate) -> GroupLabel {\n \n fn label(candidate: &ImportCandidate, import: &LocatedImport) -> String {\n     match candidate {\n-        ImportCandidate::Path(candidate) => {\n-            if candidate.qualifier.is_some() {\n-                format!(\"Qualify with `{}`\", import.import_path)\n-            } else {\n-                format!(\"Qualify as `{}`\", import.import_path)\n-            }\n-        }\n-        ImportCandidate::TraitAssocItem(_) => {\n-            format!(\"Qualify with `{}`\", import.import_path)\n+        ImportCandidate::Path(candidate) if candidate.qualifier.is_none() => {\n+            format!(\"Qualify as `{}`\", import.import_path)\n         }\n-        ImportCandidate::TraitMethod(_) => format!(\"Qualify with `{}`\", import.import_path),\n+        _ => format!(\"Qualify with `{}`\", import.import_path),\n     }\n }\n "}]}