{"sha": "ddfe24d641261638961448959a07326dde09ef4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkZmUyNGQ2NDEyNjE2Mzg5NjE0NDg5NTlhMDczMjZkZGUwOWVmNGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-20T10:17:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-20T10:17:09Z"}, "message": "auto merge of #18174 : huonw/rust/fix-sqrt, r=alexcrichton\n\nCloses #9987.", "tree": {"sha": "dd420ba7bcb3a774626de41e2c82856321916d6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd420ba7bcb3a774626de41e2c82856321916d6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddfe24d641261638961448959a07326dde09ef4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddfe24d641261638961448959a07326dde09ef4d", "html_url": "https://github.com/rust-lang/rust/commit/ddfe24d641261638961448959a07326dde09ef4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddfe24d641261638961448959a07326dde09ef4d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "045bc283eceb414caeea28797b9b610bd33f33ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/045bc283eceb414caeea28797b9b610bd33f33ac", "html_url": "https://github.com/rust-lang/rust/commit/045bc283eceb414caeea28797b9b610bd33f33ac"}, {"sha": "a1d5cd204d75156ea520c361da6dbb45b926b4d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1d5cd204d75156ea520c361da6dbb45b926b4d0", "html_url": "https://github.com/rust-lang/rust/commit/a1d5cd204d75156ea520c361da6dbb45b926b4d0"}], "stats": {"total": 37, "additions": 34, "deletions": 3}, "files": [{"sha": "bf362928f61c3e2283979dcc2f751f89470d64c4", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddfe24d641261638961448959a07326dde09ef4d/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddfe24d641261638961448959a07326dde09ef4d/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=ddfe24d641261638961448959a07326dde09ef4d", "patch": "@@ -259,7 +259,11 @@ impl Float for f32 {\n \n     #[inline]\n     fn sqrt(self) -> f32 {\n-        unsafe { intrinsics::sqrtf32(self) }\n+        if self < 0.0 {\n+            NAN\n+        } else {\n+            unsafe { intrinsics::sqrtf32(self) }\n+        }\n     }\n \n     #[inline]"}, {"sha": "5ad2e2f9f8b59b70761a1b11a32fd3f756606c40", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ddfe24d641261638961448959a07326dde09ef4d/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddfe24d641261638961448959a07326dde09ef4d/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=ddfe24d641261638961448959a07326dde09ef4d", "patch": "@@ -266,7 +266,11 @@ impl Float for f64 {\n \n     #[inline]\n     fn sqrt(self) -> f64 {\n-        unsafe { intrinsics::sqrtf64(self) }\n+        if self < 0.0 {\n+            NAN\n+        } else {\n+            unsafe { intrinsics::sqrtf64(self) }\n+        }\n     }\n \n     #[inline]\n@@ -377,4 +381,3 @@ impl Float for f64 {\n         self * (value / 180.0)\n     }\n }\n-"}, {"sha": "42ea138acd4dcec41f9cd4b36d4a33baa34b9746", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddfe24d641261638961448959a07326dde09ef4d/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddfe24d641261638961448959a07326dde09ef4d/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=ddfe24d641261638961448959a07326dde09ef4d", "patch": "@@ -1501,6 +1501,8 @@ pub trait Float: Signed + Primitive {\n     fn frac_1_sqrt2() -> Self;\n \n     /// Take the square root of a number.\n+    ///\n+    /// Returns NaN if `self` is not a non-negative number.\n     fn sqrt(self) -> Self;\n     /// Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.\n     fn rsqrt(self) -> Self;"}, {"sha": "f98e81bb2c878c5d55847655ec82ebaaa0e0a4a3", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ddfe24d641261638961448959a07326dde09ef4d/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddfe24d641261638961448959a07326dde09ef4d/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=ddfe24d641261638961448959a07326dde09ef4d", "patch": "@@ -787,4 +787,15 @@ mod tests {\n         assert_eq!(NEG_INFINITY.integer_decode(), (8388608u64, 105i16, -1i8));\n         assert_eq!(NAN.integer_decode(), (12582912u64, 105i16, 1i8));\n     }\n+\n+    #[test]\n+    fn test_sqrt_domain() {\n+        assert!(NAN.sqrt().is_nan());\n+        assert!(NEG_INFINITY.sqrt().is_nan());\n+        assert!((-1.0f32).sqrt().is_nan());\n+        assert_eq!((-0.0f32).sqrt(), -0.0);\n+        assert_eq!(0.0f32.sqrt(), 0.0);\n+        assert_eq!(1.0f32.sqrt(), 1.0);\n+        assert_eq!(INFINITY.sqrt(), INFINITY);\n+    }\n }"}, {"sha": "5a5ca65a36de3cf83a3da627bd139604f72e6209", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ddfe24d641261638961448959a07326dde09ef4d/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddfe24d641261638961448959a07326dde09ef4d/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=ddfe24d641261638961448959a07326dde09ef4d", "patch": "@@ -789,4 +789,15 @@ mod tests {\n         assert_eq!(NEG_INFINITY.integer_decode(), (4503599627370496, 972, -1));\n         assert_eq!(NAN.integer_decode(), (6755399441055744u64, 972i16, 1i8));\n     }\n+\n+    #[test]\n+    fn test_sqrt_domain() {\n+        assert!(NAN.sqrt().is_nan());\n+        assert!(NEG_INFINITY.sqrt().is_nan());\n+        assert!((-1.0f64).sqrt().is_nan());\n+        assert_eq!((-0.0f64).sqrt(), -0.0);\n+        assert_eq!(0.0f64.sqrt(), 0.0);\n+        assert_eq!(1.0f64.sqrt(), 1.0);\n+        assert_eq!(INFINITY.sqrt(), INFINITY);\n+    }\n }"}]}