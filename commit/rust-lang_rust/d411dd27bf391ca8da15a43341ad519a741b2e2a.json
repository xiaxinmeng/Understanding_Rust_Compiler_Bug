{"sha": "d411dd27bf391ca8da15a43341ad519a741b2e2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0MTFkZDI3YmYzOTFjYThkYTE1YTQzMzQxYWQ1MTlhNzQxYjJlMmE=", "commit": {"author": {"name": "CreepySkeleton", "email": "creepy-skeleton@yandex.ru", "date": "2019-11-13T17:43:45Z"}, "committer": {"name": "CreepySkeleton", "email": "creepy-skeleton@yandex.ru", "date": "2019-11-27T18:33:24Z"}, "message": "Elaborate on std::ptr::{as_ref,as_mod} and clarify docs", "tree": {"sha": "303a8def8e9e91328c60a2ee012dbf439d509c27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/303a8def8e9e91328c60a2ee012dbf439d509c27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d411dd27bf391ca8da15a43341ad519a741b2e2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d411dd27bf391ca8da15a43341ad519a741b2e2a", "html_url": "https://github.com/rust-lang/rust/commit/d411dd27bf391ca8da15a43341ad519a741b2e2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d411dd27bf391ca8da15a43341ad519a741b2e2a/comments", "author": {"login": "CreepySkeleton", "id": 50968528, "node_id": "MDQ6VXNlcjUwOTY4NTI4", "avatar_url": "https://avatars.githubusercontent.com/u/50968528?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CreepySkeleton", "html_url": "https://github.com/CreepySkeleton", "followers_url": "https://api.github.com/users/CreepySkeleton/followers", "following_url": "https://api.github.com/users/CreepySkeleton/following{/other_user}", "gists_url": "https://api.github.com/users/CreepySkeleton/gists{/gist_id}", "starred_url": "https://api.github.com/users/CreepySkeleton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CreepySkeleton/subscriptions", "organizations_url": "https://api.github.com/users/CreepySkeleton/orgs", "repos_url": "https://api.github.com/users/CreepySkeleton/repos", "events_url": "https://api.github.com/users/CreepySkeleton/events{/privacy}", "received_events_url": "https://api.github.com/users/CreepySkeleton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CreepySkeleton", "id": 50968528, "node_id": "MDQ6VXNlcjUwOTY4NTI4", "avatar_url": "https://avatars.githubusercontent.com/u/50968528?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CreepySkeleton", "html_url": "https://github.com/CreepySkeleton", "followers_url": "https://api.github.com/users/CreepySkeleton/followers", "following_url": "https://api.github.com/users/CreepySkeleton/following{/other_user}", "gists_url": "https://api.github.com/users/CreepySkeleton/gists{/gist_id}", "starred_url": "https://api.github.com/users/CreepySkeleton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CreepySkeleton/subscriptions", "organizations_url": "https://api.github.com/users/CreepySkeleton/orgs", "repos_url": "https://api.github.com/users/CreepySkeleton/repos", "events_url": "https://api.github.com/users/CreepySkeleton/events{/privacy}", "received_events_url": "https://api.github.com/users/CreepySkeleton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "695fe965173795f9242dfcad6d1c07d7a17b106a", "url": "https://api.github.com/repos/rust-lang/rust/commits/695fe965173795f9242dfcad6d1c07d7a17b106a", "html_url": "https://github.com/rust-lang/rust/commit/695fe965173795f9242dfcad6d1c07d7a17b106a"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "21314d429c6dad64bb855ae0cf6e089e19b4b33d", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d411dd27bf391ca8da15a43341ad519a741b2e2a/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d411dd27bf391ca8da15a43341ad519a741b2e2a/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=d411dd27bf391ca8da15a43341ad519a741b2e2a", "patch": "@@ -1074,17 +1074,22 @@ impl<T: ?Sized> *const T {\n     /// operation because the returned value could be pointing to invalid\n     /// memory.\n     ///\n-    /// When calling this method, you have to ensure that if the pointer is\n-    /// non-NULL, then it is properly aligned, dereferencable (for the whole\n-    /// size of `T`) and points to an initialized instance of `T`. This applies\n-    /// even if the result of this method is unused!\n+    /// When calling this method, you have to ensure that *either* the pointer is NULL *or*\n+    /// all of the following is true:\n+    /// - it is properly aligned\n+    /// - it must point to an initialized instance of T; in particular, the pointer must be\n+    ///   \"dereferencable\" in the sense defined [here].\n+    ///\n+    /// This applies even if the result of this method is unused!\n     /// (The part about being initialized is not yet fully decided, but until\n     /// it is, the only safe approach is to ensure that they are indeed initialized.)\n     ///\n     /// Additionally, the lifetime `'a` returned is arbitrarily chosen and does\n-    /// not necessarily reflect the actual lifetime of the data. It is up to the\n-    /// caller to ensure that for the duration of this lifetime, the memory this\n-    /// pointer points to does not get written to outside of `UnsafeCell<U>`.\n+    /// not necessarily reflect the actual lifetime of the data. *You* must enforce\n+    /// Rust's aliasing rules. In particular, for the duration of this lifetime,\n+    /// the memory the pointer points to must not get mutated (except inside `UnsafeCell`).\n+    ///\n+    /// [here]: https://doc.rust-lang.org/std/ptr/index.html#safety\n     ///\n     /// # Examples\n     ///\n@@ -1929,18 +1934,23 @@ impl<T: ?Sized> *mut T {\n     /// of the returned pointer, nor can it ensure that the lifetime `'a`\n     /// returned is indeed a valid lifetime for the contained data.\n     ///\n-    /// When calling this method, you have to ensure that if the pointer is\n-    /// non-NULL, then it is properly aligned, dereferencable (for the whole\n-    /// size of `T`) and points to an initialized instance of `T`. This applies\n-    /// even if the result of this method is unused!\n+    /// When calling this method, you have to ensure that *either* the pointer is NULL *or*\n+    /// all of the following is true:\n+    /// - it is properly aligned\n+    /// - it must point to an initialized instance of T; in particular, the pointer must be\n+    ///   \"dereferencable\" in the sense defined [here].\n+    ///\n+    /// This applies even if the result of this method is unused!\n     /// (The part about being initialized is not yet fully decided, but until\n     /// it is the only safe approach is to ensure that they are indeed initialized.)\n     ///\n     /// Additionally, the lifetime `'a` returned is arbitrarily chosen and does\n-    /// not necessarily reflect the actual lifetime of the data. It is up to the\n-    /// caller to ensure that for the duration of this lifetime, the memory this\n-    /// pointer points to does not get accessed through any other pointer.\n+    /// not necessarily reflect the actual lifetime of the data. *You* must enforce\n+    /// Rust's aliasing rules. In particular, for the duration of this lifetime,\n+    /// the memory this pointer points to must not get accessed (read or written)\n+    /// through any other pointer.\n     ///\n+    /// [here]: https://doc.rust-lang.org/std/ptr/index.html#safety\n     /// [`as_ref`]: #method.as_ref\n     ///\n     /// # Examples"}]}