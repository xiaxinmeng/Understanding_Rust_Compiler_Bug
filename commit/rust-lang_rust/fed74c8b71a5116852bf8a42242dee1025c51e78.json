{"sha": "fed74c8b71a5116852bf8a42242dee1025c51e78", "node_id": "C_kwDOAAsO6NoAKGZlZDc0YzhiNzFhNTExNjg1MmJmOGE0MjI0MmRlZTEwMjVjNTFlNzg", "commit": {"author": {"name": "rami3l", "email": "rami3l@outlook.com", "date": "2022-12-06T13:40:45Z"}, "committer": {"name": "rami3l", "email": "rami3l@outlook.com", "date": "2022-12-06T13:54:53Z"}, "message": "fix: add fallback case in generated `PartialEq` impl", "tree": {"sha": "32dd55ff97c51b6ae66c70ddd9e5732f57949f6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32dd55ff97c51b6ae66c70ddd9e5732f57949f6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fed74c8b71a5116852bf8a42242dee1025c51e78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fed74c8b71a5116852bf8a42242dee1025c51e78", "html_url": "https://github.com/rust-lang/rust/commit/fed74c8b71a5116852bf8a42242dee1025c51e78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fed74c8b71a5116852bf8a42242dee1025c51e78/comments", "author": {"login": "rami3l", "id": 33851577, "node_id": "MDQ6VXNlcjMzODUxNTc3", "avatar_url": "https://avatars.githubusercontent.com/u/33851577?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rami3l", "html_url": "https://github.com/rami3l", "followers_url": "https://api.github.com/users/rami3l/followers", "following_url": "https://api.github.com/users/rami3l/following{/other_user}", "gists_url": "https://api.github.com/users/rami3l/gists{/gist_id}", "starred_url": "https://api.github.com/users/rami3l/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rami3l/subscriptions", "organizations_url": "https://api.github.com/users/rami3l/orgs", "repos_url": "https://api.github.com/users/rami3l/repos", "events_url": "https://api.github.com/users/rami3l/events{/privacy}", "received_events_url": "https://api.github.com/users/rami3l/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rami3l", "id": 33851577, "node_id": "MDQ6VXNlcjMzODUxNTc3", "avatar_url": "https://avatars.githubusercontent.com/u/33851577?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rami3l", "html_url": "https://github.com/rami3l", "followers_url": "https://api.github.com/users/rami3l/followers", "following_url": "https://api.github.com/users/rami3l/following{/other_user}", "gists_url": "https://api.github.com/users/rami3l/gists{/gist_id}", "starred_url": "https://api.github.com/users/rami3l/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rami3l/subscriptions", "organizations_url": "https://api.github.com/users/rami3l/orgs", "repos_url": "https://api.github.com/users/rami3l/repos", "events_url": "https://api.github.com/users/rami3l/events{/privacy}", "received_events_url": "https://api.github.com/users/rami3l/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df07c8fafa78ace4c4d2ded82d561f76a35e0ade", "url": "https://api.github.com/repos/rust-lang/rust/commits/df07c8fafa78ace4c4d2ded82d561f76a35e0ade", "html_url": "https://github.com/rust-lang/rust/commit/df07c8fafa78ace4c4d2ded82d561f76a35e0ade"}], "stats": {"total": 40, "additions": 33, "deletions": 7}, "files": [{"sha": "a1ca2861215685416af614e7b170fda06f5f5b59", "filename": "crates/ide-assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/fed74c8b71a5116852bf8a42242dee1025c51e78/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed74c8b71a5116852bf8a42242dee1025c51e78/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=fed74c8b71a5116852bf8a42242dee1025c51e78", "patch": "@@ -907,7 +907,7 @@ impl PartialEq for Foo {\n     }\n \n     #[test]\n-    fn add_custom_impl_partial_eq_tuple_enum() {\n+    fn add_custom_impl_partial_eq_partial_tuple_enum() {\n         check_assist(\n             replace_derive_with_manual_impl,\n             r#\"\n@@ -936,6 +936,37 @@ impl PartialEq for Foo {\n         )\n     }\n \n+    #[test]\n+    fn add_custom_impl_partial_eq_tuple_enum() {\n+        check_assist(\n+            replace_derive_with_manual_impl,\n+            r#\"\n+//- minicore: eq, derive\n+#[derive(Partial$0Eq)]\n+enum Foo {\n+    Bar(String),\n+    Baz(i32),\n+}\n+\"#,\n+            r#\"\n+enum Foo {\n+    Bar(String),\n+    Baz(i32),\n+}\n+\n+impl PartialEq for Foo {\n+    $0fn eq(&self, other: &Self) -> bool {\n+        match (self, other) {\n+            (Self::Bar(l0), Self::Bar(r0)) => l0 == r0,\n+            (Self::Baz(l0), Self::Baz(r0)) => l0 == r0,\n+            _ => core::mem::discriminant(self) == core::mem::discriminant(other),\n+        }\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n     #[test]\n     fn add_custom_impl_partial_eq_record_enum() {\n         check_assist("}, {"sha": "287001af84fca7d91baa5367dcc85ec567ccf7b1", "filename": "crates/ide-assists/src/utils/gen_trait_fn_body.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fed74c8b71a5116852bf8a42242dee1025c51e78/crates%2Fide-assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed74c8b71a5116852bf8a42242dee1025c51e78/crates%2Fide-assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs?ref=fed74c8b71a5116852bf8a42242dee1025c51e78", "patch": "@@ -439,10 +439,8 @@ fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n             let eq_check =\n                 make::expr_bin_op(lhs, BinaryOp::CmpOp(CmpOp::Eq { negated: false }), rhs);\n \n-            let mut n_cases = 0;\n             let mut arms = vec![];\n             for variant in enum_.variant_list()?.variants() {\n-                n_cases += 1;\n                 match variant.field_list() {\n                     // => (Self::Bar { bin: l_bin }, Self::Bar { bin: r_bin }) => l_bin == r_bin,\n                     Some(ast::FieldList::RecordFieldList(list)) => {\n@@ -517,10 +515,7 @@ fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n             let expr = match arms.len() {\n                 0 => eq_check,\n                 _ => {\n-                    if n_cases > arms.len() {\n-                        let lhs = make::wildcard_pat().into();\n-                        arms.push(make::match_arm(Some(lhs), None, eq_check));\n-                    }\n+                    arms.push(make::match_arm(Some(make::wildcard_pat().into()), None, eq_check));\n \n                     let match_target = make::expr_tuple(vec![lhs_name, rhs_name]);\n                     let list = make::match_arm_list(arms).indent(ast::edit::IndentLevel(1));"}]}