{"sha": "0d4902f12f2630ababe056b167ad20eb0633bb01", "node_id": "C_kwDOAAsO6NoAKDBkNDkwMmYxMmYyNjMwYWJhYmUwNTZiMTY3YWQyMGViMDYzM2JiMDE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-03T19:54:54Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-03T19:54:54Z"}, "message": "implement simd_neg and simd_fabs", "tree": {"sha": "52a1a15953c2b8fadae2d7d98c0e53d2fe9d1be8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52a1a15953c2b8fadae2d7d98c0e53d2fe9d1be8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d4902f12f2630ababe056b167ad20eb0633bb01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d4902f12f2630ababe056b167ad20eb0633bb01", "html_url": "https://github.com/rust-lang/rust/commit/0d4902f12f2630ababe056b167ad20eb0633bb01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d4902f12f2630ababe056b167ad20eb0633bb01/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0147b88ce59cb44cd854c7033a5663e43479e612", "url": "https://api.github.com/repos/rust-lang/rust/commits/0147b88ce59cb44cd854c7033a5663e43479e612", "html_url": "https://github.com/rust-lang/rust/commit/0147b88ce59cb44cd854c7033a5663e43479e612"}], "stats": {"total": 67, "additions": 58, "deletions": 9}, "files": [{"sha": "9542fb9b96355228e0391359d4d44dfb9c374a3e", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d4902f12f2630ababe056b167ad20eb0633bb01/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d4902f12f2630ababe056b167ad20eb0633bb01/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=0d4902f12f2630ababe056b167ad20eb0633bb01", "patch": "@@ -3,6 +3,7 @@\n #![feature(map_try_insert)]\n #![feature(never_type)]\n #![feature(try_blocks)]\n+#![feature(let_else)]\n #![feature(bool_to_option)]\n #![warn(rust_2018_idioms)]\n #![allow(clippy::cast_lossless)]"}, {"sha": "f713721f58409fa57d6f1b8bf036a1bb645cfae7", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0d4902f12f2630ababe056b167ad20eb0633bb01/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d4902f12f2630ababe056b167ad20eb0633bb01/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=0d4902f12f2630ababe056b167ad20eb0633bb01", "patch": "@@ -316,6 +316,37 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // SIMD operations\n             #[rustfmt::skip]\n+            | \"simd_neg\"\n+            | \"simd_fabs\" => {\n+                let &[ref op] = check_arg_count(args)?;\n+                let (op, op_len) = this.operand_to_simd(op)?;\n+                let (dest, dest_len) = this.place_to_simd(dest)?;\n+\n+                assert_eq!(dest_len, op_len);\n+\n+                for i in 0..dest_len {\n+                    let op = this.read_immediate(&this.mplace_index(&op, i)?.into())?;\n+                    let dest = this.mplace_index(&dest, i)?;\n+                    let val = match intrinsic_name {\n+                        \"simd_neg\" => this.unary_op(mir::UnOp::Neg, &op)?.to_scalar()?,\n+                        \"simd_fabs\" => {\n+                            // Works for f32 and f64.\n+                            let ty::Float(float_ty) = op.layout.ty.kind() else {\n+                                bug!(\"simd_fabs operand is not a float\")\n+                            };\n+                            let op = op.to_scalar()?;\n+                            // FIXME: Using host floats.\n+                            match float_ty {\n+                                FloatTy::F32 => Scalar::from_f32(op.to_f32()?.abs()),\n+                                FloatTy::F64 => Scalar::from_f64(op.to_f64()?.abs()),\n+                            }\n+                        }\n+                        _ => bug!(),\n+                    };\n+                    this.write_scalar(val, &dest.into())?;\n+                }\n+            }\n+            #[rustfmt::skip]\n             | \"simd_add\"\n             | \"simd_sub\"\n             | \"simd_mul\"\n@@ -374,12 +405,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 }\n             }\n             \"simd_reduce_any\" => {\n-                let &[ref arg] = check_arg_count(args)?;\n-                let (arg, arg_len) = this.operand_to_simd(arg)?;\n+                let &[ref op] = check_arg_count(args)?;\n+                let (op, op_len) = this.operand_to_simd(op)?;\n \n                 let mut res = false; // the neutral element\n-                for i in 0..arg_len {\n-                    let op = this.read_immediate(&this.mplace_index(&arg, i)?.into())?;\n+                for i in 0..op_len {\n+                    let op = this.read_immediate(&this.mplace_index(&op, i)?.into())?;\n                     let val = simd_element_to_bool(op)?;\n                     res = res | val;\n                 }"}, {"sha": "c0c1ecd0235aa43c8debd74277e821c056e3bb2e", "filename": "tests/run-pass/portable-simd.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0d4902f12f2630ababe056b167ad20eb0633bb01/tests%2Frun-pass%2Fportable-simd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d4902f12f2630ababe056b167ad20eb0633bb01/tests%2Frun-pass%2Fportable-simd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fportable-simd.rs?ref=0d4902f12f2630ababe056b167ad20eb0633bb01", "patch": "@@ -3,18 +3,34 @@ use std::simd::*;\n \n fn simd_ops_f32() {\n     let a = f32x4::splat(10.0);\n-    let b = f32x4::from_array([1.0, 2.0, 3.0, 4.0]);\n-    assert_eq!(a + b, f32x4::from_array([11.0, 12.0, 13.0, 14.0]));\n-    assert_eq!(a - b, f32x4::from_array([9.0, 8.0, 7.0, 6.0]));\n-    assert_eq!(a * b, f32x4::from_array([10.0, 20.0, 30.0, 40.0]));\n-    assert_eq!(b / a, f32x4::from_array([0.1, 0.2, 0.3, 0.4]));\n+    let b = f32x4::from_array([1.0, 2.0, 3.0, -4.0]);\n+    assert_eq!(-b, f32x4::from_array([-1.0, -2.0, -3.0, 4.0]));\n+    assert_eq!(a + b, f32x4::from_array([11.0, 12.0, 13.0, 6.0]));\n+    assert_eq!(a - b, f32x4::from_array([9.0, 8.0, 7.0, 14.0]));\n+    assert_eq!(a * b, f32x4::from_array([10.0, 20.0, 30.0, -40.0]));\n+    assert_eq!(b / a, f32x4::from_array([0.1, 0.2, 0.3, -0.4]));\n     assert_eq!(a / f32x4::splat(2.0), f32x4::splat(5.0));\n     assert_eq!(a % b, f32x4::from_array([0.0, 0.0, 1.0, 2.0]));\n+    assert_eq!(b.abs(), f32x4::from_array([1.0, 2.0, 3.0, 4.0]));\n+}\n+\n+fn simd_ops_f64() {\n+    let a = f64x4::splat(10.0);\n+    let b = f64x4::from_array([1.0, 2.0, 3.0, -4.0]);\n+    assert_eq!(-b, f64x4::from_array([-1.0, -2.0, -3.0, 4.0]));\n+    assert_eq!(a + b, f64x4::from_array([11.0, 12.0, 13.0, 6.0]));\n+    assert_eq!(a - b, f64x4::from_array([9.0, 8.0, 7.0, 14.0]));\n+    assert_eq!(a * b, f64x4::from_array([10.0, 20.0, 30.0, -40.0]));\n+    assert_eq!(b / a, f64x4::from_array([0.1, 0.2, 0.3, -0.4]));\n+    assert_eq!(a / f64x4::splat(2.0), f64x4::splat(5.0));\n+    assert_eq!(a % b, f64x4::from_array([0.0, 0.0, 1.0, 2.0]));\n+    assert_eq!(b.abs(), f64x4::from_array([1.0, 2.0, 3.0, 4.0]));\n }\n \n fn simd_ops_i32() {\n     let a = i32x4::splat(10);\n     let b = i32x4::from_array([1, 2, 3, 4]);\n+    assert_eq!(-b, i32x4::from_array([-1, -2, -3, -4]));\n     assert_eq!(a + b, i32x4::from_array([11, 12, 13, 14]));\n     assert_eq!(a - b, i32x4::from_array([9, 8, 7, 6]));\n     assert_eq!(a * b, i32x4::from_array([10, 20, 30, 40]));\n@@ -52,6 +68,7 @@ fn simd_intrinsics() {\n \n fn main() {\n     simd_ops_f32();\n+    simd_ops_f64();\n     simd_ops_i32();\n     simd_intrinsics();\n }"}]}