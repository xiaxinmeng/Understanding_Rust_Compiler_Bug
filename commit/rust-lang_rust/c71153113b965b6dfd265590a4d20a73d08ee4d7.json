{"sha": "c71153113b965b6dfd265590a4d20a73d08ee4d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MTE1MzExM2I5NjViNmRmZDI2NTU5MGE0ZDIwYTczZDA4ZWU0ZDc=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-08-24T22:57:08Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-08-25T17:19:42Z"}, "message": "Add some comments and fix a typo", "tree": {"sha": "c0be4f00230c5e69c5518f63eaa1c9d8d0784f9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0be4f00230c5e69c5518f63eaa1c9d8d0784f9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c71153113b965b6dfd265590a4d20a73d08ee4d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c71153113b965b6dfd265590a4d20a73d08ee4d7", "html_url": "https://github.com/rust-lang/rust/commit/c71153113b965b6dfd265590a4d20a73d08ee4d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c71153113b965b6dfd265590a4d20a73d08ee4d7/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4c54715cddc8f2e3fc8b420cc7c93ef55ae0d33", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4c54715cddc8f2e3fc8b420cc7c93ef55ae0d33", "html_url": "https://github.com/rust-lang/rust/commit/b4c54715cddc8f2e3fc8b420cc7c93ef55ae0d33"}], "stats": {"total": 69, "additions": 64, "deletions": 5}, "files": [{"sha": "da375e791bc4b1f7ce59f7edf52dc59cf5ce5e4f", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c71153113b965b6dfd265590a4d20a73d08ee4d7/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71153113b965b6dfd265590a4d20a73d08ee4d7/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=c71153113b965b6dfd265590a4d20a73d08ee4d7", "patch": "@@ -191,7 +191,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                           .map(|upvar| unpack!(block = this.as_operand(block, scope, upvar)))\n                           .collect();\n                 let result = if let Some(interior) = interior {\n-                    // Add the state operand\n+                    // Add the state operand since it follows the upvars in the generator\n+                    // struct. See librustc_mir/transform/generator.rs for more details.\n                     operands.push(Operand::Constant(box Constant {\n                         span: expr_span,\n                         ty: this.hir.tcx().types.u32,"}, {"sha": "9bc572c66b6f87c17897250617fe518f3d671720", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 53, "deletions": 3, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c71153113b965b6dfd265590a4d20a73d08ee4d7/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71153113b965b6dfd265590a4d20a73d08ee4d7/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=c71153113b965b6dfd265590a4d20a73d08ee4d7", "patch": "@@ -8,7 +8,57 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Transforms generators into state machines\n+//! This is the implementation of the pass which transforms generators into state machines.\n+//!\n+//! MIR generation for generators creates a function which has a self argument which\n+//! passes by value. This argument is effectively a generator type which only contains upvars and\n+//! is only used for this argument inside the MIR for the generator.\n+//! It is passed by value to enable upvars to be moved out of it. Drop elaboration runs on that\n+//! MIR before this pass and creates drop flags for MIR locals.\n+//! It will also drop the generator argument (which only consists of upvars) if any of the upvars\n+//! are moved out of. This pass elaborates the drops of upvars / generator argument in the case\n+//! that none of the upvars were moved out of. This is because we cannot have any drops of this\n+//! generator in the MIR, since it is used to create the drop glue for the generator. We'd get\n+//! infinite recursion otherwise.\n+//!\n+//! This pass creates the implementation for the Generator::resume function and the drop shim\n+//! for the generator based on the MIR input. It converts the generator argument from Self to\n+//! &mut Self adding derefs in the MIR as needed. It computes the final layout of the generator\n+//! struct which looks like this:\n+//!     First upvars are stored\n+//!     It is followed by the generator state field.\n+//!     Then finally the MIR locals which are live across a suspension point are stored.\n+//!\n+//!     struct Generator {\n+//!         upvars...,\n+//!         state: u32,\n+//!         mir_locals...,\n+//!     }\n+//!\n+//! This pass computes the meaning of the state field and the MIR locals which are live\n+//! across a suspension point. There are however two hardcoded generator states:\n+//!     0 - Generator have not been resumed yet\n+//!     1 - Generator has been poisoned\n+//!\n+//! It also rewrites `return x` and `yield y` as setting a new generator state and returning\n+//! GeneratorState::Complete(x) and GeneratorState::Yielded(y) respectively.\n+//! MIR locals which are live across a suspension point are moved to the generator struct\n+//! with references to them being updated with references to the generator struct.\n+//!\n+//! The pass creates two functions which have a switch on the generator state giving\n+//! the action to take.\n+//!\n+//! One of them is the implementation of Generator::resume.\n+//! For generators which have already returned it panics.\n+//! For generators with state 0 (unresumed) it starts the execution of the generator.\n+//! For generators with state 1 (poisoned) it panics.\n+//! Otherwise it continues the execution from the last suspension point.\n+//!\n+//! The other function is the drop glue for the generator.\n+//! For generators which have already returned it does nothing.\n+//! For generators with state 0 (unresumed) it drops the upvars of the generator.\n+//! For generators with state 1 (poisoned) it does nothing.\n+//! Otherwise it drops all the values in scope at the last suspension point.\n \n use rustc::hir;\n use rustc::hir::def_id::DefId;\n@@ -515,7 +565,7 @@ fn insert_panic_on_resume_after_return<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     });\n }\n \n-fn creator_generator_resume_function<'a, 'tcx>(\n+fn create_generator_resume_function<'a, 'tcx>(\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         mut transform: TransformVisitor<'a, 'tcx>,\n         def_id: DefId,\n@@ -731,6 +781,6 @@ impl MirPass for StateTransform {\n         mir.generator_drop = Some(box drop_shim);\n \n         // Create the Generator::resume function\n-        creator_generator_resume_function(tcx, transform, def_id, source, mir);\n+        create_generator_resume_function(tcx, transform, def_id, source, mir);\n     }\n }"}, {"sha": "41618960337be7a0d0b9ee50c13ecf930f42fc31", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c71153113b965b6dfd265590a4d20a73d08ee4d7/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71153113b965b6dfd265590a4d20a73d08ee4d7/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=c71153113b965b6dfd265590a4d20a73d08ee4d7", "patch": "@@ -752,10 +752,13 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n     fn open_drop<'a>(&mut self) -> BasicBlock {\n         let ty = self.lvalue_ty(self.lvalue);\n         match ty.sty {\n+            ty::TyClosure(def_id, substs) |\n             // Note that `elaborate_drops` only drops the upvars of a generator,\n             // and this is ok because `open_drop` here can only be reached\n             // within that own generator's resume function.\n-            ty::TyClosure(def_id, substs) |\n+            // This should only happen for the self argument on the resume function.\n+            // It effetively only contains upvars until the generator transformation runs.\n+            // See librustc_mir/transform/generator.rs for more details.\n             ty::TyGenerator(def_id, substs, _) => {\n                 let tys : Vec<_> = substs.upvar_tys(def_id, self.tcx()).collect();\n                 self.open_drop_for_tuple(&tys)"}, {"sha": "e9d400c64393b5ac7d60f0bb79137cbbe74cb689", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c71153113b965b6dfd265590a4d20a73d08ee4d7/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71153113b965b6dfd265590a4d20a73d08ee4d7/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=c71153113b965b6dfd265590a4d20a73d08ee4d7", "patch": "@@ -8,6 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+//! This calculates the types which has storage which lives across a suspension point in a\n+//! generator from the perspective of typeck. The actual types used at runtime\n+//! is calculated in `rustc_mir::transform::generator` and may be a subset of the\n+//! types computed here.\n+\n use log;\n use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};"}]}