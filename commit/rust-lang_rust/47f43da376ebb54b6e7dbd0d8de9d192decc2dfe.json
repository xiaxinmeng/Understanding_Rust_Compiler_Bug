{"sha": "47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3ZjQzZGEzNzZlYmI1NGI2ZTdkYmQwZDhkZTlkMTkyZGVjYzJkZmU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-07-02T22:31:33Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-07-02T22:31:33Z"}, "message": "Merge branch 'doc-comments'", "tree": {"sha": "8ff5efbf09add7d7ef26627c1e2af8068f210bc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ff5efbf09add7d7ef26627c1e2af8068f210bc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "html_url": "https://github.com/rust-lang/rust/commit/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a4ebcefcb6294af590cfd3262845b2d61303df7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a4ebcefcb6294af590cfd3262845b2d61303df7", "html_url": "https://github.com/rust-lang/rust/commit/7a4ebcefcb6294af590cfd3262845b2d61303df7"}, {"sha": "569467eb0d110dd299cb2efcce13e998d1d9c11f", "url": "https://api.github.com/repos/rust-lang/rust/commits/569467eb0d110dd299cb2efcce13e998d1d9c11f", "html_url": "https://github.com/rust-lang/rust/commit/569467eb0d110dd299cb2efcce13e998d1d9c11f"}], "stats": {"total": 1707, "additions": 1051, "deletions": 656}, "files": [{"sha": "3ccedc6092173ff1fc353cc4e4dcd38dba0c6a03", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -21,14 +21,14 @@ fn load_errors(testfile: str) -> ~[expected_error] {\n }\n \n fn parse_expected(line_num: uint, line: str) -> ~[expected_error] unsafe {\n-    let error_tag = \"//!\";\n+    let error_tag = \"//~\";\n     let mut idx;\n     alt str::find_str(line, error_tag) {\n          option::none { ret ~[]; }\n          option::some(nn) { idx = (nn as uint) + str::len(error_tag); }\n     }\n \n-    // \"//!^^^ kind msg\" denotes a message expected\n+    // \"//~^^^ kind msg\" denotes a message expected\n     // three lines above current line:\n     let mut adjust_line = 0u;\n     let len = str::len(line);"}, {"sha": "04c8a4ebff25e611d8674f1eae03ef7b9b87f0ac", "filename": "src/etc/sugarise-doc-comments.py", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Fetc%2Fsugarise-doc-comments.py", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Fetc%2Fsugarise-doc-comments.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fsugarise-doc-comments.py?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -0,0 +1,82 @@\n+#!/usr/bin/python\n+\n+#\n+# this script attempts to turn doc comment attributes (#[doc = \"...\"])\n+# into sugared-doc-comments (/** ... */ and /// ...)\n+#\n+# it sugarises all .rs/.rc files underneath the working directory\n+#\n+\n+import sys, os, fnmatch, re\n+\n+\n+DOC_PATTERN = '^(?P<indent>[\\\\t ]*)#\\\\[(\\\\s*)doc(\\\\s*)=' + \\\n+              '(\\\\s*)\"(?P<text>(\\\\\"|[^\"])*?)\"(\\\\s*)\\\\]' + \\\n+              '(?P<semi>;)?'\n+\n+ESCAPES = [(\"\\\\'\", \"'\"),\n+           ('\\\\\"', '\"'),\n+           (\"\\\\n\", \"\\n\"),\n+           (\"\\\\r\", \"\\r\"),\n+           (\"\\\\t\", \"\\t\")]\n+\n+\n+def unescape(s):\n+    for (find, repl) in ESCAPES:\n+        s = s.replace(find, repl)\n+    return s\n+\n+\n+def block_trim(s):\n+    lns = s.splitlines()\n+\n+    # remove leading/trailing whitespace-lines\n+    while lns and not lns[0].strip():\n+        lns = lns[1:]\n+    while lns and not lns[-1].strip():\n+        lns = lns[:-1]\n+\n+    # remove leading horizontal whitespace\n+    n = sys.maxint\n+    for ln in lns:\n+        if ln.strip():\n+            n = min(n, len(re.search('^\\s*', ln).group()))\n+    if n != sys.maxint:\n+        lns = [ln[n:] for ln in lns]\n+\n+    # strip trailing whitespace\n+    lns = [ln.rstrip() for ln in lns]\n+\n+    return lns\n+\n+\n+def replace_doc(m):\n+    indent = m.group('indent')\n+    text = block_trim(unescape(m.group('text')))\n+\n+    if len(text) > 1:\n+        inner = '!' if m.group('semi') else '*'\n+        starify = lambda s: indent + ' *' + (' ' + s if s else '')\n+        text = '\\n'.join(map(starify, text))\n+        repl = indent + '/*' + inner + '\\n' + text + '\\n' + indent + ' */'\n+    else:\n+        inner = '!' if m.group('semi') else '/'\n+        repl = indent + '//' + inner + ' ' + text[0]\n+\n+    return repl\n+\n+\n+def sugarise_file(path):\n+    s = open(path).read()\n+\n+    r = re.compile(DOC_PATTERN, re.MULTILINE | re.DOTALL)\n+    ns = re.sub(r, replace_doc, s)\n+\n+    if s != ns:\n+        open(path, 'w').write(ns)\n+\n+\n+for (dirpath, dirnames, filenames) in os.walk('.'):\n+    for name in fnmatch.filter(filenames, '*.r[sc]'):\n+        sugarise_file(os.path.join(dirpath, name))\n+"}, {"sha": "3618772027e5524c74ebd0baf453038503a6cc94", "filename": "src/libcore/str.rs", "status": "modified", "additions": 48, "deletions": 6, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -58,8 +58,8 @@ export\n    all, any,\n    all_between, any_between,\n    map,\n-   each,\n-   each_char,\n+   each, eachi,\n+   each_char, each_chari,\n    bytes_iter,\n    chars_iter,\n    split_char_iter,\n@@ -73,7 +73,7 @@ export\n    find_char, find_char_from, find_char_between,\n    rfind_char, rfind_char_from, rfind_char_between,\n    find_str, find_str_from, find_str_between,\n-   contains,\n+   contains, contains_char,\n    starts_with,\n    ends_with,\n \n@@ -672,22 +672,35 @@ pure fn bytes_iter(ss: str/&, it: fn(u8)) {\n #[doc = \"Iterate over the bytes in a string\"]\n #[inline(always)]\n pure fn each(s: str/&, it: fn(u8) -> bool) {\n+    eachi(s, |_i, b| it(b) )\n+}\n+\n+#[doc = \"Iterate over the bytes in a string, with indices\"]\n+#[inline(always)]\n+pure fn eachi(s: str/&, it: fn(uint, u8) -> bool) {\n     let mut i = 0u, l = len(s);\n     while (i < l) {\n-        if !it(s[i]) { break; }\n+        if !it(i, s[i]) { break; }\n         i += 1u;\n     }\n }\n \n #[doc = \"Iterates over the chars in a string\"]\n #[inline(always)]\n pure fn each_char(s: str/&, it: fn(char) -> bool) {\n-    let mut pos = 0u;\n+    each_chari(s, |_i, c| it(c))\n+}\n+\n+#[doc = \"Iterates over the chars in a string, with indices\"]\n+#[inline(always)]\n+pure fn each_chari(s: str/&, it: fn(uint, char) -> bool) {\n+    let mut pos = 0u, ch_pos = 0u;\n     let len = len(s);\n     while pos < len {\n         let {ch, next} = char_range_at(s, pos);\n         pos = next;\n-        if !it(ch) { break; }\n+        if !it(ch_pos, ch) { break; }\n+        ch_pos += 1u;\n     }\n }\n \n@@ -1146,6 +1159,18 @@ pure fn contains(haystack: str/&a, needle: str/&b) -> bool {\n     option::is_some(find_str(haystack, needle))\n }\n \n+#[doc = \"\n+Returns true if a string contains a char.\n+\n+# Arguments\n+\n+* haystack - The string to look in\n+* needle - The char to look for\n+\"]\n+pure fn contains_char(haystack: str/&, needle: char) -> bool {\n+    option::is_some(find_char(haystack, needle))\n+}\n+\n #[doc = \"\n Returns true if one string starts with another\n \n@@ -1879,12 +1904,21 @@ impl extensions/& for str/& {\n     #[doc = \"Returns true if one string contains another\"]\n     #[inline]\n     fn contains(needle: str/&a) -> bool { contains(self, needle) }\n+    #[doc = \"Returns true if a string contains a char\"]\n+    #[inline]\n+    fn contains_char(needle: char) -> bool { contains_char(self, needle) }\n     #[doc = \"Iterate over the bytes in a string\"]\n     #[inline]\n     fn each(it: fn(u8) -> bool) { each(self, it) }\n+    #[doc = \"Iterate over the bytes in a string, with indices\"]\n+    #[inline]\n+    fn eachi(it: fn(uint, u8) -> bool) { eachi(self, it) }\n     #[doc = \"Iterate over the chars in a string\"]\n     #[inline]\n     fn each_char(it: fn(char) -> bool) { each_char(self, it) }\n+    #[doc = \"Iterate over the chars in a string, with indices\"]\n+    #[inline]\n+    fn each_chari(it: fn(uint, char) -> bool) { each_chari(self, it) }\n     #[doc = \"Returns true if one string ends with another\"]\n     #[inline]\n     fn ends_with(needle: str/&) -> bool { ends_with(self, needle) }\n@@ -2644,6 +2678,14 @@ mod tests {\n         assert !contains(data, \"\u0e44\u0e17\u534e\");\n     }\n \n+    #[test]\n+    fn test_contains_char() {\n+        assert contains_char(\"abc\", 'b');\n+        assert contains_char(\"a\", 'a');\n+        assert !contains_char(\"abc\", 'd');\n+        assert !contains_char(\"\", 'a');\n+    }\n+\n     #[test]\n     fn test_chars_iter() {\n         let mut i = 0;"}, {"sha": "90dbc1a82f2e6c5a591301ba660a3125dfae5ed4", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -652,8 +652,9 @@ type attribute = spanned<attribute_>;\n #[auto_serialize]\n enum attr_style { attr_outer, attr_inner, }\n \n+// doc-comments are promoted to attributes that have is_sugared_doc = true\n #[auto_serialize]\n-type attribute_ = {style: attr_style, value: meta_item};\n+type attribute_ = {style: attr_style, value: meta_item, is_sugared_doc: bool};\n \n /*\n   iface_refs appear in both impls and in classes that implement ifaces."}, {"sha": "e1cfa4830ae6e14a2ac908bdd1387633bccbed67", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -4,18 +4,21 @@ import std::map;\n import std::map::hashmap;\n import either::either;\n import diagnostic::span_handler;\n-import ast_util::dummy_spanned;\n+import ast_util::{spanned, dummy_spanned};\n+import parse::comments::{doc_comment_style, strip_doc_comment_decoration};\n \n // Constructors\n export mk_name_value_item_str;\n export mk_name_value_item;\n export mk_list_item;\n export mk_word_item;\n export mk_attr;\n+export mk_sugared_doc_attr;\n \n // Conversion\n export attr_meta;\n export attr_metas;\n+export desugar_doc_attr;\n \n // Accessors\n export get_attr_name;\n@@ -66,9 +69,19 @@ fn mk_word_item(+name: ast::ident) -> @ast::meta_item {\n }\n \n fn mk_attr(item: @ast::meta_item) -> ast::attribute {\n-    ret dummy_spanned({style: ast::attr_inner, value: *item});\n+    ret dummy_spanned({style: ast::attr_inner, value: *item,\n+                       is_sugared_doc: false});\n }\n \n+fn mk_sugared_doc_attr(text: str, lo: uint, hi: uint) -> ast::attribute {\n+    let lit = spanned(lo, hi, ast::lit_str(@text));\n+    let attr = {\n+        style: doc_comment_style(text),\n+        value: spanned(lo, hi, ast::meta_name_value(@\"doc\", lit)),\n+        is_sugared_doc: true\n+    };\n+    ret spanned(lo, hi, attr);\n+}\n \n /* Conversion */\n \n@@ -81,6 +94,16 @@ fn attr_metas(attrs: ~[ast::attribute]) -> ~[@ast::meta_item] {\n     ret mitems;\n }\n \n+fn desugar_doc_attr(attr: ast::attribute) -> ast::attribute {\n+    if attr.node.is_sugared_doc {\n+        let comment = get_meta_item_value_str(@attr.node.value).get();\n+        let meta = mk_name_value_item_str(@\"doc\",\n+                                     strip_doc_comment_decoration(*comment));\n+        ret mk_attr(meta);\n+    } else {\n+        attr\n+    }\n+}\n \n /* Accessors */\n "}, {"sha": "c949c2e17aa4297937e35e013bc30049317e29c8", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -102,7 +102,8 @@ fn fold_meta_item_(&&mi: @meta_item, fld: ast_fold) -> @meta_item {\n fn fold_attribute_(at: attribute, fld: ast_fold) ->\n    attribute {\n     ret {node: {style: at.node.style,\n-                value: *fold_meta_item_(@at.node.value, fld)},\n+                value: *fold_meta_item_(@at.node.value, fld),\n+                is_sugared_doc: at.node.is_sugared_doc },\n          span: fld.new_span(at.span)};\n }\n //used in noop_fold_foreign_item and noop_fold_fn_decl"}, {"sha": "d804a927edb2940990bc724f17eaeae8053a1d4a", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 66, "deletions": 20, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -15,7 +15,8 @@ impl parser_attr for parser {\n         -> attr_or_ext\n     {\n         let expect_item_next = vec::is_not_empty(first_item_attrs);\n-        if self.token == token::POUND {\n+        alt self.token {\n+          token::POUND {\n             let lo = self.span.lo;\n             if self.look_ahead(1u) == token::LBRACKET {\n                 self.bump();\n@@ -30,15 +31,40 @@ impl parser_attr for parser {\n                 self.bump();\n                 ret some(right(self.parse_syntax_ext_naked(lo)));\n             } else { ret none; }\n-        } else { ret none; }\n+        }\n+        token::DOC_COMMENT(_) {\n+          ret some(left(self.parse_outer_attributes()));\n+        }\n+        _ {\n+          ret none;\n+        }\n+      }\n     }\n \n     // Parse attributes that appear before an item\n     fn parse_outer_attributes() -> ~[ast::attribute] {\n         let mut attrs: ~[ast::attribute] = ~[];\n-        while self.token == token::POUND\n-            && self.look_ahead(1u) == token::LBRACKET {\n-            vec::push(attrs, self.parse_attribute(ast::attr_outer));\n+        loop {\n+            alt copy self.token {\n+              token::POUND {\n+                if self.look_ahead(1u) != token::LBRACKET {\n+                    break;\n+                }\n+                attrs += [self.parse_attribute(ast::attr_outer)]/~;\n+              }\n+              token::DOC_COMMENT(s) {\n+                let attr = ::attr::mk_sugared_doc_attr(\n+                        *self.get_str(s), self.span.lo, self.span.hi);\n+                if attr.node.style != ast::attr_outer {\n+                  self.fatal(\"expected outer comment\");\n+                }\n+                attrs += [attr]/~;\n+                self.bump();\n+              }\n+              _ {\n+                break;\n+              }\n+            }\n         }\n         ret attrs;\n     }\n@@ -55,7 +81,8 @@ impl parser_attr for parser {\n         let meta_item = self.parse_meta_item();\n         self.expect(token::RBRACKET);\n         let mut hi = self.span.hi;\n-        ret spanned(lo, hi, {style: style, value: *meta_item});\n+        ret spanned(lo, hi, {style: style, value: *meta_item,\n+                             is_sugared_doc: false});\n     }\n \n     // Parse attributes that appear after the opening of an item, each\n@@ -68,22 +95,41 @@ impl parser_attr for parser {\n         {inner: ~[ast::attribute], next: ~[ast::attribute]} {\n         let mut inner_attrs: ~[ast::attribute] = ~[];\n         let mut next_outer_attrs: ~[ast::attribute] = ~[];\n-        while self.token == token::POUND {\n-            if self.look_ahead(1u) != token::LBRACKET {\n-                // This is an extension\n-                break;\n-            }\n-            let attr = self.parse_attribute(ast::attr_inner);\n-            if self.token == token::SEMI {\n+        loop {\n+            alt copy self.token {\n+              token::POUND {\n+                if self.look_ahead(1u) != token::LBRACKET {\n+                    // This is an extension\n+                    break;\n+                }\n+                let attr = self.parse_attribute(ast::attr_inner);\n+                if self.token == token::SEMI {\n+                    self.bump();\n+                    inner_attrs += [attr]/~;\n+                } else {\n+                    // It's not really an inner attribute\n+                    let outer_attr =\n+                        spanned(attr.span.lo, attr.span.hi,\n+                            {style: ast::attr_outer, value: attr.node.value,\n+                             is_sugared_doc: false});\n+                    next_outer_attrs += [outer_attr]/~;\n+                    break;\n+                }\n+              }\n+              token::DOC_COMMENT(s) {\n+                let attr = ::attr::mk_sugared_doc_attr(\n+                        *self.get_str(s), self.span.lo, self.span.hi);\n                 self.bump();\n-                vec::push(inner_attrs, attr);\n-            } else {\n-                // It's not really an inner attribute\n-                let outer_attr =\n-                    spanned(attr.span.lo, attr.span.hi,\n-                            {style: ast::attr_outer, value: attr.node.value});\n-                vec::push(next_outer_attrs, outer_attr);\n+                if attr.node.style == ast::attr_inner {\n+                  inner_attrs += [attr]/~;\n+                } else {\n+                  next_outer_attrs += [attr]/~;\n+                  break;\n+                }\n+              }\n+              _ {\n                 break;\n+              }\n             }\n         }\n         ret {inner: inner_attrs, next: next_outer_attrs};"}, {"sha": "e188331dd2490e3704bbc0690860e27be488f8f9", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 115, "deletions": 13, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -8,6 +8,7 @@ export cmnt;\n export lit;\n export cmnt_style;\n export gather_comments_and_literals;\n+export is_doc_comment, doc_comment_style, strip_doc_comment_decoration;\n \n enum cmnt_style {\n     isolated, // No code on either side of each line of the comment\n@@ -18,6 +19,81 @@ enum cmnt_style {\n \n type cmnt = {style: cmnt_style, lines: ~[str], pos: uint};\n \n+fn is_doc_comment(s: str) -> bool {\n+    s.starts_with(\"///\") ||\n+    s.starts_with(\"//!\") ||\n+    s.starts_with(\"/**\") ||\n+    s.starts_with(\"/*!\")\n+}\n+\n+fn doc_comment_style(comment: str) -> ast::attr_style {\n+    assert is_doc_comment(comment);\n+    if comment.starts_with(\"//!\") || comment.starts_with(\"/*!\") {\n+        ast::attr_inner\n+    } else {\n+        ast::attr_outer\n+    }\n+}\n+\n+fn strip_doc_comment_decoration(comment: str) -> str {\n+\n+    /// remove whitespace-only lines from the start/end of lines\n+    fn vertical_trim(lines: [str]/~) -> [str]/~ {\n+        let mut i = 0u, j = lines.len();\n+        while i < j && lines[i].trim().is_empty() {\n+            i += 1u;\n+        }\n+        while j > i && lines[j - 1u].trim().is_empty() {\n+            j -= 1u;\n+        }\n+        ret lines.slice(i, j);\n+    }\n+\n+    // drop leftmost columns that contain only values in chars\n+    fn block_trim(lines: [str]/~, chars: str, max: option<uint>) -> [str]/~ {\n+\n+        let mut i = max.get_default(uint::max_value);\n+        for lines.each |line| {\n+            if line.trim().is_empty() {\n+                cont;\n+            }\n+            for line.each_chari |j, c| {\n+                if j >= i {\n+                    break;\n+                }\n+                if !chars.contains_char(c) {\n+                    i = j;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        ret do lines.map |line| {\n+            let chars = str::chars(line);\n+            if i > chars.len() {\n+                \"\"\n+            } else {\n+                str::from_chars(chars.slice(i, chars.len()))\n+            }\n+        };\n+    }\n+\n+    if comment.starts_with(\"//\") {\n+        ret comment.slice(3u, comment.len()).trim();\n+    }\n+\n+    if comment.starts_with(\"/*\") {\n+        let lines = str::lines_any(comment.slice(3u, comment.len() - 2u));\n+        let lines = vertical_trim(lines);\n+        let lines = block_trim(lines, \"\\t \", none);\n+        let lines = block_trim(lines, \"*\", some(1u));\n+        let lines = block_trim(lines, \"\\t \", none);\n+        ret str::connect(lines, \"\\n\");\n+    }\n+\n+    fail \"not a doc-comment: \" + comment;\n+}\n+\n fn read_to_eol(rdr: string_reader) -> str {\n     let mut val = \"\";\n     while rdr.curr != '\\n' && !is_eof(rdr) {\n@@ -57,29 +133,41 @@ fn consume_whitespace_counting_blank_lines(rdr: string_reader,\n     }\n }\n \n-fn read_shebang_comment(rdr: string_reader, code_to_the_left: bool) -> cmnt {\n+\n+fn read_shebang_comment(rdr: string_reader, code_to_the_left: bool,\n+                                                        &comments: [cmnt]/~) {\n     #debug(\">>> shebang comment\");\n     let p = rdr.chpos;\n     #debug(\"<<< shebang comment\");\n-    ret {style: if code_to_the_left { trailing } else { isolated },\n-         lines: ~[read_one_line_comment(rdr)],\n-         pos: p};\n+    vec::push(comments, {\n+        style: if code_to_the_left { trailing } else { isolated },\n+        lines: ~[read_one_line_comment(rdr)],\n+        pos: p\n+    });\n }\n \n-fn read_line_comments(rdr: string_reader, code_to_the_left: bool) -> cmnt {\n+fn read_line_comments(rdr: string_reader, code_to_the_left: bool,\n+                                                        &comments: [cmnt]/~) {\n     #debug(\">>> line comments\");\n     let p = rdr.chpos;\n     let mut lines: ~[str] = ~[];\n     while rdr.curr == '/' && nextch(rdr) == '/' {\n         let line = read_one_line_comment(rdr);\n         log(debug, line);\n+        if is_doc_comment(line) { // doc-comments are not put in comments\n+            break;\n+        }\n         vec::push(lines, line);\n         consume_non_eol_whitespace(rdr);\n     }\n     #debug(\"<<< line comments\");\n-    ret {style: if code_to_the_left { trailing } else { isolated },\n-         lines: lines,\n-         pos: p};\n+    if !lines.is_empty() {\n+        vec::push(comments, {\n+            style: if code_to_the_left { trailing } else { isolated },\n+            lines: lines,\n+            pos: p\n+        });\n+    }\n }\n \n fn all_whitespace(s: str, begin: uint, end: uint) -> bool {\n@@ -101,13 +189,27 @@ fn trim_whitespace_prefix_and_push_line(&lines: ~[str],\n     vec::push(lines, s1);\n }\n \n-fn read_block_comment(rdr: string_reader, code_to_the_left: bool) -> cmnt {\n+fn read_block_comment(rdr: string_reader, code_to_the_left: bool,\n+                                                        &comments: [cmnt]/~) {\n     #debug(\">>> block comment\");\n     let p = rdr.chpos;\n     let mut lines: ~[str] = ~[];\n     let mut col: uint = rdr.col;\n     bump(rdr);\n     bump(rdr);\n+\n+    // doc-comments are not really comments, they are attributes\n+    if rdr.curr == '*' || rdr.curr == '!' {\n+        while !(rdr.curr == '*' && nextch(rdr) == '/') && !is_eof(rdr) {\n+            bump(rdr);\n+        }\n+        if !is_eof(rdr) {\n+            bump(rdr);\n+            bump(rdr);\n+        }\n+        ret;\n+    }\n+\n     let mut curr_line = \"/*\";\n     let mut level: int = 1;\n     while level > 0 {\n@@ -143,7 +245,7 @@ fn read_block_comment(rdr: string_reader, code_to_the_left: bool) -> cmnt {\n         style = mixed;\n     }\n     #debug(\"<<< block comment\");\n-    ret {style: style, lines: lines, pos: p};\n+    vec::push(comments, {style: style, lines: lines, pos: p});\n }\n \n fn peeking_at_comment(rdr: string_reader) -> bool {\n@@ -156,11 +258,11 @@ fn consume_comment(rdr: string_reader, code_to_the_left: bool,\n                    &comments: ~[cmnt]) {\n     #debug(\">>> consume comment\");\n     if rdr.curr == '/' && nextch(rdr) == '/' {\n-        vec::push(comments, read_line_comments(rdr, code_to_the_left));\n+        read_line_comments(rdr, code_to_the_left, comments);\n     } else if rdr.curr == '/' && nextch(rdr) == '*' {\n-        vec::push(comments, read_block_comment(rdr, code_to_the_left));\n+        read_block_comment(rdr, code_to_the_left, comments);\n     } else if rdr.curr == '#' && nextch(rdr) == '!' {\n-        vec::push(comments, read_shebang_comment(rdr, code_to_the_left));\n+        read_shebang_comment(rdr, code_to_the_left, comments);\n     } else { fail; }\n     #debug(\"<<< consume comment\");\n }"}, {"sha": "8a32ecdac646b5bc8fbd784f95220f3109827529", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 57, "deletions": 9, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -161,7 +161,11 @@ impl tt_reader_as_reader of reader for tt_reader {\n }\n \n fn string_advance_token(&&r: string_reader) {\n-    consume_whitespace_and_comments(r);\n+    for consume_whitespace_and_comments(r).each |comment| {\n+        r.peek_tok = comment.tok;\n+        r.peek_span = comment.sp;\n+        ret;\n+    }\n \n     if is_eof(r) {\n         r.peek_tok = token::EOF;\n@@ -277,22 +281,41 @@ fn is_hex_digit(c: char) -> bool {\n \n fn is_bin_digit(c: char) -> bool { ret c == '0' || c == '1'; }\n \n-fn consume_whitespace_and_comments(rdr: string_reader) {\n+// might return a sugared-doc-attr\n+fn consume_whitespace_and_comments(rdr: string_reader)\n+                                -> option<{tok: token::token, sp: span}> {\n     while is_whitespace(rdr.curr) { bump(rdr); }\n     ret consume_any_line_comment(rdr);\n }\n \n-fn consume_any_line_comment(rdr: string_reader) {\n+// might return a sugared-doc-attr\n+fn consume_any_line_comment(rdr: string_reader)\n+                                -> option<{tok: token::token, sp: span}> {\n     if rdr.curr == '/' {\n         alt nextch(rdr) {\n           '/' {\n-            while rdr.curr != '\\n' && !is_eof(rdr) { bump(rdr); }\n-            // Restart whitespace munch.\n-\n-            ret consume_whitespace_and_comments(rdr);\n+            bump(rdr);\n+            bump(rdr);\n+            // line comments starting with \"///\" or \"//!\" are doc-comments\n+            if rdr.curr == '/' || rdr.curr == '!' {\n+                let start_chpos = rdr.chpos - 2u;\n+                let mut acc = \"//\";\n+                while rdr.curr != '\\n' && !is_eof(rdr) {\n+                    str::push_char(acc, rdr.curr);\n+                    bump(rdr);\n+                }\n+                ret some({\n+                    tok: token::DOC_COMMENT(intern(*rdr.interner, @acc)),\n+                    sp: ast_util::mk_sp(start_chpos, rdr.chpos)\n+                });\n+            } else {\n+                while rdr.curr != '\\n' && !is_eof(rdr) { bump(rdr); }\n+                // Restart whitespace munch.\n+                ret consume_whitespace_and_comments(rdr);\n+            }\n           }\n           '*' { bump(rdr); bump(rdr); ret consume_block_comment(rdr); }\n-          _ { ret; }\n+          _ {}\n         }\n     } else if rdr.curr == '#' {\n         if nextch(rdr) == '!' {\n@@ -305,9 +328,34 @@ fn consume_any_line_comment(rdr: string_reader) {\n             }\n         }\n     }\n+    ret none;\n }\n \n-fn consume_block_comment(rdr: string_reader) {\n+// might return a sugared-doc-attr\n+fn consume_block_comment(rdr: string_reader)\n+                                -> option<{tok: token::token, sp: span}> {\n+\n+    // block comments starting with \"/**\" or \"/*!\" are doc-comments\n+    if rdr.curr == '*' || rdr.curr == '!' {\n+        let start_chpos = rdr.chpos - 2u;\n+        let mut acc = \"/*\";\n+        while !(rdr.curr == '*' && nextch(rdr) == '/') && !is_eof(rdr) {\n+            str::push_char(acc, rdr.curr);\n+            bump(rdr);\n+        }\n+        if is_eof(rdr) {\n+            rdr.fatal(\"unterminated block doc-comment\");\n+        } else {\n+            acc += \"*/\";\n+            bump(rdr);\n+            bump(rdr);\n+            ret some({\n+                tok: token::DOC_COMMENT(intern(*rdr.interner, @acc)),\n+                sp: ast_util::mk_sp(start_chpos, rdr.chpos)\n+            });\n+        }\n+    }\n+\n     let mut level: int = 1;\n     while level > 0 {\n         if is_eof(rdr) { rdr.fatal(\"unterminated block comment\"); }"}, {"sha": "a2bd503ffca8e75a75163aea56ff1752e9c1629c", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -80,6 +80,7 @@ enum token {\n \n     //ACTUALLY(whole_nonterminal),\n \n+    DOC_COMMENT(str_num),\n     EOF,\n }\n \n@@ -170,11 +171,15 @@ fn to_str(in: interner<@str>, t: token) -> str {\n             + str::escape_default(*interner::get(in, s))\n             + \"\\\"\"\n       }\n+\n       /* Name components */\n       IDENT(s, _) {\n         *interner::get(in, s)\n       }\n       UNDERSCORE { \"_\" }\n+\n+      /* Other */\n+      DOC_COMMENT(s) { *interner::get(in, s) }\n       EOF { \"<eof>\" }\n     }\n }"}, {"sha": "2680fa1a9818b3bdf33825ba138310b5d40e0c0c", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -647,7 +647,9 @@ fn print_inner_attributes(s: ps, attrs: ~[ast::attribute]) {\n         alt attr.node.style {\n           ast::attr_inner {\n             print_attribute(s, attr);\n-            word(s.s, \";\");\n+            if !attr.node.is_sugared_doc {\n+                word(s.s, \";\");\n+            }\n             count += 1;\n           }\n           _ {/* fallthrough */ }\n@@ -659,9 +661,15 @@ fn print_inner_attributes(s: ps, attrs: ~[ast::attribute]) {\n fn print_attribute(s: ps, attr: ast::attribute) {\n     hardbreak_if_not_bol(s);\n     maybe_print_comment(s, attr.span.lo);\n-    word(s.s, \"#[\");\n-    print_meta_item(s, @attr.node.value);\n-    word(s.s, \"]\");\n+    if attr.node.is_sugared_doc {\n+        let meta = attr::attr_meta(attr);\n+        let comment = attr::get_meta_item_value_str(meta).get();\n+        word(s.s, *comment);\n+    } else {\n+        word(s.s, \"#[\");\n+        print_meta_item(s, @attr.node.value);\n+        word(s.s, \"]\");\n+    }\n }\n \n "}, {"sha": "5c0dc72f33afa7ebbef9001ad9802c40a48b8f0c", "filename": "src/rustc/driver/session.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Frustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Frustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fsession.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -233,7 +233,8 @@ mod test {\n                 ast::meta_name_value(\n                     @\"crate_type\",\n                     ast_util::respan(ast_util::dummy_sp(),\n-                                     ast::lit_str(@t))))\n+                                     ast::lit_str(@t)))),\n+            is_sugared_doc: false\n         })\n     }\n "}, {"sha": "ccb3472325ba3ba820347c99a8c995ec1de00f74", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -613,7 +613,8 @@ fn get_attributes(md: ebml::doc) -> ~[ast::attribute] {\n             assert (vec::len(meta_items) == 1u);\n             let meta_item = meta_items[0];\n             vec::push(attrs,\n-                      {node: {style: ast::attr_outer, value: *meta_item},\n+                      {node: {style: ast::attr_outer, value: *meta_item,\n+                              is_sugared_doc: false},\n                        span: ast_util::dummy_sp()});\n         };\n       }"}, {"sha": "56c42902ac2e4c32b1915463a56ccdb149d0ac67", "filename": "src/rustdoc/attr_parser.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Frustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Frustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_parser.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -44,7 +44,10 @@ fn doc_meta(\n        doc attribute\"];\n \n     let doc_attrs = attr::find_attrs_by_name(attrs, \"doc\");\n-    let doc_metas = attr::attr_metas(doc_attrs);\n+    let doc_metas = do doc_attrs.map |attr| {\n+        attr::attr_meta(attr::desugar_doc_attr(attr))\n+    };\n+\n     if vec::is_not_empty(doc_metas) {\n         if vec::len(doc_metas) != 1u {\n             #warn(\"ignoring %u doc attributes\", vec::len(doc_metas) - 1u);"}, {"sha": "cd39d90b9bd612d958ef8937a0bfdd9c52254224", "filename": "src/test/compile-fail/alt-join.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Falt-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Falt-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Falt-join.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -6,6 +6,6 @@ fn my_fail() -> ! { fail; }\n fn main() {\n     alt true { false { my_fail(); } true { } }\n \n-    log(debug, x); //! ERROR unresolved name: x\n+    log(debug, x); //~ ERROR unresolved name: x\n     let x: int;\n }"}, {"sha": "b8d4dab9539f7056e3690ec5dd8585e047bc47d3", "filename": "src/test/compile-fail/alt-pattern-field-mismatch-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Falt-pattern-field-mismatch-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Falt-pattern-field-mismatch-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Falt-pattern-field-mismatch-2.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -10,7 +10,7 @@ fn main() {\n           rgb(_, _, _) { }\n           cmyk(_, _, _, _) { }\n           no_color(_) { }\n-          //!^ ERROR this pattern has 1 field, but the corresponding variant has no fields\n+          //~^ ERROR this pattern has 1 field, but the corresponding variant has no fields\n         }\n     }\n }"}, {"sha": "2e24f6a5c899c69ef309465b2df166135a7ce3e4", "filename": "src/test/compile-fail/alt-pattern-field-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Falt-pattern-field-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Falt-pattern-field-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Falt-pattern-field-mismatch.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -8,7 +8,7 @@ fn main() {\n     fn foo(c: color) {\n         alt c {\n           rgb(_, _) { }\n-          //!^ ERROR this pattern has 2 fields, but the corresponding variant has 3 fields\n+          //~^ ERROR this pattern has 2 fields, but the corresponding variant has 3 fields\n           cmyk(_, _, _, _) { }\n           no_color { }\n         }"}, {"sha": "51247c7e8e9ea0f7ac74cd359864f46aa731d350", "filename": "src/test/compile-fail/ambig_impl_1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fambig_impl_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fambig_impl_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fambig_impl_1.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,3 +1,3 @@\n-impl methods1 for uint { fn me() -> uint { self } } //! NOTE candidate #1 is `methods1::me`\n-impl methods2 for uint { fn me() -> uint { self } } //! NOTE candidate #2 is `methods2::me`\n-fn main() { 1u.me(); } //! ERROR multiple applicable methods in scope\n+impl methods1 for uint { fn me() -> uint { self } } //~ NOTE candidate #1 is `methods1::me`\n+impl methods2 for uint { fn me() -> uint { self } } //~ NOTE candidate #2 is `methods2::me`\n+fn main() { 1u.me(); } //~ ERROR multiple applicable methods in scope"}, {"sha": "7cb79ff789e12be8239acb8f3936762cff2c9510", "filename": "src/test/compile-fail/ambig_impl_2_exe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fambig_impl_2_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fambig_impl_2_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fambig_impl_2_exe.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -2,6 +2,6 @@\n // aux-build:ambig_impl_2_lib.rs\n use ambig_impl_2_lib;\n import ambig_impl_2_lib::methods1;\n-impl methods2 for uint { fn me() -> uint { self } } //! NOTE candidate #2 is `methods2::me`\n-fn main() { 1u.me(); } //! ERROR multiple applicable methods in scope\n-//!^ NOTE candidate #1 is `ambig_impl_2_lib::methods1::me`\n+impl methods2 for uint { fn me() -> uint { self } } //~ NOTE candidate #2 is `methods2::me`\n+fn main() { 1u.me(); } //~ ERROR multiple applicable methods in scope\n+//~^ NOTE candidate #1 is `ambig_impl_2_lib::methods1::me`"}, {"sha": "9d7a9634a074e4cea144869f0aa2f83a9385824b", "filename": "src/test/compile-fail/ambig_impl_bounds.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fambig_impl_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fambig_impl_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fambig_impl_bounds.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -2,9 +2,9 @@ iface A { fn foo(); }\n iface B { fn foo(); }\n \n fn foo<T: A B>(t: T) {\n-    t.foo(); //! ERROR multiple applicable methods in scope\n-    //!^ NOTE candidate #1 derives from the bound `A`\n-    //!^^ NOTE candidate #2 derives from the bound `B`\n+    t.foo(); //~ ERROR multiple applicable methods in scope\n+    //~^ NOTE candidate #1 derives from the bound `A`\n+    //~^^ NOTE candidate #2 derives from the bound `B`\n }\n \n fn main() {}\n\\ No newline at end of file"}, {"sha": "bb2009fc9311596a9d35b9b42936ea56921f026b", "filename": "src/test/compile-fail/ambig_impl_unify.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fambig_impl_unify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fambig_impl_unify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fambig_impl_unify.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,12 +1,12 @@\n impl methods for ~[uint] {\n-    fn foo() -> int {1} //! NOTE candidate #1 is `methods::foo`\n+    fn foo() -> int {1} //~ NOTE candidate #1 is `methods::foo`\n }\n \n impl methods for ~[int] {\n-    fn foo() -> int {2} //! NOTE candidate #2 is `methods::foo`\n+    fn foo() -> int {2} //~ NOTE candidate #2 is `methods::foo`\n }\n \n fn main() {\n     let x = ~[];\n-    x.foo(); //! ERROR multiple applicable methods in scope\n+    x.foo(); //~ ERROR multiple applicable methods in scope\n }\n\\ No newline at end of file"}, {"sha": "54b130ae26fe8678629fdc72ebc5c4a17e9acc6f", "filename": "src/test/compile-fail/assign-imm-local-twice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fassign-imm-local-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fassign-imm-local-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-imm-local-twice.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,8 +1,8 @@\n fn test() {\n     let v: int;\n-    v = 1; //! NOTE prior assignment occurs here\n+    v = 1; //~ NOTE prior assignment occurs here\n     #debug[\"v=%d\", v];\n-    v = 2; //! ERROR re-assignment of immutable variable\n+    v = 2; //~ ERROR re-assignment of immutable variable\n     #debug[\"v=%d\", v];\n }\n "}, {"sha": "fab93a259c2f5f08ec69837cdf43d0858cdbc382", "filename": "src/test/compile-fail/assign-super.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fassign-super.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fassign-super.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-super.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let mut x: ~[mut int] = ~[mut 3];\n     let y: ~[int] = ~[3];\n-    x = y; //! ERROR values differ in mutability\n+    x = y; //~ ERROR values differ in mutability\n }\n\\ No newline at end of file"}, {"sha": "772a3a945fdc0da35a9c6904f0b913e0edd82ab5", "filename": "src/test/compile-fail/assign-to-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -11,5 +11,5 @@ class cat {\n \n fn main() {\n   let nyan : cat = cat(52u, 99);\n-  nyan.speak = fn@() { #debug[\"meow\"]; }; //! ERROR assigning to method\n+  nyan.speak = fn@() { #debug[\"meow\"]; }; //~ ERROR assigning to method\n }"}, {"sha": "a4183ec310f3ad2868c28a489818512ab7186209", "filename": "src/test/compile-fail/attempted-access-non-fatal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fattempted-access-non-fatal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fattempted-access-non-fatal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattempted-access-non-fatal.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,6 +1,6 @@\n // Check that bogus field access is non-fatal\n fn main() {\n     let x = 0;\n-    log(debug, x.foo); //! ERROR attempted access of field\n-    log(debug, x.bar); //! ERROR attempted access of field\n+    log(debug, x.foo); //~ ERROR attempted access of field\n+    log(debug, x.bar); //~ ERROR attempted access of field\n }\n\\ No newline at end of file"}, {"sha": "2f4b8111bc94d3f1af823c9a4912fee8b8646286", "filename": "src/test/compile-fail/attr-before-ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fattr-before-ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fattr-before-ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattr-before-ext.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     #[attr]\n-    #debug(\"hi\"); //! ERROR expected item\n+    #debug(\"hi\"); //~ ERROR expected item\n }\n\\ No newline at end of file"}, {"sha": "f99170e654d0a64f047cba977a886c174f3d3a3d", "filename": "src/test/compile-fail/attr-before-let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fattr-before-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fattr-before-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattr-before-let.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     #[attr]\n-    let _i = 0; //! ERROR expected item\n+    let _i = 0; //~ ERROR expected item\n }\n\\ No newline at end of file"}, {"sha": "3a88afd5346464f0d4b19e763a07c9cd817cb2db", "filename": "src/test/compile-fail/bad-bang-ann-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -3,7 +3,7 @@\n \n fn bad_bang(i: uint) -> ! {\n     ret 7u;\n-    //!^ ERROR expected `_|_` but found `uint`\n+    //~^ ERROR expected `_|_` but found `uint`\n }\n \n fn main() { bad_bang(5u); }"}, {"sha": "a2ad98df9595cf2380bb6d4b8a2992641cbfa587", "filename": "src/test/compile-fail/bad-bang-ann.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -3,7 +3,7 @@\n \n fn bad_bang(i: uint) -> ! {\n     if i < 0u { } else { fail; }\n-    //!^ ERROR expected `_|_` but found `()`\n+    //~^ ERROR expected `_|_` but found `()`\n }\n \n fn main() { bad_bang(5u); }"}, {"sha": "65a7ee4211c6af239cad824ca447824682c3674f", "filename": "src/test/compile-fail/bad-for-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fbad-for-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fbad-for-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-for-loop.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     fn baz(_x: fn() -> int) {}\n-    for baz |_e| { } //! ERROR should return `bool`\n+    for baz |_e| { } //~ ERROR should return `bool`\n }"}, {"sha": "9934702fdeaafd17e5ff8498a279b7877f597bb7", "filename": "src/test/compile-fail/bad-method-typaram-kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,5 +1,5 @@\n fn foo<T>() {\n-    1u.bar::<T>(); //! ERROR: missing `copy`\n+    1u.bar::<T>(); //~ ERROR: missing `copy`\n }\n \n impl methods for uint {"}, {"sha": "9498f1c341fdcbaa7637e822426f4d62cc1b04bd", "filename": "src/test/compile-fail/bad-value-ident-false.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fbad-value-ident-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fbad-value-ident-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-value-ident-false.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,2 +1,2 @@\n-fn false() { } //! ERROR found `false` in restricted position\n+fn false() { } //~ ERROR found `false` in restricted position\n fn main() { }\n\\ No newline at end of file"}, {"sha": "96f172b3285a340658e60210df1abefc8998f90a", "filename": "src/test/compile-fail/bad-value-ident-true.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fbad-value-ident-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fbad-value-ident-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-value-ident-true.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,2 +1,2 @@\n-fn true() { } //! ERROR found `true` in restricted position\n+fn true() { } //~ ERROR found `true` in restricted position\n fn main() { }\n\\ No newline at end of file"}, {"sha": "898c164e9dc673124eecc4dc1c6499ca2ab749bc", "filename": "src/test/compile-fail/bad-var-env-capture-in-block-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fbad-var-env-capture-in-block-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fbad-var-env-capture-in-block-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-var-env-capture-in-block-arg.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -2,6 +2,6 @@ fn main() {\n     let x = 3;\n     fn blah(_a: native fn()) {}\n     blah(|| {\n-        log(debug, x); //! ERROR attempted dynamic environment capture\n+        log(debug, x); //~ ERROR attempted dynamic environment capture\n     });\n }\n\\ No newline at end of file"}, {"sha": "f3d78f2f6c21bcf5c36a87d4fdd6b4d46ed042b0", "filename": "src/test/compile-fail/bang-tailexpr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fbang-tailexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fbang-tailexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbang-tailexpr.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,4 +1,4 @@\n fn f() -> ! {\n-    3i //! ERROR expected `_|_` but found `int`\n+    3i //~ ERROR expected `_|_` but found `int`\n }\n fn main() { }"}, {"sha": "f48734a48f9721408b9c64c713a83cae65eea104", "filename": "src/test/compile-fail/binop-typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fbinop-typeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fbinop-typeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-typeck.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -4,5 +4,5 @@ fn main() {\n     let x = true;\n     let y = 1;\n     let z = x + y;\n-    //!^ ERROR binary operation + cannot be applied to type `bool`\n+    //~^ ERROR binary operation + cannot be applied to type `bool`\n }"}, {"sha": "b8e34aefd6f8f38111d7da51f7b53c2878c98123", "filename": "src/test/compile-fail/block-arg-as-stmt-with-value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fblock-arg-as-stmt-with-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fblock-arg-as-stmt-with-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-arg-as-stmt-with-value.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -3,7 +3,7 @@ fn compute1() -> float {\n     let v = ~[0f, 1f, 2f, 3f];\n \n     do vec::foldl(0f, v) |x, y| { x + y } - 10f\n-    //!^ ERROR mismatched types: expected `()`\n+    //~^ ERROR mismatched types: expected `()`\n }\n \n fn main() {"}, {"sha": "780a91b664cea813540b34d8ffb9737c495798e2", "filename": "src/test/compile-fail/block-coerce-no-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no-2.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -9,5 +9,5 @@ fn main() {\n     }\n \n     f(g);\n-    //!^ ERROR mismatched types: expected `extern fn(extern fn(extern fn()))`\n+    //~^ ERROR mismatched types: expected `extern fn(extern fn(extern fn()))`\n }"}, {"sha": "e789775fe7deeafaeb10b6b6624f1d4c78074816", "filename": "src/test/compile-fail/block-coerce-no.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -6,7 +6,7 @@ fn coerce(b: fn()) -> native fn() {\n            g: fn()) -> native fn() { ret f(g); }\n     fn fn_id(f: native fn()) -> native fn() { ret f }\n     ret lol(fn_id, b);\n-    //!^ ERROR mismatched types: expected `extern fn(fn()) -> extern fn()`\n+    //~^ ERROR mismatched types: expected `extern fn(fn()) -> extern fn()`\n }\n \n fn main() {"}, {"sha": "1ec0b9234319634184b5ce85edbc7a8b2d91a828", "filename": "src/test/compile-fail/borrowck-assign-comp-idx.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -4,9 +4,9 @@ fn a() {\n     let mut p = ~[mut 1];\n \n     // Create an immutable pointer into p's contents:\n-    let _q: &int = &p[0]; //! NOTE loan of mutable vec content granted here\n+    let _q: &int = &p[0]; //~ NOTE loan of mutable vec content granted here\n \n-    p[0] = 5; //! ERROR assigning to mutable vec content prohibited due to outstanding loan\n+    p[0] = 5; //~ ERROR assigning to mutable vec content prohibited due to outstanding loan\n }\n \n fn borrow(_x: &[int], _f: fn()) {}\n@@ -17,8 +17,8 @@ fn b() {\n \n     let mut p = ~[mut 1];\n \n-    do borrow(p) || { //! NOTE loan of mutable vec content granted here\n-        p[0] = 5; //! ERROR assigning to mutable vec content prohibited due to outstanding loan\n+    do borrow(p) || { //~ NOTE loan of mutable vec content granted here\n+        p[0] = 5; //~ ERROR assigning to mutable vec content prohibited due to outstanding loan\n     }\n }\n "}, {"sha": "55a29393caea175d91fc2274d9c322b9e58f7b3f", "filename": "src/test/compile-fail/borrowck-assign-comp.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -2,12 +2,12 @@ type point = { x: int, y: int };\n \n fn a() {\n     let mut p = {x: 3, y: 4};\n-    let _q = &p; //! NOTE loan of mutable local variable granted here\n+    let _q = &p; //~ NOTE loan of mutable local variable granted here\n \n     // This assignment is illegal because the field x is not\n     // inherently mutable; since `p` was made immutable, `p.x` is now\n     // immutable.  Otherwise the type of &_q.x (&int) would be wrong.\n-    p.x = 5; //! ERROR assigning to mutable field prohibited due to outstanding loan\n+    p.x = 5; //~ ERROR assigning to mutable field prohibited due to outstanding loan\n }\n \n fn b() {\n@@ -24,8 +24,8 @@ fn c() {\n     // and then try to overwrite `p` as a whole.\n \n     let mut p = {x: 3, mut y: 4};\n-    let _q = &p.y; //! NOTE loan of mutable local variable granted here\n-    p = {x: 5, mut y: 7};//! ERROR assigning to mutable local variable prohibited due to outstanding loan\n+    let _q = &p.y; //~ NOTE loan of mutable local variable granted here\n+    p = {x: 5, mut y: 7};//~ ERROR assigning to mutable local variable prohibited due to outstanding loan\n     copy p;\n }\n \n@@ -34,8 +34,8 @@ fn d() {\n     // address of a subcomponent and then modify that subcomponent:\n \n     let mut p = {x: 3, mut y: 4};\n-    let _q = &p.y; //! NOTE loan of mutable field granted here\n-    p.y = 5; //! ERROR assigning to mutable field prohibited due to outstanding loan\n+    let _q = &p.y; //~ NOTE loan of mutable field granted here\n+    p.y = 5; //~ ERROR assigning to mutable field prohibited due to outstanding loan\n     copy p;\n }\n "}, {"sha": "44ca3b043db71942a3f3d4db4f210925a70b58ac", "filename": "src/test/compile-fail/borrowck-assign-to-constants.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-constants.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -2,6 +2,6 @@ const foo: int = 5;\n \n fn main() {\n     // assigning to various global constants\n-    none = some(3); //! ERROR assigning to static item\n-    foo = 6; //! ERROR assigning to static item\n+    none = some(3); //~ ERROR assigning to static item\n+    foo = 6; //~ ERROR assigning to static item\n }\n\\ No newline at end of file"}, {"sha": "d7770a30d7565f455cecaa0693a8dfa3d056e497", "filename": "src/test/compile-fail/borrowck-assign-to-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-enum.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -2,5 +2,5 @@ enum foo = int;\n \n fn main() {\n     let x = foo(3);\n-    *x = 4; //! ERROR assigning to enum content\n+    *x = 4; //~ ERROR assigning to enum content\n }\n\\ No newline at end of file"}, {"sha": "8a14efc09a6e7a8a40a69ed9dc616a6342ce715f", "filename": "src/test/compile-fail/borrowck-assign-to-subfield.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-subfield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-subfield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-subfield.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -14,7 +14,7 @@ fn main() {\n \n     // in these cases we pass through a box, so the mut\n     // of the box is dominant\n-    p.x.a = 2;     //! ERROR assigning to immutable field\n-    p.y.a = 2;     //! ERROR assigning to const field\n+    p.x.a = 2;     //~ ERROR assigning to immutable field\n+    p.y.a = 2;     //~ ERROR assigning to const field\n     p.z.a = 2;\n }\n\\ No newline at end of file"}, {"sha": "8a188fe92396ab72017e46be5876e01d702f9d0d", "filename": "src/test/compile-fail/borrowck-binding-mutbl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-binding-mutbl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-binding-mutbl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-binding-mutbl.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -6,8 +6,8 @@ fn main() {\n \n     alt x {\n       {f: v} => {\n-        impure(v); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n-        //!^ NOTE impure due to access to impure function\n+        impure(v); //~ ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+        //~^ NOTE impure due to access to impure function\n       }\n     }\n }\n\\ No newline at end of file"}, {"sha": "520ae1bf6462f48540b3773b2cae5c11fa51dfe9", "filename": "src/test/compile-fail/borrowck-issue-2657-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-1.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,8 +1,8 @@\n fn main() {\n let x = some(~1);\n-alt x { //! NOTE loan of immutable local variable granted here\n+alt x { //~ NOTE loan of immutable local variable granted here\n   some(y) {\n-    let _a <- x; //! ERROR moving out of immutable local variable prohibited due to outstanding loan\n+    let _a <- x; //~ ERROR moving out of immutable local variable prohibited due to outstanding loan\n   }\n   _ {}\n }"}, {"sha": "07e4ca8229b7909943f23fb69b54f2af50474429", "filename": "src/test/compile-fail/borrowck-issue-2657-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-2.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -2,7 +2,7 @@ fn main() {\n let x = some(~1);\n alt x {\n   some(y) {\n-    let _b <- y; //! ERROR moving out of pattern binding\n+    let _b <- y; //~ ERROR moving out of pattern binding\n   }\n   _ {}\n }"}, {"sha": "4fbc51183ce5a5b9cc87834dcde439e246b43bcd", "filename": "src/test/compile-fail/borrowck-lend-args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-args.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -5,8 +5,8 @@ fn borrow_from_arg_imm_ref(&&v: ~int) {\n }\n \n fn borrow_from_arg_mut_ref(&v: ~int) {\n-    borrow(v); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n-    //!^ NOTE impure due to access to impure function\n+    borrow(v); //~ ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //~^ NOTE impure due to access to impure function\n }\n \n fn borrow_from_arg_move(-v: ~int) {"}, {"sha": "e867d525e1a044a6018cb1aea4ff1585d2906bba", "filename": "src/test/compile-fail/borrowck-lend-flow.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -19,42 +19,42 @@ fn post_aliased_const() {\n fn post_aliased_mut() {\n     // SPURIOUS--flow\n     let mut v = ~3;\n-    borrow(v); //! ERROR loan of mutable local variable as immutable conflicts with prior loan\n-    let _w = &mut v; //! NOTE prior loan as mutable granted here\n+    borrow(v); //~ ERROR loan of mutable local variable as immutable conflicts with prior loan\n+    let _w = &mut v; //~ NOTE prior loan as mutable granted here\n }\n \n fn post_aliased_scope(cond: bool) {\n     // NDM--scope of &\n     let mut v = ~3;\n-    borrow(v);  //! ERROR loan of mutable local variable as immutable conflicts with prior loan\n-    if cond { inc(&mut v); } //! NOTE prior loan as mutable granted here\n+    borrow(v);  //~ ERROR loan of mutable local variable as immutable conflicts with prior loan\n+    if cond { inc(&mut v); } //~ NOTE prior loan as mutable granted here\n }\n \n fn loop_aliased_mut() {\n     let mut v = ~3, w = ~4;\n     let mut _x = &mut w;\n     loop {\n-        borrow(v); //! ERROR loan of mutable local variable as immutable conflicts with prior loan\n-        _x = &mut v; //! NOTE prior loan as mutable granted here\n+        borrow(v); //~ ERROR loan of mutable local variable as immutable conflicts with prior loan\n+        _x = &mut v; //~ NOTE prior loan as mutable granted here\n     }\n }\n \n fn while_aliased_mut(cond: bool) {\n     let mut v = ~3, w = ~4;\n     let mut _x = &mut w;\n     while cond {\n-        borrow(v); //! ERROR loan of mutable local variable as immutable conflicts with prior loan\n-        _x = &mut v; //! NOTE prior loan as mutable granted here\n+        borrow(v); //~ ERROR loan of mutable local variable as immutable conflicts with prior loan\n+        _x = &mut v; //~ NOTE prior loan as mutable granted here\n     }\n }\n \n fn while_aliased_mut_cond(cond: bool, cond2: bool) {\n     let mut v = ~3, w = ~4;\n     let mut _x = &mut w;\n     while cond {\n-        borrow(v); //! ERROR loan of mutable local variable as immutable conflicts with prior loan\n+        borrow(v); //~ ERROR loan of mutable local variable as immutable conflicts with prior loan\n         if cond2 {\n-            _x = &mut v; //! NOTE prior loan as mutable granted here\n+            _x = &mut v; //~ NOTE prior loan as mutable granted here\n         }\n     }\n }\n@@ -63,8 +63,8 @@ fn loop_in_block() {\n     let mut v = ~3, w = ~4;\n     let mut _x = &mut w;\n     for uint::range(0u, 10u) |_i| {\n-        borrow(v); //! ERROR loan of mutable variable declared in an outer block as immutable conflicts with prior loan\n-        _x = &mut v; //! NOTE prior loan as mutable granted here\n+        borrow(v); //~ ERROR loan of mutable variable declared in an outer block as immutable conflicts with prior loan\n+        _x = &mut v; //~ NOTE prior loan as mutable granted here\n     }\n }\n \n@@ -77,8 +77,8 @@ fn at_most_once_block() {\n     let mut v = ~3, w = ~4;\n     let mut _x = &mut w;\n     do at_most_once || {\n-        borrow(v); //! ERROR loan of mutable variable declared in an outer block as immutable conflicts with prior loan\n-        _x = &mut v; //! NOTE prior loan as mutable granted here\n+        borrow(v); //~ ERROR loan of mutable variable declared in an outer block as immutable conflicts with prior loan\n+        _x = &mut v; //~ NOTE prior loan as mutable granted here\n     }\n }\n "}, {"sha": "0f5d61b510cbf5524d3d805687e523ace354d379", "filename": "src/test/compile-fail/borrowck-loan-blocks-move-cc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -4,16 +4,16 @@ fn borrow(v: &int, f: fn(x: &int)) {\n \n fn box_imm() {\n     let mut v = ~3;\n-    let _w = &mut v; //! NOTE loan of mutable local variable granted here\n+    let _w = &mut v; //~ NOTE loan of mutable local variable granted here\n     do task::spawn |move v| {\n-        //!^ ERROR moving out of mutable local variable prohibited due to outstanding loan\n+        //~^ ERROR moving out of mutable local variable prohibited due to outstanding loan\n         #debug[\"v=%d\", *v];\n     }\n \n     let mut v = ~3;\n-    let _w = &mut v; //! NOTE loan of mutable local variable granted here\n+    let _w = &mut v; //~ NOTE loan of mutable local variable granted here\n     task::spawn(fn~(move v) {\n-        //!^ ERROR moving out of mutable local variable prohibited due to outstanding loan\n+        //~^ ERROR moving out of mutable local variable prohibited due to outstanding loan\n         #debug[\"v=%d\", *v];\n     });\n }"}, {"sha": "5cecbf9284fc344171532aa8dc4d02002aad168c", "filename": "src/test/compile-fail/borrowck-loan-blocks-move.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -3,8 +3,8 @@ fn take(-_v: ~int) {\n \n fn box_imm() {\n     let v = ~3;\n-    let _w = &v; //! NOTE loan of immutable local variable granted here\n-    take(v); //! ERROR moving out of immutable local variable prohibited due to outstanding loan\n+    let _w = &v; //~ NOTE loan of immutable local variable granted here\n+    take(v); //~ ERROR moving out of immutable local variable prohibited due to outstanding loan\n }\n \n fn main() {"}, {"sha": "ad9eb9c4874f07037c4291b8050ff826a17cac3d", "filename": "src/test/compile-fail/borrowck-loan-blocks-mut-uniq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -4,8 +4,8 @@ fn borrow(v: &int, f: fn(x: &int)) {\n \n fn box_imm() {\n     let mut v = ~3;\n-    do borrow(v) |w| { //! NOTE loan of mutable local variable granted here\n-        v = ~4; //! ERROR assigning to mutable variable declared in an outer block prohibited due to outstanding loan\n+    do borrow(v) |w| { //~ NOTE loan of mutable local variable granted here\n+        v = ~4; //~ ERROR assigning to mutable variable declared in an outer block prohibited due to outstanding loan\n         assert *v == 3;\n         assert *w == 4;\n     }"}, {"sha": "f75b256079e70f54f74ebf90c285c4e680fde382", "filename": "src/test/compile-fail/borrowck-loan-rcvr-overloaded-op.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -18,11 +18,11 @@ fn b() {\n \n     // Here I create an outstanding loan and check that we get conflicts:\n \n-    &mut p; //! NOTE prior loan as mutable granted here\n-    //!^ NOTE prior loan as mutable granted here\n+    &mut p; //~ NOTE prior loan as mutable granted here\n+    //~^ NOTE prior loan as mutable granted here\n \n-    p + 3; //! ERROR loan of mutable local variable as immutable conflicts with prior loan\n-    p * 3; //! ERROR loan of mutable local variable as immutable conflicts with prior loan\n+    p + 3; //~ ERROR loan of mutable local variable as immutable conflicts with prior loan\n+    p * 3; //~ ERROR loan of mutable local variable as immutable conflicts with prior loan\n }\n \n fn c() {\n@@ -35,8 +35,8 @@ fn c() {\n \n \n     // ...but not impure fns\n-    *q * 3; //! ERROR illegal borrow unless pure: creating immutable alias to aliasable, mutable memory\n-    //!^ NOTE impure due to access to impure function\n+    *q * 3; //~ ERROR illegal borrow unless pure: creating immutable alias to aliasable, mutable memory\n+    //~^ NOTE impure due to access to impure function\n }\n \n fn main() {"}, {"sha": "df93fd44c6e61e69d36878fd1556ffa7c020e70b", "filename": "src/test/compile-fail/borrowck-loan-rcvr.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -19,8 +19,8 @@ fn a() {\n     p.impurem();\n \n     // But in this case we do not honor the loan:\n-    do p.blockm || { //! NOTE loan of mutable local variable granted here\n-        p.x = 10; //! ERROR assigning to mutable field prohibited due to outstanding loan\n+    do p.blockm || { //~ NOTE loan of mutable local variable granted here\n+        p.x = 10; //~ ERROR assigning to mutable field prohibited due to outstanding loan\n     }\n }\n \n@@ -29,11 +29,11 @@ fn b() {\n \n     // Here I create an outstanding loan and check that we get conflicts:\n \n-    &mut p; //! NOTE prior loan as mutable granted here\n-    //!^ NOTE prior loan as mutable granted here\n+    &mut p; //~ NOTE prior loan as mutable granted here\n+    //~^ NOTE prior loan as mutable granted here\n \n-    p.purem(); //! ERROR loan of mutable local variable as immutable conflicts with prior loan\n-    p.impurem(); //! ERROR loan of mutable local variable as immutable conflicts with prior loan\n+    p.purem(); //~ ERROR loan of mutable local variable as immutable conflicts with prior loan\n+    p.impurem(); //~ ERROR loan of mutable local variable as immutable conflicts with prior loan\n }\n \n fn c() {\n@@ -45,8 +45,8 @@ fn c() {\n     (*q).purem();\n \n     // ...but not impure fns\n-    (*q).impurem(); //! ERROR illegal borrow unless pure: creating immutable alias to aliasable, mutable memory\n-    //!^ NOTE impure due to access to impure function\n+    (*q).impurem(); //~ ERROR illegal borrow unless pure: creating immutable alias to aliasable, mutable memory\n+    //~^ NOTE impure due to access to impure function\n }\n \n fn main() {"}, {"sha": "07f197afa74a801e45b486fbe02b6efdb83fadda", "filename": "src/test/compile-fail/borrowck-loan-vec-content.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -14,8 +14,8 @@ fn has_mut_vec_and_does_not_try_to_change_it() {\n \n fn has_mut_vec_but_tries_to_change_it() {\n     let v = ~[mut 1, 2, 3];\n-    do takes_imm_elt(&v[0]) || { //! NOTE loan of mutable vec content granted here\n-        v[1] = 4; //! ERROR assigning to mutable vec content prohibited due to outstanding loan\n+    do takes_imm_elt(&v[0]) || { //~ NOTE loan of mutable vec content granted here\n+        v[1] = 4; //~ ERROR assigning to mutable vec content prohibited due to outstanding loan\n     }\n }\n "}, {"sha": "fc8ff1ffe07bcbf09d6590e7883f13858e25c271", "filename": "src/test/compile-fail/borrowck-move-from-unsafe-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-unsafe-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-unsafe-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-unsafe-ptr.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,5 +1,5 @@\n fn foo(x: *~int) -> ~int {\n-    let y <- *x; //! ERROR dereference of unsafe pointer requires unsafe function or block\n+    let y <- *x; //~ ERROR dereference of unsafe pointer requires unsafe function or block\n     ret y;\n }\n "}, {"sha": "d3e6bb68a48bce04058a87fcfa65747a69e1c211", "filename": "src/test/compile-fail/borrowck-mut-addr-of-imm-var.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-addr-of-imm-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-addr-of-imm-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-addr-of-imm-var.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let x: int = 3;\n-    let y: &mut int = &mut x; //! ERROR taking mut reference to immutable local variable\n+    let y: &mut int = &mut x; //~ ERROR taking mut reference to immutable local variable\n     *y = 5;\n     log (debug, *y);\n }"}, {"sha": "ad9877c2674d42bcb62ef5e86bdd2eb8aee9f414", "filename": "src/test/compile-fail/borrowck-mut-vec-as-imm-slice-bad.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-vec-as-imm-slice-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-vec-as-imm-slice-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-vec-as-imm-slice-bad.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -5,8 +5,8 @@ fn want_slice(v: &[int]) -> int {\n }\n \n fn has_mut_vec(+v: @~[mut int]) -> int {\n-    want_slice(*v) //! ERROR illegal borrow unless pure: creating immutable alias to aliasable, mutable memory\n-        //!^ NOTE impure due to access to impure function\n+    want_slice(*v) //~ ERROR illegal borrow unless pure: creating immutable alias to aliasable, mutable memory\n+        //~^ NOTE impure due to access to impure function\n }\n \n fn main() {"}, {"sha": "a4aeb976e95f0ce9d645762d8512fc17572b3a30", "filename": "src/test/compile-fail/borrowck-no-cycle-in-exchange-heap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-no-cycle-in-exchange-heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-no-cycle-in-exchange-heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-no-cycle-in-exchange-heap.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -5,9 +5,9 @@ enum cycle {\n fn main() {\n     let x = ~node({mut a: ~empty});\n     // Create a cycle!\n-    alt check *x { //! NOTE loan of immutable local variable granted here\n+    alt check *x { //~ NOTE loan of immutable local variable granted here\n       node(y) {\n-        y.a <- x; //! ERROR moving out of immutable local variable prohibited due to outstanding loan\n+        y.a <- x; //~ ERROR moving out of immutable local variable prohibited due to outstanding loan\n       }\n     };\n }\n\\ No newline at end of file"}, {"sha": "86ff452c356901c50e12d72ef23da561ed226f45", "filename": "src/test/compile-fail/borrowck-pat-enum-in-box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-enum-in-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-enum-in-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-enum-in-box.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -27,8 +27,8 @@ fn process(_i: int) {}\n \n fn match_const_box_and_do_bad_things(v: &const @const option<int>) {\n     alt *v {\n-      @some(i) { //! ERROR illegal borrow unless pure: enum variant in aliasable, mutable location\n-        process(i) //! NOTE impure due to access to impure function\n+      @some(i) { //~ ERROR illegal borrow unless pure: enum variant in aliasable, mutable location\n+        process(i) //~ NOTE impure due to access to impure function\n       }\n       @none {}\n     }"}, {"sha": "091467283c50af8e55774906d809307920ad84b0", "filename": "src/test/compile-fail/borrowck-pat-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-enum.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -33,8 +33,8 @@ fn match_const_reg_unused(v: &const option<int>) {\n \n fn match_const_reg_impure(v: &const option<int>) {\n     alt *v {\n-      some(i) {impure(i)} //! ERROR illegal borrow unless pure: enum variant in aliasable, mutable location\n-      //!^ NOTE impure due to access to impure function\n+      some(i) {impure(i)} //~ ERROR illegal borrow unless pure: enum variant in aliasable, mutable location\n+      //~^ NOTE impure due to access to impure function\n       none {}\n     }\n }"}, {"sha": "7ce3ff8f02889672c034fcdf7353e2908ab57146", "filename": "src/test/compile-fail/borrowck-pat-reassign-binding.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-reassign-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-reassign-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-reassign-binding.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -2,11 +2,11 @@\n \n fn main() {\n     let mut x: option<int> = none;\n-    alt x { //! NOTE loan of mutable local variable granted here\n+    alt x { //~ NOTE loan of mutable local variable granted here\n       none {}\n       some(i) {\n         // Not ok: i is an outstanding ptr into x.\n-        x = some(i+1); //! ERROR assigning to mutable local variable prohibited due to outstanding loan\n+        x = some(i+1); //~ ERROR assigning to mutable local variable prohibited due to outstanding loan\n       }\n     }\n     copy x; // just to prevent liveness warnings"}, {"sha": "1e1de3e39cfddc6ffb838b84cd661a2b1a6e073c", "filename": "src/test/compile-fail/borrowck-pat-reassign-sometimes-binding.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-reassign-sometimes-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-reassign-sometimes-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-reassign-sometimes-binding.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -2,14 +2,14 @@\n \n fn main() {\n     let mut x = none;\n-    alt x { //! NOTE loan of mutable local variable granted here\n+    alt x { //~ NOTE loan of mutable local variable granted here\n       none {\n         // It is ok to reassign x here, because there is in\n         // fact no outstanding loan of x!\n         x = some(0);\n       }\n       some(i) {\n-        x = some(1); //! ERROR assigning to mutable local variable prohibited due to outstanding loan\n+        x = some(1); //~ ERROR assigning to mutable local variable prohibited due to outstanding loan\n       }\n     }\n     copy x; // just to prevent liveness warnings"}, {"sha": "71a3988b2eee3dc32c1e677acdcc5f63b9399a08", "filename": "src/test/compile-fail/borrowck-pure-scope-in-call.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-pure-scope-in-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-pure-scope-in-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-pure-scope-in-call.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -4,17 +4,17 @@ fn test1(x: @mut ~int) {\n     // Here, evaluating the second argument actually invalidates the\n     // first borrow, even though it occurs outside of the scope of the\n     // borrow!\n-    pure_borrow(*x, *x = ~5);  //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n-    //!^ NOTE impure due to assigning to dereference of mutable @ pointer\n+    pure_borrow(*x, *x = ~5);  //~ ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //~^ NOTE impure due to assigning to dereference of mutable @ pointer\n }\n \n fn test2() {\n     let mut x = ~1;\n \n     // Same, but for loanable data:\n \n-    pure_borrow(x, x = ~5);  //! ERROR assigning to mutable local variable prohibited due to outstanding loan\n-    //!^ NOTE loan of mutable local variable granted here\n+    pure_borrow(x, x = ~5);  //~ ERROR assigning to mutable local variable prohibited due to outstanding loan\n+    //~^ NOTE loan of mutable local variable granted here\n \n     copy x;\n }"}, {"sha": "c0a2466199f0808750f303cfdbe2eda5c2f61cae", "filename": "src/test/compile-fail/borrowck-unchecked-with-borrow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-unchecked-with-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-unchecked-with-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-unchecked-with-borrow.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -4,9 +4,9 @@ fn impure(_i: int) {}\n fn foo(v: &const option<int>) {\n     alt *v {\n       some(i) {\n-        //!^ ERROR illegal borrow unless pure: enum variant in aliasable, mutable location\n+        //~^ ERROR illegal borrow unless pure: enum variant in aliasable, mutable location\n         unchecked {\n-            impure(i); //! NOTE impure due to access to impure function\n+            impure(i); //~ NOTE impure due to access to impure function\n         }\n       }\n       none {"}, {"sha": "6fcdf369aba3abb0bcec8d86df407983b6aa6e58", "filename": "src/test/compile-fail/borrowck-uniq-via-box.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-box.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,23 +1,23 @@\n fn borrow(_v: &int) {}\n \n fn box_mut(v: @mut ~int) {\n-    borrow(*v); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n-    //!^ NOTE impure due to access to impure function\n+    borrow(*v); //~ ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //~^ NOTE impure due to access to impure function\n }\n \n fn box_rec_mut(v: @{mut f: ~int}) {\n-    borrow(v.f); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n-    //!^ NOTE impure due to access to impure function\n+    borrow(v.f); //~ ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //~^ NOTE impure due to access to impure function\n }\n \n fn box_mut_rec(v: @mut {f: ~int}) {\n-    borrow(v.f); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n-    //!^ NOTE impure due to access to impure function\n+    borrow(v.f); //~ ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //~^ NOTE impure due to access to impure function\n }\n \n fn box_mut_recs(v: @mut {f: {g: {h: ~int}}}) {\n-    borrow(v.f.g.h); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n-    //!^ NOTE impure due to access to impure function\n+    borrow(v.f.g.h); //~ ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //~^ NOTE impure due to access to impure function\n }\n \n fn box_imm(v: @~int) {\n@@ -33,28 +33,28 @@ fn box_imm_recs(v: @{f: {g: {h: ~int}}}) {\n }\n \n fn box_const(v: @const ~int) {\n-    borrow(*v); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n-    //!^ NOTE impure due to access to impure function\n+    borrow(*v); //~ ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //~^ NOTE impure due to access to impure function\n }\n \n fn box_rec_const(v: @{const f: ~int}) {\n-    borrow(v.f); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n-    //!^ NOTE impure due to access to impure function\n+    borrow(v.f); //~ ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //~^ NOTE impure due to access to impure function\n }\n \n fn box_recs_const(v: @{f: {g: {const h: ~int}}}) {\n-    borrow(v.f.g.h); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n-    //!^ NOTE impure due to access to impure function\n+    borrow(v.f.g.h); //~ ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //~^ NOTE impure due to access to impure function\n }\n \n fn box_const_rec(v: @const {f: ~int}) {\n-    borrow(v.f); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n-    //!^ NOTE impure due to access to impure function\n+    borrow(v.f); //~ ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //~^ NOTE impure due to access to impure function\n }\n \n fn box_const_recs(v: @const {f: {g: {h: ~int}}}) {\n-    borrow(v.f.g.h); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n-    //!^ NOTE impure due to access to impure function\n+    borrow(v.f.g.h); //~ ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //~^ NOTE impure due to access to impure function\n }\n \n fn main() {"}, {"sha": "fcc8d2c8775884cfc5e45ea4eb1c27db864635d5", "filename": "src/test/compile-fail/borrowck-uniq-via-lend.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-lend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-lend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-lend.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -29,8 +29,8 @@ fn aliased_const() {\n \n fn aliased_mut() {\n     let mut v = ~3;\n-    let _w = &mut v; //! NOTE prior loan as mutable granted here\n-    borrow(v); //! ERROR loan of mutable local variable as immutable conflicts with prior loan\n+    let _w = &mut v; //~ NOTE prior loan as mutable granted here\n+    borrow(v); //~ ERROR loan of mutable local variable as immutable conflicts with prior loan\n }\n \n fn aliased_other() {\n@@ -42,8 +42,8 @@ fn aliased_other() {\n fn aliased_other_reassign() {\n     let mut v = ~3, w = ~4;\n     let mut _x = &mut w;\n-    _x = &mut v; //! NOTE prior loan as mutable granted here\n-    borrow(v); //! ERROR loan of mutable local variable as immutable conflicts with prior loan\n+    _x = &mut v; //~ NOTE prior loan as mutable granted here\n+    borrow(v); //~ ERROR loan of mutable local variable as immutable conflicts with prior loan\n }\n \n fn main() {"}, {"sha": "fe825165183a86a2e41e159549eaeb46b9ebe625", "filename": "src/test/compile-fail/borrowck-uniq-via-ref.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-ref.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,23 +1,23 @@\n fn borrow(_v: &int) {}\n \n fn box_mut(v: &mut ~int) {\n-    borrow(*v); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n-    //!^ NOTE impure due to access to impure function\n+    borrow(*v); //~ ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //~^ NOTE impure due to access to impure function\n }\n \n fn box_rec_mut(v: &{mut f: ~int}) {\n-    borrow(v.f); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n-    //!^ NOTE impure due to access to impure function\n+    borrow(v.f); //~ ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //~^ NOTE impure due to access to impure function\n }\n \n fn box_mut_rec(v: &mut {f: ~int}) {\n-    borrow(v.f); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n-    //!^ NOTE impure due to access to impure function\n+    borrow(v.f); //~ ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //~^ NOTE impure due to access to impure function\n }\n \n fn box_mut_recs(v: &mut {f: {g: {h: ~int}}}) {\n-    borrow(v.f.g.h); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n-    //!^ NOTE impure due to access to impure function\n+    borrow(v.f.g.h); //~ ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //~^ NOTE impure due to access to impure function\n }\n \n fn box_imm(v: &~int) {\n@@ -33,28 +33,28 @@ fn box_imm_recs(v: &{f: {g: {h: ~int}}}) {\n }\n \n fn box_const(v: &const ~int) {\n-    borrow(*v); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n-    //!^ NOTE impure due to access to impure function\n+    borrow(*v); //~ ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //~^ NOTE impure due to access to impure function\n }\n \n fn box_rec_const(v: &{const f: ~int}) {\n-    borrow(v.f); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n-    //!^ NOTE impure due to access to impure function\n+    borrow(v.f); //~ ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //~^ NOTE impure due to access to impure function\n }\n \n fn box_recs_const(v: &{f: {g: {const h: ~int}}}) {\n-    borrow(v.f.g.h); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n-    //!^ NOTE impure due to access to impure function\n+    borrow(v.f.g.h); //~ ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //~^ NOTE impure due to access to impure function\n }\n \n fn box_const_rec(v: &const {f: ~int}) {\n-    borrow(v.f); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n-    //!^ NOTE impure due to access to impure function\n+    borrow(v.f); //~ ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //~^ NOTE impure due to access to impure function\n }\n \n fn box_const_recs(v: &const {f: {g: {h: ~int}}}) {\n-    borrow(v.f.g.h); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n-    //!^ NOTE impure due to access to impure function\n+    borrow(v.f.g.h); //~ ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //~^ NOTE impure due to access to impure function\n }\n \n fn main() {"}, {"sha": "c070c80edf9e39456eb1364ab314f1078a5b1283", "filename": "src/test/compile-fail/cap-clause-move-upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fcap-clause-move-upvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fcap-clause-move-upvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcap-clause-move-upvar.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     let x = 5;\n     let _y = fn~(move x) -> int {\n-        let _z = fn~(move x) -> int { x }; //! ERROR moving out of variable declared in an outer block\n+        let _z = fn~(move x) -> int { x }; //~ ERROR moving out of variable declared in an outer block\n         22\n     };\n }"}, {"sha": "fbfbfb198ccbaf9580dde8525da4e87f952b5968", "filename": "src/test/compile-fail/cap-clause-with-stack-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fcap-clause-with-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fcap-clause-with-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcap-clause-with-stack-closure.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -6,9 +6,9 @@ fn main() {\n     foo(|| bar(x) );\n \n     let x = @3;\n-    foo(|copy x| bar(x) ); //! ERROR cannot capture values explicitly with a block closure\n+    foo(|copy x| bar(x) ); //~ ERROR cannot capture values explicitly with a block closure\n \n     let x = @3;\n-    foo(|move x| bar(x) ); //! ERROR cannot capture values explicitly with a block closure\n+    foo(|move x| bar(x) ); //~ ERROR cannot capture values explicitly with a block closure\n }\n "}, {"sha": "469fee7863b97a2bea535b1f715908cc20a1d0d8", "filename": "src/test/compile-fail/class-implements-int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fclass-implements-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fclass-implements-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-implements-int.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,4 +1,4 @@\n-class cat : int { //! ERROR can only implement interface types\n+class cat : int { //~ ERROR can only implement interface types\n   let meows: uint;\n   new(in_x : uint) { self.meows = in_x; }\n }"}, {"sha": "5e27afaf16416748fe20c75207e64a585cf07f28", "filename": "src/test/compile-fail/class-missing-self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -4,8 +4,8 @@ class cat {\n     fn sleep() { loop{} }\n     fn meow() {\n       #error(\"Meow\");\n-      meows += 1u; //! ERROR unresolved name\n-      sleep();     //! ERROR unresolved name\n+      meows += 1u; //~ ERROR unresolved name\n+      sleep();     //~ ERROR unresolved name\n     }\n   }\n "}, {"sha": "c0fc3766006d8981e658a3fb16f5cc6daa4e92d1", "filename": "src/test/compile-fail/do-lambda-requires-braces.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fdo-lambda-requires-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fdo-lambda-requires-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdo-lambda-requires-braces.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     do something\n-        |x| do somethingelse //! ERROR: expecting '{' but found 'do'\n+        |x| do somethingelse //~ ERROR: expecting '{' but found 'do'\n         |y| say(x, y)\n }"}, {"sha": "a6a5bdd041f017b85b786c11ff9dbf4461c42180", "filename": "src/test/compile-fail/do1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fdo1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fdo1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdo1.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,3 +1,3 @@\n fn main() {\n-    let x = do y; //! ERROR: expecting '{' but found\n+    let x = do y; //~ ERROR: expecting '{' but found\n }"}, {"sha": "919d186c40dfc3a8b854e42e1045d85669b56900", "filename": "src/test/compile-fail/do2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fdo2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fdo2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdo2.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,5 +1,5 @@\n fn f(f: fn@(int) -> bool) -> bool { f(10i) }\n \n fn main() {\n-    assert do f() |i| { i == 10i } == 10i; //! ERROR: expected `bool` but found `int`\n+    assert do f() |i| { i == 10i } == 10i; //~ ERROR: expected `bool` but found `int`\n }"}, {"sha": "2abd554ed6cfc4dd63f0927d95d0f88ca84535b4", "filename": "src/test/compile-fail/empty-vec-trailing-comma.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fempty-vec-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fempty-vec-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-vec-trailing-comma.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,3 +1,3 @@\n fn main() {\n-    let v = ~[,]; //! ERROR unexpected token: ','\n+    let v = ~[,]; //~ ERROR unexpected token: ','\n }"}, {"sha": "e1d86936d02948653fbf8c439eab5ed6df12f3ed", "filename": "src/test/compile-fail/enum-in-scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fenum-in-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fenum-in-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenum-in-scope.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,5 +1,5 @@\n enum hello = int;\n \n fn main() {\n-    let hello = 0; //!ERROR declaration of `hello` shadows an enum that's in\n+    let hello = 0; //~ERROR declaration of `hello` shadows an enum that's in\n }\n\\ No newline at end of file"}, {"sha": "e5f963733dccba87828a31343a686c63c84538ab", "filename": "src/test/compile-fail/estr-subtyping.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Festr-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Festr-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Festr-subtyping.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -4,26 +4,26 @@ fn wants_three(x: str/3) { }\n \n fn has_box(x: str/@) {\n    wants_box(x);\n-   wants_uniq(x); //! ERROR str storage differs: expected ~ but found @\n-   wants_three(x); //! ERROR str storage differs: expected 3 but found @\n+   wants_uniq(x); //~ ERROR str storage differs: expected ~ but found @\n+   wants_three(x); //~ ERROR str storage differs: expected 3 but found @\n }\n \n fn has_uniq(x: str/~) {\n-   wants_box(x); //! ERROR str storage differs: expected @ but found ~\n+   wants_box(x); //~ ERROR str storage differs: expected @ but found ~\n    wants_uniq(x);\n-   wants_three(x); //! ERROR str storage differs: expected 3 but found ~\n+   wants_three(x); //~ ERROR str storage differs: expected 3 but found ~\n }\n \n fn has_three(x: str/3) {\n-   wants_box(x); //! ERROR str storage differs: expected @ but found 3\n-   wants_uniq(x); //! ERROR str storage differs: expected ~ but found 3\n+   wants_box(x); //~ ERROR str storage differs: expected @ but found 3\n+   wants_uniq(x); //~ ERROR str storage differs: expected ~ but found 3\n    wants_three(x);\n }\n \n fn has_four(x: str/4) {\n-   wants_box(x); //! ERROR str storage differs: expected @ but found 4\n-   wants_uniq(x); //! ERROR str storage differs: expected ~ but found 4\n-   wants_three(x); //! ERROR str storage differs: expected 3 but found 4\n+   wants_box(x); //~ ERROR str storage differs: expected @ but found 4\n+   wants_uniq(x); //~ ERROR str storage differs: expected ~ but found 4\n+   wants_three(x); //~ ERROR str storage differs: expected 3 but found 4\n }\n \n fn main() {"}, {"sha": "2eabfa0c48c6101b8b677f20c4cd17003bbf6d4b", "filename": "src/test/compile-fail/evec-subtyping.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fevec-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fevec-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fevec-subtyping.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -4,26 +4,26 @@ fn wants_three(x: [uint]/3) { }\n \n fn has_box(x: @[uint]) {\n    wants_box(x);\n-   wants_uniq(x); //! ERROR [] storage differs: expected ~ but found @\n-   wants_three(x); //! ERROR [] storage differs: expected 3 but found @\n+   wants_uniq(x); //~ ERROR [] storage differs: expected ~ but found @\n+   wants_three(x); //~ ERROR [] storage differs: expected 3 but found @\n }\n \n fn has_uniq(x: ~[uint]) {\n-   wants_box(x); //! ERROR [] storage differs: expected @ but found ~\n+   wants_box(x); //~ ERROR [] storage differs: expected @ but found ~\n    wants_uniq(x);\n-   wants_three(x); //! ERROR [] storage differs: expected 3 but found ~\n+   wants_three(x); //~ ERROR [] storage differs: expected 3 but found ~\n }\n \n fn has_three(x: [uint]/3) {\n-   wants_box(x); //! ERROR [] storage differs: expected @ but found 3\n-   wants_uniq(x); //! ERROR [] storage differs: expected ~ but found 3\n+   wants_box(x); //~ ERROR [] storage differs: expected @ but found 3\n+   wants_uniq(x); //~ ERROR [] storage differs: expected ~ but found 3\n    wants_three(x);\n }\n \n fn has_four(x: [uint]/4) {\n-   wants_box(x); //! ERROR [] storage differs: expected @ but found 4\n-   wants_uniq(x); //! ERROR [] storage differs: expected ~ but found 4\n-   wants_three(x); //! ERROR [] storage differs: expected 3 but found 4\n+   wants_box(x); //~ ERROR [] storage differs: expected @ but found 4\n+   wants_uniq(x); //~ ERROR [] storage differs: expected ~ but found 4\n+   wants_three(x); //~ ERROR [] storage differs: expected 3 but found 4\n }\n \n fn main() {"}, {"sha": "bc78b475843eff276366ec57d7a2423ce6cbc575", "filename": "src/test/compile-fail/fn-compare-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ffn-compare-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ffn-compare-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-compare-mismatch.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -2,5 +2,5 @@ fn main() {\n     fn f() { }\n     fn g(i: int) { }\n     let x = f == g;\n-    //!^ ERROR expected `extern fn()` but found `extern fn(int)`\n+    //~^ ERROR expected `extern fn()` but found `extern fn(int)`\n }"}, {"sha": "01abd73bb479e64c8e1b6e14b64d24d4283fb1ca", "filename": "src/test/compile-fail/fn-variance-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -7,11 +7,11 @@ fn apply<T>(t: T, f: fn(T)) {\n }\n \n fn main() {\n-    apply(@3, takes_mut); //! ERROR (values differ in mutability)\n+    apply(@3, takes_mut); //~ ERROR (values differ in mutability)\n     apply(@3, takes_const);\n     apply(@3, takes_imm);\n \n     apply(@mut 3, takes_mut);\n     apply(@mut 3, takes_const);\n-    apply(@mut 3, takes_imm); //! ERROR (values differ in mutability)\n+    apply(@mut 3, takes_imm); //~ ERROR (values differ in mutability)\n }"}, {"sha": "6d9bdabae86c92774cfc344d87c8afab7a21a293", "filename": "src/test/compile-fail/fn-variance-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ffn-variance-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ffn-variance-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-variance-2.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -18,5 +18,5 @@ fn main() {\n     let g: @const int = r();\n \n     // Bad.\n-    let h: @int = r(); //! ERROR (values differ in mutability)\n+    let h: @int = r(); //~ ERROR (values differ in mutability)\n }"}, {"sha": "f9fe3d31fccb59696e866028b0a1472ea87fca44", "filename": "src/test/compile-fail/fn-variance-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ffn-variance-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ffn-variance-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-variance-3.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -20,5 +20,5 @@ fn main() {\n     // mutability check will fail, because the\n     // type of r has been inferred to be\n     // fn(@const int) -> @const int\n-    *r(@mut 3) = 4; //! ERROR assigning to dereference of const @ pointer\n+    *r(@mut 3) = 4; //~ ERROR assigning to dereference of const @ pointer\n }"}, {"sha": "cb56cbacb48be1d52505709e0d7ca2ac60a26920", "filename": "src/test/compile-fail/fully-qualified-type-name1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name1.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -3,5 +3,5 @@\n fn main() {\n     let x: option<uint>;\n     x = 5;\n-    //!^ ERROR mismatched types: expected `core::option::option<uint>`\n+    //~^ ERROR mismatched types: expected `core::option::option<uint>`\n }"}, {"sha": "db6521cbd789125da1b0f6d464b936a153e504db", "filename": "src/test/compile-fail/fully-qualified-type-name2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name2.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -10,7 +10,7 @@ mod y {\n \n fn bar(x: x::foo) -> y::foo {\n     ret x;\n-    //!^ ERROR mismatched types: expected `y::foo` but found `x::foo`\n+    //~^ ERROR mismatched types: expected `y::foo` but found `x::foo`\n }\n \n fn main() {"}, {"sha": "6bd764af17943bfd6a900d21611dd4e3b65731c6", "filename": "src/test/compile-fail/fully-qualified-type-name3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name3.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -5,7 +5,7 @@ type T2 = int;\n \n fn bar(x: T1) -> T2 {\n     ret x;\n-    //!^ ERROR mismatched types: expected `T2` but found `T1`\n+    //~^ ERROR mismatched types: expected `T2` but found `T1`\n }\n \n fn main() {"}, {"sha": "7356043203292838b697dd95dd9401254ae8a17e", "filename": "src/test/compile-fail/fully-qualified-type-name4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name4.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -4,7 +4,7 @@ import core::task::task;\n \n fn bar(x: uint) -> task {\n     ret x;\n-    //!^ ERROR mismatched types: expected `core::task::task`\n+    //~^ ERROR mismatched types: expected `core::task::task`\n }\n \n fn main() {"}, {"sha": "a82bb0b80d226665418563ddbfd1ba21098f8396", "filename": "src/test/compile-fail/iface-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fiface-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fiface-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fiface-cast.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -2,7 +2,7 @@ iface foo<T> { }\n \n fn bar(x: foo<uint>) -> foo<int> {\n     ret (x as foo::<int>);\n-    //!^ ERROR mismatched types: expected `foo<int>` but found `foo<uint>`\n+    //~^ ERROR mismatched types: expected `foo<int>` but found `foo<uint>`\n }\n \n fn main() {}"}, {"sha": "094dc7ac0621c78933868aec08f17d264dce1a5d", "filename": "src/test/compile-fail/iface-impl-different-num-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fiface-impl-different-num-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fiface-impl-different-num-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fiface-impl-different-num-params.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -3,7 +3,7 @@ iface foo {\n }\n impl of foo for int {\n     fn bar() -> int {\n-        //!^ ERROR method `bar` has 0 parameters but the iface has 1\n+        //~^ ERROR method `bar` has 0 parameters but the iface has 1\n         self\n     }\n }"}, {"sha": "b2ee357ffc589cad1732e7683346999f60140c9c", "filename": "src/test/compile-fail/iface-test-2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fiface-test-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fiface-test-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fiface-test-2.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -4,8 +4,8 @@ impl of bar for uint { fn dup() -> uint { self } fn blah<X>() {} }\n impl of bar for uint { fn dup() -> uint { self } fn blah<X>() {} }\n \n fn main() {\n-    10.dup::<int>(); //! ERROR does not take type parameters\n-    10.blah::<int, int>(); //! ERROR incorrect number of type parameters\n-    10u.dup(); //! ERROR multiple applicable methods\n-    (10 as bar).dup(); //! ERROR contains a self type\n+    10.dup::<int>(); //~ ERROR does not take type parameters\n+    10.blah::<int, int>(); //~ ERROR incorrect number of type parameters\n+    10u.dup(); //~ ERROR multiple applicable methods\n+    (10 as bar).dup(); //~ ERROR contains a self type\n }"}, {"sha": "1d45832d6df1c44a42ba6a5bb60e9fa7db1ed186", "filename": "src/test/compile-fail/iface-test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fiface-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fiface-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fiface-test.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,9 +1,9 @@\n iface foo { fn foo(); }\n \n-impl of foo for uint {} //! ERROR missing method `foo`\n+impl of foo for uint {} //~ ERROR missing method `foo`\n \n-impl of foo for uint { fn foo() -> int {} } //! ERROR incompatible type\n+impl of foo for uint { fn foo() -> int {} } //~ ERROR incompatible type\n \n-impl of int for uint { fn foo() {} } //! ERROR can only implement interface\n+impl of int for uint { fn foo() {} } //~ ERROR can only implement interface\n \n fn main() {}"}, {"sha": "aef5080e3ae196cc20ea0e8195118402969b1c3f", "filename": "src/test/compile-fail/impure-pred.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fimpure-pred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fimpure-pred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpure-pred.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -3,7 +3,7 @@\n fn g() { }\n \n pure fn f(_q: int) -> bool {\n-    g(); //! ERROR access to impure function prohibited in pure context\n+    g(); //~ ERROR access to impure function prohibited in pure context\n     ret true;\n }\n "}, {"sha": "d138efbe5e268a0a00e463802ada5dfdae380828", "filename": "src/test/compile-fail/index_message.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Findex_message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Findex_message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Findex_message.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     let z = ();\n-    log(debug, z[0]); //! ERROR cannot index a value of type `()`\n+    log(debug, z[0]); //~ ERROR cannot index a value of type `()`\n }"}, {"sha": "8efc2650fa75623ca7846e0984bdea8128a17d48", "filename": "src/test/compile-fail/integer-literal-suffix-inference.rs", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Finteger-literal-suffix-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Finteger-literal-suffix-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finteger-literal-suffix-inference.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -29,62 +29,62 @@ fn main() {\n     fn id_u64(n: u64) -> u64 { n }\n \n     id_i8(a8); // ok\n-    id_i8(a16); //! ERROR mismatched types: expected `i8` but found `i16`\n-    id_i8(a32); //! ERROR mismatched types: expected `i8` but found `i32`\n-    id_i8(a64); //! ERROR mismatched types: expected `i8` but found `i64`\n+    id_i8(a16); //~ ERROR mismatched types: expected `i8` but found `i16`\n+    id_i8(a32); //~ ERROR mismatched types: expected `i8` but found `i32`\n+    id_i8(a64); //~ ERROR mismatched types: expected `i8` but found `i64`\n \n-    id_i16(a8); //! ERROR mismatched types: expected `i16` but found `i8`\n+    id_i16(a8); //~ ERROR mismatched types: expected `i16` but found `i8`\n     id_i16(a16); // ok\n-    id_i16(a32); //! ERROR mismatched types: expected `i16` but found `i32`\n-    id_i16(a64); //! ERROR mismatched types: expected `i16` but found `i64`\n+    id_i16(a32); //~ ERROR mismatched types: expected `i16` but found `i32`\n+    id_i16(a64); //~ ERROR mismatched types: expected `i16` but found `i64`\n \n-    id_i32(a8); //! ERROR mismatched types: expected `i32` but found `i8`\n-    id_i32(a16); //! ERROR mismatched types: expected `i32` but found `i16`\n+    id_i32(a8); //~ ERROR mismatched types: expected `i32` but found `i8`\n+    id_i32(a16); //~ ERROR mismatched types: expected `i32` but found `i16`\n     id_i32(a32); // ok\n-    id_i32(a64); //! ERROR mismatched types: expected `i32` but found `i64`\n+    id_i32(a64); //~ ERROR mismatched types: expected `i32` but found `i64`\n \n-    id_i64(a8); //! ERROR mismatched types: expected `i64` but found `i8`\n-    id_i64(a16); //! ERROR mismatched types: expected `i64` but found `i16`\n-    id_i64(a32); //! ERROR mismatched types: expected `i64` but found `i32`\n+    id_i64(a8); //~ ERROR mismatched types: expected `i64` but found `i8`\n+    id_i64(a16); //~ ERROR mismatched types: expected `i64` but found `i16`\n+    id_i64(a32); //~ ERROR mismatched types: expected `i64` but found `i32`\n     id_i64(a64); // ok\n \n     id_i8(c8); // ok\n-    id_i8(c16); //! ERROR mismatched types: expected `i8` but found `i16`\n-    id_i8(c32); //! ERROR mismatched types: expected `i8` but found `i32`\n-    id_i8(c64); //! ERROR mismatched types: expected `i8` but found `i64`\n+    id_i8(c16); //~ ERROR mismatched types: expected `i8` but found `i16`\n+    id_i8(c32); //~ ERROR mismatched types: expected `i8` but found `i32`\n+    id_i8(c64); //~ ERROR mismatched types: expected `i8` but found `i64`\n \n-    id_i16(c8); //! ERROR mismatched types: expected `i16` but found `i8`\n+    id_i16(c8); //~ ERROR mismatched types: expected `i16` but found `i8`\n     id_i16(c16); // ok\n-    id_i16(c32); //! ERROR mismatched types: expected `i16` but found `i32`\n-    id_i16(c64); //! ERROR mismatched types: expected `i16` but found `i64`\n+    id_i16(c32); //~ ERROR mismatched types: expected `i16` but found `i32`\n+    id_i16(c64); //~ ERROR mismatched types: expected `i16` but found `i64`\n \n-    id_i32(c8); //! ERROR mismatched types: expected `i32` but found `i8`\n-    id_i32(c16); //! ERROR mismatched types: expected `i32` but found `i16`\n+    id_i32(c8); //~ ERROR mismatched types: expected `i32` but found `i8`\n+    id_i32(c16); //~ ERROR mismatched types: expected `i32` but found `i16`\n     id_i32(c32); // ok\n-    id_i32(c64); //! ERROR mismatched types: expected `i32` but found `i64`\n+    id_i32(c64); //~ ERROR mismatched types: expected `i32` but found `i64`\n \n-    id_i64(a8); //! ERROR mismatched types: expected `i64` but found `i8`\n-    id_i64(a16); //! ERROR mismatched types: expected `i64` but found `i16`\n-    id_i64(a32); //! ERROR mismatched types: expected `i64` but found `i32`\n+    id_i64(a8); //~ ERROR mismatched types: expected `i64` but found `i8`\n+    id_i64(a16); //~ ERROR mismatched types: expected `i64` but found `i16`\n+    id_i64(a32); //~ ERROR mismatched types: expected `i64` but found `i32`\n     id_i64(a64); // ok\n \n     id_u8(b8); // ok\n-    id_u8(b16); //! ERROR mismatched types: expected `u8` but found `u16`\n-    id_u8(b32); //! ERROR mismatched types: expected `u8` but found `u32`\n-    id_u8(b64); //! ERROR mismatched types: expected `u8` but found `u64`\n+    id_u8(b16); //~ ERROR mismatched types: expected `u8` but found `u16`\n+    id_u8(b32); //~ ERROR mismatched types: expected `u8` but found `u32`\n+    id_u8(b64); //~ ERROR mismatched types: expected `u8` but found `u64`\n \n-    id_u16(b8); //! ERROR mismatched types: expected `u16` but found `u8`\n+    id_u16(b8); //~ ERROR mismatched types: expected `u16` but found `u8`\n     id_u16(b16); // ok\n-    id_u16(b32); //! ERROR mismatched types: expected `u16` but found `u32`\n-    id_u16(b64); //! ERROR mismatched types: expected `u16` but found `u64`\n+    id_u16(b32); //~ ERROR mismatched types: expected `u16` but found `u32`\n+    id_u16(b64); //~ ERROR mismatched types: expected `u16` but found `u64`\n \n-    id_u32(b8); //! ERROR mismatched types: expected `u32` but found `u8`\n-    id_u32(b16); //! ERROR mismatched types: expected `u32` but found `u16`\n+    id_u32(b8); //~ ERROR mismatched types: expected `u32` but found `u8`\n+    id_u32(b16); //~ ERROR mismatched types: expected `u32` but found `u16`\n     id_u32(b32); // ok\n-    id_u32(b64); //! ERROR mismatched types: expected `u32` but found `u64`\n+    id_u32(b64); //~ ERROR mismatched types: expected `u32` but found `u64`\n \n-    id_u64(b8); //! ERROR mismatched types: expected `u64` but found `u8`\n-    id_u64(b16); //! ERROR mismatched types: expected `u64` but found `u16`\n-    id_u64(b32); //! ERROR mismatched types: expected `u64` but found `u32`\n+    id_u64(b8); //~ ERROR mismatched types: expected `u64` but found `u8`\n+    id_u64(b16); //~ ERROR mismatched types: expected `u64` but found `u16`\n+    id_u64(b32); //~ ERROR mismatched types: expected `u64` but found `u32`\n     id_u64(b64); // ok\n }"}, {"sha": "c11b98cfe5263ad29d1ce7944bc41fd1425572a3", "filename": "src/test/compile-fail/issue-1362.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-1362.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-1362.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1362.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,7 +1,7 @@\n // Regression test for issue #1362 - without that fix the span will be bogus\n // no-reformat\n fn main() {\n-  let x: uint = 20i; //! ERROR mismatched types\n+  let x: uint = 20i; //~ ERROR mismatched types\n }\n // NOTE: Do not add any extra lines as the line number the error is\n // on is significant; an error later in the source file might not"}, {"sha": "89189fc1fcad2a1fe305d87e376238fc7429910f", "filename": "src/test/compile-fail/issue-1448-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-1448-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-1448-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1448-1.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -3,5 +3,5 @@\n fn main() {\n     #macro[[#apply[f, [x, ...]], f(x, ...)]];\n     fn add(a: int, b: int) -> int { ret a + b; }\n-    assert (#apply[add, [y, 15]] == 16); //! ERROR unresolved name: y\n+    assert (#apply[add, [y, 15]] == 16); //~ ERROR unresolved name: y\n }"}, {"sha": "d91d48ac172409a733ae2fa790002a4619835cf1", "filename": "src/test/compile-fail/issue-1448-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-1448-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-1448-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1448-2.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,5 +1,5 @@\n // Regresion test for issue #1448 and #1386\n \n fn main() {\n-    #debug[\"%u\", 10i]; //! ERROR mismatched types\n+    #debug[\"%u\", 10i]; //~ ERROR mismatched types\n }"}, {"sha": "63b316813ff98aa055304d243053441d43a3451d", "filename": "src/test/compile-fail/issue-1697.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-1697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-1697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1697.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,7 +1,7 @@\n // Testing that we don't fail abnormally after hitting the errors\n \n-import unresolved::*; //! ERROR unresolved modulename\n-//!^ ERROR unresolved does not name a module\n+import unresolved::*; //~ ERROR unresolved modulename\n+//~^ ERROR unresolved does not name a module\n \n fn main() {\n }\n\\ No newline at end of file"}, {"sha": "ba4828f88bc676dd693902271e1f9b17517310de", "filename": "src/test/compile-fail/issue-1763.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-1763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-1763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1763.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,6 +1,6 @@\n // Issue #1763 - infer types correctly\n \n-type actor<T> = { //! ERROR type parameter `T` is unused\n+type actor<T> = { //~ ERROR type parameter `T` is unused\n     unused: bool\n };\n "}, {"sha": "f01d5b23f84d7bab3c94320fb000b4e9c708dcc2", "filename": "src/test/compile-fail/issue-1896.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-1896.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-1896.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1896.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -3,6 +3,6 @@ type t<T> = { f: fn() -> T };\n fn f<T>(_x: t<T>) {}\n \n fn main() {\n-  let x: t<()> = { f: || () }; //! ERROR expressions with stack closure\n+  let x: t<()> = { f: || () }; //~ ERROR expressions with stack closure\n     f(x);\n }"}, {"sha": "aaf3c7653fbc9528f8d3815fe33abe476236eee8", "filename": "src/test/compile-fail/issue-1962.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-1962.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-1962.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1962.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,7 +1,7 @@\n // compile-flags: -W err-while-true\n fn main() {\n   let mut i = 0;\n-  while true  { //! ERROR denote infinite loops with loop\n+  while true  { //~ ERROR denote infinite loops with loop\n     i += 1;\n     if i == 5 { break; }\n   }"}, {"sha": "9f489101f1bdebf659303931663a4c119ab2e750", "filename": "src/test/compile-fail/issue-2063-resource.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-2063-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-2063-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2063-resource.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,12 +1,12 @@\n // test that autoderef of a type like this does not\n // cause compiler to loop.  Note that no instances\n // of such a type could ever be constructed.\n-class t { //! ERROR this type cannot be instantiated\n+class t { //~ ERROR this type cannot be instantiated\n   let x: x;\n   let to_str: ();\n   new(x: x) { self.x = x; self.to_str = (); }\n }\n-enum x = @t; //! ERROR this type cannot be instantiated\n+enum x = @t; //~ ERROR this type cannot be instantiated\n \n fn main() {\n }"}, {"sha": "07b7d1ad3f4c6a187cb19b2323e56657c3f2fa92", "filename": "src/test/compile-fail/issue-2063.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,7 +1,7 @@\n // test that autoderef of a type like this does not\n // cause compiler to loop.  Note that no instances\n // of such a type could ever be constructed.\n-enum t = @t; //! ERROR this type cannot be instantiated\n+enum t = @t; //~ ERROR this type cannot be instantiated\n \n // I use an impl here because it will cause\n // the compiler to attempt autoderef and then"}, {"sha": "957d84eaa84fba0d858659d022ce8e1669f1b683", "filename": "src/test/compile-fail/issue-2111.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-2111.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-2111.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2111.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,5 +1,5 @@\n fn foo(a: option<uint>, b: option<uint>) {\n-  alt (a,b) { //! ERROR: non-exhaustive patterns: none not covered\n+  alt (a,b) { //~ ERROR: non-exhaustive patterns: none not covered\n     (some(a), some(b)) if a == b { }\n     (some(_), none) |\n     (none, some(_)) { }"}, {"sha": "df2138fc15a112aabfb765004b2bf6a701c1bfb1", "filename": "src/test/compile-fail/issue-2149.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -2,8 +2,8 @@ impl monad<A> for ~[A] {\n     fn bind<B>(f: fn(A) -> ~[B]) {\n         let mut r = fail;\n         for self.each |elt| { r += f(elt); }\n-        //!^ WARNING unreachable expression\n-        //!^^ ERROR the type of this value must be known\n+        //~^ WARNING unreachable expression\n+        //~^^ ERROR the type of this value must be known\n    }\n }\n fn main() {"}, {"sha": "79f0598baac83406c8a61a1f14faecaed387662e", "filename": "src/test/compile-fail/issue-2150.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,8 +1,8 @@\n fn fail_len(v: ~[const int]) -> uint {\n     let mut i = fail;\n     for v.each |x| { i += 1u; }\n-    //!^ WARNING unreachable statement\n-    //!^^ ERROR the type of this value must be known\n+    //~^ WARNING unreachable statement\n+    //~^^ ERROR the type of this value must be known\n     ret i;\n }\n fn main() {}\n\\ No newline at end of file"}, {"sha": "f97f57639b12164a5190de4f215c2979a6511b34", "filename": "src/test/compile-fail/issue-2151.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-2151.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-2151.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2151.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     do vec::iter(fail) |i| {\n         log (debug, i * 2);\n-        //!^ ERROR the type of this value must be known\n+        //~^ ERROR the type of this value must be known\n    };\n }\n\\ No newline at end of file"}, {"sha": "b0b210517147b2f24fc058e9fe78e5896c0624f9", "filename": "src/test/compile-fail/issue-2330.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-2330.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-2330.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2330.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -5,7 +5,7 @@ iface channel<T> {\n }\n \n // `chan` is not an iface, it's an enum\n-impl of chan for int { //! ERROR can only implement interface types\n+impl of chan for int { //~ ERROR can only implement interface types\n     fn send(v: int) { fail }\n }\n "}, {"sha": "cf7a36224bb50236f9cf0730bf7d5cb8370ae10d", "filename": "src/test/compile-fail/issue-2354.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-2354.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-2354.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2354.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -4,7 +4,7 @@\n   near the corresponding open brace. But currently it's reported at the end.\n   xfailed for now (see Issue #2354)\n  */\n-fn foo() { //! ERROR this open brace is not closed\n+fn foo() { //~ ERROR this open brace is not closed\n   alt some(x) {\n       some(y) { fail; }\n       none    { fail; }"}, {"sha": "f22fd18d356b74e2a196888fe51cf21fbd8fb163", "filename": "src/test/compile-fail/issue-2467.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-2467.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-2467.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2467.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,5 +1,5 @@\n-enum test { thing = 3u } //! ERROR mismatched types\n-//!^ ERROR expected signed integer constant\n+enum test { thing = 3u } //~ ERROR mismatched types\n+//~^ ERROR expected signed integer constant\n fn main() {\n     log(error, thing as int);\n     assert(thing as int == 3);"}, {"sha": "f36c52ce3548587438cf6246ef70578676c46881", "filename": "src/test/compile-fail/issue-2487-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-2487-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-2487-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2487-b.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -7,7 +7,7 @@ class socket {\n \n     fn set_identity()  {\n         do closure || {\n-        setsockopt_bytes(self.sock) //! ERROR copying a noncopyable value\n+        setsockopt_bytes(self.sock) //~ ERROR copying a noncopyable value\n       } \n     }\n }"}, {"sha": "e1c6002af127b18f8c1fe791443268db83832e19", "filename": "src/test/compile-fail/issue-2509-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-2509-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-2509-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2509-a.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,4 +1,4 @@\n-class c { //! ERROR a class must have at least one field\n+class c { //~ ERROR a class must have at least one field\n     new() { }\n }\n "}, {"sha": "d6e3022acc3e26f73f4e5078239d012c939f1fcc", "filename": "src/test/compile-fail/issue-2590.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -6,7 +6,7 @@ type parser = {\n \n impl parser for parser {\n     fn parse() -> [mut int] {\n-        dvec::unwrap(self.tokens) //! ERROR illegal move from self\n+        dvec::unwrap(self.tokens) //~ ERROR illegal move from self\n     }\n }\n "}, {"sha": "b068f9e1dc25a2dba676ebd45c23b89208f6abdf", "filename": "src/test/compile-fail/issue-2718-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -6,7 +6,7 @@ class send_packet<T: copy> {\n \n mod pingpong {\n     type ping = send_packet<pong>;\n-    enum pong = send_packet<ping>; //! ERROR illegal recursive enum type; wrap the inner value in a box to make it representable\n+    enum pong = send_packet<ping>; //~ ERROR illegal recursive enum type; wrap the inner value in a box to make it representable\n }\n \n fn main() {}"}, {"sha": "9dea2443187c151ceaaf2a56c9ef289c4b839295", "filename": "src/test/compile-fail/issue-511.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-511.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -7,7 +7,7 @@ fn f<T>(&o: option<T>) {\n \n fn main() {\n     f::<int>(option::none);\n-    //!^ ERROR taking mut reference to static item\n-    //!^^ ERROR illegal borrow unless pure: creating mutable alias to aliasable, immutable memory\n-    //!^^^ NOTE impure due to access to impure function\n+    //~^ ERROR taking mut reference to static item\n+    //~^^ ERROR illegal borrow unless pure: creating mutable alias to aliasable, immutable memory\n+    //~^^^ NOTE impure due to access to impure function\n }\n\\ No newline at end of file"}, {"sha": "ce6737cc96206da1b72bb5e25c32f7d7e716a57c", "filename": "src/test/compile-fail/issue-897-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-897-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-897-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-897-2.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,6 +1,6 @@\n fn g() -> ! { fail; }\n fn f() -> ! {\n-    ret 42i; //! ERROR expected `_|_` but found `int`\n-    g(); //! WARNING unreachable statement\n+    ret 42i; //~ ERROR expected `_|_` but found `int`\n+    g(); //~ WARNING unreachable statement\n }\n fn main() { }"}, {"sha": "1adf8534cca67b0a24816283eab8640bb44b185e", "filename": "src/test/compile-fail/issue-897.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-897.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fissue-897.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-897.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,5 +1,5 @@\n fn f() -> ! {\n-    ret 42i; //! ERROR expected `_|_` but found `int`\n-    fail; //! WARNING unreachable statement\n+    ret 42i; //~ ERROR expected `_|_` but found `int`\n+    fail; //~ WARNING unreachable statement\n }\n fn main() { }"}, {"sha": "07e0a6aecdd346fc8c5c4fb7b420a13632752149", "filename": "src/test/compile-fail/kindck-implicit-close-over-mut-var.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fkindck-implicit-close-over-mut-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fkindck-implicit-close-over-mut-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-implicit-close-over-mut-var.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -4,7 +4,7 @@ fn foo() {\n     // Here, i is *moved* into the closure: Not actually OK\n     let mut i = 0;\n     do task::spawn || {\n-        use(i); //! ERROR mutable variables cannot be implicitly captured\n+        use(i); //~ ERROR mutable variables cannot be implicitly captured\n     }\n }\n \n@@ -14,7 +14,7 @@ fn bar() {\n     let mut i = 0;\n     while i < 10 {\n         do task::spawn || {\n-            use(i); //! ERROR mutable variables cannot be implicitly captured\n+            use(i); //~ ERROR mutable variables cannot be implicitly captured\n         }\n         i += 1;\n     }"}, {"sha": "fce28489cbf229c3c1e73d971718a5a7055c7371", "filename": "src/test/compile-fail/kindck-nonsendable-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -2,7 +2,7 @@ fn foo(_x: @uint) {}\n \n fn main() {\n     let x = @3u;\n-    let _ = fn~() { foo(x); }; //! ERROR not a sendable value\n-    let _ = fn~(copy x) { foo(x); }; //! ERROR not a sendable value\n-    let _ = fn~(move x) { foo(x); }; //! ERROR not a sendable value\n+    let _ = fn~() { foo(x); }; //~ ERROR not a sendable value\n+    let _ = fn~(copy x) { foo(x); }; //~ ERROR not a sendable value\n+    let _ = fn~(move x) { foo(x); }; //~ ERROR not a sendable value\n }\n\\ No newline at end of file"}, {"sha": "7deafdce36305c12a6cf42bbf3af2f62ba6dc0e4", "filename": "src/test/compile-fail/liveness-and-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-and-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-and-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-and-init.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -2,5 +2,5 @@ fn main() {\n     let i: int;\n \n     log(debug, false && { i = 5; true });\n-    log(debug, i); //! ERROR use of possibly uninitialized variable: `i`\n+    log(debug, i); //~ ERROR use of possibly uninitialized variable: `i`\n }"}, {"sha": "41b9fd4f1d9a034989e4b459b9c41cd847b009bd", "filename": "src/test/compile-fail/liveness-assign-imm-local-in-loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-in-loop.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,8 +1,8 @@\n fn test() {\n     let v: int;\n     loop {\n-        v = 1; //! ERROR re-assignment of immutable variable\n-        //!^ NOTE prior assignment occurs here\n+        v = 1; //~ ERROR re-assignment of immutable variable\n+        //~^ NOTE prior assignment occurs here\n         copy v; // just to prevent liveness warnings\n     }\n }"}, {"sha": "baf0d55f057494516c4e15178bfae2acfd0f5bea", "filename": "src/test/compile-fail/liveness-assign-imm-local-in-op-eq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-in-op-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-in-op-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-in-op-eq.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,7 +1,7 @@\n fn test() {\n     let v: int;\n-    v = 2;  //! NOTE prior assignment occurs here\n-    v += 1; //! ERROR re-assignment of immutable variable\n+    v = 2;  //~ NOTE prior assignment occurs here\n+    v += 1; //~ ERROR re-assignment of immutable variable\n     copy v;\n }\n "}, {"sha": "d2388f200d613a30307b49e6ca4825105b08bfa8", "filename": "src/test/compile-fail/liveness-assign-imm-local-in-swap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-in-swap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-in-swap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-in-swap.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,17 +1,17 @@\n fn test1() {\n     let v: int;\n     let mut w: int;\n-    v = 1; //! NOTE prior assignment occurs here\n+    v = 1; //~ NOTE prior assignment occurs here\n     w = 2;\n-    v <-> w; //! ERROR re-assignment of immutable variable\n+    v <-> w; //~ ERROR re-assignment of immutable variable\n }\n \n fn test2() {\n     let v: int;\n     let mut w: int;\n-    v = 1; //! NOTE prior assignment occurs here\n+    v = 1; //~ NOTE prior assignment occurs here\n     w = 2;\n-    w <-> v; //! ERROR re-assignment of immutable variable\n+    w <-> v; //~ ERROR re-assignment of immutable variable\n }\n \n fn main() {"}, {"sha": "1b46e97dbd2fba7179788bff0b0a0d252f5cc985", "filename": "src/test/compile-fail/liveness-assign-imm-local-with-init.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-with-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-with-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-with-init.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,7 +1,7 @@\n fn test() {\n-    let v: int = 1; //! NOTE prior assignment occurs here\n+    let v: int = 1; //~ NOTE prior assignment occurs here\n     copy v;\n-    v = 2; //! ERROR re-assignment of immutable variable\n+    v = 2; //~ ERROR re-assignment of immutable variable\n     copy v;\n }\n "}, {"sha": "e341ed33c2fc0c60d74934c6c6df073469559302", "filename": "src/test/compile-fail/liveness-block-unint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-block-unint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-block-unint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-block-unint.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -2,6 +2,6 @@ fn force(f: fn()) { f(); }\n fn main() {\n     let x: int;\n     force(fn&() {\n-        log(debug, x); //! ERROR capture of possibly uninitialized variable: `x`\n+        log(debug, x); //~ ERROR capture of possibly uninitialized variable: `x`\n     });\n }"}, {"sha": "fc1c941836ead68f8bc8ca335c8bd81bd74f7b61", "filename": "src/test/compile-fail/liveness-break-uninit-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-break-uninit-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-break-uninit-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-break-uninit-2.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -3,10 +3,10 @@ fn foo() -> int {\n \n     while 1 != 2  {\n         break;\n-        x = 0; //! WARNING unreachable statement\n+        x = 0; //~ WARNING unreachable statement\n     }\n \n-    log(debug, x); //! ERROR use of possibly uninitialized variable: `x`\n+    log(debug, x); //~ ERROR use of possibly uninitialized variable: `x`\n \n     ret 17;\n }"}, {"sha": "56753a3a95ca5e31237832f7b8dc508d3ac0e89b", "filename": "src/test/compile-fail/liveness-break-uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-break-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-break-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-break-uninit.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -3,10 +3,10 @@ fn foo() -> int {\n \n     loop {\n         break;\n-        x = 0;  //! WARNING unreachable statement\n+        x = 0;  //~ WARNING unreachable statement\n     }\n \n-    log(debug, x); //! ERROR use of possibly uninitialized variable: `x`\n+    log(debug, x); //~ ERROR use of possibly uninitialized variable: `x`\n \n     ret 17;\n }"}, {"sha": "0480bc71798a7b8da22b69f0ead93f8cb1a6dae6", "filename": "src/test/compile-fail/liveness-ctor-access-self-with-uninit-fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-access-self-with-uninit-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-access-self-with-uninit-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-access-self-with-uninit-fields.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -3,7 +3,7 @@ class cat {\n   fn meow() {}\n   new() {\n      self.meow();\n-     //!^ ERROR use of possibly uninitialized field: `self.how_hungry`\n+     //~^ ERROR use of possibly uninitialized field: `self.how_hungry`\n   }\n }\n "}, {"sha": "d71dff980642217187ef341463d241c3a25f3873", "filename": "src/test/compile-fail/liveness-ctor-field-never-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-field-never-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-field-never-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-field-never-init.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,6 +1,6 @@\n class cat {\n   let how_hungry : int;\n-  new() {} //! ERROR field `self.how_hungry` is never initialized\n+  new() {} //~ ERROR field `self.how_hungry` is never initialized\n }\n \n fn main() {"}, {"sha": "3d4a88db26222caf6d2c402a12a38d6f4eb80974", "filename": "src/test/compile-fail/liveness-ctor-uninit-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-uninit-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-uninit-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-uninit-field.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -6,7 +6,7 @@ class cat {\n   new() {\n      self.a = 3;\n      self.b = self.a;\n-     self.a += self.c; //! ERROR use of possibly uninitialized field: `self.c`\n+     self.a += self.c; //~ ERROR use of possibly uninitialized field: `self.c`\n   }\n }\n "}, {"sha": "d03c7888974e11d1a225ebc566c070bbf6a02b0d", "filename": "src/test/compile-fail/liveness-ctor-uninit-var.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-uninit-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-uninit-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-uninit-var.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -12,7 +12,7 @@ class cat {\n   new(in_x : uint, in_y : int) {\n     let foo;\n     self.meows = in_x + (in_y as uint);\n-    self.how_hungry = foo; //! ERROR use of possibly uninitialized variable: `foo`\n+    self.how_hungry = foo; //~ ERROR use of possibly uninitialized variable: `foo`\n   }\n }\n "}, {"sha": "a115d7c4e34021a9d5aa34cd7102362f3d7c4ba2", "filename": "src/test/compile-fail/liveness-dead.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-dead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-dead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-dead.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -3,18 +3,18 @@ fn f1(&x: int) {\n }\n \n fn f2() {\n-    let mut x = 3; //! WARNING value assigned to `x` is never read\n+    let mut x = 3; //~ WARNING value assigned to `x` is never read\n     x = 4;\n     copy x;\n }\n \n fn f3() {\n     let mut x = 3;\n     copy x;\n-    x = 4; //! WARNING value assigned to `x` is never read\n+    x = 4; //~ WARNING value assigned to `x` is never read\n }\n \n fn main() { // leave this in here just to trigger compile-fail:\n     let x: int;\n-    copy x; //! ERROR use of possibly uninitialized variable: `x`\n+    copy x; //~ ERROR use of possibly uninitialized variable: `x`\n }"}, {"sha": "dfdcfa266fc7079a14e13fe2a6bd5ed9cd52f3df", "filename": "src/test/compile-fail/liveness-if-no-else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-if-no-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-if-no-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-if-no-else.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -2,5 +2,5 @@ fn foo(x: int) { log(debug, x); }\n \n fn main() {\n \tlet x: int; if 1 > 2 { x = 10; }\n-\tfoo(x); //! ERROR use of possibly uninitialized variable: `x`\n+\tfoo(x); //~ ERROR use of possibly uninitialized variable: `x`\n }"}, {"sha": "7f7003dbbe4f007383e7ea118b49d2a9f7644fe2", "filename": "src/test/compile-fail/liveness-if-with-else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-if-with-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-if-with-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-if-with-else.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -7,5 +7,5 @@ fn main() {\n     } else {\n         x = 10;\n     }\n-    foo(x); //! ERROR use of possibly uninitialized variable: `x`\n+    foo(x); //~ ERROR use of possibly uninitialized variable: `x`\n }"}, {"sha": "5716a380936e1de3b88a344fefa3346d312a175f", "filename": "src/test/compile-fail/liveness-init-in-called-fn-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-called-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-called-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-called-fn-expr.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     let j = fn@() -> int {\n         let i: int;\n-        ret i; //! ERROR use of possibly uninitialized variable: `i`\n+        ret i; //~ ERROR use of possibly uninitialized variable: `i`\n     };\n     j();\n }"}, {"sha": "cffba2132c2c1da1c051d25ca52e124d8b0e2b17", "filename": "src/test/compile-fail/liveness-init-in-fn-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-fn-expr.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     let f = fn@() -> int {\n         let i: int;\n-        ret i; //! ERROR use of possibly uninitialized variable: `i`\n+        ret i; //~ ERROR use of possibly uninitialized variable: `i`\n     };\n     log(error, f());\n }"}, {"sha": "f6ba7c32792add40b3f3359913efc46a44b40c71", "filename": "src/test/compile-fail/liveness-init-in-fru.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-fru.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-fru.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-fru.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -4,6 +4,6 @@ type point = {x: int, y: int};\n \n fn main() {\n     let mut origin: point;\n-    origin = {x: 10 with origin}; //! ERROR use of possibly uninitialized variable: `origin`\n+    origin = {x: 10 with origin}; //~ ERROR use of possibly uninitialized variable: `origin`\n     copy origin;\n }"}, {"sha": "89b07847e73dd9d88846fbc5e75d9518bc949e3a", "filename": "src/test/compile-fail/liveness-init-op-equal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-init-op-equal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-init-op-equal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-init-op-equal.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,6 +1,6 @@\n fn test() {\n     let v: int;\n-    v += 1; //! ERROR use of possibly uninitialized variable: `v`\n+    v += 1; //~ ERROR use of possibly uninitialized variable: `v`\n     copy v;\n }\n "}, {"sha": "afb384b24d599c4a037dc953dcf6a67def633b02", "filename": "src/test/compile-fail/liveness-init-plus-equal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-init-plus-equal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-init-plus-equal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-init-plus-equal.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,6 +1,6 @@\n fn test() {\n     let mut v: int;\n-    v = v + 1; //! ERROR use of possibly uninitialized variable: `v`\n+    v = v + 1; //~ ERROR use of possibly uninitialized variable: `v`\n     copy v;\n }\n "}, {"sha": "a0c52f1b4a9dbe967e5231dbb96055020cc52e5a", "filename": "src/test/compile-fail/liveness-issue-2163.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-issue-2163.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-issue-2163.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-issue-2163.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,6 +1,6 @@\n // xfail-test After the closure syntax change this started failing with the wrong error message\n fn main(_s: ~[str]) {\n     let a: ~[int] = ~[];\n-    do vec::each(a) |_x| { //! ERROR not all control paths return a value\n+    do vec::each(a) |_x| { //~ ERROR not all control paths return a value\n     }\n }"}, {"sha": "27e7e51b40547c0d25c75a473daa466ff1549fa5", "filename": "src/test/compile-fail/liveness-move-from-args.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-move-from-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-move-from-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-move-from-args.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,15 +1,15 @@\n fn take(-_x: int) { }\n \n fn from_by_value_arg(++x: int) {\n-    take(x);  //! ERROR illegal move from argument `x`, which is not copy or move mode\n+    take(x);  //~ ERROR illegal move from argument `x`, which is not copy or move mode\n }\n \n fn from_by_mut_ref_arg(&x: int) {\n-    take(x);  //! ERROR illegal move from argument `x`, which is not copy or move mode\n+    take(x);  //~ ERROR illegal move from argument `x`, which is not copy or move mode\n }\n \n fn from_by_ref_arg(&&x: int) {\n-    take(x);  //! ERROR illegal move from argument `x`, which is not copy or move mode\n+    take(x);  //~ ERROR illegal move from argument `x`, which is not copy or move mode\n }\n \n fn from_copy_arg(+x: int) {"}, {"sha": "a837d337f98ddf7e95db20c4a689a3ff1e63b996", "filename": "src/test/compile-fail/liveness-move-from-mode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-move-from-mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-move-from-mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-move-from-mode.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -4,7 +4,7 @@ fn main() {\n \n     let x: int = 25;\n     loop {\n-        take(x); //! ERROR use of moved variable: `x`\n-        //!^ NOTE move of variable occurred here\n+        take(x); //~ ERROR use of moved variable: `x`\n+        //~^ NOTE move of variable occurred here\n     }\n }"}, {"sha": "d9233e41e38a9e0901ee26633d15806c9b25c1df", "filename": "src/test/compile-fail/liveness-move-in-loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-loop.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -7,8 +7,8 @@ fn main() {\n         loop {\n             loop {\n                 loop {\n-                    x <- y; //! ERROR use of moved variable\n-                    //!^ NOTE move of variable occurred here\n+                    x <- y; //~ ERROR use of moved variable\n+                    //~^ NOTE move of variable occurred here\n \n                     copy x;\n                 }"}, {"sha": "261eb31089084641eb8285632936938d39fee5b7", "filename": "src/test/compile-fail/liveness-move-in-while.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-while.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -5,7 +5,7 @@ fn main() {\n     loop {\n         log(debug, y);\n         while true { while true { while true { x <- y; copy x; } } }\n-        //!^ ERROR use of moved variable: `y`\n-        //!^^ NOTE move of variable occurred here\n+        //~^ ERROR use of moved variable: `y`\n+        //~^^ NOTE move of variable occurred here\n     }\n }"}, {"sha": "138dbc0a7a847330f685c9d24be11777a793ff43", "filename": "src/test/compile-fail/liveness-or-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-or-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-or-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-or-init.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -2,5 +2,5 @@ fn main() {\n     let i: int;\n \n     log(debug, false || { i = 5; true });\n-    log(debug, i); //! ERROR use of possibly uninitialized variable: `i`\n+    log(debug, i); //~ ERROR use of possibly uninitialized variable: `i`\n }"}, {"sha": "830eb9f8e891d44264b64d197f4091dc3659cc43", "filename": "src/test/compile-fail/liveness-return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-return.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,6 +1,6 @@\n fn f() -> int {\n \tlet x: int;\n-\tret x; //! ERROR use of possibly uninitialized variable: `x`\n+\tret x; //~ ERROR use of possibly uninitialized variable: `x`\n }\n \n fn main() { f(); }"}, {"sha": "5291c9925b6f831519e50cfed1467a5f6d3188d6", "filename": "src/test/compile-fail/liveness-swap-uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-swap-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-swap-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-swap-uninit.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let mut x = 3;\n     let y;\n-    x <-> y; //! ERROR use of possibly uninitialized variable: `y`\n+    x <-> y; //~ ERROR use of possibly uninitialized variable: `y`\n     copy x;\n }"}, {"sha": "af8afda4e62f5df6ddfa846d1aa0c7fa423c66d2", "filename": "src/test/compile-fail/liveness-uninit-after-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-uninit-after-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-uninit-after-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-uninit-after-item.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let bar;\n     fn baz(_x: int) { }\n-    baz(bar); //! ERROR use of possibly uninitialized variable: `bar`\n+    baz(bar); //~ ERROR use of possibly uninitialized variable: `bar`\n }\n "}, {"sha": "59bb9e847dcd8c8e268bf3a1fa43bd15feece208", "filename": "src/test/compile-fail/liveness-uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-uninit.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -2,5 +2,5 @@ fn foo(x: int) { log(debug, x); }\n \n fn main() {\n \tlet x: int;\n-\tfoo(x); //! ERROR use of possibly uninitialized variable: `x`\n+\tfoo(x); //~ ERROR use of possibly uninitialized variable: `x`\n }"}, {"sha": "7db0a9fe1711fe25228b0d78c5d14cceae2f89b5", "filename": "src/test/compile-fail/liveness-unused.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,26 +1,26 @@\n fn f1(x: int) {\n-    //!^ WARNING unused variable: `x`\n+    //~^ WARNING unused variable: `x`\n }\n \n fn f1b(&x: int) {\n-    //!^ WARNING unused variable: `x`\n+    //~^ WARNING unused variable: `x`\n }\n \n fn f2() {\n     let x = 3;\n-    //!^ WARNING unused variable: `x`\n+    //~^ WARNING unused variable: `x`\n }\n \n fn f3() {\n     let mut x = 3;\n-    //!^ WARNING variable `x` is assigned to, but never used\n+    //~^ WARNING variable `x` is assigned to, but never used\n     x += 4;\n-    //!^ WARNING value assigned to `x` is never read\n+    //~^ WARNING value assigned to `x` is never read\n }\n \n fn f3b() {\n     let mut z = 3;\n-    //!^ WARNING variable `z` is assigned to, but never used\n+    //~^ WARNING variable `z` is assigned to, but never used\n     loop {\n         z += 4;\n     }\n@@ -40,5 +40,5 @@ fn even(i: int) : is_even(i) -> int { i }\n fn main() {\n     let i: int = 4;\n     log(debug, false && { check is_even(i); true });\n-    even(i); //! ERROR unsatisfied precondition\n+    even(i); //~ ERROR unsatisfied precondition\n }"}, {"sha": "f060fe8307f0e809b9a58dcee3462a8098b410d9", "filename": "src/test/compile-fail/liveness-use-after-move.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let x = @5;\n-    let y <- x; //! NOTE move of variable occurred here\n-    log(debug, *x); //! ERROR use of moved variable: `x`\n+    let y <- x; //~ NOTE move of variable occurred here\n+    log(debug, *x); //~ ERROR use of moved variable: `x`\n     copy y;\n }"}, {"sha": "6dfa9a997ff4488ff8642f26b794bca669e39afe", "filename": "src/test/compile-fail/liveness-use-after-send.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -9,8 +9,8 @@ enum _chan<T> = int;\n // Tests that \"log(debug, message);\" is flagged as using\n // message after the send deinitializes it\n fn test00_start(ch: _chan<int>, message: int, _count: int) {\n-    send(ch, message); //! NOTE move of variable occurred here\n-    log(debug, message); //! ERROR use of moved variable: `message`\n+    send(ch, message); //~ NOTE move of variable occurred here\n+    log(debug, message); //~ ERROR use of moved variable: `message`\n }\n \n fn main() { fail; }"}, {"sha": "8aee7acf819dea8dd01f0d5e618a99606ac2a41b", "filename": "src/test/compile-fail/liveness-use-in-index-lvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-use-in-index-lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-use-in-index-lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-use-in-index-lvalue.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,6 +1,6 @@\n fn test() {\n     let w: ~[int];\n-    w[5] = 0; //! ERROR use of possibly uninitialized variable: `w`\n+    w[5] = 0; //~ ERROR use of possibly uninitialized variable: `w`\n }\n \n fn main() { test(); }"}, {"sha": "c963e2dee4e2351dd399c5858158057dbfa5abd3", "filename": "src/test/compile-fail/liveness-while-break.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-while-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-while-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-while-break.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -4,7 +4,7 @@ fn test(cond: bool) {\n         v = 3;\n         break;\n     }\n-    #debug[\"%d\", v]; //! ERROR use of possibly uninitialized variable: `v`\n+    #debug[\"%d\", v]; //~ ERROR use of possibly uninitialized variable: `v`\n }\n \n fn main() {"}, {"sha": "28a5fb18a7f1dabadb761977c603deceab6794ff", "filename": "src/test/compile-fail/liveness-while-cond.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-while-cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-while-cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-while-cond.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     let x: bool;\n-    while x { } //! ERROR use of possibly uninitialized variable: `x`\n+    while x { } //~ ERROR use of possibly uninitialized variable: `x`\n }"}, {"sha": "9cd61330bae4cf88c4ebc49307d306f21a94f65f", "filename": "src/test/compile-fail/liveness-while.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fliveness-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-while.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,7 +1,7 @@\n fn f() -> int {\n     let mut x: int;\n     while 1 == 1 { x = 10; }\n-    ret x; //! ERROR use of possibly uninitialized variable: `x`\n+    ret x; //~ ERROR use of possibly uninitialized variable: `x`\n }\n \n fn main() { f(); }"}, {"sha": "06a227cffd2d7c43d4d09b794f67fff67597dd8d", "filename": "src/test/compile-fail/loop-does-not-diverge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Floop-does-not-diverge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Floop-does-not-diverge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Floop-does-not-diverge.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -4,7 +4,7 @@ fn forever() -> ! {\n   loop {\n     break;\n   }\n-  ret 42i; //! ERROR expected `_|_` but found `int`\n+  ret 42i; //~ ERROR expected `_|_` but found `int`\n }\n \n fn main() {"}, {"sha": "c94739d6011690e7bb519ec196cd92a15e970c0b", "filename": "src/test/compile-fail/lub-in-args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Flub-in-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Flub-in-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flub-in-args.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -12,6 +12,6 @@ fn main() {\n     // shortcoming of the current inference algorithm.  These errors\n     // are *not* desirable.\n \n-    two_args(x, y); //! ERROR (values differ in mutability)\n-    two_args(a, b); //! ERROR (values differ in mutability)\n+    two_args(x, y); //~ ERROR (values differ in mutability)\n+    two_args(a, b); //~ ERROR (values differ in mutability)\n }\n\\ No newline at end of file"}, {"sha": "106b0daf4b31cf04adedadae26065a71ecc2ea06", "filename": "src/test/compile-fail/main-wrong-type-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type-2.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,3 +1,3 @@\n fn main() -> char {\n-//!^ ERROR Wrong type in main function: found `extern fn() -> char`\n+//~^ ERROR Wrong type in main function: found `extern fn() -> char`\n }"}, {"sha": "b920f02e0694ff52468cc5e224d15d5ae0a15b9e", "filename": "src/test/compile-fail/main-wrong-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,3 +1,3 @@\n fn main(foo: {x: int, y: int}) {\n-//!^ ERROR Wrong type in main function: found `extern fn({x: int,y: int})`\n+//~^ ERROR Wrong type in main function: found `extern fn({x: int,y: int})`\n }"}, {"sha": "084cbf9529c0510b904aba1063a123c551c36cb7", "filename": "src/test/compile-fail/map-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -8,5 +8,5 @@ import std::map::map;\n fn main() {\n     let x: map<str,str> = map::str_hash::<str>() as map::<str,str>;\n     let y: map<uint,str> = x;\n-    //!^ ERROR mismatched types: expected `std::map::map<uint,str>`\n+    //~^ ERROR mismatched types: expected `std::map::map<uint,str>`\n }"}, {"sha": "0a42bef596838aaa86e35c9ea8070e69d60a39aa", "filename": "src/test/compile-fail/mode-inference-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fmode-inference-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fmode-inference-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmode-inference-fail.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -7,5 +7,5 @@ fn apply_int(f: fn(int) -> int, a: int) -> int { f(a) }\n fn main() {\n     let f = {|i| i};\n     assert apply_int(f, 2) == 2;\n-    assert apply(f, 2) == 2; //! ERROR expected argument mode ++\n+    assert apply(f, 2) == 2; //~ ERROR expected argument mode ++\n }"}, {"sha": "4fcb73e8516c401998ae08e36f46e4de71b2785c", "filename": "src/test/compile-fail/mutable-arguments.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fmutable-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fmutable-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-arguments.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -5,25 +5,25 @@ fn mutate_by_mut_ref(&x: uint) {\n }\n \n fn mutate_by_ref(&&x: uint) {\n-    //!^ WARNING unused variable: `x`\n-    x = 0u; //! ERROR assigning to argument\n+    //~^ WARNING unused variable: `x`\n+    x = 0u; //~ ERROR assigning to argument\n }\n \n fn mutate_by_val(++x: uint) {\n-    //!^ WARNING unused variable: `x`\n-    x = 0u; //! ERROR assigning to argument\n+    //~^ WARNING unused variable: `x`\n+    x = 0u; //~ ERROR assigning to argument\n }\n \n fn mutate_by_copy(+x: uint) {\n-    //!^ WARNING unused variable: `x`\n-    x = 0u; //! ERROR assigning to argument\n-    //!^ WARNING value assigned to `x` is never read\n+    //~^ WARNING unused variable: `x`\n+    x = 0u; //~ ERROR assigning to argument\n+    //~^ WARNING value assigned to `x` is never read\n }\n \n fn mutate_by_move(-x: uint) {\n-    //!^ WARNING unused variable: `x`\n-    x = 0u; //! ERROR assigning to argument\n-    //!^ WARNING value assigned to `x` is never read\n+    //~^ WARNING unused variable: `x`\n+    x = 0u; //~ ERROR assigning to argument\n+    //~^ WARNING value assigned to `x` is never read\n }\n \n fn main() {"}, {"sha": "c9484e62c1eb0612c51dd28f8a762783090e6a9c", "filename": "src/test/compile-fail/mutable-huh-box-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-box-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-box-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-box-assign.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     fn f(&&v: @const int) {\n-        *v = 1 //! ERROR assigning to dereference of const @ pointer\n+        *v = 1 //~ ERROR assigning to dereference of const @ pointer\n     }\n \n     let v = @0;"}, {"sha": "44da70f463c340b0aebe822e78840df21aee966d", "filename": "src/test/compile-fail/mutable-huh-field-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-field-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-field-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-field-assign.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     fn f(&&v: {const field: int}) {\n         // This shouldn't be possible\n-        v.field = 1 //! ERROR assigning to const field\n+        v.field = 1 //~ ERROR assigning to const field\n     }\n \n     let v = {field: 0};"}, {"sha": "1aa965869be5600654fdefbae8941980e4c28107", "filename": "src/test/compile-fail/mutable-huh-ptr-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-ptr-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-ptr-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-ptr-assign.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -2,7 +2,7 @@ use std;\n \n fn main() {\n     unsafe fn f(&&v: *const int) {\n-        *v = 1 //! ERROR assigning to dereference of const * pointer\n+        *v = 1 //~ ERROR assigning to dereference of const * pointer\n     }\n \n     unsafe {"}, {"sha": "1b9b7a22191cb45de34aa1a0975407023bf3ee04", "filename": "src/test/compile-fail/mutable-huh-unique-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-unique-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-unique-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-unique-assign.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     fn f(&&v: ~const int) {\n-        *v = 1 //! ERROR assigning to dereference of const ~ pointer\n+        *v = 1 //~ ERROR assigning to dereference of const ~ pointer\n     }\n \n     let v = ~0;"}, {"sha": "18ca917e8b64b7d24ec2282e7c9db9e2e82f36f3", "filename": "src/test/compile-fail/mutable-huh-variance-vec1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec1.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -8,5 +8,5 @@ fn main() {\n         v[0] = [mut 3]\n     }\n \n-    f(v); //! ERROR (values differ in mutability)\n+    f(v); //~ ERROR (values differ in mutability)\n }"}, {"sha": "0135c08c12865c897af97e25f1458ffcf1101066", "filename": "src/test/compile-fail/mutable-huh-variance-vec2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec2.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -8,5 +8,5 @@ fn main() {\n         v[0] = [3]\n     }\n \n-    f(v); //! ERROR (values differ in mutability)\n+    f(v); //~ ERROR (values differ in mutability)\n }"}, {"sha": "fde3d8a152a3b0dc704befbf03708f46029953cf", "filename": "src/test/compile-fail/mutable-huh-variance-vec3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec3.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -8,5 +8,5 @@ fn main() {\n         v[0][1] = [mut 3]\n     }\n \n-    f(v); //! ERROR (values differ in mutability)\n+    f(v); //~ ERROR (values differ in mutability)\n }"}, {"sha": "f234bc677c44c24d3a8275e503c25ecf164b4191", "filename": "src/test/compile-fail/mutable-huh-variance-vec4.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec4.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -27,20 +27,20 @@ fn main() {\n \n     f(v);\n     g(v);\n-    h(v); //! ERROR (values differ in mutability)\n-    i(v); //! ERROR (values differ in mutability)\n-    j(v); //! ERROR (values differ in mutability)\n+    h(v); //~ ERROR (values differ in mutability)\n+    i(v); //~ ERROR (values differ in mutability)\n+    j(v); //~ ERROR (values differ in mutability)\n \n-    f(w); //! ERROR (values differ in mutability)\n+    f(w); //~ ERROR (values differ in mutability)\n     g(w);\n     h(w);\n-    i(w); //! ERROR (values differ in mutability)\n-    j(w); //! ERROR (values differ in mutability)\n+    i(w); //~ ERROR (values differ in mutability)\n+    j(w); //~ ERROR (values differ in mutability)\n \n     // Note that without adding f() or h() to the mix, it is valid for\n     // x to have the type ~[mut ~[const int]], and thus we can safely\n     // call g() and i() but not j():\n     g(x);\n     i(x);\n-    j(x); //! ERROR (values differ in mutability)\n+    j(x); //~ ERROR (values differ in mutability)\n }"}, {"sha": "aad87ccbb6ebf7012e440f80bb746b197a888f2b", "filename": "src/test/compile-fail/mutable-huh-vec-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-vec-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-vec-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-vec-assign.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     fn f(&&v: ~[const int]) {\n         // This shouldn't be possible\n-        v[0] = 1 //! ERROR assigning to const vec content\n+        v[0] = 1 //~ ERROR assigning to const vec content\n     }\n \n     let v = ~[0];"}, {"sha": "b24a4cf69182c33f683dc95a03a22fa88b4ee2f9", "filename": "src/test/compile-fail/native-unsafe-fn-called.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fnative-unsafe-fn-called.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fnative-unsafe-fn-called.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnative-unsafe-fn-called.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -7,6 +7,6 @@ native mod test {\n \n fn main() {\n     test::free();\n-    //!^ ERROR access to unsafe function requires unsafe function or block\n+    //~^ ERROR access to unsafe function requires unsafe function or block\n }\n "}, {"sha": "fd2ace234573917d4620734a0ecb82b9ebb3b195", "filename": "src/test/compile-fail/native-unsafe-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fnative-unsafe-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fnative-unsafe-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnative-unsafe-fn.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -7,7 +7,7 @@ native mod test {\n \n fn main() {\n     let x = test::free;\n-    //!^ ERROR access to unsafe function requires unsafe function or block\n+    //~^ ERROR access to unsafe function requires unsafe function or block\n }\n \n "}, {"sha": "31fc99e276a3ddc1de29ce0e3b681f86b0bbd60c", "filename": "src/test/compile-fail/no-reuse-move-arc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -4,12 +4,12 @@ fn main() {\n     let v = ~[1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n     let arc_v = arc::arc(v);\n \n-    do task::spawn() |move arc_v| { //! NOTE move of variable occurred here\n+    do task::spawn() |move arc_v| { //~ NOTE move of variable occurred here\n         let v = *arc::get(&arc_v);\n         assert v[3] == 4;\n     };\n \n-    assert (*arc::get(&arc_v))[2] == 3; //! ERROR use of moved variable: `arc_v`\n+    assert (*arc::get(&arc_v))[2] == 3; //~ ERROR use of moved variable: `arc_v`\n \n     log(info, arc_v);\n }"}, {"sha": "b6304693149f5ab5161cd5a3f6757cb846511dae", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -7,7 +7,7 @@ fn main() {\n    \n     let x = ~mut some(foo(comm::port()));\n \n-    do task::spawn |move x| { //! ERROR not a sendable value\n+    do task::spawn |move x| { //~ ERROR not a sendable value\n         let mut y = none;\n         *x <-> y;\n         log(error, y);"}, {"sha": "22de85cdbfb7ec74d4ed266a2d363a5e0889a946", "filename": "src/test/compile-fail/noexporttypeexe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fnoexporttypeexe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fnoexporttypeexe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnoexporttypeexe.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -8,6 +8,6 @@ fn main() {\n     // because the def_id associated with the type was\n     // not convertible to a path.\n   let x: int = noexporttypelib::foo();\n-    //!^ ERROR expected `int` but found `core::option::option<int>`\n+    //~^ ERROR expected `int` but found `core::option::option<int>`\n }\n "}, {"sha": "885ac1a8f945e4c447b6f26f3f45dd543ce751a3", "filename": "src/test/compile-fail/non-const.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fnon-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fnon-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-const.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -16,15 +16,15 @@ class r2 {\n \n fn main() {\n     foo({f: 3});\n-    foo({mut f: 3}); //! ERROR missing `const`\n+    foo({mut f: 3}); //~ ERROR missing `const`\n     foo(~[1]);\n-    foo(~[mut 1]); //! ERROR missing `const`\n+    foo(~[mut 1]); //~ ERROR missing `const`\n     foo(~1);\n-    foo(~mut 1); //! ERROR missing `const`\n+    foo(~mut 1); //~ ERROR missing `const`\n     foo(@1);\n-    foo(@mut 1); //! ERROR missing `const`\n+    foo(@mut 1); //~ ERROR missing `const`\n     foo(r(1)); // this is okay now.\n-    foo(r2(@mut 1)); //! ERROR missing `const`\n+    foo(r2(@mut 1)); //~ ERROR missing `const`\n     foo(\"123\");\n-    foo({f: {mut f: 1}}); //! ERROR missing `const`\n+    foo({f: {mut f: 1}}); //~ ERROR missing `const`\n }"}, {"sha": "59136683e6fb095187dd8ed32a67ff4656110df2", "filename": "src/test/compile-fail/non-copyable-void.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fnon-copyable-void.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fnon-copyable-void.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-copyable-void.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -3,6 +3,6 @@ fn main() {\n     let y : *libc::c_void = x as *libc::c_void;\n     unsafe {\n         let _z = *y;\n-        //!^ ERROR copying a noncopyable value\n+        //~^ ERROR copying a noncopyable value\n     }\n }"}, {"sha": "0d004df5c1a59022429a16016efca7c86d58385e", "filename": "src/test/compile-fail/non-exhaustive-match.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -2,21 +2,21 @@ enum t { a, b, }\n \n fn main() {\n     let x = a;\n-    alt x { b { } } //! ERROR non-exhaustive patterns\n-    alt true { //! ERROR non-exhaustive patterns\n+    alt x { b { } } //~ ERROR non-exhaustive patterns\n+    alt true { //~ ERROR non-exhaustive patterns\n       true {}\n     }\n-    alt @some(10) { //! ERROR non-exhaustive patterns\n+    alt @some(10) { //~ ERROR non-exhaustive patterns\n       @none {}\n     }\n-    alt (2, 3, 4) { //! ERROR non-exhaustive patterns\n+    alt (2, 3, 4) { //~ ERROR non-exhaustive patterns\n       (_, _, 4) {}\n     }\n-    alt (a, a) { //! ERROR non-exhaustive patterns\n+    alt (a, a) { //~ ERROR non-exhaustive patterns\n       (a, b) {}\n       (b, a) {}\n     }\n-    alt a { //! ERROR b not covered\n+    alt a { //~ ERROR b not covered\n       a {}\n     }\n     // This is exhaustive, though the algorithm got it wrong at one point"}, {"sha": "36480253c97fac823fe214f7f607f14bc11a9bb1", "filename": "src/test/compile-fail/not-enough-arguments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fnot-enough-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fnot-enough-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-enough-arguments.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -8,5 +8,5 @@ fn foo(a: int, b: int, c: int, d:int) {\n \n fn main() {\n   foo(1, 2, 3);\n-  //!^ ERROR this function takes 4 parameters but 3\n+  //~^ ERROR this function takes 4 parameters but 3\n }"}, {"sha": "49b6d42a1297d3f09d646411d0d43ddef6e4cc51", "filename": "src/test/compile-fail/occurs-check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n-    let f; //! ERROR cyclic type of infinite size\n+    let f; //~ ERROR cyclic type of infinite size\n     f = @f;\n }"}, {"sha": "157718a26a641f315fe14fb328641f6098116a37", "filename": "src/test/compile-fail/omitted-arg-in-item-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fomitted-arg-in-item-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fomitted-arg-in-item-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fomitted-arg-in-item-fn.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,4 +1,4 @@\n // xfail-test\n \n-fn foo(x) { //! ERROR expecting ':' but found ')'\n+fn foo(x) { //~ ERROR expecting ':' but found ')'\n }\n\\ No newline at end of file"}, {"sha": "e6ad54f219de70999138d5b563c5f01bfb2bfac9", "filename": "src/test/compile-fail/omitted-arg-wrong-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fomitted-arg-wrong-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fomitted-arg-wrong-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fomitted-arg-wrong-types.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -4,8 +4,8 @@ fn let_in<T>(x: T, f: fn(T)) {}\n \n fn main() {\n     let_in(3u, fn&(i) { assert i == 3; });\n-    //!^ ERROR expected `uint` but found `int`\n+    //~^ ERROR expected `uint` but found `int`\n \n     let_in(3, fn&(i) { assert i == 3u; });\n-    //!^ ERROR expected `int` but found `uint`\n+    //~^ ERROR expected `int` but found `uint`\n }\n\\ No newline at end of file"}, {"sha": "c4ba5131879110366d834e5c268de29f98a88f8c", "filename": "src/test/compile-fail/pat-shadow-in-nested-binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fpat-shadow-in-nested-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fpat-shadow-in-nested-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpat-shadow-in-nested-binding.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,5 +1,5 @@\n enum foo = uint;\n \n fn main() {\n-    let (foo, _) = (2, 3); //! ERROR declaration of `foo` shadows an enum that's in scope\n+    let (foo, _) = (2, 3); //~ ERROR declaration of `foo` shadows an enum that's in scope\n }"}, {"sha": "10db67161d18546586f3feaaa879285104e3f7ef", "filename": "src/test/compile-fail/placement-new-bad-method-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fplacement-new-bad-method-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fplacement-new-bad-method-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fplacement-new-bad-method-type.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -11,5 +11,5 @@ impl methods for malloc_pool {\n fn main() {\n     let p = &malloc_pool(());\n     let x = new(*p) 4u;\n-    //!^ ERROR mismatched types: expected `fn(uint, uint) -> *()`\n+    //~^ ERROR mismatched types: expected `fn(uint, uint) -> *()`\n }"}, {"sha": "90d0df078b8a8838e118ca2342920e796912e71a", "filename": "src/test/compile-fail/pptypedef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fpptypedef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fpptypedef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpptypedef.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -4,5 +4,5 @@ fn bar(_t: foo) {}\n \n fn main() {\n     // we used to print foo<int>:\n-    bar(some(3u)); //! ERROR mismatched types: expected `foo`\n+    bar(some(3u)); //~ ERROR mismatched types: expected `foo`\n }\n\\ No newline at end of file"}, {"sha": "6edb9cb59d85fc345c5abfcb69b907b4b962695e", "filename": "src/test/compile-fail/prim-with-args.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fprim-with-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fprim-with-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprim-with-args.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,29 +1,29 @@\n fn main() {\n \n-let x: int<int>; //! ERROR Type parameters are not allowed on this type.\n-let x: i8<int>; //! ERROR Type parameters are not allowed on this type.\n-let x: i16<int>; //! ERROR Type parameters are not allowed on this type.\n-let x: i32<int>; //! ERROR Type parameters are not allowed on this type.\n-let x: i64<int>; //! ERROR Type parameters are not allowed on this type.\n-let x: uint<int>; //! ERROR Type parameters are not allowed on this type.\n-let x: u8<int>; //! ERROR Type parameters are not allowed on this type.\n-let x: u16<int>; //! ERROR Type parameters are not allowed on this type.\n-let x: u32<int>; //! ERROR Type parameters are not allowed on this type.\n-let x: u64<int>; //! ERROR Type parameters are not allowed on this type.\n-let x: float<int>; //! ERROR Type parameters are not allowed on this type.\n-let x: char<int>; //! ERROR Type parameters are not allowed on this type.\n+let x: int<int>; //~ ERROR Type parameters are not allowed on this type.\n+let x: i8<int>; //~ ERROR Type parameters are not allowed on this type.\n+let x: i16<int>; //~ ERROR Type parameters are not allowed on this type.\n+let x: i32<int>; //~ ERROR Type parameters are not allowed on this type.\n+let x: i64<int>; //~ ERROR Type parameters are not allowed on this type.\n+let x: uint<int>; //~ ERROR Type parameters are not allowed on this type.\n+let x: u8<int>; //~ ERROR Type parameters are not allowed on this type.\n+let x: u16<int>; //~ ERROR Type parameters are not allowed on this type.\n+let x: u32<int>; //~ ERROR Type parameters are not allowed on this type.\n+let x: u64<int>; //~ ERROR Type parameters are not allowed on this type.\n+let x: float<int>; //~ ERROR Type parameters are not allowed on this type.\n+let x: char<int>; //~ ERROR Type parameters are not allowed on this type.\n \n-let x: int/&; //! ERROR Region parameters are not allowed on this type.\n-let x: i8/&; //! ERROR Region parameters are not allowed on this type.\n-let x: i16/&; //! ERROR Region parameters are not allowed on this type.\n-let x: i32/&; //! ERROR Region parameters are not allowed on this type.\n-let x: i64/&; //! ERROR Region parameters are not allowed on this type.\n-let x: uint/&; //! ERROR Region parameters are not allowed on this type.\n-let x: u8/&; //! ERROR Region parameters are not allowed on this type.\n-let x: u16/&; //! ERROR Region parameters are not allowed on this type.\n-let x: u32/&; //! ERROR Region parameters are not allowed on this type.\n-let x: u64/&; //! ERROR Region parameters are not allowed on this type.\n-let x: float/&; //! ERROR Region parameters are not allowed on this type.\n-let x: char/&; //! ERROR Region parameters are not allowed on this type.\n+let x: int/&; //~ ERROR Region parameters are not allowed on this type.\n+let x: i8/&; //~ ERROR Region parameters are not allowed on this type.\n+let x: i16/&; //~ ERROR Region parameters are not allowed on this type.\n+let x: i32/&; //~ ERROR Region parameters are not allowed on this type.\n+let x: i64/&; //~ ERROR Region parameters are not allowed on this type.\n+let x: uint/&; //~ ERROR Region parameters are not allowed on this type.\n+let x: u8/&; //~ ERROR Region parameters are not allowed on this type.\n+let x: u16/&; //~ ERROR Region parameters are not allowed on this type.\n+let x: u32/&; //~ ERROR Region parameters are not allowed on this type.\n+let x: u64/&; //~ ERROR Region parameters are not allowed on this type.\n+let x: float/&; //~ ERROR Region parameters are not allowed on this type.\n+let x: char/&; //~ ERROR Region parameters are not allowed on this type.\n \n }"}, {"sha": "13455b1d74f8d9a37605ee502f38a4df58523e80", "filename": "src/test/compile-fail/pure-higher-order.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fpure-higher-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fpure-higher-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpure-higher-order.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -19,20 +19,20 @@ pure fn range3(from: uint, to: uint, f: fn(uint)) {\n }\n \n pure fn range4(from: uint, to: uint) {\n-    range(from, to, print) //! ERROR access to impure function prohibited in pure context\n+    range(from, to, print) //~ ERROR access to impure function prohibited in pure context\n }\n \n pure fn range5(from: uint, to: uint, x: {f: fn(uint)}) {\n-    range(from, to, x.f) //! ERROR access to impure function prohibited in pure context\n+    range(from, to, x.f) //~ ERROR access to impure function prohibited in pure context\n }\n \n pure fn range6(from: uint, to: uint, x: @{f: fn(uint)}) {\n-    range(from, to, x.f) //! ERROR access to impure function prohibited in pure context\n+    range(from, to, x.f) //~ ERROR access to impure function prohibited in pure context\n }\n \n pure fn range7(from: uint, to: uint) {\n     do range(from, to) |i| {\n-        print(i); //! ERROR access to impure function prohibited in pure context\n+        print(i); //~ ERROR access to impure function prohibited in pure context\n     }\n }\n "}, {"sha": "e418a2f201f521088d36a4d21c46e21fd61bba22", "filename": "src/test/compile-fail/pure-loop-body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fpure-loop-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fpure-loop-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpure-loop-body.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -14,7 +14,7 @@ pure fn range2(from: uint, to: uint, f: fn(uint)) {\n \n pure fn range3(from: uint, to: uint, f: {x: fn(uint)}) {\n     for range(from, to) |i| {\n-        f.x(i*2u); //! ERROR access to impure function prohibited\n+        f.x(i*2u); //~ ERROR access to impure function prohibited\n     }\n }\n "}, {"sha": "d63169d512f82dd852bed6cc44ef7caedde64f5f", "filename": "src/test/compile-fail/pure-modifies-aliased.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fpure-modifies-aliased.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fpure-modifies-aliased.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpure-modifies-aliased.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,16 +1,16 @@\n // Check that pure functions cannot modify aliased state.\n \n pure fn modify_in_ref(&&sum: {mut f: int}) {\n-    sum.f = 3; //! ERROR assigning to mutable field prohibited in pure context\n+    sum.f = 3; //~ ERROR assigning to mutable field prohibited in pure context\n }\n \n pure fn modify_in_box(sum: @mut {f: int}) {\n-    sum.f = 3; //! ERROR assigning to mutable field prohibited in pure context\n+    sum.f = 3; //~ ERROR assigning to mutable field prohibited in pure context\n }\n \n impl foo for int {\n     pure fn modify_in_box_rec(sum: @{mut f: int}) {\n-        sum.f = self; //! ERROR assigning to mutable field prohibited in pure context\n+        sum.f = self; //~ ERROR assigning to mutable field prohibited in pure context\n     }\n }\n "}, {"sha": "3f29e385202aa45c4d62f7c51ed42667903a3945", "filename": "src/test/compile-fail/pure-overloaded-op.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fpure-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fpure-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpure-overloaded-op.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -15,12 +15,12 @@ impl foo for point {\n pure fn a(p: point) -> int { p + 3 }\n \n pure fn b(p: point) -> int { p * 3 }\n-//!^ ERROR access to impure function prohibited in pure context\n+//~^ ERROR access to impure function prohibited in pure context\n \n pure fn c(p: point) -> int { p[3] }\n-//!^ ERROR access to impure function prohibited in pure context\n+//~^ ERROR access to impure function prohibited in pure context\n \n pure fn d(p: point) -> int { -p }\n-//!^ ERROR access to impure function prohibited in pure context\n+//~^ ERROR access to impure function prohibited in pure context\n \n fn main() {}"}, {"sha": "6725bd19e440f818993f931689166f5c813cc5bb", "filename": "src/test/compile-fail/pure-subtyping.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fpure-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fpure-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpure-subtyping.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -2,14 +2,14 @@\n \n fn assign_to_pure(x: pure fn(), y: fn(), z: unsafe fn()) {\n     let a: pure fn() = x;\n-    let b: pure fn() = y; //! ERROR expected pure fn but found impure fn\n-    let c: pure fn() = z; //! ERROR expected pure fn but found unsafe fn\n+    let b: pure fn() = y; //~ ERROR expected pure fn but found impure fn\n+    let c: pure fn() = z; //~ ERROR expected pure fn but found unsafe fn\n }\n \n fn assign_to_impure(x: pure fn(), y: fn(), z: unsafe fn()) {\n     let h: fn() = x;\n     let i: fn() = y;\n-    let j: fn() = z; //! ERROR expected impure fn but found unsafe fn\n+    let j: fn() = z; //~ ERROR expected impure fn but found unsafe fn\n }\n \n fn assign_to_unsafe(x: pure fn(), y: fn(), z: unsafe fn()) {\n@@ -20,16 +20,16 @@ fn assign_to_unsafe(x: pure fn(), y: fn(), z: unsafe fn()) {\n \n fn assign_to_pure2(x: pure fn@(), y: fn@(), z: unsafe fn@()) {\n     let a: pure fn() = x;\n-    let b: pure fn() = y; //! ERROR expected pure fn but found impure fn\n-    let c: pure fn() = z; //! ERROR expected pure fn but found unsafe fn\n+    let b: pure fn() = y; //~ ERROR expected pure fn but found impure fn\n+    let c: pure fn() = z; //~ ERROR expected pure fn but found unsafe fn\n \n-    let a: pure fn~() = x; //! ERROR closure protocol mismatch (fn~ vs fn@)\n-    let b: pure fn~() = y; //! ERROR closure protocol mismatch (fn~ vs fn@)\n-    let c: pure fn~() = z; //! ERROR closure protocol mismatch (fn~ vs fn@)\n+    let a: pure fn~() = x; //~ ERROR closure protocol mismatch (fn~ vs fn@)\n+    let b: pure fn~() = y; //~ ERROR closure protocol mismatch (fn~ vs fn@)\n+    let c: pure fn~() = z; //~ ERROR closure protocol mismatch (fn~ vs fn@)\n \n-    let a: unsafe fn~() = x; //! ERROR closure protocol mismatch (fn~ vs fn@)\n-    let b: unsafe fn~() = y; //! ERROR closure protocol mismatch (fn~ vs fn@)\n-    let c: unsafe fn~() = z; //! ERROR closure protocol mismatch (fn~ vs fn@)\n+    let a: unsafe fn~() = x; //~ ERROR closure protocol mismatch (fn~ vs fn@)\n+    let b: unsafe fn~() = y; //~ ERROR closure protocol mismatch (fn~ vs fn@)\n+    let c: unsafe fn~() = z; //~ ERROR closure protocol mismatch (fn~ vs fn@)\n }\n \n fn main() {"}, {"sha": "43a3536ed162eb9aaca63fd2181b18f5448e25fa", "filename": "src/test/compile-fail/qquote-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -40,7 +40,7 @@ fn main() {\n     let abc = #ast{23};\n     check_pp(abc,  pprust::print_expr, \"23\");\n \n-    let expr3 = #ast{2 - $(abcd) + 7}; //! ERROR unresolved name: abcd\n+    let expr3 = #ast{2 - $(abcd) + 7}; //~ ERROR unresolved name: abcd\n     check_pp(expr3,  pprust::print_expr, \"2 - 23 + 7\");\n }\n "}, {"sha": "c83d26c3a573982a9b56b7fa1957bbb08f9e97f0", "filename": "src/test/compile-fail/qquote-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -37,7 +37,7 @@ fn mk_ctxt() -> fake_ext_ctxt {\n fn main() {\n     let ext_cx = mk_ctxt();\n \n-    let stmt = #ast(stmt){let x int = 20;}; //! ERROR expected end-of-string\n+    let stmt = #ast(stmt){let x int = 20;}; //~ ERROR expected end-of-string\n     check_pp(*stmt,  pprust::print_stmt, \"\");\n }\n "}, {"sha": "1f69ffc7a4d2b6474a43a5e8ff9bbf44b1f2a4e8", "filename": "src/test/compile-fail/rec-expected.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Frec-expected.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Frec-expected.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frec-expected.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -3,7 +3,7 @@ type bar = {b: int};\n \n fn want_foo(f: foo) {}\n fn have_bar(b: bar) {\n-    want_foo(b); //! ERROR expected a record with field `a`\n+    want_foo(b); //~ ERROR expected a record with field `a`\n }\n \n fn main() {}\n\\ No newline at end of file"}, {"sha": "bf48e3f0da2a8aedf76190749fd484f8fe47dc48", "filename": "src/test/compile-fail/region-unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregion-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregion-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-unused.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,3 +1,3 @@\n-type foo/& = {f: int}; //! ERROR lifetime `self` unused\n+type foo/& = {f: int}; //~ ERROR lifetime `self` unused\n \n fn main() {}\n\\ No newline at end of file"}, {"sha": "09b5008aa9940607b23ae26833e7a03d111cbc7e", "filename": "src/test/compile-fail/regions-addr-of-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-arg.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,5 +1,5 @@\n fn foo(a: int) {\n-    let _p: &static.int = &a; //! ERROR mismatched types\n+    let _p: &static.int = &a; //~ ERROR mismatched types\n }\n \n fn bar(a: int) {"}, {"sha": "39e9f5687582bf725af6abb35d87318f17bdc75b", "filename": "src/test/compile-fail/regions-addr-of-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -6,7 +6,7 @@ class dog {\n     }\n \n     fn chase_cat() {\n-        let p: &static.mut uint = &mut self.cats_chased; //! ERROR mismatched types\n+        let p: &static.mut uint = &mut self.cats_chased; //~ ERROR mismatched types\n         *p += 1u;\n     }\n "}, {"sha": "7fa455487e1da87414fcd08df34346cf57cc7c8f", "filename": "src/test/compile-fail/regions-addr-of-upvar-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -7,7 +7,7 @@ class dog {\n \n     fn chase_cat() {\n         for uint::range(0u, 10u) |i| {\n-            let p: &static.mut uint = &mut self.food; //! ERROR mismatched types\n+            let p: &static.mut uint = &mut self.food; //~ ERROR mismatched types\n             *p = 3u;\n         }\n     }"}, {"sha": "300aece8c3c37c0e10201a94f8c6f8eaccdc2b3d", "filename": "src/test/compile-fail/regions-appearance-constraint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-appearance-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-appearance-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-appearance-constraint.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -17,7 +17,7 @@ fn testfn(cond: bool) {\n     let mut y = @4;\n \n     let mut a = &*x;\n-    //!^ ERROR reference is not valid outside of its lifetime\n+    //~^ ERROR reference is not valid outside of its lifetime\n \n     let mut exp = 3;\n     if cond {"}, {"sha": "9e6b5d0d34271b9b6f83fddd62aed477a79d8788", "filename": "src/test/compile-fail/regions-blk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-blk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-blk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-blk.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -7,7 +7,7 @@ fn foo(cond: bool) {\n         z = &x;\n     } else {\n         let w: &blk.int = &x;\n-        z = w; //! ERROR mismatched types\n+        z = w; //~ ERROR mismatched types\n     }\n }\n "}, {"sha": "5e893246cdc80ebdd8b5b712884dd7e66e753993", "filename": "src/test/compile-fail/regions-borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-borrow.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -3,6 +3,6 @@ fn foo(x: &uint) -> &uint { x }\n fn main() {\n     let p = @3u;\n     let r = foo(p);\n-    //!^ ERROR reference is not valid\n+    //~^ ERROR reference is not valid\n     assert *p == *r;\n }"}, {"sha": "9eef8c1a6438580ade743967160280af4bcb3059", "filename": "src/test/compile-fail/regions-bounds.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -7,20 +7,20 @@ iface an_iface/& { }\n class a_class/& { let x:int; new(x:int) { self.x = x; } }\n \n fn a_fn1(e: an_enum/&a) -> an_enum/&b {\n-    ret e; //! ERROR mismatched types: expected `an_enum/&b` but found `an_enum/&a`\n+    ret e; //~ ERROR mismatched types: expected `an_enum/&b` but found `an_enum/&a`\n }\n \n fn a_fn2(e: an_iface/&a) -> an_iface/&b {\n-    ret e; //! ERROR mismatched types: expected `an_iface/&b` but found `an_iface/&a`\n+    ret e; //~ ERROR mismatched types: expected `an_iface/&b` but found `an_iface/&a`\n }\n \n fn a_fn3(e: a_class/&a) -> a_class/&b {\n-    ret e; //! ERROR mismatched types: expected `a_class/&b` but found `a_class/&a`\n+    ret e; //~ ERROR mismatched types: expected `a_class/&b` but found `a_class/&a`\n }\n \n fn a_fn4(e: int/&a) -> int/&b {\n-    //!^ ERROR Region parameters are not allowed on this type.\n-    //!^^ ERROR Region parameters are not allowed on this type.\n+    //~^ ERROR Region parameters are not allowed on this type.\n+    //~^^ ERROR Region parameters are not allowed on this type.\n     ret e;\n }\n "}, {"sha": "3873dcb6d0a3cc7ce294b946727535817ea9b394", "filename": "src/test/compile-fail/regions-creating-enums.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -20,12 +20,12 @@ fn compute(x: &ast) -> uint {\n fn map_nums(x: &ast, f: fn(uint) -> uint) -> &ast {\n     alt *x {\n       num(x) {\n-        ret &num(f(x)); //! ERROR mismatched types: expected `&ast/&` but found\n+        ret &num(f(x)); //~ ERROR mismatched types: expected `&ast/&` but found\n       }\n       add(x, y) {\n         let m_x = map_nums(x, f);\n         let m_y = map_nums(y, f);\n-        ret &add(m_x, m_y);  //! ERROR mismatched types: expected `&ast/&` but found\n+        ret &add(m_x, m_y);  //~ ERROR mismatched types: expected `&ast/&` but found\n       }\n     }\n }"}, {"sha": "7f162b494aa9c7016a1dd444b4ab4cff777c20d9", "filename": "src/test/compile-fail/regions-creating-enums3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums3.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -4,7 +4,7 @@ enum ast/& {\n }\n \n fn mk_add_bad1(x: &a.ast, y: &b.ast) -> ast/&a {\n-    add(x, y) //! ERROR mismatched types: expected `&a.ast/&a` but found `&b.ast/&b`\n+    add(x, y) //~ ERROR mismatched types: expected `&a.ast/&a` but found `&b.ast/&b`\n }\n \n fn main() {"}, {"sha": "a95b6f9f4bdb7c7ac25932680b3c2a1ff7a3d177", "filename": "src/test/compile-fail/regions-creating-enums4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums4.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -4,7 +4,7 @@ enum ast/& {\n }\n \n fn mk_add_bad2(x: &a.ast, y: &a.ast, z: &ast) -> ast {\n-    add(x, y) //! ERROR mismatched types: expected `ast/&` but found `ast/&a`\n+    add(x, y) //~ ERROR mismatched types: expected `ast/&` but found `ast/&a`\n }\n \n fn main() {"}, {"sha": "67c7dd3317a3496e811a65af69133471923e5787", "filename": "src/test/compile-fail/regions-escape-into-other-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-escape-into-other-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-escape-into-other-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-into-other-fn.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -3,5 +3,5 @@ fn bar(x: &uint) -> uint { *x }\n \n fn main() {\n     let p = @3u;\n-    bar(foo(p)); //! ERROR reference is not valid\n+    bar(foo(p)); //~ ERROR reference is not valid\n }"}, {"sha": "04900da8ae5e5185fbdfa2f2cc6f9195eca63316", "filename": "src/test/compile-fail/regions-escape-loop-via-variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-variable.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -4,7 +4,7 @@ fn main() {\n     // Here, the variable `p` gets inferred to a type with a lifetime\n     // of the loop body.  The regionck then determines that this type\n     // is invalid.\n-    let mut p = //! ERROR reference is not valid\n+    let mut p = //~ ERROR reference is not valid\n         &x;\n \n     loop {"}, {"sha": "5f57a3e87b1c9412786343b26b25bbac2e1c1594", "filename": "src/test/compile-fail/regions-escape-loop-via-vec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -2,16 +2,16 @@\n // This generates a ton of error msgs at the moment.\n fn broken() -> int {\n     let mut x = 3;\n-    let mut y = ~[&mut x]; //! ERROR reference is not valid\n+    let mut y = ~[&mut x]; //~ ERROR reference is not valid\n     while x < 10 {\n         let mut z = x;\n         y += ~[&mut z];\n         x += 1;\n     }\n     vec::foldl(0, y, |v, p| v + *p )\n-    //!^ ERROR reference is not valid\n-    //!^^ ERROR reference is not valid\n-    //!^^^ ERROR reference is not valid\n+    //~^ ERROR reference is not valid\n+    //~^^ ERROR reference is not valid\n+    //~^^^ ERROR reference is not valid\n }\n \n fn main() { }\n\\ No newline at end of file"}, {"sha": "571b5da41fefd2314d887904101655bf5dafb5a6", "filename": "src/test/compile-fail/regions-fn-subtyping.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -7,7 +7,7 @@ fn has_same_region(f: fn(x: &a.int, g: fn(y: &a.int))) {\n     // accept any region.  That is, the type that `has_same_region`\n     // expects is *not* a subtype of the type that `wants_two_regions`\n     // expects.\n-    wants_two_regions(f); //! ERROR mismatched types\n+    wants_two_regions(f); //~ ERROR mismatched types\n }\n \n fn wants_two_regions(_f: fn(x: &int, g: fn(y: &int))) {"}, {"sha": "fc8a631c6b74f777dd6f28dad295492addc0b03f", "filename": "src/test/compile-fail/regions-fns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-fns.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -2,7 +2,7 @@\n // with lifetime r, and a is a pointer with unspecified lifetime.\n fn not_ok_1(a: &uint) {\n     let mut g: fn@(x: &uint) = fn@(x: &r.uint) {};\n-    //!^ ERROR mismatched types\n+    //~^ ERROR mismatched types\n     g(a);\n }\n \n@@ -11,7 +11,7 @@ fn not_ok_1(a: &uint) {\n fn not_ok_2(s: &s.uint)\n {\n     let mut g: fn@(x: &uint) = fn@(x: &r.uint) {};\n-    //!^ ERROR mismatched types\n+    //~^ ERROR mismatched types\n     g(s);\n }\n "}, {"sha": "f6d4d5885f99f62997e4467361886557a5daa06b", "filename": "src/test/compile-fail/regions-iface-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-iface-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-iface-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-iface-1.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -11,7 +11,7 @@ impl/& of get_ctxt for has_ctxt {\n \n     // Here an error occurs because we used `&self` but\n     // the definition used `&`:\n-    fn get_ctxt() -> &self.ctxt { //! ERROR method `get_ctxt` has an incompatible type\n+    fn get_ctxt() -> &self.ctxt { //~ ERROR method `get_ctxt` has an incompatible type\n         self.c\n     }\n "}, {"sha": "3ebba4e2d2f43f4f5ef4e254719a5adf2b44532e", "filename": "src/test/compile-fail/regions-iface-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-iface-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-iface-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-iface-2.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -13,7 +13,7 @@ impl/& of get_ctxt for has_ctxt {\n fn make_gc() -> get_ctxt  {\n     let ctxt = { v: 22u };\n     let hc = { c: &ctxt };\n-    ret hc as get_ctxt; //! ERROR mismatched types: expected `get_ctxt/&`\n+    ret hc as get_ctxt; //~ ERROR mismatched types: expected `get_ctxt/&`\n }\n \n fn main() {"}, {"sha": "efd15583ab6d91d020cda680e2b3b57367c85f91", "filename": "src/test/compile-fail/regions-iface-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-iface-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-iface-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-iface-3.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -3,11 +3,11 @@ iface get_ctxt/& {\n }\n \n fn make_gc1(gc: get_ctxt/&a) -> get_ctxt/&b  {\n-    ret gc; //! ERROR mismatched types: expected `get_ctxt/&b` but found `get_ctxt/&a`\n+    ret gc; //~ ERROR mismatched types: expected `get_ctxt/&b` but found `get_ctxt/&a`\n }\n \n fn make_gc2(gc: get_ctxt/&a) -> get_ctxt/&b  {\n-    ret gc as get_ctxt; //! ERROR mismatched types: expected `get_ctxt/&b` but found `get_ctxt/&a`\n+    ret gc as get_ctxt; //~ ERROR mismatched types: expected `get_ctxt/&b` but found `get_ctxt/&a`\n }\n \n fn main() {"}, {"sha": "83a117d951a1d8e05c7bd9282786ef8c6ea7e81a", "filename": "src/test/compile-fail/regions-in-consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-in-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-in-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-consts.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,7 +1,7 @@\n // xfail-test\n \n-const c_x: &blk.int = 22; //! ERROR only the static region is allowed here\n-const c_y: &static.int = &22; //! ERROR only the static region is allowed here\n+const c_x: &blk.int = 22; //~ ERROR only the static region is allowed here\n+const c_y: &static.int = &22; //~ ERROR only the static region is allowed here\n \n fn main() {\n }\n\\ No newline at end of file"}, {"sha": "d7b1ddf1e1817e9a57b567f6151b3b615f337487", "filename": "src/test/compile-fail/regions-in-enums.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-in-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-in-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-enums.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,13 +1,13 @@\n enum no0 {\n-    x0(&uint) //! ERROR to use region types here, the containing type must be declared with a region bound\n+    x0(&uint) //~ ERROR to use region types here, the containing type must be declared with a region bound\n }\n \n enum no1 {\n-    x1(&self.uint) //! ERROR to use region types here, the containing type must be declared with a region bound\n+    x1(&self.uint) //~ ERROR to use region types here, the containing type must be declared with a region bound\n }\n \n enum no2 {\n-    x2(&foo.uint) //! ERROR named regions other than `self` are not allowed as part of a type declaration\n+    x2(&foo.uint) //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n }\n \n enum yes0/& {\n@@ -19,7 +19,7 @@ enum yes1/& {\n }\n \n enum yes2/& {\n-    x5(&foo.uint) //! ERROR named regions other than `self` are not allowed as part of a type declaration\n+    x5(&foo.uint) //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n }\n \n fn main() {}\n\\ No newline at end of file"}, {"sha": "55990fb0568c2bbacc7604d613efe641be31f87a", "filename": "src/test/compile-fail/regions-in-rsrcs.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-in-rsrcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-in-rsrcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-rsrcs.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,18 +1,18 @@\n class no0 {\n-  let x: &uint; //! ERROR to use region types here, the containing type must be declared with a region bound\n-  new(x: &uint) { self.x = x; } //! ERROR to use region types here, the containing type must be declared with a region bound\n+  let x: &uint; //~ ERROR to use region types here, the containing type must be declared with a region bound\n+  new(x: &uint) { self.x = x; } //~ ERROR to use region types here, the containing type must be declared with a region bound\n   drop {}\n }\n \n class no1 {\n-  let x: &self.uint; //! ERROR to use region types here, the containing type must be declared with a region bound\n-  new(x: &self.uint) { self.x = x; } //! ERROR to use region types here, the containing type must be declared with a region bound\n+  let x: &self.uint; //~ ERROR to use region types here, the containing type must be declared with a region bound\n+  new(x: &self.uint) { self.x = x; } //~ ERROR to use region types here, the containing type must be declared with a region bound\n   drop {}\n }\n \n class no2 {\n-  let x: &foo.uint; //! ERROR named regions other than `self` are not allowed as part of a type declaration\n-  new(x: &foo.uint) { self.x = x; } //! ERROR named regions other than `self` are not allowed as part of a type declaration\n+  let x: &foo.uint; //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n+  new(x: &foo.uint) { self.x = x; } //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n   drop {}\n }\n \n@@ -29,8 +29,8 @@ class yes1/& {\n }\n \n class yes2/& {\n-  let x: &foo.uint; //! ERROR named regions other than `self` are not allowed as part of a type declaration\n-  new(x: &foo.uint) { self.x = x; } //! ERROR named regions other than `self` are not allowed as part of a type declaration\n+  let x: &foo.uint; //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n+  new(x: &foo.uint) { self.x = x; } //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n   drop {}\n }\n "}, {"sha": "bbc5da2004d4749525ea167198d67d9adf4ff48d", "filename": "src/test/compile-fail/regions-in-type-items.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-in-type-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-in-type-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-type-items.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,13 +1,13 @@\n type item_ty_no0 = {\n-    x: &uint //! ERROR to use region types here, the containing type must be declared with a region bound\n+    x: &uint //~ ERROR to use region types here, the containing type must be declared with a region bound\n };\n \n type item_ty_no1 = {\n-    x: &self.uint //! ERROR to use region types here, the containing type must be declared with a region bound\n+    x: &self.uint //~ ERROR to use region types here, the containing type must be declared with a region bound\n };\n \n type item_ty_no2 = {\n-    x: &foo.uint //! ERROR named regions other than `self` are not allowed as part of a type declaration\n+    x: &foo.uint //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n };\n \n type item_ty_yes0/& = {\n@@ -18,8 +18,8 @@ type item_ty_yes1/& = {\n     x: &self.uint\n };\n \n-type item_ty_yes2/& = { //! ERROR lifetime `self` unused inside reference-parameterized type\n-    x: &foo.uint //! ERROR named regions other than `self` are not allowed as part of a type declaration\n+type item_ty_yes2/& = { //~ ERROR lifetime `self` unused inside reference-parameterized type\n+    x: &foo.uint //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n };\n \n fn main() {}\n\\ No newline at end of file"}, {"sha": "c6393d89d2bbdb908b49668669c2c38607c573cc", "filename": "src/test/compile-fail/regions-nested-fns.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -7,13 +7,13 @@ fn nested(x: &x.int) {\n     ignore(fn&(z: &z.int) {\n         ay = x;\n         ay = &y;\n-        ay = z; //! ERROR references with lifetime\n+        ay = z; //~ ERROR references with lifetime\n     });\n \n     ignore(fn&(z: &z.int) -> &z.int {\n-        if false { ret x; }  //! ERROR references with lifetime\n-        if false { ret &y; } //! ERROR references with lifetime\n-        if false { ret ay; } //! ERROR references with lifetime\n+        if false { ret x; }  //~ ERROR references with lifetime\n+        if false { ret &y; } //~ ERROR references with lifetime\n+        if false { ret ay; } //~ ERROR references with lifetime\n         ret z;\n     });\n }"}, {"sha": "c6936cf8392232fe85ee66365b87b0b96a971c20", "filename": "src/test/compile-fail/regions-out-of-scope-slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-out-of-scope-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-out-of-scope-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-out-of-scope-slice.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -3,7 +3,7 @@\n fn foo(cond: bool) {\n     // Here we will infer a type that uses the\n     // region of the if stmt then block, but in the scope:\n-    let mut x; //! ERROR foo\n+    let mut x; //~ ERROR foo\n \n     if cond {\n         x = &[1,2,3]blk;"}, {"sha": "6e2bd60c4ccf3ab2f2e43ccf05c088fed3238e17", "filename": "src/test/compile-fail/regions-scoping.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-scoping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-scoping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-scoping.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -9,19 +9,19 @@ fn nested(x: &x.int) {  // (1)\n                   z: &z.int) -> &z.int) // A fresh region `z` (3)\n             -> &x.int {\n \n-            if false { ret z(x, x, x); } //! ERROR mismatched types: expected `&y.int` but found `&x.int`\n-            if false { ret z(x, x, y); } //! ERROR mismatched types: expected `&y.int` but found `&x.int`\n-                                        //!^ ERROR mismatched types: expected `&x.int` but found `&y.int`\n+            if false { ret z(x, x, x); } //~ ERROR mismatched types: expected `&y.int` but found `&x.int`\n+            if false { ret z(x, x, y); } //~ ERROR mismatched types: expected `&y.int` but found `&x.int`\n+                                        //~^ ERROR mismatched types: expected `&x.int` but found `&y.int`\n             if false { ret z(x, y, x); }\n-            if false { ret z(x, y, y); } //! ERROR mismatched types: expected `&x.int` but found `&y.int`\n-            if false { ret z(y, x, x); } //! ERROR mismatched types: expected `&x.int` but found `&y.int`\n-                                        //!^ ERROR mismatched types: expected `&y.int` but found `&x.int`\n-            if false { ret z(y, x, y); } //! ERROR mismatched types: expected `&x.int` but found `&y.int`\n-                                        //!^ ERROR mismatched types: expected `&y.int` but found `&x.int`\n-                                       //!^^ ERROR mismatched types: expected `&x.int` but found `&y.int`\n-            if false { ret z(y, y, x); } //! ERROR mismatched types: expected `&x.int` but found `&y.int`\n-            if false { ret z(y, y, y); } //! ERROR mismatched types: expected `&x.int` but found `&y.int`\n-                                        //!^ ERROR mismatched types: expected `&x.int` but found `&y.int`\n+            if false { ret z(x, y, y); } //~ ERROR mismatched types: expected `&x.int` but found `&y.int`\n+            if false { ret z(y, x, x); } //~ ERROR mismatched types: expected `&x.int` but found `&y.int`\n+                                        //~^ ERROR mismatched types: expected `&y.int` but found `&x.int`\n+            if false { ret z(y, x, y); } //~ ERROR mismatched types: expected `&x.int` but found `&y.int`\n+                                        //~^ ERROR mismatched types: expected `&y.int` but found `&x.int`\n+                                       //~^^ ERROR mismatched types: expected `&x.int` but found `&y.int`\n+            if false { ret z(y, y, x); } //~ ERROR mismatched types: expected `&x.int` but found `&y.int`\n+            if false { ret z(y, y, y); } //~ ERROR mismatched types: expected `&x.int` but found `&y.int`\n+                                        //~^ ERROR mismatched types: expected `&x.int` but found `&y.int`\n             fail;\n         }\n     ) |foo| {\n@@ -33,10 +33,10 @@ fn nested(x: &x.int) {  // (1)\n         let z = 3i;\n         let d: &x.int = foo(x, x, |_x, _y, z| z );\n         let e: &x.int = foo(x, &z, |_x, _y, z| z );\n-        let f: &x.int = foo(&z, &z, |_x, _y, z| z ); //! ERROR mismatched types: expected `&x.int` but found\n+        let f: &x.int = foo(&z, &z, |_x, _y, z| z ); //~ ERROR mismatched types: expected `&x.int` but found\n \n-        foo(x, &z, |x, _y, _z| x ); //! ERROR mismatched types: expected `&z.int` but found `&x.int`\n-        foo(x, &z, |_x, y, _z| y ); //! ERROR mismatched types: expected `&z.int` but found `&<block at\n+        foo(x, &z, |x, _y, _z| x ); //~ ERROR mismatched types: expected `&z.int` but found `&x.int`\n+        foo(x, &z, |_x, y, _z| y ); //~ ERROR mismatched types: expected `&z.int` but found `&<block at\n     }\n }\n "}, {"sha": "bb40a436fba62f898e24d3d623e0df5781bc0934", "filename": "src/test/compile-fail/regions-var-type-out-of-scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-var-type-out-of-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fregions-var-type-out-of-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-var-type-out-of-scope.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -3,7 +3,7 @@\n fn foo(cond: bool) {\n     // Here we will infer a type that uses the\n     // region of the if stmt then block:\n-    let mut x; //! ERROR foo\n+    let mut x; //~ ERROR foo\n \n     if cond {\n         x = &3;"}, {"sha": "8136e0c7440c32df555c304d8efaa308059bb120", "filename": "src/test/compile-fail/selftype-astparam.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fselftype-astparam.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fselftype-astparam.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fselftype-astparam.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -11,5 +11,5 @@ fn do_add<A:add>(x: A, y: A) -> A { x + y }\n fn main() {\n     let x = 3 as add;\n     let y = 4 as add;\n-    do_add(x, y); //! ERROR a boxed iface with self types may not be passed as a bounded type\n+    do_add(x, y); //~ ERROR a boxed iface with self types may not be passed as a bounded type\n }"}, {"sha": "bbaf49e85bf3c6d9f0a0a5c83c5358bbc7eb4325", "filename": "src/test/compile-fail/selftype-ifacetype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fselftype-ifacetype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fselftype-ifacetype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fselftype-ifacetype.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -3,7 +3,7 @@ iface add {\n }\n \n fn do_add(x: add, y: add) -> add {\n-    x + y //! ERROR can not call a method that contains a self type through a boxed iface\n+    x + y //~ ERROR can not call a method that contains a self type through a boxed iface\n }\n \n fn main() {}"}, {"sha": "5aee9cd6fa71247fbddad6521962cc852a82d821", "filename": "src/test/compile-fail/sendfn-is-not-a-lambda.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -4,5 +4,5 @@ fn test(f: fn@(uint) -> uint) -> uint {\n \n fn main() {\n     let f = fn~(x: uint) -> uint { ret 4u; };\n-    log(debug, test(f)); //! ERROR expected `fn@(uint) -> uint`\n+    log(debug, test(f)); //~ ERROR expected `fn@(uint) -> uint`\n }"}, {"sha": "db2cb9b7a173dddb1f30e039f784c4f939dce143", "filename": "src/test/compile-fail/seq-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fseq-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fseq-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fseq-args.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -2,7 +2,7 @@ use std;\n fn main() {\n iface seq { }\n \n-impl <T> of seq<T> for ~[T] { //! ERROR wrong number of type arguments\n+impl <T> of seq<T> for ~[T] { //~ ERROR wrong number of type arguments\n     /* ... */\n }\n impl of seq<bool> for u32 {"}, {"sha": "b7a5fce6b5a358e61a49ef3aa99551df4e2a0acc", "filename": "src/test/compile-fail/swap-no-lval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fswap-no-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fswap-no-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fswap-no-lval.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     5 <-> 3;\n-    //!^ ERROR swapping to and from non-lvalue\n-    //!^^ ERROR swapping to and from non-lvalue\n+    //~^ ERROR swapping to and from non-lvalue\n+    //~^^ ERROR swapping to and from non-lvalue\n }"}, {"sha": "84cb3bc9ac58d70de61c766d05abc0afa52a9080", "filename": "src/test/compile-fail/terr-in-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fterr-in-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fterr-in-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fterr-in-field.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -3,7 +3,7 @@ type bar = {a: int, b: uint};\n \n fn want_foo(f: foo) {}\n fn have_bar(b: bar) {\n-    want_foo(b); //! ERROR (in field `b`, int vs uint)\n+    want_foo(b); //~ ERROR (in field `b`, int vs uint)\n }\n \n fn main() {}"}, {"sha": "d7d8bd48b3836e3cc59b202f461365859d2f5152", "filename": "src/test/compile-fail/terr-sorts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fterr-sorts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fterr-sorts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fterr-sorts.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -3,7 +3,7 @@ type bar = @foo;\n \n fn want_foo(f: foo) {}\n fn have_bar(b: bar) {\n-    want_foo(b); //! ERROR (record vs @-ptr)\n+    want_foo(b); //~ ERROR (record vs @-ptr)\n }\n \n fn main() {}"}, {"sha": "a3ecbec5b11246e43da41e550def822b12eca7f9", "filename": "src/test/compile-fail/tps-invariant-class.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftps-invariant-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftps-invariant-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftps-invariant-class.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -13,7 +13,7 @@ fn set_box_impl<T>(b: box_impl<@const T>, v: @const T) {\n fn main() {\n     let b = box_impl::<@int>(@3);\n     set_box_impl(b, @mut 5);\n-    //!^ ERROR values differ in mutability\n+    //~^ ERROR values differ in mutability\n \n     // No error when type of parameter actually IS @const int\n     let b = box_impl::<@const int>(@3);"}, {"sha": "4c9691a1c5837cda416a6faf5b0c5cc33d7ea86d", "filename": "src/test/compile-fail/tps-invariant-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftps-invariant-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftps-invariant-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftps-invariant-enum.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -9,7 +9,7 @@ fn set_box_impl<T>(b: box_impl<@const T>, v: @const T) {\n fn main() {\n     let b = box_impl::<@int>({mut f: @3});\n     set_box_impl(b, @mut 5);\n-    //!^ ERROR values differ in mutability\n+    //~^ ERROR values differ in mutability\n \n     // No error when type of parameter actually IS @const int\n     let x: @const int = @3; // only way I could find to upcast"}, {"sha": "81caef856c2c02ff45846782855713cddb788d55", "filename": "src/test/compile-fail/tps-invariant-iface.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftps-invariant-iface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftps-invariant-iface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftps-invariant-iface.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -23,7 +23,7 @@ fn set_box_impl<T>(b: box_impl<@const T>, v: @const T) {\n fn main() {\n     let b = box_impl::<@int>({mut f: @3});\n     set_box_iface(b as box_iface::<@int>, @mut 5);\n-    //!^ ERROR values differ in mutability\n+    //~^ ERROR values differ in mutability\n     set_box_impl(b, @mut 5);\n-    //!^ ERROR values differ in mutability\n+    //~^ ERROR values differ in mutability\n }\n\\ No newline at end of file"}, {"sha": "d6e01f20ff472e46f169379763ba9ed9ce9f963a", "filename": "src/test/compile-fail/tstate-and-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-and-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-and-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftstate-and-init.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -3,5 +3,5 @@ fn even(i: int) : is_even(i) -> int { i }\n fn main() {\n     let i: int = 4;\n     log(debug, false && { check is_even(i); true });\n-    even(i); //! ERROR unsatisfied precondition\n+    even(i); //~ ERROR unsatisfied precondition\n }"}, {"sha": "91a31fed6cf46f05ef6c6448ad1fbb586091014c", "filename": "src/test/compile-fail/tstate-block-uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-block-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-block-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftstate-block-uninit.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -6,6 +6,6 @@ fn force(f: fn()) { f(); }\n fn main() {\n     let x: int = 4;\n     force(fn&() {\n-        even(x); //! ERROR unsatisfied precondition\n+        even(x); //~ ERROR unsatisfied precondition\n     });\n }"}, {"sha": "7d75009098fccc8d3e1f68d2169993455de0f1fd", "filename": "src/test/compile-fail/tstate-break-uninit-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-break-uninit-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-break-uninit-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftstate-break-uninit-2.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -6,10 +6,10 @@ fn foo() -> int {\n \n     while 1 != 2 {\n         break;\n-        check is_even(x); //! WARNING unreachable statement\n+        check is_even(x); //~ WARNING unreachable statement\n     }\n \n-    even(x); //! ERROR unsatisfied precondition\n+    even(x); //~ ERROR unsatisfied precondition\n     ret 17;\n }\n "}, {"sha": "b0d51deb5df0770a9145505f7323f420a41afc97", "filename": "src/test/compile-fail/tstate-break-uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-break-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-break-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftstate-break-uninit.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -6,10 +6,10 @@ fn foo() -> int {\n \n     loop {\n         break;\n-        check is_even(x); //! WARNING unreachable statement\n+        check is_even(x); //~ WARNING unreachable statement\n     }\n \n-    even(x); //! ERROR unsatisfied precondition\n+    even(x); //~ ERROR unsatisfied precondition\n     ret 17;\n }\n "}, {"sha": "e72e57f901b523e9b9b80d65e98a2049650549af", "filename": "src/test/compile-fail/tstate-ctor-unsat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-ctor-unsat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-ctor-unsat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftstate-ctor-unsat.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -15,7 +15,7 @@ class cat {\n   new(in_x : uint, in_y : int) {\n     let foo = 3;\n     self.meows = in_x + (in_y as uint);\n-    self.how_hungry = even(foo); //! ERROR unsatisfied precondition\n+    self.how_hungry = even(foo); //~ ERROR unsatisfied precondition\n   }\n }\n "}, {"sha": "c5335ce1f8567e317a61e09197fe52a0694d6505", "filename": "src/test/compile-fail/tstate-fru.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-fru.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-fru.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftstate-fru.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -9,6 +9,6 @@ fn main() {\n     let origin: point;\n     origin = {x: 0, y: 0};\n     let right: point = {x: 10 with tested(origin)};\n-        //!^ ERROR precondition\n+        //~^ ERROR precondition\n     copy right;\n }"}, {"sha": "e9873110a44c610e3a9fea7bf7466a8002ac9157", "filename": "src/test/compile-fail/tstate-if-no-else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-if-no-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-if-no-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftstate-if-no-else.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -6,5 +6,5 @@ fn foo(x: int) { log(debug, x); }\n fn main() {\n \tlet x: int = 10;\n         if 1 > 2 { check is_even(x); }\n-        even(x); //! ERROR unsatisfied precondition\n+        even(x); //~ ERROR unsatisfied precondition\n }"}, {"sha": "c813d84d4657a7160bb59117bef1f0e0335fc19b", "filename": "src/test/compile-fail/tstate-if-with-else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-if-with-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-if-with-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftstate-if-with-else.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -10,5 +10,5 @@ fn main() {\n     } else {\n         check is_even(x);\n     }\n-    even(x); //! ERROR unsatisfied precondition\n+    even(x); //~ ERROR unsatisfied precondition\n }"}, {"sha": "731a7d0b6d8857f4a35fe8c42543da45c434fa77", "filename": "src/test/compile-fail/tstate-loop-constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-loop-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-loop-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftstate-loop-constraints.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -10,7 +10,7 @@ fn main() {\n                 check is_even(x);\n                 even(x); // OK\n                 loop {\n-                    even(x); //! ERROR unsatisfied precondition\n+                    even(x); //~ ERROR unsatisfied precondition\n                     x = 11; \n                 }\n             }"}, {"sha": "f24dd9d888e73bb21f07587777459bd96b4b5a29", "filename": "src/test/compile-fail/tstate-or-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-or-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-or-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftstate-or-init.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -3,5 +3,5 @@ fn even(i: int) : is_even(i) -> int { i }\n fn main() {\n     let i: int = 4;\n     log(debug, false || { check is_even(i); true });\n-    even(i); //! ERROR unsatisfied precondition\n+    even(i); //~ ERROR unsatisfied precondition\n }"}, {"sha": "0ac68559f8b867031c6fa5ab297cffbba9b15f2f", "filename": "src/test/compile-fail/tstate-return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftstate-return.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -3,7 +3,7 @@ fn even(i: int) : is_even(i) -> int { i }\n \n fn f() -> int {\n \tlet x: int = 4;\n-\tret even(x); //! ERROR unsatisfied precondition\n+\tret even(x); //~ ERROR unsatisfied precondition\n }\n \n fn main() { f(); }"}, {"sha": "6722736dea0f06e512dd7cd5f4eeef227dbd5ffc", "filename": "src/test/compile-fail/tstate-unsat-after-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-unsat-after-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-unsat-after-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftstate-unsat-after-item.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -4,6 +4,6 @@ fn even(i: int) : is_even(i) -> int { i }\n fn main() {\n     let x = 4;\n     fn baz(_x: int) { }\n-    baz(even(x)); //! ERROR unsatisfied precondition\n+    baz(even(x)); //~ ERROR unsatisfied precondition\n }\n "}, {"sha": "e19393c40f5158c11db36dace85b90cdb1591dcf", "filename": "src/test/compile-fail/tstate-unsat-in-called-fn-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-unsat-in-called-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-unsat-in-called-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftstate-unsat-in-called-fn-expr.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -3,7 +3,7 @@ fn foo(v: [int]) : vec::is_empty(v) { #debug(\"%d\", v[0]); }\n fn main() {\n     let f = fn@() {\n         let v = ~[1];\n-        foo(v); //! ERROR unsatisfied precondition constraint\n+        foo(v); //~ ERROR unsatisfied precondition constraint\n     }();\n     log(error, f);\n }"}, {"sha": "c56662f8562551f6e60cca15841303371dcfb882", "filename": "src/test/compile-fail/tstate-unsat-in-fn-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-unsat-in-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-unsat-in-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftstate-unsat-in-fn-expr.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -3,7 +3,7 @@ fn foo(v: [int]) : vec::is_empty(v) { #debug(\"%d\", v[0]); }\n fn main() {\n     let f = fn@() {\n         let v = ~[1];\n-        foo(v); //! ERROR unsatisfied precondition constraint\n+        foo(v); //~ ERROR unsatisfied precondition constraint\n     };\n     log(error, f());\n }"}, {"sha": "210feb28b920f077d507c0855e90fc3c38faa01a", "filename": "src/test/compile-fail/tstate-unsat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-unsat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-unsat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftstate-unsat.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -3,5 +3,5 @@ fn even(i: int) : is_even(i) -> int { i }\n \n fn main() {\n     let x: int = 4;\n-    even(x); //! ERROR unsatisfied precondition\n+    even(x); //~ ERROR unsatisfied precondition\n }"}, {"sha": "49905d503485456ef435fa4c6137f654194dbbc5", "filename": "src/test/compile-fail/tstate-while-break.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-while-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-while-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftstate-while-break.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -7,7 +7,7 @@ fn test(cond: bool) {\n         check is_even(v);\n         break;\n     }\n-    even(v); //! ERROR unsatisfied precondition\n+    even(v); //~ ERROR unsatisfied precondition\n }\n \n fn main() {"}, {"sha": "afc77fa42c63d141ea9746c6c01a15ac264c7cbb", "filename": "src/test/compile-fail/tstate-while-cond.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-while-cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-while-cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftstate-while-cond.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -3,5 +3,5 @@ fn even(i: int) : is_even(i) -> int { i }\n \n fn main() {\n     let x: int = 4;\n-    while even(x) != 0 { } //! ERROR unsatisfied precondition\n+    while even(x) != 0 { } //~ ERROR unsatisfied precondition\n }"}, {"sha": "f99c966aaf46f9ffb16b534b0cf550d451e671b3", "filename": "src/test/compile-fail/tstate-while.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftstate-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftstate-while.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -4,7 +4,7 @@ fn even(i: int) : is_even(i) -> int { i }\n fn f() {\n     let mut x: int = 10;\n     while 1 == 1 { x = 10; }\n-    even(x); //! ERROR unsatisfied precondition\n+    even(x); //~ ERROR unsatisfied precondition\n }\n \n fn main() { f(); }"}, {"sha": "41fe5864ec3e2b23f825ce9f3e5bd3bb06c0f76f", "filename": "src/test/compile-fail/tutorial-suffix-inference-test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftutorial-suffix-inference-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftutorial-suffix-inference-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftutorial-suffix-inference-test.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -7,16 +7,16 @@ fn main() {\n \n     identity_u8(x);  // after this, `x` is assumed to have type `u8`\n     identity_u16(x);\n-    //!^ ERROR mismatched types: expected `u16` but found `u8`\n+    //~^ ERROR mismatched types: expected `u16` but found `u8`\n     identity_u16(y);\n-    //!^ ERROR mismatched types: expected `u16` but found `i32`\n+    //~^ ERROR mismatched types: expected `u16` but found `i32`\n \n     let a = 3i;\n     \n     fn identity_i(n: int) -> int { n }\n \n     identity_i(a); // ok\n     identity_u16(a); \n-    //!^ ERROR mismatched types: expected `u16` but found `int`\n+    //~^ ERROR mismatched types: expected `u16` but found `int`\n \n }\n\\ No newline at end of file"}, {"sha": "d9c2654ff2b235d2614d6877cfeaa964b9b7013d", "filename": "src/test/compile-fail/type-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftype-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Ftype-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-mismatch.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -4,5 +4,5 @@ fn main() {\n     let x = true;\n     let y = 1;\n     let z = x + y;\n-    //!^ ERROR binary operation + cannot be applied to type `bool`\n+    //~^ ERROR binary operation + cannot be applied to type `bool`\n }"}, {"sha": "afa8134e0830569694979b1b5ddc011dde2f197a", "filename": "src/test/compile-fail/unique-unique-kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -3,5 +3,5 @@ fn f<T: send>(_i: T) {\n \n fn main() {\n     let i = ~@100;\n-    f(i); //! ERROR missing `send`\n+    f(i); //~ ERROR missing `send`\n }"}, {"sha": "03af39ab7fcfa5b0832a35f404025c49dcd0aaa5", "filename": "src/test/compile-fail/unsafe-fn-assign-deref-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Funsafe-fn-assign-deref-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Funsafe-fn-assign-deref-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-fn-assign-deref-ptr.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,7 +1,7 @@\n // -*- rust -*-\n \n fn f(p: *u8) {\n-    *p = 0u8; //! ERROR dereference of unsafe pointer requires unsafe function or block\n+    *p = 0u8; //~ ERROR dereference of unsafe pointer requires unsafe function or block\n     ret;\n }\n "}, {"sha": "b4ab76dc0c9b4486532c1dfc17a6909c4121c536", "filename": "src/test/compile-fail/unsafe-fn-autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Funsafe-fn-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Funsafe-fn-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-fn-autoderef.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -15,7 +15,7 @@ fn f(p: *rec) -> int {\n     // are prohibited by various checks, such as that the enum is\n     // instantiable and so forth).\n \n-    ret p.f; //! ERROR attempted access of field `f` on type `*rec`\n+    ret p.f; //~ ERROR attempted access of field `f` on type `*rec`\n }\n \n fn main() {"}, {"sha": "d7681a2ec6034b05d0dae778d069ae2008265ea6", "filename": "src/test/compile-fail/unsafe-fn-called-from-safe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Funsafe-fn-called-from-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Funsafe-fn-called-from-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-fn-called-from-safe.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -3,5 +3,5 @@\n unsafe fn f() { ret; }\n \n fn main() {\n-    f(); //! ERROR access to unsafe function requires unsafe function or block\n+    f(); //~ ERROR access to unsafe function requires unsafe function or block\n }"}, {"sha": "e66bf5eb687dc65accee99bf0bf6a5b74685efa8", "filename": "src/test/compile-fail/unsafe-fn-deref-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Funsafe-fn-deref-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Funsafe-fn-deref-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-fn-deref-ptr.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,7 +1,7 @@\n // -*- rust -*-\n \n fn f(p: *u8) -> u8 {\n-    ret *p; //! ERROR dereference of unsafe pointer requires unsafe function or block\n+    ret *p; //~ ERROR dereference of unsafe pointer requires unsafe function or block\n }\n \n fn main() {"}, {"sha": "7dc0ce4a12b4fc3b0cb6c9d39fbfca1c3ca155be", "filename": "src/test/compile-fail/unsafe-fn-used-as-value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Funsafe-fn-used-as-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Funsafe-fn-used-as-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-fn-used-as-value.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -3,6 +3,6 @@\n unsafe fn f() { ret; }\n \n fn main() {\n-    let x = f; //! ERROR access to unsafe function requires unsafe function or block\n+    let x = f; //~ ERROR access to unsafe function requires unsafe function or block\n     x();\n }"}, {"sha": "de5715321e81c773b5a8e7cd758d9d0b089f2285", "filename": "src/test/compile-fail/unsendable-class.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -9,7 +9,7 @@ class foo {\n \n fn main() {\n   let cat = \"kitty\";\n-  let po = comm::port();         //! ERROR missing `send`\n-  let ch = comm::chan(po);       //! ERROR missing `send`\n-  comm::send(ch, foo(42, @cat)); //! ERROR missing `send`\n+  let po = comm::port();         //~ ERROR missing `send`\n+  let ch = comm::chan(po);       //~ ERROR missing `send`\n+  comm::send(ch, foo(42, @cat)); //~ ERROR missing `send`\n }\n\\ No newline at end of file"}, {"sha": "16af1cb74710b947e79c47bbac955f25b3854c61", "filename": "src/test/compile-fail/vec-add.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fvec-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fvec-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-add.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -30,74 +30,74 @@ fn add(i: ~[int], m: ~[mut int], c: ~[const int]) {\n        m + c,\n        c);\n \n-   add(m + ~[3], //! ERROR mismatched types\n+   add(m + ~[3], //~ ERROR mismatched types\n        m + ~[3],\n        m + ~[3]);\n \n    add(i + ~[3],\n-       i + ~[3], //! ERROR mismatched types\n+       i + ~[3], //~ ERROR mismatched types\n        i + ~[3]);\n \n-   add(c + ~[3], //! ERROR mismatched types\n-                //!^ ERROR binary operation + cannot be applied\n-       c + ~[3], //! ERROR binary operation + cannot be applied\n-                //!^ mismatched types\n+   add(c + ~[3], //~ ERROR mismatched types\n+                //~^ ERROR binary operation + cannot be applied\n+       c + ~[3], //~ ERROR binary operation + cannot be applied\n+                //~^ mismatched types\n        ~[3]);\n \n-   add(m + ~[mut 3], //! ERROR mismatched types\n+   add(m + ~[mut 3], //~ ERROR mismatched types\n        m + ~[mut 3],\n        m + ~[mut 3]);\n \n    add(i + ~[mut 3],\n-       i + ~[mut 3], //! ERROR mismatched types\n+       i + ~[mut 3], //~ ERROR mismatched types\n        i + ~[mut 3]);\n \n-   add(c + ~[mut 3], //! ERROR binary operation + cannot be applied\n-                    //!^ mismatched types\n-       c + ~[mut 3], //! ERROR binary operation + cannot be applied\n-                    //!^ mismatched types\n+   add(c + ~[mut 3], //~ ERROR binary operation + cannot be applied\n+                    //~^ mismatched types\n+       c + ~[mut 3], //~ ERROR binary operation + cannot be applied\n+                    //~^ mismatched types\n        ~[mut 3]);\n \n-   add(m + i, //! ERROR mismatched types\n+   add(m + i, //~ ERROR mismatched types\n        m + i,\n        m + i);\n \n    add(i + i,\n-       i + i, //! ERROR mismatched types\n+       i + i, //~ ERROR mismatched types\n        i + i);\n \n-   add(c + i, //! ERROR binary operation + cannot be applied\n-              //!^ ERROR mismatched types\n-       c + i, //! ERROR binary operation + cannot be applied\n-              //!^ ERROR mismatched types\n+   add(c + i, //~ ERROR binary operation + cannot be applied\n+              //~^ ERROR mismatched types\n+       c + i, //~ ERROR binary operation + cannot be applied\n+              //~^ ERROR mismatched types\n        i);\n \n-   add(m + m, //! ERROR mismatched types\n+   add(m + m, //~ ERROR mismatched types\n        m + m,\n        m + m);\n \n    add(i + m,\n-       i + m, //! ERROR mismatched types\n+       i + m, //~ ERROR mismatched types\n        i + m);\n \n-   add(c + m, //! ERROR binary operation + cannot be applied\n-              //!^ ERROR mismatched types\n-       c + m, //! ERROR binary operation + cannot be applied\n-              //!^ ERROR mismatched types\n+   add(c + m, //~ ERROR binary operation + cannot be applied\n+              //~^ ERROR mismatched types\n+       c + m, //~ ERROR binary operation + cannot be applied\n+              //~^ ERROR mismatched types\n        m);\n \n-   add(m + c, //! ERROR mismatched types\n+   add(m + c, //~ ERROR mismatched types\n        m + c,\n        m + c);\n \n    add(i + c,\n-       i + c, //! ERROR mismatched types\n+       i + c, //~ ERROR mismatched types\n        i + c);\n \n-   add(c + c, //! ERROR binary operation + cannot be applied\n-              //!^ ERROR mismatched types\n-       c + c, //! ERROR binary operation + cannot be applied\n-              //!^ ERROR mismatched types\n+   add(c + c, //~ ERROR binary operation + cannot be applied\n+              //~^ ERROR mismatched types\n+       c + c, //~ ERROR binary operation + cannot be applied\n+              //~^ ERROR mismatched types\n        c);\n }\n "}, {"sha": "33873c087a5c500952d36177ce2c03638e0d8ca7", "filename": "src/test/compile-fail/vec-concat-bug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fvec-concat-bug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fvec-concat-bug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-concat-bug.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -3,7 +3,7 @@ fn concat<T: copy>(v: ~[const ~[const T]]) -> ~[T] {\n \n     // Earlier versions of our type checker accepted this:\n     vec::iter(v, |&&inner: ~[T]| {\n-        //!^ ERROR values differ in mutability\n+        //~^ ERROR values differ in mutability\n         r += inner;\n     });\n "}, {"sha": "6918a24874266bb92935a514c724aaade2879c39", "filename": "src/test/compile-fail/vector-no-ann.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,3 +1,3 @@\n fn main() {\n-    let _foo = ~[]; //! ERROR unconstrained type\n+    let _foo = ~[]; //~ ERROR unconstrained type\n }"}, {"sha": "d5645c4358f5e3231f9910030dd8dd499a9224b8", "filename": "src/test/compile-fail/warn-path-statement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fwarn-path-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fcompile-fail%2Fwarn-path-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwarn-path-statement.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -2,5 +2,5 @@\n fn main() {\n \n     let x = 10;\n-    x; //! ERROR path statement with no effect\n+    x; //~ ERROR path statement with no effect\n }\n\\ No newline at end of file"}, {"sha": "175940f008ad9fc43b448c0307ad6f62c08dcb8f", "filename": "src/test/pretty/doc-comments.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fpretty%2Fdoc-comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Fpretty%2Fdoc-comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fdoc-comments.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -0,0 +1,32 @@\n+// pp-exact\n+\n+// some single-line non-doc comment\n+\n+/// some single line outer-docs\n+fn a() { }\n+\n+fn b() {\n+    //~ some single line inner-docs\n+}\n+\n+/*\n+ * some multi-line non-doc comment\n+ */\n+\n+/**\n+ * some multi-line outer-docs\n+ */\n+fn c() { }\n+\n+fn d() {\n+    /*!\n+     * some multi-line inner-docs\n+     */\n+}\n+\n+#[doc = \"unsugared outer doc-comments work also\"]\n+fn e() { }\n+\n+fn f() {\n+    #[doc = \"as do inner ones\"];\n+}"}, {"sha": "028bf10201be78adfcbf353069cea7b56e65744a", "filename": "src/test/run-pass/liveness-assign-imm-local-after-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Frun-pass%2Fliveness-assign-imm-local-after-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Frun-pass%2Fliveness-assign-imm-local-after-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fliveness-assign-imm-local-after-ret.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -2,7 +2,7 @@ fn test() {\n     let _v: int;\n     _v = 1;\n     ret;\n-    _v = 2; //! WARNING: unreachable statement\n+    _v = 2; //~ WARNING: unreachable statement\n }\n \n fn main() {"}, {"sha": "67b5a877c05243d3a30754060b391d6d2e0d74cd", "filename": "src/test/run-pass/pred-not-bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Frun-pass%2Fpred-not-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Frun-pass%2Fpred-not-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpred-not-bool.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -1,6 +1,6 @@\n // this checks that a pred with a non-bool return\n // type is rejected, even if the pred is never used\n \n-pure fn bad(a: int) -> int { ret 37; } //! ERROR Non-boolean return type\n+pure fn bad(a: int) -> int { ret 37; } //~ ERROR Non-boolean return type\n \n fn main() { }"}, {"sha": "fba080ac7f5e10f17f48b3f5c9c3b83cac9d8027", "filename": "src/test/run-pass/unreachable-code-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Frun-pass%2Funreachable-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f43da376ebb54b6e7dbd0d8de9d192decc2dfe/src%2Ftest%2Frun-pass%2Funreachable-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funreachable-code-1.rs?ref=47f43da376ebb54b6e7dbd0d8de9d192decc2dfe", "patch": "@@ -4,7 +4,7 @@ fn id(x: bool) -> bool { x }\n \n fn call_id() {\n     let c <- fail;\n-    id(c); //! WARNING unreachable statement\n+    id(c); //~ WARNING unreachable statement\n }\n \n fn call_id_3() { id(ret) && id(ret); }"}]}