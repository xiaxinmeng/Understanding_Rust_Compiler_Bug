{"sha": "08a741eabf3c223650bb29c5df30c8fd414cd86a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4YTc0MWVhYmYzYzIyMzY1MGJiMjljNWRmMzBjOGZkNDE0Y2Q4NmE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-03-30T01:48:06Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-03-30T01:48:06Z"}, "message": "Add support for image, rules and footnotes", "tree": {"sha": "f51bf835c29b0641c7fd655caf73cb5aa4df7694", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f51bf835c29b0641c7fd655caf73cb5aa4df7694"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08a741eabf3c223650bb29c5df30c8fd414cd86a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08a741eabf3c223650bb29c5df30c8fd414cd86a", "html_url": "https://github.com/rust-lang/rust/commit/08a741eabf3c223650bb29c5df30c8fd414cd86a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08a741eabf3c223650bb29c5df30c8fd414cd86a/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf69238b82661f5fcb6488e31ef27977f5d2cb81", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf69238b82661f5fcb6488e31ef27977f5d2cb81", "html_url": "https://github.com/rust-lang/rust/commit/cf69238b82661f5fcb6488e31ef27977f5d2cb81"}], "stats": {"total": 174, "additions": 146, "deletions": 28}, "files": [{"sha": "6c82dab94bcb3913364abcf37a0c5f39483c5926", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 111, "deletions": 28, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/08a741eabf3c223650bb29c5df30c8fd414cd86a/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a741eabf3c223650bb29c5df30c8fd414cd86a/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=08a741eabf3c223650bb29c5df30c8fd414cd86a", "patch": "@@ -133,11 +133,37 @@ macro_rules! event_loop_break {\n     }}\n }\n \n+struct ParserWrapper<'a> {\n+    parser: Parser<'a>,\n+    footnotes: Vec<String>,\n+    current_footnote_id: u16,\n+}\n+\n+impl<'a> ParserWrapper<'a> {\n+    pub fn new(s: &'a str) -> ParserWrapper<'a> {\n+        ParserWrapper {\n+            parser: Parser::new_ext(s, pulldown_cmark::OPTION_ENABLE_TABLES |\n+                                       pulldown_cmark::OPTION_ENABLE_FOOTNOTES),\n+            footnotes: Vec::new(),\n+            current_footnote_id: 1,\n+        }\n+    }\n+    pub fn next(&mut self) -> Option<Event<'a>> {\n+        self.parser.next()\n+    }\n+\n+    pub fn get_next_footnote_id(&mut self) -> u16 {\n+        let tmp = self.current_footnote_id;\n+        self.current_footnote_id += 1;\n+        tmp\n+    }\n+}\n+\n pub fn render(w: &mut fmt::Formatter,\n               s: &str,\n               print_toc: bool,\n               shorter: MarkdownOutputStyle) -> fmt::Result {\n-    fn code_block(parser: &mut Parser, buffer: &mut String, lang: &str) {\n+    fn code_block(parser: &mut ParserWrapper, buffer: &mut String, lang: &str) {\n         let mut origtext = String::new();\n         while let Some(event) = parser.next() {\n             match event {\n@@ -215,8 +241,8 @@ pub fn render(w: &mut fmt::Formatter,\n         });\n     }\n \n-    fn heading(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n-               shorter: MarkdownOutputStyle, level: i32) {\n+    fn heading(parser: &mut ParserWrapper, buffer: &mut String,\n+               toc_builder: &mut Option<TocBuilder>, shorter: MarkdownOutputStyle, level: i32) {\n         let mut ret = String::new();\n         let mut id = String::new();\n         event_loop_break!(parser, toc_builder, shorter, ret, true, &mut Some(&mut id),\n@@ -249,32 +275,48 @@ pub fn render(w: &mut fmt::Formatter,\n                                  ret, lvl = level, id = id, sec = sec));\n     }\n \n-    fn inline_code(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n-                   shorter: MarkdownOutputStyle, id: &mut Option<&mut String>) {\n+    fn inline_code(parser: &mut ParserWrapper, buffer: &mut String,\n+                   toc_builder: &mut Option<TocBuilder>, shorter: MarkdownOutputStyle,\n+                   id: &mut Option<&mut String>) {\n         let mut content = String::new();\n         event_loop_break!(parser, toc_builder, shorter, content, false, id, Event::End(Tag::Code));\n         buffer.push_str(&format!(\"<code>{}</code>\",\n                                  Escape(&collapse_whitespace(content.trim_right()))));\n     }\n \n-    fn link(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n+    fn link(parser: &mut ParserWrapper, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n+            shorter: MarkdownOutputStyle, url: &str, title: &str,\n+            id: &mut Option<&mut String>) {\n+        let mut content = String::new();\n+        event_loop_break!(parser, toc_builder, shorter, content, true, id,\n+                          Event::End(Tag::Link(_, _)));\n+        if title.is_empty() {\n+            buffer.push_str(&format!(\"<a href=\\\"{}\\\">{}</a>\", url, content));\n+        } else {\n+            buffer.push_str(&format!(\"<a href=\\\"{}\\\" title=\\\"{}\\\">{}</a>\",\n+                                     url, Escape(title), content));\n+        }\n+    }\n+\n+    fn image(parser: &mut ParserWrapper, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n             shorter: MarkdownOutputStyle, url: &str, mut title: String,\n             id: &mut Option<&mut String>) {\n         event_loop_break!(parser, toc_builder, shorter, title, true, id,\n-                          Event::End(Tag::Link(_, _)));\n-        buffer.push_str(&format!(\"<a href=\\\"{}\\\">{}</a>\", url, title));\n+                          Event::End(Tag::Image(_, _)));\n+        buffer.push_str(&format!(\"<img src=\\\"{}\\\" alt=\\\"{}\\\">\", url, title));\n     }\n \n-    fn paragraph(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n-                 shorter: MarkdownOutputStyle, id: &mut Option<&mut String>) {\n+    fn paragraph(parser: &mut ParserWrapper, buffer: &mut String,\n+                 toc_builder: &mut Option<TocBuilder>, shorter: MarkdownOutputStyle,\n+                 id: &mut Option<&mut String>) {\n         let mut content = String::new();\n         event_loop_break!(parser, toc_builder, shorter, content, true, id,\n                           Event::End(Tag::Paragraph));\n         buffer.push_str(&format!(\"<p>{}</p>\", content.trim_right()));\n     }\n \n-    fn table_cell(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n-                  shorter: MarkdownOutputStyle) {\n+    fn table_cell(parser: &mut ParserWrapper, buffer: &mut String,\n+                  toc_builder: &mut Option<TocBuilder>, shorter: MarkdownOutputStyle) {\n         let mut content = String::new();\n         event_loop_break!(parser, toc_builder, shorter, content, true, &mut None,\n                           Event::End(Tag::TableHead) |\n@@ -284,8 +326,8 @@ pub fn render(w: &mut fmt::Formatter,\n         buffer.push_str(&format!(\"<td>{}</td>\", content.trim()));\n     }\n \n-    fn table_row(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n-                 shorter: MarkdownOutputStyle) {\n+    fn table_row(parser: &mut ParserWrapper, buffer: &mut String,\n+                 toc_builder: &mut Option<TocBuilder>, shorter: MarkdownOutputStyle) {\n         let mut content = String::new();\n         while let Some(event) = parser.next() {\n             match event {\n@@ -303,8 +345,8 @@ pub fn render(w: &mut fmt::Formatter,\n         buffer.push_str(&format!(\"<tr>{}</tr>\", content));\n     }\n \n-    fn table_head(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n-                  shorter: MarkdownOutputStyle) {\n+    fn table_head(parser: &mut ParserWrapper, buffer: &mut String,\n+                  toc_builder: &mut Option<TocBuilder>, shorter: MarkdownOutputStyle) {\n         let mut content = String::new();\n         while let Some(event) = parser.next() {\n             match event {\n@@ -322,7 +364,7 @@ pub fn render(w: &mut fmt::Formatter,\n         }\n     }\n \n-    fn table(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n+    fn table(parser: &mut ParserWrapper, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n              shorter: MarkdownOutputStyle) {\n         let mut content = String::new();\n         let mut rows = String::new();\n@@ -347,16 +389,16 @@ pub fn render(w: &mut fmt::Formatter,\n                                  }));\n     }\n \n-    fn blockquote(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n-                  shorter: MarkdownOutputStyle) {\n+    fn blockquote(parser: &mut ParserWrapper, buffer: &mut String,\n+                  toc_builder: &mut Option<TocBuilder>, shorter: MarkdownOutputStyle) {\n         let mut content = String::new();\n         event_loop_break!(parser, toc_builder, shorter, content, true, &mut None,\n                           Event::End(Tag::BlockQuote));\n         buffer.push_str(&format!(\"<blockquote>{}</blockquote>\", content.trim_right()));\n     }\n \n-    fn list_item(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n-                 shorter: MarkdownOutputStyle) {\n+    fn list_item(parser: &mut ParserWrapper, buffer: &mut String,\n+                 toc_builder: &mut Option<TocBuilder>, shorter: MarkdownOutputStyle) {\n         let mut content = String::new();\n         while let Some(event) = parser.next() {\n             match event {\n@@ -372,7 +414,7 @@ pub fn render(w: &mut fmt::Formatter,\n         buffer.push_str(&format!(\"<li>{}</li>\", content));\n     }\n \n-    fn list(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n+    fn list(parser: &mut ParserWrapper, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n             shorter: MarkdownOutputStyle) {\n         let mut content = String::new();\n         while let Some(event) = parser.next() {\n@@ -389,23 +431,40 @@ pub fn render(w: &mut fmt::Formatter,\n         buffer.push_str(&format!(\"<ul>{}</ul>\", content));\n     }\n \n-    fn emphasis(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n-                shorter: MarkdownOutputStyle, id: &mut Option<&mut String>) {\n+    fn emphasis(parser: &mut ParserWrapper, buffer: &mut String,\n+                toc_builder: &mut Option<TocBuilder>, shorter: MarkdownOutputStyle,\n+                id: &mut Option<&mut String>) {\n         let mut content = String::new();\n         event_loop_break!(parser, toc_builder, shorter, content, false, id,\n                           Event::End(Tag::Emphasis));\n         buffer.push_str(&format!(\"<em>{}</em>\", content));\n     }\n \n-    fn strong(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n+    fn strong(parser: &mut ParserWrapper, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n               shorter: MarkdownOutputStyle, id: &mut Option<&mut String>) {\n         let mut content = String::new();\n         event_loop_break!(parser, toc_builder, shorter, content, false, id,\n                           Event::End(Tag::Strong));\n         buffer.push_str(&format!(\"<strong>{}</strong>\", content));\n     }\n \n-    fn looper<'a>(parser: &'a mut Parser, buffer: &mut String, next_event: Option<Event<'a>>,\n+    fn footnote(parser: &mut ParserWrapper, buffer: &mut String,\n+                toc_builder: &mut Option<TocBuilder>, shorter: MarkdownOutputStyle,\n+                mut definition: String, id: &mut Option<&mut String>) {\n+        event_loop_break!(parser, toc_builder, shorter, definition, true, id,\n+                          Event::End(Tag::FootnoteDefinition(_)));\n+        buffer.push_str(&definition);\n+    }\n+\n+    fn rule(parser: &mut ParserWrapper, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n+            shorter: MarkdownOutputStyle, id: &mut Option<&mut String>) {\n+        let mut content = String::new();\n+        event_loop_break!(parser, toc_builder, shorter, content, true, id,\n+                          Event::End(Tag::Rule));\n+        buffer.push_str(\"<hr>\");\n+    }\n+\n+    fn looper<'a>(parser: &'a mut ParserWrapper, buffer: &mut String, next_event: Option<Event<'a>>,\n                   toc_builder: &mut Option<TocBuilder>, shorter: MarkdownOutputStyle,\n                   id: &mut Option<&mut String>) -> bool {\n         if let Some(event) = next_event {\n@@ -423,7 +482,10 @@ pub fn render(w: &mut fmt::Formatter,\n                     paragraph(parser, buffer, toc_builder, shorter, id);\n                 }\n                 Event::Start(Tag::Link(ref url, ref t)) => {\n-                    link(parser, buffer, toc_builder, shorter, url, t.as_ref().to_owned(), id);\n+                    link(parser, buffer, toc_builder, shorter, url, t.as_ref(), id);\n+                }\n+                Event::Start(Tag::Image(ref url, ref t)) => {\n+                    image(parser, buffer, toc_builder, shorter, url, t.as_ref().to_owned(), id);\n                 }\n                 Event::Start(Tag::Table(_)) => {\n                     table(parser, buffer, toc_builder, shorter);\n@@ -440,6 +502,23 @@ pub fn render(w: &mut fmt::Formatter,\n                 Event::Start(Tag::Strong) => {\n                     strong(parser, buffer, toc_builder, shorter, id);\n                 }\n+                Event::Start(Tag::Rule) => {\n+                    rule(parser, buffer, toc_builder, shorter, id);\n+                }\n+                Event::Start(Tag::FootnoteDefinition(ref def)) => {\n+                    let mut content = String::new();\n+                    footnote(parser, &mut content, toc_builder, shorter, def.as_ref().to_owned(),\n+                             id);\n+                    let cur_len = parser.footnotes.len() + 1;\n+                    parser.footnotes.push(format!(\"<li id=\\\"ref{}\\\">{}<a href=\\\"#supref{0}\\\" \\\n+                                                   rev=\\\"footnote\\\">\u21a9</a></li>\",\n+                                                  cur_len, content));\n+                }\n+                Event::FootnoteReference(_) => {\n+                    buffer.push_str(&format!(\"<sup id=\\\"supref{0}\\\"><a href=\\\"#ref{0}\\\">{0}</a>\\\n+                                              </sup>\",\n+                                             parser.get_next_footnote_id()));\n+                }\n                 Event::Html(h) | Event::InlineHtml(h) => {\n                     buffer.push_str(&*h);\n                 }\n@@ -457,13 +536,17 @@ pub fn render(w: &mut fmt::Formatter,\n         None\n     };\n     let mut buffer = String::new();\n-    let mut parser = Parser::new_ext(s, pulldown_cmark::OPTION_ENABLE_TABLES);\n+    let mut parser = ParserWrapper::new(s);\n     loop {\n         let next_event = parser.next();\n         if !looper(&mut parser, &mut buffer, next_event, &mut toc_builder, shorter, &mut None) {\n             break\n         }\n     }\n+    if !parser.footnotes.is_empty() {\n+        buffer.push_str(&format!(\"<div class=\\\"footnotes\\\"><hr><ol>{}</ol></div>\",\n+                                 parser.footnotes.join(\"\")));\n+    }\n     let mut ret = toc_builder.map_or(Ok(()), |builder| {\n         write!(w, \"<nav id=\\\"TOC\\\">{}</nav>\", builder.into_toc())\n     });"}, {"sha": "629e1a64e6fd0844a64b9258b3e43f18668bc2da", "filename": "src/test/rustdoc/check-rule-image-footnote.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/08a741eabf3c223650bb29c5df30c8fd414cd86a/src%2Ftest%2Frustdoc%2Fcheck-rule-image-footnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a741eabf3c223650bb29c5df30c8fd414cd86a/src%2Ftest%2Frustdoc%2Fcheck-rule-image-footnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fcheck-rule-image-footnote.rs?ref=08a741eabf3c223650bb29c5df30c8fd414cd86a", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+// @has foo/fn.f.html\n+// @has - '<p>hard break: after hard break</p><hr>'\n+// @has - '<img src=\"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\" alt=\"Rust\">'\n+// @has - '<li id=\"ref1\">'\n+// @has - '<sup id=\"supref1\"><a href=\"#ref1\">1</a></sup>'\n+/// markdown test\n+///\n+/// this is a [link].\n+///\n+/// [link]: https://example.com \"this is a title\"\n+///\n+/// hard break:\n+/// after hard break\n+///\n+/// -----------\n+///\n+/// a footnote[^footnote].\n+///\n+/// [^footnote]: Thing\n+///\n+/// ![Rust](https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png)\n+#[deprecated(note = \"Struct<T>\")]\n+pub fn f() {}"}]}