{"sha": "c5adc96532205a12c94c1407e6b6b35f7c7a2b64", "node_id": "C_kwDOAAsO6NoAKGM1YWRjOTY1MzIyMDVhMTJjOTRjMTQwN2U2YjZiMzVmN2M3YTJiNjQ", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-11T13:49:08Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-11T13:49:08Z"}, "message": "Introduce OngoingCodegen type", "tree": {"sha": "c301a7aefb7dc597a7d75a9a9be29c4789f5c1e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c301a7aefb7dc597a7d75a9a9be29c4789f5c1e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5adc96532205a12c94c1407e6b6b35f7c7a2b64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5adc96532205a12c94c1407e6b6b35f7c7a2b64", "html_url": "https://github.com/rust-lang/rust/commit/c5adc96532205a12c94c1407e6b6b35f7c7a2b64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5adc96532205a12c94c1407e6b6b35f7c7a2b64/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07bcd111f8d3b60dbc3722215c78f25372a11c6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/07bcd111f8d3b60dbc3722215c78f25372a11c6f", "html_url": "https://github.com/rust-lang/rust/commit/07bcd111f8d3b60dbc3722215c78f25372a11c6f"}], "stats": {"total": 71, "additions": 47, "deletions": 24}, "files": [{"sha": "c417de04ab4348eabe36dc8f9d06b180ac051cab", "filename": "src/driver/aot.rs", "status": "modified", "additions": 46, "deletions": 21, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/c5adc96532205a12c94c1407e6b6b35f7c7a2b64/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5adc96532205a12c94c1407e6b6b35f7c7a2b64/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=c5adc96532205a12c94c1407e6b6b35f7c7a2b64", "patch": "@@ -27,6 +27,41 @@ impl<HCX> HashStable<HCX> for ModuleCodegenResult {\n     }\n }\n \n+pub(crate) struct OngoingCodegen {\n+    modules: Vec<ModuleCodegenResult>,\n+    allocator_module: Option<CompiledModule>,\n+    metadata_module: Option<CompiledModule>,\n+    metadata: EncodedMetadata,\n+    crate_info: CrateInfo,\n+    work_products: FxHashMap<WorkProductId, WorkProduct>,\n+}\n+\n+impl OngoingCodegen {\n+    pub(crate) fn join(self) -> (CodegenResults, FxHashMap<WorkProductId, WorkProduct>) {\n+        let mut work_products = self.work_products;\n+        let mut modules = vec![];\n+\n+        for module_codegen_result in self.modules {\n+            let ModuleCodegenResult(module, work_product) = module_codegen_result;\n+            if let Some((work_product_id, work_product)) = work_product {\n+                work_products.insert(work_product_id, work_product);\n+            }\n+            modules.push(module);\n+        }\n+\n+        (\n+            CodegenResults {\n+                modules,\n+                allocator_module: self.allocator_module,\n+                metadata_module: self.metadata_module,\n+                metadata: self.metadata,\n+                crate_info: self.crate_info,\n+            },\n+            work_products,\n+        )\n+    }\n+}\n+\n fn make_module(sess: &Session, isa: Box<dyn TargetIsa>, name: String) -> ObjectModule {\n     let mut builder =\n         ObjectBuilder::new(isa, name + \".o\", cranelift_module::default_libcall_names()).unwrap();\n@@ -192,9 +227,7 @@ pub(crate) fn run_aot(\n     backend_config: BackendConfig,\n     metadata: EncodedMetadata,\n     need_metadata_module: bool,\n-) -> Box<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>)> {\n-    let mut work_products = FxHashMap::default();\n-\n+) -> Box<OngoingCodegen> {\n     let cgus = if tcx.sess.opts.output_types.should_codegen() {\n         tcx.collect_and_partition_mono_items(()).1\n     } else {\n@@ -219,7 +252,7 @@ pub(crate) fn run_aot(\n                 };\n                 tcx.sess.cgu_reuse_tracker.set_actual_reuse(cgu.name().as_str(), cgu_reuse);\n \n-                let module_codegen_result = match cgu_reuse {\n+                match cgu_reuse {\n                     CguReuse::No => {\n                         let dep_node = cgu.codegen_dep_node(tcx);\n                         tcx.dep_graph\n@@ -234,21 +267,15 @@ pub(crate) fn run_aot(\n                     }\n                     CguReuse::PreLto => reuse_workproduct_for_cgu(tcx, &*cgu),\n                     CguReuse::PostLto => unreachable!(),\n-                };\n-\n-                let ModuleCodegenResult(module, work_product) = module_codegen_result;\n-\n-                if let Some((id, product)) = work_product {\n-                    work_products.insert(id, product);\n                 }\n-\n-                module\n             })\n             .collect::<Vec<_>>()\n     });\n \n     tcx.sess.abort_if_errors();\n \n+    let mut work_products = FxHashMap::default();\n+\n     let isa = crate::build_isa(tcx.sess, &backend_config);\n     let mut allocator_module = make_module(tcx.sess, isa, \"allocator_shim\".to_string());\n     assert_eq!(pointer_ty(tcx), allocator_module.target_config().pointer_type());\n@@ -316,16 +343,14 @@ pub(crate) fn run_aot(\n     }\n     .to_owned();\n \n-    Box::new((\n-        CodegenResults {\n-            modules,\n-            allocator_module,\n-            metadata_module,\n-            metadata,\n-            crate_info: CrateInfo::new(tcx, target_cpu),\n-        },\n+    Box::new(OngoingCodegen {\n+        modules,\n+        allocator_module,\n+        metadata_module,\n+        metadata,\n+        crate_info: CrateInfo::new(tcx, target_cpu),\n         work_products,\n-    ))\n+    })\n }\n \n fn codegen_global_asm(tcx: TyCtxt<'_>, cgu_name: &str, global_asm: &str) {"}, {"sha": "49d10012c4f13fe70f331248ea8d180a2903bf87", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5adc96532205a12c94c1407e6b6b35f7c7a2b64/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5adc96532205a12c94c1407e6b6b35f7c7a2b64/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=c5adc96532205a12c94c1407e6b6b35f7c7a2b64", "patch": "@@ -211,9 +211,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         _sess: &Session,\n         _outputs: &OutputFilenames,\n     ) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorGuaranteed> {\n-        Ok(*ongoing_codegen\n-            .downcast::<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>)>()\n-            .unwrap())\n+        Ok(ongoing_codegen.downcast::<driver::aot::OngoingCodegen>().unwrap().join())\n     }\n \n     fn link("}]}