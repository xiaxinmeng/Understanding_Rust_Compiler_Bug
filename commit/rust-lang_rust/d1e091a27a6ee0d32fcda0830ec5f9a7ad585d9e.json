{"sha": "d1e091a27a6ee0d32fcda0830ec5f9a7ad585d9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxZTA5MWEyN2E2ZWUwZDMyZmNkYTA4MzBlYzVmOWE3YWQ1ODVkOWU=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-19T04:08:27Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-19T04:08:27Z"}, "message": "Add Ptr::to_option method", "tree": {"sha": "aa6ad05ef95dc042aacc327d3ee3e643622384c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa6ad05ef95dc042aacc327d3ee3e643622384c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1e091a27a6ee0d32fcda0830ec5f9a7ad585d9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1e091a27a6ee0d32fcda0830ec5f9a7ad585d9e", "html_url": "https://github.com/rust-lang/rust/commit/d1e091a27a6ee0d32fcda0830ec5f9a7ad585d9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1e091a27a6ee0d32fcda0830ec5f9a7ad585d9e/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a323c1b2d755b86b1987bba3454bb2f0f92b1c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a323c1b2d755b86b1987bba3454bb2f0f92b1c8", "html_url": "https://github.com/rust-lang/rust/commit/3a323c1b2d755b86b1987bba3454bb2f0f92b1c8"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "6254d3349d3d9df6b96d17aaa149f95b630cc93e", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d1e091a27a6ee0d32fcda0830ec5f9a7ad585d9e/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1e091a27a6ee0d32fcda0830ec5f9a7ad585d9e/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=d1e091a27a6ee0d32fcda0830ec5f9a7ad585d9e", "patch": "@@ -13,6 +13,7 @@\n use cast;\n use libc;\n use libc::{c_void, size_t};\n+use option::{Option, Some, None};\n use sys;\n \n #[cfg(not(test))] use cmp::{Eq, Ord};\n@@ -209,6 +210,7 @@ pub unsafe fn array_each<T>(arr: **T, cb: &fn(*T)) {\n pub trait Ptr<T> {\n     fn is_null(&const self) -> bool;\n     fn is_not_null(&const self) -> bool;\n+    fn to_option(&const self) -> Option<T>;\n     fn offset(&self, count: uint) -> Self;\n }\n \n@@ -222,6 +224,14 @@ impl<T> Ptr<T> for *T {\n     #[inline(always)]\n     fn is_not_null(&const self) -> bool { is_not_null(*self) }\n \n+    /// Returns `None` if the pointer is null, or else returns the value wrapped in `Some`.\n+    #[inline(always)]\n+    fn to_option(&const self) -> Option<T> {\n+        if self.is_null() { None } else {\n+            Some(unsafe { **self })\n+        }\n+    }\n+\n     /// Calculates the offset from a pointer.\n     #[inline(always)]\n     fn offset(&self, count: uint) -> *T { offset(*self, count) }\n@@ -237,6 +247,14 @@ impl<T> Ptr<T> for *mut T {\n     #[inline(always)]\n     fn is_not_null(&const self) -> bool { is_not_null(*self) }\n \n+    /// Returns `None` if the pointer is null, or else returns the value wrapped in `Some`.\n+    #[inline(always)]\n+    fn to_option(&const self) -> Option<T> {\n+        if self.is_null() { None } else {\n+            Some(unsafe { **self })\n+        }\n+    }\n+\n     /// Calculates the offset from a mutable pointer.\n     #[inline(always)]\n     fn offset(&self, count: uint) -> *mut T { mut_offset(*self, count) }\n@@ -423,6 +441,21 @@ pub mod ptr_tests {\n         assert!(mq.is_not_null());\n     }\n \n+    #[test]\n+    #[allow(unused_mut)]\n+    fn test_to_option() {\n+        let p: *int = null();\n+        assert_eq!(p.to_option(), None);\n+\n+        let q: *int = &2;\n+        assert_eq!(q.to_option(), Some(2));\n+\n+        let p: *mut int = mut_null();\n+        assert_eq!(p.to_option(), None);\n+\n+        let q: *mut int = &mut 2;\n+        assert_eq!(q.to_option(), Some(2));\n+    }\n \n     #[test]\n     fn test_ptr_array_each_with_len() {"}]}