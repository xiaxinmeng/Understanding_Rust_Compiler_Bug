{"sha": "fe803645005d190fd0bb147ccdee07d6d607cc68", "node_id": "C_kwDOAAsO6NoAKGZlODAzNjQ1MDA1ZDE5MGZkMGJiMTQ3Y2NkZWUwN2Q2ZDYwN2NjNjg", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-11-12T16:25:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-12T16:25:02Z"}, "message": "Rollup merge of #104261 - compiler-errors:formal-and-expected-differ, r=estebank\n\nMore accurately report error when formal and expected signature types differ\n\nFixes #104242", "tree": {"sha": "accfe868966303be2f27a2e185fb5d45c44b079e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/accfe868966303be2f27a2e185fb5d45c44b079e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe803645005d190fd0bb147ccdee07d6d607cc68", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjb8jeCRBK7hj4Ov3rIwAAK1wIACQL7chXngiFjQDyHJgEOo5F\n0BTFc0OTezpSARyEVim+NQMOiDRSTHqfdqfnZGE9vJ/N7fAGCL08T9FN8tefvq1O\ntSn18UZk3zPJtEML5Zet9ftJfmbJQhfAFpF/1ALmW47gOmMI2S6y3bMEl1tuge49\nlpS6rx//Gm9eZp4xGAEnRtgZSOxCKNmORJnbB3tjDKjBSzRHVciH3mhpdrPfWlKZ\nfpS0kyEvaE8kn+mTRMS0ndTPK66+QswifQklNbFkLGpOP8PPp67TgoO7/DbuYAvq\nkB/KaSkQNDQxXmrHFFW9norpMbWCNss96xND8PA7EvZULc8uachDpuT3VquJzD4=\n=reXy\n-----END PGP SIGNATURE-----\n", "payload": "tree accfe868966303be2f27a2e185fb5d45c44b079e\nparent 6601e2014881ce7bcd156851ed56457029eafe8f\nparent 55f1f993ff87c15597bd0620e3cbde49601de8bb\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1668270302 +0100\ncommitter GitHub <noreply@github.com> 1668270302 +0100\n\nRollup merge of #104261 - compiler-errors:formal-and-expected-differ, r=estebank\n\nMore accurately report error when formal and expected signature types differ\n\nFixes #104242\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe803645005d190fd0bb147ccdee07d6d607cc68", "html_url": "https://github.com/rust-lang/rust/commit/fe803645005d190fd0bb147ccdee07d6d607cc68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe803645005d190fd0bb147ccdee07d6d607cc68/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6601e2014881ce7bcd156851ed56457029eafe8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6601e2014881ce7bcd156851ed56457029eafe8f", "html_url": "https://github.com/rust-lang/rust/commit/6601e2014881ce7bcd156851ed56457029eafe8f"}, {"sha": "55f1f993ff87c15597bd0620e3cbde49601de8bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/55f1f993ff87c15597bd0620e3cbde49601de8bb", "html_url": "https://github.com/rust-lang/rust/commit/55f1f993ff87c15597bd0620e3cbde49601de8bb"}], "stats": {"total": 88, "additions": 77, "deletions": 11}, "files": [{"sha": "9ca7730daa68d3ee71d2b7db1b03a951841c4be1", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe803645005d190fd0bb147ccdee07d6d607cc68/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe803645005d190fd0bb147ccdee07d6d607cc68/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=fe803645005d190fd0bb147ccdee07d6d607cc68", "patch": "@@ -30,6 +30,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected_ty_expr: Option<&'tcx hir::Expr<'tcx>>,\n         error: Option<TypeError<'tcx>>,\n     ) {\n+        if expr_ty == expected {\n+            return;\n+        }\n+\n         self.annotate_expected_due_to_let_ty(err, expr, error);\n \n         // Use `||` to give these suggestions a precedence"}, {"sha": "8cf70eb5431a8c4ec2d6fd1a11455ffb4d771158", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fe803645005d190fd0bb147ccdee07d6d607cc68/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe803645005d190fd0bb147ccdee07d6d607cc68/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=fe803645005d190fd0bb147ccdee07d6d607cc68", "patch": "@@ -597,6 +597,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         };\n \n+        let mk_trace = |span, (formal_ty, expected_ty), provided_ty| {\n+            let mismatched_ty = if expected_ty == provided_ty {\n+                // If expected == provided, then we must have failed to sup\n+                // the formal type. Avoid printing out \"expected Ty, found Ty\"\n+                // in that case.\n+                formal_ty\n+            } else {\n+                expected_ty\n+            };\n+            TypeTrace::types(&self.misc(span), true, mismatched_ty, provided_ty)\n+        };\n+\n         // The algorithm here is inspired by levenshtein distance and longest common subsequence.\n         // We'll try to detect 4 different types of mistakes:\n         // - An extra parameter has been provided that doesn't satisfy *any* of the other inputs\n@@ -661,10 +673,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         // A tuple wrap suggestion actually occurs within,\n                         // so don't do anything special here.\n                         err = self.err_ctxt().report_and_explain_type_error(\n-                            TypeTrace::types(\n-                                &self.misc(*lo),\n-                                true,\n-                                formal_and_expected_inputs[mismatch_idx.into()].1,\n+                            mk_trace(\n+                                *lo,\n+                                formal_and_expected_inputs[mismatch_idx.into()],\n                                 provided_arg_tys[mismatch_idx.into()].0,\n                             ),\n                             terr,\n@@ -748,9 +759,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         errors.drain_filter(|error| {\n                 let Error::Invalid(provided_idx, expected_idx, Compatibility::Incompatible(Some(e))) = error else { return false };\n                 let (provided_ty, provided_span) = provided_arg_tys[*provided_idx];\n-                let (expected_ty, _) = formal_and_expected_inputs[*expected_idx];\n-                let cause = &self.misc(provided_span);\n-                let trace = TypeTrace::types(cause, true, expected_ty, provided_ty);\n+                let trace = mk_trace(provided_span, formal_and_expected_inputs[*expected_idx], provided_ty);\n                 if !matches!(trace.cause.as_failure_code(*e), FailureCode::Error0308(_)) {\n                     self.err_ctxt().report_and_explain_type_error(trace, *e).emit();\n                     return true;\n@@ -774,8 +783,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         {\n             let (formal_ty, expected_ty) = formal_and_expected_inputs[*expected_idx];\n             let (provided_ty, provided_arg_span) = provided_arg_tys[*provided_idx];\n-            let cause = &self.misc(provided_arg_span);\n-            let trace = TypeTrace::types(cause, true, expected_ty, provided_ty);\n+            let trace = mk_trace(provided_arg_span, (formal_ty, expected_ty), provided_ty);\n             let mut err = self.err_ctxt().report_and_explain_type_error(trace, *err);\n             self.emit_coerce_suggestions(\n                 &mut err,\n@@ -847,8 +855,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let (formal_ty, expected_ty) = formal_and_expected_inputs[expected_idx];\n                     let (provided_ty, provided_span) = provided_arg_tys[provided_idx];\n                     if let Compatibility::Incompatible(error) = compatibility {\n-                        let cause = &self.misc(provided_span);\n-                        let trace = TypeTrace::types(cause, true, expected_ty, provided_ty);\n+                        let trace = mk_trace(provided_span, (formal_ty, expected_ty), provided_ty);\n                         if let Some(e) = error {\n                             self.err_ctxt().note_type_err(\n                                 &mut err,"}, {"sha": "5e3b55ca5258bf66a563aaefaddf875700fb4b9d", "filename": "src/test/ui/argument-suggestions/formal-and-expected-differ.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fe803645005d190fd0bb147ccdee07d6d607cc68/src%2Ftest%2Fui%2Fargument-suggestions%2Fformal-and-expected-differ.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe803645005d190fd0bb147ccdee07d6d607cc68/src%2Ftest%2Fui%2Fargument-suggestions%2Fformal-and-expected-differ.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fformal-and-expected-differ.rs?ref=fe803645005d190fd0bb147ccdee07d6d607cc68", "patch": "@@ -0,0 +1,25 @@\n+pub trait Foo {\n+    type T;\n+}\n+\n+impl Foo for i32 {\n+    type T = f32;\n+}\n+\n+pub struct U<T1, T2>(T1, S<T2>)\n+where\n+    T1: Foo<T = T2>;\n+\n+pub struct S<T>(T);\n+\n+fn main() {\n+    // The error message here isn't great -- it has to do with the fact that the\n+    // `expected_inputs_for_expected_output` deduced inputs differs from the inputs\n+    // that we infer from the constraints of the signature.\n+    //\n+    // I am not really sure what the best way of presenting this error message is,\n+    // since right now it just suggests changing `3u32` <=> `3f32` back and forth.\n+    let _: U<_, u32> = U(1, S(3u32));\n+    //~^ ERROR mismatched types\n+    //~| ERROR mismatched types\n+}"}, {"sha": "905875b52776907678176f1866e4a20f44bf85d2", "filename": "src/test/ui/argument-suggestions/formal-and-expected-differ.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fe803645005d190fd0bb147ccdee07d6d607cc68/src%2Ftest%2Fui%2Fargument-suggestions%2Fformal-and-expected-differ.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe803645005d190fd0bb147ccdee07d6d607cc68/src%2Ftest%2Fui%2Fargument-suggestions%2Fformal-and-expected-differ.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fformal-and-expected-differ.stderr?ref=fe803645005d190fd0bb147ccdee07d6d607cc68", "patch": "@@ -0,0 +1,30 @@\n+error[E0308]: mismatched types\n+  --> $DIR/formal-and-expected-differ.rs:22:29\n+   |\n+LL |     let _: U<_, u32> = U(1, S(3u32));\n+   |                        -    ^^^^^^^ expected `f32`, found `u32`\n+   |                        |\n+   |                        arguments to this struct are incorrect\n+   |\n+   = note: expected struct `S<f32>`\n+              found struct `S<u32>`\n+note: tuple struct defined here\n+  --> $DIR/formal-and-expected-differ.rs:9:12\n+   |\n+LL | pub struct U<T1, T2>(T1, S<T2>)\n+   |            ^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/formal-and-expected-differ.rs:22:24\n+   |\n+LL |     let _: U<_, u32> = U(1, S(3u32));\n+   |            ---------   ^^^^^^^^^^^^^ expected `u32`, found `f32`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected struct `U<_, u32>`\n+              found struct `U<i32, f32>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}