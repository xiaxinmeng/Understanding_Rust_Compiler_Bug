{"sha": "ba9eda72363ddb5fdc1ee143ee57827eb9a330c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhOWVkYTcyMzYzZGRiNWZkYzFlZTE0M2VlNTc4MjdlYjlhMzMwYzc=", "commit": {"author": {"name": "Pascal Hertleif", "email": "killercup@gmail.com", "date": "2016-07-12T12:11:18Z"}, "committer": {"name": "Pascal Hertleif", "email": "killercup@gmail.com", "date": "2016-07-12T14:31:13Z"}, "message": "Add First Draft of Lint Listing Page", "tree": {"sha": "eae4adb5aca064ca7d8178a9b57bab22f3e45198", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eae4adb5aca064ca7d8178a9b57bab22f3e45198"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba9eda72363ddb5fdc1ee143ee57827eb9a330c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba9eda72363ddb5fdc1ee143ee57827eb9a330c7", "html_url": "https://github.com/rust-lang/rust/commit/ba9eda72363ddb5fdc1ee143ee57827eb9a330c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba9eda72363ddb5fdc1ee143ee57827eb9a330c7/comments", "author": {"login": "killercup", "id": 20063, "node_id": "MDQ6VXNlcjIwMDYz", "avatar_url": "https://avatars.githubusercontent.com/u/20063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killercup", "html_url": "https://github.com/killercup", "followers_url": "https://api.github.com/users/killercup/followers", "following_url": "https://api.github.com/users/killercup/following{/other_user}", "gists_url": "https://api.github.com/users/killercup/gists{/gist_id}", "starred_url": "https://api.github.com/users/killercup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killercup/subscriptions", "organizations_url": "https://api.github.com/users/killercup/orgs", "repos_url": "https://api.github.com/users/killercup/repos", "events_url": "https://api.github.com/users/killercup/events{/privacy}", "received_events_url": "https://api.github.com/users/killercup/received_events", "type": "User", "site_admin": false}, "committer": {"login": "killercup", "id": 20063, "node_id": "MDQ6VXNlcjIwMDYz", "avatar_url": "https://avatars.githubusercontent.com/u/20063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killercup", "html_url": "https://github.com/killercup", "followers_url": "https://api.github.com/users/killercup/followers", "following_url": "https://api.github.com/users/killercup/following{/other_user}", "gists_url": "https://api.github.com/users/killercup/gists{/gist_id}", "starred_url": "https://api.github.com/users/killercup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killercup/subscriptions", "organizations_url": "https://api.github.com/users/killercup/orgs", "repos_url": "https://api.github.com/users/killercup/repos", "events_url": "https://api.github.com/users/killercup/events{/privacy}", "received_events_url": "https://api.github.com/users/killercup/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b14114f2537b06731b3be4ecbeea1e4c47d3eb12", "url": "https://api.github.com/repos/rust-lang/rust/commits/b14114f2537b06731b3be4ecbeea1e4c47d3eb12", "html_url": "https://github.com/rust-lang/rust/commit/b14114f2537b06731b3be4ecbeea1e4c47d3eb12"}], "stats": {"total": 252, "additions": 252, "deletions": 0}, "files": [{"sha": "e5a2f2aa7b7030204db9f94d4079b13473251a5b", "filename": ".gitignore", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba9eda72363ddb5fdc1ee143ee57827eb9a330c7/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/ba9eda72363ddb5fdc1ee143ee57827eb9a330c7/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=ba9eda72363ddb5fdc1ee143ee57827eb9a330c7", "patch": "@@ -16,3 +16,6 @@ Cargo.lock\n \n # Generated by dogfood\n /target_recur/\n+\n+# gh pages docs\n+util/gh-pages/lints.json"}, {"sha": "96d7915a2e8286a34a7ac150692b80be58d991f1", "filename": ".travis.yml", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba9eda72363ddb5fdc1ee143ee57827eb9a330c7/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/ba9eda72363ddb5fdc1ee143ee57827eb9a330c7/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=ba9eda72363ddb5fdc1ee143ee57827eb9a330c7", "patch": "@@ -46,3 +46,11 @@ after_success:\n     else\n       echo \"Ignored\"\n     fi\n+- |\n+    if  [ \"$TRAVIS_PULL_REQUEST\" == \"false\" ] &&\n+        [ \"$TRAVIS_REPO_SLUG\" == \"Manishearth/rust-clippy\" ] &&\n+        [ \"$TRAVIS_BRANCH\" == \"master\" ] ; then\n+    \n+        python util/export.py\n+    \n+    fi"}, {"sha": "ce5b2240115cbd9a1b54c91ea97c26f1f00ed3f8", "filename": "util/export.py", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/ba9eda72363ddb5fdc1ee143ee57827eb9a330c7/util%2Fexport.py", "raw_url": "https://github.com/rust-lang/rust/raw/ba9eda72363ddb5fdc1ee143ee57827eb9a330c7/util%2Fexport.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fexport.py?ref=ba9eda72363ddb5fdc1ee143ee57827eb9a330c7", "patch": "@@ -0,0 +1,127 @@\n+#!/usr/bin/env python\n+\n+import os\n+import re\n+import json\n+\n+level_re = re.compile(r'''(Forbid|Deny|Warn|Allow)''')\n+conf_re = re.compile(r'''define_Conf! {\\n([^}]*)\\n}''', re.MULTILINE)\n+confvar_re = re.compile(r'''/// Lint: (\\w+). (.*).*\\n *\\(\"([^\"]*)\", (?:[^,]*), (.*) => (.*)\\),''')\n+lint_subheadline = re.compile(r'''^\\*\\*([\\w\\s]+)[:?.!]\\*\\*(.*)''')\n+\n+# TODO: actual logging\n+def warn(*args): print(args)\n+def debug(*args): print(args)\n+def info(*args): print(args)\n+\n+def parse_path(p=\"clippy_lints/src\"):\n+    d = []\n+    for f in os.listdir(p):\n+        if f.endswith(\".rs\"):\n+            parse_file(d, os.path.join(p, f))\n+    return (d, parse_conf(p))\n+\n+\n+def parse_conf(p):\n+    c = {}\n+    with open(p + '/utils/conf.rs') as f:\n+        f = f.read()\n+\n+        m = re.search(conf_re, f)\n+        m = m.groups()[0]\n+\n+        m = re.findall(confvar_re, m)\n+\n+        for (lint, doc, name, default, ty) in m:\n+            c[lint.lower()] = (name, ty, doc, default)\n+\n+    return c\n+\n+def parseLintDef(level, comment, name):\n+    lint = {}\n+    lint['id'] = name\n+    lint['level'] = level\n+    lint['docs'] = {}\n+\n+    last_section = None\n+\n+    for line in comment:\n+        if len(line.strip()) == 0:\n+            continue\n+\n+        match = re.match(lint_subheadline, line)\n+        if match:\n+            last_section = match.groups()[0]\n+        text = match and match.groups()[1] or line\n+        \n+        if not last_section:\n+            warn(\"Skipping comment line as it was not preceded by a heading\")\n+            debug(\"in lint `%s`, line `%s`\" % name, line)\n+\n+        lint['docs'][last_section] = (lint['docs'].get(last_section, \"\") + \"\\n\" + text).strip() \n+    \n+    return lint\n+\n+def parse_file(d, f):\n+    last_comment = []\n+    comment = True\n+\n+    with open(f) as rs:\n+        for line in rs:\n+            if comment:\n+                if line.startswith(\"///\"):\n+                    if line.startswith(\"/// \"):\n+                        last_comment.append(line[4:])\n+                    else:\n+                        last_comment.append(line[3:])\n+                elif line.startswith(\"declare_lint!\"):\n+                    comment = False\n+                    deprecated = False\n+                    restriction = False\n+                elif line.startswith(\"declare_restriction_lint!\"):\n+                    comment = False\n+                    deprecated = False\n+                    restriction = True\n+                elif line.startswith(\"declare_deprecated_lint!\"):\n+                    comment = False\n+                    deprecated = True\n+                else:\n+                    last_comment = []\n+            if not comment:\n+                l = line.strip()\n+                m = re.search(r\"pub\\s+([A-Z_][A-Z_0-9]*)\", l)\n+\n+                if m:\n+                    name = m.group(1).lower()\n+\n+                    # Intentionally either a never looping or infinite loop\n+                    while not deprecated and not restriction:\n+                        m = re.search(level_re, line)\n+                        if m:\n+                            level = m.group(0)\n+                            break\n+\n+                        line = next(rs)\n+\n+                    if deprecated:\n+                        level = \"Deprecated\"\n+                    elif restriction:\n+                        level = \"Allow\"\n+\n+                    info(\"found %s with level %s in %s\" % (name, level, f))\n+                    d.append(parseLintDef(level, last_comment, name=name))\n+                    last_comment = []\n+                    comment = True\n+                if \"}\" in l:\n+                    warn(\"Warning: Missing Lint-Name in\", f)\n+                    comment = True\n+\n+def main():\n+    (lints, config) = parse_path()\n+    info(\"got %s lints\" % len(lints))\n+    with open(\"util/gh-pages/lints.json\", \"w\") as file:\n+        json.dump(lints, file, indent=2)\n+        info(\"wrote JSON for great justice\")\n+\n+if __name__ == \"__main__\":\n+    main()\n\\ No newline at end of file"}, {"sha": "7b44c4114f6ec3450d06dc781da38c2bb8c2f66a", "filename": "util/gh-pages/index.html", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/ba9eda72363ddb5fdc1ee143ee57827eb9a330c7/util%2Fgh-pages%2Findex.html", "raw_url": "https://github.com/rust-lang/rust/raw/ba9eda72363ddb5fdc1ee143ee57827eb9a330c7/util%2Fgh-pages%2Findex.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fgh-pages%2Findex.html?ref=ba9eda72363ddb5fdc1ee143ee57827eb9a330c7", "patch": "@@ -0,0 +1,114 @@\n+<!DOCTYPE html>\n+<html lang=\"en\">\n+<head>\n+    <meta charset=\"UTF-8\">\n+    <title>Clippy</title>\n+\n+    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.1/css/bootstrap.min.css\"/>\n+    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/>\n+</head>\n+<body>\n+    <div class=\"container\" ng-app=\"clippy\" ng-controller=\"lintList\">\n+        <div class=\"page-header\">\n+            <h1>ALL the Clippy Lints</h1>\n+        </div>\n+\n+        <div class=\"alert alert-info\" role=\"alert\" ng-if=\"loading\">\n+            Loading&#x2026;\n+        </div>\n+        <div class=\"alert alert-danger\" role=\"alert\" ng-if=\"error\">\n+            Error loading commits!\n+        </div>\n+\n+        <div class=\"panel panel-default\" ng-show=\"data\">\n+            <div class=\"panel-body row\">\n+                <div class=\"col-md-6 form-inline\">\n+                    <div class=\"form-group\">\n+                        <label for=\"filter-level\">Level</label>\n+                        <select class=\"form-control\" id=\"filter-level\" ng-model=\"level.level\">\n+                            <option value=\"\">All</option>\n+                            <option value=\"Allow\">Allow</option>\n+                            <option value=\"Warn\">Warn</option>\n+                            <option value=\"Deny\">Deny</option>\n+                        </select>\n+                    </div>\n+                </div>\n+                <div class=\"col-md-6\">\n+                    <div class=\"input-group\">\n+                        <span class=\"input-group-addon\" id=\"filter-label\">Filter:</span>\n+                        <input type=\"text\" class=\"form-control\" placeholder=\"Keywords or search string\" aria-describedby=\"filter-label\" ng-model=\"search\" />\n+                        <span class=\"input-group-btn\">\n+                            <button class=\"btn btn-default\" type=\"button\" ng-click=\"search = ''\">\n+                                Clear\n+                            </button>\n+                        </span>\n+                    </div>\n+                </div>\n+            </div>\n+        </div>\n+\n+        <article class=\"panel panel-default\" ng-repeat=\"lint in data | filter:level | filter:search | orderBy:'id' track by lint.id\">\n+            <header class=\"panel-heading\" ng-click=\"open[lint.id] = !open[lint.id]\">\n+                <button class=\"btn btn-default btn-sm pull-right\" style=\"margin-top: -6px;\">\n+                    <span ng-show=\"open[lint.id]\">&minus;</span>\n+                    <span ng-hide=\"open[lint.id]\">&plus;</span>\n+                </button>\n+\n+                <h2 class=\"panel-title\">\n+                    {{lint.id}}\n+                    <span ng-if=\"lint.level == 'Allow'\" class=\"label label-info\">Allow</span>\n+                    <span ng-if=\"lint.level == 'Warn'\" class=\"label label-warning\">Warn</span>\n+                    <span ng-if=\"lint.level == 'Deny'\" class=\"label label-danger\">Deny</span>\n+                </h2>\n+            </header>\n+\n+            <ul class=\"list-group\" ng-if=\"lint.docs\" ng-class=\"{collapse: true, in: open[lint.id]}\">\n+                <li class=\"list-group-item\" ng-repeat=\"(title, text) in lint.docs\">\n+                    <h4 class=\"list-group-item-heading\">\n+                        {{title}}\n+                    </h4>\n+                    <div class=\"list-group-item-text\" ng-bind-html=\"text | markdown\"></div>\n+                </li>\n+            </ul>\n+        </article>\n+    </div>\n+\n+    <a href=\"https://github.com/Manishearth/rust-clippy\">\n+        <img style=\"position: absolute; top: 0; right: 0; border: 0;\" src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png\"/>\n+    </a>\n+    \n+    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/marked/0.3.2/marked.min.js\"></script>\n+    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.4.12/angular.min.js\"></script>\n+    <script>\n+    (function () {\n+        angular.module(\"clippy\", [])\n+        .filter('markdown', function ($sce) {\n+            return function (text) {\n+                if (typeof text !== 'string') {\n+                    text = ''\n+                };\n+\n+                return $sce.trustAsHtml(\n+                    marked(text)\n+                );\n+            };\n+        })\n+        .controller(\"lintList\", function ($scope, $http) {\n+            // Get data\n+            $scope.open = {};\n+            $scope.loading = true;\n+\n+            $http.get('./lints.json')\n+            .success(function (data) {\n+                $scope.data = data;\n+                $scope.loading = false;\n+            })\n+            .error(function (data) {\n+                $scope.error = data;\n+                $scope.loading = false;\n+            });\n+        })\n+    })();\n+    </script>\n+</body>\n+</html>\n\\ No newline at end of file"}]}