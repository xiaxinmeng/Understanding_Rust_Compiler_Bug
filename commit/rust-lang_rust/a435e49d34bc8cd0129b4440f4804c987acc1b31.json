{"sha": "a435e49d34bc8cd0129b4440f4804c987acc1b31", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MzVlNDlkMzRiYzhjZDAxMjliNDQ0MGY0ODA0Yzk4N2FjYzFiMzE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-18T01:21:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-18T01:21:43Z"}, "message": "Merge #10252\n\n10252: fix: make `goto_definition` multi-token mapping aware r=Veykril a=XFFXFF\n\nImplement #10070 in  [`goto_definition`](https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ide/src/goto_definition.rs)\n\nCo-authored-by: zhoufan <1247714429@qq.com>", "tree": {"sha": "3a8221f7c15ee8fd37a018cc3736b624631aa18c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a8221f7c15ee8fd37a018cc3736b624631aa18c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a435e49d34bc8cd0129b4440f4804c987acc1b31", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhRT8nCRBK7hj4Ov3rIwAA+dwIACsfA+J35Qz5EaJXF9QwwQcE\nShMhq1uggLFc+8eN7B5KIgu/ncDuufDU9ffcZI2hnWs9ff/eDxoL90uX929hwPVr\nvnRXGtk5T37A5aq6y5b9nA3rvnRCV34fVz2xXmqrVstaMk6cwGNeztnTUyO9gkom\n5EDVOJjzUVrl7a3unL2j3OdArRdASQeGT80vRzscXJiuCJHs0sBtXug890Ma7gWC\nA06rzHjOWiDZqUchyXHm+FcyyFCskji79u749Xqe1dSgXNvC0qAEQeYw0ZJfxx25\n8sCbK0bvaLFlmu2to5vlMwLyofDpAkIEMIhs8Y3z8+9R1ZUR4WPKyU37RDR/M7Y=\n=Uupr\n-----END PGP SIGNATURE-----\n", "payload": "tree 3a8221f7c15ee8fd37a018cc3736b624631aa18c\nparent 7c03200d707a5accc0afef8c85db9aecb5fd19cd\nparent 227450f9b9277e68dbae272b3570f0c56b19ad12\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1631928103 +0000\ncommitter GitHub <noreply@github.com> 1631928103 +0000\n\nMerge #10252\n\n10252: fix: make `goto_definition` multi-token mapping aware r=Veykril a=XFFXFF\n\nImplement #10070 in  [`goto_definition`](https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ide/src/goto_definition.rs)\n\nCo-authored-by: zhoufan <1247714429@qq.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a435e49d34bc8cd0129b4440f4804c987acc1b31", "html_url": "https://github.com/rust-lang/rust/commit/a435e49d34bc8cd0129b4440f4804c987acc1b31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a435e49d34bc8cd0129b4440f4804c987acc1b31/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c03200d707a5accc0afef8c85db9aecb5fd19cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c03200d707a5accc0afef8c85db9aecb5fd19cd", "html_url": "https://github.com/rust-lang/rust/commit/7c03200d707a5accc0afef8c85db9aecb5fd19cd"}, {"sha": "227450f9b9277e68dbae272b3570f0c56b19ad12", "url": "https://api.github.com/repos/rust-lang/rust/commits/227450f9b9277e68dbae272b3570f0c56b19ad12", "html_url": "https://github.com/rust-lang/rust/commit/227450f9b9277e68dbae272b3570f0c56b19ad12"}], "stats": {"total": 61, "additions": 34, "deletions": 27}, "files": [{"sha": "e8aee21f67195c369b1466ed45c42b3d31f3f4b0", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 34, "deletions": 27, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/a435e49d34bc8cd0129b4440f4804c987acc1b31/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a435e49d34bc8cd0129b4440f4804c987acc1b31/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=a435e49d34bc8cd0129b4440f4804c987acc1b31", "patch": "@@ -39,9 +39,8 @@ pub(crate) fn goto_definition(\n             kind if kind.is_trivia() => 0,\n             _ => 1,\n         })?;\n-    let token = sema.descend_into_macros(original_token.clone());\n-    let parent = token.parent()?;\n-    if let Some(_) = ast::Comment::cast(token.clone()) {\n+    if let Some(_) = ast::Comment::cast(original_token.clone()) {\n+        let parent = original_token.parent()?;\n         let (attributes, def) = doc_attributes(&sema, &parent)?;\n         let (docs, doc_mapping) = attributes.docs_with_rangemap(db)?;\n         let (_, link, ns) =\n@@ -54,33 +53,41 @@ pub(crate) fn goto_definition(\n         return Some(RangeInfo::new(original_token.text_range(), vec![nav]));\n     }\n \n-    let navs = match_ast! {\n-        match parent {\n-            ast::NameRef(name_ref) => {\n-                reference_definition(&sema, Either::Right(&name_ref))\n-            },\n-            ast::Name(name) => {\n-                match NameClass::classify(&sema, &name)? {\n-                    NameClass::Definition(def) | NameClass::ConstReference(def) => {\n-                        try_find_trait_item_definition(sema.db, &def).unwrap_or_else(|| def_to_nav(sema.db, def))\n-                    }\n-                    NameClass::PatFieldShorthand { local_def, field_ref } => {\n-                        local_and_field_to_nav(sema.db, local_def, field_ref)\n+    let navs = sema.descend_into_macros_many(original_token.clone())\n+        .into_iter()\n+        .filter_map(|token| {\n+            let parent = token.parent()?;\n+            let navs = match_ast! {\n+                match parent {\n+                    ast::NameRef(name_ref) => {\n+                        reference_definition(&sema, Either::Right(&name_ref))\n                     },\n-                }\n-            },\n-            ast::Lifetime(lt) => if let Some(name_class) = NameClass::classify_lifetime(&sema, &lt) {\n-                match name_class {\n-                    NameClass::Definition(def) => def_to_nav(sema.db, def),\n+                    ast::Name(name) => {\n+                        match NameClass::classify(&sema, &name)? {\n+                            NameClass::Definition(def) | NameClass::ConstReference(def) => {\n+                                try_find_trait_item_definition(sema.db, &def).unwrap_or_else(|| def_to_nav(sema.db, def))\n+                            }\n+                            NameClass::PatFieldShorthand { local_def, field_ref } => {\n+                                local_and_field_to_nav(sema.db, local_def, field_ref)\n+                            },\n+                        }\n+                    },\n+                    ast::Lifetime(lt) => if let Some(name_class) = NameClass::classify_lifetime(&sema, &lt) {\n+                        match name_class {\n+                            NameClass::Definition(def) => def_to_nav(sema.db, def),\n+                            _ => return None,\n+                        }\n+                    } else {\n+                        reference_definition(&sema, Either::Left(&lt))\n+                    },\n+                    ast::TokenTree(tt) => try_lookup_include_path_or_derive(&sema, tt, token, position.file_id)?,\n                     _ => return None,\n                 }\n-            } else {\n-                reference_definition(&sema, Either::Left(&lt))\n-            },\n-            ast::TokenTree(tt) => try_lookup_include_path_or_derive(&sema, tt, token, position.file_id)?,\n-            _ => return None,\n-        }\n-    };\n+            };\n+            Some(navs)\n+        })\n+        .flatten()\n+        .collect::<Vec<NavigationTarget>>();\n \n     Some(RangeInfo::new(original_token.text_range(), navs))\n }"}]}