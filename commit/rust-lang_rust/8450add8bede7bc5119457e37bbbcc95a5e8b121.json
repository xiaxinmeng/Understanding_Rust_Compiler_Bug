{"sha": "8450add8bede7bc5119457e37bbbcc95a5e8b121", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0NTBhZGQ4YmVkZTdiYzUxMTk0NTdlMzdiYmJjYzk1YTVlOGIxMjE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-03-24T17:35:49Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-03-30T12:18:02Z"}, "message": "fix `X as !` behavior", "tree": {"sha": "bded4dd18f0057ddeeca8213f2418a29cd2fa2f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bded4dd18f0057ddeeca8213f2418a29cd2fa2f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8450add8bede7bc5119457e37bbbcc95a5e8b121", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8450add8bede7bc5119457e37bbbcc95a5e8b121", "html_url": "https://github.com/rust-lang/rust/commit/8450add8bede7bc5119457e37bbbcc95a5e8b121", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8450add8bede7bc5119457e37bbbcc95a5e8b121/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7eeddb409364fdeecbec8611f08a6ccea134971f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7eeddb409364fdeecbec8611f08a6ccea134971f", "html_url": "https://github.com/rust-lang/rust/commit/7eeddb409364fdeecbec8611f08a6ccea134971f"}], "stats": {"total": 36, "additions": 31, "deletions": 5}, "files": [{"sha": "32b363ed755f4cca5860c4f333b11db273e72386", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8450add8bede7bc5119457e37bbbcc95a5e8b121/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8450add8bede7bc5119457e37bbbcc95a5e8b121/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=8450add8bede7bc5119457e37bbbcc95a5e8b121", "patch": "@@ -56,6 +56,7 @@ use util::common::ErrorReported;\n pub struct CastCheck<'tcx> {\n     expr: &'tcx hir::Expr,\n     expr_ty: Ty<'tcx>,\n+    expr_diverges: Diverges,\n     cast_ty: Ty<'tcx>,\n     cast_span: Span,\n     span: Span,\n@@ -115,13 +116,15 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n     pub fn new(fcx: &FnCtxt<'a, 'gcx, 'tcx>,\n                expr: &'tcx hir::Expr,\n                expr_ty: Ty<'tcx>,\n+               expr_diverges: Diverges,\n                cast_ty: Ty<'tcx>,\n                cast_span: Span,\n                span: Span)\n                -> Result<CastCheck<'tcx>, ErrorReported> {\n         let check = CastCheck {\n             expr: expr,\n             expr_ty: expr_ty,\n+            expr_diverges: expr_diverges,\n             cast_ty: cast_ty,\n             cast_span: cast_span,\n             span: span,\n@@ -378,7 +381,7 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n                     // Attempt a coercion to a fn pointer type.\n                     let res = fcx.try_coerce(self.expr,\n                                              self.expr_ty,\n-                                             Diverges::Maybe, // TODO\n+                                             self.expr_diverges,\n                                              fcx.tcx.mk_fn_ptr(f));\n                     if !res.is_ok() {\n                         return Err(CastError::NonScalar);\n@@ -545,8 +548,7 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n     }\n \n     fn try_coercion_cast(&self, fcx: &FnCtxt<'a, 'gcx, 'tcx>) -> bool {\n-        // TODO\n-        fcx.try_coerce(self.expr, self.expr_ty, Diverges::Maybe, self.cast_ty).is_ok()\n+        fcx.try_coerce(self.expr, self.expr_ty, self.expr_diverges, self.cast_ty).is_ok()\n     }\n }\n "}, {"sha": "da15c8f766e372920e5283f13c3605a76c5200ff", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8450add8bede7bc5119457e37bbbcc95a5e8b121/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8450add8bede7bc5119457e37bbbcc95a5e8b121/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8450add8bede7bc5119457e37bbbcc95a5e8b121", "patch": "@@ -3736,14 +3736,15 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             let t_cast = self.resolve_type_vars_if_possible(&t_cast);\n             let t_expr = self.check_expr_with_expectation(e, ExpectCastableToType(t_cast));\n             let t_cast = self.resolve_type_vars_if_possible(&t_cast);\n+            let diverges = self.diverges.get();\n \n             // Eagerly check for some obvious errors.\n             if t_expr.references_error() || t_cast.references_error() {\n                 tcx.types.err\n             } else {\n                 // Defer other checks until we're done type checking.\n                 let mut deferred_cast_checks = self.deferred_cast_checks.borrow_mut();\n-                match cast::CastCheck::new(self, e, t_expr, t_cast, t.span, expr.span) {\n+                match cast::CastCheck::new(self, e, t_expr, diverges, t_cast, t.span, expr.span) {\n                     Ok(cast_check) => {\n                         deferred_cast_checks.push(cast_check);\n                         t_cast\n@@ -4158,7 +4159,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                               &self.misc(tail_expr.span),\n                               tail_expr,\n                               tail_expr_ty,\n-                              self.diverges.get()); // TODO\n+                              self.diverges.get());\n             } else {\n                 // Subtle: if there is no explicit tail expression,\n                 // that is typically equivalent to a tail expression"}, {"sha": "57d2192e6356b854d3e53db7ad85ed526874f649", "filename": "src/test/compile-fail/coerce-to-bang-cast.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8450add8bede7bc5119457e37bbbcc95a5e8b121/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8450add8bede7bc5119457e37bbbcc95a5e8b121/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang-cast.rs?ref=8450add8bede7bc5119457e37bbbcc95a5e8b121", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(never_type)]\n+\n+fn foo(x: usize, y: !, z: usize) { }\n+\n+fn cast_a() {\n+    let y = {return; 22} as !;\n+}\n+\n+fn cast_b() {\n+    let y = 22 as !; //~ ERROR non-scalar cast\n+}\n+\n+fn main() { }"}]}