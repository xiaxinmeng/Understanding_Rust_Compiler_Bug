{"sha": "059e8edd15401d5544260e4058731dc8818578d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1OWU4ZWRkMTU0MDFkNTU0NDI2MGU0MDU4NzMxZGM4ODE4NTc4ZDU=", "commit": {"author": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-05-25T02:45:41Z"}, "committer": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-05-31T18:55:45Z"}, "message": "Detect also a non-reversed comparison", "tree": {"sha": "326f6a82de8d4ee72cb48f87722b091fcbce9714", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/326f6a82de8d4ee72cb48f87722b091fcbce9714"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/059e8edd15401d5544260e4058731dc8818578d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/059e8edd15401d5544260e4058731dc8818578d5", "html_url": "https://github.com/rust-lang/rust/commit/059e8edd15401d5544260e4058731dc8818578d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/059e8edd15401d5544260e4058731dc8818578d5/comments", "author": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "955a25ee7db234a8ab697176a433070702aabe59", "url": "https://api.github.com/repos/rust-lang/rust/commits/955a25ee7db234a8ab697176a433070702aabe59", "html_url": "https://github.com/rust-lang/rust/commit/955a25ee7db234a8ab697176a433070702aabe59"}], "stats": {"total": 146, "additions": 94, "deletions": 52}, "files": [{"sha": "9e826316f21861a53a9f948f373e693733ceb004", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/059e8edd15401d5544260e4058731dc8818578d5/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059e8edd15401d5544260e4058731dc8818578d5/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=059e8edd15401d5544260e4058731dc8818578d5", "patch": "@@ -304,7 +304,7 @@ mod serde_api;\n mod shadow;\n mod single_component_path_imports;\n mod slow_vector_initialization;\n-mod sort_by_key_reverse;\n+mod sort_by_key;\n mod strings;\n mod suspicious_trait_impl;\n mod swap;\n@@ -780,7 +780,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &shadow::SHADOW_UNRELATED,\n         &single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS,\n         &slow_vector_initialization::SLOW_VECTOR_INITIALIZATION,\n-        &sort_by_key_reverse::SORT_BY_KEY_REVERSE,\n+        &sort_by_key::SORT_BY_KEY,\n         &strings::STRING_ADD,\n         &strings::STRING_ADD_ASSIGN,\n         &strings::STRING_LIT_AS_BYTES,\n@@ -998,7 +998,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box ptr_offset_with_cast::PtrOffsetWithCast);\n     store.register_late_pass(|| box redundant_clone::RedundantClone);\n     store.register_late_pass(|| box slow_vector_initialization::SlowVectorInit);\n-    store.register_late_pass(|| box sort_by_key_reverse::SortByKeyReverse);\n+    store.register_late_pass(|| box sort_by_key::SortByKey);\n     store.register_late_pass(|| box types::RefToMut);\n     store.register_late_pass(|| box assertions_on_constants::AssertionsOnConstants);\n     store.register_late_pass(|| box missing_const_for_fn::MissingConstForFn);\n@@ -1394,7 +1394,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&serde_api::SERDE_API_MISUSE),\n         LintId::of(&single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS),\n         LintId::of(&slow_vector_initialization::SLOW_VECTOR_INITIALIZATION),\n-        LintId::of(&sort_by_key_reverse::SORT_BY_KEY_REVERSE),\n+        LintId::of(&sort_by_key::SORT_BY_KEY),\n         LintId::of(&strings::STRING_LIT_AS_BYTES),\n         LintId::of(&suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n         LintId::of(&suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n@@ -1596,7 +1596,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&ranges::RANGE_ZIP_WITH_LEN),\n         LintId::of(&reference::DEREF_ADDROF),\n         LintId::of(&reference::REF_IN_DEREF),\n-        LintId::of(&sort_by_key_reverse::SORT_BY_KEY_REVERSE),\n+        LintId::of(&sort_by_key::SORT_BY_KEY),\n         LintId::of(&swap::MANUAL_SWAP),\n         LintId::of(&temporary_assignment::TEMPORARY_ASSIGNMENT),\n         LintId::of(&transmute::CROSSPOINTER_TRANSMUTE),"}, {"sha": "109845a28f446cb2d53de1691e9cb9be7376ee46", "filename": "clippy_lints/src/sort_by_key.rs", "status": "renamed", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/059e8edd15401d5544260e4058731dc8818578d5/clippy_lints%2Fsrc%2Fsort_by_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059e8edd15401d5544260e4058731dc8818578d5/clippy_lints%2Fsrc%2Fsort_by_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsort_by_key.rs?ref=059e8edd15401d5544260e4058731dc8818578d5", "patch": "@@ -11,33 +11,35 @@ use rustc_span::symbol::Ident;\n declare_clippy_lint! {\n     /// **What it does:**\n     /// Detects when people use `Vec::sort_by` and pass in a function\n-    /// which compares the second argument to the first.\n+    /// which compares the two arguments, either directly or indirectly.\n     ///\n     /// **Why is this bad?**\n-    /// It is more clear to use `Vec::sort_by_key` and `std::cmp::Reverse`\n+    /// It is more clear to use `Vec::sort_by_key` (or\n+    /// `Vec::sort_by_key` and `std::cmp::Reverse` if necessary) than\n+    /// using \n     ///\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n     ///\n     /// ```rust\n-    /// vec.sort_by(|a, b| b.foo().cmp(&a.foo()));\n+    /// vec.sort_by(|a, b| a.foo().cmp(b.foo()));\n     /// ```\n     /// Use instead:\n     /// ```rust\n-    /// vec.sort_by_key(|e| Reverse(e.foo()));\n+    /// vec.sort_by_key(|a| a.foo());\n     /// ```\n-    pub SORT_BY_KEY_REVERSE,\n+    pub SORT_BY_KEY,\n     complexity,\n     \"Use of `Vec::sort_by` when `Vec::sort_by_key` would be clearer\"\n }\n \n-declare_lint_pass!(SortByKeyReverse => [SORT_BY_KEY_REVERSE]);\n+declare_lint_pass!(SortByKey => [SORT_BY_KEY]);\n \n struct LintTrigger {\n     vec_name: String,\n     closure_arg: String,\n-    closure_reverse_body: String,\n+    closure_body: String,\n     unstable: bool,\n }\n \n@@ -154,43 +156,49 @@ fn detect_lint(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> Option<LintTrigger>\n         if utils::match_type(cx, &cx.tables.expr_ty(vec), &paths::VEC);\n         if let closure_body = cx.tcx.hir().body(*closure_body_id);\n         if let &[\n-            Param { pat: Pat { kind: PatKind::Binding(_, _, a_ident, _), .. }, ..},\n-            Param { pat: Pat { kind: PatKind::Binding(_, _, b_ident, _), .. }, .. }\n+            Param { pat: Pat { kind: PatKind::Binding(_, _, left_ident, _), .. }, ..},\n+            Param { pat: Pat { kind: PatKind::Binding(_, _, right_ident, _), .. }, .. }\n         ] = &closure_body.params;\n-        if let ExprKind::MethodCall(method_path, _, [ref b_expr, ref a_expr]) = &closure_body.value.kind;\n+        if let ExprKind::MethodCall(method_path, _, [ref left_expr, ref right_expr]) = &closure_body.value.kind;\n         if method_path.ident.name.to_ident_string() == \"cmp\";\n-        if mirrored_exprs(&cx, &a_expr, &a_ident, &b_expr, &b_ident);\n         then {\n+            let (closure_body, closure_arg) = if mirrored_exprs(\n+                &cx,\n+                &left_expr,\n+                &left_ident,\n+                &right_expr,\n+                &right_ident\n+            ) {\n+                (Sugg::hir(cx, &left_expr, \"..\").to_string(), left_ident.name.to_string())\n+            } else if mirrored_exprs(&cx, &left_expr, &right_ident, &right_expr, &left_ident) {\n+                (format!(\"Reverse({})\", Sugg::hir(cx, &left_expr, \"..\").to_string()), right_ident.name.to_string())\n+            } else {\n+                return None;\n+            };\n             let vec_name = Sugg::hir(cx, &args[0], \"..\").to_string();\n             let unstable = name == \"sort_unstable_by\";\n-            let closure_arg = format!(\"&{}\", b_ident.name.to_ident_string());\n-            let closure_reverse_body = Sugg::hir(cx, &b_expr, \"..\").to_string();\n-            // Get rid of parentheses, because they aren't needed anymore\n-            // while closure_reverse_body.chars().next() == Some('(') && closure_reverse_body.chars().last() == Some(')') {\n-                // closure_reverse_body = String::from(&closure_reverse_body[1..closure_reverse_body.len()-1]);\n-            // }\n-            Some(LintTrigger { vec_name, unstable, closure_arg, closure_reverse_body })\n+            Some(LintTrigger { vec_name, unstable, closure_arg, closure_body })\n         } else {\n             None\n         }\n     }\n }\n \n-impl LateLintPass<'_, '_> for SortByKeyReverse {\n+impl LateLintPass<'_, '_> for SortByKey {\n     fn check_expr(&mut self, cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n         if let Some(trigger) = detect_lint(cx, expr) {\n             utils::span_lint_and_sugg(\n                 cx,\n-                SORT_BY_KEY_REVERSE,\n+                SORT_BY_KEY,\n                 expr.span,\n                 \"use Vec::sort_by_key here instead\",\n                 \"try\",\n                 format!(\n-                    \"{}.sort{}_by_key(|{}| Reverse({}))\",\n+                    \"{}.sort{}_by_key(|&{}| {})\",\n                     trigger.vec_name,\n                     if trigger.unstable { \"_unstable\" } else { \"\" },\n                     trigger.closure_arg,\n-                    trigger.closure_reverse_body,\n+                    trigger.closure_body,\n                 ),\n                 Applicability::MachineApplicable,\n             );", "previous_filename": "clippy_lints/src/sort_by_key_reverse.rs"}, {"sha": "f6535c8d8f5dd58f597f380e90282ef59cdbcc91", "filename": "tests/ui/sort_by_key.fixed", "status": "renamed", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/059e8edd15401d5544260e4058731dc8818578d5/tests%2Fui%2Fsort_by_key.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/059e8edd15401d5544260e4058731dc8818578d5/tests%2Fui%2Fsort_by_key.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsort_by_key.fixed?ref=059e8edd15401d5544260e4058731dc8818578d5", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![warn(clippy::sort_by_key_reverse)]\n+#![warn(clippy::sort_by_key)]\n \n use std::cmp::Reverse;\n \n@@ -9,6 +9,11 @@ fn id(x: isize) -> isize {\n \n fn main() {\n     let mut vec: Vec<isize> = vec![3, 6, 1, 2, 5];\n+    // Forward examples\n+    vec.sort_by_key(|&a| a);\n+    vec.sort_by_key(|&a| (a + 5).abs());\n+    vec.sort_by_key(|&a| id(-a));\n+    // Reverse examples\n     vec.sort_by_key(|&b| Reverse(b));\n     vec.sort_by_key(|&b| Reverse((b + 5).abs()));\n     vec.sort_by_key(|&b| Reverse(id(-b)));\n@@ -18,5 +23,4 @@ fn main() {\n     vec.sort_by(|_, b| b.cmp(&5));\n     vec.sort_by(|_, b| b.cmp(c));\n     vec.sort_by(|a, _| a.cmp(c));\n-    vec.sort_by(|a, b| a.cmp(b));\n }", "previous_filename": "tests/ui/sort_by_key_reverse.fixed"}, {"sha": "953c573d406d8d7f2ade3d0b8ef205c7642c7a56", "filename": "tests/ui/sort_by_key.rs", "status": "renamed", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/059e8edd15401d5544260e4058731dc8818578d5/tests%2Fui%2Fsort_by_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059e8edd15401d5544260e4058731dc8818578d5/tests%2Fui%2Fsort_by_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsort_by_key.rs?ref=059e8edd15401d5544260e4058731dc8818578d5", "patch": "@@ -9,6 +9,11 @@ fn id(x: isize) -> isize {\n \n fn main() {\n     let mut vec: Vec<isize> = vec![3, 6, 1, 2, 5];\n+    // Forward examples\n+    vec.sort_by(|a, b| a.cmp(b));\n+    vec.sort_by(|a, b| (a + 5).abs().cmp(&(b + 5).abs()));\n+    vec.sort_by(|a, b| id(-a).cmp(&id(-b)));\n+    // Reverse examples\n     vec.sort_by(|a, b| b.cmp(a));\n     vec.sort_by(|a, b| (b + 5).abs().cmp(&(a + 5).abs()));\n     vec.sort_by(|a, b| id(-b).cmp(&id(-a)));\n@@ -18,5 +23,4 @@ fn main() {\n     vec.sort_by(|_, b| b.cmp(&5));\n     vec.sort_by(|_, b| b.cmp(c));\n     vec.sort_by(|a, _| a.cmp(c));\n-    vec.sort_by(|a, b| a.cmp(b));\n }", "previous_filename": "tests/ui/sort_by_key_reverse.rs"}, {"sha": "fa6a9a0fb10e741b9d3e58d097af74f359e7ae5d", "filename": "tests/ui/sort_by_key.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/059e8edd15401d5544260e4058731dc8818578d5/tests%2Fui%2Fsort_by_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/059e8edd15401d5544260e4058731dc8818578d5/tests%2Fui%2Fsort_by_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsort_by_key.stderr?ref=059e8edd15401d5544260e4058731dc8818578d5", "patch": "@@ -0,0 +1,48 @@\n+error: use Vec::sort_by_key here instead\n+  --> $DIR/sort_by_key.rs:13:5\n+   |\n+LL |     vec.sort_by(|a, b| a.cmp(b));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.sort_by_key(|&a| a)`\n+   |\n+   = note: `-D clippy::sort-by-key` implied by `-D warnings`\n+\n+error: use Vec::sort_by_key here instead\n+  --> $DIR/sort_by_key.rs:14:5\n+   |\n+LL |     vec.sort_by(|a, b| (a + 5).abs().cmp(&(b + 5).abs()));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.sort_by_key(|&a| (a + 5).abs())`\n+\n+error: use Vec::sort_by_key here instead\n+  --> $DIR/sort_by_key.rs:15:5\n+   |\n+LL |     vec.sort_by(|a, b| id(-a).cmp(&id(-b)));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.sort_by_key(|&a| id(-a))`\n+\n+error: use Vec::sort_by_key here instead\n+  --> $DIR/sort_by_key.rs:17:5\n+   |\n+LL |     vec.sort_by(|a, b| b.cmp(a));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.sort_by_key(|&b| Reverse(b))`\n+\n+error: use Vec::sort_by_key here instead\n+  --> $DIR/sort_by_key.rs:18:5\n+   |\n+LL |     vec.sort_by(|a, b| (b + 5).abs().cmp(&(a + 5).abs()));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.sort_by_key(|&b| Reverse((b + 5).abs()))`\n+\n+error: use Vec::sort_by_key here instead\n+  --> $DIR/sort_by_key.rs:19:5\n+   |\n+LL |     vec.sort_by(|a, b| id(-b).cmp(&id(-a)));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.sort_by_key(|&b| Reverse(id(-b)))`\n+\n+error: unknown clippy lint: clippy::sort_by_key_reverse\n+  --> $DIR/sort_by_key.rs:2:9\n+   |\n+LL | #![warn(clippy::sort_by_key_reverse)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: did you mean: `clippy::sort_by_key`\n+   |\n+   = note: `-D clippy::unknown-clippy-lints` implied by `-D warnings`\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "b757c8a6176d117994a9ee4726dc80e5ba704e92", "filename": "tests/ui/sort_by_key_reverse.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/955a25ee7db234a8ab697176a433070702aabe59/tests%2Fui%2Fsort_by_key_reverse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/955a25ee7db234a8ab697176a433070702aabe59/tests%2Fui%2Fsort_by_key_reverse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsort_by_key_reverse.stderr?ref=955a25ee7db234a8ab697176a433070702aabe59", "patch": "@@ -1,22 +0,0 @@\n-error: use Vec::sort_by_key here instead\n-  --> $DIR/sort_by_key_reverse.rs:12:5\n-   |\n-LL |     vec.sort_by(|a, b| b.cmp(a));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.sort_by_key(|&b| Reverse(b))`\n-   |\n-   = note: `-D clippy::sort-by-key-reverse` implied by `-D warnings`\n-\n-error: use Vec::sort_by_key here instead\n-  --> $DIR/sort_by_key_reverse.rs:13:5\n-   |\n-LL |     vec.sort_by(|a, b| (b + 5).abs().cmp(&(a + 5).abs()));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.sort_by_key(|&b| Reverse((b + 5).abs()))`\n-\n-error: use Vec::sort_by_key here instead\n-  --> $DIR/sort_by_key_reverse.rs:14:5\n-   |\n-LL |     vec.sort_by(|a, b| id(-b).cmp(&id(-a)));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.sort_by_key(|&b| Reverse(id(-b)))`\n-\n-error: aborting due to 3 previous errors\n-"}]}