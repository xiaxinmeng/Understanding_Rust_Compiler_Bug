{"sha": "590e07bbc2d2cba6377476c6b8442400327ff579", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MGUwN2JiYzJkMmNiYTYzNzc0NzZjNmI4NDQyNDAwMzI3ZmY1Nzk=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-06-26T02:55:23Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-07-02T13:51:04Z"}, "message": "rustc_lint: avoid using TypeckTables::empty for LateContext.", "tree": {"sha": "8ef07ea68fd64f8d5b9c8d1ac37d4873d0e12721", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ef07ea68fd64f8d5b9c8d1ac37d4873d0e12721"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/590e07bbc2d2cba6377476c6b8442400327ff579", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/590e07bbc2d2cba6377476c6b8442400327ff579", "html_url": "https://github.com/rust-lang/rust/commit/590e07bbc2d2cba6377476c6b8442400327ff579", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/590e07bbc2d2cba6377476c6b8442400327ff579/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c5ee3300f6c88f3d984d62ce704d17b7432f29c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c5ee3300f6c88f3d984d62ce704d17b7432f29c", "html_url": "https://github.com/rust-lang/rust/commit/3c5ee3300f6c88f3d984d62ce704d17b7432f29c"}], "stats": {"total": 139, "additions": 70, "deletions": 69}, "files": [{"sha": "1115ba1bf922d37725c61d58bcb1dd2113543cae", "filename": "clippy_lints/src/atomic_ordering.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Fatomic_ordering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Fatomic_ordering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fatomic_ordering.rs?ref=590e07bbc2d2cba6377476c6b8442400327ff579", "patch": "@@ -76,7 +76,7 @@ fn check_atomic_load_store(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n         if method == \"load\" || method == \"store\";\n         let ordering_arg = if method == \"load\" { &args[1] } else { &args[2] };\n         if let ExprKind::Path(ref ordering_qpath) = ordering_arg.kind;\n-        if let Some(ordering_def_id) = cx.tables().qpath_res(ordering_qpath, ordering_arg.hir_id).opt_def_id();\n+        if let Some(ordering_def_id) = cx.qpath_res(ordering_qpath, ordering_arg.hir_id).opt_def_id();\n         then {\n             if method == \"load\" &&\n                 match_ordering_def_path(cx, ordering_def_id, &[\"Release\", \"AcqRel\"]) {\n@@ -107,12 +107,12 @@ fn check_memory_fence(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n     if_chain! {\n         if let ExprKind::Call(ref func, ref args) = expr.kind;\n         if let ExprKind::Path(ref func_qpath) = func.kind;\n-        if let Some(def_id) = cx.tables().qpath_res(func_qpath, func.hir_id).opt_def_id();\n+        if let Some(def_id) = cx.qpath_res(func_qpath, func.hir_id).opt_def_id();\n         if [\"fence\", \"compiler_fence\"]\n             .iter()\n             .any(|func| match_def_path(cx, def_id, &[\"core\", \"sync\", \"atomic\", func]));\n         if let ExprKind::Path(ref ordering_qpath) = &args[0].kind;\n-        if let Some(ordering_def_id) = cx.tables().qpath_res(ordering_qpath, args[0].hir_id).opt_def_id();\n+        if let Some(ordering_def_id) = cx.qpath_res(ordering_qpath, args[0].hir_id).opt_def_id();\n         if match_ordering_def_path(cx, ordering_def_id, &[\"Relaxed\"]);\n         then {\n             span_lint_and_help("}, {"sha": "8cc69c806aa995c9eda7f3fa9e849b0c9d7e5205", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=590e07bbc2d2cba6377476c6b8442400327ff579", "patch": "@@ -192,7 +192,7 @@ fn lint_same_then_else(cx: &LateContext<'_, '_>, blocks: &[&Block<'_>]) {\n /// Implementation of `IFS_SAME_COND`.\n fn lint_same_cond(cx: &LateContext<'_, '_>, conds: &[&Expr<'_>]) {\n     let hash: &dyn Fn(&&Expr<'_>) -> u64 = &|expr| -> u64 {\n-        let mut h = SpanlessHash::new(cx, cx.tables());\n+        let mut h = SpanlessHash::new(cx);\n         h.hash_expr(expr);\n         h.finish()\n     };\n@@ -215,7 +215,7 @@ fn lint_same_cond(cx: &LateContext<'_, '_>, conds: &[&Expr<'_>]) {\n /// Implementation of `SAME_FUNCTIONS_IN_IF_CONDITION`.\n fn lint_same_fns_in_if_cond(cx: &LateContext<'_, '_>, conds: &[&Expr<'_>]) {\n     let hash: &dyn Fn(&&Expr<'_>) -> u64 = &|expr| -> u64 {\n-        let mut h = SpanlessHash::new(cx, cx.tables());\n+        let mut h = SpanlessHash::new(cx);\n         h.hash_expr(expr);\n         h.finish()\n     };\n@@ -251,7 +251,7 @@ fn lint_match_arms<'tcx>(cx: &LateContext<'_, 'tcx>, expr: &Expr<'_>) {\n \n     if let ExprKind::Match(_, ref arms, MatchSource::Normal) = expr.kind {\n         let hash = |&(_, arm): &(usize, &Arm<'_>)| -> u64 {\n-            let mut h = SpanlessHash::new(cx, cx.tables());\n+            let mut h = SpanlessHash::new(cx);\n             h.hash_expr(&arm.body);\n             h.finish()\n         };"}, {"sha": "a918c72fb275ea6417d3284b05455182845d77b8", "filename": "clippy_lints/src/default_trait_access.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_trait_access.rs?ref=590e07bbc2d2cba6377476c6b8442400327ff579", "patch": "@@ -36,7 +36,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DefaultTraitAccess {\n             if let ExprKind::Call(ref path, ..) = expr.kind;\n             if !any_parent_is_automatically_derived(cx.tcx, expr.hir_id);\n             if let ExprKind::Path(ref qpath) = path.kind;\n-            if let Some(def_id) = cx.tables().qpath_res(qpath, path.hir_id).opt_def_id();\n+            if let Some(def_id) = cx.qpath_res(qpath, path.hir_id).opt_def_id();\n             if match_def_path(cx, def_id, &paths::DEFAULT_TRAIT_METHOD);\n             then {\n                 match qpath {"}, {"sha": "31fe7382e46de1e01dfe5341075bcfad281bd4e9", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=590e07bbc2d2cba6377476c6b8442400327ff579", "patch": "@@ -75,7 +75,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EvalOrderDependence {\n                 if let ExprKind::Path(ref qpath) = lhs.kind {\n                     if let QPath::Resolved(_, ref path) = *qpath {\n                         if path.segments.len() == 1 {\n-                            if let def::Res::Local(var) = cx.tables().qpath_res(qpath, lhs.hir_id) {\n+                            if let def::Res::Local(var) = cx.qpath_res(qpath, lhs.hir_id) {\n                                 let mut visitor = ReadVisitor {\n                                     cx,\n                                     var,\n@@ -309,7 +309,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ReadVisitor<'a, 'tcx> {\n                 if_chain! {\n                     if let QPath::Resolved(None, ref path) = *qpath;\n                     if path.segments.len() == 1;\n-                    if let def::Res::Local(local_id) = self.cx.tables().qpath_res(qpath, expr.hir_id);\n+                    if let def::Res::Local(local_id) = self.cx.qpath_res(qpath, expr.hir_id);\n                     if local_id == self.var;\n                     // Check that this is a read, not a write.\n                     if !is_in_assignment_position(self.cx, expr);"}, {"sha": "dc8795e3d11eb6c06f75789d39b08c6663e4b7c1", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=590e07bbc2d2cba6377476c6b8442400327ff579", "patch": "@@ -88,7 +88,7 @@ fn on_argumentv1_new<'a, 'tcx>(\n         // matches `core::fmt::Display::fmt`\n         if args.len() == 2;\n         if let ExprKind::Path(ref qpath) = args[1].kind;\n-        if let Some(did) = cx.tables().qpath_res(qpath, args[1].hir_id).opt_def_id();\n+        if let Some(did) = cx.qpath_res(qpath, args[1].hir_id).opt_def_id();\n         if match_def_path(cx, did, &paths::DISPLAY_FMT_METHOD);\n         // check `(arg0,)` in match block\n         if let PatKind::Tuple(ref pats, None) = arms[0].pat.kind;"}, {"sha": "b43babc1de87901b7d12e010782a4ae7fd6ae154", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=590e07bbc2d2cba6377476c6b8442400327ff579", "patch": "@@ -108,7 +108,7 @@ fn expr_match(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n         ExprKind::Call(expr, ..) => {\n             if_chain! {\n                 if let ExprKind::Path(qpath) = &expr.kind;\n-                if let Some(path_def_id) = cx.tables().qpath_res(qpath, expr.hir_id).opt_def_id();\n+                if let Some(path_def_id) = cx.qpath_res(qpath, expr.hir_id).opt_def_id();\n                 if match_def_path(cx, path_def_id, &BEGIN_PANIC) ||\n                     match_def_path(cx, path_def_id, &BEGIN_PANIC_FMT);\n                 then { }"}, {"sha": "7d338cfa86f9fe170f1c4388d8859507b29a7a5f", "filename": "clippy_lints/src/let_and_return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Flet_and_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Flet_and_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_and_return.rs?ref=590e07bbc2d2cba6377476c6b8442400327ff579", "patch": "@@ -107,7 +107,7 @@ impl BorrowVisitor<'_, '_> {\n                     ..\n                 },\n                 ..,\n-            ) => self.cx.tables().qpath_res(qpath, expr.hir_id).opt_def_id(),\n+            ) => self.cx.qpath_res(qpath, expr.hir_id).opt_def_id(),\n             _ => None,\n         }\n     }"}, {"sha": "c0d8c1127b9d3fb14de7de17dae90b5741862036", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=590e07bbc2d2cba6377476c6b8442400327ff579", "patch": "@@ -343,7 +343,7 @@ impl<'v, 't> RefVisitor<'v, 't> {\n                 })\n             {\n                 let hir_id = ty.hir_id;\n-                match self.cx.tables().qpath_res(qpath, hir_id) {\n+                match self.cx.qpath_res(qpath, hir_id) {\n                     Res::Def(DefKind::TyAlias | DefKind::Struct, def_id) => {\n                         let generics = self.cx.tcx.generics_of(def_id);\n                         for _ in generics.params.as_slice() {"}, {"sha": "90d4a34a19a29b3c73aa69416788e4174b77a4e5", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=590e07bbc2d2cba6377476c6b8442400327ff579", "patch": "@@ -160,10 +160,10 @@ fn reduce_unit_expression<'a>(cx: &LateContext<'_, '_>, expr: &'a hir::Expr<'_>)\n     }\n }\n \n-fn unit_closure<'a, 'tcx>(\n-    cx: &LateContext<'a, 'tcx>,\n-    expr: &'a hir::Expr<'a>,\n-) -> Option<(&'tcx hir::Param<'tcx>, &'a hir::Expr<'a>)> {\n+fn unit_closure<'tcx>(\n+    cx: &LateContext<'_, 'tcx>,\n+    expr: &hir::Expr<'_>,\n+) -> Option<(&'tcx hir::Param<'tcx>, &'tcx hir::Expr<'tcx>)> {\n     if let hir::ExprKind::Closure(_, ref decl, inner_expr_id, _, _) = expr.kind {\n         let body = cx.tcx.hir().body(inner_expr_id);\n         let body_expr = &body.value;"}, {"sha": "8a665a6e1fad3f4f2321714eb59edbacb678a71a", "filename": "clippy_lints/src/mem_discriminant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_discriminant.rs?ref=590e07bbc2d2cba6377476c6b8442400327ff579", "patch": "@@ -35,7 +35,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemDiscriminant {\n             if let ExprKind::Call(ref func, ref func_args) = expr.kind;\n             // is `mem::discriminant`\n             if let ExprKind::Path(ref func_qpath) = func.kind;\n-            if let Some(def_id) = cx.tables().qpath_res(func_qpath, func.hir_id).opt_def_id();\n+            if let Some(def_id) = cx.qpath_res(func_qpath, func.hir_id).opt_def_id();\n             if match_def_path(cx, def_id, &paths::MEM_DISCRIMINANT);\n             // type is non-enum\n             let ty_param = cx.tables().node_substs(func.hir_id).type_at(0);"}, {"sha": "703f91f8ac028401a62c8b59e861c56e18795ff7", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=590e07bbc2d2cba6377476c6b8442400327ff579", "patch": "@@ -162,7 +162,7 @@ fn check_replace_with_uninit(cx: &LateContext<'_, '_>, src: &Expr<'_>, dest: &Ex\n         if let ExprKind::Call(ref repl_func, ref repl_args) = src.kind;\n         if repl_args.is_empty();\n         if let ExprKind::Path(ref repl_func_qpath) = repl_func.kind;\n-        if let Some(repl_def_id) = cx.tables().qpath_res(repl_func_qpath, repl_func.hir_id).opt_def_id();\n+        if let Some(repl_def_id) = cx.qpath_res(repl_func_qpath, repl_func.hir_id).opt_def_id();\n         then {\n             if cx.tcx.is_diagnostic_item(sym::mem_uninitialized, repl_def_id) {\n                 let mut applicability = Applicability::MachineApplicable;\n@@ -198,7 +198,7 @@ fn check_replace_with_default(cx: &LateContext<'_, '_>, src: &Expr<'_>, dest: &E\n         if_chain! {\n             if !in_external_macro(cx.tcx.sess, expr_span);\n             if let ExprKind::Path(ref repl_func_qpath) = repl_func.kind;\n-            if let Some(repl_def_id) = cx.tables().qpath_res(repl_func_qpath, repl_func.hir_id).opt_def_id();\n+            if let Some(repl_def_id) = cx.qpath_res(repl_func_qpath, repl_func.hir_id).opt_def_id();\n             if match_def_path(cx, repl_def_id, &paths::DEFAULT_TRAIT_METHOD);\n             then {\n                 span_lint_and_then(\n@@ -230,7 +230,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemReplace {\n             // Check that `expr` is a call to `mem::replace()`\n             if let ExprKind::Call(ref func, ref func_args) = expr.kind;\n             if let ExprKind::Path(ref func_qpath) = func.kind;\n-            if let Some(def_id) = cx.tables().qpath_res(func_qpath, func.hir_id).opt_def_id();\n+            if let Some(def_id) = cx.qpath_res(func_qpath, func.hir_id).opt_def_id();\n             if match_def_path(cx, def_id, &paths::MEM_REPLACE);\n             if let [dest, src] = &**func_args;\n             then {"}, {"sha": "7018a2f40397603794c5d4fc0bab3fe8e3a6c5c5", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=590e07bbc2d2cba6377476c6b8442400327ff579", "patch": "@@ -1824,7 +1824,7 @@ fn lint_expect_fun_call(\n             hir::ExprKind::Lit(_) => true,\n             hir::ExprKind::Call(fun, _) => {\n                 if let hir::ExprKind::Path(ref p) = fun.kind {\n-                    match cx.tables().qpath_res(p, fun.hir_id) {\n+                    match cx.qpath_res(p, fun.hir_id) {\n                         hir::def::Res::Def(hir::def::DefKind::Fn | hir::def::DefKind::AssocFn, def_id) => matches!(\n                             cx.tcx.fn_sig(def_id).output().skip_binder().kind,\n                             ty::Ref(ty::ReStatic, ..)\n@@ -1844,7 +1844,7 @@ fn lint_expect_fun_call(\n                         ty::Ref(ty::ReStatic, ..)\n                     )\n                 }),\n-            hir::ExprKind::Path(ref p) => match cx.tables().qpath_res(p, arg.hir_id) {\n+            hir::ExprKind::Path(ref p) => match cx.qpath_res(p, arg.hir_id) {\n                 hir::def::Res::Def(hir::def::DefKind::Const | hir::def::DefKind::Static, _) => true,\n                 _ => false,\n             },\n@@ -3317,7 +3317,7 @@ fn lint_option_as_ref_deref<'a, 'tcx>(\n                     if_chain! {\n                         if args.len() == 1;\n                         if let hir::ExprKind::Path(qpath) = &args[0].kind;\n-                        if let hir::def::Res::Local(local_id) = cx.tables().qpath_res(qpath, args[0].hir_id);\n+                        if let hir::def::Res::Local(local_id) = cx.qpath_res(qpath, args[0].hir_id);\n                         if closure_body.params[0].pat.hir_id == local_id;\n                         let adj = cx.tables().expr_adjustments(&args[0]).iter().map(|x| &x.kind).collect::<Box<[_]>>();\n                         if let [ty::adjustment::Adjust::Deref(None), ty::adjustment::Adjust::Borrow(_)] = *adj;\n@@ -3334,7 +3334,7 @@ fn lint_option_as_ref_deref<'a, 'tcx>(\n                         if let hir::ExprKind::Unary(hir::UnOp::UnDeref, ref inner1) = inner.kind;\n                         if let hir::ExprKind::Unary(hir::UnOp::UnDeref, ref inner2) = inner1.kind;\n                         if let hir::ExprKind::Path(ref qpath) = inner2.kind;\n-                        if let hir::def::Res::Local(local_id) = cx.tables().qpath_res(qpath, inner2.hir_id);\n+                        if let hir::def::Res::Local(local_id) = cx.qpath_res(qpath, inner2.hir_id);\n                         then {\n                             closure_body.params[0].pat.hir_id == local_id\n                         } else {"}, {"sha": "8a3df85c91bff28bd3f5d73b645296b1ca8bacc6", "filename": "clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=590e07bbc2d2cba6377476c6b8442400327ff579", "patch": "@@ -65,7 +65,7 @@ fn check_expression<'a, 'tcx>(\n                     if match_qpath(path, &paths::OPTION_SOME) {\n                         if_chain! {\n                             if let hir::ExprKind::Path(path) = &args[0].kind;\n-                            if let Res::Local(ref local) = cx.tables().qpath_res(path, args[0].hir_id);\n+                            if let Res::Local(ref local) = cx.qpath_res(path, args[0].hir_id);\n                             then {\n                                 if arg_id == *local {\n                                     return (false, false)"}, {"sha": "fcd77088b88ebf0f6818f65e2dd44765e3d9fae0", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=590e07bbc2d2cba6377476c6b8442400327ff579", "patch": "@@ -436,7 +436,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MiscLints {\n                     binding != \"_result\" && // FIXME: #944\n                     is_used(cx, expr) &&\n                     // don't lint if the declaration is in a macro\n-                    non_macro_local(cx, cx.tables().qpath_res(qpath, expr.hir_id))\n+                    non_macro_local(cx, cx.qpath_res(qpath, expr.hir_id))\n                 {\n                     Some(binding)\n                 } else {"}, {"sha": "a77e104bb8f0f8c41f43d6c3ef2ff8e08f414b57", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=590e07bbc2d2cba6377476c6b8442400327ff579", "patch": "@@ -158,7 +158,7 @@ impl QuestionMark {\n             ExprKind::Ret(Some(ref expr)) => Self::expression_returns_none(cx, expr),\n             ExprKind::Path(ref qp) => {\n                 if let Res::Def(DefKind::Ctor(def::CtorOf::Variant, def::CtorKind::Const), def_id) =\n-                    cx.tables().qpath_res(qp, expression.hir_id)\n+                    cx.qpath_res(qp, expression.hir_id)\n                 {\n                     return match_def_path(cx, def_id, &paths::OPTION_NONE);\n                 }"}, {"sha": "0b56ef02a844b27eec65a514bbb22a0dbfb4297e", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=590e07bbc2d2cba6377476c6b8442400327ff579", "patch": "@@ -111,7 +111,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Regex {\n             if let ExprKind::Call(ref fun, ref args) = expr.kind;\n             if let ExprKind::Path(ref qpath) = fun.kind;\n             if args.len() == 1;\n-            if let Some(def_id) = cx.tables().qpath_res(qpath, fun.hir_id).opt_def_id();\n+            if let Some(def_id) = cx.qpath_res(qpath, fun.hir_id).opt_def_id();\n             then {\n                 if match_def_path(cx, def_id, &paths::REGEX_NEW) ||\n                    match_def_path(cx, def_id, &paths::REGEX_BUILDER_NEW) {"}, {"sha": "bc282e4bd987c9cc72b568eee99b2adb60fee603", "filename": "clippy_lints/src/temporary_assignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftemporary_assignment.rs?ref=590e07bbc2d2cba6377476c6b8442400327ff579", "patch": "@@ -26,7 +26,7 @@ fn is_temporary(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n     match &expr.kind {\n         ExprKind::Struct(..) | ExprKind::Tup(..) => true,\n         ExprKind::Path(qpath) => {\n-            if let Res::Def(DefKind::Const, ..) = cx.tables().qpath_res(qpath, expr.hir_id) {\n+            if let Res::Def(DefKind::Const, ..) = cx.qpath_res(qpath, expr.hir_id) {\n                 true\n             } else {\n                 false"}, {"sha": "4f943eeaeebc7d39878a44a5d1585129ed7550bf", "filename": "clippy_lints/src/to_digit_is_some.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Fto_digit_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Fto_digit_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fto_digit_is_some.rs?ref=590e07bbc2d2cba6377476c6b8442400327ff579", "patch": "@@ -56,7 +56,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ToDigitIsSome {\n                         if_chain! {\n                             if let [char_arg, radix_arg] = &**to_digit_args;\n                             if let hir::ExprKind::Path(to_digits_path) = &to_digits_call.kind;\n-                            if let to_digits_call_res = cx.tables().qpath_res(to_digits_path, to_digits_call.hir_id);\n+                            if let to_digits_call_res = cx.qpath_res(to_digits_path, to_digits_call.hir_id);\n                             if let Some(to_digits_def_id) = to_digits_call_res.opt_def_id();\n                             if match_def_path(cx, to_digits_def_id, &[\"core\", \"char\", \"methods\", \"<impl char>\", \"to_digit\"]);\n                             then {"}, {"sha": "c3e4eb05eb4edd9a93fc4a33b1e57a99b09e25a0", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=590e07bbc2d2cba6377476c6b8442400327ff579", "patch": "@@ -37,7 +37,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TraitBounds {\n             return;\n         }\n         let hash = |ty| -> u64 {\n-            let mut hasher = SpanlessHash::new(cx, cx.tables());\n+            let mut hasher = SpanlessHash::new(cx);\n             hasher.hash_ty(ty);\n             hasher.finish()\n         };"}, {"sha": "6ef4b8dcfc1944ecfb7a33d337c8320686be8506", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=590e07bbc2d2cba6377476c6b8442400327ff579", "patch": "@@ -299,7 +299,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n         if_chain! {\n             if let ExprKind::Call(ref path_expr, ref args) = e.kind;\n             if let ExprKind::Path(ref qpath) = path_expr.kind;\n-            if let Some(def_id) = cx.tables().qpath_res(qpath, path_expr.hir_id).opt_def_id();\n+            if let Some(def_id) = cx.qpath_res(qpath, path_expr.hir_id).opt_def_id();\n             if match_def_path(cx, def_id, &paths::TRANSMUTE);\n             then {\n                 let from_ty = cx.tables().expr_ty(&args[0]);"}, {"sha": "74db29e4f1d5082462284e2b56a611712a267b8a", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=590e07bbc2d2cba6377476c6b8442400327ff579", "patch": "@@ -2490,7 +2490,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ImplicitHasherTypeVisitor<'a, 'tcx> {\n /// Looks for default-hasher-dependent constructors like `HashMap::new`.\n struct ImplicitHasherConstructorVisitor<'a, 'b, 'tcx> {\n     cx: &'a LateContext<'a, 'tcx>,\n-    body: &'a TypeckTables<'tcx>,\n+    maybe_typeck_tables: Option<&'tcx TypeckTables<'tcx>>,\n     target: &'b ImplicitHasherType<'tcx>,\n     suggestions: BTreeMap<Span, String>,\n }\n@@ -2499,7 +2499,7 @@ impl<'a, 'b, 'tcx> ImplicitHasherConstructorVisitor<'a, 'b, 'tcx> {\n     fn new(cx: &'a LateContext<'a, 'tcx>, target: &'b ImplicitHasherType<'tcx>) -> Self {\n         Self {\n             cx,\n-            body: cx.tables(),\n+            maybe_typeck_tables: cx.maybe_typeck_tables(),\n             target,\n             suggestions: BTreeMap::new(),\n         }\n@@ -2510,10 +2510,9 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for ImplicitHasherConstructorVisitor<'a, 'b, 't\n     type Map = Map<'tcx>;\n \n     fn visit_body(&mut self, body: &'tcx Body<'_>) {\n-        let prev_body = self.body;\n-        self.body = self.cx.tcx.body_tables(body.id());\n+        let old_maybe_typeck_tables = self.maybe_typeck_tables.replace(self.cx.tcx.body_tables(body.id()));\n         walk_body(self, body);\n-        self.body = prev_body;\n+        self.maybe_typeck_tables = old_maybe_typeck_tables;\n     }\n \n     fn visit_expr(&mut self, e: &'tcx Expr<'_>) {\n@@ -2522,7 +2521,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for ImplicitHasherConstructorVisitor<'a, 'b, 't\n             if let ExprKind::Path(QPath::TypeRelative(ref ty, ref method)) = fun.kind;\n             if let TyKind::Path(QPath::Resolved(None, ty_path)) = ty.kind;\n             then {\n-                if !TyS::same_type(self.target.ty(), self.body.expr_ty(e)) {\n+                if !TyS::same_type(self.target.ty(), self.maybe_typeck_tables.unwrap().expr_ty(e)) {\n                     return;\n                 }\n "}, {"sha": "0efbf68dcd842c0fd3650667655493f6f80e0da5", "filename": "clippy_lints/src/unnamed_address.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Funnamed_address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Funnamed_address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnamed_address.rs?ref=590e07bbc2d2cba6377476c6b8442400327ff579", "patch": "@@ -98,7 +98,7 @@ impl LateLintPass<'_, '_> for UnnamedAddress {\n         if_chain! {\n             if let ExprKind::Call(ref func, [ref _left, ref _right]) = expr.kind;\n             if let ExprKind::Path(ref func_qpath) = func.kind;\n-            if let Some(def_id) = cx.tables().qpath_res(func_qpath, func.hir_id).opt_def_id();\n+            if let Some(def_id) = cx.qpath_res(func_qpath, func.hir_id).opt_def_id();\n             if match_def_path(cx, def_id, &paths::PTR_EQ) ||\n                 match_def_path(cx, def_id, &paths::RC_PTR_EQ) ||\n                 match_def_path(cx, def_id, &paths::ARC_PTR_EQ);"}, {"sha": "ad5ecc0c026792f8f6e67d7b49455c0c3d05d215", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=590e07bbc2d2cba6377476c6b8442400327ff579", "patch": "@@ -121,7 +121,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessConversion {\n                 if_chain! {\n                     if args.len() == 1;\n                     if let ExprKind::Path(ref qpath) = path.kind;\n-                    if let Some(def_id) = cx.tables().qpath_res(qpath, path.hir_id).opt_def_id();\n+                    if let Some(def_id) = cx.qpath_res(qpath, path.hir_id).opt_def_id();\n                     let a = cx.tables().expr_ty(e);\n                     let b = cx.tables().expr_ty(&args[0]);\n "}, {"sha": "9502d85e6ee9821ed94fc7ae3f6237d48e357e38", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=590e07bbc2d2cba6377476c6b8442400327ff579", "patch": "@@ -262,7 +262,7 @@ pub fn vec_macro<'e>(cx: &LateContext<'_, '_>, expr: &'e hir::Expr<'_>) -> Optio\n         if let hir::ExprKind::Call(ref fun, ref args) = expr.kind;\n         if let hir::ExprKind::Path(ref qpath) = fun.kind;\n         if is_expn_of(fun.span, \"vec\").is_some();\n-        if let Some(fun_def_id) = cx.tables().qpath_res(qpath, fun.hir_id).opt_def_id();\n+        if let Some(fun_def_id) = cx.qpath_res(qpath, fun.hir_id).opt_def_id();\n         then {\n             return if match_def_path(cx, fun_def_id, &paths::VEC_FROM_ELEM) && args.len() == 2 {\n                 // `vec![elem; size]` case"}, {"sha": "bf1017d76ec636b761d9458cd5b9df420245ec20", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=590e07bbc2d2cba6377476c6b8442400327ff579", "patch": "@@ -22,7 +22,7 @@ use std::hash::Hash;\n pub struct SpanlessEq<'a, 'tcx> {\n     /// Context used to evaluate constant expressions.\n     cx: &'a LateContext<'a, 'tcx>,\n-    tables: &'a TypeckTables<'tcx>,\n+    maybe_typeck_tables: Option<&'tcx TypeckTables<'tcx>>,\n     /// If is true, never consider as equal expressions containing function\n     /// calls.\n     ignore_fn: bool,\n@@ -32,16 +32,15 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n     pub fn new(cx: &'a LateContext<'a, 'tcx>) -> Self {\n         Self {\n             cx,\n-            tables: cx.tables(),\n+            maybe_typeck_tables: cx.maybe_typeck_tables(),\n             ignore_fn: false,\n         }\n     }\n \n     pub fn ignore_fn(self) -> Self {\n         Self {\n-            cx: self.cx,\n-            tables: self.cx.tables(),\n             ignore_fn: true,\n+            ..self\n         }\n     }\n \n@@ -72,12 +71,14 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n             return false;\n         }\n \n-        if let (Some(l), Some(r)) = (\n-            constant_simple(self.cx, self.tables, left),\n-            constant_simple(self.cx, self.tables, right),\n-        ) {\n-            if l == r {\n-                return true;\n+        if let Some(tables) = self.maybe_typeck_tables {\n+            if let (Some(l), Some(r)) = (\n+                constant_simple(self.cx, tables, left),\n+                constant_simple(self.cx, tables, right),\n+            ) {\n+                if l == r {\n+                    return true;\n+                }\n             }\n         }\n \n@@ -271,18 +272,18 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n         match (left, right) {\n             (&TyKind::Slice(ref l_vec), &TyKind::Slice(ref r_vec)) => self.eq_ty(l_vec, r_vec),\n             (&TyKind::Array(ref lt, ref ll_id), &TyKind::Array(ref rt, ref rl_id)) => {\n-                let full_table = self.tables;\n+                let old_maybe_typeck_tables = self.maybe_typeck_tables;\n \n                 let mut celcx = constant_context(self.cx, self.cx.tcx.body_tables(ll_id.body));\n-                self.tables = self.cx.tcx.body_tables(ll_id.body);\n+                self.maybe_typeck_tables = Some(self.cx.tcx.body_tables(ll_id.body));\n                 let ll = celcx.expr(&self.cx.tcx.hir().body(ll_id.body).value);\n \n                 let mut celcx = constant_context(self.cx, self.cx.tcx.body_tables(rl_id.body));\n-                self.tables = self.cx.tcx.body_tables(rl_id.body);\n+                self.maybe_typeck_tables = Some(self.cx.tcx.body_tables(rl_id.body));\n                 let rl = celcx.expr(&self.cx.tcx.hir().body(rl_id.body).value);\n \n                 let eq_ty = self.eq_ty(lt, rt);\n-                self.tables = full_table;\n+                self.maybe_typeck_tables = old_maybe_typeck_tables;\n                 eq_ty && ll == rl\n             },\n             (&TyKind::Ptr(ref l_mut), &TyKind::Ptr(ref r_mut)) => {\n@@ -347,15 +348,15 @@ pub fn over<X>(left: &[X], right: &[X], mut eq_fn: impl FnMut(&X, &X) -> bool) -\n pub struct SpanlessHash<'a, 'tcx> {\n     /// Context used to evaluate constant expressions.\n     cx: &'a LateContext<'a, 'tcx>,\n-    tables: &'a TypeckTables<'tcx>,\n+    maybe_typeck_tables: Option<&'tcx TypeckTables<'tcx>>,\n     s: StableHasher,\n }\n \n impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n-    pub fn new(cx: &'a LateContext<'a, 'tcx>, tables: &'a TypeckTables<'tcx>) -> Self {\n+    pub fn new(cx: &'a LateContext<'a, 'tcx>) -> Self {\n         Self {\n             cx,\n-            tables,\n+            maybe_typeck_tables: cx.maybe_typeck_tables(),\n             s: StableHasher::new(),\n         }\n     }\n@@ -384,7 +385,9 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n \n     #[allow(clippy::many_single_char_names, clippy::too_many_lines)]\n     pub fn hash_expr(&mut self, e: &Expr<'_>) {\n-        let simple_const = constant_simple(self.cx, self.tables, e);\n+        let simple_const = self\n+            .maybe_typeck_tables\n+            .and_then(|tables| constant_simple(self.cx, tables, e));\n \n         // const hashing may result in the same hash as some unrelated node, so add a sort of\n         // discriminant depending on which path we're choosing next\n@@ -599,7 +602,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 self.hash_name(path.ident.name);\n             },\n         }\n-        // self.cx.tables.qpath_res(p, id).hash(&mut self.s);\n+        // self.maybe_typeck_tables.unwrap().qpath_res(p, id).hash(&mut self.s);\n     }\n \n     pub fn hash_path(&mut self, p: &Path<'_>) {\n@@ -728,9 +731,8 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n \n     pub fn hash_body(&mut self, body_id: BodyId) {\n         // swap out TypeckTables when hashing a body\n-        let old_tables = self.tables;\n-        self.tables = self.cx.tcx.body_tables(body_id);\n+        let old_maybe_typeck_tables = self.maybe_typeck_tables.replace(self.cx.tcx.body_tables(body_id));\n         self.hash_expr(&self.cx.tcx.hir().body(body_id).value);\n-        self.tables = old_tables;\n+        self.maybe_typeck_tables = old_maybe_typeck_tables;\n     }\n }"}, {"sha": "ca947e9241f0f6c10a6bfa07d0d6fd0652ef80d2", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=590e07bbc2d2cba6377476c6b8442400327ff579", "patch": "@@ -347,7 +347,7 @@ fn is_lint_ref_type<'tcx>(cx: &LateContext<'_, 'tcx>, ty: &Ty<'_>) -> bool {\n     ) = ty.kind\n     {\n         if let TyKind::Path(ref path) = inner.kind {\n-            if let Res::Def(DefKind::Struct, def_id) = cx.tables().qpath_res(path, inner.hir_id) {\n+            if let Res::Def(DefKind::Struct, def_id) = cx.qpath_res(path, inner.hir_id) {\n                 return match_def_path(cx, def_id, &paths::LINT);\n             }\n         }"}, {"sha": "8be9ba2c3c2449ba46664fae714af7066f4db351", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590e07bbc2d2cba6377476c6b8442400327ff579/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=590e07bbc2d2cba6377476c6b8442400327ff579", "patch": "@@ -898,7 +898,7 @@ pub fn is_copy<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool {\n pub fn is_ctor_or_promotable_const_function(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n     if let ExprKind::Call(ref fun, _) = expr.kind {\n         if let ExprKind::Path(ref qp) = fun.kind {\n-            let res = cx.tables().qpath_res(qp, fun.hir_id);\n+            let res = cx.qpath_res(qp, fun.hir_id);\n             return match res {\n                 def::Res::Def(DefKind::Variant | DefKind::Ctor(..), ..) => true,\n                 def::Res::Def(_, def_id) => cx.tcx.is_promotable_const_fn(def_id),\n@@ -914,7 +914,7 @@ pub fn is_ctor_or_promotable_const_function(cx: &LateContext<'_, '_>, expr: &Exp\n pub fn is_refutable(cx: &LateContext<'_, '_>, pat: &Pat<'_>) -> bool {\n     fn is_enum_variant(cx: &LateContext<'_, '_>, qpath: &QPath<'_>, id: HirId) -> bool {\n         matches!(\n-            cx.tables().qpath_res(qpath, id),\n+            cx.qpath_res(qpath, id),\n             def::Res::Def(DefKind::Variant, ..) | Res::Def(DefKind::Ctor(def::CtorOf::Variant, _), _)\n         )\n     }\n@@ -1190,7 +1190,7 @@ pub fn match_function_call<'a, 'tcx>(\n     if_chain! {\n         if let ExprKind::Call(ref fun, ref args) = expr.kind;\n         if let ExprKind::Path(ref qpath) = fun.kind;\n-        if let Some(fun_def_id) = cx.tables().qpath_res(qpath, fun.hir_id).opt_def_id();\n+        if let Some(fun_def_id) = cx.qpath_res(qpath, fun.hir_id).opt_def_id();\n         if match_def_path(cx, fun_def_id, path);\n         then {\n             return Some(&args)\n@@ -1317,7 +1317,7 @@ pub fn is_must_use_func_call(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool\n     let did = match expr.kind {\n         ExprKind::Call(ref path, _) => if_chain! {\n             if let ExprKind::Path(ref qpath) = path.kind;\n-            if let def::Res::Def(_, did) = cx.tables().qpath_res(qpath, path.hir_id);\n+            if let def::Res::Def(_, did) = cx.qpath_res(qpath, path.hir_id);\n             then {\n                 Some(did)\n             } else {"}]}