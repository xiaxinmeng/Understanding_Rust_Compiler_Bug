{"sha": "27cc7c7d9fb8a25cce9ab73ece034a9282406ce3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3Y2M3YzdkOWZiOGEyNWNjZTlhYjczZWNlMDM0YTkyODI0MDZjZTM=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-06-12T18:39:52Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-06-20T18:12:42Z"}, "message": "Clean up", "tree": {"sha": "54701f244a0dda0dd6db17c5795eff07cd03d6ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54701f244a0dda0dd6db17c5795eff07cd03d6ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27cc7c7d9fb8a25cce9ab73ece034a9282406ce3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27cc7c7d9fb8a25cce9ab73ece034a9282406ce3", "html_url": "https://github.com/rust-lang/rust/commit/27cc7c7d9fb8a25cce9ab73ece034a9282406ce3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27cc7c7d9fb8a25cce9ab73ece034a9282406ce3/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d2acdf8ec1959424be2728fa868e91b3eaeedc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d2acdf8ec1959424be2728fa868e91b3eaeedc6", "html_url": "https://github.com/rust-lang/rust/commit/1d2acdf8ec1959424be2728fa868e91b3eaeedc6"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "2be45daef989c18159c262627ae8d448d0cff657", "filename": "src/librustc_builtin_macros/asm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27cc7c7d9fb8a25cce9ab73ece034a9282406ce3/src%2Flibrustc_builtin_macros%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27cc7c7d9fb8a25cce9ab73ece034a9282406ce3/src%2Flibrustc_builtin_macros%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fasm.rs?ref=27cc7c7d9fb8a25cce9ab73ece034a9282406ce3", "patch": "@@ -174,7 +174,7 @@ fn parse_args<'a>(\n \n         // Validate the order of named, positional & explicit register operands and options. We do\n         // this at the end once we have the full span of the argument available.\n-        if args.options_spans.len() > 0 {\n+        if !args.options_spans.is_empty() {\n             ecx.struct_span_err(span, \"arguments are not allowed after options\")\n                 .span_labels(args.options_spans.clone(), \"previous options\")\n                 .span_label(span, \"argument\")\n@@ -241,9 +241,9 @@ fn parse_args<'a>(\n     if args.options.contains(ast::InlineAsmOptions::PURE)\n         && !args.options.intersects(ast::InlineAsmOptions::NOMEM | ast::InlineAsmOptions::READONLY)\n     {\n-        let span = args.options_spans.clone();\n+        let spans = args.options_spans.clone();\n         ecx.struct_span_err(\n-            span,\n+            spans,\n             \"the `pure` option must be combined with either `nomem` or `readonly`\",\n         )\n         .emit();"}]}