{"sha": "788fdddf3735f49c06b847578a090a863ed1c32d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4OGZkZGRmMzczNWY0OWMwNmI4NDc1NzhhMDkwYTg2M2VkMWMzMmQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-06-08T21:51:54Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-06-14T20:16:35Z"}, "message": "save-analysis: API-ify struct lits", "tree": {"sha": "2146859679a4573aa413faa6a484a4543503d962", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2146859679a4573aa413faa6a484a4543503d962"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/788fdddf3735f49c06b847578a090a863ed1c32d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/788fdddf3735f49c06b847578a090a863ed1c32d", "html_url": "https://github.com/rust-lang/rust/commit/788fdddf3735f49c06b847578a090a863ed1c32d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/788fdddf3735f49c06b847578a090a863ed1c32d/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04b32cecace8565d04c8f3f9e02cca0680f0f7ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/04b32cecace8565d04c8f3f9e02cca0680f0f7ed", "html_url": "https://github.com/rust-lang/rust/commit/04b32cecace8565d04c8f3f9e02cca0680f0f7ed"}], "stats": {"total": 98, "additions": 65, "deletions": 33}, "files": [{"sha": "3b34fbab3260702f96dcccae677ec2577b77b8a0", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 23, "deletions": 32, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/788fdddf3735f49c06b847578a090a863ed1c32d/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788fdddf3735f49c06b847578a090a863ed1c32d/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=788fdddf3735f49c06b847578a090a863ed1c32d", "patch": "@@ -708,7 +708,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n                            &val);\n \n         // super-traits\n-        for super_bound in &trait_refs {\n+        for super_bound in trait_refs.iter() {\n             let trait_ref = match *super_bound {\n                 ast::TraitTyParamBound(ref trait_ref, _) => {\n                     trait_ref\n@@ -882,44 +882,35 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n \n         self.write_sub_paths_truncated(path, false);\n \n-        let ty = &ty::expr_ty_adjusted(&self.analysis.ty_cx, ex).sty;\n-        let struct_def = match *ty {\n-            ty::TyStruct(def_id, _) => {\n-                let sub_span = self.span.span_for_last_ident(path.span);\n-                self.fmt.ref_str(recorder::TypeRef,\n-                                 path.span,\n-                                 sub_span,\n-                                 def_id,\n-                                 self.cur_scope);\n-                Some(def_id)\n-            }\n-            _ => None\n+        let struct_lit_data = self.save_ctxt.get_expr_data(ex);\n+        let struct_def = if let super::Data::TypeRefData(struct_lit_data) = struct_lit_data {\n+            self.fmt.ref_str(recorder::TypeRef,\n+                             ex.span,\n+                             Some(struct_lit_data.span),\n+                             struct_lit_data.ref_id,\n+                             struct_lit_data.scope);\n+            struct_lit_data.ref_id\n+        } else {\n+            self.sess.span_bug(ex.span, \"expected TypeRefData\");\n         };\n \n         for field in fields {\n-            match struct_def {\n-                Some(struct_def) => {\n-                    let fields = ty::lookup_struct_fields(&self.analysis.ty_cx, struct_def);\n-                    for f in &fields {\n-                        if generated_code(field.ident.span) {\n-                            continue;\n-                        }\n-                        if f.name == field.ident.node.name {\n-                            // We don't really need a sub-span here, but no harm done\n-                            let sub_span = self.span.span_for_last_ident(field.ident.span);\n-                            self.fmt.ref_str(recorder::VarRef,\n-                                             field.ident.span,\n-                                             sub_span,\n-                                             f.id,\n-                                             self.cur_scope);\n-                        }\n-                    }\n-                }\n-                None => {}\n+            if generated_code(field.ident.span) {\n+                continue;\n             }\n \n+            let field_data = self.save_ctxt.get_field_ref_data(field,\n+                                                               struct_def,\n+                                                               self.cur_scope);\n+            self.fmt.ref_str(recorder::VarRef,\n+                             field.ident.span,\n+                             Some(field_data.span),\n+                             field_data.ref_id,\n+                             field_data.scope);\n+\n             self.visit_expr(&field.expr)\n         }\n+\n         visit::walk_expr_opt(self, base)\n     }\n "}, {"sha": "5e6da42d688c249de032cf05ac8b431fdcf806d1", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/788fdddf3735f49c06b847578a090a863ed1c32d/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788fdddf3735f49c06b847578a090a863ed1c32d/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=788fdddf3735f49c06b847578a090a863ed1c32d", "patch": "@@ -349,13 +349,54 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                                             &format!(\"Expected struct type, found {:?}\", ty)),\n                 }\n             }\n+            ast::ExprStruct(ref path, _, _) => {\n+                let ty = &ty::expr_ty_adjusted(&self.analysis.ty_cx, expr).sty;\n+                match *ty {\n+                    ty::ty_struct(def_id, _) => {\n+                        let sub_span = self.span_utils.span_for_last_ident(path.span);\n+                        Data::TypeRefData(TypeRefData {\n+                            span: sub_span.unwrap(),\n+                            scope: self.analysis.ty_cx.map.get_parent(expr.id),\n+                            ref_id: def_id,\n+                        })\n+                    }\n+                    _ => {\n+                        self.sess.span_bug(expr.span,\n+                                           &format!(\"expected ty_struct, found {:?}\", ty));\n+                    }\n+                }\n+            }\n             _ => {\n                 // FIXME\n                 unimplemented!();\n             }\n         }\n     }\n \n+    pub fn get_field_ref_data(&self,\n+                              field_ref: &ast::Field,\n+                              struct_id: DefId,\n+                              parent: NodeId)\n+                              -> VariableRefData {\n+        let fields = ty::lookup_struct_fields(&self.analysis.ty_cx, struct_id);\n+        let field_name = get_ident(field_ref.ident.node).to_string();\n+        for f in &fields {\n+            if f.name == field_ref.ident.node.name {\n+                // We don't really need a sub-span here, but no harm done\n+                let sub_span = self.span_utils.span_for_last_ident(field_ref.ident.span);\n+                return VariableRefData {\n+                    name: field_name,\n+                    span: sub_span.unwrap(),\n+                    scope: parent,\n+                    ref_id: f.id,\n+                };\n+            }\n+        }\n+\n+        self.sess.span_bug(field_ref.span,\n+                           &format!(\"Couldn't find field {}\", field_name));\n+    }\n+\n     pub fn get_data_for_id(&self, _id: &NodeId) -> Data {\n         // FIXME\n         unimplemented!();\n@@ -400,7 +441,7 @@ impl<'v> Visitor<'v> for PathCollector {\n                 self.collected_paths.push((p.id,\n                                            path.clone(),\n                                            ast::MutMutable,\n-                                           recorder::StructRef));\n+                                           recorder::TypeRef));\n             }\n             ast::PatEnum(ref path, _) |\n             ast::PatQPath(_, ref path) => {"}]}