{"sha": "947b279bc6cc32d298b16f22b76bfd272b73b6bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0N2IyNzliYzZjYzMyZDI5OGIxNmYyMmI3NmJmZDI3MmI3M2I2YmI=", "commit": {"author": {"name": "max-heller", "email": "max.a.heller@gmail.com", "date": "2020-12-30T16:43:30Z"}, "committer": {"name": "max-heller", "email": "max.a.heller@gmail.com", "date": "2020-12-30T21:00:25Z"}, "message": "Take type defaults into account in suggestions to reorder generic parameters", "tree": {"sha": "d70df029e153a9d8bd5a53921a465ef92b46fbf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d70df029e153a9d8bd5a53921a465ef92b46fbf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/947b279bc6cc32d298b16f22b76bfd272b73b6bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/947b279bc6cc32d298b16f22b76bfd272b73b6bb", "html_url": "https://github.com/rust-lang/rust/commit/947b279bc6cc32d298b16f22b76bfd272b73b6bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/947b279bc6cc32d298b16f22b76bfd272b73b6bb/comments", "author": {"login": "max-heller", "id": 25730408, "node_id": "MDQ6VXNlcjI1NzMwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/25730408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/max-heller", "html_url": "https://github.com/max-heller", "followers_url": "https://api.github.com/users/max-heller/followers", "following_url": "https://api.github.com/users/max-heller/following{/other_user}", "gists_url": "https://api.github.com/users/max-heller/gists{/gist_id}", "starred_url": "https://api.github.com/users/max-heller/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/max-heller/subscriptions", "organizations_url": "https://api.github.com/users/max-heller/orgs", "repos_url": "https://api.github.com/users/max-heller/repos", "events_url": "https://api.github.com/users/max-heller/events{/privacy}", "received_events_url": "https://api.github.com/users/max-heller/received_events", "type": "User", "site_admin": false}, "committer": {"login": "max-heller", "id": 25730408, "node_id": "MDQ6VXNlcjI1NzMwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/25730408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/max-heller", "html_url": "https://github.com/max-heller", "followers_url": "https://api.github.com/users/max-heller/followers", "following_url": "https://api.github.com/users/max-heller/following{/other_user}", "gists_url": "https://api.github.com/users/max-heller/gists{/gist_id}", "starred_url": "https://api.github.com/users/max-heller/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/max-heller/subscriptions", "organizations_url": "https://api.github.com/users/max-heller/orgs", "repos_url": "https://api.github.com/users/max-heller/repos", "events_url": "https://api.github.com/users/max-heller/events{/privacy}", "received_events_url": "https://api.github.com/users/max-heller/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbcaed03bf5505f3fed351887769ed1531599502", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbcaed03bf5505f3fed351887769ed1531599502", "html_url": "https://github.com/rust-lang/rust/commit/bbcaed03bf5505f3fed351887769ed1531599502"}], "stats": {"total": 88, "additions": 53, "deletions": 35}, "files": [{"sha": "0fcffda309bb067ddce3b2260a6b8134c4945ba8", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 31, "deletions": 25, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/947b279bc6cc32d298b16f22b76bfd272b73b6bb/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947b279bc6cc32d298b16f22b76bfd272b73b6bb/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=947b279bc6cc32d298b16f22b76bfd272b73b6bb", "patch": "@@ -717,35 +717,46 @@ impl<'a> AstValidator<'a> {\n \n /// Checks that generic parameters are in the correct order,\n /// which is lifetimes, then types and then consts. (`<'a, T, const N: usize>`)\n-fn validate_generic_param_order<'a>(\n+fn validate_generic_param_order(\n     sess: &Session,\n     handler: &rustc_errors::Handler,\n-    generics: impl Iterator<Item = (ParamKindOrd, Option<&'a [GenericBound]>, Span, Option<String>)>,\n+    generics: &[GenericParam],\n     span: Span,\n ) {\n     let mut max_param: Option<ParamKindOrd> = None;\n     let mut out_of_order = FxHashMap::default();\n     let mut param_idents = vec![];\n \n-    for (kind, bounds, span, ident) in generics {\n+    for param in generics {\n+        let ident = Some(param.ident.to_string());\n+        let (kind, bounds, span) = (&param.kind, Some(&*param.bounds), param.ident.span);\n+        let (ord_kind, ident) = match &param.kind {\n+            GenericParamKind::Lifetime => (ParamKindOrd::Lifetime, ident),\n+            GenericParamKind::Type { default: _ } => (ParamKindOrd::Type, ident),\n+            GenericParamKind::Const { ref ty, kw_span: _ } => {\n+                let ty = pprust::ty_to_string(ty);\n+                let unordered = sess.features_untracked().const_generics;\n+                (ParamKindOrd::Const { unordered }, Some(format!(\"const {}: {}\", param.ident, ty)))\n+            }\n+        };\n         if let Some(ident) = ident {\n-            param_idents.push((kind, bounds, param_idents.len(), ident));\n+            param_idents.push((kind, ord_kind, bounds, param_idents.len(), ident));\n         }\n         let max_param = &mut max_param;\n         match max_param {\n-            Some(max_param) if *max_param > kind => {\n-                let entry = out_of_order.entry(kind).or_insert((*max_param, vec![]));\n+            Some(max_param) if *max_param > ord_kind => {\n+                let entry = out_of_order.entry(ord_kind).or_insert((*max_param, vec![]));\n                 entry.1.push(span);\n             }\n-            Some(_) | None => *max_param = Some(kind),\n+            Some(_) | None => *max_param = Some(ord_kind),\n         };\n     }\n \n     let mut ordered_params = \"<\".to_string();\n     if !out_of_order.is_empty() {\n-        param_idents.sort_by_key(|&(po, _, i, _)| (po, i));\n+        param_idents.sort_by_key(|&(_, po, _, i, _)| (po, i));\n         let mut first = true;\n-        for (_, bounds, _, ident) in param_idents {\n+        for (kind, _, bounds, _, ident) in param_idents {\n             if !first {\n                 ordered_params += \", \";\n             }\n@@ -756,6 +767,16 @@ fn validate_generic_param_order<'a>(\n                     ordered_params += &pprust::bounds_to_string(&bounds);\n                 }\n             }\n+            match kind {\n+                GenericParamKind::Type { default: Some(default) } => {\n+                    ordered_params += \" = \";\n+                    ordered_params += &pprust::ty_to_string(default);\n+                }\n+                GenericParamKind::Type { default: None } => (),\n+                GenericParamKind::Lifetime => (),\n+                // FIXME(const_generics:defaults)\n+                GenericParamKind::Const { ty: _, kw_span: _ } => (),\n+            }\n             first = false;\n         }\n     }\n@@ -1150,22 +1171,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         validate_generic_param_order(\n             self.session,\n             self.err_handler(),\n-            generics.params.iter().map(|param| {\n-                let ident = Some(param.ident.to_string());\n-                let (kind, ident) = match &param.kind {\n-                    GenericParamKind::Lifetime => (ParamKindOrd::Lifetime, ident),\n-                    GenericParamKind::Type { default: _ } => (ParamKindOrd::Type, ident),\n-                    GenericParamKind::Const { ref ty, kw_span: _ } => {\n-                        let ty = pprust::ty_to_string(ty);\n-                        let unordered = self.session.features_untracked().const_generics;\n-                        (\n-                            ParamKindOrd::Const { unordered },\n-                            Some(format!(\"const {}: {}\", param.ident, ty)),\n-                        )\n-                    }\n-                };\n-                (kind, Some(&*param.bounds), param.ident.span, ident)\n-            }),\n+            &generics.params,\n             generics.span,\n         );\n "}, {"sha": "8e8d26a00043d20abf550822b00e45f1f4f601cf", "filename": "src/test/ui/const-generics/defaults/complex-unord-param.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/947b279bc6cc32d298b16f22b76bfd272b73b6bb/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/947b279bc6cc32d298b16f22b76bfd272b73b6bb/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.min.stderr?ref=947b279bc6cc32d298b16f22b76bfd272b73b6bb", "patch": "@@ -2,7 +2,7 @@ error: type parameters must be declared prior to const parameters\n   --> $DIR/complex-unord-param.rs:8:41\n    |\n LL | struct NestedArrays<'a, const N: usize, A: 'a, const M: usize, T:'a =u32> {\n-   |                    ---------------------^----------------------^--------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, A: 'a, T: 'a, const N: usize, const M: usize>`\n+   |                    ---------------------^----------------------^--------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, A: 'a, T: 'a = u32, const N: usize, const M: usize>`\n \n error: aborting due to previous error\n "}, {"sha": "c4a666a829d8cb0132ff626f9aaaf54edbe02d66", "filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/947b279bc6cc32d298b16f22b76bfd272b73b6bb/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/947b279bc6cc32d298b16f22b76bfd272b73b6bb/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.full.stderr?ref=947b279bc6cc32d298b16f22b76bfd272b73b6bb", "patch": "@@ -2,13 +2,13 @@ error: lifetime parameters must be declared prior to const parameters\n   --> $DIR/intermixed-lifetime.rs:6:28\n    |\n LL | struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n-   |           -----------------^^---------- help: reorder the parameters: lifetimes, then consts and types: `<'a, const N: usize, T>`\n+   |           -----------------^^---------- help: reorder the parameters: lifetimes, then consts and types: `<'a, const N: usize, T = u32>`\n \n error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/intermixed-lifetime.rs:10:37\n    |\n LL | struct Bar<const N: usize, T = u32, 'a>(&'a (), T);\n-   |           --------------------------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, const N: usize, T>`\n+   |           --------------------------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, const N: usize, T = u32>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "69a490978d1df0c004dd5d4393d4f761457cb6dd", "filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/947b279bc6cc32d298b16f22b76bfd272b73b6bb/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/947b279bc6cc32d298b16f22b76bfd272b73b6bb/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.min.stderr?ref=947b279bc6cc32d298b16f22b76bfd272b73b6bb", "patch": "@@ -2,25 +2,25 @@ error: lifetime parameters must be declared prior to const parameters\n   --> $DIR/intermixed-lifetime.rs:6:28\n    |\n LL | struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n-   |           -----------------^^---------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T, const N: usize>`\n+   |           -----------------^^---------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T = u32, const N: usize>`\n \n error: type parameters must be declared prior to const parameters\n   --> $DIR/intermixed-lifetime.rs:6:32\n    |\n LL | struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n-   |           ---------------------^------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T, const N: usize>`\n+   |           ---------------------^------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T = u32, const N: usize>`\n \n error: lifetime parameters must be declared prior to const parameters\n   --> $DIR/intermixed-lifetime.rs:10:37\n    |\n LL | struct Bar<const N: usize, T = u32, 'a>(&'a (), T);\n-   |           --------------------------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T, const N: usize>`\n+   |           --------------------------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T = u32, const N: usize>`\n \n error: type parameters must be declared prior to const parameters\n   --> $DIR/intermixed-lifetime.rs:10:28\n    |\n LL | struct Bar<const N: usize, T = u32, 'a>(&'a (), T);\n-   |           -----------------^----------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T, const N: usize>`\n+   |           -----------------^----------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T = u32, const N: usize>`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "a4006203e4a2730e9e6d0a95d2c34b15efa60240", "filename": "src/test/ui/const-generics/defaults/needs-feature.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/947b279bc6cc32d298b16f22b76bfd272b73b6bb/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/947b279bc6cc32d298b16f22b76bfd272b73b6bb/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.min.stderr?ref=947b279bc6cc32d298b16f22b76bfd272b73b6bb", "patch": "@@ -2,7 +2,7 @@ error: type parameters must be declared prior to const parameters\n   --> $DIR/needs-feature.rs:9:26\n    |\n LL | struct A<const N: usize, T=u32>(T);\n-   |         -----------------^----- help: reorder the parameters: lifetimes, then types, then consts: `<T, const N: usize>`\n+   |         -----------------^----- help: reorder the parameters: lifetimes, then types, then consts: `<T = u32, const N: usize>`\n \n error: aborting due to previous error\n "}, {"sha": "a4006203e4a2730e9e6d0a95d2c34b15efa60240", "filename": "src/test/ui/const-generics/defaults/needs-feature.none.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/947b279bc6cc32d298b16f22b76bfd272b73b6bb/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/947b279bc6cc32d298b16f22b76bfd272b73b6bb/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.none.stderr?ref=947b279bc6cc32d298b16f22b76bfd272b73b6bb", "patch": "@@ -2,7 +2,7 @@ error: type parameters must be declared prior to const parameters\n   --> $DIR/needs-feature.rs:9:26\n    |\n LL | struct A<const N: usize, T=u32>(T);\n-   |         -----------------^----- help: reorder the parameters: lifetimes, then types, then consts: `<T, const N: usize>`\n+   |         -----------------^----- help: reorder the parameters: lifetimes, then types, then consts: `<T = u32, const N: usize>`\n \n error: aborting due to previous error\n "}, {"sha": "0746c64ac8cf4d710c4f0856f38fa83856aaad5a", "filename": "src/test/ui/const-generics/defaults/simple-defaults.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/947b279bc6cc32d298b16f22b76bfd272b73b6bb/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/947b279bc6cc32d298b16f22b76bfd272b73b6bb/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.min.stderr?ref=947b279bc6cc32d298b16f22b76bfd272b73b6bb", "patch": "@@ -2,7 +2,7 @@ error: type parameters must be declared prior to const parameters\n   --> $DIR/simple-defaults.rs:8:40\n    |\n LL | struct FixedOutput<'a, const N: usize, T=u32> {\n-   |                   ---------------------^----- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T, const N: usize>`\n+   |                   ---------------------^----- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T = u32, const N: usize>`\n \n error: aborting due to previous error\n "}, {"sha": "fe3e4fbc7e0b603527289236a6cabf3e8066ac88", "filename": "src/test/ui/issues/issue-80512-param-reordering-with-defaults.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/947b279bc6cc32d298b16f22b76bfd272b73b6bb/src%2Ftest%2Fui%2Fissues%2Fissue-80512-param-reordering-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947b279bc6cc32d298b16f22b76bfd272b73b6bb/src%2Ftest%2Fui%2Fissues%2Fissue-80512-param-reordering-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-80512-param-reordering-with-defaults.rs?ref=947b279bc6cc32d298b16f22b76bfd272b73b6bb", "patch": "@@ -0,0 +1,4 @@\n+#![crate_type = \"lib\"]\n+\n+struct S<T = (), 'a>(&'a T);\n+//~^ ERROR lifetime parameters must be declared prior to type parameters"}, {"sha": "a1e9a903f810276e0ce4babc7333b2d58318e027", "filename": "src/test/ui/issues/issue-80512-param-reordering-with-defaults.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/947b279bc6cc32d298b16f22b76bfd272b73b6bb/src%2Ftest%2Fui%2Fissues%2Fissue-80512-param-reordering-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/947b279bc6cc32d298b16f22b76bfd272b73b6bb/src%2Ftest%2Fui%2Fissues%2Fissue-80512-param-reordering-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-80512-param-reordering-with-defaults.stderr?ref=947b279bc6cc32d298b16f22b76bfd272b73b6bb", "patch": "@@ -0,0 +1,8 @@\n+error: lifetime parameters must be declared prior to type parameters\n+  --> $DIR/issue-80512-param-reordering-with-defaults.rs:3:18\n+   |\n+LL | struct S<T = (), 'a>(&'a T);\n+   |         ---------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T = ()>`\n+\n+error: aborting due to previous error\n+"}]}