{"sha": "c292b8078302a47dc47f6e772be3fb8f887dbf7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyOTJiODA3ODMwMmE0N2RjNDdmNmU3NzJiZTNmYjhmODg3ZGJmN2E=", "commit": {"author": {"name": "Lachezar Lechev", "email": "elpiel93@gmail.com", "date": "2018-08-20T13:33:43Z"}, "committer": {"name": "Lachezar Lechev", "email": "elpiel93@gmail.com", "date": "2018-08-20T13:33:43Z"}, "message": "#3016 Add feedback and implement test for fixed hardcoded suggestion", "tree": {"sha": "697ef908ed2901d2d7c258520973ca04e74027e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/697ef908ed2901d2d7c258520973ca04e74027e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c292b8078302a47dc47f6e772be3fb8f887dbf7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c292b8078302a47dc47f6e772be3fb8f887dbf7a", "html_url": "https://github.com/rust-lang/rust/commit/c292b8078302a47dc47f6e772be3fb8f887dbf7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c292b8078302a47dc47f6e772be3fb8f887dbf7a/comments", "author": {"login": "elpiel", "id": 8925621, "node_id": "MDQ6VXNlcjg5MjU2MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/8925621?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elpiel", "html_url": "https://github.com/elpiel", "followers_url": "https://api.github.com/users/elpiel/followers", "following_url": "https://api.github.com/users/elpiel/following{/other_user}", "gists_url": "https://api.github.com/users/elpiel/gists{/gist_id}", "starred_url": "https://api.github.com/users/elpiel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elpiel/subscriptions", "organizations_url": "https://api.github.com/users/elpiel/orgs", "repos_url": "https://api.github.com/users/elpiel/repos", "events_url": "https://api.github.com/users/elpiel/events{/privacy}", "received_events_url": "https://api.github.com/users/elpiel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "elpiel", "id": 8925621, "node_id": "MDQ6VXNlcjg5MjU2MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/8925621?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elpiel", "html_url": "https://github.com/elpiel", "followers_url": "https://api.github.com/users/elpiel/followers", "following_url": "https://api.github.com/users/elpiel/following{/other_user}", "gists_url": "https://api.github.com/users/elpiel/gists{/gist_id}", "starred_url": "https://api.github.com/users/elpiel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elpiel/subscriptions", "organizations_url": "https://api.github.com/users/elpiel/orgs", "repos_url": "https://api.github.com/users/elpiel/repos", "events_url": "https://api.github.com/users/elpiel/events{/privacy}", "received_events_url": "https://api.github.com/users/elpiel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3015987f279b414eea37d719c8e35ed2d8d7704a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3015987f279b414eea37d719c8e35ed2d8d7704a", "html_url": "https://github.com/rust-lang/rust/commit/3015987f279b414eea37d719c8e35ed2d8d7704a"}], "stats": {"total": 43, "additions": 26, "deletions": 17}, "files": [{"sha": "2231715c8d2afeb723a6fa337183c13a058e9c06", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c292b8078302a47dc47f6e772be3fb8f887dbf7a/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c292b8078302a47dc47f6e772be3fb8f887dbf7a/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=c292b8078302a47dc47f6e772be3fb8f887dbf7a", "patch": "@@ -3,6 +3,7 @@ use rustc::{declare_lint, lint_array};\n use syntax::ast::*;\n use syntax::tokenstream::{ThinTokenStream, TokenStream};\n use syntax::parse::{token, parser};\n+use std::borrow::Cow;\n use crate::utils::{span_lint, span_lint_and_sugg, snippet};\n \n /// **What it does:** This lint warns when you use `println!(\"\")` to\n@@ -212,15 +213,15 @@ impl EarlyLintPass for Pass {\n             let check_tts = check_tts(cx, &mac.node.tts, true);\n             if let Some(fmtstr) = check_tts.0 {\n                 if fmtstr == \"\" {\n-                    let suggestion = check_tts.1.map_or(\"v\", |expr| snippet(cx, expr.span, \"v\").into_owned().as_str());\n+                    let suggestion = check_tts.1.map_or(Cow::Borrowed(\"v\"), |expr| snippet(cx, expr.span, \"v\"));\n \n                     span_lint_and_sugg(\n                         cx,\n                         WRITELN_EMPTY_STRING,\n                         mac.span,\n                         format!(\"using writeln!({}, \\\"\\\")\", suggestion).as_str(),\n                         \"replace it with\",\n-                        format!(\"writeln!({})\", \"v\"),\n+                        format!(\"writeln!({})\", suggestion),\n                     );\n                 }\n             }\n@@ -239,20 +240,19 @@ fn check_tts<'a>(cx: &EarlyContext<'a>, tts: &ThinTokenStream, is_write: bool) -\n     );\n     let mut expr: Option<Expr> = None;\n     if is_write {\n-        // skip the initial write target\n-        expr = match parser.parse_expr().map_err(|mut err| err.cancel()).ok() {\n-            Some(p) => Some(p.and_then(|expr| expr)),\n-            None => return (None, None),\n+        expr = match parser.parse_expr().map_err(|mut err| err.cancel()) {\n+            Ok(p) => Some(p.into_inner()),\n+            Err(_) => return (None, None),\n         };\n         // might be `writeln!(foo)`\n-        if let None = parser.expect(&token::Comma).map_err(|mut err| err.cancel()).ok() {\n+        if parser.expect(&token::Comma).map_err(|mut err| err.cancel()).is_err() {\n             return (None, expr);\n         }\n     }\n \n-    let fmtstr = match parser.parse_str().map_err(|mut err| err.cancel()).ok() {\n-        Some(token) => token.0.to_string(),\n-        None => return (None, expr),\n+    let fmtstr = match parser.parse_str().map_err(|mut err| err.cancel()) {\n+        Ok(token) => token.0.to_string(),\n+        Err(_) => return (None, expr),\n     };\n     use fmt_macros::*;\n     let tmp = fmtstr.clone();\n@@ -281,9 +281,9 @@ fn check_tts<'a>(cx: &EarlyContext<'a>, tts: &ThinTokenStream, is_write: bool) -\n             assert!(parser.eat(&token::Eof));\n             return (Some(fmtstr), expr);\n         }\n-        let token_expr = match parser.parse_expr().map_err(|mut err| err.cancel()).ok() {\n-            Some(expr) => expr,\n-            None => return (Some(fmtstr), None),\n+        let token_expr = match parser.parse_expr().map_err(|mut err| err.cancel()) {\n+            Ok(expr) => expr,\n+            Err(_) => return (Some(fmtstr), None),\n         };\n         const SIMPLE: FormatSpec<'_> = FormatSpec {\n             fill: None,"}, {"sha": "faccfd8291c0c29a96ba3c818357e8c6b27fd057", "filename": "tests/ui/writeln_empty_string.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c292b8078302a47dc47f6e772be3fb8f887dbf7a/tests%2Fui%2Fwriteln_empty_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c292b8078302a47dc47f6e772be3fb8f887dbf7a/tests%2Fui%2Fwriteln_empty_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwriteln_empty_string.rs?ref=c292b8078302a47dc47f6e772be3fb8f887dbf7a", "patch": "@@ -5,9 +5,12 @@ use std::io::Write;\n fn main() {\n     let mut v = Vec::new();\n \n-    // This should fail\n+    // These should fail\n     writeln!(&mut v, \"\");\n \n+    let mut suggestion = Vec::new();\n+    writeln!(&mut suggestion, \"\");\n+\n     // These should be fine\n     writeln!(&mut v);\n     writeln!(&mut v, \" \");"}, {"sha": "8bfec673c4ab4561d1c2a9d025d4cdf690e728a1", "filename": "tests/ui/writeln_empty_string.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c292b8078302a47dc47f6e772be3fb8f887dbf7a/tests%2Fui%2Fwriteln_empty_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c292b8078302a47dc47f6e772be3fb8f887dbf7a/tests%2Fui%2Fwriteln_empty_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwriteln_empty_string.stderr?ref=c292b8078302a47dc47f6e772be3fb8f887dbf7a", "patch": "@@ -1,10 +1,16 @@\n-error: using `writeln!(v, \"\")`\n+error: using writeln!(&mut v, \"\")\n  --> $DIR/writeln_empty_string.rs:9:5\n   |\n 9 |     writeln!(&mut v, \"\");\n-  |     ^^^^^^^^^^^^^^^^^^^^ help: replace it with: `writeln!(v)`\n+  |     ^^^^^^^^^^^^^^^^^^^^ help: replace it with: `writeln!(&mut v)`\n   |\n   = note: `-D writeln-empty-string` implied by `-D warnings`\n \n-error: aborting due to previous error\n+error: using writeln!(&mut suggestion, \"\")\n+  --> $DIR/writeln_empty_string.rs:12:5\n+   |\n+12 |     writeln!(&mut suggestion, \"\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `writeln!(&mut suggestion)`\n+\n+error: aborting due to 2 previous errors\n "}]}