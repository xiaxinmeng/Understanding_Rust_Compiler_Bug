{"sha": "c86071898f76d0807cc9d9ac78a7aa4aff0688ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4NjA3MTg5OGY3NmQwODA3Y2M5ZDlhYzc4YTdhYTRhZmYwNjg4YWU=", "commit": {"author": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2021-08-22T12:46:15Z"}, "committer": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2021-08-22T13:35:11Z"}, "message": "Fix typos \u201ca\u201d\u2192\u201can\u201d", "tree": {"sha": "61fa7e82e03e1bc4bf92756b121043c1460fe734", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61fa7e82e03e1bc4bf92756b121043c1460fe734"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c86071898f76d0807cc9d9ac78a7aa4aff0688ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c86071898f76d0807cc9d9ac78a7aa4aff0688ae", "html_url": "https://github.com/rust-lang/rust/commit/c86071898f76d0807cc9d9ac78a7aa4aff0688ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c86071898f76d0807cc9d9ac78a7aa4aff0688ae/comments", "author": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fec618d2e1d377a832064f7806b8180e1287ce8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fec618d2e1d377a832064f7806b8180e1287ce8", "html_url": "https://github.com/rust-lang/rust/commit/5fec618d2e1d377a832064f7806b8180e1287ce8"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "2296842e86f556ae6dc64572f0e440146ba6d7f7", "filename": "clippy_lints/src/loops/manual_memcpy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c86071898f76d0807cc9d9ac78a7aa4aff0688ae/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86071898f76d0807cc9d9ac78a7aa4aff0688ae/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs?ref=c86071898f76d0807cc9d9ac78a7aa4aff0688ae", "patch": "@@ -268,7 +268,7 @@ impl std::ops::Sub<&MinifyingSugg<'static>> for MinifyingSugg<'static> {\n     }\n }\n \n-/// a wrapper around `MinifyingSugg`, which carries a operator like currying\n+/// a wrapper around `MinifyingSugg`, which carries an operator like currying\n /// so that the suggested code become more efficient (e.g. `foo + -bar` `foo - bar`).\n struct Offset {\n     value: MinifyingSugg<'static>,"}, {"sha": "6c2563358cafe4d04f0e6c76281f562a376fdb72", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c86071898f76d0807cc9d9ac78a7aa4aff0688ae/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86071898f76d0807cc9d9ac78a7aa4aff0688ae/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=c86071898f76d0807cc9d9ac78a7aa4aff0688ae", "patch": "@@ -293,7 +293,7 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n                 }) => {\n                     if_chain! {\n                         // Lint a trait impl item only when the definition is a generic type,\n-                        // assuming a assoc const is not meant to be a interior mutable type.\n+                        // assuming an assoc const is not meant to be an interior mutable type.\n                         if let Some(of_trait_def_id) = of_trait_ref.trait_def_id();\n                         if let Some(of_assoc_item) = specialization_graph::Node::Trait(of_trait_def_id)\n                             .item(cx.tcx, impl_item.ident, AssocKind::Const, of_trait_def_id);"}, {"sha": "4fa361fedafac434dbd26510c421506bed51e0b8", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c86071898f76d0807cc9d9ac78a7aa4aff0688ae/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86071898f76d0807cc9d9ac78a7aa4aff0688ae/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=c86071898f76d0807cc9d9ac78a7aa4aff0688ae", "patch": "@@ -51,7 +51,7 @@ declare_clippy_lint! {\n     ///\n     /// ### Known problems\n     /// Will add unnecessary pair of parentheses when the\n-    /// expression is not wrapped in a pair but starts with a opening parenthesis\n+    /// expression is not wrapped in a pair but starts with an opening parenthesis\n     /// and ends with a closing one.\n     /// I.e., `let _ = (f()+1)..(f()+1)` results in `let _ = ((f()+1)..=f())`.\n     ///"}, {"sha": "b9e317a3cfd03af73f46ea09bc2f6997936fb107", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c86071898f76d0807cc9d9ac78a7aa4aff0688ae/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86071898f76d0807cc9d9ac78a7aa4aff0688ae/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=c86071898f76d0807cc9d9ac78a7aa4aff0688ae", "patch": "@@ -74,7 +74,7 @@ declare_clippy_lint! {\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for bindings that shadow other bindings already in\n-    /// scope, either without a initialization or with one that does not even use\n+    /// scope, either without an initialization or with one that does not even use\n     /// the original value.\n     ///\n     /// ### Why is this bad?"}, {"sha": "c192f9094a8a97bdfd840c3edfd27e09948d61e4", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c86071898f76d0807cc9d9ac78a7aa4aff0688ae/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86071898f76d0807cc9d9ac78a7aa4aff0688ae/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=c86071898f76d0807cc9d9ac78a7aa4aff0688ae", "patch": "@@ -198,7 +198,7 @@ define_Conf! {\n     (enum_variant_name_threshold: u64 = 3),\n     /// Lint: LARGE_ENUM_VARIANT.\n     ///\n-    /// The maximum size of a enum's variant to avoid box suggestion\n+    /// The maximum size of an enum's variant to avoid box suggestion\n     (enum_variant_size_threshold: u64 = 200),\n     /// Lint: VERBOSE_BIT_MASK.\n     ///"}, {"sha": "9ba1381da659397d6d500ba7cc1e9fbe6de28198", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c86071898f76d0807cc9d9ac78a7aa4aff0688ae/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86071898f76d0807cc9d9ac78a7aa4aff0688ae/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=c86071898f76d0807cc9d9ac78a7aa4aff0688ae", "patch": "@@ -329,7 +329,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n         vec.iter().map(|elem| self.expr(elem)).collect::<Option<_>>()\n     }\n \n-    /// Lookup a possibly constant expression from a `ExprKind::Path`.\n+    /// Lookup a possibly constant expression from an `ExprKind::Path`.\n     fn fetch_path(&mut self, qpath: &QPath<'_>, id: HirId, ty: Ty<'tcx>) -> Option<Constant> {\n         let res = self.typeck_results.qpath_res(qpath, id);\n         match res {"}, {"sha": "2a13b5ee3474f5f7b7da2c5fb49512c201be6a9f", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c86071898f76d0807cc9d9ac78a7aa4aff0688ae/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86071898f76d0807cc9d9ac78a7aa4aff0688ae/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=c86071898f76d0807cc9d9ac78a7aa4aff0688ae", "patch": "@@ -583,7 +583,7 @@ pub fn trait_ref_of_method<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Optio\n /// For example, if `e` represents the `v[0].a.b[x]`\n /// this method will return a tuple, composed of a `Vec`\n /// containing the `Expr`s for `v[0], v[0].a, v[0].a.b, v[0].a.b[x]`\n-/// and a `Expr` for root of them, `v`\n+/// and an `Expr` for root of them, `v`\n fn projection_stack<'a, 'hir>(mut e: &'a Expr<'hir>) -> (Vec<&'a Expr<'hir>>, &'a Expr<'hir>) {\n     let mut result = vec![];\n     let root = loop {"}, {"sha": "65d93e8f86e43f1c7953d83f45721bb9add27c43", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c86071898f76d0807cc9d9ac78a7aa4aff0688ae/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86071898f76d0807cc9d9ac78a7aa4aff0688ae/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=c86071898f76d0807cc9d9ac78a7aa4aff0688ae", "patch": "@@ -434,7 +434,7 @@ pub fn make_assoc(op: AssocOp, lhs: &Sugg<'_>, rhs: &Sugg<'_>) -> Sugg<'static>\n         matches!(op, AssocOp::ShiftLeft | AssocOp::ShiftRight)\n     }\n \n-    /// Returns `true` if the operator is a arithmetic operator\n+    /// Returns `true` if the operator is an arithmetic operator\n     /// (i.e., `+`, `-`, `*`, `/`, `%`).\n     fn is_arith(op: AssocOp) -> bool {\n         matches!("}, {"sha": "256a336db821d8711c6c3f958e2b814784b2f701", "filename": "tests/ui/declare_interior_mutable_const/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c86071898f76d0807cc9d9ac78a7aa4aff0688ae/tests%2Fui%2Fdeclare_interior_mutable_const%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86071898f76d0807cc9d9ac78a7aa4aff0688ae/tests%2Fui%2Fdeclare_interior_mutable_const%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeclare_interior_mutable_const%2Ftraits.rs?ref=c86071898f76d0807cc9d9ac78a7aa4aff0688ae", "patch": "@@ -117,7 +117,7 @@ impl SelfType for AtomicUsize {\n     const WRAPPED_SELF: Option<Self> = Some(AtomicUsize::new(21)); //~ ERROR interior mutable\n }\n \n-// Even though a constant contains a generic type, if it also have a interior mutable type,\n+// Even though a constant contains a generic type, if it also have an interior mutable type,\n // it should be linted at the definition site.\n trait BothOfCellAndGeneric<T> {\n     // this is a false negative in the current implementation."}]}