{"sha": "026d8ce7f5f66ba6fbb8aaf4babb533e95ee3efd", "node_id": "C_kwDOAAsO6NoAKDAyNmQ4Y2U3ZjVmNjZiYTZmYmI4YWFmNGJhYmI1MzNlOTVlZTNlZmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-21T03:36:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-21T03:36:55Z"}, "message": "Auto merge of #94066 - Mark-Simulacrum:factor-out-simple-def-kind, r=davidtwco\n\nRemove SimpleDefKind\n\nNow that rustc_query_system depends on rustc_hir, we can just directly make use of the regular DefKind.", "tree": {"sha": "8f3895dd5b2b0f7921f1c62b88ce225c210594b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f3895dd5b2b0f7921f1c62b88ce225c210594b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/026d8ce7f5f66ba6fbb8aaf4babb533e95ee3efd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/026d8ce7f5f66ba6fbb8aaf4babb533e95ee3efd", "html_url": "https://github.com/rust-lang/rust/commit/026d8ce7f5f66ba6fbb8aaf4babb533e95ee3efd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/026d8ce7f5f66ba6fbb8aaf4babb533e95ee3efd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45e2c2881d11324d610815bfff097e25c412199e", "url": "https://api.github.com/repos/rust-lang/rust/commits/45e2c2881d11324d610815bfff097e25c412199e", "html_url": "https://github.com/rust-lang/rust/commit/45e2c2881d11324d610815bfff097e25c412199e"}, {"sha": "ddda851fd542775d936eb7fe7e684bb6f2b4bbde", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddda851fd542775d936eb7fe7e684bb6f2b4bbde", "html_url": "https://github.com/rust-lang/rust/commit/ddda851fd542775d936eb7fe7e684bb6f2b4bbde"}], "stats": {"total": 76, "additions": 14, "deletions": 62}, "files": [{"sha": "832540a85e74b9ab2135ba967e684f3fff5c304d", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/026d8ce7f5f66ba6fbb8aaf4babb533e95ee3efd/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026d8ce7f5f66ba6fbb8aaf4babb533e95ee3efd/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=026d8ce7f5f66ba6fbb8aaf4babb533e95ee3efd", "patch": "@@ -44,8 +44,6 @@ pub use on_disk_cache::OnDiskCache;\n mod profiling_support;\n pub use self::profiling_support::alloc_self_profile_query_strings;\n \n-mod util;\n-\n fn describe_as_module(def_id: LocalDefId, tcx: TyCtxt<'_>) -> String {\n     if def_id.is_top_level_module() {\n         \"top-level module\".to_string()"}, {"sha": "073ddf01afb0e0efbbd401c090b41cff05133b57", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/026d8ce7f5f66ba6fbb8aaf4babb533e95ee3efd/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026d8ce7f5f66ba6fbb8aaf4babb533e95ee3efd/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=026d8ce7f5f66ba6fbb8aaf4babb533e95ee3efd", "patch": "@@ -290,13 +290,11 @@ macro_rules! define_queries {\n                 } else {\n                     Some(key.default_span(*tcx))\n                 };\n-                let def_id = key.key_as_def_id();\n-                let def_kind = def_id\n+                // Use `tcx.hir().opt_def_kind()` to reduce the chance of\n+                // accidentally triggering an infinite query loop.\n+                let def_kind = key.key_as_def_id()\n                     .and_then(|def_id| def_id.as_local())\n-                    // Use `tcx.hir().opt_def_kind()` to reduce the chance of\n-                    // accidentally triggering an infinite query loop.\n-                    .and_then(|def_id| tcx.hir().opt_def_kind(def_id))\n-                    .map(|def_kind| $crate::util::def_kind_to_simple_def_kind(def_kind));\n+                    .and_then(|def_id| tcx.hir().opt_def_kind(def_id));\n                 let hash = || {\n                     let mut hcx = tcx.create_stable_hashing_context();\n                     let mut hasher = StableHasher::new();"}, {"sha": "517c107b5d9af83738636312c0ce574277c2849a", "filename": "compiler/rustc_query_impl/src/util.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/45e2c2881d11324d610815bfff097e25c412199e/compiler%2Frustc_query_impl%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e2c2881d11324d610815bfff097e25c412199e/compiler%2Frustc_query_impl%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Futil.rs?ref=45e2c2881d11324d610815bfff097e25c412199e", "patch": "@@ -1,18 +0,0 @@\n-use rustc_hir::def::DefKind;\n-use rustc_query_system::query::SimpleDefKind;\n-\n-/// Convert a [`DefKind`] to a [`SimpleDefKind`].\n-///\n-/// *See [`SimpleDefKind`]'s docs for more information.*\n-pub(crate) fn def_kind_to_simple_def_kind(def_kind: DefKind) -> SimpleDefKind {\n-    match def_kind {\n-        DefKind::Struct => SimpleDefKind::Struct,\n-        DefKind::Enum => SimpleDefKind::Enum,\n-        DefKind::Union => SimpleDefKind::Union,\n-        DefKind::Trait => SimpleDefKind::Trait,\n-        DefKind::TyAlias => SimpleDefKind::TyAlias,\n-        DefKind::TraitAlias => SimpleDefKind::TraitAlias,\n-\n-        _ => SimpleDefKind::Other,\n-    }\n-}"}, {"sha": "4588403925efd05857cfb5c3ad9e24354a9ec4ad", "filename": "compiler/rustc_query_system/src/query/job.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/026d8ce7f5f66ba6fbb8aaf4babb533e95ee3efd/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026d8ce7f5f66ba6fbb8aaf4babb533e95ee3efd/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs?ref=026d8ce7f5f66ba6fbb8aaf4babb533e95ee3efd", "patch": "@@ -1,6 +1,7 @@\n use crate::dep_graph::DepContext;\n use crate::query::plumbing::CycleError;\n-use crate::query::{QueryContext, QueryStackFrame, SimpleDefKind};\n+use crate::query::{QueryContext, QueryStackFrame};\n+use rustc_hir::def::DefKind;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{struct_span_err, Diagnostic, DiagnosticBuilder, Handler, Level};\n@@ -556,15 +557,13 @@ pub(crate) fn report_cycle<'a>(\n     }\n \n     if stack.iter().all(|entry| {\n-        entry.query.def_kind.map_or(false, |def_kind| {\n-            matches!(def_kind, SimpleDefKind::TyAlias | SimpleDefKind::TraitAlias)\n-        })\n+        entry\n+            .query\n+            .def_kind\n+            .map_or(false, |def_kind| matches!(def_kind, DefKind::TyAlias | DefKind::TraitAlias))\n     }) {\n         if stack.iter().all(|entry| {\n-            entry\n-                .query\n-                .def_kind\n-                .map_or(false, |def_kind| matches!(def_kind, SimpleDefKind::TyAlias))\n+            entry.query.def_kind.map_or(false, |def_kind| matches!(def_kind, DefKind::TyAlias))\n         }) {\n             err.note(\"type aliases cannot be recursive\");\n             err.help(\"consider using a struct, enum, or union instead to break the cycle\");"}, {"sha": "de64ebb62030122e8d696a8db7eb41f3c639ca1d", "filename": "compiler/rustc_query_system/src/query/mod.rs", "status": "modified", "additions": 3, "deletions": 28, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/026d8ce7f5f66ba6fbb8aaf4babb533e95ee3efd/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026d8ce7f5f66ba6fbb8aaf4babb533e95ee3efd/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs?ref=026d8ce7f5f66ba6fbb8aaf4babb533e95ee3efd", "patch": "@@ -19,6 +19,7 @@ use crate::dep_graph::{DepNodeIndex, HasDepContext, SerializedDepNodeIndex};\n use rustc_data_structures::sync::Lock;\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_errors::Diagnostic;\n+use rustc_hir::def::DefKind;\n use rustc_span::Span;\n \n /// Description of a frame in the query stack.\n@@ -29,46 +30,20 @@ pub struct QueryStackFrame {\n     pub name: &'static str,\n     pub description: String,\n     span: Option<Span>,\n-    /// The `DefKind` this query frame is associated with, if applicable.\n-    ///\n-    /// We can't use `rustc_hir::def::DefKind` because `rustc_hir` is not\n-    /// available in `rustc_query_system`. Instead, we have a simplified\n-    /// custom version of it, called [`SimpleDefKind`].\n-    def_kind: Option<SimpleDefKind>,\n+    def_kind: Option<DefKind>,\n     /// This hash is used to deterministically pick\n     /// a query to remove cycles in the parallel compiler.\n     #[cfg(parallel_compiler)]\n     hash: u64,\n }\n \n-/// A simplified version of `rustc_hir::def::DefKind`.\n-///\n-/// It was added to help improve cycle errors caused by recursive type aliases.\n-/// As of August 2021, `rustc_query_system` cannot depend on `rustc_hir`\n-/// because it would create a dependency cycle. So, instead, a simplified\n-/// version of `DefKind` was added to `rustc_query_system`.\n-///\n-/// `DefKind`s are converted to `SimpleDefKind`s in `rustc_query_impl`.\n-#[derive(Debug, Copy, Clone)]\n-pub enum SimpleDefKind {\n-    Struct,\n-    Enum,\n-    Union,\n-    Trait,\n-    TyAlias,\n-    TraitAlias,\n-\n-    // FIXME: add more from `rustc_hir::def::DefKind` and then remove `Other`\n-    Other,\n-}\n-\n impl QueryStackFrame {\n     #[inline]\n     pub fn new(\n         name: &'static str,\n         description: String,\n         span: Option<Span>,\n-        def_kind: Option<SimpleDefKind>,\n+        def_kind: Option<DefKind>,\n         _hash: impl FnOnce() -> u64,\n     ) -> Self {\n         Self {"}]}