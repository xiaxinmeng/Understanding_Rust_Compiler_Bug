{"sha": "b898ad499f7a2c806e8df0bfde6fbe3f3c5cb925", "node_id": "C_kwDOAAsO6NoAKGI4OThhZDQ5OWY3YTJjODA2ZThkZjBiZmRlNmZiZTNmM2M1Y2I5MjU", "commit": {"author": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2022-03-24T00:09:44Z"}, "committer": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2022-03-24T00:12:47Z"}, "message": "Ensure io::Error's bitpacked repr doesn't accidentally impl UnwindSafe", "tree": {"sha": "c711aa52a1f14a544df03be38481b2f9c87dc08f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c711aa52a1f14a544df03be38481b2f9c87dc08f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b898ad499f7a2c806e8df0bfde6fbe3f3c5cb925", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEh0+qV0hta6XFe2D54u/UMJ4RyKgFAmI7t38ACgkQ4u/UMJ4R\nyKjOFhAAi0VJHAZyH5Lw/0iyj2WQc9Ki2WoPvfb2ysc4axnK15K9EenKmoZEdfH0\n1PrNtNZN/KllfKvmg8pgCxfw9Ny+URFR328CifjLtsgIihTTNAWSAtFVTLRK5EP3\nEA7ISt5ZQy91P7puInxRvO3DSQ07yE5p6V1ajkkEyvRW6YMPHSSYuHX8XpjmQmOP\nYyepbPCC9IDMmfpfV4w5khqaOkz9WemapY6IP1g58NSqBc7aRjBke+ca7/Pd9CcO\nx24vS72YBcFgiSvkNu59P1my1R1Kc3Fr4vte6aO4kGioeu9RFzsR1aHEOnyIA2z+\n9KXieENJt4rgQJw0cGejPjpiZwTzbKE2NaxntaA3Y9Kn440MlLDa1m6A4PkKb540\nShxpXIbR09m77IOD1Dz1ucAplkSsEIMOVb095QQbTnmFxja35HmE9WL+5fnckiee\nSkMRH41oYAMisoqfNEbANvTnGFtOpfvXJmQo2ylpRP7D2ggVK88WKlUViH2nmFKi\nt19cpi+XprXVnA0FS9FTzHyRqMqdSWbl9zGmOwNxGpsA1S9l9Gl7/qO1+MtFJ+ZQ\nNWMTgZPs8KPkuE6I+BJxzW4a7IrfZtBzDxEok+6T0Mf+H0nuJBWYTYZUBgoNRoYV\nZw+85F27zoQ4KFq/va9P/a6/nIF6bPfQQQ29bbfZd9nh59qI230=\n=IgZ8\n-----END PGP SIGNATURE-----", "payload": "tree c711aa52a1f14a544df03be38481b2f9c87dc08f\nparent 9f4dc0b4db892271cd0dada6e072775b5b5d6b1e\nauthor Thom Chiovoloni <chiovolonit@gmail.com> 1648080584 -0700\ncommitter Thom Chiovoloni <chiovolonit@gmail.com> 1648080767 -0700\n\nEnsure io::Error's bitpacked repr doesn't accidentally impl UnwindSafe\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b898ad499f7a2c806e8df0bfde6fbe3f3c5cb925", "html_url": "https://github.com/rust-lang/rust/commit/b898ad499f7a2c806e8df0bfde6fbe3f3c5cb925", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b898ad499f7a2c806e8df0bfde6fbe3f3c5cb925/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f4dc0b4db892271cd0dada6e072775b5b5d6b1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f4dc0b4db892271cd0dada6e072775b5b5d6b1e", "html_url": "https://github.com/rust-lang/rust/commit/9f4dc0b4db892271cd0dada6e072775b5b5d6b1e"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "e8070dc419b438e4e345862cedb14b6d26a9d372", "filename": "library/std/src/io/error/repr_bitpacked.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b898ad499f7a2c806e8df0bfde6fbe3f3c5cb925/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b898ad499f7a2c806e8df0bfde6fbe3f3c5cb925/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs?ref=b898ad499f7a2c806e8df0bfde6fbe3f3c5cb925", "patch": "@@ -104,6 +104,7 @@\n \n use super::{Custom, ErrorData, ErrorKind, SimpleMessage};\n use alloc::boxed::Box;\n+use core::marker::PhantomData;\n use core::mem::{align_of, size_of};\n use core::ptr::NonNull;\n \n@@ -115,7 +116,7 @@ const TAG_OS: usize = 0b10;\n const TAG_SIMPLE: usize = 0b11;\n \n #[repr(transparent)]\n-pub(super) struct Repr(NonNull<()>);\n+pub(super) struct Repr(NonNull<()>, PhantomData<ErrorData<Box<Custom>>>);\n \n // All the types `Repr` stores internally are Send + Sync, and so is it.\n unsafe impl Send for Repr {}\n@@ -145,7 +146,7 @@ impl Repr {\n         // box, and `TAG_CUSTOM` just... isn't zero -- it's `0b01`). Therefore,\n         // `TAG_CUSTOM + p` isn't zero and so `tagged` can't be, and the\n         // `new_unchecked` is safe.\n-        let res = Self(unsafe { NonNull::new_unchecked(tagged) });\n+        let res = Self(unsafe { NonNull::new_unchecked(tagged) }, PhantomData);\n         // quickly smoke-check we encoded the right thing (This generally will\n         // only run in libstd's tests, unless the user uses -Zbuild-std)\n         debug_assert!(matches!(res.data(), ErrorData::Custom(_)), \"repr(custom) encoding failed\");\n@@ -156,7 +157,7 @@ impl Repr {\n     pub(super) fn new_os(code: i32) -> Self {\n         let utagged = ((code as usize) << 32) | TAG_OS;\n         // Safety: `TAG_OS` is not zero, so the result of the `|` is not 0.\n-        let res = Self(unsafe { NonNull::new_unchecked(utagged as *mut ()) });\n+        let res = Self(unsafe { NonNull::new_unchecked(utagged as *mut ()) }, PhantomData);\n         // quickly smoke-check we encoded the right thing (This generally will\n         // only run in libstd's tests, unless the user uses -Zbuild-std)\n         debug_assert!(\n@@ -170,7 +171,7 @@ impl Repr {\n     pub(super) fn new_simple(kind: ErrorKind) -> Self {\n         let utagged = ((kind as usize) << 32) | TAG_SIMPLE;\n         // Safety: `TAG_SIMPLE` is not zero, so the result of the `|` is not 0.\n-        let res = Self(unsafe { NonNull::new_unchecked(utagged as *mut ()) });\n+        let res = Self(unsafe { NonNull::new_unchecked(utagged as *mut ()) }, PhantomData);\n         // quickly smoke-check we encoded the right thing (This generally will\n         // only run in libstd's tests, unless the user uses -Zbuild-std)\n         debug_assert!(\n@@ -184,7 +185,7 @@ impl Repr {\n     #[inline]\n     pub(super) const fn new_simple_message(m: &'static SimpleMessage) -> Self {\n         // Safety: References are never null.\n-        Self(unsafe { NonNull::new_unchecked(m as *const _ as *mut ()) })\n+        Self(unsafe { NonNull::new_unchecked(m as *const _ as *mut ()) }, PhantomData)\n     }\n \n     #[inline]"}]}