{"sha": "f54fc2f2fc7512292e00a7826ca5d144c359fbe4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NGZjMmYyZmM3NTEyMjkyZTAwYTc4MjZjYTVkMTQ0YzM1OWZiZTQ=", "commit": {"author": {"name": "Ruben Schmidmeister", "email": "ruben.schmidmeister@icloud.com", "date": "2019-05-09T15:22:16Z"}, "committer": {"name": "Ruben Schmidmeister", "email": "ruben.schmidmeister@icloud.com", "date": "2019-05-09T15:22:16Z"}, "message": "Implement conversion to unix newlines", "tree": {"sha": "b2a2485dcc1bca9cfdecf24adc6e648970b84c89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2a2485dcc1bca9cfdecf24adc6e648970b84c89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f54fc2f2fc7512292e00a7826ca5d144c359fbe4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEU0FXzFYkrmfOhhqxKTh7Wnqvhj8FAlzURccACgkQKTh7Wnqv\nhj+5sggApa/oYEcwgB+NKCNUYA5Vbmp9ebzWW9Xfxj7L9Gg62rYX8wzRVLIS0WEa\nQyW3SWlERxu4htWOS0CAUOkdEo/UPYQw9ae1rMbVhPfeahR6dIb2OOXsqW/65OwG\nsxovfBE+sGRlDhjaCckcTQ96OPnI3D3ZkGcO1M5FRmRaGHp9Dyw3yNHNaT0lqD1r\nxWoBEL9K3qhpDM0KTG/MMh+yVDzIKxDrXB6PkpoMMlObB/HSpeiIeklgUePYtymM\n6yTkGPY3TxDL/C/WI8pJph5T1h9SvVJ/Hcgxjo1GoDMMk8rzlsoBsSX4JxKXPkmu\n7hvDL2dtzNLMMQoYH5GiiyIv0ZqjmQ==\n=FweV\n-----END PGP SIGNATURE-----", "payload": "tree b2a2485dcc1bca9cfdecf24adc6e648970b84c89\nparent 703a2eab19cfbc79d509d65345a1ccc3aec706fa\nauthor Ruben Schmidmeister <ruben.schmidmeister@icloud.com> 1557415336 +0200\ncommitter Ruben Schmidmeister <ruben.schmidmeister@icloud.com> 1557415336 +0200\n\nImplement conversion to unix newlines\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f54fc2f2fc7512292e00a7826ca5d144c359fbe4", "html_url": "https://github.com/rust-lang/rust/commit/f54fc2f2fc7512292e00a7826ca5d144c359fbe4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f54fc2f2fc7512292e00a7826ca5d144c359fbe4/comments", "author": {"login": "bash", "id": 4602612, "node_id": "MDQ6VXNlcjQ2MDI2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/4602612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bash", "html_url": "https://github.com/bash", "followers_url": "https://api.github.com/users/bash/followers", "following_url": "https://api.github.com/users/bash/following{/other_user}", "gists_url": "https://api.github.com/users/bash/gists{/gist_id}", "starred_url": "https://api.github.com/users/bash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bash/subscriptions", "organizations_url": "https://api.github.com/users/bash/orgs", "repos_url": "https://api.github.com/users/bash/repos", "events_url": "https://api.github.com/users/bash/events{/privacy}", "received_events_url": "https://api.github.com/users/bash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bash", "id": 4602612, "node_id": "MDQ6VXNlcjQ2MDI2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/4602612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bash", "html_url": "https://github.com/bash", "followers_url": "https://api.github.com/users/bash/followers", "following_url": "https://api.github.com/users/bash/following{/other_user}", "gists_url": "https://api.github.com/users/bash/gists{/gist_id}", "starred_url": "https://api.github.com/users/bash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bash/subscriptions", "organizations_url": "https://api.github.com/users/bash/orgs", "repos_url": "https://api.github.com/users/bash/repos", "events_url": "https://api.github.com/users/bash/events{/privacy}", "received_events_url": "https://api.github.com/users/bash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "703a2eab19cfbc79d509d65345a1ccc3aec706fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/703a2eab19cfbc79d509d65345a1ccc3aec706fa", "html_url": "https://github.com/rust-lang/rust/commit/703a2eab19cfbc79d509d65345a1ccc3aec706fa"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "02aab9b024b0122ed98573b83a3b5abf0793d054", "filename": "src/formatting/newline_style.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f54fc2f2fc7512292e00a7826ca5d144c359fbe4/src%2Fformatting%2Fnewline_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54fc2f2fc7512292e00a7826ca5d144c359fbe4/src%2Fformatting%2Fnewline_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting%2Fnewline_style.rs?ref=f54fc2f2fc7512292e00a7826ca5d144c359fbe4", "patch": "@@ -11,11 +11,9 @@ pub(crate) fn apply_newline_style(\n     formatted_text: &mut String,\n     raw_input_text: &str,\n ) {\n-    match effective_newline_style(newline_style, raw_input_text) {\n-        EffectiveNewlineStyle::Windows => {\n-            *formatted_text = convert_to_windows_newlines(formatted_text);\n-        }\n-        EffectiveNewlineStyle::Unix => {}\n+    *formatted_text = match effective_newline_style(newline_style, raw_input_text) {\n+        EffectiveNewlineStyle::Windows => convert_to_windows_newlines(formatted_text),\n+        EffectiveNewlineStyle::Unix => convert_to_unix_newlines(formatted_text),\n     }\n }\n \n@@ -39,6 +37,8 @@ fn effective_newline_style(\n \n const LINE_FEED: char = '\\n';\n const CARRIAGE_RETURN: char = '\\r';\n+const WINDOWS_NEWLINE: &str = \"\\r\\n\";\n+const UNIX_NEWLINE: &str = \"\\n\";\n \n fn auto_detect_newline_style(raw_input_text: &str) -> EffectiveNewlineStyle {\n     let first_line_feed_pos = raw_input_text.chars().position(|ch| ch == LINE_FEED);\n@@ -66,7 +66,6 @@ fn native_newline_style() -> EffectiveNewlineStyle {\n fn convert_to_windows_newlines(formatted_text: &String) -> String {\n     let mut transformed = String::with_capacity(2 * formatted_text.capacity());\n     for c in formatted_text.chars() {\n-        const WINDOWS_NEWLINE: &str = \"\\r\\n\";\n         match c {\n             LINE_FEED => transformed.push_str(WINDOWS_NEWLINE),\n             c => transformed.push(c),\n@@ -75,6 +74,10 @@ fn convert_to_windows_newlines(formatted_text: &String) -> String {\n     transformed\n }\n \n+fn convert_to_unix_newlines(formatted_text: &String) -> String {\n+    formatted_text.replace(WINDOWS_NEWLINE, UNIX_NEWLINE)\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;\n@@ -157,6 +160,17 @@ mod tests {\n         }\n     }\n \n+    #[test]\n+    fn applies_unix_newlines() {\n+        let formatted_text = \"One\\r\\nTwo\\nThree\";\n+        let raw_input_text = formatted_text;\n+\n+        let mut out = String::from(formatted_text);\n+        apply_newline_style(NewlineStyle::Unix, &mut out, raw_input_text);\n+\n+        assert_eq!(\"One\\nTwo\\nThree\", &out);\n+    }\n+\n     #[test]\n     fn preserves_standalone_carriage_returns_when_applying_windows_newlines() {\n         let formatted_text = \"One\\nTwo\\nThree\\rDrei\";"}]}