{"sha": "c4acac64432aa6026ae24422abfee7c3014576e3", "node_id": "C_kwDOAAsO6NoAKGM0YWNhYzY0NDMyYWE2MDI2YWUyNDQyMmFiZmVlN2MzMDE0NTc2ZTM", "commit": {"author": {"name": "Nika Layzell", "email": "nika@thelayzells.com", "date": "2022-07-09T15:34:06Z"}, "committer": {"name": "Nika Layzell", "email": "nika@thelayzells.com", "date": "2022-07-18T17:06:51Z"}, "message": "proc_macro: Move subspan to be a method on Span in the bridge\n\nThis method is still only used for Literal::subspan, however the\nimplementation only depends on the Span component, so it is simpler and\nmore efficient for now to pass down only the information that is needed.\nIn the future, if more information about the Literal is required in the\nimplementation (e.g. to validate that spans line up as expected with\nsource text), that extra information can be added back with extra\narguments.", "tree": {"sha": "593987890f0e5d8080e461bfd4b5f80ee706565a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/593987890f0e5d8080e461bfd4b5f80ee706565a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4acac64432aa6026ae24422abfee7c3014576e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4acac64432aa6026ae24422abfee7c3014576e3", "html_url": "https://github.com/rust-lang/rust/commit/c4acac64432aa6026ae24422abfee7c3014576e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4acac64432aa6026ae24422abfee7c3014576e3/comments", "author": {"login": "mystor", "id": 1261662, "node_id": "MDQ6VXNlcjEyNjE2NjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1261662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mystor", "html_url": "https://github.com/mystor", "followers_url": "https://api.github.com/users/mystor/followers", "following_url": "https://api.github.com/users/mystor/following{/other_user}", "gists_url": "https://api.github.com/users/mystor/gists{/gist_id}", "starred_url": "https://api.github.com/users/mystor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mystor/subscriptions", "organizations_url": "https://api.github.com/users/mystor/orgs", "repos_url": "https://api.github.com/users/mystor/repos", "events_url": "https://api.github.com/users/mystor/events{/privacy}", "received_events_url": "https://api.github.com/users/mystor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mystor", "id": 1261662, "node_id": "MDQ6VXNlcjEyNjE2NjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1261662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mystor", "html_url": "https://github.com/mystor", "followers_url": "https://api.github.com/users/mystor/followers", "following_url": "https://api.github.com/users/mystor/following{/other_user}", "gists_url": "https://api.github.com/users/mystor/gists{/gist_id}", "starred_url": "https://api.github.com/users/mystor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mystor/subscriptions", "organizations_url": "https://api.github.com/users/mystor/orgs", "repos_url": "https://api.github.com/users/mystor/repos", "events_url": "https://api.github.com/users/mystor/events{/privacy}", "received_events_url": "https://api.github.com/users/mystor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b34c79f8f1ef4d0149ad4bf77e1759c07a9a01a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b34c79f8f1ef4d0149ad4bf77e1759c07a9a01a8", "html_url": "https://github.com/rust-lang/rust/commit/b34c79f8f1ef4d0149ad4bf77e1759c07a9a01a8"}], "stats": {"total": 82, "additions": 38, "deletions": 44}, "files": [{"sha": "176c77ca6edc6af8439fc65bfadfe1f711b112a5", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 36, "deletions": 37, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/c4acac64432aa6026ae24422abfee7c3014576e3/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4acac64432aa6026ae24422abfee7c3014576e3/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=c4acac64432aa6026ae24422abfee7c3014576e3", "patch": "@@ -436,43 +436,6 @@ impl server::FreeFunctions for Rustc<'_, '_> {\n             span: self.call_site,\n         })\n     }\n-\n-    fn literal_subspan(\n-        &mut self,\n-        literal: Literal<Self::Span, Self::Symbol>,\n-        start: Bound<usize>,\n-        end: Bound<usize>,\n-    ) -> Option<Self::Span> {\n-        let span = literal.span;\n-        let length = span.hi().to_usize() - span.lo().to_usize();\n-\n-        let start = match start {\n-            Bound::Included(lo) => lo,\n-            Bound::Excluded(lo) => lo.checked_add(1)?,\n-            Bound::Unbounded => 0,\n-        };\n-\n-        let end = match end {\n-            Bound::Included(hi) => hi.checked_add(1)?,\n-            Bound::Excluded(hi) => hi,\n-            Bound::Unbounded => length,\n-        };\n-\n-        // Bounds check the values, preventing addition overflow and OOB spans.\n-        if start > u32::MAX as usize\n-            || end > u32::MAX as usize\n-            || (u32::MAX - start as u32) < span.lo().to_u32()\n-            || (u32::MAX - end as u32) < span.lo().to_u32()\n-            || start >= end\n-            || end > length\n-        {\n-            return None;\n-        }\n-\n-        let new_lo = span.lo() + BytePos::from_usize(start);\n-        let new_hi = span.lo() + BytePos::from_usize(end);\n-        Some(span.with_lo(new_lo).with_hi(new_hi))\n-    }\n }\n \n impl server::TokenStream for Rustc<'_, '_> {\n@@ -697,6 +660,42 @@ impl server::Span for Rustc<'_, '_> {\n         Some(first.to(second))\n     }\n \n+    fn subspan(\n+        &mut self,\n+        span: Self::Span,\n+        start: Bound<usize>,\n+        end: Bound<usize>,\n+    ) -> Option<Self::Span> {\n+        let length = span.hi().to_usize() - span.lo().to_usize();\n+\n+        let start = match start {\n+            Bound::Included(lo) => lo,\n+            Bound::Excluded(lo) => lo.checked_add(1)?,\n+            Bound::Unbounded => 0,\n+        };\n+\n+        let end = match end {\n+            Bound::Included(hi) => hi.checked_add(1)?,\n+            Bound::Excluded(hi) => hi,\n+            Bound::Unbounded => length,\n+        };\n+\n+        // Bounds check the values, preventing addition overflow and OOB spans.\n+        if start > u32::MAX as usize\n+            || end > u32::MAX as usize\n+            || (u32::MAX - start as u32) < span.lo().to_u32()\n+            || (u32::MAX - end as u32) < span.lo().to_u32()\n+            || start >= end\n+            || end > length\n+        {\n+            return None;\n+        }\n+\n+        let new_lo = span.lo() + BytePos::from_usize(start);\n+        let new_hi = span.lo() + BytePos::from_usize(end);\n+        Some(span.with_lo(new_lo).with_hi(new_hi))\n+    }\n+\n     fn resolved_at(&mut self, span: Self::Span, at: Self::Span) -> Self::Span {\n         span.with_ctxt(at.ctxt())\n     }"}, {"sha": "5cde966bf173d163efa4130f18ae2180ea21fef8", "filename": "library/proc_macro/src/bridge/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4acac64432aa6026ae24422abfee7c3014576e3/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4acac64432aa6026ae24422abfee7c3014576e3/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs?ref=c4acac64432aa6026ae24422abfee7c3014576e3", "patch": "@@ -57,7 +57,6 @@ macro_rules! with_api {\n                 fn track_env_var(var: &str, value: Option<&str>);\n                 fn track_path(path: &str);\n                 fn literal_from_str(s: &str) -> Result<Literal<$S::Span, $S::Symbol>, ()>;\n-                fn literal_subspan(lit: Literal<$S::Span, $S::Symbol>, start: Bound<usize>, end: Bound<usize>) -> Option<$S::Span>;\n             },\n             TokenStream {\n                 fn drop($self: $S::TokenStream);\n@@ -114,6 +113,7 @@ macro_rules! with_api {\n                 fn before($self: $S::Span) -> $S::Span;\n                 fn after($self: $S::Span) -> $S::Span;\n                 fn join($self: $S::Span, other: $S::Span) -> Option<$S::Span>;\n+                fn subspan($self: $S::Span, start: Bound<usize>, end: Bound<usize>) -> Option<$S::Span>;\n                 fn resolved_at($self: $S::Span, at: $S::Span) -> $S::Span;\n                 fn source_text($self: $S::Span) -> Option<String>;\n                 fn save_span($self: $S::Span) -> usize;"}, {"sha": "5cf16bdd08cdd6c04c1a376c26e6a68f7b980a1e", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c4acac64432aa6026ae24422abfee7c3014576e3/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4acac64432aa6026ae24422abfee7c3014576e3/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=c4acac64432aa6026ae24422abfee7c3014576e3", "patch": "@@ -1379,12 +1379,7 @@ impl Literal {\n     // was 'c' or whether it was '\\u{63}'.\n     #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn subspan<R: RangeBounds<usize>>(&self, range: R) -> Option<Span> {\n-        bridge::client::FreeFunctions::literal_subspan(\n-            self.0.clone(),\n-            range.start_bound().cloned(),\n-            range.end_bound().cloned(),\n-        )\n-        .map(Span)\n+        self.0.span.subspan(range.start_bound().cloned(), range.end_bound().cloned()).map(Span)\n     }\n \n     fn with_symbol_and_suffix<R>(&self, f: impl FnOnce(&str, &str) -> R) -> R {"}]}