{"sha": "f5f2f763395c3336b739866927a56edfbd1f204b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1ZjJmNzYzMzk1YzMzMzZiNzM5ODY2OTI3YTU2ZWRmYmQxZjIwNGI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-05T19:03:23Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-05T20:09:43Z"}, "message": "Add --help, --version and -v flags (not yet supporting GIT_REV env var, waiting on snapshot).", "tree": {"sha": "e6a90e39b4c35cf6c1c6dedd0bbceec5183b637c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6a90e39b4c35cf6c1c6dedd0bbceec5183b637c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5f2f763395c3336b739866927a56edfbd1f204b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5f2f763395c3336b739866927a56edfbd1f204b", "html_url": "https://github.com/rust-lang/rust/commit/f5f2f763395c3336b739866927a56edfbd1f204b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5f2f763395c3336b739866927a56edfbd1f204b/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a74feaf1594673bcec77ed45bd4b6766289a25b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a74feaf1594673bcec77ed45bd4b6766289a25b3", "html_url": "https://github.com/rust-lang/rust/commit/a74feaf1594673bcec77ed45bd4b6766289a25b3"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "b7bca48a068f324372f72a59a3a193638ba71bca", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f5f2f763395c3336b739866927a56edfbd1f204b/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5f2f763395c3336b739866927a56edfbd1f204b/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=f5f2f763395c3336b739866927a56edfbd1f204b", "patch": "@@ -126,10 +126,21 @@ fn pretty_print_input(session.session sess,\n     pretty.pprust.print_file(crate.node.module, input, std.io.stdout());\n }\n \n+fn version(str argv0) {\n+    auto git_rev = \"\"; // when snapshotted to extenv: #env(\"GIT_REV\");\n+    if (_str.byte_len(git_rev) != 0u) {\n+        git_rev = #fmt(\" (git: %s)\", git_rev);\n+    }\n+    io.stdout().write_str(#fmt(\"%s prerelease%s\\n\", argv0, git_rev));\n+}\n+\n fn usage(str argv0) {\n     io.stdout().write_str(#fmt(\"usage: %s [options] <input>\\n\", argv0) + \"\n options:\n \n+    -h --help          display this message\n+    -v --version       print version info and exit\n+\n     -o <filename>      write output to <filename>\n     --glue             generate glue.bc file\n     --shared           compile a shared-library crate\n@@ -146,8 +157,7 @@ options:\n     --save-temps       write intermediate files in addition to normal output\n     --time-passes      time the individual phases of the compiler\n     --sysroot <path>   override the system root (default: rustc's directory)\n-    --no-typestate     don't run the typestate pass (unsafe!)\n-    -h                 display this message\\n\\n\");\n+    --no-typestate     don't run the typestate pass (unsafe!)\\n\\n\");\n }\n \n fn get_os() -> session.os {\n@@ -173,7 +183,9 @@ fn main(vec[str] args) {\n              uint_type = common.ty_u32,\n              float_type = common.ty_f64);\n \n-    auto opts = vec(optflag(\"h\"), optflag(\"glue\"),\n+    auto opts = vec(optflag(\"h\"), optflag(\"help\"),\n+                    optflag(\"v\"), optflag(\"version\"),\n+                    optflag(\"glue\"),\n                     optflag(\"pretty\"), optflag(\"ls\"), optflag(\"parse-only\"),\n                     optflag(\"O\"), optflag(\"shared\"), optmulti(\"L\"),\n                     optflag(\"S\"), optflag(\"c\"), optopt(\"o\"), optopt(\"g\"),\n@@ -189,11 +201,18 @@ fn main(vec[str] args) {\n         }\n         case (GetOpts.success(?m)) { match = m; }\n     }\n-    if (opt_present(match, \"h\")) {\n+    if (opt_present(match, \"h\") ||\n+        opt_present(match, \"help\")) {\n         usage(binary);\n         ret;\n     }\n \n+    if (opt_present(match, \"v\") ||\n+        opt_present(match, \"version\")) {\n+        version(binary);\n+        ret;\n+    }\n+\n     auto pretty = opt_present(match, \"pretty\");\n     auto ls = opt_present(match, \"ls\");\n     auto glue = opt_present(match, \"glue\");"}]}