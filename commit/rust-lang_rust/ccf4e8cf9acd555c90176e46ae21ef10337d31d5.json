{"sha": "ccf4e8cf9acd555c90176e46ae21ef10337d31d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjZjRlOGNmOWFjZDU1NWM5MDE3NmU0NmFlMjFlZjEwMzM3ZDMxZDU=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-12T21:54:02Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-13T00:01:13Z"}, "message": "Make vectors contain the right type descriptor. Closes #2536.", "tree": {"sha": "9b2e267fd16b4eb0c2327139e16bac5f4e97ef69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b2e267fd16b4eb0c2327139e16bac5f4e97ef69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccf4e8cf9acd555c90176e46ae21ef10337d31d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccf4e8cf9acd555c90176e46ae21ef10337d31d5", "html_url": "https://github.com/rust-lang/rust/commit/ccf4e8cf9acd555c90176e46ae21ef10337d31d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccf4e8cf9acd555c90176e46ae21ef10337d31d5/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f61dcb026910da60b85564fbee1b340569337f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f61dcb026910da60b85564fbee1b340569337f4", "html_url": "https://github.com/rust-lang/rust/commit/4f61dcb026910da60b85564fbee1b340569337f4"}], "stats": {"total": 29, "additions": 12, "deletions": 17}, "files": [{"sha": "125fc8d30dfa80dc1de2abcd1b18c4c7b0f7b250", "filename": "src/rustc/middle/trans/tvec.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ccf4e8cf9acd555c90176e46ae21ef10337d31d5/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccf4e8cf9acd555c90176e46ae21ef10337d31d5/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=ccf4e8cf9acd555c90176e46ae21ef10337d31d5", "patch": "@@ -57,17 +57,14 @@ fn alloc_uniq_raw(bcx: block, unit_ty: ty::t,\n                   fill: ValueRef, alloc: ValueRef) -> result {\n     let _icx = bcx.insn_ctxt(\"tvec::alloc_uniq_raw\");\n     let ccx = bcx.ccx();\n-    let llunitty = type_of::type_of(ccx, unit_ty);\n-    let llvecty = T_vec(ccx, llunitty);\n-    let vecsize = Add(bcx, alloc, llsize_of(ccx, llvecty));\n-    let vecbodyty = unit_ty; // FIXME: This is not the correct type (#2536)\n+\n+    let vecbodyty = ty::mk_mut_unboxed_vec(bcx.tcx(), unit_ty);\n+    let vecsize = Add(bcx, alloc, llsize_of(ccx, ccx.opaque_vec_type));\n+\n     let {box, body} = base::malloc_unique_dyn(bcx, vecbodyty, vecsize);\n-    let boxptr = PointerCast(bcx, box,\n-                             T_unique_ptr(T_unique(bcx.ccx(), llvecty)));\n-    let bodyptr = PointerCast(bcx, body, T_ptr(llvecty));\n-    Store(bcx, fill, GEPi(bcx, bodyptr, [0u, abi::vec_elt_fill]));\n-    Store(bcx, alloc, GEPi(bcx, bodyptr, [0u, abi::vec_elt_alloc]));\n-    ret {bcx: bcx, val: boxptr};\n+    Store(bcx, fill, GEPi(bcx, body, [0u, abi::vec_elt_fill]));\n+    Store(bcx, alloc, GEPi(bcx, body, [0u, abi::vec_elt_alloc]));\n+    ret {bcx: bcx, val: box};\n }\n \n fn alloc_uniq(bcx: block, unit_ty: ty::t, elts: uint) -> result {\n@@ -91,14 +88,9 @@ fn duplicate_uniq(bcx: block, vptr: ValueRef, vec_ty: ty::t) -> result {\n     let size = Add(bcx, fill, llsize_of(ccx, ccx.opaque_vec_type));\n \n     let unit_ty = ty::sequence_element_type(bcx.tcx(), vec_ty);\n-    let llunitty = type_of::type_of(ccx, unit_ty);\n-    let llvecty = T_vec(ccx, llunitty);\n-    let vecbodyty = unit_ty; // FIXME: This is not the correct type (#2536)\n+    let vecbodyty = ty::mk_mut_unboxed_vec(bcx.tcx(), unit_ty);\n     let {box: newptr, body: new_body_ptr} =\n         base::malloc_unique_dyn(bcx, vecbodyty, size);\n-    let newptr = PointerCast(bcx, newptr,\n-                             T_unique_ptr(T_unique(bcx.ccx(), llvecty)));\n-    let new_body_ptr = PointerCast(bcx, new_body_ptr, T_ptr(llvecty));\n     call_memmove(bcx, new_body_ptr, body_ptr, size);\n \n     Store(bcx, fill, GEPi(bcx, new_body_ptr, [0u, abi::vec_elt_alloc]));"}, {"sha": "8ffc0f36d2039a1a413ae27037ee5c22f38a9a4b", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ccf4e8cf9acd555c90176e46ae21ef10337d31d5/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccf4e8cf9acd555c90176e46ae21ef10337d31d5/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=ccf4e8cf9acd555c90176e46ae21ef10337d31d5", "patch": "@@ -88,7 +88,7 @@ export ty_str, mk_str, type_is_str;\n export ty_vec, mk_vec, type_is_vec;\n export ty_estr, mk_estr;\n export ty_evec, mk_evec;\n-export ty_unboxed_vec, mk_unboxed_vec;\n+export ty_unboxed_vec, mk_unboxed_vec, mk_mut_unboxed_vec;\n export vstore, vstore_fixed, vstore_uniq, vstore_box, vstore_slice;\n export ty_nil, mk_nil, type_is_nil;\n export ty_iface, mk_iface;\n@@ -677,6 +677,9 @@ fn mk_evec(cx: ctxt, tm: mt, t: vstore) -> t {\n fn mk_unboxed_vec(cx: ctxt, tm: mt) -> t {\n     mk_t(cx, ty_unboxed_vec(tm))\n }\n+fn mk_mut_unboxed_vec(cx: ctxt, ty: t) -> t {\n+    mk_t(cx, ty_unboxed_vec({ty: ty, mutbl: ast::m_imm}))\n+}\n \n \n fn mk_rec(cx: ctxt, fs: [field]) -> t { mk_t(cx, ty_rec(fs)) }"}]}