{"sha": "b13a217a8b975d037b50c1b0e15073eabba582f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxM2EyMTdhOGI5NzVkMDM3YjUwYzFiMGUxNTA3M2VhYmJhNTgyZjg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-06-27T07:48:36Z"}, "committer": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-06-27T07:48:36Z"}, "message": "Merge #1449\n\n1449: Swallow expected `rustfmt` errors r=matklad a=etaoins\n\nMy workflow in Visual Studio Code + Rust Analyzer has become:\r\n\r\n1. Make a change to Rust source code using all the analysis magic\r\n\r\n2. Save the file to trigger `cargo watch`. I have format on save enabled for all file types so this also runs `rustfmt`\r\n\r\n3. Fix any diagnostics that `cargo watch` finds\r\n\r\nUnfortunately if the Rust source has any syntax errors the act of saving will pop up a scary \"command has failed\" message and will switch to the \"Output\" tab to show the `rustfmt` error and exit code.\r\n\r\nI did a quick survey of what other Language Servers do in this case. Both the JSON and TypeScript servers will swallow the error and return success. This is consistent with how I remember my workflow in those languages. The syntax error will show up as a diagnostic so it should be clear why the file isn't formatting.\r\n\r\nI checked the `rustfmt` source code and while it does distinguish \"parse errors\" from \"operational errors\" internally they both result in exit status of 1. However, more catastrophic errors (missing `rustfmt`, SIGSEGV, etc) will return 127+ error codes which we can distinguish from a normal failure.\r\n\r\nThis changes our handler to log an info message and feign success if `rustfmt` exits with status 1.\r\n\r\nAnother option I considered was only swallowing the error if the formatting request came from format-on-save. However, the Language Server Protocol doesn't seem to distinguish those cases.\n\nCo-authored-by: Ryan Cumming <etaoins@gmail.com>", "tree": {"sha": "94c99ab8d8e18f113c559d304cba9c070c16ab1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94c99ab8d8e18f113c559d304cba9c070c16ab1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b13a217a8b975d037b50c1b0e15073eabba582f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b13a217a8b975d037b50c1b0e15073eabba582f8", "html_url": "https://github.com/rust-lang/rust/commit/b13a217a8b975d037b50c1b0e15073eabba582f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b13a217a8b975d037b50c1b0e15073eabba582f8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "04a211ff6146d167a2bdf7d200df36468137591b", "url": "https://api.github.com/repos/rust-lang/rust/commits/04a211ff6146d167a2bdf7d200df36468137591b", "html_url": "https://github.com/rust-lang/rust/commit/04a211ff6146d167a2bdf7d200df36468137591b"}, {"sha": "e052ca9d614e946a6cea4875ae50c68d77088257", "url": "https://api.github.com/repos/rust-lang/rust/commits/e052ca9d614e946a6cea4875ae50c68d77088257", "html_url": "https://github.com/rust-lang/rust/commit/e052ca9d614e946a6cea4875ae50c68d77088257"}], "stats": {"total": 35, "additions": 25, "deletions": 10}, "files": [{"sha": "47222cd0ac209c5e3b380c4563a42748bc1886f6", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b13a217a8b975d037b50c1b0e15073eabba582f8/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b13a217a8b975d037b50c1b0e15073eabba582f8/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=b13a217a8b975d037b50c1b0e15073eabba582f8", "patch": "@@ -621,17 +621,32 @@ pub fn handle_formatting(\n \n     let output = rustfmt.wait_with_output()?;\n     let captured_stdout = String::from_utf8(output.stdout)?;\n+\n     if !output.status.success() {\n-        return Err(LspError::new(\n-            -32900,\n-            format!(\n-                r#\"rustfmt exited with:\n-            Status: {}\n-            stdout: {}\"#,\n-                output.status, captured_stdout,\n-            ),\n-        )\n-        .into());\n+        match output.status.code() {\n+            Some(1) => {\n+                // While `rustfmt` doesn't have a specific exit code for parse errors this is the\n+                // likely cause exiting with 1. Most Language Servers swallow parse errors on\n+                // formatting because otherwise an error is surfaced to the user on top of the\n+                // syntax error diagnostics they're already receiving. This is especially jarring\n+                // if they have format on save enabled.\n+                log::info!(\"rustfmt exited with status 1, assuming parse error and ignoring\");\n+                return Ok(None);\n+            }\n+            _ => {\n+                // Something else happened - e.g. `rustfmt` is missing or caught a signal\n+                return Err(LspError::new(\n+                    -32900,\n+                    format!(\n+                        r#\"rustfmt exited with:\n+                           Status: {}\n+                           stdout: {}\"#,\n+                        output.status, captured_stdout,\n+                    ),\n+                )\n+                .into());\n+            }\n+        }\n     }\n \n     Ok(Some(vec![TextEdit {"}]}