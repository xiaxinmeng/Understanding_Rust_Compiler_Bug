{"sha": "cc01433d56064327441ccd05100b310758a8ddbf", "node_id": "C_kwDOAAsO6NoAKGNjMDE0MzNkNTYwNjQzMjc0NDFjY2QwNTEwMGIzMTA3NThhOGRkYmY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-05T10:26:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-05T10:26:04Z"}, "message": "Rollup merge of #92188 - vacuus:nested-attributes-ext, r=jyn514\n\nrustdoc: Clean up NestedAttributesExt trait/implementation", "tree": {"sha": "7794a7cd2da2d1b4d94c3dfe8001caaa2e06b147", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7794a7cd2da2d1b4d94c3dfe8001caaa2e06b147"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc01433d56064327441ccd05100b310758a8ddbf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh1XI8CRBK7hj4Ov3rIwAA8+0IAJ44GiFjQ9IEPFCdM6CS1yCE\n63wwfFNe/cDXWKh7ARnLFZrGqDwuYfYdZCttMw/wDDm+KavEhH60+vjokkGzYK5z\nOMvBkMxP6/29+Qu6kH8bsYLheKckATQtrmU90x+zqi2wnI9q7X+pwhPdiOhJt52b\nsN+uRuPdhWjmr99md1MODbJJXXs6DPJnFg0W3AC1unTsZqGRjEw6qZiieYjpV52/\n2sqD4OmEkqb+yRrKbtI1QDxaNteWYtEEQhI0jy0QyvB2vQ4ktiMIMFC/KGravLge\nhAaLME70Vm3v10wrQoWnA8UKFNAH7tHsDOBMHAqJN90W2mi2/eYESP2c6CTKW4I=\n=He0h\n-----END PGP SIGNATURE-----\n", "payload": "tree 7794a7cd2da2d1b4d94c3dfe8001caaa2e06b147\nparent e35a4bd8d0e99ee77ff466c5b53249d74d6c657c\nparent 91fe2d0ed7a8f79a64216c7328b2bea11a3bc9ea\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1641378364 +0100\ncommitter GitHub <noreply@github.com> 1641378364 +0100\n\nRollup merge of #92188 - vacuus:nested-attributes-ext, r=jyn514\n\nrustdoc: Clean up NestedAttributesExt trait/implementation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc01433d56064327441ccd05100b310758a8ddbf", "html_url": "https://github.com/rust-lang/rust/commit/cc01433d56064327441ccd05100b310758a8ddbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc01433d56064327441ccd05100b310758a8ddbf/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e35a4bd8d0e99ee77ff466c5b53249d74d6c657c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e35a4bd8d0e99ee77ff466c5b53249d74d6c657c", "html_url": "https://github.com/rust-lang/rust/commit/e35a4bd8d0e99ee77ff466c5b53249d74d6c657c"}, {"sha": "91fe2d0ed7a8f79a64216c7328b2bea11a3bc9ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/91fe2d0ed7a8f79a64216c7328b2bea11a3bc9ea", "html_url": "https://github.com/rust-lang/rust/commit/91fe2d0ed7a8f79a64216c7328b2bea11a3bc9ea"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "f0f61bb94c8e82395d4b94be403c86324b84983c", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cc01433d56064327441ccd05100b310758a8ddbf/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc01433d56064327441ccd05100b310758a8ddbf/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=cc01433d56064327441ccd05100b310758a8ddbf", "patch": "@@ -889,20 +889,25 @@ impl AttributesExt for [ast::Attribute] {\n }\n \n crate trait NestedAttributesExt {\n-    /// Returns `true` if the attribute list contains a specific `Word`\n-    fn has_word(self, word: Symbol) -> bool;\n+    /// Returns `true` if the attribute list contains a specific `word`\n+    fn has_word(self, word: Symbol) -> bool\n+    where\n+        Self: std::marker::Sized,\n+    {\n+        <Self as NestedAttributesExt>::get_word_attr(self, word).is_some()\n+    }\n+\n+    /// Returns `Some(attr)` if the attribute list contains 'attr'\n+    /// corresponding to a specific `word`\n     fn get_word_attr(self, word: Symbol) -> Option<ast::NestedMetaItem>;\n }\n \n-impl<I: Iterator<Item = ast::NestedMetaItem> + IntoIterator<Item = ast::NestedMetaItem>>\n-    NestedAttributesExt for I\n+impl<I> NestedAttributesExt for I\n+where\n+    I: IntoIterator<Item = ast::NestedMetaItem>,\n {\n-    fn has_word(self, word: Symbol) -> bool {\n-        self.into_iter().any(|attr| attr.is_word() && attr.has_name(word))\n-    }\n-\n-    fn get_word_attr(mut self, word: Symbol) -> Option<ast::NestedMetaItem> {\n-        self.find(|attr| attr.is_word() && attr.has_name(word))\n+    fn get_word_attr(self, word: Symbol) -> Option<ast::NestedMetaItem> {\n+        self.into_iter().find(|attr| attr.is_word() && attr.has_name(word))\n     }\n }\n "}]}