{"sha": "aa024acae3912d7d58e38fdd8185a115f2ab4e8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhMDI0YWNhZTM5MTJkN2Q1OGUzOGZkZDgxODVhMTE1ZjJhYjRlOGY=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-08-24T19:19:19Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-08-24T19:20:06Z"}, "message": "Use a faked-up function as a key, because functions aren't identical cross-crate in Windows.", "tree": {"sha": "36cefa71f5f06625d56ac31e7cb604ae8afdffe4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36cefa71f5f06625d56ac31e7cb604ae8afdffe4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa024acae3912d7d58e38fdd8185a115f2ab4e8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa024acae3912d7d58e38fdd8185a115f2ab4e8f", "html_url": "https://github.com/rust-lang/rust/commit/aa024acae3912d7d58e38fdd8185a115f2ab4e8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa024acae3912d7d58e38fdd8185a115f2ab4e8f/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f996f70a632d1427801f20935a69a57fbb3679e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f996f70a632d1427801f20935a69a57fbb3679e", "html_url": "https://github.com/rust-lang/rust/commit/0f996f70a632d1427801f20935a69a57fbb3679e"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "4cc161e1b5cff311e69211430339e74d45b52ad4", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aa024acae3912d7d58e38fdd8185a115f2ab4e8f/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa024acae3912d7d58e38fdd8185a115f2ab4e8f/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=aa024acae3912d7d58e38fdd8185a115f2ab4e8f", "patch": "@@ -30,16 +30,24 @@ fn deserialize_span<D>(_d: D) -> span {\n #[auto_serialize]\n type spanned<T> = {node: T, span: span};\n \n+\n+/* can't import macros yet, so this is copied from token.rs. See its comment\n+ * there. */\n+macro_rules! interner_key (\n+    () => (unsafe::transmute::<(uint, uint), &fn(+@@token::ident_interner)>(\n+        (-3 as uint, 0u)))\n+)\n+\n fn serialize_ident<S: serializer>(s: S, i: ident) {\n-    let intr = match unsafe{task::local_data_get(parse::token::interner_key)}{\n+    let intr = match unsafe{task::local_data_get(interner_key!())}{\n         none => fail ~\"serialization: TLS interner not set up\",\n         some(intr) => intr\n     };\n \n     s.emit_str(*(*intr).get(i));\n }\n fn deserialize_ident<D: deserializer>(d: D) -> ident  {\n-    let intr = match unsafe{task::local_data_get(parse::token::interner_key)}{\n+    let intr = match unsafe{task::local_data_get(interner_key!())}{\n         none => fail ~\"deserialization: TLS interner not set up\",\n         some(intr) => intr\n     };"}, {"sha": "759d99511fea158ce960553a8b2f0d5a2fefd9e3", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aa024acae3912d7d58e38fdd8185a115f2ab4e8f/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa024acae3912d7d58e38fdd8185a115f2ab4e8f/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=aa024acae3912d7d58e38fdd8185a115f2ab4e8f", "patch": "@@ -325,8 +325,14 @@ mod special_idents {\n type ident_interner = util::interner::interner<@~str>;\n \n /** Key for thread-local data for sneaking interner information to the\n- * serializer/deserializer. It sounds like a hack because it is one. */\n-fn interner_key(+_x: @@ident_interner) { }\n+ * serializer/deserializer. It sounds like a hack because it is one.\n+ * Bonus ultra-hack: functions as keys don't work across crates,\n+ * so we have to use a unique number. See taskgroup_key! in task.rs\n+ * for another case of this. */\n+macro_rules! interner_key (\n+    () => (unsafe::transmute::<(uint, uint), &fn(+@@token::ident_interner)>(\n+        (-3 as uint, 0u)))\n+)\n \n fn mk_ident_interner() -> ident_interner {\n     /* the indices here must correspond to the numbers in special_idents */\n@@ -343,8 +349,8 @@ fn mk_ident_interner() -> ident_interner {\n                                            |x,y| str::eq(*x, *y), init_vec);\n \n     /* having multiple interners will just confuse the serializer */\n-    unsafe{ assert task::local_data_get(interner_key) == none };\n-    unsafe{ task::local_data_set(interner_key, @rv) };\n+    unsafe{ assert task::local_data_get(interner_key!()) == none };\n+    unsafe{ task::local_data_set(interner_key!(), @rv) };\n     rv\n }\n "}, {"sha": "6ab1aa78cc094f494737a36f6ef0fac20f380e57", "filename": "src/rustdoc/extract.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aa024acae3912d7d58e38fdd8185a115f2ab4e8f/src%2Frustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa024acae3912d7d58e38fdd8185a115f2ab4e8f/src%2Frustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fextract.rs?ref=aa024acae3912d7d58e38fdd8185a115f2ab4e8f", "patch": "@@ -5,18 +5,24 @@ import doc::item_utils;\n \n export from_srv, extract, to_str, interner;\n \n+\n+/* can't import macros yet, so this is copied from token.rs. See its comment\n+ * there. */\n+macro_rules! interner_key (\n+    () => (unsafe::transmute::<(uint, uint),\n+           &fn(+@@syntax::parse::token::ident_interner)>((-3 as uint, 0u)))\n+)\n+\n // Hack; rather than thread an interner through everywhere, rely on\n // thread-local data\n fn to_str(id: ast::ident) -> ~str {\n-    let intr = unsafe{ task::local_data_get(\n-        syntax::parse::token::interner_key) };\n+    let intr = unsafe{ task::local_data_get(interner_key!()) };\n \n     return *(*intr.get()).get(id);\n }\n \n fn interner() -> syntax::parse::token::ident_interner {\n-    return *(unsafe{ task::local_data_get(\n-        syntax::parse::token::interner_key) }).get();\n+    return *(unsafe{ task::local_data_get(interner_key!()) }).get();\n }\n \n fn from_srv("}]}