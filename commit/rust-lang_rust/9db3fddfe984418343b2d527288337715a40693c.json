{"sha": "9db3fddfe984418343b2d527288337715a40693c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkYjNmZGRmZTk4NDQxODM0M2IyZDUyNzI4ODMzNzcxNWE0MDY5M2M=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-11-10T00:27:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-10T00:27:19Z"}, "message": "Rollup merge of #66217 - RalfJung:diagnostic-items, r=Centril\n\ninvalid_value lint: use diagnostic items\n\nThis adjusts the invalid_value lint to use diagnostic items.\n\n@Centril @oli-obk For some reason, this fails to recognize `transmute` -- somehow the diagnostic item is not found. Any idea why?\n\nr? @Centril\n\nCc https://github.com/rust-lang/rust/issues/66075", "tree": {"sha": "73c9aa811561f136ae0d493c753c7266d10cefeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73c9aa811561f136ae0d493c753c7266d10cefeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9db3fddfe984418343b2d527288337715a40693c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdx1lnCRBK7hj4Ov3rIwAAdHIIAJFMfbe8hF+SKOaU2esrVXLF\n5JB818pSa9UpdoSlvohd9QUAFb+aiJdNlZ/37qEpx81aGEliXgrAbRhAFPq3L8Pv\nX7b+n997D58T4h8AwIwgD7+vkleQLqZ0lMXxhqja6IOicgsDoTPZck71lutCflxV\ngCWciO/NR2yaMZefSdTxW8+MQ0mlO7okqe73WRNXOQDpyUjsLLu3lWQK2/0JGjgj\ne87MpGm0qXj3Lk/uvsM6nBTW5dTN9Y17WdimXrjeo+6EC55O9bCrrHj7Lu4VOEd2\nURvCDmJnc5WdKSYa522GWc0cNftsYlsGYIir47gNY6GROzwYzyAK1jQyIqmJp4A=\n=M8fR\n-----END PGP SIGNATURE-----\n", "payload": "tree 73c9aa811561f136ae0d493c753c7266d10cefeb\nparent f16660943322d3fc3c4747eca6e757a3f7d60e50\nparent 769d52774b9d94a5120dc34e2ea03971047d1c7c\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1573345639 +0900\ncommitter GitHub <noreply@github.com> 1573345639 +0900\n\nRollup merge of #66217 - RalfJung:diagnostic-items, r=Centril\n\ninvalid_value lint: use diagnostic items\n\nThis adjusts the invalid_value lint to use diagnostic items.\n\n@Centril @oli-obk For some reason, this fails to recognize `transmute` -- somehow the diagnostic item is not found. Any idea why?\n\nr? @Centril\n\nCc https://github.com/rust-lang/rust/issues/66075\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9db3fddfe984418343b2d527288337715a40693c", "html_url": "https://github.com/rust-lang/rust/commit/9db3fddfe984418343b2d527288337715a40693c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9db3fddfe984418343b2d527288337715a40693c/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f16660943322d3fc3c4747eca6e757a3f7d60e50", "url": "https://api.github.com/repos/rust-lang/rust/commits/f16660943322d3fc3c4747eca6e757a3f7d60e50", "html_url": "https://github.com/rust-lang/rust/commit/f16660943322d3fc3c4747eca6e757a3f7d60e50"}, {"sha": "769d52774b9d94a5120dc34e2ea03971047d1c7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/769d52774b9d94a5120dc34e2ea03971047d1c7c", "html_url": "https://github.com/rust-lang/rust/commit/769d52774b9d94a5120dc34e2ea03971047d1c7c"}], "stats": {"total": 35, "additions": 16, "deletions": 19}, "files": [{"sha": "e05b40052ee769cf81e05b2be117807fc24ac7e0", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9db3fddfe984418343b2d527288337715a40693c/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9db3fddfe984418343b2d527288337715a40693c/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=9db3fddfe984418343b2d527288337715a40693c", "patch": "@@ -256,6 +256,7 @@ impl<T> MaybeUninit<T> {\n     /// [type]: union.MaybeUninit.html\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n     #[inline(always)]\n+    #[cfg_attr(all(not(bootstrap)), rustc_diagnostic_item = \"maybe_uninit_uninit\")]\n     pub const fn uninit() -> MaybeUninit<T> {\n         MaybeUninit { uninit: () }\n     }\n@@ -339,6 +340,7 @@ impl<T> MaybeUninit<T> {\n     /// ```\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n     #[inline]\n+    #[cfg_attr(all(not(bootstrap)), rustc_diagnostic_item = \"maybe_uninit_zeroed\")]\n     pub fn zeroed() -> MaybeUninit<T> {\n         let mut u = MaybeUninit::<T>::uninit();\n         unsafe {"}, {"sha": "dc7c36ff03c4e07062bf06e34103ce38be849160", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9db3fddfe984418343b2d527288337715a40693c/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9db3fddfe984418343b2d527288337715a40693c/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=9db3fddfe984418343b2d527288337715a40693c", "patch": "@@ -468,6 +468,7 @@ pub const fn needs_drop<T>() -> bool {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated_in_future)]\n #[allow(deprecated)]\n+#[cfg_attr(all(not(bootstrap)), rustc_diagnostic_item = \"mem_zeroed\")]\n pub unsafe fn zeroed<T>() -> T {\n     intrinsics::panic_if_uninhabited::<T>();\n     intrinsics::init()\n@@ -496,6 +497,7 @@ pub unsafe fn zeroed<T>() -> T {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated_in_future)]\n #[allow(deprecated)]\n+#[cfg_attr(all(not(bootstrap)), rustc_diagnostic_item = \"mem_uninitialized\")]\n pub unsafe fn uninitialized<T>() -> T {\n     intrinsics::panic_if_uninhabited::<T>();\n     intrinsics::uninit()"}, {"sha": "9d1fa4613b8d4dfce171672a9bf69b6186678104", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9db3fddfe984418343b2d527288337715a40693c/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9db3fddfe984418343b2d527288337715a40693c/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=9db3fddfe984418343b2d527288337715a40693c", "patch": "@@ -1903,29 +1903,23 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidValue {\n \n         /// Determine if this expression is a \"dangerous initialization\".\n         fn is_dangerous_init(cx: &LateContext<'_, '_>, expr: &hir::Expr) -> Option<InitKind> {\n-            const ZEROED_PATH: &[Symbol] = &[sym::core, sym::mem, sym::zeroed];\n-            const UININIT_PATH: &[Symbol] = &[sym::core, sym::mem, sym::uninitialized];\n             // `transmute` is inside an anonymous module (the `extern` block?);\n             // `Invalid` represents the empty string and matches that.\n+            // FIXME(#66075): use diagnostic items.  Somehow, that does not seem to work\n+            // on intrinsics right now.\n             const TRANSMUTE_PATH: &[Symbol] =\n                 &[sym::core, sym::intrinsics, kw::Invalid, sym::transmute];\n-            const MU_ZEROED_PATH: &[Symbol] =\n-                &[sym::core, sym::mem, sym::maybe_uninit, sym::MaybeUninit, sym::zeroed];\n-            const MU_UNINIT_PATH: &[Symbol] =\n-                &[sym::core, sym::mem, sym::maybe_uninit, sym::MaybeUninit, sym::uninit];\n \n             if let hir::ExprKind::Call(ref path_expr, ref args) = expr.kind {\n                 // Find calls to `mem::{uninitialized,zeroed}` methods.\n                 if let hir::ExprKind::Path(ref qpath) = path_expr.kind {\n                     let def_id = cx.tables.qpath_res(qpath, path_expr.hir_id).opt_def_id()?;\n \n-                    if cx.match_def_path(def_id, ZEROED_PATH) {\n+                    if cx.tcx.is_diagnostic_item(sym::mem_zeroed, def_id) {\n                         return Some(InitKind::Zeroed);\n-                    }\n-                    if cx.match_def_path(def_id, UININIT_PATH) {\n+                    } else if cx.tcx.is_diagnostic_item(sym::mem_uninitialized, def_id) {\n                         return Some(InitKind::Uninit);\n-                    }\n-                    if cx.match_def_path(def_id, TRANSMUTE_PATH) {\n+                    } else if cx.match_def_path(def_id, TRANSMUTE_PATH) {\n                         if is_zero(&args[0]) {\n                             return Some(InitKind::Zeroed);\n                         }\n@@ -1940,9 +1934,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidValue {\n                     if let hir::ExprKind::Call(ref path_expr, _) = args[0].kind {\n                         if let hir::ExprKind::Path(ref qpath) = path_expr.kind {\n                             let def_id = cx.tables.qpath_res(qpath, path_expr.hir_id).opt_def_id()?;\n-                            if cx.match_def_path(def_id, MU_ZEROED_PATH) {\n+\n+                            if cx.tcx.is_diagnostic_item(sym::maybe_uninit_zeroed, def_id) {\n                                 return Some(InitKind::Zeroed);\n-                            } else if cx.match_def_path(def_id, MU_UNINIT_PATH) {\n+                            } else if cx.tcx.is_diagnostic_item(sym::maybe_uninit_uninit, def_id) {\n                                 return Some(InitKind::Uninit);\n                             }\n                         }"}, {"sha": "f07d56e7ea25cb944d7008340be53f29edbd08b4", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9db3fddfe984418343b2d527288337715a40693c/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9db3fddfe984418343b2d527288337715a40693c/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=9db3fddfe984418343b2d527288337715a40693c", "patch": "@@ -418,9 +418,10 @@ symbols! {\n         match_beginning_vert,\n         match_default_bindings,\n         may_dangle,\n-        maybe_uninit,\n-        MaybeUninit,\n-        mem,\n+        maybe_uninit_uninit,\n+        maybe_uninit_zeroed,\n+        mem_uninitialized,\n+        mem_zeroed,\n         member_constraints,\n         message,\n         meta,\n@@ -713,8 +714,6 @@ symbols! {\n         underscore_imports,\n         underscore_lifetimes,\n         uniform_paths,\n-        uninit,\n-        uninitialized,\n         universal_impl_trait,\n         unmarked_api,\n         unreachable_code,\n@@ -745,7 +744,6 @@ symbols! {\n         windows,\n         windows_subsystem,\n         Yield,\n-        zeroed,\n     }\n }\n "}]}