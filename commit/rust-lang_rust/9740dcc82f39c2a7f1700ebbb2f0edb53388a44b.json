{"sha": "9740dcc82f39c2a7f1700ebbb2f0edb53388a44b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NDBkY2M4MmYzOWMyYTdmMTcwMGViYmIyZjBlZGI1MzM4OGE0NGI=", "commit": {"author": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-06-29T14:45:41Z"}, "committer": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-07-08T16:55:49Z"}, "message": "Add natvis for Atomic types", "tree": {"sha": "8ed796e67a79cb6ab28432731712eb3c1656ba1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ed796e67a79cb6ab28432731712eb3c1656ba1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9740dcc82f39c2a7f1700ebbb2f0edb53388a44b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9740dcc82f39c2a7f1700ebbb2f0edb53388a44b", "html_url": "https://github.com/rust-lang/rust/commit/9740dcc82f39c2a7f1700ebbb2f0edb53388a44b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9740dcc82f39c2a7f1700ebbb2f0edb53388a44b/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07f1e6152c5aab4490975d53e2da442a4e827fc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/07f1e6152c5aab4490975d53e2da442a4e827fc5", "html_url": "https://github.com/rust-lang/rust/commit/07f1e6152c5aab4490975d53e2da442a4e827fc5"}], "stats": {"total": 104, "additions": 101, "deletions": 3}, "files": [{"sha": "b5899cf9319d8e02b8807d543b665845d6624534", "filename": "src/etc/natvis/libcore.natvis", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9740dcc82f39c2a7f1700ebbb2f0edb53388a44b/src%2Fetc%2Fnatvis%2Flibcore.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/9740dcc82f39c2a7f1700ebbb2f0edb53388a44b/src%2Fetc%2Fnatvis%2Flibcore.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Flibcore.natvis?ref=9740dcc82f39c2a7f1700ebbb2f0edb53388a44b", "patch": "@@ -61,4 +61,38 @@\n       <Item Name=\"[value]\">*pointer</Item>\n     </Expand>\n   </Type>\n-</AutoVisualizer>\n\\ No newline at end of file\n+\n+  <Type Name=\"core::sync::atomic::AtomicBool\">\n+    <DisplayString>{(bool)v.value}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::sync::atomic::AtomicI8\">\n+    <DisplayString>{v.value}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::sync::atomic::AtomicI16\">\n+    <DisplayString>{v.value}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::sync::atomic::AtomicI32\">\n+    <DisplayString>{v.value}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::sync::atomic::AtomicI64\">\n+    <DisplayString>{v.value}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::sync::atomic::AtomicIsize\">\n+    <DisplayString>{v.value}</DisplayString>\n+  </Type>\n+    <Type Name=\"core::sync::atomic::AtomicU8\">\n+    <DisplayString>{v.value}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::sync::atomic::AtomicU16\">\n+    <DisplayString>{v.value}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::sync::atomic::AtomicU32\">\n+    <DisplayString>{v.value}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::sync::atomic::AtomicU64\">\n+    <DisplayString>{v.value}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::sync::atomic::AtomicUsize\">\n+    <DisplayString>{v.value}</DisplayString>\n+  </Type>\n+</AutoVisualizer>"}, {"sha": "2eae9239b6118018d0a504441d9b8f704f4a4dd7", "filename": "src/test/debuginfo/numeric-types.rs", "status": "modified", "additions": 66, "deletions": 2, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/9740dcc82f39c2a7f1700ebbb2f0edb53388a44b/src%2Ftest%2Fdebuginfo%2Fnumeric-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9740dcc82f39c2a7f1700ebbb2f0edb53388a44b/src%2Ftest%2Fdebuginfo%2Fnumeric-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fnumeric-types.rs?ref=9740dcc82f39c2a7f1700ebbb2f0edb53388a44b", "patch": "@@ -1,8 +1,8 @@\n // only-cdb\n // compile-flags:-g\n \n-// Tests the visualizations for `NonZero{I,U}{8,16,32,64,128,size}` and `Wrapping<T>` in\n-// `libcore.natvis`.\n+// Tests the visualizations for `NonZero{I,U}{8,16,32,64,128,size}`, `Wrapping<T>` and\n+// `Atomic{Bool,I8,I16,I32,I64,Isize,U8,U16,U32,U64,Usize}` located in `libcore.natvis`.\n \n // === CDB TESTS ==================================================================================\n // cdb-command: g\n@@ -105,7 +105,56 @@\n // cdb-check:w_usize          : 0x78 [Type: core::num::wrapping::Wrapping<usize>]\n // cdb-check:    [<Raw View>]     [Type: core::num::wrapping::Wrapping<usize>]\n \n+// cdb-command: dx a_bool_t\n+// cdb-check:a_bool_t         : true [Type: core::sync::atomic::AtomicBool]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicBool]\n+\n+// cdb-command: dx a_bool_f\n+// cdb-check:a_bool_f         : false [Type: core::sync::atomic::AtomicBool]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicBool]\n+\n+// cdb-command: dx a_i8\n+// cdb-check:a_i8             : 2 [Type: core::sync::atomic::AtomicI8]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicI8]\n+\n+// cdb-command: dx a_i16\n+// cdb-check:a_i16            : 4 [Type: core::sync::atomic::AtomicI16]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicI16]\n+\n+// cdb-command: dx a_i32\n+// cdb-check:a_i32            : 8 [Type: core::sync::atomic::AtomicI32]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicI32]\n+\n+// cdb-command: dx a_i64\n+// cdb-check:a_i64            : 16 [Type: core::sync::atomic::AtomicI64]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicI64]\n+\n+// cdb-command: dx a_isize\n+// cdb-check:a_isize          : 32 [Type: core::sync::atomic::AtomicIsize]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicIsize]\n+\n+// cdb-command: dx a_u8\n+// cdb-check:a_u8             : 0x40 [Type: core::sync::atomic::AtomicU8]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicU8]\n+\n+// cdb-command: dx a_u16\n+// cdb-check:a_u16            : 0x80 [Type: core::sync::atomic::AtomicU16]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicU16]\n+\n+// cdb-command: dx a_u32\n+// cdb-check:a_u32            : 0x100 [Type: core::sync::atomic::AtomicU32]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicU32]\n+\n+// cdb-command: dx a_u64\n+// cdb-check:a_u64            : 0x200 [Type: core::sync::atomic::AtomicU64]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicU64]\n+\n+// cdb-command: dx a_usize\n+// cdb-check:a_usize          : 0x400 [Type: core::sync::atomic::AtomicUsize]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicUsize]\n+\n use std::num::*;\n+use std::sync::atomic::*;\n \n fn main() {\n     let nz_i8 = NonZeroI8::new(11).unwrap();\n@@ -136,6 +185,21 @@ fn main() {\n     let w_u128 = Wrapping(110u128);\n     let w_usize = Wrapping(120usize);\n \n+    let a_bool_t = AtomicBool::new(true);\n+    let a_bool_f = AtomicBool::new(false);\n+\n+    let a_i8 = AtomicI8::new(2);\n+    let a_i16 = AtomicI16::new(4);\n+    let a_i32 = AtomicI32::new(8);\n+    let a_i64 = AtomicI64::new(16);\n+    let a_isize = AtomicIsize::new(32);\n+\n+    let a_u8 = AtomicU8::new(64);\n+    let a_u16 = AtomicU16::new(128);\n+    let a_u32 = AtomicU32::new(256);\n+    let a_u64 = AtomicU64::new(512);\n+    let a_usize = AtomicUsize::new(1024);\n+\n     zzz(); // #break\n }\n "}]}