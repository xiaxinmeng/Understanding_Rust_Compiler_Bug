{"sha": "de10abf50c514ca648eb3bdcbc912d46b7eb32a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMTBhYmY1MGM1MTRjYTY0OGViM2JkY2JjOTEyZDQ2YjdlYjMyYTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-01T18:52:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-01T18:52:30Z"}, "message": "Auto merge of #75016 - Manishearth:rollup-x553g7j, r=Manishearth\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #74977 (Clean up E0741 error explanation)\n - #74981 (Some fixes for `plugin.md` in unstable-book)\n - #74983 (Replace a recursive algorithm with an iterative one and a stack.)\n - #74995 (Update the WASI libc build to LLVM 10.)\n - #74996 (submodules: update cargo from 974eb438d to 2d5c2381e)\n - #75007 (Clean up E0743 explanation)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "87c1c6b8bc8c3d0b7b3cc234a66a58b24db5c0c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87c1c6b8bc8c3d0b7b3cc234a66a58b24db5c0c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de10abf50c514ca648eb3bdcbc912d46b7eb32a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de10abf50c514ca648eb3bdcbc912d46b7eb32a6", "html_url": "https://github.com/rust-lang/rust/commit/de10abf50c514ca648eb3bdcbc912d46b7eb32a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de10abf50c514ca648eb3bdcbc912d46b7eb32a6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfdf9d335501cc0a53ae69c940095cca7d4be0f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfdf9d335501cc0a53ae69c940095cca7d4be0f8", "html_url": "https://github.com/rust-lang/rust/commit/cfdf9d335501cc0a53ae69c940095cca7d4be0f8"}, {"sha": "2e53ac53e7e760d46f47a3aed806b172ccffd88d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e53ac53e7e760d46f47a3aed806b172ccffd88d", "html_url": "https://github.com/rust-lang/rust/commit/2e53ac53e7e760d46f47a3aed806b172ccffd88d"}], "stats": {"total": 130, "additions": 74, "deletions": 56}, "files": [{"sha": "c6db200f8660f36f5e3e36faf4e3692ab83ab551", "filename": "src/ci/docker/host-x86_64/dist-various-2/build-wasi-toolchain.sh", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de10abf50c514ca648eb3bdcbc912d46b7eb32a6/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2Fbuild-wasi-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/de10abf50c514ca648eb3bdcbc912d46b7eb32a6/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2Fbuild-wasi-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2Fbuild-wasi-toolchain.sh?ref=de10abf50c514ca648eb3bdcbc912d46b7eb32a6", "patch": "@@ -4,10 +4,10 @@\n \n set -ex\n \n-# Originally from https://releases.llvm.org/9.0.0/clang+llvm-9.0.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz\n-curl https://ci-mirrors.rust-lang.org/rustc/clang%2Bllvm-9.0.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz | \\\n+# Originally from https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/clang+llvm-10.0.0-x86_64-linux-gnu-ubuntu-18.04.tar.xz\n+curl https://ci-mirrors.rust-lang.org/rustc/clang%2Bllvm-10.0.0-x86_64-linux-gnu-ubuntu-18.04.tar.xz | \\\n   tar xJf -\n-export PATH=`pwd`/clang+llvm-9.0.0-x86_64-linux-gnu-ubuntu-14.04/bin:$PATH\n+export PATH=`pwd`/clang+llvm-10.0.0-x86_64-linux-gnu-ubuntu-18.04/bin:$PATH\n \n git clone https://github.com/WebAssembly/wasi-libc\n "}, {"sha": "38351131527620509fe45e6997489e54aa0406ab", "filename": "src/doc/unstable-book/src/language-features/plugin.md", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/de10abf50c514ca648eb3bdcbc912d46b7eb32a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "raw_url": "https://github.com/rust-lang/rust/raw/de10abf50c514ca648eb3bdcbc912d46b7eb32a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md?ref=de10abf50c514ca648eb3bdcbc912d46b7eb32a6", "patch": "@@ -45,42 +45,40 @@ that warns about any item named `lintme`.\n extern crate rustc_ast;\n \n // Load rustc as a plugin to get macros\n-#[macro_use]\n-extern crate rustc;\n extern crate rustc_driver;\n+#[macro_use]\n+extern crate rustc_lint;\n+#[macro_use]\n+extern crate rustc_session;\n \n-use rustc::lint::{EarlyContext, LintContext, LintPass, EarlyLintPass,\n-                  EarlyLintPassObject, LintArray};\n use rustc_driver::plugin::Registry;\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n use rustc_ast::ast;\n-\n declare_lint!(TEST_LINT, Warn, \"Warn about items named 'lintme'\");\n \n-struct Pass;\n-\n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(TEST_LINT)\n-    }\n-}\n+declare_lint_pass!(Pass => [TEST_LINT]);\n \n impl EarlyLintPass for Pass {\n     fn check_item(&mut self, cx: &EarlyContext, it: &ast::Item) {\n-        if it.ident.as_str() == \"lintme\" {\n-            cx.span_lint(TEST_LINT, it.span, \"item is named 'lintme'\");\n+        if it.ident.name.as_str() == \"lintme\" {\n+            cx.lint(TEST_LINT, |lint| {\n+                lint.build(\"item is named 'lintme'\").set_span(it.span).emit()\n+            });\n         }\n     }\n }\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_early_lint_pass(box Pass as EarlyLintPassObject);\n+    reg.lint_store.register_lints(&[&TEST_LINT]);\n+    reg.lint_store.register_early_pass(|| box Pass);\n }\n ```\n \n Then code like\n \n ```rust,ignore\n+#![feature(plugin)]\n #![plugin(lint_plugin_test)]\n \n fn lintme() { }\n@@ -107,7 +105,7 @@ The components of a lint plugin are:\n \n Lint passes are syntax traversals, but they run at a late stage of compilation\n where type information is available. `rustc`'s [built-in\n-lints](https://github.com/rust-lang/rust/blob/master/src/librustc/lint/builtin.rs)\n+lints](https://github.com/rust-lang/rust/blob/master/src/librustc_session/lint/builtin.rs)\n mostly use the same infrastructure as lint plugins, and provide examples of how\n to access type information.\n "}, {"sha": "91379bfe05c65fe5122667d9b81b85a33d06473e", "filename": "src/librustc_error_codes/error_codes/E0741.md", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/de10abf50c514ca648eb3bdcbc912d46b7eb32a6/src%2Flibrustc_error_codes%2Ferror_codes%2FE0741.md", "raw_url": "https://github.com/rust-lang/rust/raw/de10abf50c514ca648eb3bdcbc912d46b7eb32a6/src%2Flibrustc_error_codes%2Ferror_codes%2FE0741.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0741.md?ref=de10abf50c514ca648eb3bdcbc912d46b7eb32a6", "patch": "@@ -1,5 +1,6 @@\n-Only structural-match types (that is, types that derive `PartialEq` and `Eq`)\n-may be used as the types of const generic parameters.\n+A non-structural-match type was used as the type of a const generic parameter.\n+\n+Erroneous code example:\n \n ```compile_fail,E0741\n #![feature(const_generics)]\n@@ -9,12 +10,15 @@ struct A;\n struct B<const X: A>; // error!\n ```\n \n-To fix this example, we derive `PartialEq` and `Eq`.\n+Only structural-match types (that is, types that derive `PartialEq` and `Eq`)\n+may be used as the types of const generic parameters.\n+\n+To fix the previous code example, we derive `PartialEq` and `Eq`:\n \n ```\n #![feature(const_generics)]\n \n-#[derive(PartialEq, Eq)]\n+#[derive(PartialEq, Eq)] // We derive both traits here.\n struct A;\n \n struct B<const X: A>; // ok!"}, {"sha": "ddd3136df0c39c67da43b73c5e02ad8782931123", "filename": "src/librustc_error_codes/error_codes/E0743.md", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/de10abf50c514ca648eb3bdcbc912d46b7eb32a6/src%2Flibrustc_error_codes%2Ferror_codes%2FE0743.md", "raw_url": "https://github.com/rust-lang/rust/raw/de10abf50c514ca648eb3bdcbc912d46b7eb32a6/src%2Flibrustc_error_codes%2Ferror_codes%2FE0743.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0743.md?ref=de10abf50c514ca648eb3bdcbc912d46b7eb32a6", "patch": "@@ -8,10 +8,9 @@ Erroneous code example:\n fn foo2(x: u8, y: &...) {} // error!\n ```\n \n-Only foreign functions can use the C-variadic type (`...`).\n-In such functions, `...` may only occur non-nested.\n-That is, `y: &'a ...` is not allowed.\n+Only foreign functions can use the C-variadic type (`...`). In such functions,\n+`...` may only occur non-nested. That is, `y: &'a ...` is not allowed.\n \n-A C-variadic type is used to give an undefined number\n-of parameters to a given function (like `printf` in C).\n-The equivalent in Rust would be to use macros directly.\n+A C-variadic type is used to give an undefined number of parameters to a given\n+function (like `printf` in C). The equivalent in Rust would be to use macros\n+directly (like `println!` for example)."}, {"sha": "9288d6e16f5e079e8937a78c521102d1944bb91e", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 43, "deletions": 26, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/de10abf50c514ca648eb3bdcbc912d46b7eb32a6/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de10abf50c514ca648eb3bdcbc912d46b7eb32a6/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=de10abf50c514ca648eb3bdcbc912d46b7eb32a6", "patch": "@@ -33,6 +33,7 @@ use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::mir::visit::{MutVisitor, MutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n+use smallvec::SmallVec;\n use std::borrow::Cow;\n \n pub struct SimplifyCfg {\n@@ -172,9 +173,12 @@ impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n         }\n     }\n \n-    // Collapse a goto chain starting from `start`\n-    fn collapse_goto_chain(&mut self, start: &mut BasicBlock, changed: &mut bool) {\n-        let mut terminator = match self.basic_blocks[*start] {\n+    /// This function will return `None` if\n+    /// * the block has statements\n+    /// * the block has a terminator other than `goto`\n+    /// * the block has no terminator (meaning some other part of the current optimization stole it)\n+    fn take_terminator_if_simple_goto(&mut self, bb: BasicBlock) -> Option<Terminator<'tcx>> {\n+        match self.basic_blocks[bb] {\n             BasicBlockData {\n                 ref statements,\n                 terminator:\n@@ -183,32 +187,45 @@ impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n             } if statements.is_empty() => terminator.take(),\n             // if `terminator` is None, this means we are in a loop. In that\n             // case, let all the loop collapse to its entry.\n-            _ => return,\n-        };\n-\n-        let target = match terminator {\n-            Some(Terminator { kind: TerminatorKind::Goto { ref mut target }, .. }) => {\n-                self.collapse_goto_chain(target, changed);\n-                *target\n-            }\n-            _ => unreachable!(),\n-        };\n-        self.basic_blocks[*start].terminator = terminator;\n-\n-        debug!(\"collapsing goto chain from {:?} to {:?}\", *start, target);\n-\n-        *changed |= *start != target;\n+            _ => None,\n+        }\n+    }\n \n-        if self.pred_count[*start] == 1 {\n-            // This is the last reference to *start, so the pred-count to\n-            // to target is moved into the current block.\n-            self.pred_count[*start] = 0;\n-        } else {\n-            self.pred_count[target] += 1;\n-            self.pred_count[*start] -= 1;\n+    /// Collapse a goto chain starting from `start`\n+    fn collapse_goto_chain(&mut self, start: &mut BasicBlock, changed: &mut bool) {\n+        // Using `SmallVec` here, because in some logs on libcore oli-obk saw many single-element\n+        // goto chains. We should probably benchmark different sizes.\n+        let mut terminators: SmallVec<[_; 1]> = Default::default();\n+        let mut current = *start;\n+        while let Some(terminator) = self.take_terminator_if_simple_goto(current) {\n+            let target = match terminator {\n+                Terminator { kind: TerminatorKind::Goto { target }, .. } => target,\n+                _ => unreachable!(),\n+            };\n+            terminators.push((current, terminator));\n+            current = target;\n         }\n+        let last = current;\n+        *start = last;\n+        while let Some((current, mut terminator)) = terminators.pop() {\n+            let target = match terminator {\n+                Terminator { kind: TerminatorKind::Goto { ref mut target }, .. } => target,\n+                _ => unreachable!(),\n+            };\n+            *target = last;\n+            debug!(\"collapsing goto chain from {:?} to {:?}\", current, target);\n \n-        *start = target;\n+            if self.pred_count[current] == 1 {\n+                // This is the last reference to current, so the pred-count to\n+                // to target is moved into the current block.\n+                self.pred_count[current] = 0;\n+            } else {\n+                self.pred_count[*target] += 1;\n+                self.pred_count[current] -= 1;\n+            }\n+            *changed = true;\n+            self.basic_blocks[current].terminator = Some(terminator);\n+        }\n     }\n \n     // merge a block with 1 `goto` predecessor to its parent"}, {"sha": "2d5c2381e4e50484bf281fc1bfe19743aa9eb37a", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=de10abf50c514ca648eb3bdcbc912d46b7eb32a6", "patch": "@@ -1 +1 @@\n-Subproject commit 974eb438da8ced6e3becda2bbf63d9b643eacdeb\n+Subproject commit 2d5c2381e4e50484bf281fc1bfe19743aa9eb37a"}]}