{"sha": "dad945646fe7ec6592adfdf21b4bc464ac5c1fe7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZDk0NTY0NmZlN2VjNjU5MmFkZmRmMjFiNGJjNDY0YWM1YzFmZTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-02T22:49:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-02T22:49:30Z"}, "message": "auto merge of #6879 : yichoi/rust/arm-test, r=brson\n\nFix #6353 and better support for ARM Test", "tree": {"sha": "d7ec59405273d7ded05f08ec16e1ce38320fd756", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7ec59405273d7ded05f08ec16e1ce38320fd756"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dad945646fe7ec6592adfdf21b4bc464ac5c1fe7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dad945646fe7ec6592adfdf21b4bc464ac5c1fe7", "html_url": "https://github.com/rust-lang/rust/commit/dad945646fe7ec6592adfdf21b4bc464ac5c1fe7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dad945646fe7ec6592adfdf21b4bc464ac5c1fe7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63b11e48e5302cf9351c84f6e3421da2b0f8d656", "url": "https://api.github.com/repos/rust-lang/rust/commits/63b11e48e5302cf9351c84f6e3421da2b0f8d656", "html_url": "https://github.com/rust-lang/rust/commit/63b11e48e5302cf9351c84f6e3421da2b0f8d656"}, {"sha": "18bee38bbea9ffc784a5857b6f819b1b529b22fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/18bee38bbea9ffc784a5857b6f819b1b529b22fc", "html_url": "https://github.com/rust-lang/rust/commit/18bee38bbea9ffc784a5857b6f819b1b529b22fc"}], "stats": {"total": 124, "additions": 89, "deletions": 35}, "files": [{"sha": "3858de3f264df46d56d162369ea03508fb8a2f26", "filename": "mk/tests.mk", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dad945646fe7ec6592adfdf21b4bc464ac5c1fe7/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/dad945646fe7ec6592adfdf21b4bc464ac5c1fe7/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=dad945646fe7ec6592adfdf21b4bc464ac5c1fe7", "patch": "@@ -122,8 +122,18 @@ CFG_ADB_TEST_DIR=/data/tmp\n $(info check: android device test dir $(CFG_ADB_TEST_DIR) ready \\\n  $(shell adb remount 1>/dev/null) \\\n  $(shell adb shell mkdir $(CFG_ADB_TEST_DIR) 1>/dev/null) \\\n+ $(shell adb shell rm $(CFG_ADB_TEST_DIR)/*.so 1>/dev/null) \\\n+ $(shell adb shell rm $(CFG_ADB_TEST_DIR)/*-arm-linux-androideabi 1>/dev/null) \\\n+ $(shell adb shell rm $(CFG_ADB_TEST_DIR)/*-arm-linux-androideabi.* 1>/dev/null) \\\n+ $(shell adb push $(S)src/etc/adb_run_wrapper.sh $(CFG_ADB_TEST_DIR) 1>/dev/null) \\\n  $(shell adb push $(CFG_ANDROID_CROSS_PATH)/arm-linux-androideabi/lib/armv7-a/libgnustl_shared.so \\\n                   $(CFG_ADB_TEST_DIR) 1>/dev/null) \\\n+ $(shell adb push $(TLIB2_T_arm-linux-androideabi_H_$(CFG_BUILD_TRIPLE))/$(CFG_RUNTIME_arm-linux-androideabi) \\\n+                  $(CFG_ADB_TEST_DIR)) \\\n+ $(shell adb push $(TLIB2_T_arm-linux-androideabi_H_$(CFG_BUILD_TRIPLE))/$(STDLIB_GLOB_arm-linux-androideabi) \\\n+                  $(CFG_ADB_TEST_DIR)) \\\n+ $(shell adb push $(TLIB2_T_arm-linux-androideabi_H_$(CFG_BUILD_TRIPLE))/$(EXTRALIB_GLOB_arm-linux-androideabi) \\\n+                  $(CFG_ADB_TEST_DIR)) \\\n  )\n else\n CFG_ADB_TEST_DIR="}, {"sha": "c174057aaaa8568571cccdd41fbbfac9a65774da", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 44, "deletions": 35, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/dad945646fe7ec6592adfdf21b4bc464ac5c1fe7/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad945646fe7ec6592adfdf21b4bc464ac5c1fe7/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=dad945646fe7ec6592adfdf21b4bc464ac5c1fe7", "patch": "@@ -753,53 +753,62 @@ fn _arm_exec_compiled_test(config: &config, props: &TestProps,\n             copy_result.out, copy_result.err));\n     }\n \n-    // execute program\n     logv(config, fmt!(\"executing (%s) %s\", config.target, cmdline));\n \n-    // adb shell dose not forward stdout and stderr of internal result\n-    // to stdout and stderr separately but to stdout only\n-    let mut newargs_out = ~[];\n-    let mut newargs_err = ~[];\n-    newargs_out.push(~\"shell\");\n-    newargs_err.push(~\"shell\");\n+    let mut runargs = ~[];\n \n-    let mut newcmd_out = ~\"\";\n-    let mut newcmd_err = ~\"\";\n+    // run test via adb_run_wrapper\n+    runargs.push(~\"shell\");\n+    runargs.push(fmt!(\"%s/adb_run_wrapper.sh\", config.adb_test_dir));\n+    runargs.push(fmt!(\"%s\", config.adb_test_dir));\n+    runargs.push(fmt!(\"%s\", prog_short));\n \n-    newcmd_out.push_str(fmt!(\"LD_LIBRARY_PATH=%s %s/%s\",\n-        config.adb_test_dir, config.adb_test_dir, prog_short));\n+    for args.args.each |tv| {\n+        runargs.push(tv.to_owned());\n+    }\n \n-    newcmd_err.push_str(fmt!(\"LD_LIBRARY_PATH=%s %s/%s\",\n-        config.adb_test_dir, config.adb_test_dir, prog_short));\n+    procsrv::run(\"\", config.adb_path, runargs, ~[(~\"\",~\"\")], Some(~\"\"));\n \n-    for args.args.each |tv| {\n-        newcmd_out.push_str(\" \");\n-        newcmd_err.push_str(\" \");\n-        newcmd_out.push_str(*tv);\n-        newcmd_err.push_str(*tv);\n+    // get exitcode of result\n+    runargs = ~[];\n+    runargs.push(~\"shell\");\n+    runargs.push(~\"cat\");\n+    runargs.push(fmt!(\"%s/%s.exitcode\", config.adb_test_dir, prog_short));\n+\n+    let procsrv::Result{ out: exitcode_out, err: _, status: _ } =\n+        procsrv::run(\"\", config.adb_path, runargs, ~[(~\"\",~\"\")],\n+                     Some(~\"\"));\n+\n+    let mut exitcode : int = 0;\n+    for str::each_char(exitcode_out) |c| {\n+        if !c.is_digit() { break; }\n+        exitcode = exitcode * 10 + match c {\n+            '0' .. '9' => c as int - ('0' as int),\n+            _ => 101,\n+        }\n     }\n \n-    newcmd_out.push_str(\" 2>/dev/null\");\n-    newcmd_err.push_str(\" 1>/dev/null\");\n+    // get stdout of result\n+    runargs = ~[];\n+    runargs.push(~\"shell\");\n+    runargs.push(~\"cat\");\n+    runargs.push(fmt!(\"%s/%s.stdout\", config.adb_test_dir, prog_short));\n \n-    newargs_out.push(newcmd_out);\n-    newargs_err.push(newcmd_err);\n+    let procsrv::Result{ out: stdout_out, err: _, status: _ } =\n+        procsrv::run(\"\", config.adb_path, runargs, ~[(~\"\",~\"\")], Some(~\"\"));\n \n-    let procsrv::Result{ out: out_out, err: _out_err, status: out_status } =\n-            procsrv::run(\"\", config.adb_path, newargs_out, ~[(~\"\",~\"\")],\n-                         Some(~\"\"));\n-    let procsrv::Result{ out: err_out, err: _err_err, status: _err_status } =\n-            procsrv::run(\"\", config.adb_path, newargs_err, ~[(~\"\",~\"\")],\n-                         Some(~\"\"));\n+    // get stderr of result\n+    runargs = ~[];\n+    runargs.push(~\"shell\");\n+    runargs.push(~\"cat\");\n+    runargs.push(fmt!(\"%s/%s.stderr\", config.adb_test_dir, prog_short));\n \n-    dump_output(config, testfile, out_out, err_out);\n+    let procsrv::Result{ out: stderr_out, err: _, status: _ } =\n+        procsrv::run(\"\", config.adb_path, runargs, ~[(~\"\",~\"\")], Some(~\"\"));\n \n-    match err_out {\n-        ~\"\" => ProcRes {status: out_status, stdout: out_out,\n-            stderr: err_out, cmdline: cmdline },\n-        _   => ProcRes {status: 101, stdout: out_out,\n-            stderr: err_out, cmdline: cmdline }\n-    }\n+    dump_output(config, testfile, stdout_out, stderr_out);\n+\n+    ProcRes {status: exitcode, stdout: stdout_out, stderr: stderr_out, cmdline: cmdline }\n }\n \n fn _dummy_exec_compiled_test(config: &config, props: &TestProps,"}, {"sha": "68ac6b4242c3e9f4610279195d147b128eca7e58", "filename": "src/etc/adb_run_wrapper.sh", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/dad945646fe7ec6592adfdf21b4bc464ac5c1fe7/src%2Fetc%2Fadb_run_wrapper.sh", "raw_url": "https://github.com/rust-lang/rust/raw/dad945646fe7ec6592adfdf21b4bc464ac5c1fe7/src%2Fetc%2Fadb_run_wrapper.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fadb_run_wrapper.sh?ref=dad945646fe7ec6592adfdf21b4bc464ac5c1fe7", "patch": "@@ -0,0 +1,35 @@\n+#\n+# usage : adb_run_wrapper [test dir - where test executables exist] [test executable]\n+#\n+\n+# Sometimes android shell produce exitcode \"1 : Text File Busy\" \n+# Retry after $WAIT seconds, expecting resource cleaned-up\n+WAIT=10\n+PATH=$1\n+if [ -d \"$PATH\" ]\n+then\n+    shift\n+    RUN=$1\n+\n+    if [ ! -z \"$RUN\" ]\n+    then\n+        shift\n+\n+        L_RET=1\n+        L_COUNT=0\n+        while [ $L_RET -eq 1 ]\n+        do\n+            LD_LIBRARY_PATH=$PATH $PATH/$RUN $@ 1>$PATH/$RUN.stdout 2>$PATH/$RUN.stderr\n+            L_RET=$? \n+            if [ $L_COUNT -gt 0 ]\n+            then\n+               /system/bin/sleep $WAIT\n+               /system/bin/sync\n+            fi\n+            L_COUNT=`expr $L_COUNT+1`\n+        done\n+        \n+        echo $L_RET > $PATH/$RUN.exitcode\n+\n+    fi\n+fi"}]}