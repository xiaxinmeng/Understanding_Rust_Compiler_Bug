{"sha": "1430a600ded4b3697fee8ce16fdb6714dbbc06ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0MzBhNjAwZGVkNGIzNjk3ZmVlOGNlMTZmZGI2NzE0ZGJiYzA2YmE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-05T19:42:56Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-16T10:57:44Z"}, "message": "add method `take_and_reset_region_constraints` to `InferCtxt`", "tree": {"sha": "2d647e86e118215f591252f2d7a8fa459f60400b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d647e86e118215f591252f2d7a8fa459f60400b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1430a600ded4b3697fee8ce16fdb6714dbbc06ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1430a600ded4b3697fee8ce16fdb6714dbbc06ba", "html_url": "https://github.com/rust-lang/rust/commit/1430a600ded4b3697fee8ce16fdb6714dbbc06ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1430a600ded4b3697fee8ce16fdb6714dbbc06ba/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1efcf1a115f4f4501e1a9de1e57dd3b00c0bc863", "url": "https://api.github.com/repos/rust-lang/rust/commits/1efcf1a115f4f4501e1a9de1e57dd3b00c0bc863", "html_url": "https://github.com/rust-lang/rust/commit/1efcf1a115f4f4501e1a9de1e57dd3b00c0bc863"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "21f427fa80c1308fd33e15569f479fd0afdcf534", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1430a600ded4b3697fee8ce16fdb6714dbbc06ba/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1430a600ded4b3697fee8ce16fdb6714dbbc06ba/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=1430a600ded4b3697fee8ce16fdb6714dbbc06ba", "patch": "@@ -16,7 +16,7 @@ pub use self::SubregionOrigin::*;\n pub use self::ValuePairs::*;\n pub use ty::IntVarValue;\n pub use self::freshen::TypeFreshener;\n-pub use self::region_constraints::{GenericKind, VerifyBound};\n+pub use self::region_constraints::{GenericKind, VerifyBound, RegionConstraintData};\n \n use hir::def_id::DefId;\n use middle::free_region::{FreeRegionMap, RegionRelations};\n@@ -1152,6 +1152,20 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    /// Obtains (and clears) the current set of region\n+    /// constraints. The inference context is still usable: further\n+    /// unifications will simply add new constraints.\n+    ///\n+    /// This method is not meant to be used with normal lexical region\n+    /// resolution. Rather, it is used in the NLL mode as a kind of\n+    /// interim hack: basically we run normal type-check and generate\n+    /// region constraints as normal, but then we take them and\n+    /// translate them into the form that the NLL solver\n+    /// understands. See the NLL module for mode details.\n+    pub fn take_and_reset_region_constraints(&self) -> RegionConstraintData<'tcx> {\n+        self.borrow_region_constraints().take_and_reset_data()\n+    }\n+\n     pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {\n         self.resolve_type_vars_if_possible(&t).to_string()\n     }"}, {"sha": "057f1b35ac10909a2c41f2008daabef928b736f6", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1430a600ded4b3697fee8ce16fdb6714dbbc06ba/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1430a600ded4b3697fee8ce16fdb6714dbbc06ba/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=1430a600ded4b3697fee8ce16fdb6714dbbc06ba", "patch": "@@ -285,10 +285,21 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n     }\n \n     /// Once all the constraints have been gathered, extract out the final data.\n+    ///\n+    /// Not legal during a snapshot.\n     pub fn into_origins_and_data(self) -> (VarOrigins, RegionConstraintData<'tcx>) {\n+        assert!(!self.in_snapshot());\n         (self.var_origins, self.data)\n     }\n \n+    /// Takes (and clears) the current set of constraints. Note that the set of\n+    /// variables remains intact.\n+    ///\n+    /// Not legal during a snapshot.\n+    pub fn take_and_reset_data(&mut self) -> RegionConstraintData<'tcx> {\n+        mem::replace(&mut self.data, RegionConstraintData::default())\n+    }\n+\n     fn in_snapshot(&self) -> bool {\n         !self.undo_log.is_empty()\n     }"}]}