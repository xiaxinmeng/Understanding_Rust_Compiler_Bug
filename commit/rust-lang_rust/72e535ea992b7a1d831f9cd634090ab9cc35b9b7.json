{"sha": "72e535ea992b7a1d831f9cd634090ab9cc35b9b7", "node_id": "C_kwDOAAsO6NoAKDcyZTUzNWVhOTkyYjdhMWQ4MzFmOWNkNjM0MDkwYWI5Y2MzNWI5Yjc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-04T16:27:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-04T16:27:46Z"}, "message": "Rollup merge of #109919 - fmease:rustdoc-fix-issue-109488, r=notriddle\n\nrustdoc: escape GAT args in more cases\n\nFixes #109488.\n\nPreviously we printed the *un*escaped form of GAT arguments not only when `f.alternate()` was true but *also* when we failed to compute the URL of the trait associated with the type projection, i.e. when `href(\u2026)` returned an `Err(_)`.\n\nIn this PR the argument printing logic is entirely separate from the link resolution code above as it should be.\nFurther, we now only try to compute the URL if the HTML format was requested with `!f.alternate()`. Before, we would sometimes compute the `href` only to throw it away later.", "tree": {"sha": "404910f90c02ad61182b37a9d4ff4d92029ec188", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/404910f90c02ad61182b37a9d4ff4d92029ec188"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72e535ea992b7a1d831f9cd634090ab9cc35b9b7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkLFACCRBK7hj4Ov3rIwAA9CwIAFt8B02nJh0yO45P7eJJXrI1\nbkCCvxManVTWPzj4dx8EGU+BAw09XCRDHk11Jhs7WgLH+ywWm7vMLR74a50kU/5l\n/n5/MBeu2KVBIHw6UdLr6j06ZpG3K1PxVZaXp2cKoUeaKn9Lw0jMdbX17AbVxhtB\nxU53wJe7D99NnrZOC5bQvNLEyS06zsim2rN7Tur5TWDybOp1ngJDZYFV9YQxhT4G\nDzPUPUKPhJxJTtAmqUUvYDsLEJ1T8WpHAdGXX+ymn4irxYepHIX82nuxQZx9lruc\n7IGDbQftX//PcZhUF0JUigOazvFixuExxwfTelnhhAkaL+K2UiwZx3H4NZd1faY=\n=GNif\n-----END PGP SIGNATURE-----\n", "payload": "tree 404910f90c02ad61182b37a9d4ff4d92029ec188\nparent a5c395ed947daaf5582296188f06171ff12a9240\nparent 6567bc9a4778d44cb46b7732aec6452358c62312\nauthor Michael Goulet <michael@errs.io> 1680625666 -0700\ncommitter GitHub <noreply@github.com> 1680625666 -0700\n\nRollup merge of #109919 - fmease:rustdoc-fix-issue-109488, r=notriddle\n\nrustdoc: escape GAT args in more cases\n\nFixes #109488.\n\nPreviously we printed the *un*escaped form of GAT arguments not only when `f.alternate()` was true but *also* when we failed to compute the URL of the trait associated with the type projection, i.e. when `href(\u2026)` returned an `Err(_)`.\n\nIn this PR the argument printing logic is entirely separate from the link resolution code above as it should be.\nFurther, we now only try to compute the URL if the HTML format was requested with `!f.alternate()`. Before, we would sometimes compute the `href` only to throw it away later.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72e535ea992b7a1d831f9cd634090ab9cc35b9b7", "html_url": "https://github.com/rust-lang/rust/commit/72e535ea992b7a1d831f9cd634090ab9cc35b9b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72e535ea992b7a1d831f9cd634090ab9cc35b9b7/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5c395ed947daaf5582296188f06171ff12a9240", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5c395ed947daaf5582296188f06171ff12a9240", "html_url": "https://github.com/rust-lang/rust/commit/a5c395ed947daaf5582296188f06171ff12a9240"}, {"sha": "6567bc9a4778d44cb46b7732aec6452358c62312", "url": "https://api.github.com/repos/rust-lang/rust/commits/6567bc9a4778d44cb46b7732aec6452358c62312", "html_url": "https://github.com/rust-lang/rust/commit/6567bc9a4778d44cb46b7732aec6452358c62312"}], "stats": {"total": 49, "additions": 33, "deletions": 16}, "files": [{"sha": "02b358e863b66eb808a4d76ce8a2f017a6147677", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/72e535ea992b7a1d831f9cd634090ab9cc35b9b7/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e535ea992b7a1d831f9cd634090ab9cc35b9b7/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=72e535ea992b7a1d831f9cd634090ab9cc35b9b7", "patch": "@@ -1142,22 +1142,21 @@ fn fmt_type<'cx>(\n             //        the ugliness comes from inlining across crates where\n             //        everything comes in as a fully resolved QPath (hard to\n             //        look at).\n-            match href(trait_.def_id(), cx) {\n-                Ok((ref url, _, ref path)) if !f.alternate() => {\n-                    write!(\n-                        f,\n-                        \"<a class=\\\"associatedtype\\\" href=\\\"{url}#{shortty}.{name}\\\" \\\n-                                    title=\\\"type {path}::{name}\\\">{name}</a>{args}\",\n-                        url = url,\n-                        shortty = ItemType::AssocType,\n-                        name = assoc.name,\n-                        path = join_with_double_colon(path),\n-                        args = assoc.args.print(cx),\n-                    )?;\n-                }\n-                _ => write!(f, \"{}{:#}\", assoc.name, assoc.args.print(cx))?,\n-            }\n-            Ok(())\n+            if !f.alternate() && let Ok((url, _, path)) = href(trait_.def_id(), cx) {\n+                write!(\n+                    f,\n+                    \"<a class=\\\"associatedtype\\\" href=\\\"{url}#{shortty}.{name}\\\" \\\n+                                title=\\\"type {path}::{name}\\\">{name}</a>\",\n+                    shortty = ItemType::AssocType,\n+                    name = assoc.name,\n+                    path = join_with_double_colon(&path),\n+                )\n+            } else {\n+                write!(f, \"{}\", assoc.name)\n+            }?;\n+\n+            // Carry `f.alternate()` into this display w/o branching manually.\n+            fmt::Display::fmt(&assoc.args.print(cx), f)\n         }\n     }\n }"}, {"sha": "99ae8a6c36c5203555d16b5752c9b5f7560bea79", "filename": "tests/rustdoc/generic-associated-types/issue-109488.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/72e535ea992b7a1d831f9cd634090ab9cc35b9b7/tests%2Frustdoc%2Fgeneric-associated-types%2Fissue-109488.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e535ea992b7a1d831f9cd634090ab9cc35b9b7/tests%2Frustdoc%2Fgeneric-associated-types%2Fissue-109488.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fgeneric-associated-types%2Fissue-109488.rs?ref=72e535ea992b7a1d831f9cd634090ab9cc35b9b7", "patch": "@@ -0,0 +1,18 @@\n+// Make sure that we escape the arguments of the GAT projection even if we fail to compute\n+// the href of the corresponding trait (in this case it is private).\n+// Further, test that we also linkify the GAT arguments.\n+\n+// @has 'issue_109488/type.A.html'\n+// @has - '//pre[@class=\"rust item-decl\"]' '<S as Tr>::P<Option<i32>>'\n+// @has - '//pre[@class=\"rust item-decl\"]//a[@class=\"enum\"]/@href' '{{channel}}/core/option/enum.Option.html'\n+pub type A = <S as Tr>::P<Option<i32>>;\n+\n+/*private*/ trait Tr {\n+    type P<T>;\n+}\n+\n+pub struct S;\n+\n+impl Tr for S {\n+    type P<T> = ();\n+}"}]}