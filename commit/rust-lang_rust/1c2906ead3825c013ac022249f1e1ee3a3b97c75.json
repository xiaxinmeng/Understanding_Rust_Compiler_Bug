{"sha": "1c2906ead3825c013ac022249f1e1ee3a3b97c75", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMjkwNmVhZDM4MjVjMDEzYWMwMjIyNDlmMWUxZWUzYTNiOTdjNzU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-14T14:56:05Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-15T19:57:12Z"}, "message": "ast/parser: fuse `static` & `const` grammars in all contexts.", "tree": {"sha": "e11037fc02c6232f587f6dc01eab75f0eb20cfc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e11037fc02c6232f587f6dc01eab75f0eb20cfc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c2906ead3825c013ac022249f1e1ee3a3b97c75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c2906ead3825c013ac022249f1e1ee3a3b97c75", "html_url": "https://github.com/rust-lang/rust/commit/1c2906ead3825c013ac022249f1e1ee3a3b97c75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c2906ead3825c013ac022249f1e1ee3a3b97c75/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3e9763543e5828fe9eee7f5e78c88193f5b8ba5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5", "html_url": "https://github.com/rust-lang/rust/commit/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5"}], "stats": {"total": 330, "additions": 205, "deletions": 125}, "files": [{"sha": "813af18c4011f2f1214f3c688fcd7c0a32de95f3", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=1c2906ead3825c013ac022249f1e1ee3a3b97c75", "patch": "@@ -679,7 +679,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n                     hir::ForeignItemKind::Fn(fn_dec, fn_args, generics)\n                 }\n-                ForeignItemKind::Static(ref t, m) => {\n+                ForeignItemKind::Static(ref t, m, _) => {\n                     let ty = self.lower_ty(t, ImplTraitContext::disallowed());\n                     hir::ForeignItemKind::Static(ty, m)\n                 }"}, {"sha": "fd65750367e595d20726dbe573cd2723fda9593b", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=1c2906ead3825c013ac022249f1e1ee3a3b97c75", "patch": "@@ -464,19 +464,22 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    fn check_foreign_ty_bodyless(&self, ident: Ident, body: Option<&Ty>) {\n+    fn check_foreign_kind_bodyless(&self, ident: Ident, kind: &str, body: Option<Span>) {\n         let body = match body {\n             None => return,\n             Some(body) => body,\n         };\n         self.err_handler()\n-            .struct_span_err(ident.span, \"incorrect `type` inside `extern` block\")\n+            .struct_span_err(ident.span, &format!(\"incorrect `{}` inside `extern` block\", kind))\n             .span_label(ident.span, \"cannot have a body\")\n-            .span_label(body.span, \"the invalid body\")\n+            .span_label(body, \"the invalid body\")\n             .span_label(\n                 self.current_extern_span(),\n-                \"`extern` blocks define existing foreign types and types \\\n-                inside of them cannot have a body\",\n+                format!(\n+                    \"`extern` blocks define existing foreign {0}s and {0}s \\\n+                    inside of them cannot have a body\",\n+                    kind\n+                ),\n             )\n             .note(MORE_EXTERN)\n             .emit();\n@@ -579,6 +582,16 @@ impl<'a> AstValidator<'a> {\n             }\n         }\n     }\n+\n+    fn check_item_named(&self, ident: Ident, kind: &str) {\n+        if ident.name != kw::Underscore {\n+            return;\n+        }\n+        self.err_handler()\n+            .struct_span_err(ident.span, &format!(\"`{}` items in this context need a name\", kind))\n+            .span_label(ident.span, format!(\"`_` is not a valid name for this `{}` item\", kind))\n+            .emit();\n+    }\n }\n \n enum GenericPosition {\n@@ -969,11 +982,14 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 self.check_foreign_fn_headerless(fi.ident, fi.span, sig.header);\n             }\n             ForeignItemKind::TyAlias(generics, bounds, body) => {\n-                self.check_foreign_ty_bodyless(fi.ident, body.as_deref());\n+                self.check_foreign_kind_bodyless(fi.ident, \"type\", body.as_ref().map(|b| b.span));\n                 self.check_type_no_bounds(bounds, \"`extern` blocks\");\n                 self.check_foreign_ty_genericless(generics);\n             }\n-            ForeignItemKind::Static(..) | ForeignItemKind::Macro(..) => {}\n+            ForeignItemKind::Static(_, _, body) => {\n+                self.check_foreign_kind_bodyless(fi.ident, \"static\", body.as_ref().map(|b| b.span));\n+            }\n+            ForeignItemKind::Macro(..) => {}\n         }\n \n         visit::walk_foreign_item(self, fi)\n@@ -1234,6 +1250,10 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             }\n         }\n \n+        if let AssocItemKind::Const(..) = item.kind {\n+            self.check_item_named(item.ident, \"const\");\n+        }\n+\n         self.with_in_trait_impl(false, |this| visit::walk_assoc_item(this, item, ctxt));\n     }\n }"}, {"sha": "e9dacfec23cc61a208dd45037d6bf29c5928323a", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 22, "deletions": 49, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=1c2906ead3825c013ac022249f1e1ee3a3b97c75", "patch": "@@ -1023,17 +1023,8 @@ impl<'a> State<'a> {\n             ast::ForeignItemKind::Fn(sig, gen, body) => {\n                 self.print_fn_full(sig, item.ident, gen, &item.vis, body.as_deref(), &item.attrs);\n             }\n-            ast::ForeignItemKind::Static(t, m) => {\n-                self.head(visibility_qualified(&item.vis, \"static\"));\n-                if *m == ast::Mutability::Mut {\n-                    self.word_space(\"mut\");\n-                }\n-                self.print_ident(item.ident);\n-                self.word_space(\":\");\n-                self.print_type(t);\n-                self.s.word(\";\");\n-                self.end(); // end the head-ibox\n-                self.end(); // end the outer cbox\n+            ast::ForeignItemKind::Static(ty, mutbl, body) => {\n+                self.print_item_const(item.ident, Some(*mutbl), ty, body.as_deref(), &item.vis);\n             }\n             ast::ForeignItemKind::TyAlias(generics, bounds, ty) => {\n                 self.print_associated_type(item.ident, generics, bounds, ty.as_deref());\n@@ -1047,24 +1038,31 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    fn print_associated_const(\n+    fn print_item_const(\n         &mut self,\n         ident: ast::Ident,\n+        mutbl: Option<ast::Mutability>,\n         ty: &ast::Ty,\n-        default: Option<&ast::Expr>,\n+        body: Option<&ast::Expr>,\n         vis: &ast::Visibility,\n     ) {\n-        self.s.word(visibility_qualified(vis, \"\"));\n-        self.word_space(\"const\");\n+        let leading = match mutbl {\n+            None => \"const \",\n+            Some(ast::Mutability::Not) => \"static \",\n+            Some(ast::Mutability::Mut) => \"static mut \",\n+        };\n+        self.head(visibility_qualified(vis, leading));\n         self.print_ident(ident);\n         self.word_space(\":\");\n         self.print_type(ty);\n-        if let Some(expr) = default {\n-            self.s.space();\n+        self.s.space();\n+        self.end(); // end the head-ibox\n+        if let Some(body) = body {\n             self.word_space(\"=\");\n-            self.print_expr(expr);\n+            self.print_expr(body);\n         }\n-        self.s.word(\";\")\n+        self.s.word(\";\");\n+        self.end(); // end the outer cbox\n     }\n \n     fn print_associated_type(\n@@ -1114,36 +1112,11 @@ impl<'a> State<'a> {\n                 self.end(); // end inner head-block\n                 self.end(); // end outer head-block\n             }\n-            ast::ItemKind::Static(ref ty, m, ref expr) => {\n-                self.head(visibility_qualified(&item.vis, \"static\"));\n-                if m == ast::Mutability::Mut {\n-                    self.word_space(\"mut\");\n-                }\n-                self.print_ident(item.ident);\n-                self.word_space(\":\");\n-                self.print_type(ty);\n-                self.s.space();\n-                self.end(); // end the head-ibox\n-                if let Some(expr) = expr {\n-                    self.word_space(\"=\");\n-                    self.print_expr(expr);\n-                }\n-                self.s.word(\";\");\n-                self.end(); // end the outer cbox\n+            ast::ItemKind::Static(ref ty, mutbl, ref body) => {\n+                self.print_item_const(item.ident, Some(mutbl), ty, body.as_deref(), &item.vis);\n             }\n-            ast::ItemKind::Const(ref ty, ref expr) => {\n-                self.head(visibility_qualified(&item.vis, \"const\"));\n-                self.print_ident(item.ident);\n-                self.word_space(\":\");\n-                self.print_type(ty);\n-                self.s.space();\n-                self.end(); // end the head-ibox\n-                if let Some(expr) = expr {\n-                    self.word_space(\"=\");\n-                    self.print_expr(expr);\n-                }\n-                self.s.word(\";\");\n-                self.end(); // end the outer cbox\n+            ast::ItemKind::Const(ref ty, ref body) => {\n+                self.print_item_const(item.ident, None, ty, body.as_deref(), &item.vis);\n             }\n             ast::ItemKind::Fn(ref sig, ref gen, ref body) => {\n                 self.print_fn_full(sig, item.ident, gen, &item.vis, body.as_deref(), &item.attrs);\n@@ -1469,7 +1442,7 @@ impl<'a> State<'a> {\n         self.print_defaultness(item.defaultness);\n         match &item.kind {\n             ast::AssocItemKind::Const(ty, expr) => {\n-                self.print_associated_const(item.ident, ty, expr.as_deref(), &item.vis);\n+                self.print_item_const(item.ident, None, ty, expr.as_deref(), &item.vis);\n             }\n             ast::AssocItemKind::Fn(sig, generics, body) => {\n                 let body = body.as_deref();"}, {"sha": "ab91580239581af8f0f8fb42bc37102912db25ef", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=1c2906ead3825c013ac022249f1e1ee3a3b97c75", "patch": "@@ -670,7 +670,7 @@ impl<'a> Parser<'a> {\n         } else if self.check_fn_front_matter() {\n             let (ident, sig, generics, body) = self.parse_fn(at_end, &mut attrs, req_name)?;\n             (ident, AssocItemKind::Fn(sig, generics, body))\n-        } else if self.check_keyword(kw::Const) {\n+        } else if self.eat_keyword(kw::Const) {\n             self.parse_assoc_const()?\n         } else if self.isnt_macro_invocation() {\n             return Err(self.missing_assoc_item_kind_err(\"associated\", self.prev_span));\n@@ -693,11 +693,7 @@ impl<'a> Parser<'a> {\n     ///     AssocConst = \"const\" Ident \":\" Ty \"=\" Expr \";\"\n     fn parse_assoc_const(&mut self) -> PResult<'a, (Ident, AssocItemKind)> {\n         self.expect_keyword(kw::Const)?;\n-        let ident = self.parse_ident()?;\n-        self.expect(&token::Colon)?;\n-        let ty = self.parse_ty()?;\n-        let expr = if self.eat(&token::Eq) { Some(self.parse_expr()?) } else { None };\n-        self.expect_semi()?;\n+        let (ident, ty, expr) = self.parse_item_const_common(None)?;\n         Ok((ident, AssocItemKind::Const(ty, expr)))\n     }\n \n@@ -916,11 +912,8 @@ impl<'a> Parser<'a> {\n     /// Assumes that the `static` keyword is already parsed.\n     fn parse_item_foreign_static(&mut self) -> PResult<'a, (Ident, ForeignItemKind)> {\n         let mutbl = self.parse_mutability();\n-        let ident = self.parse_ident()?;\n-        self.expect(&token::Colon)?;\n-        let ty = self.parse_ty()?;\n-        self.expect_semi()?;\n-        Ok((ident, ForeignItemKind::Static(ty, mutbl)))\n+        let (ident, ty, expr) = self.parse_item_const_common(Some(mutbl))?;\n+        Ok((ident, ForeignItemKind::Static(ty, mutbl, expr)))\n     }\n \n     /// Parses a type from a foreign module.\n@@ -971,6 +964,22 @@ impl<'a> Parser<'a> {\n     ///\n     /// When `m` is `\"const\"`, `$ident` may also be `\"_\"`.\n     fn parse_item_const(&mut self, m: Option<Mutability>) -> PResult<'a, ItemInfo> {\n+        let (id, ty, expr) = self.parse_item_const_common(m)?;\n+        let item = match m {\n+            Some(m) => ItemKind::Static(ty, m, expr),\n+            None => ItemKind::Const(ty, expr),\n+        };\n+        Ok((id, item))\n+    }\n+\n+    /// Parse `[\"const\" | (\"static\" \"mut\"?)] $ident \":\" $ty (= $expr)?` with\n+    /// `[\"const\" | (\"static\" \"mut\"?)]` already parsed and stored in `m`.\n+    ///\n+    /// When `m` is `\"const\"`, `$ident` may also be `\"_\"`.\n+    fn parse_item_const_common(\n+        &mut self,\n+        m: Option<Mutability>,\n+    ) -> PResult<'a, (Ident, P<Ty>, Option<P<ast::Expr>>)> {\n         let id = if m.is_none() { self.parse_ident_or_underscore() } else { self.parse_ident() }?;\n \n         // Parse the type of a `const` or `static mut?` item.\n@@ -983,11 +992,7 @@ impl<'a> Parser<'a> {\n \n         let expr = if self.eat(&token::Eq) { Some(self.parse_expr()?) } else { None };\n         self.expect_semi()?;\n-        let item = match m {\n-            Some(m) => ItemKind::Static(ty, m, expr),\n-            None => ItemKind::Const(ty, expr),\n-        };\n-        Ok((id, item))\n+        Ok((id, ty, expr))\n     }\n \n     /// We were supposed to parse `:` but the `:` was missing."}, {"sha": "574689be49183cd74a46659e49d9f3001513d17c", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=1c2906ead3825c013ac022249f1e1ee3a3b97c75", "patch": "@@ -1532,7 +1532,7 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n                     self.visit_ty(&ret_ty);\n                 }\n             }\n-            ast::ForeignItemKind::Static(ref ty, _) => {\n+            ast::ForeignItemKind::Static(ref ty, _, _) => {\n                 if let Some(var_data) = self.save_ctxt.get_extern_item_data(item) {\n                     down_cast_data!(var_data, DefData, item.span);\n                     self.dumper.dump_def(&access, var_data);"}, {"sha": "6bb2bf4c1e995526f1b7da75f2a5a72763cde7b4", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=1c2906ead3825c013ac022249f1e1ee3a3b97c75", "patch": "@@ -151,7 +151,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                     attributes: lower_attributes(item.attrs.clone(), self),\n                 }))\n             }\n-            ast::ForeignItemKind::Static(ref ty, _) => {\n+            ast::ForeignItemKind::Static(ref ty, _, _) => {\n                 filter!(self.span_utils, item.ident.span);\n \n                 let id = id_from_node_id(item.id, self);"}, {"sha": "8fba3109f21226574f712314622eae5cef0a389e", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=1c2906ead3825c013ac022249f1e1ee3a3b97c75", "patch": "@@ -760,7 +760,7 @@ impl Sig for ast::ForeignItem {\n \n                 Ok(sig)\n             }\n-            ast::ForeignItemKind::Static(ref ty, m) => {\n+            ast::ForeignItemKind::Static(ref ty, m, _) => {\n                 let mut text = \"static \".to_owned();\n                 if m == ast::Mutability::Mut {\n                     text.push_str(\"mut \");"}, {"sha": "bbb629012a951ac003db2b7d4bc95916d9441614", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=1c2906ead3825c013ac022249f1e1ee3a3b97c75", "patch": "@@ -2606,7 +2606,7 @@ pub type ForeignItem = Item<ForeignItemKind>;\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum ForeignItemKind {\n     /// A static item (`static FOO: u8`).\n-    Static(P<Ty>, Mutability),\n+    Static(P<Ty>, Mutability, Option<P<Expr>>),\n     /// A function.\n     Fn(FnSig, Generics, Option<P<Block>>),\n     /// A type."}, {"sha": "62f640f0bfa24711c84db29a98331d5e68244cda", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=1c2906ead3825c013ac022249f1e1ee3a3b97c75", "patch": "@@ -1046,7 +1046,10 @@ pub fn noop_flat_map_foreign_item<T: MutVisitor>(\n             visitor.visit_generics(generics);\n             visit_opt(body, |body| visitor.visit_block(body));\n         }\n-        ForeignItemKind::Static(t, _m) => visitor.visit_ty(t),\n+        ForeignItemKind::Static(ty, _, body) => {\n+            visitor.visit_ty(ty);\n+            visit_opt(body, |body| visitor.visit_expr(body));\n+        }\n         ForeignItemKind::TyAlias(generics, bounds, ty) => {\n             visitor.visit_generics(generics);\n             visit_bounds(bounds, visitor);"}, {"sha": "0dd21cdf12fde4e1d366750eabe1d8d78041af2a", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=1c2906ead3825c013ac022249f1e1ee3a3b97c75", "patch": "@@ -534,7 +534,10 @@ pub fn walk_foreign_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a ForeignI\n             let kind = FnKind::Fn(FnCtxt::Foreign, item.ident, sig, &item.vis, body.as_deref());\n             visitor.visit_fn(kind, item.span, item.id);\n         }\n-        ForeignItemKind::Static(ref typ, _) => visitor.visit_ty(typ),\n+        ForeignItemKind::Static(ref typ, _, ref body) => {\n+            visitor.visit_ty(typ);\n+            walk_list!(visitor, visit_expr, body);\n+        }\n         ForeignItemKind::TyAlias(ref generics, ref bounds, ref ty) => {\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_param_bound, bounds);"}, {"sha": "d37ce06c555bf6defa8e2667295c9277696d9bc9", "filename": "src/test/ui/parser/assoc-const-underscore-semantic-fail.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Ftest%2Fui%2Fparser%2Fassoc-const-underscore-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Ftest%2Fui%2Fparser%2Fassoc-const-underscore-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassoc-const-underscore-semantic-fail.rs?ref=1c2906ead3825c013ac022249f1e1ee3a3b97c75", "patch": "@@ -0,0 +1,17 @@\n+// Semantically, an associated constant cannot use `_` as a name.\n+\n+fn main() {}\n+\n+const _: () = {\n+    pub trait A {\n+        const _: () = (); //~ ERROR `const` items in this context need a name\n+    }\n+    impl A for () {\n+        const _: () = (); //~ ERROR `const` items in this context need a name\n+        //~^ ERROR const `_` is not a member of trait `A`\n+    }\n+    struct B;\n+    impl B {\n+        const _: () = (); //~ ERROR `const` items in this context need a name\n+    }\n+};"}, {"sha": "538bf0ec100dc6ad26e4b5fbfc7a12eb221e9f40", "filename": "src/test/ui/parser/assoc-const-underscore-semantic-fail.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Ftest%2Fui%2Fparser%2Fassoc-const-underscore-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Ftest%2Fui%2Fparser%2Fassoc-const-underscore-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassoc-const-underscore-semantic-fail.stderr?ref=1c2906ead3825c013ac022249f1e1ee3a3b97c75", "patch": "@@ -0,0 +1,27 @@\n+error: `const` items in this context need a name\n+  --> $DIR/assoc-const-underscore-semantic-fail.rs:7:15\n+   |\n+LL |         const _: () = ();\n+   |               ^ `_` is not a valid name for this `const` item\n+\n+error: `const` items in this context need a name\n+  --> $DIR/assoc-const-underscore-semantic-fail.rs:10:15\n+   |\n+LL |         const _: () = ();\n+   |               ^ `_` is not a valid name for this `const` item\n+\n+error: `const` items in this context need a name\n+  --> $DIR/assoc-const-underscore-semantic-fail.rs:15:15\n+   |\n+LL |         const _: () = ();\n+   |               ^ `_` is not a valid name for this `const` item\n+\n+error[E0438]: const `_` is not a member of trait `A`\n+  --> $DIR/assoc-const-underscore-semantic-fail.rs:10:9\n+   |\n+LL |         const _: () = ();\n+   |         ^^^^^^^^^^^^^^^^^ not a member of trait `A`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0438`."}, {"sha": "60da408c8115351859b9bf2bcd113882a0927a93", "filename": "src/test/ui/parser/assoc-const-underscore-syntactic-pass.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Ftest%2Fui%2Fparser%2Fassoc-const-underscore-syntactic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Ftest%2Fui%2Fparser%2Fassoc-const-underscore-syntactic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassoc-const-underscore-syntactic-pass.rs?ref=1c2906ead3825c013ac022249f1e1ee3a3b97c75", "patch": "@@ -0,0 +1,18 @@\n+// All constant items (associated or otherwise) may syntactically use `_` as a name.\n+\n+// check-pass\n+\n+fn main() {}\n+\n+#[cfg(FALSE)]\n+const _: () = {\n+    pub trait A {\n+        const _: () = ();\n+    }\n+    impl A for () {\n+        const _: () = ();\n+    }\n+    impl dyn A {\n+        const _: () = ();\n+    }\n+};"}, {"sha": "9abdf33df9c46a468673061f11b0bfdaabb95198", "filename": "src/test/ui/parser/foreign-static-semantic-fail.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Ftest%2Fui%2Fparser%2Fforeign-static-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Ftest%2Fui%2Fparser%2Fforeign-static-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fforeign-static-semantic-fail.rs?ref=1c2906ead3825c013ac022249f1e1ee3a3b97c75", "patch": "@@ -0,0 +1,8 @@\n+// Syntactically, a foreign static may not have a body.\n+\n+fn main() {}\n+\n+extern {\n+    static X: u8 = 0; //~ ERROR incorrect `static` inside `extern` block\n+    static mut Y: u8 = 0; //~ ERROR incorrect `static` inside `extern` block\n+}"}, {"sha": "5942e3a94497b21e4394e1ac1fb3d16b89e6732b", "filename": "src/test/ui/parser/foreign-static-semantic-fail.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Ftest%2Fui%2Fparser%2Fforeign-static-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Ftest%2Fui%2Fparser%2Fforeign-static-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fforeign-static-semantic-fail.stderr?ref=1c2906ead3825c013ac022249f1e1ee3a3b97c75", "patch": "@@ -0,0 +1,27 @@\n+error: incorrect `static` inside `extern` block\n+  --> $DIR/foreign-static-semantic-fail.rs:6:12\n+   |\n+LL | extern {\n+   | ------ `extern` blocks define existing foreign statics and statics inside of them cannot have a body\n+LL |     static X: u8 = 0;\n+   |            ^       - the invalid body\n+   |            |\n+   |            cannot have a body\n+   |\n+   = note: for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\n+\n+error: incorrect `static` inside `extern` block\n+  --> $DIR/foreign-static-semantic-fail.rs:7:16\n+   |\n+LL | extern {\n+   | ------ `extern` blocks define existing foreign statics and statics inside of them cannot have a body\n+LL |     static X: u8 = 0;\n+LL |     static mut Y: u8 = 0;\n+   |                ^       - the invalid body\n+   |                |\n+   |                cannot have a body\n+   |\n+   = note: for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "2c805e8a0b700b189063ca899900354ead93d346", "filename": "src/test/ui/parser/foreign-static-syntactic-pass.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Ftest%2Fui%2Fparser%2Fforeign-static-syntactic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Ftest%2Fui%2Fparser%2Fforeign-static-syntactic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fforeign-static-syntactic-pass.rs?ref=1c2906ead3825c013ac022249f1e1ee3a3b97c75", "patch": "@@ -0,0 +1,11 @@\n+// Syntactically, a foreign static may have a body.\n+\n+// check-pass\n+\n+fn main() {}\n+\n+#[cfg(FALSE)]\n+extern {\n+    static X: u8 = 0;\n+    static mut Y: u8 = 0;\n+}"}, {"sha": "c01ac4752e07561f0aa6de5f8e42784faa1e2007", "filename": "src/test/ui/parser/underscore_item_not_const.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Ftest%2Fui%2Fparser%2Funderscore_item_not_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Ftest%2Fui%2Fparser%2Funderscore_item_not_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funderscore_item_not_const.rs?ref=1c2906ead3825c013ac022249f1e1ee3a3b97c75", "patch": "@@ -1,18 +1,4 @@\n-// Test that various non-const items and associated consts do not permit `_` as a name.\n-\n-// Associated `const`s:\n-\n-pub trait A {\n-    const _: () = (); //~ ERROR expected identifier, found reserved identifier `_`\n-}\n-impl A for () {\n-    const _: () = (); //~ ERROR expected identifier, found reserved identifier `_`\n-}\n-impl dyn A {\n-    const _: () = (); //~ ERROR expected identifier, found reserved identifier `_`\n-}\n-\n-// Other kinds of items:\n+// Test that various non-const items do not syntactically permit `_` as a name.\n \n static _: () = (); //~ ERROR expected identifier, found reserved identifier `_`\n struct _(); //~ ERROR expected identifier, found reserved identifier `_`"}, {"sha": "0bc7642dd196471fe0bf6459c848cc31fc6c6eb2", "filename": "src/test/ui/parser/underscore_item_not_const.stderr", "status": "modified", "additions": 13, "deletions": 31, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Ftest%2Fui%2Fparser%2Funderscore_item_not_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c2906ead3825c013ac022249f1e1ee3a3b97c75/src%2Ftest%2Fui%2Fparser%2Funderscore_item_not_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funderscore_item_not_const.stderr?ref=1c2906ead3825c013ac022249f1e1ee3a3b97c75", "patch": "@@ -1,92 +1,74 @@\n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/underscore_item_not_const.rs:6:11\n-   |\n-LL |     const _: () = ();\n-   |           ^ expected identifier, found reserved identifier\n-\n-error: expected identifier, found reserved identifier `_`\n-  --> $DIR/underscore_item_not_const.rs:9:11\n-   |\n-LL |     const _: () = ();\n-   |           ^ expected identifier, found reserved identifier\n-\n-error: expected identifier, found reserved identifier `_`\n-  --> $DIR/underscore_item_not_const.rs:12:11\n-   |\n-LL |     const _: () = ();\n-   |           ^ expected identifier, found reserved identifier\n-\n-error: expected identifier, found reserved identifier `_`\n-  --> $DIR/underscore_item_not_const.rs:17:8\n+  --> $DIR/underscore_item_not_const.rs:3:8\n    |\n LL | static _: () = ();\n    |        ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/underscore_item_not_const.rs:18:8\n+  --> $DIR/underscore_item_not_const.rs:4:8\n    |\n LL | struct _();\n    |        ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/underscore_item_not_const.rs:19:6\n+  --> $DIR/underscore_item_not_const.rs:5:6\n    |\n LL | enum _ {}\n    |      ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/underscore_item_not_const.rs:20:4\n+  --> $DIR/underscore_item_not_const.rs:6:4\n    |\n LL | fn _() {}\n    |    ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/underscore_item_not_const.rs:21:5\n+  --> $DIR/underscore_item_not_const.rs:7:5\n    |\n LL | mod _ {}\n    |     ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/underscore_item_not_const.rs:22:6\n+  --> $DIR/underscore_item_not_const.rs:8:6\n    |\n LL | type _ = ();\n    |      ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/underscore_item_not_const.rs:23:5\n+  --> $DIR/underscore_item_not_const.rs:9:5\n    |\n LL | use _;\n    |     ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/underscore_item_not_const.rs:24:5\n+  --> $DIR/underscore_item_not_const.rs:10:5\n    |\n LL | use _ as g;\n    |     ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/underscore_item_not_const.rs:25:7\n+  --> $DIR/underscore_item_not_const.rs:11:7\n    |\n LL | trait _ {}\n    |       ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/underscore_item_not_const.rs:26:7\n+  --> $DIR/underscore_item_not_const.rs:12:7\n    |\n LL | trait _ = Copy;\n    |       ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/underscore_item_not_const.rs:27:14\n+  --> $DIR/underscore_item_not_const.rs:13:14\n    |\n LL | macro_rules! _ { () => {} }\n    |              ^ expected identifier, found reserved identifier\n \n error: expected one of `!` or `::`, found reserved identifier `_`\n-  --> $DIR/underscore_item_not_const.rs:28:7\n+  --> $DIR/underscore_item_not_const.rs:14:7\n    |\n LL | union _ { f: u8 }\n    |       ^ expected one of `!` or `::`\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 12 previous errors\n "}]}