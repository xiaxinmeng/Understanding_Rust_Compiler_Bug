{"sha": "03c5dd1252f0e1bc0407f29a058c7bc0671c15fb", "node_id": "C_kwDOAAsO6NoAKDAzYzVkZDEyNTJmMGUxYmMwNDA3ZjI5YTA1OGM3YmMwNjcxYzE1ZmI", "commit": {"author": {"name": "iDawer", "email": "ilnur.iskhakov.oss@outlook.com", "date": "2022-04-14T16:12:26Z"}, "committer": {"name": "iDawer", "email": "ilnur.iskhakov.oss@outlook.com", "date": "2022-04-16T08:54:24Z"}, "message": "`extract_function`: use appropriate return type for async fns", "tree": {"sha": "6cbd4ae7fc9c7e99b97ff425efacc6dd96f8e2a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cbd4ae7fc9c7e99b97ff425efacc6dd96f8e2a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03c5dd1252f0e1bc0407f29a058c7bc0671c15fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03c5dd1252f0e1bc0407f29a058c7bc0671c15fb", "html_url": "https://github.com/rust-lang/rust/commit/03c5dd1252f0e1bc0407f29a058c7bc0671c15fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03c5dd1252f0e1bc0407f29a058c7bc0671c15fb/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d787e1bfe79064be4376c914ce11948041ccbef", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d787e1bfe79064be4376c914ce11948041ccbef", "html_url": "https://github.com/rust-lang/rust/commit/9d787e1bfe79064be4376c914ce11948041ccbef"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "4df7c4177c8653be47baef2b127e4780967e5965", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/03c5dd1252f0e1bc0407f29a058c7bc0671c15fb/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03c5dd1252f0e1bc0407f29a058c7bc0671c15fb/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=03c5dd1252f0e1bc0407f29a058c7bc0671c15fb", "patch": "@@ -692,7 +692,14 @@ impl FunctionBody {\n                         (constness, expr.clone(), infer_expr_opt(expr))\n                     },\n                     ast::Fn(fn_) => {\n-                        (fn_.const_token().is_some(), fn_.body().map(ast::Expr::BlockExpr), Some(sema.to_def(&fn_)?.ret_type(sema.db)))\n+                        let func = sema.to_def(&fn_)?;\n+                        let mut ret_ty = func.ret_type(sema.db);\n+                        if func.is_async(sema.db) {\n+                            if let Some(async_ret) = func.async_ret_type(sema.db) {\n+                                ret_ty = async_ret;\n+                            }\n+                        }\n+                        (fn_.const_token().is_some(), fn_.body().map(ast::Expr::BlockExpr), Some(ret_ty))\n                     },\n                     ast::Static(statik) => {\n                         (true, statik.body(), Some(sema.to_def(&statik)?.ty(sema.db)))\n@@ -4026,6 +4033,7 @@ fn $0fun_name(n: i32) -> i32 {\n         check_assist(\n             extract_function,\n             r#\"\n+//- minicore: future\n fn main() {\n     $0some_function().await;$0\n }\n@@ -4055,6 +4063,7 @@ async fn some_function() {\n         check_assist(\n             extract_function,\n             r#\"\n+//- minicore: future, result\n async fn foo() -> Result<(), ()> {\n     $0async {}.await;\n     Err(())?$0\n@@ -4065,7 +4074,7 @@ async fn foo() -> Result<(), ()> {\n     fun_name().await?\n }\n \n-async fn $0fun_name() -> _ {\n+async fn $0fun_name() -> Result<(), ()> {\n     async {}.await;\n     Err(())?\n }\n@@ -4078,6 +4087,7 @@ async fn $0fun_name() -> _ {\n         check_assist(\n             extract_function,\n             r#\"\n+//- minicore: future\n async fn foo() -> i32 {\n     loop {\n         let n = 1;$0\n@@ -4119,6 +4129,7 @@ async fn $0fun_name() -> Result<i32, i32> {\n         check_assist(\n             extract_function,\n             r#\"\n+//- minicore: future\n fn main() {\n     $0function_call(\"a\", some_function().await);$0\n }"}]}