{"sha": "fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZGQ5MWM2MzBiYjRjZjYwNmY3ZWYzZWM2OGQ3YjZjYmNiMzYzYjU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-14T20:19:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-14T20:19:28Z"}, "message": "Rollup merge of #74263 - RalfJung:thread-local, r=Mark-Simulacrum\n\nSlight reorganization of sys/(fast_)thread_local\n\nI was long confused by the `thread_local` and `fast_thread_local` modules in the `sys(_common)` part of libstd. The names make it *sound* like `fast_thread_local` is just a faster version of `thread_local`, but really these are totally different APIs: one provides thread-local \"keys\", which are non-addressable pointer-sized pieces of local storage with an associated destructor; the other (the \"fast\" one) provides just a destructor.\n\nSo I propose we rename `fast_thread_local` to `thread_local_dtor`, and `thread_local` to `thread_local_key`. That's what this PR does.", "tree": {"sha": "8301e8592fa8efd518869065e902c007750ce455", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8301e8592fa8efd518869065e902c007750ce455"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfDhNQCRBK7hj4Ov3rIwAAdHIIAEJN9aMYzOHq45Q8PMHDKVYt\ni+G6kPy0VdzFnX1kxnP+z7XcKjeLXpO2YPhivTmSOC+bxy1bQ0LKmtmtn+1CavOh\nbhTFq1JfF3/D39YNeVDl3clsQXmUStFRZgZPjgSL1nqpjDwIODpk6rGzVF4Nhyij\nABZwzO/3K7npTZsspXlfzm2mfvwsu22QTMEOD9iRFrIgKITxYcVdtw4gTLyRJSVD\ni3bT04/tI/L1Qvs8VBxRkGZfGet5LKFKCRViswIYNB39bFFftW27EAg2kXMaqpLU\ndgoTgcyiZOwz1r8kdYb2XGCVkSo5ZSsqfRTc0iV3xCsAsw67hhuleyZ9B8OO7aI=\n=1KDD\n-----END PGP SIGNATURE-----\n", "payload": "tree 8301e8592fa8efd518869065e902c007750ce455\nparent 1e74f285998daf6809d2d418d2bbe1ab094e694e\nparent 7dc388654d6ef038065db23340e8eff7a567e5b4\nauthor Manish Goregaokar <manishsmail@gmail.com> 1594757968 -0700\ncommitter GitHub <noreply@github.com> 1594757968 -0700\n\nRollup merge of #74263 - RalfJung:thread-local, r=Mark-Simulacrum\n\nSlight reorganization of sys/(fast_)thread_local\n\nI was long confused by the `thread_local` and `fast_thread_local` modules in the `sys(_common)` part of libstd. The names make it *sound* like `fast_thread_local` is just a faster version of `thread_local`, but really these are totally different APIs: one provides thread-local \"keys\", which are non-addressable pointer-sized pieces of local storage with an associated destructor; the other (the \"fast\" one) provides just a destructor.\n\nSo I propose we rename `fast_thread_local` to `thread_local_dtor`, and `thread_local` to `thread_local_key`. That's what this PR does.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5", "html_url": "https://github.com/rust-lang/rust/commit/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e74f285998daf6809d2d418d2bbe1ab094e694e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e74f285998daf6809d2d418d2bbe1ab094e694e", "html_url": "https://github.com/rust-lang/rust/commit/1e74f285998daf6809d2d418d2bbe1ab094e694e"}, {"sha": "7dc388654d6ef038065db23340e8eff7a567e5b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dc388654d6ef038065db23340e8eff7a567e5b4", "html_url": "https://github.com/rust-lang/rust/commit/7dc388654d6ef038065db23340e8eff7a567e5b4"}], "stats": {"total": 150, "additions": 83, "deletions": 67}, "files": [{"sha": "f7dd2c8d00fd220b1f2fb688e8ea18225d81d59a", "filename": "src/libstd/sys/cloudabi/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs?ref=fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5", "patch": "@@ -16,8 +16,8 @@ pub mod rwlock;\n pub mod stack_overflow;\n pub mod stdio;\n pub mod thread;\n-#[path = \"../unix/thread_local.rs\"]\n-pub mod thread_local;\n+#[path = \"../unix/thread_local_key.rs\"]\n+pub mod thread_local_key;\n pub mod time;\n \n pub use crate::sys_common::os_str_bytes as os_str;"}, {"sha": "675b82ceb775f7b0a35c116cc54b2c39d0c93b90", "filename": "src/libstd/sys/hermit/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Fhermit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Fhermit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fmod.rs?ref=fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5", "patch": "@@ -22,7 +22,6 @@ pub mod cmath;\n pub mod condvar;\n pub mod env;\n pub mod ext;\n-pub mod fast_thread_local;\n pub mod fd;\n pub mod fs;\n pub mod io;\n@@ -37,7 +36,8 @@ pub mod rwlock;\n pub mod stack_overflow;\n pub mod stdio;\n pub mod thread;\n-pub mod thread_local;\n+pub mod thread_local_dtor;\n+pub mod thread_local_key;\n pub mod time;\n \n use crate::io::ErrorKind;"}, {"sha": "9b683fce157488df8d26ee08184e278578e5c17b", "filename": "src/libstd/sys/hermit/thread_local_dtor.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Fhermit%2Fthread_local_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Fhermit%2Fthread_local_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fthread_local_dtor.rs?ref=fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5", "previous_filename": "src/libstd/sys/hermit/fast_thread_local.rs"}, {"sha": "bf1b49eb83b7e14ce8c046eb9c50aea20891a0c6", "filename": "src/libstd/sys/hermit/thread_local_key.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Fhermit%2Fthread_local_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Fhermit%2Fthread_local_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fthread_local_key.rs?ref=fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5", "patch": "@@ -2,25 +2,25 @@ pub type Key = usize;\n \n #[inline]\n pub unsafe fn create(_dtor: Option<unsafe extern \"C\" fn(*mut u8)>) -> Key {\n-    panic!(\"should not be used on the wasm target\");\n+    panic!(\"should not be used on the hermit target\");\n }\n \n #[inline]\n pub unsafe fn set(_key: Key, _value: *mut u8) {\n-    panic!(\"should not be used on the wasm target\");\n+    panic!(\"should not be used on the hermit target\");\n }\n \n #[inline]\n pub unsafe fn get(_key: Key) -> *mut u8 {\n-    panic!(\"should not be used on the wasm target\");\n+    panic!(\"should not be used on the hermit target\");\n }\n \n #[inline]\n pub unsafe fn destroy(_key: Key) {\n-    panic!(\"should not be used on the wasm target\");\n+    panic!(\"should not be used on the hermit target\");\n }\n \n #[inline]\n pub fn requires_synchronized_create() -> bool {\n-    panic!(\"should not be used on the wasm target\");\n+    panic!(\"should not be used on the hermit target\");\n }", "previous_filename": "src/libstd/sys/wasm/thread_local.rs"}, {"sha": "a4968ff7d4f547982706100b690d0baaecfd9c1a", "filename": "src/libstd/sys/sgx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Fsgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Fsgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fmod.rs?ref=fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5", "patch": "@@ -30,7 +30,7 @@ pub mod rwlock;\n pub mod stack_overflow;\n pub mod stdio;\n pub mod thread;\n-pub mod thread_local;\n+pub mod thread_local_key;\n pub mod time;\n \n pub use crate::sys_common::os_str_bytes as os_str;"}, {"sha": "b21784475f0d2d020aa4f0eb14cff31d0b1f558c", "filename": "src/libstd/sys/sgx/thread_local_key.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Fsgx%2Fthread_local_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Fsgx%2Fthread_local_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fthread_local_key.rs?ref=fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5", "previous_filename": "src/libstd/sys/sgx/thread_local.rs"}, {"sha": "eddf00d3979f509292f4cd5fe17a18fafc642918", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5", "patch": "@@ -47,7 +47,6 @@ pub mod cmath;\n pub mod condvar;\n pub mod env;\n pub mod ext;\n-pub mod fast_thread_local;\n pub mod fd;\n pub mod fs;\n pub mod io;\n@@ -68,7 +67,8 @@ pub mod rwlock;\n pub mod stack_overflow;\n pub mod stdio;\n pub mod thread;\n-pub mod thread_local;\n+pub mod thread_local_dtor;\n+pub mod thread_local_key;\n pub mod time;\n \n pub use crate::sys_common::os_str_bytes as os_str;"}, {"sha": "c3275eb6f0e50a836eab60f3061528e6bda9d44a", "filename": "src/libstd/sys/unix/thread_local_dtor.rs", "status": "renamed", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Funix%2Fthread_local_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Funix%2Fthread_local_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread_local_dtor.rs?ref=fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5", "patch": "@@ -1,6 +1,9 @@\n #![cfg(target_thread_local)]\n #![unstable(feature = \"thread_local_internals\", issue = \"none\")]\n \n+//! Provides thread-local destructors without an associated \"key\", which\n+//! can be more efficient.\n+\n // Since what appears to be glibc 2.18 this symbol has been shipped which\n // GCC and clang both use to invoke destructors in thread_local globals, so\n // let's do the same!\n@@ -16,7 +19,7 @@\n ))]\n pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n     use crate::mem;\n-    use crate::sys_common::thread_local::register_dtor_fallback;\n+    use crate::sys_common::thread_local_dtor::register_dtor_fallback;\n \n     extern \"C\" {\n         #[linkage = \"extern_weak\"]", "previous_filename": "src/libstd/sys/unix/fast_thread_local.rs"}, {"sha": "2c5b94b1e61e5710717363d92396c6b5e1027305", "filename": "src/libstd/sys/unix/thread_local_key.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Funix%2Fthread_local_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Funix%2Fthread_local_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread_local_key.rs?ref=fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5", "previous_filename": "src/libstd/sys/unix/thread_local.rs"}, {"sha": "1132a849e2f18b34965d8fe11a12c6bad83c2e71", "filename": "src/libstd/sys/vxworks/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Fvxworks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Fvxworks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fmod.rs?ref=fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5", "patch": "@@ -13,7 +13,6 @@ pub mod cmath;\n pub mod condvar;\n pub mod env;\n pub mod ext;\n-pub mod fast_thread_local;\n pub mod fd;\n pub mod fs;\n pub mod io;\n@@ -29,7 +28,8 @@ pub mod rwlock;\n pub mod stack_overflow;\n pub mod stdio;\n pub mod thread;\n-pub mod thread_local;\n+pub mod thread_local_dtor;\n+pub mod thread_local_key;\n pub mod time;\n \n pub use crate::sys_common::os_str_bytes as os_str;"}, {"sha": "3f73f6c490326fb6d4e8c6c8fd94b55abdc36f08", "filename": "src/libstd/sys/vxworks/thread_local_dtor.rs", "status": "renamed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Fvxworks%2Fthread_local_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Fvxworks%2Fthread_local_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fthread_local_dtor.rs?ref=fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5", "patch": "@@ -5,7 +5,3 @@ pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n     use crate::sys_common::thread_local::register_dtor_fallback;\n     register_dtor_fallback(t, dtor);\n }\n-\n-pub fn requires_move_before_drop() -> bool {\n-    false\n-}", "previous_filename": "src/libstd/sys/vxworks/fast_thread_local.rs"}, {"sha": "2c5b94b1e61e5710717363d92396c6b5e1027305", "filename": "src/libstd/sys/vxworks/thread_local_key.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Fvxworks%2Fthread_local_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Fvxworks%2Fthread_local_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fthread_local_key.rs?ref=fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5", "previous_filename": "src/libstd/sys/vxworks/thread_local.rs"}, {"sha": "85f5282034ff18ad85e6f4a7348714931e061167", "filename": "src/libstd/sys/wasi/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Fwasi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Fwasi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fmod.rs?ref=fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5", "patch": "@@ -36,8 +36,6 @@ pub mod net;\n pub mod os;\n pub use crate::sys_common::os_str_bytes as os_str;\n pub mod ext;\n-#[path = \"../wasm/fast_thread_local.rs\"]\n-pub mod fast_thread_local;\n pub mod path;\n pub mod pipe;\n pub mod process;\n@@ -47,8 +45,10 @@ pub mod rwlock;\n pub mod stack_overflow;\n pub mod stdio;\n pub mod thread;\n-#[path = \"../wasm/thread_local.rs\"]\n-pub mod thread_local;\n+#[path = \"../wasm/thread_local_dtor.rs\"]\n+pub mod thread_local_dtor;\n+#[path = \"../wasm/thread_local_key.rs\"]\n+pub mod thread_local_key;\n pub mod time;\n \n #[cfg(not(test))]"}, {"sha": "6939596e52d7835f825f1efc1c4fb387b190d8e0", "filename": "src/libstd/sys/wasm/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Fwasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Fwasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fmod.rs?ref=fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5", "patch": "@@ -20,7 +20,6 @@ pub mod alloc;\n pub mod args;\n pub mod cmath;\n pub mod env;\n-pub mod fast_thread_local;\n pub mod fs;\n pub mod io;\n pub mod memchr;\n@@ -32,7 +31,8 @@ pub mod process;\n pub mod stack_overflow;\n pub mod stdio;\n pub mod thread;\n-pub mod thread_local;\n+pub mod thread_local_dtor;\n+pub mod thread_local_key;\n pub mod time;\n \n pub use crate::sys_common::os_str_bytes as os_str;"}, {"sha": "85d660983029c830329066a7da06ae20962adb6b", "filename": "src/libstd/sys/wasm/thread_local_dtor.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Fwasm%2Fthread_local_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Fwasm%2Fthread_local_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fthread_local_dtor.rs?ref=fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5", "previous_filename": "src/libstd/sys/wasm/fast_thread_local.rs"}, {"sha": "f8be9863ed56f69713e88c98fdfd8b4a6037f2e6", "filename": "src/libstd/sys/wasm/thread_local_key.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Fwasm%2Fthread_local_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Fwasm%2Fthread_local_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fthread_local_key.rs?ref=fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5", "previous_filename": "src/libstd/sys/hermit/thread_local.rs"}, {"sha": "9a52371280e159ffb2e0115f8af19086eb90570d", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5", "patch": "@@ -20,7 +20,6 @@ pub mod cmath;\n pub mod condvar;\n pub mod env;\n pub mod ext;\n-pub mod fast_thread_local;\n pub mod fs;\n pub mod handle;\n pub mod io;\n@@ -35,7 +34,8 @@ pub mod process;\n pub mod rand;\n pub mod rwlock;\n pub mod thread;\n-pub mod thread_local;\n+pub mod thread_local_dtor;\n+pub mod thread_local_key;\n pub mod time;\n cfg_if::cfg_if! {\n     if #[cfg(not(target_vendor = \"uwp\"))] {"}, {"sha": "7be13bc4b2bc7cf7edb2653dfc929908af829a9c", "filename": "src/libstd/sys/windows/thread_local_dtor.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local_dtor.rs?ref=fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5", "patch": "@@ -1,4 +1,4 @@\n #![unstable(feature = \"thread_local_internals\", issue = \"none\")]\n #![cfg(target_thread_local)]\n \n-pub use crate::sys_common::thread_local::register_dtor_fallback as register_dtor;\n+pub use crate::sys_common::thread_local_dtor::register_dtor_fallback as register_dtor;", "previous_filename": "src/libstd/sys/windows/fast_thread_local.rs"}, {"sha": "e0bb102b3afe5b8e746ea51d420466e41b8112bb", "filename": "src/libstd/sys/windows/thread_local_key.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local_key.rs?ref=fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5", "previous_filename": "src/libstd/sys/windows/thread_local.rs"}, {"sha": "e57bb267cbd0f3f33f505f3119ecf44b191a4f05", "filename": "src/libstd/sys_common/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fmod.rs?ref=fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5", "patch": "@@ -65,7 +65,8 @@ pub mod remutex;\n pub mod rwlock;\n pub mod thread;\n pub mod thread_info;\n-pub mod thread_local;\n+pub mod thread_local_dtor;\n+pub mod thread_local_key;\n pub mod util;\n pub mod wtf8;\n "}, {"sha": "6f5ebf4a271582fa753e03ad66f0d9f8a6fcab3c", "filename": "src/libstd/sys_common/thread_local_dtor.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys_common%2Fthread_local_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys_common%2Fthread_local_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fthread_local_dtor.rs?ref=fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5", "patch": "@@ -0,0 +1,49 @@\n+//! Thread-local destructor\n+//!\n+//! Besides thread-local \"keys\" (pointer-sized non-adressable thread-local store\n+//! with an associated destructor), many platforms also provide thread-local\n+//! destructors that are not associated with any particular data. These are\n+//! often more efficient.\n+//!\n+//! This module provides a fallback implementation for that interface, based\n+//! on the less efficient thread-local \"keys\". Each platform provides\n+//! a `thread_local_dtor` module which will either re-export the fallback,\n+//! or implement something more efficient.\n+\n+#![unstable(feature = \"thread_local_internals\", issue = \"none\")]\n+#![allow(dead_code)] // sys isn't exported yet\n+\n+use crate::ptr;\n+use crate::sys_common::thread_local_key::StaticKey;\n+\n+pub unsafe fn register_dtor_fallback(t: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n+    // The fallback implementation uses a vanilla OS-based TLS key to track\n+    // the list of destructors that need to be run for this thread. The key\n+    // then has its own destructor which runs all the other destructors.\n+    //\n+    // The destructor for DTORS is a little special in that it has a `while`\n+    // loop to continuously drain the list of registered destructors. It\n+    // *should* be the case that this loop always terminates because we\n+    // provide the guarantee that a TLS key cannot be set after it is\n+    // flagged for destruction.\n+\n+    static DTORS: StaticKey = StaticKey::new(Some(run_dtors));\n+    type List = Vec<(*mut u8, unsafe extern \"C\" fn(*mut u8))>;\n+    if DTORS.get().is_null() {\n+        let v: Box<List> = box Vec::new();\n+        DTORS.set(Box::into_raw(v) as *mut u8);\n+    }\n+    let list: &mut List = &mut *(DTORS.get() as *mut List);\n+    list.push((t, dtor));\n+\n+    unsafe extern \"C\" fn run_dtors(mut ptr: *mut u8) {\n+        while !ptr.is_null() {\n+            let list: Box<List> = Box::from_raw(ptr as *mut List);\n+            for (ptr, dtor) in list.into_iter() {\n+                dtor(ptr);\n+            }\n+            ptr = DTORS.get();\n+            DTORS.set(ptr::null_mut());\n+        }\n+    }\n+}"}, {"sha": "ac5b128298d7856419aed0eb3cb3d626e62863a3", "filename": "src/libstd/sys_common/thread_local_key.rs", "status": "renamed", "additions": 3, "deletions": 36, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys_common%2Fthread_local_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fsys_common%2Fthread_local_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fthread_local_key.rs?ref=fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5", "patch": "@@ -4,7 +4,7 @@\n //! using the native OS-provided facilities (think `TlsAlloc` or\n //! `pthread_setspecific`). The interface of this differs from the other types\n //! of thread-local-storage provided in this crate in that OS-based TLS can only\n-//! get/set pointers,\n+//! get/set pointer-sized data, possibly with an associated destructor.\n //!\n //! This module also provides two flavors of TLS. One is intended for static\n //! initialization, and does not contain a `Drop` implementation to deallocate\n@@ -14,7 +14,7 @@\n //! # Usage\n //!\n //! This module should likely not be used directly unless other primitives are\n-//! being built on. types such as `thread_local::spawn::Key` are likely much\n+//! being built on. Types such as `thread_local::spawn::Key` are likely much\n //! more useful in practice than this OS-based version which likely requires\n //! unsafe code to interoperate with.\n //!\n@@ -48,9 +48,8 @@\n #![unstable(feature = \"thread_local_internals\", issue = \"none\")]\n #![allow(dead_code)] // sys isn't exported yet\n \n-use crate::ptr;\n use crate::sync::atomic::{self, AtomicUsize, Ordering};\n-use crate::sys::thread_local as imp;\n+use crate::sys::thread_local_key as imp;\n use crate::sys_common::mutex::Mutex;\n \n /// A type for TLS keys that are statically allocated.\n@@ -233,38 +232,6 @@ impl Drop for Key {\n     }\n }\n \n-pub unsafe fn register_dtor_fallback(t: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n-    // The fallback implementation uses a vanilla OS-based TLS key to track\n-    // the list of destructors that need to be run for this thread. The key\n-    // then has its own destructor which runs all the other destructors.\n-    //\n-    // The destructor for DTORS is a little special in that it has a `while`\n-    // loop to continuously drain the list of registered destructors. It\n-    // *should* be the case that this loop always terminates because we\n-    // provide the guarantee that a TLS key cannot be set after it is\n-    // flagged for destruction.\n-\n-    static DTORS: StaticKey = StaticKey::new(Some(run_dtors));\n-    type List = Vec<(*mut u8, unsafe extern \"C\" fn(*mut u8))>;\n-    if DTORS.get().is_null() {\n-        let v: Box<List> = box Vec::new();\n-        DTORS.set(Box::into_raw(v) as *mut u8);\n-    }\n-    let list: &mut List = &mut *(DTORS.get() as *mut List);\n-    list.push((t, dtor));\n-\n-    unsafe extern \"C\" fn run_dtors(mut ptr: *mut u8) {\n-        while !ptr.is_null() {\n-            let list: Box<List> = Box::from_raw(ptr as *mut List);\n-            for (ptr, dtor) in list.into_iter() {\n-                dtor(ptr);\n-            }\n-            ptr = DTORS.get();\n-            DTORS.set(ptr::null_mut());\n-        }\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use super::{Key, StaticKey};", "previous_filename": "src/libstd/sys_common/thread_local.rs"}, {"sha": "ecd6fbc6b9395aaa7dfdc6f8dfa4713856b8acc2", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=fadd91c630bb4cf606f7ef3ec68d7b6cbcb363b5", "patch": "@@ -363,7 +363,7 @@ pub mod fast {\n     use crate::cell::Cell;\n     use crate::fmt;\n     use crate::mem;\n-    use crate::sys::fast_thread_local::register_dtor;\n+    use crate::sys::thread_local_dtor::register_dtor;\n \n     #[derive(Copy, Clone)]\n     enum DtorState {\n@@ -468,7 +468,7 @@ pub mod os {\n     use crate::fmt;\n     use crate::marker;\n     use crate::ptr;\n-    use crate::sys_common::thread_local::StaticKey as OsStaticKey;\n+    use crate::sys_common::thread_local_key::StaticKey as OsStaticKey;\n \n     pub struct Key<T> {\n         // OS-TLS key that we'll use to key off."}]}