{"sha": "b3800860e123443ffada615538926beed6bc4f85", "node_id": "C_kwDOAAsO6NoAKGIzODAwODYwZTEyMzQ0M2ZmYWRhNjE1NTM4OTI2YmVlZDZiYzRmODU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-02T22:03:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-02T22:03:23Z"}, "message": "Auto merge of #93101 - Mark-Simulacrum:library-backtrace, r=yaahc\n\nSupport configuring whether to capture backtraces at runtime\n\nTracking issue: https://github.com/rust-lang/rust/issues/93346\n\nThis adds a new API to the `std::panic` module which configures whether and how the default panic hook will emit a backtrace when a panic occurs.\n\nAfter discussion with `@yaahc` on [Zulip](https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/backtrace.20lib.20vs.2E.20panic), this PR chooses to avoid adjusting or seeking to provide a similar API for the (currently unstable) std::backtrace API. It seems likely that the users of that API may wish to expose more specific settings rather than just a global one (e.g., emulating the `env_logger`, `tracing` per-module configuration) to avoid the cost of capture in hot code. The API added here could plausibly be copied and/or re-exported directly from std::backtrace relatively easily, but I don't think that's the right call as of now.\n\n```rust\nmod panic {\n    #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n    #[non_exhaustive]\n    pub enum BacktraceStyle {\n        Short,\n        Full,\n        Off,\n    }\n    fn set_backtrace_style(BacktraceStyle);\n    fn get_backtrace_style() -> Option<BacktraceStyle>;\n}\n```\n\nSeveral unresolved questions:\n\n* Do we need to move to a thread-local or otherwise more customizable strategy for whether to capture backtraces? See [this comment](https://github.com/rust-lang/rust/pull/79085#issuecomment-727845826) for some potential use cases for this.\n   * Proposed answer: no, leave this for third-party hooks.\n* Bikeshed on naming of all the options, as usual.\n* Should BacktraceStyle be moved into `std::backtrace`?\n   * It's already somewhat annoying to import and/or re-type the `std::panic::` prefix necessary to use these APIs, probably adding a second module to the mix isn't worth it.\n\nNote that PR #79085 proposed a much simpler API, but particularly in light of the desire to fully replace setting environment variables via `env::set_var` to control the backtrace API, a more complete API seems preferable. This PR likely subsumes that one.", "tree": {"sha": "4c666bc883ba940757f1f63ee612d8f8edc5bfc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c666bc883ba940757f1f63ee612d8f8edc5bfc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3800860e123443ffada615538926beed6bc4f85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3800860e123443ffada615538926beed6bc4f85", "html_url": "https://github.com/rust-lang/rust/commit/b3800860e123443ffada615538926beed6bc4f85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3800860e123443ffada615538926beed6bc4f85/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27f5d830eb11cd7bdc834d6f0d78120976f75443", "url": "https://api.github.com/repos/rust-lang/rust/commits/27f5d830eb11cd7bdc834d6f0d78120976f75443", "html_url": "https://github.com/rust-lang/rust/commit/27f5d830eb11cd7bdc834d6f0d78120976f75443"}, {"sha": "85930c8f444e1ece1c92a0f9e39814f72d867e43", "url": "https://api.github.com/repos/rust-lang/rust/commits/85930c8f444e1ece1c92a0f9e39814f72d867e43", "html_url": "https://github.com/rust-lang/rust/commit/85930c8f444e1ece1c92a0f9e39814f72d867e43"}], "stats": {"total": 230, "additions": 165, "deletions": 65}, "files": [{"sha": "ac16f476143cefecdc50f758742a64c09f12368a", "filename": "library/std/src/panic.rs", "status": "modified", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/b3800860e123443ffada615538926beed6bc4f85/library%2Fstd%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3800860e123443ffada615538926beed6bc4f85/library%2Fstd%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanic.rs?ref=b3800860e123443ffada615538926beed6bc4f85", "patch": "@@ -5,6 +5,7 @@\n use crate::any::Any;\n use crate::collections;\n use crate::panicking;\n+use crate::sync::atomic::{AtomicUsize, Ordering};\n use crate::sync::{Mutex, RwLock};\n use crate::thread::Result;\n \n@@ -202,5 +203,118 @@ pub fn always_abort() {\n     crate::panicking::panic_count::set_always_abort();\n }\n \n+/// The configuration for whether and how the default panic hook will capture\n+/// and display the backtrace.\n+#[derive(Debug, Copy, Clone, PartialEq, Eq)]\n+#[unstable(feature = \"panic_backtrace_config\", issue = \"93346\")]\n+#[non_exhaustive]\n+pub enum BacktraceStyle {\n+    /// Prints a terser backtrace which ideally only contains relevant\n+    /// information.\n+    Short,\n+    /// Prints a backtrace with all possible information.\n+    Full,\n+    /// Disable collecting and displaying backtraces.\n+    Off,\n+}\n+\n+impl BacktraceStyle {\n+    pub(crate) fn full() -> Option<Self> {\n+        if cfg!(feature = \"backtrace\") { Some(BacktraceStyle::Full) } else { None }\n+    }\n+\n+    fn as_usize(self) -> usize {\n+        match self {\n+            BacktraceStyle::Short => 1,\n+            BacktraceStyle::Full => 2,\n+            BacktraceStyle::Off => 3,\n+        }\n+    }\n+\n+    fn from_usize(s: usize) -> Option<Self> {\n+        Some(match s {\n+            0 => return None,\n+            1 => BacktraceStyle::Short,\n+            2 => BacktraceStyle::Full,\n+            3 => BacktraceStyle::Off,\n+            _ => unreachable!(),\n+        })\n+    }\n+}\n+\n+// Tracks whether we should/can capture a backtrace, and how we should display\n+// that backtrace.\n+//\n+// Internally stores equivalent of an Option<BacktraceStyle>.\n+static SHOULD_CAPTURE: AtomicUsize = AtomicUsize::new(0);\n+\n+/// Configure whether the default panic hook will capture and display a\n+/// backtrace.\n+///\n+/// The default value for this setting may be set by the `RUST_BACKTRACE`\n+/// environment variable; see the details in [`get_backtrace_style`].\n+#[unstable(feature = \"panic_backtrace_config\", issue = \"93346\")]\n+pub fn set_backtrace_style(style: BacktraceStyle) {\n+    if !cfg!(feature = \"backtrace\") {\n+        // If the `backtrace` feature of this crate isn't enabled, skip setting.\n+        return;\n+    }\n+    SHOULD_CAPTURE.store(style.as_usize(), Ordering::Release);\n+}\n+\n+/// Checks whether the standard library's panic hook will capture and print a\n+/// backtrace.\n+///\n+/// This function will, if a backtrace style has not been set via\n+/// [`set_backtrace_style`], read the environment variable `RUST_BACKTRACE` to\n+/// determine a default value for the backtrace formatting:\n+///\n+/// The first call to `get_backtrace_style` may read the `RUST_BACKTRACE`\n+/// environment variable if `set_backtrace_style` has not been called to\n+/// override the default value. After a call to `set_backtrace_style` or\n+/// `get_backtrace_style`, any changes to `RUST_BACKTRACE` will have no effect.\n+///\n+/// `RUST_BACKTRACE` is read according to these rules:\n+///\n+/// * `0` for `BacktraceStyle::Off`\n+/// * `full` for `BacktraceStyle::Full`\n+/// * `1` for `BacktraceStyle::Short`\n+/// * Other values are currently `BacktraceStyle::Short`, but this may change in\n+///   the future\n+///\n+/// Returns `None` if backtraces aren't currently supported.\n+#[unstable(feature = \"panic_backtrace_config\", issue = \"93346\")]\n+pub fn get_backtrace_style() -> Option<BacktraceStyle> {\n+    if !cfg!(feature = \"backtrace\") {\n+        // If the `backtrace` feature of this crate isn't enabled quickly return\n+        // `Unsupported` so this can be constant propagated all over the place\n+        // to optimize away callers.\n+        return None;\n+    }\n+    if let Some(style) = BacktraceStyle::from_usize(SHOULD_CAPTURE.load(Ordering::Acquire)) {\n+        return Some(style);\n+    }\n+\n+    // Setting environment variables for Fuchsia components isn't a standard\n+    // or easily supported workflow. For now, display backtraces by default.\n+    let format = if cfg!(target_os = \"fuchsia\") {\n+        BacktraceStyle::Full\n+    } else {\n+        crate::env::var_os(\"RUST_BACKTRACE\")\n+            .map(|x| {\n+                if &x == \"0\" {\n+                    BacktraceStyle::Off\n+                } else if &x == \"full\" {\n+                    BacktraceStyle::Full\n+                } else {\n+                    BacktraceStyle::Short\n+                }\n+            })\n+            .unwrap_or(BacktraceStyle::Off)\n+    };\n+    set_backtrace_style(format);\n+    Some(format)\n+}\n+\n #[cfg(test)]\n mod tests;"}, {"sha": "2b9ae3210de250ed5d567ab4378c4c615d351a53", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b3800860e123443ffada615538926beed6bc4f85/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3800860e123443ffada615538926beed6bc4f85/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=b3800860e123443ffada615538926beed6bc4f85", "patch": "@@ -9,6 +9,7 @@\n \n #![deny(unsafe_op_in_unsafe_fn)]\n \n+use crate::panic::BacktraceStyle;\n use core::panic::{BoxMeUp, Location, PanicInfo};\n \n use crate::any::Any;\n@@ -18,7 +19,7 @@ use crate::mem::{self, ManuallyDrop};\n use crate::process;\n use crate::sync::atomic::{AtomicBool, Ordering};\n use crate::sys::stdio::panic_output;\n-use crate::sys_common::backtrace::{self, RustBacktrace};\n+use crate::sys_common::backtrace;\n use crate::sys_common::rwlock::StaticRWLock;\n use crate::sys_common::thread_info;\n use crate::thread;\n@@ -262,10 +263,10 @@ where\n fn default_hook(info: &PanicInfo<'_>) {\n     // If this is a double panic, make sure that we print a backtrace\n     // for this panic. Otherwise only print it if logging is enabled.\n-    let backtrace_env = if panic_count::get_count() >= 2 {\n-        backtrace::rust_backtrace_print_full()\n+    let backtrace = if panic_count::get_count() >= 2 {\n+        BacktraceStyle::full()\n     } else {\n-        backtrace::rust_backtrace_env()\n+        crate::panic::get_backtrace_style()\n     };\n \n     // The current implementation always returns `Some`.\n@@ -286,17 +287,23 @@ fn default_hook(info: &PanicInfo<'_>) {\n \n         static FIRST_PANIC: AtomicBool = AtomicBool::new(true);\n \n-        match backtrace_env {\n-            RustBacktrace::Print(format) => drop(backtrace::print(err, format)),\n-            RustBacktrace::Disabled => {}\n-            RustBacktrace::RuntimeDisabled => {\n+        match backtrace {\n+            Some(BacktraceStyle::Short) => {\n+                drop(backtrace::print(err, crate::backtrace_rs::PrintFmt::Short))\n+            }\n+            Some(BacktraceStyle::Full) => {\n+                drop(backtrace::print(err, crate::backtrace_rs::PrintFmt::Full))\n+            }\n+            Some(BacktraceStyle::Off) => {\n                 if FIRST_PANIC.swap(false, Ordering::SeqCst) {\n                     let _ = writeln!(\n                         err,\n                         \"note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\"\n                     );\n                 }\n             }\n+            // If backtraces aren't supported, do nothing.\n+            None => {}\n         }\n     };\n "}, {"sha": "b0b55592f6f3719995c531b4a0225bacf345cb20", "filename": "library/std/src/sys_common/backtrace.rs", "status": "modified", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/b3800860e123443ffada615538926beed6bc4f85/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3800860e123443ffada615538926beed6bc4f85/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs?ref=b3800860e123443ffada615538926beed6bc4f85", "patch": "@@ -7,7 +7,6 @@ use crate::fmt;\n use crate::io;\n use crate::io::prelude::*;\n use crate::path::{self, Path, PathBuf};\n-use crate::sync::atomic::{self, Ordering};\n use crate::sys_common::mutex::StaticMutex;\n \n /// Max number of frames to print.\n@@ -144,62 +143,6 @@ where\n     result\n }\n \n-pub enum RustBacktrace {\n-    Print(PrintFmt),\n-    Disabled,\n-    RuntimeDisabled,\n-}\n-\n-// If the `backtrace` feature of this crate isn't enabled quickly return\n-// `Disabled` so this can be constant propagated all over the place to\n-// optimize away callers.\n-#[cfg(not(feature = \"backtrace\"))]\n-pub fn rust_backtrace_env() -> RustBacktrace {\n-    RustBacktrace::Disabled\n-}\n-\n-// For now logging is turned off by default, and this function checks to see\n-// whether the magical environment variable is present to see if it's turned on.\n-#[cfg(feature = \"backtrace\")]\n-pub fn rust_backtrace_env() -> RustBacktrace {\n-    // Setting environment variables for Fuchsia components isn't a standard\n-    // or easily supported workflow. For now, always display backtraces.\n-    if cfg!(target_os = \"fuchsia\") {\n-        return RustBacktrace::Print(PrintFmt::Full);\n-    }\n-\n-    static ENABLED: atomic::AtomicIsize = atomic::AtomicIsize::new(0);\n-    match ENABLED.load(Ordering::SeqCst) {\n-        0 => {}\n-        1 => return RustBacktrace::RuntimeDisabled,\n-        2 => return RustBacktrace::Print(PrintFmt::Short),\n-        _ => return RustBacktrace::Print(PrintFmt::Full),\n-    }\n-\n-    let (format, cache) = env::var_os(\"RUST_BACKTRACE\")\n-        .map(|x| {\n-            if &x == \"0\" {\n-                (RustBacktrace::RuntimeDisabled, 1)\n-            } else if &x == \"full\" {\n-                (RustBacktrace::Print(PrintFmt::Full), 3)\n-            } else {\n-                (RustBacktrace::Print(PrintFmt::Short), 2)\n-            }\n-        })\n-        .unwrap_or((RustBacktrace::RuntimeDisabled, 1));\n-    ENABLED.store(cache, Ordering::SeqCst);\n-    format\n-}\n-\n-/// Setting for printing the full backtrace, unless backtraces are completely disabled\n-pub(crate) fn rust_backtrace_print_full() -> RustBacktrace {\n-    if cfg!(feature = \"backtrace\") {\n-        RustBacktrace::Print(PrintFmt::Full)\n-    } else {\n-        RustBacktrace::Disabled\n-    }\n-}\n-\n /// Prints the filename of the backtrace frame.\n ///\n /// See also `output`."}, {"sha": "979cc56b8312ea94d6146dcc1a1fe5751371407b", "filename": "src/test/ui/panics/runtime-switch.legacy.run.stderr", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b3800860e123443ffada615538926beed6bc4f85/src%2Ftest%2Fui%2Fpanics%2Fruntime-switch.legacy.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3800860e123443ffada615538926beed6bc4f85/src%2Ftest%2Fui%2Fpanics%2Fruntime-switch.legacy.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fruntime-switch.legacy.run.stderr?ref=b3800860e123443ffada615538926beed6bc4f85", "patch": "@@ -0,0 +1,5 @@\n+thread 'main' panicked at 'explicit panic', $DIR/runtime-switch.rs:24:5\n+stack backtrace:\n+   0: std::panicking::begin_panic\n+   1: runtime_switch::main\n+note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace."}, {"sha": "c1634811406666c17223b391b45359f73b7b1b2d", "filename": "src/test/ui/panics/runtime-switch.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b3800860e123443ffada615538926beed6bc4f85/src%2Ftest%2Fui%2Fpanics%2Fruntime-switch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3800860e123443ffada615538926beed6bc4f85/src%2Ftest%2Fui%2Fpanics%2Fruntime-switch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fruntime-switch.rs?ref=b3800860e123443ffada615538926beed6bc4f85", "patch": "@@ -0,0 +1,25 @@\n+// Test for std::panic::set_backtrace_style.\n+\n+// compile-flags: -O\n+// run-fail\n+// check-run-results\n+// exec-env:RUST_BACKTRACE=0\n+\n+// ignore-msvc see #62897 and `backtrace-debuginfo.rs` test\n+// ignore-android FIXME #17520\n+// ignore-openbsd no support for libbacktrace without filename\n+// ignore-wasm no panic or subprocess support\n+// ignore-emscripten no panic or subprocess support\n+// ignore-sgx no subprocess support\n+\n+// NOTE(eddyb) output differs between symbol mangling schemes\n+// revisions: legacy v0\n+// [legacy] compile-flags: -Zunstable-options -Csymbol-mangling-version=legacy\n+//     [v0] compile-flags: -Csymbol-mangling-version=v0\n+\n+#![feature(panic_backtrace_config)]\n+\n+fn main() {\n+    std::panic::set_backtrace_style(std::panic::BacktraceStyle::Short);\n+    panic!()\n+}"}, {"sha": "48f829c26d4453e9d31b3e3c561b56bd1f6b633c", "filename": "src/test/ui/panics/runtime-switch.v0.run.stderr", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b3800860e123443ffada615538926beed6bc4f85/src%2Ftest%2Fui%2Fpanics%2Fruntime-switch.v0.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3800860e123443ffada615538926beed6bc4f85/src%2Ftest%2Fui%2Fpanics%2Fruntime-switch.v0.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fruntime-switch.v0.run.stderr?ref=b3800860e123443ffada615538926beed6bc4f85", "patch": "@@ -0,0 +1,5 @@\n+thread 'main' panicked at 'explicit panic', $DIR/runtime-switch.rs:24:5\n+stack backtrace:\n+   0: std::panicking::begin_panic::<&str>\n+   1: runtime_switch::main\n+note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace."}, {"sha": "cb6d56a167ddfe6a910b4f632af96a16f6d4f5e5", "filename": "src/tools/tidy/src/pal.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b3800860e123443ffada615538926beed6bc4f85/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3800860e123443ffada615538926beed6bc4f85/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs?ref=b3800860e123443ffada615538926beed6bc4f85", "patch": "@@ -58,6 +58,7 @@ const EXCEPTION_PATHS: &[&str] = &[\n     \"library/std/src/path.rs\",\n     \"library/std/src/sys_common\", // Should only contain abstractions over platforms\n     \"library/std/src/net/test.rs\", // Utility helpers for tests\n+    \"library/std/src/panic.rs\",   // fuchsia-specific panic backtrace handling\n ];\n \n pub fn check(path: &Path, bad: &mut bool) {"}]}