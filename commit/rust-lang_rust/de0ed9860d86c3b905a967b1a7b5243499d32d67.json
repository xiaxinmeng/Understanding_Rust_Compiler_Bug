{"sha": "de0ed9860d86c3b905a967b1a7b5243499d32d67", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMGVkOTg2MGQ4NmMzYjkwNWE5NjdiMWE3YjUyNDM0OTlkMzJkNjc=", "commit": {"author": {"name": "Jade", "email": "software@lfcode.ca", "date": "2021-05-16T01:51:18Z"}, "committer": {"name": "Jade", "email": "software@lfcode.ca", "date": "2021-05-16T01:51:18Z"}, "message": "Address final feedback\n\n* rename ConstExtension->ConstExt\n* refactor a manual construction of a Const", "tree": {"sha": "6c98701c319b32a52fdd6d39ce85c590aaf254f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c98701c319b32a52fdd6d39ce85c590aaf254f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de0ed9860d86c3b905a967b1a7b5243499d32d67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de0ed9860d86c3b905a967b1a7b5243499d32d67", "html_url": "https://github.com/rust-lang/rust/commit/de0ed9860d86c3b905a967b1a7b5243499d32d67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de0ed9860d86c3b905a967b1a7b5243499d32d67/comments", "author": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78d6b88f211cc9faf88815ce7fb1a91546cfce15", "url": "https://api.github.com/repos/rust-lang/rust/commits/78d6b88f211cc9faf88815ce7fb1a91546cfce15", "html_url": "https://github.com/rust-lang/rust/commit/78d6b88f211cc9faf88815ce7fb1a91546cfce15"}], "stats": {"total": 58, "additions": 26, "deletions": 32}, "files": [{"sha": "7e8a5bca314f739183d5ed28a6bd20ea75894f1b", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de0ed9860d86c3b905a967b1a7b5243499d32d67/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0ed9860d86c3b905a967b1a7b5243499d32d67/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=de0ed9860d86c3b905a967b1a7b5243499d32d67", "patch": "@@ -53,7 +53,7 @@ use hir_def::{\n use hir_expand::{diagnostics::DiagnosticSink, name::name, MacroDefKind};\n use hir_ty::{\n     autoderef,\n-    consteval::ConstExtension,\n+    consteval::ConstExt,\n     could_unify,\n     method_resolution::{self, def_crates, TyFingerprint},\n     primitive::UintTy,"}, {"sha": "9e44547cb03a6fbe432cd799f38f6dacba5e7614", "filename": "crates/hir_def/src/type_ref.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de0ed9860d86c3b905a967b1a7b5243499d32d67/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0ed9860d86c3b905a967b1a7b5243499d32d67/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs?ref=de0ed9860d86c3b905a967b1a7b5243499d32d67", "patch": "@@ -336,6 +336,14 @@ impl std::fmt::Display for ConstScalar {\n }\n \n impl ConstScalar {\n+    /// Gets a target usize out of the ConstScalar\n+    pub fn as_usize(&self) -> Option<u64> {\n+        match self {\n+            &ConstScalar::Usize(us) => Some(us),\n+            _ => None,\n+        }\n+    }\n+\n     // FIXME: as per the comments on `TypeRef::Array`, this evaluation should not happen at this\n     // parse stage.\n     fn usize_from_literal_expr(expr: ast::Expr) -> ConstScalar {"}, {"sha": "e3ceb3d626996ac70cf023a26fbbb7675a2faf08", "filename": "crates/hir_ty/src/consteval.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/de0ed9860d86c3b905a967b1a7b5243499d32d67/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0ed9860d86c3b905a967b1a7b5243499d32d67/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs?ref=de0ed9860d86c3b905a967b1a7b5243499d32d67", "patch": "@@ -11,12 +11,12 @@ use hir_def::{\n use crate::{Const, ConstData, ConstValue, Interner, TyKind};\n \n /// Extension trait for [`Const`]\n-pub trait ConstExtension {\n+pub trait ConstExt {\n     /// Is a [`Const`] unknown?\n     fn is_unknown(&self) -> bool;\n }\n \n-impl ConstExtension for Const {\n+impl ConstExt for Const {\n     fn is_unknown(&self) -> bool {\n         match self.data(&Interner).value {\n             // interned Unknown\n@@ -35,20 +35,12 @@ impl ConstExtension for Const {\n     }\n }\n \n-/// Extension trait for [`Expr`]\n-pub trait ExprEval {\n-    /// Attempts to evaluate the expression as a target usize.\n-    fn eval_usize(&self) -> Option<u64>;\n-}\n-\n-impl ExprEval for Expr {\n-    // FIXME: support more than just evaluating literals\n-    fn eval_usize(&self) -> Option<u64> {\n-        match self {\n-            Expr::Literal(Literal::Uint(v, None))\n-            | Expr::Literal(Literal::Uint(v, Some(BuiltinUint::Usize))) => (*v).try_into().ok(),\n-            _ => None,\n-        }\n+// FIXME: support more than just evaluating literals\n+pub fn eval_usize(expr: &Expr) -> Option<u64> {\n+    match expr {\n+        Expr::Literal(Literal::Uint(v, None))\n+        | Expr::Literal(Literal::Uint(v, Some(BuiltinUint::Usize))) => (*v).try_into().ok(),\n+        _ => None,\n     }\n }\n "}, {"sha": "b6b5a1b750c5c414b54a3f9e944532fa427d8bb0", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/de0ed9860d86c3b905a967b1a7b5243499d32d67/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0ed9860d86c3b905a967b1a7b5243499d32d67/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=de0ed9860d86c3b905a967b1a7b5243499d32d67", "patch": "@@ -15,8 +15,7 @@ use stdx::always;\n use syntax::ast::RangeOp;\n \n use crate::{\n-    autoderef,\n-    consteval::{self, ExprEval},\n+    autoderef, consteval,\n     lower::lower_to_chalk_mutability,\n     mapping::from_chalk,\n     method_resolution, op,\n@@ -738,7 +737,7 @@ impl<'a> InferenceContext<'a> {\n                         );\n \n                         let repeat_expr = &self.body.exprs[*repeat];\n-                        repeat_expr.eval_usize()\n+                        consteval::eval_usize(repeat_expr)\n                     }\n                 };\n "}, {"sha": "bd8bb602864b41027191671d4775ba81bfa285d2", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/de0ed9860d86c3b905a967b1a7b5243499d32d67/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0ed9860d86c3b905a967b1a7b5243499d32d67/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=de0ed9860d86c3b905a967b1a7b5243499d32d67", "patch": "@@ -9,9 +9,7 @@ use std::cell::{Cell, RefCell};\n use std::{iter, sync::Arc};\n \n use base_db::CrateId;\n-use chalk_ir::{\n-    cast::Cast, fold::Shift, interner::HasInterner, Mutability, Safety, Scalar, UintTy,\n-};\n+use chalk_ir::{cast::Cast, fold::Shift, interner::HasInterner, Mutability, Safety};\n use hir_def::{\n     adt::StructKind,\n     body::{Expander, LowerCtx},\n@@ -31,16 +29,17 @@ use stdx::impl_from;\n use syntax::ast;\n \n use crate::{\n+    consteval,\n     db::HirDatabase,\n     mapping::ToChalk,\n     static_lifetime, to_assoc_type_id, to_chalk_trait_id, to_placeholder_idx,\n     utils::{\n         all_super_trait_refs, associated_type_by_name_including_super_traits, generics, Generics,\n     },\n-    AliasEq, AliasTy, Binders, BoundVar, CallableSig, ConstData, ConstValue, DebruijnIndex, DynTy,\n-    FnPointer, FnSig, FnSubst, ImplTraitId, Interner, OpaqueTy, PolyFnSig, ProjectionTy,\n-    QuantifiedWhereClause, QuantifiedWhereClauses, ReturnTypeImplTrait, ReturnTypeImplTraits,\n-    Substitution, TraitEnvironment, TraitRef, TraitRefExt, Ty, TyBuilder, TyKind, WhereClause,\n+    AliasEq, AliasTy, Binders, BoundVar, CallableSig, DebruijnIndex, DynTy, FnPointer, FnSig,\n+    FnSubst, ImplTraitId, Interner, OpaqueTy, PolyFnSig, ProjectionTy, QuantifiedWhereClause,\n+    QuantifiedWhereClauses, ReturnTypeImplTrait, ReturnTypeImplTraits, Substitution,\n+    TraitEnvironment, TraitRef, TraitRefExt, Ty, TyBuilder, TyKind, WhereClause,\n };\n \n #[derive(Debug)]\n@@ -176,11 +175,7 @@ impl<'a> TyLoweringContext<'a> {\n             TypeRef::Array(inner, len) => {\n                 let inner_ty = self.lower_ty(inner);\n \n-                let const_len = ConstData {\n-                    ty: TyKind::Scalar(Scalar::Uint(UintTy::Usize)).intern(&Interner),\n-                    value: ConstValue::Concrete(chalk_ir::ConcreteConst { interned: *len }),\n-                }\n-                .intern(&Interner);\n+                let const_len = consteval::usize_const(len.as_usize());\n \n                 TyKind::Array(inner_ty, const_len).intern(&Interner)\n             }"}]}