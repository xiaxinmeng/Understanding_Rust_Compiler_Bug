{"sha": "284c1741d6536be6e7d4d4d252c424b90d6f1e45", "node_id": "C_kwDOAAsO6NoAKDI4NGMxNzQxZDY1MzZiZTZlN2Q0ZDRkMjUyYzQyNGI5MGQ2ZjFlNDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-27T15:17:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-27T15:17:47Z"}, "message": "Auto merge of #14419 - Veykril:proc-ids, r=Veykril\n\nfix: Fix proc-macro paths using incorrect CrateId's for `rust-project.json` workspaces", "tree": {"sha": "be92fa7eb2afd22bf43ca19a35bd1d57fcefc74a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be92fa7eb2afd22bf43ca19a35bd1d57fcefc74a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/284c1741d6536be6e7d4d4d252c424b90d6f1e45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/284c1741d6536be6e7d4d4d252c424b90d6f1e45", "html_url": "https://github.com/rust-lang/rust/commit/284c1741d6536be6e7d4d4d252c424b90d6f1e45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/284c1741d6536be6e7d4d4d252c424b90d6f1e45/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b99d5eb97315faca04a33bae40bd2fb809ba9d46", "url": "https://api.github.com/repos/rust-lang/rust/commits/b99d5eb97315faca04a33bae40bd2fb809ba9d46", "html_url": "https://github.com/rust-lang/rust/commit/b99d5eb97315faca04a33bae40bd2fb809ba9d46"}, {"sha": "b03a218b573511d15fd5b398a5c1db1509ab8d59", "url": "https://api.github.com/repos/rust-lang/rust/commits/b03a218b573511d15fd5b398a5c1db1509ab8d59", "html_url": "https://github.com/rust-lang/rust/commit/b03a218b573511d15fd5b398a5c1db1509ab8d59"}], "stats": {"total": 74, "additions": 36, "deletions": 38}, "files": [{"sha": "886d71ebeda7aabc86547f98a80f74ca0784b632", "filename": "crates/hir-def/src/body/lower.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/284c1741d6536be6e7d4d4d252c424b90d6f1e45/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/284c1741d6536be6e7d4d4d252c424b90d6f1e45/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs?ref=284c1741d6536be6e7d4d4d252c424b90d6f1e45", "patch": "@@ -1083,9 +1083,9 @@ impl ExprCollector<'_> {\n                         .collect(),\n                 }\n             }\n-            // FIXME: rustfmt removes this label if it is a block and not a loop\n-            ast::Pat::LiteralPat(lit) => 'b: loop {\n-                break if let Some(ast_lit) = lit.literal() {\n+            #[rustfmt::skip] // https://github.com/rust-lang/rustfmt/issues/5676\n+            ast::Pat::LiteralPat(lit) => 'b: {\n+                if let Some(ast_lit) = lit.literal() {\n                     let mut hir_lit: Literal = ast_lit.kind().into();\n                     if lit.minus_token().is_some() {\n                         let Some(h) = hir_lit.negate() else {\n@@ -1099,7 +1099,7 @@ impl ExprCollector<'_> {\n                     Pat::Lit(expr_id)\n                 } else {\n                     Pat::Missing\n-                };\n+                }\n             },\n             ast::Pat::RestPat(_) => {\n                 // `RestPat` requires special handling and should not be mapped"}, {"sha": "916447fdffa9791c59327b9e6ead468ef30cb789", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 32, "deletions": 34, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/284c1741d6536be6e7d4d4d252c424b90d6f1e45/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/284c1741d6536be6e7d4d4d252c424b90d6f1e45/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=284c1741d6536be6e7d4d4d252c424b90d6f1e45", "patch": "@@ -704,15 +704,7 @@ fn project_json_to_crate_graph(\n         })\n         .map(|(crate_id, krate, file_id)| {\n             let env = krate.env.clone().into_iter().collect();\n-            if let Some(path) = krate.proc_macro_dylib_path.clone() {\n-                proc_macros.insert(\n-                    crate_id,\n-                    Some((\n-                        krate.display_name.as_ref().map(|it| it.canonical_name().to_owned()),\n-                        path,\n-                    )),\n-                );\n-            }\n+\n             let target_cfgs = match krate.target.as_deref() {\n                 Some(target) => cfg_cache\n                     .entry(target)\n@@ -722,31 +714,37 @@ fn project_json_to_crate_graph(\n \n             let mut cfg_options = CfgOptions::default();\n             cfg_options.extend(target_cfgs.iter().chain(krate.cfg.iter()).cloned());\n-            (\n-                crate_id,\n-                crate_graph.add_crate_root(\n-                    file_id,\n-                    krate.edition,\n-                    krate.display_name.clone(),\n-                    krate.version.clone(),\n-                    cfg_options.clone(),\n-                    cfg_options,\n-                    env,\n-                    krate.is_proc_macro,\n-                    if krate.display_name.is_some() {\n-                        CrateOrigin::CratesIo {\n-                            repo: krate.repository.clone(),\n-                            name: krate\n-                                .display_name\n-                                .clone()\n-                                .map(|n| n.canonical_name().to_string()),\n-                        }\n-                    } else {\n-                        CrateOrigin::CratesIo { repo: None, name: None }\n-                    },\n-                    target_layout.clone(),\n-                ),\n-            )\n+            let crate_graph_crate_id = crate_graph.add_crate_root(\n+                file_id,\n+                krate.edition,\n+                krate.display_name.clone(),\n+                krate.version.clone(),\n+                cfg_options.clone(),\n+                cfg_options,\n+                env,\n+                krate.is_proc_macro,\n+                if krate.display_name.is_some() {\n+                    CrateOrigin::CratesIo {\n+                        repo: krate.repository.clone(),\n+                        name: krate.display_name.clone().map(|n| n.canonical_name().to_string()),\n+                    }\n+                } else {\n+                    CrateOrigin::CratesIo { repo: None, name: None }\n+                },\n+                target_layout.clone(),\n+            );\n+            if krate.is_proc_macro {\n+                if let Some(path) = krate.proc_macro_dylib_path.clone() {\n+                    proc_macros.insert(\n+                        crate_graph_crate_id,\n+                        Some((\n+                            krate.display_name.as_ref().map(|it| it.canonical_name().to_owned()),\n+                            path,\n+                        )),\n+                    );\n+                }\n+            }\n+            (crate_id, crate_graph_crate_id)\n         })\n         .collect();\n "}]}