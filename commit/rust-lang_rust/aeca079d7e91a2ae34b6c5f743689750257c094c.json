{"sha": "aeca079d7e91a2ae34b6c5f743689750257c094c", "node_id": "C_kwDOAAsO6NoAKGFlY2EwNzlkN2U5MWEyYWUzNGI2YzVmNzQzNjg5NzUwMjU3YzA5NGM", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-07-25T22:14:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-25T22:14:46Z"}, "message": "Rollup merge of #99084 - RalfJung:write_bytes, r=thomcc\n\nclarify how write_bytes can lead to UB due to invalid values\n\nFixes https://github.com/rust-lang/unsafe-code-guidelines/issues/330\n\nCc ``@5225225``", "tree": {"sha": "dff6fe9557bb01a38aeea3a52229039e2820ab78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dff6fe9557bb01a38aeea3a52229039e2820ab78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aeca079d7e91a2ae34b6c5f743689750257c094c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi3xXXCRBK7hj4Ov3rIwAAI1AIACzz0+bbi0tqcb/QdqNVRcL1\nohWHM/m8Xdyr5zCIcSAvdR8Pfj+OI3Gf3vcPvQhleGhAqMVadyqTG8rlUUTdEH/Y\neGwGPYgXQXfQMKffW65NTXrvv+hesWU7JxpfaMPD1FA5UMR9c0x/gbe6Z9aDabXl\nGRq3eq0z8G/wKdismMS6t9B4Q9opuoaAz8so9uiTxectuOp7G7rnvqCqiwT0MUX+\ni5ry8jke7vRZC654A749Scou0qzfFlEQ8vb0y20kSR9vO7TkwKQ/CgZ+Af6BT+Ni\nPUlOzlh7fUgN+aA6Ai2mC9j2npnU2qnHSe8SenUH6BSHVejf1AUSyMO+k+jcVfE=\n=bf8Q\n-----END PGP SIGNATURE-----\n", "payload": "tree dff6fe9557bb01a38aeea3a52229039e2820ab78\nparent b8aab9781a76f4498cc3819674397dedad37f20b\nparent 1b3870e4271ca7b93de0b17ea6544e749fba3483\nauthor Yuki Okushi <jtitor@2k36.org> 1658787286 +0900\ncommitter GitHub <noreply@github.com> 1658787286 +0900\n\nRollup merge of #99084 - RalfJung:write_bytes, r=thomcc\n\nclarify how write_bytes can lead to UB due to invalid values\n\nFixes https://github.com/rust-lang/unsafe-code-guidelines/issues/330\n\nCc ``@5225225``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aeca079d7e91a2ae34b6c5f743689750257c094c", "html_url": "https://github.com/rust-lang/rust/commit/aeca079d7e91a2ae34b6c5f743689750257c094c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aeca079d7e91a2ae34b6c5f743689750257c094c/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8aab9781a76f4498cc3819674397dedad37f20b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8aab9781a76f4498cc3819674397dedad37f20b", "html_url": "https://github.com/rust-lang/rust/commit/b8aab9781a76f4498cc3819674397dedad37f20b"}, {"sha": "1b3870e4271ca7b93de0b17ea6544e749fba3483", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b3870e4271ca7b93de0b17ea6544e749fba3483", "html_url": "https://github.com/rust-lang/rust/commit/1b3870e4271ca7b93de0b17ea6544e749fba3483"}], "stats": {"total": 51, "additions": 14, "deletions": 37}, "files": [{"sha": "7e65f4ebdad8ae0c9ca4356559ce2469ec89b889", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 14, "deletions": 37, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/aeca079d7e91a2ae34b6c5f743689750257c094c/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeca079d7e91a2ae34b6c5f743689750257c094c/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=aeca079d7e91a2ae34b6c5f743689750257c094c", "patch": "@@ -2566,14 +2566,23 @@ pub const unsafe fn copy<T>(src: *const T, dst: *mut T, count: usize) {\n ///\n /// * `dst` must be properly aligned.\n ///\n-/// Additionally, the caller must ensure that writing `count *\n-/// size_of::<T>()` bytes to the given region of memory results in a valid\n-/// value of `T`. Using a region of memory typed as a `T` that contains an\n-/// invalid value of `T` is undefined behavior.\n-///\n /// Note that even if the effectively copied size (`count * size_of::<T>()`) is\n /// `0`, the pointer must be non-null and properly aligned.\n ///\n+/// Additionally, note that changing `*dst` in this way can easily lead to undefined behavior (UB)\n+/// later if the written bytes are not a valid representation of some `T`. For instance, the\n+/// following is an **incorrect** use of this function:\n+///\n+/// ```rust,no_run\n+/// unsafe {\n+///     let mut value: u8 = 0;\n+///     let ptr: *mut bool = &mut value as *mut u8 as *mut bool;\n+///     let _bool = ptr.read(); // This is fine, `ptr` points to a valid `bool`.\n+///     ptr.write_bytes(42u8, 1); // This function itself does not cause UB...\n+///     let _bool = ptr.read(); // ...but it makes this operation UB! \u26a0\ufe0f\n+/// }\n+/// ```\n+///\n /// [valid]: crate::ptr#safety\n ///\n /// # Examples\n@@ -2590,38 +2599,6 @@ pub const unsafe fn copy<T>(src: *const T, dst: *mut T, count: usize) {\n /// }\n /// assert_eq!(vec, [0xfefefefe, 0xfefefefe, 0, 0]);\n /// ```\n-///\n-/// Creating an invalid value:\n-///\n-/// ```\n-/// use std::ptr;\n-///\n-/// let mut v = Box::new(0i32);\n-///\n-/// unsafe {\n-///     // Leaks the previously held value by overwriting the `Box<T>` with\n-///     // a null pointer.\n-///     ptr::write_bytes(&mut v as *mut Box<i32>, 0, 1);\n-/// }\n-///\n-/// // At this point, using or dropping `v` results in undefined behavior.\n-/// // drop(v); // ERROR\n-///\n-/// // Even leaking `v` \"uses\" it, and hence is undefined behavior.\n-/// // mem::forget(v); // ERROR\n-///\n-/// // In fact, `v` is invalid according to basic type layout invariants, so *any*\n-/// // operation touching it is undefined behavior.\n-/// // let v2 = v; // ERROR\n-///\n-/// unsafe {\n-///     // Let us instead put in a valid value\n-///     ptr::write(&mut v as *mut Box<i32>, Box::new(42i32));\n-/// }\n-///\n-/// // Now the box is fine\n-/// assert_eq!(*v, 42);\n-/// ```\n #[doc(alias = \"memset\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(bootstrap), rustc_allowed_through_unstable_modules)]"}]}