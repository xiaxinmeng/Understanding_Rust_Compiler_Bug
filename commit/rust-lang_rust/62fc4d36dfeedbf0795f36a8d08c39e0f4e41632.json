{"sha": "62fc4d36dfeedbf0795f36a8d08c39e0f4e41632", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyZmM0ZDM2ZGZlZWRiZjA3OTVmMzZhOGQwOGMzOWUwZjRlNDE2MzI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-23T17:29:02Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-23T17:29:02Z"}, "message": "stash_diagnostic: ICE in a different way", "tree": {"sha": "b03e95cdade4124544818cc1cae3178dc8a9390e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b03e95cdade4124544818cc1cae3178dc8a9390e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62fc4d36dfeedbf0795f36a8d08c39e0f4e41632", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62fc4d36dfeedbf0795f36a8d08c39e0f4e41632", "html_url": "https://github.com/rust-lang/rust/commit/62fc4d36dfeedbf0795f36a8d08c39e0f4e41632", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62fc4d36dfeedbf0795f36a8d08c39e0f4e41632/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62d85849d0a9a828dc58a1820469daf80a2b5b52", "url": "https://api.github.com/repos/rust-lang/rust/commits/62d85849d0a9a828dc58a1820469daf80a2b5b52", "html_url": "https://github.com/rust-lang/rust/commit/62d85849d0a9a828dc58a1820469daf80a2b5b52"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "cdaa528e8e4974890e98fef4fbb0d51ccf2fedb3", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/62fc4d36dfeedbf0795f36a8d08c39e0f4e41632/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62fc4d36dfeedbf0795f36a8d08c39e0f4e41632/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=62fc4d36dfeedbf0795f36a8d08c39e0f4e41632", "patch": "@@ -466,10 +466,15 @@ impl Handler {\n     /// Stash a given diagnostic with the given `Span` and `StashKey` as the key for later stealing.\n     /// If the diagnostic with this `(span, key)` already exists, this will result in an ICE.\n     pub fn stash_diagnostic(&self, span: Span, key: StashKey, diag: Diagnostic) {\n-        if let Some(old) = self.inner.borrow_mut().stashed_diagnostics.insert((span, key), diag) {\n+        let mut inner = self.inner.borrow_mut();\n+        if let Some(mut old_diag) = inner.stashed_diagnostics.insert((span, key), diag) {\n             // We are removing a previously stashed diagnostic which should not happen.\n-            // Create a builder and drop it on the floor to get an ICE.\n-            drop(DiagnosticBuilder::new_diagnostic(self, old));\n+            old_diag.level = Bug;\n+            old_diag.note(&format!(\n+                \"{}:{}: already existing stashed diagnostic with (span = {:?}, key = {:?})\",\n+                file!(), line!(), span, key\n+            ));\n+            inner.emit_explicit_bug(&old_diag);\n         }\n     }\n \n@@ -676,6 +681,11 @@ impl Handler {\n         self.inner.borrow_mut().abort_if_errors_and_should_abort()\n     }\n \n+    /// `true` if we haven't taught a diagnostic with this code already.\n+    /// The caller must then teach the user about such a diagnostic.\n+    ///\n+    /// Used to suppress emitting the same error multiple times with extended explanation when\n+    /// calling `-Zteach`.\n     pub fn must_teach(&self, code: &DiagnosticId) -> bool {\n         self.inner.borrow_mut().must_teach(code)\n     }\n@@ -698,11 +708,6 @@ impl Handler {\n }\n \n impl HandlerInner {\n-    /// `true` if we haven't taught a diagnostic with this code already.\n-    /// The caller must then teach the user about such a diagnostic.\n-    ///\n-    /// Used to suppress emitting the same error multiple times with extended explanation when\n-    /// calling `-Zteach`.\n     fn must_teach(&mut self, code: &DiagnosticId) -> bool {\n         self.taught_diagnostics.insert(code.clone())\n     }\n@@ -833,7 +838,11 @@ impl HandlerInner {\n     }\n \n     fn span_bug<S: Into<MultiSpan>>(&mut self, sp: S, msg: &str) -> ! {\n-        self.emit_diagnostic(Diagnostic::new(Bug, msg).set_span(sp));\n+        self.emit_explicit_bug(Diagnostic::new(Bug, msg).set_span(sp));\n+    }\n+\n+    fn emit_explicit_bug(&mut self, diag: &Diagnostic) -> ! {\n+        self.emit_diagnostic(diag);\n         self.abort_if_errors_and_should_abort();\n         panic!(ExplicitBug);\n     }"}]}