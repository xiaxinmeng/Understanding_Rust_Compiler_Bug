{"sha": "25ef27759442b84c90af08dba348611b04d10654", "node_id": "C_kwDOAAsO6NoAKDI1ZWYyNzc1OTQ0MmI4NGM5MGFmMDhkYmEzNDg2MTFiMDRkMTA2NTQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-10T18:27:54Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-13T10:14:38Z"}, "message": "Add mir-opt test.", "tree": {"sha": "23b5f4658b73e64378a934258e8a111d34990dc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23b5f4658b73e64378a934258e8a111d34990dc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25ef27759442b84c90af08dba348611b04d10654", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25ef27759442b84c90af08dba348611b04d10654", "html_url": "https://github.com/rust-lang/rust/commit/25ef27759442b84c90af08dba348611b04d10654", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25ef27759442b84c90af08dba348611b04d10654/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccef802163ddc560a107371f256b1cbd82abeb00", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccef802163ddc560a107371f256b1cbd82abeb00", "html_url": "https://github.com/rust-lang/rust/commit/ccef802163ddc560a107371f256b1cbd82abeb00"}], "stats": {"total": 173, "additions": 173, "deletions": 0}, "files": [{"sha": "94b8e6a7f2fe9d6ce0882659bebb0a32aededfad", "filename": "tests/mir-opt/reference_prop.debuginfo.ReferencePropagation.diff", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/25ef27759442b84c90af08dba348611b04d10654/tests%2Fmir-opt%2Freference_prop.debuginfo.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/25ef27759442b84c90af08dba348611b04d10654/tests%2Fmir-opt%2Freference_prop.debuginfo.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.debuginfo.ReferencePropagation.diff?ref=25ef27759442b84c90af08dba348611b04d10654", "patch": "@@ -0,0 +1,151 @@\n+- // MIR for `debuginfo` before ReferencePropagation\n++ // MIR for `debuginfo` after ReferencePropagation\n+  \n+  fn debuginfo() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/reference_prop.rs:+0:16: +0:16\n+      let _1: &mut u8;                     // in scope 0 at $DIR/reference_prop.rs:+3:9: +3:19\n+      let mut _2: u8;                      // in scope 0 at $DIR/reference_prop.rs:+3:27: +3:31\n+      let _4: debuginfo::T;                // in scope 0 at $DIR/reference_prop.rs:+4:18: +4:22\n+      let _6: ();                          // in scope 0 at $DIR/reference_prop.rs:+9:5: +12:6\n+      let mut _7: std::option::Option<i32>; // in scope 0 at $DIR/reference_prop.rs:+9:11: +9:18\n+      let mut _8: isize;                   // in scope 0 at $DIR/reference_prop.rs:+10:9: +10:13\n+      let mut _10: &[i32];                 // in scope 0 at $DIR/reference_prop.rs:+16:82: +16:94\n+      let _11: &[i32];                     // in scope 0 at $DIR/reference_prop.rs:+16:83: +16:94\n+      let mut _12: &[i32; 10];             // in scope 0 at $DIR/reference_prop.rs:+16:83: +16:90\n+      let _13: [i32; 10];                  // in scope 0 at $DIR/reference_prop.rs:+16:83: +16:90\n+      let mut _14: std::ops::RangeFull;    // in scope 0 at $DIR/reference_prop.rs:+16:91: +16:93\n+      let mut _15: usize;                  // in scope 0 at $DIR/reference_prop.rs:+16:12: +16:79\n+      let mut _16: usize;                  // in scope 0 at $DIR/reference_prop.rs:+16:12: +16:79\n+      let mut _17: bool;                   // in scope 0 at $DIR/reference_prop.rs:+16:12: +16:79\n+      scope 1 {\n+-         debug ref_mut_u8 => _1;          // in scope 1 at $DIR/reference_prop.rs:+3:9: +3:19\n++         debug ref_mut_u8 => &_2;         // in scope 1 at $DIR/reference_prop.rs:+3:9: +3:19\n+          let _3: &u8;                     // in scope 1 at $DIR/reference_prop.rs:+4:9: +4:14\n+          let mut _23: &debuginfo::T;      // in scope 1 at $DIR/reference_prop.rs:+4:17: +4:24\n+          scope 2 {\n+-             debug field => _3;           // in scope 2 at $DIR/reference_prop.rs:+4:9: +4:14\n++             debug field => &((*_23).0: u8); // in scope 2 at $DIR/reference_prop.rs:+4:9: +4:14\n+              let _5: &u8;                 // in scope 2 at $DIR/reference_prop.rs:+7:9: +7:17\n+              scope 3 {\n+-                 debug reborrow => _5;    // in scope 3 at $DIR/reference_prop.rs:+7:9: +7:17\n++                 debug reborrow => _1;    // in scope 3 at $DIR/reference_prop.rs:+7:9: +7:17\n+                  let _9: &i32;            // in scope 3 at $DIR/reference_prop.rs:+11:14: +11:31\n+                  let mut _22: &std::option::Option<i32>; // in scope 3 at $DIR/reference_prop.rs:+11:14: +11:31\n+                  scope 4 {\n+-                     debug variant_field => _9; // in scope 4 at $DIR/reference_prop.rs:+11:14: +11:31\n++                     debug variant_field => &(((*_22) as Some).0: i32); // in scope 4 at $DIR/reference_prop.rs:+11:14: +11:31\n+                  }\n+                  scope 5 {\n+-                     debug constant_index => _18; // in scope 5 at $DIR/reference_prop.rs:+16:16: +16:34\n++                     debug constant_index => &(*_10)[1 of 3]; // in scope 5 at $DIR/reference_prop.rs:+16:16: +16:34\n+                      debug subslice => _19; // in scope 5 at $DIR/reference_prop.rs:+16:36: +16:44\n+                      debug constant_index_from_end => _20; // in scope 5 at $DIR/reference_prop.rs:+16:51: +16:78\n+                      let _18: &i32;       // in scope 5 at $DIR/reference_prop.rs:+16:16: +16:34\n+                      let _19: &[i32];     // in scope 5 at $DIR/reference_prop.rs:+16:36: +16:44\n+                      let _20: &i32;       // in scope 5 at $DIR/reference_prop.rs:+16:51: +16:78\n+                      let mut _21: &[i32; 10]; // in scope 5 at $DIR/reference_prop.rs:+16:83: +16:90\n+                  }\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/reference_prop.rs:+3:9: +3:19\n+          StorageLive(_2);                 // scope 0 at $DIR/reference_prop.rs:+3:27: +3:31\n+          _2 = const 5_u8;                 // scope 0 at $DIR/reference_prop.rs:+3:27: +3:31\n+          _1 = &mut _2;                    // scope 0 at $DIR/reference_prop.rs:+3:22: +3:31\n+-         StorageLive(_3);                 // scope 1 at $DIR/reference_prop.rs:+4:9: +4:14\n+          _23 = const _;                   // scope 1 at $DIR/reference_prop.rs:+4:17: +4:24\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:463:17: 463:24\n+                                           // + literal: Const { ty: &T, val: Unevaluated(debuginfo, [], Some(promoted[2])) }\n+-         _3 = &((*_23).0: u8);            // scope 1 at $DIR/reference_prop.rs:+4:17: +4:24\n+-         StorageLive(_5);                 // scope 2 at $DIR/reference_prop.rs:+7:9: +7:17\n+-         _5 = &(*_1);                     // scope 2 at $DIR/reference_prop.rs:+7:20: +7:32\n+-         StorageLive(_6);                 // scope 3 at $DIR/reference_prop.rs:+9:5: +12:6\n+          StorageLive(_7);                 // scope 3 at $DIR/reference_prop.rs:+9:11: +9:18\n+          _7 = Option::<i32>::Some(const 0_i32); // scope 3 at $DIR/reference_prop.rs:+9:11: +9:18\n+          _8 = discriminant(_7);           // scope 3 at $DIR/reference_prop.rs:+9:11: +9:18\n+          switchInt(move _8) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 3 at $DIR/reference_prop.rs:+9:5: +9:18\n+      }\n+  \n+      bb1: {\n+-         StorageLive(_9);                 // scope 3 at $DIR/reference_prop.rs:+11:14: +11:31\n+          _22 = const _;                   // scope 3 at $DIR/reference_prop.rs:+11:14: +11:31\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:470:14: 470:31\n+                                           // + literal: Const { ty: &Option<i32>, val: Unevaluated(debuginfo, [], Some(promoted[1])) }\n+-         _9 = &(((*_22) as Some).0: i32); // scope 3 at $DIR/reference_prop.rs:+11:14: +11:31\n+-         _6 = const ();                   // scope 4 at $DIR/reference_prop.rs:+11:36: +11:38\n+-         StorageDead(_9);                 // scope 3 at $DIR/reference_prop.rs:+11:37: +11:38\n+          goto -> bb4;                     // scope 3 at $DIR/reference_prop.rs:+11:37: +11:38\n+      }\n+  \n+      bb2: {\n+          unreachable;                     // scope 3 at $DIR/reference_prop.rs:+9:11: +9:18\n+      }\n+  \n+      bb3: {\n+-         _6 = const ();                   // scope 3 at $DIR/reference_prop.rs:+10:17: +10:19\n+          goto -> bb4;                     // scope 3 at $DIR/reference_prop.rs:+10:17: +10:19\n+      }\n+  \n+      bb4: {\n+          StorageDead(_7);                 // scope 3 at $DIR/reference_prop.rs:+12:5: +12:6\n+-         StorageDead(_6);                 // scope 3 at $DIR/reference_prop.rs:+12:5: +12:6\n+          StorageLive(_10);                // scope 5 at $DIR/reference_prop.rs:+16:82: +16:94\n+          StorageLive(_11);                // scope 5 at $DIR/reference_prop.rs:+16:83: +16:94\n+          StorageLive(_12);                // scope 5 at $DIR/reference_prop.rs:+16:83: +16:90\n+          _21 = const _;                   // scope 5 at $DIR/reference_prop.rs:+16:83: +16:90\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:475:83: 475:90\n+                                           // + literal: Const { ty: &[i32; 10], val: Unevaluated(debuginfo, [], Some(promoted[0])) }\n+          _12 = &(*_21);                   // scope 5 at $DIR/reference_prop.rs:+16:83: +16:90\n+          StorageLive(_14);                // scope 5 at $DIR/reference_prop.rs:+16:91: +16:93\n+          _14 = RangeFull;                 // scope 5 at $DIR/reference_prop.rs:+16:91: +16:93\n+          _11 = <[i32; 10] as Index<RangeFull>>::index(move _12, move _14) -> bb5; // scope 5 at $DIR/reference_prop.rs:+16:83: +16:94\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:475:83: 475:94\n+                                           // + literal: Const { ty: for<'a> fn(&'a [i32; 10], RangeFull) -> &'a <[i32; 10] as Index<RangeFull>>::Output {<[i32; 10] as Index<RangeFull>>::index}, val: Value(<ZST>) }\n+      }\n+  \n+      bb5: {\n+          StorageDead(_14);                // scope 5 at $DIR/reference_prop.rs:+16:93: +16:94\n+          StorageDead(_12);                // scope 5 at $DIR/reference_prop.rs:+16:93: +16:94\n+          _10 = &(*_11);                   // scope 5 at $DIR/reference_prop.rs:+16:82: +16:94\n+          _15 = Len((*_10));               // scope 5 at $DIR/reference_prop.rs:+16:12: +16:79\n+          _16 = const 3_usize;             // scope 5 at $DIR/reference_prop.rs:+16:12: +16:79\n+          _17 = Ge(move _15, move _16);    // scope 5 at $DIR/reference_prop.rs:+16:12: +16:79\n+          switchInt(move _17) -> [0: bb7, otherwise: bb6]; // scope 5 at $DIR/reference_prop.rs:+16:12: +16:79\n+      }\n+  \n+      bb6: {\n+-         StorageLive(_18);                // scope 5 at $DIR/reference_prop.rs:+16:16: +16:34\n+-         _18 = &(*_10)[1 of 3];           // scope 5 at $DIR/reference_prop.rs:+16:16: +16:34\n+          StorageLive(_19);                // scope 5 at $DIR/reference_prop.rs:+16:36: +16:44\n+          _19 = &(*_10)[2:-1];             // scope 5 at $DIR/reference_prop.rs:+16:36: +16:44\n+          StorageLive(_20);                // scope 5 at $DIR/reference_prop.rs:+16:51: +16:78\n+          _20 = &(*_10)[-1 of 3];          // scope 5 at $DIR/reference_prop.rs:+16:51: +16:78\n+          _0 = const ();                   // scope 5 at $DIR/reference_prop.rs:+16:95: +17:6\n+          StorageDead(_20);                // scope 3 at $DIR/reference_prop.rs:+17:5: +17:6\n+          StorageDead(_19);                // scope 3 at $DIR/reference_prop.rs:+17:5: +17:6\n+-         StorageDead(_18);                // scope 3 at $DIR/reference_prop.rs:+17:5: +17:6\n+          goto -> bb8;                     // scope 3 at $DIR/reference_prop.rs:+16:5: +17:6\n+      }\n+  \n+      bb7: {\n+          _0 = const ();                   // scope 3 at $DIR/reference_prop.rs:+17:6: +17:6\n+          goto -> bb8;                     // scope 3 at $DIR/reference_prop.rs:+16:5: +17:6\n+      }\n+  \n+      bb8: {\n+-         StorageDead(_5);                 // scope 2 at $DIR/reference_prop.rs:+18:1: +18:2\n+-         StorageDead(_3);                 // scope 1 at $DIR/reference_prop.rs:+18:1: +18:2\n+          StorageDead(_2);                 // scope 0 at $DIR/reference_prop.rs:+18:1: +18:2\n+          StorageDead(_1);                 // scope 0 at $DIR/reference_prop.rs:+18:1: +18:2\n+          StorageDead(_11);                // scope 0 at $DIR/reference_prop.rs:+18:1: +18:2\n+          StorageDead(_10);                // scope 0 at $DIR/reference_prop.rs:+18:1: +18:2\n+          return;                          // scope 0 at $DIR/reference_prop.rs:+18:2: +18:2\n+      }\n+  }\n+  "}, {"sha": "207658860d271fbfaf9972c01f3a9eaace3ffe37", "filename": "tests/mir-opt/reference_prop.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/25ef27759442b84c90af08dba348611b04d10654/tests%2Fmir-opt%2Freference_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ef27759442b84c90af08dba348611b04d10654/tests%2Fmir-opt%2Freference_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.rs?ref=25ef27759442b84c90af08dba348611b04d10654", "patch": "@@ -456,6 +456,26 @@ fn unique_with_copies() {\n     unsafe { opaque(*y) };\n }\n \n+fn debuginfo() {\n+    struct T(u8);\n+\n+    let ref_mut_u8 = &mut 5_u8;\n+    let field = &T(0).0;\n+\n+    // Verify that we don't emit `&*` in debuginfo.\n+    let reborrow = &*ref_mut_u8;\n+\n+    match Some(0) {\n+        None => {}\n+        Some(ref variant_field) => {}\n+    }\n+\n+    // `constant_index_from_end` and `subslice` should not be promoted, as their value depends\n+    // on the slice length.\n+    if let [_, ref constant_index, subslice @ .., ref constant_index_from_end] = &[6; 10][..] {\n+    }\n+}\n+\n fn main() {\n     let mut x = 5_usize;\n     let mut y = 7_usize;\n@@ -469,6 +489,7 @@ fn main() {\n     maybe_dead(true);\n     mut_raw_then_mut_shr();\n     unique_with_copies();\n+    debuginfo();\n }\n \n // EMIT_MIR reference_prop.reference_propagation.ReferencePropagation.diff\n@@ -481,3 +502,4 @@ fn main() {\n // EMIT_MIR reference_prop.maybe_dead.ReferencePropagation.diff\n // EMIT_MIR reference_prop.mut_raw_then_mut_shr.ReferencePropagation.diff\n // EMIT_MIR reference_prop.unique_with_copies.ReferencePropagation.diff\n+// EMIT_MIR reference_prop.debuginfo.ReferencePropagation.diff"}]}