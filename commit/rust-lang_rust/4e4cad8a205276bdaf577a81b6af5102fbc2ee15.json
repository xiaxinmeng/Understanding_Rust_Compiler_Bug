{"sha": "4e4cad8a205276bdaf577a81b6af5102fbc2ee15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNGNhZDhhMjA1Mjc2YmRhZjU3N2E4MWI2YWY1MTAyZmJjMmVlMTU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-05T17:29:15Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-05T17:29:15Z"}, "message": "Allocator shim", "tree": {"sha": "3ae13b0e2bf291b33b53a18672287057dfa8615c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ae13b0e2bf291b33b53a18672287057dfa8615c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e4cad8a205276bdaf577a81b6af5102fbc2ee15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e4cad8a205276bdaf577a81b6af5102fbc2ee15", "html_url": "https://github.com/rust-lang/rust/commit/4e4cad8a205276bdaf577a81b6af5102fbc2ee15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e4cad8a205276bdaf577a81b6af5102fbc2ee15/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f19f8e4b4961e279cfe389bb177b86ea97613dbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f19f8e4b4961e279cfe389bb177b86ea97613dbc", "html_url": "https://github.com/rust-lang/rust/commit/f19f8e4b4961e279cfe389bb177b86ea97613dbc"}], "stats": {"total": 94, "additions": 94, "deletions": 0}, "files": [{"sha": "72ddf5312bd60a9828e96944d2f5a4401e8a4094", "filename": "src/allocator.rs", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/4e4cad8a205276bdaf577a81b6af5102fbc2ee15/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4cad8a205276bdaf577a81b6af5102fbc2ee15/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=4e4cad8a205276bdaf577a81b6af5102fbc2ee15", "patch": "@@ -0,0 +1,81 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use crate::prelude::*;\n+\n+use crate::rustc::middle::allocator::AllocatorKind;\n+use crate::rustc_allocator::{ALLOCATOR_METHODS, AllocatorTy};\n+\n+pub fn codegen(tcx: TyCtxt, module: &mut Module<impl Backend + 'static>, kind: AllocatorKind) {\n+    let usize_ty = module.target_config().pointer_type();\n+\n+    for method in ALLOCATOR_METHODS {\n+        let mut arg_tys = Vec::with_capacity(method.inputs.len());\n+        for ty in method.inputs.iter() {\n+            match *ty {\n+                AllocatorTy::Layout => {\n+                    arg_tys.push(usize_ty); // size\n+                    arg_tys.push(usize_ty); // align\n+                }\n+                AllocatorTy::Ptr => arg_tys.push(usize_ty),\n+                AllocatorTy::Usize => arg_tys.push(usize_ty),\n+\n+                AllocatorTy::ResultPtr |\n+                AllocatorTy::Unit => panic!(\"invalid allocator arg\"),\n+            }\n+        }\n+        let output = match method.output {\n+            AllocatorTy::ResultPtr => Some(usize_ty),\n+            AllocatorTy::Unit => None,\n+\n+            AllocatorTy::Layout |\n+            AllocatorTy::Usize |\n+            AllocatorTy::Ptr => panic!(\"invalid allocator output\"),\n+        };\n+\n+        let sig = Signature {\n+            call_conv: CallConv::Fast,\n+            params: arg_tys.iter().cloned().map(AbiParam::new).collect(),\n+            returns: output.into_iter().map(AbiParam::new).collect(),\n+        };\n+\n+        let func_id = module\n+            .declare_function(&format!(\"__rust_{}\", method.name), Linkage::Export, &sig)\n+            .unwrap();\n+\n+        let callee_func_id = module\n+            .declare_function(&kind.fn_name(method.name), Linkage::Import, &sig)\n+            .unwrap();\n+\n+        let mut ctx = Context::new();\n+        ctx.func = Function::with_name_signature(ExternalName::user(0, 0), sig.clone());\n+        {\n+            let mut func_ctx = FunctionBuilderContext::new();\n+            let mut bcx: FunctionBuilder = FunctionBuilder::new(&mut ctx.func, &mut func_ctx);\n+\n+            let ebb = bcx.create_ebb();\n+            bcx.switch_to_block(ebb);\n+            let args = arg_tys\n+                .into_iter()\n+                .map(|ty| bcx.append_ebb_param(ebb, ty))\n+                .collect::<Vec<Value>>();\n+\n+            let callee_func_ref = module.declare_func_in_func(callee_func_id, &mut bcx.func);\n+\n+            let call_inst = bcx.ins().call(callee_func_ref, &args);\n+\n+            let results = bcx.inst_results(call_inst).to_vec(); // Clone to prevent borrow error\n+            bcx.ins().return_(&results);\n+            bcx.seal_all_blocks();\n+            bcx.finalize();\n+        }\n+        module.define_function(func_id, &mut ctx).unwrap();\n+    }\n+}"}, {"sha": "013dbc510d82667710390f0b58f19f2213667489", "filename": "src/lib.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4e4cad8a205276bdaf577a81b6af5102fbc2ee15/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4cad8a205276bdaf577a81b6af5102fbc2ee15/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=4e4cad8a205276bdaf577a81b6af5102fbc2ee15", "patch": "@@ -5,6 +5,7 @@ extern crate byteorder;\n extern crate syntax;\n #[macro_use]\n extern crate rustc;\n+extern crate rustc_allocator;\n extern crate rustc_codegen_utils;\n extern crate rustc_incremental;\n extern crate rustc_mir;\n@@ -47,6 +48,7 @@ macro_rules! unimpl {\n }\n \n mod abi;\n+mod allocator;\n mod analyze;\n mod base;\n mod common;\n@@ -374,6 +376,17 @@ fn codegen_mono_items<'a, 'tcx: 'a>(\n \n     crate::main_shim::maybe_create_entry_wrapper(tcx, module);\n \n+    let any_dynamic_crate = tcx.sess.dependency_formats.borrow()\n+        .iter()\n+        .any(|(_, list)| {\n+            use crate::rustc::middle::dependency_format::Linkage;\n+            list.iter().any(|&linkage| linkage == Linkage::Dynamic)\n+        });\n+    if any_dynamic_crate {\n+    } else if let Some(kind) = *tcx.sess.allocator_kind.get() {\n+        allocator::codegen(tcx, module, kind);\n+    }\n+\n     ccx.finalize(tcx, module);\n \n     let after = ::std::time::Instant::now();"}]}