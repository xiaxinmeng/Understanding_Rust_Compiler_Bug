{"sha": "8767e97d7e6e17bed66a1d19e65c7928eab532df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NjdlOTdkN2U2ZTE3YmVkNjZhMWQxOWU2NWM3OTI4ZWFiNTMyZGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-06T22:27:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-06T22:27:58Z"}, "message": "Auto merge of #24392 - seanmonstar:lint-transmute-mut, r=alexcrichton\n\nThe [UnsafeCell documentation says it is undefined behavior](http://doc.rust-lang.org/nightly/std/cell/struct.UnsafeCell.html), so people shouldn't do it.\r\n\r\nThis happened to catch one case in libstd that was doing this, and I switched that to use an UnsafeCell internally.\r\n\r\nCloses #13146", "tree": {"sha": "6c4226ea66289f2a6c2fb0ee8be159d887071edb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c4226ea66289f2a6c2fb0ee8be159d887071edb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8767e97d7e6e17bed66a1d19e65c7928eab532df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8767e97d7e6e17bed66a1d19e65c7928eab532df", "html_url": "https://github.com/rust-lang/rust/commit/8767e97d7e6e17bed66a1d19e65c7928eab532df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8767e97d7e6e17bed66a1d19e65c7928eab532df/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c9f8408d5cd07f3fd3b5136b4373dadd0edbf07", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c9f8408d5cd07f3fd3b5136b4373dadd0edbf07", "html_url": "https://github.com/rust-lang/rust/commit/6c9f8408d5cd07f3fd3b5136b4373dadd0edbf07"}, {"sha": "5624cfbdda52073a8bcf4862fcdd3cf0fb55879e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5624cfbdda52073a8bcf4862fcdd3cf0fb55879e", "html_url": "https://github.com/rust-lang/rust/commit/5624cfbdda52073a8bcf4862fcdd3cf0fb55879e"}], "stats": {"total": 125, "additions": 110, "deletions": 15}, "files": [{"sha": "8d555240e707b31751facd1d4c5f8fbca1e010eb", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/8767e97d7e6e17bed66a1d19e65c7928eab532df/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8767e97d7e6e17bed66a1d19e65c7928eab532df/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=8767e97d7e6e17bed66a1d19e65c7928eab532df", "patch": "@@ -2121,6 +2121,72 @@ impl LintPass for InvalidNoMangleItems {\n     }\n }\n \n+#[derive(Clone, Copy)]\n+pub struct MutableTransmutes;\n+\n+declare_lint! {\n+    MUTABLE_TRANSMUTES,\n+    Deny,\n+    \"mutating transmuted &mut T from &T may cause undefined behavior\"\n+}\n+\n+impl LintPass for MutableTransmutes {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(MUTABLE_TRANSMUTES)\n+    }\n+\n+    fn check_expr(&mut self, cx: &Context, expr: &ast::Expr) {\n+        use syntax::ast::DefId;\n+        use syntax::abi::RustIntrinsic;\n+        let msg = \"mutating transmuted &mut T from &T may cause undefined behavior,\\\n+                   consider instead using an UnsafeCell\";\n+        match get_transmute_from_to(cx, expr) {\n+            Some((&ty::ty_rptr(_, from_mt), &ty::ty_rptr(_, to_mt))) => {\n+                if to_mt.mutbl == ast::Mutability::MutMutable\n+                    && from_mt.mutbl == ast::Mutability::MutImmutable {\n+                    cx.span_lint(MUTABLE_TRANSMUTES, expr.span, msg);\n+                }\n+            }\n+            _ => ()\n+        }\n+\n+        fn get_transmute_from_to<'a, 'tcx>(cx: &Context<'a, 'tcx>, expr: &ast::Expr)\n+            -> Option<(&'tcx ty::sty<'tcx>, &'tcx ty::sty<'tcx>)> {\n+            match expr.node {\n+                ast::ExprPath(..) => (),\n+                _ => return None\n+            }\n+            if let DefFn(did, _) = ty::resolve_expr(cx.tcx, expr) {\n+                if !def_id_is_transmute(cx, did) {\n+                    return None;\n+                }\n+                let typ = ty::node_id_to_type(cx.tcx, expr.id);\n+                match typ.sty {\n+                    ty::ty_bare_fn(_, ref bare_fn) if bare_fn.abi == RustIntrinsic => {\n+                        if let ty::FnConverging(to) = bare_fn.sig.0.output {\n+                            let from = bare_fn.sig.0.inputs[0];\n+                            return Some((&from.sty, &to.sty));\n+                        }\n+                    },\n+                    _ => ()\n+                }\n+            }\n+            None\n+        }\n+\n+        fn def_id_is_transmute(cx: &Context, def_id: DefId) -> bool {\n+            match ty::lookup_item_type(cx.tcx, def_id).ty.sty {\n+                ty::ty_bare_fn(_, ref bfty) if bfty.abi == RustIntrinsic => (),\n+                _ => return false\n+            }\n+            ty::with_path(cx.tcx, def_id, |path| match path.last() {\n+                Some(ref last) => last.name().as_str() == \"transmute\",\n+                _ => false\n+            })\n+        }\n+    }\n+}\n+\n /// Forbids using the `#[feature(...)]` attribute\n #[derive(Copy, Clone)]\n pub struct UnstableFeatures;"}, {"sha": "df834c36e5b225262d13ccd18d3b941cb7f336a0", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8767e97d7e6e17bed66a1d19e65c7928eab532df/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8767e97d7e6e17bed66a1d19e65c7928eab532df/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=8767e97d7e6e17bed66a1d19e65c7928eab532df", "patch": "@@ -109,6 +109,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                  InvalidNoMangleItems,\n                  PluginAsLibrary,\n                  DropWithReprExtern,\n+                 MutableTransmutes,\n                  );\n \n     add_builtin_with_new!(sess,"}, {"sha": "2d91581192c6fcf49d4af771317f5b59f8384f22", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8767e97d7e6e17bed66a1d19e65c7928eab532df/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8767e97d7e6e17bed66a1d19e65c7928eab532df/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=8767e97d7e6e17bed66a1d19e65c7928eab532df", "patch": "@@ -58,7 +58,7 @@\n \n use core::prelude::*;\n \n-use core::cell::Cell;\n+use core::cell::{Cell, UnsafeCell};\n use core::marker;\n use core::mem;\n use core::ptr;\n@@ -70,9 +70,13 @@ use sync::mpsc::blocking::{self, SignalToken};\n /// The \"receiver set\" of the select interface. This structure is used to manage\n /// a set of receivers which are being selected over.\n pub struct Select {\n+    inner: UnsafeCell<SelectInner>,\n+    next_id: Cell<usize>,\n+}\n+\n+struct SelectInner {\n     head: *mut Handle<'static, ()>,\n     tail: *mut Handle<'static, ()>,\n-    next_id: Cell<usize>,\n }\n \n impl !marker::Send for Select {}\n@@ -84,7 +88,7 @@ pub struct Handle<'rx, T:Send+'rx> {\n     /// The ID of this handle, used to compare against the return value of\n     /// `Select::wait()`\n     id: usize,\n-    selector: &'rx Select,\n+    selector: *mut SelectInner,\n     next: *mut Handle<'static, ()>,\n     prev: *mut Handle<'static, ()>,\n     added: bool,\n@@ -127,8 +131,10 @@ impl Select {\n     /// ```\n     pub fn new() -> Select {\n         Select {\n-            head: ptr::null_mut(),\n-            tail: ptr::null_mut(),\n+            inner: UnsafeCell::new(SelectInner {\n+                head: ptr::null_mut(),\n+                tail: ptr::null_mut(),\n+            }),\n             next_id: Cell::new(1),\n         }\n     }\n@@ -141,7 +147,7 @@ impl Select {\n         self.next_id.set(id + 1);\n         Handle {\n             id: id,\n-            selector: self,\n+            selector: self.inner.get(),\n             next: ptr::null_mut(),\n             prev: ptr::null_mut(),\n             added: false,\n@@ -250,7 +256,7 @@ impl Select {\n         }\n     }\n \n-    fn iter(&self) -> Packets { Packets { cur: self.head } }\n+    fn iter(&self) -> Packets { Packets { cur: unsafe { &*self.inner.get() }.head } }\n }\n \n impl<'rx, T: Send> Handle<'rx, T> {\n@@ -271,7 +277,7 @@ impl<'rx, T: Send> Handle<'rx, T> {\n     /// while it is added to the `Select` set.\n     pub unsafe fn add(&mut self) {\n         if self.added { return }\n-        let selector: &mut Select = mem::transmute(&*self.selector);\n+        let selector = &mut *self.selector;\n         let me: *mut Handle<'static, ()> = mem::transmute(&*self);\n \n         if selector.head.is_null() {\n@@ -292,7 +298,7 @@ impl<'rx, T: Send> Handle<'rx, T> {\n     pub unsafe fn remove(&mut self) {\n         if !self.added { return }\n \n-        let selector: &mut Select = mem::transmute(&*self.selector);\n+        let selector = &mut *self.selector;\n         let me: *mut Handle<'static, ()> = mem::transmute(&*self);\n \n         if self.prev.is_null() {\n@@ -317,8 +323,10 @@ impl<'rx, T: Send> Handle<'rx, T> {\n \n impl Drop for Select {\n     fn drop(&mut self) {\n-        assert!(self.head.is_null());\n-        assert!(self.tail.is_null());\n+        unsafe {\n+            assert!((&*self.inner.get()).head.is_null());\n+            assert!((&*self.inner.get()).tail.is_null());\n+        }\n     }\n }\n "}, {"sha": "40e01c1474a60cea9a88a240335a72d9c96d70fa", "filename": "src/test/auxiliary/issue_8401.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8767e97d7e6e17bed66a1d19e65c7928eab532df/src%2Ftest%2Fauxiliary%2Fissue_8401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8767e97d7e6e17bed66a1d19e65c7928eab532df/src%2Ftest%2Fauxiliary%2Fissue_8401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_8401.rs?ref=8767e97d7e6e17bed66a1d19e65c7928eab532df", "patch": "@@ -21,6 +21,6 @@ impl A for B {}\n fn bar<T>(_: &mut A, _: &T) {}\n \n fn foo<T>(t: &T) {\n-    let b = B;\n-    bar(unsafe { mem::transmute(&b as &A) }, t)\n+    let mut b = B;\n+    bar(&mut b as &mut A, t)\n }"}, {"sha": "2e076337f53ef7cceb00f2a3d0ba23a848164904", "filename": "src/test/compile-fail/transmute-imut-to-mut.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8767e97d7e6e17bed66a1d19e65c7928eab532df/src%2Ftest%2Fcompile-fail%2Ftransmute-imut-to-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8767e97d7e6e17bed66a1d19e65c7928eab532df/src%2Ftest%2Fcompile-fail%2Ftransmute-imut-to-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftransmute-imut-to-mut.rs?ref=8767e97d7e6e17bed66a1d19e65c7928eab532df", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests that transmuting from &T to &mut T is Undefined Behavior.\n+\n+use std::mem::transmute;\n+\n+fn main() {\n+    let _a: &mut u8 = unsafe { transmute(&1u8) };\n+    //~^ ERROR mutating transmuted &mut T from &T may cause undefined behavior\n+}\n+\n+"}, {"sha": "1a139bdf0fb27e6ce5e2419d8514b3afe98aad3e", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8767e97d7e6e17bed66a1d19e65c7928eab532df/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8767e97d7e6e17bed66a1d19e65c7928eab532df/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=8767e97d7e6e17bed66a1d19e65c7928eab532df", "patch": "@@ -170,7 +170,7 @@ pub mod pipes {\n             unsafe {\n                 if self.p != None {\n                     let self_p: &mut Option<*const packet<T>> =\n-                        mem::transmute(&self.p);\n+                        mem::transmute(&mut self.p);\n                     let p = replace(self_p, None);\n                     sender_terminate(p.unwrap())\n                 }\n@@ -199,7 +199,7 @@ pub mod pipes {\n             unsafe {\n                 if self.p != None {\n                     let self_p: &mut Option<*const packet<T>> =\n-                        mem::transmute(&self.p);\n+                        mem::transmute(&mut self.p);\n                     let p = replace(self_p, None);\n                     receiver_terminate(p.unwrap())\n                 }"}]}