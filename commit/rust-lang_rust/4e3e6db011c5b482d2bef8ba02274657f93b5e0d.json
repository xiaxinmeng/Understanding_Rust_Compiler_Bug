{"sha": "4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlM2U2ZGIwMTFjNWI0ODJkMmJlZjhiYTAyMjc0NjU3ZjkzYjVlMGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-18T20:50:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-18T20:50:01Z"}, "message": "Auto merge of #84767 - scottmcm:try_trait_actual, r=lcnr\n\nImplement the new desugaring from `try_trait_v2`\n\n~~Currently blocked on https://github.com/rust-lang/rust/issues/84782, which has a PR in https://github.com/rust-lang/rust/pull/84811~~ Rebased atop that fix.\n\n`try_trait_v2` tracking issue: https://github.com/rust-lang/rust/issues/84277\n\nUnfortunately this is already touching a ton of things, so if you have suggestions for good ways to split it up, I'd be happy to hear them.  (The combination between the use in the library, the compiler changes, the corresponding diagnostic differences, even MIR tests mean that I don't really have a great plan for it other than trying to have decently-readable commits.\n\nr? `@ghost`\n\n~~(This probably shouldn't go in during the last week before the fork anyway.)~~ Fork happened.", "tree": {"sha": "18c4d91304ab931792236935417dfe51ad998a7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18c4d91304ab931792236935417dfe51ad998a7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "html_url": "https://github.com/rust-lang/rust/commit/4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "491cf5561efb1f5ff33c3234ccd0bc5cacbebe3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/491cf5561efb1f5ff33c3234ccd0bc5cacbebe3e", "html_url": "https://github.com/rust-lang/rust/commit/491cf5561efb1f5ff33c3234ccd0bc5cacbebe3e"}, {"sha": "e2edee4da07032de72ac930df1453780dbe73f3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2edee4da07032de72ac930df1453780dbe73f3b", "html_url": "https://github.com/rust-lang/rust/commit/e2edee4da07032de72ac930df1453780dbe73f3b"}], "stats": {"total": 1974, "additions": 1176, "deletions": 798}, "files": [{"sha": "866f2180bb6e3503ec8874e4094d406c6edc718f", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 26, "deletions": 32, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -560,8 +560,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         )\n     }\n \n-    /// Desugar `try { <stmts>; <expr> }` into `{ <stmts>; ::std::ops::Try::from_ok(<expr>) }`,\n-    /// `try { <stmts>; }` into `{ <stmts>; ::std::ops::Try::from_ok(()) }`\n+    /// Desugar `try { <stmts>; <expr> }` into `{ <stmts>; ::std::ops::Try::from_output(<expr>) }`,\n+    /// `try { <stmts>; }` into `{ <stmts>; ::std::ops::Try::from_output(()) }`\n     /// and save the block id to use it as a break target for desugaring of the `?` operator.\n     fn lower_expr_try_block(&mut self, body: &Block) -> hir::ExprKind<'hir> {\n         self.with_catch_scope(body.id, |this| {\n@@ -590,9 +590,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             let ok_wrapped_span =\n                 this.mark_span_with_reason(DesugaringKind::TryBlock, tail_expr.span, None);\n \n-            // `::std::ops::Try::from_ok($tail_expr)`\n+            // `::std::ops::Try::from_output($tail_expr)`\n             block.expr = Some(this.wrap_in_try_constructor(\n-                hir::LangItem::TryFromOk,\n+                hir::LangItem::TryTraitFromOutput,\n                 try_span,\n                 tail_expr,\n                 ok_wrapped_span,\n@@ -1579,14 +1579,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             self.allow_try_trait.clone(),\n         );\n \n-        // `Try::into_result(<expr>)`\n+        // `Try::branch(<expr>)`\n         let scrutinee = {\n             // expand <expr>\n             let sub_expr = self.lower_expr_mut(sub_expr);\n \n             self.expr_call_lang_item_fn(\n                 unstable_span,\n-                hir::LangItem::TryIntoResult,\n+                hir::LangItem::TryTraitBranch,\n                 arena_vec![self; sub_expr],\n             )\n         };\n@@ -1604,8 +1604,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         };\n         let attrs = vec![attr];\n \n-        // `Ok(val) => #[allow(unreachable_code)] val,`\n-        let ok_arm = {\n+        // `ControlFlow::Continue(val) => #[allow(unreachable_code)] val,`\n+        let continue_arm = {\n             let val_ident = Ident::with_dummy_span(sym::val);\n             let (val_pat, val_pat_nid) = self.pat_ident(span, val_ident);\n             let val_expr = self.arena.alloc(self.expr_ident_with_attrs(\n@@ -1614,27 +1614,21 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 val_pat_nid,\n                 ThinVec::from(attrs.clone()),\n             ));\n-            let ok_pat = self.pat_ok(span, val_pat);\n-            self.arm(ok_pat, val_expr)\n+            let continue_pat = self.pat_cf_continue(unstable_span, val_pat);\n+            self.arm(continue_pat, val_expr)\n         };\n \n-        // `Err(err) => #[allow(unreachable_code)]\n-        //              return Try::from_error(From::from(err)),`\n-        let err_arm = {\n-            let err_ident = Ident::with_dummy_span(sym::err);\n-            let (err_local, err_local_nid) = self.pat_ident(try_span, err_ident);\n-            let from_expr = {\n-                let err_expr = self.expr_ident_mut(try_span, err_ident, err_local_nid);\n-                self.expr_call_lang_item_fn(\n-                    try_span,\n-                    hir::LangItem::FromFrom,\n-                    arena_vec![self; err_expr],\n-                )\n-            };\n-            let from_err_expr = self.wrap_in_try_constructor(\n-                hir::LangItem::TryFromError,\n-                unstable_span,\n-                from_expr,\n+        // `ControlFlow::Break(residual) =>\n+        //     #[allow(unreachable_code)]\n+        //     return Try::from_residual(residual),`\n+        let break_arm = {\n+            let residual_ident = Ident::with_dummy_span(sym::residual);\n+            let (residual_local, residual_local_nid) = self.pat_ident(try_span, residual_ident);\n+            let residual_expr = self.expr_ident_mut(try_span, residual_ident, residual_local_nid);\n+            let from_residual_expr = self.wrap_in_try_constructor(\n+                hir::LangItem::TryTraitFromResidual,\n+                try_span,\n+                self.arena.alloc(residual_expr),\n                 unstable_span,\n             );\n             let thin_attrs = ThinVec::from(attrs);\n@@ -1645,25 +1639,25 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     try_span,\n                     hir::ExprKind::Break(\n                         hir::Destination { label: None, target_id },\n-                        Some(from_err_expr),\n+                        Some(from_residual_expr),\n                     ),\n                     thin_attrs,\n                 ))\n             } else {\n                 self.arena.alloc(self.expr(\n                     try_span,\n-                    hir::ExprKind::Ret(Some(from_err_expr)),\n+                    hir::ExprKind::Ret(Some(from_residual_expr)),\n                     thin_attrs,\n                 ))\n             };\n \n-            let err_pat = self.pat_err(try_span, err_local);\n-            self.arm(err_pat, ret_expr)\n+            let break_pat = self.pat_cf_break(try_span, residual_local);\n+            self.arm(break_pat, ret_expr)\n         };\n \n         hir::ExprKind::Match(\n             scrutinee,\n-            arena_vec![self; err_arm, ok_arm],\n+            arena_vec![self; break_arm, continue_arm],\n             hir::MatchSource::TryDesugar,\n         )\n     }"}, {"sha": "56f97054f962474c4b7dfde85f8a3adef657da43", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -332,7 +332,7 @@ pub fn lower_crate<'a, 'hir>(\n         lifetimes_to_define: Vec::new(),\n         is_collecting_in_band_lifetimes: false,\n         in_scope_lifetimes: Vec::new(),\n-        allow_try_trait: Some([sym::try_trait][..].into()),\n+        allow_try_trait: Some([sym::control_flow_enum, sym::try_trait_v2][..].into()),\n         allow_gen_future: Some([sym::gen_future][..].into()),\n     }\n     .lower_crate(krate)\n@@ -2490,14 +2490,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.pat(span, hir::PatKind::Lit(expr))\n     }\n \n-    fn pat_ok(&mut self, span: Span, pat: &'hir hir::Pat<'hir>) -> &'hir hir::Pat<'hir> {\n+    fn pat_cf_continue(&mut self, span: Span, pat: &'hir hir::Pat<'hir>) -> &'hir hir::Pat<'hir> {\n         let field = self.single_pat_field(span, pat);\n-        self.pat_lang_item_variant(span, hir::LangItem::ResultOk, field)\n+        self.pat_lang_item_variant(span, hir::LangItem::ControlFlowContinue, field)\n     }\n \n-    fn pat_err(&mut self, span: Span, pat: &'hir hir::Pat<'hir>) -> &'hir hir::Pat<'hir> {\n+    fn pat_cf_break(&mut self, span: Span, pat: &'hir hir::Pat<'hir>) -> &'hir hir::Pat<'hir> {\n         let field = self.single_pat_field(span, pat);\n-        self.pat_lang_item_variant(span, hir::LangItem::ResultErr, field)\n+        self.pat_lang_item_variant(span, hir::LangItem::ControlFlowBreak, field)\n     }\n \n     fn pat_some(&mut self, span: Span, pat: &'hir hir::Pat<'hir>) -> &'hir hir::Pat<'hir> {"}, {"sha": "0b8535f8ca54968d13e37c91d127cf86fb591dd5", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -308,12 +308,12 @@ language_item_table! {\n \n     Termination,             sym::termination,         termination,                Target::Trait;\n \n-    Try,                     kw::Try,                  try_trait,                  Target::Trait;\n+    Try,                     sym::Try,                 try_trait,                  Target::Trait;\n \n     // Language items from AST lowering\n-    TryFromError,            sym::from_error,          from_error_fn,              Target::Method(MethodKind::Trait { body: false });\n-    TryFromOk,               sym::from_ok,             from_ok_fn,                 Target::Method(MethodKind::Trait { body: false });\n-    TryIntoResult,           sym::into_result,         into_result_fn,             Target::Method(MethodKind::Trait { body: false });\n+    TryTraitFromResidual,    sym::from_residual,       from_residual_fn,           Target::Method(MethodKind::Trait { body: false });\n+    TryTraitFromOutput,      sym::from_output,         from_output_fn,             Target::Method(MethodKind::Trait { body: false });\n+    TryTraitBranch,          sym::branch,              branch_fn,                  Target::Method(MethodKind::Trait { body: false });\n \n     PollReady,               sym::Ready,               poll_ready_variant,         Target::Variant;\n     PollPending,             sym::Pending,             poll_pending_variant,       Target::Variant;\n@@ -331,6 +331,9 @@ language_item_table! {\n     ResultOk,                sym::Ok,                  result_ok_variant,          Target::Variant;\n     ResultErr,               sym::Err,                 result_err_variant,         Target::Variant;\n \n+    ControlFlowContinue,     sym::Continue,            cf_continue_variant,        Target::Variant;\n+    ControlFlowBreak,        sym::Break,               cf_break_variant,           Target::Variant;\n+\n     IntoIterIntoIter,        sym::into_iter,           into_iter_fn,               Target::Method(MethodKind::Trait { body: false });\n     IteratorNext,            sym::next,                next_fn,                    Target::Method(MethodKind::Trait { body: false});\n "}, {"sha": "14ee083eceebea1e1b155cfd909b3c174fec8d0e", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -130,10 +130,12 @@ symbols! {\n         BTreeSet,\n         BinaryHeap,\n         Borrow,\n+        Break,\n         C,\n         CString,\n         Center,\n         Clone,\n+        Continue,\n         Copy,\n         Count,\n         Debug,\n@@ -326,6 +328,7 @@ symbols! {\n         box_patterns,\n         box_syntax,\n         braced_empty_structs,\n+        branch,\n         breakpoint,\n         bridge,\n         bswap,\n@@ -411,6 +414,7 @@ symbols! {\n         constructor,\n         contents,\n         context,\n+        control_flow_enum,\n         convert,\n         copy,\n         copy_closures,\n@@ -511,7 +515,6 @@ symbols! {\n         env,\n         eq,\n         ermsb_target_feature,\n-        err,\n         exact_div,\n         except,\n         exchange_malloc,\n@@ -581,10 +584,10 @@ symbols! {\n         frem_fast,\n         from,\n         from_desugaring,\n-        from_error,\n         from_generator,\n         from_method,\n-        from_ok,\n+        from_output,\n+        from_residual,\n         from_size_align_unchecked,\n         from_trait,\n         from_usize,\n@@ -653,7 +656,6 @@ symbols! {\n         instruction_set,\n         intel,\n         into_iter,\n-        into_result,\n         into_trait,\n         intra_doc_pointers,\n         intrinsics,\n@@ -965,6 +967,7 @@ symbols! {\n         repr_packed,\n         repr_simd,\n         repr_transparent,\n+        residual,\n         result,\n         result_type,\n         rhs,\n@@ -1232,7 +1235,7 @@ symbols! {\n         try_blocks,\n         try_from_trait,\n         try_into_trait,\n-        try_trait,\n+        try_trait_v2,\n         tt,\n         tuple,\n         tuple_from_req,"}, {"sha": "f3eb228c9e3802dab098de5d886dc79f8e7901c1", "filename": "library/alloc/src/collections/vec_deque/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -66,7 +66,7 @@ impl<'a, T> Iterator for Iter<'a, T> {\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> R,\n-        R: Try<Ok = B>,\n+        R: Try<Output = B>,\n     {\n         let (mut iter, final_res);\n         if self.tail <= self.head {\n@@ -140,7 +140,7 @@ impl<'a, T> DoubleEndedIterator for Iter<'a, T> {\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> R,\n-        R: Try<Ok = B>,\n+        R: Try<Output = B>,\n     {\n         let (mut iter, final_res);\n         if self.tail <= self.head {"}, {"sha": "3bc376482e9988875f8c194b0f2a4f0b8c73e958", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -140,7 +140,8 @@\n #![feature(maybe_uninit_extra, maybe_uninit_slice, maybe_uninit_uninit_array)]\n #![feature(alloc_layout_extra)]\n #![feature(trusted_random_access)]\n-#![feature(try_trait)]\n+#![cfg_attr(bootstrap, feature(try_trait))]\n+#![cfg_attr(not(bootstrap), feature(try_trait_v2))]\n #![feature(min_type_alias_impl_trait)]\n #![feature(associated_type_bounds)]\n #![feature(slice_group_by)]"}, {"sha": "53e48500e3b4d6061976069176168529932bb24b", "filename": "library/core/src/iter/adapters/chain.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -98,7 +98,7 @@ where\n     where\n         Self: Sized,\n         F: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n     {\n         if let Some(ref mut a) = self.a {\n             acc = a.try_fold(acc, &mut f)?;\n@@ -281,7 +281,7 @@ where\n     where\n         Self: Sized,\n         F: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n     {\n         if let Some(ref mut b) = self.b {\n             acc = b.try_rfold(acc, &mut f)?;"}, {"sha": "7efc155175c34f8c2d4ad0d73cc2e8654562400e", "filename": "library/core/src/iter/adapters/cloned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -46,7 +46,7 @@ where\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> R,\n-        R: Try<Ok = B>,\n+        R: Try<Output = B>,\n     {\n         self.it.try_fold(init, clone_try_fold(f))\n     }\n@@ -82,7 +82,7 @@ where\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> R,\n-        R: Try<Ok = B>,\n+        R: Try<Output = B>,\n     {\n         self.it.try_rfold(init, clone_try_fold(f))\n     }"}, {"sha": "def2408927589de601c5c9e246e06e39f78b2cfd", "filename": "library/core/src/iter/adapters/copied.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -50,7 +50,7 @@ where\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> R,\n-        R: Try<Ok = B>,\n+        R: Try<Output = B>,\n     {\n         self.it.try_fold(init, copy_try_fold(f))\n     }\n@@ -98,7 +98,7 @@ where\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> R,\n-        R: Try<Ok = B>,\n+        R: Try<Output = B>,\n     {\n         self.it.try_rfold(init, copy_try_fold(f))\n     }"}, {"sha": "815e708f9ec0fd1827deca6d86d26f8595886522", "filename": "library/core/src/iter/adapters/cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcycle.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -53,7 +53,7 @@ where\n     fn try_fold<Acc, F, R>(&mut self, mut acc: Acc, mut f: F) -> R\n     where\n         F: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n     {\n         // fully iterate the current iterator. this is necessary because\n         // `self.iter` may be empty even when `self.orig` isn't"}, {"sha": "91722a4b62a2e86ca5c0f5712cea4a5a6caee99e", "filename": "library/core/src/iter/adapters/enumerate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -71,7 +71,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n     {\n         #[inline]\n         fn enumerate<'a, T, Acc, R>(\n@@ -150,7 +150,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n     {\n         // Can safely add and subtract the count, as `ExactSizeIterator` promises\n         // that the number of elements fits into a `usize`."}, {"sha": "d5f19f127470ea928c1bca046ff05b1ed6ed1d72", "filename": "library/core/src/iter/adapters/filter.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -37,7 +37,7 @@ fn filter_fold<T, Acc>(\n     move |acc, item| if predicate(&item) { fold(acc, item) } else { acc }\n }\n \n-fn filter_try_fold<'a, T, Acc, R: Try<Ok = Acc>>(\n+fn filter_try_fold<'a, T, Acc, R: Try<Output = Acc>>(\n     predicate: &'a mut impl FnMut(&T) -> bool,\n     mut fold: impl FnMut(Acc, T) -> R + 'a,\n ) -> impl FnMut(Acc, T) -> R + 'a {\n@@ -88,7 +88,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n     {\n         self.iter.try_fold(init, filter_try_fold(&mut self.predicate, fold))\n     }\n@@ -117,7 +117,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n     {\n         self.iter.try_rfold(init, filter_try_fold(&mut self.predicate, fold))\n     }"}, {"sha": "01b7be9d52daf41a58a8d1b353eedba22be70b49", "filename": "library/core/src/iter/adapters/filter_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter_map.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -39,7 +39,7 @@ fn filter_map_fold<T, B, Acc>(\n     }\n }\n \n-fn filter_map_try_fold<'a, T, B, Acc, R: Try<Ok = Acc>>(\n+fn filter_map_try_fold<'a, T, B, Acc, R: Try<Output = Acc>>(\n     f: &'a mut impl FnMut(T) -> Option<B>,\n     mut fold: impl FnMut(Acc, B) -> R + 'a,\n ) -> impl FnMut(Acc, T) -> R + 'a {\n@@ -72,7 +72,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n     {\n         self.iter.try_fold(init, filter_map_try_fold(&mut self.f, fold))\n     }\n@@ -111,7 +111,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n     {\n         self.iter.try_rfold(init, filter_map_try_fold(&mut self.f, fold))\n     }"}, {"sha": "3315d346596114e5e691987adee90c30c59bcc00", "filename": "library/core/src/iter/adapters/flatten.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -61,7 +61,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n     {\n         self.inner.try_fold(init, fold)\n     }\n@@ -91,7 +91,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n     {\n         self.inner.try_rfold(init, fold)\n     }\n@@ -178,7 +178,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n     {\n         self.inner.try_fold(init, fold)\n     }\n@@ -208,7 +208,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n     {\n         self.inner.try_rfold(init, fold)\n     }\n@@ -293,10 +293,10 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n     {\n         #[inline]\n-        fn flatten<'a, T: IntoIterator, Acc, R: Try<Ok = Acc>>(\n+        fn flatten<'a, T: IntoIterator, Acc, R: Try<Output = Acc>>(\n             frontiter: &'a mut Option<T::IntoIter>,\n             fold: &'a mut impl FnMut(Acc, T::Item) -> R,\n         ) -> impl FnMut(Acc, T) -> R + 'a {\n@@ -382,10 +382,10 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n     {\n         #[inline]\n-        fn flatten<'a, T: IntoIterator, Acc, R: Try<Ok = Acc>>(\n+        fn flatten<'a, T: IntoIterator, Acc, R: Try<Output = Acc>>(\n             backiter: &'a mut Option<T::IntoIter>,\n             fold: &'a mut impl FnMut(Acc, T::Item) -> R,\n         ) -> impl FnMut(Acc, T) -> R + 'a"}, {"sha": "aff48b1b220c411ce645cce1aafee5d777b0af61", "filename": "library/core/src/iter/adapters/fuse.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -92,7 +92,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n     {\n         FuseImpl::try_fold(self, acc, fold)\n     }\n@@ -148,7 +148,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n     {\n         FuseImpl::try_rfold(self, acc, fold)\n     }\n@@ -219,7 +219,7 @@ trait FuseImpl<I> {\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>;\n+        R: Try<Output = Acc>;\n     fn fold<Acc, Fold>(self, acc: Acc, fold: Fold) -> Acc\n     where\n         Fold: FnMut(Acc, Self::Item) -> Acc;\n@@ -238,7 +238,7 @@ trait FuseImpl<I> {\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n         I: DoubleEndedIterator;\n     fn rfold<Acc, Fold>(self, acc: Acc, fold: Fold) -> Acc\n     where\n@@ -305,7 +305,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n     {\n         if let Some(ref mut iter) = self.iter {\n             acc = iter.try_fold(acc, fold)?;\n@@ -354,7 +354,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n         I: DoubleEndedIterator,\n     {\n         if let Some(ref mut iter) = self.iter {\n@@ -443,7 +443,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n     {\n         unchecked!(self).try_fold(init, fold)\n     }\n@@ -485,7 +485,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n         I: DoubleEndedIterator,\n     {\n         unchecked!(self).try_rfold(init, fold)"}, {"sha": "36835d12e56857586e8f43c30d1b4345f5ef7576", "filename": "library/core/src/iter/adapters/inspect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Finspect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Finspect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Finspect.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -87,7 +87,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n     {\n         self.iter.try_fold(init, inspect_try_fold(&mut self.f, fold))\n     }\n@@ -117,7 +117,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n     {\n         self.iter.try_rfold(init, inspect_try_fold(&mut self.f, fold))\n     }"}, {"sha": "0bf9f4b0327e969cb16225a842e61ad1a3ad9b39", "filename": "library/core/src/iter/adapters/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -110,7 +110,7 @@ where\n     where\n         Self: Sized,\n         G: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n     {\n         self.iter.try_fold(init, map_try_fold(&mut self.f, g))\n     }\n@@ -146,7 +146,7 @@ where\n     where\n         Self: Sized,\n         G: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n     {\n         self.iter.try_rfold(init, map_try_fold(&mut self.f, g))\n     }"}, {"sha": "8f89e1588048ffd07dbaf7d573e64aa38ebbed51", "filename": "library/core/src/iter/adapters/map_while.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap_while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap_while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap_while.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -54,7 +54,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n     {\n         let Self { iter, predicate } = self;\n         iter.try_fold(init, |acc, x| match predicate(x) {"}, {"sha": "9fdd4fca04c97fd0610d31d1eaf0b8d712f49036", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -168,7 +168,7 @@ where\n     fn try_fold<B, F, R>(&mut self, init: B, mut f: F) -> R\n     where\n         F: FnMut(B, Self::Item) -> R,\n-        R: Try<Ok = B>,\n+        R: Try<Output = B>,\n     {\n         let error = &mut *self.error;\n         self.iter"}, {"sha": "8ee7d0955c6d16f2deecd63c961834a0ba6ef070", "filename": "library/core/src/iter/adapters/peekable.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fpeekable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fpeekable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fpeekable.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -1,5 +1,5 @@\n use crate::iter::{adapters::SourceIter, FusedIterator, InPlaceIterable, TrustedLen};\n-use crate::ops::Try;\n+use crate::ops::{ControlFlow, Try};\n \n /// An iterator with a `peek()` that returns an optional reference to the next\n /// element.\n@@ -91,7 +91,7 @@ impl<I: Iterator> Iterator for Peekable<I> {\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> R,\n-        R: Try<Ok = B>,\n+        R: Try<Output = B>,\n     {\n         let acc = match self.peeked.take() {\n             Some(None) => return try { init },\n@@ -130,19 +130,42 @@ where\n     }\n \n     #[inline]\n+    #[cfg(not(bootstrap))]\n     fn try_rfold<B, F, R>(&mut self, init: B, mut f: F) -> R\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> R,\n-        R: Try<Ok = B>,\n+        R: Try<Output = B>,\n     {\n+        match self.peeked.take() {\n+            Some(None) => try { init },\n+            Some(Some(v)) => match self.iter.try_rfold(init, &mut f).branch() {\n+                ControlFlow::Continue(acc) => f(acc, v),\n+                ControlFlow::Break(r) => {\n+                    self.peeked = Some(Some(v));\n+                    R::from_residual(r)\n+                }\n+            },\n+            None => self.iter.try_rfold(init, f),\n+        }\n+    }\n+\n+    #[inline]\n+    #[cfg(bootstrap)]\n+    fn try_rfold<B, F, R>(&mut self, init: B, mut f: F) -> R\n+    where\n+        Self: Sized,\n+        F: FnMut(B, Self::Item) -> R,\n+        R: Try<Output = B>,\n+    {\n+        let _use_the_import: ControlFlow<()>;\n         match self.peeked.take() {\n             Some(None) => try { init },\n             Some(Some(v)) => match self.iter.try_rfold(init, &mut f).into_result() {\n                 Ok(acc) => f(acc, v),\n                 Err(e) => {\n                     self.peeked = Some(Some(v));\n-                    Try::from_error(e)\n+                    R::from_error(e)\n                 }\n             },\n             None => self.iter.try_rfold(init, f),"}, {"sha": "139fb7bbdd99675b7808c1e20145d85f21c6d27c", "filename": "library/core/src/iter/adapters/rev.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Frev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Frev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Frev.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -51,7 +51,7 @@ where\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> R,\n-        R: Try<Ok = B>,\n+        R: Try<Output = B>,\n     {\n         self.iter.try_rfold(init, f)\n     }\n@@ -96,7 +96,7 @@ where\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> R,\n-        R: Try<Ok = B>,\n+        R: Try<Output = B>,\n     {\n         self.iter.try_fold(init, f)\n     }"}, {"sha": "96705b01f661fad54b54457a1daa2218d636453b", "filename": "library/core/src/iter/adapters/scan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fscan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fscan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fscan.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -56,9 +56,9 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n     {\n-        fn scan<'a, T, St, B, Acc, R: Try<Ok = Acc>>(\n+        fn scan<'a, T, St, B, Acc, R: Try<Output = Acc>>(\n             state: &'a mut St,\n             f: &'a mut impl FnMut(&mut St, T) -> Option<B>,\n             mut fold: impl FnMut(Acc, B) -> R + 'a,"}, {"sha": "c358a6d12b7bc0aa2a4b9d18047096adea76eedb", "filename": "library/core/src/iter/adapters/skip.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -88,7 +88,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n     {\n         let n = self.n;\n         self.n = 0;\n@@ -146,9 +146,9 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n     {\n-        fn check<T, Acc, R: Try<Ok = Acc>>(\n+        fn check<T, Acc, R: Try<Output = Acc>>(\n             mut n: usize,\n             mut fold: impl FnMut(Acc, T) -> R,\n         ) -> impl FnMut(Acc, T) -> ControlFlow<R, Acc> {"}, {"sha": "93e29edc8df392b534cad913533c2c8329623832", "filename": "library/core/src/iter/adapters/skip_while.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip_while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip_while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip_while.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -70,7 +70,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n     {\n         if !self.flag {\n             match self.next() {"}, {"sha": "4252c34a0e0fc3fceaa1b2d37b51365fbf5065da", "filename": "library/core/src/iter/adapters/step_by.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fstep_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fstep_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fstep_by.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -111,7 +111,7 @@ where\n     fn try_fold<Acc, F, R>(&mut self, mut acc: Acc, mut f: F) -> R\n     where\n         F: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n     {\n         #[inline]\n         fn nth<I: Iterator>(iter: &mut I, step: usize) -> impl FnMut() -> Option<I::Item> + '_ {\n@@ -187,7 +187,7 @@ where\n     fn try_rfold<Acc, F, R>(&mut self, init: Acc, mut f: F) -> R\n     where\n         F: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n     {\n         #[inline]\n         fn nth_back<I: DoubleEndedIterator>("}, {"sha": "92f82ae232502cd1ca13354d9e6c18c07f302706", "filename": "library/core/src/iter/adapters/take.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -80,9 +80,9 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n     {\n-        fn check<'a, T, Acc, R: Try<Ok = Acc>>(\n+        fn check<'a, T, Acc, R: Try<Output = Acc>>(\n             n: &'a mut usize,\n             mut fold: impl FnMut(Acc, T) -> R + 'a,\n         ) -> impl FnMut(Acc, T) -> ControlFlow<R, Acc> + 'a {\n@@ -178,7 +178,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n     {\n         if self.n == 0 {\n             try { init }"}, {"sha": "93457d20f7c238424cdc9a60c47017d7d2775596", "filename": "library/core/src/iter/adapters/take_while.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake_while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake_while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake_while.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -68,9 +68,9 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: Try<Output = Acc>,\n     {\n-        fn check<'a, T, Acc, R: Try<Ok = Acc>>(\n+        fn check<'a, T, Acc, R: Try<Output = Acc>>(\n             flag: &'a mut bool,\n             p: &'a mut impl FnMut(&T) -> bool,\n             mut fold: impl FnMut(Acc, T) -> R + 'a,"}, {"sha": "8d0b2b9f55c9c4989e29ec85e88dc2550d9175e3", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -755,7 +755,7 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> R,\n-        R: Try<Ok = B>,\n+        R: Try<Output = B>,\n     {\n         if self.is_empty() {\n             return try { init };\n@@ -860,7 +860,7 @@ impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> {\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> R,\n-        R: Try<Ok = B>,\n+        R: Try<Output = B>,\n     {\n         if self.is_empty() {\n             return try { init };"}, {"sha": "c302502b3b7e6473b64b65ee2ed956550d9e5ae3", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -218,7 +218,7 @@ pub trait DoubleEndedIterator: Iterator {\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> R,\n-        R: Try<Ok = B>,\n+        R: Try<Output = B>,\n     {\n         let mut accum = init;\n         while let Some(x) = self.next_back() {"}, {"sha": "777e4bc2c89206728497c9a17c449915d745a38a", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -1999,7 +1999,7 @@ pub trait Iterator {\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> R,\n-        R: Try<Ok = B>,\n+        R: Try<Output = B>,\n     {\n         let mut accum = init;\n         while let Some(x) = self.next() {\n@@ -2041,7 +2041,7 @@ pub trait Iterator {\n     where\n         Self: Sized,\n         F: FnMut(Self::Item) -> R,\n-        R: Try<Ok = ()>,\n+        R: Try<Output = ()>,\n     {\n         #[inline]\n         fn call<T, R>(mut f: impl FnMut(T) -> R) -> impl FnMut((), T) -> R {\n@@ -2412,17 +2412,48 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"try_find\", reason = \"new API\", issue = \"63178\")]\n+    #[cfg(not(bootstrap))]\n+    fn try_find<F, R, E>(&mut self, f: F) -> Result<Option<Self::Item>, E>\n+    where\n+        Self: Sized,\n+        F: FnMut(&Self::Item) -> R,\n+        R: Try<Output = bool>,\n+        // FIXME: This bound is rather strange, but means minimal breakage on nightly.\n+        // See #85115 for the issue tracking a holistic solution for this and try_map.\n+        R: crate::ops::TryV2<Residual = Result<crate::convert::Infallible, E>>,\n+    {\n+        #[inline]\n+        fn check<F, T, R, E>(mut f: F) -> impl FnMut((), T) -> ControlFlow<Result<T, E>>\n+        where\n+            F: FnMut(&T) -> R,\n+            R: Try<Output = bool>,\n+            R: crate::ops::TryV2<Residual = Result<crate::convert::Infallible, E>>,\n+        {\n+            move |(), x| match f(&x).branch() {\n+                ControlFlow::Continue(false) => ControlFlow::CONTINUE,\n+                ControlFlow::Continue(true) => ControlFlow::Break(Ok(x)),\n+                ControlFlow::Break(Err(x)) => ControlFlow::Break(Err(x)),\n+            }\n+        }\n+\n+        self.try_fold((), check(f)).break_value().transpose()\n+    }\n+\n+    /// We're bootstrapping.\n+    #[inline]\n+    #[unstable(feature = \"try_find\", reason = \"new API\", issue = \"63178\")]\n+    #[cfg(bootstrap)]\n     fn try_find<F, R>(&mut self, f: F) -> Result<Option<Self::Item>, R::Error>\n     where\n         Self: Sized,\n         F: FnMut(&Self::Item) -> R,\n-        R: Try<Ok = bool>,\n+        R: Try<Output = bool>,\n     {\n         #[inline]\n         fn check<F, T, R>(mut f: F) -> impl FnMut((), T) -> ControlFlow<Result<T, R::Error>>\n         where\n             F: FnMut(&T) -> R,\n-            R: Try<Ok = bool>,\n+            R: Try<Output = bool>,\n         {\n             move |(), x| match f(&x).into_result() {\n                 Ok(false) => ControlFlow::CONTINUE,"}, {"sha": "dbb51540bd475eaef3c005a9126f1ad216cc404b", "filename": "library/core/src/ops/control_flow.rs", "status": "modified", "additions": 35, "deletions": 10, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -1,5 +1,4 @@\n-use crate::convert;\n-use crate::ops::{self, Try};\n+use crate::{convert, ops};\n \n /// Used to tell an operation whether it should exit early or go on as usual.\n ///\n@@ -53,20 +52,22 @@ use crate::ops::{self, Try};\n #[derive(Debug, Clone, Copy, PartialEq)]\n pub enum ControlFlow<B, C = ()> {\n     /// Move on to the next phase of the operation as normal.\n+    #[cfg_attr(not(bootstrap), lang = \"Continue\")]\n     Continue(C),\n     /// Exit the operation without running subsequent phases.\n+    #[cfg_attr(not(bootstrap), lang = \"Break\")]\n     Break(B),\n     // Yes, the order of the variants doesn't match the type parameters.\n     // They're in this order so that `ControlFlow<A, B>` <-> `Result<B, A>`\n     // is a no-op conversion in the `Try` implementation.\n }\n \n #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n-impl<B, C> Try for ControlFlow<B, C> {\n-    type Ok = C;\n+impl<B, C> ops::TryV1 for ControlFlow<B, C> {\n+    type Output = C;\n     type Error = B;\n     #[inline]\n-    fn into_result(self) -> Result<Self::Ok, Self::Error> {\n+    fn into_result(self) -> Result<Self::Output, Self::Error> {\n         match self {\n             ControlFlow::Continue(y) => Ok(y),\n             ControlFlow::Break(x) => Err(x),\n@@ -77,7 +78,7 @@ impl<B, C> Try for ControlFlow<B, C> {\n         ControlFlow::Break(v)\n     }\n     #[inline]\n-    fn from_ok(v: Self::Ok) -> Self {\n+    fn from_ok(v: Self::Output) -> Self {\n         ControlFlow::Continue(v)\n     }\n }\n@@ -182,14 +183,38 @@ impl<B, C> ControlFlow<B, C> {\n     }\n }\n \n-impl<R: Try> ControlFlow<R, R::Ok> {\n+#[cfg(bootstrap)]\n+impl<R: ops::TryV1> ControlFlow<R, R::Output> {\n     /// Create a `ControlFlow` from any type implementing `Try`.\n     #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n     #[inline]\n     pub fn from_try(r: R) -> Self {\n-        match Try::into_result(r) {\n+        match R::into_result(r) {\n             Ok(v) => ControlFlow::Continue(v),\n-            Err(v) => ControlFlow::Break(Try::from_error(v)),\n+            Err(v) => ControlFlow::Break(R::from_error(v)),\n+        }\n+    }\n+\n+    /// Convert a `ControlFlow` into any type implementing `Try`;\n+    #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n+    #[inline]\n+    pub fn into_try(self) -> R {\n+        match self {\n+            ControlFlow::Continue(v) => R::from_ok(v),\n+            ControlFlow::Break(v) => v,\n+        }\n+    }\n+}\n+\n+#[cfg(not(bootstrap))]\n+impl<R: ops::TryV2> ControlFlow<R, R::Output> {\n+    /// Create a `ControlFlow` from any type implementing `Try`.\n+    #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n+    #[inline]\n+    pub fn from_try(r: R) -> Self {\n+        match R::branch(r) {\n+            ControlFlow::Continue(v) => ControlFlow::Continue(v),\n+            ControlFlow::Break(v) => ControlFlow::Break(R::from_residual(v)),\n         }\n     }\n \n@@ -198,7 +223,7 @@ impl<R: Try> ControlFlow<R, R::Ok> {\n     #[inline]\n     pub fn into_try(self) -> R {\n         match self {\n-            ControlFlow::Continue(v) => Try::from_ok(v),\n+            ControlFlow::Continue(v) => R::from_output(v),\n             ControlFlow::Break(v) => v,\n         }\n     }"}, {"sha": "beef74de6172889efda9863a26df14bc0aba6a61", "filename": "library/core/src/ops/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fmod.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -183,13 +183,21 @@ pub use self::range::{Range, RangeFrom, RangeFull, RangeTo};\n pub use self::range::{Bound, RangeBounds, RangeInclusive, RangeToInclusive};\n \n #[unstable(feature = \"try_trait\", issue = \"42327\")]\n+#[cfg(bootstrap)]\n pub use self::r#try::Try;\n \n+#[unstable(feature = \"try_trait_transition\", reason = \"for bootstrap\", issue = \"none\")]\n+pub(crate) use self::r#try::Try as TryV1;\n+\n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n pub use self::try_trait::FromResidual;\n \n+#[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n+#[cfg(not(bootstrap))]\n+pub use self::try_trait::Try;\n+\n #[unstable(feature = \"try_trait_transition\", reason = \"for bootstrap\", issue = \"none\")]\n-pub use self::try_trait::Try as TryV2;\n+pub(crate) use self::try_trait::Try as TryV2;\n \n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n pub use self::generator::{Generator, GeneratorState};"}, {"sha": "9d659e78d3ccee9e4ff961bfad5d5f555c303e0a", "filename": "library/core/src/ops/try.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fops%2Ftry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fops%2Ftry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ftry.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -25,11 +25,11 @@\n     )\n )]\n #[doc(alias = \"?\")]\n-#[lang = \"try\"]\n+#[cfg_attr(bootstrap, lang = \"try\")]\n pub trait Try {\n     /// The type of this value when viewed as successful.\n     #[unstable(feature = \"try_trait\", issue = \"42327\")]\n-    type Ok;\n+    type Output; // This no longer follows its RFC, but is only used in bootstrap.\n     /// The type of this value when viewed as failed.\n     #[unstable(feature = \"try_trait\", issue = \"42327\")]\n     type Error;\n@@ -43,19 +43,19 @@ pub trait Try {\n     /// in the return type of the enclosing scope (which must itself implement\n     /// `Try`). Specifically, the value `X::from_error(From::from(e))`\n     /// is returned, where `X` is the return type of the enclosing function.\n-    #[lang = \"into_result\"]\n+    #[cfg_attr(bootstrap, lang = \"into_result\")]\n     #[unstable(feature = \"try_trait\", issue = \"42327\")]\n-    fn into_result(self) -> Result<Self::Ok, Self::Error>;\n+    fn into_result(self) -> Result<Self::Output, Self::Error>;\n \n     /// Wrap an error value to construct the composite result. For example,\n     /// `Result::Err(x)` and `Result::from_error(x)` are equivalent.\n-    #[lang = \"from_error\"]\n+    #[cfg_attr(bootstrap, lang = \"from_error\")]\n     #[unstable(feature = \"try_trait\", issue = \"42327\")]\n     fn from_error(v: Self::Error) -> Self;\n \n     /// Wrap an OK value to construct the composite result. For example,\n     /// `Result::Ok(x)` and `Result::from_ok(x)` are equivalent.\n-    #[lang = \"from_ok\"]\n+    #[cfg_attr(bootstrap, lang = \"from_ok\")]\n     #[unstable(feature = \"try_trait\", issue = \"42327\")]\n-    fn from_ok(v: Self::Ok) -> Self;\n+    fn from_ok(v: Self::Output) -> Self;\n }"}, {"sha": "87044ed2fcee158c1940be43b04bf2a72a97df33", "filename": "library/core/src/ops/try_trait.rs", "status": "modified", "additions": 91, "deletions": 14, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -41,8 +41,7 @@ use crate::ops::ControlFlow;\n /// output type that we want:\n /// ```\n /// # #![feature(try_trait_v2)]\n-/// # #![feature(try_trait_transition)]\n-/// # use std::ops::TryV2 as Try;\n+/// # use std::ops::Try;\n /// fn simple_try_fold_1<A, T, R: Try<Output = A>>(\n ///     iter: impl Iterator<Item = T>,\n ///     mut accum: A,\n@@ -56,9 +55,8 @@ use crate::ops::ControlFlow;\n /// into the return type using [`Try::from_output`]:\n /// ```\n /// # #![feature(try_trait_v2)]\n-/// # #![feature(try_trait_transition)]\n /// # #![feature(control_flow_enum)]\n-/// # use std::ops::{ControlFlow, TryV2 as Try};\n+/// # use std::ops::{ControlFlow, Try};\n /// fn simple_try_fold_2<A, T, R: Try<Output = A>>(\n ///     iter: impl Iterator<Item = T>,\n ///     mut accum: A,\n@@ -81,9 +79,8 @@ use crate::ops::ControlFlow;\n /// recreated from their corresponding residual, so we'll just call it:\n /// ```\n /// # #![feature(try_trait_v2)]\n-/// # #![feature(try_trait_transition)]\n /// # #![feature(control_flow_enum)]\n-/// # use std::ops::{ControlFlow, TryV2 as Try};\n+/// # use std::ops::{ControlFlow, Try};\n /// pub fn simple_try_fold_3<A, T, R: Try<Output = A>>(\n ///     iter: impl Iterator<Item = T>,\n ///     mut accum: A,\n@@ -103,10 +100,9 @@ use crate::ops::ControlFlow;\n /// But this \"call `branch`, then `match` on it, and `return` if it was a\n /// `Break`\" is exactly what happens inside the `?` operator.  So rather than\n /// do all this manually, we can just use `?` instead:\n-/// ```compile_fail (enable again once ? converts to the new trait)\n+/// ```\n /// # #![feature(try_trait_v2)]\n-/// # #![feature(try_trait_transition)]\n-/// # use std::ops::TryV2 as Try;\n+/// # use std::ops::Try;\n /// fn simple_try_fold<A, T, R: Try<Output = A>>(\n ///     iter: impl Iterator<Item = T>,\n ///     mut accum: A,\n@@ -119,6 +115,22 @@ use crate::ops::ControlFlow;\n /// }\n /// ```\n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n+#[rustc_on_unimplemented(\n+    on(\n+        all(from_method = \"from_output\", from_desugaring = \"TryBlock\"),\n+        message = \"a `try` block must return `Result` or `Option` \\\n+                    (or another type that implements `{Try}`)\",\n+        label = \"could not wrap the final value of the block as `{Self}` doesn't implement `Try`\",\n+    ),\n+    on(\n+        all(from_method = \"branch\", from_desugaring = \"QuestionMark\"),\n+        message = \"the `?` operator can only be applied to values \\\n+                    that implement `{Try}`\",\n+        label = \"the `?` operator cannot be applied to type `{Self}`\"\n+    )\n+)]\n+#[doc(alias = \"?\")]\n+#[cfg_attr(not(bootstrap), lang = \"Try\")]\n pub trait Try: FromResidual {\n     /// The type of the value produced by `?` when *not* short-circuiting.\n     #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n@@ -159,8 +171,7 @@ pub trait Try: FromResidual {\n     /// ```\n     /// #![feature(try_trait_v2)]\n     /// #![feature(control_flow_enum)]\n-    /// #![feature(try_trait_transition)]\n-    /// use std::ops::TryV2 as Try;\n+    /// use std::ops::Try;\n     ///\n     /// assert_eq!(<Result<_, String> as Try>::from_output(3), Ok(3));\n     /// assert_eq!(<Option<_> as Try>::from_output(4), Some(4));\n@@ -178,6 +189,7 @@ pub trait Try: FromResidual {\n     /// let r = std::iter::empty().try_fold(4, |_, ()| -> Option<_> { unreachable!() });\n     /// assert_eq!(r, Some(4));\n     /// ```\n+    #[cfg_attr(not(bootstrap), lang = \"from_output\")]\n     #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n     fn from_output(output: Self::Output) -> Self;\n \n@@ -191,8 +203,7 @@ pub trait Try: FromResidual {\n     /// ```\n     /// #![feature(try_trait_v2)]\n     /// #![feature(control_flow_enum)]\n-    /// #![feature(try_trait_transition)]\n-    /// use std::ops::{ControlFlow, TryV2 as Try};\n+    /// use std::ops::{ControlFlow, Try};\n     ///\n     /// assert_eq!(Ok::<_, String>(3).branch(), ControlFlow::Continue(3));\n     /// assert_eq!(Err::<String, _>(3).branch(), ControlFlow::Break(Err(3)));\n@@ -206,15 +217,80 @@ pub trait Try: FromResidual {\n     ///     ControlFlow::Break(ControlFlow::Break(3)),\n     /// );\n     /// ```\n+    #[cfg_attr(not(bootstrap), lang = \"branch\")]\n     #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n }\n \n-/// Used to specify which residuals can be converted into which [`Try`] types.\n+/// Used to specify which residuals can be converted into which [`crate::ops::Try`] types.\n ///\n /// Every `Try` type needs to be recreatable from its own associated\n /// `Residual` type, but can also have additional `FromResidual` implementations\n /// to support interconversion with other `Try` types.\n+#[rustc_on_unimplemented(\n+    on(\n+        all(\n+            from_method = \"from_residual\",\n+            from_desugaring = \"QuestionMark\",\n+            _Self = \"std::result::Result<T, E>\",\n+            R = \"std::option::Option<std::convert::Infallible>\"\n+        ),\n+        message = \"the `?` operator can only be used on `Result`s, not `Option`s, \\\n+            in {ItemContext} that returns `Result`\",\n+        label = \"use `.ok_or(...)?` to provide an error compatible with `{Self}`\",\n+        enclosing_scope = \"this function returns a `Result`\"\n+    ),\n+    on(\n+        all(\n+            from_method = \"from_residual\",\n+            from_desugaring = \"QuestionMark\",\n+            _Self = \"std::result::Result<T, E>\",\n+        ),\n+        // There's a special error message in the trait selection code for\n+        // `From` in `?`, so this is not shown for result-in-result errors,\n+        // and thus it can be phrased more strongly than `ControlFlow`'s.\n+        message = \"the `?` operator can only be used on `Result`s \\\n+            in {ItemContext} that returns `Result`\",\n+        label = \"this `?` produces `{R}`, which is incompatible with `{Self}`\",\n+        enclosing_scope = \"this function returns a `Result`\"\n+    ),\n+    on(\n+        all(\n+            from_method = \"from_residual\",\n+            from_desugaring = \"QuestionMark\",\n+            _Self = \"std::option::Option<T>\",\n+        ),\n+        // `Option`-in-`Option` always works, as there's only one possible\n+        // residual, so this can also be phrased strongly.\n+        message = \"the `?` operator can only be used on `Option`s \\\n+            in {ItemContext} that returns `Option`\",\n+        label = \"this `?` produces `{R}`, which is incompatible with `{Self}`\",\n+        enclosing_scope = \"this function returns an `Option`\"\n+    ),\n+    on(\n+        all(\n+            from_method = \"from_residual\",\n+            from_desugaring = \"QuestionMark\",\n+            _Self = \"std::ops::ControlFlow<B, C>\",\n+        ),\n+        message = \"the `?` operator can only be used on `ControlFlow<B, _>`s \\\n+            in {ItemContext} that returns `ControlFlow<B, _>`\",\n+        label = \"this `?` produces `{R}`, which is incompatible with `{Self}`\",\n+        enclosing_scope = \"this function returns a `ControlFlow`\",\n+        note = \"unlike `Result`, there's no `From`-conversion performed for `ControlFlow`\"\n+    ),\n+    on(\n+        all(\n+            from_method = \"from_residual\",\n+            from_desugaring = \"QuestionMark\"\n+        ),\n+        message = \"the `?` operator can only be used in {ItemContext} \\\n+                    that returns `Result` or `Option` \\\n+                    (or another type that implements `{FromResidual}`)\",\n+        label = \"cannot use the `?` operator in {ItemContext} that returns `{Self}`\",\n+        enclosing_scope = \"this function should return `Result` or `Option` to accept `?`\"\n+    ),\n+)]\n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n pub trait FromResidual<R = <Self as Try>::Residual> {\n     /// Constructs the type from a compatible `Residual` type.\n@@ -238,6 +314,7 @@ pub trait FromResidual<R = <Self as Try>::Residual> {\n     ///     ControlFlow::Break(5),\n     /// );\n     /// ```\n+    #[cfg_attr(not(bootstrap), lang = \"from_residual\")]\n     #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n     fn from_residual(residual: R) -> Self;\n }"}, {"sha": "c5b1c804eadd2e1ce41ab43e1180728ff723e137", "filename": "library/core/src/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -1644,8 +1644,8 @@ impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n pub struct NoneError;\n \n #[unstable(feature = \"try_trait\", issue = \"42327\")]\n-impl<T> ops::Try for Option<T> {\n-    type Ok = T;\n+impl<T> ops::TryV1 for Option<T> {\n+    type Output = T;\n     type Error = NoneError;\n \n     #[inline]"}, {"sha": "21e406194bc9e7362179ccee37d87a2a110e4697", "filename": "library/core/src/result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -1627,8 +1627,8 @@ impl<A, E, V: FromIterator<A>> FromIterator<Result<A, E>> for Result<V, E> {\n }\n \n #[unstable(feature = \"try_trait\", issue = \"42327\")]\n-impl<T, E> ops::Try for Result<T, E> {\n-    type Ok = T;\n+impl<T, E> ops::TryV1 for Result<T, E> {\n+    type Output = T;\n     type Error = E;\n \n     #[inline]"}, {"sha": "b92ab7e347555479e54750528884804bc03015a1", "filename": "library/core/src/slice/ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -110,7 +110,7 @@ impl<'a> iter::Iterator for EscapeAscii<'a> {\n     fn try_fold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R\n     where\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: ops::Try<Ok = Acc>,\n+        R: ops::Try<Output = Acc>,\n     {\n         self.inner.try_fold(init, fold)\n     }"}, {"sha": "6ec6b70b57119b863e3788ef107705f3b8d54c75", "filename": "library/core/src/str/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -1467,7 +1467,7 @@ macro_rules! escape_types_impls {\n \n             #[inline]\n             fn try_fold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R where\n-                Self: Sized, Fold: FnMut(Acc, Self::Item) -> R, R: Try<Ok=Acc>\n+                Self: Sized, Fold: FnMut(Acc, Self::Item) -> R, R: Try<Output = Acc>\n             {\n                 self.inner.try_fold(init, fold)\n             }"}, {"sha": "188639e7962e4205bcc1d6f365151f0577b49e4a", "filename": "library/core/src/task/poll.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -1,7 +1,7 @@\n #![stable(feature = \"futures_api\", since = \"1.36.0\")]\n \n use crate::convert;\n-use crate::ops::{self, ControlFlow, Try};\n+use crate::ops::{self, ControlFlow};\n use crate::result::Result;\n \n /// Indicates whether a value is available or if the current task has been\n@@ -129,12 +129,12 @@ impl<T> From<T> for Poll<T> {\n }\n \n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n-impl<T, E> Try for Poll<Result<T, E>> {\n-    type Ok = Poll<T>;\n+impl<T, E> ops::TryV1 for Poll<Result<T, E>> {\n+    type Output = Poll<T>;\n     type Error = E;\n \n     #[inline]\n-    fn into_result(self) -> Result<Self::Ok, Self::Error> {\n+    fn into_result(self) -> Result<Self::Output, Self::Error> {\n         match self {\n             Poll::Ready(Ok(x)) => Ok(Poll::Ready(x)),\n             Poll::Ready(Err(e)) => Err(e),\n@@ -148,7 +148,7 @@ impl<T, E> Try for Poll<Result<T, E>> {\n     }\n \n     #[inline]\n-    fn from_ok(x: Self::Ok) -> Self {\n+    fn from_ok(x: Self::Output) -> Self {\n         x.map(Ok)\n     }\n }\n@@ -184,12 +184,12 @@ impl<T, E, F: From<E>> ops::FromResidual<Result<convert::Infallible, E>> for Pol\n }\n \n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n-impl<T, E> Try for Poll<Option<Result<T, E>>> {\n-    type Ok = Poll<Option<T>>;\n+impl<T, E> ops::TryV1 for Poll<Option<Result<T, E>>> {\n+    type Output = Poll<Option<T>>;\n     type Error = E;\n \n     #[inline]\n-    fn into_result(self) -> Result<Self::Ok, Self::Error> {\n+    fn into_result(self) -> Result<Self::Output, Self::Error> {\n         match self {\n             Poll::Ready(Some(Ok(x))) => Ok(Poll::Ready(Some(x))),\n             Poll::Ready(Some(Err(e))) => Err(e),\n@@ -204,7 +204,7 @@ impl<T, E> Try for Poll<Option<Result<T, E>>> {\n     }\n \n     #[inline]\n-    fn from_ok(x: Self::Ok) -> Self {\n+    fn from_ok(x: Self::Output) -> Self {\n         x.map(|x| x.map(Ok))\n     }\n }"}, {"sha": "db12d79c00c309b63b453cc00b54d78132e2fd45", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -45,6 +45,7 @@\n #![feature(test)]\n #![feature(trusted_len)]\n #![feature(try_trait)]\n+#![feature(try_trait_v2)]\n #![feature(slice_internals)]\n #![feature(slice_partition_dedup)]\n #![feature(int_error_matching)]"}, {"sha": "88ea15a3b33fac90de5bdb2c8ed7fee6dae1e2c0", "filename": "library/core/tests/option.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Foption.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -301,18 +301,6 @@ fn test_try() {\n         Some(val)\n     }\n     assert_eq!(try_option_none(), None);\n-\n-    fn try_option_ok() -> Result<u8, NoneError> {\n-        let val = Some(1)?;\n-        Ok(val)\n-    }\n-    assert_eq!(try_option_ok(), Ok(1));\n-\n-    fn try_option_err() -> Result<u8, NoneError> {\n-        let val = None?;\n-        Ok(val)\n-    }\n-    assert_eq!(try_option_err(), Err(NoneError));\n }\n \n #[test]"}, {"sha": "f4e5e7751b8e3f603129fc5f714c2b1b1478e903", "filename": "library/core/tests/result.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/library%2Fcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fresult.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -249,26 +249,14 @@ pub fn test_into_err() {\n \n #[test]\n fn test_try() {\n-    fn try_result_some() -> Option<u8> {\n-        let val = Ok(1)?;\n-        Some(val)\n-    }\n-    assert_eq!(try_result_some(), Some(1));\n-\n-    fn try_result_none() -> Option<u8> {\n-        let val = Err(NoneError)?;\n-        Some(val)\n-    }\n-    assert_eq!(try_result_none(), None);\n-\n-    fn try_result_ok() -> Result<u8, u8> {\n+    fn try_result_ok() -> Result<u8, u32> {\n         let result: Result<u8, u8> = Ok(1);\n         let val = result?;\n         Ok(val)\n     }\n     assert_eq!(try_result_ok(), Ok(1));\n \n-    fn try_result_err() -> Result<u8, u8> {\n+    fn try_result_err() -> Result<u8, u32> {\n         let result: Result<u8, u8> = Err(1);\n         let val = result?;\n         Ok(val)\n@@ -401,3 +389,17 @@ fn result_opt_conversions() {\n \n     assert_eq!(res, Err(BadNumErr))\n }\n+\n+#[test]\n+#[cfg(not(bootstrap))] // Needs the V2 trait\n+fn result_try_trait_v2_branch() {\n+    use core::num::NonZeroU32;\n+    use core::ops::{ControlFlow::*, Try};\n+    assert_eq!(Ok::<i32, i32>(4).branch(), Continue(4));\n+    assert_eq!(Err::<i32, i32>(4).branch(), Break(Err(4)));\n+    let one = NonZeroU32::new(1).unwrap();\n+    assert_eq!(Ok::<(), NonZeroU32>(()).branch(), Continue(()));\n+    assert_eq!(Err::<(), NonZeroU32>(one).branch(), Break(Err(one)));\n+    assert_eq!(Ok::<NonZeroU32, ()>(one).branch(), Continue(one));\n+    assert_eq!(Err::<NonZeroU32, ()>(()).branch(), Break(Err(())));\n+}"}, {"sha": "3ff77163b9f3d1c53e3fd5a540bd1821de555843", "filename": "src/test/codegen/try_identity.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fcodegen%2Ftry_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fcodegen%2Ftry_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ftry_identity.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -7,11 +7,28 @@\n \n type R = Result<u64, i32>;\n \n+// This was written to the `?` from `try_trait`, but `try_trait_v2` uses a different structure,\n+// so the relevant desugar is copied inline in order to keep the test testing the same thing.\n+// FIXME(#85133): while this might be useful for `r#try!`, it would be nice to have a MIR\n+// optimization that picks up the `?` desugaring, as `SimplifyArmIdentity` does not.\n #[no_mangle]\n-fn try_identity(x: R) -> R {\n+pub fn try_identity(x: R) -> R {\n // CHECK: start:\n // CHECK-NOT: br {{.*}}\n // CHECK ret void\n-    let y = x?;\n+    let y = match into_result(x) {\n+        Err(e) => return from_error(From::from(e)),\n+        Ok(v) => v,\n+    };\n     Ok(y)\n }\n+\n+#[inline]\n+fn into_result<T, E>(r: Result<T, E>) -> Result<T, E> {\n+    r\n+}\n+\n+#[inline]\n+fn from_error<T, E>(e: E) -> Result<T, E> {\n+    Err(e)\n+}"}, {"sha": "ba17a45f984ef403d6220c99866984ace687d64e", "filename": "src/test/mir-opt/issue_62289.test.ElaborateDrops.before.mir", "status": "modified", "additions": 30, "deletions": 40, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -4,21 +4,20 @@ fn test() -> Option<Box<u32>> {\n     let mut _0: std::option::Option<std::boxed::Box<u32>>; // return place in scope 0 at $DIR/issue-62289.rs:8:14: 8:30\n     let mut _1: std::boxed::Box<u32>;    // in scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n     let mut _2: std::boxed::Box<u32>;    // in scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n-    let mut _3: std::result::Result<u32, std::option::NoneError>; // in scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+    let mut _3: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, u32>; // in scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n     let mut _4: std::option::Option<u32>; // in scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n     let mut _5: isize;                   // in scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-    let _6: std::option::NoneError;      // in scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+    let _6: std::option::Option<std::convert::Infallible>; // in scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n     let mut _7: !;                       // in scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-    let mut _8: std::option::NoneError;  // in scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-    let mut _9: std::option::NoneError;  // in scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-    let _10: u32;                        // in scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+    let mut _8: std::option::Option<std::convert::Infallible>; // in scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+    let _9: u32;                         // in scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n     scope 1 {\n-        debug err => _6;                 // in scope 1 at $DIR/issue-62289.rs:9:19: 9:20\n+        debug residual => _6;            // in scope 1 at $DIR/issue-62289.rs:9:19: 9:20\n         scope 2 {\n         }\n     }\n     scope 3 {\n-        debug val => _10;                // in scope 3 at $DIR/issue-62289.rs:9:15: 9:20\n+        debug val => _9;                 // in scope 3 at $DIR/issue-62289.rs:9:15: 9:20\n         scope 4 {\n         }\n     }\n@@ -30,10 +29,10 @@ fn test() -> Option<Box<u32>> {\n         StorageLive(_3);                 // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n         StorageLive(_4);                 // scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n         _4 = Option::<u32>::None;        // scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n-        _3 = <Option<u32> as Try>::into_result(move _4) -> [return: bb1, unwind: bb12]; // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        _3 = <Option<u32> as Try>::branch(move _4) -> [return: bb1, unwind: bb11]; // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n                                          // mir::Constant\n                                          // + span: $DIR/issue-62289.rs:9:15: 9:20\n-                                         // + literal: Const { ty: fn(std::option::Option<u32>) -> std::result::Result<<std::option::Option<u32> as std::ops::Try>::Ok, <std::option::Option<u32> as std::ops::Try>::Error> {<std::option::Option<u32> as std::ops::Try>::into_result}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(std::option::Option<u32>) -> std::ops::ControlFlow<<std::option::Option<u32> as std::ops::Try>::Residual, <std::option::Option<u32> as std::ops::Try>::Output> {<std::option::Option<u32> as std::ops::Try>::branch}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {\n@@ -43,12 +42,12 @@ fn test() -> Option<Box<u32>> {\n     }\n \n     bb2: {\n-        StorageLive(_10);                // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n-        _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n-        (*_2) = _10;                     // scope 4 at $DIR/issue-62289.rs:9:15: 9:20\n-        StorageDead(_10);                // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+        StorageLive(_9);                 // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        _9 = ((_3 as Continue).0: u32);  // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        (*_2) = _9;                      // scope 4 at $DIR/issue-62289.rs:9:15: 9:20\n+        StorageDead(_9);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n         _1 = move _2;                    // scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n-        drop(_2) -> [return: bb7, unwind: bb11]; // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        drop(_2) -> [return: bb6, unwind: bb10]; // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n     }\n \n     bb3: {\n@@ -57,62 +56,53 @@ fn test() -> Option<Box<u32>> {\n \n     bb4: {\n         StorageLive(_6);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-        _6 = ((_3 as Err).0: std::option::NoneError); // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+        _6 = ((_3 as Break).0: std::option::Option<std::convert::Infallible>); // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n         StorageLive(_8);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-        StorageLive(_9);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-        _9 = _6;                         // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-        _8 = <NoneError as From<NoneError>>::from(move _9) -> [return: bb5, unwind: bb12]; // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n+        _8 = _6;                         // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n+        _0 = <Option<Box<u32>> as FromResidual<Option<Infallible>>>::from_residual(move _8) -> [return: bb5, unwind: bb11]; // scope 2 at $DIR/issue-62289.rs:9:15: 9:20\n                                          // mir::Constant\n                                          // + span: $DIR/issue-62289.rs:9:19: 9:20\n-                                         // + literal: Const { ty: fn(std::option::NoneError) -> std::option::NoneError {<std::option::NoneError as std::convert::From<std::option::NoneError>>::from}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(std::option::Option<std::convert::Infallible>) -> std::option::Option<std::boxed::Box<u32>> {<std::option::Option<std::boxed::Box<u32>> as std::ops::FromResidual<std::option::Option<std::convert::Infallible>>>::from_residual}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb5: {\n-        StorageDead(_9);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-        _0 = <Option<Box<u32>> as Try>::from_error(move _8) -> [return: bb6, unwind: bb12]; // scope 2 at $DIR/issue-62289.rs:9:15: 9:20\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-62289.rs:9:15: 9:20\n-                                         // + literal: Const { ty: fn(<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::Error) -> std::option::Option<std::boxed::Box<u32>> {<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::from_error}, val: Value(Scalar(<ZST>)) }\n-    }\n-\n-    bb6: {\n         StorageDead(_8);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n         StorageDead(_6);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-        drop(_2) -> bb9;                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        drop(_2) -> bb8;                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n     }\n \n-    bb7: {\n+    bb6: {\n         StorageDead(_2);                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n         _0 = Option::<Box<u32>>::Some(move _1); // scope 0 at $DIR/issue-62289.rs:9:5: 9:22\n-        drop(_1) -> bb8;                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n+        drop(_1) -> bb7;                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n     }\n \n-    bb8: {\n+    bb7: {\n         StorageDead(_1);                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n         StorageDead(_3);                 // scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n-        goto -> bb10;                    // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n+        goto -> bb9;                     // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n     }\n \n-    bb9: {\n+    bb8: {\n         StorageDead(_2);                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n         StorageDead(_1);                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n         StorageDead(_3);                 // scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n-        goto -> bb10;                    // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n+        goto -> bb9;                     // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n     }\n \n-    bb10: {\n+    bb9: {\n         return;                          // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n     }\n \n-    bb11 (cleanup): {\n-        drop(_1) -> bb13;                // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n+    bb10 (cleanup): {\n+        drop(_1) -> bb12;                // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n     }\n \n-    bb12 (cleanup): {\n-        drop(_2) -> bb13;                // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+    bb11 (cleanup): {\n+        drop(_2) -> bb12;                // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n     }\n \n-    bb13 (cleanup): {\n+    bb12 (cleanup): {\n         resume;                          // scope 0 at $DIR/issue-62289.rs:8:1: 10:2\n     }\n }"}, {"sha": "f7dcaa13449eac88c17898376922e5975859a142", "filename": "src/test/mir-opt/simplify-arm.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fmir-opt%2Fsimplify-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fmir-opt%2Fsimplify-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -20,8 +20,23 @@ fn id_result(r: Result<u8, i32>) -> Result<u8, i32> {\n     }\n }\n \n+fn into_result<T, E>(r: Result<T, E>) -> Result<T, E> {\n+    r\n+}\n+\n+fn from_error<T, E>(e: E) -> Result<T, E> {\n+    Err(e)\n+}\n+\n+// This was written to the `?` from `try_trait`, but `try_trait_v2` uses a different structure,\n+// so the relevant desugar is copied inline in order to keep the test testing the same thing.\n+// FIXME(#85133): while this might be useful for `r#try!`, it would be nice to have a MIR\n+// optimization that picks up the `?` desugaring, as `SimplifyArmIdentity` does not.\n fn id_try(r: Result<u8, i32>) -> Result<u8, i32> {\n-    let x = r?;\n+    let x = match into_result(r) {\n+        Err(e) => return from_error(From::from(e)),\n+        Ok(v) => v,\n+    };\n     Ok(x)\n }\n "}, {"sha": "a3bad4f0c623deec6f12bee391a01d1a0cdfc94d", "filename": "src/test/mir-opt/simplify_arm.id_try.SimplifyArmIdentity.diff", "status": "modified", "additions": 66, "deletions": 74, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -2,101 +2,93 @@\n + // MIR for `id_try` after SimplifyArmIdentity\n   \n   fn id_try(_1: Result<u8, i32>) -> Result<u8, i32> {\n-      debug r => _1;                       // in scope 0 at $DIR/simplify-arm.rs:23:11: 23:12\n-      let mut _0: std::result::Result<u8, i32>; // return place in scope 0 at $DIR/simplify-arm.rs:23:34: 23:49\n-      let _2: u8;                          // in scope 0 at $DIR/simplify-arm.rs:24:9: 24:10\n-      let mut _3: std::result::Result<u8, i32>; // in scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n-      let mut _4: std::result::Result<u8, i32>; // in scope 0 at $DIR/simplify-arm.rs:24:13: 24:14\n-      let mut _5: isize;                   // in scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-      let _6: i32;                         // in scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-      let mut _7: !;                       // in scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-      let mut _8: i32;                     // in scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-      let mut _9: i32;                     // in scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-      let _10: u8;                         // in scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n-      let mut _11: u8;                     // in scope 0 at $DIR/simplify-arm.rs:25:8: 25:9\n+      debug r => _1;                       // in scope 0 at $DIR/simplify-arm.rs:35:11: 35:12\n+      let mut _0: std::result::Result<u8, i32>; // return place in scope 0 at $DIR/simplify-arm.rs:35:34: 35:49\n+      let _2: u8;                          // in scope 0 at $DIR/simplify-arm.rs:36:9: 36:10\n+      let mut _3: std::result::Result<u8, i32>; // in scope 0 at $DIR/simplify-arm.rs:36:19: 36:33\n+      let mut _4: std::result::Result<u8, i32>; // in scope 0 at $DIR/simplify-arm.rs:36:31: 36:32\n+      let mut _5: isize;                   // in scope 0 at $DIR/simplify-arm.rs:37:9: 37:15\n+      let _6: i32;                         // in scope 0 at $DIR/simplify-arm.rs:37:13: 37:14\n+      let mut _7: !;                       // in scope 0 at $DIR/simplify-arm.rs:37:19: 37:51\n+      let mut _8: i32;                     // in scope 0 at $DIR/simplify-arm.rs:37:37: 37:50\n+      let mut _9: i32;                     // in scope 0 at $DIR/simplify-arm.rs:37:48: 37:49\n+      let _10: u8;                         // in scope 0 at $DIR/simplify-arm.rs:38:12: 38:13\n+      let mut _11: u8;                     // in scope 0 at $DIR/simplify-arm.rs:40:8: 40:9\n       scope 1 {\n--         debug x => _2;                   // in scope 1 at $DIR/simplify-arm.rs:24:9: 24:10\n-+         debug x => ((_0 as Ok).0: u8);   // in scope 1 at $DIR/simplify-arm.rs:24:9: 24:10\n+-         debug x => _2;                   // in scope 1 at $DIR/simplify-arm.rs:36:9: 36:10\n++         debug x => ((_0 as Ok).0: u8);   // in scope 1 at $DIR/simplify-arm.rs:36:9: 36:10\n       }\n       scope 2 {\n--         debug err => _6;                 // in scope 2 at $DIR/simplify-arm.rs:24:14: 24:15\n-+         debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify-arm.rs:24:14: 24:15\n-          scope 3 {\n-              scope 7 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify-arm.rs:24:14: 24:15\n--                 debug t => _9;           // in scope 7 at $DIR/simplify-arm.rs:24:14: 24:15\n-+                 debug t => ((_0 as Err).0: i32); // in scope 7 at $DIR/simplify-arm.rs:24:14: 24:15\n-              }\n-              scope 8 (inlined <Result<u8, i32> as Try>::from_error) { // at $DIR/simplify-arm.rs:24:13: 24:15\n--                 debug v => _8;           // in scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n-+                 debug v => ((_0 as Err).0: i32); // in scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n-                  let mut _12: i32;        // in scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n-              }\n+-         debug e => _6;                   // in scope 2 at $DIR/simplify-arm.rs:37:13: 37:14\n++         debug e => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify-arm.rs:37:13: 37:14\n+          scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify-arm.rs:37:37: 37:50\n+-             debug t => _9;               // in scope 5 at $DIR/simplify-arm.rs:37:37: 37:50\n++             debug t => ((_0 as Err).0: i32); // in scope 5 at $DIR/simplify-arm.rs:37:37: 37:50\n           }\n-      }\n-      scope 4 {\n--         debug val => _10;                // in scope 4 at $DIR/simplify-arm.rs:24:13: 24:15\n-+         debug val => ((_0 as Ok).0: u8); // in scope 4 at $DIR/simplify-arm.rs:24:13: 24:15\n-          scope 5 {\n+          scope 6 (inlined from_error::<u8, i32>) { // at $DIR/simplify-arm.rs:37:26: 37:51\n+-             debug e => _8;               // in scope 6 at $DIR/simplify-arm.rs:37:26: 37:51\n++             debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify-arm.rs:37:26: 37:51\n           }\n       }\n-      scope 6 (inlined <Result<u8, i32> as Try>::into_result) { // at $DIR/simplify-arm.rs:24:13: 24:15\n-          debug self => _4;                // in scope 6 at $DIR/simplify-arm.rs:24:13: 24:15\n+      scope 3 {\n+-         debug v => _10;                  // in scope 3 at $DIR/simplify-arm.rs:38:12: 38:13\n++         debug v => ((_0 as Ok).0: u8);   // in scope 3 at $DIR/simplify-arm.rs:38:12: 38:13\n+      }\n+      scope 4 (inlined into_result::<u8, i32>) { // at $DIR/simplify-arm.rs:36:19: 36:33\n+          debug r => _4;                   // in scope 4 at $DIR/simplify-arm.rs:36:19: 36:33\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/simplify-arm.rs:24:9: 24:10\n-          StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n-          StorageLive(_4);                 // scope 0 at $DIR/simplify-arm.rs:24:13: 24:14\n-          _4 = _1;                         // scope 0 at $DIR/simplify-arm.rs:24:13: 24:14\n-          _3 = move _4;                    // scope 6 at $DIR/simplify-arm.rs:24:13: 24:15\n-          StorageDead(_4);                 // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-          _5 = discriminant(_3);           // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-          switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+          StorageLive(_2);                 // scope 0 at $DIR/simplify-arm.rs:36:9: 36:10\n+          StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:36:19: 36:33\n+          StorageLive(_4);                 // scope 0 at $DIR/simplify-arm.rs:36:31: 36:32\n+          _4 = _1;                         // scope 0 at $DIR/simplify-arm.rs:36:31: 36:32\n+          _3 = move _4;                    // scope 4 at $DIR/simplify-arm.rs:36:19: 36:33\n+          StorageDead(_4);                 // scope 0 at $DIR/simplify-arm.rs:36:32: 36:33\n+          _5 = discriminant(_3);           // scope 0 at $DIR/simplify-arm.rs:37:9: 37:15\n+          switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:37:9: 37:15\n       }\n   \n       bb1: {\n--         StorageLive(_10);                // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n--         _10 = ((_3 as Ok).0: u8);        // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n--         _2 = _10;                        // scope 5 at $DIR/simplify-arm.rs:24:13: 24:15\n--         StorageDead(_10);                // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-+         _0 = move _3;                    // scope 1 at $DIR/simplify-arm.rs:25:5: 25:10\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:15: 24:16\n--         StorageLive(_11);                // scope 1 at $DIR/simplify-arm.rs:25:8: 25:9\n--         _11 = _2;                        // scope 1 at $DIR/simplify-arm.rs:25:8: 25:9\n--         ((_0 as Ok).0: u8) = move _11;   // scope 1 at $DIR/simplify-arm.rs:25:5: 25:10\n--         discriminant(_0) = 0;            // scope 1 at $DIR/simplify-arm.rs:25:5: 25:10\n--         StorageDead(_11);                // scope 1 at $DIR/simplify-arm.rs:25:9: 25:10\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n-          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n+-         StorageLive(_10);                // scope 0 at $DIR/simplify-arm.rs:38:12: 38:13\n+-         _10 = ((_3 as Ok).0: u8);        // scope 0 at $DIR/simplify-arm.rs:38:12: 38:13\n+-         _2 = _10;                        // scope 3 at $DIR/simplify-arm.rs:38:18: 38:19\n+-         StorageDead(_10);                // scope 0 at $DIR/simplify-arm.rs:38:18: 38:19\n++         _0 = move _3;                    // scope 1 at $DIR/simplify-arm.rs:40:5: 40:10\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:39:6: 39:7\n+-         StorageLive(_11);                // scope 1 at $DIR/simplify-arm.rs:40:8: 40:9\n+-         _11 = _2;                        // scope 1 at $DIR/simplify-arm.rs:40:8: 40:9\n+-         ((_0 as Ok).0: u8) = move _11;   // scope 1 at $DIR/simplify-arm.rs:40:5: 40:10\n+-         discriminant(_0) = 0;            // scope 1 at $DIR/simplify-arm.rs:40:5: 40:10\n+-         StorageDead(_11);                // scope 1 at $DIR/simplify-arm.rs:40:9: 40:10\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:41:1: 41:2\n+          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:41:2: 41:2\n       }\n   \n       bb2: {\n-          unreachable;                     // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n+          unreachable;                     // scope 0 at $DIR/simplify-arm.rs:36:19: 36:33\n       }\n   \n       bb3: {\n--         StorageLive(_6);                 // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n--         _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n--         StorageLive(_8);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n--         StorageLive(_9);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n--         _9 = _6;                         // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n--         _8 = move _9;                    // scope 7 at $DIR/simplify-arm.rs:24:14: 24:15\n--         StorageDead(_9);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n--         StorageLive(_12);                // scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n--         _12 = move _8;                   // scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n--         ((_0 as Err).0: i32) = move _12; // scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n--         discriminant(_0) = 1;            // scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n--         StorageDead(_12);                // scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n--         StorageDead(_8);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n--         StorageDead(_6);                 // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-+         _0 = move _3;                    // scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:15: 24:16\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n-          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n+-         StorageLive(_6);                 // scope 0 at $DIR/simplify-arm.rs:37:13: 37:14\n+-         _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify-arm.rs:37:13: 37:14\n+-         StorageLive(_8);                 // scope 2 at $DIR/simplify-arm.rs:37:37: 37:50\n+-         StorageLive(_9);                 // scope 2 at $DIR/simplify-arm.rs:37:48: 37:49\n+-         _9 = _6;                         // scope 2 at $DIR/simplify-arm.rs:37:48: 37:49\n+-         _8 = move _9;                    // scope 5 at $DIR/simplify-arm.rs:37:37: 37:50\n+-         StorageDead(_9);                 // scope 2 at $DIR/simplify-arm.rs:37:49: 37:50\n+-         ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify-arm.rs:37:26: 37:51\n+-         discriminant(_0) = 1;            // scope 6 at $DIR/simplify-arm.rs:37:26: 37:51\n+-         StorageDead(_8);                 // scope 2 at $DIR/simplify-arm.rs:37:50: 37:51\n+-         StorageDead(_6);                 // scope 0 at $DIR/simplify-arm.rs:37:50: 37:51\n++         _0 = move _3;                    // scope 6 at $DIR/simplify-arm.rs:37:26: 37:51\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:39:6: 39:7\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:41:1: 41:2\n+          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:41:2: 41:2\n       }\n   \n       bb4: {\n-          return;                          // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n+          return;                          // scope 0 at $DIR/simplify-arm.rs:41:2: 41:2\n       }\n   }\n   "}, {"sha": "b6b7511b3f597aaf947ef78c8b876babaa1b40d4", "filename": "src/test/mir-opt/simplify_arm.id_try.SimplifyBranchSame.diff", "status": "modified", "additions": 43, "deletions": 48, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -2,75 +2,70 @@\n + // MIR for `id_try` after SimplifyBranchSame\n   \n   fn id_try(_1: Result<u8, i32>) -> Result<u8, i32> {\n-      debug r => _1;                       // in scope 0 at $DIR/simplify-arm.rs:23:11: 23:12\n-      let mut _0: std::result::Result<u8, i32>; // return place in scope 0 at $DIR/simplify-arm.rs:23:34: 23:49\n-      let _2: u8;                          // in scope 0 at $DIR/simplify-arm.rs:24:9: 24:10\n-      let mut _3: std::result::Result<u8, i32>; // in scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n-      let mut _4: std::result::Result<u8, i32>; // in scope 0 at $DIR/simplify-arm.rs:24:13: 24:14\n-      let mut _5: isize;                   // in scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-      let _6: i32;                         // in scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-      let mut _7: !;                       // in scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-      let mut _8: i32;                     // in scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-      let mut _9: i32;                     // in scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-      let _10: u8;                         // in scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n-      let mut _11: u8;                     // in scope 0 at $DIR/simplify-arm.rs:25:8: 25:9\n+      debug r => _1;                       // in scope 0 at $DIR/simplify-arm.rs:35:11: 35:12\n+      let mut _0: std::result::Result<u8, i32>; // return place in scope 0 at $DIR/simplify-arm.rs:35:34: 35:49\n+      let _2: u8;                          // in scope 0 at $DIR/simplify-arm.rs:36:9: 36:10\n+      let mut _3: std::result::Result<u8, i32>; // in scope 0 at $DIR/simplify-arm.rs:36:19: 36:33\n+      let mut _4: std::result::Result<u8, i32>; // in scope 0 at $DIR/simplify-arm.rs:36:31: 36:32\n+      let mut _5: isize;                   // in scope 0 at $DIR/simplify-arm.rs:37:9: 37:15\n+      let _6: i32;                         // in scope 0 at $DIR/simplify-arm.rs:37:13: 37:14\n+      let mut _7: !;                       // in scope 0 at $DIR/simplify-arm.rs:37:19: 37:51\n+      let mut _8: i32;                     // in scope 0 at $DIR/simplify-arm.rs:37:37: 37:50\n+      let mut _9: i32;                     // in scope 0 at $DIR/simplify-arm.rs:37:48: 37:49\n+      let _10: u8;                         // in scope 0 at $DIR/simplify-arm.rs:38:12: 38:13\n+      let mut _11: u8;                     // in scope 0 at $DIR/simplify-arm.rs:40:8: 40:9\n       scope 1 {\n-          debug x => ((_0 as Ok).0: u8);   // in scope 1 at $DIR/simplify-arm.rs:24:9: 24:10\n+          debug x => ((_0 as Ok).0: u8);   // in scope 1 at $DIR/simplify-arm.rs:36:9: 36:10\n       }\n       scope 2 {\n-          debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify-arm.rs:24:14: 24:15\n-          scope 3 {\n-              scope 7 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify-arm.rs:24:14: 24:15\n-                  debug t => ((_0 as Err).0: i32); // in scope 7 at $DIR/simplify-arm.rs:24:14: 24:15\n-              }\n-              scope 8 (inlined <Result<u8, i32> as Try>::from_error) { // at $DIR/simplify-arm.rs:24:13: 24:15\n-                  debug v => ((_0 as Err).0: i32); // in scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n-                  let mut _12: i32;        // in scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n-              }\n+          debug e => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify-arm.rs:37:13: 37:14\n+          scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify-arm.rs:37:37: 37:50\n+              debug t => ((_0 as Err).0: i32); // in scope 5 at $DIR/simplify-arm.rs:37:37: 37:50\n           }\n-      }\n-      scope 4 {\n-          debug val => ((_0 as Ok).0: u8); // in scope 4 at $DIR/simplify-arm.rs:24:13: 24:15\n-          scope 5 {\n+          scope 6 (inlined from_error::<u8, i32>) { // at $DIR/simplify-arm.rs:37:26: 37:51\n+              debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify-arm.rs:37:26: 37:51\n           }\n       }\n-      scope 6 (inlined <Result<u8, i32> as Try>::into_result) { // at $DIR/simplify-arm.rs:24:13: 24:15\n-          debug self => _4;                // in scope 6 at $DIR/simplify-arm.rs:24:13: 24:15\n+      scope 3 {\n+          debug v => ((_0 as Ok).0: u8);   // in scope 3 at $DIR/simplify-arm.rs:38:12: 38:13\n+      }\n+      scope 4 (inlined into_result::<u8, i32>) { // at $DIR/simplify-arm.rs:36:19: 36:33\n+          debug r => _4;                   // in scope 4 at $DIR/simplify-arm.rs:36:19: 36:33\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/simplify-arm.rs:24:9: 24:10\n-          StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n-          StorageLive(_4);                 // scope 0 at $DIR/simplify-arm.rs:24:13: 24:14\n-          _4 = _1;                         // scope 0 at $DIR/simplify-arm.rs:24:13: 24:14\n-          _3 = move _4;                    // scope 6 at $DIR/simplify-arm.rs:24:13: 24:15\n-          StorageDead(_4);                 // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-          _5 = discriminant(_3);           // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n--         switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-+         goto -> bb1;                     // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+          StorageLive(_2);                 // scope 0 at $DIR/simplify-arm.rs:36:9: 36:10\n+          StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:36:19: 36:33\n+          StorageLive(_4);                 // scope 0 at $DIR/simplify-arm.rs:36:31: 36:32\n+          _4 = _1;                         // scope 0 at $DIR/simplify-arm.rs:36:31: 36:32\n+          _3 = move _4;                    // scope 4 at $DIR/simplify-arm.rs:36:19: 36:33\n+          StorageDead(_4);                 // scope 0 at $DIR/simplify-arm.rs:36:32: 36:33\n+          _5 = discriminant(_3);           // scope 0 at $DIR/simplify-arm.rs:37:9: 37:15\n+-         switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:37:9: 37:15\n++         goto -> bb1;                     // scope 0 at $DIR/simplify-arm.rs:37:9: 37:15\n       }\n   \n       bb1: {\n-          _0 = move _3;                    // scope 1 at $DIR/simplify-arm.rs:25:5: 25:10\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:15: 24:16\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n--         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n-+         goto -> bb2;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n+          _0 = move _3;                    // scope 1 at $DIR/simplify-arm.rs:40:5: 40:10\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:39:6: 39:7\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:41:1: 41:2\n+-         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:41:2: 41:2\n++         goto -> bb2;                     // scope 0 at $DIR/simplify-arm.rs:41:2: 41:2\n       }\n   \n       bb2: {\n--         unreachable;                     // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n+-         unreachable;                     // scope 0 at $DIR/simplify-arm.rs:36:19: 36:33\n -     }\n - \n -     bb3: {\n--         _0 = move _3;                    // scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n--         StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:15: 24:16\n--         StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n--         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n+-         _0 = move _3;                    // scope 6 at $DIR/simplify-arm.rs:37:26: 37:51\n+-         StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:39:6: 39:7\n+-         StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:41:1: 41:2\n+-         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:41:2: 41:2\n -     }\n - \n -     bb4: {\n-          return;                          // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n+          return;                          // scope 0 at $DIR/simplify-arm.rs:41:2: 41:2\n       }\n   }\n   "}, {"sha": "15e351e7d50161f6e705ab0669bb5d774b0fcbe7", "filename": "src/test/mir-opt/simplify_try.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -4,8 +4,24 @@\n // EMIT_MIR simplify_try.try_identity.SimplifyLocals.after.mir\n // EMIT_MIR simplify_try.try_identity.DestinationPropagation.diff\n \n+\n+fn into_result<T, E>(r: Result<T, E>) -> Result<T, E> {\n+    r\n+}\n+\n+fn from_error<T, E>(e: E) -> Result<T, E> {\n+    Err(e)\n+}\n+\n+// This was written to the `?` from `try_trait`, but `try_trait_v2` uses a different structure,\n+// so the relevant desugar is copied inline in order to keep the test testing the same thing.\n+// FIXME(#85133): while this might be useful for `r#try!`, it would be nice to have a MIR\n+// optimization that picks up the `?` desugaring, as `SimplifyArmIdentity` does not.\n fn try_identity(x: Result<u32, i32>) -> Result<u32, i32> {\n-    let y = x?;\n+    let y = match into_result(x) {\n+        Err(e) => return from_error(From::from(e)),\n+        Ok(v) => v,\n+    };\n     Ok(y)\n }\n "}, {"sha": "e09b8cb39bd510bb06c97949d336ce2ac98fe508", "filename": "src/test/mir-opt/simplify_try.try_identity.DestinationPropagation.diff", "status": "modified", "additions": 44, "deletions": 49, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -2,67 +2,62 @@\n + // MIR for `try_identity` after DestinationPropagation\n   \n   fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n-      debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:7:17: 7:18\n-      let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:7:41: 7:57\n-      let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n-      let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n-      let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n-      let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-      let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-      let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-      let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-      let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-      let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n-      let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:9:8: 9:9\n+      debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:20:17: 20:18\n+      let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:20:41: 20:57\n+      let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:21:9: 21:10\n+      let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n+      let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n+      let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:22:9: 22:15\n+      let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n+      let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:22:19: 22:51\n+      let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:22:37: 22:50\n+      let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:22:48: 22:49\n+      let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n+      let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:25:8: 25:9\n       scope 1 {\n-          debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:8:9: 8:10\n+          debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:21:9: 21:10\n       }\n       scope 2 {\n-          debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:8:14: 8:15\n-          scope 3 {\n-              scope 7 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:8:14: 8:15\n-                  debug t => ((_0 as Err).0: i32); // in scope 7 at $DIR/simplify_try.rs:8:14: 8:15\n-              }\n-              scope 8 (inlined <Result<u32, i32> as Try>::from_error) { // at $DIR/simplify_try.rs:8:13: 8:15\n-                  debug v => ((_0 as Err).0: i32); // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n-                  let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n-              }\n+          debug e => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n+          scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:22:37: 22:50\n+              debug t => ((_0 as Err).0: i32); // in scope 5 at $DIR/simplify_try.rs:22:37: 22:50\n           }\n-      }\n-      scope 4 {\n-          debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:8:13: 8:15\n-          scope 5 {\n+          scope 6 (inlined from_error::<u32, i32>) { // at $DIR/simplify_try.rs:22:26: 22:51\n+              debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify_try.rs:22:26: 22:51\n           }\n       }\n-      scope 6 (inlined <Result<u32, i32> as Try>::into_result) { // at $DIR/simplify_try.rs:8:13: 8:15\n--         debug self => _4;                // in scope 6 at $DIR/simplify_try.rs:8:13: 8:15\n-+         debug self => _0;                // in scope 6 at $DIR/simplify_try.rs:8:13: 8:15\n+      scope 3 {\n+          debug v => ((_0 as Ok).0: u32);  // in scope 3 at $DIR/simplify_try.rs:23:12: 23:13\n+      }\n+      scope 4 (inlined into_result::<u32, i32>) { // at $DIR/simplify_try.rs:21:19: 21:33\n+-         debug r => _4;                   // in scope 4 at $DIR/simplify_try.rs:21:19: 21:33\n++         debug r => _0;                   // in scope 4 at $DIR/simplify_try.rs:21:19: 21:33\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n--         StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n--         StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n--         _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n--         _3 = move _4;                    // scope 6 at $DIR/simplify_try.rs:8:13: 8:15\n--         StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n--         _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n-+         _0 = _1;                         // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n-+         nop;                             // scope 6 at $DIR/simplify_try.rs:8:13: 8:15\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-+         _5 = discriminant(_0);           // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-          goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+          StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:21:9: 21:10\n+-         StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n+-         StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n+-         _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n+-         _3 = move _4;                    // scope 4 at $DIR/simplify_try.rs:21:19: 21:33\n+-         StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:21:32: 21:33\n+-         _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:22:9: 22:15\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n++         _0 = _1;                         // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n++         nop;                             // scope 4 at $DIR/simplify_try.rs:21:19: 21:33\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:21:32: 21:33\n++         _5 = discriminant(_0);           // scope 0 at $DIR/simplify_try.rs:22:9: 22:15\n+          goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:22:9: 22:15\n       }\n   \n       bb1: {\n--         _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:9:5: 9:10\n--         StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:8:15: 8:16\n-+         nop;                             // scope 1 at $DIR/simplify_try.rs:9:5: 9:10\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:8:15: 8:16\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:10:1: 10:2\n-          return;                          // scope 0 at $DIR/simplify_try.rs:10:2: 10:2\n+-         _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+-         StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:24:6: 24:7\n++         nop;                             // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:24:6: 24:7\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:26:1: 26:2\n+          return;                          // scope 0 at $DIR/simplify_try.rs:26:2: 26:2\n       }\n   }\n   "}, {"sha": "488ad33f80a2dc2ae2206179643924cd9d3760a4", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyArmIdentity.diff", "status": "modified", "additions": 64, "deletions": 72, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -2,93 +2,85 @@\n + // MIR for `try_identity` after SimplifyArmIdentity\n   \n   fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n-      debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:7:17: 7:18\n-      let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:7:41: 7:57\n-      let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n-      let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n-      let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n-      let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-      let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-      let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-      let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-      let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-      let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n-      let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:9:8: 9:9\n+      debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:20:17: 20:18\n+      let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:20:41: 20:57\n+      let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:21:9: 21:10\n+      let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n+      let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n+      let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:22:9: 22:15\n+      let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n+      let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:22:19: 22:51\n+      let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:22:37: 22:50\n+      let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:22:48: 22:49\n+      let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n+      let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:25:8: 25:9\n       scope 1 {\n--         debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:8:9: 8:10\n-+         debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:8:9: 8:10\n+-         debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:21:9: 21:10\n++         debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:21:9: 21:10\n       }\n       scope 2 {\n--         debug err => _6;                 // in scope 2 at $DIR/simplify_try.rs:8:14: 8:15\n-+         debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:8:14: 8:15\n-          scope 3 {\n-              scope 7 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:8:14: 8:15\n--                 debug t => _9;           // in scope 7 at $DIR/simplify_try.rs:8:14: 8:15\n-+                 debug t => ((_0 as Err).0: i32); // in scope 7 at $DIR/simplify_try.rs:8:14: 8:15\n-              }\n-              scope 8 (inlined <Result<u32, i32> as Try>::from_error) { // at $DIR/simplify_try.rs:8:13: 8:15\n--                 debug v => _8;           // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n-+                 debug v => ((_0 as Err).0: i32); // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n-                  let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n-              }\n+-         debug e => _6;                   // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n++         debug e => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n+          scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:22:37: 22:50\n+-             debug t => _9;               // in scope 5 at $DIR/simplify_try.rs:22:37: 22:50\n++             debug t => ((_0 as Err).0: i32); // in scope 5 at $DIR/simplify_try.rs:22:37: 22:50\n           }\n-      }\n-      scope 4 {\n--         debug val => _10;                // in scope 4 at $DIR/simplify_try.rs:8:13: 8:15\n-+         debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:8:13: 8:15\n-          scope 5 {\n+          scope 6 (inlined from_error::<u32, i32>) { // at $DIR/simplify_try.rs:22:26: 22:51\n+-             debug e => _8;               // in scope 6 at $DIR/simplify_try.rs:22:26: 22:51\n++             debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify_try.rs:22:26: 22:51\n           }\n       }\n-      scope 6 (inlined <Result<u32, i32> as Try>::into_result) { // at $DIR/simplify_try.rs:8:13: 8:15\n-          debug self => _4;                // in scope 6 at $DIR/simplify_try.rs:8:13: 8:15\n+      scope 3 {\n+-         debug v => _10;                  // in scope 3 at $DIR/simplify_try.rs:23:12: 23:13\n++         debug v => ((_0 as Ok).0: u32);  // in scope 3 at $DIR/simplify_try.rs:23:12: 23:13\n+      }\n+      scope 4 (inlined into_result::<u32, i32>) { // at $DIR/simplify_try.rs:21:19: 21:33\n+          debug r => _4;                   // in scope 4 at $DIR/simplify_try.rs:21:19: 21:33\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n-          StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n-          StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n-          _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n-          _3 = move _4;                    // scope 6 at $DIR/simplify_try.rs:8:13: 8:15\n-          StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-          _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-          switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+          StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:21:9: 21:10\n+          StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n+          StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n+          _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n+          _3 = move _4;                    // scope 4 at $DIR/simplify_try.rs:21:19: 21:33\n+          StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:21:32: 21:33\n+          _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:22:9: 22:15\n+          switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:22:9: 22:15\n       }\n   \n       bb1: {\n--         StorageLive(_10);                // scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n--         _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n--         _2 = _10;                        // scope 5 at $DIR/simplify_try.rs:8:13: 8:15\n--         StorageDead(_10);                // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-+         _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:9:5: 9:10\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:8:15: 8:16\n--         StorageLive(_11);                // scope 1 at $DIR/simplify_try.rs:9:8: 9:9\n--         _11 = _2;                        // scope 1 at $DIR/simplify_try.rs:9:8: 9:9\n--         ((_0 as Ok).0: u32) = move _11;  // scope 1 at $DIR/simplify_try.rs:9:5: 9:10\n--         discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:9:5: 9:10\n--         StorageDead(_11);                // scope 1 at $DIR/simplify_try.rs:9:9: 9:10\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:10:1: 10:2\n-          return;                          // scope 0 at $DIR/simplify_try.rs:10:2: 10:2\n+-         StorageLive(_10);                // scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n+-         _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n+-         _2 = _10;                        // scope 3 at $DIR/simplify_try.rs:23:18: 23:19\n+-         StorageDead(_10);                // scope 0 at $DIR/simplify_try.rs:23:18: 23:19\n++         _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:24:6: 24:7\n+-         StorageLive(_11);                // scope 1 at $DIR/simplify_try.rs:25:8: 25:9\n+-         _11 = _2;                        // scope 1 at $DIR/simplify_try.rs:25:8: 25:9\n+-         ((_0 as Ok).0: u32) = move _11;  // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+-         discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+-         StorageDead(_11);                // scope 1 at $DIR/simplify_try.rs:25:9: 25:10\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:26:1: 26:2\n+          return;                          // scope 0 at $DIR/simplify_try.rs:26:2: 26:2\n       }\n   \n       bb2: {\n--         StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n--         _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n--         StorageLive(_8);                 // scope 3 at $DIR/simplify_try.rs:8:14: 8:15\n--         StorageLive(_9);                 // scope 3 at $DIR/simplify_try.rs:8:14: 8:15\n--         _9 = _6;                         // scope 3 at $DIR/simplify_try.rs:8:14: 8:15\n--         _8 = move _9;                    // scope 7 at $DIR/simplify_try.rs:8:14: 8:15\n--         StorageDead(_9);                 // scope 3 at $DIR/simplify_try.rs:8:14: 8:15\n--         StorageLive(_12);                // scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n--         _12 = move _8;                   // scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n--         ((_0 as Err).0: i32) = move _12; // scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n--         discriminant(_0) = 1;            // scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n--         StorageDead(_12);                // scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n--         StorageDead(_8);                 // scope 3 at $DIR/simplify_try.rs:8:14: 8:15\n--         StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-+         _0 = move _3;                    // scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:8:15: 8:16\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:10:1: 10:2\n-          return;                          // scope 0 at $DIR/simplify_try.rs:10:2: 10:2\n+-         StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n+-         _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n+-         StorageLive(_8);                 // scope 2 at $DIR/simplify_try.rs:22:37: 22:50\n+-         StorageLive(_9);                 // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n+-         _9 = _6;                         // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n+-         _8 = move _9;                    // scope 5 at $DIR/simplify_try.rs:22:37: 22:50\n+-         StorageDead(_9);                 // scope 2 at $DIR/simplify_try.rs:22:49: 22:50\n+-         ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify_try.rs:22:26: 22:51\n+-         discriminant(_0) = 1;            // scope 6 at $DIR/simplify_try.rs:22:26: 22:51\n+-         StorageDead(_8);                 // scope 2 at $DIR/simplify_try.rs:22:50: 22:51\n+-         StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:22:50: 22:51\n++         _0 = move _3;                    // scope 6 at $DIR/simplify_try.rs:22:26: 22:51\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:24:6: 24:7\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:26:1: 26:2\n+          return;                          // scope 0 at $DIR/simplify_try.rs:26:2: 26:2\n       }\n   }\n   "}, {"sha": "5d829f859e9d9afafe5a9f959f349f59fb7a7fa8", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyBranchSame.after.mir", "status": "modified", "additions": 35, "deletions": 40, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -1,57 +1,52 @@\n // MIR for `try_identity` after SimplifyBranchSame\n \n fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n-    debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:7:17: 7:18\n-    let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:7:41: 7:57\n-    let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n-    let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n-    let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n-    let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-    let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-    let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-    let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-    let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-    let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n-    let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:9:8: 9:9\n+    debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:20:17: 20:18\n+    let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:20:41: 20:57\n+    let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:21:9: 21:10\n+    let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n+    let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n+    let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:22:9: 22:15\n+    let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n+    let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:22:19: 22:51\n+    let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:22:37: 22:50\n+    let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:22:48: 22:49\n+    let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n+    let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:25:8: 25:9\n     scope 1 {\n-        debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:8:9: 8:10\n+        debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:21:9: 21:10\n     }\n     scope 2 {\n-        debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:8:14: 8:15\n-        scope 3 {\n-            scope 7 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:8:14: 8:15\n-                debug t => ((_0 as Err).0: i32); // in scope 7 at $DIR/simplify_try.rs:8:14: 8:15\n-            }\n-            scope 8 (inlined <Result<u32, i32> as Try>::from_error) { // at $DIR/simplify_try.rs:8:13: 8:15\n-                debug v => ((_0 as Err).0: i32); // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n-                let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n-            }\n+        debug e => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n+        scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:22:37: 22:50\n+            debug t => ((_0 as Err).0: i32); // in scope 5 at $DIR/simplify_try.rs:22:37: 22:50\n         }\n-    }\n-    scope 4 {\n-        debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:8:13: 8:15\n-        scope 5 {\n+        scope 6 (inlined from_error::<u32, i32>) { // at $DIR/simplify_try.rs:22:26: 22:51\n+            debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify_try.rs:22:26: 22:51\n         }\n     }\n-    scope 6 (inlined <Result<u32, i32> as Try>::into_result) { // at $DIR/simplify_try.rs:8:13: 8:15\n-        debug self => _4;                // in scope 6 at $DIR/simplify_try.rs:8:13: 8:15\n+    scope 3 {\n+        debug v => ((_0 as Ok).0: u32);  // in scope 3 at $DIR/simplify_try.rs:23:12: 23:13\n+    }\n+    scope 4 (inlined into_result::<u32, i32>) { // at $DIR/simplify_try.rs:21:19: 21:33\n+        debug r => _4;                   // in scope 4 at $DIR/simplify_try.rs:21:19: 21:33\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n-        StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n-        StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n-        _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n-        _3 = move _4;                    // scope 6 at $DIR/simplify_try.rs:8:13: 8:15\n-        StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-        _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-        goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+        StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:21:9: 21:10\n+        StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n+        StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n+        _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n+        _3 = move _4;                    // scope 4 at $DIR/simplify_try.rs:21:19: 21:33\n+        StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:21:32: 21:33\n+        _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:22:9: 22:15\n+        goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:22:9: 22:15\n     }\n \n     bb1: {\n-        _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:9:5: 9:10\n-        StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:8:15: 8:16\n-        StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:10:1: 10:2\n-        return;                          // scope 0 at $DIR/simplify_try.rs:10:2: 10:2\n+        _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+        StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:24:6: 24:7\n+        StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:26:1: 26:2\n+        return;                          // scope 0 at $DIR/simplify_try.rs:26:2: 26:2\n     }\n }"}, {"sha": "1b5232422b6c3fa6cac072bb5480c2472f796a5c", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyLocals.after.mir", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -1,33 +1,29 @@\n // MIR for `try_identity` after SimplifyLocals\n \n fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n-    debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:7:17: 7:18\n-    let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:7:41: 7:57\n+    debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:20:17: 20:18\n+    let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:20:41: 20:57\n     scope 1 {\n-        debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:8:9: 8:10\n+        debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:21:9: 21:10\n     }\n     scope 2 {\n-        debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:8:14: 8:15\n-        scope 3 {\n-            scope 7 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:8:14: 8:15\n-                debug t => ((_0 as Err).0: i32); // in scope 7 at $DIR/simplify_try.rs:8:14: 8:15\n-            }\n-            scope 8 (inlined <Result<u32, i32> as Try>::from_error) { // at $DIR/simplify_try.rs:8:13: 8:15\n-                debug v => ((_0 as Err).0: i32); // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n-            }\n+        debug e => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n+        scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:22:37: 22:50\n+            debug t => ((_0 as Err).0: i32); // in scope 5 at $DIR/simplify_try.rs:22:37: 22:50\n         }\n-    }\n-    scope 4 {\n-        debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:8:13: 8:15\n-        scope 5 {\n+        scope 6 (inlined from_error::<u32, i32>) { // at $DIR/simplify_try.rs:22:26: 22:51\n+            debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify_try.rs:22:26: 22:51\n         }\n     }\n-    scope 6 (inlined <Result<u32, i32> as Try>::into_result) { // at $DIR/simplify_try.rs:8:13: 8:15\n-        debug self => _0;                // in scope 6 at $DIR/simplify_try.rs:8:13: 8:15\n+    scope 3 {\n+        debug v => ((_0 as Ok).0: u32);  // in scope 3 at $DIR/simplify_try.rs:23:12: 23:13\n+    }\n+    scope 4 (inlined into_result::<u32, i32>) { // at $DIR/simplify_try.rs:21:19: 21:33\n+        debug r => _0;                   // in scope 4 at $DIR/simplify_try.rs:21:19: 21:33\n     }\n \n     bb0: {\n-        _0 = _1;                         // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n-        return;                          // scope 0 at $DIR/simplify_try.rs:10:2: 10:2\n+        _0 = _1;                         // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n+        return;                          // scope 0 at $DIR/simplify_try.rs:26:2: 26:2\n     }\n }"}, {"sha": "9fe3313ee6cc67b6be36c46226102ecf0488df6c", "filename": "src/test/ui/async-await/issue-61076.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -42,7 +42,7 @@ async fn bar() -> Result<(), ()> {\n     foo()?; //~ ERROR the `?` operator can only be applied to values that implement `Try`\n     //~^ NOTE the `?` operator cannot be applied to type `impl Future`\n     //~| HELP the trait `Try` is not implemented for `impl Future`\n-    //~| NOTE required by `into_result`\n+    //~| NOTE required by `branch`\n     //~| HELP consider `await`ing on the `Future`\n     //~| NOTE in this expansion of desugaring of operator `?`\n     //~| NOTE in this expansion of desugaring of operator `?`\n@@ -65,7 +65,7 @@ async fn baz() -> Result<(), ()> {\n     t?; //~ ERROR the `?` operator can only be applied to values that implement `Try`\n     //~^ NOTE the `?` operator cannot be applied to type `T`\n     //~| HELP the trait `Try` is not implemented for `T`\n-    //~| NOTE required by `into_result`\n+    //~| NOTE required by `branch`\n     //~| HELP consider `await`ing on the `Future`\n     //~| NOTE in this expansion of desugaring of operator `?`\n     //~| NOTE in this expansion of desugaring of operator `?`"}, {"sha": "ad661fb2833fa08e7992ea0d4de9a6eff2372da0", "filename": "src/test/ui/async-await/issue-61076.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -5,7 +5,7 @@ LL |     foo()?;\n    |     ^^^^^^ the `?` operator cannot be applied to type `impl Future`\n    |\n    = help: the trait `Try` is not implemented for `impl Future`\n-   = note: required by `into_result`\n+   = note: required by `branch`\n help: consider `await`ing on the `Future`\n    |\n LL |     foo().await?;\n@@ -18,7 +18,7 @@ LL |     t?;\n    |     ^^ the `?` operator cannot be applied to type `T`\n    |\n    = help: the trait `Try` is not implemented for `T`\n-   = note: required by `into_result`\n+   = note: required by `branch`\n help: consider `await`ing on the `Future`\n    |\n LL |     t.await?;"}, {"sha": "a3f122a466361fc4e3dd033c6f002a739ce0d92d", "filename": "src/test/ui/async-await/try-on-option-in-async.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.stderr?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -1,47 +1,47 @@\n-error[E0277]: the `?` operator can only be used in an async block that returns `Result` or `Option` (or another type that implements `Try`)\n-  --> $DIR/try-on-option-in-async.rs:8:9\n+error[E0277]: the `?` operator can only be used in an async block that returns `Result` or `Option` (or another type that implements `FromResidual`)\n+  --> $DIR/try-on-option-in-async.rs:8:10\n    |\n LL |       async {\n    |  ___________-\n LL | |         let x: Option<u32> = None;\n LL | |         x?;\n-   | |         ^^ cannot use the `?` operator in an async block that returns `{integer}`\n+   | |          ^ cannot use the `?` operator in an async block that returns `{integer}`\n LL | |         22\n LL | |     }\n    | |_____- this function should return `Result` or `Option` to accept `?`\n    |\n-   = help: the trait `Try` is not implemented for `{integer}`\n-   = note: required by `from_error`\n+   = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `{integer}`\n+   = note: required by `from_residual`\n \n-error[E0277]: the `?` operator can only be used in an async closure that returns `Result` or `Option` (or another type that implements `Try`)\n-  --> $DIR/try-on-option-in-async.rs:17:9\n+error[E0277]: the `?` operator can only be used in an async closure that returns `Result` or `Option` (or another type that implements `FromResidual`)\n+  --> $DIR/try-on-option-in-async.rs:17:10\n    |\n LL |       let async_closure = async || {\n    |  __________________________________-\n LL | |         let x: Option<u32> = None;\n LL | |         x?;\n-   | |         ^^ cannot use the `?` operator in an async closure that returns `u32`\n+   | |          ^ cannot use the `?` operator in an async closure that returns `u32`\n LL | |         22_u32\n LL | |     };\n    | |_____- this function should return `Result` or `Option` to accept `?`\n    |\n-   = help: the trait `Try` is not implemented for `u32`\n-   = note: required by `from_error`\n+   = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `u32`\n+   = note: required by `from_residual`\n \n-error[E0277]: the `?` operator can only be used in an async function that returns `Result` or `Option` (or another type that implements `Try`)\n-  --> $DIR/try-on-option-in-async.rs:26:5\n+error[E0277]: the `?` operator can only be used in an async function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n+  --> $DIR/try-on-option-in-async.rs:26:6\n    |\n LL |   async fn an_async_function() -> u32 {\n    |  _____________________________________-\n LL | |     let x: Option<u32> = None;\n LL | |     x?;\n-   | |     ^^ cannot use the `?` operator in an async function that returns `u32`\n+   | |      ^ cannot use the `?` operator in an async function that returns `u32`\n LL | |     22\n LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n-   = help: the trait `Try` is not implemented for `u32`\n-   = note: required by `from_error`\n+   = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `u32`\n+   = note: required by `from_residual`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "7beb2db3969c8c1d055de34781f76ceb2eced49e", "filename": "src/test/ui/inference/cannot-infer-async-enabled-impl-trait-bindings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -10,8 +10,8 @@ fn make_unit() -> Result<(), Error> {\n \n fn main() {\n     let fut = async {\n-        make_unit()?; //~ ERROR type annotations needed\n+        make_unit()?;\n \n-        Ok(())\n+        Ok(()) //~ ERROR type annotations needed\n     };\n }"}, {"sha": "8e632fbc1de1ba0a70fdc27390c66c0a9a6663ef", "filename": "src/test/ui/inference/cannot-infer-async-enabled-impl-trait-bindings.stderr", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.stderr?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -8,14 +8,13 @@ LL | #![feature(impl_trait_in_bindings)]\n    = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n \n error[E0282]: type annotations needed for `impl Future`\n-  --> $DIR/cannot-infer-async-enabled-impl-trait-bindings.rs:13:20\n+  --> $DIR/cannot-infer-async-enabled-impl-trait-bindings.rs:15:9\n    |\n LL |     let fut = async {\n-   |         --- consider giving `fut` the explicit type `impl Future`, with the type parameters specified\n-LL |         make_unit()?;\n-   |                    ^ cannot infer type of error for `?` operator\n-   |\n-   = note: `?` implicitly converts the error value into a type implementing `From<std::io::Error>`\n+   |         --- consider giving `fut` the explicit type `impl Future`, where the type parameter `E` is specified\n+...\n+LL |         Ok(())\n+   |         ^^ cannot infer type for type parameter `E` declared on the enum `Result`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "e7fabd0ffbc8bd178b4457d0c82598b9c5fbccf7", "filename": "src/test/ui/inference/cannot-infer-async.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -8,8 +8,8 @@ fn make_unit() -> Result<(), Error> {\n \n fn main() {\n     let fut = async {\n-        make_unit()?; //~ ERROR type annotations needed\n+        make_unit()?;\n \n-        Ok(())\n+        Ok(()) //~ ERROR type annotations needed\n     };\n }"}, {"sha": "233604833612aa4a79fd283e43eb235fa6cc4dbb", "filename": "src/test/ui/inference/cannot-infer-async.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.stderr?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -1,12 +1,11 @@\n error[E0282]: type annotations needed\n-  --> $DIR/cannot-infer-async.rs:11:20\n+  --> $DIR/cannot-infer-async.rs:13:9\n    |\n LL |     let fut = async {\n    |         --- consider giving `fut` a type\n-LL |         make_unit()?;\n-   |                    ^ cannot infer type of error for `?` operator\n-   |\n-   = note: `?` implicitly converts the error value into a type implementing `From<std::io::Error>`\n+...\n+LL |         Ok(())\n+   |         ^^ cannot infer type for type parameter `E` declared on the enum `Result`\n \n error: aborting due to previous error\n "}, {"sha": "a6ddb7ae908fc0fbacb9423d5fde5da0e152cfd5", "filename": "src/test/ui/inference/cannot-infer-closure-circular.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure-circular.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure-circular.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure-circular.stderr?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed for `Result<(), E>`\n   --> $DIR/cannot-infer-closure-circular.rs:7:14\n    |\n LL |     let x = |r| {\n-   |              ^ consider giving this closure parameter the explicit type `Result<(), E>`, with the type parameters specified\n+   |              ^ consider giving this closure parameter the explicit type `Result<(), E>`, where the type parameter `E` is specified\n \n error: aborting due to previous error\n "}, {"sha": "6e84b6d5ad0bddb7206966f1954bb23d77833526", "filename": "src/test/ui/inference/cannot-infer-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let x = |a: (), b: ()| {\n-        Err(a)?; //~ ERROR type annotations needed for the closure\n-        Ok(b)\n+        Err(a)?;\n+        Ok(b) //~ ERROR type annotations needed for the closure\n     };\n }"}, {"sha": "e055d1a94ffe98c06356c90581dcad1fbc4c626a", "filename": "src/test/ui/inference/cannot-infer-closure.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.stderr?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -1,10 +1,9 @@\n error[E0282]: type annotations needed for the closure `fn((), ()) -> Result<(), _>`\n-  --> $DIR/cannot-infer-closure.rs:3:15\n+  --> $DIR/cannot-infer-closure.rs:4:9\n    |\n-LL |         Err(a)?;\n-   |               ^ cannot infer type of error for `?` operator\n+LL |         Ok(b)\n+   |         ^^ cannot infer type for type parameter `E` declared on the enum `Result`\n    |\n-   = note: `?` implicitly converts the error value into a type implementing `From<()>`\n help: give this closure an explicit return type without `_` placeholders\n    |\n LL |     let x = |a: (), b: ()| -> Result<(), _> {"}, {"sha": "c394f6efbda9b3527671d1ecfbd51d040f092a74", "filename": "src/test/ui/inference/cannot-infer-partial-try-return.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Finference%2Fcannot-infer-partial-try-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Finference%2Fcannot-infer-partial-try-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-partial-try-return.stderr?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -2,9 +2,8 @@ error[E0282]: type annotations needed for the closure `fn() -> Result<(), Qualif\n   --> $DIR/cannot-infer-partial-try-return.rs:19:9\n    |\n LL |         infallible()?;\n-   |         ^^^^^^^^^^^^^ cannot infer type of error for `?` operator\n+   |         ^^^^^^^^^^^^^ cannot infer type\n    |\n-   = note: `?` implicitly converts the error value into `QualifiedError<_>` using its implementation of `From<Infallible>`\n help: give this closure an explicit return type without `_` placeholders\n    |\n LL |     let x = || -> Result<(), QualifiedError<_>> {"}, {"sha": "2d020188198af843ff55c811fd2f122c211fd24a", "filename": "src/test/ui/issues/issue-32709.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -7,7 +7,8 @@ LL |     Err(5)?;\n    |           ^ the trait `From<{integer}>` is not implemented for `()`\n    |\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n-   = note: required by `from`\n+   = note: required because of the requirements on the impl of `FromResidual<Result<Infallible, {integer}>>` for `Result<i32, ()>`\n+   = note: required by `from_residual`\n \n error: aborting due to previous error\n "}, {"sha": "551b9f4650aac17d7fe04675a1e58b4f80fb7426", "filename": "src/test/ui/option-to-result.stderr", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/491cf5561efb1f5ff33c3234ccd0bc5cacbebe3e/src%2Ftest%2Fui%2Foption-to-result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/491cf5561efb1f5ff33c3234ccd0bc5cacbebe3e/src%2Ftest%2Fui%2Foption-to-result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foption-to-result.stderr?ref=491cf5561efb1f5ff33c3234ccd0bc5cacbebe3e", "patch": "@@ -1,35 +0,0 @@\n-error[E0277]: `?` couldn't convert the error to `()`\n-  --> $DIR/option-to-result.rs:5:6\n-   |\n-LL | fn test_result() -> Result<(),()> {\n-   |                     ------------- expected `()` because of this\n-LL |     let a:Option<()> = Some(());\n-LL |     a?;\n-   |      ^ the trait `From<NoneError>` is not implemented for `()`\n-   |\n-   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n-   = note: required by `from`\n-help: consider converting the `Option<T>` into a `Result<T, _>` using `Option::ok_or` or `Option::ok_or_else`\n-   |\n-LL |     a.ok_or_else(|| /* error value */)?;\n-   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: `?` couldn't convert the error to `NoneError`\n-  --> $DIR/option-to-result.rs:11:6\n-   |\n-LL | fn test_option() -> Option<i32>{\n-   |                     ----------- expected `NoneError` because of this\n-LL |     let a:Result<i32, i32> = Ok(5);\n-LL |     a?;\n-   |      ^ the trait `From<i32>` is not implemented for `NoneError`\n-   |\n-   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n-   = note: required by `from`\n-help: consider converting the `Result<T, _>` into an `Option<T>` using `Result::ok`\n-   |\n-LL |     a.ok()?;\n-   |      ^^^^^\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "db5042b40d8bcfa10e339fb1be41990cd3eb571e", "filename": "src/test/ui/question-mark-type-infer.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Fquestion-mark-type-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Fquestion-mark-type-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fquestion-mark-type-infer.stderr?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -1,16 +1,15 @@\n-error[E0283]: type annotations needed\n+error[E0284]: type annotations needed\n   --> $DIR/question-mark-type-infer.rs:12:21\n    |\n LL |     l.iter().map(f).collect()?\n    |                     ^^^^^^^ cannot infer type\n    |\n-   = note: cannot satisfy `_: Try`\n-   = note: required by `into_result`\n+   = note: cannot satisfy `<_ as Try>::Residual == _`\n help: consider specifying the type argument in the method call\n    |\n LL |     l.iter().map(f).collect::<B>()?\n    |                            ^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0283`.\n+For more information about this error, try `rustc --explain E0284`."}, {"sha": "6985f1b71a8db806b8aa7871e424a82029fd6634", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -502,25 +502,25 @@ LL |     if (let 0 = 0)? {}\n    |        ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n-   = note: required by `into_result`\n+   = note: required by `branch`\n \n-error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `Try`)\n-  --> $DIR/disallowed-positions.rs:46:8\n+error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n+  --> $DIR/disallowed-positions.rs:46:19\n    |\n LL | / fn nested_within_if_expr() {\n LL | |     if &let 0 = 0 {}\n LL | |\n LL | |\n ...  |\n LL | |     if (let 0 = 0)? {}\n-   | |        ^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n+   | |                   ^ cannot use the `?` operator in a function that returns `()`\n ...  |\n LL | |     if let true = let true = true {}\n LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n-   = help: the trait `Try` is not implemented for `()`\n-   = note: required by `from_error`\n+   = help: the trait `FromResidual<_>` is not implemented for `()`\n+   = note: required by `from_residual`\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:56:8\n@@ -660,7 +660,7 @@ LL |         if let 0 = 0? {}\n    |                    ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n-   = note: required by `into_result`\n+   = note: required by `branch`\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:96:11\n@@ -690,25 +690,25 @@ LL |     while (let 0 = 0)? {}\n    |           ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n-   = note: required by `into_result`\n+   = note: required by `branch`\n \n-error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `Try`)\n-  --> $DIR/disallowed-positions.rs:110:11\n+error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n+  --> $DIR/disallowed-positions.rs:110:22\n    |\n LL | / fn nested_within_while_expr() {\n LL | |     while &let 0 = 0 {}\n LL | |\n LL | |\n ...  |\n LL | |     while (let 0 = 0)? {}\n-   | |           ^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n+   | |                      ^ cannot use the `?` operator in a function that returns `()`\n ...  |\n LL | |     while let true = let true = true {}\n LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n-   = help: the trait `Try` is not implemented for `()`\n-   = note: required by `from_error`\n+   = help: the trait `FromResidual<_>` is not implemented for `()`\n+   = note: required by `from_residual`\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:120:11\n@@ -848,7 +848,7 @@ LL |         while let 0 = 0? {}\n    |                       ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n-   = note: required by `into_result`\n+   = note: required by `branch`\n \n error[E0614]: type `bool` cannot be dereferenced\n   --> $DIR/disallowed-positions.rs:173:5\n@@ -869,25 +869,25 @@ LL |     (let 0 = 0)?;\n    |     ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n-   = note: required by `into_result`\n+   = note: required by `branch`\n \n-error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `Try`)\n-  --> $DIR/disallowed-positions.rs:183:5\n+error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n+  --> $DIR/disallowed-positions.rs:183:16\n    |\n LL | / fn outside_if_and_while_expr() {\n LL | |     &let 0 = 0;\n LL | |\n LL | |     !let 0 = 0;\n ...  |\n LL | |     (let 0 = 0)?;\n-   | |     ^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n+   | |                ^ cannot use the `?` operator in a function that returns `()`\n ...  |\n LL | |\n LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n-   = help: the trait `Try` is not implemented for `()`\n-   = note: required by `from_error`\n+   = help: the trait `FromResidual<_>` is not implemented for `()`\n+   = note: required by `from_residual`\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:198:10\n@@ -916,7 +916,7 @@ LL |         let 0 = 0?;\n    |                 ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n-   = note: required by `into_result`\n+   = note: required by `branch`\n \n error: aborting due to 104 previous errors; 2 warnings emitted\n "}, {"sha": "eb67170d47cdf10c51e145be9582de38803b46d0", "filename": "src/test/ui/suggestions/issue-72766.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-72766.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-72766.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-72766.stderr?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -5,7 +5,7 @@ LL |     SadGirl {}.call()?;\n    |     ^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `impl Future`\n    |\n    = help: the trait `Try` is not implemented for `impl Future`\n-   = note: required by `into_result`\n+   = note: required by `branch`\n help: consider `await`ing on the `Future`\n    |\n LL |     SadGirl {}.call().await?;"}, {"sha": "30ae96763c0e291d5d45d3baa18dec91b78d2949", "filename": "src/test/ui/try-block/try-block-bad-type.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -15,8 +15,7 @@ pub fn main() {\n     let res: Result<i32, i32> = try { }; //~ ERROR type mismatch\n \n     let res: () = try { };\n-    //~^ ERROR the trait bound `(): Try` is not satisfied\n-    //~| ERROR the trait bound `(): Try` is not satisfied\n+    //~^ ERROR a `try` block must return `Result` or `Option`\n \n-    let res: i32 = try { 5 }; //~ ERROR the trait bound `i32: Try` is not satisfied\n+    let res: i32 = try { 5 }; //~ ERROR a `try` block must return `Result` or `Option`\n }"}, {"sha": "ec5e91f10c28614bb3cef54ee7064d200d1ec4e2", "filename": "src/test/ui/try-block/try-block-bad-type.stderr", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -7,43 +7,40 @@ LL |         Err(\"\")?;\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n    = help: the following implementations were found:\n              <TryFromSliceError as From<Infallible>>\n-   = note: required by `from`\n+   = note: required because of the requirements on the impl of `FromResidual<Result<Infallible, &str>>` for `Result<u32, TryFromSliceError>`\n+   = note: required by `from_residual`\n \n-error[E0271]: type mismatch resolving `<Result<i32, i32> as Try>::Ok == &str`\n+error[E0271]: type mismatch resolving `<Result<i32, i32> as Try>::Output == &str`\n   --> $DIR/try-block-bad-type.rs:12:9\n    |\n LL |         \"\"\n    |         ^^ expected `i32`, found `&str`\n \n-error[E0271]: type mismatch resolving `<Result<i32, i32> as Try>::Ok == ()`\n+error[E0271]: type mismatch resolving `<Result<i32, i32> as Try>::Output == ()`\n   --> $DIR/try-block-bad-type.rs:15:39\n    |\n LL |     let res: Result<i32, i32> = try { };\n    |                                       ^ expected `i32`, found `()`\n \n-error[E0277]: the trait bound `(): Try` is not satisfied\n+error[E0277]: a `try` block must return `Result` or `Option` (or another type that implements `Try`)\n   --> $DIR/try-block-bad-type.rs:17:25\n    |\n LL |     let res: () = try { };\n-   |                         ^ the trait `Try` is not implemented for `()`\n+   |                         ^ could not wrap the final value of the block as `()` doesn't implement `Try`\n    |\n-   = note: required by `from_ok`\n+   = help: the trait `Try` is not implemented for `()`\n+   = note: required by `from_output`\n \n-error[E0277]: the trait bound `(): Try` is not satisfied\n-  --> $DIR/try-block-bad-type.rs:17:25\n-   |\n-LL |     let res: () = try { };\n-   |                         ^ the trait `Try` is not implemented for `()`\n-\n-error[E0277]: the trait bound `i32: Try` is not satisfied\n-  --> $DIR/try-block-bad-type.rs:21:26\n+error[E0277]: a `try` block must return `Result` or `Option` (or another type that implements `Try`)\n+  --> $DIR/try-block-bad-type.rs:20:26\n    |\n LL |     let res: i32 = try { 5 };\n-   |                          ^ the trait `Try` is not implemented for `i32`\n+   |                          ^ could not wrap the final value of the block as `i32` doesn't implement `Try`\n    |\n-   = note: required by `from_ok`\n+   = help: the trait `Try` is not implemented for `i32`\n+   = note: required by `from_output`\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors have detailed explanations: E0271, E0277.\n For more information about an error, try `rustc --explain E0271`."}, {"sha": "69793df525e7714f8d154b58e23d75b129391f29", "filename": "src/test/ui/try-block/try-block-in-while.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-while.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -4,5 +4,5 @@\n \n fn main() {\n     while try { false } {}\n-    //~^ ERROR the trait bound `bool: Try` is not satisfied\n+    //~^ ERROR a `try` block must\n }"}, {"sha": "c83351d5c434634766476d45340a5b533cb38494", "filename": "src/test/ui/try-block/try-block-in-while.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-while.stderr?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -1,10 +1,11 @@\n-error[E0277]: the trait bound `bool: Try` is not satisfied\n+error[E0277]: a `try` block must return `Result` or `Option` (or another type that implements `Try`)\n   --> $DIR/try-block-in-while.rs:6:17\n    |\n LL |     while try { false } {}\n-   |                 ^^^^^ the trait `Try` is not implemented for `bool`\n+   |                 ^^^^^ could not wrap the final value of the block as `bool` doesn't implement `Try`\n    |\n-   = note: required by `from_ok`\n+   = help: the trait `Try` is not implemented for `bool`\n+   = note: required by `from_output`\n \n error: aborting due to previous error\n "}, {"sha": "3e9a584a5510a1ff9b91a8ff42ea3444bcd01fb8", "filename": "src/test/ui/try-block/try-block-type-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-type-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-type-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-type-error.stderr?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -1,4 +1,4 @@\n-error[E0271]: type mismatch resolving `<Option<f32> as Try>::Ok == {integer}`\n+error[E0271]: type mismatch resolving `<Option<f32> as Try>::Output == {integer}`\n   --> $DIR/try-block-type-error.rs:10:9\n    |\n LL |         42\n@@ -7,7 +7,7 @@ LL |         42\n    |         expected `f32`, found integer\n    |         help: use a float literal: `42.0`\n \n-error[E0271]: type mismatch resolving `<Option<i32> as Try>::Ok == ()`\n+error[E0271]: type mismatch resolving `<Option<i32> as Try>::Output == ()`\n   --> $DIR/try-block-type-error.rs:16:5\n    |\n LL |     };"}, {"sha": "ecd12c430f1f6a421e9887a637c43860021b38a1", "filename": "src/test/ui/try-on-option.stderr", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/491cf5561efb1f5ff33c3234ccd0bc5cacbebe3e/src%2Ftest%2Fui%2Ftry-on-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/491cf5561efb1f5ff33c3234ccd0bc5cacbebe3e/src%2Ftest%2Fui%2Ftry-on-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-on-option.stderr?ref=491cf5561efb1f5ff33c3234ccd0bc5cacbebe3e", "patch": "@@ -1,33 +0,0 @@\n-error[E0277]: `?` couldn't convert the error to `()`\n-  --> $DIR/try-on-option.rs:7:6\n-   |\n-LL | fn foo() -> Result<u32, ()> {\n-   |             --------------- expected `()` because of this\n-LL |     let x: Option<u32> = None;\n-LL |     x?;\n-   |      ^ the trait `From<NoneError>` is not implemented for `()`\n-   |\n-   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n-   = note: required by `from`\n-help: consider converting the `Option<T>` into a `Result<T, _>` using `Option::ok_or` or `Option::ok_or_else`\n-   |\n-LL |     x.ok_or_else(|| /* error value */)?;\n-   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `Try`)\n-  --> $DIR/try-on-option.rs:13:5\n-   |\n-LL | / fn bar() -> u32 {\n-LL | |     let x: Option<u32> = None;\n-LL | |     x?;\n-   | |     ^^ cannot use the `?` operator in a function that returns `u32`\n-LL | |     22\n-LL | | }\n-   | |_- this function should return `Result` or `Option` to accept `?`\n-   |\n-   = help: the trait `Try` is not implemented for `u32`\n-   = note: required by `from_error`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "9993061ea61552690458d39845f28c3b7908ba75", "filename": "src/test/ui/try-operator-custom.rs", "status": "removed", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/491cf5561efb1f5ff33c3234ccd0bc5cacbebe3e/src%2Ftest%2Fui%2Ftry-operator-custom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491cf5561efb1f5ff33c3234ccd0bc5cacbebe3e/src%2Ftest%2Fui%2Ftry-operator-custom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-operator-custom.rs?ref=491cf5561efb1f5ff33c3234ccd0bc5cacbebe3e", "patch": "@@ -1,63 +0,0 @@\n-// run-pass\n-\n-#![feature(try_trait)]\n-\n-use std::ops::Try;\n-\n-enum MyResult<T, U> {\n-    Awesome(T),\n-    Terrible(U)\n-}\n-\n-impl<U, V> Try for MyResult<U, V> {\n-    type Ok = U;\n-    type Error = V;\n-\n-    fn from_ok(u: U) -> MyResult<U, V> {\n-        MyResult::Awesome(u)\n-    }\n-\n-    fn from_error(e: V) -> MyResult<U, V> {\n-        MyResult::Terrible(e)\n-    }\n-\n-    fn into_result(self) -> Result<U, V> {\n-        match self {\n-            MyResult::Awesome(u) => Ok(u),\n-            MyResult::Terrible(e) => Err(e),\n-        }\n-    }\n-}\n-\n-fn f(x: i32) -> Result<i32, String> {\n-    if x == 0 {\n-        Ok(42)\n-    } else {\n-        let y = g(x)?;\n-        Ok(y)\n-    }\n-}\n-\n-fn g(x: i32) -> MyResult<i32, String> {\n-    let _y = f(x - 1)?;\n-    MyResult::Terrible(\"Hello\".to_owned())\n-}\n-\n-fn h() -> MyResult<i32, String> {\n-    let a: Result<i32, &'static str> = Err(\"Hello\");\n-    let b = a?;\n-    MyResult::Awesome(b)\n-}\n-\n-fn i() -> MyResult<i32, String> {\n-    let a: MyResult<i32, &'static str> = MyResult::Terrible(\"Hello\");\n-    let b = a?;\n-    MyResult::Awesome(b)\n-}\n-\n-fn main() {\n-    assert!(f(0) == Ok(42));\n-    assert!(f(10) == Err(\"Hello\".to_owned()));\n-    let _ = h();\n-    let _ = i();\n-}"}, {"sha": "87585822f5719dc5c5682d0dd9b72fc3f0ebb5eb", "filename": "src/test/ui/try-trait/bad-interconversion.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -0,0 +1,48 @@\n+#![feature(control_flow_enum)]\n+\n+use std::ops::ControlFlow;\n+\n+fn result_to_result() -> Result<u64, u8> {\n+    Ok(Err(123_i32)?)\n+    //~^ ERROR `?` couldn't convert the error to `u8`\n+}\n+\n+fn option_to_result() -> Result<u64, String> {\n+    Some(3)?;\n+    //~^ ERROR the `?` operator can only be used on `Result`s, not `Option`s, in a function that returns `Result`\n+    Ok(10)\n+}\n+\n+fn control_flow_to_result() -> Result<u64, String> {\n+    Ok(ControlFlow::Break(123)?)\n+    //~^ ERROR the `?` operator can only be used on `Result`s in a function that returns `Result`\n+}\n+\n+fn result_to_option() -> Option<u16> {\n+    Some(Err(\"hello\")?)\n+    //~^ ERROR the `?` operator can only be used on `Option`s in a function that returns `Option`\n+}\n+\n+fn control_flow_to_option() -> Option<u64> {\n+    Some(ControlFlow::Break(123)?)\n+    //~^ ERROR the `?` operator can only be used on `Option`s in a function that returns `Option`\n+}\n+\n+fn result_to_control_flow() -> ControlFlow<String> {\n+    ControlFlow::Continue(Err(\"hello\")?)\n+    //~^ ERROR the `?` operator can only be used on `ControlFlow<B, _>`s in a function that returns `ControlFlow<B, _>`\n+}\n+\n+fn option_to_control_flow() -> ControlFlow<u64> {\n+    Some(3)?;\n+    //~^ ERROR the `?` operator can only be used on `ControlFlow<B, _>`s in a function that returns `ControlFlow<B, _>`\n+    ControlFlow::Break(10)\n+}\n+\n+fn control_flow_to_control_flow() -> ControlFlow<i64> {\n+    ControlFlow::Break(4_u8)?;\n+    //~^ ERROR the `?` operator can only be used on `ControlFlow<B, _>`s in a function that returns `ControlFlow<B, _>`\n+    ControlFlow::Continue(())\n+}\n+\n+fn main() {}"}, {"sha": "e396256de2245fad5a45f04b0dbd808acd902176", "filename": "src/test/ui/try-trait/bad-interconversion.stderr", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -0,0 +1,115 @@\n+error[E0277]: `?` couldn't convert the error to `u8`\n+  --> $DIR/bad-interconversion.rs:6:20\n+   |\n+LL | fn result_to_result() -> Result<u64, u8> {\n+   |                          --------------- expected `u8` because of this\n+LL |     Ok(Err(123_i32)?)\n+   |                    ^ the trait `From<i32>` is not implemented for `u8`\n+   |\n+   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n+   = help: the following implementations were found:\n+             <u8 as From<NonZeroU8>>\n+             <u8 as From<bool>>\n+   = note: required because of the requirements on the impl of `FromResidual<Result<Infallible, i32>>` for `Result<u64, u8>`\n+   = note: required by `from_residual`\n+\n+error[E0277]: the `?` operator can only be used on `Result`s, not `Option`s, in a function that returns `Result`\n+  --> $DIR/bad-interconversion.rs:11:12\n+   |\n+LL | / fn option_to_result() -> Result<u64, String> {\n+LL | |     Some(3)?;\n+   | |            ^ use `.ok_or(...)?` to provide an error compatible with `Result<u64, String>`\n+LL | |\n+LL | |     Ok(10)\n+LL | | }\n+   | |_- this function returns a `Result`\n+   |\n+   = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `Result<u64, String>`\n+   = note: required by `from_residual`\n+\n+error[E0277]: the `?` operator can only be used on `Result`s in a function that returns `Result`\n+  --> $DIR/bad-interconversion.rs:17:31\n+   |\n+LL | / fn control_flow_to_result() -> Result<u64, String> {\n+LL | |     Ok(ControlFlow::Break(123)?)\n+   | |                               ^ this `?` produces `ControlFlow<{integer}, Infallible>`, which is incompatible with `Result<u64, String>`\n+LL | |\n+LL | | }\n+   | |_- this function returns a `Result`\n+   |\n+   = help: the trait `FromResidual<ControlFlow<{integer}, Infallible>>` is not implemented for `Result<u64, String>`\n+   = note: required by `from_residual`\n+\n+error[E0277]: the `?` operator can only be used on `Option`s in a function that returns `Option`\n+  --> $DIR/bad-interconversion.rs:22:22\n+   |\n+LL | / fn result_to_option() -> Option<u16> {\n+LL | |     Some(Err(\"hello\")?)\n+   | |                      ^ this `?` produces `Result<Infallible, &str>`, which is incompatible with `Option<u16>`\n+LL | |\n+LL | | }\n+   | |_- this function returns an `Option`\n+   |\n+   = help: the trait `FromResidual<Result<Infallible, &str>>` is not implemented for `Option<u16>`\n+   = note: required by `from_residual`\n+\n+error[E0277]: the `?` operator can only be used on `Option`s in a function that returns `Option`\n+  --> $DIR/bad-interconversion.rs:27:33\n+   |\n+LL | / fn control_flow_to_option() -> Option<u64> {\n+LL | |     Some(ControlFlow::Break(123)?)\n+   | |                                 ^ this `?` produces `ControlFlow<{integer}, Infallible>`, which is incompatible with `Option<u64>`\n+LL | |\n+LL | | }\n+   | |_- this function returns an `Option`\n+   |\n+   = help: the trait `FromResidual<ControlFlow<{integer}, Infallible>>` is not implemented for `Option<u64>`\n+   = note: required by `from_residual`\n+\n+error[E0277]: the `?` operator can only be used on `ControlFlow<B, _>`s in a function that returns `ControlFlow<B, _>`\n+  --> $DIR/bad-interconversion.rs:32:39\n+   |\n+LL | / fn result_to_control_flow() -> ControlFlow<String> {\n+LL | |     ControlFlow::Continue(Err(\"hello\")?)\n+   | |                                       ^ this `?` produces `Result<Infallible, &str>`, which is incompatible with `ControlFlow<String>`\n+LL | |\n+LL | | }\n+   | |_- this function returns a `ControlFlow`\n+   |\n+   = help: the trait `FromResidual<Result<Infallible, &str>>` is not implemented for `ControlFlow<String>`\n+   = note: unlike `Result`, there's no `From`-conversion performed for `ControlFlow`\n+   = note: required by `from_residual`\n+\n+error[E0277]: the `?` operator can only be used on `ControlFlow<B, _>`s in a function that returns `ControlFlow<B, _>`\n+  --> $DIR/bad-interconversion.rs:37:12\n+   |\n+LL | / fn option_to_control_flow() -> ControlFlow<u64> {\n+LL | |     Some(3)?;\n+   | |            ^ this `?` produces `Option<Infallible>`, which is incompatible with `ControlFlow<u64>`\n+LL | |\n+LL | |     ControlFlow::Break(10)\n+LL | | }\n+   | |_- this function returns a `ControlFlow`\n+   |\n+   = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `ControlFlow<u64>`\n+   = note: unlike `Result`, there's no `From`-conversion performed for `ControlFlow`\n+   = note: required by `from_residual`\n+\n+error[E0277]: the `?` operator can only be used on `ControlFlow<B, _>`s in a function that returns `ControlFlow<B, _>`\n+  --> $DIR/bad-interconversion.rs:43:29\n+   |\n+LL | / fn control_flow_to_control_flow() -> ControlFlow<i64> {\n+LL | |     ControlFlow::Break(4_u8)?;\n+   | |                             ^ this `?` produces `ControlFlow<u8, Infallible>`, which is incompatible with `ControlFlow<i64>`\n+LL | |\n+LL | |     ControlFlow::Continue(())\n+LL | | }\n+   | |_- this function returns a `ControlFlow`\n+   |\n+   = help: the trait `FromResidual<ControlFlow<u8, Infallible>>` is not implemented for `ControlFlow<i64>`\n+   = note: unlike `Result`, there's no `From`-conversion performed for `ControlFlow`\n+   = note: required by `from_residual`\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "45aaf361a9c0e0e2977e9c9770f181440bb9ceef", "filename": "src/test/ui/try-trait/option-to-result.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -2,12 +2,12 @@ fn main(){ }\n \n fn test_result() -> Result<(),()> {\n     let a:Option<()> = Some(());\n-    a?;//~ ERROR `?` couldn't convert the error\n+    a?;//~ ERROR the `?` operator can only be used\n     Ok(())\n }\n \n fn test_option() -> Option<i32>{\n     let a:Result<i32, i32> = Ok(5);\n-    a?;//~ ERROR `?` couldn't convert the error\n+    a?;//~ ERROR the `?` operator can only be used\n     Some(5)\n }", "previous_filename": "src/test/ui/option-to-result.rs"}, {"sha": "92087c2aba2527293b375da2ffad34434c9b7505", "filename": "src/test/ui/try-trait/option-to-result.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.stderr?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -0,0 +1,31 @@\n+error[E0277]: the `?` operator can only be used on `Result`s, not `Option`s, in a function that returns `Result`\n+  --> $DIR/option-to-result.rs:5:6\n+   |\n+LL | / fn test_result() -> Result<(),()> {\n+LL | |     let a:Option<()> = Some(());\n+LL | |     a?;\n+   | |      ^ use `.ok_or(...)?` to provide an error compatible with `Result<(), ()>`\n+LL | |     Ok(())\n+LL | | }\n+   | |_- this function returns a `Result`\n+   |\n+   = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `Result<(), ()>`\n+   = note: required by `from_residual`\n+\n+error[E0277]: the `?` operator can only be used on `Option`s in a function that returns `Option`\n+  --> $DIR/option-to-result.rs:11:6\n+   |\n+LL | / fn test_option() -> Option<i32>{\n+LL | |     let a:Result<i32, i32> = Ok(5);\n+LL | |     a?;\n+   | |      ^ this `?` produces `Result<Infallible, i32>`, which is incompatible with `Option<i32>`\n+LL | |     Some(5)\n+LL | | }\n+   | |_- this function returns an `Option`\n+   |\n+   = help: the trait `FromResidual<Result<Infallible, i32>>` is not implemented for `Option<i32>`\n+   = note: required by `from_residual`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "cf09838b304b3a55a09f344b852da6131bcb569d", "filename": "src/test/ui/try-trait/try-as-monad.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-trait%2Ftry-as-monad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-trait%2Ftry-as-monad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-as-monad.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -0,0 +1,24 @@\n+// run-pass\n+\n+#![feature(try_trait_v2)]\n+\n+use std::ops::Try;\n+\n+fn monad_unit<T: Try>(x: <T as Try>::Output) -> T {\n+    T::from_output(x)\n+}\n+\n+fn monad_bind<T1: Try<Residual = R>, T2: Try<Residual = R>, R>(\n+    mx: T1,\n+    f: impl FnOnce(<T1 as Try>::Output) -> T2)\n+-> T2 {\n+    let x = mx?;\n+    f(x)\n+}\n+\n+fn main() {\n+    let mx: Option<i32> = monad_unit(1);\n+    let my = monad_bind(mx, |x| Some(x + 1));\n+    let mz = monad_bind(my, |x| Some(-x));\n+    assert_eq!(mz, Some(-2));\n+}"}, {"sha": "63d17414c313bab96f509f4f12ed99b2dbf61a54", "filename": "src/test/ui/try-trait/try-on-option-diagnostics.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option-diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option-diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option-diagnostics.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "previous_filename": "src/test/ui/try-on-option-diagnostics.rs"}, {"sha": "e7c67c21bb3e3f1e9155733303f7fd28ec51b687", "filename": "src/test/ui/try-trait/try-on-option-diagnostics.stderr", "status": "renamed", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option-diagnostics.stderr?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -1,57 +1,57 @@\n-error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `Try`)\n-  --> $DIR/try-on-option-diagnostics.rs:7:5\n+error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n+  --> $DIR/try-on-option-diagnostics.rs:7:6\n    |\n LL | / fn a_function() -> u32 {\n LL | |     let x: Option<u32> = None;\n LL | |     x?;\n-   | |     ^^ cannot use the `?` operator in a function that returns `u32`\n+   | |      ^ cannot use the `?` operator in a function that returns `u32`\n LL | |     22\n LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n-   = help: the trait `Try` is not implemented for `u32`\n-   = note: required by `from_error`\n+   = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `u32`\n+   = note: required by `from_residual`\n \n-error[E0277]: the `?` operator can only be used in a closure that returns `Result` or `Option` (or another type that implements `Try`)\n-  --> $DIR/try-on-option-diagnostics.rs:14:9\n+error[E0277]: the `?` operator can only be used in a closure that returns `Result` or `Option` (or another type that implements `FromResidual`)\n+  --> $DIR/try-on-option-diagnostics.rs:14:10\n    |\n LL |       let a_closure = || {\n    |  _____________________-\n LL | |         let x: Option<u32> = None;\n LL | |         x?;\n-   | |         ^^ cannot use the `?` operator in a closure that returns `{integer}`\n+   | |          ^ cannot use the `?` operator in a closure that returns `{integer}`\n LL | |         22\n LL | |     };\n    | |_____- this function should return `Result` or `Option` to accept `?`\n    |\n-   = help: the trait `Try` is not implemented for `{integer}`\n-   = note: required by `from_error`\n+   = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `{integer}`\n+   = note: required by `from_residual`\n \n-error[E0277]: the `?` operator can only be used in a method that returns `Result` or `Option` (or another type that implements `Try`)\n-  --> $DIR/try-on-option-diagnostics.rs:26:13\n+error[E0277]: the `?` operator can only be used in a method that returns `Result` or `Option` (or another type that implements `FromResidual`)\n+  --> $DIR/try-on-option-diagnostics.rs:26:14\n    |\n LL | /         fn a_method() {\n LL | |             let x: Option<u32> = None;\n LL | |             x?;\n-   | |             ^^ cannot use the `?` operator in a method that returns `()`\n+   | |              ^ cannot use the `?` operator in a method that returns `()`\n LL | |         }\n    | |_________- this function should return `Result` or `Option` to accept `?`\n    |\n-   = help: the trait `Try` is not implemented for `()`\n-   = note: required by `from_error`\n+   = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `()`\n+   = note: required by `from_residual`\n \n-error[E0277]: the `?` operator can only be used in a trait method that returns `Result` or `Option` (or another type that implements `Try`)\n-  --> $DIR/try-on-option-diagnostics.rs:39:13\n+error[E0277]: the `?` operator can only be used in a trait method that returns `Result` or `Option` (or another type that implements `FromResidual`)\n+  --> $DIR/try-on-option-diagnostics.rs:39:14\n    |\n LL | /         fn a_trait_method() {\n LL | |             let x: Option<u32> = None;\n LL | |             x?;\n-   | |             ^^ cannot use the `?` operator in a trait method that returns `()`\n+   | |              ^ cannot use the `?` operator in a trait method that returns `()`\n LL | |         }\n    | |_________- this function should return `Result` or `Option` to accept `?`\n    |\n-   = help: the trait `Try` is not implemented for `()`\n-   = note: required by `from_error`\n+   = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `()`\n+   = note: required by `from_residual`\n \n error: aborting due to 4 previous errors\n ", "previous_filename": "src/test/ui/try-on-option-diagnostics.stderr"}, {"sha": "f2012936a1174394daaf77eabbcbb32650895b1e", "filename": "src/test/ui/try-trait/try-on-option.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -4,7 +4,7 @@ fn main() {}\n \n fn foo() -> Result<u32, ()> {\n     let x: Option<u32> = None;\n-    x?; //~ ERROR `?` couldn't convert the error\n+    x?; //~ ERROR the `?` operator\n     Ok(22)\n }\n ", "previous_filename": "src/test/ui/try-on-option.rs"}, {"sha": "604baa8550b45837b07679775fd87f4b24040ea5", "filename": "src/test/ui/try-trait/try-on-option.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.stderr?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -0,0 +1,31 @@\n+error[E0277]: the `?` operator can only be used on `Result`s, not `Option`s, in a function that returns `Result`\n+  --> $DIR/try-on-option.rs:7:6\n+   |\n+LL | / fn foo() -> Result<u32, ()> {\n+LL | |     let x: Option<u32> = None;\n+LL | |     x?;\n+   | |      ^ use `.ok_or(...)?` to provide an error compatible with `Result<u32, ()>`\n+LL | |     Ok(22)\n+LL | | }\n+   | |_- this function returns a `Result`\n+   |\n+   = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `Result<u32, ()>`\n+   = note: required by `from_residual`\n+\n+error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n+  --> $DIR/try-on-option.rs:13:6\n+   |\n+LL | / fn bar() -> u32 {\n+LL | |     let x: Option<u32> = None;\n+LL | |     x?;\n+   | |      ^ cannot use the `?` operator in a function that returns `u32`\n+LL | |     22\n+LL | | }\n+   | |_- this function should return `Result` or `Option` to accept `?`\n+   |\n+   = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `u32`\n+   = note: required by `from_residual`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "45636a7fceddf427fc38d322e9a29a5e4988d1c3", "filename": "src/test/ui/try-trait/try-operator-custom.rs", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-custom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-custom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-custom.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -0,0 +1,91 @@\n+// run-pass\n+\n+#![feature(control_flow_enum)]\n+#![feature(try_trait_v2)]\n+\n+use std::ops::{ControlFlow, FromResidual, Try};\n+\n+enum MyResult<T, U> {\n+    Awesome(T),\n+    Terrible(U)\n+}\n+\n+enum Never {}\n+\n+impl<U, V> Try for MyResult<U, V> {\n+    type Output = U;\n+    type Residual = MyResult<Never, V>;\n+\n+    fn from_output(u: U) -> MyResult<U, V> {\n+        MyResult::Awesome(u)\n+    }\n+\n+    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {\n+        match self {\n+            MyResult::Awesome(u) => ControlFlow::Continue(u),\n+            MyResult::Terrible(e) => ControlFlow::Break(MyResult::Terrible(e)),\n+        }\n+    }\n+}\n+\n+impl<U, V, W> FromResidual<MyResult<Never, V>> for MyResult<U, W> where V: Into<W> {\n+    fn from_residual(x: MyResult<Never, V>) -> Self {\n+        match x {\n+            MyResult::Awesome(u) => match u {},\n+            MyResult::Terrible(e) => MyResult::Terrible(e.into()),\n+        }\n+    }\n+}\n+\n+type ResultResidual<E> = Result<std::convert::Infallible, E>;\n+\n+impl<U, V, W> FromResidual<ResultResidual<V>> for MyResult<U, W> where V: Into<W> {\n+    fn from_residual(x: ResultResidual<V>) -> Self {\n+        match x {\n+            Ok(v) => match v {}\n+            Err(e) => MyResult::Terrible(e.into()),\n+        }\n+    }\n+}\n+\n+impl<U, V, W> FromResidual<MyResult<Never, V>> for Result<U, W> where V: Into<W> {\n+    fn from_residual(x: MyResult<Never, V>) -> Self {\n+        match x {\n+            MyResult::Awesome(u) => match u {},\n+            MyResult::Terrible(e) => Err(e.into()),\n+        }\n+    }\n+}\n+\n+fn f(x: i32) -> Result<i32, String> {\n+    if x == 0 {\n+        Ok(42)\n+    } else {\n+        let y = g(x)?;\n+        Ok(y)\n+    }\n+}\n+\n+fn g(x: i32) -> MyResult<i32, String> {\n+    let _y = f(x - 1)?;\n+    MyResult::Terrible(\"Hello\".to_owned())\n+}\n+\n+fn h() -> MyResult<i32, String> {\n+    let a: Result<i32, &'static str> = Err(\"Hello\");\n+    let b = a?;\n+    MyResult::Awesome(b)\n+}\n+\n+fn i() -> MyResult<i32, String> {\n+    let a: MyResult<i32, &'static str> = MyResult::Terrible(\"Hello\");\n+    let b = a?;\n+    MyResult::Awesome(b)\n+}\n+\n+fn main() {\n+    assert!(f(0) == Ok(42));\n+    assert!(f(10) == Err(\"Hello\".to_owned()));\n+    let _ = h();\n+    let _ = i();\n+}"}, {"sha": "3b364f7e7d39d47560fe684f61be33a78ef00cdd", "filename": "src/test/ui/try-trait/try-operator-on-main.rs", "status": "renamed", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-on-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-on-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-on-main.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -1,4 +1,4 @@\n-#![feature(try_trait)]\n+#![feature(try_trait_v2)]\n \n use std::ops::Try;\n \n@@ -7,14 +7,13 @@ fn main() {\n     std::fs::File::open(\"foo\")?; //~ ERROR the `?` operator can only\n \n     // a non-`Try` type on a non-`Try` fn\n-    ()?; //~ ERROR the `?` operator can only\n+    ()?; //~ ERROR the `?` operator can only be applied to\n+    //~^ ERROR the `?` operator can only be used in a function that\n \n     // an unrelated use of `Try`\n     try_trait_generic::<()>(); //~ ERROR the trait bound\n }\n \n-\n-\n fn try_trait_generic<T: Try>() -> T {\n     // and a non-`Try` object on a `Try` fn.\n     ()?; //~ ERROR the `?` operator can only be applied to values that implement `Try`", "previous_filename": "src/test/ui/try-operator-on-main.rs"}, {"sha": "7d42c2e4d10d367cdb4938a7493740ff74f039df", "filename": "src/test/ui/try-trait/try-operator-on-main.stderr", "status": "renamed", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-on-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-on-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-on-main.stderr?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -1,18 +1,18 @@\n-error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `Try`)\n-  --> $DIR/try-operator-on-main.rs:7:5\n+error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n+  --> $DIR/try-operator-on-main.rs:7:31\n    |\n LL | / fn main() {\n LL | |     // error for a `Try` type on a non-`Try` fn\n LL | |     std::fs::File::open(\"foo\")?;\n-   | |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n+   | |                               ^ cannot use the `?` operator in a function that returns `()`\n LL | |\n ...  |\n LL | |     try_trait_generic::<()>();\n LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n-   = help: the trait `Try` is not implemented for `()`\n-   = note: required by `from_error`\n+   = help: the trait `FromResidual<Result<Infallible, std::io::Error>>` is not implemented for `()`\n+   = note: required by `from_residual`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n   --> $DIR/try-operator-on-main.rs:10:5\n@@ -21,10 +21,28 @@ LL |     ()?;\n    |     ^^^ the `?` operator cannot be applied to type `()`\n    |\n    = help: the trait `Try` is not implemented for `()`\n-   = note: required by `into_result`\n+   = note: required by `branch`\n+\n+error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n+  --> $DIR/try-operator-on-main.rs:10:7\n+   |\n+LL | / fn main() {\n+LL | |     // error for a `Try` type on a non-`Try` fn\n+LL | |     std::fs::File::open(\"foo\")?;\n+LL | |\n+LL | |     // a non-`Try` type on a non-`Try` fn\n+LL | |     ()?;\n+   | |       ^ cannot use the `?` operator in a function that returns `()`\n+...  |\n+LL | |     try_trait_generic::<()>();\n+LL | | }\n+   | |_- this function should return `Result` or `Option` to accept `?`\n+   |\n+   = help: the trait `FromResidual<_>` is not implemented for `()`\n+   = note: required by `from_residual`\n \n error[E0277]: the trait bound `(): Try` is not satisfied\n-  --> $DIR/try-operator-on-main.rs:13:25\n+  --> $DIR/try-operator-on-main.rs:14:25\n    |\n LL |     try_trait_generic::<()>();\n    |                         ^^ the trait `Try` is not implemented for `()`\n@@ -33,14 +51,14 @@ LL | fn try_trait_generic<T: Try>() -> T {\n    |                         --- required by this bound in `try_trait_generic`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/try-operator-on-main.rs:20:5\n+  --> $DIR/try-operator-on-main.rs:19:5\n    |\n LL |     ()?;\n    |     ^^^ the `?` operator cannot be applied to type `()`\n    |\n    = help: the trait `Try` is not implemented for `()`\n-   = note: required by `into_result`\n+   = note: required by `branch`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0277`.", "previous_filename": "src/test/ui/try-operator-on-main.stderr"}, {"sha": "d42e51c7405ba327db90733b23e455f2dc0a632f", "filename": "src/test/ui/try-trait/try-poll.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-trait%2Ftry-poll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftest%2Fui%2Ftry-trait%2Ftry-poll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-poll.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "previous_filename": "src/test/ui/try-poll.rs"}, {"sha": "d8417c7dc70d80a09ff72ec86258b13c430dab48", "filename": "src/tools/clippy/clippy_lints/src/needless_question_mark.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_question_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_question_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_question_mark.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -147,7 +147,7 @@ fn is_some_or_ok_call<'a>(cx: &'a LateContext<'_>, expr: &'a Expr<'_>) -> Option\n         if let ExprKind::Call(called, args) = &inner_expr_with_q.kind;\n         if args.len() == 1;\n \n-        if let ExprKind::Path(QPath::LangItem(LangItem::TryIntoResult, _)) = &called.kind;\n+        if let ExprKind::Path(QPath::LangItem(LangItem::TryTraitBranch, _)) = &called.kind;\n         then {\n             // Extract inner expr type from match argument generated by\n             // question mark operator"}, {"sha": "f2ba2b2ecf63976a7781f118cdf8ecd7566c1e4b", "filename": "src/tools/clippy/clippy_lints/src/try_err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftry_err.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -64,7 +64,7 @@ impl<'tcx> LateLintPass<'tcx> for TryErr {\n             if let ExprKind::Match(match_arg, _, MatchSource::TryDesugar) = expr.kind;\n             if let ExprKind::Call(match_fun, try_args) = match_arg.kind;\n             if let ExprKind::Path(ref match_fun_path) = match_fun.kind;\n-            if matches!(match_fun_path, QPath::LangItem(LangItem::TryIntoResult, _));\n+            if matches!(match_fun_path, QPath::LangItem(LangItem::TryTraitBranch, _));\n             if let Some(try_arg) = try_args.get(0);\n             if let ExprKind::Call(err_fun, err_args) = try_arg.kind;\n             if let Some(err_arg) = err_args.get(0);"}, {"sha": "c27a6d4e347b5893f6c7f2b6b07ca3e6a51a0c47", "filename": "src/tools/clippy/clippy_lints/src/unused_io_amount.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3e6db011c5b482d2bef8ba02274657f93b5e0d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_io_amount.rs?ref=4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "patch": "@@ -45,7 +45,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedIoAmount {\n                 if let hir::ExprKind::Call(func, args) = res.kind {\n                     if matches!(\n                         func.kind,\n-                        hir::ExprKind::Path(hir::QPath::LangItem(hir::LangItem::TryIntoResult, _))\n+                        hir::ExprKind::Path(hir::QPath::LangItem(hir::LangItem::TryTraitBranch, _))\n                     ) {\n                         check_map_error(cx, &args[0], expr);\n                     }"}]}