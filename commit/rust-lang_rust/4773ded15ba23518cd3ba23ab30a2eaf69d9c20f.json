{"sha": "4773ded15ba23518cd3ba23ab30a2eaf69d9c20f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NzNkZWQxNWJhMjM1MThjZDNiYTIzYWIzMGEyZWFmNjlkOWMyMGY=", "commit": {"author": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-10-29T03:02:41Z"}, "committer": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-12-06T05:02:56Z"}, "message": "Generate &core::panic::Location type in a single place.", "tree": {"sha": "9d77582a5a5e612a53e08f21506edbbeebfb75b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d77582a5a5e612a53e08f21506edbbeebfb75b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4773ded15ba23518cd3ba23ab30a2eaf69d9c20f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4773ded15ba23518cd3ba23ab30a2eaf69d9c20f", "html_url": "https://github.com/rust-lang/rust/commit/4773ded15ba23518cd3ba23ab30a2eaf69d9c20f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4773ded15ba23518cd3ba23ab30a2eaf69d9c20f/comments", "author": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1d942b371278aaca8897050645ac5351735bbb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1d942b371278aaca8897050645ac5351735bbb7", "html_url": "https://github.com/rust-lang/rust/commit/f1d942b371278aaca8897050645ac5351735bbb7"}], "stats": {"total": 28, "additions": 12, "deletions": 16}, "files": [{"sha": "bf6c10dd3c9560d97562e55a8bb1fe0d45a29826", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4773ded15ba23518cd3ba23ab30a2eaf69d9c20f/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4773ded15ba23518cd3ba23ab30a2eaf69d9c20f/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=4773ded15ba23518cd3ba23ab30a2eaf69d9c20f", "patch": "@@ -8,6 +8,7 @@ use crate::session::Session;\n use crate::session::config::{BorrowckMode, OutputFilenames};\n use crate::session::config::CrateType;\n use crate::middle;\n+use crate::middle::lang_items::PanicLocationLangItem;\n use crate::hir::{self, TraitCandidate, HirId, ItemKind, ItemLocalId, Node};\n use crate::hir::def::{Res, DefKind, Export};\n use crate::hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE};\n@@ -1588,6 +1589,15 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn has_strict_asm_symbol_naming(&self) -> bool {\n         self.sess.target.target.arch.contains(\"nvptx\")\n     }\n+\n+    /// Returns `&'static core::panic::Location<'static>`.\n+    pub fn caller_location_ty(&self) -> Ty<'tcx> {\n+        self.mk_imm_ref(\n+            self.lifetimes.re_static,\n+            self.type_of(self.require_lang_item(PanicLocationLangItem, None))\n+                .subst(*self, self.mk_substs([self.lifetimes.re_static.into()].iter())),\n+        )\n+    }\n }\n \n impl<'tcx> GlobalCtxt<'tcx> {"}, {"sha": "b6a2cc0a9ff512bc3ab007047ce7123c132238e2", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4773ded15ba23518cd3ba23ab30a2eaf69d9c20f/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4773ded15ba23518cd3ba23ab30a2eaf69d9c20f/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=4773ded15ba23518cd3ba23ab30a2eaf69d9c20f", "patch": "@@ -9,7 +9,6 @@ use std::convert::TryInto;\n \n use rustc::hir::def::DefKind;\n use rustc::hir::def_id::DefId;\n-use rustc::middle::lang_items::PanicLocationLangItem;\n use rustc::mir::interpret::{ConstEvalErr, ErrorHandled, ScalarMaybeUndef};\n use rustc::mir;\n use rustc::ty::{self, Ty, TyCtxt, subst::Subst};\n@@ -559,11 +558,7 @@ pub fn const_caller_location<'tcx>(\n     trace!(\"const_caller_location: {}:{}:{}\", file, line, col);\n     let mut ecx = mk_eval_cx(tcx, DUMMY_SP, ty::ParamEnv::reveal_all());\n \n-    let loc_ty = tcx.mk_imm_ref(\n-        tcx.lifetimes.re_static,\n-        tcx.type_of(tcx.require_lang_item(PanicLocationLangItem, None))\n-            .subst(tcx, tcx.mk_substs([tcx.lifetimes.re_static.into()].iter())),\n-    );\n+    let loc_ty = tcx.caller_location_ty();\n     let loc_place = ecx.alloc_caller_location(file, line, col);\n     intern_const_alloc_recursive(&mut ecx, None, loc_place).unwrap();\n     let loc_const = ty::Const {"}, {"sha": "2e19ee653c39fef151cd5100fc7c696dbda1fe01", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4773ded15ba23518cd3ba23ab30a2eaf69d9c20f/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4773ded15ba23518cd3ba23ab30a2eaf69d9c20f/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=4773ded15ba23518cd3ba23ab30a2eaf69d9c20f", "patch": "@@ -1,7 +1,6 @@\n //! Type-checking for the rust-intrinsic and platform-intrinsic\n //! intrinsics that the compiler exposes.\n \n-use rustc::middle::lang_items::PanicLocationLangItem;\n use rustc::traits::{ObligationCause, ObligationCauseCode};\n use rustc::ty::{self, TyCtxt, Ty};\n use rustc::ty::subst::Subst;\n@@ -148,15 +147,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem) {\n                  ], tcx.types.usize)\n             }\n             \"rustc_peek\" => (1, vec![param(0)], param(0)),\n-            \"caller_location\" => (\n-                0,\n-                vec![],\n-                tcx.mk_imm_ref(\n-                    tcx.lifetimes.re_static,\n-                    tcx.type_of(tcx.require_lang_item(PanicLocationLangItem, None))\n-                        .subst(tcx, tcx.mk_substs([tcx.lifetimes.re_static.into()].iter())),\n-                ),\n-            ),\n+            \"caller_location\" => (0, vec![], tcx.caller_location_ty()),\n             \"panic_if_uninhabited\" => (1, Vec::new(), tcx.mk_unit()),\n             \"init\" => (1, Vec::new(), param(0)),\n             \"uninit\" => (1, Vec::new(), param(0)),"}]}