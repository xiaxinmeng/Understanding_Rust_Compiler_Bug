{"sha": "813d76d948cbaa8ae23fc645e1f4f02438d2ed9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxM2Q3NmQ5NDhjYmFhOGFlMjNmYzY0NWUxZjRmMDI0MzhkMmVkOWU=", "commit": {"author": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2020-03-27T11:07:21Z"}, "committer": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2020-03-27T11:07:21Z"}, "message": "follow-up to reviews", "tree": {"sha": "1e17358b38a53b5a91caba8a38ab70172359e5fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e17358b38a53b5a91caba8a38ab70172359e5fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/813d76d948cbaa8ae23fc645e1f4f02438d2ed9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/813d76d948cbaa8ae23fc645e1f4f02438d2ed9e", "html_url": "https://github.com/rust-lang/rust/commit/813d76d948cbaa8ae23fc645e1f4f02438d2ed9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/813d76d948cbaa8ae23fc645e1f4f02438d2ed9e/comments", "author": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "160ebaa364bb1c7c93885765d398dcecda857664", "url": "https://api.github.com/repos/rust-lang/rust/commits/160ebaa364bb1c7c93885765d398dcecda857664", "html_url": "https://github.com/rust-lang/rust/commit/160ebaa364bb1c7c93885765d398dcecda857664"}], "stats": {"total": 40, "additions": 7, "deletions": 33}, "files": [{"sha": "3e89fdf6f3cce652cf756dd015d4b2cfd3fcd33d", "filename": "src/helpers.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/813d76d948cbaa8ae23fc645e1f4f02438d2ed9e/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/813d76d948cbaa8ae23fc645e1f4f02438d2ed9e/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=813d76d948cbaa8ae23fc645e1f4f02438d2ed9e", "patch": "@@ -588,21 +588,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok((true, string_length))\n     }\n \n-    /// Dispatches to appropriate implementations for allocating & writing OsString in Memory,\n-    /// depending on the interpretation target.\n-    fn alloc_os_str_as_target_str(\n-        &mut self,\n-        os_str: &OsStr,\n-        memkind: MemoryKind<MiriMemoryKind>,\n-    ) -> InterpResult<'tcx, Pointer<Tag>> {\n-        let target_os = self.eval_context_ref().tcx.sess.target.target.target_os.as_str();\n-        match target_os {\n-            \"linux\" | \"macos\" => Ok(self.alloc_os_str_as_c_str(os_str, memkind)),\n-            \"windows\" => Ok(self.alloc_os_str_as_wide_str(os_str, memkind)),\n-            unsupported => throw_unsup_format!(\"OsString support for target OS `{}` not yet available\", unsupported),\n-        }\n-    }\n-\n     /// Allocate enough memory to store the given `OsStr` as a null-terminated sequence of bytes.\n     fn alloc_os_str_as_c_str(\n         &mut self,"}, {"sha": "7c126140491f3a3ce0762d783059784527bdb0dc", "filename": "src/shims/env.rs", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/813d76d948cbaa8ae23fc645e1f4f02438d2ed9e/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/813d76d948cbaa8ae23fc645e1f4f02438d2ed9e/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=813d76d948cbaa8ae23fc645e1f4f02438d2ed9e", "patch": "@@ -23,17 +23,17 @@ pub struct EnvVars<'tcx> {\n impl<'tcx> EnvVars<'tcx> {\n     pub(crate) fn init<'mir>(\n         ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n-        mut excluded_env_vars: Vec<String>,\n+        excluded_env_vars: Vec<String>,\n     ) -> InterpResult<'tcx> {\n-        if ecx.tcx.sess.target.target.target_os == \"windows\" {\n-            // Exclude `TERM` var to avoid terminfo trying to open the termcap file.\n-            excluded_env_vars.push(\"TERM\".to_owned());\n-        }\n         if ecx.machine.communicate {\n+            let target_os = ecx.tcx.sess.target.target.target_os.as_str();\n             for (name, value) in env::vars() {\n                 if !excluded_env_vars.contains(&name) {\n-                    let var_ptr =\n-                        alloc_env_var_as_target_str(name.as_ref(), value.as_ref(), ecx)?;\n+                    let var_ptr = match target_os {\n+                        \"linux\" | \"macos\" => alloc_env_var_as_c_str(name.as_ref(), value.as_ref(), ecx)?,\n+                        \"windows\" => alloc_env_var_as_wide_str(name.as_ref(), value.as_ref(), ecx)?,\n+                        unsupported => throw_unsup_format!(\"OsString support for target OS `{}` not yet available\", unsupported),\n+                    };\n                     ecx.machine.env_vars.map.insert(OsString::from(name), var_ptr);\n                 }\n             }\n@@ -42,17 +42,6 @@ impl<'tcx> EnvVars<'tcx> {\n     }\n }\n \n-fn alloc_env_var_as_target_str<'mir, 'tcx>(\n-    name: &OsStr,\n-    value: &OsStr,\n-    ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n-) -> InterpResult<'tcx, Pointer<Tag>> {\n-    let mut name_osstring = name.to_os_string();\n-    name_osstring.push(\"=\");\n-    name_osstring.push(value);\n-    Ok(ecx.alloc_os_str_as_target_str(name_osstring.as_os_str(), MiriMemoryKind::Machine.into())?)\n-}\n-\n fn alloc_env_var_as_c_str<'mir, 'tcx>(\n     name: &OsStr,\n     value: &OsStr,"}]}