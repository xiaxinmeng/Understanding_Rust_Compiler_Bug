{"sha": "b39e915981a59fed6fba7bee727e603ddc1be4c4", "node_id": "C_kwDOAAsO6NoAKGIzOWU5MTU5ODFhNTlmZWQ2ZmJhN2JlZTcyN2U2MDNkZGMxYmU0YzQ", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2021-10-04T09:50:10Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2021-10-04T09:50:10Z"}, "message": "polymorphize: don't normalize self-ty need substs\n\n`characteristic_def_id_of_type` was being invoked during partitioning\nfor self types of impl blocks which had projections that depended on the\nvalue of unused generic parameters of a function, resulting in an ICE in\nthe 'generic-names' debuginfo test. If partitioning is enabled and the\ninstance needs substitution then this is now skipped.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "f5b865a079e0a8803880dd8522d14b354aa5bc57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5b865a079e0a8803880dd8522d14b354aa5bc57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b39e915981a59fed6fba7bee727e603ddc1be4c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b39e915981a59fed6fba7bee727e603ddc1be4c4", "html_url": "https://github.com/rust-lang/rust/commit/b39e915981a59fed6fba7bee727e603ddc1be4c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b39e915981a59fed6fba7bee727e603ddc1be4c4/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76b05531cab9bc24a54791b46b5bb9a7c3dcdd7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/76b05531cab9bc24a54791b46b5bb9a7c3dcdd7c", "html_url": "https://github.com/rust-lang/rust/commit/76b05531cab9bc24a54791b46b5bb9a7c3dcdd7c"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "be6820822586d82dc04be49b08c09ce80edbc7ea", "filename": "compiler/rustc_monomorphize/src/partitioning/default.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b39e915981a59fed6fba7bee727e603ddc1be4c4/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b39e915981a59fed6fba7bee727e603ddc1be4c4/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs?ref=b39e915981a59fed6fba7bee727e603ddc1be4c4", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::middle::exported_symbols::SymbolExportLevel;\n use rustc_middle::mir::mono::{CodegenUnit, CodegenUnitNameBuilder, Linkage, Visibility};\n use rustc_middle::mir::mono::{InstantiationMode, MonoItem};\n use rustc_middle::ty::print::characteristic_def_id_of_type;\n-use rustc_middle::ty::{self, DefIdTree, InstanceDef, TyCtxt};\n+use rustc_middle::ty::{self, fold::TypeFoldable, DefIdTree, InstanceDef, TyCtxt};\n use rustc_span::symbol::Symbol;\n \n use super::PartitioningCx;\n@@ -300,14 +300,21 @@ fn characteristic_def_id_of_mono_item<'tcx>(\n                     // call it.\n                     return None;\n                 }\n-                // This is a method within an impl, find out what the self-type is:\n-                let impl_self_ty = tcx.subst_and_normalize_erasing_regions(\n-                    instance.substs,\n-                    ty::ParamEnv::reveal_all(),\n-                    tcx.type_of(impl_def_id),\n-                );\n-                if let Some(def_id) = characteristic_def_id_of_type(impl_self_ty) {\n-                    return Some(def_id);\n+\n+                // When polymorphization is enabled, methods which do not depend on their generic\n+                // parameters, but the self-type of their impl block do will fail to normalize.\n+                if !tcx.sess.opts.debugging_opts.polymorphize\n+                    || !instance.definitely_needs_subst(tcx)\n+                {\n+                    // This is a method within an impl, find out what the self-type is:\n+                    let impl_self_ty = tcx.subst_and_normalize_erasing_regions(\n+                        instance.substs,\n+                        ty::ParamEnv::reveal_all(),\n+                        tcx.type_of(impl_def_id),\n+                    );\n+                    if let Some(def_id) = characteristic_def_id_of_type(impl_self_ty) {\n+                        return Some(def_id);\n+                    }\n                 }\n             }\n "}]}