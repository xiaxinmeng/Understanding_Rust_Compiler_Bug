{"sha": "d107e586eaec04cf2a5d3b08cc49a6bdd14990cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMDdlNTg2ZWFlYzA0Y2YyYTVkM2IwOGNjNDlhNmJkZDE0OTkwY2Q=", "commit": {"author": {"name": "Jesse Jones", "email": "jesse9jones@gmail.com", "date": "2012-11-18T19:00:39Z"}, "committer": {"name": "Jesse Jones", "email": "jesse9jones@gmail.com", "date": "2012-11-18T19:00:39Z"}, "message": "Documented fmt! expression syntax.\n\nCloses #3280", "tree": {"sha": "27c7febb00489b581bc3d0e6c7503b5772bc42b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27c7febb00489b581bc3d0e6c7503b5772bc42b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d107e586eaec04cf2a5d3b08cc49a6bdd14990cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d107e586eaec04cf2a5d3b08cc49a6bdd14990cd", "html_url": "https://github.com/rust-lang/rust/commit/d107e586eaec04cf2a5d3b08cc49a6bdd14990cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d107e586eaec04cf2a5d3b08cc49a6bdd14990cd/comments", "author": {"login": "jesse99", "id": 425055, "node_id": "MDQ6VXNlcjQyNTA1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/425055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jesse99", "html_url": "https://github.com/jesse99", "followers_url": "https://api.github.com/users/jesse99/followers", "following_url": "https://api.github.com/users/jesse99/following{/other_user}", "gists_url": "https://api.github.com/users/jesse99/gists{/gist_id}", "starred_url": "https://api.github.com/users/jesse99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jesse99/subscriptions", "organizations_url": "https://api.github.com/users/jesse99/orgs", "repos_url": "https://api.github.com/users/jesse99/repos", "events_url": "https://api.github.com/users/jesse99/events{/privacy}", "received_events_url": "https://api.github.com/users/jesse99/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jesse99", "id": 425055, "node_id": "MDQ6VXNlcjQyNTA1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/425055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jesse99", "html_url": "https://github.com/jesse99", "followers_url": "https://api.github.com/users/jesse99/followers", "following_url": "https://api.github.com/users/jesse99/following{/other_user}", "gists_url": "https://api.github.com/users/jesse99/gists{/gist_id}", "starred_url": "https://api.github.com/users/jesse99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jesse99/subscriptions", "organizations_url": "https://api.github.com/users/jesse99/orgs", "repos_url": "https://api.github.com/users/jesse99/repos", "events_url": "https://api.github.com/users/jesse99/events{/privacy}", "received_events_url": "https://api.github.com/users/jesse99/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d106ef88e6a87d726630fea997699d4255fb5ebb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d106ef88e6a87d726630fea997699d4255fb5ebb", "html_url": "https://github.com/rust-lang/rust/commit/d106ef88e6a87d726630fea997699d4255fb5ebb"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "4017dddad63acaa5c9e82f901b84367e46ce2590", "filename": "src/libcore/extfmt.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d107e586eaec04cf2a5d3b08cc49a6bdd14990cd/src%2Flibcore%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d107e586eaec04cf2a5d3b08cc49a6bdd14990cd/src%2Flibcore%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fextfmt.rs?ref=d107e586eaec04cf2a5d3b08cc49a6bdd14990cd", "patch": "@@ -1,4 +1,40 @@\n-#[doc(hidden)];\n+//! Support for fmt! expressions.\n+//!\n+//! The syntax is close to that of Posix format strings:\n+//! \n+//! ~~~~~~\n+//! Format := '%' Parameter? Flag* Width? Precision? Type\n+//! Parameter := [0-9]+ '$'\n+//! Flag := [ 0#+-]\n+//! Width := Parameter | [0-9]+\n+//! Precision := '.' [0-9]+\n+//! Type := [bcdfiostuxX?]\n+//! ~~~~~~\n+//! \n+//! * Parameter is the 1-based argument to apply the format to. Currently not implemented.\n+//! * Flag 0 causes leading zeros to be used for padding when converting numbers.\n+//! * Flag # causes the conversion to be done in an *alternative* manner. Currently not implemented.\n+//! * Flag + causes signed numbers to always be prepended with a sign character.\n+//! * Flag - left justifies the result\n+//! * Width specifies the minimum field width of the result. By default leading spaces are added.\n+//! * Precision specifies the minimum number of digits for integral types and the minimum number\n+//! of decimal places for float.\n+//! \n+//! The types currently supported are:\n+//! \n+//! * b - bool\n+//! * c - char\n+//! * d - int\n+//! * f - float\n+//! * i - int (same as d)\n+//! * o - uint as octal\n+//! * t - uint as binary\n+//! * u - uint\n+//! * x - uint as lower-case hexadecimal\n+//! * X - uint as upper-case hexadecimal\n+//! * s - str (any flavor)\n+//! * ? - arbitrary type (does not use the to_str trait)\n+\n // NB: transitionary, de-mode-ing.\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n@@ -44,6 +80,7 @@ use option::{Some, None};\n  */\n \n // Functions used by the fmt extension at compile time\n+#[doc(hidden)]\n pub mod ct {\n     pub enum Signedness { Signed, Unsigned, }\n     pub enum Caseness { CaseUpper, CaseLower, }\n@@ -277,6 +314,7 @@ pub mod ct {\n // decisions made a runtime. If it proves worthwhile then some of these\n // conditions can be evaluated at compile-time. For now though it's cleaner to\n // implement it 0this way, I think.\n+#[doc(hidden)]\n pub mod rt {\n     pub const flag_none : u32 = 0u32;\n     pub const flag_left_justify   : u32 = 0b00000000000001u32;\n@@ -464,6 +502,7 @@ pub mod rt {\n     }\n }\n \n+// Bulk of the tests are in src/test/run-pass/syntax-extension-fmt.rs\n #[cfg(test)]\n mod test {\n     #[test]"}]}