{"sha": "565c39de439f59e83efe2f0064c0dbebb287c8e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NWMzOWRlNDM5ZjU5ZTgzZWZlMmYwMDY0YzBkYmViYjI4N2M4ZTk=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2019-01-09T21:57:49Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2019-01-09T21:59:12Z"}, "message": "provide suggestion for invalid boolean cast\n\nAlso, don't suggest comparing to zero for non-numeric expressions.", "tree": {"sha": "c35b6af967e03bd7b4f555d564fb8edc719b3ec5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c35b6af967e03bd7b4f555d564fb8edc719b3ec5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/565c39de439f59e83efe2f0064c0dbebb287c8e9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAlw2broWHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdBw/CACJw2dWOZd8gU07mIp3Fzm3H6e2\n/rFagmlhMu1HpIdI4VOF9y0HOQBDf1+07Z75bj1Ur9gG2VIFpjPK8S8J/sRf5eln\no3OtdZsVvPspdKYU9sz7PYnGlvgFa80m8g3gWONXO7q5VgBStPtuMO2Y9vqJRBbv\nO7Qpad5p+5IevG2J6CcIR76VjB+o2Cz1I5eVU9jw2QNoYd3bUyJLC0+n8ayjH/cW\nC72oDytp6RGoQghNHBfQvqEApJ92aSYfyeru5MXBfxTI9i4dYe21qk1stWe2NnK5\n5EkPYgLDArgJBEk8313TpW0XJCNrr3b2e+kAcvgbRraN2edCfp8RJhnpJf9K\n=/Rrk\n-----END PGP SIGNATURE-----", "payload": "tree c35b6af967e03bd7b4f555d564fb8edc719b3ec5\nparent 6ecad338381cc3b8d56e2df22e5971a598eddd6c\nauthor Andy Russell <arussell123@gmail.com> 1547071069 -0500\ncommitter Andy Russell <arussell123@gmail.com> 1547071152 -0500\n\nprovide suggestion for invalid boolean cast\n\nAlso, don't suggest comparing to zero for non-numeric expressions.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/565c39de439f59e83efe2f0064c0dbebb287c8e9", "html_url": "https://github.com/rust-lang/rust/commit/565c39de439f59e83efe2f0064c0dbebb287c8e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/565c39de439f59e83efe2f0064c0dbebb287c8e9/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ecad338381cc3b8d56e2df22e5971a598eddd6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ecad338381cc3b8d56e2df22e5971a598eddd6c", "html_url": "https://github.com/rust-lang/rust/commit/6ecad338381cc3b8d56e2df22e5971a598eddd6c"}], "stats": {"total": 71, "additions": 47, "deletions": 24}, "files": [{"sha": "220d5676ab4293661e2482991732b5d86ddd2eeb", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/565c39de439f59e83efe2f0064c0dbebb287c8e9/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565c39de439f59e83efe2f0064c0dbebb287c8e9/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=565c39de439f59e83efe2f0064c0dbebb287c8e9", "patch": "@@ -251,10 +251,28 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n                     .emit();\n             }\n             CastError::CastToBool => {\n-                struct_span_err!(fcx.tcx.sess, self.span, E0054, \"cannot cast as `bool`\")\n-                    .span_label(self.span, \"unsupported cast\")\n-                    .help(\"compare with zero instead\")\n-                    .emit();\n+                let mut err =\n+                    struct_span_err!(fcx.tcx.sess, self.span, E0054, \"cannot cast as `bool`\");\n+\n+                if self.expr_ty.is_numeric() {\n+                    match fcx.tcx.sess.source_map().span_to_snippet(self.expr.span) {\n+                        Ok(snippet) => {\n+                            err.span_suggestion_with_applicability(\n+                                self.span,\n+                                \"compare with zero instead\",\n+                                format!(\"{} != 0\", snippet),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        }\n+                        Err(_) => {\n+                            err.span_help(self.span, \"compare with zero instead\");\n+                        }\n+                    }\n+                } else {\n+                    err.span_label(self.span, \"unsupported cast\");\n+                }\n+\n+                err.emit();\n             }\n             CastError::CastToChar => {\n                 type_error_struct!(fcx.tcx.sess, self.span, self.expr_ty, E0604,"}, {"sha": "8130f4dedc9aa80c94c2d3b9f0e601c87a4fa18d", "filename": "src/test/ui/cast/cast-as-bool.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/565c39de439f59e83efe2f0064c0dbebb287c8e9/src%2Ftest%2Fui%2Fcast%2Fcast-as-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565c39de439f59e83efe2f0064c0dbebb287c8e9/src%2Ftest%2Fui%2Fcast%2Fcast-as-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-as-bool.rs?ref=565c39de439f59e83efe2f0064c0dbebb287c8e9", "patch": "@@ -1,4 +1,9 @@\n fn main() {\n-    let u = 5 as bool;\n-    //~^ ERROR cannot cast as `bool`\n+    let u = 5 as bool; //~ ERROR cannot cast as `bool`\n+                       //~| HELP compare with zero instead\n+                       //~| SUGGESTION 5 != 0\n+    let t = (1 + 2) as bool; //~ ERROR cannot cast as `bool`\n+                             //~| HELP compare with zero instead\n+                             //~| SUGGESTION (1 + 2) != 0\n+    let v = \"hello\" as bool; //~ ERROR cannot cast as `bool`\n }"}, {"sha": "6099a4195b329b9f99c03121d87616a14d2a14e7", "filename": "src/test/ui/cast/cast-as-bool.stderr", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/565c39de439f59e83efe2f0064c0dbebb287c8e9/src%2Ftest%2Fui%2Fcast%2Fcast-as-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/565c39de439f59e83efe2f0064c0dbebb287c8e9/src%2Ftest%2Fui%2Fcast%2Fcast-as-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-as-bool.stderr?ref=565c39de439f59e83efe2f0064c0dbebb287c8e9", "patch": "@@ -1,11 +1,21 @@\n error[E0054]: cannot cast as `bool`\n   --> $DIR/cast-as-bool.rs:2:13\n    |\n-LL |     let u = 5 as bool;\n-   |             ^^^^^^^^^ unsupported cast\n+LL |     let u = 5 as bool; //~ ERROR cannot cast as `bool`\n+   |             ^^^^^^^^^ help: compare with zero instead: `5 != 0`\n+\n+error[E0054]: cannot cast as `bool`\n+  --> $DIR/cast-as-bool.rs:5:13\n+   |\n+LL |     let t = (1 + 2) as bool; //~ ERROR cannot cast as `bool`\n+   |             ^^^^^^^^^^^^^^^ help: compare with zero instead: `(1 + 2) != 0`\n+\n+error[E0054]: cannot cast as `bool`\n+  --> $DIR/cast-as-bool.rs:8:13\n    |\n-   = help: compare with zero instead\n+LL |     let v = \"hello\" as bool; //~ ERROR cannot cast as `bool`\n+   |             ^^^^^^^^^^^^^^^ unsupported cast\n \n-error: aborting due to previous error\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0054`."}, {"sha": "52f6af78a9be5f00f893910254297b2bf1141ca8", "filename": "src/test/ui/cast/cast-rfc0401-2.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/565c39de439f59e83efe2f0064c0dbebb287c8e9/src%2Ftest%2Fui%2Fcast%2Fcast-rfc0401-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/565c39de439f59e83efe2f0064c0dbebb287c8e9/src%2Ftest%2Fui%2Fcast%2Fcast-rfc0401-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-rfc0401-2.stderr?ref=565c39de439f59e83efe2f0064c0dbebb287c8e9", "patch": "@@ -2,9 +2,7 @@ error[E0054]: cannot cast as `bool`\n   --> $DIR/cast-rfc0401-2.rs:6:13\n    |\n LL |     let _ = 3 as bool;\n-   |             ^^^^^^^^^ unsupported cast\n-   |\n-   = help: compare with zero instead\n+   |             ^^^^^^^^^ help: compare with zero instead: `3 != 0`\n \n error: aborting due to previous error\n "}, {"sha": "cce32fa2944077ab23431769a2bb0ded4e77c6ca", "filename": "src/test/ui/error-codes/E0054.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/565c39de439f59e83efe2f0064c0dbebb287c8e9/src%2Ftest%2Fui%2Ferror-codes%2FE0054.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/565c39de439f59e83efe2f0064c0dbebb287c8e9/src%2Ftest%2Fui%2Ferror-codes%2FE0054.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0054.stderr?ref=565c39de439f59e83efe2f0064c0dbebb287c8e9", "patch": "@@ -2,9 +2,7 @@ error[E0054]: cannot cast as `bool`\n   --> $DIR/E0054.rs:3:24\n    |\n LL |     let x_is_nonzero = x as bool; //~ ERROR E0054\n-   |                        ^^^^^^^^^ unsupported cast\n-   |\n-   = help: compare with zero instead\n+   |                        ^^^^^^^^^ help: compare with zero instead: `x != 0`\n \n error: aborting due to previous error\n "}, {"sha": "006ab434f35e3866e8050b1a670ce5e4a3f67301", "filename": "src/test/ui/error-festival.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/565c39de439f59e83efe2f0064c0dbebb287c8e9/src%2Ftest%2Fui%2Ferror-festival.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/565c39de439f59e83efe2f0064c0dbebb287c8e9/src%2Ftest%2Fui%2Ferror-festival.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-festival.stderr?ref=565c39de439f59e83efe2f0064c0dbebb287c8e9", "patch": "@@ -52,9 +52,7 @@ error[E0054]: cannot cast as `bool`\n   --> $DIR/error-festival.rs:33:24\n    |\n LL |     let x_is_nonzero = x as bool;\n-   |                        ^^^^^^^^^ unsupported cast\n-   |\n-   = help: compare with zero instead\n+   |                        ^^^^^^^^^ help: compare with zero instead: `x != 0`\n \n error[E0606]: casting `&u8` as `u32` is invalid\n   --> $DIR/error-festival.rs:37:18"}, {"sha": "10b19ff836f9c5c73133d7b47a7fede8fafea420", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/565c39de439f59e83efe2f0064c0dbebb287c8e9/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/565c39de439f59e83efe2f0064c0dbebb287c8e9/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=565c39de439f59e83efe2f0064c0dbebb287c8e9", "patch": "@@ -90,17 +90,13 @@ error[E0054]: cannot cast as `bool`\n   --> $DIR/cast-rfc0401.rs:39:13\n    |\n LL |     let _ = 3_i32 as bool; //~ ERROR cannot cast\n-   |             ^^^^^^^^^^^^^ unsupported cast\n-   |\n-   = help: compare with zero instead\n+   |             ^^^^^^^^^^^^^ help: compare with zero instead: `3_i32 != 0`\n \n error[E0054]: cannot cast as `bool`\n   --> $DIR/cast-rfc0401.rs:40:13\n    |\n LL |     let _ = E::A as bool; //~ ERROR cannot cast\n    |             ^^^^^^^^^^^^ unsupported cast\n-   |\n-   = help: compare with zero instead\n \n error[E0604]: only `u8` can be cast as `char`, not `u32`\n   --> $DIR/cast-rfc0401.rs:41:13"}]}