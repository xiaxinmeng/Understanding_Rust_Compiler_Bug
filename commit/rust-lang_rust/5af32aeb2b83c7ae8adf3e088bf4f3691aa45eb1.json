{"sha": "5af32aeb2b83c7ae8adf3e088bf4f3691aa45eb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZjMyYWViMmI4M2M3YWU4YWRmM2UwODhiZjRmMzY5MWFhNDVlYjE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-01T02:10:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-01T02:10:16Z"}, "message": "Merge #5635\n\n5635: Better JSON serialization in metrics r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "6459f29f52c140094cd1fec857ee7b76a40d6c6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6459f29f52c140094cd1fec857ee7b76a40d6c6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5af32aeb2b83c7ae8adf3e088bf4f3691aa45eb1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfJM8ICRBK7hj4Ov3rIwAAdHIIAKrsmlKdXi+BtscoXrmY6/PO\nkNSO6hbtAQxDu/fhMQ/Cb1Ncqbdp0NteQmOcME0WnIZXV21pylmkvyi9dQ8d4Kn7\nZ7oC/Svqcld9pqpUWG/FC1Q7Uzjh2htc1cNz5FiTYkNIi6ofIxGcfGdU+tF/+INv\nkdWjisRfssuHSblZZZILZRf4zUDGSdftoIF5FbKpfK4K52lqbMjlDVuVAJVEn67h\nUsLAG8g4ydgA+8xI+AzvzVlNEYSFuvblwKWwV96MOd5SvKRjt/cL/qRcyShoH5Uu\nE9M5+sPzRr7QKwelCjWwvsenOIa2ckCCG8REVAPacf8xwBrSRto2mAyG7mmsXWs=\n=+Yrr\n-----END PGP SIGNATURE-----\n", "payload": "tree 6459f29f52c140094cd1fec857ee7b76a40d6c6b\nparent 2346a28c638dc8fe945059b68126d268dd7fb690\nparent a015714defd19298632819885679fc6fdd6ea07c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1596247816 +0000\ncommitter GitHub <noreply@github.com> 1596247816 +0000\n\nMerge #5635\n\n5635: Better JSON serialization in metrics r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5af32aeb2b83c7ae8adf3e088bf4f3691aa45eb1", "html_url": "https://github.com/rust-lang/rust/commit/5af32aeb2b83c7ae8adf3e088bf4f3691aa45eb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5af32aeb2b83c7ae8adf3e088bf4f3691aa45eb1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2346a28c638dc8fe945059b68126d268dd7fb690", "url": "https://api.github.com/repos/rust-lang/rust/commits/2346a28c638dc8fe945059b68126d268dd7fb690", "html_url": "https://github.com/rust-lang/rust/commit/2346a28c638dc8fe945059b68126d268dd7fb690"}, {"sha": "a015714defd19298632819885679fc6fdd6ea07c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a015714defd19298632819885679fc6fdd6ea07c", "html_url": "https://github.com/rust-lang/rust/commit/a015714defd19298632819885679fc6fdd6ea07c"}], "stats": {"total": 140, "additions": 22, "deletions": 118}, "files": [{"sha": "c974022a2dabf17ee0f2e065321e10e693035a53", "filename": "Cargo.lock", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5af32aeb2b83c7ae8adf3e088bf4f3691aa45eb1/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5af32aeb2b83c7ae8adf3e088bf4f3691aa45eb1/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=5af32aeb2b83c7ae8adf3e088bf4f3691aa45eb1", "patch": "@@ -1831,6 +1831,12 @@ version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n \n+[[package]]\n+name = \"write-json\"\n+version = \"0.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8b3f9a784c809a99e38d2e825907617cb03bd880d5421153bc4548e9317f59d0\"\n+\n [[package]]\n name = \"ws2_32-sys\"\n version = \"0.2.1\"\n@@ -1852,4 +1858,5 @@ dependencies = [\n  \"quote\",\n  \"ungrammar\",\n  \"walkdir\",\n+ \"write-json\",\n ]"}, {"sha": "72a2ae26b84143a6e04cbb201ade244a829f2a3d", "filename": "xtask/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5af32aeb2b83c7ae8adf3e088bf4f3691aa45eb1/xtask%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5af32aeb2b83c7ae8adf3e088bf4f3691aa45eb1/xtask%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2FCargo.toml?ref=5af32aeb2b83c7ae8adf3e088bf4f3691aa45eb1", "patch": "@@ -17,3 +17,4 @@ proc-macro2 = \"1.0.8\"\n quote = \"1.0.2\"\n ungrammar = \"0.1.0\"\n walkdir = \"2.3.1\"\n+write-json =  \"0.1.0\""}, {"sha": "4bade2c7e274bfd8d14159bfc6c5af9062971206", "filename": "xtask/src/metrics.rs", "status": "modified", "additions": 14, "deletions": 118, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/5af32aeb2b83c7ae8adf3e088bf4f3691aa45eb1/xtask%2Fsrc%2Fmetrics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af32aeb2b83c7ae8adf3e088bf4f3691aa45eb1/xtask%2Fsrc%2Fmetrics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmetrics.rs?ref=5af32aeb2b83c7ae8adf3e088bf4f3691aa45eb1", "patch": "@@ -1,7 +1,6 @@\n use std::{\n     collections::BTreeMap,\n     env,\n-    fmt::{self, Write as _},\n     io::Write as _,\n     path::Path,\n     time::{Instant, SystemTime, UNIX_EPOCH},\n@@ -127,40 +126,21 @@ impl Metrics {\n         self.metrics.insert(name.into(), (value, unit));\n     }\n \n-    fn json(&self) -> Json {\n-        let mut json = Json::default();\n-        self.to_json(&mut json);\n-        json\n+    fn json(&self) -> String {\n+        let mut buf = String::new();\n+        self.to_json(write_json::object(&mut buf));\n+        buf\n     }\n-    fn to_json(&self, json: &mut Json) {\n-        json.begin_object();\n-        {\n-            json.field(\"host\");\n-            self.host.to_json(json);\n-\n-            json.field(\"timestamp\");\n-            let timestamp = self.timestamp.duration_since(UNIX_EPOCH).unwrap();\n-            json.number(timestamp.as_secs() as f64);\n \n-            json.field(\"revision\");\n-            json.string(&self.revision);\n-\n-            json.field(\"metrics\");\n-            json.begin_object();\n-            {\n-                for (k, (value, unit)) in &self.metrics {\n-                    json.field(k);\n-                    json.begin_array();\n-                    {\n-                        json.number(*value as f64);\n-                        json.string(unit);\n-                    }\n-                    json.end_array();\n-                }\n-            }\n-            json.end_object()\n+    fn to_json(&self, mut obj: write_json::Object<'_>) {\n+        self.host.to_json(obj.object(\"host\"));\n+        let timestamp = self.timestamp.duration_since(UNIX_EPOCH).unwrap();\n+        obj.number(\"timestamp\", timestamp.as_secs() as f64);\n+        obj.string(\"revision\", &self.revision);\n+        let mut metrics = obj.object(\"metrics\");\n+        for (k, (value, unit)) in &self.metrics {\n+            metrics.array(k).number(*value as f64).string(unit);\n         }\n-        json.end_object();\n     }\n }\n \n@@ -189,91 +169,7 @@ impl Host {\n             Ok(line[field.len()..].trim().to_string())\n         }\n     }\n-    fn to_json(&self, json: &mut Json) {\n-        json.begin_object();\n-        {\n-            json.field(\"os\");\n-            json.string(&self.os);\n-\n-            json.field(\"cpu\");\n-            json.string(&self.cpu);\n-\n-            json.field(\"mem\");\n-            json.string(&self.mem);\n-        }\n-        json.end_object();\n-    }\n-}\n-\n-struct State {\n-    obj: bool,\n-    first: bool,\n-}\n-\n-#[derive(Default)]\n-struct Json {\n-    stack: Vec<State>,\n-    buf: String,\n-}\n-\n-impl Json {\n-    fn begin_object(&mut self) {\n-        self.stack.push(State { obj: true, first: true });\n-        self.buf.push('{');\n-    }\n-    fn end_object(&mut self) {\n-        self.stack.pop();\n-        self.buf.push('}')\n-    }\n-    fn begin_array(&mut self) {\n-        self.stack.push(State { obj: false, first: true });\n-        self.buf.push('[');\n-    }\n-    fn end_array(&mut self) {\n-        self.stack.pop();\n-        self.buf.push(']')\n-    }\n-    fn field(&mut self, name: &str) {\n-        self.object_comma();\n-        self.string_token(name);\n-        self.buf.push(':');\n-    }\n-    fn string(&mut self, value: &str) {\n-        self.array_comma();\n-        self.string_token(value);\n-    }\n-    fn string_token(&mut self, value: &str) {\n-        self.buf.push('\"');\n-        self.buf.extend(value.escape_default());\n-        self.buf.push('\"');\n-    }\n-    fn number(&mut self, value: f64) {\n-        self.array_comma();\n-        write!(self.buf, \"{}\", value).unwrap();\n-    }\n-\n-    fn array_comma(&mut self) {\n-        let state = self.stack.last_mut().unwrap();\n-        if state.obj {\n-            return;\n-        }\n-        if !state.first {\n-            self.buf.push(',');\n-        }\n-        state.first = false;\n-    }\n-\n-    fn object_comma(&mut self) {\n-        let state = self.stack.last_mut().unwrap();\n-        if !state.first {\n-            self.buf.push(',');\n-        }\n-        state.first = false;\n-    }\n-}\n-\n-impl fmt::Display for Json {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"{}\", self.buf)\n+    fn to_json(&self, mut obj: write_json::Object<'_>) {\n+        obj.string(\"os\", &self.os).string(\"cpu\", &self.cpu).string(\"mem\", &self.mem);\n     }\n }"}]}