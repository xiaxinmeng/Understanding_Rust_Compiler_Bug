{"sha": "06110c0c466e46d48d0bf01b43cf0ad5a01391b2", "node_id": "C_kwDOAAsO6NoAKDA2MTEwYzBjNDY2ZTQ2ZDQ4ZDBiZjAxYjQzY2YwYWQ1YTAxMzkxYjI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-10-13T20:51:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-13T20:51:01Z"}, "message": "Rollup merge of #89670 - yoshuawuyts:available-parallelism-docs, r=joshtriplett\n\nImprove `std::thread::available_parallelism` docs\n\n_Tracking issue: https://github.com/rust-lang/rust/issues/74479_\n\nThis PR reworks the documentation of `std::thread::available_parallelism`, as requested [here](https://github.com/rust-lang/rust/pull/89324#issuecomment-934343254).\n\n## Changes\n\nThe following changes are made:\n\n- We've removed prior mentions of \"hardware threads\" and instead centers the docs around \"parallelism\" as a resource available to a program.\n- We now provide examples of when `available_parallelism` may return numbers that differ from the number of CPU cores in the host machine.\n- We now mention that the amount of available parallelism may change over time.\n- We make note of which platform components we don't take into account which more advanced users may want to take note of.\n- The example has been updated, which should be a bit easier to use.\n- We've added a docs alias to `num-cpus` which provides similar functionality to `available_parallelism`, and is one of the most popular crates on crates.io.\n\n---\n\nThanks!\n\nr? `@BurntSushi`", "tree": {"sha": "bb8d926d642e7221f647d23455c0994caa562fde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb8d926d642e7221f647d23455c0994caa562fde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06110c0c466e46d48d0bf01b43cf0ad5a01391b2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhZ0a1CRBK7hj4Ov3rIwAAz08IAAvUfjDXgdaALuxXPBj8vSGF\nD5VIMg3xg+bksqxlCV3WghZfme5SSgNt5crTzzoFeZ3yn1VLUgfnrvSigDeXL51n\nZdXpB1YLZ3g9MnR0y9tT6TUejWFr634ROA8TUte9pDgQ2t31S5vGqR9NzRg3yUri\nl8IMDt8qX3VBOQUZnhgVEjUbae+zb7otlXA/ck8nhS3A5zDht3N1rfB7BxRUxuwr\nfmT/CmIbDYwPDahyz8rXhccUx346yOixra/R2oB14KLp9bRl57Dh3Z0ltSIgGfy3\n0P3IJBe/5nQ1zbKCw0u+Amsk1FKyLWtjTQ2MRH/TiDvLjp/Tijc0rm3xagRUEeI=\n=EWIT\n-----END PGP SIGNATURE-----\n", "payload": "tree bb8d926d642e7221f647d23455c0994caa562fde\nparent efac68b93cfac0aa7062169f3b041661fbbdbdbd\nparent 21429eda2de59327881359b083e97f5fef58f17a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1634158261 +0200\ncommitter GitHub <noreply@github.com> 1634158261 +0200\n\nRollup merge of #89670 - yoshuawuyts:available-parallelism-docs, r=joshtriplett\n\nImprove `std::thread::available_parallelism` docs\n\n_Tracking issue: https://github.com/rust-lang/rust/issues/74479_\n\nThis PR reworks the documentation of `std::thread::available_parallelism`, as requested [here](https://github.com/rust-lang/rust/pull/89324#issuecomment-934343254).\n\n## Changes\n\nThe following changes are made:\n\n- We've removed prior mentions of \"hardware threads\" and instead centers the docs around \"parallelism\" as a resource available to a program.\n- We now provide examples of when `available_parallelism` may return numbers that differ from the number of CPU cores in the host machine.\n- We now mention that the amount of available parallelism may change over time.\n- We make note of which platform components we don't take into account which more advanced users may want to take note of.\n- The example has been updated, which should be a bit easier to use.\n- We've added a docs alias to `num-cpus` which provides similar functionality to `available_parallelism`, and is one of the most popular crates on crates.io.\n\n---\n\nThanks!\n\nr? `@BurntSushi`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06110c0c466e46d48d0bf01b43cf0ad5a01391b2", "html_url": "https://github.com/rust-lang/rust/commit/06110c0c466e46d48d0bf01b43cf0ad5a01391b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06110c0c466e46d48d0bf01b43cf0ad5a01391b2/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efac68b93cfac0aa7062169f3b041661fbbdbdbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/efac68b93cfac0aa7062169f3b041661fbbdbdbd", "html_url": "https://github.com/rust-lang/rust/commit/efac68b93cfac0aa7062169f3b041661fbbdbdbd"}, {"sha": "21429eda2de59327881359b083e97f5fef58f17a", "url": "https://api.github.com/repos/rust-lang/rust/commits/21429eda2de59327881359b083e97f5fef58f17a", "html_url": "https://github.com/rust-lang/rust/commit/21429eda2de59327881359b083e97f5fef58f17a"}], "stats": {"total": 77, "additions": 57, "deletions": 20}, "files": [{"sha": "b2aa500a0fd8fc84f4009b5d207408f486cfa086", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 57, "deletions": 20, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/06110c0c466e46d48d0bf01b43cf0ad5a01391b2/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06110c0c466e46d48d0bf01b43cf0ad5a01391b2/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=06110c0c466e46d48d0bf01b43cf0ad5a01391b2", "patch": "@@ -1428,39 +1428,76 @@ fn _assert_sync_and_send() {\n     _assert_both::<Thread>();\n }\n \n-/// Returns the number of hardware threads available to the program.\n-///\n-/// This value should be considered only a hint.\n-///\n-/// # Platform-specific behavior\n-///\n-/// If interpreted as the number of actual hardware threads, it may undercount on\n-/// Windows systems with more than 64 hardware threads. If interpreted as the\n-/// available concurrency for that process, it may overcount on Windows systems\n-/// when limited by a process wide affinity mask or job object limitations, and\n-/// it may overcount on Linux systems when limited by a process wide affinity\n-/// mask or affected by cgroups limits.\n+/// Returns an estimate of the default amount of parallelism a program should use.\n+///\n+/// Parallelism is a resource. A given machine provides a certain capacity for\n+/// parallelism, i.e., a bound on the number of computations it can perform\n+/// simultaneously. This number often corresponds to the amount of CPUs or\n+/// computer has, but it may diverge in various cases.\n+///\n+/// Host environments such as VMs or container orchestrators may want to\n+/// restrict the amount of parallelism made available to programs in them. This\n+/// is often done to limit the potential impact of (unintentionally)\n+/// resource-intensive programs on other programs running on the same machine.\n+///\n+/// # Limitations\n+///\n+/// The purpose of this API is to provide an easy and portable way to query\n+/// the default amount of parallelism the program should use. Among other things it\n+/// does not expose information on NUMA regions, does not account for\n+/// differences in (co)processor capabilities, and will not modify the program's\n+/// global state in order to more accurately query the amount of available\n+/// parallelism.\n+///\n+/// The value returned by this function should be considered a simplified\n+/// approximation of the actual amount of parallelism available at any given\n+/// time. To get a more detailed or precise overview of the amount of\n+/// parallelism available to the program, you may wish to use\n+/// platform-specific APIs as well. The following platform limitations currently\n+/// apply to `available_parallelism`:\n+///\n+/// On Windows:\n+/// - It may undercount the amount of parallelism available on systems with more\n+///   than 64 logical CPUs. However, programs typically need specific support to\n+///   take advantage of more than 64 logical CPUs, and in the absence of such\n+///   support, the number returned by this function accurately reflects the\n+///   number of logical CPUs the program can use by default.\n+/// - It may overcount the amount of parallelism available on systems limited by\n+///   process-wide affinity masks, or job object limitations.\n+///\n+/// On Linux:\n+/// - It may overcount the amount of parallelism available when limited by a\n+///   process-wide affinity mask, or when affected by cgroup limits.\n+///\n+/// On all targets:\n+/// - It may overcount the amount of parallelism available when running in a VM\n+/// with CPU usage limits (e.g. an overcommitted host).\n ///\n /// # Errors\n ///\n-/// This function will return an error in the following situations, but is not\n-/// limited to just these cases:\n+/// This function will, but is not limited to, return errors in the following\n+/// cases:\n ///\n-/// - If the number of hardware threads is not known for the target platform.\n-/// - The process lacks permissions to view the number of hardware threads\n-///   available.\n+/// - If the amount of parallelism is not known for the target platform.\n+/// - If the program lacks permission to query the amount of parallelism made\n+///   available to it.\n ///\n /// # Examples\n ///\n /// ```\n /// # #![allow(dead_code)]\n /// #![feature(available_parallelism)]\n-/// use std::thread;\n+/// use std::{io, thread};\n ///\n-/// let count = thread::available_parallelism().map(|n| n.get()).unwrap_or(1);\n+/// fn main() -> io::Result<()> {\n+///     let count = thread::available_parallelism()?.get();\n+///     assert!(count >= 1_usize);\n+///     Ok(())\n+/// }\n /// ```\n+#[doc(alias = \"available_concurrency\")] // Alias for a previous name we gave this API on unstable.\n #[doc(alias = \"hardware_concurrency\")] // Alias for C++ `std::thread::hardware_concurrency`.\n-#[doc(alias = \"available_concurrency\")] // Alias for a name we gave this API on unstable.\n+#[doc(alias = \"num_cpus\")] // Alias for a popular ecosystem crate which provides similar functionality.\n #[unstable(feature = \"available_parallelism\", issue = \"74479\")]\n pub fn available_parallelism() -> io::Result<NonZeroUsize> {\n     imp::available_parallelism()"}]}