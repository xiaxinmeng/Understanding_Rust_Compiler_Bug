{"sha": "310ee4d98c9a421487914d12474f121a75197bf2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxMGVlNGQ5OGM5YTQyMTQ4NzkxNGQxMjQ3NGYxMjFhNzUxOTdiZjI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-12T23:13:36Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-15T17:40:47Z"}, "message": "resolve: Privatize `BuildReducedGraphVisitor`", "tree": {"sha": "d568ab6310ba03ef65afb10f965197747d4f3e22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d568ab6310ba03ef65afb10f965197747d4f3e22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/310ee4d98c9a421487914d12474f121a75197bf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/310ee4d98c9a421487914d12474f121a75197bf2", "html_url": "https://github.com/rust-lang/rust/commit/310ee4d98c9a421487914d12474f121a75197bf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/310ee4d98c9a421487914d12474f121a75197bf2/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea68bc85e01c17bdef5a593188d7a185c6014302", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea68bc85e01c17bdef5a593188d7a185c6014302", "html_url": "https://github.com/rust-lang/rust/commit/ea68bc85e01c17bdef5a593188d7a185c6014302"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "d8799f8332f4214a5a03bb046b400e265b759127", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/310ee4d98c9a421487914d12474f121a75197bf2/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/310ee4d98c9a421487914d12474f121a75197bf2/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=310ee4d98c9a421487914d12474f121a75197bf2", "patch": "@@ -30,6 +30,7 @@ use syntax::attr;\n use syntax::ast::{self, Block, ForeignItem, ForeignItemKind, Item, ItemKind, NodeId};\n use syntax::ast::{MetaItemKind, StmtKind, TraitItem, TraitItemKind, Variant};\n use syntax::ext::base::{MacroKind, SyntaxExtension};\n+use syntax::ext::expand::AstFragment;\n use syntax::ext::hygiene::ExpnId;\n use syntax::feature_gate::is_builtin_attr;\n use syntax::parse::token::{self, Token};\n@@ -67,7 +68,7 @@ impl<'a> ToNameBinding<'a> for (Res, ty::Visibility, Span, ExpnId) {\n     }\n }\n \n-pub(crate) struct IsMacroExport;\n+struct IsMacroExport;\n \n impl<'a> ToNameBinding<'a> for (Res, ty::Visibility, Span, ExpnId, IsMacroExport) {\n     fn to_name_binding(self, arenas: &'a ResolverArenas<'a>) -> &'a NameBinding<'a> {\n@@ -84,7 +85,7 @@ impl<'a> ToNameBinding<'a> for (Res, ty::Visibility, Span, ExpnId, IsMacroExport\n impl<'a> Resolver<'a> {\n     /// Defines `name` in namespace `ns` of module `parent` to be `def` if it is not yet defined;\n     /// otherwise, reports an error.\n-    pub fn define<T>(&mut self, parent: Module<'a>, ident: Ident, ns: Namespace, def: T)\n+    crate fn define<T>(&mut self, parent: Module<'a>, ident: Ident, ns: Namespace, def: T)\n         where T: ToNameBinding<'a>,\n     {\n         let binding = def.to_name_binding(self.arenas);\n@@ -93,7 +94,7 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    pub fn get_module(&mut self, def_id: DefId) -> Module<'a> {\n+    crate fn get_module(&mut self, def_id: DefId) -> Module<'a> {\n         if def_id.krate == LOCAL_CRATE {\n             return self.module_map[&def_id]\n         }\n@@ -119,7 +120,7 @@ impl<'a> Resolver<'a> {\n         module\n     }\n \n-    pub fn macro_def_scope(&mut self, expn_id: ExpnId) -> Module<'a> {\n+    crate fn macro_def_scope(&mut self, expn_id: ExpnId) -> Module<'a> {\n         let def_id = match self.macro_defs.get(&expn_id) {\n             Some(def_id) => *def_id,\n             None => return self.graph_root,\n@@ -141,7 +142,7 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    crate fn get_macro_by_def_id(&mut self, def_id: DefId) -> Option<Lrc<SyntaxExtension>> {\n+    fn get_macro_by_def_id(&mut self, def_id: DefId) -> Option<Lrc<SyntaxExtension>> {\n         if let Some(ext) = self.macro_map.get(&def_id) {\n             return Some(ext.clone());\n         }\n@@ -158,7 +159,7 @@ impl<'a> Resolver<'a> {\n \n     /// Ensures that the reduced graph rooted at the given external module\n     /// is built, building it if it is not.\n-    pub fn populate_module_if_necessary(&mut self, module: Module<'a>) {\n+    crate fn populate_module_if_necessary(&mut self, module: Module<'a>) {\n         if module.populated.get() { return }\n         let def_id = module.def_id().unwrap();\n         for child in self.cstore.item_children_untracked(def_id, self.session) {\n@@ -168,11 +169,19 @@ impl<'a> Resolver<'a> {\n         }\n         module.populated.set(true)\n     }\n+\n+    crate fn build_reduced_graph(\n+        &mut self, fragment: &AstFragment, parent_scope: ParentScope<'a>\n+    ) -> LegacyScope<'a> {\n+        let mut visitor = BuildReducedGraphVisitor { r: self, parent_scope };\n+        fragment.visit_with(&mut visitor);\n+        visitor.parent_scope.legacy\n+    }\n }\n \n-pub struct BuildReducedGraphVisitor<'a, 'b> {\n-    pub r: &'b mut Resolver<'a>,\n-    pub parent_scope: ParentScope<'a>,\n+struct BuildReducedGraphVisitor<'a, 'b> {\n+    r: &'b mut Resolver<'a>,\n+    parent_scope: ParentScope<'a>,\n }\n \n impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {"}, {"sha": "861b0fd44ac41f1ae53981b523260227405aa562", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/310ee4d98c9a421487914d12474f121a75197bf2/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/310ee4d98c9a421487914d12474f121a75197bf2/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=310ee4d98c9a421487914d12474f121a75197bf2", "patch": "@@ -455,7 +455,7 @@ impl<'a> Resolver<'a> {\n                         let mut tmp_suggestions = Vec::new();\n                         add_module_candidates(prelude, &mut tmp_suggestions, filter_fn);\n                         suggestions.extend(tmp_suggestions.into_iter().filter(|s| {\n-                            use_prelude || this.is_builtin_macro(s.res.opt_def_id())\n+                            use_prelude || this.is_builtin_macro(s.res)\n                         }));\n                     }\n                 }"}, {"sha": "0cf9aa72d7834c3cbecafbd7b5b8499a62dc8f75", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/310ee4d98c9a421487914d12474f121a75197bf2/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/310ee4d98c9a421487914d12474f121a75197bf2/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=310ee4d98c9a421487914d12474f121a75197bf2", "patch": "@@ -1196,9 +1196,8 @@ impl<'a> Resolver<'a> {\n         f(self, MacroNS);\n     }\n \n-    fn is_builtin_macro(&mut self, def_id: Option<DefId>) -> bool {\n-        def_id.and_then(|def_id| self.get_macro_by_def_id(def_id))\n-              .map_or(false, |ext| ext.is_builtin)\n+    fn is_builtin_macro(&mut self, res: Res) -> bool {\n+        self.get_macro(res).map_or(false, |ext| ext.is_builtin)\n     }\n \n     fn macro_def(&self, mut ctxt: SyntaxContext) -> DefId {"}, {"sha": "0a63dd2558d35819c14344e5d0b9d187096c4b07", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/310ee4d98c9a421487914d12474f121a75197bf2/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/310ee4d98c9a421487914d12474f121a75197bf2/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=310ee4d98c9a421487914d12474f121a75197bf2", "patch": "@@ -3,7 +3,6 @@ use crate::{CrateLint, Resolver, ResolutionError, Scope, ScopeSet, ParentScope,\n use crate::{ModuleKind, NameBinding, PathResult, Segment, ToNameBinding};\n use crate::{ModuleOrUniformRoot, KNOWN_TOOLS};\n use crate::Namespace::*;\n-use crate::build_reduced_graph::BuildReducedGraphVisitor;\n use crate::resolve_imports::ImportResolver;\n use rustc::hir::def::{self, DefKind, NonMacroAttrKind};\n use rustc::hir::map::DefCollector;\n@@ -131,9 +130,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n         // We are inside the `expansion` new, but other parent scope components are still the same.\n         fragment.visit_with(&mut DefCollector::new(&mut self.definitions, expansion));\n         let parent_scope = ParentScope { expansion, ..parent_scope };\n-        let mut visitor = BuildReducedGraphVisitor { r: self, parent_scope };\n-        fragment.visit_with(&mut visitor);\n-        let output_legacy_scope = visitor.parent_scope.legacy;\n+        let output_legacy_scope = self.build_reduced_graph(fragment, parent_scope);\n         self.output_legacy_scopes.insert(expansion, output_legacy_scope);\n     }\n \n@@ -530,7 +527,7 @@ impl<'a> Resolver<'a> {\n                             false,\n                             path_span,\n                         ) {\n-                            if use_prelude || this.is_builtin_macro(binding.res().opt_def_id()) {\n+                            if use_prelude || this.is_builtin_macro(binding.res()) {\n                                 result = Ok((binding, Flags::PRELUDE | Flags::MISC_FROM_PRELUDE));\n                             }\n                         }"}]}