{"sha": "cc475f5ef2988e9db2e3ce07bd4abd4d4975f3e7", "node_id": "C_kwDOAAsO6NoAKGNjNDc1ZjVlZjI5ODhlOWRiMmUzY2UwN2JkNGFiZDRkNDk3NWYzZTc", "commit": {"author": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2022-10-02T07:44:04Z"}, "committer": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2022-10-09T09:31:09Z"}, "message": "Use BOLT in x64 dist CI to optimize LLVM", "tree": {"sha": "2df853cb704529a98049f911118c3d0a3219e6d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2df853cb704529a98049f911118c3d0a3219e6d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc475f5ef2988e9db2e3ce07bd4abd4d4975f3e7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEzFQynJm4WzBnfhz8kJzQ0mSDUWsFAmNClN0ACgkQkJzQ0mSD\nUWs4qwv/UkBrlIvfUMlDTZ8x+rO+S8EU/KYmhKGhDEqWcVpgf+VmwpjUMe8D2sxy\nNn3N5bUiIgR9S4SYnx8VccEXgWi4bD/AF3QbJO+dvPs5QTfLwDAvSFyLM/XMS7Ka\nSrycEiBKptctRI0bW7VRzTZ8fI+s6r2Ce/LaxXpxUhnGAEF3V63Vl5oACkHkZOZW\ncZ3jCBxkwOvuFmOK5jp+poI4tu8YOgPjf36X/3nwkVp1qAetCNb7KriNaW8RMAx1\nfEWp/pv90Df1jxsY+Qd3UJq3uUiNhKiDp2uiYKviDRLpQTJQqHixIfVxo35T7geO\nDLiuzdHL1E+DU+/tezdcvOuVQoGW1st7nF97AcCgG9RG+9AS9JnfKWJmRQIbPJDg\nUd5EmmFGuMm+mgXxq8dB5e6vVh62GZrbCp3X9+ZnFwlu92el2vO/4agD5bYoRJgD\naaa+71lEQQQ8z1xB9l1Tneq1KQuY2WrR7e05rFf296CHskKOjqYYyEz02MeBGGHo\nl/VGW66t\n=iwkS\n-----END PGP SIGNATURE-----", "payload": "tree 2df853cb704529a98049f911118c3d0a3219e6d6\nparent 72f4923979979abb5d6b975353e9b3053d257e60\nauthor Jakub Ber\u00e1nek <berykubik@gmail.com> 1664696644 +0200\ncommitter Jakub Ber\u00e1nek <berykubik@gmail.com> 1665307869 +0200\n\nUse BOLT in x64 dist CI to optimize LLVM\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc475f5ef2988e9db2e3ce07bd4abd4d4975f3e7", "html_url": "https://github.com/rust-lang/rust/commit/cc475f5ef2988e9db2e3ce07bd4abd4d4975f3e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc475f5ef2988e9db2e3ce07bd4abd4d4975f3e7/comments", "author": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72f4923979979abb5d6b975353e9b3053d257e60", "url": "https://api.github.com/repos/rust-lang/rust/commits/72f4923979979abb5d6b975353e9b3053d257e60", "html_url": "https://github.com/rust-lang/rust/commit/72f4923979979abb5d6b975353e9b3053d257e60"}], "stats": {"total": 165, "additions": 158, "deletions": 7}, "files": [{"sha": "ea37cd47049bfcedf454fa976b13f6537980c6e0", "filename": "src/bootstrap/bolt.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/cc475f5ef2988e9db2e3ce07bd4abd4d4975f3e7/src%2Fbootstrap%2Fbolt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc475f5ef2988e9db2e3ce07bd4abd4d4975f3e7/src%2Fbootstrap%2Fbolt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbolt.rs?ref=cc475f5ef2988e9db2e3ce07bd4abd4d4975f3e7", "patch": "@@ -0,0 +1,71 @@\n+use std::path::Path;\n+use std::process::Command;\n+\n+/// Uses the `llvm-bolt` binary to instrument the binary/library at the given `path` with BOLT.\n+/// When the instrumented artifact is executed, it will generate BOLT profiles into\n+/// `/tmp/prof.fdata.<pid>.fdata`.\n+pub fn instrument_with_bolt_inplace(path: &Path) {\n+    let dir = std::env::temp_dir();\n+    let instrumented_path = dir.join(\"instrumented.so\");\n+\n+    let status = Command::new(\"llvm-bolt\")\n+        .arg(\"-instrument\")\n+        .arg(&path)\n+        // Make sure that each process will write its profiles into a separate file\n+        .arg(\"--instrumentation-file-append-pid\")\n+        .arg(\"-o\")\n+        .arg(&instrumented_path)\n+        .status()\n+        .expect(\"Could not instrument artifact using BOLT\");\n+\n+    if !status.success() {\n+        panic!(\"Could not instrument {} with BOLT, exit code {:?}\", path.display(), status.code());\n+    }\n+\n+    std::fs::copy(&instrumented_path, path).expect(\"Cannot copy instrumented artifact\");\n+    std::fs::remove_file(instrumented_path).expect(\"Cannot delete instrumented artifact\");\n+}\n+\n+/// Uses the `llvm-bolt` binary to optimize the binary/library at the given `path` with BOLT,\n+/// using merged profiles from `profile_path`.\n+///\n+/// The recorded profiles have to be merged using the `merge-fdata` tool from LLVM and the merged\n+/// profile path should be then passed to this function.\n+pub fn optimize_library_with_bolt_inplace(path: &Path, profile_path: &Path) {\n+    let dir = std::env::temp_dir();\n+    let optimized_path = dir.join(\"optimized.so\");\n+\n+    let status = Command::new(\"llvm-bolt\")\n+        .arg(&path)\n+        .arg(\"-data\")\n+        .arg(&profile_path)\n+        .arg(\"-o\")\n+        .arg(&optimized_path)\n+        // Reorder basic blocks within functions\n+        .arg(\"-reorder-blocks=ext-tsp\")\n+        // Reorder functions within the binary\n+        .arg(\"-reorder-functions=hfsort+\")\n+        // Split function code into hot and code regions\n+        .arg(\"-split-functions=2\")\n+        // Split as many basic blocks as possible\n+        .arg(\"-split-all-cold\")\n+        // Move jump tables to a separate section\n+        .arg(\"-jump-tables=move\")\n+        // Use GNU_STACK program header for new segment (workaround for issues with strip/objcopy)\n+        .arg(\"-use-gnu-stack\")\n+        // Fold functions with identical code\n+        .arg(\"-icf=1\")\n+        // Update DWARF debug info in the final binary\n+        .arg(\"-update-debug-sections\")\n+        // Print optimization statistics\n+        .arg(\"-dyno-stats\")\n+        .status()\n+        .expect(\"Could not optimize artifact using BOLT\");\n+\n+    if !status.success() {\n+        panic!(\"Could not optimize {} with BOLT, exit code {:?}\", path.display(), status.code());\n+    }\n+\n+    std::fs::copy(&optimized_path, path).expect(\"Cannot copy optimized artifact\");\n+    std::fs::remove_file(optimized_path).expect(\"Cannot delete optimized artifact\");\n+}"}, {"sha": "e40350ac31d7193604ed95b93ee7b922f9bc6e8b", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cc475f5ef2988e9db2e3ce07bd4abd4d4975f3e7/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc475f5ef2988e9db2e3ce07bd4abd4d4975f3e7/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=cc475f5ef2988e9db2e3ce07bd4abd4d4975f3e7", "patch": "@@ -159,6 +159,8 @@ pub struct Config {\n     pub llvm_profile_use: Option<String>,\n     pub llvm_profile_generate: bool,\n     pub llvm_libunwind_default: Option<LlvmLibunwind>,\n+    pub llvm_bolt_profile_generate: bool,\n+    pub llvm_bolt_profile_use: Option<String>,\n \n     pub build: TargetSelection,\n     pub hosts: Vec<TargetSelection>,\n@@ -803,6 +805,15 @@ impl Config {\n         }\n         config.llvm_profile_use = flags.llvm_profile_use;\n         config.llvm_profile_generate = flags.llvm_profile_generate;\n+        config.llvm_bolt_profile_generate = flags.llvm_bolt_profile_generate;\n+        config.llvm_bolt_profile_use = flags.llvm_bolt_profile_use;\n+\n+        if config.llvm_bolt_profile_generate && config.llvm_bolt_profile_use.is_some() {\n+            eprintln!(\n+                \"Cannot use both `llvm_bolt_profile_generate` and `llvm_bolt_profile_use` at the same time\"\n+            );\n+            crate::detail_exit(1);\n+        }\n \n         // Infer the rest of the configuration.\n "}, {"sha": "e85582d76c9e31b10db7c4611044d6b70474edb9", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc475f5ef2988e9db2e3ce07bd4abd4d4975f3e7/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc475f5ef2988e9db2e3ce07bd4abd4d4975f3e7/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=cc475f5ef2988e9db2e3ce07bd4abd4d4975f3e7", "patch": "@@ -2157,6 +2157,10 @@ impl Step for ReproducibleArtifacts {\n             tarball.add_file(path, \".\", 0o644);\n             added_anything = true;\n         }\n+        if let Some(path) = builder.config.llvm_bolt_profile_use.as_ref() {\n+            tarball.add_file(path, \".\", 0o644);\n+            added_anything = true;\n+        }\n         if added_anything { Some(tarball.generate()) } else { None }\n     }\n }"}, {"sha": "ee341a353ac470867699aab12fdb29a06066ec64", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc475f5ef2988e9db2e3ce07bd4abd4d4975f3e7/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc475f5ef2988e9db2e3ce07bd4abd4d4975f3e7/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=cc475f5ef2988e9db2e3ce07bd4abd4d4975f3e7", "patch": "@@ -78,6 +78,8 @@ pub struct Flags {\n     //\n     // llvm_out/build/profiles/ is the location this writes to.\n     pub llvm_profile_generate: bool,\n+    pub llvm_bolt_profile_generate: bool,\n+    pub llvm_bolt_profile_use: Option<String>,\n }\n \n #[derive(Debug)]\n@@ -255,6 +257,8 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n         opts.optmulti(\"D\", \"\", \"deny certain clippy lints\", \"OPT\");\n         opts.optmulti(\"W\", \"\", \"warn about certain clippy lints\", \"OPT\");\n         opts.optmulti(\"F\", \"\", \"forbid certain clippy lints\", \"OPT\");\n+        opts.optflag(\"\", \"llvm-bolt-profile-generate\", \"generate BOLT profile for LLVM build\");\n+        opts.optopt(\"\", \"llvm-bolt-profile-use\", \"use BOLT profile for LLVM build\", \"PROFILE\");\n \n         // We can't use getopt to parse the options until we have completed specifying which\n         // options are valid, but under the current implementation, some options are conditional on\n@@ -691,6 +695,8 @@ Arguments:\n             rust_profile_generate: matches.opt_str(\"rust-profile-generate\"),\n             llvm_profile_use: matches.opt_str(\"llvm-profile-use\"),\n             llvm_profile_generate: matches.opt_present(\"llvm-profile-generate\"),\n+            llvm_bolt_profile_generate: matches.opt_present(\"llvm-bolt-profile-generate\"),\n+            llvm_bolt_profile_use: matches.opt_str(\"llvm-bolt-profile-use\"),\n         }\n     }\n }"}, {"sha": "7f749beffdebd0e7a78e84cd7e5c15c848b83dfe", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cc475f5ef2988e9db2e3ce07bd4abd4d4975f3e7/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc475f5ef2988e9db2e3ce07bd4abd4d4975f3e7/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=cc475f5ef2988e9db2e3ce07bd4abd4d4975f3e7", "patch": "@@ -122,6 +122,7 @@ use crate::util::{\n     check_run, exe, libdir, mtime, output, run, run_suppressed, try_run, try_run_suppressed, CiEnv,\n };\n \n+mod bolt;\n mod builder;\n mod cache;\n mod cc_detect;"}, {"sha": "c7cb609d3edeba32031c1d3cd90507043bf03aac", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/cc475f5ef2988e9db2e3ce07bd4abd4d4975f3e7/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc475f5ef2988e9db2e3ce07bd4abd4d4975f3e7/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=cc475f5ef2988e9db2e3ce07bd4abd4d4975f3e7", "patch": "@@ -16,6 +16,7 @@ use std::io;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n \n+use crate::bolt::{instrument_with_bolt_inplace, optimize_library_with_bolt_inplace};\n use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n use crate::config::TargetSelection;\n use crate::util::get_clang_cl_resource_dir;\n@@ -395,6 +396,12 @@ impl Step for Llvm {\n         if let Some(path) = builder.config.llvm_profile_use.as_ref() {\n             cfg.define(\"LLVM_PROFDATA_FILE\", &path);\n         }\n+        if builder.config.llvm_bolt_profile_generate\n+            || builder.config.llvm_bolt_profile_use.is_some()\n+        {\n+            // Relocations are required for BOLT to work.\n+            ldflags.push_all(\"-Wl,-q\");\n+        }\n \n         // Disable zstd to avoid a dependency on libzstd.so.\n         cfg.define(\"LLVM_ENABLE_ZSTD\", \"OFF\");\n@@ -563,12 +570,34 @@ impl Step for Llvm {\n             }\n         }\n \n+        // After LLVM is built, we modify (instrument or optimize) the libLLVM.so library file\n+        // in place. This is fine, because currently we do not support incrementally rebuilding\n+        // LLVM after a configuration change, so to rebuild it the build files have to be removed,\n+        // which will also remove these modified files.\n+        if builder.config.llvm_bolt_profile_generate {\n+            instrument_with_bolt_inplace(&get_built_llvm_lib_path(&build_llvm_config));\n+        }\n+        if let Some(path) = &builder.config.llvm_bolt_profile_use {\n+            optimize_library_with_bolt_inplace(\n+                &get_built_llvm_lib_path(&build_llvm_config),\n+                &Path::new(path),\n+            );\n+        }\n+\n         t!(stamp.write());\n \n         build_llvm_config\n     }\n }\n \n+/// Returns path to a built LLVM library (libLLVM.so).\n+/// Assumes that we have built LLVM into a single library file.\n+fn get_built_llvm_lib_path(llvm_config_path: &Path) -> PathBuf {\n+    let mut cmd = Command::new(llvm_config_path);\n+    cmd.arg(\"--libfiles\");\n+    PathBuf::from(output(&mut cmd).trim())\n+}\n+\n fn check_llvm_version(builder: &Builder<'_>, llvm_config: &Path) {\n     if !builder.config.llvm_version_check {\n         return;"}, {"sha": "9abfd4e973115be084ba60a84c4417871d9bc0cd", "filename": "src/ci/docker/host-x86_64/dist-x86_64-linux/build-clang.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc475f5ef2988e9db2e3ce07bd4abd4d4975f3e7/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2Fbuild-clang.sh", "raw_url": "https://github.com/rust-lang/rust/raw/cc475f5ef2988e9db2e3ce07bd4abd4d4975f3e7/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2Fbuild-clang.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2Fbuild-clang.sh?ref=cc475f5ef2988e9db2e3ce07bd4abd4d4975f3e7", "patch": "@@ -22,7 +22,7 @@ INC=\"/rustroot/include:/usr/include\"\n \n # We need compiler-rt for the profile runtime (used later to PGO the LLVM build)\n # but sanitizers aren't currently building. Since we don't need those, just\n-# disable them.\n+# disable them. BOLT is used for optimizing LLVM.\n hide_output \\\n     cmake ../llvm \\\n       -DCMAKE_C_COMPILER=/rustroot/bin/gcc \\\n@@ -36,7 +36,7 @@ hide_output \\\n       -DLLVM_INCLUDE_BENCHMARKS=OFF \\\n       -DLLVM_INCLUDE_TESTS=OFF \\\n       -DLLVM_INCLUDE_EXAMPLES=OFF \\\n-      -DLLVM_ENABLE_PROJECTS=\"clang;lld;compiler-rt\" \\\n+      -DLLVM_ENABLE_PROJECTS=\"clang;lld;compiler-rt;bolt\" \\\n       -DC_INCLUDE_DIRS=\"$INC\"\n \n hide_output make -j$(nproc)"}, {"sha": "cbe32920a7458cab76659a2d1de8b92048757fa5", "filename": "src/ci/pgo.sh", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/cc475f5ef2988e9db2e3ce07bd4abd4d4975f3e7/src%2Fci%2Fpgo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/cc475f5ef2988e9db2e3ce07bd4abd4d4975f3e7/src%2Fci%2Fpgo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fpgo.sh?ref=cc475f5ef2988e9db2e3ce07bd4abd4d4975f3e7", "patch": "@@ -190,11 +190,40 @@ rm -r $RUSTC_PROFILE_DIRECTORY_ROOT\n # directories ourselves.\n rm -r $BUILD_ARTIFACTS/llvm $BUILD_ARTIFACTS/lld\n \n-# This produces the actual final set of artifacts, using both the LLVM and rustc\n-# collected profiling data.\n-$@ \\\n-    --rust-profile-use=${RUSTC_PROFILE_MERGED_FILE} \\\n-    --llvm-profile-use=${LLVM_PROFILE_MERGED_FILE}\n+if isLinux; then\n+  # Gather BOLT profile (BOLT is currently only available on Linux)\n+  python3 ../x.py build --target=$PGO_HOST --host=$PGO_HOST \\\n+      --stage 2 library/std \\\n+      --llvm-profile-use=${LLVM_PROFILE_MERGED_FILE} \\\n+      --llvm-bolt-profile-generate\n+\n+  BOLT_PROFILE_MERGED_FILE=/tmp/bolt.profdata\n+\n+  # Here we're profiling Bolt.\n+  gather_profiles \"Check,Debug,Opt\" \"Full\" \\\n+  \"syn-1.0.89,serde-1.0.136,ripgrep-13.0.0,regex-1.5.5,clap-3.1.6,hyper-0.14.18\"\n+\n+  merge-fdata /tmp/prof.fdata* > ${BOLT_PROFILE_MERGED_FILE}\n+\n+  echo \"BOLT statistics\"\n+  du -sh /tmp/prof.fdata*\n+  du -sh ${BOLT_PROFILE_MERGED_FILE}\n+  echo \"Profile file count\"\n+  find /tmp/prof.fdata* -type f | wc -l\n+\n+  rm -r $BUILD_ARTIFACTS/llvm $BUILD_ARTIFACTS/lld\n+\n+  # This produces the actual final set of artifacts, using both the LLVM and rustc\n+  # collected profiling data.\n+  $@ \\\n+      --rust-profile-use=${RUSTC_PROFILE_MERGED_FILE} \\\n+      --llvm-profile-use=${LLVM_PROFILE_MERGED_FILE} \\\n+      --llvm-bolt-profile-use=${BOLT_PROFILE_MERGED_FILE}\n+else\n+  $@ \\\n+      --rust-profile-use=${RUSTC_PROFILE_MERGED_FILE} \\\n+      --llvm-profile-use=${LLVM_PROFILE_MERGED_FILE}\n+fi\n \n echo \"Rustc binary size\"\n ls -la ./build/$PGO_HOST/stage2/bin"}]}