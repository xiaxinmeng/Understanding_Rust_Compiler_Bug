{"sha": "d9f306757d3e7cdffaea26ddacaea55a837c3124", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ZjMwNjc1N2QzZTdjZGZmYWVhMjZkZGFjYWVhNTVhODM3YzMxMjQ=", "commit": {"author": {"name": "Barosl Lee", "email": "vcs@barosl.com", "date": "2014-12-13T14:22:04Z"}, "committer": {"name": "Barosl Lee", "email": "vcs@barosl.com", "date": "2014-12-19T19:54:43Z"}, "message": "Detect type inference failure when auto-dereferencing a pointer\n\ncheck::autoderef() returns a ty_err when it fails to infer the type.\nprobe::probe() should respect this failure and fail together to prevent\nfurther corruption.\n\nCall stack: check::check_method_call() -> method::lookup() ->\n            probe::probe() + confirm::confirm()\n\nFixes #19692.\nFixes #19583.\nFixes #19297.", "tree": {"sha": "17306ea086588ccbe287a40bf3f042a673dadd7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17306ea086588ccbe287a40bf3f042a673dadd7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9f306757d3e7cdffaea26ddacaea55a837c3124", "comment_count": 27, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9f306757d3e7cdffaea26ddacaea55a837c3124", "html_url": "https://github.com/rust-lang/rust/commit/d9f306757d3e7cdffaea26ddacaea55a837c3124", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9f306757d3e7cdffaea26ddacaea55a837c3124/comments", "author": {"login": "barosl", "id": 573768, "node_id": "MDQ6VXNlcjU3Mzc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/573768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barosl", "html_url": "https://github.com/barosl", "followers_url": "https://api.github.com/users/barosl/followers", "following_url": "https://api.github.com/users/barosl/following{/other_user}", "gists_url": "https://api.github.com/users/barosl/gists{/gist_id}", "starred_url": "https://api.github.com/users/barosl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barosl/subscriptions", "organizations_url": "https://api.github.com/users/barosl/orgs", "repos_url": "https://api.github.com/users/barosl/repos", "events_url": "https://api.github.com/users/barosl/events{/privacy}", "received_events_url": "https://api.github.com/users/barosl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "barosl", "id": 573768, "node_id": "MDQ6VXNlcjU3Mzc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/573768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barosl", "html_url": "https://github.com/barosl", "followers_url": "https://api.github.com/users/barosl/followers", "following_url": "https://api.github.com/users/barosl/following{/other_user}", "gists_url": "https://api.github.com/users/barosl/gists{/gist_id}", "starred_url": "https://api.github.com/users/barosl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barosl/subscriptions", "organizations_url": "https://api.github.com/users/barosl/orgs", "repos_url": "https://api.github.com/users/barosl/repos", "events_url": "https://api.github.com/users/barosl/events{/privacy}", "received_events_url": "https://api.github.com/users/barosl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95c2ed31aeb66b2662933200dbfd661a573b1f49", "url": "https://api.github.com/repos/rust-lang/rust/commits/95c2ed31aeb66b2662933200dbfd661a573b1f49", "html_url": "https://github.com/rust-lang/rust/commit/95c2ed31aeb66b2662933200dbfd661a573b1f49"}], "stats": {"total": 31, "additions": 26, "deletions": 5}, "files": [{"sha": "1217f811bc43446203dfe3988f965595a9c8c058", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d9f306757d3e7cdffaea26ddacaea55a837c3124/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9f306757d3e7cdffaea26ddacaea55a837c3124/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=d9f306757d3e7cdffaea26ddacaea55a837c3124", "patch": "@@ -124,7 +124,10 @@ pub fn probe<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     // it ride, although it's really not great, and in fact could I\n     // think cause spurious errors. Really though this part should\n     // take place in the `fcx.infcx().probe` below.\n-    let steps = create_steps(fcx, span, self_ty);\n+    let steps = match create_steps(fcx, span, self_ty) {\n+        Some(steps) => steps,\n+        None => return Err(NoMatch(Vec::new())),\n+    };\n \n     // Create a list of simplified self types, if we can.\n     let mut simplified_steps = Vec::new();\n@@ -160,7 +163,7 @@ pub fn probe<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n fn create_steps<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                           span: Span,\n                           self_ty: Ty<'tcx>)\n-                          -> Vec<CandidateStep<'tcx>> {\n+                          -> Option<Vec<CandidateStep<'tcx>>> {\n     let mut steps = Vec::new();\n \n     let (fully_dereferenced_ty, dereferences, _) =\n@@ -179,11 +182,11 @@ fn create_steps<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                 adjustment: AutoUnsizeLength(dereferences, len),\n             });\n         }\n-        _ => {\n-        }\n+        ty::ty_err => return None,\n+        _ => (),\n     }\n \n-    return steps;\n+    Some(steps)\n }\n \n impl<'a,'tcx> ProbeContext<'a,'tcx> {"}, {"sha": "4069ea6b997c4cbc93d41dcaba35653165ee0687", "filename": "src/test/compile-fail/issue-19692.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d9f306757d3e7cdffaea26ddacaea55a837c3124/src%2Ftest%2Fcompile-fail%2Fissue-19692.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9f306757d3e7cdffaea26ddacaea55a837c3124/src%2Ftest%2Fcompile-fail%2Fissue-19692.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19692.rs?ref=d9f306757d3e7cdffaea26ddacaea55a837c3124", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Homura;\n+\n+fn akemi(homura: Homura) {\n+    let Some(ref madoka) = Some(homura.kaname()); //~ ERROR does not implement any method\n+    madoka.clone(); //~ ERROR the type of this value must be known\n+}\n+\n+fn main() { }"}]}