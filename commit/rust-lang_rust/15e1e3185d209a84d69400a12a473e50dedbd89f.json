{"sha": "15e1e3185d209a84d69400a12a473e50dedbd89f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ZTFlMzE4NWQyMDlhODRkNjk0MDBhMTJhNDczZTUwZGVkYmQ4OWY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-10T22:36:15Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-10T22:36:37Z"}, "message": "rt: Allow records and boxes to be logged", "tree": {"sha": "0157e41a3ecd565f194ff479cf6c42b89c717502", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0157e41a3ecd565f194ff479cf6c42b89c717502"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15e1e3185d209a84d69400a12a473e50dedbd89f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15e1e3185d209a84d69400a12a473e50dedbd89f", "html_url": "https://github.com/rust-lang/rust/commit/15e1e3185d209a84d69400a12a473e50dedbd89f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15e1e3185d209a84d69400a12a473e50dedbd89f/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7f1c36f2bdc83449c164b1fa4937071fb055e5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7f1c36f2bdc83449c164b1fa4937071fb055e5b", "html_url": "https://github.com/rust-lang/rust/commit/c7f1c36f2bdc83449c164b1fa4937071fb055e5b"}], "stats": {"total": 59, "additions": 48, "deletions": 11}, "files": [{"sha": "89efe046229c73ec71c178fa1606dd454bbca6ba", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 48, "deletions": 11, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/15e1e3185d209a84d69400a12a473e50dedbd89f/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/15e1e3185d209a84d69400a12a473e50dedbd89f/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=15e1e3185d209a84d69400a12a473e50dedbd89f", "patch": "@@ -156,6 +156,8 @@ class ptr_pair {\n \n     ptr_pair(uint8_t *in_fst, uint8_t *in_snd) : fst(in_fst), snd(in_snd) {}\n \n+    ptr_pair(data_pair<uint8_t *> &other) : fst(other.fst), snd(other.snd) {}\n+\n     inline void operator=(uint8_t *rhs) { fst = snd = rhs; }\n \n     inline ptr_pair operator+(size_t n) const {\n@@ -890,6 +892,7 @@ size_of::walk_ivec(bool align, bool is_pod, size_align &elem_sa) {\n template<typename T,typename U>\n class data : public ctxt< data<T,U> > {\n protected:\n+    void walk_box_contents(bool align);\n     void walk_variant(bool align, tag_info &tinfo, uint32_t variant);\n \n     static std::pair<uint8_t *,uint8_t *> get_evec_data_range(ptr dp);\n@@ -953,6 +956,16 @@ class data : public ctxt< data<T,U> > {\n     void walk_number(bool align) { DATA_SIMPLE(W, walk_number<W>()); }\n };\n \n+template<typename T,typename U>\n+void\n+data<T,U>::walk_box_contents(bool align) {\n+    typename U::template data<uint8_t *>::t box_ptr = bump_dp<uint8_t *>(dp);\n+\n+    U ref_count_dp(box_ptr);\n+    T sub(*static_cast<T *>(this), ref_count_dp + sizeof(uint32_t));\n+    static_cast<T *>(this)->walk_box_contents(align, sub, ref_count_dp);\n+}\n+\n template<typename T,typename U>\n void\n data<T,U>::walk_variant(bool align, tag_info &tinfo, uint32_t variant_id) {\n@@ -1079,6 +1092,12 @@ class cmp : public data<cmp,ptr_pair> {\n         result = sub.result;\n     }\n \n+    inline void walk_box_contents(bool align, cmp &sub,\n+                                  ptr_pair &ref_count_dp) {\n+        sub.walk(true);\n+        result = sub.result;\n+    }\n+\n     inline void cmp_two_pointers(bool align) {\n         if (align) dp = align_to(dp, ALIGNOF(uint8_t *) * 2);\n         data_pair<uint8_t *> fst = bump_dp<uint8_t *>(dp);\n@@ -1135,6 +1154,10 @@ class cmp : public data<cmp,ptr_pair> {\n         walk_vec(align, is_pod, get_ivec_data_range(dp));\n     }\n \n+    void walk_box(bool align) {\n+        data<cmp,ptr_pair>::walk_box_contents(align);\n+    }\n+\n     void walk_fn(bool align) { return cmp_two_pointers(align); }\n     void walk_obj(bool align) { return cmp_two_pointers(align); }\n     void walk_port(bool align) { return cmp_pointer(align); }\n@@ -1143,7 +1166,6 @@ class cmp : public data<cmp,ptr_pair> {\n \n     void walk_tag(bool align, tag_info &tinfo,\n                   const data_pair<uint32_t> &tag_variants);\n-    void walk_box(bool align);\n     void walk_struct(bool align, const uint8_t *end_sp);\n     void walk_res(bool align, const rust_fn *dtor, uint16_t n_ty_params,\n                   const uint8_t *ty_params_sp);\n@@ -1188,16 +1210,6 @@ cmp::walk_tag(bool align, tag_info &tinfo,\n     data<cmp,ptr_pair>::walk_variant(align, tinfo, tag_variants.fst);\n }\n \n-void\n-cmp::walk_box(bool align) {\n-    data_pair<uint8_t *> subdp = bump_dp<uint8_t *>(dp);\n-\n-    cmp sub(*this, ptr_pair::make(subdp));\n-    sub.dp += sizeof(uint32_t);     // Skip over the reference count.\n-    sub.walk(true);\n-    result = sub.result;\n-}\n-\n void\n cmp::walk_struct(bool align, const uint8_t *end_sp) {\n     while (!result && this->sp != end_sp) {\n@@ -1266,8 +1278,18 @@ class log : public data<log,ptr> {\n         data<log,ptr>::walk_variant(align, tinfo, tag_variant);\n     }\n \n+    void walk_box(bool align) {\n+        out << \"@\";\n+        data<log,ptr>::walk_box_contents(align);\n+    }\n+\n     void walk_subcontext(bool align, log &sub) { sub.walk(align); }\n \n+    void walk_box_contents(bool align, log &sub, ptr &ref_count_dp) {\n+        sub.walk(true);\n+    }\n+\n+    void walk_struct(bool align, const uint8_t *end_sp);\n     void walk_vec(bool align, bool is_pod, const std::pair<ptr,ptr> &data);\n     void walk_variant(bool align, tag_info &tinfo, uint32_t variant_id,\n                       const std::pair<const uint8_t *,const uint8_t *>\n@@ -1304,6 +1326,21 @@ log::walk_string(const std::pair<ptr,ptr> &data) {\n     out << \"\\\"\" << std::dec;\n }\n \n+void\n+log::walk_struct(bool align, const uint8_t *end_sp) {\n+    out << \"(\";\n+\n+    bool first = true;\n+    while (sp != end_sp) {\n+        if (!first)\n+            out << \", \";\n+        walk(align);\n+        align = true, first = false;\n+    }\n+\n+    out << \")\";\n+}\n+\n void\n log::walk_vec(bool align, bool is_pod, const std::pair<ptr,ptr> &data) {\n     if (peek() == SHAPE_U8) {"}]}