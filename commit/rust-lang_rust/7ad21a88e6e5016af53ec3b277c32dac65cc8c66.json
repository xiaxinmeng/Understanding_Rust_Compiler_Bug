{"sha": "7ad21a88e6e5016af53ec3b277c32dac65cc8c66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhZDIxYTg4ZTZlNTAxNmFmNTNlYzNiMjc3YzMyZGFjNjVjYzhjNjY=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-01T13:47:47Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-05T07:00:54Z"}, "message": "rustc/ty: improve stack shifting and remove related allocations", "tree": {"sha": "b85831e4d7eb6fb2b2e4c8b0472ed848d260961e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b85831e4d7eb6fb2b2e4c8b0472ed848d260961e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ad21a88e6e5016af53ec3b277c32dac65cc8c66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ad21a88e6e5016af53ec3b277c32dac65cc8c66", "html_url": "https://github.com/rust-lang/rust/commit/7ad21a88e6e5016af53ec3b277c32dac65cc8c66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ad21a88e6e5016af53ec3b277c32dac65cc8c66/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ee6b54c2471a68b838bde42bfe48f1e91df1633", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ee6b54c2471a68b838bde42bfe48f1e91df1633", "html_url": "https://github.com/rust-lang/rust/commit/0ee6b54c2471a68b838bde42bfe48f1e91df1633"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "d588bc8c0cb5ca6992b57884fbad14e5ee5e81ec", "filename": "src/librustc/ty/query/job.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7ad21a88e6e5016af53ec3b277c32dac65cc8c66/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ad21a88e6e5016af53ec3b277c32dac65cc8c66/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs?ref=7ad21a88e6e5016af53ec3b277c32dac65cc8c66", "patch": "@@ -123,9 +123,11 @@ impl<'tcx> QueryJob<'tcx> {\n         let mut cycle = Vec::new();\n \n         while let Some(job) = current_job {\n-            cycle.insert(0, job.info.clone());\n+            cycle.push(job.info.clone());\n \n             if ptr::eq(&*job, self) {\n+                cycle.reverse();\n+\n                 // This is the end of the cycle\n                 // The span entry we included was for the usage\n                 // of the cycle itself, and not part of the cycle\n@@ -368,13 +370,11 @@ fn remove_cycle<'tcx>(\n         // Reverse the stack so earlier entries require later entries\n         stack.reverse();\n \n-        // Extract the spans and queries into separate arrays\n-        let mut spans: Vec<_> = stack.iter().map(|e| e.0).collect();\n-        let queries = stack.into_iter().map(|e| e.1);\n+        // The stack is a vector of pairs of spans and queries\n+        let (mut spans, queries): (Vec<_>, Vec<_>) = stack.into_iter().unzip();\n \n         // Shift the spans so that queries are matched with the span for their waitee\n-        let last = spans.pop().unwrap();\n-        spans.insert(0, last);\n+        spans.rotate_right(1);\n \n         // Zip them back together\n         let mut stack: Vec<_> = spans.into_iter().zip(queries).collect();\n@@ -414,10 +414,10 @@ fn remove_cycle<'tcx>(\n             stable_hasher.finish()\n         }).unwrap().as_ptr();\n \n-        // Shift the stack until our entry point is first\n-        while stack[0].1.as_ptr() != entry_point {\n-            let last = stack.pop().unwrap();\n-            stack.insert(0, last);\n+        // Shift the stack so that our entry point is first\n+        let entry_point_pos = stack.iter().position(|(_, query)| query.as_ptr() == entry_point);\n+        if let Some(pos) = entry_point_pos {\n+            stack.rotate_right(pos);\n         }\n \n         // Create the cycle error"}]}