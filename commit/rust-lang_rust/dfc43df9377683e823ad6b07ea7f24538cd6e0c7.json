{"sha": "dfc43df9377683e823ad6b07ea7f24538cd6e0c7", "node_id": "C_kwDOAAsO6NoAKGRmYzQzZGY5Mzc3NjgzZTgyM2FkNmIwN2VhN2YyNDUzOGNkNmUwYzc", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-06T03:47:31Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-06T16:29:24Z"}, "message": "explain why shift with signed offset works the way it does", "tree": {"sha": "7a2d1901da15b2705d2774b2abfd0ade5634e639", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a2d1901da15b2705d2774b2abfd0ade5634e639"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfc43df9377683e823ad6b07ea7f24538cd6e0c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfc43df9377683e823ad6b07ea7f24538cd6e0c7", "html_url": "https://github.com/rust-lang/rust/commit/dfc43df9377683e823ad6b07ea7f24538cd6e0c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfc43df9377683e823ad6b07ea7f24538cd6e0c7/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c274e4969f058b1c644243181ece9f829efa7594", "url": "https://api.github.com/repos/rust-lang/rust/commits/c274e4969f058b1c644243181ece9f829efa7594", "html_url": "https://github.com/rust-lang/rust/commit/c274e4969f058b1c644243181ece9f829efa7594"}], "stats": {"total": 18, "additions": 15, "deletions": 3}, "files": [{"sha": "6dae9dc72b7b4668df706aa5dc605f0e2c3a7ea4", "filename": "compiler/rustc_const_eval/src/interpret/operator.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dfc43df9377683e823ad6b07ea7f24538cd6e0c7/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfc43df9377683e823ad6b07ea7f24538cd6e0c7/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs?ref=dfc43df9377683e823ad6b07ea7f24538cd6e0c7", "patch": "@@ -127,17 +127,29 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         // Shift ops can have an RHS with a different numeric type.\n         if bin_op == Shl || bin_op == Shr {\n-            let signed = left_layout.abi.is_signed();\n             let size = u128::from(left_layout.size.bits());\n+            // Even if `r` is signed, we treat it as if it was unsigned (i.e., we use its\n+            // zero-extended form). This matches the codegen backend:\n+            // <https://github.com/rust-lang/rust/blob/c274e4969f058b1c644243181ece9f829efa7594/compiler/rustc_codegen_ssa/src/base.rs#L315-L317>.\n+            // The overflow check is also ignorant to the sign:\n+            // <https://github.com/rust-lang/rust/blob/c274e4969f058b1c644243181ece9f829efa7594/compiler/rustc_codegen_ssa/src/mir/rvalue.rs#L728>.\n+            // This would behave rather strangely if we had integer types of size 256: a shift by\n+            // -1i8 would actually shift by 255, but that would *not* be considered overflowing. A\n+            // shift by -1i16 though would be considered overflowing. If we had integers of size\n+            // 512, then a shift by -1i8 would even produce a different result than one by -1i16:\n+            // the first shifts by 255, the latter by u16::MAX % 512 = 511. Lucky enough, our\n+            // integers are maximally 128bits wide, so negative shifts *always* overflow and we have\n+            // consistent results for the same value represented at different bit widths.\n+            assert!(size <= 128);\n             let overflow = r >= size;\n             // The shift offset is implicitly masked to the type size, to make sure this operation\n             // is always defined. This is the one MIR operator that does *not* directly map to a\n             // single LLVM operation. See\n-            // <https://github.com/rust-lang/rust/blob/a3b9405ae7bb6ab4e8103b414e75c44598a10fd2/compiler/rustc_codegen_ssa/src/common.rs#L131-L158>\n+            // <https://github.com/rust-lang/rust/blob/c274e4969f058b1c644243181ece9f829efa7594/compiler/rustc_codegen_ssa/src/common.rs#L131-L158>\n             // for the corresponding truncation in our codegen backends.\n             let r = r % size;\n             let r = u32::try_from(r).unwrap(); // we masked so this will always fit\n-            let result = if signed {\n+            let result = if left_layout.abi.is_signed() {\n                 let l = self.sign_extend(l, left_layout) as i128;\n                 let result = match bin_op {\n                     Shl => l.checked_shl(r).unwrap(),"}]}