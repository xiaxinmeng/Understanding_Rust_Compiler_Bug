{"sha": "d95a7768a1c5497c6ccb0c2ded30f5968552513c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NWE3NzY4YTFjNTQ5N2M2Y2NiMGMyZGVkMzBmNTk2ODU1MjUxM2M=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-09-18T18:13:36Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-09-18T18:33:14Z"}, "message": "don't record all intermediate adjustment types\n\nThat's way more than is needed, and winds up recording types\nthat will never appear in MIR.", "tree": {"sha": "3f662bd8283c8a78b92d5fff92fcd715f27abfc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f662bd8283c8a78b92d5fff92fcd715f27abfc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d95a7768a1c5497c6ccb0c2ded30f5968552513c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d95a7768a1c5497c6ccb0c2ded30f5968552513c", "html_url": "https://github.com/rust-lang/rust/commit/d95a7768a1c5497c6ccb0c2ded30f5968552513c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d95a7768a1c5497c6ccb0c2ded30f5968552513c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dece57302a8e6775b34dd6447eb98552e83bdc9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dece57302a8e6775b34dd6447eb98552e83bdc9d", "html_url": "https://github.com/rust-lang/rust/commit/dece57302a8e6775b34dd6447eb98552e83bdc9d"}], "stats": {"total": 53, "additions": 47, "deletions": 6}, "files": [{"sha": "a7c307fdf894f760cf042eed69c04cf8434dc152", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d95a7768a1c5497c6ccb0c2ded30f5968552513c/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95a7768a1c5497c6ccb0c2ded30f5968552513c/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=d95a7768a1c5497c6ccb0c2ded30f5968552513c", "patch": "@@ -181,13 +181,34 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n \n         let scope = self.region_scope_tree.temporary_scope(expr.hir_id.local_id);\n \n-        // Record the unadjusted type\n+        // If there are adjustments, then record the final type --\n+        // this is the actual value that is being produced.\n+        if let Some(adjusted_ty) = self.fcx.tables.borrow().expr_ty_adjusted_opt(expr) {\n+            self.record(adjusted_ty, scope, Some(expr), expr.span);\n+        }\n+\n+        // Also record the unadjusted type (which is the only type if\n+        // there are no adjustments). The reason for this is that the\n+        // unadjusted value is sometimes a \"temporary\" that would wind\n+        // up in a MIR temporary.\n+        //\n+        // As an example, consider an expression like `vec![].push()`.\n+        // Here, the `vec![]` would wind up MIR stored into a\n+        // temporary variable `t` which we can borrow to invoke\n+        // `<Vec<_>>::push(&mut t)`.\n+        //\n+        // Note that an expression can have many adjustments, and we\n+        // are just ignoring those intermediate types. This is because\n+        // those intermediate values are always linearly \"consumed\" by\n+        // the other adjustments, and hence would never be directly\n+        // captured in the MIR.\n+        //\n+        // (Note that this partly relies on the fact that the `Deref`\n+        // traits always return references, which means their content\n+        // can be reborrowed without needing to spill to a temporary.\n+        // If this were not the case, then we could conceivably have\n+        // to create intermediate temporaries.)\n         let ty = self.fcx.tables.borrow().expr_ty(expr);\n         self.record(ty, scope, Some(expr), expr.span);\n-\n-        // Also include the adjusted types, since these can result in MIR locals\n-        for adjustment in self.fcx.tables.borrow().expr_adjustments(expr) {\n-            self.record(adjustment.target, scope, Some(expr), expr.span);\n-        }\n     }\n }"}, {"sha": "5bd52d44a58279948b225db287ab4e1c772b31ad", "filename": "src/test/ui/async-await/issues/issue-64477.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d95a7768a1c5497c6ccb0c2ded30f5968552513c/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-64477.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95a7768a1c5497c6ccb0c2ded30f5968552513c/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-64477.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-64477.rs?ref=d95a7768a1c5497c6ccb0c2ded30f5968552513c", "patch": "@@ -0,0 +1,20 @@\n+// Regression test for #64477.\n+//\n+// We were incorrectly claiming that the `f(x).await` future captured\n+// a value of type `T`, and hence that `T: Send` would have to hold.\n+//\n+// check-pass\n+// edition:2018\n+\n+use std::future::Future;\n+use std::pin::Pin;\n+\n+fn f<T>(_: &T) -> Pin<Box<dyn Future<Output = ()> + Send>> {\n+    unimplemented!()\n+}\n+\n+pub fn g<T: Sync>(x: &'static T) -> impl Future<Output = ()> + Send {\n+    async move { f(x).await }\n+}\n+\n+fn main() { }"}]}