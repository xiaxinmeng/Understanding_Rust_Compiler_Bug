{"sha": "03bed655142dd5e42ba4539de53b3663d8a123e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzYmVkNjU1MTQyZGQ1ZTQyYmE0NTM5ZGU1M2IzNjYzZDhhMTIzZTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-29T11:32:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-29T11:32:14Z"}, "message": "Auto merge of #41856 - qnighy:prohibit-parenthesized-params-in-more-types, r=arielb1\n\nProhibit parenthesized params in more types.\n\nProhibit parenthesized parameters in primitive types, type parameters, `Self`, etc.\n\nFixes #32995.", "tree": {"sha": "2ee6c7a5bbe59f2f62675d772ecb7ec1d49f2212", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ee6c7a5bbe59f2f62675d772ecb7ec1d49f2212"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03bed655142dd5e42ba4539de53b3663d8a123e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03bed655142dd5e42ba4539de53b3663d8a123e0", "html_url": "https://github.com/rust-lang/rust/commit/03bed655142dd5e42ba4539de53b3663d8a123e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03bed655142dd5e42ba4539de53b3663d8a123e0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be5f4fe6cc7179b900eb31ee3e9235fd12bd04c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/be5f4fe6cc7179b900eb31ee3e9235fd12bd04c7", "html_url": "https://github.com/rust-lang/rust/commit/be5f4fe6cc7179b900eb31ee3e9235fd12bd04c7"}, {"sha": "99993780dc2db803877ed700cbf315246fc3ad7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/99993780dc2db803877ed700cbf315246fc3ad7f", "html_url": "https://github.com/rust-lang/rust/commit/99993780dc2db803877ed700cbf315246fc3ad7f"}], "stats": {"total": 154, "additions": 148, "deletions": 6}, "files": [{"sha": "0bc1be70174e6d64a0412c3820a27a7c6c656686", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/03bed655142dd5e42ba4539de53b3663d8a123e0/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03bed655142dd5e42ba4539de53b3663d8a123e0/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=03bed655142dd5e42ba4539de53b3663d8a123e0", "patch": "@@ -242,6 +242,12 @@ declare_lint! {\n     \"detects missing fragment specifiers in unused `macro_rules!` patterns\"\n }\n \n+declare_lint! {\n+    pub PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n+    Warn,\n+    \"detects parenthesized generic parameters in type and module names\"\n+}\n+\n declare_lint! {\n     pub DEPRECATED,\n     Warn,\n@@ -293,6 +299,7 @@ impl LintPass for HardwiredLints {\n             LEGACY_IMPORTS,\n             LEGACY_CONSTRUCTOR_VISIBILITY,\n             MISSING_FRAGMENT_SPECIFIER,\n+            PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n             DEPRECATED\n         )\n     }"}, {"sha": "d8f29768ccd67cc6883598377d7e598233c7e64b", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03bed655142dd5e42ba4539de53b3663d8a123e0/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03bed655142dd5e42ba4539de53b3663d8a123e0/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=03bed655142dd5e42ba4539de53b3663d8a123e0", "patch": "@@ -252,6 +252,10 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             id: LintId::of(MISSING_FRAGMENT_SPECIFIER),\n             reference: \"issue #40107 <https://github.com/rust-lang/rust/issues/40107>\",\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES),\n+            reference: \"issue #42238 <https://github.com/rust-lang/rust/issues/42238>\",\n+        },\n         FutureIncompatibleInfo {\n             id: LintId::of(ANONYMOUS_PARAMETERS),\n             reference: \"issue #41686 <https://github.com/rust-lang/rust/issues/41686>\","}, {"sha": "c9eb9807c41a51d5e50cb00c7aeae926eb9ea8e6", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/03bed655142dd5e42ba4539de53b3663d8a123e0/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03bed655142dd5e42ba4539de53b3663d8a123e0/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=03bed655142dd5e42ba4539de53b3663d8a123e0", "patch": "@@ -22,6 +22,7 @@ use rustc::ty::subst::{Kind, Subst, Substs};\n use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt, ToPredicate, TypeFoldable};\n use rustc::ty::wf::object_region_bounds;\n+use rustc::lint::builtin::PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES;\n use rustc_back::slice;\n use require_c_abi_if_variadic;\n use util::common::{ErrorReported, FN_OUTPUT_NAME};\n@@ -156,10 +157,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         match item_segment.parameters {\n             hir::AngleBracketedParameters(_) => {}\n             hir::ParenthesizedParameters(..) => {\n-                struct_span_err!(tcx.sess, span, E0214,\n-                          \"parenthesized parameters may only be used with a trait\")\n-                    .span_label(span, \"only traits may use parentheses\")\n-                    .emit();\n+                self.prohibit_parenthesized_params(item_segment, true);\n \n                 return Substs::for_item(tcx, def_id, |_, _| {\n                     tcx.types.re_static\n@@ -370,6 +368,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         self_ty: Ty<'tcx>)\n         -> ty::TraitRef<'tcx>\n     {\n+        self.prohibit_type_params(trait_ref.path.segments.split_last().unwrap().1);\n+\n         let trait_def_id = self.trait_def_id(trait_ref);\n         self.ast_path_to_mono_trait_ref(trait_ref.path.span,\n                                         trait_def_id,\n@@ -402,6 +402,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n         debug!(\"ast_path_to_poly_trait_ref({:?}, def_id={:?})\", trait_ref, trait_def_id);\n \n+        self.prohibit_type_params(trait_ref.path.segments.split_last().unwrap().1);\n+\n         let (substs, assoc_bindings) =\n             self.create_substs_for_ast_trait_ref(trait_ref.path.span,\n                                                  trait_def_id,\n@@ -623,6 +625,13 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                                                         dummy_self,\n                                                         &mut projection_bounds);\n \n+        for trait_bound in trait_bounds[1..].iter() {\n+            // Sanity check for non-principal trait bounds\n+            self.instantiate_poly_trait_ref(trait_bound,\n+                                            dummy_self,\n+                                            &mut vec![]);\n+        }\n+\n         let (auto_traits, trait_bounds) = split_auto_traits(tcx, &trait_bounds[1..]);\n \n         if !trait_bounds.is_empty() {\n@@ -938,6 +947,10 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n     pub fn prohibit_type_params(&self, segments: &[hir::PathSegment]) {\n         for segment in segments {\n+            if let hir::ParenthesizedParameters(_) = segment.parameters {\n+                self.prohibit_parenthesized_params(segment, false);\n+                break;\n+            }\n             for typ in segment.parameters.types() {\n                 struct_span_err!(self.tcx().sess, typ.span, E0109,\n                                  \"type parameters are not allowed on this type\")\n@@ -960,6 +973,21 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         }\n     }\n \n+    pub fn prohibit_parenthesized_params(&self, segment: &hir::PathSegment, emit_error: bool) {\n+        if let hir::ParenthesizedParameters(ref data) = segment.parameters {\n+            if emit_error {\n+                struct_span_err!(self.tcx().sess, data.span, E0214,\n+                          \"parenthesized parameters may only be used with a trait\")\n+                    .span_label(data.span, \"only traits may use parentheses\")\n+                    .emit();\n+            } else {\n+                let msg = \"parenthesized parameters may only be used with a trait\".to_string();\n+                self.tcx().sess.add_lint(PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n+                                         ast::CRATE_NODE_ID, data.span, msg);\n+            }\n+        }\n+    }\n+\n     pub fn prohibit_projection(&self, span: Span) {\n         let mut err = struct_span_err!(self.tcx().sess, span, E0229,\n                                        \"associated type bindings are not allowed here\");"}, {"sha": "b5c2780e9a7af30b9854137a0b62309bdcdadf6a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03bed655142dd5e42ba4539de53b3663d8a123e0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03bed655142dd5e42ba4539de53b3663d8a123e0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=03bed655142dd5e42ba4539de53b3663d8a123e0", "patch": "@@ -4536,7 +4536,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     (&data.lifetimes[..], &data.types[..], data.infer_types, &data.bindings[..])\n                 }\n                 Some(&hir::ParenthesizedParameters(_)) => {\n-                    span_bug!(span, \"parenthesized parameters cannot appear in ExprPath\");\n+                    AstConv::prohibit_parenthesized_params(self, &segment.as_ref().unwrap().0,\n+                                                           false);\n+                    (&[][..], &[][..], true, &[][..])\n                 }\n                 None => (&[][..], &[][..], true, &[][..])\n             }"}, {"sha": "eb5c6076440e9c0eee559bf3dec87f1e558ad77d", "filename": "src/test/compile-fail/issue-22560.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/03bed655142dd5e42ba4539de53b3663d8a123e0/src%2Ftest%2Fcompile-fail%2Fissue-22560.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03bed655142dd5e42ba4539de53b3663d8a123e0/src%2Ftest%2Fcompile-fail%2Fissue-22560.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22560.rs?ref=03bed655142dd5e42ba4539de53b3663d8a123e0", "patch": "@@ -19,7 +19,10 @@ type Test = Add +\n             //~| ERROR E0191\n             //~| NOTE missing associated type `Output` value\n             Sub;\n-            //~^ ERROR E0225\n+            //~^ ERROR E0393\n+            //~| NOTE missing reference to `RHS`\n+            //~| NOTE because of the default `Self` reference, type parameters must be specified on object types\n+            //~| ERROR E0225\n             //~| NOTE non-Send/Sync additional trait\n \n fn main() { }"}, {"sha": "cb68d52ef968df73dcdca2aaffdf22d690071cd5", "filename": "src/test/compile-fail/issue-32995-2.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/03bed655142dd5e42ba4539de53b3663d8a123e0/src%2Ftest%2Fcompile-fail%2Fissue-32995-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03bed655142dd5e42ba4539de53b3663d8a123e0/src%2Ftest%2Fcompile-fail%2Fissue-32995-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-32995-2.rs?ref=03bed655142dd5e42ba4539de53b3663d8a123e0", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(parenthesized_params_in_types_and_modules)]\n+//~^ NOTE lint level defined here\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n+#![allow(dead_code, unused_variables)]\n+#![feature(conservative_impl_trait)]\n+\n+fn main() {\n+    { fn f<X: ::std::marker()::Send>() {} }\n+    //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~| WARN previously accepted\n+    //~| NOTE issue #42238\n+\n+    { fn f() -> impl ::std::marker()::Send { } }\n+    //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~| WARN previously accepted\n+    //~| NOTE issue #42238\n+}\n+\n+#[derive(Clone)]\n+struct X;\n+\n+impl ::std::marker()::Copy for X {}\n+//~^ ERROR parenthesized parameters may only be used with a trait\n+//~| WARN previously accepted\n+//~| NOTE issue #42238"}, {"sha": "f2ed8bf53eade23ad61283f4c72ba3ede9736601", "filename": "src/test/compile-fail/issue-32995.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/03bed655142dd5e42ba4539de53b3663d8a123e0/src%2Ftest%2Fcompile-fail%2Fissue-32995.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03bed655142dd5e42ba4539de53b3663d8a123e0/src%2Ftest%2Fcompile-fail%2Fissue-32995.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-32995.rs?ref=03bed655142dd5e42ba4539de53b3663d8a123e0", "patch": "@@ -0,0 +1,62 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(parenthesized_params_in_types_and_modules)]\n+//~^ NOTE lint level defined here\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n+#![allow(dead_code, unused_variables)]\n+\n+fn main() {\n+    let x: usize() = 1;\n+    //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~| WARN previously accepted\n+    //~| NOTE issue #42238\n+\n+    let b: ::std::boxed()::Box<_> = Box::new(1);\n+    //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~| WARN previously accepted\n+    //~| NOTE issue #42238\n+\n+    macro_rules! pathexpr {\n+        ($p:path) => { $p }\n+    }\n+\n+    let p = pathexpr!(::std::str()::from_utf8)(b\"foo\").unwrap();\n+    //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~| WARN previously accepted\n+    //~| NOTE issue #42238\n+\n+    let p = pathexpr!(::std::str::from_utf8())(b\"foo\").unwrap();\n+    //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~| WARN previously accepted\n+    //~| NOTE issue #42238\n+\n+    let o : Box<::std::marker()::Send> = Box::new(1);\n+    //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~| WARN previously accepted\n+    //~| NOTE issue #42238\n+\n+    let o : Box<Send + ::std::marker()::Sync> = Box::new(1);\n+    //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~| WARN previously accepted\n+    //~| NOTE issue #42238\n+}\n+\n+fn foo<X:Default>() {\n+    let d : X() = Default::default();\n+    //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~| WARN previously accepted\n+    //~| NOTE issue #42238\n+}"}]}