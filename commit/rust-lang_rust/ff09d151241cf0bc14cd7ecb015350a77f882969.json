{"sha": "ff09d151241cf0bc14cd7ecb015350a77f882969", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmMDlkMTUxMjQxY2YwYmMxNGNkN2VjYjAxNTM1MGE3N2Y4ODI5Njk=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-13T13:25:33Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-13T13:25:33Z"}, "message": "Merge #520\n\n520: Imprement tuple inference r=flodiebold a=h-michael\n\nrelated #394\r\n\r\nI'm sorry I'm late.\r\n\r\nI try implementing array inference next.\n\nCo-authored-by: Hirokazu Hata <h.hata.ai.t@gmail.com>", "tree": {"sha": "54c6f372f0c5ae4ed91c4819182c1f2129da9141", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54c6f372f0c5ae4ed91c4819182c1f2129da9141"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff09d151241cf0bc14cd7ecb015350a77f882969", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff09d151241cf0bc14cd7ecb015350a77f882969", "html_url": "https://github.com/rust-lang/rust/commit/ff09d151241cf0bc14cd7ecb015350a77f882969", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff09d151241cf0bc14cd7ecb015350a77f882969/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "bd2658de2691cf6f322f525a60a0d84bc0b5efc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd2658de2691cf6f322f525a60a0d84bc0b5efc6", "html_url": "https://github.com/rust-lang/rust/commit/bd2658de2691cf6f322f525a60a0d84bc0b5efc6"}, {"sha": "139da0841d720fc75a3c449c37f9e198cd7dcda9", "url": "https://api.github.com/repos/rust-lang/rust/commits/139da0841d720fc75a3c449c37f9e198cd7dcda9", "html_url": "https://github.com/rust-lang/rust/commit/139da0841d720fc75a3c449c37f9e198cd7dcda9"}], "stats": {"total": 77, "additions": 74, "deletions": 3}, "files": [{"sha": "f0936e9f33a26df31d124a8121a25822e14bfd49", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff09d151241cf0bc14cd7ecb015350a77f882969/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff09d151241cf0bc14cd7ecb015350a77f882969/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=ff09d151241cf0bc14cd7ecb015350a77f882969", "patch": "@@ -183,6 +183,9 @@ pub enum Expr {\n         arg_types: Vec<Option<TypeRef>>,\n         body: ExprId,\n     },\n+    Tuple {\n+        exprs: Vec<ExprId>,\n+    },\n }\n \n pub use ra_syntax::ast::PrefixOp as UnaryOp;\n@@ -297,6 +300,11 @@ impl Expr {\n             | Expr::UnaryOp { expr, .. } => {\n                 f(*expr);\n             }\n+            Expr::Tuple { exprs } => {\n+                for expr in exprs {\n+                    f(*expr);\n+                }\n+            }\n         }\n     }\n }\n@@ -621,11 +629,14 @@ impl ExprCollector {\n                 let op = e.op();\n                 self.alloc_expr(Expr::BinaryOp { lhs, rhs, op }, syntax_ptr)\n             }\n+            ast::ExprKind::TupleExpr(e) => {\n+                let exprs = e.exprs().map(|expr| self.collect_expr(expr)).collect();\n+                self.alloc_expr(Expr::Tuple { exprs }, syntax_ptr)\n+            }\n \n             // TODO implement HIR for these:\n             ast::ExprKind::Label(_e) => self.alloc_expr(Expr::Missing, syntax_ptr),\n             ast::ExprKind::IndexExpr(_e) => self.alloc_expr(Expr::Missing, syntax_ptr),\n-            ast::ExprKind::TupleExpr(_e) => self.alloc_expr(Expr::Missing, syntax_ptr),\n             ast::ExprKind::ArrayExpr(_e) => self.alloc_expr(Expr::Missing, syntax_ptr),\n             ast::ExprKind::RangeExpr(_e) => self.alloc_expr(Expr::Missing, syntax_ptr),\n             ast::ExprKind::Literal(_e) => self.alloc_expr(Expr::Missing, syntax_ptr),"}, {"sha": "0692d3b2a83822f68fa964edb9f364fcfc42010e", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff09d151241cf0bc14cd7ecb015350a77f882969/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff09d151241cf0bc14cd7ecb015350a77f882969/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=ff09d151241cf0bc14cd7ecb015350a77f882969", "patch": "@@ -1040,6 +1040,14 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 }\n                 _ => Ty::Unknown,\n             },\n+            Expr::Tuple { exprs } => {\n+                let mut ty_vec = Vec::with_capacity(exprs.len());\n+                for arg in exprs.iter() {\n+                    ty_vec.push(self.infer_expr(*arg, &Expectation::none())?);\n+                }\n+\n+                Ty::Tuple(Arc::from(ty_vec))\n+            }\n         };\n         // use a new type variable if we got Ty::Unknown here\n         let ty = self.insert_type_vars_shallow(ty);"}, {"sha": "920188fc912a15d52c209b6f36903bca8db09733", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ff09d151241cf0bc14cd7ecb015350a77f882969/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff09d151241cf0bc14cd7ecb015350a77f882969/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=ff09d151241cf0bc14cd7ecb015350a77f882969", "patch": "@@ -268,6 +268,25 @@ fn test(a: A) {\n     );\n }\n \n+#[test]\n+fn infer_tuple() {\n+    check_inference(\n+        r#\"\n+fn test(x: &str, y: isize) {\n+    let a: (u32, &str) = (1, \"a\");\n+    let b = (a, x);\n+    let c = (y, x);\n+    let d = (c, x);\n+\n+    // we have not infered these case yet.\n+    let e = (1, \"e\");\n+    let f = (e, \"d\");\n+}\n+\"#,\n+        \"tuple.txt\",\n+    );\n+}\n+\n fn infer(content: &str) -> String {\n     let (db, _, file_id) = MockDatabase::with_single_file(content);\n     let source_file = db.source_file(file_id);"}, {"sha": "96169180d4991c2803cd0bf03b238e76caa67825", "filename": "crates/ra_hir/src/ty/tests/data/tuple.txt", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ff09d151241cf0bc14cd7ecb015350a77f882969/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Ftuple.txt", "raw_url": "https://github.com/rust-lang/rust/raw/ff09d151241cf0bc14cd7ecb015350a77f882969/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Ftuple.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Ftuple.txt?ref=ff09d151241cf0bc14cd7ecb015350a77f882969", "patch": "@@ -0,0 +1,27 @@\n+[9; 10) 'x': &str\n+[18; 19) 'y': isize\n+[28; 214) '{     ...d\"); }': ()\n+[38; 39) 'a': (u32, &str)\n+[55; 63) '(1, \"a\")': (u32, &str)\n+[56; 57) '1': u32\n+[59; 62) '\"a\"': &str\n+[73; 74) 'b': ((u32, &str), &str)\n+[77; 83) '(a, x)': ((u32, &str), &str)\n+[78; 79) 'a': (u32, &str)\n+[81; 82) 'x': &str\n+[93; 94) 'c': (isize, &str)\n+[97; 103) '(y, x)': (isize, &str)\n+[98; 99) 'y': isize\n+[101; 102) 'x': &str\n+[113; 114) 'd': ((isize, &str), &str)\n+[117; 123) '(c, x)': ((isize, &str), &str)\n+[118; 119) 'c': (isize, &str)\n+[121; 122) 'x': &str\n+[177; 178) 'e': ([unknown], [unknown])\n+[181; 189) '(1, \"e\")': ([unknown], [unknown])\n+[182; 183) '1': [unknown]\n+[185; 188) '\"e\"': [unknown]\n+[199; 200) 'f': (([unknown], [unknown]), [unknown])\n+[203; 211) '(e, \"d\")': (([unknown], [unknown]), [unknown])\n+[204; 205) 'e': ([unknown], [unknown])\n+[207; 210) '\"d\"': [unknown]"}, {"sha": "94842a51434e4c7c8365420a38dac14447943ea1", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff09d151241cf0bc14cd7ecb015350a77f882969/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff09d151241cf0bc14cd7ecb015350a77f882969/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=ff09d151241cf0bc14cd7ecb015350a77f882969", "patch": "@@ -2969,7 +2969,11 @@ impl AstNode for TupleExpr {\n }\n \n \n-impl TupleExpr {}\n+impl TupleExpr {\n+    pub fn exprs(&self) -> impl Iterator<Item = &Expr> {\n+        super::children(self)\n+    }\n+}\n \n // TuplePat\n #[derive(Debug, PartialEq, Eq, Hash)]"}, {"sha": "dfd88bd10957a042b921ffbe644f812d1a276506", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff09d151241cf0bc14cd7ecb015350a77f882969/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/ff09d151241cf0bc14cd7ecb015350a77f882969/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=ff09d151241cf0bc14cd7ecb015350a77f882969", "patch": "@@ -357,7 +357,9 @@ Grammar(\n             enum: [\"FnDef\", \"TypeDef\", \"ConstDef\"]\n         ),\n \n-        \"TupleExpr\": (),\n+        \"TupleExpr\": (\n+            collections: [[\"exprs\", \"Expr\"]]\n+        ),\n         \"ArrayExpr\": (),\n         \"ParenExpr\": (options: [\"Expr\"]),\n         \"PathExpr\": (options: [\"Path\"]),"}]}