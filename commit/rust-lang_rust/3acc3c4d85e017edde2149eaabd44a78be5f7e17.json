{"sha": "3acc3c4d85e017edde2149eaabd44a78be5f7e17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhY2MzYzRkODVlMDE3ZWRkZTIxNDllYWFiZDQ0YTc4YmU1ZjdlMTc=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-05-31T17:26:05Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-05-31T20:55:54Z"}, "message": "Make std::map require const keys.", "tree": {"sha": "d5e619fb0814ee81395a14ec64e5dd5211b142bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5e619fb0814ee81395a14ec64e5dd5211b142bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3acc3c4d85e017edde2149eaabd44a78be5f7e17", "comment_count": 2, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3acc3c4d85e017edde2149eaabd44a78be5f7e17", "html_url": "https://github.com/rust-lang/rust/commit/3acc3c4d85e017edde2149eaabd44a78be5f7e17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3acc3c4d85e017edde2149eaabd44a78be5f7e17/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f394933641b5894a4c408aaae59ea3f632b3ee64", "url": "https://api.github.com/repos/rust-lang/rust/commits/f394933641b5894a4c408aaae59ea3f632b3ee64", "html_url": "https://github.com/rust-lang/rust/commit/f394933641b5894a4c408aaae59ea3f632b3ee64"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "08ae0bd80c41f1d447948aa9576a5161556dbd9d", "filename": "src/libstd/map.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3acc3c4d85e017edde2149eaabd44a78be5f7e17/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3acc3c4d85e017edde2149eaabd44a78be5f7e17/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=3acc3c4d85e017edde2149eaabd44a78be5f7e17", "patch": "@@ -282,7 +282,7 @@ Parameters:\n hasher - The hash function for key type K\n eqer - The equality function for key type K\n */\n-fn hashmap<K: copy, V: copy>(hasher: hashfn<K>, eqer: eqfn<K>)\n+fn hashmap<K: const copy, V: copy>(hasher: hashfn<K>, eqer: eqfn<K>)\n         -> hashmap<K, V> {\n     chained::mk(hasher, eqer)\n }\n@@ -316,7 +316,9 @@ fn uint_hash<V: copy>() -> hashmap<uint, V> {\n #[doc = \"\n Convenience function for adding keys to a hashmap with nil type keys\n \"]\n-fn set_add<K: copy>(set: set<K>, key: K) -> bool { ret set.insert(key, ()); }\n+fn set_add<K: const copy>(set: set<K>, key: K) -> bool {\n+    ret set.insert(key, ());\n+}\n \n #[doc = \"\n Convert a set into a vector.\n@@ -331,7 +333,7 @@ fn vec_from_set<T: copy>(s: set<T>) -> [T] {\n }\n \n #[doc = \"Construct a hashmap from a vector\"]\n-fn hash_from_vec<K: copy, V: copy>(hasher: hashfn<K>, eqer: eqfn<K>,\n+fn hash_from_vec<K: const copy, V: copy>(hasher: hashfn<K>, eqer: eqfn<K>,\n                                    items: [(K, V)]) -> hashmap<K, V> {\n     let map = hashmap(hasher, eqer);\n     vec::iter(items) { |item|"}, {"sha": "0e69f2c10b7b882a60b0a2bd8a4796514b1d6adf", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3acc3c4d85e017edde2149eaabd44a78be5f7e17/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3acc3c4d85e017edde2149eaabd44a78be5f7e17/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=3acc3c4d85e017edde2149eaabd44a78be5f7e17", "patch": "@@ -5,18 +5,18 @@ import std::map;\n import std::map::{hashmap, hashfn, eqfn};\n import dvec::{dvec, extensions};\n \n-type interner<T> =\n+type interner<T: const> =\n     {map: hashmap<T, uint>,\n      vect: dvec<T>,\n      hasher: hashfn<T>,\n      eqer: eqfn<T>};\n \n-fn mk<T: copy>(hasher: hashfn<T>, eqer: eqfn<T>) -> interner<T> {\n+fn mk<T: const copy>(hasher: hashfn<T>, eqer: eqfn<T>) -> interner<T> {\n     let m = map::hashmap::<T, uint>(hasher, eqer);\n     ret {map: m, vect: dvec(), hasher: hasher, eqer: eqer};\n }\n \n-fn intern<T: copy>(itr: interner<T>, val: T) -> uint {\n+fn intern<T: const copy>(itr: interner<T>, val: T) -> uint {\n     alt itr.map.find(val) {\n       some(idx) { ret idx; }\n       none {\n@@ -31,10 +31,10 @@ fn intern<T: copy>(itr: interner<T>, val: T) -> uint {\n // |get| isn't \"pure\" in the traditional sense, because it can go from\n // failing to returning a value as items are interned. But for typestate,\n // where we first check a pred and then rely on it, ceasing to fail is ok.\n-pure fn get<T: copy>(itr: interner<T>, idx: uint) -> T {\n+pure fn get<T: const copy>(itr: interner<T>, idx: uint) -> T {\n     unchecked {\n         itr.vect.get_elt(idx)\n     }\n }\n \n-fn len<T>(itr: interner<T>) -> uint { ret itr.vect.len(); }\n+fn len<T: const>(itr: interner<T>) -> uint { ret itr.vect.len(); }"}]}