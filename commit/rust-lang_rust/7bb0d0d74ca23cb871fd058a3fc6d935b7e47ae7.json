{"sha": "7bb0d0d74ca23cb871fd058a3fc6d935b7e47ae7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiYjBkMGQ3NGNhMjNjYjg3MWZkMDU4YTNmYzZkOTM1YjdlNDdhZTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-30T16:52:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-30T16:52:23Z"}, "message": "Auto merge of #28102 - arielb1:fix-log-again, r=eddyb\n\nr? @eddyb", "tree": {"sha": "2705a15a3c8812052783e0741ffe262fa6f118a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2705a15a3c8812052783e0741ffe262fa6f118a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bb0d0d74ca23cb871fd058a3fc6d935b7e47ae7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bb0d0d74ca23cb871fd058a3fc6d935b7e47ae7", "html_url": "https://github.com/rust-lang/rust/commit/7bb0d0d74ca23cb871fd058a3fc6d935b7e47ae7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bb0d0d74ca23cb871fd058a3fc6d935b7e47ae7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a82594b8e3ecea019bb6b2045de6242ee2279ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a82594b8e3ecea019bb6b2045de6242ee2279ab", "html_url": "https://github.com/rust-lang/rust/commit/9a82594b8e3ecea019bb6b2045de6242ee2279ab"}, {"sha": "ec6c3dbae571c856d5de8b9c12183ea8c9708c25", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec6c3dbae571c856d5de8b9c12183ea8c9708c25", "html_url": "https://github.com/rust-lang/rust/commit/ec6c3dbae571c856d5de8b9c12183ea8c9708c25"}], "stats": {"total": 34, "additions": 30, "deletions": 4}, "files": [{"sha": "a212594a326b81587820c4e35cd4d6374c55d6ab", "filename": "src/librustc/ast_map/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7bb0d0d74ca23cb871fd058a3fc6d935b7e47ae7/src%2Flibrustc%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bb0d0d74ca23cb871fd058a3fc6d935b7e47ae7/src%2Flibrustc%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fast_map%2Fmod.rs?ref=7bb0d0d74ca23cb871fd058a3fc6d935b7e47ae7", "patch": "@@ -480,6 +480,7 @@ impl<'ast> Map<'ast> {\n             NodeImplItem(ii) => PathName(ii.ident.name),\n             NodeTraitItem(ti) => PathName(ti.ident.name),\n             NodeVariant(v) => PathName(v.node.name.name),\n+            NodeLifetime(lt) => PathName(lt.name),\n             _ => panic!(\"no path elem for {:?}\", node)\n         }\n     }"}, {"sha": "372bbfc9a1a7e0bf31201216d083477cc39e64c2", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7bb0d0d74ca23cb871fd058a3fc6d935b7e47ae7/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bb0d0d74ca23cb871fd058a3fc6d935b7e47ae7/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=7bb0d0d74ca23cb871fd058a3fc6d935b7e47ae7", "patch": "@@ -1733,7 +1733,7 @@ pub struct FreeRegion {\n }\n \n #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash,\n-         RustcEncodable, RustcDecodable, Copy, Debug)]\n+         RustcEncodable, RustcDecodable, Copy)]\n pub enum BoundRegion {\n     /// An anonymous region parameter for a given fn (&T)\n     BrAnon(u32),\n@@ -2325,7 +2325,7 @@ pub struct TypeParameterDef<'tcx> {\n     pub object_lifetime_default: ObjectLifetimeDefault,\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Clone)]\n pub struct RegionParameterDef {\n     pub name: ast::Name,\n     pub def_id: DefId,"}, {"sha": "62ece6af4f2be6c9959a1531ccba3885af16dcd9", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7bb0d0d74ca23cb871fd058a3fc6d935b7e47ae7/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bb0d0d74ca23cb871fd058a3fc6d935b7e47ae7/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=7bb0d0d74ca23cb871fd058a3fc6d935b7e47ae7", "patch": "@@ -307,8 +307,20 @@ impl<'tcx> fmt::Display for ty::TraitTy<'tcx> {\n \n impl<'tcx> fmt::Debug for ty::TypeParameterDef<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"TypeParameterDef({:?}, {:?}/{})\",\n-               self.def_id, self.space, self.index)\n+        write!(f, \"TypeParameterDef({}, {}:{}, {:?}/{})\",\n+               self.name,\n+               self.def_id.krate, self.def_id.node,\n+               self.space, self.index)\n+    }\n+}\n+\n+impl fmt::Debug for ty::RegionParameterDef {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"RegionParameterDef({}, {}:{}, {:?}/{}, {:?})\",\n+               self.name,\n+               self.def_id.krate, self.def_id.node,\n+               self.space, self.index,\n+               self.bounds)\n     }\n }\n \n@@ -388,6 +400,19 @@ impl fmt::Display for ty::BoundRegion {\n     }\n }\n \n+impl fmt::Debug for ty::BoundRegion {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match *self {\n+            BrAnon(n) => write!(f, \"BrAnon({:?})\", n),\n+            BrFresh(n) => write!(f, \"BrFresh({:?})\", n),\n+            BrNamed(did, name) => {\n+                write!(f, \"BrNamed({}:{}, {:?})\", did.krate, did.node, name)\n+            }\n+            BrEnv => \"BrEnv\".fmt(f),\n+        }\n+    }\n+}\n+\n impl fmt::Debug for ty::Region {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {"}]}