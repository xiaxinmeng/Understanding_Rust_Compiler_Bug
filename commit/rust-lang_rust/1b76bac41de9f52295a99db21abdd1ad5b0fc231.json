{"sha": "1b76bac41de9f52295a99db21abdd1ad5b0fc231", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNzZiYWM0MWRlOWY1MjI5NWE5OWRiMjFhYmRkMWFkNWIwZmMyMzE=", "commit": {"author": {"name": "Philipp Br\u00fcschweiler", "email": "blei42@gmail.com", "date": "2013-06-21T11:01:15Z"}, "committer": {"name": "Philipp Br\u00fcschweiler", "email": "blei42@gmail.com", "date": "2013-06-23T10:49:16Z"}, "message": "syntax: Remove unused tokens\n\nTyDesc, TyVisitor and intrinsic are not used anymore.", "tree": {"sha": "c100e45b1c7321825fa8b2ae65b188eaee333067", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c100e45b1c7321825fa8b2ae65b188eaee333067"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b76bac41de9f52295a99db21abdd1ad5b0fc231", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b76bac41de9f52295a99db21abdd1ad5b0fc231", "html_url": "https://github.com/rust-lang/rust/commit/1b76bac41de9f52295a99db21abdd1ad5b0fc231", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b76bac41de9f52295a99db21abdd1ad5b0fc231/comments", "author": {"login": "Blei", "id": 52674, "node_id": "MDQ6VXNlcjUyNjc0", "avatar_url": "https://avatars.githubusercontent.com/u/52674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Blei", "html_url": "https://github.com/Blei", "followers_url": "https://api.github.com/users/Blei/followers", "following_url": "https://api.github.com/users/Blei/following{/other_user}", "gists_url": "https://api.github.com/users/Blei/gists{/gist_id}", "starred_url": "https://api.github.com/users/Blei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Blei/subscriptions", "organizations_url": "https://api.github.com/users/Blei/orgs", "repos_url": "https://api.github.com/users/Blei/repos", "events_url": "https://api.github.com/users/Blei/events{/privacy}", "received_events_url": "https://api.github.com/users/Blei/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Blei", "id": 52674, "node_id": "MDQ6VXNlcjUyNjc0", "avatar_url": "https://avatars.githubusercontent.com/u/52674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Blei", "html_url": "https://github.com/Blei", "followers_url": "https://api.github.com/users/Blei/followers", "following_url": "https://api.github.com/users/Blei/following{/other_user}", "gists_url": "https://api.github.com/users/Blei/gists{/gist_id}", "starred_url": "https://api.github.com/users/Blei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Blei/subscriptions", "organizations_url": "https://api.github.com/users/Blei/orgs", "repos_url": "https://api.github.com/users/Blei/repos", "events_url": "https://api.github.com/users/Blei/events{/privacy}", "received_events_url": "https://api.github.com/users/Blei/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "976c0b3dfb6a0da8a70958f157507b5dcf7c5ceb", "url": "https://api.github.com/repos/rust-lang/rust/commits/976c0b3dfb6a0da8a70958f157507b5dcf7c5ceb", "html_url": "https://github.com/rust-lang/rust/commit/976c0b3dfb6a0da8a70958f157507b5dcf7c5ceb"}], "stats": {"total": 204, "additions": 99, "deletions": 105}, "files": [{"sha": "d40b96f077bb1f18208a243561855ef6a98ef099", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 99, "deletions": 105, "changes": 204, "blob_url": "https://github.com/rust-lang/rust/blob/1b76bac41de9f52295a99db21abdd1ad5b0fc231/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b76bac41de9f52295a99db21abdd1ad5b0fc231/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=1b76bac41de9f52295a99db21abdd1ad5b0fc231", "patch": "@@ -331,21 +331,18 @@ pub mod special_idents {\n     pub static str : ident = ident { name: 19, ctxt: 0}; // for the type\n \n     /* outside of libsyntax */\n-    pub static ty_visitor : ident = ident { name: 20, ctxt: 0};\n-    pub static arg : ident = ident { name: 21, ctxt: 0};\n-    pub static descrim : ident = ident { name: 22, ctxt: 0};\n-    pub static clownshoe_abi : ident = ident { name: 23, ctxt: 0};\n-    pub static clownshoe_stack_shim : ident = ident { name: 24, ctxt: 0};\n-    pub static tydesc : ident = ident { name: 25, ctxt: 0};\n-    pub static main : ident = ident { name: 26, ctxt: 0};\n-    pub static opaque : ident = ident { name: 27, ctxt: 0};\n-    pub static blk : ident = ident { name: 28, ctxt: 0};\n-    pub static statik : ident = ident { name: 29, ctxt: 0};\n-    pub static intrinsic : ident = ident { name: 30, ctxt: 0};\n-    pub static clownshoes_foreign_mod: ident = ident { name: 31, ctxt: 0};\n-    pub static unnamed_field: ident = ident { name: 32, ctxt: 0};\n-    pub static c_abi: ident = ident { name: 33, ctxt: 0};\n-    pub static type_self: ident = ident { name: 34, ctxt: 0};    // `Self`\n+    pub static arg : ident = ident { name: 20, ctxt: 0};\n+    pub static descrim : ident = ident { name: 21, ctxt: 0};\n+    pub static clownshoe_abi : ident = ident { name: 22, ctxt: 0};\n+    pub static clownshoe_stack_shim : ident = ident { name: 23, ctxt: 0};\n+    pub static main : ident = ident { name: 24, ctxt: 0};\n+    pub static opaque : ident = ident { name: 25, ctxt: 0};\n+    pub static blk : ident = ident { name: 26, ctxt: 0};\n+    pub static statik : ident = ident { name: 27, ctxt: 0};\n+    pub static clownshoes_foreign_mod: ident = ident { name: 28, ctxt: 0};\n+    pub static unnamed_field: ident = ident { name: 29, ctxt: 0};\n+    pub static c_abi: ident = ident { name: 30, ctxt: 0};\n+    pub static type_self: ident = ident { name: 31, ctxt: 0};    // `Self`\n }\n \n /**\n@@ -426,59 +423,56 @@ fn mk_fresh_ident_interner() -> @ident_interner {\n         \"tt\",                 // 17\n         \"matchers\",           // 18\n         \"str\",                // 19\n-        \"TyVisitor\",          // 20\n-        \"arg\",                // 21\n-        \"descrim\",            // 22\n-        \"__rust_abi\",         // 23\n-        \"__rust_stack_shim\",  // 24\n-        \"TyDesc\",             // 25\n-        \"main\",               // 26\n-        \"<opaque>\",           // 27\n-        \"blk\",                // 28\n-        \"static\",             // 29\n-        \"intrinsic\",          // 30\n-        \"__foreign_mod__\",    // 31\n-        \"__field__\",          // 32\n-        \"C\",                  // 33\n-        \"Self\",               // 34\n-\n-        \"as\",                 // 35\n-        \"break\",              // 36\n-        \"const\",              // 37\n-        \"copy\",               // 38\n-        \"do\",                 // 39\n-        \"else\",               // 40\n-        \"enum\",               // 41\n-        \"extern\",             // 42\n-        \"false\",              // 43\n-        \"fn\",                 // 44\n-        \"for\",                // 45\n-        \"if\",                 // 46\n-        \"impl\",               // 47\n-        \"let\",                // 48\n-        \"__log\",              // 49\n-        \"loop\",               // 50\n-        \"match\",              // 51\n-        \"mod\",                // 52\n-        \"mut\",                // 53\n-        \"once\",               // 54\n-        \"priv\",               // 55\n-        \"pub\",                // 56\n-        \"pure\",               // 57\n-        \"ref\",                // 58\n-        \"return\",             // 59\n-        \"static\",             // 29 -- also a special ident\n+        \"arg\",                // 20\n+        \"descrim\",            // 21\n+        \"__rust_abi\",         // 22\n+        \"__rust_stack_shim\",  // 23\n+        \"main\",               // 24\n+        \"<opaque>\",           // 25\n+        \"blk\",                // 26\n+        \"static\",             // 27\n+        \"__foreign_mod__\",    // 28\n+        \"__field__\",          // 29\n+        \"C\",                  // 30\n+        \"Self\",               // 31\n+\n+        \"as\",                 // 32\n+        \"break\",              // 33\n+        \"const\",              // 34\n+        \"copy\",               // 35\n+        \"do\",                 // 36\n+        \"else\",               // 37\n+        \"enum\",               // 38\n+        \"extern\",             // 39\n+        \"false\",              // 40\n+        \"fn\",                 // 41\n+        \"for\",                // 42\n+        \"if\",                 // 43\n+        \"impl\",               // 44\n+        \"let\",                // 45\n+        \"__log\",              // 46\n+        \"loop\",               // 47\n+        \"match\",              // 48\n+        \"mod\",                // 49\n+        \"mut\",                // 50\n+        \"once\",               // 51\n+        \"priv\",               // 52\n+        \"pub\",                // 53\n+        \"pure\",               // 54\n+        \"ref\",                // 55\n+        \"return\",             // 56\n+        \"static\",             // 27 -- also a special ident\n         \"self\",               //  8 -- also a special ident\n-        \"struct\",             // 60\n-        \"super\",              // 61\n-        \"true\",               // 62\n-        \"trait\",              // 63\n-        \"type\",               // 64\n-        \"unsafe\",             // 65\n-        \"use\",                // 66\n-        \"while\",              // 67\n-\n-        \"be\",                 // 68\n+        \"struct\",             // 57\n+        \"super\",              // 58\n+        \"true\",               // 59\n+        \"trait\",              // 60\n+        \"type\",               // 61\n+        \"unsafe\",             // 62\n+        \"use\",                // 63\n+        \"while\",              // 64\n+\n+        \"be\",                 // 65\n     ];\n \n     @ident_interner {\n@@ -612,42 +606,42 @@ pub mod keywords {\n     impl Keyword {\n         pub fn to_ident(&self) -> ident {\n             match *self {\n-                As => ident { name: 35, ctxt: 0 },\n-                Break => ident { name: 36, ctxt: 0 },\n-                Const => ident { name: 37, ctxt: 0 },\n-                Copy => ident { name: 38, ctxt: 0 },\n-                Do => ident { name: 39, ctxt: 0 },\n-                Else => ident { name: 40, ctxt: 0 },\n-                Enum => ident { name: 41, ctxt: 0 },\n-                Extern => ident { name: 42, ctxt: 0 },\n-                False => ident { name: 43, ctxt: 0 },\n-                Fn => ident { name: 44, ctxt: 0 },\n-                For => ident { name: 45, ctxt: 0 },\n-                If => ident { name: 46, ctxt: 0 },\n-                Impl => ident { name: 47, ctxt: 0 },\n-                Let => ident { name: 48, ctxt: 0 },\n-                __Log => ident { name: 49, ctxt: 0 },\n-                Loop => ident { name: 50, ctxt: 0 },\n-                Match => ident { name: 51, ctxt: 0 },\n-                Mod => ident { name: 52, ctxt: 0 },\n-                Mut => ident { name: 53, ctxt: 0 },\n-                Once => ident { name: 54, ctxt: 0 },\n-                Priv => ident { name: 55, ctxt: 0 },\n-                Pub => ident { name: 56, ctxt: 0 },\n-                Pure => ident { name: 57, ctxt: 0 },\n-                Ref => ident { name: 58, ctxt: 0 },\n-                Return => ident { name: 59, ctxt: 0 },\n-                Static => ident { name: 29, ctxt: 0 },\n+                As => ident { name: 32, ctxt: 0 },\n+                Break => ident { name: 33, ctxt: 0 },\n+                Const => ident { name: 34, ctxt: 0 },\n+                Copy => ident { name: 35, ctxt: 0 },\n+                Do => ident { name: 36, ctxt: 0 },\n+                Else => ident { name: 37, ctxt: 0 },\n+                Enum => ident { name: 38, ctxt: 0 },\n+                Extern => ident { name: 39, ctxt: 0 },\n+                False => ident { name: 40, ctxt: 0 },\n+                Fn => ident { name: 41, ctxt: 0 },\n+                For => ident { name: 42, ctxt: 0 },\n+                If => ident { name: 43, ctxt: 0 },\n+                Impl => ident { name: 44, ctxt: 0 },\n+                Let => ident { name: 45, ctxt: 0 },\n+                __Log => ident { name: 46, ctxt: 0 },\n+                Loop => ident { name: 47, ctxt: 0 },\n+                Match => ident { name: 48, ctxt: 0 },\n+                Mod => ident { name: 49, ctxt: 0 },\n+                Mut => ident { name: 50, ctxt: 0 },\n+                Once => ident { name: 51, ctxt: 0 },\n+                Priv => ident { name: 52, ctxt: 0 },\n+                Pub => ident { name: 53, ctxt: 0 },\n+                Pure => ident { name: 54, ctxt: 0 },\n+                Ref => ident { name: 55, ctxt: 0 },\n+                Return => ident { name: 56, ctxt: 0 },\n+                Static => ident { name: 27, ctxt: 0 },\n                 Self => ident { name: 8, ctxt: 0 },\n-                Struct => ident { name: 60, ctxt: 0 },\n-                Super => ident { name: 61, ctxt: 0 },\n-                True => ident { name: 62, ctxt: 0 },\n-                Trait => ident { name: 63, ctxt: 0 },\n-                Type => ident { name: 64, ctxt: 0 },\n-                Unsafe => ident { name: 65, ctxt: 0 },\n-                Use => ident { name: 66, ctxt: 0 },\n-                While => ident { name: 67, ctxt: 0 },\n-                Be => ident { name: 68, ctxt: 0 },\n+                Struct => ident { name: 57, ctxt: 0 },\n+                Super => ident { name: 58, ctxt: 0 },\n+                True => ident { name: 59, ctxt: 0 },\n+                Trait => ident { name: 60, ctxt: 0 },\n+                Type => ident { name: 61, ctxt: 0 },\n+                Unsafe => ident { name: 62, ctxt: 0 },\n+                Use => ident { name: 63, ctxt: 0 },\n+                While => ident { name: 64, ctxt: 0 },\n+                Be => ident { name: 65, ctxt: 0 },\n             }\n         }\n     }\n@@ -663,7 +657,7 @@ pub fn is_keyword(kw: keywords::Keyword, tok: &Token) -> bool {\n pub fn is_any_keyword(tok: &Token) -> bool {\n     match *tok {\n         token::IDENT(sid, false) => match sid.name {\n-            8 | 29 | 35 .. 68 => true,\n+            8 | 27 | 32 .. 65 => true,\n             _ => false,\n         },\n         _ => false\n@@ -673,7 +667,7 @@ pub fn is_any_keyword(tok: &Token) -> bool {\n pub fn is_strict_keyword(tok: &Token) -> bool {\n     match *tok {\n         token::IDENT(sid, false) => match sid.name {\n-            8 | 29 | 35 .. 67 => true,\n+            8 | 27 | 32 .. 64 => true,\n             _ => false,\n         },\n         _ => false,\n@@ -683,7 +677,7 @@ pub fn is_strict_keyword(tok: &Token) -> bool {\n pub fn is_reserved_keyword(tok: &Token) -> bool {\n     match *tok {\n         token::IDENT(sid, false) => match sid.name {\n-            68 => true,\n+            65 => true,\n             _ => false,\n         },\n         _ => false,"}]}