{"sha": "3bc4da96f16298c0575ae82904a2552f7ee1547c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiYzRkYTk2ZjE2Mjk4YzA1NzVhZTgyOTA0YTI1NTJmN2VlMTU0N2M=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-20T21:38:10Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-20T21:38:10Z"}, "message": "Inject \"core macros\" into default syntax-expansion environment. Bit of a kludge but enough to work on logging-via-macros.", "tree": {"sha": "7541adb6b9478af4483c4147ef0f2085e9f28444", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7541adb6b9478af4483c4147ef0f2085e9f28444"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bc4da96f16298c0575ae82904a2552f7ee1547c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bc4da96f16298c0575ae82904a2552f7ee1547c", "html_url": "https://github.com/rust-lang/rust/commit/3bc4da96f16298c0575ae82904a2552f7ee1547c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bc4da96f16298c0575ae82904a2552f7ee1547c/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a24c19e8678b6c373c2bf9bdf58b823c8fdd51b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a24c19e8678b6c373c2bf9bdf58b823c8fdd51b2", "html_url": "https://github.com/rust-lang/rust/commit/a24c19e8678b6c373c2bf9bdf58b823c8fdd51b2"}], "stats": {"total": 69, "additions": 48, "deletions": 21}, "files": [{"sha": "8cdbcd32caef5706421d09a08558e289ba2f9519", "filename": "src/comp/syntax/codemap.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bc4da96f16298c0575ae82904a2552f7ee1547c/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc4da96f16298c0575ae82904a2552f7ee1547c/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fcodemap.rs?ref=3bc4da96f16298c0575ae82904a2552f7ee1547c", "patch": "@@ -34,12 +34,16 @@ fn next_line(file: filemap, chpos: uint, byte_pos: uint) {\n type lookup_fn = fn(file_pos) -> uint;\n \n fn lookup_pos(map: codemap, pos: uint, lookup: lookup_fn) -> loc {\n+    let len = vec::len(map.files);\n     let a = 0u;\n-    let b = vec::len(map.files);\n+    let b = len;\n     while b - a > 1u {\n         let m = (a + b) / 2u;\n         if lookup(map.files[m].start_pos) > pos { b = m; } else { a = m; }\n     }\n+    if (a >= len) {\n+        ret { filename: \"-\", line: 0u, col: 0u };\n+    }\n     let f = map.files[a];\n     a = 0u;\n     b = vec::len(f.lines);"}, {"sha": "798e948a12e8dd83347fc2a4cabc58f15e1ce7ba", "filename": "src/comp/syntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3bc4da96f16298c0575ae82904a2552f7ee1547c/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc4da96f16298c0575ae82904a2552f7ee1547c/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs?ref=3bc4da96f16298c0575ae82904a2552f7ee1547c", "patch": "@@ -34,9 +34,7 @@ fn syntax_expander_table() -> hashmap<str, syntax_extension> {\n }\n \n obj ext_ctxt(sess: @session,\n-             crate_file_name_hack: str,\n              mutable backtrace: codemap::opt_span) {\n-    fn crate_file_name() -> str { ret crate_file_name_hack; }\n \n     fn session() -> @session { ret sess; }\n \n@@ -82,16 +80,7 @@ obj ext_ctxt(sess: @session,\n }\n \n fn mk_ctxt(sess: session) -> ext_ctxt {\n-    // FIXME: Some extensions work by building ASTs with paths to functions\n-    // they need to call at runtime. As those functions live in the std crate,\n-    // the paths are prefixed with \"std::\". Unfortunately, these paths can't\n-    // work for code called from inside the stdard library, so here we pass\n-    // the extensions the file name of the crate being compiled so they can\n-    // use it to guess whether paths should be prepended with \"std::\". This is\n-    // super-ugly and needs a better solution.\n-    let crate_file_name_hack = sess.get_codemap().files[0].name;\n-\n-    ret ext_ctxt(@sess, crate_file_name_hack, codemap::os_none);\n+    ret ext_ctxt(@sess, codemap::os_none);\n }\n \n fn expr_to_str(cx: ext_ctxt, expr: @ast::expr, error: str) -> str {"}, {"sha": "150f9ad97bb425789e3c2d9c02d81b1c2916a3a3", "filename": "src/comp/syntax/ext/expand.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3bc4da96f16298c0575ae82904a2552f7ee1547c/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc4da96f16298c0575ae82904a2552f7ee1547c/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs?ref=3bc4da96f16298c0575ae82904a2552f7ee1547c", "patch": "@@ -8,7 +8,7 @@ import vec;\n import syntax::ast::{crate, expr_, expr_mac, mac_invoc};\n import syntax::fold::*;\n import syntax::ext::base::*;\n-\n+import syntax::parse::parser::parse_expr_from_source_str;\n \n fn expand_expr(exts: hashmap<str, syntax_extension>, cx: ext_ctxt, e: expr_,\n                fld: ast_fold, orig: fn@(expr_, ast_fold) -> expr_) -> expr_ {\n@@ -47,6 +47,21 @@ fn expand_expr(exts: hashmap<str, syntax_extension>, cx: ext_ctxt, e: expr_,\n         };\n }\n \n+// FIXME: this is a terrible kludge to inject some macros into the default\n+// compilation environment. When the macro-definition system is substantially\n+// more mature, these should move from here, into a compiled part of libcore\n+// at very least.\n+\n+fn core_macros() -> str {\n+    ret\n+\"{\n+    #macro[[#error[f, ...], log_err #fmt[f, ...]]];\n+    #macro[[#warn[f, ...], log_err #fmt[f, ...]]];\n+    #macro[[#info[f, ...], log_err #fmt[f, ...]]];\n+    #macro[[#debug[f, ...], log_err #fmt[f, ...]]];\n+}\";\n+}\n+\n fn expand_crate(sess: session::session, c: @crate) -> @crate {\n     let exts = syntax_expander_table();\n     let afp = default_ast_fold();\n@@ -55,9 +70,16 @@ fn expand_crate(sess: session::session, c: @crate) -> @crate {\n         {fold_expr: bind expand_expr(exts, cx, _, _, afp.fold_expr)\n             with *afp};\n     let f = make_fold(f_pre);\n+    let cm = parse_expr_from_source_str(\"-\", core_macros(),\n+                                        sess.get_opts().cfg,\n+                                        sess.get_parse_sess());\n+\n+    // This is run for its side-effects on the expander env,\n+    // as it registers all the core macros as expanders.\n+    f.fold_expr(cm);\n+\n     let res = @f.fold_crate(*c);\n     ret res;\n-\n }\n // Local Variables:\n // mode: rust"}, {"sha": "43270de40495867abf39575584dac773ec661dfa", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3bc4da96f16298c0575ae82904a2552f7ee1547c/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc4da96f16298c0575ae82904a2552f7ee1547c/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=3bc4da96f16298c0575ae82904a2552f7ee1547c", "patch": "@@ -71,6 +71,16 @@ fn new_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg, path: str,\n     ret new_parser(sess, cfg, rdr, ftype);\n }\n \n+fn new_parser_from_source_str(sess: parse_sess, cfg: ast::crate_cfg,\n+                              name: str, source: str) -> parser {\n+    let ftype = SOURCE_FILE;\n+    let filemap = codemap::new_filemap(name, 0u, 0u);\n+    sess.cm.files += [filemap];\n+    let itr = @interner::mk(str::hash, str::eq);\n+    let rdr = lexer::new_reader(sess.cm, source, filemap, itr);\n+    ret new_parser(sess, cfg, rdr, ftype);\n+}\n+\n fn new_parser(sess: parse_sess, cfg: ast::crate_cfg, rdr: lexer::reader,\n               ftype: file_type) -> parser {\n     obj stdio_parser(sess: parse_sess,\n@@ -2417,14 +2427,16 @@ fn parse_crate_from_source_file(input: str, cfg: ast::crate_cfg,\n     ret parse_crate_mod(p, cfg);\n }\n \n+\n+fn parse_expr_from_source_str(name: str, source: str, cfg: ast::crate_cfg,\n+                              sess: parse_sess) -> @ast::expr {\n+    let p = new_parser_from_source_str(sess, cfg, name, source);\n+    ret parse_expr(p);\n+}\n+\n fn parse_crate_from_source_str(name: str, source: str, cfg: ast::crate_cfg,\n                                sess: parse_sess) -> @ast::crate {\n-    let ftype = SOURCE_FILE;\n-    let filemap = codemap::new_filemap(name, 0u, 0u);\n-    sess.cm.files += [filemap];\n-    let itr = @interner::mk(str::hash, str::eq);\n-    let rdr = lexer::new_reader(sess.cm, source, filemap, itr);\n-    let p = new_parser(sess, cfg, rdr, ftype);\n+    let p = new_parser_from_source_str(sess, cfg, name, source);\n     ret parse_crate_mod(p, cfg);\n }\n "}]}