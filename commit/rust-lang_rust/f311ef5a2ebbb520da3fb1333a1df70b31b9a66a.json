{"sha": "f311ef5a2ebbb520da3fb1333a1df70b31b9a66a", "node_id": "C_kwDOAAsO6NoAKGYzMTFlZjVhMmViYmI1MjBkYTNmYjEzMzNhMWRmNzBiMzFiOWE2NmE", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-13T12:32:20Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-13T12:32:20Z"}, "message": "Share cross-compilation code between building and testing", "tree": {"sha": "c90c4219295bda4504b2883d8c2a46818d057a98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c90c4219295bda4504b2883d8c2a46818d057a98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f311ef5a2ebbb520da3fb1333a1df70b31b9a66a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f311ef5a2ebbb520da3fb1333a1df70b31b9a66a", "html_url": "https://github.com/rust-lang/rust/commit/f311ef5a2ebbb520da3fb1333a1df70b31b9a66a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f311ef5a2ebbb520da3fb1333a1df70b31b9a66a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70a1cb9e62df17fbba0d30c884c7d98edf2ef780", "url": "https://api.github.com/repos/rust-lang/rust/commits/70a1cb9e62df17fbba0d30c884c7d98edf2ef780", "html_url": "https://github.com/rust-lang/rust/commit/70a1cb9e62df17fbba0d30c884c7d98edf2ef780"}], "stats": {"total": 97, "additions": 46, "deletions": 51}, "files": [{"sha": "3ec00e08ef79780b0dccdaa7c2023a4b46c79879", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f311ef5a2ebbb520da3fb1333a1df70b31b9a66a/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f311ef5a2ebbb520da3fb1333a1df70b31b9a66a/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=f311ef5a2ebbb520da3fb1333a1df70b31b9a66a", "patch": "@@ -120,26 +120,19 @@ pub(crate) fn build_sysroot(\n                 channel,\n                 host_compiler.clone(),\n                 &cg_clif_dylib_path,\n-                None,\n             );\n \n             if host_compiler.triple != target_triple {\n-                // When cross-compiling it is often necessary to manually pick the right linker\n-                let linker = match target_triple {\n-                    \"aarch64-unknown-linux-gnu\" => Some(\"aarch64-linux-gnu-gcc\"),\n-                    \"s390x-unknown-linux-gnu\" => Some(\"s390x-linux-gnu-gcc\"),\n-                    _ => None,\n-                };\n                 build_clif_sysroot_for_triple(\n                     dirs,\n                     channel,\n                     {\n                         let mut target_compiler = host_compiler.clone();\n                         target_compiler.triple = target_triple.to_owned();\n+                        target_compiler.set_cross_linker_and_runner();\n                         target_compiler\n                     },\n                     &cg_clif_dylib_path,\n-                    linker,\n                 );\n             }\n \n@@ -167,7 +160,6 @@ fn build_clif_sysroot_for_triple(\n     channel: &str,\n     mut compiler: Compiler,\n     cg_clif_dylib_path: &Path,\n-    linker: Option<&str>,\n ) {\n     match fs::read_to_string(SYSROOT_RUSTC_VERSION.to_path(dirs)) {\n         Err(e) => {\n@@ -204,10 +196,6 @@ fn build_clif_sysroot_for_triple(\n     if channel == \"release\" {\n         rustflags.push_str(\" -Zmir-opt-level=3\");\n     }\n-    if let Some(linker) = linker {\n-        use std::fmt::Write;\n-        write!(rustflags, \" -Clinker={}\", linker).unwrap();\n-    }\n     compiler.rustflags += &rustflags;\n     let mut build_cmd = STANDARD_LIBRARY.build(&compiler, dirs);\n     if channel == \"release\" {"}, {"sha": "6993fdee40524ac680b37e768244f057f6f8ffa5", "filename": "build_system/tests.rs", "status": "modified", "additions": 13, "deletions": 38, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/f311ef5a2ebbb520da3fb1333a1df70b31b9a66a/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f311ef5a2ebbb520da3fb1333a1df70b31b9a66a/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=f311ef5a2ebbb520da3fb1333a1df70b31b9a66a", "patch": "@@ -448,51 +448,26 @@ impl TestRunner {\n         let jit_supported =\n             is_native && host_triple.contains(\"x86_64\") && !host_triple.contains(\"windows\");\n \n-        let mut rustflags = env::var(\"RUSTFLAGS\").ok().unwrap_or(\"\".to_string());\n-        let mut runner = vec![];\n+        let host_compiler = Compiler::clif_with_triple(&dirs, host_triple);\n \n+        let mut target_compiler = Compiler::clif_with_triple(&dirs, target_triple);\n         if !is_native {\n-            match target_triple.as_str() {\n-                \"aarch64-unknown-linux-gnu\" => {\n-                    // We are cross-compiling for aarch64. Use the correct linker and run tests in qemu.\n-                    rustflags = format!(\"-Clinker=aarch64-linux-gnu-gcc{}\", rustflags);\n-                    runner = vec![\n-                        \"qemu-aarch64\".to_owned(),\n-                        \"-L\".to_owned(),\n-                        \"/usr/aarch64-linux-gnu\".to_owned(),\n-                    ];\n-                }\n-                \"s390x-unknown-linux-gnu\" => {\n-                    // We are cross-compiling for s390x. Use the correct linker and run tests in qemu.\n-                    rustflags = format!(\"-Clinker=s390x-linux-gnu-gcc{}\", rustflags);\n-                    runner = vec![\n-                        \"qemu-s390x\".to_owned(),\n-                        \"-L\".to_owned(),\n-                        \"/usr/s390x-linux-gnu\".to_owned(),\n-                    ];\n-                }\n-                \"x86_64-pc-windows-gnu\" => {\n-                    // We are cross-compiling for Windows. Run tests in wine.\n-                    runner = vec![\"wine\".to_owned()];\n-                }\n-                _ => {\n-                    println!(\"Unknown non-native platform\");\n-                }\n-            }\n+            target_compiler.set_cross_linker_and_runner();\n+        }\n+        if let Ok(rustflags) = env::var(\"RUSTFLAGS\") {\n+            target_compiler.rustflags.push(' ');\n+            target_compiler.rustflags.push_str(&rustflags);\n+        }\n+        if let Ok(rustdocflags) = env::var(\"RUSTDOCFLAGS\") {\n+            target_compiler.rustdocflags.push(' ');\n+            target_compiler.rustdocflags.push_str(&rustdocflags);\n         }\n \n         // FIXME fix `#[linkage = \"extern_weak\"]` without this\n-        if target_triple.contains(\"darwin\") {\n-            rustflags = format!(\"{} -Clink-arg=-undefined -Clink-arg=dynamic_lookup\", rustflags);\n+        if target_compiler.triple.contains(\"darwin\") {\n+            target_compiler.rustflags.push_str(\" -Clink-arg=-undefined -Clink-arg=dynamic_lookup\");\n         }\n \n-        let host_compiler = Compiler::clif_with_triple(&dirs, host_triple);\n-\n-        let mut target_compiler = Compiler::clif_with_triple(&dirs, target_triple);\n-        target_compiler.rustflags = rustflags.clone();\n-        target_compiler.rustdocflags = rustflags;\n-        target_compiler.runner = runner;\n-\n         Self { is_native, jit_supported, dirs, host_compiler, target_compiler }\n     }\n "}, {"sha": "77cbf9b26fdc0e2334556122d2baf024ff482e80", "filename": "build_system/utils.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f311ef5a2ebbb520da3fb1333a1df70b31b9a66a/build_system%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f311ef5a2ebbb520da3fb1333a1df70b31b9a66a/build_system%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Futils.rs?ref=f311ef5a2ebbb520da3fb1333a1df70b31b9a66a", "patch": "@@ -47,6 +47,38 @@ impl Compiler {\n             runner: vec![],\n         }\n     }\n+\n+    pub(crate) fn set_cross_linker_and_runner(&mut self) {\n+        match self.triple.as_str() {\n+            \"aarch64-unknown-linux-gnu\" => {\n+                // We are cross-compiling for aarch64. Use the correct linker and run tests in qemu.\n+                self.rustflags += \" -Clinker=aarch64-linux-gnu-gcc\";\n+                self.rustdocflags += \" -Clinker=aarch64-linux-gnu-gcc\";\n+                self.runner = vec![\n+                    \"qemu-aarch64\".to_owned(),\n+                    \"-L\".to_owned(),\n+                    \"/usr/aarch64-linux-gnu\".to_owned(),\n+                ];\n+            }\n+            \"s390x-unknown-linux-gnu\" => {\n+                // We are cross-compiling for s390x. Use the correct linker and run tests in qemu.\n+                self.rustflags += \" -Clinker=s390x-linux-gnu-gcc\";\n+                self.rustdocflags += \" -Clinker=s390x-linux-gnu-gcc\";\n+                self.runner = vec![\n+                    \"qemu-s390x\".to_owned(),\n+                    \"-L\".to_owned(),\n+                    \"/usr/s390x-linux-gnu\".to_owned(),\n+                ];\n+            }\n+            \"x86_64-pc-windows-gnu\" => {\n+                // We are cross-compiling for Windows. Run tests in wine.\n+                self.runner = vec![\"wine\".to_owned()];\n+            }\n+            _ => {\n+                println!(\"Unknown non-native platform\");\n+            }\n+        }\n+    }\n }\n \n pub(crate) struct CargoProject {"}]}