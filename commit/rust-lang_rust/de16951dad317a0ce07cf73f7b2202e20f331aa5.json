{"sha": "de16951dad317a0ce07cf73f7b2202e20f331aa5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMTY5NTFkYWQzMTdhMGNlMDdjZjczZjdiMjIwMmUyMGYzMzFhYTU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-04-19T14:48:51Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-04-19T15:17:45Z"}, "message": "Clarify the difference between insert and get_or_insert", "tree": {"sha": "807d61ab01f983809011115223a06b4b8ffdb9ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/807d61ab01f983809011115223a06b4b8ffdb9ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de16951dad317a0ce07cf73f7b2202e20f331aa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de16951dad317a0ce07cf73f7b2202e20f331aa5", "html_url": "https://github.com/rust-lang/rust/commit/de16951dad317a0ce07cf73f7b2202e20f331aa5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de16951dad317a0ce07cf73f7b2202e20f331aa5/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62652865b6029b4776a7c03efa13a37b15c9b953", "url": "https://api.github.com/repos/rust-lang/rust/commits/62652865b6029b4776a7c03efa13a37b15c9b953", "html_url": "https://github.com/rust-lang/rust/commit/62652865b6029b4776a7c03efa13a37b15c9b953"}], "stats": {"total": 64, "additions": 35, "deletions": 29}, "files": [{"sha": "1c68abaf79d2355ece2f4f4e0ce56f192b65b14b", "filename": "library/core/src/option.rs", "status": "modified", "additions": 35, "deletions": 29, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/de16951dad317a0ce07cf73f7b2202e20f331aa5/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de16951dad317a0ce07cf73f7b2202e20f331aa5/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=de16951dad317a0ce07cf73f7b2202e20f331aa5", "patch": "@@ -594,34 +594,6 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Inserts `value` into the option then returns a mutable reference to it.\n-    ///\n-    /// If the option already contains a value, the old value is dropped.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```\n-    /// let mut opt = None;\n-    /// let val = opt.insert(1);\n-    /// assert_eq!(*val, 1);\n-    /// assert_eq!(opt.unwrap(), 1);\n-    /// let val = opt.insert(2);\n-    /// assert_eq!(*val, 2);\n-    /// *val = 3;\n-    /// assert_eq!(opt.unwrap(), 3);\n-    /// ```\n-    #[inline]\n-    #[stable(feature = \"option_insert\", since = \"1.53.0\")]\n-    pub fn insert(&mut self, value: T) -> &mut T {\n-        *self = Some(value);\n-\n-        match self {\n-            Some(v) => v,\n-            // SAFETY: the code above just filled the option\n-            None => unsafe { hint::unreachable_unchecked() },\n-        }\n-    }\n-\n     /////////////////////////////////////////////////////////////////////////\n     // Iterator constructors\n     /////////////////////////////////////////////////////////////////////////\n@@ -849,12 +821,46 @@ impl<T> Option<T> {\n     }\n \n     /////////////////////////////////////////////////////////////////////////\n-    // Entry-like operations to insert if None and return a reference\n+    // Entry-like operations to insert a value and return a reference\n     /////////////////////////////////////////////////////////////////////////\n \n+    /// Inserts `value` into the option then returns a mutable reference to it.\n+    ///\n+    /// If the option already contains a value, the old value is dropped.\n+    ///\n+    /// See also [`Option::get_or_insert`], which doesn't update the value if\n+    /// the option already contains [`Some`].\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// let mut opt = None;\n+    /// let val = opt.insert(1);\n+    /// assert_eq!(*val, 1);\n+    /// assert_eq!(opt.unwrap(), 1);\n+    /// let val = opt.insert(2);\n+    /// assert_eq!(*val, 2);\n+    /// *val = 3;\n+    /// assert_eq!(opt.unwrap(), 3);\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"option_insert\", since = \"1.53.0\")]\n+    pub fn insert(&mut self, value: T) -> &mut T {\n+        *self = Some(value);\n+\n+        match self {\n+            Some(v) => v,\n+            // SAFETY: the code above just filled the option\n+            None => unsafe { hint::unreachable_unchecked() },\n+        }\n+    }\n+\n     /// Inserts `value` into the option if it is [`None`], then\n     /// returns a mutable reference to the contained value.\n     ///\n+    /// See also [`Option::insert`], which updates the value even if\n+    /// the option already contains [`Some`].\n+    ///\n     /// # Examples\n     ///\n     /// ```"}]}