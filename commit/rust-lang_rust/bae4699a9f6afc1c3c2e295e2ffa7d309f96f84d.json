{"sha": "bae4699a9f6afc1c3c2e295e2ffa7d309f96f84d", "node_id": "C_kwDOAAsO6NoAKGJhZTQ2OTlhOWY2YWZjMWMzYzJlMjk1ZTJmZmE3ZDMwOWY5NmY4NGQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-14T19:56:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-14T19:56:12Z"}, "message": "Auto merge of #9476 - Xaeroxe:bool-to-int-inverted, r=xFrednet\n\n`bool_to_int_with_if` inverse case patch\n\nEnhances `bool_to_int_with_if` such that it can also catch an inverse bool int conversion scenario, and makes the right suggestion for converting to int with a prefixed negation operator.\n\nchangelog: [`bool_to_int_with_if`]: Now correctly detects the inverse case, `if bool { 0 } else { 1 }`", "tree": {"sha": "c3434ddecda069bc3abcb7c2efd48678df97eb32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3434ddecda069bc3abcb7c2efd48678df97eb32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bae4699a9f6afc1c3c2e295e2ffa7d309f96f84d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bae4699a9f6afc1c3c2e295e2ffa7d309f96f84d", "html_url": "https://github.com/rust-lang/rust/commit/bae4699a9f6afc1c3c2e295e2ffa7d309f96f84d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bae4699a9f6afc1c3c2e295e2ffa7d309f96f84d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ddbc86bef837b1072159c020c35940ce52ae696", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ddbc86bef837b1072159c020c35940ce52ae696", "html_url": "https://github.com/rust-lang/rust/commit/2ddbc86bef837b1072159c020c35940ce52ae696"}, {"sha": "dd97c1ed205f47d13dc5bc482a73c0c76383d159", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd97c1ed205f47d13dc5bc482a73c0c76383d159", "html_url": "https://github.com/rust-lang/rust/commit/dd97c1ed205f47d13dc5bc482a73c0c76383d159"}], "stats": {"total": 123, "additions": 88, "deletions": 35}, "files": [{"sha": "51e98cda845193958d907b4fc721587dda8118a7", "filename": "clippy_lints/src/bool_to_int_with_if.rs", "status": "modified", "additions": 29, "deletions": 18, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/bae4699a9f6afc1c3c2e295e2ffa7d309f96f84d/clippy_lints%2Fsrc%2Fbool_to_int_with_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae4699a9f6afc1c3c2e295e2ffa7d309f96f84d/clippy_lints%2Fsrc%2Fbool_to_int_with_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbool_to_int_with_if.rs?ref=bae4699a9f6afc1c3c2e295e2ffa7d309f96f84d", "patch": "@@ -1,9 +1,9 @@\n-use rustc_ast::{ExprPrecedence, LitKind};\n+use rustc_ast::LitKind;\n use rustc_hir::{Block, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use clippy_utils::{diagnostics::span_lint_and_then, is_else_clause, source::snippet_block_with_applicability};\n+use clippy_utils::{diagnostics::span_lint_and_then, is_else_clause, sugg::Sugg};\n use rustc_errors::Applicability;\n \n declare_clippy_lint! {\n@@ -55,27 +55,42 @@ fn check_if_else<'tcx>(ctx: &LateContext<'tcx>, expr: &'tcx rustc_hir::Expr<'tcx\n     if let ExprKind::If(check, then, Some(else_)) = expr.kind\n         && let Some(then_lit) = int_literal(then)\n         && let Some(else_lit) = int_literal(else_)\n-        && check_int_literal_equals_val(then_lit, 1)\n-        && check_int_literal_equals_val(else_lit, 0)\n     {\n+        let inverted = if\n+            check_int_literal_equals_val(then_lit, 1)\n+            && check_int_literal_equals_val(else_lit, 0) {\n+            false\n+        } else if\n+            check_int_literal_equals_val(then_lit, 0)\n+            && check_int_literal_equals_val(else_lit, 1) {\n+            true\n+        } else {\n+            // Expression isn't boolean, exit\n+            return;\n+        };\n         let mut applicability = Applicability::MachineApplicable;\n-        let snippet = snippet_block_with_applicability(ctx, check.span, \"..\", None, &mut applicability);\n-        let snippet_with_braces = {\n-            let need_parens = should_have_parentheses(check);\n-            let (left_paren, right_paren) = if need_parens {(\"(\", \")\")} else {(\"\", \"\")};\n-            format!(\"{left_paren}{snippet}{right_paren}\")\n+        let snippet = {\n+            let mut sugg = Sugg::hir_with_applicability(ctx, check, \"..\", &mut applicability);\n+            if inverted {\n+                sugg = !sugg;\n+            }\n+            sugg\n         };\n \n         let ty = ctx.typeck_results().expr_ty(then_lit); // then and else must be of same type\n \n         let suggestion = {\n             let wrap_in_curly = is_else_clause(ctx.tcx, expr);\n-            let (left_curly, right_curly) = if wrap_in_curly {(\"{\", \"}\")} else {(\"\", \"\")};\n-            format!(\n-                \"{left_curly}{ty}::from({snippet}){right_curly}\"\n-            )\n+            let mut s = Sugg::NonParen(format!(\"{ty}::from({snippet})\").into());\n+            if wrap_in_curly {\n+                s = s.blockify();\n+            }\n+            s\n         }; // when used in else clause if statement should be wrapped in curly braces\n \n+        let into_snippet = snippet.clone().maybe_par();\n+        let as_snippet = snippet.as_ty(ty);\n+\n         span_lint_and_then(ctx,\n             BOOL_TO_INT_WITH_IF,\n             expr.span,\n@@ -87,7 +102,7 @@ fn check_if_else<'tcx>(ctx: &LateContext<'tcx>, expr: &'tcx rustc_hir::Expr<'tcx\n                 suggestion,\n                 applicability,\n             );\n-            diag.note(format!(\"`{snippet_with_braces} as {ty}` or `{snippet_with_braces}.into()` can also be valid options\"));\n+            diag.note(format!(\"`{as_snippet}` or `{into_snippet}.into()` can also be valid options\"));\n         });\n     };\n }\n@@ -119,7 +134,3 @@ fn check_int_literal_equals_val<'tcx>(expr: &'tcx rustc_hir::Expr<'tcx>, expecte\n         false\n     }\n }\n-\n-fn should_have_parentheses<'tcx>(check: &'tcx rustc_hir::Expr<'tcx>) -> bool {\n-    check.precedence().order() < ExprPrecedence::Cast.order()\n-}"}, {"sha": "d1b25a0f1b53514116259ae608fdffbec4c0d897", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bae4699a9f6afc1c3c2e295e2ffa7d309f96f84d/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae4699a9f6afc1c3c2e295e2ffa7d309f96f84d/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=bae4699a9f6afc1c3c2e295e2ffa7d309f96f84d", "patch": "@@ -297,13 +297,10 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n                         if !is_lint_allowed(cx, EXPLICIT_DEREF_METHODS, expr.hir_id)\n                             && position.lint_explicit_deref() =>\n                     {\n+                        let ty_changed_count = usize::from(!deref_method_same_type(expr_ty, typeck.expr_ty(sub_expr)));\n                         self.state = Some((\n                             State::DerefMethod {\n-                                ty_changed_count: if deref_method_same_type(expr_ty, typeck.expr_ty(sub_expr)) {\n-                                    0\n-                                } else {\n-                                    1\n-                                },\n+                                ty_changed_count,\n                                 is_final_ufcs: matches!(expr.kind, ExprKind::Call(..)),\n                                 target_mut,\n                             },"}, {"sha": "b32e5d8d4210e684b2315098984298ff01624df2", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bae4699a9f6afc1c3c2e295e2ffa7d309f96f84d/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae4699a9f6afc1c3c2e295e2ffa7d309f96f84d/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=bae4699a9f6afc1c3c2e295e2ffa7d309f96f84d", "patch": "@@ -269,7 +269,7 @@ fn check_other_call_arg<'tcx>(\n         // We can't add an `&` when the trait is `Deref` because `Target = &T` won't match\n         // `Target = T`.\n         if n_refs > 0 || is_copy(cx, receiver_ty) || trait_predicate.def_id() != deref_trait_id;\n-        let n_refs = max(n_refs, if is_copy(cx, receiver_ty) { 0 } else { 1 });\n+        let n_refs = max(n_refs, usize::from(!is_copy(cx, receiver_ty)));\n         if let Some(receiver_snippet) = snippet_opt(cx, receiver.span);\n         then {\n             span_lint_and_sugg("}, {"sha": "f08275a4ac76bb8631ac096363faac8c466b20cc", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bae4699a9f6afc1c3c2e295e2ffa7d309f96f84d/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae4699a9f6afc1c3c2e295e2ffa7d309f96f84d/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=bae4699a9f6afc1c3c2e295e2ffa7d309f96f84d", "patch": "@@ -155,8 +155,8 @@ impl<'a> Sugg<'a> {\n             | hir::ExprKind::Ret(..)\n             | hir::ExprKind::Struct(..)\n             | hir::ExprKind::Tup(..)\n-            | hir::ExprKind::DropTemps(_)\n             | hir::ExprKind::Err => Sugg::NonParen(get_snippet(expr.span)),\n+            hir::ExprKind::DropTemps(inner) => Self::hir_from_snippet(inner, get_snippet),\n             hir::ExprKind::Assign(lhs, rhs, _) => {\n                 Sugg::BinOp(AssocOp::Assign, get_snippet(lhs.span), get_snippet(rhs.span))\n             },"}, {"sha": "2c8339cdd7f8a0fa97d0c3c495fc9d90cfb611f3", "filename": "tests/ui/bool_to_int_with_if.fixed", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bae4699a9f6afc1c3c2e295e2ffa7d309f96f84d/tests%2Fui%2Fbool_to_int_with_if.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bae4699a9f6afc1c3c2e295e2ffa7d309f96f84d/tests%2Fui%2Fbool_to_int_with_if.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_to_int_with_if.fixed?ref=bae4699a9f6afc1c3c2e295e2ffa7d309f96f84d", "patch": "@@ -14,14 +14,20 @@ fn main() {\n     // precedence\n     i32::from(a);\n     i32::from(!a);\n+    i32::from(!a);\n     i32::from(a || b);\n     i32::from(cond(a, b));\n     i32::from(x + y < 4);\n \n     // if else if\n     if a {\n         123\n-    } else {i32::from(b)};\n+    } else { i32::from(b) };\n+\n+    // if else if inverted\n+    if a {\n+        123\n+    } else { i32::from(!b) };\n \n     // Shouldn't lint\n "}, {"sha": "5d9496f01775f84505c823fa594c21c43ae78b6b", "filename": "tests/ui/bool_to_int_with_if.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bae4699a9f6afc1c3c2e295e2ffa7d309f96f84d/tests%2Fui%2Fbool_to_int_with_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae4699a9f6afc1c3c2e295e2ffa7d309f96f84d/tests%2Fui%2Fbool_to_int_with_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_to_int_with_if.rs?ref=bae4699a9f6afc1c3c2e295e2ffa7d309f96f84d", "patch": "@@ -17,6 +17,11 @@ fn main() {\n     } else {\n         0\n     };\n+    if a {\n+        0\n+    } else {\n+        1\n+    };\n     if !a {\n         1\n     } else {\n@@ -47,6 +52,15 @@ fn main() {\n         0\n     };\n \n+    // if else if inverted\n+    if a {\n+        123\n+    } else if b {\n+        0\n+    } else {\n+        1\n+    };\n+\n     // Shouldn't lint\n \n     if a {"}, {"sha": "e695440f6682ff3dd68792a60e6c905cf0f51c3f", "filename": "tests/ui/bool_to_int_with_if.stderr", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/bae4699a9f6afc1c3c2e295e2ffa7d309f96f84d/tests%2Fui%2Fbool_to_int_with_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bae4699a9f6afc1c3c2e295e2ffa7d309f96f84d/tests%2Fui%2Fbool_to_int_with_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_to_int_with_if.stderr?ref=bae4699a9f6afc1c3c2e295e2ffa7d309f96f84d", "patch": "@@ -14,17 +14,29 @@ LL | |     };\n error: boolean to int conversion using if\n   --> $DIR/bool_to_int_with_if.rs:20:5\n    |\n+LL | /     if a {\n+LL | |         0\n+LL | |     } else {\n+LL | |         1\n+LL | |     };\n+   | |_____^ help: replace with from: `i32::from(!a)`\n+   |\n+   = note: `!a as i32` or `(!a).into()` can also be valid options\n+\n+error: boolean to int conversion using if\n+  --> $DIR/bool_to_int_with_if.rs:25:5\n+   |\n LL | /     if !a {\n LL | |         1\n LL | |     } else {\n LL | |         0\n LL | |     };\n    | |_____^ help: replace with from: `i32::from(!a)`\n    |\n-   = note: `!a as i32` or `!a.into()` can also be valid options\n+   = note: `!a as i32` or `(!a).into()` can also be valid options\n \n error: boolean to int conversion using if\n-  --> $DIR/bool_to_int_with_if.rs:25:5\n+  --> $DIR/bool_to_int_with_if.rs:30:5\n    |\n LL | /     if a || b {\n LL | |         1\n@@ -36,7 +48,7 @@ LL | |     };\n    = note: `(a || b) as i32` or `(a || b).into()` can also be valid options\n \n error: boolean to int conversion using if\n-  --> $DIR/bool_to_int_with_if.rs:30:5\n+  --> $DIR/bool_to_int_with_if.rs:35:5\n    |\n LL | /     if cond(a, b) {\n LL | |         1\n@@ -48,7 +60,7 @@ LL | |     };\n    = note: `cond(a, b) as i32` or `cond(a, b).into()` can also be valid options\n \n error: boolean to int conversion using if\n-  --> $DIR/bool_to_int_with_if.rs:35:5\n+  --> $DIR/bool_to_int_with_if.rs:40:5\n    |\n LL | /     if x + y < 4 {\n LL | |         1\n@@ -60,25 +72,38 @@ LL | |     };\n    = note: `(x + y < 4) as i32` or `(x + y < 4).into()` can also be valid options\n \n error: boolean to int conversion using if\n-  --> $DIR/bool_to_int_with_if.rs:44:12\n+  --> $DIR/bool_to_int_with_if.rs:49:12\n    |\n LL |       } else if b {\n    |  ____________^\n LL | |         1\n LL | |     } else {\n LL | |         0\n LL | |     };\n-   | |_____^ help: replace with from: `{i32::from(b)}`\n+   | |_____^ help: replace with from: `{ i32::from(b) }`\n    |\n    = note: `b as i32` or `b.into()` can also be valid options\n \n error: boolean to int conversion using if\n-  --> $DIR/bool_to_int_with_if.rs:102:5\n+  --> $DIR/bool_to_int_with_if.rs:58:12\n+   |\n+LL |       } else if b {\n+   |  ____________^\n+LL | |         0\n+LL | |     } else {\n+LL | |         1\n+LL | |     };\n+   | |_____^ help: replace with from: `{ i32::from(!b) }`\n+   |\n+   = note: `!b as i32` or `(!b).into()` can also be valid options\n+\n+error: boolean to int conversion using if\n+  --> $DIR/bool_to_int_with_if.rs:116:5\n    |\n LL |     if a { 1 } else { 0 }\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: replace with from: `u8::from(a)`\n    |\n    = note: `a as u8` or `a.into()` can also be valid options\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 9 previous errors\n "}, {"sha": "78397c2af346b0464fa0572caa11eb5fb0a406da", "filename": "tests/ui/len_without_is_empty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bae4699a9f6afc1c3c2e295e2ffa7d309f96f84d/tests%2Fui%2Flen_without_is_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae4699a9f6afc1c3c2e295e2ffa7d309f96f84d/tests%2Fui%2Flen_without_is_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_without_is_empty.rs?ref=bae4699a9f6afc1c3c2e295e2ffa7d309f96f84d", "patch": "@@ -274,7 +274,7 @@ impl AsyncLen {\n     }\n \n     pub async fn len(&self) -> usize {\n-        if self.async_task().await { 0 } else { 1 }\n+        usize::from(!self.async_task().await)\n     }\n \n     pub async fn is_empty(&self) -> bool {"}]}