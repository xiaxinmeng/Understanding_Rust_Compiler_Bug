{"sha": "418dd641dc41e3e9edc832f9083a669836110d15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxOGRkNjQxZGM0MWUzZTllZGM4MzJmOTA4M2E2Njk4MzYxMTBkMTU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-07T13:02:36Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-07T13:02:36Z"}, "message": "test more generator resume things", "tree": {"sha": "532fc2bdb98a63186fd6c9f930ff7e3352f8b1b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/532fc2bdb98a63186fd6c9f930ff7e3352f8b1b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/418dd641dc41e3e9edc832f9083a669836110d15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/418dd641dc41e3e9edc832f9083a669836110d15", "html_url": "https://github.com/rust-lang/rust/commit/418dd641dc41e3e9edc832f9083a669836110d15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/418dd641dc41e3e9edc832f9083a669836110d15/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d208a5fe3b16ce53764df7df610cf929b4a25d57", "url": "https://api.github.com/repos/rust-lang/rust/commits/d208a5fe3b16ce53764df7df610cf929b4a25d57", "html_url": "https://github.com/rust-lang/rust/commit/d208a5fe3b16ce53764df7df610cf929b4a25d57"}], "stats": {"total": 156, "additions": 138, "deletions": 18}, "files": [{"sha": "a7c72ed3530cabbdef7679a8fb6d269da042bfdf", "filename": "tests/run-pass/generator.rs", "status": "modified", "additions": 137, "deletions": 18, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/418dd641dc41e3e9edc832f9083a669836110d15/tests%2Frun-pass%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/418dd641dc41e3e9edc832f9083a669836110d15/tests%2Frun-pass%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fgenerator.rs?ref=418dd641dc41e3e9edc832f9083a669836110d15", "patch": "@@ -1,30 +1,33 @@\n #![feature(generators, generator_trait, never_type)]\n \n-use std::ops::{GeneratorState, Generator};\n+use std::panic::{catch_unwind, AssertUnwindSafe};\n+use std::ops::{GeneratorState::{self, *}, Generator};\n use std::pin::Pin;\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+use std::fmt::Debug;\n \n-fn finish<T>(mut amt: usize, mut t: T) -> T::Return\n-    where T: Generator<Yield = usize>\n-{\n-    // We are not moving the `t` around until it gets dropped, so this is okay.\n-    let mut t = unsafe { Pin::new_unchecked(&mut t) };\n-    loop {\n-        match t.as_mut().resume(()) {\n-            GeneratorState::Yielded(y) => amt -= y,\n-            GeneratorState::Complete(ret) => {\n-                assert_eq!(amt, 0);\n-                return ret\n+fn basic() {\n+    fn finish<T>(mut amt: usize, mut t: T) -> T::Return\n+        where T: Generator<Yield = usize>\n+    {\n+        // We are not moving the `t` around until it gets dropped, so this is okay.\n+        let mut t = unsafe { Pin::new_unchecked(&mut t) };\n+        loop {\n+            match t.as_mut().resume(()) {\n+                GeneratorState::Yielded(y) => amt -= y,\n+                GeneratorState::Complete(ret) => {\n+                    assert_eq!(amt, 0);\n+                    return ret\n+                }\n             }\n         }\n     }\n-}\n \n-enum Never {}\n-fn never() -> Never {\n-    panic!()\n-}\n+    enum Never {}\n+    fn never() -> Never {\n+        panic!()\n+    }\n \n-fn main() {\n     finish(1, || yield 1);\n \n     finish(3, || {\n@@ -94,3 +97,119 @@ fn main() {\n         let _x: (String, !) = (String::new(), { yield 2; return });\n     });\n }\n+\n+fn smoke_resume_arg() {\n+    fn drain<G: Generator<R, Yield = Y> + Unpin, R, Y>(\n+        gen: &mut G,\n+        inout: Vec<(R, GeneratorState<Y, G::Return>)>,\n+    ) where\n+        Y: Debug + PartialEq,\n+        G::Return: Debug + PartialEq,\n+    {\n+        let mut gen = Pin::new(gen);\n+\n+        for (input, out) in inout {\n+            assert_eq!(gen.as_mut().resume(input), out);\n+        }\n+    }\n+\n+    static DROPS: AtomicUsize = AtomicUsize::new(0);\n+\n+    #[derive(Debug, PartialEq)]\n+    struct DropMe;\n+\n+    impl Drop for DropMe {\n+        fn drop(&mut self) {\n+            DROPS.fetch_add(1, Ordering::SeqCst);\n+        }\n+    }\n+\n+    fn expect_drops<T>(expected_drops: usize, f: impl FnOnce() -> T) -> T {\n+        DROPS.store(0, Ordering::SeqCst);\n+\n+        let res = f();\n+\n+        let actual_drops = DROPS.load(Ordering::SeqCst);\n+        assert_eq!(actual_drops, expected_drops);\n+        res\n+    }\n+\n+    drain(\n+        &mut |mut b| {\n+            while b != 0 {\n+                b = yield (b + 1);\n+            }\n+            -1\n+        },\n+        vec![(1, Yielded(2)), (-45, Yielded(-44)), (500, Yielded(501)), (0, Complete(-1))],\n+    );\n+\n+    expect_drops(2, || drain(&mut |a| yield a, vec![(DropMe, Yielded(DropMe))]));\n+\n+    expect_drops(6, || {\n+        drain(\n+            &mut |a| yield yield a,\n+            vec![(DropMe, Yielded(DropMe)), (DropMe, Yielded(DropMe)), (DropMe, Complete(DropMe))],\n+        )\n+    });\n+\n+    #[allow(unreachable_code)]\n+    expect_drops(2, || drain(&mut |a| yield return a, vec![(DropMe, Complete(DropMe))]));\n+\n+    expect_drops(2, || {\n+        drain(\n+            &mut |a: DropMe| {\n+                if false { yield () } else { a }\n+            },\n+            vec![(DropMe, Complete(DropMe))],\n+        )\n+    });\n+\n+    expect_drops(4, || {\n+        drain(\n+            #[allow(unused_assignments, unused_variables)]\n+            &mut |mut a: DropMe| {\n+                a = yield;\n+                a = yield;\n+                a = yield;\n+            },\n+            vec![\n+                (DropMe, Yielded(())),\n+                (DropMe, Yielded(())),\n+                (DropMe, Yielded(())),\n+                (DropMe, Complete(())),\n+            ],\n+        )\n+    });\n+}\n+\n+fn panic_drop_resume() {\n+    static DROP: AtomicUsize = AtomicUsize::new(0);\n+\n+    struct Dropper {}\n+\n+    impl Drop for Dropper {\n+        fn drop(&mut self) {\n+            DROP.fetch_add(1, Ordering::SeqCst);\n+        }\n+    }\n+\n+    let mut gen = |_arg| {\n+        if true {\n+            panic!();\n+        }\n+        yield ();\n+    };\n+    let mut gen = Pin::new(&mut gen);\n+\n+    assert_eq!(DROP.load(Ordering::Acquire), 0);\n+    let res = catch_unwind(AssertUnwindSafe(|| gen.as_mut().resume(Dropper {})));\n+    assert!(res.is_err());\n+    assert_eq!(DROP.load(Ordering::Acquire), 1);\n+}\n+\n+fn main() {\n+    basic();\n+    smoke_resume_arg();\n+    panic_drop_resume();\n+}"}, {"sha": "17f385d4d69515e9b19c9b63011b169543557c74", "filename": "tests/run-pass/generator.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/418dd641dc41e3e9edc832f9083a669836110d15/tests%2Frun-pass%2Fgenerator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/418dd641dc41e3e9edc832f9083a669836110d15/tests%2Frun-pass%2Fgenerator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fgenerator.stderr?ref=418dd641dc41e3e9edc832f9083a669836110d15", "patch": "@@ -0,0 +1 @@\n+thread 'main' panicked at 'explicit panic', $DIR/generator.rs:199:13"}]}