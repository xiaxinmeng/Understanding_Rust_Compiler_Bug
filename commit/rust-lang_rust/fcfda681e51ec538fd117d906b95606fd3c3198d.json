{"sha": "fcfda681e51ec538fd117d906b95606fd3c3198d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjZmRhNjgxZTUxZWM1MzhmZDExN2Q5MDZiOTU2MDZmZDNjMzE5OGQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-03-26T22:54:55Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-03-26T22:54:55Z"}, "message": "Stop using ast_ty_to_ty_cache\n\nIt's not reliable and gets cleared`", "tree": {"sha": "ab418824a306c50045b39a200f60e06ff8b77039", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab418824a306c50045b39a200f60e06ff8b77039"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcfda681e51ec538fd117d906b95606fd3c3198d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcfda681e51ec538fd117d906b95606fd3c3198d", "html_url": "https://github.com/rust-lang/rust/commit/fcfda681e51ec538fd117d906b95606fd3c3198d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcfda681e51ec538fd117d906b95606fd3c3198d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07dc709ba4099bf0c6738f18c2d975c7b893435c", "url": "https://api.github.com/repos/rust-lang/rust/commits/07dc709ba4099bf0c6738f18c2d975c7b893435c", "html_url": "https://github.com/rust-lang/rust/commit/07dc709ba4099bf0c6738f18c2d975c7b893435c"}], "stats": {"total": 40, "additions": 26, "deletions": 14}, "files": [{"sha": "742298622fc3535173b922bac2011882fd044ea4", "filename": "src/types.rs", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/fcfda681e51ec538fd117d906b95606fd3c3198d/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcfda681e51ec538fd117d906b95606fd3c3198d/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=fcfda681e51ec538fd117d906b95606fd3c3198d", "patch": "@@ -1,7 +1,6 @@\n use reexport::*;\n use rustc::lint::*;\n-use rustc::middle::const_eval;\n-use rustc::middle::ty;\n+use rustc::middle::{const_eval, def, ty};\n use rustc_front::hir::*;\n use rustc_front::intravisit::{FnKind, Visitor, walk_ty};\n use rustc_front::util::{is_comparison_binop, binop_to_string};\n@@ -53,21 +52,34 @@ impl LateLintPass for TypePass {\n         if in_macro(cx, ast_ty.span) {\n             return;\n         }\n-        if let Some(ty) = cx.tcx.ast_ty_to_ty_cache.borrow().get(&ast_ty.id) {\n-            if let ty::TyBox(ref inner) = ty.sty {\n-                if match_type(cx, inner, &VEC_PATH) {\n+        if let Some(did) = cx.tcx.def_map.borrow().get(&ast_ty.id) {\n+            if let def::Def::Struct(..) = did.full_def() {\n+                if Some(did.def_id()) == cx.tcx.lang_items.owned_box() {\n+                    if_let_chain! {\n+                        [\n+                            let TyPath(_, ref path) = ast_ty.node,\n+                            let Some(ref last) = path.segments.last(),\n+                            let PathParameters::AngleBracketedParameters(ref ag) = last.parameters,\n+                            let Some(ref vec) = ag.types.get(0),\n+                            let Some(did) = cx.tcx.def_map.borrow().get(&vec.id),\n+                            let def::Def::Struct(..) = did.full_def(),\n+                            match_def_path(cx, did.def_id(), &VEC_PATH),\n+                        ],\n+                        {\n+                            span_help_and_lint(cx,\n+                                               BOX_VEC,\n+                                               ast_ty.span,\n+                                               \"you seem to be trying to use `Box<Vec<T>>`. Consider using just `Vec<T>`\",\n+                                               \"`Vec<T>` is already on the heap, `Box<Vec<T>>` makes an extra allocation.\");\n+                        }\n+                    }\n+                } else if match_def_path(cx, did.def_id(), &LL_PATH) {\n                     span_help_and_lint(cx,\n-                                       BOX_VEC,\n+                                       LINKEDLIST,\n                                        ast_ty.span,\n-                                       \"you seem to be trying to use `Box<Vec<T>>`. Consider using just `Vec<T>`\",\n-                                       \"`Vec<T>` is already on the heap, `Box<Vec<T>>` makes an extra allocation.\");\n+                                       \"I see you're using a LinkedList! Perhaps you meant some other data structure?\",\n+                                       \"a VecDeque might work\");\n                 }\n-            } else if match_type(cx, ty, &LL_PATH) {\n-                span_help_and_lint(cx,\n-                                   LINKEDLIST,\n-                                   ast_ty.span,\n-                                   \"I see you're using a LinkedList! Perhaps you meant some other data structure?\",\n-                                   \"a VecDeque might work\");\n             }\n         }\n     }"}]}