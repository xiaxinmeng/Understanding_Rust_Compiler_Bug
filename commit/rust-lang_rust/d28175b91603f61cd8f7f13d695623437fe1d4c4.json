{"sha": "d28175b91603f61cd8f7f13d695623437fe1d4c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyODE3NWI5MTYwM2Y2MWNkOGY3ZjEzZDY5NTYyMzQzN2ZlMWQ0YzQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-03-22T01:34:37Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-03-22T01:40:32Z"}, "message": "Upgrade valgrind headers to 3.7, silencing build breakage on FreeBSD.", "tree": {"sha": "3dce95dcf23e318666dd152eea9ef5445dadc957", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dce95dcf23e318666dd152eea9ef5445dadc957"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d28175b91603f61cd8f7f13d695623437fe1d4c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d28175b91603f61cd8f7f13d695623437fe1d4c4", "html_url": "https://github.com/rust-lang/rust/commit/d28175b91603f61cd8f7f13d695623437fe1d4c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d28175b91603f61cd8f7f13d695623437fe1d4c4/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9e7bff731613e23ad2e81ac2c5f0f04d6676d7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9e7bff731613e23ad2e81ac2c5f0f04d6676d7b", "html_url": "https://github.com/rust-lang/rust/commit/a9e7bff731613e23ad2e81ac2c5f0f04d6676d7b"}], "stats": {"total": 2424, "additions": 851, "deletions": 1573}, "files": [{"sha": "68474b44186c68879716bf1d49715b8bade4ed4f", "filename": "src/rt/vg/memcheck.h", "status": "modified", "additions": 35, "deletions": 25, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/d28175b91603f61cd8f7f13d695623437fe1d4c4/src%2Frt%2Fvg%2Fmemcheck.h", "raw_url": "https://github.com/rust-lang/rust/raw/d28175b91603f61cd8f7f13d695623437fe1d4c4/src%2Frt%2Fvg%2Fmemcheck.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fvg%2Fmemcheck.h?ref=d28175b91603f61cd8f7f13d695623437fe1d4c4", "patch": "@@ -13,7 +13,7 @@\n    This file is part of MemCheck, a heavyweight Valgrind tool for\n    detecting memory errors.\n \n-   Copyright (C) 2000-2010 Julian Seward.  All rights reserved.\n+   Copyright (C) 2000-2011 Julian Seward.  All rights reserved.\n \n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n@@ -169,7 +169,7 @@ typedef\n #define VALGRIND_CHECK_MEM_IS_DEFINED(_qzz_addr,_qzz_len)        \\\n     VALGRIND_DO_CLIENT_REQUEST_EXPR(0,                           \\\n                             VG_USERREQ__CHECK_MEM_IS_DEFINED,    \\\n-                            (_qzz_addr), (_qzz_len), 0, 0, 0);\n+                            (_qzz_addr), (_qzz_len), 0, 0, 0)\n \n /* Use this macro to force the definedness and addressibility of an\n    lvalue to be checked.  If suitable addressibility and definedness\n@@ -184,19 +184,27 @@ typedef\n \n /* Do a full memory leak check (like --leak-check=full) mid-execution. */\n #define VALGRIND_DO_LEAK_CHECK                                   \\\n-   {unsigned long _qzz_res __attribute((unused));                \\\n-    VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0,                      \\\n-                            VG_USERREQ__DO_LEAK_CHECK,           \\\n-                            0, 0, 0, 0, 0);                      \\\n-   }\n+    VALGRIND_DO_CLIENT_REQUEST_STMT(VG_USERREQ__DO_LEAK_CHECK,   \\\n+                                    0, 0, 0, 0, 0)\n+\n+/* Same as VALGRIND_DO_LEAK_CHECK but only showing the entries for\n+   which there was an increase in leaked bytes or leaked nr of blocks\n+   since the previous leak search. */\n+#define VALGRIND_DO_ADDED_LEAK_CHECK                            \\\n+    VALGRIND_DO_CLIENT_REQUEST_STMT(VG_USERREQ__DO_LEAK_CHECK,  \\\n+                                    0, 1, 0, 0, 0)\n+\n+/* Same as VALGRIND_DO_ADDED_LEAK_CHECK but showing entries with\n+   increased or decreased leaked bytes/blocks since previous leak\n+   search. */\n+#define VALGRIND_DO_CHANGED_LEAK_CHECK                          \\\n+    VALGRIND_DO_CLIENT_REQUEST_STMT(VG_USERREQ__DO_LEAK_CHECK,  \\\n+                                    0, 2, 0, 0, 0)\n \n /* Do a summary memory leak check (like --leak-check=summary) mid-execution. */\n-#define VALGRIND_DO_QUICK_LEAK_CHECK\t\t\t\t \\\n-   {unsigned long _qzz_res __attribute((unused));                \\\n-    VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0,                      \\\n-                            VG_USERREQ__DO_LEAK_CHECK,           \\\n-                            1, 0, 0, 0, 0);                      \\\n-   }\n+#define VALGRIND_DO_QUICK_LEAK_CHECK                             \\\n+    VALGRIND_DO_CLIENT_REQUEST_STMT(VG_USERREQ__DO_LEAK_CHECK,   \\\n+                                    1, 0, 0, 0, 0)\n \n /* Return number of leaked, dubious, reachable and suppressed bytes found by\n    all previous leak checks.  They must be lvalues.  */\n@@ -207,10 +215,10 @@ typedef\n       are.  We also initialise '_qzz_leaked', etc because\n       VG_USERREQ__COUNT_LEAKS doesn't mark the values returned as\n       defined. */                                                        \\\n-   {unsigned long _qzz_res __attribute((unused));                        \\\n+   {                                                                     \\\n     unsigned long _qzz_leaked    = 0, _qzz_dubious    = 0;               \\\n     unsigned long _qzz_reachable = 0, _qzz_suppressed = 0;               \\\n-    VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0,                              \\\n+    VALGRIND_DO_CLIENT_REQUEST_STMT(                                     \\\n                                VG_USERREQ__COUNT_LEAKS,                  \\\n                                &_qzz_leaked, &_qzz_dubious,              \\\n                                &_qzz_reachable, &_qzz_suppressed, 0);    \\\n@@ -229,10 +237,10 @@ typedef\n       are.  We also initialise '_qzz_leaked', etc because\n       VG_USERREQ__COUNT_LEAKS doesn't mark the values returned as\n       defined. */                                                        \\\n-   {unsigned long _qzz_res __attribute((unused));                        \\\n+   {                                                                     \\\n     unsigned long _qzz_leaked    = 0, _qzz_dubious    = 0;               \\\n     unsigned long _qzz_reachable = 0, _qzz_suppressed = 0;               \\\n-    VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0,                              \\\n+    VALGRIND_DO_CLIENT_REQUEST_STMT(                                     \\\n                                VG_USERREQ__COUNT_LEAK_BLOCKS,            \\\n                                &_qzz_leaked, &_qzz_dubious,              \\\n                                &_qzz_reachable, &_qzz_suppressed, 0);    \\\n@@ -252,10 +260,11 @@ typedef\n    The metadata is not copied in cases 0, 2 or 3 so it should be\n    impossible to segfault your system by using this call.\n */\n-#define VALGRIND_GET_VBITS(zza,zzvbits,zznbytes)                     \\\n-    VALGRIND_DO_CLIENT_REQUEST_EXPR(0,                               \\\n-                                    VG_USERREQ__GET_VBITS,           \\\n-                                    (char*)(zza), (char*)(zzvbits),  \\\n+#define VALGRIND_GET_VBITS(zza,zzvbits,zznbytes)                \\\n+    (unsigned)VALGRIND_DO_CLIENT_REQUEST_EXPR(0,                \\\n+                                    VG_USERREQ__GET_VBITS,      \\\n+                                    (const char*)(zza),         \\\n+                                    (char*)(zzvbits),           \\\n                                     (zznbytes), 0, 0)\n \n /* Set the validity data for addresses [zza..zza+zznbytes-1], copying it\n@@ -267,10 +276,11 @@ typedef\n    The metadata is not copied in cases 0, 2 or 3 so it should be\n    impossible to segfault your system by using this call.\n */\n-#define VALGRIND_SET_VBITS(zza,zzvbits,zznbytes)                     \\\n-    VALGRIND_DO_CLIENT_REQUEST_EXPR(0,                               \\\n-                                    VG_USERREQ__SET_VBITS,           \\\n-                                    (char*)(zza), (char*)(zzvbits),  \\\n+#define VALGRIND_SET_VBITS(zza,zzvbits,zznbytes)                \\\n+    (unsigned)VALGRIND_DO_CLIENT_REQUEST_EXPR(0,                \\\n+                                    VG_USERREQ__SET_VBITS,      \\\n+                                    (const char*)(zza),         \\\n+                                    (const char*)(zzvbits),     \\\n                                     (zznbytes), 0, 0 )\n \n #endif"}, {"sha": "222a58e156323c6c183db5856690d6fea8d55a09", "filename": "src/rt/vg/valgrind.h", "status": "modified", "additions": 816, "deletions": 1548, "changes": 2364, "blob_url": "https://github.com/rust-lang/rust/blob/d28175b91603f61cd8f7f13d695623437fe1d4c4/src%2Frt%2Fvg%2Fvalgrind.h", "raw_url": "https://github.com/rust-lang/rust/raw/d28175b91603f61cd8f7f13d695623437fe1d4c4/src%2Frt%2Fvg%2Fvalgrind.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fvg%2Fvalgrind.h?ref=d28175b91603f61cd8f7f13d695623437fe1d4c4"}]}