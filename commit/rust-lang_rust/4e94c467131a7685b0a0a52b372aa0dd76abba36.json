{"sha": "4e94c467131a7685b0a0a52b372aa0dd76abba36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlOTRjNDY3MTMxYTc2ODViMGEwYTUyYjM3MmFhMGRkNzZhYmJhMzY=", "commit": {"author": {"name": "Geobert Quach", "email": "geobert@protonmail.com", "date": "2019-09-10T11:56:45Z"}, "committer": {"name": "Geobert Quach", "email": "geobert@protonmail.com", "date": "2019-09-10T11:56:45Z"}, "message": "refactor(args): Switch to pico-args in ra_tools", "tree": {"sha": "7dfba21ad858ab77fd2a26ff9deec8459dfffe43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7dfba21ad858ab77fd2a26ff9deec8459dfffe43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e94c467131a7685b0a0a52b372aa0dd76abba36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e94c467131a7685b0a0a52b372aa0dd76abba36", "html_url": "https://github.com/rust-lang/rust/commit/4e94c467131a7685b0a0a52b372aa0dd76abba36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e94c467131a7685b0a0a52b372aa0dd76abba36/comments", "author": {"login": "Geobert", "id": 72570, "node_id": "MDQ6VXNlcjcyNTcw", "avatar_url": "https://avatars.githubusercontent.com/u/72570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Geobert", "html_url": "https://github.com/Geobert", "followers_url": "https://api.github.com/users/Geobert/followers", "following_url": "https://api.github.com/users/Geobert/following{/other_user}", "gists_url": "https://api.github.com/users/Geobert/gists{/gist_id}", "starred_url": "https://api.github.com/users/Geobert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Geobert/subscriptions", "organizations_url": "https://api.github.com/users/Geobert/orgs", "repos_url": "https://api.github.com/users/Geobert/repos", "events_url": "https://api.github.com/users/Geobert/events{/privacy}", "received_events_url": "https://api.github.com/users/Geobert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Geobert", "id": 72570, "node_id": "MDQ6VXNlcjcyNTcw", "avatar_url": "https://avatars.githubusercontent.com/u/72570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Geobert", "html_url": "https://github.com/Geobert", "followers_url": "https://api.github.com/users/Geobert/followers", "following_url": "https://api.github.com/users/Geobert/following{/other_user}", "gists_url": "https://api.github.com/users/Geobert/gists{/gist_id}", "starred_url": "https://api.github.com/users/Geobert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Geobert/subscriptions", "organizations_url": "https://api.github.com/users/Geobert/orgs", "repos_url": "https://api.github.com/users/Geobert/repos", "events_url": "https://api.github.com/users/Geobert/events{/privacy}", "received_events_url": "https://api.github.com/users/Geobert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "735845d86e6ab94891e421823158f374e2f3412a", "url": "https://api.github.com/repos/rust-lang/rust/commits/735845d86e6ab94891e421823158f374e2f3412a", "html_url": "https://github.com/rust-lang/rust/commit/735845d86e6ab94891e421823158f374e2f3412a"}], "stats": {"total": 212, "additions": 153, "deletions": 59}, "files": [{"sha": "2e06a39b6fa71e5e303820cb35d1912edc754956", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4e94c467131a7685b0a0a52b372aa0dd76abba36/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4e94c467131a7685b0a0a52b372aa0dd76abba36/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=4e94c467131a7685b0a0a52b372aa0dd76abba36", "patch": "@@ -184,16 +184,6 @@ dependencies = [\n  \"time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"clap\"\n-version = \"2.33.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"textwrap 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-width 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"clicolors-control\"\n version = \"1.0.1\"\n@@ -1116,8 +1106,8 @@ dependencies = [\n name = \"ra_tools\"\n version = \"0.1.0\"\n dependencies = [\n- \"clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pico-args 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc-macro2 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ron 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1598,14 +1588,6 @@ name = \"text_unit\"\n version = \"0.1.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"textwrap\"\n-version = \"0.11.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"unicode-width 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"thread_local\"\n version = \"0.3.6\"\n@@ -1800,7 +1782,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum chalk-rust-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git)\" = \"<none>\"\n \"checksum chalk-solve 0.1.0 (git+https://github.com/rust-lang/chalk.git)\" = \"<none>\"\n \"checksum chrono 0.4.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e8493056968583b0193c1bb04d6f7684586f3726992d6c573261941a895dbd68\"\n-\"checksum clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5067f5bb2d80ef5d68b4c87db81601f0b75bca627bc2ef76b141d7b846a3c6d9\"\n \"checksum clicolors-control 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90082ee5dcdd64dc4e9e0d37fbf3ee325419e39c0092191e0393df65518f741e\"\n \"checksum cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ddfc5b9aa5d4507acaf872de71051dfd0e309860e88966e1051e462a077aac4f\"\n \"checksum console 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b147390a412132d75d10dd3b7b175a69cf5fd95032f7503c7091b8831ba10242\"\n@@ -1936,7 +1917,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum tempfile 3.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e24d9338a0a5be79593e2fa15a648add6138caa803e2d5bc782c371732ca9\"\n \"checksum termios 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"72b620c5ea021d75a735c943269bb07d30c9b77d6ac6b236bc8b5c496ef05625\"\n \"checksum text_unit 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e08bbcb7a3adbda0eb23431206b653bdad3d8dea311e72d36bf2215e27a42579\"\n-\"checksum textwrap 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060\"\n \"checksum thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c6b53e329000edc2b34dbe8545fd20e55a333362d0a321909685a19bd28c3f1b\"\n \"checksum threadpool 1.7.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e2f0c90a5f3459330ac8bc0d2f879c693bb7a2f59689c1083fc4ef83834da865\"\n \"checksum time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\" = \"db8dcfca086c1143c9270ac42a2bbd8a7ee477b78ac8e45b19abfb0cbede4b6f\""}, {"sha": "a9a9fbddd0b176aa01df690635d628e6bb2fd9b6", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e94c467131a7685b0a0a52b372aa0dd76abba36/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e94c467131a7685b0a0a52b372aa0dd76abba36/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=4e94c467131a7685b0a0a52b372aa0dd76abba36", "patch": "@@ -21,8 +21,7 @@ fn main() -> Result<()> {\n         return Ok(());\n     }\n     let subcommand = subcommand.unwrap();\n-    let mut args: Vec<_> = std::env::args_os().collect();\n-    let mut matches = Arguments::from_vec(args.drain(2..).collect());\n+    let mut matches = Arguments::from_vec(std::env::args_os().skip(2).collect());\n \n     match &*subcommand.to_string_lossy() {\n         \"parse\" => {"}, {"sha": "848ca408d0e5725eb40172f6959df4f46b79ebec", "filename": "crates/ra_tools/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e94c467131a7685b0a0a52b372aa0dd76abba36/crates%2Fra_tools%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4e94c467131a7685b0a0a52b372aa0dd76abba36/crates%2Fra_tools%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2FCargo.toml?ref=4e94c467131a7685b0a0a52b372aa0dd76abba36", "patch": "@@ -8,7 +8,7 @@ publish = false\n [dependencies]\n walkdir = \"2.1.3\"\n itertools = \"0.8.0\"\n-clap = { version = \"2.32.0\", default-features = false }\n+pico-args = \"0.2.0\"\n quote = \"1.0.2\"\n proc-macro2 = \"1.0.1\"\n ron = \"0.5.1\""}, {"sha": "5bfe657343af9941766f0aa8c63471261839c3e2", "filename": "crates/ra_tools/src/help.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/4e94c467131a7685b0a0a52b372aa0dd76abba36/crates%2Fra_tools%2Fsrc%2Fhelp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e94c467131a7685b0a0a52b372aa0dd76abba36/crates%2Fra_tools%2Fsrc%2Fhelp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2Fsrc%2Fhelp.rs?ref=4e94c467131a7685b0a0a52b372aa0dd76abba36", "patch": "@@ -0,0 +1,56 @@\n+pub fn print_global_help() {\r\n+    println!(\r\n+        \"tasks\r\n+\r\n+USAGE:\r\n+    ra_tools <SUBCOMMAND>\r\n+\r\n+FLAGS:\r\n+    -h, --help       Prints help information\r\n+\r\n+SUBCOMMANDS:\r\n+    format\r\n+    format-hook\r\n+    fuzz-tests\r\n+    gen-syntax\r\n+    gen-tests\r\n+    install-ra\r\n+    lint\"\r\n+    )\r\n+}\r\n+\r\n+pub fn print_install_ra_help() {\r\n+    println!(\r\n+        \"ra_tools-install-ra\r\n+\r\n+USAGE:\r\n+    ra_tools.exe install-ra [FLAGS]\r\n+\r\n+FLAGS:\r\n+        --client-code\r\n+    -h, --help           Prints help information\r\n+        --jemalloc\r\n+        --server\"\r\n+    )\r\n+}\r\n+\r\n+pub fn print_no_param_subcommand_help(subcommand: &str) {\r\n+    println!(\r\n+        \"ra_tools-{}\r\n+\r\n+USAGE:\r\n+    ra_tools {}\r\n+\r\n+FLAGS:\r\n+    -h, --help       Prints help information\",\r\n+        subcommand, subcommand\r\n+    );\r\n+}\r\n+\r\n+pub fn print_install_ra_conflict() {\r\n+    println!(\r\n+        \"error: The argument `--server` cannot be used with `--client-code`\r\n+                    \r\n+For more information try --help\"\r\n+    )\r\n+}\r"}, {"sha": "5410edea9ab94aeb58e925bacaac0e6cae9c9008", "filename": "crates/ra_tools/src/main.rs", "status": "modified", "additions": 94, "deletions": 35, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/4e94c467131a7685b0a0a52b372aa0dd76abba36/crates%2Fra_tools%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e94c467131a7685b0a0a52b372aa0dd76abba36/crates%2Fra_tools%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2Fsrc%2Fmain.rs?ref=4e94c467131a7685b0a0a52b372aa0dd76abba36", "patch": "@@ -1,5 +1,8 @@\n-use clap::{App, Arg, SubCommand};\n+mod help;\n+\n+use core::fmt::Write;\n use core::str;\n+use pico_args::Arguments;\n use ra_tools::{\n     gen_tests, generate_boilerplate, install_format_hook, run, run_clippy, run_fuzzer, run_rustfmt,\n     Cmd, Overwrite, Result,\n@@ -20,45 +23,101 @@ struct ServerOpt {\n }\n \n fn main() -> Result<()> {\n-    let matches = App::new(\"tasks\")\n-        .setting(clap::AppSettings::SubcommandRequiredElseHelp)\n-        .subcommand(SubCommand::with_name(\"gen-syntax\"))\n-        .subcommand(SubCommand::with_name(\"gen-tests\"))\n-        .subcommand(\n-            SubCommand::with_name(\"install-ra\")\n-                .arg(Arg::with_name(\"server\").long(\"--server\"))\n-                .arg(Arg::with_name(\"jemalloc\").long(\"jemalloc\"))\n-                .arg(Arg::with_name(\"client-code\").long(\"client-code\").conflicts_with(\"server\")),\n-        )\n-        .alias(\"install-code\")\n-        .subcommand(SubCommand::with_name(\"format\"))\n-        .subcommand(SubCommand::with_name(\"format-hook\"))\n-        .subcommand(SubCommand::with_name(\"fuzz-tests\"))\n-        .subcommand(SubCommand::with_name(\"lint\"))\n-        .get_matches();\n-    match matches.subcommand() {\n-        (\"install-ra\", Some(matches)) => {\n-            let opts = InstallOpt {\n-                client: if matches.is_present(\"server\") { None } else { Some(ClientOpt::VsCode) },\n-                server: if matches.is_present(\"client-code\") {\n-                    None\n-                } else {\n-                    Some(ServerOpt { jemalloc: matches.is_present(\"jemalloc\") })\n-                },\n-            };\n-            install(opts)?\n+    let subcommand = std::env::args_os().nth(1);\n+    if subcommand.is_none() {\n+        help::print_global_help();\n+        return Ok(());\n+    }\n+    let subcommand = subcommand.unwrap();\n+    let mut matches = Arguments::from_vec(std::env::args_os().skip(2).collect());\n+    let subcommand = &*subcommand.to_string_lossy();\n+    match subcommand {\n+        \"install-ra\" | \"install-code\" => {\n+            if matches.contains([\"-h\", \"--help\"]) {\n+                help::print_install_ra_help();\n+                return Ok(());\n+            } else {\n+                let server = matches.contains(\"--server\");\n+                let client_code = matches.contains(\"--client-code\");\n+                if server && client_code {\n+                    help::print_install_ra_conflict();\n+                    return Ok(());\n+                }\n+                let jemalloc = matches.contains(\"--jemalloc\");\n+                matches.finish().or_else(handle_extra_flags)?;\n+                let opts = InstallOpt {\n+                    client: if server { None } else { Some(ClientOpt::VsCode) },\n+                    server: if client_code { None } else { Some(ServerOpt { jemalloc: jemalloc }) },\n+                };\n+                install(opts)?\n+            }\n+        }\n+        \"gen-tests\" => {\n+            if matches.contains([\"-h\", \"--help\"]) {\n+                help::print_no_param_subcommand_help(&subcommand);\n+                return Ok(());\n+            } else {\n+                gen_tests(Overwrite)?\n+            }\n+        }\n+        \"gen-syntax\" => {\n+            if matches.contains([\"-h\", \"--help\"]) {\n+                help::print_no_param_subcommand_help(&subcommand);\n+                return Ok(());\n+            } else {\n+                generate_boilerplate(Overwrite)?\n+            }\n+        }\n+        \"format\" => {\n+            if matches.contains([\"-h\", \"--help\"]) {\n+                help::print_no_param_subcommand_help(&subcommand);\n+                return Ok(());\n+            } else {\n+                run_rustfmt(Overwrite)?\n+            }\n+        }\n+        \"format-hook\" => {\n+            if matches.contains([\"-h\", \"--help\"]) {\n+                help::print_no_param_subcommand_help(&subcommand);\n+                return Ok(());\n+            } else {\n+                install_format_hook()?\n+            }\n+        }\n+        \"lint\" => {\n+            if matches.contains([\"-h\", \"--help\"]) {\n+                help::print_no_param_subcommand_help(&subcommand);\n+                return Ok(());\n+            } else {\n+                run_clippy()?\n+            }\n         }\n-        (\"gen-tests\", _) => gen_tests(Overwrite)?,\n-        (\"gen-syntax\", _) => generate_boilerplate(Overwrite)?,\n-        (\"format\", _) => run_rustfmt(Overwrite)?,\n-        (\"format-hook\", _) => install_format_hook()?,\n-        (\"lint\", _) => run_clippy()?,\n-        (\"fuzz-tests\", _) => run_fuzzer()?,\n-        _ => unreachable!(),\n+        \"fuzz-tests\" => {\n+            if matches.contains([\"-h\", \"--help\"]) {\n+                help::print_no_param_subcommand_help(&subcommand);\n+                return Ok(());\n+            } else {\n+                run_fuzzer()?\n+            }\n+        }\n+        _ => help::print_global_help(),\n     }\n     Ok(())\n }\n \n+fn handle_extra_flags(e: pico_args::Error) -> Result<()> {\n+    if let pico_args::Error::UnusedArgsLeft(flags) = e {\n+        let mut invalid_flags = String::new();\n+        for flag in flags {\n+            write!(&mut invalid_flags, \"{}, \", flag).expect(\"Error on write\");\n+        }\n+        let (invalid_flags, _) = invalid_flags.split_at(invalid_flags.len() - 2);\n+        Err(format!(\"Invalid flags: {}\", invalid_flags).into())\n+    } else {\n+        Err(e.to_string().into())\n+    }\n+}\n+\n fn install(opts: InstallOpt) -> Result<()> {\n     if cfg!(target_os = \"macos\") {\n         fix_path_for_mac()?"}]}