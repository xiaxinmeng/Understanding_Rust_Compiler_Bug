{"sha": "b8e3f3a41715a7de7e32eb32456aa25132c8ff46", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ZTNmM2E0MTcxNWE3ZGU3ZTMyZWIzMjQ1NmFhMjUxMzJjOGZmNDY=", "commit": {"author": {"name": "Phil Ruffwind", "email": "rf@rufflewind.com", "date": "2014-05-07T23:26:16Z"}, "committer": {"name": "Phil Ruffwind", "email": "rf@rufflewind.com", "date": "2014-05-13T21:19:01Z"}, "message": "Test Unicode support of process spawning\n\nAdded a run-pass test to ensure that processes can be correctly spawned\nusing non-ASCII arguments, working directory, and environment variables.\nIt also tests Unicode support of os::env_as_bytes.\n\nAn additional assertion was added to the test for make_command_line to\nverify it handles Unicode correctly.", "tree": {"sha": "2b725235720e0b06371527b4fa44827ac419f0fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b725235720e0b06371527b4fa44827ac419f0fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8e3f3a41715a7de7e32eb32456aa25132c8ff46", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8e3f3a41715a7de7e32eb32456aa25132c8ff46", "html_url": "https://github.com/rust-lang/rust/commit/b8e3f3a41715a7de7e32eb32456aa25132c8ff46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8e3f3a41715a7de7e32eb32456aa25132c8ff46/comments", "author": {"login": "Rufflewind", "id": 6571068, "node_id": "MDQ6VXNlcjY1NzEwNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/6571068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rufflewind", "html_url": "https://github.com/Rufflewind", "followers_url": "https://api.github.com/users/Rufflewind/followers", "following_url": "https://api.github.com/users/Rufflewind/following{/other_user}", "gists_url": "https://api.github.com/users/Rufflewind/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rufflewind/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rufflewind/subscriptions", "organizations_url": "https://api.github.com/users/Rufflewind/orgs", "repos_url": "https://api.github.com/users/Rufflewind/repos", "events_url": "https://api.github.com/users/Rufflewind/events{/privacy}", "received_events_url": "https://api.github.com/users/Rufflewind/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Rufflewind", "id": 6571068, "node_id": "MDQ6VXNlcjY1NzEwNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/6571068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rufflewind", "html_url": "https://github.com/Rufflewind", "followers_url": "https://api.github.com/users/Rufflewind/followers", "following_url": "https://api.github.com/users/Rufflewind/following{/other_user}", "gists_url": "https://api.github.com/users/Rufflewind/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rufflewind/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rufflewind/subscriptions", "organizations_url": "https://api.github.com/users/Rufflewind/orgs", "repos_url": "https://api.github.com/users/Rufflewind/repos", "events_url": "https://api.github.com/users/Rufflewind/events{/privacy}", "received_events_url": "https://api.github.com/users/Rufflewind/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9eca56c065d27498a0e5fbd20ad114063c96281", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9eca56c065d27498a0e5fbd20ad114063c96281", "html_url": "https://github.com/rust-lang/rust/commit/d9eca56c065d27498a0e5fbd20ad114063c96281"}], "stats": {"total": 90, "additions": 90, "deletions": 0}, "files": [{"sha": "14ea1f12a5ca012a085ae53e97a4e12766bd5d3f", "filename": "src/libnative/io/process.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8e3f3a41715a7de7e32eb32456aa25132c8ff46/src%2Flibnative%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e3f3a41715a7de7e32eb32456aa25132c8ff46/src%2Flibnative%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fprocess.rs?ref=b8e3f3a41715a7de7e32eb32456aa25132c8ff46", "patch": "@@ -864,5 +864,9 @@ mod tests {\n             make_command_line(\"echo\", [\"a b c\".to_owned()]),\n             \"echo \\\"a b c\\\"\".to_owned()\n         );\n+        assert_eq!(\n+            make_command_line(\"\\u03c0\\u042f\\u97f3\\u00e6\\u221e\", []),\n+            \"\\u03c0\\u042f\\u97f3\\u00e6\\u221e\".to_owned()\n+        );\n     }\n }"}, {"sha": "f9839ed39e752c4830bafbcc2180d2ea33dac960", "filename": "src/test/run-pass/process-spawn-with-unicode-params.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/b8e3f3a41715a7de7e32eb32456aa25132c8ff46/src%2Ftest%2Frun-pass%2Fprocess-spawn-with-unicode-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e3f3a41715a7de7e32eb32456aa25132c8ff46/src%2Ftest%2Frun-pass%2Fprocess-spawn-with-unicode-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprocess-spawn-with-unicode-params.rs?ref=b8e3f3a41715a7de7e32eb32456aa25132c8ff46", "patch": "@@ -0,0 +1,86 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+// The test copies itself into a subdirectory with a non-ASCII name and then\n+// runs it as a child process within the subdirectory.  The parent process\n+// also adds an environment variable and an argument, both containing\n+// non-ASCII characters.  The child process ensures all the strings are\n+// intact.\n+\n+extern crate native;\n+\n+use std::io;\n+use std::io::fs;\n+use std::io::process::Process;\n+use std::io::process::ProcessConfig;\n+use std::os;\n+use std::path::Path;\n+\n+fn main() {\n+    let my_args = os::args();\n+    let my_cwd  = os::getcwd();\n+    let my_env  = os::env();\n+    let my_path = Path::new(os::self_exe_name().unwrap());\n+    let my_dir  = my_path.dir_path();\n+    let my_ext  = my_path.extension_str().unwrap_or(\"\");\n+\n+    // some non-ASCII characters\n+    let blah       = \"\\u03c0\\u042f\\u97f3\\u00e6\\u221e\";\n+\n+    let child_name = \"child\";\n+    let child_dir  = \"process-spawn-with-unicode-params-\" + blah;\n+\n+    // parameters sent to child / expected to be received from parent\n+    let arg = blah;\n+    let cwd = my_dir.join(Path::new(child_dir.clone()));\n+    let env = (\"RUST_TEST_PROC_SPAWN_UNICODE\".to_owned(), blah.to_owned());\n+\n+    // am I the parent or the child?\n+    if my_args.len() == 1 {             // parent\n+\n+        let child_filestem = Path::new(child_name);\n+        let child_filename = child_filestem.with_extension(my_ext);\n+        let child_path     = cwd.join(child_filename.clone());\n+\n+        // make a separate directory for the child\n+        drop(fs::mkdir(&cwd, io::UserRWX).is_ok());\n+        assert!(fs::copy(&my_path, &child_path).is_ok());\n+\n+        // run child\n+        let p = Process::configure(ProcessConfig {\n+            program: child_path.as_str().unwrap(),\n+            args: [arg.to_owned()],\n+            cwd: Some(&cwd),\n+            env: Some(my_env.append_one(env).as_slice()),\n+            .. ProcessConfig::new()\n+        }).unwrap().wait_with_output();\n+\n+        // display the output\n+        assert!(io::stdout().write(p.output.as_slice()).is_ok());\n+        assert!(io::stderr().write(p.error.as_slice()).is_ok());\n+\n+        // make sure the child succeeded\n+        assert!(p.status.success());\n+\n+    } else {                            // child\n+\n+        // check working directory (don't try to compare with `cwd` here!)\n+        assert!(my_cwd.ends_with_path(&Path::new(child_dir)));\n+\n+        // check arguments\n+        assert_eq!(my_args.get(1).as_slice(), arg);\n+\n+        // check environment variable\n+        assert!(my_env.contains(&env));\n+\n+    };\n+}"}]}