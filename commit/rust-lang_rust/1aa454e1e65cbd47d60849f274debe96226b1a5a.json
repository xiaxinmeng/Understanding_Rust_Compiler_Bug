{"sha": "1aa454e1e65cbd47d60849f274debe96226b1a5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhYTQ1NGUxZTY1Y2JkNDdkNjA4NDlmMjc0ZGViZTk2MjI2YjFhNWE=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-01-10T18:00:50Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-01-10T19:12:57Z"}, "message": "Updated other tests affected by change.", "tree": {"sha": "4fc0516ecbe89265a15fb7935131e04c4b8b6903", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fc0516ecbe89265a15fb7935131e04c4b8b6903"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1aa454e1e65cbd47d60849f274debe96226b1a5a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlpWZbkACgkQAXYLT59T\n8VRy1A//RliED/KtwO3mlA2i4q8thKpxuPn8g9BlJ6tDok0ALIvv1/pKHPublLz8\nw8fH52TC8eEnTaavXB7zch58FYPc+5qY+KN1r2WAorzdPmeBStN3Zv4SKD2B2U5u\nFIMJkWe3TX5ZXxaDEeQv3tWCbReQEdBxfGP9m+1ZZnOzprElHn4zaOJDbQzymi/U\nCwRpKZ50l66GE0yffD27jKNNS2NeyreISZ/rHV58YBBxLL2k21BKrhgOj/kwJF+v\n011EKhovCb40KSwSLkuiKIWoTavtcLeVds6iaKxGA/oy0W1Ky0+v2OsqQbqlgjdG\nFvUbjMnNUySSn6pC2bcXzw9RsRtkiNbGM7Fup72hSw89fqudotjp9BZSVibJVd9C\nAb0Mf/V6jwKeiLLIYtRsnfh8rivOtBCNfWIzZ+GBYDzPB5c1O5rcb/vYm99LHJrX\ngX8C0hSWSk3t3gosewksfmtKapjY+eIBJ2RBo7FcBTtOgjNKsSFcRPJniX0nq9me\nMsol9zvAYaIQXjjuHozsNkj1SvabOpFUm0wmP43IldD6PPIfmhs9C3Sr+NL7tu8U\nTkvQI1/9i3luUQf6IGPrLZI6NxwsTNiEh5vCC9yXiRYTQXUB6WxPiGLvQdoGdbHT\nFvPv8pzXKEvBS8Z9WYOTgKxJmiQa5/y6HlFd65TgjLUqT/+ZCBc=\n=IT+m\n-----END PGP SIGNATURE-----", "payload": "tree 4fc0516ecbe89265a15fb7935131e04c4b8b6903\nparent cad7b4f450e6584c4067c7a0947812625065d693\nauthor David Wood <david@davidtw.co> 1515607250 +0000\ncommitter David Wood <david@davidtw.co> 1515611577 +0000\n\nUpdated other tests affected by change.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1aa454e1e65cbd47d60849f274debe96226b1a5a", "html_url": "https://github.com/rust-lang/rust/commit/1aa454e1e65cbd47d60849f274debe96226b1a5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1aa454e1e65cbd47d60849f274debe96226b1a5a/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cad7b4f450e6584c4067c7a0947812625065d693", "url": "https://api.github.com/repos/rust-lang/rust/commits/cad7b4f450e6584c4067c7a0947812625065d693", "html_url": "https://github.com/rust-lang/rust/commit/cad7b4f450e6584c4067c7a0947812625065d693"}], "stats": {"total": 43, "additions": 24, "deletions": 19}, "files": [{"sha": "1ffba68263a9a4faceab7cb075c04e4ffceef7e7", "filename": "src/test/compile-fail/closure-bounds-static-cant-capture-borrowed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1aa454e1e65cbd47d60849f274debe96226b1a5a/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-static-cant-capture-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa454e1e65cbd47d60849f274debe96226b1a5a/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-static-cant-capture-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-static-cant-capture-borrowed.rs?ref=1aa454e1e65cbd47d60849f274debe96226b1a5a", "patch": "@@ -13,7 +13,7 @@ fn bar<F>(blk: F) where F: FnOnce() + 'static {\n \n fn foo(x: &()) {\n     bar(|| {\n-        //~^ ERROR does not fulfill\n+        //~^ ERROR explicit lifetime required in the type of `x` [E0621]\n         let _ = x;\n     })\n }"}, {"sha": "0eb99ca0fc3f1b1f8db492fcb556baa5958c28f5", "filename": "src/test/compile-fail/impl-trait/must_outlive_least_region_or_bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1aa454e1e65cbd47d60849f274debe96226b1a5a/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa454e1e65cbd47d60849f274debe96226b1a5a/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs?ref=1aa454e1e65cbd47d60849f274debe96226b1a5a", "patch": "@@ -13,7 +13,7 @@\n use std::fmt::Debug;\n \n fn elided(x: &i32) -> impl Copy { x }\n-//~^ ERROR cannot infer an appropriate lifetime\n+//~^ ERROR explicit lifetime required in the type of `x` [E0621]\n \n fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n //~^ ERROR cannot infer an appropriate lifetime"}, {"sha": "1768c834cb39161334dc38fa7cb12f0a18790954", "filename": "src/test/compile-fail/issue-16922.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1aa454e1e65cbd47d60849f274debe96226b1a5a/src%2Ftest%2Fcompile-fail%2Fissue-16922.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa454e1e65cbd47d60849f274debe96226b1a5a/src%2Ftest%2Fcompile-fail%2Fissue-16922.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16922.rs?ref=1aa454e1e65cbd47d60849f274debe96226b1a5a", "patch": "@@ -12,7 +12,7 @@ use std::any::Any;\n \n fn foo<T: Any>(value: &T) -> Box<Any> {\n     Box::new(value) as Box<Any>\n-    //~^ ERROR: cannot infer an appropriate lifetime\n+    //~^ ERROR explicit lifetime required in the type of `value` [E0621]\n }\n \n fn main() {"}, {"sha": "b253612bc327b1ff24f9cb334198a7205098e8f2", "filename": "src/test/compile-fail/object-lifetime-default-from-box-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1aa454e1e65cbd47d60849f274debe96226b1a5a/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-from-box-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa454e1e65cbd47d60849f274debe96226b1a5a/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-from-box-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-from-box-error.rs?ref=1aa454e1e65cbd47d60849f274debe96226b1a5a", "patch": "@@ -25,7 +25,7 @@ fn load(ss: &mut SomeStruct) -> Box<SomeTrait> {\n     // `Box<SomeTrait>` defaults to a `'static` bound, so this return\n     // is illegal.\n \n-    ss.r //~ ERROR cannot infer an appropriate lifetime\n+    ss.r //~ ERROR explicit lifetime required in the type of `ss` [E0621]\n }\n \n fn store(ss: &mut SomeStruct, b: Box<SomeTrait>) {"}, {"sha": "5bf397ab3838ce747441d5fe4992b1d3cd675567", "filename": "src/test/compile-fail/region-object-lifetime-in-coercion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1aa454e1e65cbd47d60849f274debe96226b1a5a/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa454e1e65cbd47d60849f274debe96226b1a5a/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs?ref=1aa454e1e65cbd47d60849f274debe96226b1a5a", "patch": "@@ -16,20 +16,20 @@ impl<'a> Foo for &'a [u8] {}\n \n fn a(v: &[u8]) -> Box<Foo + 'static> {\n     let x: Box<Foo + 'static> = Box::new(v);\n-    //~^ ERROR cannot infer an appropriate lifetime due to conflicting\n+    //~^ ERROR explicit lifetime required in the type of `v` [E0621]\n     x\n }\n \n fn b(v: &[u8]) -> Box<Foo + 'static> {\n     Box::new(v)\n-        //~^ ERROR cannot infer an appropriate lifetime due to conflicting\n+        //~^ ERROR explicit lifetime required in the type of `v` [E0621]\n }\n \n fn c(v: &[u8]) -> Box<Foo> {\n     // same as previous case due to RFC 599\n \n     Box::new(v)\n-        //~^ ERROR cannot infer an appropriate lifetime due to conflicting\n+        //~^ ERROR explicit lifetime required in the type of `v` [E0621]\n }\n \n fn d<'a,'b>(v: &'a [u8]) -> Box<Foo+'b> {"}, {"sha": "dd7b2bf96357525a8a111e4e7903c346ce5a1dba", "filename": "src/test/compile-fail/regions-proc-bound-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1aa454e1e65cbd47d60849f274debe96226b1a5a/src%2Ftest%2Fcompile-fail%2Fregions-proc-bound-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa454e1e65cbd47d60849f274debe96226b1a5a/src%2Ftest%2Fcompile-fail%2Fregions-proc-bound-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-proc-bound-capture.rs?ref=1aa454e1e65cbd47d60849f274debe96226b1a5a", "patch": "@@ -16,7 +16,7 @@ fn borrowed_proc<'a>(x: &'a isize) -> Box<FnMut()->(isize) + 'a> {\n \n fn static_proc(x: &isize) -> Box<FnMut()->(isize) + 'static> {\n     // This is illegal, because the region bound on `proc` is 'static.\n-    Box::new(move|| { *x }) //~ ERROR cannot infer an appropriate lifetime\n+    Box::new(move|| { *x }) //~ ERROR explicit lifetime required in the type of `x` [E0621]\n }\n \n fn main() { }"}, {"sha": "13f93090fbbb4fae5260fe6296d19cca0a8ca8bb", "filename": "src/test/compile-fail/regions-static-bound.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1aa454e1e65cbd47d60849f274debe96226b1a5a/src%2Ftest%2Fcompile-fail%2Fregions-static-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa454e1e65cbd47d60849f274debe96226b1a5a/src%2Ftest%2Fcompile-fail%2Fregions-static-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-static-bound.rs?ref=1aa454e1e65cbd47d60849f274debe96226b1a5a", "patch": "@@ -22,12 +22,12 @@ fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n }\n \n fn error(u: &(), v: &()) {\n-    static_id(&u); //[ll]~ ERROR cannot infer an appropriate lifetime\n+    static_id(&u); //[ll]~ ERROR explicit lifetime required in the type of `u` [E0621]\n     //[nll]~^ WARNING not reporting region error due to -Znll\n-    //[nll]~| ERROR free region `` does not outlive free region `'static`\n-    static_id_indirect(&v); //[ll]~ ERROR cannot infer an appropriate lifetime\n+    //[nll]~| ERROR explicit lifetime required in the type of `u` [E0621]\n+    static_id_indirect(&v); //[ll]~ ERROR explicit lifetime required in the type of `v` [E0621]\n     //[nll]~^ WARNING not reporting region error due to -Znll\n-    //[nll]~| ERROR free region `` does not outlive free region `'static`\n+    //[nll]~| ERROR explicit lifetime required in the type of `v` [E0621]\n }\n \n fn main() {}"}, {"sha": "ac21fe25bd112e5a9183bb737012f15b9d06704c", "filename": "src/test/ui/nll/closure-requirements/region-lbr-anon-does-not-outlive-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1aa454e1e65cbd47d60849f274debe96226b1a5a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa454e1e65cbd47d60849f274debe96226b1a5a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.rs?ref=1aa454e1e65cbd47d60849f274debe96226b1a5a", "patch": "@@ -18,7 +18,7 @@\n fn foo(x: &u32) -> &'static u32 {\n     &*x\n         //~^ WARN not reporting region error due to -Znll\n-        //~| ERROR does not outlive free region\n+        //~| ERROR explicit lifetime required in the type of `x`\n }\n \n fn main() { }"}, {"sha": "2a1122cbda7a947ed7dbbac945128018d8f5a237", "filename": "src/test/ui/nll/closure-requirements/region-lbr-anon-does-not-outlive-static.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1aa454e1e65cbd47d60849f274debe96226b1a5a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1aa454e1e65cbd47d60849f274debe96226b1a5a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.stderr?ref=1aa454e1e65cbd47d60849f274debe96226b1a5a", "patch": "@@ -4,11 +4,13 @@ warning: not reporting region error due to -Znll\n 19 |     &*x\n    |     ^^^\n \n-error: free region `ReFree(DefId(0/0:3 ~ region_lbr_anon_does_not_outlive_static[317d]::foo[0]), BrAnon(0))` does not outlive free region `ReStatic`\n+error[E0621]: explicit lifetime required in the type of `x`\n   --> $DIR/region-lbr-anon-does-not-outlive-static.rs:19:5\n    |\n+18 | fn foo(x: &u32) -> &'static u32 {\n+   |        - consider changing the type of `x` to `&ReStatic u32`\n 19 |     &*x\n-   |     ^^^\n+   |     ^^^ lifetime `ReStatic` required\n \n error: aborting due to previous error\n "}, {"sha": "09ce42ce1b5519899cdab30e1589a87fb081fddd", "filename": "src/test/ui/nll/guarantor-issue-46974.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1aa454e1e65cbd47d60849f274debe96226b1a5a/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa454e1e65cbd47d60849f274debe96226b1a5a/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.rs?ref=1aa454e1e65cbd47d60849f274debe96226b1a5a", "patch": "@@ -22,7 +22,7 @@ fn foo(s: &mut (i32,)) -> i32 {\n \n fn bar(s: &Box<(i32,)>) -> &'static i32 {\n     // FIXME(#46983): error message should be better\n-    &s.0 //~ ERROR free region `` does not outlive free region `'static`\n+    &s.0 //~ ERROR explicit lifetime required in the type of `s` [E0621]\n }\n \n fn main() {"}, {"sha": "4f0bd88f988ae3e370c6c1e71e9bab31d572b303", "filename": "src/test/ui/nll/guarantor-issue-46974.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1aa454e1e65cbd47d60849f274debe96226b1a5a/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1aa454e1e65cbd47d60849f274debe96226b1a5a/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.stderr?ref=1aa454e1e65cbd47d60849f274debe96226b1a5a", "patch": "@@ -7,11 +7,14 @@ error[E0506]: cannot assign to `*s` because it is borrowed\n 19 |     *s = (2,); //~ ERROR cannot assign to `*s`\n    |     ^^^^^^^^^ assignment to borrowed `*s` occurs here\n \n-error: free region `` does not outlive free region `'static`\n+error[E0621]: explicit lifetime required in the type of `s`\n   --> $DIR/guarantor-issue-46974.rs:25:5\n    |\n-25 |     &s.0 //~ ERROR free region `` does not outlive free region `'static`\n-   |     ^^^^\n+23 | fn bar(s: &Box<(i32,)>) -> &'static i32 {\n+   |        - consider changing the type of `s` to `&'static std::boxed::Box<(i32,)>`\n+24 |     // FIXME(#46983): error message should be better\n+25 |     &s.0 //~ ERROR explicit lifetime required in the type of `s` [E0621]\n+   |     ^^^^ lifetime `'static` required\n \n error: aborting due to 2 previous errors\n "}]}