{"sha": "2d060034f0fd5f5780c7fd41046901b8e0cdf7e8", "node_id": "C_kwDOAAsO6NoAKDJkMDYwMDM0ZjBmZDVmNTc4MGM3ZmQ0MTA0NjkwMWI4ZTBjZGY3ZTg", "commit": {"author": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2022-12-07T20:13:22Z"}, "committer": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2022-12-21T03:39:33Z"}, "message": "Update track_caller logic/lint after rebase", "tree": {"sha": "7c28ab790c359723d2c401232c50c7f08de1031d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c28ab790c359723d2c401232c50c7f08de1031d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d060034f0fd5f5780c7fd41046901b8e0cdf7e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d060034f0fd5f5780c7fd41046901b8e0cdf7e8", "html_url": "https://github.com/rust-lang/rust/commit/2d060034f0fd5f5780c7fd41046901b8e0cdf7e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d060034f0fd5f5780c7fd41046901b8e0cdf7e8/comments", "author": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e28a07a0a157b63dc11e9f590484d5332866623a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e28a07a0a157b63dc11e9f590484d5332866623a", "html_url": "https://github.com/rust-lang/rust/commit/e28a07a0a157b63dc11e9f590484d5332866623a"}], "stats": {"total": 89, "additions": 52, "deletions": 37}, "files": [{"sha": "a58c74dbc333a16309917b548e4fe57171dbc543", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 27, "deletions": 26, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/2d060034f0fd5f5780c7fd41046901b8e0cdf7e8/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d060034f0fd5f5780c7fd41046901b8e0cdf7e8/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=2d060034f0fd5f5780c7fd41046901b8e0cdf7e8", "patch": "@@ -656,34 +656,35 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             hir::ExprKind::Closure(c)\n         };\n \n-        let track_caller = self\n-            .attrs\n-            .get(&outer_hir_id.local_id)\n-            .map_or(false, |attrs| attrs.into_iter().any(|attr| attr.has_name(sym::track_caller)));\n-\n         let hir_id = self.lower_node_id(closure_node_id);\n-        if track_caller {\n-            let unstable_span = self.mark_span_with_reason(\n-                DesugaringKind::Async,\n-                span,\n-                self.allow_gen_future.clone(),\n-            );\n-            self.lower_attrs(\n-                hir_id,\n-                &[Attribute {\n-                    kind: AttrKind::Normal(ptr::P(NormalAttr {\n-                        item: AttrItem {\n-                            path: Path::from_ident(Ident::new(sym::track_caller, span)),\n-                            args: AttrArgs::Empty,\n+        let unstable_span = self.mark_span_with_reason(\n+            DesugaringKind::Async,\n+            span,\n+            self.allow_gen_future.clone(),\n+        );\n+        if self.tcx.features().closure_track_caller {\n+            let track_caller = self\n+                .attrs\n+                .get(&outer_hir_id.local_id)\n+                .map_or(false, |attrs| attrs.into_iter().any(|attr| attr.has_name(sym::track_caller)));\n+            if track_caller {\n+                self.lower_attrs(\n+                    hir_id,\n+                    &[Attribute {\n+                        kind: AttrKind::Normal(ptr::P(NormalAttr {\n+                            item: AttrItem {\n+                                path: Path::from_ident(Ident::new(sym::track_caller, span)),\n+                                args: AttrArgs::Empty,\n+                                tokens: None,\n+                            },\n                             tokens: None,\n-                        },\n-                        tokens: None,\n-                    })),\n-                    id: self.tcx.sess.parse_sess.attr_id_generator.mk_attr_id(),\n-                    style: AttrStyle::Outer,\n-                    span: unstable_span,\n-                }],\n-            );\n+                        })),\n+                        id: self.tcx.sess.parse_sess.attr_id_generator.mk_attr_id(),\n+                        style: AttrStyle::Outer,\n+                        span: unstable_span,\n+                    }],\n+                    );\n+            }\n         }\n \n         let generator = hir::Expr { hir_id, kind: generator_kind, span: self.lower_span(span) };"}, {"sha": "6d3e33f2b6295b04ecd07fdd4764489776194de3", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2d060034f0fd5f5780c7fd41046901b8e0cdf7e8/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d060034f0fd5f5780c7fd41046901b8e0cdf7e8/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=2d060034f0fd5f5780c7fd41046901b8e0cdf7e8", "patch": "@@ -1397,7 +1397,7 @@ impl<'tcx> LateLintPass<'tcx> for UngatedAsyncFnTrackCaller {\n         span: Span,\n         hir_id: HirId,\n     ) {\n-        if let HirFnKind::ItemFn(_, _, _) = fn_kind && fn_kind.asyncness() == IsAsync::Async && !cx.tcx.features().closure_track_caller {\n+        if fn_kind.asyncness() == IsAsync::Async && !cx.tcx.features().closure_track_caller {\n             // Now, check if the function has the `#[track_caller]` attribute\n             let attrs = cx.tcx.hir().attrs(hir_id);\n             let maybe_track_caller = attrs.iter().find(|attr| attr.has_name(sym::track_caller));\n@@ -1407,12 +1407,20 @@ impl<'tcx> LateLintPass<'tcx> for UngatedAsyncFnTrackCaller {\n                     attr.span,\n                     fluent::lint_ungated_async_fn_track_caller,\n                     |lint| {\n-                        lint.span_label(span, \"this function will not propagate the caller location\");\n+                        lint.span_label(\n+                            span,\n+                            \"this function will not propagate the caller location\",\n+                        );\n                         if cx.tcx.sess.is_nightly_build() {\n-                            lint.span_suggestion(attr.span, fluent::suggestion, \"closure_track_caller\", Applicability::MachineApplicable);\n+                            lint.span_suggestion(\n+                                attr.span,\n+                                fluent::suggestion,\n+                                \"closure_track_caller\",\n+                                Applicability::MachineApplicable,\n+                            );\n                         }\n                         lint\n-                    }\n+                    },\n                 );\n             }\n         }"}, {"sha": "1275d6f223c7a38ebe5fbfd42cc50c04c4990149", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d060034f0fd5f5780c7fd41046901b8e0cdf7e8/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d060034f0fd5f5780c7fd41046901b8e0cdf7e8/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=2d060034f0fd5f5780c7fd41046901b8e0cdf7e8", "patch": "@@ -219,6 +219,7 @@ late_lint_methods!(\n             // May Depend on constants elsewhere\n             UnusedBrokenConst: UnusedBrokenConst,\n             UnstableFeatures: UnstableFeatures,\n+            UngatedAsyncFnTrackCaller: UngatedAsyncFnTrackCaller,\n             ArrayIntoIter: ArrayIntoIter::default(),\n             DropTraitConstraints: DropTraitConstraints,\n             TemporaryCStringAsPtr: TemporaryCStringAsPtr,"}, {"sha": "f313658c4464ecf71b9e85bf205d1bd5c4ad19d9", "filename": "src/test/ui/async-await/track-caller/panic-track-caller.nofeat.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2d060034f0fd5f5780c7fd41046901b8e0cdf7e8/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.nofeat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d060034f0fd5f5780c7fd41046901b8e0cdf7e8/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.nofeat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.nofeat.stderr?ref=2d060034f0fd5f5780c7fd41046901b8e0cdf7e8", "patch": "@@ -10,5 +10,15 @@ LL | | }\n    |\n    = note: `#[warn(ungated_async_fn_track_caller)]` on by default\n \n-warning: 1 warning emitted\n+warning: `#[track_caller]` on async functions is a no-op\n+  --> $DIR/panic-track-caller.rs:62:5\n+   |\n+LL |       #[track_caller]\n+   |       ^^^^^^^^^^^^^^^ help: enable this unstable feature: `closure_track_caller`\n+LL | /     async fn bar_assoc() {\n+LL | |         panic!();\n+LL | |     }\n+   | |_____- this function will not propagate the caller location\n+\n+warning: 2 warnings emitted\n "}, {"sha": "02077db7c629a3d5dfd31d0466dbdde560dd1b04", "filename": "src/test/ui/async-await/track-caller/panic-track-caller.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2d060034f0fd5f5780c7fd41046901b8e0cdf7e8/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d060034f0fd5f5780c7fd41046901b8e0cdf7e8/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.rs?ref=2d060034f0fd5f5780c7fd41046901b8e0cdf7e8", "patch": "@@ -59,7 +59,7 @@ async fn foo_track_caller() {\n struct Foo;\n \n impl Foo {\n-    #[track_caller]\n+    #[track_caller] //[nofeat]~ WARN `#[track_caller]` on async functions is a no-op\n     async fn bar_assoc() {\n         panic!();\n     }\n@@ -104,9 +104,4 @@ fn main() {\n     assert_eq!(panicked_at(|| block_on(foo_assoc())), 69);\n     #[cfg(nofeat)]\n     assert_eq!(panicked_at(|| block_on(foo_assoc())), 64);\n-\n-    #[cfg(feat)]\n-    assert_eq!(panicked_at(|| block_on(foo_closure())), 76);\n-    #[cfg(feat)]\n-    assert_eq!(panicked_at(|| block_on(foo_closure())), 74);\n }"}]}