{"sha": "49043f4434b02d0a8a68c87d7672cc2e944a3deb", "node_id": "C_kwDOAAsO6NoAKDQ5MDQzZjQ0MzRiMDJkMGE4YTY4Yzg3ZDc2NzJjYzJlOTQ0YTNkZWI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-12T23:32:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-12T23:32:28Z"}, "message": "rust-lang/portable-simd#262: also implement clamp for integer vectors\n\n\r\n* add test from issue rust-lang/portable-simd#253", "tree": {"sha": "bddaac1807f8631cf9fee265f63eada58522ecef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bddaac1807f8631cf9fee265f63eada58522ecef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49043f4434b02d0a8a68c87d7672cc2e944a3deb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiLS2MCRBK7hj4Ov3rIwAACJYIAHhNeEKipulB9H7YV0Q4OjNm\n2j++CdJKxTFSLHM/d+77DAYRZrngneLin6PPcOX19GyazPaMW4l93vMnYyQ5y7L9\nRZP5bgpDX1TxkDYM32f3JX6yA6VBSLxh5/ooLhG6o6QLQXdHCAMYXtufP+KZQ2YH\nFspOcQkQyyftEkR07YibGmnU1ADFbkIP64R9u9hnmeoAQj9n1F2Lgl4PpJ/CM9LJ\n8izcUGKn63NbBBl9MhxSQ/XIlySE/CnT0c6xueGpmKvRVbL8HiQUKInmFzm+HzVC\n9droqBmuRs982BKOulpqru9dZFv2/DD99tTBr1c6Le6xqX6EucHC6W8isccUVsk=\n=xJt6\n-----END PGP SIGNATURE-----\n", "payload": "tree bddaac1807f8631cf9fee265f63eada58522ecef\nparent b6ee5293f43a6e9ec1c0d977a4037462bd4d02ca\nauthor Ralf Jung <post@ralfj.de> 1647127948 -0500\ncommitter GitHub <noreply@github.com> 1647127948 -0800\n\nrust-lang/portable-simd#262: also implement clamp for integer vectors\n\n\r\n* add test from issue rust-lang/portable-simd#253"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49043f4434b02d0a8a68c87d7672cc2e944a3deb", "html_url": "https://github.com/rust-lang/rust/commit/49043f4434b02d0a8a68c87d7672cc2e944a3deb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49043f4434b02d0a8a68c87d7672cc2e944a3deb/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6ee5293f43a6e9ec1c0d977a4037462bd4d02ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6ee5293f43a6e9ec1c0d977a4037462bd4d02ca", "html_url": "https://github.com/rust-lang/rust/commit/b6ee5293f43a6e9ec1c0d977a4037462bd4d02ca"}], "stats": {"total": 68, "additions": 55, "deletions": 13}, "files": [{"sha": "7b0d0a6864b9e631f5e4be1c417fcf5b4c01ef6e", "filename": "crates/core_simd/src/comparisons.rs", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/49043f4434b02d0a8a68c87d7672cc2e944a3deb/crates%2Fcore_simd%2Fsrc%2Fcomparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49043f4434b02d0a8a68c87d7672cc2e944a3deb/crates%2Fcore_simd%2Fsrc%2Fcomparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fcomparisons.rs?ref=49043f4434b02d0a8a68c87d7672cc2e944a3deb", "patch": "@@ -67,36 +67,54 @@ where\n     }\n }\n \n-macro_rules! impl_min_max_vector {\n+macro_rules! impl_ord_methods_vector {\n     { $type:ty } => {\n         impl<const LANES: usize> Simd<$type, LANES>\n         where\n             LaneCount<LANES>: SupportedLaneCount,\n         {\n-            /// Returns the lane-wise minimum with other\n+            /// Returns the lane-wise minimum with `other`.\n             #[must_use = \"method returns a new vector and does not mutate the original value\"]\n             #[inline]\n             pub fn min(self, other: Self) -> Self {\n                 self.lanes_gt(other).select(other, self)\n             }\n \n-            /// Returns the lane-wise maximum with other\n+            /// Returns the lane-wise maximum with `other`.\n             #[must_use = \"method returns a new vector and does not mutate the original value\"]\n             #[inline]\n             pub fn max(self, other: Self) -> Self {\n                 self.lanes_lt(other).select(other, self)\n             }\n+\n+            /// Restrict each lane to a certain interval.\n+            ///\n+            /// For each lane, returns `max` if `self` is greater than `max`, and `min` if `self` is\n+            /// less than `min`. Otherwise returns `self`.\n+            ///\n+            /// # Panics\n+            ///\n+            /// Panics if `min > max` on any lane.\n+            #[must_use = \"method returns a new vector and does not mutate the original value\"]\n+            #[inline]\n+            pub fn clamp(self, min: Self, max: Self) -> Self {\n+                assert!(\n+                    min.lanes_le(max).all(),\n+                    \"each lane in `min` must be less than or equal to the corresponding lane in `max`\",\n+                );\n+                self.max(min).min(max)\n+            }\n         }\n     }\n }\n \n-impl_min_max_vector!(i8);\n-impl_min_max_vector!(i16);\n-impl_min_max_vector!(i32);\n-impl_min_max_vector!(i64);\n-impl_min_max_vector!(isize);\n-impl_min_max_vector!(u8);\n-impl_min_max_vector!(u16);\n-impl_min_max_vector!(u32);\n-impl_min_max_vector!(u64);\n-impl_min_max_vector!(usize);\n+impl_ord_methods_vector!(i8);\n+impl_ord_methods_vector!(i16);\n+impl_ord_methods_vector!(i32);\n+impl_ord_methods_vector!(i64);\n+impl_ord_methods_vector!(isize);\n+impl_ord_methods_vector!(u8);\n+impl_ord_methods_vector!(u16);\n+impl_ord_methods_vector!(u32);\n+impl_ord_methods_vector!(u64);\n+impl_ord_methods_vector!(usize);"}, {"sha": "171e5b472fa76e224eb722451f3a1a474e0e7612", "filename": "crates/core_simd/tests/i16_ops.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/49043f4434b02d0a8a68c87d7672cc2e944a3deb/crates%2Fcore_simd%2Ftests%2Fi16_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49043f4434b02d0a8a68c87d7672cc2e944a3deb/crates%2Fcore_simd%2Ftests%2Fi16_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fi16_ops.rs?ref=49043f4434b02d0a8a68c87d7672cc2e944a3deb", "patch": "@@ -18,3 +18,15 @@ fn min_is_not_lexicographic() {\n     let b = i16x2::from_array([12, -4]);\n     assert_eq!(a.min(b), i16x2::from_array([10, -4]));\n }\n+\n+#[test]\n+fn clamp_is_not_lexicographic() {\n+    let a = i16x2::splat(10);\n+    let lo = i16x2::from_array([-12, -4]);\n+    let up = i16x2::from_array([-4, 12]);\n+    assert_eq!(a.clamp(lo, up), i16x2::from_array([-4, 10]));\n+\n+    let x = i16x2::from_array([1, 10]);\n+    let y = x.clamp(i16x2::splat(0), i16x2::splat(9));\n+    assert_eq!(y, i16x2::from_array([1, 9]));\n+}"}, {"sha": "bea02750ef2ec32b9a7128a4e2f8df1d443faeb6", "filename": "crates/core_simd/tests/ops_macros.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/49043f4434b02d0a8a68c87d7672cc2e944a3deb/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49043f4434b02d0a8a68c87d7672cc2e944a3deb/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_macros.rs?ref=49043f4434b02d0a8a68c87d7672cc2e944a3deb", "patch": "@@ -239,6 +239,18 @@ macro_rules! impl_signed_tests {\n                     let b = Vector::<LANES>::splat(0);\n                     assert_eq!(a.max(b), a);\n                 }\n+\n+                fn clamp<const LANES: usize>() {\n+                    let min = Vector::<LANES>::splat(Scalar::MIN);\n+                    let max = Vector::<LANES>::splat(Scalar::MAX);\n+                    let zero = Vector::<LANES>::splat(0);\n+                    let one = Vector::<LANES>::splat(1);\n+                    let negone = Vector::<LANES>::splat(-1);\n+                    assert_eq!(zero.clamp(min, max), zero);\n+                    assert_eq!(zero.clamp(min, one), zero);\n+                    assert_eq!(zero.clamp(one, max), one);\n+                    assert_eq!(zero.clamp(min, negone), negone);\n+                }\n             }\n \n             test_helpers::test_lanes_panic! {"}]}