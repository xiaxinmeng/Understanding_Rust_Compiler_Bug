{"sha": "e6b630c5b178cb19b2453cac9d7b342d6d676def", "node_id": "C_kwDOAAsO6NoAKGU2YjYzMGM1YjE3OGNiMTliMjQ1M2NhYzlkN2IzNDJkNmQ2NzZkZWY", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2022-06-23T20:40:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-23T20:40:06Z"}, "message": "apply suggestions from oli-obk\n\nCo-authored-by: Oli Scherer <github35764891676564198441@oli-obk.de>", "tree": {"sha": "48baf5d1a009d0a576a1662a22da8f822e533d5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48baf5d1a009d0a576a1662a22da8f822e533d5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6b630c5b178cb19b2453cac9d7b342d6d676def", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJitM+mCRBK7hj4Ov3rIwAApZMIAJ2fPUAaObz2z6foTEGdZSSZ\nIh7kt9sgMGFlOsJUUCuKH6iV9F/gFQZ047fYiKsnEyynH3N0hz6I7rD9Qnhaujh6\nA9Izb1qET445VetFShlbg31C+B30Rfqgx29hdiG02ASe02/+hUoVsNmWQty9qxDm\nOR+i9oFAQQh+34d03D9u9IgcPZE6q4NduoSVPm3Atr8ekyTT+HXhf54LqDgu0jY4\n1RDq8VXehbVjr9Qwbnn4uwdHdy3q4J5tdANn93Acygf7uDSU5r02jHz9xPVpZeiJ\nw7j5tkNicRzuqnLLCRqWktNzC4Daou0kpjoNdzsk4OYIm5r3PD/vTtCZPg0OJOg=\n=sepA\n-----END PGP SIGNATURE-----\n", "payload": "tree 48baf5d1a009d0a576a1662a22da8f822e533d5d\nparent c9bf88ccf92237d17c1be2b353664d8ac73cd971\nauthor Niko Matsakis <niko@alum.mit.edu> 1656016806 -0400\ncommitter GitHub <noreply@github.com> 1656016806 -0400\n\napply suggestions from oli-obk\n\nCo-authored-by: Oli Scherer <github35764891676564198441@oli-obk.de>"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6b630c5b178cb19b2453cac9d7b342d6d676def", "html_url": "https://github.com/rust-lang/rust/commit/e6b630c5b178cb19b2453cac9d7b342d6d676def", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6b630c5b178cb19b2453cac9d7b342d6d676def/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9bf88ccf92237d17c1be2b353664d8ac73cd971", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9bf88ccf92237d17c1be2b353664d8ac73cd971", "html_url": "https://github.com/rust-lang/rust/commit/c9bf88ccf92237d17c1be2b353664d8ac73cd971"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "33cf47c00e5f67d93b781a14ae1fb84a5ef89cea", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6b630c5b178cb19b2453cac9d7b342d6d676def/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6b630c5b178cb19b2453cac9d7b342d6d676def/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=e6b630c5b178cb19b2453cac9d7b342d6d676def", "patch": "@@ -1364,7 +1364,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n         let result = self.scc_values.contains_points(sup_region_scc, sub_region_scc);\n         debug!(\n-            \"eval_outlives: returning {} because of comparison between points in sup/sub\",\n+            \"returning {} because of comparison between points in sup/sub\",\n             result\n         );\n         result"}, {"sha": "a268493b28f631954047613056ee7bf26ec51ad6", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6b630c5b178cb19b2453cac9d7b342d6d676def/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6b630c5b178cb19b2453cac9d7b342d6d676def/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=e6b630c5b178cb19b2453cac9d7b342d6d676def", "patch": "@@ -318,7 +318,7 @@ where\n         self.delegate.push_verify(origin, generic, region, verify_bound);\n     }\n \n-    #[tracing::instrument(level = \"Debug\", skip(self))]\n+    #[tracing::instrument(level = \"debug\", skip(self))]\n     fn projection_must_outlive(\n         &mut self,\n         origin: infer::SubregionOrigin<'tcx>,\n@@ -361,7 +361,7 @@ where\n         // }` in the trait definition.\n         approx_env_bounds.retain(|bound_outlives| {\n             // OK to skip binder because we only manipulate and compare against other\n-            // values from the same inder. e.g. if we have (e.g.) `for<'a> <T as Trait<'a>>::Item: 'a`\n+            // values from the same binder. e.g. if we have (e.g.) `for<'a> <T as Trait<'a>>::Item: 'a`\n             // in `bound`, the `'a` will be a `^1` (bound, debruijn index == innermost) region.\n             // If the declaration is `trait Trait<'b> { type Item: 'b; }`, then `projection_declared_bounds_from_trait`\n             // will be invoked with `['b => ^1]` and so we will get `^1` returned."}, {"sha": "99fd41976a31f7d8808619919d1306e364c69cb3", "filename": "compiler/rustc_infer/src/infer/outlives/test_type_match.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e6b630c5b178cb19b2453cac9d7b342d6d676def/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6b630c5b178cb19b2453cac9d7b342d6d676def/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs?ref=e6b630c5b178cb19b2453cac9d7b342d6d676def", "patch": "@@ -34,7 +34,7 @@ use crate::infer::region_constraints::VerifyIfEq;\n /// like are used. This is a particular challenge since this function is invoked\n /// very late in inference and hence cannot make use of the normal inference\n /// machinery.\n-#[tracing::instrument(level = \"Debug\", skip(tcx, param_env))]\n+#[tracing::instrument(level = \"debug\", skip(tcx, param_env))]\n pub fn extract_verify_if_eq<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n@@ -63,7 +63,7 @@ pub fn extract_verify_if_eq<'tcx>(\n }\n \n /// True if a (potentially higher-ranked) outlives\n-#[tracing::instrument(level = \"Debug\", skip(tcx, param_env))]\n+#[tracing::instrument(level = \"debug\", skip(tcx, param_env))]\n pub(super) fn can_match_erased_ty<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n@@ -102,7 +102,7 @@ impl<'tcx> Match<'tcx> {\n \n     /// Binds the pattern variable `br` to `value`; returns an `Err` if the pattern\n     /// is already bound to a different value.\n-    #[tracing::instrument(level = \"Debug\", skip(self))]\n+    #[tracing::instrument(level = \"debug\", skip(self))]\n     fn bind(\n         &mut self,\n         br: ty::BoundRegion,\n@@ -167,7 +167,7 @@ impl<'tcx> TypeRelation<'tcx> for Match<'tcx> {\n     #[instrument(skip(self), level = \"debug\")]\n     fn tys(&mut self, pattern: Ty<'tcx>, value: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {\n         if pattern == value {\n-            return Ok(pattern);\n+            Ok(pattern)\n         } else {\n             relate::super_relate_tys(self, pattern, value)\n         }\n@@ -181,7 +181,7 @@ impl<'tcx> TypeRelation<'tcx> for Match<'tcx> {\n     ) -> RelateResult<'tcx, ty::Const<'tcx>> {\n         debug!(\"{}.consts({:?}, {:?})\", self.tag(), pattern, value);\n         if pattern == value {\n-            return Ok(pattern);\n+            Ok(pattern)\n         } else {\n             relate::super_relate_consts(self, pattern, value)\n         }"}]}