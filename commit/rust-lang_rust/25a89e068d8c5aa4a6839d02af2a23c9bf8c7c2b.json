{"sha": "25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1YTg5ZTA2OGQ4YzVhYTRhNjgzOWQwMmFmMmEyM2M5YmY4YzdjMmI=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-07-25T21:16:12Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-07-25T21:18:07Z"}, "message": "Rename the block type to be blk also. Sorry.", "tree": {"sha": "1ced129251de189280fbeb3a8b61665caf047895", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ced129251de189280fbeb3a8b61665caf047895"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b", "html_url": "https://github.com/rust-lang/rust/commit/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "552bff8a2155e9e404a3cd279a26a374188d65f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/552bff8a2155e9e404a3cd279a26a374188d65f7", "html_url": "https://github.com/rust-lang/rust/commit/552bff8a2155e9e404a3cd279a26a374188d65f7"}], "stats": {"total": 165, "additions": 83, "deletions": 82}, "files": [{"sha": "592305b4a73e2769d156937d8c3c4b4044dd9102", "filename": "src/comp/front/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fconfig.rs?ref=25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b", "patch": "@@ -78,8 +78,8 @@ fn filter_stmt(&ast::crate_cfg cfg,\n     }\n }\n \n-fn fold_block(&ast::crate_cfg cfg, &ast::block_ b,\n-              fold::ast_fold fld) -> ast::block_  {\n+fn fold_block(&ast::crate_cfg cfg, &ast::blk_ b,\n+              fold::ast_fold fld) -> ast::blk_  {\n     auto filter = bind filter_stmt(cfg, _);\n     auto filtered_stmts = ivec::filter_map(filter, b.stmts);\n     ret rec(stmts=ivec::map(fld.fold_stmt, filtered_stmts),"}, {"sha": "dc04c8b37a13fa78ad154ef86cae00cf42b4ff87", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b", "patch": "@@ -186,7 +186,7 @@ fn mk_tests(&test_ctxt cx) -> @ast::item {\n     // The vector of test_descs for this crate\n     auto test_descs = mk_test_desc_vec(cx);\n \n-    let ast::block_ body_= rec(stmts = ~[],\n+    let ast::blk_ body_= rec(stmts = ~[],\n                                expr = option::some(test_descs),\n                                id = cx.next_node_id());\n     auto body = nospan(body_);\n@@ -313,7 +313,7 @@ fn mk_main(&test_ctxt cx) -> @ast::item {\n \n     auto test_main_call_expr = mk_test_main_call(cx);\n \n-    let ast::block_ body_ = rec(stmts = ~[],\n+    let ast::blk_ body_ = rec(stmts = ~[],\n                                 expr = option::some(test_main_call_expr),\n                                 id = cx.next_node_id());\n     auto body = rec(node = body_, span = rec(lo=0u, hi=0u));"}, {"sha": "c6c70b464d918978646b1efbf2a9c53931f429a8", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b", "patch": "@@ -326,7 +326,7 @@ fn arm_defnums(&ast::arm arm) -> node_id[] {\n }\n \n fn check_for_each(&ctx cx, &@ast::local local, &@ast::expr call,\n-                  &ast::block blk, &scope sc, &vt[scope] v) {\n+                  &ast::blk blk, &scope sc, &vt[scope] v) {\n     visit::visit_expr(call, sc, v);\n     alt (call.node) {\n         case (ast::expr_call(?f, ?args)) {\n@@ -344,7 +344,7 @@ fn check_for_each(&ctx cx, &@ast::local local, &@ast::expr call,\n     }\n }\n \n-fn check_for(&ctx cx, &@ast::local local, &@ast::expr seq, &ast::block blk,\n+fn check_for(&ctx cx, &@ast::local local, &@ast::expr seq, &ast::blk blk,\n              &scope sc, &vt[scope] v) {\n     visit::visit_expr(seq, sc, v);\n     auto defnum = local.node.id;"}, {"sha": "d50d5a54bdb722ad1c4032fb609c45825df8caf5", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b", "patch": "@@ -52,7 +52,7 @@ tag scope {\n     scope_fn(ast::fn_decl, ast::ty_param[]);\n     scope_native_item(@ast::native_item);\n     scope_loop(@ast::local); // there's only 1 decl per loop.\n-    scope_block(ast::block);\n+    scope_block(ast::blk);\n     scope_arm(ast::arm);\n }\n \n@@ -361,7 +361,7 @@ fn visit_fn_with_scope(&@env e, &ast::_fn f, &ast::ty_param[] tp, &span sp,\n                     cons(scope_fn(f.decl, tp), @sc), v);\n }\n \n-fn visit_block_with_scope(&ast::block b, &scopes sc, &vt[scopes] v) {\n+fn visit_block_with_scope(&ast::blk b, &scopes sc, &vt[scopes] v) {\n     visit::visit_block(b, cons(scope_block(b), @sc), v);\n }\n \n@@ -781,7 +781,7 @@ fn lookup_in_obj(&ident name, &ast::_obj ob, &ast::ty_param[] ty_params,\n     }\n }\n \n-fn lookup_in_block(&ident name, &ast::block_ b, namespace ns) ->\n+fn lookup_in_block(&ident name, &ast::blk_ b, namespace ns) ->\n    option::t[def] {\n     for (@ast::stmt st in b.stmts) {\n         alt (st.node) {\n@@ -1319,7 +1319,7 @@ fn check_arm(@env e, &ast::arm a, &() x, &vt[()] v) {\n     }\n }\n \n-fn check_block(@env e, &ast::block b, &() x, &vt[()] v) {\n+fn check_block(@env e, &ast::blk b, &() x, &vt[()] v) {\n     visit::visit_block(b, x, v);\n     auto values = checker(*e, \"value\");\n     auto types = checker(*e, \"type\");"}, {"sha": "ef62be865d3da9cd58730f42eae3424280727436", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b", "patch": "@@ -3696,7 +3696,7 @@ fn join_branches(&@block_ctxt parent_cx, &result[] ins) -> @block_ctxt {\n \n tag out_method { return; save_in(ValueRef); }\n \n-fn trans_if(&@block_ctxt cx, &@ast::expr cond, &ast::block thn,\n+fn trans_if(&@block_ctxt cx, &@ast::expr cond, &ast::blk thn,\n             &option::t[@ast::expr] els, ast::node_id id, &out_method output)\n     -> result {\n     auto cond_res = trans_expr(cx, cond);\n@@ -3731,11 +3731,11 @@ fn trans_if(&@block_ctxt cx, &@ast::expr cond, &ast::block thn,\n }\n \n fn trans_for(&@block_ctxt cx, &@ast::local local, &@ast::expr seq,\n-             &ast::block body) -> result {\n+             &ast::blk body) -> result {\n     // FIXME: We bind to an alias here to avoid a segfault... this is\n     // obviously a bug.\n     fn inner(&@block_ctxt cx, @ast::local local, ValueRef curr, ty::t t,\n-             &ast::block body, @block_ctxt outer_next_cx) -> result {\n+             &ast::blk body, @block_ctxt outer_next_cx) -> result {\n         auto next_cx = new_sub_block_ctxt(cx, \"next\");\n         auto scope_cx =\n             new_loop_scope_block_ctxt(cx, option::some[@block_ctxt](next_cx),\n@@ -3906,7 +3906,7 @@ fn load_environment(&@block_ctxt cx, &@fn_ctxt fcx,\n }\n \n fn trans_for_each(&@block_ctxt cx, &@ast::local local, &@ast::expr seq,\n-                  &ast::block body) -> result {\n+                  &ast::blk body) -> result {\n     /*\n      * The translation is a little .. complex here. Code like:\n      *\n@@ -3985,7 +3985,7 @@ fn trans_for_each(&@block_ctxt cx, &@ast::local local, &@ast::expr seq,\n     }\n }\n \n-fn trans_while(&@block_ctxt cx, &@ast::expr cond, &ast::block body) ->\n+fn trans_while(&@block_ctxt cx, &@ast::expr cond, &ast::blk body) ->\n    result {\n     auto cond_cx = new_scope_block_ctxt(cx, \"while cond\");\n     auto next_cx = new_sub_block_ctxt(cx, \"next\");\n@@ -4001,7 +4001,7 @@ fn trans_while(&@block_ctxt cx, &@ast::expr cond, &ast::block body) ->\n     ret rslt(next_cx, C_nil());\n }\n \n-fn trans_do_while(&@block_ctxt cx, &ast::block body, &@ast::expr cond) ->\n+fn trans_do_while(&@block_ctxt cx, &ast::blk body, &@ast::expr cond) ->\n    result {\n     auto next_cx = new_sub_block_ctxt(cx, \"next\");\n     auto body_cx =\n@@ -6256,7 +6256,7 @@ fn trans_block_cleanups(&@block_ctxt cx, &@block_ctxt cleanup_cx)\n     ret bcx;\n }\n \n-iter block_locals(&ast::block b) -> @ast::local {\n+iter block_locals(&ast::blk b) -> @ast::local {\n     // FIXME: putting from inside an iter block doesn't work, so we can't\n     // use the index here.\n     for (@ast::stmt s in b.node.stmts) {\n@@ -6343,7 +6343,7 @@ fn alloc_local(&@block_ctxt cx, &@ast::local local) -> result {\n     ret r;\n }\n \n-fn trans_block(&@block_ctxt cx, &ast::block b, &out_method output) -> result {\n+fn trans_block(&@block_ctxt cx, &ast::blk b, &out_method output) -> result {\n     auto bcx = cx;\n     for each (@ast::local local in block_locals(b)) {\n         // FIXME Update bcx.sp"}, {"sha": "9c1f5087dd77c8658edcccb40f7f5b3de7a88f3c", "filename": "src/comp/middle/trans_dps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fmiddle%2Ftrans_dps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fmiddle%2Ftrans_dps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_dps.rs?ref=25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b", "patch": "@@ -446,7 +446,7 @@ fn trans_recv(&@block_ctxt bcx, &dest dest, &@ast::expr expr) -> @block_ctxt {\n     ret bcx;    // TODO\n }\n \n-fn trans_block(&@block_ctxt cx, &dest dest, &ast::block blk)\n+fn trans_block(&@block_ctxt cx, &dest dest, &ast::blk blk)\n         -> @block_ctxt {\n     auto bcx = cx;\n     for each (@ast::local local in trans::block_locals(blk)) {"}, {"sha": "438b21a5c7828c25f068d460ca418d33eac1d096", "filename": "src/comp/middle/tstate/annotate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs?ref=25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b", "patch": "@@ -27,7 +27,7 @@ fn collect_ids_expr(&@expr e, @mutable node_id[] rs) {\n     *rs += ~[e.id];\n }\n \n-fn collect_ids_block(&block b, @mutable node_id[] rs) {\n+fn collect_ids_block(&blk b, @mutable node_id[] rs) {\n     *rs += ~[b.node.id];\n }\n "}, {"sha": "7e01ed3ca787b2fe215cb8f6198cf8f7ab466fa6", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b", "patch": "@@ -332,7 +332,7 @@ fn stmt_pp(&crate_ctxt ccx, &stmt s) -> pre_and_post {\n \n \n /* fails if b has no annotation */\n-fn block_pp(&crate_ctxt ccx, &block b) -> pre_and_post {\n+fn block_pp(&crate_ctxt ccx, &blk b) -> pre_and_post {\n     log \"block_pp\";\n     ret node_id_to_ts_ann(ccx, b.node.id).conditions;\n }\n@@ -347,7 +347,7 @@ fn clear_precond(&crate_ctxt ccx, node_id id) {\n     ann::clear(pp.conditions.precondition);\n }\n \n-fn block_states(&crate_ctxt ccx, &block b) -> pre_and_post_state {\n+fn block_states(&crate_ctxt ccx, &blk b) -> pre_and_post_state {\n     log \"block_states\";\n     ret node_id_to_ts_ann(ccx, b.node.id).states;\n }\n@@ -392,19 +392,19 @@ fn stmt_poststate(&crate_ctxt ccx, &stmt s) -> poststate {\n     ret stmt_states(ccx, s).poststate;\n }\n \n-fn block_precond(&crate_ctxt ccx, &block b) -> precond {\n+fn block_precond(&crate_ctxt ccx, &blk b) -> precond {\n     ret block_pp(ccx, b).precondition;\n }\n \n-fn block_postcond(&crate_ctxt ccx, &block b) -> postcond {\n+fn block_postcond(&crate_ctxt ccx, &blk b) -> postcond {\n     ret block_pp(ccx, b).postcondition;\n }\n \n-fn block_prestate(&crate_ctxt ccx, &block b) -> prestate {\n+fn block_prestate(&crate_ctxt ccx, &blk b) -> prestate {\n     ret block_states(ccx, b).prestate;\n }\n \n-fn block_poststate(&crate_ctxt ccx, &block b) -> poststate {\n+fn block_poststate(&crate_ctxt ccx, &blk b) -> poststate {\n     ret block_states(ccx, b).poststate;\n }\n "}, {"sha": "0f96a7e5662638f8720313dfc8802d8bb08defec", "filename": "src/comp/middle/tstate/bitvectors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs?ref=25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b", "patch": "@@ -153,7 +153,7 @@ fn declare_var(&fn_ctxt fcx, &tsconstr c, prestate pre) -> prestate {\n     ret rslt;\n }\n \n-fn relax_precond_block_non_recursive(&fn_ctxt fcx, node_id i, &block b) {\n+fn relax_precond_block_non_recursive(&fn_ctxt fcx, node_id i, &blk b) {\n     relax_precond(i as uint, block_precond(fcx.ccx, b));\n }\n \n@@ -165,7 +165,7 @@ fn relax_precond_stmt(&fn_ctxt fcx, node_id i, &@stmt s) {\n     relax_precond(i as uint, stmt_precond(fcx.ccx, *s));\n }\n \n-fn relax_precond_block(&fn_ctxt fcx, node_id i, &block b) {\n+fn relax_precond_block(&fn_ctxt fcx, node_id i, &blk b) {\n     relax_precond_block_non_recursive(fcx, i, b);\n     // FIXME: should use visit instead\n     // could at least generalize this pattern"}, {"sha": "faeceddf3c253848da9aded9eaa5a09c6c445442", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b", "patch": "@@ -131,7 +131,7 @@ fn find_pre_post_exprs(&fn_ctxt fcx, &(@expr)[] args, node_id id) {\n                      seq_postconds(fcx, ivec::map(get_post, pps)));\n }\n \n-fn find_pre_post_loop(&fn_ctxt fcx, &@local l, &@expr index, &block body,\n+fn find_pre_post_loop(&fn_ctxt fcx, &@local l, &@expr index, &blk body,\n                       node_id id) {\n     find_pre_post_expr(fcx, index);\n     find_pre_post_block(fcx, body);\n@@ -152,7 +152,7 @@ fn find_pre_post_loop(&fn_ctxt fcx, &@local l, &@expr index, &block body,\n // Generates a pre/post assuming that a is the\n // annotation for an if-expression with consequent conseq\n // and alternative maybe_alt\n-fn join_then_else(&fn_ctxt fcx, &@expr antec, &block conseq,\n+fn join_then_else(&fn_ctxt fcx, &@expr antec, &blk conseq,\n                   &option::t[@expr] maybe_alt, node_id id, &if_ty chck) {\n     find_pre_post_expr(fcx, antec);\n     find_pre_post_block(fcx, conseq);\n@@ -644,7 +644,7 @@ fn find_pre_post_stmt(&fn_ctxt fcx, &stmt s) {\n     }\n }\n \n-fn find_pre_post_block(&fn_ctxt fcx, block b) {\n+fn find_pre_post_block(&fn_ctxt fcx, blk b) {\n     /* Want to say that if there is a break or cont in this\n      block, then that invalidates the poststate upheld by\n     any of the stmts after it."}, {"sha": "5161574eed22d4c5eded248c2c6080a0d913d338", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b", "patch": "@@ -177,7 +177,8 @@ fn find_pre_post_state_exprs(&fn_ctxt fcx, &prestate pres, node_id id,\n }\n \n fn find_pre_post_state_loop(&fn_ctxt fcx, prestate pres, &@local l,\n-                            &@expr index, &block body, node_id id) -> bool {\n+                            &@expr index, &blk body, node_id id)\n+    -> bool {\n     auto loop_pres = intersect_states(pres,\n                                       block_poststate(fcx.ccx, body));\n \n@@ -217,7 +218,7 @@ fn gen_if_local(&fn_ctxt fcx, &poststate p, &@expr e) -> bool {\n     }\n }\n \n-fn join_then_else(&fn_ctxt fcx, &@expr antec, &block conseq,\n+fn join_then_else(&fn_ctxt fcx, &@expr antec, &blk conseq,\n                   &option::t[@expr] maybe_alt, node_id id, &if_ty chk,\n                   &prestate pres) -> bool {\n     auto changed = set_prestate_ann(fcx.ccx, id, pres) |\n@@ -692,7 +693,7 @@ fn find_pre_post_state_stmt(&fn_ctxt fcx, &prestate pres, @stmt s) -> bool {\n \n /* Updates the pre- and post-states of statements in the block,\n    returns a boolean flag saying whether any pre- or poststates changed */\n-fn find_pre_post_state_block(&fn_ctxt fcx, &prestate pres0, &block b)\n+fn find_pre_post_state_block(&fn_ctxt fcx, &prestate pres0, &blk b)\n     -> bool {\n     /* First, set the pre-states and post-states for every expression */\n "}, {"sha": "d689c62d6df42f66d6a8336d436df85c8486cc3a", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b", "patch": "@@ -1874,7 +1874,7 @@ fn ty_var_id(&ctxt cx, t typ) -> int {\n \n \n // Type accessors for AST nodes\n-fn block_ty(&ctxt cx, &ast::block b) -> t {\n+fn block_ty(&ctxt cx, &ast::blk b) -> t {\n     ret node_id_to_type(cx, b.node.id);\n }\n "}, {"sha": "b56afe3d705057a34c20f1d733565909916acf4b", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b", "patch": "@@ -1105,7 +1105,7 @@ mod writeback {\n     fn visit_expr_pre(@wb_ctxt wbcx, &@ast::expr e) {\n         resolve_type_vars_for_node(wbcx, e.span, e.id);\n     }\n-    fn visit_block_pre(@wb_ctxt wbcx, &ast::block b) {\n+    fn visit_block_pre(@wb_ctxt wbcx, &ast::blk b) {\n         resolve_type_vars_for_node(wbcx, b.span, b.node.id);\n     }\n     fn visit_pat_pre(@wb_ctxt wbcx, &@ast::pat p) {\n@@ -1147,7 +1147,7 @@ mod writeback {\n     }\n     fn keep_going(@wb_ctxt wbcx) -> bool { !wbcx.ignore && wbcx.success }\n \n-    fn resolve_type_vars_in_block(&@fn_ctxt fcx, &ast::block blk) -> bool {\n+    fn resolve_type_vars_in_block(&@fn_ctxt fcx, &ast::blk blk) -> bool {\n         auto wbcx = @rec(fcx = fcx,\n                          mutable ignore = false,\n                          mutable success = true);\n@@ -1628,7 +1628,7 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n     // A generic function for checking for or for-each loops\n \n     fn check_for_or_for_each(&@fn_ctxt fcx, &@ast::local local,\n-                             &ty::t element_ty, &ast::block body,\n+                             &ty::t element_ty, &ast::blk body,\n                              ast::node_id node_id) {\n         check_decl_local(fcx, local);\n         check_block(fcx, body);\n@@ -1687,7 +1687,7 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n \n     // A generic function for checking the then and else in an if\n     // or if-check\n-    fn check_then_else(&@fn_ctxt fcx, &ast::block thn,\n+    fn check_then_else(&@fn_ctxt fcx, &ast::blk thn,\n                        &option::t[@ast::expr] elsopt,\n                        ast::node_id id, &span sp) {\n         check_block(fcx, thn);\n@@ -2598,7 +2598,7 @@ fn check_stmt(&@fn_ctxt fcx, &@ast::stmt stmt) {\n     write::nil_ty(fcx.ccx.tcx, node_id);\n }\n \n-fn check_block(&@fn_ctxt fcx, &ast::block blk) {\n+fn check_block(&@fn_ctxt fcx, &ast::blk blk) {\n     for (@ast::stmt s in blk.node.stmts) { check_stmt(fcx, s); }\n     alt (blk.node.expr) {\n         case (none) { write::nil_ty(fcx.ccx.tcx, blk.node.id); }"}, {"sha": "3fa40c001c3fa2b94ba7661f1366b61c2be8718f", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b", "patch": "@@ -116,9 +116,9 @@ tag meta_item_ {\n     meta_name_value(ident, lit);\n }\n \n-type block = spanned[block_];\n+type blk = spanned[blk_];\n \n-type block_ = rec((@stmt)[] stmts, option::t[@expr] expr, node_id id);\n+type blk_ = rec((@stmt)[] stmts, option::t[@expr] expr, node_id id);\n \n type pat = rec(node_id id,\n                pat_ node,\n@@ -260,7 +260,7 @@ type decl = spanned[decl_];\n \n tag decl_ { decl_local((@local)[]); decl_item(@item); }\n \n-type arm = rec((@pat)[] pats, block block);\n+type arm = rec((@pat)[] pats, blk block);\n \n type elt = rec(mutability mut, @expr expr);\n \n@@ -291,15 +291,15 @@ tag expr_ {\n     expr_unary(unop, @expr);\n     expr_lit(@lit);\n     expr_cast(@expr, @ty);\n-    expr_if(@expr, block, option::t[@expr]);\n+    expr_if(@expr, blk, option::t[@expr]);\n     expr_ternary(@expr, @expr, @expr);\n-    expr_while(@expr, block);\n-    expr_for(@local, @expr, block);\n-    expr_for_each(@local, @expr, block);\n-    expr_do_while(block, @expr);\n+    expr_while(@expr, blk);\n+    expr_for(@local, @expr, blk);\n+    expr_for_each(@local, @expr, blk);\n+    expr_do_while(blk, @expr);\n     expr_alt(@expr, arm[]);\n     expr_fn(_fn);\n-    expr_block(block);\n+    expr_block(blk);\n     /*\n      * FIXME: many of these @exprs should be constrained with\n      * is_lval once we have constrained types working.\n@@ -328,7 +328,7 @@ tag expr_ {\n     expr_check(check_mode, @expr);\n    /* FIXME Would be nice if expr_check desugared\n       to expr_if_check. */\n-    expr_if_check(@expr, block, option::t[@expr]);\n+    expr_if_check(@expr, blk, option::t[@expr]);\n     expr_port(option::t[@ty]);\n     expr_chan(@expr);\n     expr_anon_obj(anon_obj);\n@@ -340,7 +340,7 @@ type mac = spanned[mac_];\n tag mac_ {\n     mac_invoc(path, (@expr)[], option::t[str]);\n     mac_embed_type(@ty);\n-    mac_embed_block(block);\n+    mac_embed_block(blk);\n     mac_ellipsis;\n }\n \n@@ -513,7 +513,7 @@ tag controlflow {\n \n }\n \n-type _fn = rec(fn_decl decl, proto proto, block body);\n+type _fn = rec(fn_decl decl, proto proto, blk body);\n \n type method_ = rec(ident ident, _fn meth, node_id id);\n \n@@ -662,8 +662,8 @@ fn eq_ty(&@ty a, &@ty b) -> bool { ret std::box::ptr_eq(a, b); }\n \n fn hash_ty(&@ty t) -> uint { ret t.span.lo << 16u + t.span.hi; }\n \n-fn block_from_expr(@expr e) -> block {\n-    let block_ blk_ =\n+fn block_from_expr(@expr e) -> blk {\n+    auto blk_ =\n         rec(stmts=~[],\n             expr=option::some[@expr](e),\n             id=e.id);"}, {"sha": "839cf154d75991895ee259bfb1b2607028ae8bba", "filename": "src/comp/syntax/ext/simplext.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs?ref=25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b", "patch": "@@ -22,7 +22,7 @@ import ast::respan;\n import ast::ident;\n import ast::path;\n import ast::ty;\n-import ast::block;\n+import ast::blk;\n import ast::expr;\n import ast::expr_;\n import ast::path_;\n@@ -56,7 +56,7 @@ tag matchable {\n     match_path(path);\n     match_ident(ast::spanned[ident]);\n     match_ty(@ty);\n-    match_block(block);\n+    match_block(ast::blk);\n     match_exact; /* don't bind anything, just verify the AST traversal */\n }\n "}, {"sha": "47d9dd571356bddc137d916bbfd83e0285c9094a", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b", "patch": "@@ -28,14 +28,14 @@ type ast_fold_precursor =\n         //unlike the others, item_ is non-trivial\n         fn (&item_ i, ast_fold) -> item_        fold_item_underscore,\n         fn (&method_ m, ast_fold) -> method_              fold_method,\n-        fn (&block_ b, ast_fold) -> block_                fold_block,\n+        fn (&blk_ b, ast_fold) -> blk_                    fold_block,\n         fn (&stmt_ s, ast_fold) -> stmt_                  fold_stmt,\n         fn (&arm a, ast_fold) -> arm                      fold_arm,\n         fn (&pat_ p, ast_fold) -> pat_                    fold_pat,\n         fn (&decl_ d, ast_fold) -> decl_                  fold_decl,\n         fn (&expr_ e, ast_fold) -> expr_                  fold_expr,\n         fn (&ty_ t, ast_fold) -> ty_                      fold_ty,\n-        fn (&ast::constr_ c, ast_fold) -> constr_              fold_constr,\n+        fn (&ast::constr_ c, ast_fold) -> constr_         fold_constr,\n         fn (&_fn f, ast_fold) -> _fn                      fold_fn,\n         fn (&_mod m, ast_fold) -> _mod                    fold_mod,\n         fn (&native_mod, ast_fold) -> native_mod          fold_native_mod,\n@@ -54,7 +54,7 @@ type a_f =\n         fn (&@item i) -> @item                        fold_item,\n         fn (&item_ i) -> item_                        fold_item_underscore,\n         fn (&@method m) -> @method                    fold_method,\n-        fn (&block b) -> block                        fold_block,\n+        fn (&blk b) -> blk                            fold_block,\n         fn (&@stmt s) -> @stmt                        fold_stmt,\n         fn (&arm a) -> arm                            fold_arm,\n         fn (&@pat p) -> @pat                          fold_pat,\n@@ -81,7 +81,7 @@ fn nf_native_item_dummy(&@native_item n) -> @native_item { fail; }\n fn nf_item_dummy(&@item i) -> @item { fail; }\n fn nf_item_underscore_dummy(&item_ i) -> item_ { fail; }\n fn nf_method_dummy(&@method m) -> @method { fail; }\n-fn nf_block_dummy(&block b) -> block { fail; }\n+fn nf_blk_dummy(&blk b) -> blk { fail; }\n fn nf_stmt_dummy(&@stmt s) -> @stmt { fail; }\n fn nf_arm_dummy(&arm a) -> arm { fail; }\n fn nf_pat_dummy(&@pat p) -> @pat { fail; }\n@@ -259,7 +259,7 @@ fn noop_fold_method(&method_ m, ast_fold fld) -> method_ {\n }\n \n \n-fn noop_fold_block(&block_ b, ast_fold fld) -> block_ {\n+fn noop_fold_block(&blk_ b, ast_fold fld) -> blk_ {\n     ret rec(stmts=ivec::map(fld.fold_stmt, b.stmts),\n             expr=option::map(fld.fold_expr, b.expr), id=b.id);\n }\n@@ -580,7 +580,7 @@ fn dummy_out(ast_fold a) {\n              fold_item = nf_item_dummy,\n              fold_item_underscore = nf_item_underscore_dummy,\n              fold_method = nf_method_dummy,\n-             fold_block = nf_block_dummy,\n+             fold_block = nf_blk_dummy,\n              fold_stmt = nf_stmt_dummy,\n              fold_arm = nf_arm_dummy,\n              fold_pat = nf_pat_dummy,\n@@ -608,7 +608,7 @@ fn make_fold(&ast_fold_precursor afp) -> ast_fold {\n                      fold_item = nf_item_dummy,\n                      fold_item_underscore = nf_item_underscore_dummy,\n                      fold_method = nf_method_dummy,\n-                     fold_block = nf_block_dummy,\n+                     fold_block = nf_blk_dummy,\n                      fold_stmt = nf_stmt_dummy,\n                      fold_arm = nf_arm_dummy,\n                      fold_pat = nf_pat_dummy,\n@@ -653,7 +653,7 @@ fn make_fold(&ast_fold_precursor afp) -> ast_fold {\n     fn f_method(&ast_fold_precursor afp, ast_fold f, &@method x) -> @method {\n         ret @rec(node=afp.fold_method(x.node, f), span=x.span);\n     }\n-    fn f_block(&ast_fold_precursor afp, ast_fold f, &block x) -> block {\n+    fn f_block(&ast_fold_precursor afp, ast_fold f, &blk x) -> blk {\n         ret rec(node=afp.fold_block(x.node, f), span=x.span);\n     }\n     fn f_stmt(&ast_fold_precursor afp, ast_fold f, &@stmt x) -> @stmt {"}, {"sha": "6b616c909ab4c666dc1de425022be550aa0d0a7f", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b", "patch": "@@ -1309,7 +1309,7 @@ fn parse_assign_expr(&parser p) -> @ast::expr {\n }\n \n fn parse_if_expr_1(&parser p) -> tup(@ast::expr,\n-                                     ast::block, option::t[@ast::expr],\n+                                     ast::blk, option::t[@ast::expr],\n                                      uint, uint) {\n     auto lo = p.get_last_lo_pos();\n     auto cond = parse_expr(p);\n@@ -1754,13 +1754,13 @@ fn stmt_ends_with_semi(&ast::stmt stmt) -> bool {\n     }\n }\n \n-fn parse_block(&parser p) -> ast::block {\n+fn parse_block(&parser p) -> ast::blk {\n     expect(p, token::LBRACE);\n     be parse_block_tail(p);\n }\n \n // some blocks start with \"#{\"...\n-fn parse_block_tail(&parser p) -> ast::block {\n+fn parse_block_tail(&parser p) -> ast::blk {\n     auto lo = p.get_lo_pos();\n     let (@ast::stmt)[] stmts = ~[];\n     let option::t[@ast::expr] expr = none;\n@@ -1912,7 +1912,7 @@ fn parse_method(&parser p) -> @ast::method {\n \n fn parse_dtor(&parser p) -> @ast::method {\n     auto lo = p.get_last_lo_pos();\n-    let ast::block b = parse_block(p);\n+    let ast::blk b = parse_block(p);\n     let ast::arg[] inputs = ~[];\n     let @ast::ty output = @spanned(lo, lo, ast::ty_nil);\n     let ast::fn_decl d ="}, {"sha": "a99da8f5d1ee4d9664bffb3462742be831070e7c", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b", "patch": "@@ -26,7 +26,7 @@ import pp::eof;\n // The ps is stored here to prevent recursive type.\n // FIXME use a nominal tag instead\n tag ann_node {\n-    node_block(ps, ast::block);\n+    node_block(ps, ast::blk);\n     node_item(ps, @ast::item);\n     node_expr(ps, @ast::expr);\n     node_pat(ps, @ast::pat);\n@@ -115,7 +115,7 @@ fn fun_to_str(&ast::_fn f, str name, &ast::ty_param[] params) -> str {\n     ret writer.get_str();\n }\n \n-fn block_to_str(&ast::block blk) -> str {\n+fn block_to_str(&ast::blk blk) -> str {\n     auto writer = ioivec::string_writer();\n     auto s = rust_printer(writer.get_writer());\n     // containing cbox, will be closed by print-block at }\n@@ -578,11 +578,11 @@ fn print_stmt(&ps s, &ast::stmt st) {\n     maybe_print_trailing_comment(s, st.span, none[uint]);\n }\n \n-fn print_block(&ps s, &ast::block blk) {\n+fn print_block(&ps s, &ast::blk blk) {\n     print_possibly_embedded_block(s, blk, false, indent_unit);\n }\n \n-fn print_possibly_embedded_block(&ps s, &ast::block blk, bool embedded,\n+fn print_possibly_embedded_block(&ps s, &ast::blk blk, bool embedded,\n                                  uint indented) {\n     maybe_print_comment(s, blk.span.lo);\n     auto ann_node = node_block(s, blk);\n@@ -605,7 +605,7 @@ fn print_possibly_embedded_block(&ps s, &ast::block blk, bool embedded,\n     s.ann.post(ann_node);\n }\n \n-fn print_if(&ps s, &@ast::expr test, &ast::block blk,\n+fn print_if(&ps s, &@ast::expr test, &ast::blk blk,\n             &option::t[@ast::expr] elseopt, bool chk) {\n     head(s, \"if\");\n     if (chk) {"}, {"sha": "b1b0023dbc51f7814ece9f91b904aab53598a140", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b", "patch": "@@ -23,7 +23,7 @@ type visitor[E] =\n          fn(&@native_item, &E, &vt[E])  visit_native_item,\n          fn(&@item, &E, &vt[E])  visit_item,\n          fn(&@local, &E, &vt[E])  visit_local,\n-         fn(&block, &E, &vt[E])  visit_block,\n+         fn(&ast::blk, &E, &vt[E])  visit_block,\n          fn(&@stmt, &E, &vt[E])  visit_stmt,\n          fn(&arm, &E, &vt[E])  visit_arm,\n          fn(&@pat, &E, &vt[E])  visit_pat,\n@@ -234,7 +234,7 @@ fn visit_fn[E](&_fn f, &ty_param[] tp, &span sp, &fn_ident i,\n     v.visit_block(f.body, e, v);\n }\n \n-fn visit_block[E](&block b, &E e, &vt[E] v) {\n+fn visit_block[E](&ast::blk b, &E e, &vt[E] v) {\n     for (@stmt s in b.node.stmts) { v.visit_stmt(s, e, v); }\n     visit_expr_opt(b.node.expr, e, v);\n }"}, {"sha": "7df1f0e085cf56bf5f801c08a6db52bdbab2288e", "filename": "src/comp/syntax/walk.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fsyntax%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Fsyntax%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fwalk.rs?ref=25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b", "patch": "@@ -22,8 +22,8 @@ type ast_visitor =\n         fn(&@ast::item)  visit_item_post,\n         fn(&@ast::method)  visit_method_pre,\n         fn(&@ast::method)  visit_method_post,\n-        fn(&ast::block)  visit_block_pre,\n-        fn(&ast::block)  visit_block_post,\n+        fn(&ast::blk)  visit_block_pre,\n+        fn(&ast::blk)  visit_block_post,\n         fn(&@ast::stmt)  visit_stmt_pre,\n         fn(&@ast::stmt)  visit_stmt_post,\n         fn(&ast::arm)  visit_arm_pre,\n@@ -231,7 +231,7 @@ fn walk_fn(&ast_visitor v, &ast::_fn f, &ast::ty_param[] tps,\n     v.visit_fn_post(f, tps, sp, i, d);\n }\n \n-fn walk_block(&ast_visitor v, &ast::block b) {\n+fn walk_block(&ast_visitor v, &ast::blk b) {\n     if (!v.keep_going()) { ret; }\n     v.visit_block_pre(b);\n     for (@ast::stmt s in b.node.stmts) { walk_stmt(v, s); }\n@@ -440,7 +440,7 @@ fn def_visit_item(&@ast::item i) { }\n \n fn def_visit_method(&@ast::method m) { }\n \n-fn def_visit_block(&ast::block b) { }\n+fn def_visit_block(&ast::blk b) { }\n \n fn def_visit_stmt(&@ast::stmt s) { }\n "}, {"sha": "a6b980a79a104f994aa2f07c98a32fe3e5999f40", "filename": "src/comp/util/common.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b/src%2Fcomp%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fcommon.rs?ref=25a89e068d8c5aa4a6839d02af2a23c9bf8c7c2b", "patch": "@@ -71,9 +71,9 @@ fn log_ty_err(&ty t) { log_err print::pprust::ty_to_str(t); }\n \n fn log_pat_err(&@pat p) { log_err print::pprust::pat_to_str(p); }\n \n-fn log_block(&ast::block b) { log print::pprust::block_to_str(b); }\n+fn log_block(&ast::blk b) { log print::pprust::block_to_str(b); }\n \n-fn log_block_err(&ast::block b) { log_err print::pprust::block_to_str(b); }\n+fn log_block_err(&ast::blk b) { log_err print::pprust::block_to_str(b); }\n \n fn log_item_err(&@ast::item i) { log_err print::pprust::item_to_str(i); }\n \n@@ -89,7 +89,7 @@ fn log_stmt(&ast::stmt st) { log print::pprust::stmt_to_str(st); }\n \n fn log_stmt_err(&ast::stmt st) { log_err print::pprust::stmt_to_str(st); }\n \n-fn has_nonlocal_exits(&ast::block b) -> bool {\n+fn has_nonlocal_exits(&ast::blk b) -> bool {\n     auto has_exits = @mutable false;\n     fn visit_expr(@mutable bool flag, &@ast::expr e) {\n         alt (e.node) {"}]}