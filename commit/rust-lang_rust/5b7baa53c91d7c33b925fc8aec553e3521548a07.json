{"sha": "5b7baa53c91d7c33b925fc8aec553e3521548a07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViN2JhYTUzYzkxZDdjMzNiOTI1ZmM4YWVjNTUzZTM1MjE1NDhhMDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-30T15:19:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-30T15:19:40Z"}, "message": "Auto merge of #60416 - Centril:rollup-bbyyz9x, r=Centril\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #60344 (Don't try to render auto-trait bounds with any inference variables)\n - #60354 (Cleanup declare_features! for 'accepted' with a uniform style + sort them)\n - #60362 (Cleanup 'active' declare_features! with uniform style + sorting.)\n - #60382 (Revert \"Update Source Code Pro fonts to version 2.030\")\n - #60399 (Update clippy)\n - #60400 (Remove functions to simplify handling of feature(bind_by_move_pattern_guards))\n - #60408 (Add missing f16c_target_feature check to typeck collect)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "59f0182fb9e79c2b5ed57d04a53072b11ab25444", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59f0182fb9e79c2b5ed57d04a53072b11ab25444"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b7baa53c91d7c33b925fc8aec553e3521548a07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b7baa53c91d7c33b925fc8aec553e3521548a07", "html_url": "https://github.com/rust-lang/rust/commit/5b7baa53c91d7c33b925fc8aec553e3521548a07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b7baa53c91d7c33b925fc8aec553e3521548a07/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "862a8784ab6fdc799911487a30f3211b3a5c1945", "url": "https://api.github.com/repos/rust-lang/rust/commits/862a8784ab6fdc799911487a30f3211b3a5c1945", "html_url": "https://github.com/rust-lang/rust/commit/862a8784ab6fdc799911487a30f3211b3a5c1945"}, {"sha": "71a1b80213f20de9982ec818a823cdc8c31e61ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/71a1b80213f20de9982ec818a823cdc8c31e61ee", "html_url": "https://github.com/rust-lang/rust/commit/71a1b80213f20de9982ec818a823cdc8c31e61ee"}], "stats": {"total": 626, "additions": 350, "deletions": 276}, "files": [{"sha": "4de79ccd1d882e34ffdd4cfb5d7b4f3d2e9727ca", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b7baa53c91d7c33b925fc8aec553e3521548a07/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b7baa53c91d7c33b925fc8aec553e3521548a07/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=5b7baa53c91d7c33b925fc8aec553e3521548a07", "patch": "@@ -712,7 +712,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                     // Additionally, we check if we've seen this predicate before,\n                     // to avoid rendering duplicate bounds to the user.\n                     if self.is_param_no_infer(p.skip_binder().projection_ty.substs)\n-                        && !p.ty().skip_binder().is_ty_infer()\n+                        && !p.ty().skip_binder().has_infer_types()\n                         && is_new_pred {\n                             debug!(\"evaluate_nested_obligations: adding projection predicate\\\n                             to computed_preds: {:?}\", predicate);"}, {"sha": "ba2fc05584ae644dffafe261a7c0ff6dbd5a8c50", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5b7baa53c91d7c33b925fc8aec553e3521548a07/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b7baa53c91d7c33b925fc8aec553e3521548a07/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=5b7baa53c91d7c33b925fc8aec553e3521548a07", "patch": "@@ -1486,26 +1486,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.queries.on_disk_cache.serialize(self.global_tcx(), encoder)\n     }\n \n-    /// This checks whether one is allowed to have pattern bindings\n-    /// that bind-by-move on a match arm that has a guard, e.g.:\n-    ///\n-    /// ```rust\n-    /// match foo { A(inner) if { /* something */ } => ..., ... }\n-    /// ```\n-    ///\n-    /// It is separate from check_for_mutation_in_guard_via_ast_walk,\n-    /// because that method has a narrower effect that can be toggled\n-    /// off via a separate `-Z` flag, at least for the short term.\n-    pub fn allow_bind_by_move_patterns_with_guards(self) -> bool {\n-        self.features().bind_by_move_pattern_guards\n-    }\n-\n-    /// If true, we should use a naive AST walk to determine if match\n-    /// guard could perform bad mutations (or mutable-borrows).\n-    pub fn check_for_mutation_in_guard_via_ast_walk(self) -> bool {\n-        !self.allow_bind_by_move_patterns_with_guards()\n-    }\n-\n     /// If true, we should use the AST-based borrowck (we may *also* use\n     /// the MIR-based borrowck).\n     pub fn use_ast_borrowck(self) -> bool {"}, {"sha": "d6a6b111f49a013cd8e52bddfa511bf55e287f8d", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b7baa53c91d7c33b925fc8aec553e3521548a07/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b7baa53c91d7c33b925fc8aec553e3521548a07/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=5b7baa53c91d7c33b925fc8aec553e3521548a07", "patch": "@@ -147,7 +147,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n             // Second, if there is a guard on each arm, make sure it isn't\n             // assigning or borrowing anything mutably.\n             if let Some(ref guard) = arm.guard {\n-                if self.tcx.check_for_mutation_in_guard_via_ast_walk() {\n+                if !self.tcx.features().bind_by_move_pattern_guards {\n                     check_for_mutation_in_guard(self, &guard);\n                 }\n             }\n@@ -562,7 +562,7 @@ fn check_legality_of_move_bindings(\n                              \"cannot bind by-move with sub-bindings\")\n                 .span_label(p.span, \"binds an already bound by-move value by moving it\")\n                 .emit();\n-        } else if has_guard && !cx.tcx.allow_bind_by_move_patterns_with_guards() {\n+        } else if has_guard && !cx.tcx.features().bind_by_move_pattern_guards {\n             let mut err = struct_span_err!(cx.tcx.sess, p.span, E0008,\n                                            \"cannot bind by-move into a pattern guard\");\n             err.span_label(p.span, \"moves value into pattern guard\");"}, {"sha": "894a1c82e876f2d9e8d661fea3d8dac0c54baafe", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b7baa53c91d7c33b925fc8aec553e3521548a07/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b7baa53c91d7c33b925fc8aec553e3521548a07/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=5b7baa53c91d7c33b925fc8aec553e3521548a07", "patch": "@@ -2450,6 +2450,7 @@ fn from_target_feature(\n                 Some(\"adx_target_feature\") => rust_features.adx_target_feature,\n                 Some(\"movbe_target_feature\") => rust_features.movbe_target_feature,\n                 Some(\"rtm_target_feature\") => rust_features.rtm_target_feature,\n+                Some(\"f16c_target_feature\") => rust_features.f16c_target_feature,\n                 Some(name) => bug!(\"unknown target feature gate {}\", name),\n                 None => true,\n             };"}, {"sha": "52c8d1847c661d17353e7ecfc60ccf414309d5b2", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b7baa53c91d7c33b925fc8aec553e3521548a07/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b7baa53c91d7c33b925fc8aec553e3521548a07/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5b7baa53c91d7c33b925fc8aec553e3521548a07", "patch": "@@ -2945,6 +2945,7 @@ impl Clean<Type> for hir::Ty {\n \n impl<'tcx> Clean<Type> for Ty<'tcx> {\n     fn clean(&self, cx: &DocContext<'_>) -> Type {\n+        debug!(\"cleaning type: {:?}\", self);\n         match self.sty {\n             ty::Never => Never,\n             ty::Bool => Primitive(PrimitiveType::Bool),"}, {"sha": "f4af362a55702c10b01fdb3bb8156f794aef0507", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b7baa53c91d7c33b925fc8aec553e3521548a07/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b7baa53c91d7c33b925fc8aec553e3521548a07/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=5b7baa53c91d7c33b925fc8aec553e3521548a07", "patch": "@@ -938,7 +938,7 @@ themePicker.onblur = handleThemeButtonsBlur;\n           static_files::source_code_pro::REGULAR)?;\n     write(cx.dst.join(\"SourceCodePro-Semibold.woff\"),\n           static_files::source_code_pro::SEMIBOLD)?;\n-    write(cx.dst.join(\"SourceCodePro-LICENSE.md\"),\n+    write(cx.dst.join(\"SourceCodePro-LICENSE.txt\"),\n           static_files::source_code_pro::LICENSE)?;\n     write(cx.dst.join(\"LICENSE-MIT.txt\"),\n           static_files::LICENSE_MIT)?;"}, {"sha": "07542572e33bdc15739d047cc3b72da24d71ccef", "filename": "src/librustdoc/html/static/SourceCodePro-LICENSE.txt", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b7baa53c91d7c33b925fc8aec553e3521548a07/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-LICENSE.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b7baa53c91d7c33b925fc8aec553e3521548a07/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-LICENSE.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-LICENSE.txt?ref=5b7baa53c91d7c33b925fc8aec553e3521548a07", "patch": "@@ -18,7 +18,7 @@ with others.\n \n The OFL allows the licensed fonts to be used, studied, modified and\n redistributed freely as long as they are not sold by themselves. The\n-fonts, including any derivative works, can be bundled, embedded, \n+fonts, including any derivative works, can be bundled, embedded,\n redistributed and/or sold with any software provided that any reserved\n names are not used by derivative works. The fonts and derivatives,\n however, cannot be released under any other type of license. The", "previous_filename": "src/librustdoc/html/static/SourceCodePro-LICENSE.md"}, {"sha": "5576670903aea90041f214624c8dd1176fdf6081", "filename": "src/librustdoc/html/static/SourceCodePro-Regular.woff", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5b7baa53c91d7c33b925fc8aec553e3521548a07/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Regular.woff", "raw_url": "https://github.com/rust-lang/rust/raw/5b7baa53c91d7c33b925fc8aec553e3521548a07/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Regular.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Regular.woff?ref=5b7baa53c91d7c33b925fc8aec553e3521548a07"}, {"sha": "ca972a11dc428209dd66212e382b884f168e83f7", "filename": "src/librustdoc/html/static/SourceCodePro-Semibold.woff", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5b7baa53c91d7c33b925fc8aec553e3521548a07/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Semibold.woff", "raw_url": "https://github.com/rust-lang/rust/raw/5b7baa53c91d7c33b925fc8aec553e3521548a07/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Semibold.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Semibold.woff?ref=5b7baa53c91d7c33b925fc8aec553e3521548a07"}, {"sha": "3a2c24b1a967fb216f04ad1cebfbcbad7cb5b73a", "filename": "src/librustdoc/html/static_files.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b7baa53c91d7c33b925fc8aec553e3521548a07/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b7baa53c91d7c33b925fc8aec553e3521548a07/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs?ref=5b7baa53c91d7c33b925fc8aec553e3521548a07", "patch": "@@ -103,7 +103,7 @@ pub mod source_code_pro {\n     pub static SEMIBOLD: &'static [u8] = include_bytes!(\"static/SourceCodePro-Semibold.woff\");\n \n     /// The file `SourceCodePro-LICENSE.txt`, the license text of the Source Code Pro font.\n-    pub static LICENSE: &'static [u8] = include_bytes!(\"static/SourceCodePro-LICENSE.md\");\n+    pub static LICENSE: &'static [u8] = include_bytes!(\"static/SourceCodePro-LICENSE.txt\");\n }\n \n /// Files related to the sidebar in rustdoc sources."}, {"sha": "012fcbdd8c8e2540d133aaf58342aadf54c77079", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 325, "deletions": 239, "changes": 564, "blob_url": "https://github.com/rust-lang/rust/blob/5b7baa53c91d7c33b925fc8aec553e3521548a07/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b7baa53c91d7c33b925fc8aec553e3521548a07/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=5b7baa53c91d7c33b925fc8aec553e3521548a07", "patch": "@@ -108,124 +108,227 @@ macro_rules! declare_features {\n // was set. This is most important for knowing when a particular feature became\n // stable (active).\n //\n+// Note that the features should be grouped into internal/user-facing\n+// and then sorted by version inside those groups.\n+// FIXME(60361): Enforce ^-- with tidy.\n+//\n // N.B., `tools/tidy/src/features.rs` parses this information directly out of the\n // source, so take care when modifying it.\n \n declare_features! (\n-    (active, asm, \"1.0.0\", Some(29722), None),\n-    (active, concat_idents, \"1.0.0\", Some(29599), None),\n-    (active, link_args, \"1.0.0\", Some(29596), None),\n-    (active, log_syntax, \"1.0.0\", Some(29598), None),\n-    (active, non_ascii_idents, \"1.0.0\", Some(55467), None),\n-    (active, plugin_registrar, \"1.0.0\", Some(29597), None),\n-    (active, thread_local, \"1.0.0\", Some(29594), None),\n-    (active, trace_macros, \"1.0.0\", Some(29598), None),\n+    // -------------------------------------------------------------------------\n+    // Internal feature gates.\n+    // -------------------------------------------------------------------------\n+\n+    // no tracking issue START\n \n-    // rustc internal, for now\n+    // Allows using the `rust-intrinsic`'s \"ABI\".\n     (active, intrinsics, \"1.0.0\", None, None),\n+\n+    // Allows using `#[lang = \"..\"]` attribute for linking items to special compiler logic.\n     (active, lang_items, \"1.0.0\", None, None),\n-    (active, format_args_nl, \"1.29.0\", None, None),\n \n-    (active, link_llvm_intrinsics, \"1.0.0\", Some(29602), None),\n-    (active, linkage, \"1.0.0\", Some(29603), None),\n+    // Allows using the `#[stable]` and `#[unstable]` attributes.\n+    (active, staged_api, \"1.0.0\", None, None),\n \n-    // rustc internal\n+    // Allows using `#[allow_internal_unstable]`. This is an\n+    // attribute on `macro_rules!` and can't use the attribute handling\n+    // below (it has to be checked before expansion possibly makes\n+    // macros disappear).\n+    (active, allow_internal_unstable, \"1.0.0\", None, None),\n+\n+    // Allows using `#[allow_internal_unsafe]`. This is an\n+    // attribute on `macro_rules!` and can't use the attribute handling\n+    // below (it has to be checked before expansion possibly makes\n+    // macros disappear).\n+    (active, allow_internal_unsafe, \"1.0.0\", None, None),\n+\n+    // Allows using the macros:\n+    // + `__diagnostic_used`\n+    // + `__register_diagnostic`\n+    // +`__build_diagnostic_array`\n     (active, rustc_diagnostic_macros, \"1.0.0\", None, None),\n+\n+    // Allows using `#[rustc_const_unstable(feature = \"foo\", ..)]` which\n+    // lets a function to be `const` when opted into with `#![feature(foo)]`.\n     (active, rustc_const_unstable, \"1.0.0\", None, None),\n+\n+    // no tracking issue END\n+\n+    // Allows using `#[link_name=\"llvm.*\"]`.\n+    (active, link_llvm_intrinsics, \"1.0.0\", Some(29602), None),\n+\n+    // Allows using `rustc_*` attributes (RFC 572).\n+    (active, rustc_attrs, \"1.0.0\", Some(29642), None),\n+\n+    // Allows using `#[on_unimplemented(..)]` on traits.\n+    (active, on_unimplemented, \"1.0.0\", Some(29628), None),\n+\n+    // Allows using the `box $expr` syntax.\n     (active, box_syntax, \"1.0.0\", Some(49733), None),\n-    (active, unboxed_closures, \"1.0.0\", Some(29625), None),\n \n-    (active, fundamental, \"1.0.0\", Some(29635), None),\n+    // Allows using `#[main]` to replace the entrypoint `#[lang = \"start\"]` calls.\n     (active, main, \"1.0.0\", Some(29634), None),\n-    (active, needs_allocator, \"1.4.0\", Some(27389), None),\n-    (active, on_unimplemented, \"1.0.0\", Some(29628), None),\n-    (active, plugin, \"1.0.0\", Some(29597), None),\n-    (active, simd_ffi, \"1.0.0\", Some(27731), None),\n+\n+    // Allows using `#[start]` on a function indicating that it is the program entrypoint.\n     (active, start, \"1.0.0\", Some(29633), None),\n-    (active, structural_match, \"1.8.0\", Some(31434), None),\n-    (active, panic_runtime, \"1.10.0\", Some(32837), None),\n-    (active, needs_panic_runtime, \"1.10.0\", Some(32837), None),\n \n-    // Features specific to OIBIT (auto traits)\n-    (active, optin_builtin_traits, \"1.0.0\", Some(13231), None),\n+    // Allows using the `#[fundamental]` attribute.\n+    (active, fundamental, \"1.0.0\", Some(29635), None),\n \n-    // Allows `#[staged_api]`.\n-    //\n-    // rustc internal\n-    (active, staged_api, \"1.0.0\", None, None),\n+    // Allows using the `rust-call` ABI.\n+    (active, unboxed_closures, \"1.0.0\", Some(29625), None),\n \n-    // Allows `#![no_core]`.\n-    (active, no_core, \"1.3.0\", Some(29639), None),\n+    // Allows using the `#[linkage = \"..\"]` attribute.\n+    (active, linkage, \"1.0.0\", Some(29603), None),\n+\n+    // Allows features specific to OIBIT (auto traits).\n+    (active, optin_builtin_traits, \"1.0.0\", Some(13231), None),\n \n-    // Allows the use of `box` in patterns (RFC 469).\n+    // Allows using `box` in patterns (RFC 469).\n     (active, box_patterns, \"1.0.0\", Some(29641), None),\n \n-    // Allows the use of the `unsafe_destructor_blind_to_params` attribute (RFC 1238).\n+    // no tracking issue START\n+\n+    // Allows using `#[prelude_import]` on glob `use` items.\n+    (active, prelude_import, \"1.2.0\", None, None),\n+\n+    // no tracking issue END\n+\n+    // Allows using `#[unsafe_destructor_blind_to_params]` (RFC 1238).\n     (active, dropck_parametricity, \"1.3.0\", Some(28498), None),\n \n+    // FIXME(Centril): Investigate whether this gate actually has any effect.\n+    (active, needs_allocator, \"1.4.0\", Some(27389), None),\n+\n+    // no tracking issue START\n+\n+    // Allows using `#[omit_gdb_pretty_printer_section]`.\n+    (active, omit_gdb_pretty_printer_section, \"1.5.0\", None, None),\n+\n+    // Allows using the `vectorcall` ABI.\n+    (active, abi_vectorcall, \"1.7.0\", None, None),\n+\n+    // no tracking issue END\n+\n     // Allows using the `may_dangle` attribute (RFC 1327).\n     (active, dropck_eyepatch, \"1.10.0\", Some(34761), None),\n \n-    // Allows the use of custom attributes (RFC 572).\n-    (active, custom_attribute, \"1.0.0\", Some(29642), None),\n+    // Allows using `#[structural_match]` which indicates that a type is structurally matchable.\n+    (active, structural_match, \"1.8.0\", Some(31434), None),\n \n-    // Allows the use of `rustc_*` attributes (RFC 572).\n-    (active, rustc_attrs, \"1.0.0\", Some(29642), None),\n+    // Allows using the `#![panic_runtime]` attribute.\n+    (active, panic_runtime, \"1.10.0\", Some(32837), None),\n \n-    // Allows the use of non lexical lifetimes (RFC 2094).\n-    (active, nll, \"1.0.0\", Some(43234), None),\n+    // Allows declaring with `#![needs_panic_runtime]` that a panic runtime is needed.\n+    (active, needs_panic_runtime, \"1.10.0\", Some(32837), None),\n \n-    // Allows the use of `#[allow_internal_unstable]`. This is an\n-    // attribute on `macro_rules!` and can't use the attribute handling\n-    // below (it has to be checked before expansion possibly makes\n-    // macros disappear).\n-    //\n-    // rustc internal\n-    (active, allow_internal_unstable, \"1.0.0\", None, None),\n+    // no tracking issue START\n \n-    // Allows the use of `#[allow_internal_unsafe]`. This is an\n-    // attribute on `macro_rules!` and can't use the attribute handling\n-    // below (it has to be checked before expansion possibly makes\n-    // macros disappear).\n-    //\n-    // rustc internal\n-    (active, allow_internal_unsafe, \"1.0.0\", None, None),\n+    // Allows identifying the `compiler_builtins` crate.\n+    (active, compiler_builtins, \"1.13.0\", None, None),\n \n-    // Allows the use of slice patterns (issue #23121).\n-    (active, slice_patterns, \"1.0.0\", Some(23121), None),\n+    // Allows using the `unadjusted` ABI; perma-unstable.\n+    (active, abi_unadjusted, \"1.16.0\", None, None),\n \n-    // Allows the definition of `const` functions with some advanced features.\n-    (active, const_fn, \"1.2.0\", Some(57563), None),\n+    // Allows identifying crates that contain sanitizer runtimes.\n+    (active, sanitizer_runtime, \"1.17.0\", None, None),\n \n-    // Allows accessing fields of unions inside `const` functions.\n-    (active, const_fn_union, \"1.27.0\", Some(51909), None),\n+    // Used to identify crates that contain the profiler runtime.\n+    (active, profiler_runtime, \"1.18.0\", None, None),\n \n-    // Allows casting raw pointers to `usize` during const eval.\n-    (active, const_raw_ptr_to_usize_cast, \"1.27.0\", Some(51910), None),\n+    // Allows using the `thiscall` ABI.\n+    (active, abi_thiscall, \"1.19.0\", None, None),\n \n-    // Allows dereferencing raw pointers during const eval.\n-    (active, const_raw_ptr_deref, \"1.27.0\", Some(51911), None),\n+    // Allows using `#![needs_allocator]`, an implementation detail of `#[global_allocator]`.\n+    (active, allocator_internals, \"1.20.0\", None, None),\n \n-    // Allows reinterpretation of the bits of a value of one type as another type during const eval.\n-    (active, const_transmute, \"1.29.0\", Some(53605), None),\n+    // Allows using the `format_args_nl` macro.\n+    (active, format_args_nl, \"1.29.0\", None, None),\n \n-    // Allows comparing raw pointers during const eval.\n-    (active, const_compare_raw_pointers, \"1.27.0\", Some(53020), None),\n+    // no tracking issue END\n \n-    // Allows panicking during const eval (producing compile-time errors).\n-    (active, const_panic, \"1.30.0\", Some(51999), None),\n+    // Added for testing E0705; perma-unstable.\n+    (active, test_2018_feature, \"1.31.0\", Some(0), Some(Edition::Edition2018)),\n \n-    // Allows using `#[prelude_import]` on glob `use` items.\n-    //\n-    // rustc internal\n-    (active, prelude_import, \"1.2.0\", None, None),\n+    // -------------------------------------------------------------------------\n+    // Actual feature gates (target features).\n+    // -------------------------------------------------------------------------\n \n-    // Allows default type parameters to influence type inference.\n-    (active, default_type_parameter_fallback, \"1.3.0\", Some(27336), None),\n+    // FIXME: Document these and merge with the list below.\n+\n+    // Unstable `#[target_feature]` directives.\n+    (active, arm_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, aarch64_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, hexagon_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, powerpc_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, mips_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, avx512_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, mmx_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, sse4a_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, tbm_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, wasm_target_feature, \"1.30.0\", Some(44839), None),\n+    (active, adx_target_feature, \"1.32.0\", Some(44839), None),\n+    (active, cmpxchg16b_target_feature, \"1.32.0\", Some(44839), None),\n+    (active, movbe_target_feature, \"1.34.0\", Some(44839), None),\n+    (active, rtm_target_feature, \"1.35.0\", Some(44839), None),\n+    (active, f16c_target_feature, \"1.36.0\", Some(44839), None),\n+\n+    // -------------------------------------------------------------------------\n+    // Actual feature gates.\n+    // -------------------------------------------------------------------------\n+\n+    // Allows using `asm!` macro with which inline assembly can be embedded.\n+    (active, asm, \"1.0.0\", Some(29722), None),\n+\n+    // Allows using the `concat_idents!` macro with which identifiers can be concatenated.\n+    (active, concat_idents, \"1.0.0\", Some(29599), None),\n+\n+    // Allows using the `#[link_args]` attribute.\n+    (active, link_args, \"1.0.0\", Some(29596), None),\n+\n+    // Allows defining identifiers beyond ASCII.\n+    (active, non_ascii_idents, \"1.0.0\", Some(55467), None),\n+\n+    // Allows using `#[plugin_registrar]` on functions.\n+    (active, plugin_registrar, \"1.0.0\", Some(29597), None),\n+\n+    // Allows using `#![plugin(myplugin)]`.\n+    (active, plugin, \"1.0.0\", Some(29597), None),\n+\n+    // Allows using `#[thread_local]` on `static` items.\n+    (active, thread_local, \"1.0.0\", Some(29594), None),\n+\n+    // Allows using the `log_syntax!` macro.\n+    (active, log_syntax, \"1.0.0\", Some(29598), None),\n+\n+    // Allows using the `trace_macros!` macro.\n+    (active, trace_macros, \"1.0.0\", Some(29598), None),\n+\n+    // Allows the use of SIMD types in functions declared in `extern` blocks.\n+    (active, simd_ffi, \"1.0.0\", Some(27731), None),\n+\n+    // Allows using custom attributes (RFC 572).\n+    (active, custom_attribute, \"1.0.0\", Some(29642), None),\n+\n+    // Allows using non lexical lifetimes (RFC 2094).\n+    (active, nll, \"1.0.0\", Some(43234), None),\n+\n+    // Allows using slice patterns.\n+    (active, slice_patterns, \"1.0.0\", Some(23121), None),\n+\n+    // Allows the definition of `const` functions with some advanced features.\n+    (active, const_fn, \"1.2.0\", Some(57563), None),\n \n     // Allows associated type defaults.\n     (active, associated_type_defaults, \"1.2.0\", Some(29661), None),\n \n+    // Allows `#![no_core]`.\n+    (active, no_core, \"1.3.0\", Some(29639), None),\n+\n+    // Allows default type parameters to influence type inference.\n+    (active, default_type_parameter_fallback, \"1.3.0\", Some(27336), None),\n+\n     // Allows `repr(simd)` and importing the various simd intrinsics.\n     (active, repr_simd, \"1.4.0\", Some(27731), None),\n \n@@ -237,17 +340,12 @@ declare_features! (\n     // Permits specifying whether a function should permit unwinding or abort on unwind.\n     (active, unwind_attributes, \"1.4.0\", Some(58760), None),\n \n-    // Allows the use of `#[naked]` on functions.\n+    // Allows using `#[naked]` on functions.\n     (active, naked_functions, \"1.9.0\", Some(32408), None),\n \n     // Allows `#[no_debug]`.\n     (active, no_debug, \"1.5.0\", Some(29721), None),\n \n-    // Allows `#[omit_gdb_pretty_printer_section]`.\n-    //\n-    // rustc internal\n-    (active, omit_gdb_pretty_printer_section, \"1.5.0\", None, None),\n-\n     // Allows attributes on expressions and non-item statements.\n     (active, stmt_expr_attributes, \"1.6.0\", Some(15701), None),\n \n@@ -257,19 +355,16 @@ declare_features! (\n     // Allows `cfg(target_thread_local)`.\n     (active, cfg_target_thread_local, \"1.7.0\", Some(29594), None),\n \n-    // rustc internal\n-    (active, abi_vectorcall, \"1.7.0\", None, None),\n-\n-    // Allows `X..Y` patterns.\n-    (active, exclusive_range_pattern, \"1.11.0\", Some(37854), None),\n-\n-    // impl specialization (RFC 1210)\n+    // Allows specialization of implementations (RFC 1210).\n     (active, specialization, \"1.7.0\", Some(31844), None),\n \n     // Allows `cfg(target_has_atomic = \"...\")`.\n     (active, cfg_target_has_atomic, \"1.9.0\", Some(32976), None),\n \n-    // The `!` type. Does not imply 'exhaustive_patterns' (below) any more.\n+    // Allows `X..Y` patterns.\n+    (active, exclusive_range_pattern, \"1.11.0\", Some(37854), None),\n+\n+    // Allows the `!` type. Does not imply 'exhaustive_patterns' (below) any more.\n     (active, never_type, \"1.13.0\", Some(35121), None),\n \n     // Allows exhaustive pattern matching on types that contain uninhabited types.\n@@ -278,175 +373,143 @@ declare_features! (\n     // Allows untagged unions `union U { ... }`.\n     (active, untagged_unions, \"1.13.0\", Some(32836), None),\n \n-    // Used to identify the `compiler_builtins` crate.\n-    //\n-    // rustc internal.\n-    (active, compiler_builtins, \"1.13.0\", None, None),\n-\n     // Allows `#[link(..., cfg(..))]`.\n     (active, link_cfg, \"1.14.0\", Some(37406), None),\n \n     // Allows `extern \"ptx-*\" fn()`.\n     (active, abi_ptx, \"1.15.0\", Some(38788), None),\n \n-    // The `repr(i128)` annotation for enums.\n+    // Allows the `#[repr(i128)]` attribute for enums.\n     (active, repr128, \"1.16.0\", Some(35118), None),\n \n-    // Allows the use of `#[ffi_returns_twice]` on foreign functions.\n-    (active, ffi_returns_twice, \"1.34.0\", Some(58314), None),\n-\n-    // The `unadjusted` ABI; perma-unstable.\n-    //\n-    // rustc internal\n-    (active, abi_unadjusted, \"1.16.0\", None, None),\n-\n-    // Declarative macros 2.0 (`macro`).\n-    (active, decl_macro, \"1.17.0\", Some(39412), None),\n-\n     // Allows `#[link(kind=\"static-nobundle\"...)]`.\n     (active, static_nobundle, \"1.16.0\", Some(37403), None),\n \n     // Allows `extern \"msp430-interrupt\" fn()`.\n     (active, abi_msp430_interrupt, \"1.16.0\", Some(38487), None),\n \n-    // Used to identify crates that contain sanitizer runtimes.\n-    //\n-    // rustc internal\n-    (active, sanitizer_runtime, \"1.17.0\", None, None),\n-\n-    // Used to identify crates that contain the profiler runtime.\n-    //\n-    // rustc internal\n-    (active, profiler_runtime, \"1.18.0\", None, None),\n+    // Allows declarative macros 2.0 (`macro`).\n+    (active, decl_macro, \"1.17.0\", Some(39412), None),\n \n     // Allows `extern \"x86-interrupt\" fn()`.\n     (active, abi_x86_interrupt, \"1.17.0\", Some(40180), None),\n \n-    // Allows the `try {...}` expression.\n-    (active, try_blocks, \"1.29.0\", Some(31436), None),\n-\n     // Allows module-level inline assembly by way of `global_asm!()`.\n     (active, global_asm, \"1.18.0\", Some(35119), None),\n \n     // Allows overlapping impls of marker traits.\n     (active, overlapping_marker_traits, \"1.18.0\", Some(29864), None),\n \n-    // Trait attribute to allow overlapping impls.\n-    (active, marker_trait_attr, \"1.30.0\", Some(29864), None),\n-\n-    // rustc internal\n-    (active, abi_thiscall, \"1.19.0\", None, None),\n-\n     // Allows a test to fail without failing the whole suite.\n     (active, allow_fail, \"1.19.0\", Some(46488), None),\n \n     // Allows unsized tuple coercion.\n     (active, unsized_tuple_coercion, \"1.20.0\", Some(42877), None),\n \n-    // Generators\n+    // Allows defining generators.\n     (active, generators, \"1.21.0\", Some(43122), None),\n \n-    // Trait aliases\n-    (active, trait_alias, \"1.24.0\", Some(41517), None),\n-\n-    // rustc internal\n-    (active, allocator_internals, \"1.20.0\", None, None),\n-\n-    // `#[doc(cfg(...))]`\n+    // Allows `#[doc(cfg(...))]`.\n     (active, doc_cfg, \"1.21.0\", Some(43781), None),\n-    // `#[doc(masked)]`\n+\n+    // Allows `#[doc(masked)]`.\n     (active, doc_masked, \"1.21.0\", Some(44027), None),\n-    // `#[doc(spotlight)]`\n+\n+    // Allows `#[doc(spotlight)]`.\n     (active, doc_spotlight, \"1.22.0\", Some(45040), None),\n-    // `#[doc(include = \"some-file\")]`\n+\n+    // Allows `#[doc(include = \"some-file\")]`.\n     (active, external_doc, \"1.22.0\", Some(44732), None),\n \n-    // Future-proofing enums/structs with `#[non_exhaustive]` attribute (RFC 2008).\n+    // Allows future-proofing enums/structs with the `#[non_exhaustive]` attribute (RFC 2008).\n     (active, non_exhaustive, \"1.22.0\", Some(44109), None),\n \n-    // Adds `crate` as visibility modifier, synonymous with `pub(crate)`.\n+    // Allows using `crate` as visibility modifier, synonymous with `pub(crate)`.\n     (active, crate_visibility_modifier, \"1.23.0\", Some(53120), None),\n \n-    // extern types\n+    // Allows defining `extern type`s.\n     (active, extern_types, \"1.23.0\", Some(43467), None),\n \n     // Allows trait methods with arbitrary self types.\n     (active, arbitrary_self_types, \"1.23.0\", Some(44874), None),\n \n-    // In-band lifetime bindings (e.g., `fn foo(x: &'a u8) -> &'a u8`).\n+    // Allows in-band quantification of lifetime bindings (e.g., `fn foo(x: &'a u8) -> &'a u8`).\n     (active, in_band_lifetimes, \"1.23.0\", Some(44524), None),\n \n-    // Generic associated types (RFC 1598)\n+    // Allows associated types to be generic, e.g., `type Foo<T>;` (RFC 1598).\n     (active, generic_associated_types, \"1.23.0\", Some(44265), None),\n \n-    // Infer static outlives requirements (RFC 2093).\n+    // Allows defining `trait X = A + B;` alias items.\n+    (active, trait_alias, \"1.24.0\", Some(41517), None),\n+\n+    // Allows infering `'static` outlives requirements (RFC 2093).\n     (active, infer_static_outlives_requirements, \"1.26.0\", Some(54185), None),\n \n     // Allows macro invocations in `extern {}` blocks.\n     (active, macros_in_extern, \"1.27.0\", Some(49476), None),\n \n-    // `existential type`\n-    (active, existential_type, \"1.28.0\", Some(34511), None),\n+    // Allows accessing fields of unions inside `const` functions.\n+    (active, const_fn_union, \"1.27.0\", Some(51909), None),\n \n-    // unstable `#[target_feature]` directives\n-    (active, arm_target_feature, \"1.27.0\", Some(44839), None),\n-    (active, aarch64_target_feature, \"1.27.0\", Some(44839), None),\n-    (active, hexagon_target_feature, \"1.27.0\", Some(44839), None),\n-    (active, powerpc_target_feature, \"1.27.0\", Some(44839), None),\n-    (active, mips_target_feature, \"1.27.0\", Some(44839), None),\n-    (active, avx512_target_feature, \"1.27.0\", Some(44839), None),\n-    (active, mmx_target_feature, \"1.27.0\", Some(44839), None),\n-    (active, sse4a_target_feature, \"1.27.0\", Some(44839), None),\n-    (active, tbm_target_feature, \"1.27.0\", Some(44839), None),\n-    (active, wasm_target_feature, \"1.30.0\", Some(44839), None),\n-    (active, adx_target_feature, \"1.32.0\", Some(44839), None),\n-    (active, cmpxchg16b_target_feature, \"1.32.0\", Some(44839), None),\n-    (active, movbe_target_feature, \"1.34.0\", Some(44839), None),\n-    (active, rtm_target_feature, \"1.35.0\", Some(44839), None),\n-    (active, f16c_target_feature, \"1.36.0\", Some(44839), None),\n+    // Allows casting raw pointers to `usize` during const eval.\n+    (active, const_raw_ptr_to_usize_cast, \"1.27.0\", Some(51910), None),\n \n-    // Allows macro invocations on modules expressions and statements and\n-    // procedural macros to expand to non-items.\n-    (active, proc_macro_hygiene, \"1.30.0\", Some(54727), None),\n+    // Allows dereferencing raw pointers during const eval.\n+    (active, const_raw_ptr_deref, \"1.27.0\", Some(51911), None),\n+\n+    // Allows comparing raw pointers during const eval.\n+    (active, const_compare_raw_pointers, \"1.27.0\", Some(53020), None),\n \n-    // `#[doc(alias = \"...\")]`\n+    // Allows `#[doc(alias = \"...\")]`.\n     (active, doc_alias, \"1.27.0\", Some(50146), None),\n \n-    // inconsistent bounds in where clauses\n+    // Allows defining `existential type`s.\n+    (active, existential_type, \"1.28.0\", Some(34511), None),\n+\n+    // Allows inconsistent bounds in where clauses.\n     (active, trivial_bounds, \"1.28.0\", Some(48214), None),\n \n-    // `'a: { break 'a; }`\n+    // Allows `'a: { break 'a; }`.\n     (active, label_break_value, \"1.28.0\", Some(48594), None),\n \n-    // Exhaustive pattern matching on `usize` and `isize`.\n-    (active, precise_pointer_size_matching, \"1.32.0\", Some(56354), None),\n-\n-    // `#[doc(keyword = \"...\")]`\n+    // Allows using `#[doc(keyword = \"...\")]`.\n     (active, doc_keyword, \"1.28.0\", Some(51315), None),\n \n     // Allows async and await syntax.\n     (active, async_await, \"1.28.0\", Some(50547), None),\n \n-    // `#[alloc_error_handler]`\n+    // Allows reinterpretation of the bits of a value of one type as another type during const eval.\n+    (active, const_transmute, \"1.29.0\", Some(53605), None),\n+\n+    // Allows using `try {...}` expressions.\n+    (active, try_blocks, \"1.29.0\", Some(31436), None),\n+\n+    // Allows defining an `#[alloc_error_handler]`.\n     (active, alloc_error_handler, \"1.29.0\", Some(51540), None),\n \n+    // Allows using the `amdgpu-kernel` ABI.\n     (active, abi_amdgpu_kernel, \"1.29.0\", Some(51575), None),\n \n-    // Added for testing E0705; perma-unstable.\n-    (active, test_2018_feature, \"1.31.0\", Some(0), Some(Edition::Edition2018)),\n+    // Allows panicking during const eval (producing compile-time errors).\n+    (active, const_panic, \"1.30.0\", Some(51999), None),\n+\n+    // Allows `#[marker]` on certain traits allowing overlapping implementations.\n+    (active, marker_trait_attr, \"1.30.0\", Some(29864), None),\n+\n+    // Allows macro invocations on modules expressions and statements and\n+    // procedural macros to expand to non-items.\n+    (active, proc_macro_hygiene, \"1.30.0\", Some(54727), None),\n \n     // Allows unsized rvalues at arguments and parameters.\n     (active, unsized_locals, \"1.30.0\", Some(48055), None),\n \n-    // `#![test_runner]`\n-    // `#[test_case]`\n+    // Allows custom test frameworks with `#![test_runner]` and `#[test_case]`.\n     (active, custom_test_frameworks, \"1.30.0\", Some(50297), None),\n \n-    // non-builtin attributes in inner attribute position\n+    // Allows non-builtin attributes in inner attribute position.\n     (active, custom_inner_attributes, \"1.30.0\", Some(54726), None),\n \n-    // Allow mixing of bind-by-move in patterns and references to\n-    // those identifiers in guards.\n+    // Allows mixing bind-by-move in patterns and references to those identifiers in guards.\n     (active, bind_by_move_pattern_guards, \"1.30.0\", Some(15287), None),\n \n     // Allows `impl Trait` in bindings (`let`, `const`, `static`).\n@@ -455,25 +518,32 @@ declare_features! (\n     // Allows `const _: TYPE = VALUE`.\n     (active, underscore_const_names, \"1.31.0\", Some(54912), None),\n \n-    // Adds `reason` and `expect` lint attributes.\n+    // Allows using `reason` in lint attributes and the `#[expect(lint)]` lint check.\n     (active, lint_reasons, \"1.31.0\", Some(54503), None),\n \n     // Allows paths to enum variants on type aliases.\n     (active, type_alias_enum_variants, \"1.31.0\", Some(49683), None),\n \n-    // Re-Rebalance coherence\n+    // Allows exhaustive integer pattern matching on `usize` and `isize`.\n+    (active, precise_pointer_size_matching, \"1.32.0\", Some(56354), None),\n+\n+    // Allows relaxing the coherence rules such that\n+    // `impl<T> ForeignTrait<LocalType> for ForeignType<T> is permitted.\n     (active, re_rebalance_coherence, \"1.32.0\", Some(55437), None),\n \n-    // Const generic types.\n+    // Allows using `#[ffi_returns_twice]` on foreign functions.\n+    (active, ffi_returns_twice, \"1.34.0\", Some(58314), None),\n+\n+    // Allows const generic types (e.g. `struct Foo<const N: usize>(...);`).\n     (active, const_generics, \"1.34.0\", Some(44580), None),\n \n-    // #[optimize(X)]\n+    // Allows using `#[optimize(X)]`.\n     (active, optimize_attribute, \"1.34.0\", Some(54882), None),\n \n-    // #[repr(align(X))] on enums\n+    // Allows using `#[repr(align(X))]` on enums.\n     (active, repr_align_enum, \"1.34.0\", Some(57996), None),\n \n-    // Allows the use of C-variadics\n+    // Allows using C-variadics.\n     (active, c_variadic, \"1.34.0\", Some(44930), None),\n );\n \n@@ -499,7 +569,6 @@ declare_features! (\n     (removed, visible_private_types, \"1.0.0\", None, None, None),\n     (removed, unsafe_no_drop_flag, \"1.0.0\", None, None, None),\n     // Allows using items which are missing stability attributes\n-    // rustc internal\n     (removed, unmarked_api, \"1.0.0\", None, None, None),\n     (removed, pushpop_unsafe, \"1.2.0\", None, None, None),\n     (removed, allocator, \"1.0.0\", None, None, None),\n@@ -533,63 +602,73 @@ declare_features! (\n );\n \n declare_features! (\n-    (accepted, associated_types, \"1.0.0\", None, None),\n-    // Allows overloading augmented assignment operations like `a += b`.\n-    (accepted, augmented_assignments, \"1.8.0\", Some(28235), None),\n-    // Allows empty structs and enum variants with braces.\n-    (accepted, braced_empty_structs, \"1.8.0\", Some(29720), None),\n-    // Allows indexing into constant arrays.\n-    (accepted, const_indexing, \"1.26.0\", Some(29947), None),\n-    (accepted, default_type_params, \"1.0.0\", None, None),\n-    (accepted, globs, \"1.0.0\", None, None),\n-    (accepted, if_let, \"1.0.0\", None, None),\n     // A temporary feature gate used to enable parser extensions needed\n     // to bootstrap fix for #5723.\n     (accepted, issue_5723_bootstrap, \"1.0.0\", None, None),\n+    // These are used to test this portion of the compiler,\n+    // they don't actually mean anything.\n+    (accepted, test_accepted_feature, \"1.0.0\", None, None),\n+\n+    // Allows using associated `type`s in `trait`s.\n+    (accepted, associated_types, \"1.0.0\", None, None),\n+    // Allows using assigning a default type to type parameters in algebraic data type definitions.\n+    (accepted, default_type_params, \"1.0.0\", None, None),\n+    // FIXME: explain `globs`.\n+    (accepted, globs, \"1.0.0\", None, None),\n+    // Allows `macro_rules!` items.\n     (accepted, macro_rules, \"1.0.0\", None, None),\n-    // Allows using `#![no_std]`.\n-    (accepted, no_std, \"1.6.0\", None, None),\n+    // Allows use of `&foo[a..b]` as a slicing syntax.\n     (accepted, slicing_syntax, \"1.0.0\", None, None),\n+    // Allows struct variants `Foo { baz: u8, .. }` in enums (RFC 418).\n     (accepted, struct_variant, \"1.0.0\", None, None),\n-    // These are used to test this portion of the compiler, they don't actually\n-    // mean anything.\n-    (accepted, test_accepted_feature, \"1.0.0\", None, None),\n+    // Allows indexing tuples.\n     (accepted, tuple_indexing, \"1.0.0\", None, None),\n-    // Allows macros to appear in the type position.\n-    (accepted, type_macros, \"1.13.0\", Some(27245), None),\n+    // Allows the use of `if let` expressions.\n+    (accepted, if_let, \"1.0.0\", None, None),\n+    // Allows the use of `while let` expressions.\n     (accepted, while_let, \"1.0.0\", None, None),\n+    // Allows using `#![no_std]`.\n+    (accepted, no_std, \"1.6.0\", None, None),\n+    // Allows overloading augmented assignment operations like `a += b`.\n+    (accepted, augmented_assignments, \"1.8.0\", Some(28235), None),\n+    // Allows empty structs and enum variants with braces.\n+    (accepted, braced_empty_structs, \"1.8.0\", Some(29720), None),\n     // Allows `#[deprecated]` attribute.\n     (accepted, deprecated, \"1.9.0\", Some(29935), None),\n-    // `expr?`\n+    // Allows macros to appear in the type position.\n+    (accepted, type_macros, \"1.13.0\", Some(27245), None),\n+    // Allows use of the postfix `?` operator in expressions.\n     (accepted, question_mark, \"1.13.0\", Some(31436), None),\n     // Allows `..` in tuple (struct) patterns.\n     (accepted, dotdot_in_tuple_patterns, \"1.14.0\", Some(33627), None),\n+    // Allows some increased flexibility in the name resolution rules,\n+    // especially around globs and shadowing (RFC 1560).\n     (accepted, item_like_imports, \"1.15.0\", Some(35120), None),\n     // Allows using `Self` and associated types in struct expressions and patterns.\n     (accepted, more_struct_aliases, \"1.16.0\", Some(37544), None),\n-    // elide `'static` lifetimes in `static`s and `const`s.\n+    // Allows elision of `'static` lifetimes in `static`s and `const`s.\n     (accepted, static_in_const, \"1.17.0\", Some(35897), None),\n     // Allows field shorthands (`x` meaning `x: x`) in struct literal expressions.\n     (accepted, field_init_shorthand, \"1.17.0\", Some(37340), None),\n     // Allows the definition recursive static items.\n     (accepted, static_recursion, \"1.17.0\", Some(29719), None),\n-    // `pub(restricted)` visibilities (RFC 1422)\n+    // Allows `pub(restricted)` visibilities (RFC 1422).\n     (accepted, pub_restricted, \"1.18.0\", Some(32409), None),\n-    // `#![windows_subsystem]`\n+    // Allows `#![windows_subsystem]`.\n     (accepted, windows_subsystem, \"1.18.0\", Some(37499), None),\n     // Allows `break {expr}` with a value inside `loop`s.\n     (accepted, loop_break_value, \"1.19.0\", Some(37339), None),\n-    // Permits numeric fields in struct expressions and patterns.\n+    // Allows numeric fields in struct expressions and patterns.\n     (accepted, relaxed_adts, \"1.19.0\", Some(35626), None),\n-    // Coerces non capturing closures to function pointers.\n+    // Allows coercing non capturing closures to function pointers.\n     (accepted, closure_to_fn_coercion, \"1.19.0\", Some(39817), None),\n     // Allows attributes on struct literal fields.\n     (accepted, struct_field_attributes, \"1.20.0\", Some(38814), None),\n     // Allows the definition of associated constants in `trait` or `impl` blocks.\n     (accepted, associated_consts, \"1.20.0\", Some(29646), None),\n-    // Usage of the `compile_error!` macro.\n+    // Allows usage of the `compile_error!` macro.\n     (accepted, compile_error, \"1.20.0\", Some(40872), None),\n-    // See rust-lang/rfcs#1414. Allows code like `let x: &'static u32 = &42` to work.\n+    // Allows code like `let x: &'static u32 = &42` to work (RFC 1414).\n     (accepted, rvalue_static_promotion, \"1.21.0\", Some(38865), None),\n     // Allows `Drop` types in constants (RFC 1440).\n     (accepted, drop_types_in_const, \"1.22.0\", Some(33156), None),\n@@ -600,24 +679,27 @@ declare_features! (\n     (accepted, repr_align, \"1.25.0\", Some(33626), None),\n     // Allows '|' at beginning of match arms (RFC 1925).\n     (accepted, match_beginning_vert, \"1.25.0\", Some(44101), None),\n-    // Nested groups in `use` (RFC 2128)\n+    // Allows nested groups in `use` items (RFC 2128).\n     (accepted, use_nested_groups, \"1.25.0\", Some(44494), None),\n-    // `a..=b` and `..=b`\n+    // Allows indexing into constant arrays.\n+    (accepted, const_indexing, \"1.26.0\", Some(29947), None),\n+    // Allows using `a..=b` and `..=b` as inclusive range syntaxes.\n     (accepted, inclusive_range_syntax, \"1.26.0\", Some(28237), None),\n     // Allows `..=` in patterns (RFC 1192).\n     (accepted, dotdoteq_in_patterns, \"1.26.0\", Some(28237), None),\n-    // Termination trait in main (RFC 1937)\n+    // Allows `fn main()` with return types which implements `Termination` (RFC 1937).\n     (accepted, termination_trait, \"1.26.0\", Some(43301), None),\n-    // `Copy`/`Clone` closures (RFC 2132).\n+    // Allows implementing `Clone` for closures where possible (RFC 2132).\n     (accepted, clone_closures, \"1.26.0\", Some(44490), None),\n+    // Allows implementing `Copy` for closures where possible (RFC 2132).\n     (accepted, copy_closures, \"1.26.0\", Some(44490), None),\n     // Allows `impl Trait` in function arguments.\n     (accepted, universal_impl_trait, \"1.26.0\", Some(34511), None),\n     // Allows `impl Trait` in function return types.\n     (accepted, conservative_impl_trait, \"1.26.0\", Some(34511), None),\n-    // The `i128` type\n+    // Allows using the `u128` and `i128` types.\n     (accepted, i128_type, \"1.26.0\", Some(35118), None),\n-    // Default match binding modes (RFC 2005)\n+    // Allows default match binding modes (RFC 2005).\n     (accepted, match_default_bindings, \"1.26.0\", Some(42640), None),\n     // Allows `'_` placeholder lifetimes.\n     (accepted, underscore_lifetimes, \"1.26.0\", Some(44524), None),\n@@ -627,21 +709,21 @@ declare_features! (\n     (accepted, cfg_target_feature, \"1.27.0\", Some(29717), None),\n     // Allows `#[target_feature(...)]`.\n     (accepted, target_feature, \"1.27.0\", None, None),\n-    // Trait object syntax with `dyn` prefix\n+    // Allows using `dyn Trait` as a syntax for trait objects.\n     (accepted, dyn_trait, \"1.27.0\", Some(44662), None),\n     // Allows `#[must_use]` on functions, and introduces must-use operators (RFC 1940).\n     (accepted, fn_must_use, \"1.27.0\", Some(43302), None),\n     // Allows use of the `:lifetime` macro fragment specifier.\n     (accepted, macro_lifetime_matcher, \"1.27.0\", Some(34303), None),\n-    // Termination trait in tests (RFC 1937)\n+    // Allows `#[test]` functions where the return type implements `Termination` (RFC 1937).\n     (accepted, termination_trait_test, \"1.27.0\", Some(48854), None),\n-    // The `#[global_allocator]` attribute\n+    // Allows the `#[global_allocator]` attribute.\n     (accepted, global_allocator, \"1.28.0\", Some(27389), None),\n     // Allows `#[repr(transparent)]` attribute on newtype structs.\n     (accepted, repr_transparent, \"1.28.0\", Some(43036), None),\n-    // Procedural macros in `proc-macro` crates\n+    // Allows procedural macros in `proc-macro` crates.\n     (accepted, proc_macro, \"1.29.0\", Some(38356), None),\n-    // `foo.rs` as an alternative to `foo/mod.rs`\n+    // Allows `foo.rs` as an alternative to `foo/mod.rs`.\n     (accepted, non_modrs_mods, \"1.30.0\", Some(44660), None),\n     // Allows use of the `:vis` macro fragment specifier\n     (accepted, macro_vis_matcher, \"1.30.0\", Some(41022), None),\n@@ -650,47 +732,50 @@ declare_features! (\n     (accepted, use_extern_macros, \"1.30.0\", Some(35896), None),\n     // Allows keywords to be escaped for use as identifiers.\n     (accepted, raw_identifiers, \"1.30.0\", Some(48589), None),\n-    // Attributes scoped to tools.\n+    // Allows attributes scoped to tools.\n     (accepted, tool_attributes, \"1.30.0\", Some(44690), None),\n     // Allows multi-segment paths in attributes and derives.\n     (accepted, proc_macro_path_invoc, \"1.30.0\", Some(38356), None),\n     // Allows all literals in attribute lists and values of key-value pairs.\n     (accepted, attr_literals, \"1.30.0\", Some(34981), None),\n-    // Infer outlives requirements (RFC 2093).\n+    // Allows inferring outlives requirements (RFC 2093).\n     (accepted, infer_outlives_requirements, \"1.30.0\", Some(44493), None),\n+    // Allows annotating functions conforming to `fn(&PanicInfo) -> !` with `#[panic_handler]`.\n+    // This defines the behavior of panics.\n     (accepted, panic_handler, \"1.30.0\", Some(44489), None),\n-    // Used to preserve symbols (see llvm.used).\n+    // Allows `#[used]` to preserve symbols (see llvm.used).\n     (accepted, used, \"1.30.0\", Some(40289), None),\n-    // `crate` in paths\n+    // Allows `crate` in paths.\n     (accepted, crate_in_paths, \"1.30.0\", Some(45477), None),\n-    // Resolve absolute paths as paths from other crates.\n+    // Allows resolving absolute paths as paths from other crates.\n     (accepted, extern_absolute_paths, \"1.30.0\", Some(44660), None),\n-    // Access to crate names passed via `--extern` through prelude.\n+    // Allows access to crate names passed via `--extern` through prelude.\n     (accepted, extern_prelude, \"1.30.0\", Some(44660), None),\n-    // Parentheses in patterns\n+    // Allows parentheses in patterns.\n     (accepted, pattern_parentheses, \"1.31.0\", Some(51087), None),\n     // Allows the definition of `const fn` functions.\n     (accepted, min_const_fn, \"1.31.0\", Some(53555), None),\n-    // Scoped lints\n+    // Allows scoped lints.\n     (accepted, tool_lints, \"1.31.0\", Some(44690), None),\n-    // `impl<I:Iterator> Iterator for &mut Iterator`\n-    // `impl Debug for Foo<'_>`\n+    // Allows lifetime elision in `impl` headers. For example:\n+    // + `impl<I:Iterator> Iterator for &mut Iterator`\n+    // + `impl Debug for Foo<'_>`\n     (accepted, impl_header_lifetime_elision, \"1.31.0\", Some(15872), None),\n-    // `extern crate foo as bar;` puts `bar` into extern prelude.\n+    // Allows `extern crate foo as bar;`. This puts `bar` into extern prelude.\n     (accepted, extern_crate_item_prelude, \"1.31.0\", Some(55599), None),\n     // Allows use of the `:literal` macro fragment specifier (RFC 1576).\n     (accepted, macro_literal_matcher, \"1.32.0\", Some(35625), None),\n-    // Use `?` as the Kleene \"at most one\" operator.\n+    // Allows use of `?` as the Kleene \"at most one\" operator in macros.\n     (accepted, macro_at_most_once_rep, \"1.32.0\", Some(48075), None),\n-    // `Self` struct constructor (RFC 2302)\n+    // Allows `Self` struct constructor (RFC 2302).\n     (accepted, self_struct_ctor, \"1.32.0\", Some(51994), None),\n-    // `Self` in type definitions (RFC 2300)\n+    // Allows `Self` in type definitions (RFC 2300).\n     (accepted, self_in_typedefs, \"1.32.0\", Some(49303), None),\n     // Allows `use x::y;` to search `x` in the current scope.\n     (accepted, uniform_paths, \"1.32.0\", Some(53130), None),\n-    // Integer match exhaustiveness checking (RFC 2591)\n+    // Allows integer match exhaustiveness checking (RFC 2591).\n     (accepted, exhaustive_integer_patterns, \"1.33.0\", Some(50907), None),\n-    // `use path as _;` and `extern crate c as _;`\n+    // Allows `use path as _;` and `extern crate c as _;`.\n     (accepted, underscore_imports, \"1.33.0\", Some(48216), None),\n     // Allows `#[repr(packed(N))]` attribute on structs.\n     (accepted, repr_packed, \"1.33.0\", Some(33158), None),\n@@ -702,15 +787,16 @@ declare_features! (\n     // As long as control flow is not implemented in const eval, `&&` and `||` may not be used\n     // at the same time as let bindings.\n     (accepted, const_let, \"1.33.0\", Some(48821), None),\n-    // `#[cfg_attr(predicate, multiple, attributes, here)]`\n+    // Allows `#[cfg_attr(predicate, multiple, attributes, here)]`.\n     (accepted, cfg_attr_multi, \"1.33.0\", Some(54881), None),\n-    // Top level or-patterns (`p | q`) in `if let` and `while let`.\n+    // Allows top level or-patterns (`p | q`) in `if let` and `while let`.\n     (accepted, if_while_or_patterns, \"1.33.0\", Some(48215), None),\n     // Allows `cfg(target_vendor = \"...\")`.\n     (accepted, cfg_target_vendor, \"1.33.0\", Some(29718), None),\n-    // `extern crate self as foo;` puts local crate root into extern prelude under name `foo`.\n+    // Allows `extern crate self as foo;`.\n+    // This puts local crate root into extern prelude under name `foo`.\n     (accepted, extern_crate_self, \"1.34.0\", Some(56409), None),\n-    // support for arbitrary delimited token streams in non-macro attributes\n+    // Allows arbitrary delimited token streams in non-macro attributes.\n     (accepted, unrestricted_attribute_tokens, \"1.34.0\", Some(55208), None),\n );\n "}, {"sha": "d0ff1a585f8bda16edf9023d83a6e19f24ddd11b", "filename": "src/tools/clippy", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy?ref=5b7baa53c91d7c33b925fc8aec553e3521548a07", "patch": "@@ -1 +1 @@\n-Subproject commit f1eda09ea135c06e32ab34332ad25155e314731b\n+Subproject commit d0ff1a585f8bda16edf9023d83a6e19f24ddd11b"}, {"sha": "8239fd9dce0c14d98fdf54e6de40908b97b4b420", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5b7baa53c91d7c33b925fc8aec553e3521548a07/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b7baa53c91d7c33b925fc8aec553e3521548a07/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=5b7baa53c91d7c33b925fc8aec553e3521548a07", "patch": "@@ -173,18 +173,25 @@ pub fn collect_lang_features(base_src_path: &Path, bad: &mut bool) -> Features {\n     let contents = t!(fs::read_to_string(base_src_path.join(\"libsyntax/feature_gate.rs\")));\n \n     // We allow rustc-internal features to omit a tracking issue.\n-    // These features must be marked with a `// rustc internal` in its own group.\n-    let mut next_feature_is_rustc_internal = false;\n+    // To make tidy accept omitting a tracking issue, group the list of features\n+    // without one inside `// no tracking issue START` and `// no tracking issue END`.\n+    let mut next_feature_omits_tracking_issue = false;\n \n     contents.lines().zip(1..)\n         .filter_map(|(line, line_number)| {\n             let line = line.trim();\n-            if line.starts_with(\"// rustc internal\") {\n-                next_feature_is_rustc_internal = true;\n-                return None;\n-            } else if line.is_empty() {\n-                next_feature_is_rustc_internal = false;\n-                return None;\n+\n+            // Within START and END, the tracking issue can be omitted.\n+            match line {\n+                \"// no tracking issue START\" => {\n+                    next_feature_omits_tracking_issue = true;\n+                    return None;\n+                }\n+                \"// no tracking issue END\" => {\n+                    next_feature_omits_tracking_issue = false;\n+                    return None;\n+                }\n+                _ => {}\n             }\n \n             let mut parts = line.split(',');\n@@ -198,7 +205,7 @@ pub fn collect_lang_features(base_src_path: &Path, bad: &mut bool) -> Features {\n             let since = parts.next().unwrap().trim().trim_matches('\"');\n             let issue_str = parts.next().unwrap().trim();\n             let tracking_issue = if issue_str.starts_with(\"None\") {\n-                if level == Status::Unstable && !next_feature_is_rustc_internal {\n+                if level == Status::Unstable && !next_feature_omits_tracking_issue {\n                     *bad = true;\n                     tidy_error!(\n                         bad,\n@@ -209,7 +216,6 @@ pub fn collect_lang_features(base_src_path: &Path, bad: &mut bool) -> Features {\n                 }\n                 None\n             } else {\n-                next_feature_is_rustc_internal = false;\n                 let s = issue_str.split('(').nth(1).unwrap().split(')').nth(0).unwrap();\n                 Some(s.parse().unwrap())\n             };"}]}