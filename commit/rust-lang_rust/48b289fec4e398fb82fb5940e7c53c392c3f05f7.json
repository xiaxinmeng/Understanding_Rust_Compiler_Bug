{"sha": "48b289fec4e398fb82fb5940e7c53c392c3f05f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4YjI4OWZlYzRlMzk4ZmI4MmZiNTk0MGU3YzUzYzM5MmMzZjA1Zjc=", "commit": {"author": {"name": "S Pradeep Kumar", "email": "gohanpra@gmail.com", "date": "2013-12-04T05:59:03Z"}, "committer": {"name": "S Pradeep Kumar", "email": "gohanpra@gmail.com", "date": "2013-12-04T10:04:47Z"}, "message": "Add Imenu support for rust-mode.\n\n+ Delete trailing whitespace.", "tree": {"sha": "550b07ba6e29378639a777b0a42ab17a37b47e14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/550b07ba6e29378639a777b0a42ab17a37b47e14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48b289fec4e398fb82fb5940e7c53c392c3f05f7", "comment_count": 17, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48b289fec4e398fb82fb5940e7c53c392c3f05f7", "html_url": "https://github.com/rust-lang/rust/commit/48b289fec4e398fb82fb5940e7c53c392c3f05f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48b289fec4e398fb82fb5940e7c53c392c3f05f7/comments", "author": {"login": "pradeep90", "id": 386555, "node_id": "MDQ6VXNlcjM4NjU1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/386555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pradeep90", "html_url": "https://github.com/pradeep90", "followers_url": "https://api.github.com/users/pradeep90/followers", "following_url": "https://api.github.com/users/pradeep90/following{/other_user}", "gists_url": "https://api.github.com/users/pradeep90/gists{/gist_id}", "starred_url": "https://api.github.com/users/pradeep90/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pradeep90/subscriptions", "organizations_url": "https://api.github.com/users/pradeep90/orgs", "repos_url": "https://api.github.com/users/pradeep90/repos", "events_url": "https://api.github.com/users/pradeep90/events{/privacy}", "received_events_url": "https://api.github.com/users/pradeep90/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pradeep90", "id": 386555, "node_id": "MDQ6VXNlcjM4NjU1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/386555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pradeep90", "html_url": "https://github.com/pradeep90", "followers_url": "https://api.github.com/users/pradeep90/followers", "following_url": "https://api.github.com/users/pradeep90/following{/other_user}", "gists_url": "https://api.github.com/users/pradeep90/gists{/gist_id}", "starred_url": "https://api.github.com/users/pradeep90/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pradeep90/subscriptions", "organizations_url": "https://api.github.com/users/pradeep90/orgs", "repos_url": "https://api.github.com/users/pradeep90/repos", "events_url": "https://api.github.com/users/pradeep90/events{/privacy}", "received_events_url": "https://api.github.com/users/pradeep90/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50e9d4f8899ab2c783e2889a019c5a9f8f95f2f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/50e9d4f8899ab2c783e2889a019c5a9f8f95f2f9", "html_url": "https://github.com/rust-lang/rust/commit/50e9d4f8899ab2c783e2889a019c5a9f8f95f2f9"}], "stats": {"total": 51, "additions": 33, "deletions": 18}, "files": [{"sha": "2a5f2d90735c2addfe9881685f169ebfff11a923", "filename": "src/etc/emacs/rust-mode.el", "status": "modified", "additions": 33, "deletions": 18, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/48b289fec4e398fb82fb5940e7c53c392c3f05f7/src%2Fetc%2Femacs%2Frust-mode.el", "raw_url": "https://github.com/rust-lang/rust/raw/48b289fec4e398fb82fb5940e7c53c392c3f05f7/src%2Fetc%2Femacs%2Frust-mode.el", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Femacs%2Frust-mode.el?ref=48b289fec4e398fb82fb5940e7c53c392c3f05f7", "patch": "@@ -84,7 +84,7 @@\n               ;;    or one further indent from that if either current line\n               ;;    begins with 'else', or previous line didn't end in\n               ;;    semi, comma or brace (other than whitespace and line\n-              ;;    comments) , and wasn't an attribute.  But if we have \n+              ;;    comments) , and wasn't an attribute.  But if we have\n               ;;    something after the open brace and ending with a comma,\n               ;;    treat it as fields and align them.  PHEW.\n               ((> level 0)\n@@ -213,15 +213,15 @@\n \n (defun rust-fill-prefix-for-comment-start (line-start)\n   \"Determine what to use for `fill-prefix' based on what is at the beginning of a line.\"\n-  (let ((result \n+  (let ((result\n          ;; Replace /* with same number of spaces\n          (replace-regexp-in-string\n-          \"\\\\(?:/\\\\*+\\\\)[!*]\" \n+          \"\\\\(?:/\\\\*+\\\\)[!*]\"\n           (lambda (s)\n             ;; We want the * to line up with the first * of the comment start\n             (concat (make-string (- (length s) 2) ?\\x20) \"*\"))\n           line-start)))\n-       ;; Make sure we've got at least one space at the end\n+    ;; Make sure we've got at least one space at the end\n     (if (not (= (aref result (- (length result) 1)) ?\\x20))\n         (setq result (concat result \" \")))\n     result))\n@@ -247,14 +247,14 @@\n     ;; inferring it from the comment start.\n     (let ((next-bol (line-beginning-position 2)))\n       (while (save-excursion\n-              (end-of-line)\n-              (syntax-ppss-flush-cache 1)\n-              (and (nth 4 (syntax-ppss))\n-                   (save-excursion \n-                     (beginning-of-line)\n-                     (looking-at paragraph-start))\n-                   (looking-at \"[[:space:]]*$\")\n-                   (nth 4 (syntax-ppss next-bol))))\n+               (end-of-line)\n+               (syntax-ppss-flush-cache 1)\n+               (and (nth 4 (syntax-ppss))\n+                    (save-excursion\n+                      (beginning-of-line)\n+                      (looking-at paragraph-start))\n+                    (looking-at \"[[:space:]]*$\")\n+                    (nth 4 (syntax-ppss next-bol))))\n         (goto-char next-bol)))\n \n     (syntax-ppss-flush-cache 1)\n@@ -269,10 +269,10 @@\n \n (defun rust-with-comment-fill-prefix (body)\n   (let*\n-      ((line-string (buffer-substring-no-properties \n+      ((line-string (buffer-substring-no-properties\n                      (line-beginning-position) (line-end-position)))\n        (line-comment-start\n-        (when (nth 4 (syntax-ppss)) \n+        (when (nth 4 (syntax-ppss))\n           (cond\n            ;; If we're inside the comment and see a * prefix, use it\n            ((string-match \"^\\\\([[:space:]]*\\\\*+[[:space:]]*\\\\)\"\n@@ -281,9 +281,9 @@\n            ;; If we're at the start of a comment, figure out what prefix\n            ;; to use for the subsequent lines after it\n            ((string-match (concat \"[[:space:]]*\" comment-start-skip) line-string)\n-            (rust-fill-prefix-for-comment-start \n+            (rust-fill-prefix-for-comment-start\n              (match-string 0 line-string))))))\n-       (fill-prefix \n+       (fill-prefix\n         (or line-comment-start\n             fill-prefix)))\n     (funcall body)))\n@@ -294,7 +294,7 @@\n (defun rust-fill-paragraph (&rest args)\n   \"Special wrapping for `fill-paragraph' to handle multi-line comments with a * prefix on each line.\"\n   (rust-in-comment-paragraph\n-   (lambda () \n+   (lambda ()\n      (rust-with-comment-fill-prefix\n       (lambda ()\n         (let\n@@ -321,6 +321,20 @@\n   (rust-with-comment-fill-prefix\n    (lambda () (comment-indent-new-line arg))))\n \n+;;; Imenu support\n+(defvar rust-imenu-generic-expression\n+  (append (loop for item in\n+                '(\"enum\" \"struct\" \"type\" \"mod\" \"fn\")\n+                collect `(nil ,(rust-re-item-def item) 1))\n+          `((\"Impl\" ,(rust-re-item-def \"impl\") 1)))\n+  \"Value for `imenu-generic-expression' in Rust mode.\n+\n+Create a flat index of the item definitions in a Rust file.\n+\n+Imenu will show all the enums, structs, etc. at the same level.\n+Implementations will be shown under the `Impl` subheading.\n+Use idomenu (imenu with ido-mode) for best mileage.\")\n+\n ;; For compatibility with Emacs < 24, derive conditionally\n (defalias 'rust-parent-mode\n   (if (fboundp 'prog-mode) 'prog-mode 'fundamental-mode))\n@@ -348,7 +362,7 @@\n   (set (make-local-variable 'indent-tabs-mode) nil)\n \n   ;; Allow paragraph fills for comments\n-  (set (make-local-variable 'comment-start-skip) \n+  (set (make-local-variable 'comment-start-skip)\n        \"\\\\(?://[/!]*\\\\|/\\\\*[*!]?\\\\)[[:space:]]*\")\n   (set (make-local-variable 'paragraph-start)\n        (concat \"[[:space:]]*\\\\(?:\" comment-start-skip \"\\\\|\\\\*/?[[:space:]]*\\\\|\\\\)$\"))\n@@ -359,6 +373,7 @@\n   (set (make-local-variable 'adaptive-fill-function) 'rust-find-fill-prefix)\n   (set (make-local-variable 'comment-multi-line) t)\n   (set (make-local-variable 'comment-line-break-function) 'rust-comment-indent-new-line)\n+  (set (make-local-variable 'imenu-generic-expression) rust-imenu-generic-expression)\n   )\n \n "}]}