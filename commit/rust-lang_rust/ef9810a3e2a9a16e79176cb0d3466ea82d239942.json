{"sha": "ef9810a3e2a9a16e79176cb0d3466ea82d239942", "node_id": "C_kwDOAAsO6NoAKGVmOTgxMGEzZTJhOWExNmU3OTE3NmNiMGQzNDY2ZWE4MmQyMzk5NDI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-16T02:32:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-16T02:32:47Z"}, "message": "Auto merge of #100237 - cjgillot:no-special-hash-hir, r=nagisa\n\nRemove manual implementations of HashStable for hir::Expr and hir::Ty.\n\nWe do not need to force hashing HIR bodies inside those nodes. The contents of bodies are not accessible from the `hir_owner` query which used `hash_without_bodies`. When the content of a body is required, the access is still done using `hir_owner_nodes`, which continues hashing HIR bodies.", "tree": {"sha": "9f7e70742142d41b540f1d9f2c3e106046767759", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f7e70742142d41b540f1d9f2c3e106046767759"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef9810a3e2a9a16e79176cb0d3466ea82d239942", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef9810a3e2a9a16e79176cb0d3466ea82d239942", "html_url": "https://github.com/rust-lang/rust/commit/ef9810a3e2a9a16e79176cb0d3466ea82d239942", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef9810a3e2a9a16e79176cb0d3466ea82d239942/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3694b7d307b7516757651952b30bb97b6ba5c049", "url": "https://api.github.com/repos/rust-lang/rust/commits/3694b7d307b7516757651952b30bb97b6ba5c049", "html_url": "https://github.com/rust-lang/rust/commit/3694b7d307b7516757651952b30bb97b6ba5c049"}, {"sha": "5d75ca5ef4e947d3316e3aef7b5bd4b58028b943", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d75ca5ef4e947d3316e3aef7b5bd4b58028b943", "html_url": "https://github.com/rust-lang/rust/commit/5d75ca5ef4e947d3316e3aef7b5bd4b58028b943"}], "stats": {"total": 76, "additions": 12, "deletions": 64}, "files": [{"sha": "8dc82e2deeec76062c78570538b745de0493feb2", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef9810a3e2a9a16e79176cb0d3466ea82d239942/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef9810a3e2a9a16e79176cb0d3466ea82d239942/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=ef9810a3e2a9a16e79176cb0d3466ea82d239942", "patch": "@@ -643,14 +643,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     ) -> (Fingerprint, Fingerprint) {\n         self.tcx.with_stable_hashing_context(|mut hcx| {\n             let mut stable_hasher = StableHasher::new();\n-            hcx.with_hir_bodies(true, node.def_id(), bodies, |hcx| {\n+            hcx.with_hir_bodies(node.def_id(), bodies, |hcx| {\n                 node.hash_stable(hcx, &mut stable_hasher)\n             });\n             let hash_including_bodies = stable_hasher.finish();\n             let mut stable_hasher = StableHasher::new();\n-            hcx.with_hir_bodies(false, node.def_id(), bodies, |hcx| {\n-                node.hash_stable(hcx, &mut stable_hasher)\n-            });\n+            hcx.without_hir_bodies(|hcx| node.hash_stable(hcx, &mut stable_hasher));\n             let hash_without_bodies = stable_hasher.finish();\n             (hash_including_bodies, hash_without_bodies)\n         })"}, {"sha": "584e86d51d9dd14980bcd0fb968588d2d5d001d3", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef9810a3e2a9a16e79176cb0d3466ea82d239942/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef9810a3e2a9a16e79176cb0d3466ea82d239942/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=ef9810a3e2a9a16e79176cb0d3466ea82d239942", "patch": "@@ -1626,7 +1626,7 @@ pub struct AnonConst {\n }\n \n /// An expression.\n-#[derive(Debug)]\n+#[derive(Debug, HashStable_Generic)]\n pub struct Expr<'hir> {\n     pub hir_id: HirId,\n     pub kind: ExprKind<'hir>,\n@@ -2380,7 +2380,7 @@ impl TypeBinding<'_> {\n     }\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, HashStable_Generic)]\n pub struct Ty<'hir> {\n     pub hir_id: HirId,\n     pub kind: TyKind<'hir>,"}, {"sha": "5b9c42686c344844b60fb33bee47a52ccfec060e", "filename": "compiler/rustc_hir/src/stable_hash_impls.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ef9810a3e2a9a16e79176cb0d3466ea82d239942/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef9810a3e2a9a16e79176cb0d3466ea82d239942/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs?ref=ef9810a3e2a9a16e79176cb0d3466ea82d239942", "patch": "@@ -1,8 +1,7 @@\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n \n use crate::hir::{\n-    AttributeMap, BodyId, Crate, Expr, ForeignItemId, ImplItemId, ItemId, OwnerNodes, TraitItemId,\n-    Ty,\n+    AttributeMap, BodyId, Crate, ForeignItemId, ImplItemId, ItemId, OwnerNodes, TraitItemId,\n };\n use crate::hir_id::{HirId, ItemLocalId};\n use rustc_span::def_id::DefPathHash;\n@@ -14,8 +13,6 @@ pub trait HashStableContext:\n     rustc_ast::HashStableContext + rustc_target::HashStableContext\n {\n     fn hash_body_id(&mut self, _: BodyId, hasher: &mut StableHasher);\n-    fn hash_hir_expr(&mut self, _: &Expr<'_>, hasher: &mut StableHasher);\n-    fn hash_hir_ty(&mut self, _: &Ty<'_>, hasher: &mut StableHasher);\n }\n \n impl<HirCtx: crate::HashStableContext> ToStableHashKey<HirCtx> for HirId {\n@@ -96,18 +93,6 @@ impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for BodyId {\n // want to pick up on a reference changing its target, so we hash the NodeIds\n // in \"DefPath Mode\".\n \n-impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for Expr<'_> {\n-    fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n-        hcx.hash_hir_expr(self, hasher)\n-    }\n-}\n-\n-impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for Ty<'_> {\n-    fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n-        hcx.hash_hir_ty(self, hasher)\n-    }\n-}\n-\n impl<'tcx, HirCtx: crate::HashStableContext> HashStable<HirCtx> for OwnerNodes<'tcx> {\n     fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n         // We ignore the `nodes` and `bodies` fields since these refer to information included in"}, {"sha": "a09b8ca30e138068118f6b086164379448744c1e", "filename": "compiler/rustc_query_system/src/ich/hcx.rs", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ef9810a3e2a9a16e79176cb0d3466ea82d239942/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef9810a3e2a9a16e79176cb0d3466ea82d239942/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs?ref=ef9810a3e2a9a16e79176cb0d3466ea82d239942", "patch": "@@ -40,11 +40,8 @@ pub struct StableHashingContext<'a> {\n #[derive(Clone, Copy)]\n pub(super) enum BodyResolver<'tcx> {\n     Forbidden,\n-    Traverse {\n-        hash_bodies: bool,\n-        owner: LocalDefId,\n-        bodies: &'tcx SortedMap<hir::ItemLocalId, &'tcx hir::Body<'tcx>>,\n-    },\n+    Ignore,\n+    Traverse { owner: LocalDefId, bodies: &'tcx SortedMap<hir::ItemLocalId, &'tcx hir::Body<'tcx>> },\n }\n \n impl<'a> StableHashingContext<'a> {\n@@ -98,32 +95,20 @@ impl<'a> StableHashingContext<'a> {\n         Self::new_with_or_without_spans(sess, definitions, cstore, source_span, always_ignore_spans)\n     }\n \n-    /// Allow hashing\n     #[inline]\n-    pub fn while_hashing_hir_bodies(&mut self, hb: bool, f: impl FnOnce(&mut Self)) {\n-        let prev = match &mut self.body_resolver {\n-            BodyResolver::Forbidden => panic!(\"Hashing HIR bodies is forbidden.\"),\n-            BodyResolver::Traverse { ref mut hash_bodies, .. } => {\n-                std::mem::replace(hash_bodies, hb)\n-            }\n-        };\n-        f(self);\n-        match &mut self.body_resolver {\n-            BodyResolver::Forbidden => unreachable!(),\n-            BodyResolver::Traverse { ref mut hash_bodies, .. } => *hash_bodies = prev,\n-        }\n+    pub fn without_hir_bodies(&mut self, f: impl FnOnce(&mut StableHashingContext<'_>)) {\n+        f(&mut StableHashingContext { body_resolver: BodyResolver::Ignore, ..self.clone() });\n     }\n \n     #[inline]\n     pub fn with_hir_bodies(\n         &mut self,\n-        hash_bodies: bool,\n         owner: LocalDefId,\n         bodies: &SortedMap<hir::ItemLocalId, &hir::Body<'_>>,\n         f: impl FnOnce(&mut StableHashingContext<'_>),\n     ) {\n         f(&mut StableHashingContext {\n-            body_resolver: BodyResolver::Traverse { hash_bodies, owner, bodies },\n+            body_resolver: BodyResolver::Traverse { owner, bodies },\n             ..self.clone()\n         });\n     }"}, {"sha": "aa008d404c3eab9b21b9d330973036b422103ddb", "filename": "compiler/rustc_query_system/src/ich/impls_hir.rs", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ef9810a3e2a9a16e79176cb0d3466ea82d239942/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef9810a3e2a9a16e79176cb0d3466ea82d239942/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fimpls_hir.rs?ref=ef9810a3e2a9a16e79176cb0d3466ea82d239942", "patch": "@@ -12,31 +12,11 @@ impl<'ctx> rustc_hir::HashStableContext for StableHashingContext<'ctx> {\n         let hcx = self;\n         match hcx.body_resolver {\n             BodyResolver::Forbidden => panic!(\"Hashing HIR bodies is forbidden.\"),\n-            BodyResolver::Traverse { hash_bodies: false, .. } => {}\n-            BodyResolver::Traverse { hash_bodies: true, owner, bodies } => {\n+            BodyResolver::Ignore => {}\n+            BodyResolver::Traverse { owner, bodies } => {\n                 assert_eq!(id.hir_id.owner, owner);\n                 bodies[&id.hir_id.local_id].hash_stable(hcx, hasher);\n             }\n         }\n     }\n-\n-    fn hash_hir_expr(&mut self, expr: &hir::Expr<'_>, hasher: &mut StableHasher) {\n-        self.while_hashing_hir_bodies(true, |hcx| {\n-            let hir::Expr { hir_id, ref span, ref kind } = *expr;\n-\n-            hir_id.hash_stable(hcx, hasher);\n-            span.hash_stable(hcx, hasher);\n-            kind.hash_stable(hcx, hasher);\n-        })\n-    }\n-\n-    fn hash_hir_ty(&mut self, ty: &hir::Ty<'_>, hasher: &mut StableHasher) {\n-        self.while_hashing_hir_bodies(true, |hcx| {\n-            let hir::Ty { hir_id, ref kind, ref span } = *ty;\n-\n-            hir_id.hash_stable(hcx, hasher);\n-            kind.hash_stable(hcx, hasher);\n-            span.hash_stable(hcx, hasher);\n-        })\n-    }\n }"}]}