{"sha": "f90aab7aa9bb5834b340eaef0326994e5e09b933", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MGFhYjdhYTliYjU4MzRiMzQwZWFlZjAzMjY5OTRlNWUwOWI5MzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-06T09:20:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-06T09:20:31Z"}, "message": "Auto merge of #55710 - kennytm:rollup, r=kennytm\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #55490 (resolve: Fix ICE in macro import error recovery)\n - #55597 (std: Enable usage of `thread_local!` through imports)\n - #55601 (Fix tracking issue numbers for some unstable features)\n - #55621 (Add precision for create_dir function)\n - #55644 (ci: Add Dockerfile for dist-powerpcspe-linux)\n - #55664 (Make \"all possible cases\" help message uniform with existing help messages)\n - #55689 (miri: binary_op_val -> binary_op_imm)\n - #55694 (Fixes #31076)\n - #55696 (NLL Diagnostic Review 3: Missing errors for borrows of union fields)\n - #55700 (Update ui tests with respect to NLL)\n - #55703 (Update `configure --help` (via configure.py) to reflect decoupling of debug+optimize)", "tree": {"sha": "512ae3004f0e3c52b761bf370beec7c72f68d3ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/512ae3004f0e3c52b761bf370beec7c72f68d3ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f90aab7aa9bb5834b340eaef0326994e5e09b933", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f90aab7aa9bb5834b340eaef0326994e5e09b933", "html_url": "https://github.com/rust-lang/rust/commit/f90aab7aa9bb5834b340eaef0326994e5e09b933", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f90aab7aa9bb5834b340eaef0326994e5e09b933/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24e66c28980442a48d9458f1a4f9b76cc722dc8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/24e66c28980442a48d9458f1a4f9b76cc722dc8a", "html_url": "https://github.com/rust-lang/rust/commit/24e66c28980442a48d9458f1a4f9b76cc722dc8a"}, {"sha": "8589ca08b1006feb8b1bd89d87669024509bab81", "url": "https://api.github.com/repos/rust-lang/rust/commits/8589ca08b1006feb8b1bd89d87669024509bab81", "html_url": "https://github.com/rust-lang/rust/commit/8589ca08b1006feb8b1bd89d87669024509bab81"}], "stats": {"total": 1185, "additions": 775, "deletions": 410}, "files": [{"sha": "5467c9f9d5bf914499deaefcbfa4913c393cdaf5", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -40,7 +40,7 @@ def v(*args):\n     options.append(Option(*args, value=True))\n \n \n-o(\"debug\", \"rust.debug\", \"debug mode; disables optimization unless `--enable-optimize` given\")\n+o(\"debug\", \"rust.debug\", \"enables debugging environment; does not affect optimization of bootstrapped code (use `--disable-optimize` for that)\")\n o(\"docs\", \"build.docs\", \"build standard library documentation\")\n o(\"compiler-docs\", \"build.compiler-docs\", \"build compiler documentation\")\n o(\"optimize-tests\", \"rust.optimize-tests\", \"build tests with optimizations\")"}, {"sha": "3227819dad54db847454e5b5ae342b5f51ee286d", "filename": "src/ci/docker/disabled/dist-powerpcspe-linux/Dockerfile", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Fci%2Fdocker%2Fdisabled%2Fdist-powerpcspe-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Fci%2Fdocker%2Fdisabled%2Fdist-powerpcspe-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fdist-powerpcspe-linux%2FDockerfile?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -0,0 +1,26 @@\n+FROM ubuntu:16.04\n+\n+RUN apt-get update && apt-get install -y --no-install-recommends \\\n+  g++ \\\n+  make \\\n+  file \\\n+  curl \\\n+  ca-certificates \\\n+  python2.7 \\\n+  git \\\n+  cmake \\\n+  sudo \\\n+  gdb \\\n+  xz-utils \\\n+  g++-powerpc-linux-gnuspe \\\n+  libssl-dev \\\n+  pkg-config\n+\n+\n+COPY scripts/sccache.sh /scripts/\n+RUN sh /scripts/sccache.sh\n+\n+ENV HOSTS=powerpc-unknown-linux-gnuspe\n+\n+ENV RUST_CONFIGURE_ARGS --enable-extended --disable-docs\n+ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "c5bcfd48cf39a5dbcc46fc2b527f0900031acf70", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -291,10 +291,8 @@ fn has_allow_dead_code_or_lang_attr(tcx: TyCtxt<'_, '_, '_>,\n         return true;\n     }\n \n-    // (To be) stable attribute for #[lang = \"panic_impl\"]\n-    if attr::contains_name(attrs, \"panic_implementation\") ||\n-        attr::contains_name(attrs, \"panic_handler\")\n-    {\n+    // Stable attribute for #[lang = \"panic_impl\"]\n+    if attr::contains_name(attrs, \"panic_handler\") {\n         return true;\n     }\n "}, {"sha": "55ffa50e7c896b0600390f434b4c8599d2a62083", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -204,9 +204,7 @@ pub fn extract(attrs: &[ast::Attribute]) -> Option<(Symbol, Span)> {\n             if let Some(value) = attribute.value_str() {\n                 return Some((value, attribute.span));\n             }\n-        } else if attribute.check_name(\"panic_implementation\") ||\n-            attribute.check_name(\"panic_handler\")\n-        {\n+        } else if attribute.check_name(\"panic_handler\") {\n             return Some((Symbol::intern(\"panic_impl\"), attribute.span))\n         } else if attribute.check_name(\"alloc_error_handler\") {\n             return Some((Symbol::intern(\"oom\"), attribute.span))"}, {"sha": "36bc2edcf584eb6293b686f6c3a7ab4b5b7720dc", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -506,25 +506,25 @@ pub enum BorrowKind {\n     /// implicit closure bindings. It is needed when the closure is\n     /// borrowing or mutating a mutable referent, e.g.:\n     ///\n-    ///    let x: &mut isize = ...;\n-    ///    let y = || *x += 5;\n+    ///     let x: &mut isize = ...;\n+    ///     let y = || *x += 5;\n     ///\n     /// If we were to try to translate this closure into a more explicit\n     /// form, we'd encounter an error with the code as written:\n     ///\n-    ///    struct Env { x: & &mut isize }\n-    ///    let x: &mut isize = ...;\n-    ///    let y = (&mut Env { &x }, fn_ptr);  // Closure is pair of env and fn\n-    ///    fn fn_ptr(env: &mut Env) { **env.x += 5; }\n+    ///     struct Env { x: & &mut isize }\n+    ///     let x: &mut isize = ...;\n+    ///     let y = (&mut Env { &x }, fn_ptr);  // Closure is pair of env and fn\n+    ///     fn fn_ptr(env: &mut Env) { **env.x += 5; }\n     ///\n     /// This is then illegal because you cannot mutate an `&mut` found\n     /// in an aliasable location. To solve, you'd have to translate with\n     /// an `&mut` borrow:\n     ///\n-    ///    struct Env { x: & &mut isize }\n-    ///    let x: &mut isize = ...;\n-    ///    let y = (&mut Env { &mut x }, fn_ptr); // changed from &x to &mut x\n-    ///    fn fn_ptr(env: &mut Env) { **env.x += 5; }\n+    ///     struct Env { x: & &mut isize }\n+    ///     let x: &mut isize = ...;\n+    ///     let y = (&mut Env { &mut x }, fn_ptr); // changed from &x to &mut x\n+    ///     fn fn_ptr(env: &mut Env) { **env.x += 5; }\n     ///\n     /// Now the assignment to `**env.x` is legal, but creating a\n     /// mutable pointer to `x` is not because `x` is not mutable. We"}, {"sha": "735ceef229a22f36ba4986e5d28931a98e6da968", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -238,8 +238,8 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n                                                         is non-empty\",\n                                                        pat_ty));\n                     span_help!(&mut err, scrut.span,\n-                               \"Please ensure that all possible cases are being handled; \\\n-                                possibly adding wildcards or more match arms.\");\n+                               \"ensure that all possible cases are being handled, \\\n+                                possibly by adding wildcards or more match arms\");\n                     err.emit();\n                 }\n                 // If the type *is* uninhabited, it's vacuously exhaustive"}, {"sha": "cb2a750f4e3b6cc4a987a5fe88ee6ac31ff9833c", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -140,7 +140,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                     \"unchecked_shr\" => BinOp::Shr,\n                     _ => bug!(\"Already checked for int ops\")\n                 };\n-                let (val, overflowed) = self.binary_op_val(bin_op, l, r)?;\n+                let (val, overflowed) = self.binary_op_imm(bin_op, l, r)?;\n                 if overflowed {\n                     let layout = self.layout_of(substs.type_at(0))?;\n                     let r_val =  r.to_scalar()?.to_bits(layout.size)?;"}, {"sha": "31824d5ec4a93380b2ad428361f36505e682c903", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -28,7 +28,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         right: ImmTy<'tcx, M::PointerTag>,\n         dest: PlaceTy<'tcx, M::PointerTag>,\n     ) -> EvalResult<'tcx> {\n-        let (val, overflowed) = self.binary_op_val(op, left, right)?;\n+        let (val, overflowed) = self.binary_op_imm(op, left, right)?;\n         let val = Immediate::ScalarPair(val.into(), Scalar::from_bool(overflowed).into());\n         self.write_immediate(val, dest)\n     }\n@@ -42,7 +42,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         right: ImmTy<'tcx, M::PointerTag>,\n         dest: PlaceTy<'tcx, M::PointerTag>,\n     ) -> EvalResult<'tcx> {\n-        let (val, _overflowed) = self.binary_op_val(op, left, right)?;\n+        let (val, _overflowed) = self.binary_op_imm(op, left, right)?;\n         self.write_scalar(val, dest)\n     }\n }\n@@ -283,9 +283,9 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n     }\n \n     /// Convenience wrapper that's useful when keeping the layout together with the\n-    /// value.\n+    /// immediate value.\n     #[inline]\n-    pub fn binary_op_val(\n+    pub fn binary_op_imm(\n         &self,\n         bin_op: mir::BinOp,\n         left: ImmTy<'tcx, M::PointerTag>,"}, {"sha": "6dba020120f848385ac0a3bcb5a1cd39f818bcd1", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -511,7 +511,7 @@ fn mono_item_visibility(\n         //\n         // * First is weak lang items. These are basically mechanisms for\n         //   libcore to forward-reference symbols defined later in crates like\n-        //   the standard library or `#[panic_implementation]` definitions. The\n+        //   the standard library or `#[panic_handler]` definitions. The\n         //   definition of these weak lang items needs to be referenceable by\n         //   libcore, so we're no longer a candidate for internalization.\n         //   Removal of these functions can't be done by LLVM but rather must be"}, {"sha": "4f92ba400481bfc2759e4f1fab4ba40cb3efd934", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -455,7 +455,7 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n                 })?;\n                 trace!(\"const evaluating {:?} for {:?} and {:?}\", op, left, right);\n                 let (val, overflow) = self.use_ecx(source_info, |this| {\n-                    this.ecx.binary_op_val(op, l, r)\n+                    this.ecx.binary_op_imm(op, l, r)\n                 })?;\n                 let val = if let Rvalue::CheckedBinaryOp(..) = *rvalue {\n                     Immediate::ScalarPair("}, {"sha": "43a5fdb7a025ff2977da7a3666cc132ec80661d6", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -449,6 +449,9 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                     return Err(Determinacy::Determined);\n                 }\n             }\n+            Def::Err => {\n+                return Err(Determinacy::Determined);\n+            }\n             _ => panic!(\"expected `Def::Macro` or `Def::NonMacroAttr`\"),\n         }\n "}, {"sha": "637f3eaae9a6ac91e0f3e5874cd420354699f697", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -289,8 +289,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // Trait must have a method named `m_name` and it should not have\n         // type parameters or early-bound regions.\n         let tcx = self.tcx;\n-        let method_item =\n-            self.associated_item(trait_def_id, m_name, Namespace::Value).unwrap();\n+        let method_item = match self.associated_item(trait_def_id, m_name, Namespace::Value) {\n+            Some(method_item) => method_item,\n+            None => {\n+                tcx.sess.delay_span_bug(span,\n+                    \"operator trait does not have corresponding operator method\");\n+                return None;\n+            }\n+        };\n         let def_id = method_item.def_id;\n         let generics = tcx.generics_of(def_id);\n         assert_eq!(generics.params.len(), 0);"}, {"sha": "7dfdb926c60ef63a0b9f8fe8d71fb0bfe451e660", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -1167,7 +1167,7 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n         }\n     }\n \n-    // Check that a function marked as `#[panic_implementation]` has signature `fn(&PanicInfo) -> !`\n+    // Check that a function marked as `#[panic_handler]` has signature `fn(&PanicInfo) -> !`\n     if let Some(panic_impl_did) = fcx.tcx.lang_items().panic_impl() {\n         if panic_impl_did == fcx.tcx.hir.local_def_id(fn_id) {\n             if let Some(panic_info_did) = fcx.tcx.lang_items().panic_info() {"}, {"sha": "49012a7d3419604d8ec943ae409619b2aded356a", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -1755,12 +1755,19 @@ pub fn canonicalize<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {\n ///\n /// [changes]: ../io/index.html#platform-specific-behavior\n ///\n+/// **NOTE**: If a parent of the given path doesn't exist, this function will\n+/// return an error. To create a directory and all its missing parents at the\n+/// same time, use the [`create_dir_all`] function.\n+///\n /// # Errors\n ///\n /// This function will return an error in the following situations, but is not\n /// limited to just these cases:\n ///\n /// * User lacks permissions to create directory at `path`.\n+/// * A parent of the given path doesn't exist. (To create a directory and all\n+///   its missing parents at the same time, use the [`create_dir_all`]\n+///   function.)\n /// * `path` already exists.\n ///\n /// # Examples"}, {"sha": "4df4751117244451299281594de09ec169aa75b4", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -146,13 +146,13 @@ macro_rules! thread_local {\n \n     // process multiple declarations\n     ($(#[$attr:meta])* $vis:vis static $name:ident: $t:ty = $init:expr; $($rest:tt)*) => (\n-        __thread_local_inner!($(#[$attr])* $vis $name, $t, $init);\n-        thread_local!($($rest)*);\n+        $crate::__thread_local_inner!($(#[$attr])* $vis $name, $t, $init);\n+        $crate::thread_local!($($rest)*);\n     );\n \n     // handle a single declaration\n     ($(#[$attr:meta])* $vis:vis static $name:ident: $t:ty = $init:expr) => (\n-        __thread_local_inner!($(#[$attr])* $vis $name, $t, $init);\n+        $crate::__thread_local_inner!($(#[$attr])* $vis $name, $t, $init);\n     );\n }\n \n@@ -202,7 +202,7 @@ macro_rules! __thread_local_inner {\n     };\n     ($(#[$attr:meta])* $vis:vis $name:ident, $t:ty, $init:expr) => {\n         $(#[$attr])* $vis const $name: $crate::thread::LocalKey<$t> =\n-            __thread_local_inner!(@key $(#[$attr])* $vis $name, $t, $init);\n+            $crate::__thread_local_inner!(@key $(#[$attr])* $vis $name, $t, $init);\n     }\n }\n "}, {"sha": "cb15c517c178564bbbdee5561234e04e9d96370a", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -349,7 +349,7 @@ declare_features! (\n     (active, abi_thiscall, \"1.19.0\", None, None),\n \n     // Allows a test to fail without failing the whole suite\n-    (active, allow_fail, \"1.19.0\", Some(42219), None),\n+    (active, allow_fail, \"1.19.0\", Some(46488), None),\n \n     // Allows unsized tuple coercion.\n     (active, unsized_tuple_coercion, \"1.20.0\", Some(42877), None),\n@@ -376,7 +376,7 @@ declare_features! (\n     (active, non_exhaustive, \"1.22.0\", Some(44109), None),\n \n     // `crate` as visibility modifier, synonymous to `pub(crate)`\n-    (active, crate_visibility_modifier, \"1.23.0\", Some(45388), None),\n+    (active, crate_visibility_modifier, \"1.23.0\", Some(53120), None),\n \n     // extern types\n     (active, extern_types, \"1.23.0\", Some(43467), None),\n@@ -391,13 +391,13 @@ declare_features! (\n     (active, generic_associated_types, \"1.23.0\", Some(44265), None),\n \n     // `extern` in paths\n-    (active, extern_in_paths, \"1.23.0\", Some(44660), None),\n+    (active, extern_in_paths, \"1.23.0\", Some(55600), None),\n \n     // Use `?` as the Kleene \"at most one\" operator\n     (active, macro_at_most_once_rep, \"1.25.0\", Some(48075), None),\n \n     // Infer static outlives requirements; RFC 2093\n-    (active, infer_static_outlives_requirements, \"1.26.0\", Some(44493), None),\n+    (active, infer_static_outlives_requirements, \"1.26.0\", Some(54185), None),\n \n     // Multiple patterns with `|` in `if let` and `while let`\n     (active, if_while_or_patterns, \"1.26.0\", Some(48215), None),\n@@ -448,9 +448,6 @@ declare_features! (\n     // Integer match exhaustiveness checking\n     (active, exhaustive_integer_patterns, \"1.30.0\", Some(50907), None),\n \n-    // RFC 2070: #[panic_implementation] / #[panic_handler]\n-    (active, panic_implementation, \"1.28.0\", Some(44489), None),\n-\n     // #[doc(keyword = \"...\")]\n     (active, doc_keyword, \"1.28.0\", Some(51315), None),\n \n@@ -466,7 +463,7 @@ declare_features! (\n     (active, test_2018_feature, \"1.31.0\", Some(0), Some(Edition::Edition2018)),\n \n     // Support for arbitrary delimited token streams in non-macro attributes\n-    (active, unrestricted_attribute_tokens, \"1.30.0\", Some(44690), None),\n+    (active, unrestricted_attribute_tokens, \"1.30.0\", Some(55208), None),\n \n     // Allows `use x::y;` to resolve through `self::x`, not just `::x`\n     (active, uniform_paths, \"1.30.0\", Some(53130), None),\n@@ -503,7 +500,7 @@ declare_features! (\n     (active, underscore_const_names, \"1.31.0\", Some(54912), None),\n \n     // `extern crate foo as bar;` puts `bar` into extern prelude.\n-    (active, extern_crate_item_prelude, \"1.31.0\", Some(54658), None),\n+    (active, extern_crate_item_prelude, \"1.31.0\", Some(55599), None),\n \n     // `reason = ` in lint attributes and `expect` lint attribute\n     (active, lint_reasons, \"1.31.0\", Some(54503), None),\n@@ -541,6 +538,8 @@ declare_features! (\n      Some(\"subsumed by `#![feature(proc_macro_hygiene)]`\")),\n     (removed, proc_macro_gen, \"1.27.0\", Some(54727), None,\n      Some(\"subsumed by `#![feature(proc_macro_hygiene)]`\")),\n+    (removed, panic_implementation, \"1.28.0\", Some(44489), None,\n+     Some(\"subsumed by `#[panic_handler]`\")),\n );\n \n declare_features! (\n@@ -1160,16 +1159,6 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                    \"infer 'static lifetime requirements\",\n                                    cfg_fn!(infer_static_outlives_requirements))),\n \n-    // RFC 2070 (deprecated attribute name)\n-    (\"panic_implementation\",\n-     Normal,\n-     Gated(Stability::Deprecated(\"https://github.com/rust-lang/rust/issues/44489\\\n-                                  #issuecomment-415140224\",\n-                                 Some(\"replace this attribute with `#[panic_handler]`\")),\n-           \"panic_implementation\",\n-           \"this attribute was renamed to `panic_handler`\",\n-           cfg_fn!(panic_implementation))),\n-\n     // RFC 2070\n     (\"panic_handler\", Normal, Ungated),\n "}, {"sha": "dcc2f4f5223007cd09abe8325f1b37f4510ebec6", "filename": "src/test/run-make/wasm-symbols-not-imported/foo.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Frun-make%2Fwasm-symbols-not-imported%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Frun-make%2Fwasm-symbols-not-imported%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-symbols-not-imported%2Ffoo.rs?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n #![crate_type = \"cdylib\"]\n-\n-#![feature(panic_implementation)]\n #![no_std]\n \n use core::panic::PanicInfo;\n@@ -20,7 +18,7 @@ pub extern fn foo() {\n     panic!()\n }\n \n-#[panic_implementation]\n+#[panic_handler]\n fn panic(_info: &PanicInfo) -> ! {\n     loop {}\n }"}, {"sha": "0c365597b82a303517fe8ba7e94835cdd9d6d9f6", "filename": "src/test/run-pass/thread-local-not-in-prelude.rs", "status": "renamed", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Frun-pass%2Fthread-local-not-in-prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Frun-pass%2Fthread-local-not-in-prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthread-local-not-in-prelude.rs?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -8,17 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags:-C panic=abort\n-\n-#![deny(deprecated)]\n-#![feature(panic_implementation)]\n #![no_std]\n \n-use core::panic::PanicInfo;\n+extern crate std;\n \n-#[panic_implementation]\n-fn panic(info: &PanicInfo) -> ! {\n-    loop {}\n-}\n+std::thread_local!(static A: usize = 30);\n \n-fn main() {}\n+fn main() {\n+}", "previous_filename": "src/test/ui/panic-implementation/panic-implementation-deprecated.rs"}, {"sha": "612375f904783995bc27aec4d96f1e1466402055", "filename": "src/test/ui/binop/binop-move-semantics.nll.stderr", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.nll.stderr?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -20,6 +20,29 @@ LL |     x.clone();  //~ ERROR: use of moved value\n    |\n    = note: move occurs because `x` has type `T`, which does not implement the `Copy` trait\n \n+error[E0505]: cannot move out of `x` because it is borrowed\n+  --> $DIR/binop-move-semantics.rs:31:5\n+   |\n+LL |     let m = &x;\n+   |             -- borrow of `x` occurs here\n+...\n+LL |     x  //~ ERROR: cannot move out of `x` because it is borrowed\n+   |     ^ move out of `x` occurs here\n+...\n+LL |     use_mut(n); use_imm(m);\n+   |                         - borrow later used here\n+\n+error[E0505]: cannot move out of `y` because it is borrowed\n+  --> $DIR/binop-move-semantics.rs:33:5\n+   |\n+LL |     let n = &mut y;\n+   |             ------ borrow of `y` occurs here\n+...\n+LL |     y;  //~ ERROR: cannot move out of `y` because it is borrowed\n+   |     ^ move out of `y` occurs here\n+LL |     use_mut(n); use_imm(m);\n+   |             - borrow later used here\n+\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/binop-move-semantics.rs:40:5\n    |\n@@ -62,7 +85,7 @@ LL | |     &mut f;  //~ ERROR: cannot borrow `f` as mutable because it is also b\n    |       |    immutable borrow later used here\n    |       mutable borrow occurs here\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 8 previous errors\n \n-Some errors occurred: E0382, E0502, E0507.\n+Some errors occurred: E0382, E0502, E0505, E0507.\n For more information about an error, try `rustc --explain E0382`."}, {"sha": "f6fad8b46dd9d4f68ff983ca8959f45924652404", "filename": "src/test/ui/binop/binop-move-semantics.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.rs?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -31,17 +31,17 @@ fn move_borrowed<T: Add<Output=()>>(x: T, mut y: T) {\n     x  //~ ERROR: cannot move out of `x` because it is borrowed\n     +\n     y;  //~ ERROR: cannot move out of `y` because it is borrowed\n+    use_mut(n); use_imm(m);\n }\n-\n fn illegal_dereference<T: Add<Output=()>>(mut x: T, y: T) {\n     let m = &mut x;\n     let n = &y;\n \n     *m  //~ ERROR: cannot move out of borrowed content\n     +\n     *n;  //~ ERROR: cannot move out of borrowed content\n+    use_imm(n); use_mut(m);\n }\n-\n struct Foo;\n \n impl<'a, 'b> Add<&'b Foo> for &'a mut Foo {\n@@ -73,3 +73,6 @@ fn immut_plus_mut() {\n }\n \n fn main() {}\n+\n+fn use_mut<T>(_: &mut T) { }\n+fn use_imm<T>(_: &T) { }"}, {"sha": "160a84c480cd31a6f930ed18b7a6bac3a9c52c1b", "filename": "src/test/ui/borrowck/borrowck-closures-mut-of-imm.nll.stderr", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.nll.stderr?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -1,15 +1,32 @@\n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n-  --> $DIR/borrowck-closures-mut-of-imm.rs:23:21\n+  --> $DIR/borrowck-closures-mut-of-imm.rs:23:25\n    |\n-LL |     let c1 = || set(&mut *x);\n-   |                     ^^^^^^^ cannot borrow as mutable\n+LL |     let mut c1 = || set(&mut *x);\n+   |                         ^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n-  --> $DIR/borrowck-closures-mut-of-imm.rs:25:21\n+  --> $DIR/borrowck-closures-mut-of-imm.rs:25:25\n    |\n-LL |     let c2 = || set(&mut *x);\n-   |                     ^^^^^^^ cannot borrow as mutable\n+LL |     let mut c2 = || set(&mut *x);\n+   |                         ^^^^^^^ cannot borrow as mutable\n \n-error: aborting due to 2 previous errors\n+error[E0524]: two closures require unique access to `x` at the same time\n+  --> $DIR/borrowck-closures-mut-of-imm.rs:25:18\n+   |\n+LL |     let mut c1 = || set(&mut *x);\n+   |                  --           - first borrow occurs due to use of `x` in closure\n+   |                  |\n+   |                  first closure is constructed here\n+LL |     //~^ ERROR cannot borrow\n+LL |     let mut c2 = || set(&mut *x);\n+   |                  ^^           - second borrow occurs due to use of `x` in closure\n+   |                  |\n+   |                  second closure is constructed here\n+...\n+LL |     c2(); c1();\n+   |           -- first borrow later used here\n+\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0596`.\n+Some errors occurred: E0524, E0596.\n+For more information about an error, try `rustc --explain E0524`."}, {"sha": "3bf4f17fde1a808a997df2ab9575d0d9822ecc7d", "filename": "src/test/ui/borrowck/borrowck-closures-mut-of-imm.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.rs?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -20,11 +20,12 @@ fn set(x: &mut isize) {\n }\n \n fn a(x: &isize) {\n-    let c1 = || set(&mut *x);\n+    let mut c1 = || set(&mut *x);\n     //~^ ERROR cannot borrow\n-    let c2 = || set(&mut *x);\n+    let mut c2 = || set(&mut *x);\n     //~^ ERROR cannot borrow\n     //~| ERROR two closures require unique access to `x` at the same time\n+    c2(); c1();\n }\n \n fn main() {"}, {"sha": "c248595d57119c1929283086d1e52ea3c5cbb451", "filename": "src/test/ui/borrowck/borrowck-closures-mut-of-imm.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.stderr?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -1,30 +1,30 @@\n error[E0524]: two closures require unique access to `x` at the same time\n-  --> $DIR/borrowck-closures-mut-of-imm.rs:25:14\n+  --> $DIR/borrowck-closures-mut-of-imm.rs:25:18\n    |\n-LL |     let c1 = || set(&mut *x);\n-   |              --           - previous borrow occurs due to use of `x` in closure\n-   |              |\n-   |              first closure is constructed here\n+LL |     let mut c1 = || set(&mut *x);\n+   |                  --           - previous borrow occurs due to use of `x` in closure\n+   |                  |\n+   |                  first closure is constructed here\n LL |     //~^ ERROR cannot borrow\n-LL |     let c2 = || set(&mut *x);\n-   |              ^^           - borrow occurs due to use of `x` in closure\n-   |              |\n-   |              second closure is constructed here\n+LL |     let mut c2 = || set(&mut *x);\n+   |                  ^^           - borrow occurs due to use of `x` in closure\n+   |                  |\n+   |                  second closure is constructed here\n ...\n LL | }\n    | - borrow from first closure ends here\n \n error[E0596]: cannot borrow immutable borrowed content `***x` as mutable\n-  --> $DIR/borrowck-closures-mut-of-imm.rs:23:26\n+  --> $DIR/borrowck-closures-mut-of-imm.rs:23:30\n    |\n-LL |     let c1 = || set(&mut *x);\n-   |                          ^^ cannot borrow as mutable\n+LL |     let mut c1 = || set(&mut *x);\n+   |                              ^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow immutable borrowed content `***x` as mutable\n-  --> $DIR/borrowck-closures-mut-of-imm.rs:25:26\n+  --> $DIR/borrowck-closures-mut-of-imm.rs:25:30\n    |\n-LL |     let c2 = || set(&mut *x);\n-   |                          ^^ cannot borrow as mutable\n+LL |     let mut c2 = || set(&mut *x);\n+   |                              ^^ cannot borrow as mutable\n \n error: aborting due to 3 previous errors\n "}, {"sha": "18f95f232cdd34ba5b239326014b015dc408f8eb", "filename": "src/test/ui/borrowck/borrowck-closures-mut-of-mut.nll.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-mut.nll.stderr?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -0,0 +1,18 @@\n+error[E0524]: two closures require unique access to `x` at the same time\n+  --> $DIR/borrowck-closures-mut-of-mut.rs:14:18\n+   |\n+LL |     let mut c1 = || set(&mut *x);\n+   |                  --           - first borrow occurs due to use of `x` in closure\n+   |                  |\n+   |                  first closure is constructed here\n+LL |     let mut c2 = || set(&mut *x);\n+   |                  ^^           - second borrow occurs due to use of `x` in closure\n+   |                  |\n+   |                  second closure is constructed here\n+LL |     //~^ ERROR two closures require unique access to `x` at the same time\n+LL |     c2(); c1();\n+   |           -- first borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0524`."}, {"sha": "50c6f2c585ed9d83e016cd5b6eeafe9b81632a18", "filename": "src/test/ui/borrowck/borrowck-closures-mut-of-mut.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-mut.rs?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -0,0 +1,20 @@\n+// Tests that two closures cannot simultaneously both have mutable\n+// access to the variable. Related to issue #6801.\n+\n+fn get(x: &isize) -> isize {\n+    *x\n+}\n+\n+fn set(x: &mut isize) {\n+    *x = 4;\n+}\n+\n+fn a(x: &mut isize) {\n+    let mut c1 = || set(&mut *x);\n+    let mut c2 = || set(&mut *x);\n+    //~^ ERROR two closures require unique access to `x` at the same time\n+    c2(); c1();\n+}\n+\n+fn main() {\n+}"}, {"sha": "2c5587710a1542fbd17bee0838e077b8d4458780", "filename": "src/test/ui/borrowck/borrowck-closures-mut-of-mut.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-mut.stderr?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -0,0 +1,18 @@\n+error[E0524]: two closures require unique access to `x` at the same time\n+  --> $DIR/borrowck-closures-mut-of-mut.rs:14:18\n+   |\n+LL |     let mut c1 = || set(&mut *x);\n+   |                  --           - previous borrow occurs due to use of `x` in closure\n+   |                  |\n+   |                  first closure is constructed here\n+LL |     let mut c2 = || set(&mut *x);\n+   |                  ^^           - borrow occurs due to use of `x` in closure\n+   |                  |\n+   |                  second closure is constructed here\n+...\n+LL | }\n+   | - borrow from first closure ends here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0524`."}, {"sha": "1844d8275999d0f0e62bf20b8a288dea8e88bba4", "filename": "src/test/ui/borrowck/borrowck-lend-flow-loop.ast.stderr", "status": "renamed", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.ast.stderr?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -4,7 +4,7 @@ error[E0502]: cannot borrow `*v` as immutable because `v` is also borrowed as mu\n LL |     let mut x = &mut v;\n    |                      - mutable borrow occurs here\n ...\n-LL |         borrow(&*v); //~ ERROR cannot borrow\n+LL |         borrow(&*v); //[ast]~ ERROR cannot borrow\n    |                 ^^ immutable borrow occurs here\n LL |     }\n LL | }\n@@ -16,7 +16,7 @@ error[E0502]: cannot borrow `*v` as immutable because `v` is also borrowed as mu\n LL |     let mut x = &mut v;\n    |                      - mutable borrow occurs here\n LL |     for _ in 0..3 {\n-LL |         borrow(&*v); //~ ERROR cannot borrow\n+LL |         borrow(&*v); //[ast]~ ERROR cannot borrow\n    |                 ^^ immutable borrow occurs here\n ...\n LL | }\n@@ -25,7 +25,7 @@ LL | }\n error[E0502]: cannot borrow `*v` as mutable because `v` is also borrowed as immutable\n   --> $DIR/borrowck-lend-flow-loop.rs:57:25\n    |\n-LL |         borrow_mut(&mut *v); //~ ERROR cannot borrow\n+LL |         borrow_mut(&mut *v); //[ast]~ ERROR cannot borrow\n    |                         ^^ mutable borrow occurs here\n LL |         _x = &v;\n    |               - immutable borrow occurs here\n@@ -36,7 +36,7 @@ LL | }\n error[E0502]: cannot borrow `*v` as mutable because `v` is also borrowed as immutable\n   --> $DIR/borrowck-lend-flow-loop.rs:69:25\n    |\n-LL |         borrow_mut(&mut *v); //~ ERROR cannot borrow\n+LL |         borrow_mut(&mut *v); //[ast]~ ERROR cannot borrow\n    |                         ^^ mutable borrow occurs here\n LL |         _x = &v;\n    |               - immutable borrow occurs here\n@@ -50,7 +50,7 @@ error[E0502]: cannot borrow `*v` as mutable because `v` is also borrowed as immu\n LL |         _x = &v;\n    |               - immutable borrow occurs here\n ...\n-LL |     borrow_mut(&mut *v); //~ ERROR cannot borrow\n+LL |     borrow_mut(&mut *v); //[ast]~ ERROR cannot borrow\n    |                     ^^ mutable borrow occurs here\n LL | }\n    | - immutable borrow ends here\n@@ -61,27 +61,27 @@ error[E0502]: cannot borrow `*v` as mutable because `v` is also borrowed as immu\n LL |         _x = &v;\n    |               - immutable borrow occurs here\n ...\n-LL |     borrow_mut(&mut *v); //~ ERROR cannot borrow\n+LL |     borrow_mut(&mut *v); //[ast]~ ERROR cannot borrow\n    |                     ^^ mutable borrow occurs here\n LL | }\n    | - immutable borrow ends here\n \n error[E0502]: cannot borrow `*v` as immutable because `v` is also borrowed as mutable\n   --> $DIR/borrowck-lend-flow-loop.rs:109:17\n    |\n-LL |         borrow(&*v); //~ ERROR cannot borrow\n+LL |         borrow(&*v); //[ast]~ ERROR cannot borrow\n    |                 ^^ immutable borrow occurs here\n-LL |         if cond2 {\n-LL |             x = &mut v; //~ ERROR cannot borrow\n+...\n+LL |             x = &mut v; //[ast]~ ERROR cannot borrow\n    |                      - mutable borrow occurs here\n ...\n LL | }\n    | - mutable borrow ends here\n \n error[E0499]: cannot borrow `v` as mutable more than once at a time\n-  --> $DIR/borrowck-lend-flow-loop.rs:111:22\n+  --> $DIR/borrowck-lend-flow-loop.rs:112:22\n    |\n-LL |             x = &mut v; //~ ERROR cannot borrow\n+LL |             x = &mut v; //[ast]~ ERROR cannot borrow\n    |                      ^ mutable borrow starts here in previous iteration of loop\n ...\n LL | }", "previous_filename": "src/test/ui/borrowck/borrowck-lend-flow-loop.stderr"}, {"sha": "19de3582c881964372e0b23851fca87a1bd352c0", "filename": "src/test/ui/borrowck/borrowck-lend-flow-loop.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.nll.stderr?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -4,9 +4,9 @@ error[E0502]: cannot borrow `*v` as immutable because it is also borrowed as mut\n LL |     let mut x = &mut v;\n    |                 ------ mutable borrow occurs here\n LL |     for _ in 0..3 {\n-LL |         borrow(&*v); //~ ERROR cannot borrow\n+LL |         borrow(&*v); //[ast]~ ERROR cannot borrow\n    |                ^^^ immutable borrow occurs here\n-LL |     }\n+...\n LL |     *x = box 5;\n    |     -- mutable borrow used here, in later iteration of loop\n \n@@ -15,10 +15,10 @@ error[E0502]: cannot borrow `*v` as immutable because it is also borrowed as mut\n    |\n LL |         **x += 1;\n    |         -------- mutable borrow used here, in later iteration of loop\n-LL |         borrow(&*v); //~ ERROR cannot borrow\n+LL |         borrow(&*v); //[ast]~ ERROR cannot borrow\n    |                ^^^ immutable borrow occurs here\n-LL |         if cond2 {\n-LL |             x = &mut v; //~ ERROR cannot borrow\n+...\n+LL |             x = &mut v; //[ast]~ ERROR cannot borrow\n    |                 ------ mutable borrow occurs here\n \n error: aborting due to 2 previous errors"}, {"sha": "7008e5cef4b7587380ebd06ca5caf538beab8df6", "filename": "src/test/ui/borrowck/borrowck-lend-flow-loop.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.rs?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -1,18 +1,18 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Note: the borrowck analysis is currently flow-insensitive.\n-// Therefore, some of these errors are marked as spurious and could be\n-// corrected by a simple change to the analysis.  The others are\n-// either genuine or would require more advanced changes.  The latter\n-// cases are noted.\n+// revisions: ast nll\n+\n+// Since we are testing nll migration explicitly as a separate\n+// revision, don't worry about the --compare-mode=nll on this test.\n+\n+// ignore-compare-mode-nll\n+\n+//[ast]compile-flags: -Z borrowck=ast\n+//[nll]compile-flags: -Z borrowck=migrate -Z two-phase-borrows\n+\n+// Note: the borrowck analysis was originally a flow-insensitive pass\n+// over the AST. Therefore, some of these (AST) errors are marked as\n+// spurious and are corrected by the flow-sensitive (NLL) analysis.\n+// The others are either genuine or would require more advanced\n+// changes. The latter cases are noted.\n \n #![feature(box_syntax)]\n \n@@ -32,7 +32,7 @@ fn loop_overarching_alias_mut() {\n     let mut x = &mut v;\n     **x += 1;\n     loop {\n-        borrow(&*v); //~ ERROR cannot borrow\n+        borrow(&*v); //[ast]~ ERROR cannot borrow\n     }\n }\n \n@@ -42,19 +42,19 @@ fn block_overarching_alias_mut() {\n     let mut v: Box<_> = box 3;\n     let mut x = &mut v;\n     for _ in 0..3 {\n-        borrow(&*v); //~ ERROR cannot borrow\n+        borrow(&*v); //[ast]~ ERROR cannot borrow\n+        //[nll]~^ ERROR cannot borrow\n     }\n     *x = box 5;\n }\n-\n fn loop_aliased_mut() {\n     // In this instance, the borrow is carried through the loop.\n \n     let mut v: Box<_> = box 3;\n     let mut w: Box<_> = box 4;\n     let mut _x = &w;\n     loop {\n-        borrow_mut(&mut *v); //~ ERROR cannot borrow\n+        borrow_mut(&mut *v); //[ast]~ ERROR cannot borrow\n         _x = &v;\n     }\n }\n@@ -66,7 +66,7 @@ fn while_aliased_mut() {\n     let mut w: Box<_> = box 4;\n     let mut _x = &w;\n     while cond() {\n-        borrow_mut(&mut *v); //~ ERROR cannot borrow\n+        borrow_mut(&mut *v); //[ast]~ ERROR cannot borrow\n         _x = &v;\n     }\n }\n@@ -83,7 +83,7 @@ fn loop_aliased_mut_break() {\n         _x = &v;\n         break;\n     }\n-    borrow_mut(&mut *v); //~ ERROR cannot borrow\n+    borrow_mut(&mut *v); //[ast]~ ERROR cannot borrow\n }\n \n fn while_aliased_mut_break() {\n@@ -97,7 +97,7 @@ fn while_aliased_mut_break() {\n         _x = &v;\n         break;\n     }\n-    borrow_mut(&mut *v); //~ ERROR cannot borrow\n+    borrow_mut(&mut *v); //[ast]~ ERROR cannot borrow\n }\n \n fn while_aliased_mut_cond(cond: bool, cond2: bool) {\n@@ -106,13 +106,13 @@ fn while_aliased_mut_cond(cond: bool, cond2: bool) {\n     let mut x = &mut w;\n     while cond {\n         **x += 1;\n-        borrow(&*v); //~ ERROR cannot borrow\n+        borrow(&*v); //[ast]~ ERROR cannot borrow\n+        //[nll]~^ ERROR cannot borrow\n         if cond2 {\n-            x = &mut v; //~ ERROR cannot borrow\n+            x = &mut v; //[ast]~ ERROR cannot borrow\n         }\n     }\n }\n-\n fn loop_break_pops_scopes<'r, F>(_v: &'r mut [usize], mut f: F) where\n     F: FnMut(&'r mut usize) -> bool,\n {"}, {"sha": "0c4f2fa9d718bbca248899b6aada15b77244cf82", "filename": "src/test/ui/borrowck/borrowck-overloaded-call.nll.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.nll.stderr?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -1,3 +1,13 @@\n+error[E0502]: cannot borrow `s` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-overloaded-call.rs:69:5\n+   |\n+LL |     let sp = &mut s;\n+   |              ------ mutable borrow occurs here\n+LL |     s(3);   //~ ERROR cannot borrow `s` as immutable because it is also borrowed as mutable\n+   |     ^ immutable borrow occurs here\n+LL |     use_mut(sp);\n+   |             -- mutable borrow later used here\n+\n error[E0596]: cannot borrow `s` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-overloaded-call.rs:77:5\n    |\n@@ -17,7 +27,7 @@ LL |     s(\" world\".to_string());    //~ ERROR use of moved value: `s`\n    |\n    = note: move occurs because `s` has type `SFnOnce`, which does not implement the `Copy` trait\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors occurred: E0382, E0596.\n+Some errors occurred: E0382, E0502, E0596.\n For more information about an error, try `rustc --explain E0382`."}, {"sha": "b2401fbbc042c559739427564959380a316df284", "filename": "src/test/ui/borrowck/borrowck-overloaded-call.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.rs?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -67,8 +67,8 @@ fn f() {\n     };\n     let sp = &mut s;\n     s(3);   //~ ERROR cannot borrow `s` as immutable because it is also borrowed as mutable\n+    use_mut(sp);\n }\n-\n fn g() {\n     let s = SFnMut {\n         x: 1,\n@@ -86,3 +86,5 @@ fn h() {\n }\n \n fn main() {}\n+\n+fn use_mut<T>(_: &mut T) { }"}, {"sha": "bb5bafbbc7b85a0dbb314d7e0868831829e4a5e7", "filename": "src/test/ui/borrowck/borrowck-overloaded-call.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.stderr?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -5,6 +5,7 @@ LL |     let sp = &mut s;\n    |                   - mutable borrow occurs here\n LL |     s(3);   //~ ERROR cannot borrow `s` as immutable because it is also borrowed as mutable\n    |     ^ immutable borrow occurs here\n+LL |     use_mut(sp);\n LL | }\n    | - mutable borrow ends here\n "}, {"sha": "198d086aa3be6d9926fef9eab1fa8d8087f3d4a4", "filename": "src/test/ui/borrowck/borrowck-overloaded-index-move-index.nll.stderr", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-index.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-index.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-index.nll.stderr?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -1,3 +1,27 @@\n+error[E0505]: cannot move out of `s` because it is borrowed\n+  --> $DIR/borrowck-overloaded-index-move-index.rs:60:22\n+   |\n+LL |     let rs = &mut s;\n+   |              ------ borrow of `s` occurs here\n+LL | \n+LL |     println!(\"{}\", f[s]);\n+   |                      ^ move out of `s` occurs here\n+...\n+LL |     use_mut(rs);\n+   |             -- borrow later used here\n+\n+error[E0505]: cannot move out of `s` because it is borrowed\n+  --> $DIR/borrowck-overloaded-index-move-index.rs:63:7\n+   |\n+LL |     let rs = &mut s;\n+   |              ------ borrow of `s` occurs here\n+...\n+LL |     f[s] = 10;\n+   |       ^ move out of `s` occurs here\n+...\n+LL |     use_mut(rs);\n+   |             -- borrow later used here\n+\n error[E0382]: use of moved value: `s`\n   --> $DIR/borrowck-overloaded-index-move-index.rs:63:7\n    |\n@@ -9,6 +33,7 @@ LL |     f[s] = 10;\n    |\n    = note: move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n \n-error: aborting due to previous error\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0382`.\n+Some errors occurred: E0382, E0505.\n+For more information about an error, try `rustc --explain E0382`."}, {"sha": "e95423a8e834d78e224b0c0568c95a2805900f01", "filename": "src/test/ui/borrowck/borrowck-overloaded-index-move-index.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-index.rs?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -71,4 +71,8 @@ fn main() {\n     let _j = &i;\n     println!(\"{}\", s[i]); // no error, i is copy\n     println!(\"{}\", s[i]);\n+\n+    use_mut(rs);\n }\n+\n+fn use_mut<T>(_: &mut T) { }"}, {"sha": "1b4f9e77da80b77d17041e91862687bb23b3d34a", "filename": "src/test/ui/borrowck/borrowck-reborrow-from-mut.nll.stderr", "status": "modified", "additions": 107, "deletions": 2, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.nll.stderr?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -1,3 +1,107 @@\n+error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n+  --> $DIR/borrowck-reborrow-from-mut.rs:23:17\n+   |\n+LL |     let _bar1 = &mut foo.bar1;\n+   |                 ------------- first mutable borrow occurs here\n+LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n+   |                 ^^^^^^^^^^^^^ second mutable borrow occurs here\n+LL |     use_mut(_bar1);\n+   |             ----- first borrow later used here\n+\n+error[E0502]: cannot borrow `foo.bar1` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-reborrow-from-mut.rs:28:17\n+   |\n+LL |     let _bar1 = &mut foo.bar1;\n+   |                 ------------- mutable borrow occurs here\n+LL |     let _bar2 = &foo.bar1;  //~ ERROR cannot borrow\n+   |                 ^^^^^^^^^ immutable borrow occurs here\n+LL |     use_mut(_bar1);\n+   |             ----- mutable borrow later used here\n+\n+error[E0502]: cannot borrow `foo.bar1` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-reborrow-from-mut.rs:33:17\n+   |\n+LL |     let _bar1 = &foo.bar1;\n+   |                 --------- immutable borrow occurs here\n+LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n+   |                 ^^^^^^^^^^^^^ mutable borrow occurs here\n+LL |     use_imm(_bar1);\n+   |             ----- immutable borrow later used here\n+\n+error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n+  --> $DIR/borrowck-reborrow-from-mut.rs:55:21\n+   |\n+LL |     let _bar1 = &mut foo.bar1;\n+   |                 ------------- first mutable borrow occurs here\n+LL |     match *foo {\n+LL |         Foo { bar1: ref mut _bar1, bar2: _ } => {}\n+   |                     ^^^^^^^^^^^^^ second mutable borrow occurs here\n+...\n+LL |     use_mut(_bar1);\n+   |             ----- first borrow later used here\n+\n+error[E0502]: cannot borrow `foo.bar1` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-reborrow-from-mut.rs:62:17\n+   |\n+LL |     let _bar1 = &mut foo.bar1.int1;\n+   |                 ------------------ mutable borrow occurs here\n+LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n+   |                 ^^^^^^^^^ immutable borrow occurs here\n+LL |     let _foo2 = &*foo; //~ ERROR cannot borrow\n+LL |     use_mut(_bar1);\n+   |             ----- mutable borrow later used here\n+\n+error[E0502]: cannot borrow `*foo` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-reborrow-from-mut.rs:63:17\n+   |\n+LL |     let _bar1 = &mut foo.bar1.int1;\n+   |                 ------------------ mutable borrow occurs here\n+LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo2 = &*foo; //~ ERROR cannot borrow\n+   |                 ^^^^^ immutable borrow occurs here\n+LL |     use_mut(_bar1);\n+   |             ----- mutable borrow later used here\n+\n+error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n+  --> $DIR/borrowck-reborrow-from-mut.rs:68:17\n+   |\n+LL |     let _bar1 = &mut foo.bar1.int1;\n+   |                 ------------------ first mutable borrow occurs here\n+LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n+   |                 ^^^^^^^^^^^^^ second mutable borrow occurs here\n+LL |     use_mut(_bar1);\n+   |             ----- first borrow later used here\n+\n+error[E0499]: cannot borrow `*foo` as mutable more than once at a time\n+  --> $DIR/borrowck-reborrow-from-mut.rs:73:17\n+   |\n+LL |     let _bar1 = &mut foo.bar1.int1;\n+   |                 ------------------ first mutable borrow occurs here\n+LL |     let _foo2 = &mut *foo; //~ ERROR cannot borrow\n+   |                 ^^^^^^^^^ second mutable borrow occurs here\n+LL |     use_mut(_bar1);\n+   |             ----- first borrow later used here\n+\n+error[E0502]: cannot borrow `foo.bar1` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-reborrow-from-mut.rs:78:17\n+   |\n+LL |     let _bar1 = &foo.bar1.int1;\n+   |                 -------------- immutable borrow occurs here\n+LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n+   |                 ^^^^^^^^^^^^^ mutable borrow occurs here\n+LL |     use_imm(_bar1);\n+   |             ----- immutable borrow later used here\n+\n+error[E0502]: cannot borrow `*foo` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-reborrow-from-mut.rs:83:17\n+   |\n+LL |     let _bar1 = &foo.bar1.int1;\n+   |                 -------------- immutable borrow occurs here\n+LL |     let _foo2 = &mut *foo; //~ ERROR cannot borrow\n+   |                 ^^^^^^^^^ mutable borrow occurs here\n+LL |     use_imm(_bar1);\n+   |             ----- immutable borrow later used here\n+\n error[E0596]: cannot borrow `foo.bar1` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-reborrow-from-mut.rs:98:17\n    |\n@@ -6,6 +110,7 @@ LL | fn borrow_mut_from_imm(foo: &Foo) {\n LL |     let _bar1 = &mut foo.bar1; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^^^ `foo` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n-error: aborting due to previous error\n+error: aborting due to 11 previous errors\n \n-For more information about this error, try `rustc --explain E0596`.\n+Some errors occurred: E0499, E0502, E0596.\n+For more information about an error, try `rustc --explain E0499`."}, {"sha": "9235d900a7e792db5a978ebcc8550601269eb84e", "filename": "src/test/ui/borrowck/borrowck-reborrow-from-mut.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.rs?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -21,86 +21,89 @@ struct Bar {\n fn borrow_same_field_twice_mut_mut(foo: &mut Foo) {\n     let _bar1 = &mut foo.bar1;\n     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n+    use_mut(_bar1);\n }\n-\n fn borrow_same_field_twice_mut_imm(foo: &mut Foo) {\n     let _bar1 = &mut foo.bar1;\n     let _bar2 = &foo.bar1;  //~ ERROR cannot borrow\n+    use_mut(_bar1);\n }\n-\n fn borrow_same_field_twice_imm_mut(foo: &mut Foo) {\n     let _bar1 = &foo.bar1;\n     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n+    use_imm(_bar1);\n }\n-\n fn borrow_same_field_twice_imm_imm(foo: &mut Foo) {\n     let _bar1 = &foo.bar1;\n     let _bar2 = &foo.bar1;\n+    use_imm(_bar1);\n }\n-\n fn borrow_both_mut(foo: &mut Foo) {\n     let _bar1 = &mut foo.bar1;\n     let _bar2 = &mut foo.bar2;\n+    use_mut(_bar1);\n }\n-\n fn borrow_both_mut_pattern(foo: &mut Foo) {\n     match *foo {\n-        Foo { bar1: ref mut _bar1, bar2: ref mut _bar2 } => {}\n+        Foo { bar1: ref mut _bar1, bar2: ref mut _bar2 } =>\n+        { use_mut(_bar1); use_mut(_bar2); }\n     }\n }\n-\n fn borrow_var_and_pattern(foo: &mut Foo) {\n     let _bar1 = &mut foo.bar1;\n     match *foo {\n         Foo { bar1: ref mut _bar1, bar2: _ } => {}\n         //~^ ERROR cannot borrow\n     }\n+    use_mut(_bar1);\n }\n-\n fn borrow_mut_and_base_imm(foo: &mut Foo) {\n     let _bar1 = &mut foo.bar1.int1;\n     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n     let _foo2 = &*foo; //~ ERROR cannot borrow\n+    use_mut(_bar1);\n }\n-\n fn borrow_mut_and_base_mut(foo: &mut Foo) {\n     let _bar1 = &mut foo.bar1.int1;\n     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n+    use_mut(_bar1);\n }\n-\n fn borrow_mut_and_base_mut2(foo: &mut Foo) {\n     let _bar1 = &mut foo.bar1.int1;\n     let _foo2 = &mut *foo; //~ ERROR cannot borrow\n+    use_mut(_bar1);\n }\n-\n fn borrow_imm_and_base_mut(foo: &mut Foo) {\n     let _bar1 = &foo.bar1.int1;\n     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n+    use_imm(_bar1);\n }\n-\n fn borrow_imm_and_base_mut2(foo: &mut Foo) {\n     let _bar1 = &foo.bar1.int1;\n     let _foo2 = &mut *foo; //~ ERROR cannot borrow\n+    use_imm(_bar1);\n }\n-\n fn borrow_imm_and_base_imm(foo: &mut Foo) {\n     let _bar1 = &foo.bar1.int1;\n     let _foo1 = &foo.bar1;\n     let _foo2 = &*foo;\n+    use_imm(_bar1);\n }\n-\n fn borrow_mut_and_imm(foo: &mut Foo) {\n     let _bar1 = &mut foo.bar1;\n     let _foo1 = &foo.bar2;\n+    use_mut(_bar1);\n }\n-\n fn borrow_mut_from_imm(foo: &Foo) {\n     let _bar1 = &mut foo.bar1; //~ ERROR cannot borrow\n }\n \n fn borrow_long_path_both_mut(foo: &mut Foo) {\n     let _bar1 = &mut foo.bar1.int1;\n     let _foo1 = &mut foo.bar2.int2;\n+    use_mut(_bar1);\n }\n-\n fn main() {}\n+\n+fn use_mut<T>(_: &mut T) { }\n+fn use_imm<T>(_: &T) { }"}, {"sha": "1310e38cb3ee6f7567b57d9f51b80f9889374bad", "filename": "src/test/ui/borrowck/borrowck-reborrow-from-mut.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.stderr?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -5,6 +5,7 @@ LL |     let _bar1 = &mut foo.bar1;\n    |                      -------- first mutable borrow occurs here\n LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n    |                      ^^^^^^^^ second mutable borrow occurs here\n+LL |     use_mut(_bar1);\n LL | }\n    | - first borrow ends here\n \n@@ -15,6 +16,7 @@ LL |     let _bar1 = &mut foo.bar1;\n    |                      -------- mutable borrow occurs here\n LL |     let _bar2 = &foo.bar1;  //~ ERROR cannot borrow\n    |                  ^^^^^^^^ immutable borrow occurs here\n+LL |     use_mut(_bar1);\n LL | }\n    | - mutable borrow ends here\n \n@@ -25,6 +27,7 @@ LL |     let _bar1 = &foo.bar1;\n    |                  -------- immutable borrow occurs here\n LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n    |                      ^^^^^^^^ mutable borrow occurs here\n+LL |     use_imm(_bar1);\n LL | }\n    | - immutable borrow ends here\n \n@@ -47,7 +50,7 @@ LL |     let _bar1 = &mut foo.bar1.int1;\n    |                      ------------- mutable borrow occurs here\n LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n    |                  ^^^^^^^^ immutable borrow occurs here\n-LL |     let _foo2 = &*foo; //~ ERROR cannot borrow\n+...\n LL | }\n    | - mutable borrow ends here\n \n@@ -59,6 +62,7 @@ LL |     let _bar1 = &mut foo.bar1.int1;\n LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n LL |     let _foo2 = &*foo; //~ ERROR cannot borrow\n    |                  ^^^^ immutable borrow occurs here\n+LL |     use_mut(_bar1);\n LL | }\n    | - mutable borrow ends here\n \n@@ -69,6 +73,7 @@ LL |     let _bar1 = &mut foo.bar1.int1;\n    |                      ------------- first mutable borrow occurs here\n LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n    |                      ^^^^^^^^ second mutable borrow occurs here\n+LL |     use_mut(_bar1);\n LL | }\n    | - first borrow ends here\n \n@@ -79,6 +84,7 @@ LL |     let _bar1 = &mut foo.bar1.int1;\n    |                      ------------- first mutable borrow occurs here\n LL |     let _foo2 = &mut *foo; //~ ERROR cannot borrow\n    |                      ^^^^ second mutable borrow occurs here\n+LL |     use_mut(_bar1);\n LL | }\n    | - first borrow ends here\n \n@@ -89,6 +95,7 @@ LL |     let _bar1 = &foo.bar1.int1;\n    |                  ------------- immutable borrow occurs here\n LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n    |                      ^^^^^^^^ mutable borrow occurs here\n+LL |     use_imm(_bar1);\n LL | }\n    | - immutable borrow ends here\n \n@@ -99,6 +106,7 @@ LL |     let _bar1 = &foo.bar1.int1;\n    |                  ------------- immutable borrow occurs here\n LL |     let _foo2 = &mut *foo; //~ ERROR cannot borrow\n    |                      ^^^^ mutable borrow occurs here\n+LL |     use_imm(_bar1);\n LL | }\n    | - immutable borrow ends here\n "}, {"sha": "ee5ad58290e9e11a6eb7238ca3840106c071b096", "filename": "src/test/ui/borrowck/borrowck-unboxed-closures.nll.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.nll.stderr?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -1,3 +1,13 @@\n+error[E0502]: cannot borrow `f` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-unboxed-closures.rs:13:5\n+   |\n+LL |     let g = &mut f;\n+   |             ------ mutable borrow occurs here\n+LL |     f(1, 2);    //~ ERROR cannot borrow `f` as immutable\n+   |     ^ immutable borrow occurs here\n+LL |     use_mut(g);\n+   |             - mutable borrow later used here\n+\n error[E0596]: cannot borrow `f` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-unboxed-closures.rs:17:5\n    |\n@@ -16,7 +26,7 @@ LL |     f(1, 2);    //~ ERROR use of moved value\n    |\n    = note: move occurs because `f` has type `F`, which does not implement the `Copy` trait\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors occurred: E0382, E0596.\n+Some errors occurred: E0382, E0502, E0596.\n For more information about an error, try `rustc --explain E0382`."}, {"sha": "43f143a492fd63b76108c44ec14a3ce0a73ca300", "filename": "src/test/ui/borrowck/borrowck-unboxed-closures.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.rs?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -11,8 +11,8 @@\n fn a<F:Fn(isize, isize) -> isize>(mut f: F) {\n     let g = &mut f;\n     f(1, 2);    //~ ERROR cannot borrow `f` as immutable\n+    use_mut(g);\n }\n-\n fn b<F:FnMut(isize, isize) -> isize>(f: F) {\n     f(1, 2);    //~ ERROR cannot borrow immutable argument\n }\n@@ -23,3 +23,5 @@ fn c<F:FnOnce(isize, isize) -> isize>(f: F) {\n }\n \n fn main() {}\n+\n+fn use_mut<T>(_: &mut T) { }"}, {"sha": "6ee1a6245a556b51774baf80effe93b1f923b68c", "filename": "src/test/ui/borrowck/borrowck-unboxed-closures.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.stderr?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -5,6 +5,7 @@ LL |     let g = &mut f;\n    |                  - mutable borrow occurs here\n LL |     f(1, 2);    //~ ERROR cannot borrow `f` as immutable\n    |     ^ immutable borrow occurs here\n+LL |     use_mut(g);\n LL | }\n    | - mutable borrow ends here\n "}, {"sha": "e334472f9d6e1b26cba8b06eb20fe2ccdd999cfe", "filename": "src/test/ui/codemap_tests/overlapping_spans.nll.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/24e66c28980442a48d9458f1a4f9b76cc722dc8a/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24e66c28980442a48d9458f1a4f9b76cc722dc8a/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.nll.stderr?ref=24e66c28980442a48d9458f1a4f9b76cc722dc8a", "patch": "@@ -1,17 +0,0 @@\n-error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n-  --> $DIR/overlapping_spans.rs:20:11\n-   |\n-LL |     match (S {f:\"foo\".to_string()}) {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n-LL |         S {f:_s} => {} //~ ERROR cannot move out\n-   |              -- data moved here\n-   |\n-note: move occurs because `_s` has type `std::string::String`, which does not implement the `Copy` trait\n-  --> $DIR/overlapping_spans.rs:21:14\n-   |\n-LL |         S {f:_s} => {} //~ ERROR cannot move out\n-   |              ^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0509`."}, {"sha": "467e90bd5a51b178986f1b95e1641f45d057a286", "filename": "src/test/ui/codemap_tests/overlapping_spans.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/24e66c28980442a48d9458f1a4f9b76cc722dc8a/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24e66c28980442a48d9458f1a4f9b76cc722dc8a/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.rs?ref=24e66c28980442a48d9458f1a4f9b76cc722dc8a", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[derive(Debug)]\n-struct Foo { }\n-\n-struct S {f:String}\n-impl Drop for S {\n-    fn drop(&mut self) { println!(\"{}\", self.f); }\n-}\n-\n-fn main() {\n-    match (S {f:\"foo\".to_string()}) {\n-        S {f:_s} => {} //~ ERROR cannot move out\n-    }\n-}"}, {"sha": "62a4f08e156611c4ca314d893749d9994f0706dd", "filename": "src/test/ui/codemap_tests/overlapping_spans.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/24e66c28980442a48d9458f1a4f9b76cc722dc8a/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24e66c28980442a48d9458f1a4f9b76cc722dc8a/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.stderr?ref=24e66c28980442a48d9458f1a4f9b76cc722dc8a", "patch": "@@ -1,12 +0,0 @@\n-error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n-  --> $DIR/overlapping_spans.rs:21:9\n-   |\n-LL |         S {f:_s} => {} //~ ERROR cannot move out\n-   |         ^^^^^--^\n-   |         |    |\n-   |         |    hint: to prevent move, use `ref _s` or `ref mut _s`\n-   |         cannot move out of here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0509`."}, {"sha": "31adb2f3f1471fbe4d55e14bbb3fd497e3756826", "filename": "src/test/ui/dropck/dropck-eyepatch-extern-crate.ast.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.ast.stderr?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -32,7 +32,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c_shortest` does not live long enough\n-  --> $DIR/dropck-eyepatch-extern-crate.rs:49:20\n+  --> $DIR/dropck-eyepatch-extern-crate.rs:50:20\n    |\n LL |     dr = Dr(\"dr\", &c_shortest);\n    |                    ^^^^^^^^^^ borrowed value does not live long enough", "previous_filename": "src/test/ui/dropck/dropck-eyepatch-extern-crate.stderr"}, {"sha": "68065639398a591409ab042d6251431d54d335a8", "filename": "src/test/ui/dropck/dropck-eyepatch-extern-crate.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.rs?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -1,12 +1,12 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n+// The behavior of AST-borrowck and NLL explcitly differ here due to\n+// NLL's increased precision; so we use revisions and do not worry\n+// about the --compare-mode=nll on this test.\n+\n+// revisions: ast nll\n+//[ast]compile-flags: -Z borrowck=ast\n+//[nll]compile-flags: -Z borrowck=migrate -Z two-phase-borrows\n+\n+// ignore-compare-mode-nll\n \n // aux-build:dropck_eyepatch_extern_crate.rs\n \n@@ -39,29 +39,32 @@ fn main() { #![rustc_error] // rust-lang/rust#49855\n \n     // Error: destructor order imprecisely modelled\n     dt = Dt(\"dt\", &c);\n-    //~^ ERROR `c` does not live long enough\n+    //[ast]~^ ERROR `c` does not live long enough\n     dr = Dr(\"dr\", &c);\n-    //~^ ERROR `c` does not live long enough\n+    //[ast]~^ ERROR `c` does not live long enough\n \n     // Error: `c_shortest` dies too soon for the references in dtors to be valid.\n     dt = Dt(\"dt\", &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n+    //[nll]~^^ ERROR `c_shortest` does not live long enough\n     dr = Dr(\"dr\", &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n-\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n     // No error: Drop impl asserts .1 (A and &'a _) are not accessed\n     pt = Pt(\"pt\", &c_shortest, &c_long);\n     pr = Pr(\"pr\", &c_shortest, &c_long);\n \n     // Error: Drop impl's assertion does not apply to `B` nor `&'b _`\n     pt = Pt(\"pt\", &c_long, &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n     pr = Pr(\"pr\", &c_long, &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n \n     // No error: St and Sr have no destructor.\n     st = St(\"st\", &c_shortest);\n     sr = Sr(\"sr\", &c_shortest);\n \n     println!(\"{:?}\", (dt.0, dr.0, pt.0, pr.0, st.0, sr.0));\n+    use_imm(sr.1); use_imm(st.1); use_imm(pr.1); use_imm(pt.1); use_imm(dr.1); use_imm(dt.1);\n }\n+\n+fn use_imm<T>(_: &T) { }"}, {"sha": "ddd47e97434970c79282b77a95f25a4a78de5e7a", "filename": "src/test/ui/dropck/dropck-eyepatch-reorder.ast.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.ast.stderr?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -32,7 +32,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c_shortest` does not live long enough\n-  --> $DIR/dropck-eyepatch-reorder.rs:66:20\n+  --> $DIR/dropck-eyepatch-reorder.rs:67:20\n    |\n LL |     dr = Dr(\"dr\", &c_shortest);\n    |                    ^^^^^^^^^^ borrowed value does not live long enough", "previous_filename": "src/test/ui/dropck/dropck-eyepatch-reorder.stderr"}, {"sha": "16aaa2612576821c954b62ca84e1247ac71ee034", "filename": "src/test/ui/dropck/dropck-eyepatch-reorder.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.rs?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -1,12 +1,12 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n+// The behavior of AST-borrowck and NLL explcitly differ here due to\n+// NLL's increased precision; so we use revisions and do not worry\n+// about the --compare-mode=nll on this test.\n+\n+// revisions: ast nll\n+//[ast]compile-flags: -Z borrowck=ast\n+//[nll]compile-flags: -Z borrowck=migrate -Z two-phase-borrows\n+\n+// ignore-compare-mode-nll\n \n #![feature(dropck_eyepatch, rustc_attrs)]\n \n@@ -56,29 +56,32 @@ fn main() { #![rustc_error] // rust-lang/rust#49855\n \n     // Error: destructor order imprecisely modelled\n     dt = Dt(\"dt\", &c);\n-    //~^ ERROR `c` does not live long enough\n+    //[ast]~^ ERROR `c` does not live long enough\n     dr = Dr(\"dr\", &c);\n-    //~^ ERROR `c` does not live long enough\n+    //[ast]~^ ERROR `c` does not live long enough\n \n     // Error: `c_shortest` dies too soon for the references in dtors to be valid.\n     dt = Dt(\"dt\", &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n+    //[nll]~^^ ERROR `c_shortest` does not live long enough\n     dr = Dr(\"dr\", &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n-\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n     // No error: Drop impl asserts .1 (A and &'a _) are not accessed\n     pt = Pt(\"pt\", &c_shortest, &c_long);\n     pr = Pr(\"pr\", &c_shortest, &c_long);\n \n     // Error: Drop impl's assertion does not apply to `B` nor `&'b _`\n     pt = Pt(\"pt\", &c_long, &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n     pr = Pr(\"pr\", &c_long, &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n \n     // No error: St and Sr have no destructor.\n     st = St(\"st\", &c_shortest);\n     sr = Sr(\"sr\", &c_shortest);\n \n     println!(\"{:?}\", (dt.0, dr.0, pt.0, pr.0, st.0, sr.0));\n+    use_imm(sr.1); use_imm(st.1); use_imm(pr.1); use_imm(pt.1); use_imm(dr.1); use_imm(dt.1);\n }\n+\n+fn use_imm<T>(_: &T) { }"}, {"sha": "0952ed0d6b793f8a1427e2479f49e8a98b18ee35", "filename": "src/test/ui/dropck/dropck-eyepatch.ast.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.ast.stderr?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -32,7 +32,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c_shortest` does not live long enough\n-  --> $DIR/dropck-eyepatch.rs:89:20\n+  --> $DIR/dropck-eyepatch.rs:90:20\n    |\n LL |     dr = Dr(\"dr\", &c_shortest);\n    |                    ^^^^^^^^^^ borrowed value does not live long enough", "previous_filename": "src/test/ui/dropck/dropck-eyepatch.stderr"}, {"sha": "d7a671fd33c2c62713325081c71edbe326b16556", "filename": "src/test/ui/dropck/dropck-eyepatch.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.rs?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -1,12 +1,12 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n+// The behavior of AST-borrowck and NLL explcitly differ here due to\n+// NLL's increased precision; so we use revisions and do not worry\n+// about the --compare-mode=nll on this test.\n+\n+// revisions: ast nll\n+//[ast]compile-flags: -Z borrowck=ast\n+//[nll]compile-flags: -Z borrowck=migrate -Z two-phase-borrows\n+\n+// ignore-compare-mode-nll\n \n #![feature(dropck_eyepatch, rustc_attrs)]\n \n@@ -79,30 +79,33 @@ fn main() { #![rustc_error] // rust-lang/rust#49855\n \n     // Error: destructor order imprecisely modelled\n     dt = Dt(\"dt\", &c);\n-    //~^ ERROR `c` does not live long enough\n+    //[ast]~^ ERROR `c` does not live long enough\n     dr = Dr(\"dr\", &c);\n-    //~^ ERROR `c` does not live long enough\n+    //[ast]~^ ERROR `c` does not live long enough\n \n     // Error: `c_shortest` dies too soon for the references in dtors to be valid.\n     dt = Dt(\"dt\", &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n+    //[nll]~^^ ERROR `c_shortest` does not live long enough\n     dr = Dr(\"dr\", &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n-\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n \n     // No error: Drop impl asserts .1 (A and &'a _) are not accessed\n     pt = Pt(\"pt\", &c_shortest, &c_long);\n     pr = Pr(\"pr\", &c_shortest, &c_long);\n \n     // Error: Drop impl's assertion does not apply to `B` nor `&'b _`\n     pt = Pt(\"pt\", &c_long, &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n     pr = Pr(\"pr\", &c_long, &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n \n     // No error: St and Sr have no destructor.\n     st = St(\"st\", &c_shortest);\n     sr = Sr(\"sr\", &c_shortest);\n \n     println!(\"{:?}\", (dt.0, dr.0, pt.0, pr.0, st.0, sr.0));\n+    use_imm(sr.1); use_imm(st.1); use_imm(pr.1); use_imm(pt.1); use_imm(dr.1); use_imm(dt.1);\n }\n+\n+fn use_imm<T>(_: &T) { }"}, {"sha": "900812787bcf7debe389d41ab08db9cb9f33d8d0", "filename": "src/test/ui/error-codes/E0004-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -4,7 +4,7 @@ error[E0004]: non-exhaustive patterns: type std::option::Option<i32> is non-empt\n LL |     match x { } //~ ERROR E0004\n    |           ^\n    |\n-help: Please ensure that all possible cases are being handled; possibly adding wildcards or more match arms.\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n   --> $DIR/E0004-2.rs:14:11\n    |\n LL |     match x { } //~ ERROR E0004"}, {"sha": "736fad44b8b5840b4259c4ddeafe8eb1d185e4d2", "filename": "src/test/ui/feature-gates/feature-gate-allow_fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow_fail.stderr?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: allow_fail attribute is currently unstable (see issue #42219)\n+error[E0658]: allow_fail attribute is currently unstable (see issue #46488)\n   --> $DIR/feature-gate-allow_fail.rs:13:1\n    |\n LL | #[allow_fail] //~ ERROR allow_fail attribute is currently unstable"}, {"sha": "e1c1dcbcd790ce271faa113fd3c83542b6e53674", "filename": "src/test/ui/feature-gates/feature-gate-crate_visibility_modifier.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_visibility_modifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_visibility_modifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_visibility_modifier.stderr?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `crate` visibility modifier is experimental (see issue #45388)\n+error[E0658]: `crate` visibility modifier is experimental (see issue #53120)\n   --> $DIR/feature-gate-crate_visibility_modifier.rs:11:1\n    |\n LL | crate struct Bender { //~ ERROR `crate` visibility modifier is experimental"}, {"sha": "bbd4b630263a44706e21fb21377a314db30c7319", "filename": "src/test/ui/feature-gates/feature-gate-extern_crate_item_prelude.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_item_prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_item_prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_item_prelude.stderr?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -1,68 +1,68 @@\n-error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #54658)\n+error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #55599)\n   --> $DIR/feature-gate-extern_crate_item_prelude.rs:26:9\n    |\n LL |     use alloc;\n    |         ^^^^^\n    |\n    = help: add #![feature(extern_crate_item_prelude)] to the crate attributes to enable\n \n-error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #54658)\n+error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #55599)\n   --> $DIR/feature-gate-extern_crate_item_prelude.rs:28:9\n    |\n LL |     use alloc::boxed;\n    |         ^^^^^\n    |\n    = help: add #![feature(extern_crate_item_prelude)] to the crate attributes to enable\n \n-error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #54658)\n+error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #55599)\n   --> $DIR/feature-gate-extern_crate_item_prelude.rs:33:11\n    |\n LL |     use ::alloc;\n    |           ^^^^^\n    |\n    = help: add #![feature(extern_crate_item_prelude)] to the crate attributes to enable\n \n-error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #54658)\n+error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #55599)\n   --> $DIR/feature-gate-extern_crate_item_prelude.rs:35:11\n    |\n LL |     use ::alloc::boxed;\n    |           ^^^^^\n    |\n    = help: add #![feature(extern_crate_item_prelude)] to the crate attributes to enable\n \n-error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #54658)\n+error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #55599)\n   --> $DIR/feature-gate-extern_crate_item_prelude.rs:9:17\n    |\n LL |         let v = alloc::vec![0];\n    |                 ^^^^^\n    |\n    = help: add #![feature(extern_crate_item_prelude)] to the crate attributes to enable\n \n-error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #54658)\n+error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #55599)\n   --> $DIR/feature-gate-extern_crate_item_prelude.rs:11:18\n    |\n LL |         type A = alloc::boxed::Box<u8>;\n    |                  ^^^^^\n    |\n    = help: add #![feature(extern_crate_item_prelude)] to the crate attributes to enable\n \n-error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #54658)\n+error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #55599)\n   --> $DIR/feature-gate-extern_crate_item_prelude.rs:18:19\n    |\n LL |         let v = ::alloc::vec![0];\n    |                   ^^^^^\n    |\n    = help: add #![feature(extern_crate_item_prelude)] to the crate attributes to enable\n \n-error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #54658)\n+error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #55599)\n   --> $DIR/feature-gate-extern_crate_item_prelude.rs:20:20\n    |\n LL |         type A = ::alloc::boxed::Box<u8>;\n    |                    ^^^^^\n    |\n    = help: add #![feature(extern_crate_item_prelude)] to the crate attributes to enable\n \n-error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #54658)\n+error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #55599)\n   --> $DIR/feature-gate-extern_crate_item_prelude.rs:42:14\n    |\n LL |     type A = core::boxed::Box<u8>;"}, {"sha": "a73533b617891c121ce4029a46d0d8cb414729bd", "filename": "src/test/ui/feature-gates/feature-gate-extern_in_paths.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_in_paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_in_paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_in_paths.stderr?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `extern` in paths is experimental (see issue #44660)\n+error[E0658]: `extern` in paths is experimental (see issue #55600)\n   --> $DIR/feature-gate-extern_in_paths.rs:14:13\n    |\n LL |     let _ = extern::std::vec::Vec::new(); //~ ERROR `extern` in paths is experimental"}, {"sha": "81de0d14aa7d33bf22fddbd7dcab7e87d8c96485", "filename": "src/test/ui/feature-gates/feature-gate-nll.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/24e66c28980442a48d9458f1a4f9b76cc722dc8a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24e66c28980442a48d9458f1a4f9b76cc722dc8a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.nll.stderr?ref=24e66c28980442a48d9458f1a4f9b76cc722dc8a", "patch": "@@ -1,13 +0,0 @@\n-error: compilation successful\n-  --> $DIR/feature-gate-nll.rs:13:1\n-   |\n-LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n-LL | |     let mut x = 33;\n-LL | |\n-LL | |     let p = &x;\n-LL | |     x = 22; //~ ERROR cannot assign to `x` because it is borrowed [E0506]\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "14c48fb48a09b6a83d85ca616cc5a0af6d42505b", "filename": "src/test/ui/feature-gates/feature-gate-nll.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.rs?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -1,16 +1,16 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-#![feature(rustc_attrs)]\n+// This is a test checking that if you do not opt into NLL then you\n+// should not get the effects of NLL applied to the test.\n+\n+// Don't use 2018 edition, since that turns on NLL (migration mode).\n+// edition:2015\n+\n+// Don't use compare-mode=nll, since that turns on NLL.\n+// ignore-compare-mode-nll\n+\n+\n #![allow(dead_code)]\n \n-fn main() { #![rustc_error] // rust-lang/rust#49855\n+fn main() {\n     let mut x = 33;\n \n     let p = &x;"}, {"sha": "ca51154884f1227fb047c5df0bc3940fbcb87993", "filename": "src/test/ui/feature-gates/feature-gate-panic-implementation.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/24e66c28980442a48d9458f1a4f9b76cc722dc8a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-panic-implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24e66c28980442a48d9458f1a4f9b76cc722dc8a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-panic-implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-panic-implementation.rs?ref=24e66c28980442a48d9458f1a4f9b76cc722dc8a", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// compile-flags:-C panic=abort\n-\n-#![no_std]\n-#![no_main]\n-\n-use core::panic::PanicInfo;\n-\n-#[panic_implementation] //~ ERROR this attribute was renamed to `panic_handler` (see issue #44489)\n-fn panic(info: &PanicInfo) -> ! {\n-    loop {}\n-}"}, {"sha": "a54780468c42de97a4c48303f78e7fe4d8435237", "filename": "src/test/ui/feature-gates/feature-gate-panic-implementation.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/24e66c28980442a48d9458f1a4f9b76cc722dc8a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-panic-implementation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24e66c28980442a48d9458f1a4f9b76cc722dc8a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-panic-implementation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-panic-implementation.stderr?ref=24e66c28980442a48d9458f1a4f9b76cc722dc8a", "patch": "@@ -1,11 +0,0 @@\n-error[E0658]: this attribute was renamed to `panic_handler` (see issue #44489)\n-  --> $DIR/feature-gate-panic-implementation.rs:18:1\n-   |\n-LL | #[panic_implementation] //~ ERROR this attribute was renamed to `panic_handler` (see issue #44489)\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(panic_implementation)] to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "9c6750fd48c2650c3d1347c4b95628447b3dc9ef", "filename": "src/test/ui/imports/issue-55457.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fimports%2Fissue-55457.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fimports%2Fissue-55457.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-55457.rs?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -0,0 +1,8 @@\n+use NonExistent; //~ ERROR unresolved import `NonExistent`\n+use non_existent::non_existent; //~ ERROR unresolved import `non_existent`\n+\n+#[non_existent] //~ ERROR cannot determine resolution for the attribute macro `non_existent`\n+#[derive(NonExistent)] //~ ERROR cannot determine resolution for the derive macro `NonExistent`\n+struct S;\n+\n+fn main() {}"}, {"sha": "363dec06237f4c69a612e4c9937f076249a351c0", "filename": "src/test/ui/imports/issue-55457.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fimports%2Fissue-55457.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fimports%2Fissue-55457.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-55457.stderr?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -0,0 +1,31 @@\n+error[E0432]: unresolved import `NonExistent`\n+  --> $DIR/issue-55457.rs:1:5\n+   |\n+LL | use NonExistent; //~ ERROR unresolved import `NonExistent`\n+   |     ^^^^^^^^^^^ no `NonExistent` in the root. Did you mean to use `non_existent`?\n+\n+error[E0432]: unresolved import `non_existent`\n+  --> $DIR/issue-55457.rs:2:5\n+   |\n+LL | use non_existent::non_existent; //~ ERROR unresolved import `non_existent`\n+   |     ^^^^^^^^^^^^ Maybe a missing `extern crate non_existent;`?\n+\n+error: cannot determine resolution for the derive macro `NonExistent`\n+  --> $DIR/issue-55457.rs:5:10\n+   |\n+LL | #[derive(NonExistent)] //~ ERROR cannot determine resolution for the derive macro `NonExistent`\n+   |          ^^^^^^^^^^^\n+   |\n+   = note: import resolution is stuck, try simplifying macro imports\n+\n+error: cannot determine resolution for the attribute macro `non_existent`\n+  --> $DIR/issue-55457.rs:4:3\n+   |\n+LL | #[non_existent] //~ ERROR cannot determine resolution for the attribute macro `non_existent`\n+   |   ^^^^^^^^^^^^\n+   |\n+   = note: import resolution is stuck, try simplifying macro imports\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0432`."}, {"sha": "3d42dcb52f5db1966810ef67f5269a04c6b22b21", "filename": "src/test/ui/issues/issue-17263.ast.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fissues%2Fissue-17263.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fissues%2Fissue-17263.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17263.ast.stderr?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -16,7 +16,7 @@ LL |     let (c, d) = (&mut foo.a, &foo.b);\n    |                        -----   ^^^^^ immutable borrow occurs here (via `foo.b`)\n    |                        |\n    |                        mutable borrow occurs here (via `foo.a`)\n-LL |     //~^ ERROR cannot borrow `foo` (via `foo.b`) as immutable\n+...\n LL | }\n    | - mutable borrow ends here\n ", "previous_filename": "src/test/ui/issues/issue-17263.stderr"}, {"sha": "cdb574b8b9f942f8e3d069b5a3051660d89b25af", "filename": "src/test/ui/issues/issue-17263.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fissues%2Fissue-17263.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fissues%2Fissue-17263.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17263.nll.stderr?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -1,12 +1,12 @@\n error: compilation successful\n   --> $DIR/issue-17263.rs:15:1\n    |\n-LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n+LL | / fn main() { //[nll]~ ERROR compilation successful\n LL | |     let mut x: Box<_> = box Foo { a: 1, b: 2 };\n LL | |     let (a, b) = (&mut x.a, &mut x.b);\n-LL | |     //~^ ERROR cannot borrow `x` (via `x.b`) as mutable more than once at a time\n+LL | |     //[ast]~^ ERROR cannot borrow `x` (via `x.b`) as mutable more than once at a time\n ...  |\n-LL | |     //~^ ERROR cannot borrow `foo` (via `foo.b`) as immutable\n+LL | |     use_mut(a);\n LL | | }\n    | |_^\n "}, {"sha": "754f3b90aacf1f47de9ce15674126dc94370edf6", "filename": "src/test/ui/issues/issue-17263.rs", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fissues%2Fissue-17263.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fissues%2Fissue-17263.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17263.rs?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -1,23 +1,35 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n+// This checks diagnostic quality for cases where AST-borrowck treated\n+// `Box<T>` as other types (see rust-lang/rfcs#130). NLL again treats\n+// `Box<T>` specially. We capture the differences via revisions.\n \n+// revisions: ast nll\n+//[ast]compile-flags: -Z borrowck=ast\n+//[nll]compile-flags: -Z borrowck=migrate -Z two-phase-borrows\n+\n+// don't worry about the --compare-mode=nll on this test.\n+// ignore-compare-mode-nll\n #![feature(box_syntax, rustc_attrs)]\n \n struct Foo { a: isize, b: isize }\n-\n-fn main() { #![rustc_error] // rust-lang/rust#49855\n+#[rustc_error] // rust-lang/rust#49855\n+fn main() { //[nll]~ ERROR compilation successful\n     let mut x: Box<_> = box Foo { a: 1, b: 2 };\n     let (a, b) = (&mut x.a, &mut x.b);\n-    //~^ ERROR cannot borrow `x` (via `x.b`) as mutable more than once at a time\n+    //[ast]~^ ERROR cannot borrow `x` (via `x.b`) as mutable more than once at a time\n \n     let mut foo: Box<_> = box Foo { a: 1, b: 2 };\n     let (c, d) = (&mut foo.a, &foo.b);\n-    //~^ ERROR cannot borrow `foo` (via `foo.b`) as immutable\n+    //[ast]~^ ERROR cannot borrow `foo` (via `foo.b`) as immutable\n+\n+    // We explicitly use the references created above to illustrate\n+    // that NLL is accepting this code *not* because of artificially\n+    // short lifetimes, but rather because it understands that all the\n+    // references are of disjoint parts of memory.\n+    use_imm(d);\n+    use_mut(c);\n+    use_mut(b);\n+    use_mut(a);\n }\n+\n+fn use_mut<T>(_: &mut T) { }\n+fn use_imm<T>(_: &T) { }"}, {"sha": "b2bfe6b5e8c0778b854feb39d74e5b40cdd0b190", "filename": "src/test/ui/issues/issue-3096-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fissues%2Fissue-3096-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fissues%2Fissue-3096-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3096-1.stderr?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -4,7 +4,7 @@ error[E0004]: non-exhaustive patterns: type () is non-empty\n LL |     match () { } //~ ERROR non-exhaustive\n    |           ^^\n    |\n-help: Please ensure that all possible cases are being handled; possibly adding wildcards or more match arms.\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n   --> $DIR/issue-3096-1.rs:12:11\n    |\n LL |     match () { } //~ ERROR non-exhaustive"}, {"sha": "bb9dfabe7be0338189591ce1461364200135c1c2", "filename": "src/test/ui/issues/issue-3096-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fissues%2Fissue-3096-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fissues%2Fissue-3096-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3096-2.stderr?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -4,7 +4,7 @@ error[E0004]: non-exhaustive patterns: type *const bottom is non-empty\n LL |     match x { } //~ ERROR non-exhaustive patterns\n    |           ^\n    |\n-help: Please ensure that all possible cases are being handled; possibly adding wildcards or more match arms.\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n   --> $DIR/issue-3096-2.rs:15:11\n    |\n LL |     match x { } //~ ERROR non-exhaustive patterns"}, {"sha": "e4531072e9be42c3e6735619de0023e96e6a2564", "filename": "src/test/ui/issues/issue-31076.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fissues%2Fissue-31076.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fissues%2Fissue-31076.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31076.rs?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -0,0 +1,17 @@\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+\n+#[lang=\"sized\"]\n+trait Sized {}\n+\n+#[lang=\"add\"]\n+trait Add<T> {}\n+\n+impl Add<i32> for i32 {}\n+\n+fn main() {\n+    let x = 5 + 6;\n+    //~^ ERROR binary operation `+` cannot be applied to type `{integer}`\n+    let y = 5i32 + 6i32;\n+    //~^ ERROR binary operation `+` cannot be applied to type `i32`\n+}"}, {"sha": "3a13f02d9f45f34fd72086513bdf56319ba7a578", "filename": "src/test/ui/issues/issue-31076.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fissues%2Fissue-31076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fissues%2Fissue-31076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31076.stderr?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -0,0 +1,19 @@\n+error[E0369]: binary operation `+` cannot be applied to type `{integer}`\n+  --> $DIR/issue-31076.rs:13:13\n+   |\n+LL |     let x = 5 + 6;\n+   |             ^^^^^\n+   |\n+   = note: an implementation of `std::ops::Add` might be missing for `{integer}`\n+\n+error[E0369]: binary operation `+` cannot be applied to type `i32`\n+  --> $DIR/issue-31076.rs:15:13\n+   |\n+LL |     let y = 5i32 + 6i32;\n+   |             ^^^^^^^^^^^\n+   |\n+   = note: an implementation of `std::ops::Add` might be missing for `i32`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0369`."}, {"sha": "2165d951102c2d565f16a9842380c9c126e6c374", "filename": "src/test/ui/issues/issue-52126-assign-op-invariance.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fissues%2Fissue-52126-assign-op-invariance.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fissues%2Fissue-52126-assign-op-invariance.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52126-assign-op-invariance.nll.stderr?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -3,9 +3,9 @@ error[E0597]: `line` does not live long enough\n    |\n LL |         let v: Vec<&str> = line.split_whitespace().collect();\n    |                            ^^^^ borrowed value does not live long enough\n-LL |         //~^ ERROR `line` does not live long enough\n-LL |         println!(\"accumulator before add_assign {:?}\", acc.map);\n-   |                                                        ------- borrow used here, in later iteration of loop\n+...\n+LL |         acc += cnt2;\n+   |         --- borrow used here, in later iteration of loop\n ...\n LL |     }\n    |     - `line` dropped here while still borrowed"}, {"sha": "1a353f9ea7cd37f56f558122116009f3818fe7e4", "filename": "src/test/ui/issues/issue-52126-assign-op-invariance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fissues%2Fissue-52126-assign-op-invariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fissues%2Fissue-52126-assign-op-invariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52126-assign-op-invariance.rs?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -43,7 +43,7 @@ pub fn panics() {\n     for line in vec![\"123456789\".to_string(), \"12345678\".to_string()] {\n         let v: Vec<&str> = line.split_whitespace().collect();\n         //~^ ERROR `line` does not live long enough\n-        println!(\"accumulator before add_assign {:?}\", acc.map);\n+        // println!(\"accumulator before add_assign {:?}\", acc.map);\n         let mut map = HashMap::new();\n         for str_ref in v {\n             let e = map.entry(str_ref);\n@@ -53,7 +53,7 @@ pub fn panics() {\n         }\n         let cnt2 = Counter{map};\n         acc += cnt2;\n-        println!(\"accumulator after add_assign {:?}\", acc.map);\n+        // println!(\"accumulator after add_assign {:?}\", acc.map);\n         // line gets dropped here but references are kept in acc.map\n     }\n }"}, {"sha": "fabfba94878f520548230e5db2c5b80fd808f10c", "filename": "src/test/ui/panic-implementation/panic-implementation-deprecated.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/24e66c28980442a48d9458f1a4f9b76cc722dc8a/src%2Ftest%2Fui%2Fpanic-implementation%2Fpanic-implementation-deprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24e66c28980442a48d9458f1a4f9b76cc722dc8a/src%2Ftest%2Fui%2Fpanic-implementation%2Fpanic-implementation-deprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-implementation%2Fpanic-implementation-deprecated.stderr?ref=24e66c28980442a48d9458f1a4f9b76cc722dc8a", "patch": "@@ -1,14 +0,0 @@\n-error: use of deprecated attribute `panic_implementation`: this attribute was renamed to `panic_handler`. See https://github.com/rust-lang/rust/issues/44489#issuecomment-415140224\n-  --> $DIR/panic-implementation-deprecated.rs:19:1\n-   |\n-LL | #[panic_implementation]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^ help: replace this attribute with `#[panic_handler]`\n-   |\n-note: lint level defined here\n-  --> $DIR/panic-implementation-deprecated.rs:13:9\n-   |\n-LL | #![deny(deprecated)]\n-   |         ^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "389a1116c163ace63616dedc196c9467c8334fd9", "filename": "src/test/ui/span/borrowck-borrow-overloaded-auto-deref-mut.nll.stderr", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.nll.stderr?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -14,6 +14,16 @@ LL | fn deref_extend_mut_field1(x: &Own<Point>) -> &mut isize {\n LL |     &mut x.y //~ ERROR cannot borrow\n    |          ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n+error[E0499]: cannot borrow `*x` as mutable more than once at a time\n+  --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:88:19\n+   |\n+LL |     let _x = &mut x.x;\n+   |                   - first mutable borrow occurs here\n+LL |     let _y = &mut x.y; //~ ERROR cannot borrow\n+   |                   ^ second mutable borrow occurs here\n+LL |     use_mut(_x);\n+   |             -- first borrow later used here\n+\n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:98:5\n    |\n@@ -30,6 +40,16 @@ LL | fn assign_field2<'a>(x: &'a Own<Point>) {\n LL |     x.y = 3; //~ ERROR cannot borrow\n    |     ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n+error[E0499]: cannot borrow `*x` as mutable more than once at a time\n+  --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:111:5\n+   |\n+LL |     let _p: &mut Point = &mut **x;\n+   |                                -- first mutable borrow occurs here\n+LL |     x.y = 3; //~ ERROR cannot borrow\n+   |     ^ second mutable borrow occurs here\n+LL |     use_mut(_p);\n+   |             -- first borrow later used here\n+\n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:119:5\n    |\n@@ -62,6 +82,7 @@ LL | fn assign_method2<'a>(x: &'a Own<Point>) {\n LL |     *x.y_mut() = 3; //~ ERROR cannot borrow\n    |      ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 10 previous errors\n \n-For more information about this error, try `rustc --explain E0596`.\n+Some errors occurred: E0499, E0596.\n+For more information about an error, try `rustc --explain E0499`."}, {"sha": "48eb2e239f7cdc6a46ff85170949b339c8ed6128", "filename": "src/test/ui/span/borrowck-borrow-overloaded-auto-deref-mut.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.rs?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -86,8 +86,8 @@ fn deref_extend_mut_field3(x: &mut Own<Point>) {\n \n     let _x = &mut x.x;\n     let _y = &mut x.y; //~ ERROR cannot borrow\n+    use_mut(_x);\n }\n-\n fn deref_extend_mut_field4<'a>(x: &'a mut Own<Point>) {\n     let p = &mut **x;\n     let _x = &mut p.x;\n@@ -109,8 +109,8 @@ fn assign_field3<'a>(x: &'a mut Own<Point>) {\n fn assign_field4<'a>(x: &'a mut Own<Point>) {\n     let _p: &mut Point = &mut **x;\n     x.y = 3; //~ ERROR cannot borrow\n+    use_mut(_p);\n }\n-\n fn deref_imm_method(x: Own<Point>) {\n     let __isize = x.get();\n }\n@@ -148,3 +148,5 @@ fn assign_method3<'a>(x: &'a mut Own<Point>) {\n }\n \n pub fn main() {}\n+\n+fn use_mut<T>(_: &mut T) {}"}, {"sha": "864357fee9f0cbbb59ac9bb328e3ee10c920dda4", "filename": "src/test/ui/span/borrowck-borrow-overloaded-auto-deref-mut.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -21,6 +21,7 @@ LL |     let _x = &mut x.x;\n    |                   - first mutable borrow occurs here\n LL |     let _y = &mut x.y; //~ ERROR cannot borrow\n    |                   ^ second mutable borrow occurs here\n+LL |     use_mut(_x);\n LL | }\n    | - first borrow ends here\n \n@@ -47,6 +48,7 @@ LL |     let _p: &mut Point = &mut **x;\n    |                                -- first mutable borrow occurs here\n LL |     x.y = 3; //~ ERROR cannot borrow\n    |     ^ second mutable borrow occurs here\n+LL |     use_mut(_p);\n LL | }\n    | - first borrow ends here\n "}, {"sha": "83fd736a997a98ff686b277e885c5afd6f7b9974", "filename": "src/test/ui/uninhabited/uninhabited-matches-feature-gated.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -10,7 +10,7 @@ error[E0004]: non-exhaustive patterns: type &Void is non-empty\n LL |     let _ = match x {}; //~ ERROR non-exhaustive\n    |                   ^\n    |\n-help: Please ensure that all possible cases are being handled; possibly adding wildcards or more match arms.\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n   --> $DIR/uninhabited-matches-feature-gated.rs:20:19\n    |\n LL |     let _ = match x {}; //~ ERROR non-exhaustive\n@@ -22,7 +22,7 @@ error[E0004]: non-exhaustive patterns: type (Void,) is non-empty\n LL |     let _ = match x {}; //~ ERROR non-exhaustive\n    |                   ^\n    |\n-help: Please ensure that all possible cases are being handled; possibly adding wildcards or more match arms.\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n   --> $DIR/uninhabited-matches-feature-gated.rs:23:19\n    |\n LL |     let _ = match x {}; //~ ERROR non-exhaustive\n@@ -34,7 +34,7 @@ error[E0004]: non-exhaustive patterns: type [Void; 1] is non-empty\n LL |     let _ = match x {}; //~ ERROR non-exhaustive\n    |                   ^\n    |\n-help: Please ensure that all possible cases are being handled; possibly adding wildcards or more match arms.\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n   --> $DIR/uninhabited-matches-feature-gated.rs:26:19\n    |\n LL |     let _ = match x {}; //~ ERROR non-exhaustive"}, {"sha": "6b18aff9f6b830caa18e310f006a2a0832d78c69", "filename": "src/test/ui/union/union-borrow-move-parent-sibling.nll.stderr", "status": "modified", "additions": 39, "deletions": 8, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.nll.stderr?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -1,33 +1,64 @@\n+error[E0502]: cannot borrow `u.y` as immutable because it is also borrowed as mutable\n+  --> $DIR/union-borrow-move-parent-sibling.rs:25:13\n+   |\n+LL |     let a = &mut u.x.0;\n+   |             ---------- mutable borrow occurs here\n+LL |     let b = &u.y; //~ ERROR cannot borrow `u.y`\n+   |             ^^^^ immutable borrow occurs here\n+LL |     use_borrow(a);\n+   |                - mutable borrow later used here\n+\n error[E0382]: use of moved value: `u`\n-  --> $DIR/union-borrow-move-parent-sibling.rs:29:13\n+  --> $DIR/union-borrow-move-parent-sibling.rs:32:13\n    |\n LL |     let a = u.x.0;\n    |             ----- value moved here\n-LL |     let a = u.y; //~ ERROR use of moved value: `u.y`\n+LL |     let b = u.y; //~ ERROR use of moved value: `u.y`\n    |             ^^^ value used here after move\n    |\n    = note: move occurs because `u` has type `U`, which does not implement the `Copy` trait\n \n+error[E0502]: cannot borrow `u.y` as immutable because it is also borrowed as mutable\n+  --> $DIR/union-borrow-move-parent-sibling.rs:38:13\n+   |\n+LL |     let a = &mut (u.x.0).0;\n+   |             -------------- mutable borrow occurs here\n+LL |     let b = &u.y; //~ ERROR cannot borrow `u.y`\n+   |             ^^^^ immutable borrow occurs here\n+LL |     use_borrow(a);\n+   |                - mutable borrow later used here\n+\n error[E0382]: use of moved value: `u`\n-  --> $DIR/union-borrow-move-parent-sibling.rs:41:13\n+  --> $DIR/union-borrow-move-parent-sibling.rs:45:13\n    |\n LL |     let a = (u.x.0).0;\n    |             --------- value moved here\n-LL |     let a = u.y; //~ ERROR use of moved value: `u.y`\n+LL |     let b = u.y; //~ ERROR use of moved value: `u.y`\n    |             ^^^ value used here after move\n    |\n    = note: move occurs because `u` has type `U`, which does not implement the `Copy` trait\n \n+error[E0502]: cannot borrow `u.x` as immutable because it is also borrowed as mutable\n+  --> $DIR/union-borrow-move-parent-sibling.rs:51:13\n+   |\n+LL |     let a = &mut *u.y;\n+   |             --------- mutable borrow occurs here\n+LL |     let b = &u.x; //~ ERROR cannot borrow `u` (via `u.x`)\n+   |             ^^^^ immutable borrow occurs here\n+LL |     use_borrow(a);\n+   |                - mutable borrow later used here\n+\n error[E0382]: use of moved value: `u`\n-  --> $DIR/union-borrow-move-parent-sibling.rs:53:13\n+  --> $DIR/union-borrow-move-parent-sibling.rs:58:13\n    |\n LL |     let a = *u.y;\n    |             ---- value moved here\n-LL |     let a = u.x; //~ ERROR use of moved value: `u.x`\n+LL |     let b = u.x; //~ ERROR use of moved value: `u.x`\n    |             ^^^ value used here after move\n    |\n    = note: move occurs because `u` has type `U`, which does not implement the `Copy` trait\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0382`.\n+Some errors occurred: E0382, E0502.\n+For more information about an error, try `rustc --explain E0382`."}, {"sha": "99a073b838ca91482e91eff5f9ad4174e8acd929", "filename": "src/test/ui/union/union-borrow-move-parent-sibling.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.rs?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -17,40 +17,45 @@ union U {\n     y: Box<Vec<u8>>,\n }\n \n+fn use_borrow<T>(_: &T) {}\n+\n unsafe fn parent_sibling_borrow() {\n     let mut u = U { x: ((Vec::new(), Vec::new()), Vec::new()) };\n     let a = &mut u.x.0;\n-    let a = &u.y; //~ ERROR cannot borrow `u.y`\n+    let b = &u.y; //~ ERROR cannot borrow `u.y`\n+    use_borrow(a);\n }\n \n unsafe fn parent_sibling_move() {\n     let u = U { x: ((Vec::new(), Vec::new()), Vec::new()) };\n     let a = u.x.0;\n-    let a = u.y; //~ ERROR use of moved value: `u.y`\n+    let b = u.y; //~ ERROR use of moved value: `u.y`\n }\n \n unsafe fn grandparent_sibling_borrow() {\n     let mut u = U { x: ((Vec::new(), Vec::new()), Vec::new()) };\n     let a = &mut (u.x.0).0;\n-    let a = &u.y; //~ ERROR cannot borrow `u.y`\n+    let b = &u.y; //~ ERROR cannot borrow `u.y`\n+    use_borrow(a);\n }\n \n unsafe fn grandparent_sibling_move() {\n     let u = U { x: ((Vec::new(), Vec::new()), Vec::new()) };\n     let a = (u.x.0).0;\n-    let a = u.y; //~ ERROR use of moved value: `u.y`\n+    let b = u.y; //~ ERROR use of moved value: `u.y`\n }\n \n unsafe fn deref_sibling_borrow() {\n     let mut u = U { y: Box::default() };\n     let a = &mut *u.y;\n-    let a = &u.x; //~ ERROR cannot borrow `u` (via `u.x`)\n+    let b = &u.x; //~ ERROR cannot borrow `u` (via `u.x`)\n+    use_borrow(a);\n }\n \n unsafe fn deref_sibling_move() {\n     let u = U { x: ((Vec::new(), Vec::new()), Vec::new()) };\n     let a = *u.y;\n-    let a = u.x; //~ ERROR use of moved value: `u.x`\n+    let b = u.x; //~ ERROR use of moved value: `u.x`\n }\n \n "}, {"sha": "daf5a4f4fccaa4262b9dcf91fb22352e6118cf4b", "filename": "src/test/ui/union/union-borrow-move-parent-sibling.stderr", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.stderr?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -1,59 +1,62 @@\n error[E0502]: cannot borrow `u.y` as immutable because `u.x.0` is also borrowed as mutable\n-  --> $DIR/union-borrow-move-parent-sibling.rs:23:14\n+  --> $DIR/union-borrow-move-parent-sibling.rs:25:14\n    |\n LL |     let a = &mut u.x.0;\n    |                  ----- mutable borrow occurs here\n-LL |     let a = &u.y; //~ ERROR cannot borrow `u.y`\n+LL |     let b = &u.y; //~ ERROR cannot borrow `u.y`\n    |              ^^^ immutable borrow occurs here\n+LL |     use_borrow(a);\n LL | }\n    | - mutable borrow ends here\n \n error[E0382]: use of moved value: `u.y`\n-  --> $DIR/union-borrow-move-parent-sibling.rs:29:9\n+  --> $DIR/union-borrow-move-parent-sibling.rs:32:9\n    |\n LL |     let a = u.x.0;\n    |         - value moved here\n-LL |     let a = u.y; //~ ERROR use of moved value: `u.y`\n+LL |     let b = u.y; //~ ERROR use of moved value: `u.y`\n    |         ^ value used here after move\n    |\n    = note: move occurs because `u.y` has type `[type error]`, which does not implement the `Copy` trait\n \n error[E0502]: cannot borrow `u.y` as immutable because `u.x.0.0` is also borrowed as mutable\n-  --> $DIR/union-borrow-move-parent-sibling.rs:35:14\n+  --> $DIR/union-borrow-move-parent-sibling.rs:38:14\n    |\n LL |     let a = &mut (u.x.0).0;\n    |                  --------- mutable borrow occurs here\n-LL |     let a = &u.y; //~ ERROR cannot borrow `u.y`\n+LL |     let b = &u.y; //~ ERROR cannot borrow `u.y`\n    |              ^^^ immutable borrow occurs here\n+LL |     use_borrow(a);\n LL | }\n    | - mutable borrow ends here\n \n error[E0382]: use of moved value: `u.y`\n-  --> $DIR/union-borrow-move-parent-sibling.rs:41:9\n+  --> $DIR/union-borrow-move-parent-sibling.rs:45:9\n    |\n LL |     let a = (u.x.0).0;\n    |         - value moved here\n-LL |     let a = u.y; //~ ERROR use of moved value: `u.y`\n+LL |     let b = u.y; //~ ERROR use of moved value: `u.y`\n    |         ^ value used here after move\n    |\n    = note: move occurs because `u.y` has type `[type error]`, which does not implement the `Copy` trait\n \n error[E0502]: cannot borrow `u` (via `u.x`) as immutable because `u` is also borrowed as mutable (via `*u.y`)\n-  --> $DIR/union-borrow-move-parent-sibling.rs:47:14\n+  --> $DIR/union-borrow-move-parent-sibling.rs:51:14\n    |\n LL |     let a = &mut *u.y;\n    |                  ---- mutable borrow occurs here (via `*u.y`)\n-LL |     let a = &u.x; //~ ERROR cannot borrow `u` (via `u.x`)\n+LL |     let b = &u.x; //~ ERROR cannot borrow `u` (via `u.x`)\n    |              ^^^ immutable borrow occurs here (via `u.x`)\n+LL |     use_borrow(a);\n LL | }\n    | - mutable borrow ends here\n \n error[E0382]: use of moved value: `u.x`\n-  --> $DIR/union-borrow-move-parent-sibling.rs:53:9\n+  --> $DIR/union-borrow-move-parent-sibling.rs:58:9\n    |\n LL |     let a = *u.y;\n    |         - value moved here\n-LL |     let a = u.x; //~ ERROR use of moved value: `u.x`\n+LL |     let b = u.x; //~ ERROR use of moved value: `u.x`\n    |         ^ value used here after move\n    |\n    = note: move occurs because `u.x` has type `[type error]`, which does not implement the `Copy` trait"}, {"sha": "bfc7736b2f32cd7f66b59646931677c257b303ac", "filename": "src/test/ui/unop-move-semantics.nll.stderr", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Funop-move-semantics.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Funop-move-semantics.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funop-move-semantics.nll.stderr?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -9,6 +9,29 @@ LL |     x.clone();  //~ ERROR: use of moved value\n    |\n    = note: move occurs because `x` has type `T`, which does not implement the `Copy` trait\n \n+error[E0505]: cannot move out of `x` because it is borrowed\n+  --> $DIR/unop-move-semantics.rs:25:6\n+   |\n+LL |     let m = &x;\n+   |             -- borrow of `x` occurs here\n+...\n+LL |     !x;  //~ ERROR: cannot move out of `x` because it is borrowed\n+   |      ^ move out of `x` occurs here\n+...\n+LL |     use_mut(n); use_imm(m);\n+   |                         - borrow later used here\n+\n+error[E0505]: cannot move out of `y` because it is borrowed\n+  --> $DIR/unop-move-semantics.rs:27:6\n+   |\n+LL |     let n = &mut y;\n+   |             ------ borrow of `y` occurs here\n+...\n+LL |     !y;  //~ ERROR: cannot move out of `y` because it is borrowed\n+   |      ^ move out of `y` occurs here\n+LL |     use_mut(n); use_imm(m);\n+   |             - borrow later used here\n+\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/unop-move-semantics.rs:34:6\n    |\n@@ -21,7 +44,7 @@ error[E0507]: cannot move out of borrowed content\n LL |     !*n;  //~ ERROR: cannot move out of borrowed content\n    |      ^^ cannot move out of borrowed content\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 5 previous errors\n \n-Some errors occurred: E0382, E0507.\n+Some errors occurred: E0382, E0505, E0507.\n For more information about an error, try `rustc --explain E0382`."}, {"sha": "fcbbe546a316446deedae6db6d929515cbcab52b", "filename": "src/test/ui/unop-move-semantics.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Funop-move-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90aab7aa9bb5834b340eaef0326994e5e09b933/src%2Ftest%2Fui%2Funop-move-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funop-move-semantics.rs?ref=f90aab7aa9bb5834b340eaef0326994e5e09b933", "patch": "@@ -25,15 +25,18 @@ fn move_borrowed<T: Not<Output=T>>(x: T, mut y: T) {\n     !x;  //~ ERROR: cannot move out of `x` because it is borrowed\n \n     !y;  //~ ERROR: cannot move out of `y` because it is borrowed\n+    use_mut(n); use_imm(m);\n }\n-\n fn illegal_dereference<T: Not<Output=T>>(mut x: T, y: T) {\n     let m = &mut x;\n     let n = &y;\n \n     !*m;  //~ ERROR: cannot move out of borrowed content\n \n     !*n;  //~ ERROR: cannot move out of borrowed content\n+    use_imm(n); use_mut(m);\n }\n-\n fn main() {}\n+\n+fn use_mut<T>(_: &mut T) { }\n+fn use_imm<T>(_: &T) { }"}]}