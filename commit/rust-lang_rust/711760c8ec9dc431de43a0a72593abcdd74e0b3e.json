{"sha": "711760c8ec9dc431de43a0a72593abcdd74e0b3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMTc2MGM4ZWM5ZGM0MzFkZTQzYTBhNzI1OTNhYmNkZDc0ZTBiM2U=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-09-23T00:35:03Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-10-09T21:44:24Z"}, "message": "Point out why a trait is expected on `Struct + 'lt`", "tree": {"sha": "e4a24a34202f8be633420344d75ca63eb5707016", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4a24a34202f8be633420344d75ca63eb5707016"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/711760c8ec9dc431de43a0a72593abcdd74e0b3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/711760c8ec9dc431de43a0a72593abcdd74e0b3e", "html_url": "https://github.com/rust-lang/rust/commit/711760c8ec9dc431de43a0a72593abcdd74e0b3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/711760c8ec9dc431de43a0a72593abcdd74e0b3e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ddef544fa26c5535376fa424baf30cb985f7cb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ddef544fa26c5535376fa424baf30cb985f7cb1", "html_url": "https://github.com/rust-lang/rust/commit/5ddef544fa26c5535376fa424baf30cb985f7cb1"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "cfaf59e8feb0b03a54fa8620a7e616aafe1e3759", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/711760c8ec9dc431de43a0a72593abcdd74e0b3e/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/711760c8ec9dc431de43a0a72593abcdd74e0b3e/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=711760c8ec9dc431de43a0a72593abcdd74e0b3e", "patch": "@@ -384,6 +384,8 @@ struct DiagnosticMetadata<'ast> {\n \n     /// Used to detect possible `if let` written without `let` and to provide structured suggestion.\n     in_if_condition: Option<&'ast Expr>,\n+\n+    current_trait_object: Option<&'ast [ast::GenericBound]>,\n }\n \n struct LateResolutionVisitor<'a, 'b, 'ast> {\n@@ -453,6 +455,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n         self.diagnostic_metadata.current_let_binding = original;\n     }\n     fn visit_ty(&mut self, ty: &'ast Ty) {\n+        let prev = self.diagnostic_metadata.current_trait_object;\n         match ty.kind {\n             TyKind::Path(ref qself, ref path) => {\n                 self.smart_resolve_path(ty.id, qself.as_ref(), path, PathSource::Type);\n@@ -464,9 +467,13 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                     .map_or(Res::Err, |d| d.res());\n                 self.r.record_partial_res(ty.id, PartialRes::new(res));\n             }\n+            TyKind::TraitObject(ref bounds, ..) => {\n+                self.diagnostic_metadata.current_trait_object = Some(&bounds[..]);\n+            }\n             _ => (),\n         }\n         visit::walk_ty(self, ty);\n+        self.diagnostic_metadata.current_trait_object = prev;\n     }\n     fn visit_poly_trait_ref(&mut self, tref: &'ast PolyTraitRef, m: &'ast TraitBoundModifier) {\n         self.smart_resolve_path("}, {"sha": "a3948cc00d6f85bfc2a21129a6150404471b7cb0", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/711760c8ec9dc431de43a0a72593abcdd74e0b3e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/711760c8ec9dc431de43a0a72593abcdd74e0b3e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=711760c8ec9dc431de43a0a72593abcdd74e0b3e", "patch": "@@ -1,6 +1,6 @@\n use crate::diagnostics::{ImportSuggestion, LabelSuggestion, TypoSuggestion};\n use crate::late::lifetimes::{ElisionFailureInfo, LifetimeContext};\n-use crate::late::{LateResolutionVisitor, RibKind};\n+use crate::late::{AliasPossibility, LateResolutionVisitor, RibKind};\n use crate::path_names_to_string;\n use crate::{CrateLint, Module, ModuleKind, ModuleOrUniformRoot};\n use crate::{PathResult, PathSource, Segment};\n@@ -445,6 +445,15 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             // Fallback label.\n             err.span_label(base_span, fallback_label);\n \n+            if let PathSource::Trait(AliasPossibility::Maybe) = source {\n+                if let Some([start, .., end]) = self.diagnostic_metadata.current_trait_object {\n+                    err.span_help(\n+                        start.span().to(end.span()),\n+                        \"`+` can be used to constrain a \\\"trait object\\\" type with lifetimes or \\\n+                         auto-traits, structs and enums can't be bound in that way\",\n+                    );\n+                }\n+            }\n             match self.diagnostic_metadata.current_let_binding {\n                 Some((pat_sp, Some(ty_sp), None)) if ty_sp.contains(base_span) && could_be_expr => {\n                     err.span_suggestion_short("}, {"sha": "3d338ef3736c4a6b4e01ebfa137fa2cab65bcd9b", "filename": "src/test/ui/traits/trait-bounds-not-on-struct.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/711760c8ec9dc431de43a0a72593abcdd74e0b3e/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/711760c8ec9dc431de43a0a72593abcdd74e0b3e/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-struct.stderr?ref=711760c8ec9dc431de43a0a72593abcdd74e0b3e", "patch": "@@ -3,6 +3,12 @@ error[E0404]: expected trait, found struct `Foo`\n    |\n LL | fn foo(_x: Box<Foo + Send>) { }\n    |                ^^^ not a trait\n+   |\n+help: `+` can be used to constrain a \"trait object\" type with lifetimes or auto-traits, structs and enums can't be bound in that way\n+  --> $DIR/trait-bounds-not-on-struct.rs:5:16\n+   |\n+LL | fn foo(_x: Box<Foo + Send>) { }\n+   |                ^^^^^^^^^^\n \n error[E0404]: expected trait, found struct `Vec`\n   --> $DIR/trait-bounds-not-on-struct.rs:7:21"}]}