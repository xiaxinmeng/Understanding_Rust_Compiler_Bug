{"sha": "b78b749810f4ed53e8287adfb284f9f32f16b73c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3OGI3NDk4MTBmNGVkNTNlODI4N2FkZmIyODRmOWYzMmYxNmI3M2M=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-20T02:56:33Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-24T04:51:56Z"}, "message": "Remove all ToStr impls, add Show impls\n\nThis commit changes the ToStr trait to:\n\n    impl<T: fmt::Show> ToStr for T {\n        fn to_str(&self) -> ~str { format!(\"{}\", *self) }\n    }\n\nThe ToStr trait has been on the chopping block for quite awhile now, and this is\nthe final nail in its coffin. The trait and the corresponding method are not\nbeing removed as part of this commit, but rather any implementations of the\n`ToStr` trait are being forbidden because of the generic impl. The new way to\nget the `to_str()` method to work is to implement `fmt::Show`.\n\nFormatting into a `&mut Writer` (as `format!` does) is much more efficient than\n`ToStr` when building up large strings. The `ToStr` trait forces many\nintermediate allocations to be made while the `fmt::Show` trait allows\nincremental buildup in the same heap allocated buffer. Additionally, the\n`fmt::Show` trait is much more extensible in terms of interoperation with other\n`Writer` instances and in more situations. By design the `ToStr` trait requires\nat least one allocation whereas the `fmt::Show` trait does not require any\nallocations.\n\nCloses #8242\nCloses #9806", "tree": {"sha": "0894e97a61d0ab09dd42d73202aeefca175463eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0894e97a61d0ab09dd42d73202aeefca175463eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b78b749810f4ed53e8287adfb284f9f32f16b73c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b78b749810f4ed53e8287adfb284f9f32f16b73c", "html_url": "https://github.com/rust-lang/rust/commit/b78b749810f4ed53e8287adfb284f9f32f16b73c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b78b749810f4ed53e8287adfb284f9f32f16b73c/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cc6b5e0a3a2038d66301906f76cdb778304a3bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cc6b5e0a3a2038d66301906f76cdb778304a3bd", "html_url": "https://github.com/rust-lang/rust/commit/7cc6b5e0a3a2038d66301906f76cdb778304a3bd"}], "stats": {"total": 1015, "additions": 411, "deletions": 604}, "files": [{"sha": "c2469e0c171f846d3d388170e45edb670d0e7ebb", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -2519,7 +2519,7 @@ of type `ABC` can be randomly generated and converted to a string:\n #[deriving(Eq)]\n struct Circle { radius: f64 }\n \n-#[deriving(Rand, ToStr)]\n+#[deriving(Rand, Show)]\n enum ABC { A, B, C }\n ~~~\n "}, {"sha": "cc6a5eda7594f623e848dc4754719783895b2bdb", "filename": "src/libcollections/btree.rs", "status": "modified", "additions": 32, "deletions": 28, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibcollections%2Fbtree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibcollections%2Fbtree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -18,7 +18,8 @@\n ///a length (the height of the tree), and lower and upper bounds on the\n ///number of elements that a given node can contain.\n \n-use std::vec::OwnedVector;\n+use std::fmt;\n+use std::fmt::Show;\n \n #[allow(missing_doc)]\n pub struct BTree<K, V> {\n@@ -106,11 +107,10 @@ impl<K: TotalOrd, V: TotalEq> TotalOrd for BTree<K, V> {\n     }\n }\n \n-impl<K: ToStr + TotalOrd, V: ToStr> ToStr for BTree<K, V> {\n+impl<K: fmt::Show + TotalOrd, V: fmt::Show> fmt::Show for BTree<K, V> {\n     ///Returns a string representation of the BTree\n-    fn to_str(&self) -> ~str {\n-        let ret = self.root.to_str();\n-        ret\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        self.root.fmt(f)\n     }\n }\n \n@@ -235,15 +235,15 @@ impl<K: TotalOrd, V: TotalEq> TotalOrd for Node<K, V> {\n     }\n }\n \n-impl<K: ToStr + TotalOrd, V: ToStr> ToStr for Node<K, V> {\n+impl<K: fmt::Show + TotalOrd, V: fmt::Show> fmt::Show for Node<K, V> {\n     ///Returns a string representation of a Node.\n     ///Will iterate over the Node and show \"Key: x, value: y, child: () // \"\n     ///for all elements in the Node. \"Child\" only exists if the Node contains\n     ///a branch.\n-    fn to_str(&self) -> ~str {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n-            LeafNode(ref leaf) => leaf.to_str(),\n-            BranchNode(ref branch) => branch.to_str()\n+            LeafNode(ref leaf) => leaf.fmt(f),\n+            BranchNode(ref branch) => branch.fmt(f),\n         }\n     }\n }\n@@ -401,10 +401,14 @@ impl<K: TotalOrd, V: TotalEq> TotalOrd for Leaf<K, V> {\n }\n \n \n-impl<K: ToStr + TotalOrd, V: ToStr> ToStr for Leaf<K, V> {\n+impl<K: fmt::Show + TotalOrd, V: fmt::Show> fmt::Show for Leaf<K, V> {\n     ///Returns a string representation of a Leaf.\n-    fn to_str(&self) -> ~str {\n-        self.elts.iter().map(|s| s.to_str()).to_owned_vec().connect(\" // \")\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        for (i, s) in self.elts.iter().enumerate() {\n+            if i != 0 { if_ok!(write!(f.buf, \" // \")) }\n+            if_ok!(write!(f.buf, \"{}\", *s))\n+        }\n+        Ok(())\n     }\n }\n \n@@ -618,13 +622,14 @@ impl<K: TotalOrd, V: TotalEq> TotalOrd for Branch<K, V> {\n     }\n }\n \n-impl<K: ToStr + TotalOrd, V: ToStr> ToStr for Branch<K, V> {\n+impl<K: fmt::Show + TotalOrd, V: fmt::Show> fmt::Show for Branch<K, V> {\n     ///Returns a string representation of a Branch.\n-    fn to_str(&self) -> ~str {\n-        let mut ret = self.elts.iter().map(|s| s.to_str()).to_owned_vec().connect(\" // \");\n-        ret.push_str(\" // \");\n-        ret.push_str(\"rightmost child: (\"+ self.rightmost_child.to_str() +\") \");\n-        ret\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        for (i, s) in self.elts.iter().enumerate() {\n+            if i != 0 { if_ok!(write!(f.buf, \" // \")) }\n+            if_ok!(write!(f.buf, \"{}\", *s))\n+        }\n+        write!(f.buf, \" // rightmost child: ({}) \", *self.rightmost_child)\n     }\n }\n \n@@ -672,11 +677,10 @@ impl<K: TotalOrd, V: TotalEq> TotalOrd for LeafElt<K, V> {\n     }\n }\n \n-impl<K: ToStr + TotalOrd, V: ToStr> ToStr for LeafElt<K, V> {\n+impl<K: fmt::Show + TotalOrd, V: fmt::Show> fmt::Show for LeafElt<K, V> {\n     ///Returns a string representation of a LeafElt.\n-    fn to_str(&self) -> ~str {\n-        format!(\"Key: {}, value: {};\",\n-            self.key.to_str(), self.value.to_str())\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f.buf, \"Key: {}, value: {};\", self.key, self.value)\n     }\n }\n \n@@ -715,12 +719,12 @@ impl<K: TotalOrd, V: TotalEq> TotalOrd for BranchElt<K, V> {\n     }\n }\n \n-impl<K: ToStr + TotalOrd, V: ToStr> ToStr for BranchElt<K, V> {\n-    ///Returns string containing key, value, and child (which should recur to a leaf)\n-    ///Consider changing in future to be more readable.\n-    fn to_str(&self) -> ~str {\n-        format!(\"Key: {}, value: {}, (child: {})\",\n-            self.key.to_str(), self.value.to_str(), self.left.to_str())\n+impl<K: fmt::Show + TotalOrd, V: fmt::Show> fmt::Show for BranchElt<K, V> {\n+    /// Returns string containing key, value, and child (which should recur to a\n+    /// leaf) Consider changing in future to be more readable.\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f.buf, \"Key: {}, value: {}, (child: {})\",\n+               self.key, self.value, *self.left)\n     }\n }\n "}, {"sha": "2bd8cbf03e969e499c5038bafec4f3afe29f48fe", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -15,7 +15,7 @@\n \n use std::num::Bitwise;\n \n-#[deriving(Clone, Eq, Hash, ToStr, Encodable, Decodable)]\n+#[deriving(Clone, Eq, Hash, Show, Encodable, Decodable)]\n /// A specialized Set implementation to use enum types.\n pub struct EnumSet<E> {\n     // We must maintain the invariant that no bits are set"}, {"sha": "877f2b30009707db37f0f342024883d24c62f7cd", "filename": "src/libcollections/hashmap.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhashmap.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -606,10 +606,6 @@ impl<A: fmt::Show + Hash + Eq, B: fmt::Show> fmt::Show for HashMap<A, B> {\n     }\n }\n \n-impl<K: fmt::Show + Hash + Eq, V: fmt::Show> ToStr for HashMap<K, V> {\n-    fn to_str(&self) -> ~str { format!(\"{}\", *self) }\n-}\n-\n /// HashMap iterator\n #[deriving(Clone)]\n pub struct Entries<'a, K, V> {\n@@ -888,10 +884,6 @@ impl<A: fmt::Show + Hash + Eq> fmt::Show for HashSet<A> {\n     }\n }\n \n-impl<A: fmt::Show + Hash + Eq> ToStr for HashSet<A> {\n-    fn to_str(&self) -> ~str { format!(\"{}\", *self) }\n-}\n-\n impl<K: Eq + Hash> FromIterator<K> for HashSet<K> {\n     fn from_iterator<T: Iterator<K>>(iter: &mut T) -> HashSet<K> {\n         let (lower, _) = iter.size_hint();"}, {"sha": "b5e44cda6658757950600319d327b7e826456578", "filename": "src/libcollections/lru_cache.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibcollections%2Flru_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibcollections%2Flru_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flru_cache.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -37,10 +37,11 @@\n //! assert!(cache.get(&2).is_none());\n //! ```\n \n+use std::cast;\n use std::container::Container;\n use std::hash::{Hash, sip};\n+use std::fmt;\n use std::ptr;\n-use std::cast;\n \n use HashMap;\n \n@@ -217,36 +218,32 @@ impl<K: Hash + Eq, V> LruCache<K, V> {\n     }\n }\n \n-impl<A: ToStr + Hash + Eq, B: ToStr> ToStr for LruCache<A, B> {\n+impl<A: fmt::Show + Hash + Eq, B: fmt::Show> fmt::Show for LruCache<A, B> {\n     /// Return a string that lists the key-value pairs from most-recently\n     /// used to least-recently used.\n-    #[inline]\n-    fn to_str(&self) -> ~str {\n-        let mut acc = ~\"{\";\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        if_ok!(write!(f.buf, r\"\\{\"));\n         let mut cur = self.head;\n         for i in range(0, self.len()) {\n-            if i > 0 {\n-                acc.push_str(\", \");\n-            }\n+            if i > 0 { if_ok!(write!(f.buf, \", \")) }\n             unsafe {\n                 cur = (*cur).next;\n                 match (*cur).key {\n                     // should never print nil\n-                    None => acc.push_str(\"nil\"),\n-                    Some(ref k) => acc.push_str(k.to_str())\n+                    None => if_ok!(write!(f.buf, \"nil\")),\n+                    Some(ref k) => if_ok!(write!(f.buf, \"{}\", *k)),\n                 }\n             }\n-            acc.push_str(\": \");\n+            if_ok!(write!(f.buf, \": \"));\n             unsafe {\n                 match (*cur).value {\n                     // should never print nil\n-                    None => acc.push_str(\"nil\"),\n-                    Some(ref value) => acc.push_str(value.to_str())\n+                    None => if_ok!(write!(f.buf, \"nil\")),\n+                    Some(ref value) => if_ok!(write!(f.buf, \"{}\", *value)),\n                 }\n             }\n         }\n-        acc.push_char('}');\n-        acc\n+        write!(f.buf, r\"\\}\")\n     }\n }\n "}, {"sha": "d438b00b992decef80cb13ca8c6325d1734e417e", "filename": "src/libextra/json.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -240,7 +240,7 @@ use std::io;\n use std::io::MemWriter;\n use std::num;\n use std::str;\n-use std::to_str;\n+use std::fmt;\n \n use serialize::Encodable;\n use serialize;\n@@ -1576,18 +1576,16 @@ impl<A:ToJson> ToJson for Option<A> {\n     }\n }\n \n-impl to_str::ToStr for Json {\n+impl fmt::Show for Json {\n     /// Encodes a json value into a string\n-    fn to_str(&self) -> ~str {\n-        let mut s = MemWriter::new();\n-        self.to_writer(&mut s as &mut io::Writer).unwrap();\n-        str::from_utf8_owned(s.unwrap()).unwrap()\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        self.to_writer(f.buf)\n     }\n }\n \n-impl to_str::ToStr for Error {\n-    fn to_str(&self) -> ~str {\n-        format!(\"{}:{}: {}\", self.line, self.col, self.msg)\n+impl fmt::Show for Error {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f.buf, \"{}:{}: {}\", self.line, self.col, self.msg)\n     }\n }\n "}, {"sha": "6e0cd72e3e7c125a05c4bf97f54d3f750e27c810", "filename": "src/libextra/url.rs", "status": "modified", "additions": 71, "deletions": 78, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibextra%2Furl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibextra%2Furl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Furl.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -12,12 +12,14 @@\n \n #[allow(missing_doc)];\n \n-use std::io::BufReader;\n use std::cmp::Eq;\n-use collections::HashMap;\n+use std::fmt;\n use std::hash::{Hash, sip};\n+use std::io::BufReader;\n use std::uint;\n \n+use collections::HashMap;\n+\n /// A Uniform Resource Locator (URL).  A URL is a form of URI (Uniform Resource\n /// Identifier) that includes network location information, such as hostname or\n /// port number.\n@@ -407,10 +409,12 @@ fn split_char_first(s: &str, c: char) -> (~str, ~str) {\n     }\n }\n \n-fn userinfo_to_str(userinfo: &UserInfo) -> ~str {\n-    match userinfo.pass {\n-        Some(ref pass) => format!(\"{}:{}@\", userinfo.user, *pass),\n-        None => format!(\"{}@\", userinfo.user),\n+impl fmt::Show for UserInfo {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match self.pass {\n+            Some(ref pass) => write!(f.buf, \"{}:{}@\", self.user, *pass),\n+            None => write!(f.buf, \"{}@\", self.user),\n+        }\n     }\n }\n \n@@ -437,19 +441,18 @@ fn query_from_str(rawquery: &str) -> Query {\n  * println!(\"{}\", url::query_to_str(&query));  // title=The%20Village&north=52.91&west=4.10\n  * ```\n  */\n+#[allow(unused_must_use)]\n pub fn query_to_str(query: &Query) -> ~str {\n-    let mut strvec = ~[];\n-    for kv in query.iter() {\n-        match kv {\n-            &(ref k, ref v) => {\n-                strvec.push(format!(\"{}={}\",\n-                    encode_component(*k),\n-                    encode_component(*v))\n-                );\n-            }\n-        }\n+    use std::io::MemWriter;\n+    use std::str;\n+\n+    let mut writer = MemWriter::new();\n+    for (i, &(ref k, ref v)) in query.iter().enumerate() {\n+        if i != 0 { write!(&mut writer, \"&\"); }\n+        write!(&mut writer, \"{}={}\", encode_component(*k),\n+               encode_component(*v));\n     }\n-    return strvec.connect(\"&\");\n+    str::from_utf8_lossy(writer.unwrap()).into_owned()\n }\n \n /**\n@@ -784,74 +787,64 @@ impl FromStr for Path {\n     }\n }\n \n-/**\n- * Converts a URL from `Url` to string representation.\n- *\n- * # Arguments\n- *\n- * `url` - a URL.\n- *\n- * # Returns\n- *\n- * A string that contains the formatted URL. Note that this will usually\n- * be an inverse of `from_str` but might strip out unneeded separators;\n- * for example, \"http://somehost.com?\", when parsed and formatted, will\n- * result in just \"http://somehost.com\".\n- */\n-pub fn to_str(url: &Url) -> ~str {\n-    let user = match url.user {\n-        Some(ref user) => userinfo_to_str(user),\n-        None => ~\"\",\n-    };\n-\n-    let authority = if url.host.is_empty() {\n-        // If port is Some, we're in a nonsensical situation. Too bad.\n-        ~\"\"\n-    } else {\n-        match url.port {\n-            Some(ref port) => format!(\"//{}{}:{}\", user, url.host, *port),\n-            None => format!(\"//{}{}\", user, url.host),\n+impl fmt::Show for Url {\n+    /**\n+     * Converts a URL from `Url` to string representation.\n+     *\n+     * # Arguments\n+     *\n+     * `url` - a URL.\n+     *\n+     * # Returns\n+     *\n+     * A string that contains the formatted URL. Note that this will usually\n+     * be an inverse of `from_str` but might strip out unneeded separators;\n+     * for example, \"http://somehost.com?\", when parsed and formatted, will\n+     * result in just \"http://somehost.com\".\n+     */\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        if_ok!(write!(f.buf, \"{}:\", self.scheme));\n+\n+        if !self.host.is_empty() {\n+            if_ok!(write!(f.buf, \"//\"));\n+            match self.user {\n+                Some(ref user) => if_ok!(write!(f.buf, \"{}\", *user)),\n+                None => {}\n+            }\n+            match self.port {\n+                Some(ref port) => if_ok!(write!(f.buf, \"{}:{}\", self.host,\n+                                                *port)),\n+                None => if_ok!(write!(f.buf, \"{}\", self.host)),\n+            }\n         }\n-    };\n-\n-    let query = if url.query.is_empty() {\n-        ~\"\"\n-    } else {\n-        format!(\"?{}\", query_to_str(&url.query))\n-    };\n-\n-    let fragment = match url.fragment {\n-        Some(ref fragment) => format!(\"\\\\#{}\", encode_component(*fragment)),\n-        None => ~\"\",\n-    };\n-\n-    format!(\"{}:{}{}{}{}\", url.scheme, authority, url.path, query, fragment)\n-}\n-\n-pub fn path_to_str(path: &Path) -> ~str {\n-    let query = if path.query.is_empty() {\n-        ~\"\"\n-    } else {\n-        format!(\"?{}\", query_to_str(&path.query))\n-    };\n \n-    let fragment = match path.fragment {\n-        Some(ref fragment) => format!(\"\\\\#{}\", encode_component(*fragment)),\n-        None => ~\"\",\n-    };\n+        if_ok!(write!(f.buf, \"{}\", self.path));\n \n-    format!(\"{}{}{}\", path.path, query, fragment)\n-}\n+        if !self.query.is_empty() {\n+            if_ok!(write!(f.buf, \"?{}\", query_to_str(&self.query)));\n+        }\n \n-impl ToStr for Url {\n-    fn to_str(&self) -> ~str {\n-        to_str(self)\n+        match self.fragment {\n+            Some(ref fragment) => write!(f.buf, \"\\\\#{}\",\n+                                         encode_component(*fragment)),\n+            None => Ok(()),\n+        }\n     }\n }\n \n-impl ToStr for Path {\n-    fn to_str(&self) -> ~str {\n-        path_to_str(self)\n+impl fmt::Show for Path {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        if_ok!(write!(f.buf, \"{}\", self.path));\n+        if !self.query.is_empty() {\n+            if_ok!(write!(f.buf, \"?{}\", self.query))\n+        }\n+\n+        match self.fragment {\n+            Some(ref fragment) => {\n+                write!(f.buf, \"\\\\#{}\", encode_component(*fragment))\n+            }\n+            None => Ok(())\n+        }\n     }\n }\n "}, {"sha": "20594105183a72a134b972866241bef850450e44", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -169,7 +169,7 @@ pub struct Matches {\n /// The type returned when the command line does not conform to the\n /// expected format. Call the `to_err_msg` method to retrieve the\n /// error as a string.\n-#[deriving(Clone, Eq, ToStr)]\n+#[deriving(Clone, Eq, Show)]\n #[allow(missing_doc)]\n pub enum Fail_ {\n     ArgumentMissing(~str),"}, {"sha": "894b3794581e1c6d06e4db439e1cf5b9caa1ae59", "filename": "src/libnum/bigint.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Fbigint.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -19,14 +19,14 @@ A `BigInt` is a combination of `BigUint` and `Sign`.\n use Integer;\n \n use std::cmp;\n-use std::cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Greater};\n-use std::num::{Zero, One, ToStrRadix, FromStrRadix};\n+use std::fmt;\n use std::num::{Bitwise, ToPrimitive, FromPrimitive};\n+use std::num::{Zero, One, ToStrRadix, FromStrRadix};\n use std::rand::Rng;\n use std::str;\n use std::uint;\n-use std::{i64, u64};\n use std::vec;\n+use std::{i64, u64};\n \n /**\n A `BigDigit` is a `BigUint`'s composing element.\n@@ -121,9 +121,10 @@ impl TotalOrd for BigUint {\n     }\n }\n \n-impl ToStr for BigUint {\n-    #[inline]\n-    fn to_str(&self) -> ~str { self.to_str_radix(10) }\n+impl fmt::Show for BigUint {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f.buf, \"{}\", self.to_str_radix(10))\n+    }\n }\n \n impl FromStr for BigUint {\n@@ -904,9 +905,10 @@ impl TotalOrd for BigInt {\n     }\n }\n \n-impl ToStr for BigInt {\n-    #[inline]\n-    fn to_str(&self) -> ~str { self.to_str_radix(10) }\n+impl fmt::Show for BigInt {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f.buf, \"{}\", self.to_str_radix(10))\n+    }\n }\n \n impl FromStr for BigInt {"}, {"sha": "5ffd23aa3462150b01fcadb8951490e5d5553270", "filename": "src/libnum/complex.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibnum%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibnum%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Fcomplex.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -11,6 +11,7 @@\n \n //! Complex numbers.\n \n+use std::fmt;\n use std::num::{Zero,One,ToStrRadix};\n \n // FIXME #1284: handle complex NaN & infinity etc. This\n@@ -167,12 +168,12 @@ impl<T: Clone + Num> One for Cmplx<T> {\n }\n \n /* string conversions */\n-impl<T: ToStr + Num + Ord> ToStr for Cmplx<T> {\n-    fn to_str(&self) -> ~str {\n+impl<T: fmt::Show + Num + Ord> fmt::Show for Cmplx<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         if self.im < Zero::zero() {\n-            format!(\"{}-{}i\", self.re.to_str(), (-self.im).to_str())\n+            write!(f.buf, \"{}-{}i\", self.re, -self.im)\n         } else {\n-            format!(\"{}+{}i\", self.re.to_str(), self.im.to_str())\n+            write!(f.buf, \"{}+{}i\", self.re, self.im)\n         }\n     }\n }"}, {"sha": "44a916c5d4e2263bae25747690f74d743fe89fdb", "filename": "src/libnum/rational.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Frational.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -13,6 +13,7 @@\n use Integer;\n \n use std::cmp;\n+use std::fmt;\n use std::from_str::FromStr;\n use std::num::{Zero,One,ToStrRadix,FromStrRadix,Round};\n use bigint::{BigInt, BigUint, Sign, Plus, Minus};\n@@ -277,10 +278,10 @@ impl<T: Clone + Integer + Ord>\n }\n \n /* String conversions */\n-impl<T: ToStr> ToStr for Ratio<T> {\n+impl<T: fmt::Show> fmt::Show for Ratio<T> {\n     /// Renders as `numer/denom`.\n-    fn to_str(&self) -> ~str {\n-        format!(\"{}/{}\", self.numer.to_str(), self.denom.to_str())\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f.buf, \"{}/{}\", self.numer, self.denom)\n     }\n }\n impl<T: ToStrRadix> ToStrRadix for Ratio<T> {"}, {"sha": "7293c3a3cee0ae4b83408310872ca66cd158f440", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -111,12 +111,12 @@ use middle::moves;\n \n use std::cast::transmute;\n use std::cell::{Cell, RefCell};\n-use collections::HashMap;\n+use std::fmt;\n use std::io;\n use std::str;\n-use std::to_str;\n use std::uint;\n use std::vec;\n+use collections::HashMap;\n use syntax::ast::*;\n use syntax::codemap::Span;\n use syntax::parse::token::special_idents;\n@@ -184,12 +184,16 @@ pub fn check_crate(tcx: ty::ctxt,\n     tcx.sess.abort_if_errors();\n }\n \n-impl to_str::ToStr for LiveNode {\n-    fn to_str(&self) -> ~str { format!(\"ln({})\", self.get()) }\n+impl fmt::Show for LiveNode {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f.buf, \"ln({})\", self.get())\n+    }\n }\n \n-impl to_str::ToStr for Variable {\n-    fn to_str(&self) -> ~str { format!(\"v({})\", self.get()) }\n+impl fmt::Show for Variable {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f.buf, \"v({})\", self.get())\n+    }\n }\n \n // ______________________________________________________________________"}, {"sha": "0882e8eb6926883831379da79efb70a934691247", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -123,7 +123,7 @@ pub enum ElementKind {\n     OtherElement,\n }\n \n-#[deriving(Eq, Hash)]\n+#[deriving(Eq, Hash, Show)]\n pub enum MutabilityCategory {\n     McImmutable, // Immutable.\n     McDeclared,  // Directly declared as mutable.\n@@ -273,12 +273,6 @@ pub trait Typer {\n     fn upvar_borrow(&mut self, upvar_id: ty::UpvarId) -> ty::UpvarBorrow;\n }\n \n-impl ToStr for MutabilityCategory {\n-    fn to_str(&self) -> ~str {\n-        format!(\"{:?}\", *self)\n-    }\n-}\n-\n impl MutabilityCategory {\n     pub fn from_mutbl(m: ast::Mutability) -> MutabilityCategory {\n         match m {"}, {"sha": "b351b5c0cb8a1b97b4087e1f69a89e5a7aa3ffbb", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 51, "deletions": 40, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -33,10 +33,11 @@ use util::common::{indenter};\n use std::cast;\n use std::cell::{Cell, RefCell};\n use std::cmp;\n+use std::fmt::Show;\n+use std::fmt;\n use std::hash::{Hash, sip};\n use std::ops;\n use std::rc::Rc;\n-use std::to_str::ToStr;\n use std::vec;\n use collections::{HashMap, HashSet};\n use syntax::ast::*;\n@@ -128,14 +129,14 @@ pub struct mt {\n     mutbl: ast::Mutability,\n }\n \n-#[deriving(Clone, Eq, Encodable, Decodable, Hash, ToStr)]\n+#[deriving(Clone, Eq, Encodable, Decodable, Hash, Show)]\n pub enum vstore {\n     vstore_fixed(uint),\n     vstore_uniq,\n     vstore_slice(Region)\n }\n \n-#[deriving(Clone, Eq, Hash, Encodable, Decodable, ToStr)]\n+#[deriving(Clone, Eq, Hash, Encodable, Decodable, Show)]\n pub enum TraitStore {\n     UniqTraitStore,             // ~Trait\n     RegionTraitStore(Region),   // &Trait\n@@ -196,7 +197,7 @@ pub struct ItemVariances {\n     region_params: OptVec<Variance>\n }\n \n-#[deriving(Clone, Eq, Decodable, Encodable)]\n+#[deriving(Clone, Eq, Decodable, Encodable, Show)]\n pub enum Variance {\n     Covariant,      // T<A> <: T<B> iff A <: B -- e.g., function return type\n     Invariant,      // T<A> <: T<B> iff B == A -- e.g., type of mutable cell\n@@ -384,11 +385,13 @@ pub struct t_box_ {\n // ~15%.) This does mean that a t value relies on the ctxt to keep its box\n // alive, and using ty::get is unsafe when the ctxt is no longer alive.\n enum t_opaque {}\n-pub type t = *t_opaque;\n \n-impl ToStr for t {\n-    fn to_str(&self) -> ~str {\n-        ~\"*t_opaque\"\n+#[deriving(Clone, Eq, Hash)]\n+pub struct t { priv inner: *t_opaque }\n+\n+impl fmt::Show for t {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.buf.write_str(\"*t_opaque\")\n     }\n }\n \n@@ -458,7 +461,7 @@ pub struct param_ty {\n }\n \n /// Representation of regions:\n-#[deriving(Clone, Eq, Hash, Encodable, Decodable, ToStr, Show)]\n+#[deriving(Clone, Eq, Hash, Encodable, Decodable, Show)]\n pub enum Region {\n     // Region bound in a type or fn declaration which will be\n     // substituted 'early' -- that is, at the same time when type\n@@ -618,13 +621,13 @@ impl Region {\n     }\n }\n \n-#[deriving(Clone, Eq, TotalOrd, TotalEq, Hash, Encodable, Decodable, ToStr, Show)]\n+#[deriving(Clone, Eq, TotalOrd, TotalEq, Hash, Encodable, Decodable, Show)]\n pub struct FreeRegion {\n     scope_id: NodeId,\n     bound_region: BoundRegion\n }\n \n-#[deriving(Clone, Eq, TotalEq, TotalOrd, Hash, Encodable, Decodable, ToStr, Show)]\n+#[deriving(Clone, Eq, TotalEq, TotalOrd, Hash, Encodable, Decodable, Show)]\n pub enum BoundRegion {\n     /// An anonymous region parameter for a given fn (&T)\n     BrAnon(uint),\n@@ -768,22 +771,22 @@ pub enum IntVarValue {\n     UintType(ast::UintTy),\n }\n \n-#[deriving(Clone, ToStr)]\n+#[deriving(Clone, Show)]\n pub enum terr_vstore_kind {\n     terr_vec,\n     terr_str,\n     terr_fn,\n     terr_trait\n }\n \n-#[deriving(Clone, ToStr)]\n+#[deriving(Clone, Show)]\n pub struct expected_found<T> {\n     expected: T,\n     found: T\n }\n \n // Data structures used in type unification\n-#[deriving(Clone, ToStr)]\n+#[deriving(Clone, Show)]\n pub enum type_err {\n     terr_mismatch,\n     terr_purity_mismatch(expected_found<Purity>),\n@@ -826,7 +829,7 @@ pub struct ParamBounds {\n \n pub type BuiltinBounds = EnumSet<BuiltinBound>;\n \n-#[deriving(Clone, Encodable, Eq, Decodable, Hash, ToStr)]\n+#[deriving(Clone, Encodable, Eq, Decodable, Hash, Show)]\n #[repr(uint)]\n pub enum BuiltinBound {\n     BoundStatic,\n@@ -867,7 +870,7 @@ pub struct IntVid(uint);\n #[deriving(Clone, Eq, Hash)]\n pub struct FloatVid(uint);\n \n-#[deriving(Clone, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Eq, Encodable, Decodable, Hash)]\n pub struct RegionVid {\n     id: uint\n }\n@@ -879,7 +882,7 @@ pub enum InferTy {\n     FloatVar(FloatVid)\n }\n \n-#[deriving(Clone, Encodable, Decodable, Hash, ToStr, Show)]\n+#[deriving(Clone, Encodable, Decodable, Hash, Show)]\n pub enum InferRegion {\n     ReVar(RegionVid),\n     ReSkolemized(uint, BoundRegion)\n@@ -910,56 +913,64 @@ impl Vid for TyVid {\n     fn to_uint(&self) -> uint { let TyVid(v) = *self; v }\n }\n \n-impl ToStr for TyVid {\n-    fn to_str(&self) -> ~str { format!(\"<generic \\\\#{}>\", self.to_uint()) }\n+impl fmt::Show for TyVid {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result{\n+        write!(f.buf, \"<generic \\\\#{}>\", self.to_uint())\n+    }\n }\n \n impl Vid for IntVid {\n     fn to_uint(&self) -> uint { let IntVid(v) = *self; v }\n }\n \n-impl ToStr for IntVid {\n-    fn to_str(&self) -> ~str { format!(\"<generic integer \\\\#{}>\", self.to_uint()) }\n+impl fmt::Show for IntVid {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f.buf, \"<generic integer \\\\#{}>\", self.to_uint())\n+    }\n }\n \n impl Vid for FloatVid {\n     fn to_uint(&self) -> uint { let FloatVid(v) = *self; v }\n }\n \n-impl ToStr for FloatVid {\n-    fn to_str(&self) -> ~str { format!(\"<generic float \\\\#{}>\", self.to_uint()) }\n+impl fmt::Show for FloatVid {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f.buf, \"<generic float \\\\#{}>\", self.to_uint())\n+    }\n }\n \n impl Vid for RegionVid {\n     fn to_uint(&self) -> uint { self.id }\n }\n \n-impl ToStr for RegionVid {\n-    fn to_str(&self) -> ~str { format!(\"{:?}\", self.id) }\n+impl fmt::Show for RegionVid {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        self.id.fmt(f)\n+    }\n }\n \n-impl ToStr for FnSig {\n-    fn to_str(&self) -> ~str {\n+impl fmt::Show for FnSig {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         // grr, without tcx not much we can do.\n-        return ~\"(...)\";\n+        write!(f.buf, \"(...)\")\n     }\n }\n \n-impl ToStr for InferTy {\n-    fn to_str(&self) -> ~str {\n+impl fmt::Show for InferTy {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n-            TyVar(ref v) => v.to_str(),\n-            IntVar(ref v) => v.to_str(),\n-            FloatVar(ref v) => v.to_str()\n+            TyVar(ref v) => v.fmt(f),\n+            IntVar(ref v) => v.fmt(f),\n+            FloatVar(ref v) => v.fmt(f),\n         }\n     }\n }\n \n-impl ToStr for IntVarValue {\n-    fn to_str(&self) -> ~str {\n+impl fmt::Show for IntVarValue {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n-            IntType(ref v) => v.to_str(),\n-            UintType(ref v) => v.to_str(),\n+            IntType(ref v) => v.fmt(f),\n+            UintType(ref v) => v.fmt(f),\n         }\n     }\n }\n@@ -2020,9 +2031,9 @@ impl ops::Sub<TypeContents,TypeContents> for TypeContents {\n     }\n }\n \n-impl ToStr for TypeContents {\n-    fn to_str(&self) -> ~str {\n-        format!(\"TypeContents({:t})\", self.bits)\n+impl fmt::Show for TypeContents {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f.buf, \"TypeContents({:t})\", self.bits)\n     }\n }\n "}, {"sha": "bd244b431c20e02823b1fefeb7ce3f47d872893b", "filename": "src/librustc/middle/typeck/variance.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -197,6 +197,7 @@ use arena;\n use arena::Arena;\n use middle::ty;\n use std::vec;\n+use std::fmt;\n use syntax::ast;\n use syntax::ast_util;\n use syntax::opt_vec;\n@@ -235,13 +236,12 @@ enum VarianceTerm<'a> {\n     InferredTerm(InferredIndex),\n }\n \n-impl<'a> ToStr for VarianceTerm<'a> {\n-    fn to_str(&self) -> ~str {\n+impl<'a> fmt::Show for VarianceTerm<'a> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n-            ConstantTerm(c1) => format!(\"{}\", c1.to_str()),\n-            TransformTerm(v1, v2) => format!(\"({} \\u00D7 {})\",\n-                                          v1.to_str(), v2.to_str()),\n-            InferredTerm(id) => format!(\"[{}]\", { let InferredIndex(i) = id; i })\n+            ConstantTerm(c1) => write!(f.buf, \"{}\", c1),\n+            TransformTerm(v1, v2) => write!(f.buf, \"({} \\u00D7 {})\", v1, v2),\n+            InferredTerm(id) => write!(f.buf, \"[{}]\", { let InferredIndex(i) = id; i })\n         }\n     }\n }"}, {"sha": "2f6f6726be681b85f89e4144b745ef43eb421caa", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -976,7 +976,7 @@ impl Clean<Item> for doctree::Static {\n     }\n }\n \n-#[deriving(ToStr, Clone, Encodable, Decodable)]\n+#[deriving(Show, Clone, Encodable, Decodable)]\n pub enum Mutability {\n     Mutable,\n     Immutable,"}, {"sha": "af082544532a793da141fdf048de68fd0507ef3d", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -58,7 +58,7 @@ impl Module {\n     }\n }\n \n-#[deriving(ToStr, Clone, Encodable, Decodable)]\n+#[deriving(Show, Clone, Encodable, Decodable)]\n pub enum StructType {\n     /// A normal struct\n     Plain,"}, {"sha": "9b327dc4ee4128326c07bf078d84bf899fb75293", "filename": "src/librustuv/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibrustuv%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibrustuv%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Flib.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -45,8 +45,9 @@ via `close` and `delete` methods.\n #[cfg(test)] extern crate green;\n \n use std::cast;\n-use std::io;\n+use std::fmt;\n use std::io::IoError;\n+use std::io;\n use std::libc::{c_int, c_void};\n use std::ptr::null;\n use std::ptr;\n@@ -339,9 +340,9 @@ impl UvError {\n     }\n }\n \n-impl ToStr for UvError {\n-    fn to_str(&self) -> ~str {\n-        format!(\"{}: {}\", self.name(), self.desc())\n+impl fmt::Show for UvError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f.buf, \"{}: {}\", self.name(), self.desc())\n     }\n }\n "}, {"sha": "4c596b11ad60979973d6d10ada1c3aae631f9bb0", "filename": "src/libsemver/lib.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibsemver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibsemver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsemver%2Flib.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -38,7 +38,6 @@ use std::cmp;\n use std::fmt;\n use std::fmt::Show;\n use std::option::{Option, Some, None};\n-use std::to_str::ToStr;\n \n /// An identifier in the pre-release or build metadata. If the identifier can\n /// be parsed as a decimal value, it will be represented with `Numeric`.\n@@ -71,13 +70,6 @@ impl fmt::Show for Identifier {\n     }\n }\n \n-impl ToStr for Identifier {\n-    #[inline]\n-    fn to_str(&self) -> ~str {\n-        format!(\"{}\", *self)\n-    }\n-}\n-\n \n /// Represents a version number conforming to the semantic versioning scheme.\n #[deriving(Clone, Eq)]\n@@ -118,13 +110,6 @@ impl fmt::Show for Version {\n     }\n }\n \n-impl ToStr for Version {\n-    #[inline]\n-    fn to_str(&self) -> ~str {\n-        format!(\"{}\", *self)\n-    }\n-}\n-\n impl cmp::Ord for Version {\n     #[inline]\n     fn lt(&self, other: &Version) -> bool {"}, {"sha": "f43c62f6ffc7e5ff1afdcf7f5a9ce60af408bccc", "filename": "src/libserialize/base64.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibserialize%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibserialize%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fbase64.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -10,6 +10,7 @@\n \n //! Base64 binary-to-text encoding\n use std::str;\n+use std::fmt;\n \n /// Available encoding character sets\n pub enum CharacterSet {\n@@ -165,12 +166,12 @@ pub enum FromBase64Error {\n     InvalidBase64Length,\n }\n \n-impl ToStr for FromBase64Error {\n-    fn to_str(&self) -> ~str {\n+impl fmt::Show for FromBase64Error {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             InvalidBase64Character(ch, idx) =>\n-                format!(\"Invalid character '{}' at position {}\", ch, idx),\n-            InvalidBase64Length => ~\"Invalid length\",\n+                write!(f.buf, \"Invalid character '{}' at position {}\", ch, idx),\n+            InvalidBase64Length => write!(f.buf, \"Invalid length\"),\n         }\n     }\n }"}, {"sha": "5ec70773c3fcf68bf45d444f596085546bb6f6f8", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -11,6 +11,7 @@\n //! Hex binary-to-text encoding\n use std::str;\n use std::vec;\n+use std::fmt;\n \n /// A trait for converting a value to hexadecimal encoding\n pub trait ToHex {\n@@ -65,12 +66,12 @@ pub enum FromHexError {\n     InvalidHexLength,\n }\n \n-impl ToStr for FromHexError {\n-    fn to_str(&self) -> ~str {\n+impl fmt::Show for FromHexError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             InvalidHexCharacter(ch, idx) =>\n-                format!(\"Invalid character '{}' at position {}\", ch, idx),\n-            InvalidHexLength => ~\"Invalid input length\",\n+                write!(f.buf, \"Invalid character '{}' at position {}\", ch, idx),\n+            InvalidHexLength => write!(f.buf, \"Invalid input length\"),\n         }\n     }\n }"}, {"sha": "551a34fc87fbd04f4af337c31c1a015688583234", "filename": "src/libstd/any.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibstd%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibstd%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fany.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -24,7 +24,6 @@ use cast::transmute;\n use fmt;\n use option::{Option, Some, None};\n use result::{Result, Ok, Err};\n-use to_str::ToStr;\n use intrinsics::TypeId;\n use intrinsics;\n \n@@ -151,14 +150,6 @@ impl AnyOwnExt for ~Any {\n // Trait implementations\n ///////////////////////////////////////////////////////////////////////////////\n \n-impl ToStr for ~Any {\n-    fn to_str(&self) -> ~str { ~\"~Any\" }\n-}\n-\n-impl<'a> ToStr for &'a Any {\n-    fn to_str(&self) -> ~str { ~\"&Any\" }\n-}\n-\n impl fmt::Show for ~Any {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.pad(\"~Any\")"}, {"sha": "ac24a02c15b2621bb8cf8f61ffe4a32fc094c16d", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -10,7 +10,7 @@\n \n //! Operations on ASCII strings and characters\n \n-use to_str::{ToStr, IntoStr};\n+use to_str::{IntoStr};\n use str;\n use str::Str;\n use str::StrSlice;\n@@ -127,14 +127,6 @@ impl Ascii {\n     }\n }\n \n-impl ToStr for Ascii {\n-    #[inline]\n-    fn to_str(&self) -> ~str {\n-        // self.chr is always a valid utf8 byte, no need for the check\n-        unsafe { str::raw::from_byte(self.chr) }\n-    }\n-}\n-\n impl<'a> fmt::Show for Ascii {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         (self.chr as char).fmt(f)"}, {"sha": "918d42e1bce46e71ee9cd1ff39f967de59c798a7", "filename": "src/libstd/bool.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibstd%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibstd%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbool.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -17,7 +17,6 @@\n //! Implementations of the following traits:\n //!\n //! * `FromStr`\n-//! * `ToStr`\n //! * `Not`\n //! * `Ord`\n //! * `TotalOrd`\n@@ -34,7 +33,6 @@\n \n use option::{None, Option, Some};\n use from_str::FromStr;\n-use to_str::ToStr;\n use num::FromPrimitive;\n \n #[cfg(not(test))] use cmp::{Eq, Ord, TotalOrd, Ordering};\n@@ -179,21 +177,6 @@ impl FromStr for bool {\n     }\n }\n \n-impl ToStr for bool {\n-    /// Convert a `bool` to a string.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```rust\n-    /// assert_eq!(true.to_str(), ~\"true\");\n-    /// assert_eq!(false.to_str(), ~\"false\");\n-    /// ```\n-    #[inline]\n-    fn to_str(&self) -> ~str {\n-        if *self { ~\"true\" } else { ~\"false\" }\n-    }\n-}\n-\n #[cfg(not(test))]\n impl Not<bool> for bool {\n     /// The logical complement of a boolean value."}, {"sha": "ed2a88e644b08e9db01ba0bd445c70cec03ecde5", "filename": "src/libstd/char.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibstd%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibstd%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fchar.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -15,8 +15,6 @@ use option::{None, Option, Some};\n use iter::{Iterator, range_step};\n use str::StrSlice;\n use unicode::{derived_property, property, general_category, decompose};\n-use to_str::ToStr;\n-use str;\n \n #[cfg(test)] use str::OwnedStr;\n \n@@ -344,13 +342,6 @@ pub fn len_utf8_bytes(c: char) -> uint {\n     }\n }\n \n-impl ToStr for char {\n-    #[inline]\n-    fn to_str(&self) -> ~str {\n-        str::from_char(*self)\n-    }\n-}\n-\n #[allow(missing_doc)]\n pub trait Char {\n     fn is_alphabetic(&self) -> bool;\n@@ -556,6 +547,7 @@ fn test_escape_unicode() {\n \n #[test]\n fn test_to_str() {\n+    use to_str::ToStr;\n     let s = 't'.to_str();\n     assert_eq!(s, ~\"t\");\n }"}, {"sha": "5c0838fadca46399843336da4a0edc6e9667515e", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -1055,6 +1055,16 @@ pub fn argumentuint<'a>(s: &'a uint) -> Argument<'a> {\n \n // Implementations of the core formatting traits\n \n+impl<T: Show> Show for @T {\n+    fn fmt(&self, f: &mut Formatter) -> Result { secret_show(&**self, f) }\n+}\n+impl<T: Show> Show for ~T {\n+    fn fmt(&self, f: &mut Formatter) -> Result { secret_show(&**self, f) }\n+}\n+impl<'a, T: Show> Show for &'a T {\n+    fn fmt(&self, f: &mut Formatter) -> Result { secret_show(*self, f) }\n+}\n+\n impl Bool for bool {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         secret_string(&(if *self {\"true\"} else {\"false\"}), f)"}, {"sha": "94d32d6d8f3910f7fc43e0969ef72faea9e9b7e5", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 41, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -188,7 +188,6 @@ use path::Path;\n use result::{Ok, Err, Result};\n use str::{StrSlice, OwnedStr};\n use str;\n-use to_str::ToStr;\n use uint;\n use unstable::finally::try_finally;\n use vec::{OwnedVector, MutableVector, ImmutableVector, OwnedCloneableVector};\n@@ -286,21 +285,7 @@ impl fmt::Show for IoError {\n     }\n }\n \n-// FIXME: #8242 implementing manually because deriving doesn't work for some reason\n-impl ToStr for IoError {\n-    fn to_str(&self) -> ~str {\n-        let mut s = ~\"IoError { kind: \";\n-        s.push_str(self.kind.to_str());\n-        s.push_str(\", desc: \");\n-        s.push_str(self.desc);\n-        s.push_str(\", detail: \");\n-        s.push_str(self.detail.to_str());\n-        s.push_str(\" }\");\n-        s\n-    }\n-}\n-\n-#[deriving(Eq, Clone)]\n+#[deriving(Eq, Clone, Show)]\n pub enum IoErrorKind {\n     OtherIoError,\n     EndOfFile,\n@@ -321,31 +306,6 @@ pub enum IoErrorKind {\n     InvalidInput,\n }\n \n-// FIXME: #8242 implementing manually because deriving doesn't work for some reason\n-impl ToStr for IoErrorKind {\n-    fn to_str(&self) -> ~str {\n-        match *self {\n-            OtherIoError => ~\"OtherIoError\",\n-            EndOfFile => ~\"EndOfFile\",\n-            FileNotFound => ~\"FileNotFound\",\n-            PermissionDenied => ~\"PermissionDenied\",\n-            ConnectionFailed => ~\"ConnectionFailed\",\n-            Closed => ~\"Closed\",\n-            ConnectionRefused => ~\"ConnectionRefused\",\n-            ConnectionReset => ~\"ConnectionReset\",\n-            NotConnected => ~\"NotConnected\",\n-            BrokenPipe => ~\"BrokenPipe\",\n-            PathAlreadyExists => ~\"PathAlreadyExists\",\n-            PathDoesntExist => ~\"PathDoesntExist\",\n-            MismatchedFileTypeForOperation => ~\"MismatchedFileTypeForOperation\",\n-            IoUnavailable => ~\"IoUnavailable\",\n-            ResourceUnavailable => ~\"ResourceUnavailable\",\n-            ConnectionAborted => ~\"ConnectionAborted\",\n-            InvalidInput => ~\"InvalidInput\",\n-        }\n-    }\n-}\n-\n pub trait Reader {\n \n     // Only method which need to get implemented for this trait"}, {"sha": "e4f36764323787f299319e6f177fa0953bb443ad", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n use container::Container;\n+use fmt;\n use from_str::FromStr;\n use iter::Iterator;\n use option::{Option, None, Some};\n use str::StrSlice;\n-use to_str::ToStr;\n use vec::{MutableCloneableVector, ImmutableVector, MutableVector};\n \n pub type Port = u16;\n@@ -24,26 +24,27 @@ pub enum IpAddr {\n     Ipv6Addr(u16, u16, u16, u16, u16, u16, u16, u16)\n }\n \n-impl ToStr for IpAddr {\n-    fn to_str(&self) -> ~str {\n+impl fmt::Show for IpAddr {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             Ipv4Addr(a, b, c, d) =>\n-                format!(\"{}.{}.{}.{}\", a, b, c, d),\n+                write!(fmt.buf, \"{}.{}.{}.{}\", a, b, c, d),\n \n             // Ipv4 Compatible address\n             Ipv6Addr(0, 0, 0, 0, 0, 0, g, h) => {\n-                format!(\"::{}.{}.{}.{}\", (g >> 8) as u8, g as u8,\n-                        (h >> 8) as u8, h as u8)\n+                write!(fmt.buf, \"::{}.{}.{}.{}\", (g >> 8) as u8, g as u8,\n+                       (h >> 8) as u8, h as u8)\n             }\n \n             // Ipv4-Mapped address\n             Ipv6Addr(0, 0, 0, 0, 0, 0xFFFF, g, h) => {\n-                format!(\"::FFFF:{}.{}.{}.{}\", (g >> 8) as u8, g as u8,\n-                        (h >> 8) as u8, h as u8)\n+                write!(fmt.buf, \"::FFFF:{}.{}.{}.{}\", (g >> 8) as u8, g as u8,\n+                       (h >> 8) as u8, h as u8)\n             }\n \n             Ipv6Addr(a, b, c, d, e, f, g, h) =>\n-                format!(\"{:x}:{:x}:{:x}:{:x}:{:x}:{:x}:{:x}:{:x}\", a, b, c, d, e, f, g, h)\n+                write!(fmt.buf, \"{:x}:{:x}:{:x}:{:x}:{:x}:{:x}:{:x}:{:x}\",\n+                       a, b, c, d, e, f, g, h)\n         }\n     }\n }\n@@ -55,11 +56,11 @@ pub struct SocketAddr {\n }\n \n \n-impl ToStr for SocketAddr {\n-    fn to_str(&self) -> ~str {\n+impl fmt::Show for SocketAddr {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self.ip {\n-            Ipv4Addr(..) => format!(\"{}:{}\", self.ip.to_str(), self.port),\n-            Ipv6Addr(..) => format!(\"[{}]:{}\", self.ip.to_str(), self.port),\n+            Ipv4Addr(..) => write!(f.buf, \"{}:{}\", self.ip, self.port),\n+            Ipv6Addr(..) => write!(f.buf, \"[{}]:{}\", self.ip, self.port),\n         }\n     }\n }"}, {"sha": "a4eac564ee692255a259f2d6ff663934d41c1bda", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -19,7 +19,6 @@ use libc::{c_float, c_int};\n use num::{FPCategory, FPNaN, FPInfinite , FPZero, FPSubnormal, FPNormal};\n use num::{Zero, One, Bounded, strconv};\n use num;\n-use to_str;\n use intrinsics;\n \n macro_rules! delegate(\n@@ -745,11 +744,6 @@ pub fn to_str_exp_digits(num: f32, dig: uint, upper: bool) -> ~str {\n     r\n }\n \n-impl to_str::ToStr for f32 {\n-    #[inline]\n-    fn to_str(&self) -> ~str { to_str_digits(*self, 8) }\n-}\n-\n impl num::ToStrRadix for f32 {\n     /// Converts a float to a string in a given radix\n     ///"}, {"sha": "e6b903cbbdb6e052b248b6040af52a4e1c295437", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -20,7 +20,6 @@ use libc::{c_double, c_int};\n use num::{FPCategory, FPNaN, FPInfinite , FPZero, FPSubnormal, FPNormal};\n use num::{Zero, One, Bounded, strconv};\n use num;\n-use to_str;\n use intrinsics;\n \n pub use cmp::{min, max};\n@@ -747,11 +746,6 @@ pub fn to_str_exp_digits(num: f64, dig: uint, upper: bool) -> ~str {\n     r\n }\n \n-impl to_str::ToStr for f64 {\n-    #[inline]\n-    fn to_str(&self) -> ~str { to_str_digits(*self, 8) }\n-}\n-\n impl num::ToStrRadix for f64 {\n     /// Converts a float to a string in a given radix\n     ///"}, {"sha": "030aa2d81fa241cd9968e48c38a6be942e5c6d2f", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -273,14 +273,6 @@ pub fn to_str_bytes<U>(n: $T, radix: uint, f: |v: &[u8]| -> U) -> U {\n     f(buf.slice(0, cur))\n }\n \n-impl ToStr for $T {\n-    /// Convert to a string in base 10.\n-    #[inline]\n-    fn to_str(&self) -> ~str {\n-        format!(\"{:d}\", *self)\n-    }\n-}\n-\n impl ToStrRadix for $T {\n     /// Convert to a string in a given base.\n     #[inline]"}, {"sha": "001927e6033123e085beb33878ee8b93ece107a3", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -187,14 +187,6 @@ pub fn to_str_bytes<U>(n: $T, radix: uint, f: |v: &[u8]| -> U) -> U {\n     f(buf.slice(0, cur))\n }\n \n-impl ToStr for $T {\n-    /// Convert to a string in base 10.\n-    #[inline]\n-    fn to_str(&self) -> ~str {\n-        format!(\"{:u}\", *self)\n-    }\n-}\n-\n impl ToStrRadix for $T {\n     /// Convert to a string in a given base.\n     #[inline]"}, {"sha": "633d6e92c704cd15077b604683f1b199f567b148", "filename": "src/libstd/option.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -42,16 +42,13 @@ use clone::Clone;\n use clone::DeepClone;\n use cmp::{Eq, TotalEq, TotalOrd};\n use default::Default;\n-use fmt;\n use iter::{Iterator, DoubleEndedIterator, FromIterator, ExactSize};\n use kinds::Send;\n use mem;\n-use str::OwnedStr;\n-use to_str::ToStr;\n use vec;\n \n /// The option type\n-#[deriving(Clone, DeepClone, Eq, Ord, TotalEq, TotalOrd, ToStr)]\n+#[deriving(Clone, DeepClone, Eq, Ord, TotalEq, TotalOrd, Show)]\n pub enum Option<T> {\n     /// No value\n     None,\n@@ -380,16 +377,6 @@ impl<T: Default> Option<T> {\n // Trait implementations\n /////////////////////////////////////////////////////////////////////////////\n \n-impl<T: fmt::Show> fmt::Show for Option<T> {\n-    #[inline]\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        match *self {\n-            Some(ref t) => write!(f.buf, \"Some({})\", *t),\n-            None        => write!(f.buf, \"None\")\n-        }\n-    }\n-}\n-\n impl<T> Default for Option<T> {\n     #[inline]\n     fn default() -> Option<T> { None }"}, {"sha": "09124f63361d5504bbd5aca9ca957c018fdec59d", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -71,7 +71,6 @@ use iter::Iterator;\n use option::{Option, None, Some};\n use str;\n use str::{MaybeOwned, OwnedStr, Str, StrSlice, from_utf8_lossy};\n-use to_str::ToStr;\n use vec;\n use vec::{CloneableVector, OwnedCloneableVector, OwnedVector, Vector};\n use vec::{ImmutableEqVector, ImmutableVector};\n@@ -499,16 +498,6 @@ impl<'a, P: GenericPath> fmt::Show for Display<'a, P> {\n     }\n }\n \n-impl<'a, P: GenericPath> ToStr for Display<'a, P> {\n-    /// Returns the path as a string\n-    ///\n-    /// If the path is not UTF-8, invalid sequences with be replaced with the\n-    /// unicode replacement char. This involves allocation.\n-    fn to_str(&self) -> ~str {\n-        self.as_maybe_owned().into_owned()\n-    }\n-}\n-\n impl<'a, P: GenericPath> Display<'a, P> {\n     /// Returns the path as a possibly-owned string.\n     ///"}, {"sha": "3f09351ead66c5fc412743695e5294db801664a1", "filename": "src/libstd/result.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -12,14 +12,11 @@\n \n use clone::Clone;\n use cmp::Eq;\n-use fmt;\n use iter::{Iterator, FromIterator};\n use option::{None, Option, Some};\n-use str::OwnedStr;\n-use to_str::ToStr;\n \n /// `Result` is a type that represents either success (`Ok`) or failure (`Err`).\n-#[deriving(Clone, DeepClone, Eq, Ord, TotalEq, TotalOrd, ToStr)]\n+#[deriving(Clone, DeepClone, Eq, Ord, TotalEq, TotalOrd, Show)]\n #[must_use]\n pub enum Result<T, E> {\n     /// Contains the success value\n@@ -202,20 +199,6 @@ impl<T, E> Result<T, E> {\n     }\n }\n \n-/////////////////////////////////////////////////////////////////////////////\n-// Trait implementations\n-/////////////////////////////////////////////////////////////////////////////\n-\n-impl<T: fmt::Show, E: fmt::Show> fmt::Show for Result<T, E> {\n-    #[inline]\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        match *self {\n-            Ok(ref t) => write!(f.buf, \"Ok({})\", *t),\n-            Err(ref e) => write!(f.buf, \"Err({})\", *e)\n-        }\n-    }\n-}\n-\n /////////////////////////////////////////////////////////////////////////////\n // Free functions\n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "daaf46be187671753ca7a96f51dabef7892ace19", "filename": "src/libstd/str.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -98,7 +98,6 @@ use num::Saturating;\n use option::{None, Option, Some};\n use ptr;\n use ptr::RawPtr;\n-use to_str::ToStr;\n use from_str::FromStr;\n use vec;\n use vec::{OwnedVector, OwnedCloneableVector, ImmutableVector, MutableVector};\n@@ -132,21 +131,11 @@ pub fn from_utf8<'a>(v: &'a [u8]) -> Option<&'a str> {\n     } else { None }\n }\n \n-impl ToStr for ~str {\n-    #[inline]\n-    fn to_str(&self) -> ~str { self.to_owned() }\n-}\n-\n impl FromStr for ~str {\n     #[inline]\n     fn from_str(s: &str) -> Option<~str> { Some(s.to_owned()) }\n }\n \n-impl<'a> ToStr for &'a str {\n-    #[inline]\n-    fn to_str(&self) -> ~str { self.to_owned() }\n-}\n-\n /// Convert a byte to a UTF-8 string\n ///\n /// # Failure\n@@ -1269,11 +1258,6 @@ impl<'a> IntoMaybeOwned<'a> for MaybeOwned<'a> {\n     fn into_maybe_owned(self) -> MaybeOwned<'a> { self }\n }\n \n-impl<'a> ToStr for MaybeOwned<'a> {\n-    #[inline]\n-    fn to_str(&self) -> ~str { self.as_slice().to_owned() }\n-}\n-\n impl<'a> Eq for MaybeOwned<'a> {\n     #[inline]\n     fn eq(&self, other: &MaybeOwned) -> bool {"}, {"sha": "ba3c1c0fc45543e07b8f4d7e06505a7e6606bff7", "filename": "src/libstd/to_str.rs", "status": "modified", "additions": 3, "deletions": 45, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibstd%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibstd%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fto_str.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -14,10 +14,7 @@ The `ToStr` trait for converting to strings\n \n */\n \n-use option::{Some, None};\n-use str::OwnedStr;\n-use iter::Iterator;\n-use vec::ImmutableVector;\n+use fmt;\n \n /// A generic trait for converting a value to a string\n pub trait ToStr {\n@@ -31,47 +28,8 @@ pub trait IntoStr {\n     fn into_str(self) -> ~str;\n }\n \n-impl ToStr for () {\n-    #[inline]\n-    fn to_str(&self) -> ~str { ~\"()\" }\n-}\n-\n-impl<'a,A:ToStr> ToStr for &'a [A] {\n-    #[inline]\n-    fn to_str(&self) -> ~str {\n-        let mut acc = ~\"[\";\n-        let mut first = true;\n-        for elt in self.iter() {\n-            if first {\n-                first = false;\n-            }\n-            else {\n-                acc.push_str(\", \");\n-            }\n-            acc.push_str(elt.to_str());\n-        }\n-        acc.push_char(']');\n-        acc\n-    }\n-}\n-\n-impl<A:ToStr> ToStr for ~[A] {\n-    #[inline]\n-    fn to_str(&self) -> ~str {\n-        let mut acc = ~\"[\";\n-        let mut first = true;\n-        for elt in self.iter() {\n-            if first {\n-                first = false;\n-            }\n-            else {\n-                acc.push_str(\", \");\n-            }\n-            acc.push_str(elt.to_str());\n-        }\n-        acc.push_char(']');\n-        acc\n-    }\n+impl<T: fmt::Show> ToStr for T {\n+    fn to_str(&self) -> ~str { format!(\"{}\", *self) }\n }\n \n #[cfg(test)]"}, {"sha": "9d50337efabdc8535369b4bb89ee1559d6befed6", "filename": "src/libstd/tuple.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibstd%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibstd%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftuple.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -17,7 +17,6 @@ use clone::Clone;\n #[cfg(not(test))] use default::Default;\n use fmt;\n use result::{Ok, Err};\n-use to_str::ToStr;\n \n // macro for implementing n-ary tuple functions and operations\n macro_rules! tuple_impls {\n@@ -119,12 +118,6 @@ macro_rules! tuple_impls {\n                 }\n             }\n \n-            impl<$($T: fmt::Show),+> ToStr for ($($T,)+) {\n-                fn to_str(&self) -> ~str {\n-                    format!(\"{}\", *self)\n-                }\n-            }\n-\n             impl<$($T: fmt::Show),+> fmt::Show for ($($T,)+) {\n                 fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n                     write_tuple!(f.buf, $(self.$refN()),+)"}, {"sha": "faf24da74ccfc8040d009f016d8a091079506a21", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n use std::hash::{Hash, sip};\n+use std::fmt;\n+use std::fmt::Show;\n \n #[deriving(Eq)]\n pub enum Os { OsWin32, OsMacos, OsLinux, OsAndroid, OsFreebsd, }\n@@ -271,20 +273,23 @@ impl Hash for Abi {\n     }\n }\n \n-impl ToStr for Abi {\n-    fn to_str(&self) -> ~str {\n-        self.data().name.to_str()\n+impl fmt::Show for Abi {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        self.data().name.fmt(f)\n     }\n }\n \n-impl ToStr for AbiSet {\n-    fn to_str(&self) -> ~str {\n-        let mut strs = ~[];\n+impl fmt::Show for AbiSet {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        if_ok!(write!(f.buf, \"\\\"\"));\n+        let mut first = true;\n         self.each(|abi| {\n-            strs.push(abi.data().name);\n+            if first { first = false; }\n+            else { let _ = write!(f.buf, \" \"); }\n+            let _ = write!(f.buf, \"{}\", abi.data().name);\n             true\n         });\n-        format!(\"\\\"{}\\\"\", strs.connect(\" \"))\n+        write!(f.buf, \"\\\"\")\n     }\n }\n "}, {"sha": "7561d8cbbae8854d1b73f09a3340cca1f39d92d2", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 28, "deletions": 27, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -17,11 +17,12 @@ use opt_vec::OptVec;\n use parse::token::{InternedString, special_idents, str_to_ident};\n use parse::token;\n \n+use std::fmt;\n+use std::fmt::Show;\n use std::cell::RefCell;\n use collections::HashMap;\n use std::option::Option;\n use std::rc::Rc;\n-use std::to_str::ToStr;\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n \n /// A pointer abstraction. FIXME(eddyb) #10676 use Rc<T> in the future.\n@@ -39,7 +40,7 @@ pub fn P<T: 'static>(value: T) -> P<T> {\n // table) and a SyntaxContext to track renaming and\n // macro expansion per Flatt et al., \"Macros\n // That Work Together\"\n-#[deriving(Clone, Hash, ToStr, TotalEq, TotalOrd, Show)]\n+#[deriving(Clone, Hash, TotalEq, TotalOrd, Show)]\n pub struct Ident { name: Name, ctxt: SyntaxContext }\n \n impl Ident {\n@@ -182,7 +183,7 @@ pub type CrateNum = u32;\n \n pub type NodeId = u32;\n \n-#[deriving(Clone, TotalEq, TotalOrd, Eq, Encodable, Decodable, Hash, ToStr, Show)]\n+#[deriving(Clone, TotalEq, TotalOrd, Eq, Encodable, Decodable, Hash, Show)]\n pub struct DefId {\n     krate: CrateNum,\n     node: NodeId,\n@@ -277,7 +278,7 @@ pub enum Def {\n     DefMethod(DefId /* method */, Option<DefId> /* trait */),\n }\n \n-#[deriving(Clone, Eq, Hash, Encodable, Decodable, ToStr)]\n+#[deriving(Clone, Eq, Hash, Encodable, Decodable, Show)]\n pub enum DefRegion {\n     DefStaticRegion,\n     DefEarlyBoundRegion(/* index */ uint, /* lifetime decl */ NodeId),\n@@ -398,12 +399,12 @@ pub enum Sigil {\n     ManagedSigil\n }\n \n-impl ToStr for Sigil {\n-    fn to_str(&self) -> ~str {\n+impl fmt::Show for Sigil {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n-            BorrowedSigil => ~\"&\",\n-            OwnedSigil => ~\"~\",\n-            ManagedSigil => ~\"@\"\n+            BorrowedSigil => \"&\".fmt(f),\n+            OwnedSigil => \"~\".fmt(f),\n+            ManagedSigil => \"@\".fmt(f),\n          }\n     }\n }\n@@ -768,9 +769,9 @@ pub enum IntTy {\n     TyI64,\n }\n \n-impl ToStr for IntTy {\n-    fn to_str(&self) -> ~str {\n-        ast_util::int_ty_to_str(*self)\n+impl fmt::Show for IntTy {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f.buf, \"{}\", ast_util::int_ty_to_str(*self))\n     }\n }\n \n@@ -783,9 +784,9 @@ pub enum UintTy {\n     TyU64,\n }\n \n-impl ToStr for UintTy {\n-    fn to_str(&self) -> ~str {\n-        ast_util::uint_ty_to_str(*self)\n+impl fmt::Show for UintTy {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f.buf, \"{}\", ast_util::uint_ty_to_str(*self))\n     }\n }\n \n@@ -795,9 +796,9 @@ pub enum FloatTy {\n     TyF64,\n }\n \n-impl ToStr for FloatTy {\n-    fn to_str(&self) -> ~str {\n-        ast_util::float_ty_to_str(*self)\n+impl fmt::Show for FloatTy {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f.buf, \"{}\", ast_util::float_ty_to_str(*self))\n     }\n }\n \n@@ -826,11 +827,11 @@ pub enum Onceness {\n     Many\n }\n \n-impl ToStr for Onceness {\n-    fn to_str(&self) -> ~str {\n+impl fmt::Show for Onceness {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n-            Once => ~\"once\",\n-            Many => ~\"many\"\n+            Once => \"once\".fmt(f),\n+            Many => \"many\".fmt(f),\n         }\n     }\n }\n@@ -939,12 +940,12 @@ pub enum Purity {\n     ExternFn, // declared with \"extern fn\"\n }\n \n-impl ToStr for Purity {\n-    fn to_str(&self) -> ~str {\n+impl fmt::Show for Purity {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n-            ImpureFn => ~\"impure\",\n-            UnsafeFn => ~\"unsafe\",\n-            ExternFn => ~\"extern\"\n+            ImpureFn => \"impure\".fmt(f),\n+            UnsafeFn => \"unsafe\".fmt(f),\n+            ExternFn => \"extern\".fmt(f),\n         }\n     }\n }"}, {"sha": "9194cfb0694bb2e74933e62d253843c797608bab", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -22,6 +22,7 @@ use std::logging;\n use std::cell::RefCell;\n use std::iter;\n use std::vec;\n+use std::fmt;\n \n #[deriving(Clone, Eq)]\n pub enum PathElem {\n@@ -37,9 +38,10 @@ impl PathElem {\n     }\n }\n \n-impl ToStr for PathElem {\n-    fn to_str(&self) -> ~str {\n-        token::get_name(self.name()).get().to_str()\n+impl fmt::Show for PathElem {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        let slot = token::get_name(self.name());\n+        write!(f.buf, \"{}\", slot.get())\n     }\n }\n "}, {"sha": "27d1c6fa6491579b1f29a0b912b60649edc7d59b", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -341,7 +341,7 @@ pub struct Stability {\n }\n \n /// The available stability levels.\n-#[deriving(Eq,Ord,Clone,ToStr)]\n+#[deriving(Eq,Ord,Clone,Show)]\n pub enum StabilityLevel {\n     Deprecated,\n     Experimental,"}, {"sha": "d04bedc65b5c5e84e836f80ac8d6455e8659f5bb", "filename": "src/libsyntax/crateid.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibsyntax%2Fcrateid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibsyntax%2Fcrateid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcrateid.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::fmt;\n+\n /// CrateIds identify crates and include the crate name and optionally a path\n /// and version. In the full form, they look like relative URLs. Example:\n /// `github.com/mozilla/rust#std:1.0` would be a package ID with a path of\n@@ -26,16 +28,17 @@ pub struct CrateId {\n     version: Option<~str>,\n }\n \n-impl ToStr for CrateId {\n-    fn to_str(&self) -> ~str {\n+impl fmt::Show for CrateId {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        if_ok!(write!(f.buf, \"{}\", self.path));\n         let version = match self.version {\n             None => \"0.0\",\n             Some(ref version) => version.as_slice(),\n         };\n         if self.path == self.name || self.path.ends_with(format!(\"/{}\", self.name)) {\n-            format!(\"{}\\\\#{}\", self.path, version)\n+            write!(f.buf, \"\\\\#{}\", version)\n         } else {\n-            format!(\"{}\\\\#{}:{}\", self.path, self.name, version)\n+            write!(f.buf, \"\\\\#{}:{}\", self.name, version)\n         }\n     }\n }"}, {"sha": "be45008b92a105499539beea5a2ac8d01fd3a5f2", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -12,8 +12,9 @@ use codemap::{Pos, Span};\n use codemap;\n \n use std::cell::Cell;\n-use std::io;\n+use std::fmt;\n use std::io::stdio::StdWriter;\n+use std::io;\n use std::iter::range;\n use std::local_data;\n use term;\n@@ -162,12 +163,14 @@ pub enum Level {\n     Note,\n }\n \n-impl ToStr for Level {\n-    fn to_str(&self) -> ~str {\n+impl fmt::Show for Level {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        use std::fmt::Show;\n+\n         match *self {\n-            Fatal | Error => ~\"error\",\n-            Warning => ~\"warning\",\n-            Note => ~\"note\"\n+            Fatal | Error => \"error\".fmt(f),\n+            Warning => \"warning\".fmt(f),\n+            Note => \"note\".fmt(f),\n         }\n     }\n }"}, {"sha": "a81fc4f6d69a1edb76bf07726616d54b0e1db9e0", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -40,14 +40,14 @@ use term::Terminal;\n use term::color::{Color, RED, YELLOW, GREEN, CYAN};\n \n use std::cmp;\n-use std::io;\n-use std::io::{File, PortReader, ChanWriter};\n+use std::f64;\n+use std::fmt;\n use std::io::stdio::StdWriter;\n+use std::io::{File, PortReader, ChanWriter};\n+use std::io;\n+use std::os;\n use std::str;\n use std::task;\n-use std::to_str::ToStr;\n-use std::f64;\n-use std::os;\n \n // to be used by rustc to compile tests in libtest\n pub mod test {\n@@ -70,11 +70,11 @@ pub enum TestName {\n     StaticTestName(&'static str),\n     DynTestName(~str)\n }\n-impl ToStr for TestName {\n-    fn to_str(&self) -> ~str {\n-        match (*self).clone() {\n-            StaticTestName(s) => s.to_str(),\n-            DynTestName(s) => s.to_str()\n+impl fmt::Show for TestName {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match *self {\n+            StaticTestName(s) => f.buf.write_str(s),\n+            DynTestName(ref s) => f.buf.write_str(s.as_slice()),\n         }\n     }\n }"}, {"sha": "7a078e4b571b2a8ffb6792bb029f34f4479b7d23", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -64,17 +64,15 @@ Examples of string representations:\n extern crate test;\n extern crate serialize;\n \n-use std::str;\n-use std::vec;\n-use std::num::FromStrRadix;\n+use std::cast::{transmute,transmute_copy};\n+use std::cast::{transmute,transmute_copy};\n use std::char::Char;\n-use std::container::Container;\n-use std::to_str::ToStr;\n-use std::rand;\n-use std::rand::Rng;\n use std::cmp::Eq;\n-use std::cast::{transmute,transmute_copy};\n+use std::cmp::Eq;\n+use std::fmt;\n use std::hash::{Hash, sip};\n+use std::num::FromStrRadix;\n+use std::rand::Rng;\n \n use serialize::{Encoder, Encodable, Decoder, Decodable};\n \n@@ -142,22 +140,21 @@ pub enum ParseError {\n }\n \n /// Converts a ParseError to a string\n-impl ToStr for ParseError {\n-    #[inline]\n-    fn to_str(&self) -> ~str {\n+impl fmt::Show for ParseError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             ErrorInvalidLength(found) =>\n-                format!(\"Invalid length; expecting 32, 36 or 45 chars, found {}\",\n-                        found),\n+                write!(f.buf, \"Invalid length; expecting 32, 36 or 45 chars, \\\n+                               found {}\", found),\n             ErrorInvalidCharacter(found, pos) =>\n-                format!(\"Invalid character; found `{}` (0x{:02x}) at offset {}\",\n-                        found, found as uint, pos),\n+                write!(f.buf, \"Invalid character; found `{}` (0x{:02x}) at \\\n+                               offset {}\", found, found as uint, pos),\n             ErrorInvalidGroups(found) =>\n-                format!(\"Malformed; wrong number of groups: expected 1 or 5, found {}\",\n-                        found),\n+                write!(f.buf, \"Malformed; wrong number of groups: expected 1 \\\n+                               or 5, found {}\", found),\n             ErrorInvalidGroupLength(group, found, expecting) =>\n-                format!(\"Malformed; length of group {} was {}, expecting {}\",\n-                        group, found, expecting),\n+                write!(f.buf, \"Malformed; length of group {} was {}, \\\n+                               expecting {}\", group, found, expecting),\n         }\n     }\n }\n@@ -465,9 +462,9 @@ impl FromStr for Uuid {\n }\n \n /// Convert the UUID to a hexadecimal-based string representation\n-impl ToStr for Uuid {\n-    fn to_str(&self) -> ~str {\n-        self.to_simple_str()\n+impl fmt::Show for Uuid {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f.buf, \"{}\", self.to_simple_str())\n     }\n }\n "}, {"sha": "79bb5aef764b32e0d4615ed7859ab6735fc05e38", "filename": "src/test/auxiliary/cci_class_cast.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -9,14 +9,18 @@\n // except according to those terms.\n \n pub mod kitty {\n+    use std::fmt;\n+\n     pub struct cat {\n       priv meows : uint,\n       how_hungry : int,\n       name : ~str,\n     }\n \n-    impl ToStr for cat {\n-       fn to_str(&self) -> ~str { self.name.clone() }\n+    impl fmt::Show for cat {\n+        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+            write!(f.buf, \"{}\", self.name)\n+        }\n     }\n \n     impl cat {"}, {"sha": "085ed5db6df09173ad599d00b6601f0861e0f6c0", "filename": "src/test/compile-fail/use-after-move-implicity-coerced-object.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Ftest%2Fcompile-fail%2Fuse-after-move-implicity-coerced-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Ftest%2Fcompile-fail%2Fuse-after-move-implicity-coerced-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-after-move-implicity-coerced-object.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -10,13 +10,15 @@\n \n // ignore-tidy-linelength\n \n+use std::fmt;\n+\n struct Number {\n     n: i64\n }\n \n-impl ToStr for Number {\n-    fn to_str(&self) -> ~str {\n-        self.n.to_str()\n+impl fmt::Show for Number {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f.buf, \"{}\", self.n)\n     }\n }\n "}, {"sha": "55fa783391ad953e51c3a7aea3746a43261f88b2", "filename": "src/test/run-pass/class-separate-impl.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -9,6 +9,9 @@\n // except according to those terms.\n \n // ignore-fast\n+\n+use std::fmt;\n+\n struct cat {\n     meows : uint,\n \n@@ -50,9 +53,9 @@ fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n     }\n }\n \n-impl ToStr for cat {\n-    fn to_str(&self) -> ~str {\n-        self.name.clone()\n+impl fmt::Show for cat {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f.buf, \"{}\", self.name)\n     }\n }\n "}, {"sha": "cce3575178e2b09a004b2449453a069c1b536192", "filename": "src/test/run-pass/deriving-global.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Ftest%2Frun-pass%2Fderiving-global.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Ftest%2Frun-pass%2Fderiving-global.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-global.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -28,19 +28,19 @@ mod submod {\n     // cause errors about unrecognised module `std` (or `extra`)\n     #[deriving(Eq, Ord, TotalEq, TotalOrd,\n                Clone, DeepClone,\n-               ToStr, Rand,\n+               Show, Rand,\n                Encodable, Decodable)]\n     enum A { A1(uint), A2(int) }\n \n     #[deriving(Eq, Ord, TotalEq, TotalOrd,\n                Clone, DeepClone,\n-               ToStr, Rand,\n+               Show, Rand,\n                Encodable, Decodable)]\n     struct B { x: uint, y: int }\n \n     #[deriving(Eq, Ord, TotalEq, TotalOrd,\n                Clone, DeepClone,\n-               ToStr, Rand,\n+               Show, Rand,\n                Encodable, Decodable)]\n     struct C(uint, int);\n "}, {"sha": "baa036ee039e04113e95990da15cc7f5222d1344", "filename": "src/test/run-pass/deriving-in-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Ftest%2Frun-pass%2Fderiving-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Ftest%2Frun-pass%2Fderiving-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-in-fn.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n pub fn main() {\n-    #[deriving(ToStr)]\n+    #[deriving(Show)]\n     struct Foo {\n         foo: int,\n     }\n \n     let f = Foo { foo: 10 };\n-    let _ = f.to_str();\n+    format!(\"{}\", f);\n }"}, {"sha": "a2451c394002fc58df609ed18939b0b337f0b8cf", "filename": "src/test/run-pass/deriving-show-2.rs", "status": "renamed", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Ftest%2Frun-pass%2Fderiving-show-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Ftest%2Frun-pass%2Fderiving-show-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-show-2.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -10,42 +10,46 @@\n \n #[feature(struct_variant)];\n \n-#[deriving(ToStr)]\n+use std::fmt;\n+\n+#[deriving(Show)]\n enum A {}\n-#[deriving(ToStr)]\n+#[deriving(Show)]\n enum B { B1, B2, B3 }\n-#[deriving(ToStr)]\n+#[deriving(Show)]\n enum C { C1(int), C2(B), C3(~str) }\n-#[deriving(ToStr)]\n+#[deriving(Show)]\n enum D { D1{ a: int } }\n-#[deriving(ToStr)]\n+#[deriving(Show)]\n struct E;\n-#[deriving(ToStr)]\n+#[deriving(Show)]\n struct F(int);\n-#[deriving(ToStr)]\n+#[deriving(Show)]\n struct G(int, int);\n-#[deriving(ToStr)]\n+#[deriving(Show)]\n struct H { a: int }\n-#[deriving(ToStr)]\n+#[deriving(Show)]\n struct I { a: int, b: int }\n-#[deriving(ToStr)]\n+#[deriving(Show)]\n struct J(Custom);\n \n struct Custom;\n-impl ToStr for Custom {\n-    fn to_str(&self) -> ~str { ~\"yay\" }\n+impl fmt::Show for Custom {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f.buf, \"yay\")\n+    }\n }\n \n pub fn main() {\n     assert_eq!(B1.to_str(), ~\"B1\");\n     assert_eq!(B2.to_str(), ~\"B2\");\n     assert_eq!(C1(3).to_str(), ~\"C1(3)\");\n     assert_eq!(C2(B2).to_str(), ~\"C2(B2)\");\n-    assert_eq!(D1{ a: 2 }.to_str(), ~\"D1{a: 2}\");\n+    assert_eq!(D1{ a: 2 }.to_str(), ~\"D1 { a: 2 }\");\n     assert_eq!(E.to_str(), ~\"E\");\n     assert_eq!(F(3).to_str(), ~\"F(3)\");\n     assert_eq!(G(3, 4).to_str(), ~\"G(3, 4)\");\n     assert_eq!(G(3, 4).to_str(), ~\"G(3, 4)\");\n-    assert_eq!(I{ a: 2, b: 4 }.to_str(), ~\"I{a: 2, b: 4}\");\n+    assert_eq!(I{ a: 2, b: 4 }.to_str(), ~\"I { a: 2, b: 4 }\");\n     assert_eq!(J(Custom).to_str(), ~\"J(yay)\");\n }", "previous_filename": "src/test/run-pass/deriving-to-str.rs"}, {"sha": "45f59fe9cd43dab4ecbe566a8119e3c7ee984dee", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -17,7 +17,7 @@\n extern crate extra;\n \n use std::io;\n-use std::to_str;\n+use std::fmt;\n \n enum square {\n     bot,\n@@ -30,9 +30,9 @@ enum square {\n     empty\n }\n \n-impl to_str::ToStr for square {\n-    fn to_str(&self) -> ~str {\n-        match *self {\n+impl fmt::Show for square {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f.buf, \"{}\", match *self {\n           bot => { ~\"R\" }\n           wall => { ~\"#\" }\n           rock => { ~\"*\" }\n@@ -41,7 +41,7 @@ impl to_str::ToStr for square {\n           open_lift => { ~\"O\" }\n           earth => { ~\".\" }\n           empty => { ~\" \" }\n-        }\n+        })\n     }\n }\n "}, {"sha": "ae65c46ce71af2f7f1847db5a61243815d1cd84b", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -22,6 +22,7 @@ extern crate extra;\n // already linked in. Using WriterUtil allows us to use the write_line method.\n use std::str;\n use std::vec;\n+use std::fmt;\n \n // Represents a position on a canvas.\n struct Point {\n@@ -94,13 +95,13 @@ impl AsciiArt {\n \n // Allows AsciiArt to be converted to a string using the libcore ToStr trait.\n // Note that the %s fmt! specifier will not call this automatically.\n-impl ToStr for AsciiArt {\n-    fn to_str(&self) -> ~str {\n+impl fmt::Show for AsciiArt {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         // Convert each line into a string.\n         let lines = self.lines.map(|line| str::from_chars(*line));\n \n         // Concatenate the lines together using a new-line.\n-        lines.connect(\"\\n\")\n+        write!(f.buf, \"{}\", lines.connect(\"\\n\"))\n     }\n }\n "}, {"sha": "30200d4cb1807cf82d60f92d0ab73e14a19a691d", "filename": "src/test/run-pass/new-impl-syntax.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Ftest%2Frun-pass%2Fnew-impl-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78b749810f4ed53e8287adfb284f9f32f16b73c/src%2Ftest%2Frun-pass%2Fnew-impl-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-impl-syntax.rs?ref=b78b749810f4ed53e8287adfb284f9f32f16b73c", "patch": "@@ -8,24 +8,26 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::fmt;\n+\n struct Thingy {\n     x: int,\n     y: int\n }\n \n-impl ToStr for Thingy {\n-    fn to_str(&self) -> ~str {\n-        format!(\"\\\\{ x: {}, y: {} \\\\}\", self.x, self.y)\n+impl fmt::Show for Thingy {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f.buf, \"\\\\{ x: {}, y: {} \\\\}\", self.x, self.y)\n     }\n }\n \n struct PolymorphicThingy<T> {\n     x: T\n }\n \n-impl<T:ToStr> ToStr for PolymorphicThingy<T> {\n-    fn to_str(&self) -> ~str {\n-        self.x.to_str()\n+impl<T:fmt::Show> fmt::Show for PolymorphicThingy<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f.buf, \"{}\", self.x)\n     }\n }\n "}]}