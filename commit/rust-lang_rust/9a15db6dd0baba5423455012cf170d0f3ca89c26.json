{"sha": "9a15db6dd0baba5423455012cf170d0f3ca89c26", "node_id": "C_kwDOAAsO6NoAKDlhMTVkYjZkZDBiYWJhNTQyMzQ1NTAxMmNmMTcwZDBmM2NhODljMjY", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-13T14:39:12Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-13T15:28:47Z"}, "message": "Add git_command helper", "tree": {"sha": "39cbb8e0de9047f63fda2b17707ea3225a909c5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39cbb8e0de9047f63fda2b17707ea3225a909c5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a15db6dd0baba5423455012cf170d0f3ca89c26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a15db6dd0baba5423455012cf170d0f3ca89c26", "html_url": "https://github.com/rust-lang/rust/commit/9a15db6dd0baba5423455012cf170d0f3ca89c26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a15db6dd0baba5423455012cf170d0f3ca89c26/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40745694a014bf59fa90f92ba097015c550da38f", "url": "https://api.github.com/repos/rust-lang/rust/commits/40745694a014bf59fa90f92ba097015c550da38f", "html_url": "https://github.com/rust-lang/rust/commit/40745694a014bf59fa90f92ba097015c550da38f"}], "stats": {"total": 57, "additions": 26, "deletions": 31}, "files": [{"sha": "c3faacd9244c81aeee3afb1051c1cc78d37d4920", "filename": "build_system/prepare.rs", "status": "modified", "additions": 14, "deletions": 31, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/9a15db6dd0baba5423455012cf170d0f3ca89c26/build_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a15db6dd0baba5423455012cf170d0f3ca89c26/build_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fprepare.rs?ref=9a15db6dd0baba5423455012cf170d0f3ca89c26", "patch": "@@ -8,7 +8,7 @@ use crate::build_system::rustc_info::get_default_sysroot;\n use super::build_sysroot::{BUILD_SYSROOT, ORIG_BUILD_SYSROOT, SYSROOT_RUSTC_VERSION, SYSROOT_SRC};\n use super::path::{Dirs, RelPath};\n use super::rustc_info::get_rustc_version;\n-use super::utils::{copy_dir_recursively, retry_spawn_and_wait, spawn_and_wait};\n+use super::utils::{copy_dir_recursively, git_command, retry_spawn_and_wait, spawn_and_wait};\n \n pub(crate) fn prepare(dirs: &Dirs) {\n     if RelPath::DOWNLOAD.to_path(dirs).exists() {\n@@ -96,14 +96,14 @@ impl GitRepo {\n fn clone_repo(download_dir: &Path, repo: &str, rev: &str) {\n     eprintln!(\"[CLONE] {}\", repo);\n     // Ignore exit code as the repo may already have been checked out\n-    Command::new(\"git\").arg(\"clone\").arg(repo).arg(&download_dir).spawn().unwrap().wait().unwrap();\n+    git_command(None, \"clone\").arg(repo).arg(download_dir).spawn().unwrap().wait().unwrap();\n \n-    let mut clean_cmd = Command::new(\"git\");\n-    clean_cmd.arg(\"checkout\").arg(\"--\").arg(\".\").current_dir(&download_dir);\n+    let mut clean_cmd = git_command(download_dir, \"checkout\");\n+    clean_cmd.arg(\"--\").arg(\".\");\n     spawn_and_wait(clean_cmd);\n \n-    let mut checkout_cmd = Command::new(\"git\");\n-    checkout_cmd.arg(\"checkout\").arg(\"-q\").arg(rev).current_dir(download_dir);\n+    let mut checkout_cmd = git_command(download_dir, \"checkout\");\n+    checkout_cmd.arg(\"-q\").arg(rev);\n     spawn_and_wait(checkout_cmd);\n }\n \n@@ -159,25 +159,16 @@ fn clone_repo_shallow_github(dirs: &Dirs, download_dir: &Path, user: &str, repo:\n }\n \n fn init_git_repo(repo_dir: &Path) {\n-    let mut git_init_cmd = Command::new(\"git\");\n-    git_init_cmd.arg(\"init\").arg(\"-q\").current_dir(repo_dir);\n+    let mut git_init_cmd = git_command(repo_dir, \"init\");\n+    git_init_cmd.arg(\"-q\");\n     spawn_and_wait(git_init_cmd);\n \n-    let mut git_add_cmd = Command::new(\"git\");\n-    git_add_cmd.arg(\"add\").arg(\".\").current_dir(repo_dir);\n+    let mut git_add_cmd = git_command(repo_dir, \"add\");\n+    git_add_cmd.arg(\".\");\n     spawn_and_wait(git_add_cmd);\n \n-    let mut git_commit_cmd = Command::new(\"git\");\n-    git_commit_cmd\n-        .arg(\"-c\")\n-        .arg(\"user.name=Dummy\")\n-        .arg(\"-c\")\n-        .arg(\"user.email=dummy@example.com\")\n-        .arg(\"commit\")\n-        .arg(\"-m\")\n-        .arg(\"Initial commit\")\n-        .arg(\"-q\")\n-        .current_dir(repo_dir);\n+    let mut git_commit_cmd = git_command(repo_dir, \"commit\");\n+    git_commit_cmd.arg(\"-m\").arg(\"Initial commit\").arg(\"-q\");\n     spawn_and_wait(git_commit_cmd);\n }\n \n@@ -212,16 +203,8 @@ fn apply_patches(dirs: &Dirs, crate_name: &str, target_dir: &Path) {\n             target_dir.file_name().unwrap(),\n             patch.file_name().unwrap()\n         );\n-        let mut apply_patch_cmd = Command::new(\"git\");\n-        apply_patch_cmd\n-            .arg(\"-c\")\n-            .arg(\"user.name=Dummy\")\n-            .arg(\"-c\")\n-            .arg(\"user.email=dummy@example.com\")\n-            .arg(\"am\")\n-            .arg(patch)\n-            .arg(\"-q\")\n-            .current_dir(target_dir);\n+        let mut apply_patch_cmd = git_command(target_dir, \"am\");\n+        apply_patch_cmd.arg(patch).arg(\"-q\");\n         spawn_and_wait(apply_patch_cmd);\n     }\n }"}, {"sha": "6d0d9b56514ae94325c3d9ff19e388091138bc3e", "filename": "build_system/utils.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9a15db6dd0baba5423455012cf170d0f3ca89c26/build_system%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a15db6dd0baba5423455012cf170d0f3ca89c26/build_system%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Futils.rs?ref=9a15db6dd0baba5423455012cf170d0f3ca89c26", "patch": "@@ -103,6 +103,7 @@ impl CargoProject {\n         RelPath::BUILD.join(self.target).to_path(dirs)\n     }\n \n+    #[must_use]\n     fn base_cmd(&self, command: &str, cargo: &Path, dirs: &Dirs) -> Command {\n         let mut cmd = Command::new(cargo);\n \n@@ -115,6 +116,7 @@ impl CargoProject {\n         cmd\n     }\n \n+    #[must_use]\n     fn build_cmd(&self, command: &str, compiler: &Compiler, dirs: &Dirs) -> Command {\n         let mut cmd = self.base_cmd(command, &compiler.cargo, dirs);\n \n@@ -191,6 +193,16 @@ pub(crate) fn hyperfine_command(\n     bench\n }\n \n+#[must_use]\n+pub(crate) fn git_command<'a>(repo_dir: impl Into<Option<&'a Path>>, cmd: &str) -> Command {\n+    let mut git_cmd = Command::new(\"git\");\n+    git_cmd.arg(\"-c\").arg(\"user.name=Dummy\").arg(\"-c\").arg(\"user.email=dummy@example.com\").arg(cmd);\n+    if let Some(repo_dir) = repo_dir.into() {\n+        git_cmd.current_dir(repo_dir);\n+    }\n+    git_cmd\n+}\n+\n #[track_caller]\n pub(crate) fn try_hard_link(src: impl AsRef<Path>, dst: impl AsRef<Path>) {\n     let src = src.as_ref();"}]}