{"sha": "d75c60f9a37c9b1810ddcdf19216da76319bdf04", "node_id": "C_kwDOAAsO6NoAKGQ3NWM2MGY5YTM3YzliMTgxMGRkY2RmMTkyMTZkYTc2MzE5YmRmMDQ", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-05-28T22:25:32Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-05-28T23:44:11Z"}, "message": "Use Box::new() instead of box syntax in std tests", "tree": {"sha": "db61a2b833b4d163e0a90fcdda6d6dff983ed9cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db61a2b833b4d163e0a90fcdda6d6dff983ed9cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d75c60f9a37c9b1810ddcdf19216da76319bdf04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d75c60f9a37c9b1810ddcdf19216da76319bdf04", "html_url": "https://github.com/rust-lang/rust/commit/d75c60f9a37c9b1810ddcdf19216da76319bdf04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d75c60f9a37c9b1810ddcdf19216da76319bdf04/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7230a15c32d01e1653d98c39ddd79097a59b550c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7230a15c32d01e1653d98c39ddd79097a59b550c", "html_url": "https://github.com/rust-lang/rust/commit/7230a15c32d01e1653d98c39ddd79097a59b550c"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "8d7877bcad35d078108a042e2a8a102a76b334cd", "filename": "library/std/src/io/error/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d75c60f9a37c9b1810ddcdf19216da76319bdf04/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d75c60f9a37c9b1810ddcdf19216da76319bdf04/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs?ref=d75c60f9a37c9b1810ddcdf19216da76319bdf04", "patch": "@@ -17,10 +17,10 @@ fn test_debug_error() {\n     let msg = error_string(code);\n     let kind = decode_error_kind(code);\n     let err = Error {\n-        repr: Repr::new_custom(box Custom {\n+        repr: Repr::new_custom(Box::new(Custom {\n             kind: ErrorKind::InvalidInput,\n-            error: box Error { repr: super::Repr::new_os(code) },\n-        }),\n+            error: Box::new(Error { repr: super::Repr::new_os(code) }),\n+        })),\n     };\n     let expected = format!(\n         \"Custom {{ \\"}, {"sha": "9f4f31ed051455ba3cf79aec04fa8b7972941ca5", "filename": "library/std/src/sync/mpsc/mpsc_queue/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d75c60f9a37c9b1810ddcdf19216da76319bdf04/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmpsc_queue%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d75c60f9a37c9b1810ddcdf19216da76319bdf04/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmpsc_queue%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmpsc_queue%2Ftests.rs?ref=d75c60f9a37c9b1810ddcdf19216da76319bdf04", "patch": "@@ -6,8 +6,8 @@ use crate::thread;\n #[test]\n fn test_full() {\n     let q: Queue<Box<_>> = Queue::new();\n-    q.push(box 1);\n-    q.push(box 2);\n+    q.push(Box::new(1));\n+    q.push(Box::new(2));\n }\n \n #[test]"}, {"sha": "467ef3dbdcbbd687d8d76cfb67fdde6f6e40e867", "filename": "library/std/src/sync/mpsc/spsc_queue/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d75c60f9a37c9b1810ddcdf19216da76319bdf04/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fspsc_queue%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d75c60f9a37c9b1810ddcdf19216da76319bdf04/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fspsc_queue%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fspsc_queue%2Ftests.rs?ref=d75c60f9a37c9b1810ddcdf19216da76319bdf04", "patch": "@@ -47,8 +47,8 @@ fn peek() {\n fn drop_full() {\n     unsafe {\n         let q: Queue<Box<_>> = Queue::with_additions(0, (), ());\n-        q.push(box 1);\n-        q.push(box 2);\n+        q.push(Box::new(1));\n+        q.push(Box::new(2));\n     }\n }\n "}, {"sha": "e58649bab6e420bbf8915a6275ae35af7155e02e", "filename": "library/std/src/sync/mpsc/sync_tests.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d75c60f9a37c9b1810ddcdf19216da76319bdf04/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fsync_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d75c60f9a37c9b1810ddcdf19216da76319bdf04/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fsync_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fsync_tests.rs?ref=d75c60f9a37c9b1810ddcdf19216da76319bdf04", "patch": "@@ -20,7 +20,7 @@ fn smoke() {\n #[test]\n fn drop_full() {\n     let (tx, _rx) = sync_channel::<Box<isize>>(1);\n-    tx.send(box 1).unwrap();\n+    tx.send(Box::new(1)).unwrap();\n }\n \n #[test]\n@@ -238,7 +238,7 @@ fn oneshot_single_thread_send_port_close() {\n     // Testing that the sender cleans up the payload if receiver is closed\n     let (tx, rx) = sync_channel::<Box<i32>>(0);\n     drop(rx);\n-    assert!(tx.send(box 0).is_err());\n+    assert!(tx.send(Box::new(0)).is_err());\n }\n \n #[test]\n@@ -257,7 +257,7 @@ fn oneshot_single_thread_recv_chan_close() {\n #[test]\n fn oneshot_single_thread_send_then_recv() {\n     let (tx, rx) = sync_channel::<Box<i32>>(1);\n-    tx.send(box 10).unwrap();\n+    tx.send(Box::new(10)).unwrap();\n     assert!(*rx.recv().unwrap() == 10);\n }\n \n@@ -333,7 +333,7 @@ fn oneshot_multi_task_recv_then_send() {\n         assert!(*rx.recv().unwrap() == 10);\n     });\n \n-    tx.send(box 10).unwrap();\n+    tx.send(Box::new(10)).unwrap();\n }\n \n #[test]\n@@ -398,7 +398,7 @@ fn oneshot_multi_thread_send_recv_stress() {\n     for _ in 0..stress_factor() {\n         let (tx, rx) = sync_channel::<Box<i32>>(0);\n         let _t = thread::spawn(move || {\n-            tx.send(box 10).unwrap();\n+            tx.send(Box::new(10)).unwrap();\n         });\n         assert!(*rx.recv().unwrap() == 10);\n     }\n@@ -418,7 +418,7 @@ fn stream_send_recv_stress() {\n             }\n \n             thread::spawn(move || {\n-                tx.send(box i).unwrap();\n+                tx.send(Box::new(i)).unwrap();\n                 send(tx, i + 1);\n             });\n         }"}, {"sha": "4deb3e596157757f27d7948cb22ff5ee958a697f", "filename": "library/std/src/sync/mpsc/tests.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d75c60f9a37c9b1810ddcdf19216da76319bdf04/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d75c60f9a37c9b1810ddcdf19216da76319bdf04/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Ftests.rs?ref=d75c60f9a37c9b1810ddcdf19216da76319bdf04", "patch": "@@ -20,15 +20,15 @@ fn smoke() {\n #[test]\n fn drop_full() {\n     let (tx, _rx) = channel::<Box<isize>>();\n-    tx.send(box 1).unwrap();\n+    tx.send(Box::new(1)).unwrap();\n }\n \n #[test]\n fn drop_full_shared() {\n     let (tx, _rx) = channel::<Box<isize>>();\n     drop(tx.clone());\n     drop(tx.clone());\n-    tx.send(box 1).unwrap();\n+    tx.send(Box::new(1)).unwrap();\n }\n \n #[test]\n@@ -229,7 +229,7 @@ fn oneshot_single_thread_send_port_close() {\n     // Testing that the sender cleans up the payload if receiver is closed\n     let (tx, rx) = channel::<Box<i32>>();\n     drop(rx);\n-    assert!(tx.send(box 0).is_err());\n+    assert!(tx.send(Box::new(0)).is_err());\n }\n \n #[test]\n@@ -248,7 +248,7 @@ fn oneshot_single_thread_recv_chan_close() {\n #[test]\n fn oneshot_single_thread_send_then_recv() {\n     let (tx, rx) = channel::<Box<i32>>();\n-    tx.send(box 10).unwrap();\n+    tx.send(Box::new(10)).unwrap();\n     assert!(*rx.recv().unwrap() == 10);\n }\n \n@@ -309,7 +309,7 @@ fn oneshot_multi_task_recv_then_send() {\n         assert!(*rx.recv().unwrap() == 10);\n     });\n \n-    tx.send(box 10).unwrap();\n+    tx.send(Box::new(10)).unwrap();\n }\n \n #[test]\n@@ -374,7 +374,7 @@ fn oneshot_multi_thread_send_recv_stress() {\n     for _ in 0..stress_factor() {\n         let (tx, rx) = channel::<Box<isize>>();\n         let _t = thread::spawn(move || {\n-            tx.send(box 10).unwrap();\n+            tx.send(Box::new(10)).unwrap();\n         });\n         assert!(*rx.recv().unwrap() == 10);\n     }\n@@ -394,7 +394,7 @@ fn stream_send_recv_stress() {\n             }\n \n             thread::spawn(move || {\n-                tx.send(box i).unwrap();\n+                tx.send(Box::new(i)).unwrap();\n                 send(tx, i + 1);\n             });\n         }"}, {"sha": "5b8309cf5d273f8a4af4b4c1069ece9fec6525a7", "filename": "library/std/src/thread/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d75c60f9a37c9b1810ddcdf19216da76319bdf04/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d75c60f9a37c9b1810ddcdf19216da76319bdf04/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs?ref=d75c60f9a37c9b1810ddcdf19216da76319bdf04", "patch": "@@ -127,7 +127,7 @@ where\n {\n     let (tx, rx) = channel();\n \n-    let x: Box<_> = box 1;\n+    let x: Box<_> = Box::new(1);\n     let x_in_parent = (&*x) as *const i32 as usize;\n \n     spawnfn(Box::new(move || {\n@@ -219,7 +219,7 @@ fn test_try_panic_any_message_owned_str() {\n #[test]\n fn test_try_panic_any_message_any() {\n     match thread::spawn(move || {\n-        panic_any(box 413u16 as Box<dyn Any + Send>);\n+        panic_any(Box::new(413u16) as Box<dyn Any + Send>);\n     })\n     .join()\n     {"}]}