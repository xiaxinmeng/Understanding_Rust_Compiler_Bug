{"sha": "a42e50e230c5f6047d222f24d2e1ea5988039bee", "node_id": "C_kwDOAAsO6NoAKGE0MmU1MGUyMzBjNWY2MDQ3ZDIyMmYyNGQyZTFlYTU5ODgwMzliZWU", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-07-08T01:36:08Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-07-10T21:30:26Z"}, "message": "Add a fieldless enum with one variant to `deriving-all-codegen.rs`.\n\nBecause the generated code is different to fieldless enum with multiple\nvariants.", "tree": {"sha": "6fca33376c261728c532a7183e4f37b5d5ecc3b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fca33376c261728c532a7183e4f37b5d5ecc3b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a42e50e230c5f6047d222f24d2e1ea5988039bee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a42e50e230c5f6047d222f24d2e1ea5988039bee", "html_url": "https://github.com/rust-lang/rust/commit/a42e50e230c5f6047d222f24d2e1ea5988039bee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a42e50e230c5f6047d222f24d2e1ea5988039bee/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bfe5f1b0d480307697348b978a117226dedb156", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bfe5f1b0d480307697348b978a117226dedb156", "html_url": "https://github.com/rust-lang/rust/commit/1bfe5f1b0d480307697348b978a117226dedb156"}], "stats": {"total": 81, "additions": 81, "deletions": 0}, "files": [{"sha": "aef79ae8a5b8d332e6eebd9dba46f06d25dd6a7f", "filename": "src/test/ui/deriving/deriving-all-codegen.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a42e50e230c5f6047d222f24d2e1ea5988039bee/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a42e50e230c5f6047d222f24d2e1ea5988039bee/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.rs?ref=a42e50e230c5f6047d222f24d2e1ea5988039bee", "patch": "@@ -62,6 +62,13 @@ enum Enum1 {\n     Single { x: u32 }\n }\n \n+// A C-like, fieldless enum with a single variant.\n+#[derive(Clone, Debug, Default, Hash, PartialEq, Eq, PartialOrd, Ord)]\n+enum Fieldless1 {\n+    #[default]\n+    A,\n+}\n+\n // A C-like, fieldless enum.\n #[derive(Clone, Copy, Debug, Default, Hash, PartialEq, Eq, PartialOrd, Ord)]\n enum Fieldless {"}, {"sha": "7a1df7046b55c8148f44459f19dd65b013719a9f", "filename": "src/test/ui/deriving/deriving-all-codegen.stdout", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/a42e50e230c5f6047d222f24d2e1ea5988039bee/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a42e50e230c5f6047d222f24d2e1ea5988039bee/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.stdout?ref=a42e50e230c5f6047d222f24d2e1ea5988039bee", "patch": "@@ -759,6 +759,80 @@ impl ::core::cmp::Ord for Enum1 {\n     }\n }\n \n+// A C-like, fieldless enum with a single variant.\n+enum Fieldless1 {\n+\n+    #[default]\n+    A,\n+}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::clone::Clone for Fieldless1 {\n+    #[inline]\n+    fn clone(&self) -> Fieldless1 {\n+        match &*self { &Fieldless1::A => Fieldless1::A, }\n+    }\n+}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::fmt::Debug for Fieldless1 {\n+    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {\n+        match &*self {\n+            &Fieldless1::A => ::core::fmt::Formatter::write_str(f, \"A\"),\n+        }\n+    }\n+}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::default::Default for Fieldless1 {\n+    #[inline]\n+    fn default() -> Fieldless1 { Self::A }\n+}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::hash::Hash for Fieldless1 {\n+    fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n+        match &*self { _ => {} }\n+    }\n+}\n+impl ::core::marker::StructuralPartialEq for Fieldless1 {}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::cmp::PartialEq for Fieldless1 {\n+    #[inline]\n+    fn eq(&self, other: &Fieldless1) -> bool {\n+        match (&*self, &*other) { _ => true, }\n+    }\n+}\n+impl ::core::marker::StructuralEq for Fieldless1 {}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::cmp::Eq for Fieldless1 {\n+    #[inline]\n+    #[doc(hidden)]\n+    #[no_coverage]\n+    fn assert_receiver_is_total_eq(&self) -> () {}\n+}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::cmp::PartialOrd for Fieldless1 {\n+    #[inline]\n+    fn partial_cmp(&self, other: &Fieldless1)\n+        -> ::core::option::Option<::core::cmp::Ordering> {\n+        match (&*self, &*other) {\n+            _ => ::core::option::Option::Some(::core::cmp::Ordering::Equal),\n+        }\n+    }\n+}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::cmp::Ord for Fieldless1 {\n+    #[inline]\n+    fn cmp(&self, other: &Fieldless1) -> ::core::cmp::Ordering {\n+        match (&*self, &*other) { _ => ::core::cmp::Ordering::Equal, }\n+    }\n+}\n+\n // A C-like, fieldless enum.\n enum Fieldless {\n "}]}