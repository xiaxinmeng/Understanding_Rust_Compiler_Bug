{"sha": "db391c46130c823d9087ffb6b8855cf0da43238d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMzkxYzQ2MTMwYzgyM2Q5MDg3ZmZiNmI4ODU1Y2YwZGE0MzIzOGQ=", "commit": {"author": {"name": "daubaris", "email": "paulius.daubaris@gmail.com", "date": "2018-09-04T15:52:18Z"}, "committer": {"name": "daubaris", "email": "paulius.daubaris@gmail.com", "date": "2018-09-04T15:52:18Z"}, "message": "Merge branch 'master' of https://github.com/rust-lang-nursery/rust-clippy into range-plus-one", "tree": {"sha": "f9f76822c8ae9382c893ce1460b6537f1e602bb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9f76822c8ae9382c893ce1460b6537f1e602bb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db391c46130c823d9087ffb6b8855cf0da43238d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db391c46130c823d9087ffb6b8855cf0da43238d", "html_url": "https://github.com/rust-lang/rust/commit/db391c46130c823d9087ffb6b8855cf0da43238d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db391c46130c823d9087ffb6b8855cf0da43238d/comments", "author": {"login": "daubaris", "id": 16244425, "node_id": "MDQ6VXNlcjE2MjQ0NDI1", "avatar_url": "https://avatars.githubusercontent.com/u/16244425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daubaris", "html_url": "https://github.com/daubaris", "followers_url": "https://api.github.com/users/daubaris/followers", "following_url": "https://api.github.com/users/daubaris/following{/other_user}", "gists_url": "https://api.github.com/users/daubaris/gists{/gist_id}", "starred_url": "https://api.github.com/users/daubaris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daubaris/subscriptions", "organizations_url": "https://api.github.com/users/daubaris/orgs", "repos_url": "https://api.github.com/users/daubaris/repos", "events_url": "https://api.github.com/users/daubaris/events{/privacy}", "received_events_url": "https://api.github.com/users/daubaris/received_events", "type": "User", "site_admin": false}, "committer": {"login": "daubaris", "id": 16244425, "node_id": "MDQ6VXNlcjE2MjQ0NDI1", "avatar_url": "https://avatars.githubusercontent.com/u/16244425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daubaris", "html_url": "https://github.com/daubaris", "followers_url": "https://api.github.com/users/daubaris/followers", "following_url": "https://api.github.com/users/daubaris/following{/other_user}", "gists_url": "https://api.github.com/users/daubaris/gists{/gist_id}", "starred_url": "https://api.github.com/users/daubaris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daubaris/subscriptions", "organizations_url": "https://api.github.com/users/daubaris/orgs", "repos_url": "https://api.github.com/users/daubaris/repos", "events_url": "https://api.github.com/users/daubaris/events{/privacy}", "received_events_url": "https://api.github.com/users/daubaris/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f0a99a3a47988a8ef34fa3c76564179445bae8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f0a99a3a47988a8ef34fa3c76564179445bae8f", "html_url": "https://github.com/rust-lang/rust/commit/2f0a99a3a47988a8ef34fa3c76564179445bae8f"}, {"sha": "b7587d8176ee1b866e8c2eb49e32a1ff4f029a2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7587d8176ee1b866e8c2eb49e32a1ff4f029a2f", "html_url": "https://github.com/rust-lang/rust/commit/b7587d8176ee1b866e8c2eb49e32a1ff4f029a2f"}], "stats": {"total": 170, "additions": 152, "deletions": 18}, "files": [{"sha": "b85605dc3b316f64d4f5ccd7eac6d0f909e98876", "filename": "PUBLISH.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db391c46130c823d9087ffb6b8855cf0da43238d/PUBLISH.md", "raw_url": "https://github.com/rust-lang/rust/raw/db391c46130c823d9087ffb6b8855cf0da43238d/PUBLISH.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/PUBLISH.md?ref=db391c46130c823d9087ffb6b8855cf0da43238d", "patch": "@@ -2,7 +2,6 @@ Steps to publish a new Clippy version\n \n - Bump `package.version` in `./Cargo.toml` (no need to manually bump `dependencies.clippy_lints.version`).\n - Write a changelog entry.\n-- If a nightly update is needed, update `min_version.txt` using `rustc -vV > min_version.txt`\n - Run `./pre_publish.sh`\n - Review and commit all changed files\n - `git push`"}, {"sha": "1c930c1b2c95e531928f002e295c50f0eb31d782", "filename": "build.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/db391c46130c823d9087ffb6b8855cf0da43238d/build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db391c46130c823d9087ffb6b8855cf0da43238d/build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.rs?ref=db391c46130c823d9087ffb6b8855cf0da43238d", "patch": "@@ -1,18 +1,3 @@\n-//! This build script ensures that Clippy is not compiled with an\n-//! incompatible version of rust. It will panic with a descriptive\n-//! error message instead.\n-//!\n-//! We specifially want to ensure that Clippy is only built with a\n-//! rustc version that is newer or equal to the one specified in the\n-//! `min_version.txt` file.\n-//!\n-//! `min_version.txt` is in the repo but also in the `.gitignore` to\n-//! make sure that it is not updated manually by accident. Only CI\n-//! should update that file.\n-//!\n-//! This build script was originally taken from the Rocket web framework:\n-//! https://github.com/SergioBenitez/Rocket\n-\n use std::env;\n \n fn main() {"}, {"sha": "23fdbf648e3078a49b2e7a2ea6f681a7031f7c36", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db391c46130c823d9087ffb6b8855cf0da43238d/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db391c46130c823d9087ffb6b8855cf0da43238d/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=db391c46130c823d9087ffb6b8855cf0da43238d", "patch": "@@ -554,6 +554,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         loops::ITER_NEXT_LOOP,\n         loops::MANUAL_MEMCPY,\n         loops::MUT_RANGE_BOUND,\n+        loops::NEEDLESS_COLLECT,\n         loops::NEEDLESS_RANGE_LOOP,\n         loops::NEVER_LOOP,\n         loops::REVERSE_RANGE_LOOP,\n@@ -904,6 +905,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         escape::BOXED_LOCAL,\n         large_enum_variant::LARGE_ENUM_VARIANT,\n         loops::MANUAL_MEMCPY,\n+        loops::NEEDLESS_COLLECT,\n         loops::UNUSED_COLLECT,\n         methods::EXPECT_FUN_CALL,\n         methods::ITER_NTH,"}, {"sha": "8a12530cb0d2591636f2490923d6d76c1cae190b", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/db391c46130c823d9087ffb6b8855cf0da43238d/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db391c46130c823d9087ffb6b8855cf0da43238d/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=db391c46130c823d9087ffb6b8855cf0da43238d", "patch": "@@ -14,10 +14,12 @@ use rustc::middle::mem_categorization::Categorization;\n use rustc::middle::mem_categorization::cmt_;\n use rustc::ty::{self, Ty};\n use rustc::ty::subst::Subst;\n+use rustc_errors::Applicability;\n use std::collections::{HashMap, HashSet};\n use std::iter::{once, Iterator};\n use syntax::ast;\n use syntax::source_map::Span;\n+use syntax_pos::BytePos;\n use crate::utils::{sugg, sext};\n use crate::utils::usage::mutated_variables;\n use crate::consts::{constant, Constant};\n@@ -223,6 +225,27 @@ declare_clippy_lint! {\n      written as a for loop\"\n }\n \n+/// **What it does:** Checks for functions collecting an iterator when collect\n+/// is not needed.\n+///\n+/// **Why is this bad?** `collect` causes the allocation of a new data structure,\n+/// when this allocation may not be needed.\n+///\n+/// **Known problems:**\n+/// None\n+///\n+/// **Example:**\n+/// ```rust\n+/// let len = iterator.collect::<Vec<_>>().len();\n+/// // should be\n+/// let len = iterator.count();\n+/// ```\n+declare_clippy_lint! {\n+    pub NEEDLESS_COLLECT,\n+    perf,\n+    \"collecting an iterator when collect is not needed\"\n+}\n+\n /// **What it does:** Checks for loops over ranges `x..y` where both `x` and `y`\n /// are constant and `x` is greater or equal to `y`, unless the range is\n /// reversed or has a negative `.step_by(_)`.\n@@ -400,6 +423,7 @@ impl LintPass for Pass {\n             FOR_LOOP_OVER_OPTION,\n             WHILE_LET_LOOP,\n             UNUSED_COLLECT,\n+            NEEDLESS_COLLECT,\n             REVERSE_RANGE_LOOP,\n             EXPLICIT_COUNTER_LOOP,\n             EMPTY_LOOP,\n@@ -523,6 +547,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         if let ExprKind::While(ref cond, _, _) = expr.node {\n             check_infinite_loop(cx, cond, expr);\n         }\n+\n+        check_needless_collect(expr, cx);\n     }\n \n     fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, stmt: &'tcx Stmt) {\n@@ -2241,3 +2267,71 @@ impl<'a, 'tcx> Visitor<'tcx> for VarCollectorVisitor<'a, 'tcx> {\n         NestedVisitorMap::None\n     }\n }\n+\n+const NEEDLESS_COLLECT_MSG: &str = \"avoid using `collect()` when not needed\";\n+\n+fn check_needless_collect<'a, 'tcx>(expr: &'tcx Expr, cx: &LateContext<'a, 'tcx>) {\n+    if_chain! {\n+        if let ExprKind::MethodCall(ref method, _, ref args) = expr.node;\n+        if let ExprKind::MethodCall(ref chain_method, _, _) = args[0].node;\n+        if chain_method.ident.name == \"collect\" && match_trait_method(cx, &args[0], &paths::ITERATOR);\n+        if let Some(ref generic_args) = chain_method.args;\n+        if let Some(GenericArg::Type(ref ty)) = generic_args.args.get(0);\n+        then {\n+            let ty = cx.tables.node_id_to_type(ty.hir_id);\n+            if match_type(cx, ty, &paths::VEC) ||\n+                match_type(cx, ty, &paths::VEC_DEQUE) ||\n+                match_type(cx, ty, &paths::BTREEMAP) ||\n+                match_type(cx, ty, &paths::HASHMAP) {\n+                if method.ident.name == \"len\" {\n+                    let span = shorten_needless_collect_span(expr);\n+                    span_lint_and_then(cx, NEEDLESS_COLLECT, span, NEEDLESS_COLLECT_MSG, |db| {\n+                        db.span_suggestion_with_applicability(\n+                            span,\n+                            \"replace with\",\n+                            \".count()\".to_string(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    });\n+                }\n+                if method.ident.name == \"is_empty\" {\n+                    let span = shorten_needless_collect_span(expr);\n+                    span_lint_and_then(cx, NEEDLESS_COLLECT, span, NEEDLESS_COLLECT_MSG, |db| {\n+                        db.span_suggestion_with_applicability(\n+                            span,\n+                            \"replace with\",\n+                            \".next().is_none()\".to_string(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    });\n+                }\n+                if method.ident.name == \"contains\" {\n+                    let contains_arg = snippet(cx, args[1].span, \"??\");\n+                    let span = shorten_needless_collect_span(expr);\n+                    span_lint_and_then(cx, NEEDLESS_COLLECT, span, NEEDLESS_COLLECT_MSG, |db| {\n+                        db.span_suggestion_with_applicability(\n+                            span,\n+                            \"replace with\",\n+                            format!(\n+                                \".any(|&x| x == {})\",\n+                                if contains_arg.starts_with('&') { &contains_arg[1..] } else { &contains_arg }\n+                            ),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    });\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn shorten_needless_collect_span(expr: &Expr) -> Span {\n+    if_chain! {\n+        if let ExprKind::MethodCall(_, _, ref args) = expr.node;\n+        if let ExprKind::MethodCall(_, ref span, _) = args[0].node;\n+        then {\n+            return expr.span.with_lo(span.lo() - BytePos(1));\n+        }\n+    }\n+    unreachable!()\n+}"}, {"sha": "16e39ff13ea2635913bff974685ec6d703fa175b", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/db391c46130c823d9087ffb6b8855cf0da43238d/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db391c46130c823d9087ffb6b8855cf0da43238d/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=db391c46130c823d9087ffb6b8855cf0da43238d", "patch": "@@ -3,6 +3,7 @@\n #![deny(clippy::missing_docs_in_private_items)]\n \n use lazy_static::lazy_static;\n+use std::default::Default;\n use std::{env, fmt, fs, io, path};\n use std::io::Read;\n use syntax::{ast, source_map};\n@@ -65,7 +66,7 @@ macro_rules! define_Conf {\n         mod helpers {\n             use serde_derive::Deserialize;\n             /// Type used to store lint configuration.\n-            #[derive(Default, Deserialize)]\n+            #[derive(Deserialize)]\n             #[serde(rename_all=\"kebab-case\", deny_unknown_fields)]\n             pub struct Conf {\n                 $(#[$doc] #[serde(default=$rust_name_str)] #[serde(with=$rust_name_str)]\n@@ -146,6 +147,12 @@ define_Conf! {\n     (trivial_copy_size_limit, \"trivial_copy_size_limit\", None => Option<u64>),\n }\n \n+impl Default for Conf {\n+    fn default() -> Conf {\n+        toml::from_str(\"\").expect(\"we never error on empty config files\")\n+    }\n+}\n+\n /// Search for the configuration file.\n pub fn lookup_conf_file() -> io::Result<Option<path::PathBuf>> {\n     /// Possible filename to search for.\n@@ -180,7 +187,7 @@ pub fn lookup_conf_file() -> io::Result<Option<path::PathBuf>> {\n ///\n /// Used internally for convenience\n fn default(errors: Vec<Error>) -> (Conf, Vec<Error>) {\n-    (toml::from_str(\"\").expect(\"we never error on empty config files\"), errors)\n+    (Conf::default(), errors)\n }\n \n /// Read the `toml` configuration file."}, {"sha": "b001f20d5279f6d664274148f29bf55116cff231", "filename": "tests/ui/needless_collect.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/db391c46130c823d9087ffb6b8855cf0da43238d/tests%2Fui%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db391c46130c823d9087ffb6b8855cf0da43238d/tests%2Fui%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect.rs?ref=db391c46130c823d9087ffb6b8855cf0da43238d", "patch": "@@ -0,0 +1,19 @@\n+#![feature(tool_lints)]\n+\n+use std::collections::{HashMap, HashSet, BTreeSet};\n+\n+#[warn(clippy::needless_collect)]\n+#[allow(unused_variables, clippy::iter_cloned_collect)]\n+fn main() {\n+    let sample = [1; 5];\n+    let len = sample.iter().collect::<Vec<_>>().len();\n+    if sample.iter().collect::<Vec<_>>().is_empty() {\n+        // Empty\n+    }\n+    sample.iter().cloned().collect::<Vec<_>>().contains(&1);\n+    sample.iter().map(|x| (x, x)).collect::<HashMap<_, _>>().len();\n+    // Notice the `HashSet`--this should not be linted\n+    sample.iter().collect::<HashSet<_>>().len();\n+    // Neither should this\n+    sample.iter().collect::<BTreeSet<_>>().len();\n+}"}, {"sha": "0124db3b9758a84436f87c7b5325b3013c4d0624", "filename": "tests/ui/needless_collect.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/db391c46130c823d9087ffb6b8855cf0da43238d/tests%2Fui%2Fneedless_collect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db391c46130c823d9087ffb6b8855cf0da43238d/tests%2Fui%2Fneedless_collect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect.stderr?ref=db391c46130c823d9087ffb6b8855cf0da43238d", "patch": "@@ -0,0 +1,28 @@\n+error: avoid using `collect()` when not needed\n+ --> $DIR/needless_collect.rs:9:28\n+  |\n+9 |     let len = sample.iter().collect::<Vec<_>>().len();\n+  |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `.count()`\n+  |\n+  = note: `-D clippy::needless-collect` implied by `-D warnings`\n+\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect.rs:10:21\n+   |\n+10 |     if sample.iter().collect::<Vec<_>>().is_empty() {\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `.next().is_none()`\n+\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect.rs:13:27\n+   |\n+13 |     sample.iter().cloned().collect::<Vec<_>>().contains(&1);\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `.any(|&x| x == 1)`\n+\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect.rs:14:34\n+   |\n+14 |     sample.iter().map(|x| (x, x)).collect::<HashMap<_, _>>().len();\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `.count()`\n+\n+error: aborting due to 4 previous errors\n+"}]}