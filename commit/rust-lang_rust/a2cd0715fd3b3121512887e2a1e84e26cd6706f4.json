{"sha": "a2cd0715fd3b3121512887e2a1e84e26cd6706f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyY2QwNzE1ZmQzYjMxMjE1MTI4ODdlMmExZTg0ZTI2Y2Q2NzA2ZjQ=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-01-22T07:54:46Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-02-05T07:42:49Z"}, "message": "Move traits::Reveal to traits::types.", "tree": {"sha": "5268a8a531b7730f2afc7709e3c7ead6ba69f4ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5268a8a531b7730f2afc7709e3c7ead6ba69f4ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2cd0715fd3b3121512887e2a1e84e26cd6706f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2cd0715fd3b3121512887e2a1e84e26cd6706f4", "html_url": "https://github.com/rust-lang/rust/commit/a2cd0715fd3b3121512887e2a1e84e26cd6706f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2cd0715fd3b3121512887e2a1e84e26cd6706f4/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "369f3601592f38b0689bb58b38094edd3164c9d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/369f3601592f38b0689bb58b38094edd3164c9d9", "html_url": "https://github.com/rust-lang/rust/commit/369f3601592f38b0689bb58b38094edd3164c9d9"}], "stats": {"total": 88, "additions": 45, "deletions": 43}, "files": [{"sha": "53ebc3176aa231b2204353dce52d74dfaca0ff41", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2cd0715fd3b3121512887e2a1e84e26cd6706f4/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2cd0715fd3b3121512887e2a1e84e26cd6706f4/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=a2cd0715fd3b3121512887e2a1e84e26cd6706f4", "patch": "@@ -51,7 +51,7 @@ pub use self::object_safety::ObjectSafetyViolation;\n pub use self::on_unimplemented::{OnUnimplementedDirective, OnUnimplementedNote};\n pub use self::project::MismatchedProjectionTypes;\n pub use self::project::{normalize, normalize_projection_type, poly_project_and_unify_type};\n-pub use self::project::{Normalized, ProjectionCache, ProjectionCacheSnapshot, Reveal};\n+pub use self::project::{Normalized, ProjectionCache, ProjectionCacheSnapshot};\n pub use self::select::{EvaluationCache, SelectionCache, SelectionContext};\n pub use self::select::{EvaluationResult, IntercrateAmbiguityCause, OverflowError};\n pub use self::specialize::find_associated_item;"}, {"sha": "fffcf66075f932b7c7590e5974402a953a79aeb5", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 42, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a2cd0715fd3b3121512887e2a1e84e26cd6706f4/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2cd0715fd3b3121512887e2a1e84e26cd6706f4/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=a2cd0715fd3b3121512887e2a1e84e26cd6706f4", "patch": "@@ -19,52 +19,11 @@ use crate::ty::subst::{InternalSubsts, Subst};\n use crate::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, WithConstness};\n use rustc_data_structures::snapshot_map::{Snapshot, SnapshotMap};\n use rustc_hir::def_id::DefId;\n-use rustc_macros::HashStable;\n use rustc_span::symbol::sym;\n use rustc_span::DUMMY_SP;\n use syntax::ast::Ident;\n \n-/// Depending on the stage of compilation, we want projection to be\n-/// more or less conservative.\n-#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, HashStable)]\n-pub enum Reveal {\n-    /// At type-checking time, we refuse to project any associated\n-    /// type that is marked `default`. Non-`default` (\"final\") types\n-    /// are always projected. This is necessary in general for\n-    /// soundness of specialization. However, we *could* allow\n-    /// projections in fully-monomorphic cases. We choose not to,\n-    /// because we prefer for `default type` to force the type\n-    /// definition to be treated abstractly by any consumers of the\n-    /// impl. Concretely, that means that the following example will\n-    /// fail to compile:\n-    ///\n-    /// ```\n-    /// trait Assoc {\n-    ///     type Output;\n-    /// }\n-    ///\n-    /// impl<T> Assoc for T {\n-    ///     default type Output = bool;\n-    /// }\n-    ///\n-    /// fn main() {\n-    ///     let <() as Assoc>::Output = true;\n-    /// }\n-    UserFacing,\n-\n-    /// At codegen time, all monomorphic projections will succeed.\n-    /// Also, `impl Trait` is normalized to the concrete type,\n-    /// which has to be already collected by type-checking.\n-    ///\n-    /// NOTE: as `impl Trait`'s concrete type should *never*\n-    /// be observable directly by the user, `Reveal::All`\n-    /// should not be used by checks which may expose\n-    /// type equality or type contents to the user.\n-    /// There are some exceptions, e.g., around OIBITS and\n-    /// transmute-checking, which expose some details, but\n-    /// not the whole concrete type of the `impl Trait`.\n-    All,\n-}\n+pub use rustc::traits::Reveal;\n \n pub type PolyProjectionObligation<'tcx> = Obligation<'tcx, ty::PolyProjectionPredicate<'tcx>>;\n "}, {"sha": "a9db2a772546018300eb27171c35d47201481074", "filename": "src/librustc/traits/types/mod.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a2cd0715fd3b3121512887e2a1e84e26cd6706f4/src%2Flibrustc%2Ftraits%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2cd0715fd3b3121512887e2a1e84e26cd6706f4/src%2Flibrustc%2Ftraits%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ftypes%2Fmod.rs?ref=a2cd0715fd3b3121512887e2a1e84e26cd6706f4", "patch": "@@ -19,6 +19,49 @@ pub use self::ObligationCauseCode::*;\n pub use self::SelectionError::*;\n pub use self::Vtable::*;\n \n+/// Depending on the stage of compilation, we want projection to be\n+/// more or less conservative.\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, HashStable)]\n+pub enum Reveal {\n+    /// At type-checking time, we refuse to project any associated\n+    /// type that is marked `default`. Non-`default` (\"final\") types\n+    /// are always projected. This is necessary in general for\n+    /// soundness of specialization. However, we *could* allow\n+    /// projections in fully-monomorphic cases. We choose not to,\n+    /// because we prefer for `default type` to force the type\n+    /// definition to be treated abstractly by any consumers of the\n+    /// impl. Concretely, that means that the following example will\n+    /// fail to compile:\n+    ///\n+    /// ```\n+    /// trait Assoc {\n+    ///     type Output;\n+    /// }\n+    ///\n+    /// impl<T> Assoc for T {\n+    ///     default type Output = bool;\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     let <() as Assoc>::Output = true;\n+    /// }\n+    /// ```\n+    UserFacing,\n+\n+    /// At codegen time, all monomorphic projections will succeed.\n+    /// Also, `impl Trait` is normalized to the concrete type,\n+    /// which has to be already collected by type-checking.\n+    ///\n+    /// NOTE: as `impl Trait`'s concrete type should *never*\n+    /// be observable directly by the user, `Reveal::All`\n+    /// should not be used by checks which may expose\n+    /// type equality or type contents to the user.\n+    /// There are some exceptions, e.g., around OIBITS and\n+    /// transmute-checking, which expose some details, but\n+    /// not the whole concrete type of the `impl Trait`.\n+    All,\n+}\n+\n /// The reason why we incurred this obligation; used for error reporting.\n #[derive(Clone, Debug, PartialEq, Eq, Hash)]\n pub struct ObligationCause<'tcx> {"}]}