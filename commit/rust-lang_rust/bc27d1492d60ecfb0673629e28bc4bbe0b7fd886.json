{"sha": "bc27d1492d60ecfb0673629e28bc4bbe0b7fd886", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMjdkMTQ5MmQ2MGVjZmIwNjczNjI5ZTI4YmM0YmJlMGI3ZmQ4ODY=", "commit": {"author": {"name": "Patrick Jos\u00e9 Pereira", "email": "patrickelectric@gmail.com", "date": "2020-10-08T03:19:56Z"}, "committer": {"name": "Patrick Jos\u00e9 Pereira", "email": "patrickelectric@gmail.com", "date": "2020-11-05T00:17:46Z"}, "message": "Add string_from_utf8_as_bytes linter\n\nSigned-off-by: Patrick Jos\u00e9 Pereira <patrickelectric@gmail.com>", "tree": {"sha": "3636989d25dd14aa4220952af1cca73f5abf2612", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3636989d25dd14aa4220952af1cca73f5abf2612"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc27d1492d60ecfb0673629e28bc4bbe0b7fd886", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc27d1492d60ecfb0673629e28bc4bbe0b7fd886", "html_url": "https://github.com/rust-lang/rust/commit/bc27d1492d60ecfb0673629e28bc4bbe0b7fd886", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc27d1492d60ecfb0673629e28bc4bbe0b7fd886/comments", "author": {"login": "patrickelectric", "id": 1215497, "node_id": "MDQ6VXNlcjEyMTU0OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1215497?v=4", "gravatar_id": "", "url": "https://api.github.com/users/patrickelectric", "html_url": "https://github.com/patrickelectric", "followers_url": "https://api.github.com/users/patrickelectric/followers", "following_url": "https://api.github.com/users/patrickelectric/following{/other_user}", "gists_url": "https://api.github.com/users/patrickelectric/gists{/gist_id}", "starred_url": "https://api.github.com/users/patrickelectric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/patrickelectric/subscriptions", "organizations_url": "https://api.github.com/users/patrickelectric/orgs", "repos_url": "https://api.github.com/users/patrickelectric/repos", "events_url": "https://api.github.com/users/patrickelectric/events{/privacy}", "received_events_url": "https://api.github.com/users/patrickelectric/received_events", "type": "User", "site_admin": false}, "committer": {"login": "patrickelectric", "id": 1215497, "node_id": "MDQ6VXNlcjEyMTU0OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1215497?v=4", "gravatar_id": "", "url": "https://api.github.com/users/patrickelectric", "html_url": "https://github.com/patrickelectric", "followers_url": "https://api.github.com/users/patrickelectric/followers", "following_url": "https://api.github.com/users/patrickelectric/following{/other_user}", "gists_url": "https://api.github.com/users/patrickelectric/gists{/gist_id}", "starred_url": "https://api.github.com/users/patrickelectric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/patrickelectric/subscriptions", "organizations_url": "https://api.github.com/users/patrickelectric/orgs", "repos_url": "https://api.github.com/users/patrickelectric/repos", "events_url": "https://api.github.com/users/patrickelectric/events{/privacy}", "received_events_url": "https://api.github.com/users/patrickelectric/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e298c830af37e48a7778b3e6a487a2107230e8a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e298c830af37e48a7778b3e6a487a2107230e8a6", "html_url": "https://github.com/rust-lang/rust/commit/e298c830af37e48a7778b3e6a487a2107230e8a6"}], "stats": {"total": 102, "additions": 99, "deletions": 3}, "files": [{"sha": "aeccf6cf83b678562b66c5be7963723a682a1d67", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc27d1492d60ecfb0673629e28bc4bbe0b7fd886/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/bc27d1492d60ecfb0673629e28bc4bbe0b7fd886/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=bc27d1492d60ecfb0673629e28bc4bbe0b7fd886", "patch": "@@ -1952,6 +1952,7 @@ Released 2018-09-13\n [`string_add`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_add\n [`string_add_assign`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_add_assign\n [`string_extend_chars`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_extend_chars\n+[`string_from_utf8_as_bytes`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_from_utf8_as_bytes\n [`string_lit_as_bytes`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_lit_as_bytes\n [`string_to_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_to_string\n [`struct_excessive_bools`]: https://rust-lang.github.io/rust-clippy/master/index.html#struct_excessive_bools"}, {"sha": "d29ba33064c6deeab30229f02ea0ecc16778f4e0", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bc27d1492d60ecfb0673629e28bc4bbe0b7fd886/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc27d1492d60ecfb0673629e28bc4bbe0b7fd886/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=bc27d1492d60ecfb0673629e28bc4bbe0b7fd886", "patch": "@@ -826,6 +826,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &stable_sort_primitive::STABLE_SORT_PRIMITIVE,\n         &strings::STRING_ADD,\n         &strings::STRING_ADD_ASSIGN,\n+        &strings::STRING_FROM_UTF8_AS_BYTES,\n         &strings::STRING_LIT_AS_BYTES,\n         &suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL,\n         &suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL,\n@@ -1515,6 +1516,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS),\n         LintId::of(&slow_vector_initialization::SLOW_VECTOR_INITIALIZATION),\n         LintId::of(&stable_sort_primitive::STABLE_SORT_PRIMITIVE),\n+        LintId::of(&strings::STRING_FROM_UTF8_AS_BYTES),\n         LintId::of(&suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n         LintId::of(&suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n         LintId::of(&swap::ALMOST_SWAPPED),\n@@ -1738,6 +1740,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&reference::DEREF_ADDROF),\n         LintId::of(&reference::REF_IN_DEREF),\n         LintId::of(&repeat_once::REPEAT_ONCE),\n+        LintId::of(&strings::STRING_FROM_UTF8_AS_BYTES),\n         LintId::of(&swap::MANUAL_SWAP),\n         LintId::of(&temporary_assignment::TEMPORARY_ASSIGNMENT),\n         LintId::of(&transmute::CROSSPOINTER_TRANSMUTE),"}, {"sha": "a55df1e55028d1793593ef810c229b0b00edaa7c", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 65, "deletions": 3, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/bc27d1492d60ecfb0673629e28bc4bbe0b7fd886/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc27d1492d60ecfb0673629e28bc4bbe0b7fd886/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=bc27d1492d60ecfb0673629e28bc4bbe0b7fd886", "patch": "@@ -1,5 +1,5 @@\n use rustc_errors::Applicability;\n-use rustc_hir::{BinOpKind, Expr, ExprKind};\n+use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, LangItem, QPath};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -8,7 +8,10 @@ use rustc_span::source_map::Spanned;\n use if_chain::if_chain;\n \n use crate::utils::SpanlessEq;\n-use crate::utils::{get_parent_expr, is_allowed, is_type_diagnostic_item, span_lint, span_lint_and_sugg};\n+use crate::utils::{\n+    get_parent_expr, is_allowed, is_type_diagnostic_item, match_function_call, method_calls, paths, span_lint,\n+    span_lint_and_sugg,\n+};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for string appends of the form `x = x + y` (without\n@@ -173,16 +176,75 @@ fn is_add(cx: &LateContext<'_>, src: &Expr<'_>, target: &Expr<'_>) -> bool {\n     }\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Check if the string is transformed to byte array and casted back to string.\n+    ///\n+    /// **Why is this bad?** It's unnecessary, the string can be used directly.\n+    ///\n+    /// **Known problems:** None\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// let _ = std::str::from_utf8(&\"Hello World!\".as_bytes()[6..11]).unwrap();\n+    /// ```\n+    /// could be written as\n+    /// ```rust\n+    /// let _ = &\"Hello World!\"[6..11];\n+    /// ```\n+    pub STRING_FROM_UTF8_AS_BYTES,\n+    complexity,\n+    \"casting string slices to byte slices and back\"\n+}\n+\n // Max length a b\"foo\" string can take\n const MAX_LENGTH_BYTE_STRING_LIT: usize = 32;\n \n-declare_lint_pass!(StringLitAsBytes => [STRING_LIT_AS_BYTES]);\n+declare_lint_pass!(StringLitAsBytes => [STRING_LIT_AS_BYTES, STRING_FROM_UTF8_AS_BYTES]);\n \n impl<'tcx> LateLintPass<'tcx> for StringLitAsBytes {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n         use crate::utils::{snippet, snippet_with_applicability};\n         use rustc_ast::LitKind;\n \n+        if_chain! {\n+            // Find std::str::converts::from_utf8\n+            if let Some(args) = match_function_call(cx, e, &paths::STR_FROM_UTF8);\n+\n+            // Find string::as_bytes\n+            if let ExprKind::AddrOf(BorrowKind::Ref, _, ref args) = args[0].kind;\n+            if let ExprKind::Index(ref left, ref right) = args.kind;\n+            let (method_names, expressions, _) = method_calls(left, 1);\n+            if method_names.len() == 1;\n+            if expressions.len() == 1;\n+            if expressions[0].len() == 1;\n+            if method_names[0] == sym!(as_bytes);\n+\n+            // Check for slicer\n+            if let ExprKind::Struct(ref path, _, _) = right.kind;\n+            if let QPath::LangItem(LangItem::Range, _) = path;\n+\n+            then {\n+                let mut applicability = Applicability::MachineApplicable;\n+                let string_expression = &expressions[0][0];\n+\n+                let snippet_app = snippet_with_applicability(\n+                    cx,\n+                    string_expression.span, \"..\",\n+                    &mut applicability,\n+                );\n+\n+                span_lint_and_sugg(\n+                    cx,\n+                    STRING_FROM_UTF8_AS_BYTES,\n+                    e.span,\n+                    \"calling a slice of `as_bytes()` with `from_utf8` should be not necessary\",\n+                    \"try\",\n+                    format!(\"Some(&{}[{}])\", snippet_app, snippet(cx, right.span, \"..\")),\n+                    applicability\n+                )\n+            }\n+        }\n+\n         if_chain! {\n             if let ExprKind::MethodCall(path, _, args, _) = &e.kind;\n             if path.ident.name == sym!(as_bytes);"}, {"sha": "0d0ecf9ae9f69139b5209a1d8154e751e036685f", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc27d1492d60ecfb0673629e28bc4bbe0b7fd886/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc27d1492d60ecfb0673629e28bc4bbe0b7fd886/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=bc27d1492d60ecfb0673629e28bc4bbe0b7fd886", "patch": "@@ -120,6 +120,7 @@ pub const STRING: [&str; 3] = [\"alloc\", \"string\", \"String\"];\n pub const STRING_AS_MUT_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"as_mut_str\"];\n pub const STRING_AS_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"as_str\"];\n pub const STR_ENDS_WITH: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"ends_with\"];\n+pub const STR_FROM_UTF8: [&str; 4] = [\"core\", \"str\", \"converts\", \"from_utf8\"];\n pub const STR_LEN: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"len\"];\n pub const STR_STARTS_WITH: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"starts_with\"];\n pub const SYNTAX_CONTEXT: [&str; 3] = [\"rustc_span\", \"hygiene\", \"SyntaxContext\"];"}, {"sha": "4d824cf94be28332bf000f92bd326dee0540de13", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bc27d1492d60ecfb0673629e28bc4bbe0b7fd886/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc27d1492d60ecfb0673629e28bc4bbe0b7fd886/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=bc27d1492d60ecfb0673629e28bc4bbe0b7fd886", "patch": "@@ -2230,6 +2230,13 @@ vec![\n         deprecation: None,\n         module: \"methods\",\n     },\n+    Lint {\n+        name: \"string_from_utf8_as_bytes\",\n+        group: \"complexity\",\n+        desc: \"casting string slices to byte slices and back\",\n+        deprecation: None,\n+        module: \"strings\",\n+    },\n     Lint {\n         name: \"string_lit_as_bytes\",\n         group: \"nursery\","}, {"sha": "6e665cdd5630243264972ad317b061689176d3dd", "filename": "tests/ui/string_from_utf8_as_bytes.fixed", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc27d1492d60ecfb0673629e28bc4bbe0b7fd886/tests%2Fui%2Fstring_from_utf8_as_bytes.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bc27d1492d60ecfb0673629e28bc4bbe0b7fd886/tests%2Fui%2Fstring_from_utf8_as_bytes.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_from_utf8_as_bytes.fixed?ref=bc27d1492d60ecfb0673629e28bc4bbe0b7fd886", "patch": "@@ -0,0 +1,6 @@\n+// run-rustfix\n+#![warn(clippy::string_from_utf8_as_bytes)]\n+\n+fn main() {\n+    let _ = Some(&\"Hello World!\"[6..11]);\n+}"}, {"sha": "670d206d3679c17cf6fded4040e49e83b2b2f736", "filename": "tests/ui/string_from_utf8_as_bytes.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc27d1492d60ecfb0673629e28bc4bbe0b7fd886/tests%2Fui%2Fstring_from_utf8_as_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc27d1492d60ecfb0673629e28bc4bbe0b7fd886/tests%2Fui%2Fstring_from_utf8_as_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_from_utf8_as_bytes.rs?ref=bc27d1492d60ecfb0673629e28bc4bbe0b7fd886", "patch": "@@ -0,0 +1,6 @@\n+// run-rustfix\n+#![warn(clippy::string_from_utf8_as_bytes)]\n+\n+fn main() {\n+    let _ = std::str::from_utf8(&\"Hello World!\".as_bytes()[6..11]);\n+}"}, {"sha": "bf5e5d33e8f9ab287f124f7ecb083c92dc327eb0", "filename": "tests/ui/string_from_utf8_as_bytes.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bc27d1492d60ecfb0673629e28bc4bbe0b7fd886/tests%2Fui%2Fstring_from_utf8_as_bytes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc27d1492d60ecfb0673629e28bc4bbe0b7fd886/tests%2Fui%2Fstring_from_utf8_as_bytes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_from_utf8_as_bytes.stderr?ref=bc27d1492d60ecfb0673629e28bc4bbe0b7fd886", "patch": "@@ -0,0 +1,10 @@\n+error: calling a slice of `as_bytes()` with `from_utf8` should be not necessary\n+  --> $DIR/string_from_utf8_as_bytes.rs:5:13\n+   |\n+LL |     let _ = std::str::from_utf8(&\"Hello World!\".as_bytes()[6..11]);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Some(&\"Hello World!\"[6..11])`\n+   |\n+   = note: `-D clippy::string-from-utf8-as-bytes` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}]}