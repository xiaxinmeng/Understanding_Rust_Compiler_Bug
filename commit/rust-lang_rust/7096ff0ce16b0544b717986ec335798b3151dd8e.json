{"sha": "7096ff0ce16b0544b717986ec335798b3151dd8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwOTZmZjBjZTE2YjA1NDRiNzE3OTg2ZWMzMzU3OThiMzE1MWRkOGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-03T11:10:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-03T11:10:45Z"}, "message": "Auto merge of #57214 - Zoxc:no-local-interners, r=eddyb\n\nStore CtxtInterners for local values in AllArenas\n\nr? @eddyb", "tree": {"sha": "b1d51b1158d86586d84e2a6c5802590fb5f0b4fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1d51b1158d86586d84e2a6c5802590fb5f0b4fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7096ff0ce16b0544b717986ec335798b3151dd8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7096ff0ce16b0544b717986ec335798b3151dd8e", "html_url": "https://github.com/rust-lang/rust/commit/7096ff0ce16b0544b717986ec335798b3151dd8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7096ff0ce16b0544b717986ec335798b3151dd8e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da9ebc828c982d2ed49396886da85011e1b0a6c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/da9ebc828c982d2ed49396886da85011e1b0a6c0", "html_url": "https://github.com/rust-lang/rust/commit/da9ebc828c982d2ed49396886da85011e1b0a6c0"}, {"sha": "66a376ea4f8caf9049c90888c1c1caa9a109b02c", "url": "https://api.github.com/repos/rust-lang/rust/commits/66a376ea4f8caf9049c90888c1c1caa9a109b02c", "html_url": "https://github.com/rust-lang/rust/commit/66a376ea4f8caf9049c90888c1c1caa9a109b02c"}], "stats": {"total": 57, "additions": 30, "deletions": 27}, "files": [{"sha": "4414e677fb5b758adb599c7299d1ae81e39ff6ef", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7096ff0ce16b0544b717986ec335798b3151dd8e/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7096ff0ce16b0544b717986ec335798b3151dd8e/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=7096ff0ce16b0544b717986ec335798b3151dd8e", "patch": "@@ -21,11 +21,10 @@ use crate::ty::error::{ExpectedFound, TypeError, UnconstrainedNumeric};\n use crate::ty::fold::{TypeFolder, TypeFoldable};\n use crate::ty::relate::RelateResult;\n use crate::ty::subst::{Kind, InternalSubsts, SubstsRef};\n-use crate::ty::{self, GenericParamDefKind, Ty, TyCtxt, CtxtInterners, InferConst};\n+use crate::ty::{self, GenericParamDefKind, Ty, TyCtxt, InferConst};\n use crate::ty::{FloatVid, IntVid, TyVid, ConstVid};\n use crate::util::nodemap::FxHashMap;\n \n-use arena::SyncDroplessArena;\n use errors::DiagnosticBuilder;\n use rustc_data_structures::unify as ut;\n use std::cell::{Cell, Ref, RefCell, RefMut};\n@@ -468,17 +467,13 @@ impl<'tcx> fmt::Display for FixupError<'tcx> {\n /// `F: for<'b, 'tcx> where 'gcx: 'tcx FnOnce(InferCtxt<'b, 'gcx, 'tcx>)`.\n pub struct InferCtxtBuilder<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     global_tcx: TyCtxt<'a, 'gcx, 'gcx>,\n-    arena: SyncDroplessArena,\n-    interners: Option<CtxtInterners<'tcx>>,\n     fresh_tables: Option<RefCell<ty::TypeckTables<'tcx>>>,\n }\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'gcx> {\n     pub fn infer_ctxt(self) -> InferCtxtBuilder<'a, 'gcx, 'tcx> {\n         InferCtxtBuilder {\n             global_tcx: self,\n-            arena: SyncDroplessArena::default(),\n-            interners: None,\n             fresh_tables: None,\n         }\n     }\n@@ -518,14 +513,10 @@ impl<'a, 'gcx, 'tcx> InferCtxtBuilder<'a, 'gcx, 'tcx> {\n     pub fn enter<R>(&'tcx mut self, f: impl for<'b> FnOnce(InferCtxt<'b, 'gcx, 'tcx>) -> R) -> R {\n         let InferCtxtBuilder {\n             global_tcx,\n-            ref arena,\n-            ref mut interners,\n             ref fresh_tables,\n         } = *self;\n         let in_progress_tables = fresh_tables.as_ref();\n-        // Check that we haven't entered before\n-        assert!(interners.is_none());\n-        global_tcx.enter_local(arena, interners, |tcx| {\n+        global_tcx.enter_local(|tcx| {\n             f(InferCtxt {\n                 tcx,\n                 in_progress_tables,"}, {"sha": "2599b8fbf6ff14a51acf6736c2d6e1a7b7de40c5", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7096ff0ce16b0544b717986ec335798b3151dd8e/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7096ff0ce16b0544b717986ec335798b3151dd8e/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=7096ff0ce16b0544b717986ec335798b3151dd8e", "patch": "@@ -81,12 +81,14 @@ use crate::hir;\n \n pub struct AllArenas {\n     pub interner: SyncDroplessArena,\n+    pub local_interner: SyncDroplessArena,\n }\n \n impl AllArenas {\n     pub fn new() -> Self {\n         AllArenas {\n             interner: SyncDroplessArena::default(),\n+            local_interner: SyncDroplessArena::default(),\n         }\n     }\n }\n@@ -135,7 +137,7 @@ impl<'gcx: 'tcx, 'tcx> CtxtInterners<'tcx> {\n     /// Intern a type\n     #[inline(never)]\n     fn intern_ty(\n-        local: &CtxtInterners<'tcx>,\n+        local: &CtxtInterners<'gcx>,\n         global: &CtxtInterners<'gcx>,\n         st: TyKind<'tcx>\n     ) -> Ty<'tcx> {\n@@ -160,6 +162,12 @@ impl<'gcx: 'tcx, 'tcx> CtxtInterners<'tcx> {\n                         &ty_struct);\n                 }\n \n+                // This is safe because all the types the ty_struct can point to\n+                // already is in the local arena or the global arena\n+                let ty_struct: TyS<'gcx> = unsafe {\n+                    mem::transmute(ty_struct)\n+                };\n+\n                 Interned(local.arena.alloc(ty_struct))\n             }).0\n         } else {\n@@ -1010,8 +1018,8 @@ pub struct FreeRegionInfo {\n #[derive(Copy, Clone)]\n pub struct TyCtxt<'a, 'gcx: 'tcx, 'tcx: 'a> {\n     gcx: &'gcx GlobalCtxt<'gcx>,\n-    interners: &'tcx CtxtInterners<'tcx>,\n-    dummy: PhantomData<&'a ()>,\n+    interners: &'gcx CtxtInterners<'gcx>,\n+    dummy: PhantomData<(&'a (), &'tcx ())>,\n }\n \n impl<'gcx> Deref for TyCtxt<'_, 'gcx, '_> {\n@@ -1026,6 +1034,7 @@ pub struct GlobalCtxt<'tcx> {\n     pub arena: WorkerLocal<Arena<'tcx>>,\n \n     global_interners: CtxtInterners<'tcx>,\n+    local_interners: CtxtInterners<'tcx>,\n \n     cstore: &'tcx CrateStoreDyn,\n \n@@ -1222,6 +1231,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             s.fatal(&err);\n         });\n         let interners = CtxtInterners::new(&arenas.interner);\n+        let local_interners = CtxtInterners::new(&arenas.local_interner);\n         let common = Common {\n             empty_predicates: ty::GenericPredicates {\n                 parent: None,\n@@ -1280,6 +1290,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             cstore,\n             arena: WorkerLocal::new(|_| Arena::default()),\n             global_interners: interners,\n+            local_interners: local_interners,\n             dep_graph,\n             common,\n             types: common_types,\n@@ -1669,18 +1680,15 @@ impl<'gcx> GlobalCtxt<'gcx> {\n     /// with the same lifetime as `arena`.\n     pub fn enter_local<'tcx, F, R>(\n         &'gcx self,\n-        arena: &'tcx SyncDroplessArena,\n-        interners: &'tcx mut Option<CtxtInterners<'tcx>>,\n         f: F\n     ) -> R\n     where\n         F: FnOnce(TyCtxt<'tcx, 'gcx, 'tcx>) -> R,\n         'gcx: 'tcx,\n     {\n-        *interners = Some(CtxtInterners::new(&arena));\n         let tcx = TyCtxt {\n             gcx: self,\n-            interners: interners.as_ref().unwrap(),\n+            interners: &self.local_interners,\n             dummy: PhantomData,\n         };\n         ty::tls::with_related_context(tcx.global_tcx(), |icx| {\n@@ -2286,6 +2294,17 @@ macro_rules! intern_method {\n             pub fn $method(self, v: $alloc) -> &$lt_tcx $ty {\n                 let key = ($alloc_to_key)(&v);\n \n+                let alloc = |v, interners: &'gcx CtxtInterners<'gcx>| {\n+                    // This transmutes $alloc<'tcx> to $alloc<'gcx>\n+                    let v = unsafe {\n+                        mem::transmute(v)\n+                    };\n+                    let i: &$lt_tcx $ty = $alloc_method(&interners.arena, v);\n+                    // Cast to 'gcx\n+                    let i = unsafe { mem::transmute(i) };\n+                    Interned(i)\n+                };\n+\n                 // HACK(eddyb) Depend on flags being accurate to\n                 // determine that all contents are in the global tcx.\n                 // See comments on Lift for why we can't use that.\n@@ -2299,18 +2318,11 @@ macro_rules! intern_method {\n                                 v);\n                         }\n \n-                        Interned($alloc_method(&self.interners.arena, v))\n+                        alloc(v, &self.interners)\n                     }).0\n                 } else {\n                     self.global_interners.$name.borrow_mut().intern_ref(key, || {\n-                        // This transmutes $alloc<'tcx> to $alloc<'gcx>\n-                        let v = unsafe {\n-                            mem::transmute(v)\n-                        };\n-                        let i: &$lt_tcx $ty = $alloc_method(&self.global_interners.arena, v);\n-                        // Cast to 'gcx\n-                        let i = unsafe { mem::transmute(i) };\n-                        Interned(i)\n+                        alloc(v, &self.global_interners)\n                     }).0\n                 }\n             }"}]}