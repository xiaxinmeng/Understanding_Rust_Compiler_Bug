{"sha": "ad6af7a523bc51169858fdaa41f85becf3da3a4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNmFmN2E1MjNiYzUxMTY5ODU4ZmRhYTQxZjg1YmVjZjNkYTNhNGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-18T14:02:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-18T14:02:29Z"}, "message": "Auto merge of #1005 - RalfJung:cleanup, r=RalfJung\n\ncleanup now that borrow checker knows memory is a field\n\n@christianpoveda you said, I think, that `fs.rs` could also be cleaned up to longer remove-and-then-add file descriptors from the table? Could you make a PR for that?", "tree": {"sha": "cb50b2d15157c264b320c2cada15e27e8840c261", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb50b2d15157c264b320c2cada15e27e8840c261"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad6af7a523bc51169858fdaa41f85becf3da3a4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad6af7a523bc51169858fdaa41f85becf3da3a4d", "html_url": "https://github.com/rust-lang/rust/commit/ad6af7a523bc51169858fdaa41f85becf3da3a4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad6af7a523bc51169858fdaa41f85becf3da3a4d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbc1d91f79eefa3a54f06288073186ff8e017f16", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbc1d91f79eefa3a54f06288073186ff8e017f16", "html_url": "https://github.com/rust-lang/rust/commit/fbc1d91f79eefa3a54f06288073186ff8e017f16"}, {"sha": "5481afbaf64c05d5647533df0ec58492af5ef455", "url": "https://api.github.com/repos/rust-lang/rust/commits/5481afbaf64c05d5647533df0ec58492af5ef455", "html_url": "https://github.com/rust-lang/rust/commit/5481afbaf64c05d5647533df0ec58492af5ef455"}], "stats": {"total": 51, "additions": 18, "deletions": 33}, "files": [{"sha": "bb0bad0ea03d729053ca4b063b5072a43a781e05", "filename": "src/eval.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad6af7a523bc51169858fdaa41f85becf3da3a4d/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad6af7a523bc51169858fdaa41f85becf3da3a4d/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=ad6af7a523bc51169858fdaa41f85becf3da3a4d", "patch": "@@ -155,7 +155,6 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     }\n     // Store command line as UTF-16 for Windows `GetCommandLineW`.\n     {\n-        let tcx = &{ ecx.tcx.tcx };\n         let cmd_utf16: Vec<u16> = cmd.encode_utf16().collect();\n         let cmd_ptr = ecx.memory.allocate(\n             Size::from_bytes(cmd_utf16.len() as u64 * 2),\n@@ -169,12 +168,12 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         let mut cur_ptr = cmd_ptr;\n         for &c in cmd_utf16.iter() {\n             cmd_alloc.write_scalar(\n-                tcx,\n+                &*ecx.tcx,\n                 cur_ptr,\n                 Scalar::from_uint(c, char_size).into(),\n                 char_size,\n             )?;\n-            cur_ptr = cur_ptr.offset(char_size, tcx)?;\n+            cur_ptr = cur_ptr.offset(char_size, &*ecx.tcx)?;\n         }\n     }\n "}, {"sha": "c09d5c823e1bb214f306223ea9dfb7978a65c02a", "filename": "src/helpers.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad6af7a523bc51169858fdaa41f85becf3da3a4d/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad6af7a523bc51169858fdaa41f85becf3da3a4d/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=ad6af7a523bc51169858fdaa41f85becf3da3a4d", "patch": "@@ -112,8 +112,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             rng.fill_bytes(&mut data);\n         }\n \n-        let tcx = &{this.tcx.tcx};\n-        this.memory.get_mut(ptr.alloc_id)?.write_bytes(tcx, ptr, &data)\n+        this.memory.get_mut(ptr.alloc_id)?.write_bytes(&*this.tcx, ptr, &data)\n     }\n \n     /// Visits the memory covered by `place`, sensitive to freezing: the 3rd parameter\n@@ -311,8 +310,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     /// Helper function to get the `TyLayout` of a `libc` type\n     fn libc_ty_layout(&mut self, name: &str) -> InterpResult<'tcx, TyLayout<'tcx>> {\n         let this = self.eval_context_mut();\n-        let tcx = &{ this.tcx.tcx };\n-        let ty = this.resolve_path(&[\"libc\", name])?.ty(*tcx);\n+        let ty = this.resolve_path(&[\"libc\", name])?.ty(*this.tcx);\n         this.layout_of(ty)\n     }\n \n@@ -325,14 +323,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n \n-        let tcx = &{ this.tcx.tcx };\n-\n         let mut offset = Size::from_bytes(0);\n \n         for &imm in imms {\n             this.write_immediate_to_mplace(\n                 *imm,\n-                place.offset(offset, None, imm.layout, tcx)?,\n+                place.offset(offset, None, imm.layout, &*this.tcx)?,\n             )?;\n             offset += imm.layout.size;\n         }"}, {"sha": "6078ca26e269a17e11ec2432d43094991fc13330", "filename": "src/shims/env.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad6af7a523bc51169858fdaa41f85becf3da3a4d/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad6af7a523bc51169858fdaa41f85becf3da3a4d/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=ad6af7a523bc51169858fdaa41f85becf3da3a4d", "patch": "@@ -122,10 +122,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.check_no_isolation(\"getcwd\")?;\n \n-        let tcx = &{ this.tcx.tcx };\n-\n         let buf = this.force_ptr(this.read_scalar(buf_op)?.not_undef()?)?;\n-        let size = this.read_scalar(size_op)?.to_usize(&*tcx)?;\n+        let size = this.read_scalar(size_op)?.to_usize(&*this.tcx)?;\n         // If we cannot get the current directory, we return null\n         match env::current_dir() {\n             Ok(cwd) => {\n@@ -142,15 +140,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     // `bytes.len()`, meaning that `bytes` actually fit inside tbe buffer.\n                     this.memory\n                         .get_mut(buf.alloc_id)?\n-                        .write_bytes(tcx, buf, &bytes)?;\n+                        .write_bytes(&*this.tcx, buf, &bytes)?;\n                     return Ok(Scalar::Ptr(buf));\n                 }\n                 let erange = this.eval_libc(\"ERANGE\")?;\n                 this.set_last_error(erange)?;\n             }\n             Err(e) => this.consume_io_error(e)?,\n         }\n-        Ok(Scalar::ptr_null(&*tcx))\n+        Ok(Scalar::ptr_null(&*this.tcx))\n     }\n \n     fn chdir(&mut self, path_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {"}, {"sha": "cfbb02f608130deda2e6ecc30c078bc8ddc8f9ff", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ad6af7a523bc51169858fdaa41f85becf3da3a4d/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad6af7a523bc51169858fdaa41f85becf3da3a4d/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=ad6af7a523bc51169858fdaa41f85becf3da3a4d", "patch": "@@ -42,7 +42,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n     fn malloc(&mut self, size: u64, zero_init: bool, kind: MiriMemoryKind) -> Scalar<Tag> {\n         let this = self.eval_context_mut();\n-        let tcx = &{ this.tcx.tcx };\n         if size == 0 {\n             Scalar::from_int(0, this.pointer_size())\n         } else {\n@@ -55,7 +54,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.memory\n                     .get_mut(ptr.alloc_id)\n                     .unwrap()\n-                    .write_repeat(tcx, ptr, 0, Size::from_bytes(size))\n+                    .write_repeat(&*this.tcx, ptr, 0, Size::from_bytes(size))\n                     .unwrap();\n             }\n             Scalar::Ptr(ptr)\n@@ -90,12 +89,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n         } else {\n             let old_ptr = this.force_ptr(old_ptr)?;\n-            let memory = &mut this.memory;\n             if new_size == 0 {\n-                memory.deallocate(old_ptr, None, kind.into())?;\n+                this.memory.deallocate(old_ptr, None, kind.into())?;\n                 Ok(Scalar::from_int(0, this.pointer_size()))\n             } else {\n-                let new_ptr = memory.reallocate(\n+                let new_ptr = this.memory.reallocate(\n                     old_ptr,\n                     None,\n                     Size::from_bytes(new_size),\n@@ -334,7 +332,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // for the TLS destructors, and of course `eval_main`.\n                 let mir = this.load_mir(f_instance.def, None)?;\n                 let ret_place =\n-                    MPlaceTy::dangling(this.layout_of(this.tcx.mk_unit())?, this).into();\n+                    MPlaceTy::dangling(this.layout_of(tcx.mk_unit())?, this).into();\n                 this.push_stack_frame(\n                     f_instance,\n                     mir.span,\n@@ -471,7 +469,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"write\" => {\n                 let fd = this.read_scalar(args[0])?.to_i32()?;\n                 let buf = this.read_scalar(args[1])?.not_undef()?;\n-                let n = this.read_scalar(args[2])?.to_usize(&*this.tcx)?;\n+                let n = this.read_scalar(args[2])?.to_usize(tcx)?;\n                 trace!(\"Called write({:?}, {:?}, {:?})\", fd, buf, n);\n                 let result = if fd == 1 || fd == 2 {\n                     // stdout/stderr\n@@ -993,10 +991,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n     fn set_last_error(&mut self, scalar: Scalar<Tag>) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n-        let tcx = &{ this.tcx.tcx };\n         let errno_ptr = this.machine.last_error.unwrap();\n         this.memory.get_mut(errno_ptr.alloc_id)?.write_scalar(\n-            tcx,\n+            &*this.tcx,\n             errno_ptr,\n             scalar.into(),\n             Size::from_bits(32),\n@@ -1005,11 +1002,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n     fn get_last_error(&mut self) -> InterpResult<'tcx, Scalar<Tag>> {\n         let this = self.eval_context_mut();\n-        let tcx = &{ this.tcx.tcx };\n         let errno_ptr = this.machine.last_error.unwrap();\n         this.memory\n             .get(errno_ptr.alloc_id)?\n-            .read_scalar(tcx, errno_ptr, Size::from_bits(32))?\n+            .read_scalar(&*this.tcx, errno_ptr, Size::from_bits(32))?\n             .not_undef()\n     }\n "}, {"sha": "891474bc3bdb6bd90e8214daa9596896530a716d", "filename": "src/shims/fs.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad6af7a523bc51169858fdaa41f85becf3da3a4d/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad6af7a523bc51169858fdaa41f85becf3da3a4d/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=ad6af7a523bc51169858fdaa41f85becf3da3a4d", "patch": "@@ -157,8 +157,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.check_no_isolation(\"read\")?;\n \n-        let tcx = &{ this.tcx.tcx };\n-\n         let count = this.read_scalar(count_op)?.to_usize(&*this.tcx)?;\n         // Reading zero bytes should not change `buf`\n         if count == 0 {\n@@ -173,7 +171,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let bytes = this.force_ptr(buf_scalar).and_then(|buf| {\n                 this.memory\n                     .get_mut(buf.alloc_id)?\n-                    .get_bytes_mut(tcx, buf, Size::from_bytes(count))\n+                    .get_bytes_mut(&*this.tcx, buf, Size::from_bytes(count))\n                     .map(|buffer| handle.file.read(buffer))\n             });\n             // Reinsert the file handle\n@@ -192,8 +190,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.check_no_isolation(\"write\")?;\n \n-        let tcx = &{ this.tcx.tcx };\n-\n         let count = this.read_scalar(count_op)?.to_usize(&*this.tcx)?;\n         // Writing zero bytes should not change `buf`\n         if count == 0 {\n@@ -205,7 +201,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.remove_handle_and(fd, |mut handle, this| {\n             let bytes = this.memory.get(buf.alloc_id).and_then(|alloc| {\n                 alloc\n-                    .get_bytes(tcx, buf, Size::from_bytes(count))\n+                    .get_bytes(&*this.tcx, buf, Size::from_bytes(count))\n                     .map(|bytes| handle.file.write(bytes).map(|bytes| bytes as i64))\n             });\n             this.machine.file_handler.handles.insert(fd, handle);"}, {"sha": "4666557e200c01c97ef44aeb6626a067bd751f7c", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad6af7a523bc51169858fdaa41f85becf3da3a4d/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad6af7a523bc51169858fdaa41f85becf3da3a4d/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=ad6af7a523bc51169858fdaa41f85becf3da3a4d", "patch": "@@ -28,7 +28,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // (as opposed to through a place), we have to remember to erase any tag\n         // that might still hang around!\n \n-        let intrinsic_name = &*this.tcx.item_name(instance.def_id()).as_str();\n+        let intrinsic_name = &*tcx.item_name(instance.def_id()).as_str();\n         match intrinsic_name {\n             \"arith_offset\" => {\n                 let offset = this.read_scalar(args[1])?.to_isize(this)?;"}]}