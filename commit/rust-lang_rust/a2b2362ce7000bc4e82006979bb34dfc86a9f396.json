{"sha": "a2b2362ce7000bc4e82006979bb34dfc86a9f396", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyYjIzNjJjZTcwMDBiYzRlODIwMDY5NzliYjM0ZGZjODZhOWYzOTY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-10-12T14:22:41Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-10-12T14:23:39Z"}, "message": "do not reference LLVM for our concurrency memory model", "tree": {"sha": "bc8570f43d4e993b830170c623c044f9ffd4d855", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc8570f43d4e993b830170c623c044f9ffd4d855"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2b2362ce7000bc4e82006979bb34dfc86a9f396", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2b2362ce7000bc4e82006979bb34dfc86a9f396", "html_url": "https://github.com/rust-lang/rust/commit/a2b2362ce7000bc4e82006979bb34dfc86a9f396", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2b2362ce7000bc4e82006979bb34dfc86a9f396/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "026447b9b0816bfc92d8072145a7a330ec8e3298", "url": "https://api.github.com/repos/rust-lang/rust/commits/026447b9b0816bfc92d8072145a7a330ec8e3298", "html_url": "https://github.com/rust-lang/rust/commit/026447b9b0816bfc92d8072145a7a330ec8e3298"}], "stats": {"total": 52, "additions": 27, "deletions": 25}, "files": [{"sha": "dc0bea02b7b2bc85fbc57d8c116160f03a358c5d", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/a2b2362ce7000bc4e82006979bb34dfc86a9f396/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b2362ce7000bc4e82006979bb34dfc86a9f396/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=a2b2362ce7000bc4e82006979bb34dfc86a9f396", "patch": "@@ -18,11 +18,11 @@\n //!\n //! Each method takes an [`Ordering`] which represents the strength of\n //! the memory barrier for that operation. These orderings are the\n-//! same as [LLVM atomic orderings][1]. For more information see the [nomicon][2].\n+//! same as the [C++ atomic orderings][1]. For more information see the [nomicon][2].\n //!\n //! [`Ordering`]: enum.Ordering.html\n //!\n-//! [1]: https://llvm.org/docs/LangRef.html#memory-model-for-concurrent-operations\n+//! [1]: https://en.cppreference.com/w/cpp/atomic/memory_order\n //! [2]: ../../../nomicon/atomics.html\n //!\n //! Atomic variables are safe to share between threads (they implement [`Sync`])\n@@ -217,8 +217,8 @@ unsafe impl<T> Sync for AtomicPtr<T> {}\n /// operations synchronize other memory while additionally preserving a total order of such\n /// operations across all threads.\n ///\n-/// Rust's memory orderings are [the same as\n-/// LLVM's](https://llvm.org/docs/LangRef.html#memory-model-for-concurrent-operations).\n+/// Rust's memory orderings are [the same as those of\n+/// C++](https://en.cppreference.com/w/cpp/atomic/memory_order).\n ///\n /// For more information see the [nomicon].\n ///\n@@ -231,9 +231,9 @@ unsafe impl<T> Sync for AtomicPtr<T> {}\n pub enum Ordering {\n     /// No ordering constraints, only atomic operations.\n     ///\n-    /// Corresponds to LLVM's [`Monotonic`] ordering.\n+    /// Corresponds to [`memory_order_relaxed`] in C++.\n     ///\n-    /// [`Monotonic`]: https://llvm.org/docs/Atomics.html#monotonic\n+    /// [`memory_order_relaxed`]: https://en.cppreference.com/w/cpp/atomic/memory_order#Relaxed_ordering\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Relaxed,\n     /// When coupled with a store, all previous operations become ordered\n@@ -246,11 +246,12 @@ pub enum Ordering {\n     ///\n     /// This ordering is only applicable for operations that can perform a store.\n     ///\n-    /// Corresponds to LLVM's [`Release`] ordering.\n+    /// Corresponds to [`memory_order_release`] in C++.\n     ///\n-    /// [`Release`]: https://llvm.org/docs/Atomics.html#release\n-    /// [`Acquire`]: https://llvm.org/docs/Atomics.html#acquire\n-    /// [`Relaxed`]: https://llvm.org/docs/Atomics.html#monotonic\n+    /// [`Release`]: #Release\n+    /// [`Acquire`]: #Acquire\n+    /// [`Relaxed`]: #Relaxed\n+    /// [`memory_order_release`]: https://en.cppreference.com/w/cpp/atomic/memory_order#Release-Acquire_ordering\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Release,\n     /// When coupled with a load, if the loaded value was written by a store operation with\n@@ -263,40 +264,41 @@ pub enum Ordering {\n     ///\n     /// This ordering is only applicable for operations that can perform a load.\n     ///\n-    /// Corresponds to LLVM's [`Acquire`] ordering.\n+    /// Corresponds to [`memory_order_acquire`] in C++.\n     ///\n-    /// [`Acquire`]: https://llvm.org/docs/Atomics.html#acquire\n-    /// [`Release`]: https://llvm.org/docs/Atomics.html#release\n-    /// [`Relaxed`]: https://llvm.org/docs/Atomics.html#monotonic\n+    /// [`Acquire`]: #Acquire\n+    /// [`Release`]: #Release\n+    /// [`Relaxed`]: #Relaxed\n+    /// [`memory_order_acquire`]: https://en.cppreference.com/w/cpp/atomic/memory_order#Release-Acquire_ordering\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Acquire,\n     /// Has the effects of both [`Acquire`] and [`Release`] together:\n     /// For loads it uses [`Acquire`] ordering. For stores it uses the [`Release`] ordering.\n     ///\n     /// Notice that in the case of `compare_and_swap`, it is possible that the operation ends up\n     /// not performing any store and hence it has just [`Acquire`] ordering. However,\n-    /// [`AcqRel`][`AcquireRelease`] will never perform [`Relaxed`] accesses.\n+    /// `AcqRel` will never perform [`Relaxed`] accesses.\n     ///\n     /// This ordering is only applicable for operations that combine both loads and stores.\n     ///\n-    /// Corresponds to LLVM's [`AcquireRelease`] ordering.\n+    /// Corresponds to [`memory_order_acq_rel`] in C++.\n     ///\n-    /// [`AcquireRelease`]: https://llvm.org/docs/Atomics.html#acquirerelease\n-    /// [`Acquire`]: https://llvm.org/docs/Atomics.html#acquire\n-    /// [`Release`]: https://llvm.org/docs/Atomics.html#release\n-    /// [`Relaxed`]: https://llvm.org/docs/Atomics.html#monotonic\n+    /// [`memory_order_acq_rel`]: https://en.cppreference.com/w/cpp/atomic/memory_order#Release-Acquire_ordering\n+    /// [`Acquire`]: #Acquire\n+    /// [`Release`]: #Release\n+    /// [`Relaxed`]: #Relaxed\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     AcqRel,\n     /// Like [`Acquire`]/[`Release`]/[`AcqRel`] (for load, store, and load-with-store\n     /// operations, respectively) with the additional guarantee that all threads see all\n     /// sequentially consistent operations in the same order.\n     ///\n-    /// Corresponds to LLVM's [`SequentiallyConsistent`] ordering.\n+    /// Corresponds to [`memory_order_seq_cst`] in C++.\n     ///\n-    /// [`SequentiallyConsistent`]: https://llvm.org/docs/Atomics.html#sequentiallyconsistent\n-    /// [`Acquire`]: https://llvm.org/docs/Atomics.html#acquire\n-    /// [`Release`]: https://llvm.org/docs/Atomics.html#release\n-    /// [`AcqRel`]: https://llvm.org/docs/Atomics.html#acquirerelease\n+    /// [`memory_order_seq_cst`]: https://en.cppreference.com/w/cpp/atomic/memory_order#Sequentially-consistent_ordering\n+    /// [`Acquire`]: #Acquire\n+    /// [`Release`]: #Release\n+    /// [`AcqRel`]: #AcqRel\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     SeqCst,\n }"}]}