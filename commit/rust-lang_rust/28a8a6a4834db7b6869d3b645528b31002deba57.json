{"sha": "28a8a6a4834db7b6869d3b645528b31002deba57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4YThhNmE0ODM0ZGI3YjY4NjlkM2I2NDU1MjhiMzEwMDJkZWJhNTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-29T17:24:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-29T17:24:21Z"}, "message": "Auto merge of #4450 - phansch:fix_const_fn_fp, r=flip1995\n\nFix missing_const_for_fn false positive\n\nWe don't want to lint if the type of the method implements drop.\n(constant functions cannot evaluate destructors)\n\nchangelog: Fix `missing_const_for_fn` false positive\n\nFixes #4449", "tree": {"sha": "bca400bec856437abee4ddd5778168fce41ae460", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bca400bec856437abee4ddd5778168fce41ae460"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28a8a6a4834db7b6869d3b645528b31002deba57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28a8a6a4834db7b6869d3b645528b31002deba57", "html_url": "https://github.com/rust-lang/rust/commit/28a8a6a4834db7b6869d3b645528b31002deba57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28a8a6a4834db7b6869d3b645528b31002deba57/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "888b736560755254e33593033c3d1248c8e56085", "url": "https://api.github.com/repos/rust-lang/rust/commits/888b736560755254e33593033c3d1248c8e56085", "html_url": "https://github.com/rust-lang/rust/commit/888b736560755254e33593033c3d1248c8e56085"}, {"sha": "5e1fdf9ae6e4b66083e420e14a3151171a2b868d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e1fdf9ae6e4b66083e420e14a3151171a2b868d", "html_url": "https://github.com/rust-lang/rust/commit/5e1fdf9ae6e4b66083e420e14a3151171a2b868d"}], "stats": {"total": 67, "additions": 63, "deletions": 4}, "files": [{"sha": "2f20aa9c683c4e166c15d3fbfe77b8467d818891", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/28a8a6a4834db7b6869d3b645528b31002deba57/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a8a6a4834db7b6869d3b645528b31002deba57/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=28a8a6a4834db7b6869d3b645528b31002deba57", "patch": "@@ -1,10 +1,11 @@\n-use crate::utils::{is_entrypoint_fn, span_lint, trait_ref_of_method};\n+use crate::utils::{has_drop, is_entrypoint_fn, span_lint, trait_ref_of_method};\n use rustc::hir;\n use rustc::hir::intravisit::FnKind;\n-use rustc::hir::{Body, Constness, FnDecl, HirId};\n+use rustc::hir::{Body, Constness, FnDecl, HirId, HirVec};\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_mir::transform::qualify_min_const_fn::is_min_const_fn;\n+use rustc_typeck::hir_ty_to_ty;\n use syntax_pos::Span;\n \n declare_clippy_lint! {\n@@ -94,7 +95,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n                 }\n             },\n             FnKind::Method(_, sig, ..) => {\n-                if trait_ref_of_method(cx, hir_id).is_some() || already_const(sig.header) {\n+                if trait_ref_of_method(cx, hir_id).is_some()\n+                    || already_const(sig.header)\n+                    || method_accepts_dropable(cx, &sig.decl.inputs)\n+                {\n                     return;\n                 }\n             },\n@@ -113,6 +117,16 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n     }\n }\n \n+/// Returns true if any of the method parameters is a type that implements `Drop`. The method\n+/// can't be made const then, because `drop` can't be const-evaluated.\n+fn method_accepts_dropable(cx: &LateContext<'_, '_>, param_tys: &HirVec<hir::Ty>) -> bool {\n+    // If any of the params are dropable, return true\n+    param_tys.iter().any(|hir_ty| {\n+        let ty_ty = hir_ty_to_ty(cx.tcx, hir_ty);\n+        has_drop(cx, ty_ty)\n+    })\n+}\n+\n // We don't have to lint on something that's already `const`\n fn already_const(header: hir::FnHeader) -> bool {\n     header.constness == Constness::Const"}, {"sha": "f367279906fda13f992c8bd3bb715f556da6e7d6", "filename": "tests/ui/missing_const_for_fn/cant_be_const.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/28a8a6a4834db7b6869d3b645528b31002deba57/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a8a6a4834db7b6869d3b645528b31002deba57/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs?ref=28a8a6a4834db7b6869d3b645528b31002deba57", "patch": "@@ -68,3 +68,25 @@ impl std::ops::Add for Point {\n         Point(self.0 + other.0, self.1 + other.1)\n     }\n }\n+\n+mod with_drop {\n+    pub struct A;\n+    pub struct B;\n+    impl Drop for A {\n+        fn drop(&mut self) {}\n+    }\n+\n+    impl A {\n+        // This can not be const because the type implements `Drop`.\n+        pub fn a(self) -> B {\n+            B\n+        }\n+    }\n+\n+    impl B {\n+        // This can not be const because `a` implements `Drop`.\n+        pub fn a(self, a: A) -> B {\n+            B\n+        }\n+    }\n+}"}, {"sha": "9109d255ca789cc2758f80b1bea67ef3e6e27829", "filename": "tests/ui/missing_const_for_fn/could_be_const.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/28a8a6a4834db7b6869d3b645528b31002deba57/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a8a6a4834db7b6869d3b645528b31002deba57/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs?ref=28a8a6a4834db7b6869d3b645528b31002deba57", "patch": "@@ -53,5 +53,20 @@ fn generic_arr<T: Copy>(t: [T; 1]) -> T {\n     t[0]\n }\n \n+mod with_drop {\n+    pub struct A;\n+    pub struct B;\n+    impl Drop for A {\n+        fn drop(&mut self) {}\n+    }\n+\n+    impl B {\n+        // This can be const, because `a` is passed by reference\n+        pub fn b(self, a: &A) -> B {\n+            B\n+        }\n+    }\n+}\n+\n // Should not be const\n fn main() {}"}, {"sha": "0c0775764b73dc6f86d87cd26361ca0b44a7513d", "filename": "tests/ui/missing_const_for_fn/could_be_const.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/28a8a6a4834db7b6869d3b645528b31002deba57/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28a8a6a4834db7b6869d3b645528b31002deba57/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr?ref=28a8a6a4834db7b6869d3b645528b31002deba57", "patch": "@@ -49,5 +49,13 @@ LL | |     t\n LL | | }\n    | |_^\n \n-error: aborting due to 6 previous errors\n+error: this could be a const_fn\n+  --> $DIR/could_be_const.rs:65:9\n+   |\n+LL | /         pub fn b(self, a: &A) -> B {\n+LL | |             B\n+LL | |         }\n+   | |_________^\n+\n+error: aborting due to 7 previous errors\n "}]}