{"sha": "f8d4cdc170bead42db3ffa647318ecf2bd6430e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4ZDRjZGMxNzBiZWFkNDJkYjNmZmE2NDczMThlY2YyYmQ2NDMwZTc=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-10-14T03:56:18Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-10-14T05:25:05Z"}, "message": "Avoid cloning `Arc<[T]>` into a vec if possible", "tree": {"sha": "2c020016af1fd5239fdad65b816b4cccea97df41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c020016af1fd5239fdad65b816b4cccea97df41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8d4cdc170bead42db3ffa647318ecf2bd6430e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8d4cdc170bead42db3ffa647318ecf2bd6430e7", "html_url": "https://github.com/rust-lang/rust/commit/f8d4cdc170bead42db3ffa647318ecf2bd6430e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8d4cdc170bead42db3ffa647318ecf2bd6430e7/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77f2dd96a122e59a8d8df8afb53a741df9b1af76", "url": "https://api.github.com/repos/rust-lang/rust/commits/77f2dd96a122e59a8d8df8afb53a741df9b1af76", "html_url": "https://github.com/rust-lang/rust/commit/77f2dd96a122e59a8d8df8afb53a741df9b1af76"}], "stats": {"total": 86, "additions": 55, "deletions": 31}, "files": [{"sha": "ca261e8f541af71afbb3b7fb8ae57f7a8b27e173", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8d4cdc170bead42db3ffa647318ecf2bd6430e7/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d4cdc170bead42db3ffa647318ecf2bd6430e7/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=f8d4cdc170bead42db3ffa647318ecf2bd6430e7", "patch": "@@ -51,6 +51,7 @@ mod lang_item;\n mod generics;\n mod resolve;\n pub mod diagnostics;\n+mod util;\n \n mod code_model;\n "}, {"sha": "fc4909d110dfd70d75637e4f463035ad258a6031", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f8d4cdc170bead42db3ffa647318ecf2bd6430e7/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d4cdc170bead42db3ffa647318ecf2bd6430e7/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=f8d4cdc170bead42db3ffa647318ecf2bd6430e7", "patch": "@@ -17,8 +17,8 @@ use std::sync::Arc;\n use std::{fmt, iter, mem};\n \n use crate::{\n-    db::HirDatabase, expr::ExprId, type_ref::Mutability, Adt, Crate, DefWithBody, GenericParams,\n-    HasGenericParams, Name, Trait, TypeAlias,\n+    db::HirDatabase, expr::ExprId, type_ref::Mutability, util::make_mut_arc_slice, Adt, Crate,\n+    DefWithBody, GenericParams, HasGenericParams, Name, Trait, TypeAlias,\n };\n use display::{HirDisplay, HirFormatter};\n \n@@ -308,12 +308,11 @@ impl Substs {\n     }\n \n     pub fn walk_mut(&mut self, f: &mut impl FnMut(&mut Ty)) {\n-        // Without an Arc::make_mut_slice, we can't avoid the clone here:\n-        let mut v: Vec<_> = self.0.iter().cloned().collect();\n-        for t in &mut v {\n-            t.walk_mut(f);\n-        }\n-        self.0 = v.into();\n+        make_mut_arc_slice(&mut self.0, |s| {\n+            for t in s {\n+                t.walk_mut(f);\n+            }\n+        });\n     }\n \n     pub fn as_single(&self) -> &Ty {\n@@ -541,12 +540,11 @@ impl TypeWalk for FnSig {\n     }\n \n     fn walk_mut(&mut self, f: &mut impl FnMut(&mut Ty)) {\n-        // Without an Arc::make_mut_slice, we can't avoid the clone here:\n-        let mut v: Vec<_> = self.params_and_return.iter().cloned().collect();\n-        for t in &mut v {\n-            t.walk_mut(f);\n-        }\n-        self.params_and_return = v.into();\n+        make_mut_arc_slice(&mut self.params_and_return, |s| {\n+            for t in s {\n+                t.walk_mut(f);\n+            }\n+        });\n     }\n }\n \n@@ -756,11 +754,11 @@ impl TypeWalk for Ty {\n                 p_ty.parameters.walk_mut(f);\n             }\n             Ty::Dyn(predicates) | Ty::Opaque(predicates) => {\n-                let mut v: Vec<_> = predicates.iter().cloned().collect();\n-                for p in &mut v {\n-                    p.walk_mut(f);\n-                }\n-                *predicates = v.into();\n+                make_mut_arc_slice(predicates, |s| {\n+                    for p in s {\n+                        p.walk_mut(f);\n+                    }\n+                });\n             }\n             Ty::Param { .. } | Ty::Bound(_) | Ty::Infer(_) | Ty::Unknown => {}\n         }"}, {"sha": "5e86ed2607070477af797180efc20f843fe51dde", "filename": "crates/ra_hir/src/ty/infer/unify.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f8d4cdc170bead42db3ffa647318ecf2bd6430e7/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d4cdc170bead42db3ffa647318ecf2bd6430e7/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Funify.rs?ref=f8d4cdc170bead42db3ffa647318ecf2bd6430e7", "patch": "@@ -6,6 +6,7 @@ use crate::ty::{\n     Canonical, InEnvironment, InferTy, ProjectionPredicate, ProjectionTy, Substs, TraitRef, Ty,\n     TypeWalk,\n };\n+use crate::util::make_mut_arc_slice;\n \n impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     pub(super) fn canonicalizer<'b>(&'b mut self) -> Canonicalizer<'a, 'b, D>\n@@ -74,10 +75,13 @@ where\n         })\n     }\n \n-    fn do_canonicalize_trait_ref(&mut self, trait_ref: TraitRef) -> TraitRef {\n-        let substs =\n-            trait_ref.substs.iter().map(|ty| self.do_canonicalize_ty(ty.clone())).collect();\n-        TraitRef { trait_: trait_ref.trait_, substs: Substs(substs) }\n+    fn do_canonicalize_trait_ref(&mut self, mut trait_ref: TraitRef) -> TraitRef {\n+        make_mut_arc_slice(&mut trait_ref.substs.0, |tys| {\n+            for ty in tys {\n+                *ty = self.do_canonicalize_ty(ty.clone());\n+            }\n+        });\n+        trait_ref\n     }\n \n     fn into_canonicalized<T>(self, result: T) -> Canonicalized<T> {\n@@ -87,10 +91,13 @@ where\n         }\n     }\n \n-    fn do_canonicalize_projection_ty(&mut self, projection_ty: ProjectionTy) -> ProjectionTy {\n-        let params =\n-            projection_ty.parameters.iter().map(|ty| self.do_canonicalize_ty(ty.clone())).collect();\n-        ProjectionTy { associated_ty: projection_ty.associated_ty, parameters: Substs(params) }\n+    fn do_canonicalize_projection_ty(&mut self, mut projection_ty: ProjectionTy) -> ProjectionTy {\n+        make_mut_arc_slice(&mut projection_ty.parameters.0, |params| {\n+            for ty in params {\n+                *ty = self.do_canonicalize_ty(ty.clone());\n+            }\n+        });\n+        projection_ty\n     }\n \n     fn do_canonicalize_projection_predicate("}, {"sha": "003aa9babcdf7aea33d3ffcf76255551dfefa616", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f8d4cdc170bead42db3ffa647318ecf2bd6430e7/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d4cdc170bead42db3ffa647318ecf2bd6430e7/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=f8d4cdc170bead42db3ffa647318ecf2bd6430e7", "patch": "@@ -392,10 +392,9 @@ impl TraitRef {\n     ) -> Self {\n         let mut substs = TraitRef::substs_from_path(db, resolver, segment, resolved);\n         if let Some(self_ty) = explicit_self_ty {\n-            // FIXME this could be nicer\n-            let mut substs_vec = substs.0.to_vec();\n-            substs_vec[0] = self_ty;\n-            substs.0 = substs_vec.into();\n+            crate::util::make_mut_arc_slice(&mut substs.0, |substs| {\n+                substs[0] = self_ty;\n+            });\n         }\n         TraitRef { trait_: resolved, substs }\n     }"}, {"sha": "46f423c9155ddd5c7285ad6cd305e85239196c01", "filename": "crates/ra_hir/src/util.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f8d4cdc170bead42db3ffa647318ecf2bd6430e7/crates%2Fra_hir%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d4cdc170bead42db3ffa647318ecf2bd6430e7/crates%2Fra_hir%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Futil.rs?ref=f8d4cdc170bead42db3ffa647318ecf2bd6430e7", "patch": "@@ -0,0 +1,19 @@\n+//! Internal utility functions.\n+\n+use std::sync::Arc;\n+\n+/// Helper for mutating `Arc<[T]>` (i.e. `Arc::make_mut` for Arc slices).\n+/// The underlying values are cloned if there are other strong references.\n+pub(crate) fn make_mut_arc_slice<T: Clone, R>(\n+    a: &mut Arc<[T]>,\n+    f: impl FnOnce(&mut [T]) -> R,\n+) -> R {\n+    if let Some(s) = Arc::get_mut(a) {\n+        f(s)\n+    } else {\n+        let mut v = a.to_vec();\n+        let r = f(&mut v);\n+        *a = Arc::from(v);\n+        r\n+    }\n+}"}]}