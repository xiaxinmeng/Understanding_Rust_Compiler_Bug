{"sha": "13221770a30d4bd56df9e8db6dc7fd95da56f8fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzMjIxNzcwYTMwZDRiZDU2ZGY5ZThkYjZkYzdmZDk1ZGE1NmY4ZmM=", "commit": {"author": {"name": "Nikolai Vazquez", "email": "nvazquez1297@gmail.com", "date": "2017-09-21T20:35:23Z"}, "committer": {"name": "Nikolai Vazquez", "email": "nvazquez1297@gmail.com", "date": "2017-09-21T20:35:23Z"}, "message": "Implement TryFrom for array reference types\n\nThere are many cases where a buffer with a static compile-time size is\npreferred over a slice with a dynamic size. This allows for performing\na checked conversion from &[T] to &[T; N].\n\nThis may also lead to compile-time optimizations involving [T; N] such\nas loop unrolling.", "tree": {"sha": "0fd1f8eb232aa4b55204f7c3213c598db96a7914", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fd1f8eb232aa4b55204f7c3213c598db96a7914"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13221770a30d4bd56df9e8db6dc7fd95da56f8fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13221770a30d4bd56df9e8db6dc7fd95da56f8fc", "html_url": "https://github.com/rust-lang/rust/commit/13221770a30d4bd56df9e8db6dc7fd95da56f8fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13221770a30d4bd56df9e8db6dc7fd95da56f8fc/comments", "author": {"login": "nvzqz", "id": 10367662, "node_id": "MDQ6VXNlcjEwMzY3NjYy", "avatar_url": "https://avatars.githubusercontent.com/u/10367662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nvzqz", "html_url": "https://github.com/nvzqz", "followers_url": "https://api.github.com/users/nvzqz/followers", "following_url": "https://api.github.com/users/nvzqz/following{/other_user}", "gists_url": "https://api.github.com/users/nvzqz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nvzqz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nvzqz/subscriptions", "organizations_url": "https://api.github.com/users/nvzqz/orgs", "repos_url": "https://api.github.com/users/nvzqz/repos", "events_url": "https://api.github.com/users/nvzqz/events{/privacy}", "received_events_url": "https://api.github.com/users/nvzqz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nvzqz", "id": 10367662, "node_id": "MDQ6VXNlcjEwMzY3NjYy", "avatar_url": "https://avatars.githubusercontent.com/u/10367662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nvzqz", "html_url": "https://github.com/nvzqz", "followers_url": "https://api.github.com/users/nvzqz/followers", "following_url": "https://api.github.com/users/nvzqz/following{/other_user}", "gists_url": "https://api.github.com/users/nvzqz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nvzqz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nvzqz/subscriptions", "organizations_url": "https://api.github.com/users/nvzqz/orgs", "repos_url": "https://api.github.com/users/nvzqz/repos", "events_url": "https://api.github.com/users/nvzqz/events{/privacy}", "received_events_url": "https://api.github.com/users/nvzqz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b55d19479eabcb5d6cbda651187c7004aa28f7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b55d19479eabcb5d6cbda651187c7004aa28f7f", "html_url": "https://github.com/rust-lang/rust/commit/1b55d19479eabcb5d6cbda651187c7004aa28f7f"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "5f222e249ea84e21228dac9fcb14f8cf4c0e7186", "filename": "src/libcore/array.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/13221770a30d4bd56df9e8db6dc7fd95da56f8fc/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13221770a30d4bd56df9e8db6dc7fd95da56f8fc/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=13221770a30d4bd56df9e8db6dc7fd95da56f8fc", "patch": "@@ -21,6 +21,7 @@\n \n use borrow::{Borrow, BorrowMut};\n use cmp::Ordering;\n+use convert::TryFrom;\n use fmt;\n use hash::{Hash, self};\n use marker::Unsize;\n@@ -57,6 +58,11 @@ unsafe impl<T, A: Unsize<[T]>> FixedSizeArray<T> for A {\n     }\n }\n \n+/// The error type returned when a conversion from a slice to an array fails.\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[derive(Debug, Copy, Clone)]\n+pub struct TryFromSliceError(());\n+\n macro_rules! __impl_slice_eq1 {\n     ($Lhs: ty, $Rhs: ty) => {\n         __impl_slice_eq1! { $Lhs, $Rhs, Sized }\n@@ -123,6 +129,34 @@ macro_rules! array_impls {\n                 }\n             }\n \n+            #[unstable(feature = \"try_from\", issue = \"33417\")]\n+            impl<'a, T> TryFrom<&'a [T]> for &'a [T; $N] {\n+                type Error = TryFromSliceError;\n+\n+                fn try_from(slice: &[T]) -> Result<&[T; $N], TryFromSliceError> {\n+                    if slice.len() == $N {\n+                        let ptr = slice.as_ptr() as *const [T; $N];\n+                        unsafe { Ok(&*ptr) }\n+                    } else {\n+                        Err(TryFromSliceError(()))\n+                    }\n+                }\n+            }\n+\n+            #[unstable(feature = \"try_from\", issue = \"33417\")]\n+            impl<'a, T> TryFrom<&'a mut [T]> for &'a mut [T; $N] {\n+                type Error = TryFromSliceError;\n+\n+                fn try_from(slice: &mut [T]) -> Result<&mut [T; $N], TryFromSliceError> {\n+                    if slice.len() == $N {\n+                        let ptr = slice.as_mut_ptr() as *mut [T; $N];\n+                        unsafe { Ok(&mut *ptr) }\n+                    } else {\n+                        Err(TryFromSliceError(()))\n+                    }\n+                }\n+            }\n+\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             impl<T: Hash> Hash for [T; $N] {\n                 fn hash<H: hash::Hasher>(&self, state: &mut H) {"}]}