{"sha": "446ae429a6e30b416853d6ae0dea228b751671b0", "node_id": "C_kwDOAAsO6NoAKDQ0NmFlNDI5YTZlMzBiNDE2ODUzZDZhZTBkZWEyMjhiNzUxNjcxYjA", "commit": {"author": {"name": "Samuel Tardieu", "email": "sam@rfc1149.net", "date": "2023-03-02T12:21:35Z"}, "committer": {"name": "Samuel Tardieu", "email": "sam@rfc1149.net", "date": "2023-03-04T16:29:58Z"}, "message": "lintcheck: fix parallel processing handling\n\nUsing `rayon::current_num_threads()` causes a bug:\n\n```\nthread 'main' panicked at 'called `Result::unwrap()` on an `Err` value:\n  ThreadPoolBuildError { kind: GlobalPoolAlreadyInitialized }',\n  src/main.rs:632:10\n```\n\nMoreover, using the number of threads and dividing it by 2 wouldn't\nreturn the number of physical threads on modern processors which have\na varying number of threads per core.\n\nIt makes little sense to restrict ourselves to physical threads,\nespecially when, in modern architectures, cores with multiple threads\nare often faster (performance) while cores with a unique threads are\noften slower (efficient). The Rust runtime will make a better choice.", "tree": {"sha": "b2abfe3de92c983d76509292c02cc6cc45691436", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2abfe3de92c983d76509292c02cc6cc45691436"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/446ae429a6e30b416853d6ae0dea228b751671b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/446ae429a6e30b416853d6ae0dea228b751671b0", "html_url": "https://github.com/rust-lang/rust/commit/446ae429a6e30b416853d6ae0dea228b751671b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/446ae429a6e30b416853d6ae0dea228b751671b0/comments", "author": {"login": "samueltardieu", "id": 44656, "node_id": "MDQ6VXNlcjQ0NjU2", "avatar_url": "https://avatars.githubusercontent.com/u/44656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samueltardieu", "html_url": "https://github.com/samueltardieu", "followers_url": "https://api.github.com/users/samueltardieu/followers", "following_url": "https://api.github.com/users/samueltardieu/following{/other_user}", "gists_url": "https://api.github.com/users/samueltardieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/samueltardieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samueltardieu/subscriptions", "organizations_url": "https://api.github.com/users/samueltardieu/orgs", "repos_url": "https://api.github.com/users/samueltardieu/repos", "events_url": "https://api.github.com/users/samueltardieu/events{/privacy}", "received_events_url": "https://api.github.com/users/samueltardieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "samueltardieu", "id": 44656, "node_id": "MDQ6VXNlcjQ0NjU2", "avatar_url": "https://avatars.githubusercontent.com/u/44656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samueltardieu", "html_url": "https://github.com/samueltardieu", "followers_url": "https://api.github.com/users/samueltardieu/followers", "following_url": "https://api.github.com/users/samueltardieu/following{/other_user}", "gists_url": "https://api.github.com/users/samueltardieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/samueltardieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samueltardieu/subscriptions", "organizations_url": "https://api.github.com/users/samueltardieu/orgs", "repos_url": "https://api.github.com/users/samueltardieu/repos", "events_url": "https://api.github.com/users/samueltardieu/events{/privacy}", "received_events_url": "https://api.github.com/users/samueltardieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "113c704d225c63c1a0eec29cfa9478b7537e7d73", "url": "https://api.github.com/repos/rust-lang/rust/commits/113c704d225c63c1a0eec29cfa9478b7537e7d73", "html_url": "https://github.com/rust-lang/rust/commit/113c704d225c63c1a0eec29cfa9478b7537e7d73"}], "stats": {"total": 7, "additions": 2, "deletions": 5}, "files": [{"sha": "f87b902b92d9a264a7d3ba93431e25076d0dfe62", "filename": "lintcheck/src/config.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/446ae429a6e30b416853d6ae0dea228b751671b0/lintcheck%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/446ae429a6e30b416853d6ae0dea228b751671b0/lintcheck%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2Fsrc%2Fconfig.rs?ref=446ae429a6e30b416853d6ae0dea228b751671b0", "patch": "@@ -89,14 +89,11 @@ impl LintcheckConfig {\n             if markdown { \"md\" } else { \"txt\" }\n         ));\n \n-        // look at the --threads arg, if 0 is passed, ask rayon rayon how many threads it would spawn and\n-        // use half of that for the physical core count\n-        // by default use a single thread\n+        // look at the --threads arg, if 0 is passed, use the threads count\n         let max_jobs = match clap_config.get_one::<usize>(\"threads\") {\n             Some(&0) => {\n                 // automatic choice\n-                // Rayon seems to return thread count so half that for core count\n-                rayon::current_num_threads() / 2\n+                std::thread::available_parallelism().map(|n| n.get()).unwrap_or(1)\n             },\n             Some(&threads) => threads,\n             // no -j passed, use a single thread"}]}