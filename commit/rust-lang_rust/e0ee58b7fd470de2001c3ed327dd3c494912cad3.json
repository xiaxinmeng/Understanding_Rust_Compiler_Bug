{"sha": "e0ee58b7fd470de2001c3ed327dd3c494912cad3", "node_id": "C_kwDOAAsO6NoAKGUwZWU1OGI3ZmQ0NzBkZTIwMDFjM2VkMzI3ZGQzYzQ5NDkxMmNhZDM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-21T18:46:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-21T18:46:17Z"}, "message": "Auto merge of #10218 - Alexendoo:bool-assert-comparison-suggestion, r=dswij\n\nAdd machine applicable suggestion for `bool_assert_comparison`\n\nFixes #7598\nAlso closes #8118, it had already been fixed by an earlier change but I've added a test for it\n\nchangelog: [`bool_assert_comparison`] The suggestion is now machine applicable", "tree": {"sha": "3ca5446a7da242e3cf8df0efdc59eb3dd989aa22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ca5446a7da242e3cf8df0efdc59eb3dd989aa22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0ee58b7fd470de2001c3ed327dd3c494912cad3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0ee58b7fd470de2001c3ed327dd3c494912cad3", "html_url": "https://github.com/rust-lang/rust/commit/e0ee58b7fd470de2001c3ed327dd3c494912cad3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0ee58b7fd470de2001c3ed327dd3c494912cad3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d3c7f044dfd2608c3842d82f5bf10d3c4c80047", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d3c7f044dfd2608c3842d82f5bf10d3c4c80047", "html_url": "https://github.com/rust-lang/rust/commit/8d3c7f044dfd2608c3842d82f5bf10d3c4c80047"}, {"sha": "5f49808bdefc42deb06f5096854ec2f910848cb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f49808bdefc42deb06f5096854ec2f910848cb0", "html_url": "https://github.com/rust-lang/rust/commit/5f49808bdefc42deb06f5096854ec2f910848cb0"}], "stats": {"total": 514, "additions": 453, "deletions": 61}, "files": [{"sha": "556fa579000c6767109ba58123fed76dbd8f14ff", "filename": "clippy_lints/src/bool_assert_comparison.rs", "status": "modified", "additions": 39, "deletions": 14, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/e0ee58b7fd470de2001c3ed327dd3c494912cad3/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ee58b7fd470de2001c3ed327dd3c494912cad3/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs?ref=e0ee58b7fd470de2001c3ed327dd3c494912cad3", "patch": "@@ -1,10 +1,11 @@\n+use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::macros::{find_assert_eq_args, root_macro_call_first_node};\n-use clippy_utils::{diagnostics::span_lint_and_sugg, ty::implements_trait};\n+use clippy_utils::ty::{implements_trait, is_copy};\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, Lit};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty;\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::Ident;\n \n@@ -43,9 +44,7 @@ fn is_bool_lit(e: &Expr<'_>) -> bool {\n     ) && !e.span.from_expansion()\n }\n \n-fn is_impl_not_trait_with_bool_out(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n-    let ty = cx.typeck_results().expr_ty(e);\n-\n+fn is_impl_not_trait_with_bool_out<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n     cx.tcx\n         .lang_items()\n         .not_trait()\n@@ -77,31 +76,57 @@ impl<'tcx> LateLintPass<'tcx> for BoolAssertComparison {\n             return;\n         }\n         let Some ((a, b, _)) = find_assert_eq_args(cx, expr, macro_call.expn) else { return };\n-        if !(is_bool_lit(a) ^ is_bool_lit(b)) {\n+\n+        let a_span = a.span.source_callsite();\n+        let b_span = b.span.source_callsite();\n+\n+        let (lit_span, non_lit_expr) = match (is_bool_lit(a), is_bool_lit(b)) {\n+            // assert_eq!(true, b)\n+            //            ^^^^^^\n+            (true, false) => (a_span.until(b_span), b),\n+            // assert_eq!(a, true)\n+            //             ^^^^^^\n+            (false, true) => (b_span.with_lo(a_span.hi()), a),\n             // If there are two boolean arguments, we definitely don't understand\n             // what's going on, so better leave things as is...\n             //\n             // Or there is simply no boolean and then we can leave things as is!\n-            return;\n-        }\n+            _ => return,\n+        };\n \n-        if !is_impl_not_trait_with_bool_out(cx, a) || !is_impl_not_trait_with_bool_out(cx, b) {\n+        let non_lit_ty = cx.typeck_results().expr_ty(non_lit_expr);\n+\n+        if !is_impl_not_trait_with_bool_out(cx, non_lit_ty) {\n             // At this point the expression which is not a boolean\n             // literal does not implement Not trait with a bool output,\n             // so we cannot suggest to rewrite our code\n             return;\n         }\n \n+        if !is_copy(cx, non_lit_ty) {\n+            // Only lint with types that are `Copy` because `assert!(x)` takes\n+            // ownership of `x` whereas `assert_eq(x, true)` does not\n+            return;\n+        }\n+\n         let macro_name = macro_name.as_str();\n         let non_eq_mac = &macro_name[..macro_name.len() - 3];\n-        span_lint_and_sugg(\n+        span_lint_and_then(\n             cx,\n             BOOL_ASSERT_COMPARISON,\n             macro_call.span,\n             &format!(\"used `{macro_name}!` with a literal bool\"),\n-            \"replace it with\",\n-            format!(\"{non_eq_mac}!(..)\"),\n-            Applicability::MaybeIncorrect,\n+            |diag| {\n+                // assert_eq!(...)\n+                // ^^^^^^^^^\n+                let name_span = cx.sess().source_map().span_until_char(macro_call.span, '!');\n+\n+                diag.multipart_suggestion(\n+                    format!(\"replace it with `{non_eq_mac}!(..)`\"),\n+                    vec![(name_span, non_eq_mac.to_string()), (lit_span, String::new())],\n+                    Applicability::MachineApplicable,\n+                );\n+            },\n         );\n     }\n }"}, {"sha": "95f35a61bb2895e8e68bede96abd77f9c3958517", "filename": "tests/ui/bool_assert_comparison.fixed", "status": "added", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/e0ee58b7fd470de2001c3ed327dd3c494912cad3/tests%2Fui%2Fbool_assert_comparison.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e0ee58b7fd470de2001c3ed327dd3c494912cad3/tests%2Fui%2Fbool_assert_comparison.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_assert_comparison.fixed?ref=e0ee58b7fd470de2001c3ed327dd3c494912cad3", "patch": "@@ -0,0 +1,161 @@\n+// run-rustfix\n+\n+#![allow(unused, clippy::assertions_on_constants)]\n+#![warn(clippy::bool_assert_comparison)]\n+\n+use std::ops::Not;\n+\n+macro_rules! a {\n+    () => {\n+        true\n+    };\n+}\n+macro_rules! b {\n+    () => {\n+        true\n+    };\n+}\n+\n+// Implements the Not trait but with an output type\n+// that's not bool. Should not suggest a rewrite\n+#[derive(Debug, Clone, Copy)]\n+enum ImplNotTraitWithoutBool {\n+    VariantX(bool),\n+    VariantY(u32),\n+}\n+\n+impl PartialEq<bool> for ImplNotTraitWithoutBool {\n+    fn eq(&self, other: &bool) -> bool {\n+        match *self {\n+            ImplNotTraitWithoutBool::VariantX(b) => b == *other,\n+            _ => false,\n+        }\n+    }\n+}\n+\n+impl Not for ImplNotTraitWithoutBool {\n+    type Output = Self;\n+\n+    fn not(self) -> Self::Output {\n+        match self {\n+            ImplNotTraitWithoutBool::VariantX(b) => ImplNotTraitWithoutBool::VariantX(!b),\n+            ImplNotTraitWithoutBool::VariantY(0) => ImplNotTraitWithoutBool::VariantY(1),\n+            ImplNotTraitWithoutBool::VariantY(_) => ImplNotTraitWithoutBool::VariantY(0),\n+        }\n+    }\n+}\n+\n+// This type implements the Not trait with an Output of\n+// type bool. Using assert!(..) must be suggested\n+#[derive(Debug, Clone, Copy)]\n+struct ImplNotTraitWithBool;\n+\n+impl PartialEq<bool> for ImplNotTraitWithBool {\n+    fn eq(&self, other: &bool) -> bool {\n+        false\n+    }\n+}\n+\n+impl Not for ImplNotTraitWithBool {\n+    type Output = bool;\n+\n+    fn not(self) -> Self::Output {\n+        true\n+    }\n+}\n+\n+#[derive(Debug)]\n+struct NonCopy;\n+\n+impl PartialEq<bool> for NonCopy {\n+    fn eq(&self, other: &bool) -> bool {\n+        false\n+    }\n+}\n+\n+impl Not for NonCopy {\n+    type Output = bool;\n+\n+    fn not(self) -> Self::Output {\n+        true\n+    }\n+}\n+\n+fn main() {\n+    let a = ImplNotTraitWithoutBool::VariantX(true);\n+    let b = ImplNotTraitWithBool;\n+\n+    assert_eq!(\"a\".len(), 1);\n+    assert!(\"a\".is_empty());\n+    assert!(\"\".is_empty());\n+    assert!(\"\".is_empty());\n+    assert_eq!(a!(), b!());\n+    assert_eq!(a!(), \"\".is_empty());\n+    assert_eq!(\"\".is_empty(), b!());\n+    assert_eq!(a, true);\n+    assert!(b);\n+\n+    assert_ne!(\"a\".len(), 1);\n+    assert!(\"a\".is_empty());\n+    assert!(\"\".is_empty());\n+    assert!(\"\".is_empty());\n+    assert_ne!(a!(), b!());\n+    assert_ne!(a!(), \"\".is_empty());\n+    assert_ne!(\"\".is_empty(), b!());\n+    assert_ne!(a, true);\n+    assert!(b);\n+\n+    debug_assert_eq!(\"a\".len(), 1);\n+    debug_assert!(\"a\".is_empty());\n+    debug_assert!(\"\".is_empty());\n+    debug_assert!(\"\".is_empty());\n+    debug_assert_eq!(a!(), b!());\n+    debug_assert_eq!(a!(), \"\".is_empty());\n+    debug_assert_eq!(\"\".is_empty(), b!());\n+    debug_assert_eq!(a, true);\n+    debug_assert!(b);\n+\n+    debug_assert_ne!(\"a\".len(), 1);\n+    debug_assert!(\"a\".is_empty());\n+    debug_assert!(\"\".is_empty());\n+    debug_assert!(\"\".is_empty());\n+    debug_assert_ne!(a!(), b!());\n+    debug_assert_ne!(a!(), \"\".is_empty());\n+    debug_assert_ne!(\"\".is_empty(), b!());\n+    debug_assert_ne!(a, true);\n+    debug_assert!(b);\n+\n+    // assert with error messages\n+    assert_eq!(\"a\".len(), 1, \"tadam {}\", 1);\n+    assert_eq!(\"a\".len(), 1, \"tadam {}\", true);\n+    assert!(\"a\".is_empty(), \"tadam {}\", 1);\n+    assert!(\"a\".is_empty(), \"tadam {}\", true);\n+    assert!(\"a\".is_empty(), \"tadam {}\", true);\n+    assert_eq!(a, true, \"tadam {}\", false);\n+\n+    debug_assert_eq!(\"a\".len(), 1, \"tadam {}\", 1);\n+    debug_assert_eq!(\"a\".len(), 1, \"tadam {}\", true);\n+    debug_assert!(\"a\".is_empty(), \"tadam {}\", 1);\n+    debug_assert!(\"a\".is_empty(), \"tadam {}\", true);\n+    debug_assert!(\"a\".is_empty(), \"tadam {}\", true);\n+    debug_assert_eq!(a, true, \"tadam {}\", false);\n+\n+    assert!(a!());\n+    assert!(b!());\n+\n+    use debug_assert_eq as renamed;\n+    renamed!(a, true);\n+    debug_assert!(b);\n+\n+    let non_copy = NonCopy;\n+    assert_eq!(non_copy, true);\n+    // changing the above to `assert!(non_copy)` would cause a `borrow of moved value`\n+    println!(\"{non_copy:?}\");\n+\n+    macro_rules! in_macro {\n+        ($v:expr) => {{\n+            assert_eq!($v, true);\n+        }};\n+    }\n+    in_macro!(a);\n+}"}, {"sha": "88e7560b4f984ba863186e7695c482384d21015a", "filename": "tests/ui/bool_assert_comparison.rs", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e0ee58b7fd470de2001c3ed327dd3c494912cad3/tests%2Fui%2Fbool_assert_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ee58b7fd470de2001c3ed327dd3c494912cad3/tests%2Fui%2Fbool_assert_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_assert_comparison.rs?ref=e0ee58b7fd470de2001c3ed327dd3c494912cad3", "patch": "@@ -1,3 +1,6 @@\n+// run-rustfix\n+\n+#![allow(unused, clippy::assertions_on_constants)]\n #![warn(clippy::bool_assert_comparison)]\n \n use std::ops::Not;\n@@ -15,7 +18,7 @@ macro_rules! b {\n \n // Implements the Not trait but with an output type\n // that's not bool. Should not suggest a rewrite\n-#[derive(Debug)]\n+#[derive(Debug, Clone, Copy)]\n enum ImplNotTraitWithoutBool {\n     VariantX(bool),\n     VariantY(u32),\n@@ -44,7 +47,7 @@ impl Not for ImplNotTraitWithoutBool {\n \n // This type implements the Not trait with an Output of\n // type bool. Using assert!(..) must be suggested\n-#[derive(Debug)]\n+#[derive(Debug, Clone, Copy)]\n struct ImplNotTraitWithBool;\n \n impl PartialEq<bool> for ImplNotTraitWithBool {\n@@ -61,6 +64,23 @@ impl Not for ImplNotTraitWithBool {\n     }\n }\n \n+#[derive(Debug)]\n+struct NonCopy;\n+\n+impl PartialEq<bool> for NonCopy {\n+    fn eq(&self, other: &bool) -> bool {\n+        false\n+    }\n+}\n+\n+impl Not for NonCopy {\n+    type Output = bool;\n+\n+    fn not(self) -> Self::Output {\n+        true\n+    }\n+}\n+\n fn main() {\n     let a = ImplNotTraitWithoutBool::VariantX(true);\n     let b = ImplNotTraitWithBool;\n@@ -119,4 +139,23 @@ fn main() {\n     debug_assert_eq!(\"a\".is_empty(), false, \"tadam {}\", true);\n     debug_assert_eq!(false, \"a\".is_empty(), \"tadam {}\", true);\n     debug_assert_eq!(a, true, \"tadam {}\", false);\n+\n+    assert_eq!(a!(), true);\n+    assert_eq!(true, b!());\n+\n+    use debug_assert_eq as renamed;\n+    renamed!(a, true);\n+    renamed!(b, true);\n+\n+    let non_copy = NonCopy;\n+    assert_eq!(non_copy, true);\n+    // changing the above to `assert!(non_copy)` would cause a `borrow of moved value`\n+    println!(\"{non_copy:?}\");\n+\n+    macro_rules! in_macro {\n+        ($v:expr) => {{\n+            assert_eq!($v, true);\n+        }};\n+    }\n+    in_macro!(a);\n }"}, {"sha": "3d9f8573e617c8f93d3af887c7063511af82a814", "filename": "tests/ui/bool_assert_comparison.stderr", "status": "modified", "additions": 212, "deletions": 45, "changes": 257, "blob_url": "https://github.com/rust-lang/rust/blob/e0ee58b7fd470de2001c3ed327dd3c494912cad3/tests%2Fui%2Fbool_assert_comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0ee58b7fd470de2001c3ed327dd3c494912cad3/tests%2Fui%2Fbool_assert_comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_assert_comparison.stderr?ref=e0ee58b7fd470de2001c3ed327dd3c494912cad3", "patch": "@@ -1,136 +1,303 @@\n error: used `assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:69:5\n+  --> $DIR/bool_assert_comparison.rs:89:5\n    |\n LL |     assert_eq!(\"a\".is_empty(), false);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::bool-assert-comparison` implied by `-D warnings`\n+help: replace it with `assert!(..)`\n+   |\n+LL -     assert_eq!(\"a\".is_empty(), false);\n+LL +     assert!(\"a\".is_empty());\n+   |\n \n error: used `assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:70:5\n+  --> $DIR/bool_assert_comparison.rs:90:5\n    |\n LL |     assert_eq!(\"\".is_empty(), true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `assert!(..)`\n+   |\n+LL -     assert_eq!(\"\".is_empty(), true);\n+LL +     assert!(\"\".is_empty());\n+   |\n \n error: used `assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:71:5\n+  --> $DIR/bool_assert_comparison.rs:91:5\n    |\n LL |     assert_eq!(true, \"\".is_empty());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `assert!(..)`\n+   |\n+LL -     assert_eq!(true, \"\".is_empty());\n+LL +     assert!(\"\".is_empty());\n+   |\n \n error: used `assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:76:5\n+  --> $DIR/bool_assert_comparison.rs:96:5\n    |\n LL |     assert_eq!(b, true);\n-   |     ^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `assert!(..)`\n+   |\n+LL -     assert_eq!(b, true);\n+LL +     assert!(b);\n+   |\n \n error: used `assert_ne!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:79:5\n+  --> $DIR/bool_assert_comparison.rs:99:5\n    |\n LL |     assert_ne!(\"a\".is_empty(), false);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `assert!(..)`\n+   |\n+LL -     assert_ne!(\"a\".is_empty(), false);\n+LL +     assert!(\"a\".is_empty());\n+   |\n \n error: used `assert_ne!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:80:5\n+  --> $DIR/bool_assert_comparison.rs:100:5\n    |\n LL |     assert_ne!(\"\".is_empty(), true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `assert!(..)`\n+   |\n+LL -     assert_ne!(\"\".is_empty(), true);\n+LL +     assert!(\"\".is_empty());\n+   |\n \n error: used `assert_ne!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:81:5\n+  --> $DIR/bool_assert_comparison.rs:101:5\n    |\n LL |     assert_ne!(true, \"\".is_empty());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `assert!(..)`\n+   |\n+LL -     assert_ne!(true, \"\".is_empty());\n+LL +     assert!(\"\".is_empty());\n+   |\n \n error: used `assert_ne!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:86:5\n+  --> $DIR/bool_assert_comparison.rs:106:5\n    |\n LL |     assert_ne!(b, true);\n-   |     ^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `assert!(..)`\n+   |\n+LL -     assert_ne!(b, true);\n+LL +     assert!(b);\n+   |\n \n error: used `debug_assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:89:5\n+  --> $DIR/bool_assert_comparison.rs:109:5\n    |\n LL |     debug_assert_eq!(\"a\".is_empty(), false);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `debug_assert!(..)`\n+   |\n+LL -     debug_assert_eq!(\"a\".is_empty(), false);\n+LL +     debug_assert!(\"a\".is_empty());\n+   |\n \n error: used `debug_assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:90:5\n+  --> $DIR/bool_assert_comparison.rs:110:5\n    |\n LL |     debug_assert_eq!(\"\".is_empty(), true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `debug_assert!(..)`\n+   |\n+LL -     debug_assert_eq!(\"\".is_empty(), true);\n+LL +     debug_assert!(\"\".is_empty());\n+   |\n \n error: used `debug_assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:91:5\n+  --> $DIR/bool_assert_comparison.rs:111:5\n    |\n LL |     debug_assert_eq!(true, \"\".is_empty());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `debug_assert!(..)`\n+   |\n+LL -     debug_assert_eq!(true, \"\".is_empty());\n+LL +     debug_assert!(\"\".is_empty());\n+   |\n \n error: used `debug_assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:96:5\n+  --> $DIR/bool_assert_comparison.rs:116:5\n    |\n LL |     debug_assert_eq!(b, true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `debug_assert!(..)`\n+   |\n+LL -     debug_assert_eq!(b, true);\n+LL +     debug_assert!(b);\n+   |\n \n error: used `debug_assert_ne!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:99:5\n+  --> $DIR/bool_assert_comparison.rs:119:5\n    |\n LL |     debug_assert_ne!(\"a\".is_empty(), false);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `debug_assert!(..)`\n+   |\n+LL -     debug_assert_ne!(\"a\".is_empty(), false);\n+LL +     debug_assert!(\"a\".is_empty());\n+   |\n \n error: used `debug_assert_ne!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:100:5\n+  --> $DIR/bool_assert_comparison.rs:120:5\n    |\n LL |     debug_assert_ne!(\"\".is_empty(), true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `debug_assert!(..)`\n+   |\n+LL -     debug_assert_ne!(\"\".is_empty(), true);\n+LL +     debug_assert!(\"\".is_empty());\n+   |\n \n error: used `debug_assert_ne!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:101:5\n+  --> $DIR/bool_assert_comparison.rs:121:5\n    |\n LL |     debug_assert_ne!(true, \"\".is_empty());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `debug_assert!(..)`\n+   |\n+LL -     debug_assert_ne!(true, \"\".is_empty());\n+LL +     debug_assert!(\"\".is_empty());\n+   |\n \n error: used `debug_assert_ne!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:106:5\n+  --> $DIR/bool_assert_comparison.rs:126:5\n    |\n LL |     debug_assert_ne!(b, true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `debug_assert!(..)`\n+   |\n+LL -     debug_assert_ne!(b, true);\n+LL +     debug_assert!(b);\n+   |\n \n error: used `assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:111:5\n+  --> $DIR/bool_assert_comparison.rs:131:5\n    |\n LL |     assert_eq!(\"a\".is_empty(), false, \"tadam {}\", 1);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `assert!(..)`\n+   |\n+LL -     assert_eq!(\"a\".is_empty(), false, \"tadam {}\", 1);\n+LL +     assert!(\"a\".is_empty(), \"tadam {}\", 1);\n+   |\n \n error: used `assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:112:5\n+  --> $DIR/bool_assert_comparison.rs:132:5\n    |\n LL |     assert_eq!(\"a\".is_empty(), false, \"tadam {}\", true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `assert!(..)`\n+   |\n+LL -     assert_eq!(\"a\".is_empty(), false, \"tadam {}\", true);\n+LL +     assert!(\"a\".is_empty(), \"tadam {}\", true);\n+   |\n \n error: used `assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:113:5\n+  --> $DIR/bool_assert_comparison.rs:133:5\n    |\n LL |     assert_eq!(false, \"a\".is_empty(), \"tadam {}\", true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `assert!(..)`\n+   |\n+LL -     assert_eq!(false, \"a\".is_empty(), \"tadam {}\", true);\n+LL +     assert!(\"a\".is_empty(), \"tadam {}\", true);\n+   |\n \n error: used `debug_assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:118:5\n+  --> $DIR/bool_assert_comparison.rs:138:5\n    |\n LL |     debug_assert_eq!(\"a\".is_empty(), false, \"tadam {}\", 1);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `debug_assert!(..)`\n+   |\n+LL -     debug_assert_eq!(\"a\".is_empty(), false, \"tadam {}\", 1);\n+LL +     debug_assert!(\"a\".is_empty(), \"tadam {}\", 1);\n+   |\n \n error: used `debug_assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:119:5\n+  --> $DIR/bool_assert_comparison.rs:139:5\n    |\n LL |     debug_assert_eq!(\"a\".is_empty(), false, \"tadam {}\", true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `debug_assert!(..)`\n+   |\n+LL -     debug_assert_eq!(\"a\".is_empty(), false, \"tadam {}\", true);\n+LL +     debug_assert!(\"a\".is_empty(), \"tadam {}\", true);\n+   |\n \n error: used `debug_assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:120:5\n+  --> $DIR/bool_assert_comparison.rs:140:5\n    |\n LL |     debug_assert_eq!(false, \"a\".is_empty(), \"tadam {}\", true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `debug_assert!(..)`\n+   |\n+LL -     debug_assert_eq!(false, \"a\".is_empty(), \"tadam {}\", true);\n+LL +     debug_assert!(\"a\".is_empty(), \"tadam {}\", true);\n+   |\n+\n+error: used `assert_eq!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:143:5\n+   |\n+LL |     assert_eq!(a!(), true);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `assert!(..)`\n+   |\n+LL -     assert_eq!(a!(), true);\n+LL +     assert!(a!());\n+   |\n+\n+error: used `assert_eq!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:144:5\n+   |\n+LL |     assert_eq!(true, b!());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `assert!(..)`\n+   |\n+LL -     assert_eq!(true, b!());\n+LL +     assert!(b!());\n+   |\n+\n+error: used `debug_assert_eq!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:148:5\n+   |\n+LL |     renamed!(b, true);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `debug_assert!(..)`\n+   |\n+LL -     renamed!(b, true);\n+LL +     debug_assert!(b);\n+   |\n \n-error: aborting due to 22 previous errors\n+error: aborting due to 25 previous errors\n "}]}