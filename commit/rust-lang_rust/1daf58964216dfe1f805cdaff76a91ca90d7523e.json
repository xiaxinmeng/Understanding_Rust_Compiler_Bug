{"sha": "1daf58964216dfe1f805cdaff76a91ca90d7523e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkYWY1ODk2NDIxNmRmZTFmODA1Y2RhZmY3NmE5MWNhOTBkNzUyM2U=", "commit": {"author": {"name": "Djzin", "email": "djzin@users.noreply.github.com", "date": "2017-03-13T20:03:10Z"}, "committer": {"name": "Djzin", "email": "djzin@users.noreply.github.com", "date": "2017-03-13T20:06:07Z"}, "message": "add SWAP_BLOCK_SIZE constant", "tree": {"sha": "8350b96dd3defe1f7c93cb2d061ad40cf5496503", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8350b96dd3defe1f7c93cb2d061ad40cf5496503"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1daf58964216dfe1f805cdaff76a91ca90d7523e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1daf58964216dfe1f805cdaff76a91ca90d7523e", "html_url": "https://github.com/rust-lang/rust/commit/1daf58964216dfe1f805cdaff76a91ca90d7523e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1daf58964216dfe1f805cdaff76a91ca90d7523e/comments", "author": {"login": "djzin", "id": 22416015, "node_id": "MDQ6VXNlcjIyNDE2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/22416015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djzin", "html_url": "https://github.com/djzin", "followers_url": "https://api.github.com/users/djzin/followers", "following_url": "https://api.github.com/users/djzin/following{/other_user}", "gists_url": "https://api.github.com/users/djzin/gists{/gist_id}", "starred_url": "https://api.github.com/users/djzin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djzin/subscriptions", "organizations_url": "https://api.github.com/users/djzin/orgs", "repos_url": "https://api.github.com/users/djzin/repos", "events_url": "https://api.github.com/users/djzin/events{/privacy}", "received_events_url": "https://api.github.com/users/djzin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "djzin", "id": 22416015, "node_id": "MDQ6VXNlcjIyNDE2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/22416015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djzin", "html_url": "https://github.com/djzin", "followers_url": "https://api.github.com/users/djzin/followers", "following_url": "https://api.github.com/users/djzin/following{/other_user}", "gists_url": "https://api.github.com/users/djzin/gists{/gist_id}", "starred_url": "https://api.github.com/users/djzin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djzin/subscriptions", "organizations_url": "https://api.github.com/users/djzin/orgs", "repos_url": "https://api.github.com/users/djzin/repos", "events_url": "https://api.github.com/users/djzin/events{/privacy}", "received_events_url": "https://api.github.com/users/djzin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1fec0d87a95310fcc1c59d72953ad6be89c78a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1fec0d87a95310fcc1c59d72953ad6be89c78a5", "html_url": "https://github.com/rust-lang/rust/commit/d1fec0d87a95310fcc1c59d72953ad6be89c78a5"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "9a116e9041f788b5195267c247027ee8eee6371a", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1daf58964216dfe1f805cdaff76a91ca90d7523e/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1daf58964216dfe1f805cdaff76a91ca90d7523e/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=1daf58964216dfe1f805cdaff76a91ca90d7523e", "patch": "@@ -447,8 +447,10 @@ pub unsafe fn uninitialized<T>() -> T {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn swap<T>(x: &mut T, y: &mut T) {\n     unsafe {\n+        const SWAP_BLOCK_SIZE: usize = 16;\n+\n         // Give ourselves some scratch space to work with\n-        let mut t: [u8; 16] = uninitialized();\n+        let mut t: [u8; SWAP_BLOCK_SIZE] = uninitialized();\n \n         let x = x as *mut T as *mut u8;\n         let y = y as *mut T as *mut u8;\n@@ -457,12 +459,12 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n         // can't use a for loop as the `range` impl calls `mem::swap` recursively\n         let len = size_of::<T>() as isize;\n         let mut i = 0;\n-        while i + 16 <= len {\n-            // Perform the swap 16 bytes at a time, `&mut` pointers never alias\n-            ptr::copy_nonoverlapping(x.offset(i), t, 16);\n-            ptr::copy_nonoverlapping(y.offset(i), x.offset(i), 16);\n-            ptr::copy_nonoverlapping(t, y.offset(i), 16);\n-            i += 16;\n+        while i + SWAP_BLOCK_SIZE as isize <= len {\n+            // Perform the swap SWAP_BLOCK_SIZE bytes at a time, `&mut` pointers never alias\n+            ptr::copy_nonoverlapping(x.offset(i), t, SWAP_BLOCK_SIZE);\n+            ptr::copy_nonoverlapping(y.offset(i), x.offset(i), SWAP_BLOCK_SIZE);\n+            ptr::copy_nonoverlapping(t, y.offset(i), SWAP_BLOCK_SIZE);\n+            i += SWAP_BLOCK_SIZE as isize;\n         }\n         if i < len {\n             // Swap any remaining bytes"}]}