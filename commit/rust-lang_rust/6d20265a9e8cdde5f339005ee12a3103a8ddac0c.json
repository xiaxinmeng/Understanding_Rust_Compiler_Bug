{"sha": "6d20265a9e8cdde5f339005ee12a3103a8ddac0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMjAyNjVhOWU4Y2RkZTVmMzM5MDA1ZWUxMmEzMTAzYThkZGFjMGM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-27T06:17:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-27T06:17:48Z"}, "message": "Rollup merge of #62600 - emmericp:libtest-add-show-output, r=gnzlbg\n\nlibtest: add --show-output flag to print stdout of successful tests\n\nThis pull request adds a new flag `--show-output` for tests to show the output of successful tests. For most formatters this was already supported just not exposed via the CLI (apparently only used by `librustdoc`). I've also added support for this option in the JSON formatter.\n\nThis kind of fixes https://github.com/rust-lang/rust/issues/54669 which wants `--format json` to work with `--nocapture`, which is... well, impossible. What this issue really calls for is `--show-output` as implemented here.", "tree": {"sha": "7417a71060a03b4628fa4c4a4cbc4ab41a689763", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7417a71060a03b4628fa4c4a4cbc4ab41a689763"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d20265a9e8cdde5f339005ee12a3103a8ddac0c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdZMsMCRBK7hj4Ov3rIwAAdHIIAH3kDYPpa/9Ir7uQUWzT7Iv5\nvQ1bs0ZNgYNFHcjjOu33DSGpvHhYVxF1NtutTghTd5bz//OCV6E7BNN9TtNg4AMm\n1+SgoDiSPOyu3R4RUzJsKMOse4rlBaL/18DWkj4wegdi/LwsuFYJnTT+Jz4ndEKq\nb7UpguEjjpEnn7zO2u7f4amcOmCTcpEqX+5Vs8hjC29AVth8GZQoU/KVSsSuzE4Q\nJUkK9qa6MycPJvoz2tWuPwH3apF4nNtSRuv1701TAE8J4pmAax/A8d+3dMncR/rp\nEwWLeFadAnpOEpI0e9nJ9qG5jIvrkksRuAW305lfnXBGwkUgIM0Pz7+ZfF8LWEA=\n=YuNg\n-----END PGP SIGNATURE-----\n", "payload": "tree 7417a71060a03b4628fa4c4a4cbc4ab41a689763\nparent 0444b9f66acb5da23dc816e0d8eb59623ba9ea50\nparent 409a41dc24fe72e6d8bf3c2252efb13c94d921c5\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1566886668 +0200\ncommitter GitHub <noreply@github.com> 1566886668 +0200\n\nRollup merge of #62600 - emmericp:libtest-add-show-output, r=gnzlbg\n\nlibtest: add --show-output flag to print stdout of successful tests\n\nThis pull request adds a new flag `--show-output` for tests to show the output of successful tests. For most formatters this was already supported just not exposed via the CLI (apparently only used by `librustdoc`). I've also added support for this option in the JSON formatter.\n\nThis kind of fixes https://github.com/rust-lang/rust/issues/54669 which wants `--format json` to work with `--nocapture`, which is... well, impossible. What this issue really calls for is `--show-output` as implemented here.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d20265a9e8cdde5f339005ee12a3103a8ddac0c", "html_url": "https://github.com/rust-lang/rust/commit/6d20265a9e8cdde5f339005ee12a3103a8ddac0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d20265a9e8cdde5f339005ee12a3103a8ddac0c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "url": "https://api.github.com/repos/rust-lang/rust/commits/0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "html_url": "https://github.com/rust-lang/rust/commit/0444b9f66acb5da23dc816e0d8eb59623ba9ea50"}, {"sha": "409a41dc24fe72e6d8bf3c2252efb13c94d921c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/409a41dc24fe72e6d8bf3c2252efb13c94d921c5", "html_url": "https://github.com/rust-lang/rust/commit/409a41dc24fe72e6d8bf3c2252efb13c94d921c5"}], "stats": {"total": 148, "additions": 101, "deletions": 47}, "files": [{"sha": "e735a9779c924c2070898905069bf46d1c9a135c", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d20265a9e8cdde5f339005ee12a3103a8ddac0c/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d20265a9e8cdde5f339005ee12a3103a8ddac0c/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=6d20265a9e8cdde5f339005ee12a3103a8ddac0c", "patch": "@@ -154,6 +154,6 @@ pub fn test(mut options: Options, diag: &errors::Handler) -> i32 {\n \n     options.test_args.insert(0, \"rustdoctest\".to_string());\n     testing::test_main(&options.test_args, collector.tests,\n-                       testing::Options::new().display_output(options.display_warnings));\n+                       Some(testing::Options::new().display_output(options.display_warnings)));\n     0\n }"}, {"sha": "959587e7f53c6b9681677f17dd9f05c6f3acecf1", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d20265a9e8cdde5f339005ee12a3103a8ddac0c/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d20265a9e8cdde5f339005ee12a3103a8ddac0c/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=6d20265a9e8cdde5f339005ee12a3103a8ddac0c", "patch": "@@ -120,7 +120,7 @@ pub fn run(options: Options) -> i32 {\n     testing::test_main(\n         &test_args,\n         tests,\n-        testing::Options::new().display_output(display_warnings)\n+        Some(testing::Options::new().display_output(display_warnings))\n     );\n \n     0"}, {"sha": "e0bea4ce54530111ec900e689b5b472e5571ecc0", "filename": "src/libtest/formatters/json.rs", "status": "modified", "additions": 40, "deletions": 31, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/6d20265a9e8cdde5f339005ee12a3103a8ddac0c/src%2Flibtest%2Fformatters%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d20265a9e8cdde5f339005ee12a3103a8ddac0c/src%2Flibtest%2Fformatters%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fformatters%2Fjson.rs?ref=6d20265a9e8cdde5f339005ee12a3103a8ddac0c", "patch": "@@ -9,44 +9,57 @@ impl<T: Write> JsonFormatter<T> {\n         Self { out }\n     }\n \n-    fn write_message(&mut self, s: &str) -> io::Result<()> {\n+    fn writeln_message(&mut self, s: &str) -> io::Result<()> {\n         assert!(!s.contains('\\n'));\n \n         self.out.write_all(s.as_ref())?;\n         self.out.write_all(b\"\\n\")\n     }\n \n+    fn write_message(&mut self, s: &str) -> io::Result<()> {\n+        assert!(!s.contains('\\n'));\n+\n+        self.out.write_all(s.as_ref())\n+    }\n+\n     fn write_event(\n         &mut self,\n         ty: &str,\n         name: &str,\n         evt: &str,\n-        extra: Option<String>,\n+        stdout: Option<Cow<'_, str>>,\n+        extra: Option<&str>,\n     ) -> io::Result<()> {\n-        if let Some(extras) = extra {\n+        self.write_message(&*format!(\n+            r#\"{{ \"type\": \"{}\", \"name\": \"{}\", \"event\": \"{}\"\"#,\n+            ty, name, evt\n+        ))?;\n+        if let Some(stdout) = stdout {\n             self.write_message(&*format!(\n-                r#\"{{ \"type\": \"{}\", \"name\": \"{}\", \"event\": \"{}\", {} }}\"#,\n-                ty, name, evt, extras\n-            ))\n-        } else {\n+                r#\", \"stdout\": \"{}\"\"#,\n+                EscapedString(stdout)\n+            ))?;\n+        }\n+        if let Some(extra) = extra {\n             self.write_message(&*format!(\n-                r#\"{{ \"type\": \"{}\", \"name\": \"{}\", \"event\": \"{}\" }}\"#,\n-                ty, name, evt\n-            ))\n+                r#\", {}\"#,\n+                extra\n+            ))?;\n         }\n+        self.writeln_message(\" }\")\n     }\n }\n \n impl<T: Write> OutputFormatter for JsonFormatter<T> {\n     fn write_run_start(&mut self, test_count: usize) -> io::Result<()> {\n-        self.write_message(&*format!(\n+        self.writeln_message(&*format!(\n             r#\"{{ \"type\": \"suite\", \"event\": \"started\", \"test_count\": {} }}\"#,\n             test_count\n         ))\n     }\n \n     fn write_test_start(&mut self, desc: &TestDesc) -> io::Result<()> {\n-        self.write_message(&*format!(\n+        self.writeln_message(&*format!(\n             r#\"{{ \"type\": \"test\", \"event\": \"started\", \"name\": \"{}\" }}\"#,\n             desc.name\n         ))\n@@ -57,34 +70,30 @@ impl<T: Write> OutputFormatter for JsonFormatter<T> {\n         desc: &TestDesc,\n         result: &TestResult,\n         stdout: &[u8],\n+        state: &ConsoleTestState,\n     ) -> io::Result<()> {\n+        let stdout = if (state.options.display_output || *result != TrOk) && stdout.len() > 0 {\n+            Some(String::from_utf8_lossy(stdout))\n+        } else {\n+            None\n+        };\n         match *result {\n-            TrOk => self.write_event(\"test\", desc.name.as_slice(), \"ok\", None),\n-\n-            TrFailed => {\n-                let extra_data = if stdout.len() > 0 {\n-                    Some(format!(\n-                        r#\"\"stdout\": \"{}\"\"#,\n-                        EscapedString(String::from_utf8_lossy(stdout))\n-                    ))\n-                } else {\n-                    None\n-                };\n+            TrOk => self.write_event(\"test\", desc.name.as_slice(), \"ok\", stdout, None),\n \n-                self.write_event(\"test\", desc.name.as_slice(), \"failed\", extra_data)\n-            }\n+            TrFailed => self.write_event(\"test\", desc.name.as_slice(), \"failed\", stdout, None),\n \n             TrFailedMsg(ref m) => self.write_event(\n                 \"test\",\n                 desc.name.as_slice(),\n                 \"failed\",\n-                Some(format!(r#\"\"message\": \"{}\"\"#, EscapedString(m))),\n+                stdout,\n+                Some(&*format!(r#\"\"message\": \"{}\"\"#, EscapedString(m))),\n             ),\n \n-            TrIgnored => self.write_event(\"test\", desc.name.as_slice(), \"ignored\", None),\n+            TrIgnored => self.write_event(\"test\", desc.name.as_slice(), \"ignored\", stdout, None),\n \n             TrAllowedFail => {\n-                self.write_event(\"test\", desc.name.as_slice(), \"allowed_failure\", None)\n+                self.write_event(\"test\", desc.name.as_slice(), \"allowed_failure\", stdout, None)\n             }\n \n             TrBench(ref bs) => {\n@@ -105,20 +114,20 @@ impl<T: Write> OutputFormatter for JsonFormatter<T> {\n                     desc.name, median, deviation, mbps\n                 );\n \n-                self.write_message(&*line)\n+                self.writeln_message(&*line)\n             }\n         }\n     }\n \n     fn write_timeout(&mut self, desc: &TestDesc) -> io::Result<()> {\n-        self.write_message(&*format!(\n+        self.writeln_message(&*format!(\n             r#\"{{ \"type\": \"test\", \"event\": \"timeout\", \"name\": \"{}\" }}\"#,\n             desc.name\n         ))\n     }\n \n     fn write_run_finish(&mut self, state: &ConsoleTestState) -> io::Result<bool> {\n-        self.write_message(&*format!(\n+        self.writeln_message(&*format!(\n             \"{{ \\\"type\\\": \\\"suite\\\", \\\n              \\\"event\\\": \\\"{}\\\", \\\n              \\\"passed\\\": {}, \\"}, {"sha": "cc30b06e5ec38f1fd178a1fbed4f35079a0a2209", "filename": "src/libtest/formatters/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d20265a9e8cdde5f339005ee12a3103a8ddac0c/src%2Flibtest%2Fformatters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d20265a9e8cdde5f339005ee12a3103a8ddac0c/src%2Flibtest%2Fformatters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fformatters%2Fmod.rs?ref=6d20265a9e8cdde5f339005ee12a3103a8ddac0c", "patch": "@@ -17,6 +17,7 @@ pub(crate) trait OutputFormatter {\n         desc: &TestDesc,\n         result: &TestResult,\n         stdout: &[u8],\n+        state: &ConsoleTestState,\n     ) -> io::Result<()>;\n     fn write_run_finish(&mut self, state: &ConsoleTestState) -> io::Result<bool>;\n }"}, {"sha": "88331406a64d0dcd501ca2dba520e346c9cf93c8", "filename": "src/libtest/formatters/pretty.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d20265a9e8cdde5f339005ee12a3103a8ddac0c/src%2Flibtest%2Fformatters%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d20265a9e8cdde5f339005ee12a3103a8ddac0c/src%2Flibtest%2Fformatters%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fformatters%2Fpretty.rs?ref=6d20265a9e8cdde5f339005ee12a3103a8ddac0c", "patch": "@@ -162,7 +162,13 @@ impl<T: Write> OutputFormatter for PrettyFormatter<T> {\n         Ok(())\n     }\n \n-    fn write_result(&mut self, desc: &TestDesc, result: &TestResult, _: &[u8]) -> io::Result<()> {\n+    fn write_result(\n+        &mut self,\n+        desc: &TestDesc,\n+        result: &TestResult,\n+        _: &[u8],\n+        _: &ConsoleTestState,\n+    ) -> io::Result<()> {\n         if self.is_multithreaded {\n             self.write_test_name(desc)?;\n         }"}, {"sha": "d10b0c5807d57406c21be671bc355875eace8d38", "filename": "src/libtest/formatters/terse.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d20265a9e8cdde5f339005ee12a3103a8ddac0c/src%2Flibtest%2Fformatters%2Fterse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d20265a9e8cdde5f339005ee12a3103a8ddac0c/src%2Flibtest%2Fformatters%2Fterse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fformatters%2Fterse.rs?ref=6d20265a9e8cdde5f339005ee12a3103a8ddac0c", "patch": "@@ -170,7 +170,13 @@ impl<T: Write> OutputFormatter for TerseFormatter<T> {\n         Ok(())\n     }\n \n-    fn write_result(&mut self, desc: &TestDesc, result: &TestResult, _: &[u8]) -> io::Result<()> {\n+    fn write_result(\n+        &mut self,\n+        desc: &TestDesc,\n+        result: &TestResult,\n+        _: &[u8],\n+        _: &ConsoleTestState,\n+    ) -> io::Result<()> {\n         match *result {\n             TrOk => self.write_ok(),\n             TrFailed | TrFailedMsg(_) => self.write_failed(),"}, {"sha": "09d5fcc89520e4bb75866ee019d4a8986e792e82", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6d20265a9e8cdde5f339005ee12a3103a8ddac0c/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d20265a9e8cdde5f339005ee12a3103a8ddac0c/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=6d20265a9e8cdde5f339005ee12a3103a8ddac0c", "patch": "@@ -274,7 +274,7 @@ impl Options {\n \n // The default console test runner. It accepts the command line\n // arguments and a vector of test_descs.\n-pub fn test_main(args: &[String], tests: Vec<TestDescAndFn>, options: Options) {\n+pub fn test_main(args: &[String], tests: Vec<TestDescAndFn>, options: Option<Options>) {\n     let mut opts = match parse_opts(args) {\n         Some(Ok(o)) => o,\n         Some(Err(msg)) => {\n@@ -283,8 +283,9 @@ pub fn test_main(args: &[String], tests: Vec<TestDescAndFn>, options: Options) {\n         }\n         None => return,\n     };\n-\n-    opts.options = options;\n+    if let Some(options) = options {\n+        opts.options = options;\n+    }\n     if opts.list {\n         if let Err(e) = list_tests_console(&opts, tests) {\n             eprintln!(\"error: io error when listing tests: {:?}\", e);\n@@ -325,7 +326,7 @@ pub fn test_main_static(tests: &[&TestDescAndFn]) {\n             _ => panic!(\"non-static tests passed to test::test_main_static\"),\n         })\n         .collect();\n-    test_main(&args, owned_tests, Options::new())\n+    test_main(&args, owned_tests, None)\n }\n \n /// Invoked when unit tests terminate. Should panic if the unit\n@@ -448,6 +449,11 @@ fn optgroups() -> getopts::Options {\n             json   = Output a json document\",\n             \"pretty|terse|json\",\n         )\n+        .optflag(\n+            \"\",\n+            \"show-output\",\n+            \"Show captured stdout of successful tests\"\n+        )\n         .optopt(\n             \"Z\",\n             \"\",\n@@ -647,7 +653,7 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n         format,\n         test_threads,\n         skip: matches.opt_strs(\"skip\"),\n-        options: Options::new(),\n+        options: Options::new().display_output(matches.opt_present(\"show-output\")),\n     };\n \n     Some(Ok(test_opts))\n@@ -880,7 +886,7 @@ pub fn run_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Resu\n             TeTimeout(ref test) => out.write_timeout(test),\n             TeResult(test, result, stdout) => {\n                 st.write_log_result(&test, &result)?;\n-                out.write_result(&test, &result, &*stdout)?;\n+                out.write_result(&test, &result, &*stdout, &st)?;\n                 match result {\n                     TrOk => {\n                         st.passed += 1;"}, {"sha": "afc4217ec1ba24a5019963a7b729a6cbf2444f05", "filename": "src/libtest/tests.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6d20265a9e8cdde5f339005ee12a3103a8ddac0c/src%2Flibtest%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d20265a9e8cdde5f339005ee12a3103a8ddac0c/src%2Flibtest%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Ftests.rs?ref=6d20265a9e8cdde5f339005ee12a3103a8ddac0c", "patch": "@@ -180,6 +180,17 @@ fn parse_ignored_flag() {\n     assert_eq!(opts.run_ignored, RunIgnored::Only);\n }\n \n+#[test]\n+fn parse_show_output_flag() {\n+    let args = vec![\n+        \"progname\".to_string(),\n+        \"filter\".to_string(),\n+        \"--show-output\".to_string(),\n+    ];\n+    let opts = parse_opts(&args).unwrap().unwrap();\n+    assert!(opts.options.display_output);\n+}\n+\n #[test]\n fn parse_include_ignored_flag() {\n     let args = vec!["}, {"sha": "8339e230bbe9259493965dcff4e1ba2e9fde3476", "filename": "src/test/run-make-fulldeps/libtest-json/Makefile", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d20265a9e8cdde5f339005ee12a3103a8ddac0c/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/6d20265a9e8cdde5f339005ee12a3103a8ddac0c/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2FMakefile?ref=6d20265a9e8cdde5f339005ee12a3103a8ddac0c", "patch": "@@ -2,13 +2,17 @@\n \n # Test expected libtest's JSON output\n \n-OUTPUT_FILE := $(TMPDIR)/libtest-json-output.json\n+OUTPUT_FILE_DEFAULT := $(TMPDIR)/libtest-json-output-default.json\n+OUTPUT_FILE_STDOUT_SUCCESS := $(TMPDIR)/libtest-json-output-stdout-success.json\n \n all:\n \t$(RUSTC) --test f.rs\n-\tRUST_BACKTRACE=0 $(call RUN,f) -Z unstable-options --test-threads=1 --format=json > $(OUTPUT_FILE) || true\n+\tRUST_BACKTRACE=0 $(call RUN,f) -Z unstable-options --test-threads=1 --format=json > $(OUTPUT_FILE_DEFAULT) || true\n+\tRUST_BACKTRACE=0 $(call RUN,f) -Z unstable-options --test-threads=1 --format=json --show-output > $(OUTPUT_FILE_STDOUT_SUCCESS) || true\n \n-\tcat $(OUTPUT_FILE) | \"$(PYTHON)\" validate_json.py\n+\tcat $(OUTPUT_FILE_DEFAULT) | \"$(PYTHON)\" validate_json.py\n+\tcat $(OUTPUT_FILE_STDOUT_SUCCESS) | \"$(PYTHON)\" validate_json.py\n \n \t# Compare to output file\n-\tdiff output.json $(OUTPUT_FILE)\n+\tdiff output-default.json $(OUTPUT_FILE_DEFAULT)\n+\tdiff output-stdout-success.json $(OUTPUT_FILE_STDOUT_SUCCESS)"}, {"sha": "95ff36bd764ec40afb19495ad8844dda458e42f6", "filename": "src/test/run-make-fulldeps/libtest-json/f.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d20265a9e8cdde5f339005ee12a3103a8ddac0c/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Ff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d20265a9e8cdde5f339005ee12a3103a8ddac0c/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Ff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Ff.rs?ref=6d20265a9e8cdde5f339005ee12a3103a8ddac0c", "patch": "@@ -1,11 +1,12 @@\n #[test]\n fn a() {\n+    println!(\"print from successful test\");\n     // Should pass\n }\n \n #[test]\n fn b() {\n-    assert!(false)\n+    assert!(false);\n }\n \n #[test]"}, {"sha": "8046d722217036ee89595f9bedf7249d917fe948", "filename": "src/test/run-make-fulldeps/libtest-json/output-default.json", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d20265a9e8cdde5f339005ee12a3103a8ddac0c/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-default.json", "raw_url": "https://github.com/rust-lang/rust/raw/6d20265a9e8cdde5f339005ee12a3103a8ddac0c/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-default.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-default.json?ref=6d20265a9e8cdde5f339005ee12a3103a8ddac0c", "patch": "@@ -2,7 +2,7 @@\n { \"type\": \"test\", \"event\": \"started\", \"name\": \"a\" }\n { \"type\": \"test\", \"name\": \"a\", \"event\": \"ok\" }\n { \"type\": \"test\", \"event\": \"started\", \"name\": \"b\" }\n-{ \"type\": \"test\", \"name\": \"b\", \"event\": \"failed\", \"stdout\": \"thread 'main' panicked at 'assertion failed: false', f.rs:8:5\\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\\n\" }\n+{ \"type\": \"test\", \"name\": \"b\", \"event\": \"failed\", \"stdout\": \"thread 'main' panicked at 'assertion failed: false', f.rs:9:5\\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\\n\" }\n { \"type\": \"test\", \"event\": \"started\", \"name\": \"c\" }\n { \"type\": \"test\", \"name\": \"c\", \"event\": \"ok\" }\n { \"type\": \"test\", \"event\": \"started\", \"name\": \"d\" }", "previous_filename": "src/test/run-make-fulldeps/libtest-json/output.json"}, {"sha": "303316278d8aba04a055c45840cc7614622563ba", "filename": "src/test/run-make-fulldeps/libtest-json/output-stdout-success.json", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6d20265a9e8cdde5f339005ee12a3103a8ddac0c/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-stdout-success.json", "raw_url": "https://github.com/rust-lang/rust/raw/6d20265a9e8cdde5f339005ee12a3103a8ddac0c/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-stdout-success.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-stdout-success.json?ref=6d20265a9e8cdde5f339005ee12a3103a8ddac0c", "patch": "@@ -0,0 +1,10 @@\n+{ \"type\": \"suite\", \"event\": \"started\", \"test_count\": 4 }\n+{ \"type\": \"test\", \"event\": \"started\", \"name\": \"a\" }\n+{ \"type\": \"test\", \"name\": \"a\", \"event\": \"ok\", \"stdout\": \"print from successful test\\n\" }\n+{ \"type\": \"test\", \"event\": \"started\", \"name\": \"b\" }\n+{ \"type\": \"test\", \"name\": \"b\", \"event\": \"failed\", \"stdout\": \"thread 'main' panicked at 'assertion failed: false', f.rs:9:5\\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\\n\" }\n+{ \"type\": \"test\", \"event\": \"started\", \"name\": \"c\" }\n+{ \"type\": \"test\", \"name\": \"c\", \"event\": \"ok\", \"stdout\": \"thread 'main' panicked at 'assertion failed: false', f.rs:15:5\\n\" }\n+{ \"type\": \"test\", \"event\": \"started\", \"name\": \"d\" }\n+{ \"type\": \"test\", \"name\": \"d\", \"event\": \"ignored\" }\n+{ \"type\": \"suite\", \"event\": \"failed\", \"passed\": 2, \"failed\": 1, \"allowed_fail\": 0, \"ignored\": 1, \"measured\": 0, \"filtered_out\": 0 }"}]}