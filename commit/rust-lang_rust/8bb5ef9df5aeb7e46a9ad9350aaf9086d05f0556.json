{"sha": "8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiYjVlZjlkZjVhZWI3ZTQ2YTlhZDkzNTBhYWY5MDg2ZDA1ZjA1NTY=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-11-27T19:10:25Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-07T00:05:58Z"}, "message": "librustc_trans: remove unnecessary `as_slice` calls", "tree": {"sha": "ed5cba4732648465be1239842c86128cc8ef9d0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed5cba4732648465be1239842c86128cc8ef9d0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556", "html_url": "https://github.com/rust-lang/rust/commit/8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556/comments", "author": null, "committer": null, "parents": [{"sha": "7d8eabb226718ac70531571478b27a1c9fd74e83", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d8eabb226718ac70531571478b27a1c9fd74e83", "html_url": "https://github.com/rust-lang/rust/commit/7d8eabb226718ac70531571478b27a1c9fd74e83"}], "stats": {"total": 62, "additions": 30, "deletions": 32}, "files": [{"sha": "7f15f5e87d9dd3372db2171b21972cbb4ad4ac61", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556", "patch": "@@ -378,13 +378,13 @@ pub fn handle_options(mut args: Vec<String>) -> Option<getopts::Matches> {\n     // Don't handle -W help here, because we might first load plugins.\n \n     let r = matches.opt_strs(\"Z\");\n-    if r.iter().any(|x| x.as_slice() == \"help\") {\n+    if r.iter().any(|x| *x == \"help\") {\n         describe_debug_flags();\n         return None;\n     }\n \n     let cg_flags = matches.opt_strs(\"C\");\n-    if cg_flags.iter().any(|x| x.as_slice() == \"help\") {\n+    if cg_flags.iter().any(|x| *x == \"help\") {\n         describe_codegen_flags();\n         return None;\n     }"}, {"sha": "62f8177ed758d36dd313ee49d08a73d7187b9988", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556", "patch": "@@ -140,7 +140,7 @@ pub fn find_crate_name(sess: Option<&Session>,\n     if let Some(sess) = sess {\n         if let Some(ref s) = sess.opts.crate_name {\n             if let Some((attr, ref name)) = attr_crate_name {\n-                if s.as_slice() != name.get() {\n+                if *s != name.get() {\n                     let msg = format!(\"--crate-name and #[crate_name] are \\\n                                        required to match, but `{}` != `{}`\",\n                                       s, name);\n@@ -249,7 +249,7 @@ pub fn sanitize(s: &str) -> String {\n                 let mut tstr = String::new();\n                 for c in c.escape_unicode() { tstr.push(c) }\n                 result.push('$');\n-                result.push_str(tstr.as_slice().slice_from(1));\n+                result.push_str(tstr.slice_from(1));\n             }\n         }\n     }\n@@ -669,7 +669,7 @@ fn link_rlib<'a>(sess: &'a Session,\n fn write_rlib_bytecode_object_v1<T: Writer>(writer: &mut T,\n                                             bc_data_deflated: &[u8])\n                                          -> ::std::io::IoResult<()> {\n-    let bc_data_deflated_size: u64 = bc_data_deflated.as_slice().len() as u64;\n+    let bc_data_deflated_size: u64 = bc_data_deflated.len() as u64;\n \n     try! { writer.write(RLIB_BYTECODE_OBJECT_MAGIC) };\n     try! { writer.write_le_u32(1) };\n@@ -910,10 +910,10 @@ fn link_args(cmd: &mut Command,\n         let args = sess.opts.cg.link_args.as_ref().unwrap_or(&empty_vec);\n         let mut args = args.iter().chain(used_link_args.iter());\n         if !dylib\n-            && (t.options.relocation_model.as_slice() == \"pic\"\n-                || sess.opts.cg.relocation_model.as_ref()\n-                   .unwrap_or(&empty_str).as_slice() == \"pic\")\n-            && !args.any(|x| x.as_slice() == \"-static\") {\n+            && (t.options.relocation_model == \"pic\"\n+                || *sess.opts.cg.relocation_model.as_ref()\n+                   .unwrap_or(&empty_str) == \"pic\")\n+            && !args.any(|x| *x == \"-static\") {\n             cmd.arg(\"-pie\");\n         }\n     }"}, {"sha": "a715849ddf62f607fcd17b26230889a58bbcbeb6", "filename": "src/librustc_trans/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556/src%2Flibrustc_trans%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556/src%2Flibrustc_trans%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flto.rs?ref=8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556", "patch": "@@ -143,7 +143,7 @@ pub fn run(sess: &session::Session, llmod: ModuleRef,\n \n     // Internalize everything but the reachable symbols of the current module\n     let cstrs: Vec<::std::c_str::CString> =\n-        reachable.iter().map(|s| s.as_slice().to_c_str()).collect();\n+        reachable.iter().map(|s| s.to_c_str()).collect();\n     let arr: Vec<*const i8> = cstrs.iter().map(|c| c.as_ptr()).collect();\n     let ptr = arr.as_ptr();\n     unsafe {"}, {"sha": "a919fe686abfc955e583b5cd92728ee1c026c1b5", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556", "patch": "@@ -363,7 +363,7 @@ unsafe extern \"C\" fn diagnostic_handler(info: DiagnosticInfoRef, user: *mut c_vo\n             let pass_name = pass_name.as_str().expect(\"got a non-UTF8 pass name from LLVM\");\n             let enabled = match cgcx.remark {\n                 AllPasses => true,\n-                SomePasses(ref v) => v.iter().any(|s| s.as_slice() == pass_name),\n+                SomePasses(ref v) => v.iter().any(|s| *s == pass_name),\n             };\n \n             if enabled {\n@@ -421,7 +421,7 @@ unsafe fn optimize_and_codegen(cgcx: &CodegenContext,\n             // If we're verifying or linting, add them to the function pass\n             // manager.\n             let addpass = |pass: &str| {\n-                pass.as_slice().with_c_str(|s| llvm::LLVMRustAddPass(fpm, s))\n+                pass.with_c_str(|s| llvm::LLVMRustAddPass(fpm, s))\n             };\n             if !config.no_verify { assert!(addpass(\"verify\")); }\n \n@@ -433,7 +433,7 @@ unsafe fn optimize_and_codegen(cgcx: &CodegenContext,\n             }\n \n             for pass in config.passes.iter() {\n-                pass.as_slice().with_c_str(|s| {\n+                pass.with_c_str(|s| {\n                     if !llvm::LLVMRustAddPass(mpm, s) {\n                         cgcx.handler.warn(format!(\"unknown pass {}, ignoring\",\n                                                   *pass).as_slice());"}, {"sha": "f0bb441145cc282172ae3513011d8f7875643ee4", "filename": "src/librustc_trans/save/recorder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Frecorder.rs?ref=8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556", "patch": "@@ -163,7 +163,7 @@ impl<'a> FmtStrs<'a> {\n         let values = values.iter().map(|s| {\n             // Never take more than 1020 chars\n             if s.len() > 1020 {\n-                s.as_slice().slice_to(1020)\n+                s.slice_to(1020)\n             } else {\n                 s.as_slice()\n             }"}, {"sha": "e3afe22897e39bb862585dc886af93e7bbc1a551", "filename": "src/librustc_trans/trans/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556/src%2Flibrustc_trans%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556/src%2Flibrustc_trans%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fasm.rs?ref=8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556", "patch": "@@ -122,7 +122,7 @@ pub fn trans_inline_asm<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, ia: &ast::InlineAsm)\n     };\n \n     let r = ia.asm.get().with_c_str(|a| {\n-        constraints.as_slice().with_c_str(|c| {\n+        constraints.with_c_str(|c| {\n             InlineAsmCall(bcx,\n                           a,\n                           c,"}, {"sha": "3090119788c32cb647d91a5279d1da08fa6a52f0", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556", "patch": "@@ -2739,7 +2739,7 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n                                 format!(\"Illegal null byte in export_name \\\n                                          value: `{}`\", sym).as_slice());\n                         }\n-                        let g = sym.as_slice().with_c_str(|buf| {\n+                        let g = sym.with_c_str(|buf| {\n                             llvm::LLVMAddGlobal(ccx.llmod(), llty, buf)\n                         });\n "}, {"sha": "cf940b1384671aed060127ff63ebf057b1e5e443", "filename": "src/librustc_trans/trans/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs?ref=8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556", "patch": "@@ -774,7 +774,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             let comment_text = format!(\"{} {}\", \"#\",\n                                        sanitized.replace(\"\\n\", \"\\n\\t# \"));\n             self.count_insn(\"inlineasm\");\n-            let asm = comment_text.as_slice().with_c_str(|c| {\n+            let asm = comment_text.with_c_str(|c| {\n                 unsafe {\n                     llvm::LLVMConstInlineAsm(Type::func(&[], &Type::void(self.ccx)).to_ref(),\n                                              c, noname(), False, False)"}, {"sha": "3b5197594a128d3924e84adca809a19e60a1398a", "filename": "src/librustc_trans/trans/context.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs?ref=8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556", "patch": "@@ -222,14 +222,12 @@ unsafe fn create_context_and_module(sess: &Session, mod_name: &str) -> (ContextR\n     sess.target\n         .target\n         .data_layout\n-        .as_slice()\n         .with_c_str(|buf| {\n         llvm::LLVMSetDataLayout(llmod, buf);\n     });\n     sess.target\n         .target\n         .llvm_target\n-        .as_slice()\n         .with_c_str(|buf| {\n         llvm::LLVMRustSetNormalizedTarget(llmod, buf);\n     });"}, {"sha": "6c75086fec60bc68254c7a4fa17d020f269b7dd4", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556", "patch": "@@ -824,8 +824,8 @@ pub fn create_global_var_metadata(cx: &CrateContext,\n         namespace_node.mangled_name_of_contained_item(var_name.as_slice());\n     let var_scope = namespace_node.scope;\n \n-    var_name.as_slice().with_c_str(|var_name| {\n-        linkage_name.as_slice().with_c_str(|linkage_name| {\n+    var_name.with_c_str(|var_name| {\n+        linkage_name.with_c_str(|linkage_name| {\n             unsafe {\n                 llvm::LLVMDIBuilderCreateStaticVariable(DIB(cx),\n                                                         var_scope,\n@@ -1323,7 +1323,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         let containing_scope = namespace_node.scope;\n         (linkage_name, containing_scope)\n     } else {\n-        (function_name.as_slice().to_string(), file_metadata)\n+        (function_name.clone(), file_metadata)\n     };\n \n     // Clang sets this parameter to the opening brace of the function's block,\n@@ -1332,8 +1332,8 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n     let is_local_to_unit = is_node_local_to_unit(cx, fn_ast_id);\n \n-    let fn_metadata = function_name.as_slice().with_c_str(|function_name| {\n-                          linkage_name.as_slice().with_c_str(|linkage_name| {\n+    let fn_metadata = function_name.with_c_str(|function_name| {\n+                          linkage_name.with_c_str(|linkage_name| {\n             unsafe {\n                 llvm::LLVMDIBuilderCreateFunction(\n                     DIB(cx),\n@@ -1554,7 +1554,7 @@ fn compile_unit_metadata(cx: &CrateContext) {\n                                 path_bytes.insert(1, prefix[1]);\n                             }\n \n-                            path_bytes.as_slice().to_c_str()\n+                            path_bytes.to_c_str()\n                         }\n                     _ => fallback_path(cx)\n                 }\n@@ -1589,7 +1589,7 @@ fn compile_unit_metadata(cx: &CrateContext) {\n     });\n \n     fn fallback_path(cx: &CrateContext) -> CString {\n-        cx.link_meta().crate_name.as_slice().to_c_str()\n+        cx.link_meta().crate_name.to_c_str()\n     }\n }\n \n@@ -1796,7 +1796,7 @@ fn pointer_type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     let pointer_llvm_type = type_of::type_of(cx, pointer_type);\n     let (pointer_size, pointer_align) = size_and_align_of(cx, pointer_llvm_type);\n     let name = compute_debuginfo_type_name(cx, pointer_type, false);\n-    let ptr_metadata = name.as_slice().with_c_str(|name| {\n+    let ptr_metadata = name.with_c_str(|name| {\n         unsafe {\n             llvm::LLVMDIBuilderCreatePointerType(\n                 DIB(cx),\n@@ -2488,8 +2488,8 @@ fn prepare_enum_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                              .borrow()\n                              .get_unique_type_id_as_string(unique_type_id);\n \n-    let enum_metadata = enum_name.as_slice().with_c_str(|enum_name| {\n-        unique_type_id_str.as_slice().with_c_str(|unique_type_id_str| {\n+    let enum_metadata = enum_name.with_c_str(|enum_name| {\n+        unique_type_id_str.with_c_str(|unique_type_id_str| {\n             unsafe {\n                 llvm::LLVMDIBuilderCreateUnionType(\n                 DIB(cx),\n@@ -2616,7 +2616,7 @@ fn set_members_of_composite_type(cx: &CrateContext,\n                 ComputedMemberOffset => machine::llelement_offset(cx, composite_llvm_type, i)\n             };\n \n-            member_description.name.as_slice().with_c_str(|member_name| {\n+            member_description.name.with_c_str(|member_name| {\n                 unsafe {\n                     llvm::LLVMDIBuilderCreateMemberType(\n                         DIB(cx),\n@@ -2656,7 +2656,7 @@ fn create_struct_stub(cx: &CrateContext,\n                                               .get_unique_type_id_as_string(unique_type_id);\n     let metadata_stub = unsafe {\n         struct_type_name.with_c_str(|name| {\n-            unique_type_id_str.as_slice().with_c_str(|unique_type_id| {\n+            unique_type_id_str.with_c_str(|unique_type_id| {\n                 // LLVMDIBuilderCreateStructType() wants an empty array. A null\n                 // pointer will lead to hard to trace and debug LLVM assertions\n                 // later on in llvm/lib/IR/Value.cpp."}, {"sha": "4575d8a41e52a389aea96e8c127dea99ca84bb43", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=8bb5ef9df5aeb7e46a9ad9350aaf9086d05f0556", "patch": "@@ -496,7 +496,7 @@ pub fn declare_tydesc<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>)\n     let llalign = llalign_of(ccx, llty);\n     let name = mangle_internal_name_by_type_and_seq(ccx, t, \"tydesc\");\n     debug!(\"+++ declare_tydesc {} {}\", ppaux::ty_to_string(ccx.tcx(), t), name);\n-    let gvar = name.as_slice().with_c_str(|buf| {\n+    let gvar = name.with_c_str(|buf| {\n         unsafe {\n             llvm::LLVMAddGlobal(ccx.llmod(), ccx.tydesc_type().to_ref(), buf)\n         }"}]}