{"sha": "3bf405682df4dfb55b969640b811b317fa55447d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZjQwNTY4MmRmNGRmYjU1Yjk2OTY0MGI4MTFiMzE3ZmE1NTQ0N2Q=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-12-18T23:44:24Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-12-30T00:06:25Z"}, "message": "Fallout from mut slices", "tree": {"sha": "084a0731238ebc8a79606e163fb82e15d2ed096e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/084a0731238ebc8a79606e163fb82e15d2ed096e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bf405682df4dfb55b969640b811b317fa55447d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bf405682df4dfb55b969640b811b317fa55447d", "html_url": "https://github.com/rust-lang/rust/commit/3bf405682df4dfb55b969640b811b317fa55447d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bf405682df4dfb55b969640b811b317fa55447d/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e2afb0052618ca3d758fffd0cf50559be774391", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e2afb0052618ca3d758fffd0cf50559be774391", "html_url": "https://github.com/rust-lang/rust/commit/4e2afb0052618ca3d758fffd0cf50559be774391"}], "stats": {"total": 131, "additions": 65, "deletions": 66}, "files": [{"sha": "404804cd91d2ee76e980e26182a00d34bc42e66a", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=3bf405682df4dfb55b969640b811b317fa55447d", "patch": "@@ -94,7 +94,7 @@ use core::iter::{range_step, MultiplicativeIterator};\n use core::kinds::Sized;\n use core::mem::size_of;\n use core::mem;\n-use core::ops::FnMut;\n+use core::ops::{FnMut,SliceMut};\n use core::prelude::{Clone, Greater, Iterator, IteratorExt, Less, None, Option};\n use core::prelude::{Ord, Ordering, RawPtr, Some, range};\n use core::ptr;\n@@ -1110,7 +1110,7 @@ impl<T> SliceExt<T> for [T] {\n \n     #[inline]\n     fn move_from(&mut self, mut src: Vec<T>, start: uint, end: uint) -> uint {\n-        for (a, b) in self.iter_mut().zip(src[mut start..end].iter_mut()) {\n+        for (a, b) in self.iter_mut().zip(src.slice_mut(start, end).iter_mut()) {\n             mem::swap(a, b);\n         }\n         cmp::min(self.len(), end-start)\n@@ -1326,7 +1326,7 @@ impl<T> BorrowFrom<Vec<T>> for [T] {\n \n #[unstable = \"trait is unstable\"]\n impl<T> BorrowFromMut<Vec<T>> for [T] {\n-    fn borrow_from_mut(owned: &mut Vec<T>) -> &mut [T] { owned[mut] }\n+    fn borrow_from_mut(owned: &mut Vec<T>) -> &mut [T] { owned.as_mut_slice_() }\n }\n \n #[unstable = \"trait is unstable\"]\n@@ -2491,14 +2491,14 @@ mod tests {\n         assert!(a == [7i,2,3,4]);\n         let mut a = [1i,2,3,4,5];\n         let b = vec![5i,6,7,8,9,0];\n-        assert_eq!(a[mut 2..4].move_from(b,1,6), 2);\n+        assert_eq!(a.slice_mut(2, 4).move_from(b,1,6), 2);\n         assert!(a == [1i,2,6,7,5]);\n     }\n \n     #[test]\n     fn test_reverse_part() {\n         let mut values = [1i,2,3,4,5];\n-        values[mut 1..4].reverse();\n+        values.slice_mut(1, 4).reverse();\n         assert!(values == [1,4,3,2,5]);\n     }\n \n@@ -2545,9 +2545,9 @@ mod tests {\n     fn test_bytes_set_memory() {\n         use slice::bytes::MutableByteVector;\n         let mut values = [1u8,2,3,4,5];\n-        values[mut 0..5].set_memory(0xAB);\n+        values.slice_mut(0, 5).set_memory(0xAB);\n         assert!(values == [0xAB, 0xAB, 0xAB, 0xAB, 0xAB]);\n-        values[mut 2..4].set_memory(0xFF);\n+        values.slice_mut(2, 4).set_memory(0xFF);\n         assert!(values == [0xAB, 0xAB, 0xFF, 0xFF, 0xAB]);\n     }\n "}, {"sha": "329fe7c7b4913bc63a52115acc980cc61c0a0107", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=3bf405682df4dfb55b969640b811b317fa55447d", "patch": "@@ -179,7 +179,7 @@ pub fn float_to_str_bytes_common<T: Float, U, F>(\n         _ => ()\n     }\n \n-    buf[mut ..end].reverse();\n+    buf.slice_to_mut(end).reverse();\n \n     // Remember start of the fractional digits.\n     // Points one beyond end of buf if none get generated,\n@@ -316,7 +316,7 @@ pub fn float_to_str_bytes_common<T: Float, U, F>(\n \n             impl<'a> fmt::FormatWriter for Filler<'a> {\n                 fn write(&mut self, bytes: &[u8]) -> fmt::Result {\n-                    slice::bytes::copy_memory(self.buf[mut *self.end..],\n+                    slice::bytes::copy_memory(self.buf.slice_from_mut(*self.end),\n                                               bytes);\n                     *self.end += bytes.len();\n                     Ok(())"}, {"sha": "d25f96ac15fa656b32e8d4e14975ac080381da37", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=3bf405682df4dfb55b969640b811b317fa55447d", "patch": "@@ -264,24 +264,26 @@ impl<T> SliceExt<T> for [T] {\n     fn as_mut_slice(&mut self) -> &mut [T] { self }\n \n     fn slice_mut(&mut self, start: uint, end: uint) -> &mut [T] {\n-        self[mut start..end]\n+        ops::SliceMut::slice_or_fail_mut(self, &start, &end)\n     }\n \n     #[inline]\n     fn slice_from_mut(&mut self, start: uint) -> &mut [T] {\n-        self[mut start..]\n+        ops::SliceMut::slice_from_or_fail_mut(self, &start)\n     }\n \n     #[inline]\n     fn slice_to_mut(&mut self, end: uint) -> &mut [T] {\n-        self[mut ..end]\n+        ops::SliceMut::slice_to_or_fail_mut(self, &end)\n     }\n \n     #[inline]\n     fn split_at_mut(&mut self, mid: uint) -> (&mut [T], &mut [T]) {\n         unsafe {\n             let self2: &mut [T] = mem::transmute_copy(&self);\n-            (self[mut ..mid], self2[mut mid..])\n+\n+            (ops::SliceMut::slice_to_or_fail_mut(self, &mid),\n+             ops::SliceMut::slice_from_or_fail_mut(self2, &mid))\n         }\n     }\n \n@@ -315,14 +317,13 @@ impl<T> SliceExt<T> for [T] {\n \n     #[inline]\n     fn tail_mut(&mut self) -> &mut [T] {\n-        let len = self.len();\n-        self[mut 1..len]\n+        self.slice_from_mut(1)\n     }\n \n     #[inline]\n     fn init_mut(&mut self) -> &mut [T] {\n         let len = self.len();\n-        self[mut 0..len - 1]\n+        self.slice_to_mut(len-1)\n     }\n \n     #[inline]\n@@ -560,7 +561,7 @@ impl<T: Ord> OrdSliceExt<T> for [T] {\n         self.swap(j, i-1);\n \n         // Step 4: Reverse the (previously) weakly decreasing part\n-        self[mut i..].reverse();\n+        self.slice_from_mut(i).reverse();\n \n         true\n     }\n@@ -582,7 +583,7 @@ impl<T: Ord> OrdSliceExt<T> for [T] {\n         }\n \n         // Step 2: Reverse the weakly increasing part\n-        self[mut i..].reverse();\n+        self.slice_from_mut(i).reverse();\n \n         // Step 3: Find the rightmost element equal to or bigger than the pivot (i-1)\n         let mut j = self.len() - 1;"}, {"sha": "1fc5f90028dad73ea219ff409ae8a59dce147f55", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=3bf405682df4dfb55b969640b811b317fa55447d", "patch": "@@ -897,6 +897,7 @@ impl<'a> Iterator<&'a str> for SplitStr<'a> {\n     }\n }\n \n+\n /*\n Section: Comparing strings\n */"}, {"sha": "430188c7e4322c0b2bb5c0dec98a8f441fdb824e", "filename": "src/libcoretest/ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibcoretest%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibcoretest%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fops.rs?ref=3bf405682df4dfb55b969640b811b317fa55447d", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use test::Bencher;\n-use core::ops::{Range, FullRange, RangeFrom};\n+use core::ops::{Range, FullRange, RangeFrom, RangeTo};\n \n // Overhead of dtors\n "}, {"sha": "cbe69295050ec02953a3ee0a9cc841819b780928", "filename": "src/librbml/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibrbml%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibrbml%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Fio.rs?ref=3bf405682df4dfb55b969640b811b317fa55447d", "patch": "@@ -102,7 +102,7 @@ impl Writer for SeekableMemWriter {\n \n             // Do the necessary writes\n             if left.len() > 0 {\n-                slice::bytes::copy_memory(self.buf[mut self.pos..], left);\n+                slice::bytes::copy_memory(self.buf.slice_from_mut(self.pos), left);\n             }\n             if right.len() > 0 {\n                 self.buf.push_all(right);"}, {"sha": "392724bc9a18ee79ad35c13f15bc96fc92384031", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=3bf405682df4dfb55b969640b811b317fa55447d", "patch": "@@ -485,6 +485,7 @@ fn resolve_expr(visitor: &mut RegionResolutionVisitor, expr: &ast::Expr) {\n \n     let prev_cx = visitor.cx;\n     visitor.cx.parent = Some(expr.id);\n+\n     {\n         let region_maps = &mut visitor.region_maps;\n         let terminating = |id| {"}, {"sha": "e1f0168d86be45e59827499870eea5e0333aed96", "filename": "src/librustc_back/sha2.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibrustc_back%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibrustc_back%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsha2.rs?ref=3bf405682df4dfb55b969640b811b317fa55447d", "patch": "@@ -139,14 +139,14 @@ impl FixedBuffer for FixedBuffer64 {\n             let buffer_remaining = size - self.buffer_idx;\n             if input.len() >= buffer_remaining {\n                     copy_memory(\n-                        self.buffer[mut self.buffer_idx..size],\n+                        self.buffer.slice_mut(self.buffer_idx, size),\n                         input[..buffer_remaining]);\n                 self.buffer_idx = 0;\n                 func(&self.buffer);\n                 i += buffer_remaining;\n             } else {\n                 copy_memory(\n-                    self.buffer[mut self.buffer_idx..self.buffer_idx + input.len()],\n+                    self.buffer.slice_mut(self.buffer_idx, self.buffer_idx + input.len()),\n                     input);\n                 self.buffer_idx += input.len();\n                 return;\n@@ -165,7 +165,7 @@ impl FixedBuffer for FixedBuffer64 {\n         // be empty.\n         let input_remaining = input.len() - i;\n         copy_memory(\n-            self.buffer[mut ..input_remaining],\n+            self.buffer.slice_to_mut(input_remaining),\n             input[i..]);\n         self.buffer_idx += input_remaining;\n     }\n@@ -176,13 +176,13 @@ impl FixedBuffer for FixedBuffer64 {\n \n     fn zero_until(&mut self, idx: uint) {\n         assert!(idx >= self.buffer_idx);\n-        self.buffer[mut self.buffer_idx..idx].set_memory(0);\n+        self.buffer.slice_mut(self.buffer_idx, idx).set_memory(0);\n         self.buffer_idx = idx;\n     }\n \n     fn next<'s>(&'s mut self, len: uint) -> &'s mut [u8] {\n         self.buffer_idx += len;\n-        return self.buffer[mut self.buffer_idx - len..self.buffer_idx];\n+        return self.buffer.slice_mut(self.buffer_idx - len, self.buffer_idx);\n     }\n \n     fn full_buffer<'s>(&'s mut self) -> &'s [u8] {\n@@ -362,7 +362,7 @@ impl Engine256State {\n              )\n         );\n \n-        read_u32v_be(w[mut 0..16], data);\n+        read_u32v_be(w.slice_mut(0, 16), data);\n \n         // Putting the message schedule inside the same loop as the round calculations allows for\n         // the compiler to generate better code.\n@@ -498,14 +498,14 @@ impl Digest for Sha256 {\n     fn result(&mut self, out: &mut [u8]) {\n         self.engine.finish();\n \n-        write_u32_be(out[mut 0..4], self.engine.state.h0);\n-        write_u32_be(out[mut 4..8], self.engine.state.h1);\n-        write_u32_be(out[mut 8..12], self.engine.state.h2);\n-        write_u32_be(out[mut 12..16], self.engine.state.h3);\n-        write_u32_be(out[mut 16..20], self.engine.state.h4);\n-        write_u32_be(out[mut 20..24], self.engine.state.h5);\n-        write_u32_be(out[mut 24..28], self.engine.state.h6);\n-        write_u32_be(out[mut 28..32], self.engine.state.h7);\n+        write_u32_be(out.slice_mut(0, 4), self.engine.state.h0);\n+        write_u32_be(out.slice_mut(4, 8), self.engine.state.h1);\n+        write_u32_be(out.slice_mut(8, 12), self.engine.state.h2);\n+        write_u32_be(out.slice_mut(12, 16), self.engine.state.h3);\n+        write_u32_be(out.slice_mut(16, 20), self.engine.state.h4);\n+        write_u32_be(out.slice_mut(20, 24), self.engine.state.h5);\n+        write_u32_be(out.slice_mut(24, 28), self.engine.state.h6);\n+        write_u32_be(out.slice_mut(28, 32), self.engine.state.h7);\n     }\n \n     fn reset(&mut self) {"}, {"sha": "fdbce101c1d6c3ddef3cc6a9fa688e784346a7e2", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=3bf405682df4dfb55b969640b811b317fa55447d", "patch": "@@ -104,7 +104,7 @@ impl<R: Reader> BufferedReader<R> {\n impl<R: Reader> Buffer for BufferedReader<R> {\n     fn fill_buf<'a>(&'a mut self) -> IoResult<&'a [u8]> {\n         if self.pos == self.cap {\n-            self.cap = try!(self.inner.read(self.buf[mut]));\n+            self.cap = try!(self.inner.read(self.buf.as_mut_slice()));\n             self.pos = 0;\n         }\n         Ok(self.buf[self.pos..self.cap])\n@@ -219,7 +219,7 @@ impl<W: Writer> Writer for BufferedWriter<W> {\n         if buf.len() > self.buf.len() {\n             self.inner.as_mut().unwrap().write(buf)\n         } else {\n-            let dst = self.buf[mut self.pos..];\n+            let dst = self.buf.slice_from_mut(self.pos);\n             slice::bytes::copy_memory(dst, buf);\n             self.pos += buf.len();\n             Ok(())"}, {"sha": "5f68bbef93220d82cde2cd606d1d22ecf90cd5cd", "filename": "src/libstd/io/comm_adapters.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcomm_adapters.rs?ref=3bf405682df4dfb55b969640b811b317fa55447d", "patch": "@@ -87,7 +87,7 @@ impl Reader for ChanReader {\n         loop {\n             let count = match self.fill_buf().ok() {\n                 Some(src) => {\n-                    let dst = buf[mut num_read..];\n+                    let dst = buf.slice_from_mut(num_read);\n                     let count = cmp::min(src.len(), dst.len());\n                     bytes::copy_memory(dst, src[..count]);\n                     count"}, {"sha": "f2db2875ebf2ca44f1da07f55630ceba7cf813a5", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=3bf405682df4dfb55b969640b811b317fa55447d", "patch": "@@ -931,11 +931,11 @@ mod test {\n         {\n             let mut read_stream = File::open_mode(filename, Open, Read);\n             {\n-                let read_buf = read_mem[mut 0..4];\n+                let read_buf = read_mem.slice_mut(0, 4);\n                 check!(read_stream.read(read_buf));\n             }\n             {\n-                let read_buf = read_mem[mut 4..8];\n+                let read_buf = read_mem.slice_mut(4, 8);\n                 check!(read_stream.read(read_buf));\n             }\n         }"}, {"sha": "20b1162d859c778e71c740c3c09157919b345aa7", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=3bf405682df4dfb55b969640b811b317fa55447d", "patch": "@@ -169,7 +169,7 @@ impl Reader for MemReader {\n         let write_len = min(buf.len(), self.buf.len() - self.pos);\n         {\n             let input = self.buf[self.pos.. self.pos + write_len];\n-            let output = buf[mut ..write_len];\n+            let output = buf.slice_to_mut(write_len);\n             assert_eq!(input.len(), output.len());\n             slice::bytes::copy_memory(output, input);\n         }\n@@ -214,7 +214,7 @@ impl<'a> Reader for &'a [u8] {\n         let write_len = min(buf.len(), self.len());\n         {\n             let input = self[..write_len];\n-            let output = buf[mut ..write_len];\n+            let output = buf.slice_to_mut(write_len);\n             slice::bytes::copy_memory(output, input);\n         }\n \n@@ -279,7 +279,7 @@ impl<'a> BufWriter<'a> {\n impl<'a> Writer for BufWriter<'a> {\n     #[inline]\n     fn write(&mut self, src: &[u8]) -> IoResult<()> {\n-        let dst = self.buf[mut self.pos..];\n+        let dst = self.buf.slice_from_mut(self.pos);\n         let dst_len = dst.len();\n \n         if dst_len == 0 {\n@@ -359,7 +359,7 @@ impl<'a> Reader for BufReader<'a> {\n         let write_len = min(buf.len(), self.buf.len() - self.pos);\n         {\n             let input = self.buf[self.pos.. self.pos + write_len];\n-            let output = buf[mut ..write_len];\n+            let output = buf.slice_to_mut(write_len);\n             assert_eq!(input.len(), output.len());\n             slice::bytes::copy_memory(output, input);\n         }\n@@ -652,7 +652,7 @@ mod test {\n         assert!(r.read_at_least(buf.len(), &mut buf).is_ok());\n         let b: &[_] = &[1, 2, 3];\n         assert_eq!(buf, b);\n-        assert!(r.read_at_least(0, buf[mut ..0]).is_ok());\n+        assert!(r.read_at_least(0, buf.slice_to_mut(0)).is_ok());\n         assert_eq!(buf, b);\n         assert!(r.read_at_least(buf.len(), &mut buf).is_ok());\n         let b: &[_] = &[4, 5, 6];"}, {"sha": "e1f5efae79fc7e45055ed419e52299a59db570ec", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=3bf405682df4dfb55b969640b811b317fa55447d", "patch": "@@ -513,7 +513,7 @@ pub trait Reader {\n         while read < min {\n             let mut zeroes = 0;\n             loop {\n-                match self.read(buf[mut read..]) {\n+                match self.read(buf.slice_from_mut(read)) {\n                     Ok(0) => {\n                         zeroes += 1;\n                         if zeroes >= NO_PROGRESS_LIMIT {\n@@ -1123,7 +1123,7 @@ pub trait Writer {\n     #[inline]\n     fn write_char(&mut self, c: char) -> IoResult<()> {\n         let mut buf = [0u8, ..4];\n-        let n = c.encode_utf8(buf[mut]).unwrap_or(0);\n+        let n = c.encode_utf8(buf.as_mut_slice()).unwrap_or(0);\n         self.write(buf[..n])\n     }\n \n@@ -1555,7 +1555,7 @@ pub trait Buffer: Reader {\n         {\n             let mut start = 1;\n             while start < width {\n-                match try!(self.read(buf[mut start..width])) {\n+                match try!(self.read(buf.slice_mut(start, width))) {\n                     n if n == width - start => break,\n                     n if n < width - start => { start += n; }\n                     _ => return Err(standard_error(InvalidInput)),"}, {"sha": "4830b15a8432e0c046241339ee07a3e5fd00e46d", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=3bf405682df4dfb55b969640b811b317fa55447d", "patch": "@@ -250,7 +250,7 @@ impl<'a> Parser<'a> {\n             assert!(head.len() + tail.len() <= 8);\n             let mut gs = [0u16, ..8];\n             gs.clone_from_slice(head);\n-            gs[mut 8 - tail.len() .. 8].clone_from_slice(tail);\n+            gs.slice_mut(8 - tail.len(), 8).clone_from_slice(tail);\n             Ipv6Addr(gs[0], gs[1], gs[2], gs[3], gs[4], gs[5], gs[6], gs[7])\n         }\n "}, {"sha": "5bf47dceb5a0e2c7c8e600343955601c1b620aac", "filename": "src/libstd/io/net/udp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fudp.rs?ref=3bf405682df4dfb55b969640b811b317fa55447d", "patch": "@@ -49,7 +49,7 @@ use sys_common;\n ///     match socket.recv_from(&mut buf) {\n ///         Ok((amt, src)) => {\n ///             // Send a reply to the socket we received data from\n-///             let buf = buf[mut ..amt];\n+///             let buf = buf.slice_to_mut(amt);\n ///             buf.reverse();\n ///             socket.send_to(buf, src);\n ///         }"}, {"sha": "43893ca0126532f494a471328b60052732d22936", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=3bf405682df4dfb55b969640b811b317fa55447d", "patch": "@@ -51,7 +51,7 @@ impl<R: Reader> Reader for LimitReader<R> {\n         }\n \n         let len = cmp::min(self.limit, buf.len());\n-        let res = self.inner.read(buf[mut ..len]);\n+        let res = self.inner.read(buf.slice_to_mut(len));\n         match res {\n             Ok(len) => self.limit -= len,\n             _ => {}"}, {"sha": "46c3a4f622a5448defd13e981288eede71929b52", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=3bf405682df4dfb55b969640b811b317fa55447d", "patch": "@@ -55,7 +55,7 @@ mod imp {\n         let mut read = 0;\n         let len = v.len();\n         while read < len {\n-            let result = getrandom(v[mut read..]);\n+            let result = getrandom(v.slice_from_mut(read));\n             if result == -1 {\n                 let err = errno() as libc::c_int;\n                 if err == libc::EINTR {"}, {"sha": "6b007056a51141ac2ce4c9fae6bd1bf5227f2a5d", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf405682df4dfb55b969640b811b317fa55447d/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=3bf405682df4dfb55b969640b811b317fa55447d", "patch": "@@ -139,7 +139,7 @@ fn abort_(args: &fmt::Arguments) -> ! {\n     }\n     impl<'a> FormatWriter for BufWriter<'a> {\n         fn write(&mut self, bytes: &[u8]) -> fmt::Result {\n-            let left = self.buf[mut self.pos..];\n+            let left = self.buf.slice_from_mut(self.pos);\n             let to_write = bytes[..cmp::min(bytes.len(), left.len())];\n             slice::bytes::copy_memory(left, to_write);\n             self.pos += to_write.len();"}, {"sha": "ef38f5ef74341a841d8ae2a7d4bef56617ae317a", "filename": "src/test/bench/shootout-fannkuch-redux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bf405682df4dfb55b969640b811b317fa55447d/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf405682df4dfb55b969640b811b317fa55447d/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs?ref=3bf405682df4dfb55b969640b811b317fa55447d", "patch": "@@ -52,7 +52,7 @@ fn rotate(x: &mut [i32]) {\n \n fn next_permutation(perm: &mut [i32], count: &mut [i32]) {\n     for i in range(1, perm.len()) {\n-        rotate(perm[mut ..i + 1]);\n+        rotate(perm.slice_to_mut(i + 1));\n         let count_i = &mut count[i];\n         if *count_i >= i as i32 {\n             *count_i = 0;\n@@ -131,7 +131,7 @@ impl Perm {\n \n \n fn reverse(tperm: &mut [i32], mut k: uint) {\n-    tperm[mut ..k].reverse()\n+    tperm.slice_to_mut(k).reverse()\n }\n \n fn work(mut perm: Perm, n: uint, max: uint) -> (i32, i32) {"}, {"sha": "178d6777939d837ddf05cf878328ff51a8901ea9", "filename": "src/test/bench/shootout-fasta-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bf405682df4dfb55b969640b811b317fa55447d/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf405682df4dfb55b969640b811b317fa55447d/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs?ref=3bf405682df4dfb55b969640b811b317fa55447d", "patch": "@@ -128,7 +128,7 @@ impl<'a, W: Writer> RepeatFasta<'a, W> {\n \n         copy_memory(buf.as_mut_slice(), alu);\n         let buf_len = buf.len();\n-        copy_memory(buf[mut alu_len..buf_len],\n+        copy_memory(buf.slice_mut(alu_len, buf_len),\n                     alu[..LINE_LEN]);\n \n         let mut pos = 0;"}, {"sha": "6ee2233f1686223306930f1f438e65725dab1273", "filename": "src/test/bench/shootout-reverse-complement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bf405682df4dfb55b969640b811b317fa55447d/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf405682df4dfb55b969640b811b317fa55447d/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs?ref=3bf405682df4dfb55b969640b811b317fa55447d", "patch": "@@ -254,6 +254,6 @@ fn parallel<'a, I, T, F>(mut iter: I, f: F)\n fn main() {\n     let mut data = read_to_end(&mut stdin_raw()).unwrap();\n     let tables = &Tables::new();\n-    parallel(mut_dna_seqs(data[mut]), |&: seq| reverse_complement(seq, tables));\n+    parallel(mut_dna_seqs(data.as_mut_slice()), |&: seq| reverse_complement(seq, tables));\n     stdout_raw().write(data.as_mut_slice()).unwrap();\n }"}, {"sha": "4af748661fd12e43b115e1cf3c9e50639506415c", "filename": "src/test/compile-fail/range-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3bf405682df4dfb55b969640b811b317fa55447d/src%2Ftest%2Fcompile-fail%2Frange-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf405682df4dfb55b969640b811b317fa55447d/src%2Ftest%2Fcompile-fail%2Frange-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frange-1.rs?ref=3bf405682df4dfb55b969640b811b317fa55447d", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // Test range syntax - type errors.\n+#![feature(slicing_syntax)]\n \n pub fn main() {\n     // Mixed types."}, {"sha": "74c304884a07c09f3a20b3328f43f6d8093eb5d4", "filename": "src/test/compile-fail/range-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3bf405682df4dfb55b969640b811b317fa55447d/src%2Ftest%2Fcompile-fail%2Frange-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf405682df4dfb55b969640b811b317fa55447d/src%2Ftest%2Fcompile-fail%2Frange-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frange-2.rs?ref=3bf405682df4dfb55b969640b811b317fa55447d", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // Test range syntax - borrow errors.\n+#![feature(slicing_syntax)]\n \n pub fn main() {\n     let r = {"}, {"sha": "24f710d2ae3f4140f044457c9e98c5eb2d89ddd3", "filename": "src/test/compile-fail/slice-2.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bf405682df4dfb55b969640b811b317fa55447d/src%2Ftest%2Fcompile-fail%2Fslice-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf405682df4dfb55b969640b811b317fa55447d/src%2Ftest%2Fcompile-fail%2Fslice-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fslice-2.rs?ref=3bf405682df4dfb55b969640b811b317fa55447d", "patch": "@@ -20,8 +20,4 @@ fn main() {\n     x[Foo..]; //~ ERROR cannot take a slice of a value with type `Foo`\n     x[..Foo]; //~ ERROR cannot take a slice of a value with type `Foo`\n     x[Foo..Foo]; //~ ERROR cannot take a slice of a value with type `Foo`\n-    x[mut]; //~ ERROR cannot take a mutable slice of a value with type `Foo`\n-    x[mut Foo..]; //~ ERROR cannot take a mutable slice of a value with type `Foo`\n-    x[mut ..Foo]; //~ ERROR cannot take a mutable slice of a value with type `Foo`\n-    x[mut Foo..Foo]; //~ ERROR cannot take a mutable slice of a value with type `Foo`\n }"}, {"sha": "8970bcfd153a13b8b3bb2546eb6e7ef8e249b7e4", "filename": "src/test/compile-fail/slice-mut-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3bf405682df4dfb55b969640b811b317fa55447d/src%2Ftest%2Fcompile-fail%2Fslice-mut-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf405682df4dfb55b969640b811b317fa55447d/src%2Ftest%2Fcompile-fail%2Fslice-mut-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fslice-mut-2.rs?ref=3bf405682df4dfb55b969640b811b317fa55447d", "patch": "@@ -15,5 +15,6 @@\n fn main() {\n     let x: &[int] = &[1, 2, 3, 4, 5];\n     // Can't mutably slice an immutable slice\n-    let y = x[mut 2..4]; //~ ERROR cannot borrow\n+    let slice: &mut [int] = &mut [0, 1];\n+    x[2..4] = slice; //~ ERROR cannot borrow\n }"}, {"sha": "ad6b384d74701423207c8a3e360b48718c4e4a23", "filename": "src/test/compile-fail/slice-mut.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3bf405682df4dfb55b969640b811b317fa55447d/src%2Ftest%2Fcompile-fail%2Fslice-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf405682df4dfb55b969640b811b317fa55447d/src%2Ftest%2Fcompile-fail%2Fslice-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fslice-mut.rs?ref=3bf405682df4dfb55b969640b811b317fa55447d", "patch": "@@ -16,9 +16,4 @@ fn main() {\n     let x: &[int] = &[1, 2, 3, 4, 5];\n     // Immutable slices are not mutable.\n     let y: &mut[_] = x[2..4]; //~ ERROR cannot borrow immutable dereference of `&`-pointer as mutabl\n-\n-    let x: &mut [int] = &mut [1, 2, 3, 4, 5];\n-    // Can't borrow mutably twice\n-    let y = x[mut 1..2];\n-    let y = x[mut 4..5]; //~ERROR cannot borrow\n }"}, {"sha": "864cee03f24dae94cb7e3a6efbc5b5904fed6a96", "filename": "src/test/run-pass/range.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bf405682df4dfb55b969640b811b317fa55447d/src%2Ftest%2Frun-pass%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf405682df4dfb55b969640b811b317fa55447d/src%2Ftest%2Frun-pass%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frange.rs?ref=3bf405682df4dfb55b969640b811b317fa55447d", "patch": "@@ -10,6 +10,8 @@\n \n // Test range syntax.\n \n+#![feature(slicing_syntax)]\n+\n fn foo() -> int { 42 }\n \n pub fn main() {"}]}