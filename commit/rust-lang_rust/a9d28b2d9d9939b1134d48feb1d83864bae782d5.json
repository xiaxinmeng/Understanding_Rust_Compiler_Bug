{"sha": "a9d28b2d9d9939b1134d48feb1d83864bae782d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZDI4YjJkOWQ5OTM5YjExMzRkNDhmZWIxZDgzODY0YmFlNzgyZDU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-23T05:22:48Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-23T21:46:23Z"}, "message": "rt: Remove indexed_list", "tree": {"sha": "6edfd05988349e8e28d41bea398becaf288f0c90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6edfd05988349e8e28d41bea398becaf288f0c90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9d28b2d9d9939b1134d48feb1d83864bae782d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9d28b2d9d9939b1134d48feb1d83864bae782d5", "html_url": "https://github.com/rust-lang/rust/commit/a9d28b2d9d9939b1134d48feb1d83864bae782d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9d28b2d9d9939b1134d48feb1d83864bae782d5/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3fa43f6e0c94d39fc08846c53eac48e2903b97f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3fa43f6e0c94d39fc08846c53eac48e2903b97f", "html_url": "https://github.com/rust-lang/rust/commit/b3fa43f6e0c94d39fc08846c53eac48e2903b97f"}], "stats": {"total": 115, "additions": 0, "deletions": 115}, "files": [{"sha": "4673e9e27e31b7baa06fe396750a8d4adcbf59ac", "filename": "src/rt/util/indexed_list.h", "status": "removed", "additions": 0, "deletions": 115, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/b3fa43f6e0c94d39fc08846c53eac48e2903b97f/src%2Frt%2Futil%2Findexed_list.h", "raw_url": "https://github.com/rust-lang/rust/raw/b3fa43f6e0c94d39fc08846c53eac48e2903b97f/src%2Frt%2Futil%2Findexed_list.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Futil%2Findexed_list.h?ref=b3fa43f6e0c94d39fc08846c53eac48e2903b97f", "patch": "@@ -1,115 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#ifndef INDEXED_LIST_H\n-#define INDEXED_LIST_H\n-\n-#include <assert.h>\n-#include \"array_list.h\"\n-\n-class indexed_list_object {\n-public:\n-    virtual ~indexed_list_object() {}\n-    int32_t list_index;\n-};\n-\n-template<typename T>\n-class indexed_list_element : public indexed_list_object {\n-public:\n-    T value;\n-    indexed_list_element(T value) : value(value) {\n-    }\n-};\n-\n-/**\n- * An array list of objects that are aware of their position in the list.\n- * Normally, objects in this list should derive from the base class\n- * \"indexed_list_object\" however because of nasty Rust compiler dependencies\n- * on the layout of runtime objects we cannot always derive from this\n- * base class, so instead we just enforce the informal protocol that any\n- * object inserted in this list must define a \"int32_t list_index\" member.\n- */\n-template<typename T> class indexed_list {\n-    array_list<T*> list;\n-public:\n-    int32_t append(T *value);\n-    bool pop(T **value);\n-    /**\n-     * Same as pop(), except that it returns NULL if the list is empty.\n-     */\n-    T* pop_value();\n-    size_t length() const {\n-        return list.size();\n-    }\n-    bool is_empty() const {\n-        return list.is_empty();\n-    }\n-    int32_t remove(T* value);\n-    T * operator[](int32_t index);\n-    const T * operator[](int32_t index) const;\n-    ~indexed_list() {}\n-};\n-\n-template<typename T> int32_t\n-indexed_list<T>::append(T *value) {\n-    value->list_index = list.push(value);\n-    return value->list_index;\n-}\n-\n-/**\n- * Swap delete the last object in the list with the specified object.\n- */\n-template<typename T> int32_t\n-indexed_list<T>::remove(T *value) {\n-    assert (value->list_index >= 0);\n-    assert (value->list_index < (int32_t)list.size());\n-    int32_t removeIndex = value->list_index;\n-    T *last = 0;\n-    list.pop(&last);\n-    if (last->list_index == removeIndex) {\n-        last->list_index = -1;\n-        return removeIndex;\n-    } else {\n-        value->list_index = -1;\n-        list[removeIndex] = last;\n-        last->list_index = removeIndex;\n-        return removeIndex;\n-    }\n-}\n-\n-template<typename T> bool\n-indexed_list<T>::pop(T **value) {\n-    return list.pop(value);\n-}\n-\n-template<typename T> T*\n-indexed_list<T>::pop_value() {\n-    T *value = NULL;\n-    if (list.pop(&value)) {\n-        return value;\n-    }\n-    return NULL;\n-}\n-\n-template <typename T> T *\n-indexed_list<T>::operator[](int32_t index) {\n-    T *value = list[index];\n-    assert(value->list_index == index);\n-    return value;\n-}\n-\n-template <typename T> const T *\n-indexed_list<T>::operator[](int32_t index) const {\n-    T *value = list[index];\n-    assert(value->list_index == index);\n-    return value;\n-}\n-\n-#endif /* INDEXED_LIST_H */"}]}