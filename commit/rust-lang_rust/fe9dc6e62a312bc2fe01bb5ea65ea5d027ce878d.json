{"sha": "fe9dc6e62a312bc2fe01bb5ea65ea5d027ce878d", "node_id": "C_kwDOAAsO6NoAKGZlOWRjNmU2MmEzMTJiYzJmZTAxYmI1ZWE2NWVhNWQwMjdjZTg3OGQ", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2022-01-12T20:45:31Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2022-01-17T00:39:34Z"}, "message": "Change TerminatorKind::Abort to call the panic handler instead of\naborting immediately.\n\nThe panic handler is called with a special flag which forces it to abort\nafter calling the panic hook.", "tree": {"sha": "945ace8c55bb41eb8ab713d06f0174b36d39d316", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/945ace8c55bb41eb8ab713d06f0174b36d39d316"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe9dc6e62a312bc2fe01bb5ea65ea5d027ce878d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe9dc6e62a312bc2fe01bb5ea65ea5d027ce878d", "html_url": "https://github.com/rust-lang/rust/commit/fe9dc6e62a312bc2fe01bb5ea65ea5d027ce878d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe9dc6e62a312bc2fe01bb5ea65ea5d027ce878d/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "528c4f9158ead3df8cecb51663db50e711fec377", "url": "https://api.github.com/repos/rust-lang/rust/commits/528c4f9158ead3df8cecb51663db50e711fec377", "html_url": "https://github.com/rust-lang/rust/commit/528c4f9158ead3df8cecb51663db50e711fec377"}], "stats": {"total": 66, "additions": 60, "deletions": 6}, "files": [{"sha": "b1a76b80002db8486ee6a7f3c09d18f8975b750b", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fe9dc6e62a312bc2fe01bb5ea65ea5d027ce878d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9dc6e62a312bc2fe01bb5ea65ea5d027ce878d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=fe9dc6e62a312bc2fe01bb5ea65ea5d027ce878d", "patch": "@@ -477,6 +477,28 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         helper.do_call(self, &mut bx, fn_abi, llfn, &args, None, cleanup);\n     }\n \n+    fn codegen_abort_terminator(\n+        &mut self,\n+        helper: TerminatorCodegenHelper<'tcx>,\n+        mut bx: Bx,\n+        terminator: &mir::Terminator<'tcx>,\n+    ) {\n+        let span = terminator.source_info.span;\n+        self.set_debug_loc(&mut bx, terminator.source_info);\n+\n+        // Get the location information.\n+        let location = self.get_caller_location(&mut bx, terminator.source_info).immediate();\n+\n+        // Obtain the panic entry point.\n+        let def_id = common::langcall(bx.tcx(), Some(span), \"\", LangItem::PanicNoUnwind);\n+        let instance = ty::Instance::mono(bx.tcx(), def_id);\n+        let fn_abi = bx.fn_abi_of_instance(instance, ty::List::empty());\n+        let llfn = bx.get_fn_addr(instance);\n+\n+        // Codegen the actual panic invoke/call.\n+        helper.do_call(self, &mut bx, fn_abi, llfn, &[location], None, None);\n+    }\n+\n     /// Returns `true` if this is indeed a panic intrinsic and codegen is done.\n     fn codegen_panic_intrinsic(\n         &mut self,\n@@ -1014,10 +1036,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             mir::TerminatorKind::Resume => self.codegen_resume_terminator(helper, bx),\n \n             mir::TerminatorKind::Abort => {\n-                bx.abort();\n-                // `abort` does not terminate the block, so we still need to generate\n-                // an `unreachable` terminator after it.\n-                bx.unreachable();\n+                self.codegen_abort_terminator(helper, bx, terminator);\n             }\n \n             mir::TerminatorKind::Goto { target } => {"}, {"sha": "be4849d0b846e1064ac31b36617a4e74db93b1f4", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe9dc6e62a312bc2fe01bb5ea65ea5d027ce878d/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9dc6e62a312bc2fe01bb5ea65ea5d027ce878d/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=fe9dc6e62a312bc2fe01bb5ea65ea5d027ce878d", "patch": "@@ -283,6 +283,7 @@ language_item_table! {\n     PanicInfo,               sym::panic_info,          panic_info,                 Target::Struct,         GenericRequirement::None;\n     PanicLocation,           sym::panic_location,      panic_location,             Target::Struct,         GenericRequirement::None;\n     PanicImpl,               sym::panic_impl,          panic_impl,                 Target::Fn,             GenericRequirement::None;\n+    PanicNoUnwind,           sym::panic_no_unwind,     panic_no_unwind,            Target::Fn,             GenericRequirement::Exact(0);\n     /// libstd panic entry point. Necessary for const eval to be able to catch it\n     BeginPanic,              sym::begin_panic,         begin_panic_fn,             Target::Fn,             GenericRequirement::None;\n "}, {"sha": "7f13da5d38f870c6757400306b95ef62d2e4a423", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fe9dc6e62a312bc2fe01bb5ea65ea5d027ce878d/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9dc6e62a312bc2fe01bb5ea65ea5d027ce878d/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=fe9dc6e62a312bc2fe01bb5ea65ea5d027ce878d", "patch": "@@ -807,10 +807,18 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                     self.output.push(create_fn_mono_item(tcx, instance, source));\n                 }\n             }\n+            mir::TerminatorKind::Abort { .. } => {\n+                let instance = Instance::mono(\n+                    tcx,\n+                    tcx.require_lang_item(LangItem::PanicNoUnwind, Some(source)),\n+                );\n+                if should_codegen_locally(tcx, &instance) {\n+                    self.output.push(create_fn_mono_item(tcx, instance, source));\n+                }\n+            }\n             mir::TerminatorKind::Goto { .. }\n             | mir::TerminatorKind::SwitchInt { .. }\n             | mir::TerminatorKind::Resume\n-            | mir::TerminatorKind::Abort\n             | mir::TerminatorKind::Return\n             | mir::TerminatorKind::Unreachable => {}\n             mir::TerminatorKind::GeneratorDrop"}, {"sha": "1e9c8eab2a98a26d9e44005b4f38397f294f6a96", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe9dc6e62a312bc2fe01bb5ea65ea5d027ce878d/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9dc6e62a312bc2fe01bb5ea65ea5d027ce878d/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=fe9dc6e62a312bc2fe01bb5ea65ea5d027ce878d", "patch": "@@ -983,6 +983,7 @@ symbols! {\n         panic_implementation,\n         panic_info,\n         panic_location,\n+        panic_no_unwind,\n         panic_runtime,\n         panic_str,\n         panic_unwind,"}, {"sha": "5078eea07a15c5499daff9c0fa50d9982407c83b", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fe9dc6e62a312bc2fe01bb5ea65ea5d027ce878d/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9dc6e62a312bc2fe01bb5ea65ea5d027ce878d/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=fe9dc6e62a312bc2fe01bb5ea65ea5d027ce878d", "patch": "@@ -77,6 +77,31 @@ fn panic_bounds_check(index: usize, len: usize) -> ! {\n     panic!(\"index out of bounds: the len is {} but the index is {}\", len, index)\n }\n \n+#[cfg(not(bootstrap))]\n+#[cold]\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n+#[track_caller]\n+#[lang = \"panic_no_unwind\"] // needed by codegen for panic in nounwind function\n+fn panic_no_unwind() -> ! {\n+    if cfg!(feature = \"panic_immediate_abort\") {\n+        super::intrinsics::abort()\n+    }\n+\n+    // NOTE This function never crosses the FFI boundary; it's a Rust-to-Rust call\n+    // that gets resolved to the `#[panic_handler]` function.\n+    extern \"Rust\" {\n+        #[lang = \"panic_impl\"]\n+        fn panic_impl(pi: &PanicInfo<'_>) -> !;\n+    }\n+\n+    // PanicInfo with the `can_unwind` flag set to false forces an abort.\n+    let fmt = format_args!(\"panic in a function that cannot unwind\");\n+    let pi = PanicInfo::internal_constructor(Some(&fmt), Location::caller(), false);\n+\n+    // SAFETY: `panic_impl` is defined in safe Rust code and thus is safe to call.\n+    unsafe { panic_impl(&pi) }\n+}\n+\n /// The entry point for panicking with a formatted message.\n ///\n /// This is designed to reduce the amount of code required at the call"}, {"sha": "f238741e599f68242616ecbaf5150baf0d13a842", "filename": "src/test/codegen/unwind-and-panic-abort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe9dc6e62a312bc2fe01bb5ea65ea5d027ce878d/src%2Ftest%2Fcodegen%2Funwind-and-panic-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9dc6e62a312bc2fe01bb5ea65ea5d027ce878d/src%2Ftest%2Fcodegen%2Funwind-and-panic-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-and-panic-abort.rs?ref=fe9dc6e62a312bc2fe01bb5ea65ea5d027ce878d", "patch": "@@ -9,7 +9,7 @@ extern \"C-unwind\" {\n \n // CHECK: Function Attrs:{{.*}}nounwind\n // CHECK-NEXT: define{{.*}}void @foo\n-// CHECK: call void @llvm.trap()\n+// CHECK: call void @_ZN4core9panicking15panic_no_unwind\n #[no_mangle]\n pub unsafe extern \"C\" fn foo() {\n     bar();"}]}