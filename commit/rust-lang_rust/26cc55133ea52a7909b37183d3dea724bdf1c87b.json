{"sha": "26cc55133ea52a7909b37183d3dea724bdf1c87b", "node_id": "C_kwDOAAsO6NoAKDI2Y2M1NTEzM2VhNTJhNzkwOWIzNzE4M2QzZGVhNzI0YmRmMWM4N2I", "commit": {"author": {"name": "Piotr Mikulski", "email": "piotr@near.org", "date": "2021-12-24T05:41:00Z"}, "committer": {"name": "Piotr Mikulski", "email": "piotr@near.org", "date": "2021-12-24T05:41:25Z"}, "message": "rewrite the PR", "tree": {"sha": "c3343b24193b38d3d3f141ddd4f16f6a8c65c8fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3343b24193b38d3d3f141ddd4f16f6a8c65c8fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26cc55133ea52a7909b37183d3dea724bdf1c87b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26cc55133ea52a7909b37183d3dea724bdf1c87b", "html_url": "https://github.com/rust-lang/rust/commit/26cc55133ea52a7909b37183d3dea724bdf1c87b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26cc55133ea52a7909b37183d3dea724bdf1c87b/comments", "author": {"login": "pmnoxx", "id": 7828365, "node_id": "MDQ6VXNlcjc4MjgzNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/7828365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmnoxx", "html_url": "https://github.com/pmnoxx", "followers_url": "https://api.github.com/users/pmnoxx/followers", "following_url": "https://api.github.com/users/pmnoxx/following{/other_user}", "gists_url": "https://api.github.com/users/pmnoxx/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmnoxx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmnoxx/subscriptions", "organizations_url": "https://api.github.com/users/pmnoxx/orgs", "repos_url": "https://api.github.com/users/pmnoxx/repos", "events_url": "https://api.github.com/users/pmnoxx/events{/privacy}", "received_events_url": "https://api.github.com/users/pmnoxx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmnoxx", "id": 7828365, "node_id": "MDQ6VXNlcjc4MjgzNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/7828365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmnoxx", "html_url": "https://github.com/pmnoxx", "followers_url": "https://api.github.com/users/pmnoxx/followers", "following_url": "https://api.github.com/users/pmnoxx/following{/other_user}", "gists_url": "https://api.github.com/users/pmnoxx/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmnoxx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmnoxx/subscriptions", "organizations_url": "https://api.github.com/users/pmnoxx/orgs", "repos_url": "https://api.github.com/users/pmnoxx/repos", "events_url": "https://api.github.com/users/pmnoxx/events{/privacy}", "received_events_url": "https://api.github.com/users/pmnoxx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79cf41297af69b2e46be6ad77986ebe2a41a4667", "url": "https://api.github.com/repos/rust-lang/rust/commits/79cf41297af69b2e46be6ad77986ebe2a41a4667", "html_url": "https://github.com/rust-lang/rust/commit/79cf41297af69b2e46be6ad77986ebe2a41a4667"}], "stats": {"total": 39, "additions": 31, "deletions": 8}, "files": [{"sha": "5f04d8e18285a9a36fde0183c12ba8e3508802fb", "filename": "clippy_lints/src/methods/unwrap_or_else_default.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/26cc55133ea52a7909b37183d3dea724bdf1c87b/clippy_lints%2Fsrc%2Fmethods%2Funwrap_or_else_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26cc55133ea52a7909b37183d3dea724bdf1c87b/clippy_lints%2Fsrc%2Fmethods%2Funwrap_or_else_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funwrap_or_else_default.rs?ref=26cc55133ea52a7909b37183d3dea724bdf1c87b", "patch": "@@ -1,10 +1,11 @@\n //! Lint for `some_result_or_option.unwrap_or_else(Default::default)`\n \n use super::UNWRAP_OR_ELSE_DEFAULT;\n-use clippy_utils::{\n-    diagnostics::span_lint_and_sugg, is_default_equivalent, is_trait_item, source::snippet_with_applicability,\n-    ty::is_type_diagnostic_item,\n+use clippy_utils::{diagnostics::span_lint_and_sugg, is_trait_item, source::snippet_with_applicability, ty::is_type_diagnostic_item,\n+                   is_default_equivalent_ctor, is_diag_trait_item\n };\n+use rustc_hir::ExprKind;\n+\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n@@ -23,9 +24,25 @@ pub(super) fn check<'tcx>(\n     let is_option = is_type_diagnostic_item(cx, recv_ty, sym::Option);\n     let is_result = is_type_diagnostic_item(cx, recv_ty, sym::Result);\n \n+    let is_default_eq = match &u_arg.kind {\n+        ExprKind::Path(qpath) => {\n+            if let Some(repl_def_id) = cx.qpath_res(qpath, u_arg.hir_id).opt_def_id() {\n+                if is_diag_trait_item(cx, repl_def_id, sym::Default)\n+                    || is_default_equivalent_ctor(cx, repl_def_id, qpath) {\n+                    true\n+                } else {\n+                    false\n+                }\n+            } else {\n+                false\n+            }\n+        },\n+        _ => {false}\n+    };\n+\n     if_chain! {\n         if is_option || is_result;\n-        if is_trait_item(cx, u_arg, sym::Default) || is_default_equivalent(cx, u_arg);\n+        if is_trait_item(cx, u_arg, sym::Default) || is_default_eq;\n         then {\n             let mut applicability = Applicability::MachineApplicable;\n "}, {"sha": "1b56bfbe1d666a00b42b414cb5b267a31a29810b", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26cc55133ea52a7909b37183d3dea724bdf1c87b/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26cc55133ea52a7909b37183d3dea724bdf1c87b/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=26cc55133ea52a7909b37183d3dea724bdf1c87b", "patch": "@@ -637,7 +637,7 @@ pub fn can_mut_borrow_both(cx: &LateContext<'_>, e1: &Expr<'_>, e2: &Expr<'_>) -\n \n /// Returns true if the `def_id` associated with the `path` is recognized as a \"default-equivalent\"\n /// constructor from the std library\n-fn is_default_equivalent_ctor(cx: &LateContext<'_>, def_id: DefId, path: &QPath<'_>) -> bool {\n+pub fn is_default_equivalent_ctor(cx: &LateContext<'_>, def_id: DefId, path: &QPath<'_>) -> bool {\n     let std_types_symbols = &[\n         sym::String,\n         sym::Vec,"}, {"sha": "c2b9bd2c881fe916b8e2f789dcf3bce7de18b1ee", "filename": "tests/ui/unwrap_or_else_default.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26cc55133ea52a7909b37183d3dea724bdf1c87b/tests%2Fui%2Funwrap_or_else_default.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/26cc55133ea52a7909b37183d3dea724bdf1c87b/tests%2Fui%2Funwrap_or_else_default.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap_or_else_default.fixed?ref=26cc55133ea52a7909b37183d3dea724bdf1c87b", "patch": "@@ -45,7 +45,7 @@ fn unwrap_or_else_default() {\n     with_enum.unwrap_or_else(Enum::A);\n \n     let with_new = Some(vec![1]);\n-    with_new.unwrap_or_else(Vec::new);\n+    with_new.unwrap_or_default();\n \n     let with_err: Result<_, ()> = Ok(vec![1]);\n     with_err.unwrap_or_else(make);"}, {"sha": "b49b7fb77c28f996d051281373a110e11a42e2c1", "filename": "tests/ui/unwrap_or_else_default.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26cc55133ea52a7909b37183d3dea724bdf1c87b/tests%2Fui%2Funwrap_or_else_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26cc55133ea52a7909b37183d3dea724bdf1c87b/tests%2Fui%2Funwrap_or_else_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap_or_else_default.stderr?ref=26cc55133ea52a7909b37183d3dea724bdf1c87b", "patch": "@@ -1,10 +1,16 @@\n+error: use of `.unwrap_or_else(..)` to construct default value\n+  --> $DIR/unwrap_or_else_default.rs:48:5\n+   |\n+LL |     with_new.unwrap_or_else(Vec::new);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `with_new.unwrap_or_default()`\n+   |\n+   = note: `-D clippy::unwrap-or-else-default` implied by `-D warnings`\n+\n error: use of `.unwrap_or_else(..)` to construct default value\n   --> $DIR/unwrap_or_else_default.rs:62:5\n    |\n LL |     with_real_default.unwrap_or_else(<HasDefaultAndDuplicate as Default>::default);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `with_real_default.unwrap_or_default()`\n-   |\n-   = note: `-D clippy::unwrap-or-else-default` implied by `-D warnings`\n \n error: use of `.unwrap_or_else(..)` to construct default value\n   --> $DIR/unwrap_or_else_default.rs:65:5"}]}