{"sha": "d1ac46201d568fbe08deabafaa91100a1810d31b", "node_id": "C_kwDOAAsO6NoAKGQxYWM0NjIwMWQ1NjhmYmUwOGRlYWJhZmFhOTExMDBhMTgxMGQzMWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-02T19:00:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-02T19:00:49Z"}, "message": "Auto merge of #12680 - lowr:fix/12428-regression, r=Veykril\n\nfix regressions on assignment expressions\n\nThis is a follow-up PR on #12428. I'm not sure if this is everything I overlooked, so if there are more things that are not right, we may want to revert #12428.\n\nThis should also fix the increase of the type mismatches and the unknown types in diesel in the [metrics](https://rust-analyzer.github.io/metrics/?start=2022-06-23&end=2022-07-01) introduced by #12428.\n\nThe regressions are:\n\n- some coercions don't work in the ordinary (i.e. non-destructuring) assignments\n\n    In order for coercions on ADT fields instantiations to work, lhs type has to be known before inferring rhs. #12428 changed the inference order, making rhs inferred before lhs, breaking the coercion, so I restored the original inference mechanism for the ordinary assignments.\n\n    Note that this kind of coercion doesn't happen in destructuring assigments, because when they are desugared, the struct expression is first assigned to a temporary, which is then assigned to the assignee, which is not coercion site anymore.\n\n- type mismatches on individual identifiers are not reported", "tree": {"sha": "1eb5b63d4e9fb33dcc349f848cfe40e2813983fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1eb5b63d4e9fb33dcc349f848cfe40e2813983fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1ac46201d568fbe08deabafaa91100a1810d31b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1ac46201d568fbe08deabafaa91100a1810d31b", "html_url": "https://github.com/rust-lang/rust/commit/d1ac46201d568fbe08deabafaa91100a1810d31b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1ac46201d568fbe08deabafaa91100a1810d31b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d101439c77c6842e41e04f1438eb1d93095dea52", "url": "https://api.github.com/repos/rust-lang/rust/commits/d101439c77c6842e41e04f1438eb1d93095dea52", "html_url": "https://github.com/rust-lang/rust/commit/d101439c77c6842e41e04f1438eb1d93095dea52"}, {"sha": "649e1f54cfb9b2b0a17261e5fb20d7745ffec4d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/649e1f54cfb9b2b0a17261e5fb20d7745ffec4d3", "html_url": "https://github.com/rust-lang/rust/commit/649e1f54cfb9b2b0a17261e5fb20d7745ffec4d3"}], "stats": {"total": 105, "additions": 102, "deletions": 3}, "files": [{"sha": "6dee0322a9bedc0044e9a58f9755499f2f850216", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d1ac46201d568fbe08deabafaa91100a1810d31b/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ac46201d568fbe08deabafaa91100a1810d31b/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=d1ac46201d568fbe08deabafaa91100a1810d31b", "patch": "@@ -593,8 +593,28 @@ impl<'a> InferenceContext<'a> {\n             }\n             Expr::BinaryOp { lhs, rhs, op } => match op {\n                 Some(BinaryOp::Assignment { op: None }) => {\n-                    let rhs_ty = self.infer_expr(*rhs, &Expectation::none());\n-                    self.infer_assignee_expr(*lhs, &rhs_ty);\n+                    let lhs = *lhs;\n+                    let is_ordinary = match &self.body[lhs] {\n+                        Expr::Array(_)\n+                        | Expr::RecordLit { .. }\n+                        | Expr::Tuple { .. }\n+                        | Expr::Underscore => false,\n+                        Expr::Call { callee, .. } => !matches!(&self.body[*callee], Expr::Path(_)),\n+                        _ => true,\n+                    };\n+\n+                    // In ordinary (non-destructuring) assignments, the type of\n+                    // `lhs` must be inferred first so that the ADT fields\n+                    // instantiations in RHS can be coerced to it. Note that this\n+                    // cannot happen in destructuring assignments because of how\n+                    // they are desugared.\n+                    if is_ordinary {\n+                        let lhs_ty = self.infer_expr(lhs, &Expectation::none());\n+                        self.infer_expr_coerce(*rhs, &Expectation::has_type(lhs_ty));\n+                    } else {\n+                        let rhs_ty = self.infer_expr(*rhs, &Expectation::none());\n+                        self.infer_assignee_expr(lhs, &rhs_ty);\n+                    }\n                     self.result.standard_types.unit.clone()\n                 }\n                 Some(BinaryOp::LogicOp(_)) => {\n@@ -891,7 +911,15 @@ impl<'a> InferenceContext<'a> {\n                 let lhs_ty = self.insert_type_vars_shallow(lhs_ty);\n                 let ty = match self.coerce(None, &rhs_ty, &lhs_ty) {\n                     Ok(ty) => ty,\n-                    Err(_) => self.err_ty(),\n+                    Err(_) => {\n+                        self.result.type_mismatches.insert(\n+                            lhs.into(),\n+                            TypeMismatch { expected: rhs_ty.clone(), actual: lhs_ty.clone() },\n+                        );\n+                        // `rhs_ty` is returned so no further type mismatches are\n+                        // reported because of this mismatch.\n+                        rhs_ty\n+                    }\n                 };\n                 self.write_expr_ty(lhs, ty.clone());\n                 return ty;"}, {"sha": "bf59fadc2c33693e75de79a0fe016f2896a6cf18", "filename": "crates/hir-ty/src/tests/coercion.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d1ac46201d568fbe08deabafaa91100a1810d31b/crates%2Fhir-ty%2Fsrc%2Ftests%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ac46201d568fbe08deabafaa91100a1810d31b/crates%2Fhir-ty%2Fsrc%2Ftests%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fcoercion.rs?ref=d1ac46201d568fbe08deabafaa91100a1810d31b", "patch": "@@ -709,3 +709,47 @@ fn test() {\n         \"#,\n     );\n }\n+\n+#[test]\n+fn assign_coerce_struct_fields() {\n+    check_no_mismatches(\n+        r#\"\n+//- minicore: coerce_unsized\n+struct S;\n+trait Tr {}\n+impl Tr for S {}\n+struct V<T> { t: T }\n+\n+fn main() {\n+    let a: V<&dyn Tr>;\n+    a = V { t: &S };\n+\n+    let mut a: V<&dyn Tr> = V { t: &S };\n+    a = V { t: &S };\n+}\n+        \"#,\n+    );\n+}\n+\n+#[test]\n+fn destructuring_assign_coerce_struct_fields() {\n+    check(\n+        r#\"\n+//- minicore: coerce_unsized\n+struct S;\n+trait Tr {}\n+impl Tr for S {}\n+struct V<T> { t: T }\n+\n+fn main() {\n+    let a: V<&dyn Tr>;\n+    (a,) = V { t: &S };\n+  //^^^^expected V<&S>, got (V<&dyn Tr>,)\n+\n+    let mut a: V<&dyn Tr> = V { t: &S };\n+    (a,) = V { t: &S };\n+  //^^^^expected V<&S>, got (V<&dyn Tr>,)\n+}\n+        \"#,\n+    );\n+}"}, {"sha": "5b08f552109efe4a533c134e15046079056636ad", "filename": "crates/hir-ty/src/tests/simple.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d1ac46201d568fbe08deabafaa91100a1810d31b/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ac46201d568fbe08deabafaa91100a1810d31b/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs?ref=d1ac46201d568fbe08deabafaa91100a1810d31b", "patch": "@@ -3043,3 +3043,30 @@ fn main() {\n         \"#,\n     );\n }\n+\n+#[test]\n+fn destructuring_assignment_type_mismatch_on_identifier() {\n+    check(\n+        r#\"\n+struct S { v: i64 }\n+struct TS(i64);\n+fn main() {\n+    let mut a: usize = 0;\n+    (a,) = (0i64,);\n+   //^expected i64, got usize\n+\n+    let mut a: usize = 0;\n+    [a,] = [0i64,];\n+   //^expected i64, got usize\n+\n+    let mut a: usize = 0;\n+    S { v: a } = S { v: 0 };\n+         //^expected i64, got usize\n+\n+    let mut a: usize = 0;\n+    TS(a) = TS(0);\n+     //^expected i64, got usize\n+}\n+        \"#,\n+    );\n+}"}]}