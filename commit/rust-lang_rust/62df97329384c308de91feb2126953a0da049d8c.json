{"sha": "62df97329384c308de91feb2126953a0da049d8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyZGY5NzMyOTM4NGMzMDhkZTkxZmViMjEyNjk1M2EwZGEwNDlkOGM=", "commit": {"author": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-10-10T15:14:33Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-10-17T12:09:38Z"}, "message": "Use `Environment` instead of `ty::ParamEnv` in chalk context", "tree": {"sha": "87c599f20d4eb6716f5c0a5a29d987e94422777b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87c599f20d4eb6716f5c0a5a29d987e94422777b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62df97329384c308de91feb2126953a0da049d8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62df97329384c308de91feb2126953a0da049d8c", "html_url": "https://github.com/rust-lang/rust/commit/62df97329384c308de91feb2126953a0da049d8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62df97329384c308de91feb2126953a0da049d8c/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbbd70d4f25bc255d80b6b9ba0a65f6c5957f2b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbbd70d4f25bc255d80b6b9ba0a65f6c5957f2b7", "html_url": "https://github.com/rust-lang/rust/commit/cbbd70d4f25bc255d80b6b9ba0a65f6c5957f2b7"}], "stats": {"total": 374, "additions": 271, "deletions": 103}, "files": [{"sha": "de03892b994ef6a962ad4808f82d8bc9dde1b957", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62df97329384c308de91feb2126953a0da049d8c/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62df97329384c308de91feb2126953a0da049d8c/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=62df97329384c308de91feb2126953a0da049d8c", "patch": "@@ -70,6 +70,7 @@ use rustc_data_structures::stable_hasher::{StableHasher, HashStable};\n use std::fmt;\n use std::hash::Hash;\n use syntax_pos::symbol::InternedString;\n+use traits;\n use traits::query::{\n     CanonicalProjectionGoal, CanonicalTyGoal, CanonicalTypeOpEqGoal, CanonicalTypeOpSubtypeGoal,\n     CanonicalPredicateGoal, CanonicalTypeOpProvePredicateGoal, CanonicalTypeOpNormalizeGoal,\n@@ -550,6 +551,7 @@ define_dep_nodes!( <'tcx>\n     [anon] TraitSelect,\n \n     [] ParamEnv(DefId),\n+    [] Environment(DefId),\n     [] DescribeDef(DefId),\n \n     // FIXME(mw): DefSpans are not really inputs since they are derived from\n@@ -669,7 +671,7 @@ define_dep_nodes!( <'tcx>\n     [input] Features,\n \n     [] ProgramClausesFor(DefId),\n-    [] ProgramClausesForEnv(ParamEnv<'tcx>),\n+    [] ProgramClausesForEnv(traits::Environment<'tcx>),\n     [] WasmImportModuleMap(CrateNum),\n     [] ForeignModules(CrateNum),\n "}, {"sha": "8df249d734179c8b87ec15181979533bbb1e047f", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62df97329384c308de91feb2126953a0da049d8c/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62df97329384c308de91feb2126953a0da049d8c/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=62df97329384c308de91feb2126953a0da049d8c", "patch": "@@ -1418,7 +1418,15 @@ impl_stable_hash_for!(enum traits::QuantifierKind {\n     Existential\n });\n \n+<<<<<<< HEAD\n impl_stable_hash_for!(struct ty::subst::UserSubsts<'tcx> { substs, user_self_ty });\n \n impl_stable_hash_for!(struct ty::subst::UserSelfTy<'tcx> { impl_def_id, self_ty });\n \n+=======\n+impl_stable_hash_for!(\n+    impl<'tcx> for struct traits::Environment<'tcx> {\n+        clauses,\n+    }\n+);\n+>>>>>>> Use `Environment` instead of `ty::ParamEnv` in chalk context"}, {"sha": "d95b0844e87f588ef12eafb9e87d479f34de849e", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/62df97329384c308de91feb2126953a0da049d8c/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62df97329384c308de91feb2126953a0da049d8c/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=62df97329384c308de91feb2126953a0da049d8c", "patch": "@@ -278,6 +278,8 @@ pub type TraitObligations<'tcx> = Vec<TraitObligation<'tcx>>;\n /// * `DomainGoal`\n /// * `Goal`\n /// * `Clause`\n+/// * `Environment`\n+/// * `InEnvironment`\n /// are used for representing the trait system in the form of\n /// logic programming clauses. They are part of the interface\n /// for the chalk SLG solver.\n@@ -378,6 +380,33 @@ pub struct ProgramClause<'tcx> {\n     pub hypotheses: Goals<'tcx>,\n }\n \n+/// A set of clauses that we assume to be true.\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+pub struct Environment<'tcx> {\n+    pub clauses: Clauses<'tcx>,\n+}\n+\n+impl Environment<'tcx> {\n+    pub fn with<G>(self, goal: G) -> InEnvironment<'tcx, G> {\n+        InEnvironment {\n+            environment: self,\n+            goal,\n+        }\n+    }\n+}\n+\n+/// Something (usually a goal), along with an environment.\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+pub struct InEnvironment<'tcx, G> {\n+    pub environment: Environment<'tcx>,\n+    pub goal: G,\n+}\n+\n+/// Compute the environment of the given item.\n+fn environment<'a, 'tcx>(_tcx: TyCtxt<'a, 'tcx, 'tcx>, _def_id: DefId) -> Environment<'tcx> {\n+    panic!()\n+}\n+\n pub type Selection<'tcx> = Vtable<'tcx, PredicateObligation<'tcx>>;\n \n #[derive(Clone,Debug)]\n@@ -1080,6 +1109,7 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n         codegen_fulfill_obligation: codegen::codegen_fulfill_obligation,\n         vtable_methods,\n         substitute_normalize_and_test_predicates,\n+        environment,\n         ..*providers\n     };\n }"}, {"sha": "7b7446e27d231908a2539d9d36f7176ef38576fa", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/62df97329384c308de91feb2126953a0da049d8c/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62df97329384c308de91feb2126953a0da049d8c/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=62df97329384c308de91feb2126953a0da049d8c", "patch": "@@ -658,7 +658,43 @@ EnumTypeFoldableImpl! {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<traits::Clause<'tcx>> {\n+BraceStructTypeFoldableImpl! {\n+    impl<'tcx> TypeFoldable<'tcx> for traits::Environment<'tcx> { clauses }\n+}\n+\n+BraceStructTypeFoldableImpl! {\n+    impl<'tcx, G> TypeFoldable<'tcx> for traits::InEnvironment<'tcx, G> {\n+        environment,\n+        goal\n+    } where G: TypeFoldable<'tcx>\n+}\n+\n+impl<'a, 'tcx> Lift<'tcx> for traits::Environment<'a> {\n+    type Lifted = traits::Environment<'tcx>;\n+    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+        tcx.lift(&self.clauses).map(|clauses| {\n+            traits::Environment {\n+                clauses,\n+            }\n+        })\n+    }\n+}\n+\n+impl<'a, 'tcx, G: Lift<'tcx>> Lift<'tcx> for traits::InEnvironment<'a, G> {\n+    type Lifted = traits::InEnvironment<'tcx, G::Lifted>;\n+    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+        tcx.lift(&self.environment).and_then(|environment| {\n+            tcx.lift(&self.goal).map(|goal| {\n+                traits::InEnvironment {\n+                    environment,\n+                    goal,\n+                }\n+            })\n+        })\n+    }\n+}\n+\n+impl<'tcx> TypeFoldable<'tcx> for traits::Clauses<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         let v = self.iter()\n             .map(|t| t.fold_with(folder))"}, {"sha": "d0c3109da52f1570a099009987bf95eed45a5a52", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/62df97329384c308de91feb2126953a0da049d8c/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62df97329384c308de91feb2126953a0da049d8c/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=62df97329384c308de91feb2126953a0da049d8c", "patch": "@@ -12,6 +12,7 @@ use dep_graph::SerializedDepNodeIndex;\n use dep_graph::DepNode;\n use hir::def_id::{CrateNum, DefId, DefIndex};\n use mir::interpret::GlobalId;\n+use traits;\n use traits::query::{\n     CanonicalPredicateGoal, CanonicalProjectionGoal, CanonicalTyGoal, CanonicalTypeOpEqGoal,\n     CanonicalTypeOpNormalizeGoal, CanonicalTypeOpProvePredicateGoal, CanonicalTypeOpSubtypeGoal,\n@@ -826,8 +827,14 @@ impl<'tcx> QueryDescription<'tcx> for queries::program_clauses_for<'tcx> {\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::program_clauses_for_env<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: ty::ParamEnv<'tcx>) -> Cow<'static, str> {\n-        \"generating chalk-style clauses for param env\".into()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: traits::Environment<'tcx>) -> Cow<'static, str> {\n+        \"generating chalk-style clauses for environment\".into()\n+    }\n+}\n+\n+impl<'tcx> QueryDescription<'tcx> for queries::environment<'tcx> {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: DefId) -> Cow<'static, str> {\n+        \"return a chalk-style environment\".into()\n     }\n }\n "}, {"sha": "f2d7a6792b5631ab3c8a64221503dc0613f467ea", "filename": "src/librustc/ty/query/keys.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/62df97329384c308de91feb2126953a0da049d8c/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62df97329384c308de91feb2126953a0da049d8c/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs?ref=62df97329384c308de91feb2126953a0da049d8c", "patch": "@@ -12,6 +12,7 @@\n \n use infer::canonical::Canonical;\n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE, DefIndex};\n+use traits;\n use ty::{self, Ty, TyCtxt};\n use ty::subst::Substs;\n use ty::fast_reject::SimplifiedType;\n@@ -181,6 +182,15 @@ impl<'tcx, T: Key> Key for ty::ParamEnvAnd<'tcx, T> {\n     }\n }\n \n+impl<'tcx> Key for traits::Environment<'tcx> {\n+    fn query_crate(&self) -> CrateNum {\n+        LOCAL_CRATE\n+    }\n+    fn default_span(&self, _: TyCtxt<'_, '_, '_>) -> Span {\n+        DUMMY_SP\n+    }\n+}\n+\n impl Key for InternedString {\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE"}, {"sha": "83c8eab0f39ac25874a0cfd8f3b41163c80174c5", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62df97329384c308de91feb2126953a0da049d8c/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62df97329384c308de91feb2126953a0da049d8c/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=62df97329384c308de91feb2126953a0da049d8c", "patch": "@@ -377,6 +377,8 @@ define_queries! { <'tcx>\n         // might want to use `reveal_all()` method to change modes.\n         [] fn param_env: ParamEnv(DefId) -> ty::ParamEnv<'tcx>,\n \n+        [] fn environment: Environment(DefId) -> traits::Environment<'tcx>,\n+\n         // Trait selection queries. These are best used by invoking `ty.moves_by_default()`,\n         // `ty.is_copy()`, etc, since that will prune the environment where possible.\n         [] fn is_copy_raw: is_copy_dep_node(ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool,\n@@ -664,7 +666,7 @@ define_queries! { <'tcx>\n         [] fn program_clauses_for: ProgramClausesFor(DefId) -> Clauses<'tcx>,\n \n         [] fn program_clauses_for_env: ProgramClausesForEnv(\n-            ty::ParamEnv<'tcx>\n+            traits::Environment<'tcx>\n         ) -> Clauses<'tcx>,\n     },\n "}, {"sha": "f83f8bcf1a12d73e16b41684cc9cef8011be5742", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/62df97329384c308de91feb2126953a0da049d8c/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62df97329384c308de91feb2126953a0da049d8c/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=62df97329384c308de91feb2126953a0da049d8c", "patch": "@@ -1156,6 +1156,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::CheckMatch => { force!(check_match, def_id!()); }\n \n         DepKind::ParamEnv => { force!(param_env, def_id!()); }\n+        DepKind::Environment => { force!(environment, def_id!()); }\n         DepKind::DescribeDef => { force!(describe_def, def_id!()); }\n         DepKind::DefSpan => { force!(def_span, def_id!()); }\n         DepKind::LookupStability => { force!(lookup_stability, def_id!()); }"}, {"sha": "2fd8aa0c3af350cfeb43209a401862fa527d2362", "filename": "src/librustc_traits/chalk_context.rs", "status": "modified", "additions": 38, "deletions": 33, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/62df97329384c308de91feb2126953a0da049d8c/src%2Flibrustc_traits%2Fchalk_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62df97329384c308de91feb2126953a0da049d8c/src%2Flibrustc_traits%2Fchalk_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context.rs?ref=62df97329384c308de91feb2126953a0da049d8c", "patch": "@@ -23,7 +23,9 @@ use rustc::traits::{\n     Goal,\n     GoalKind,\n     ProgramClause,\n-    QuantifierKind\n+    QuantifierKind,\n+    Environment,\n+    InEnvironment,\n };\n use rustc::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use rustc::ty::subst::Kind;\n@@ -68,10 +70,10 @@ BraceStructTypeFoldableImpl! {\n impl context::Context for ChalkArenas<'tcx> {\n     type CanonicalExClause = Canonical<'tcx, ExClause<Self>>;\n \n-    type CanonicalGoalInEnvironment = Canonical<'tcx, ty::ParamEnvAnd<'tcx, Goal<'tcx>>>;\n+    type CanonicalGoalInEnvironment = Canonical<'tcx, InEnvironment<'tcx, Goal<'tcx>>>;\n \n     // u-canonicalization not yet implemented\n-    type UCanonicalGoalInEnvironment = Canonical<'tcx, ty::ParamEnvAnd<'tcx, Goal<'tcx>>>;\n+    type UCanonicalGoalInEnvironment = Canonical<'tcx, InEnvironment<'tcx, Goal<'tcx>>>;\n \n     type CanonicalConstrainedSubst = Canonical<'tcx, ConstrainedSubst<'tcx>>;\n \n@@ -82,13 +84,13 @@ impl context::Context for ChalkArenas<'tcx> {\n \n     type InferenceNormalizedSubst = CanonicalVarValues<'tcx>;\n \n-    type GoalInEnvironment = ty::ParamEnvAnd<'tcx, Goal<'tcx>>;\n+    type GoalInEnvironment = InEnvironment<'tcx, Goal<'tcx>>;\n \n     type RegionConstraint = QueryRegionConstraint<'tcx>;\n \n     type Substitution = CanonicalVarValues<'tcx>;\n \n-    type Environment = ty::ParamEnv<'tcx>;\n+    type Environment = Environment<'tcx>;\n \n     type Goal = Goal<'tcx>;\n \n@@ -105,17 +107,17 @@ impl context::Context for ChalkArenas<'tcx> {\n     type UnificationResult = InferOk<'tcx, ()>;\n \n     fn goal_in_environment(\n-        env: &ty::ParamEnv<'tcx>,\n+        env: &Environment<'tcx>,\n         goal: Goal<'tcx>,\n-    ) -> ty::ParamEnvAnd<'tcx, Goal<'tcx>> {\n-        env.and(goal)\n+    ) -> InEnvironment<'tcx, Goal<'tcx>> {\n+        env.with(goal)\n     }\n }\n \n impl context::AggregateOps<ChalkArenas<'gcx>> for ChalkContext<'cx, 'gcx> {\n     fn make_solution(\n         &self,\n-        _root_goal: &Canonical<'gcx, ty::ParamEnvAnd<'gcx, Goal<'gcx>>>,\n+        _root_goal: &Canonical<'gcx, InEnvironment<'gcx, Goal<'gcx>>>,\n         _simplified_answers: impl context::AnswerStream<ChalkArenas<'gcx>>,\n     ) -> Option<Canonical<'gcx, QueryResponse<'gcx, ()>>> {\n         unimplemented!()\n@@ -124,7 +126,10 @@ impl context::AggregateOps<ChalkArenas<'gcx>> for ChalkContext<'cx, 'gcx> {\n \n impl context::ContextOps<ChalkArenas<'gcx>> for ChalkContext<'cx, 'gcx> {\n     /// True if this is a coinductive goal -- e.g., proving an auto trait.\n-    fn is_coinductive(&self, _goal: &Canonical<'gcx, ty::ParamEnvAnd<'gcx, Goal<'gcx>>>) -> bool {\n+    fn is_coinductive(\n+        &self,\n+        _goal: &Canonical<'gcx, InEnvironment<'gcx, Goal<'gcx>>>\n+    ) -> bool {\n         unimplemented!()\n     }\n \n@@ -142,7 +147,7 @@ impl context::ContextOps<ChalkArenas<'gcx>> for ChalkContext<'cx, 'gcx> {\n     /// - the environment and goal found by substitution `S` into `arg`\n     fn instantiate_ucanonical_goal<R>(\n         &self,\n-        _arg: &Canonical<'gcx, ty::ParamEnvAnd<'gcx, Goal<'gcx>>>,\n+        _arg: &Canonical<'gcx, InEnvironment<'gcx, Goal<'gcx>>>,\n         _op: impl context::WithInstantiatedUCanonicalGoal<ChalkArenas<'gcx>, Output = R>,\n     ) -> R {\n         unimplemented!()\n@@ -175,19 +180,19 @@ impl context::ContextOps<ChalkArenas<'gcx>> for ChalkContext<'cx, 'gcx> {\n     }\n \n     fn canonical(\n-        u_canon: &'a Canonical<'gcx, ty::ParamEnvAnd<'gcx, Goal<'gcx>>>,\n-    ) -> &'a Canonical<'gcx, ty::ParamEnvAnd<'gcx, Goal<'gcx>>> {\n+        u_canon: &'a Canonical<'gcx, InEnvironment<'gcx, Goal<'gcx>>>,\n+    ) -> &'a Canonical<'gcx, InEnvironment<'gcx, Goal<'gcx>>> {\n         u_canon\n     }\n \n     fn is_trivial_substitution(\n-        _u_canon: &Canonical<'gcx, ty::ParamEnvAnd<'gcx, Goal<'gcx>>>,\n+        _u_canon: &Canonical<'gcx, InEnvironment<'gcx, Goal<'gcx>>>,\n         _canonical_subst: &Canonical<'gcx, ConstrainedSubst<'gcx>>,\n     ) -> bool {\n         unimplemented!()\n     }\n \n-    fn num_universes(_: &Canonical<'gcx, ty::ParamEnvAnd<'gcx, Goal<'gcx>>>) -> usize {\n+    fn num_universes(_: &Canonical<'gcx, InEnvironment<'gcx, Goal<'gcx>>>) -> usize {\n         0 // FIXME\n     }\n \n@@ -196,8 +201,8 @@ impl context::ContextOps<ChalkArenas<'gcx>> for ChalkContext<'cx, 'gcx> {\n     /// but for the universes of universally quantified names.\n     fn map_goal_from_canonical(\n         _map: &UniverseMap,\n-        value: &Canonical<'gcx, ty::ParamEnvAnd<'gcx, Goal<'gcx>>>,\n-    ) -> Canonical<'gcx, ty::ParamEnvAnd<'gcx, Goal<'gcx>>> {\n+        value: &Canonical<'gcx, InEnvironment<'gcx, Goal<'gcx>>>,\n+    ) -> Canonical<'gcx, InEnvironment<'gcx, Goal<'gcx>>> {\n         *value // FIXME universe maps not implemented yet\n     }\n \n@@ -267,10 +272,10 @@ impl context::InferenceTable<ChalkArenas<'gcx>, ChalkArenas<'tcx>>\n \n     fn add_clauses(\n         &mut self,\n-        _env: &ty::ParamEnv<'tcx>,\n+        _env: &Environment<'tcx>,\n         _clauses: Vec<ProgramClause<'tcx>>,\n-    ) -> ty::ParamEnv<'tcx> {\n-        panic!(\"FIXME no method to add clauses to ParamEnv yet\")\n+    ) -> Environment<'tcx> {\n+        panic!(\"FIXME no method to add clauses to Environment yet\")\n     }\n }\n \n@@ -279,7 +284,7 @@ impl context::ResolventOps<ChalkArenas<'gcx>, ChalkArenas<'tcx>>\n {\n     fn resolvent_clause(\n         &mut self,\n-        _environment: &ty::ParamEnv<'tcx>,\n+        _environment: &Environment<'tcx>,\n         _goal: &DomainGoal<'tcx>,\n         _subst: &CanonicalVarValues<'tcx>,\n         _clause: &ProgramClause<'tcx>,\n@@ -290,8 +295,8 @@ impl context::ResolventOps<ChalkArenas<'gcx>, ChalkArenas<'tcx>>\n     fn apply_answer_subst(\n         &mut self,\n         _ex_clause: ChalkExClause<'tcx>,\n-        _selected_goal: &ty::ParamEnvAnd<'tcx, Goal<'tcx>>,\n-        _answer_table_goal: &Canonical<'gcx, ty::ParamEnvAnd<'gcx, Goal<'gcx>>>,\n+        _selected_goal: &InEnvironment<'tcx, Goal<'tcx>>,\n+        _answer_table_goal: &Canonical<'gcx, InEnvironment<'gcx, Goal<'gcx>>>,\n         _canonical_answer_subst: &Canonical<'gcx, ConstrainedSubst<'gcx>>,\n     ) -> chalk_engine::fallible::Fallible<ChalkExClause<'tcx>> {\n         panic!()\n@@ -303,8 +308,8 @@ impl context::TruncateOps<ChalkArenas<'gcx>, ChalkArenas<'tcx>>\n {\n     fn truncate_goal(\n         &mut self,\n-        subgoal: &ty::ParamEnvAnd<'tcx, Goal<'tcx>>,\n-    ) -> Option<ty::ParamEnvAnd<'tcx, Goal<'tcx>>> {\n+        subgoal: &InEnvironment<'tcx, Goal<'tcx>>,\n+    ) -> Option<InEnvironment<'tcx, Goal<'tcx>>> {\n         Some(*subgoal) // FIXME we should truncate at some point!\n     }\n \n@@ -321,7 +326,7 @@ impl context::UnificationOps<ChalkArenas<'gcx>, ChalkArenas<'tcx>>\n {\n     fn program_clauses(\n         &self,\n-        _environment: &ty::ParamEnv<'tcx>,\n+        _environment: &Environment<'tcx>,\n         goal: &DomainGoal<'tcx>,\n     ) -> Vec<ProgramClause<'tcx>> {\n         use rustc::traits::WhereClause::*;\n@@ -389,8 +394,8 @@ impl context::UnificationOps<ChalkArenas<'gcx>, ChalkArenas<'tcx>>\n \n     fn canonicalize_goal(\n         &mut self,\n-        value: &ty::ParamEnvAnd<'tcx, Goal<'tcx>>,\n-    ) -> Canonical<'gcx, ty::ParamEnvAnd<'gcx, Goal<'gcx>>> {\n+        value: &InEnvironment<'tcx, Goal<'tcx>>,\n+    ) -> Canonical<'gcx, InEnvironment<'gcx, Goal<'gcx>>> {\n         let mut _orig_values = OriginalQueryValues::default();\n         self.infcx.canonicalize_query(value, &mut _orig_values)\n     }\n@@ -412,24 +417,24 @@ impl context::UnificationOps<ChalkArenas<'gcx>, ChalkArenas<'tcx>>\n \n     fn u_canonicalize_goal(\n         &mut self,\n-        value: &Canonical<'gcx, ty::ParamEnvAnd<'gcx, Goal<'gcx>>>,\n+        value: &Canonical<'gcx, InEnvironment<'gcx, Goal<'gcx>>>,\n     ) -> (\n-        Canonical<'gcx, ty::ParamEnvAnd<'gcx, Goal<'gcx>>>,\n+        Canonical<'gcx, InEnvironment<'gcx, Goal<'gcx>>>,\n         UniverseMap,\n     ) {\n         (value.clone(), UniverseMap)\n     }\n \n     fn invert_goal(\n         &mut self,\n-        _value: &ty::ParamEnvAnd<'tcx, Goal<'tcx>>,\n-    ) -> Option<ty::ParamEnvAnd<'tcx, Goal<'tcx>>> {\n+        _value: &InEnvironment<'tcx, Goal<'tcx>>,\n+    ) -> Option<InEnvironment<'tcx, Goal<'tcx>>> {\n         panic!(\"goal inversion not yet implemented\")\n     }\n \n     fn unify_parameters(\n         &mut self,\n-        _environment: &ty::ParamEnv<'tcx>,\n+        _environment: &Environment<'tcx>,\n         _a: &Kind<'tcx>,\n         _b: &Kind<'tcx>,\n     ) -> ChalkEngineFallible<InferOk<'tcx, ()>> {"}, {"sha": "b04766b087e53fb3f3aa79a174a95101d5c7becc", "filename": "src/librustc_traits/lowering/environment.rs", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/62df97329384c308de91feb2126953a0da049d8c/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62df97329384c308de91feb2126953a0da049d8c/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs?ref=62df97329384c308de91feb2126953a0da049d8c", "patch": "@@ -0,0 +1,127 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::traits::{\n+    Clause,\n+    Clauses,\n+    DomainGoal,\n+    FromEnv,\n+    Goal,\n+    ProgramClause,\n+    Environment,\n+};\n+use rustc::ty::{TyCtxt, Ty};\n+use rustc_data_structures::fx::FxHashSet;\n+\n+struct ClauseVisitor<'set, 'a, 'tcx: 'a> {\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    round: &'set mut FxHashSet<Clause<'tcx>>,\n+}\n+\n+impl ClauseVisitor<'set, 'a, 'tcx> {\n+    fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, round: &'set mut FxHashSet<Clause<'tcx>>) -> Self {\n+        ClauseVisitor {\n+            tcx,\n+            round,\n+        }\n+    }\n+\n+    fn visit_ty(&mut self, _ty: Ty<'tcx>) {\n+\n+    }\n+\n+    fn visit_from_env(&mut self, from_env: FromEnv<'tcx>) {\n+        match from_env {\n+            FromEnv::Trait(predicate) => {\n+                self.round.extend(\n+                    self.tcx.program_clauses_for(predicate.def_id())\n+                        .iter()\n+                        .cloned()\n+                );\n+            }\n+\n+            FromEnv::Ty(ty) => self.visit_ty(ty),\n+        }\n+    }\n+\n+    fn visit_domain_goal(&mut self, domain_goal: DomainGoal<'tcx>) {\n+        if let DomainGoal::FromEnv(from_env) = domain_goal {\n+            self.visit_from_env(from_env);\n+        }\n+    }\n+\n+    fn visit_goal(&mut self, goal: Goal<'tcx>) {\n+        match goal {\n+            Goal::Implies(clauses, goal) => {\n+                for clause in clauses {\n+                    self.visit_clause(*clause);\n+                }\n+                self.visit_goal(*goal);\n+            }\n+\n+            Goal::And(goal1, goal2) => {\n+                self.visit_goal(*goal1);\n+                self.visit_goal(*goal2);\n+            }\n+\n+            Goal::Not(goal) => self.visit_goal(*goal),\n+            Goal::DomainGoal(domain_goal) => self.visit_domain_goal(domain_goal),\n+            Goal::Quantified(_, goal) => self.visit_goal(**goal.skip_binder()),\n+            Goal::CannotProve => (),\n+        }\n+    }\n+\n+    fn visit_program_clause(&mut self, clause: ProgramClause<'tcx>) {\n+        self.visit_domain_goal(clause.goal);\n+        for goal in clause.hypotheses {\n+            self.visit_goal(*goal);\n+        }\n+    }\n+\n+    fn visit_clause(&mut self, clause: Clause<'tcx>) {\n+        match clause {\n+            Clause::Implies(clause) => self.visit_program_clause(clause),\n+            Clause::ForAll(clause) => self.visit_program_clause(*clause.skip_binder()),\n+        }\n+    }\n+}\n+\n+crate fn program_clauses_for_env<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    environment: Environment<'tcx>,\n+) -> Clauses<'tcx> {\n+    debug!(\"program_clauses_for_env(environment={:?})\", environment);\n+\n+    let mut last_round = FxHashSet();\n+    {\n+        let mut visitor = ClauseVisitor::new(tcx, &mut last_round);\n+        for clause in environment.clauses {\n+            visitor.visit_clause(*clause);\n+        }\n+    }\n+\n+    let mut closure = last_round.clone();\n+    let mut next_round = FxHashSet();\n+    while !last_round.is_empty() {\n+        let mut visitor = ClauseVisitor::new(tcx, &mut next_round);\n+        for clause in last_round {\n+            visitor.visit_clause(clause);\n+        }\n+        last_round = next_round.drain()\n+            .filter(|&clause| closure.insert(clause))\n+            .collect();\n+    }\n+\n+    debug!(\"program_clauses_for_env: closure = {:#?}\", closure);\n+\n+    return tcx.mk_clauses(\n+        closure.into_iter()\n+    );\n+}"}, {"sha": "07a5d6a31dd0a9349efa4eff68a25d95201c36f2", "filename": "src/librustc_traits/lowering/mod.rs", "status": "renamed", "additions": 5, "deletions": 65, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/62df97329384c308de91feb2126953a0da049d8c/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62df97329384c308de91feb2126953a0da049d8c/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=62df97329384c308de91feb2126953a0da049d8c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+mod environment;\n+\n use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::map::definitions::DefPathData;\n@@ -25,16 +27,14 @@ use rustc::traits::{\n };\n use rustc::ty::query::Providers;\n use rustc::ty::{self, List, TyCtxt};\n-use rustc_data_structures::fx::FxHashSet;\n-use std::mem;\n use syntax::ast;\n \n use std::iter;\n \n crate fn provide(p: &mut Providers) {\n     *p = Providers {\n         program_clauses_for,\n-        program_clauses_for_env,\n+        program_clauses_for_env: environment::program_clauses_for_env,\n         ..*p\n     };\n }\n@@ -173,66 +173,6 @@ crate fn program_clauses_for<'a, 'tcx>(\n     }\n }\n \n-crate fn program_clauses_for_env<'a, 'tcx>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n-) -> Clauses<'tcx> {\n-    debug!(\"program_clauses_for_env(param_env={:?})\", param_env);\n-\n-    let mut last_round = FxHashSet();\n-    last_round.extend(\n-        param_env\n-            .caller_bounds\n-            .iter()\n-            .flat_map(|&p| predicate_def_id(p)),\n-    );\n-\n-    let mut closure = last_round.clone();\n-    let mut next_round = FxHashSet();\n-    while !last_round.is_empty() {\n-        next_round.extend(\n-            last_round\n-                .drain()\n-                .flat_map(|def_id| {\n-                    tcx.predicates_of(def_id)\n-                        .instantiate_identity(tcx)\n-                        .predicates\n-                })\n-                .flat_map(|p| predicate_def_id(p))\n-                .filter(|&def_id| closure.insert(def_id)),\n-        );\n-        mem::swap(&mut next_round, &mut last_round);\n-    }\n-\n-    debug!(\"program_clauses_for_env: closure = {:#?}\", closure);\n-\n-    return tcx.mk_clauses(\n-        closure\n-            .into_iter()\n-            .flat_map(|def_id| tcx.program_clauses_for(def_id).iter().cloned()),\n-    );\n-\n-    /// Given that `predicate` is in the environment, returns the\n-    /// def-id of something (e.g., a trait, associated item, etc)\n-    /// whose predicates can also be assumed to be true. We will\n-    /// compute the transitive closure of such things.\n-    fn predicate_def_id<'tcx>(predicate: ty::Predicate<'tcx>) -> Option<DefId> {\n-        match predicate {\n-            ty::Predicate::Trait(predicate) => Some(predicate.def_id()),\n-\n-            ty::Predicate::Projection(projection) => Some(projection.item_def_id()),\n-\n-            ty::Predicate::WellFormed(..)\n-            | ty::Predicate::RegionOutlives(..)\n-            | ty::Predicate::TypeOutlives(..)\n-            | ty::Predicate::ObjectSafe(..)\n-            | ty::Predicate::ClosureKind(..)\n-            | ty::Predicate::Subtype(..)\n-            | ty::Predicate::ConstEvaluatable(..) => None,\n-        }\n-    }\n-}\n-\n fn program_clauses_for_trait<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     def_id: DefId,\n@@ -595,8 +535,8 @@ impl<'a, 'tcx> ClauseDumper<'a, 'tcx> {\n             }\n \n             if attr.check_name(\"rustc_dump_env_program_clauses\") {\n-                let param_env = self.tcx.param_env(def_id);\n-                clauses = Some(self.tcx.program_clauses_for_env(param_env));\n+                let environment = self.tcx.environment(def_id);\n+                clauses = Some(self.tcx.program_clauses_for_env(environment));\n             }\n \n             if let Some(clauses) = clauses {", "previous_filename": "src/librustc_traits/lowering.rs"}]}