{"sha": "57e3df3f879090207f5a128a497b66916aeabb6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3ZTNkZjNmODc5MDkwMjA3ZjVhMTI4YTQ5N2I2NjkxNmFlYWJiNmI=", "commit": {"author": {"name": "Phlosioneer", "email": "mattmdrr2@gmail.com", "date": "2018-03-20T03:35:23Z"}, "committer": {"name": "Phlosioneer", "email": "mattmdrr2@gmail.com", "date": "2018-03-20T03:42:14Z"}, "message": "Fix ordering of auto-generated trait bounds in rustdoc output\n\nWhile the order of the where clauses was deterministic, the\nordering of bounds and lifetimes was not. This made the order flip-\nflop randomly when new traits and impls were added to libstd.\n\nThis PR makes the ordering of bounds and lifetimes deterministic,\nand re-enables the test that was causing the issue.\n\nFixes #49123", "tree": {"sha": "f2a4f5224d78ad68b483256ece936d6fb27fbb24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2a4f5224d78ad68b483256ece936d6fb27fbb24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57e3df3f879090207f5a128a497b66916aeabb6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57e3df3f879090207f5a128a497b66916aeabb6b", "html_url": "https://github.com/rust-lang/rust/commit/57e3df3f879090207f5a128a497b66916aeabb6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57e3df3f879090207f5a128a497b66916aeabb6b/comments", "author": {"login": "Phlosioneer", "id": 4657718, "node_id": "MDQ6VXNlcjQ2NTc3MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/4657718?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Phlosioneer", "html_url": "https://github.com/Phlosioneer", "followers_url": "https://api.github.com/users/Phlosioneer/followers", "following_url": "https://api.github.com/users/Phlosioneer/following{/other_user}", "gists_url": "https://api.github.com/users/Phlosioneer/gists{/gist_id}", "starred_url": "https://api.github.com/users/Phlosioneer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Phlosioneer/subscriptions", "organizations_url": "https://api.github.com/users/Phlosioneer/orgs", "repos_url": "https://api.github.com/users/Phlosioneer/repos", "events_url": "https://api.github.com/users/Phlosioneer/events{/privacy}", "received_events_url": "https://api.github.com/users/Phlosioneer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Phlosioneer", "id": 4657718, "node_id": "MDQ6VXNlcjQ2NTc3MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/4657718?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Phlosioneer", "html_url": "https://github.com/Phlosioneer", "followers_url": "https://api.github.com/users/Phlosioneer/followers", "following_url": "https://api.github.com/users/Phlosioneer/following{/other_user}", "gists_url": "https://api.github.com/users/Phlosioneer/gists{/gist_id}", "starred_url": "https://api.github.com/users/Phlosioneer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Phlosioneer/subscriptions", "organizations_url": "https://api.github.com/users/Phlosioneer/orgs", "repos_url": "https://api.github.com/users/Phlosioneer/repos", "events_url": "https://api.github.com/users/Phlosioneer/events{/privacy}", "received_events_url": "https://api.github.com/users/Phlosioneer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bfa7d02d6713acd15ead20c199b808e85031f9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bfa7d02d6713acd15ead20c199b808e85031f9e", "html_url": "https://github.com/rust-lang/rust/commit/6bfa7d02d6713acd15ead20c199b808e85031f9e"}], "stats": {"total": 104, "additions": 67, "deletions": 37}, "files": [{"sha": "918bc1df0b1d6ec21e742ccd2e3ab3f232e00a1c", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 67, "deletions": 35, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/57e3df3f879090207f5a128a497b66916aeabb6b/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e3df3f879090207f5a128a497b66916aeabb6b/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=57e3df3f879090207f5a128a497b66916aeabb6b", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use rustc::ty::TypeFoldable;\n+use std::fmt::Debug;\n \n use super::*;\n \n@@ -1081,18 +1082,25 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                     return None;\n                 }\n \n+                let mut bounds_vec = bounds.into_iter().collect();\n+                self.sort_where_bounds(&mut bounds_vec);\n+\n                 Some(WherePredicate::BoundPredicate {\n                     ty,\n-                    bounds: bounds.into_iter().collect(),\n+                    bounds: bounds_vec,\n                 })\n             })\n             .chain(\n                 lifetime_to_bounds\n                     .into_iter()\n                     .filter(|&(_, ref bounds)| !bounds.is_empty())\n-                    .map(|(lifetime, bounds)| WherePredicate::RegionPredicate {\n-                        lifetime,\n-                        bounds: bounds.into_iter().collect(),\n+                    .map(|(lifetime, bounds)| {\n+                        let mut bounds_vec = bounds.into_iter().collect();\n+                        self.sort_where_lifetimes(&mut bounds_vec);\n+                        WherePredicate::RegionPredicate {\n+                            lifetime,\n+                            bounds: bounds_vec,\n+                        }\n                     }),\n             )\n             .collect()\n@@ -1372,40 +1380,64 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n     // a given set of predicates always appears in the same order -\n     // both for visual consistency between 'rustdoc' runs, and to\n     // make writing tests much easier\n-    fn sort_where_predicates(&self, predicates: &mut Vec<WherePredicate>) {\n+    #[inline]\n+    fn sort_where_predicates(&self, mut predicates: &mut Vec<WherePredicate>) {\n         // We should never have identical bounds - and if we do,\n         // they're visually identical as well. Therefore, using\n         // an unstable sort is fine.\n-        predicates.sort_unstable_by(|first, second| {\n-            // This might look horrendously hacky, but it's actually not that bad.\n-            //\n-            // For performance reasons, we use several different FxHashMaps\n-            // in the process of computing the final set of where predicates.\n-            // However, the iteration order of a HashMap is completely unspecified.\n-            // In fact, the iteration of an FxHashMap can even vary between platforms,\n-            // since FxHasher has different behavior for 32-bit and 64-bit platforms.\n-            //\n-            // Obviously, it's extremely undesireable for documentation rendering\n-            // to be depndent on the platform it's run on. Apart from being confusing\n-            // to end users, it makes writing tests much more difficult, as predicates\n-            // can appear in any order in the final result.\n-            //\n-            // To solve this problem, we sort WherePredicates by their Debug\n-            // string. The thing to keep in mind is that we don't really\n-            // care what the final order is - we're synthesizing an impl\n-            // ourselves, so any order can be considered equally valid.\n-            // By sorting the predicates, however, we ensure that for\n-            // a given codebase, all auto-trait impls always render\n-            // in exactly the same way.\n-            //\n-            // Using the Debug impementation for sorting prevents\n-            // us from needing to write quite a bit of almost\n-            // entirely useless code (e.g. how should two\n-            // Types be sorted relative to each other).\n-            // This approach is probably somewhat slower, but\n-            // the small number of items involved (impls\n-            // rarely have more than a few bounds) means\n-            // that it shouldn't matter in practice.\n+        self.unstable_debug_sort(&mut predicates);\n+    }\n+    \n+    // Ensure that the bounds are in a consistent order. The precise\n+    // ordering doesn't actually matter, but it's important that\n+    // a given set of bounds always appears in the same order -\n+    // both for visual consistency between 'rustdoc' runs, and to\n+    // make writing tests much easier\n+    #[inline]\n+    fn sort_where_bounds(&self, mut bounds: &mut Vec<TyParamBound>) {\n+        // We should never have identical bounds - and if we do,\n+        // they're visually identical as well. Therefore, using\n+        // an unstable sort is fine.\n+        self.unstable_debug_sort(&mut bounds);\n+    }\n+    \n+    #[inline]\n+    fn sort_where_lifetimes(&self, mut bounds: &mut Vec<Lifetime>) {\n+        // We should never have identical bounds - and if we do,\n+        // they're visually identical as well. Therefore, using\n+        // an unstable sort is fine.\n+        self.unstable_debug_sort(&mut bounds);\n+    }\n+\n+    // This might look horrendously hacky, but it's actually not that bad.\n+    //\n+    // For performance reasons, we use several different FxHashMaps\n+    // in the process of computing the final set of where predicates.\n+    // However, the iteration order of a HashMap is completely unspecified.\n+    // In fact, the iteration of an FxHashMap can even vary between platforms,\n+    // since FxHasher has different behavior for 32-bit and 64-bit platforms.\n+    //\n+    // Obviously, it's extremely undesireable for documentation rendering\n+    // to be depndent on the platform it's run on. Apart from being confusing\n+    // to end users, it makes writing tests much more difficult, as predicates\n+    // can appear in any order in the final result.\n+    //\n+    // To solve this problem, we sort WherePredicates and TyParamBounds\n+    // by their Debug string. The thing to keep in mind is that we don't really\n+    // care what the final order is - we're synthesizing an impl or bound\n+    // ourselves, so any order can be considered equally valid. By sorting the\n+    // predicates and bounds, however, we ensure that for a given codebase, all\n+    // auto-trait impls always render in exactly the same way.\n+    //\n+    // Using the Debug impementation for sorting prevents us from needing to\n+    // write quite a bit of almost entirely useless code (e.g. how should two\n+    // Types be sorted relative to each other). It also allows us to solve the\n+    // problem for both WherePredicates and TyParamBounds at the same time. This\n+    // approach is probably somewhat slower, but the small number of items\n+    // involved (impls rarely have more than a few bounds) means that it\n+    // shouldn't matter in practice.\n+    fn unstable_debug_sort<T: Debug>(&self, vec: &mut Vec<T>) {\n+        vec.sort_unstable_by(|first, second| {\n             format!(\"{:?}\", first).cmp(&format!(\"{:?}\", second))\n         });\n     }"}, {"sha": "0b37f2ed3179021aaa041687fc0bde509a2ea7df", "filename": "src/test/rustdoc/synthetic_auto/no-redundancy.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e3df3f879090207f5a128a497b66916aeabb6b/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e3df3f879090207f5a128a497b66916aeabb6b/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs?ref=57e3df3f879090207f5a128a497b66916aeabb6b", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test\n-\n pub struct Inner<T> {\n     field: T,\n }"}]}