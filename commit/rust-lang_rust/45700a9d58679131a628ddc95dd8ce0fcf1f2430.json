{"sha": "45700a9d58679131a628ddc95dd8ce0fcf1f2430", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NzAwYTlkNTg2NzkxMzFhNjI4ZGRjOTVkZDhjZTBmY2YxZjI0MzA=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-24T17:09:33Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-24T17:09:33Z"}, "message": "Drop use of Arc from Stdin and Stdout.", "tree": {"sha": "c3c173e4f82e595eeb4e700f5a772e3931ef9103", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3c173e4f82e595eeb4e700f5a772e3931ef9103"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45700a9d58679131a628ddc95dd8ce0fcf1f2430", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45700a9d58679131a628ddc95dd8ce0fcf1f2430", "html_url": "https://github.com/rust-lang/rust/commit/45700a9d58679131a628ddc95dd8ce0fcf1f2430", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45700a9d58679131a628ddc95dd8ce0fcf1f2430/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9b25f520bd2e3687213aa1162e631b08b9bf7ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9b25f520bd2e3687213aa1162e631b08b9bf7ed", "html_url": "https://github.com/rust-lang/rust/commit/e9b25f520bd2e3687213aa1162e631b08b9bf7ed"}], "stats": {"total": 50, "additions": 23, "deletions": 27}, "files": [{"sha": "05bdbe0f563c61d9bb44e6015b1db25771a09ba7", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 23, "deletions": 27, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/45700a9d58679131a628ddc95dd8ce0fcf1f2430/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45700a9d58679131a628ddc95dd8ce0fcf1f2430/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=45700a9d58679131a628ddc95dd8ce0fcf1f2430", "patch": "@@ -9,7 +9,7 @@ use crate::cell::RefCell;\n use crate::fmt;\n use crate::io::{self, BufReader, Initializer, IoSlice, IoSliceMut, LineWriter};\n use crate::lazy::SyncOnceCell;\n-use crate::sync::{Arc, Mutex, MutexGuard};\n+use crate::sync::{Mutex, MutexGuard};\n use crate::sys::stdio;\n use crate::sys_common;\n use crate::sys_common::remutex::{ReentrantMutex, ReentrantMutexGuard};\n@@ -218,7 +218,7 @@ fn handle_ebadf<T>(r: io::Result<T>, default: T) -> io::Result<T> {\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Stdin {\n-    inner: Arc<Mutex<BufReader<StdinRaw>>>,\n+    inner: &'static Mutex<BufReader<StdinRaw>>,\n }\n \n /// A locked reference to the `Stdin` handle.\n@@ -293,13 +293,11 @@ pub struct StdinLock<'a> {\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn stdin() -> Stdin {\n-    static INSTANCE: SyncOnceCell<Arc<Mutex<BufReader<StdinRaw>>>> = SyncOnceCell::new();\n+    static INSTANCE: SyncOnceCell<Mutex<BufReader<StdinRaw>>> = SyncOnceCell::new();\n     Stdin {\n-        inner: INSTANCE\n-            .get_or_init(|| {\n-                Arc::new(Mutex::new(BufReader::with_capacity(stdio::STDIN_BUF_SIZE, stdin_raw())))\n-            })\n-            .clone(),\n+        inner: INSTANCE.get_or_init(|| {\n+            Mutex::new(BufReader::with_capacity(stdio::STDIN_BUF_SIZE, stdin_raw()))\n+        }),\n     }\n }\n \n@@ -475,7 +473,7 @@ pub struct Stdout {\n     // FIXME: this should be LineWriter or BufWriter depending on the state of\n     //        stdout (tty or not). Note that if this is not line buffered it\n     //        should also flush-on-panic or some form of flush-on-abort.\n-    inner: Arc<ReentrantMutex<RefCell<LineWriter<StdoutRaw>>>>,\n+    inner: &'static ReentrantMutex<RefCell<LineWriter<StdoutRaw>>>,\n }\n \n /// A locked reference to the `Stdout` handle.\n@@ -533,27 +531,25 @@ pub struct StdoutLock<'a> {\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn stdout() -> Stdout {\n-    static INSTANCE: SyncOnceCell<Arc<ReentrantMutex<RefCell<LineWriter<StdoutRaw>>>>> =\n+    static INSTANCE: SyncOnceCell<ReentrantMutex<RefCell<LineWriter<StdoutRaw>>>> =\n         SyncOnceCell::new();\n     Stdout {\n-        inner: INSTANCE\n-            .get_or_init(|| unsafe {\n-                let _ = sys_common::at_exit(|| {\n-                    if let Some(instance) = INSTANCE.get() {\n-                        // Flush the data and disable buffering during shutdown\n-                        // by replacing the line writer by one with zero\n-                        // buffering capacity.\n-                        // We use try_lock() instead of lock(), because someone\n-                        // might have leaked a StdoutLock, which would\n-                        // otherwise cause a deadlock here.\n-                        if let Some(lock) = instance.try_lock() {\n-                            *lock.borrow_mut() = LineWriter::with_capacity(0, stdout_raw());\n-                        }\n+        inner: INSTANCE.get_or_init(|| unsafe {\n+            let _ = sys_common::at_exit(|| {\n+                if let Some(instance) = INSTANCE.get() {\n+                    // Flush the data and disable buffering during shutdown\n+                    // by replacing the line writer by one with zero\n+                    // buffering capacity.\n+                    // We use try_lock() instead of lock(), because someone\n+                    // might have leaked a StdoutLock, which would\n+                    // otherwise cause a deadlock here.\n+                    if let Some(lock) = instance.try_lock() {\n+                        *lock.borrow_mut() = LineWriter::with_capacity(0, stdout_raw());\n                     }\n-                });\n-                Arc::new(ReentrantMutex::new(RefCell::new(LineWriter::new(stdout_raw()))))\n-            })\n-            .clone(),\n+                }\n+            });\n+            ReentrantMutex::new(RefCell::new(LineWriter::new(stdout_raw())))\n+        }),\n     }\n }\n "}]}