{"sha": "cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmNGMzY2JlNTUyNDYwOGZkM2E4ZmNkNjI2ZjNjNzMyMjMwMjJiZTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-13T21:48:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-13T21:48:12Z"}, "message": "Auto merge of #47416 - petrochenkov:remove-impl-for-dot-dot, r=petrochenkov\n\nRemove `impl Foo for .. {}` in favor `auto trait Foo {}`\n\nRebase of https://github.com/rust-lang/rust/pull/46480 with restored parsing support.", "tree": {"sha": "f805e0b886a4355f85d277d83731b16d19a6baad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f805e0b886a4355f85d277d83731b16d19a6baad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "html_url": "https://github.com/rust-lang/rust/commit/cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6072a7b3835f1875e81c9fd27799f9b20a0770c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6072a7b3835f1875e81c9fd27799f9b20a0770c", "html_url": "https://github.com/rust-lang/rust/commit/e6072a7b3835f1875e81c9fd27799f9b20a0770c"}, {"sha": "22598776b04cc947f001191b47c18d981b46eec7", "url": "https://api.github.com/repos/rust-lang/rust/commits/22598776b04cc947f001191b47c18d981b46eec7", "html_url": "https://github.com/rust-lang/rust/commit/22598776b04cc947f001191b47c18d981b46eec7"}], "stats": {"total": 997, "additions": 193, "deletions": 804}, "files": [{"sha": "3032fb2de33ada892163d31d5ebcb3ddc64998c3", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -40,15 +40,10 @@ use hash::Hasher;\n /// [ub]: ../../reference/behavior-considered-undefined.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented = \"`{Self}` cannot be sent between threads safely\"]\n-pub unsafe trait Send {\n+pub unsafe auto trait Send {\n     // empty.\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(unknown_lints)]\n-#[allow(auto_impl)]\n-unsafe impl Send for .. { }\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> !Send for *const T { }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -345,15 +340,10 @@ pub trait Copy : Clone {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang = \"sync\"]\n #[rustc_on_unimplemented = \"`{Self}` cannot be shared between threads safely\"]\n-pub unsafe trait Sync {\n+pub unsafe auto trait Sync {\n     // Empty\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(unknown_lints)]\n-#[allow(auto_impl)]\n-unsafe impl Sync for .. { }\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> !Sync for *const T { }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -563,11 +553,7 @@ mod impls {\n /// This affects, for example, whether a `static` of that type is\n /// placed in read-only static memory or writable static memory.\n #[lang = \"freeze\"]\n-unsafe trait Freeze {}\n-\n-#[allow(unknown_lints)]\n-#[allow(auto_impl)]\n-unsafe impl Freeze for .. {}\n+unsafe auto trait Freeze {}\n \n impl<T: ?Sized> !Freeze for UnsafeCell<T> {}\n unsafe impl<T: ?Sized> Freeze for PhantomData<T> {}"}, {"sha": "aa8ad0a6bdc9623dce8cfc122cb2dca27ad10b57", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -496,7 +496,6 @@ define_dep_nodes!( <'tcx>\n     [] SuperPredicatesOfItem(DefId),\n     [] TraitDefOfItem(DefId),\n     [] AdtDefOfItem(DefId),\n-    [] IsAutoImpl(DefId),\n     [] ImplTraitRef(DefId),\n     [] ImplPolarity(DefId),\n     [] FnSignature(DefId),"}, {"sha": "ce35e6552ca83f8b3099600002cf8787a58099c8", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -498,10 +498,6 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n             // visit_enum_def() takes care of visiting the Item's NodeId\n             visitor.visit_enum_def(enum_definition, type_parameters, item.id, item.span)\n         }\n-        ItemAutoImpl(_, ref trait_ref) => {\n-            visitor.visit_id(item.id);\n-            visitor.visit_trait_ref(trait_ref)\n-        }\n         ItemImpl(.., ref type_parameters, ref opt_trait_reference, ref typ, ref impl_item_refs) => {\n             visitor.visit_id(item.id);\n             visitor.visit_generics(type_parameters);"}, {"sha": "84d45906d2408d3ab21dd8fe8f98e2b1e4122828", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -1952,16 +1952,6 @@ impl<'a> LoweringContext<'a> {\n                 let vdata = self.lower_variant_data(vdata);\n                 hir::ItemUnion(vdata, self.lower_generics(generics))\n             }\n-            ItemKind::AutoImpl(unsafety, ref trait_ref) => {\n-                let trait_ref = self.lower_trait_ref(trait_ref, ImplTraitContext::Disallowed);\n-\n-                if let Def::Trait(def_id) = trait_ref.path.def {\n-                    self.trait_auto_impl.insert(def_id, id);\n-                }\n-\n-                hir::ItemAutoImpl(self.lower_unsafety(unsafety),\n-                                     trait_ref)\n-            }\n             ItemKind::Impl(unsafety,\n                            polarity,\n                            defaultness,"}, {"sha": "d68b18dd2f17de4bc599457dd8cc31289b618b9f", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -104,8 +104,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         // Pick the def data. This need not be unique, but the more\n         // information we encapsulate into\n         let def_data = match i.node {\n-            ItemKind::AutoImpl(..) | ItemKind::Impl(..) =>\n-                DefPathData::Impl,\n+            ItemKind::Impl(..) => DefPathData::Impl,\n             ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Union(..) |\n             ItemKind::Trait(..) | ItemKind::TraitAlias(..) |\n             ItemKind::ExternCrate(..) | ItemKind::ForeignMod(..) | ItemKind::Ty(..) =>"}, {"sha": "5feea602d281434271462aa244e74912faf4c2aa", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -1192,7 +1192,6 @@ fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String {\n                 ItemTrait(..) => \"trait\",\n                 ItemTraitAlias(..) => \"trait alias\",\n                 ItemImpl(..) => \"impl\",\n-                ItemAutoImpl(..) => \"default impl\",\n             };\n             format!(\"{} {}{}\", item_str, path_str(), id_str)\n         }"}, {"sha": "8d43b9b4aa7396878c5d9161eef07fb61ba5f46d", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -1965,10 +1965,6 @@ pub enum Item_ {\n     /// Represents a Trait Alias Declaration\n     ItemTraitAlias(Generics, TyParamBounds),\n \n-    /// Auto trait implementations\n-    ///\n-    /// `impl Trait for .. {}`\n-    ItemAutoImpl(Unsafety, TraitRef),\n     /// An implementation, eg `impl<A> Trait for Foo { .. }`\n     ItemImpl(Unsafety,\n              ImplPolarity,\n@@ -1996,8 +1992,7 @@ impl Item_ {\n             ItemUnion(..) => \"union\",\n             ItemTrait(..) => \"trait\",\n             ItemTraitAlias(..) => \"trait alias\",\n-            ItemImpl(..) |\n-            ItemAutoImpl(..) => \"item\",\n+            ItemImpl(..) => \"item\",\n         }\n     }\n "}, {"sha": "a8e55674ae521ceb6420fe58e46520e5a868edee", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -652,18 +652,6 @@ impl<'a> State<'a> {\n                 self.head(&visibility_qualified(&item.vis, \"union\"))?;\n                 self.print_struct(struct_def, generics, item.name, item.span, true)?;\n             }\n-            hir::ItemAutoImpl(unsafety, ref trait_ref) => {\n-                self.head(\"\")?;\n-                self.print_visibility(&item.vis)?;\n-                self.print_unsafety(unsafety)?;\n-                self.word_nbsp(\"impl\")?;\n-                self.print_trait_ref(trait_ref)?;\n-                self.s.space()?;\n-                self.word_space(\"for\")?;\n-                self.word_space(\"..\")?;\n-                self.bopen()?;\n-                self.bclose(item.span)?;\n-            }\n             hir::ItemImpl(unsafety,\n                           polarity,\n                           defaultness,"}, {"sha": "cc1b028480e4d7a715e48f4477c88b37cd001aa2", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -854,7 +854,6 @@ impl_stable_hash_for!(enum hir::Item_ {\n     ItemUnion(variant_data, generics),\n     ItemTrait(is_auto, unsafety, generics, bounds, item_refs),\n     ItemTraitAlias(generics, bounds),\n-    ItemAutoImpl(unsafety, trait_ref),\n     ItemImpl(unsafety, impl_polarity, impl_defaultness, generics, trait_ref, ty, impl_item_refs)\n });\n "}, {"sha": "1ff9c7a86291eaea07585d515552c9f2449256fb", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -564,7 +564,6 @@ impl<'a, 'tcx> Visitor<'tcx> for DeadVisitor<'a, 'tcx> {\n                 hir::ItemStruct(..) |\n                 hir::ItemUnion(..) |\n                 hir::ItemTrait(..) |\n-                hir::ItemAutoImpl(..) |\n                 hir::ItemImpl(..) => self.tcx.sess.codemap().def_span(item.span),\n                 _ => item.span,\n             };"}, {"sha": "e11609ea9b7982312fd1350ad251d9c85cf852d3", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -270,8 +270,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                     hir::ItemMod(..) | hir::ItemForeignMod(..) |\n                     hir::ItemImpl(..) | hir::ItemTrait(..) | hir::ItemTraitAlias(..) |\n                     hir::ItemStruct(..) | hir::ItemEnum(..) |\n-                    hir::ItemUnion(..) | hir::ItemAutoImpl(..) |\n-                    hir::ItemGlobalAsm(..) => {}\n+                    hir::ItemUnion(..) |  hir::ItemGlobalAsm(..) => {}\n                 }\n             }\n             hir_map::NodeTraitItem(trait_method) => {"}, {"sha": "935dfd75dd8b7c3579ef8d78d63ca2d02c2e9d47", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -461,10 +461,10 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                                           intravisit::walk_item(this, item);\n                 });\n             }\n+\n             hir::ItemExternCrate(_)\n             | hir::ItemUse(..)\n             | hir::ItemMod(..)\n-            | hir::ItemAutoImpl(..)\n             | hir::ItemForeignMod(..)\n             | hir::ItemGlobalAsm(..) => {\n                 // These sorts of items have no lifetime parameters at all."}, {"sha": "51d2bc8701a4e18ac806b1396c6438c79a5b5d77", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -2434,7 +2434,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         VtableBuiltinData { nested: obligations }\n     }\n \n-    /// This handles the case where a `impl Foo for ..` impl is being used.\n+    /// This handles the case where a `auto trait Foo` impl is being used.\n     /// The idea is that the impl applies to `X : Foo` if the following conditions are met:\n     ///\n     /// 1. For each constituent type `Y` in `X`, `Y : Foo` holds\n@@ -3276,7 +3276,7 @@ impl<'tcx> TraitObligation<'tcx> {\n         /*!\n          * Creates a cause for obligations that are derived from\n          * `obligation` by a recursive search (e.g., for a builtin\n-         * bound, or eventually a `impl Foo for ..`). If `obligation`\n+         * bound, or eventually a `auto trait Foo`). If `obligation`\n          * is itself a derived obligation, this is just a clone, but\n          * otherwise we create a \"derived obligation\" cause so as to\n          * keep track of the original root obligation for error"}, {"sha": "0c920a6f13e59514d7f7734d1d8477807b82edbc", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -232,11 +232,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n         // Always use types for non-local impls, where types are always\n         // available, and filename/line-number is mostly uninteresting.\n-        let use_types = !self.is_auto_impl(impl_def_id) && (!impl_def_id.is_local() || {\n+        let use_types = !impl_def_id.is_local() || {\n             // Otherwise, use filename/line-number if forced.\n             let force_no_types = FORCE_IMPL_FILENAME_LINE.with(|f| f.get());\n             !force_no_types\n-        });\n+        };\n \n         if !use_types {\n             return self.push_impl_path_fallback(buffer, impl_def_id);"}, {"sha": "ca35ad1e240cd70b993687c5a77d873917b47b22", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -112,9 +112,6 @@ define_maps! { <'tcx>\n     /// True if this is a foreign item (i.e., linked via `extern { ... }`).\n     [] fn is_foreign_item: IsForeignItem(DefId) -> bool,\n \n-    /// True if this is an auto impl (aka impl Foo for ..)\n-    [] fn is_auto_impl: IsAutoImpl(DefId) -> bool,\n-\n     /// Get a map with the variance of every item; use `item_variance`\n     /// instead.\n     [] fn crate_variances: crate_variances(CrateNum) -> Rc<ty::CrateVariancesMap>,"}, {"sha": "21cb35a363fe952d1fa66dcbf0e41e052ecfc5c0", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -801,7 +801,6 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::SuperPredicatesOfItem => { force!(super_predicates_of, def_id!()); }\n         DepKind::TraitDefOfItem => { force!(trait_def, def_id!()); }\n         DepKind::AdtDefOfItem => { force!(adt_def, def_id!()); }\n-        DepKind::IsAutoImpl => { force!(is_auto_impl, def_id!()); }\n         DepKind::ImplTraitRef => { force!(impl_trait_ref, def_id!()); }\n         DepKind::ImplPolarity => { force!(impl_polarity, def_id!()); }\n         DepKind::FnSignature => { force!(fn_sig, def_id!()); }"}, {"sha": "2b4d2c80c6f9e904bc941939fe1ed66d3bf654f2", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -2400,8 +2400,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     /// Returns true if this is an `auto trait`.\n-    ///\n-    /// NB. For a limited time, also returns true if `impl Trait for .. { }` is in the code-base.\n     pub fn trait_is_auto(self, trait_def_id: DefId) -> bool {\n         self.trait_def(trait_def_id).has_auto_impl\n     }"}, {"sha": "371f0e79a3ad1dc9c8f82639821463a4d195f9da", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -246,8 +246,7 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n                 hir::ItemUnion(..) |\n                 hir::ItemTrait(..) |\n                 hir::ItemTraitAlias(..) |\n-                hir::ItemImpl(..) |\n-                hir::ItemAutoImpl(..) => None,\n+                hir::ItemImpl(..) => None,\n \n                 hir::ItemMod(ref m) => search_mod(this, m, idx, names),\n             };"}, {"sha": "c3e283535ec8280fd2ba6da371a02a7f2c4e3e23", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -393,9 +393,6 @@ impl<'a, 'tcx> DirtyCleanVisitor<'a, 'tcx> {\n                     //\n                     //HirItem::ItemTrait(..) => (\"ItemTrait\", LABELS_TRAIT),\n \n-                    // `impl Trait for .. {}`\n-                    HirItem::ItemAutoImpl(..) => (\"ItemAutoImpl\", LABELS_IMPL),\n-\n                     // An implementation, eg `impl<A> Trait for Foo { .. }`\n                     HirItem::ItemImpl(..) => (\"ItemImpl\", LABELS_IMPL),\n "}, {"sha": "c5c27c92ab49af2899808a5281155e933f487150", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -55,31 +55,6 @@ use bad_style::{MethodLateContext, method_context};\n // hardwired lints from librustc\n pub use lint::builtin::*;\n \n-declare_lint! {\n-    pub AUTO_IMPL,\n-    Deny,\n-    \"The form `impl Foo for .. {}` will be removed, please use `auto trait Foo {}`\"\n-}\n-\n-#[derive(Copy, Clone)]\n-pub struct AutoImpl;\n-\n-impl LintPass for AutoImpl {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(AUTO_IMPL)\n-    }\n-}\n-\n-impl EarlyLintPass for AutoImpl {\n-    fn check_item(&mut self, cx: &EarlyContext, item: &ast::Item) {\n-        let msg = \"The form `impl Foo for .. {}` will be removed, please use `auto trait Foo {}`\";\n-        match item.node {\n-            ast::ItemKind::AutoImpl(..) => cx.span_lint(AUTO_IMPL, item.span, msg),\n-            _ => ()\n-        }\n-     }\n-}\n-\n declare_lint! {\n     WHILE_TRUE,\n     Warn,"}, {"sha": "699765dde03ffa50070e8636501c14682dc8295c", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -109,7 +109,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                        AnonymousParameters,\n                        IllegalFloatLiteralPattern,\n                        UnusedDocComment,\n-                       AutoImpl,\n                        );\n \n     add_early_builtin_with_new!(sess,\n@@ -183,10 +182,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n     // - Eventually, remove lint\n     store.register_future_incompatible(sess,\n                                        vec![\n-        FutureIncompatibleInfo {\n-            id: LintId::of(AUTO_IMPL),\n-            reference: \"issue #13231 <https://github.com/rust-lang/rust/issues/13231>\",\n-        },\n         FutureIncompatibleInfo {\n             id: LintId::of(PRIVATE_IN_PUBLIC),\n             reference: \"issue #34537 <https://github.com/rust-lang/rust/issues/34537>\","}, {"sha": "d73e968a827600cc92982d14be97793bf49f67ff", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -143,7 +143,6 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     inherent_impls => { Rc::new(cdata.get_inherent_implementations_for_type(def_id.index)) }\n     is_const_fn => { cdata.is_const_fn(def_id.index) }\n     is_foreign_item => { cdata.is_foreign_item(def_id.index) }\n-    is_auto_impl => { cdata.is_auto_impl(def_id.index) }\n     describe_def => { cdata.get_def(def_id.index) }\n     def_span => { cdata.get_span(def_id.index, &tcx.sess) }\n     lookup_stability => {"}, {"sha": "bd63396cd35abd6acaaab4223071abb1eee6333f", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -404,7 +404,6 @@ impl<'tcx> EntryKind<'tcx> {\n \n             EntryKind::ForeignMod |\n             EntryKind::Impl(_) |\n-            EntryKind::AutoImpl(_) |\n             EntryKind::Field |\n             EntryKind::Generator(_) |\n             EntryKind::Closure(_) => return None,\n@@ -690,8 +689,7 @@ impl<'a, 'tcx> CrateMetadata {\n                         }\n                         continue;\n                     }\n-                    EntryKind::Impl(_) |\n-                    EntryKind::AutoImpl(_) => continue,\n+                    EntryKind::Impl(_) => continue,\n \n                     _ => {}\n                 }\n@@ -1045,13 +1043,6 @@ impl<'a, 'tcx> CrateMetadata {\n         self.dllimport_foreign_items.contains(&id)\n     }\n \n-    pub fn is_auto_impl(&self, impl_id: DefIndex) -> bool {\n-        match self.entry(impl_id).kind {\n-            EntryKind::AutoImpl(_) => true,\n-            _ => false,\n-        }\n-    }\n-\n     pub fn fn_sig(&self,\n                   id: DefIndex,\n                   tcx: TyCtxt<'a, 'tcx, 'tcx>)"}, {"sha": "78578ca179c8218505122361f99002f79b147965", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -974,17 +974,6 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                     ctor_sig: None,\n                 }), repr_options)\n             }\n-            hir::ItemAutoImpl(..) => {\n-                let data = ImplData {\n-                    polarity: hir::ImplPolarity::Positive,\n-                    defaultness: hir::Defaultness::Final,\n-                    parent_impl: None,\n-                    coerce_unsized_info: None,\n-                    trait_ref: tcx.impl_trait_ref(def_id).map(|trait_ref| self.lazy(&trait_ref)),\n-                };\n-\n-                EntryKind::AutoImpl(self.lazy(&data))\n-            }\n             hir::ItemImpl(_, polarity, defaultness, ..) => {\n                 let trait_ref = tcx.impl_trait_ref(def_id);\n                 let parent = if let Some(trait_ref) = trait_ref {\n@@ -1579,7 +1568,6 @@ impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> {\n             hir::ItemGlobalAsm(..) |\n             hir::ItemExternCrate(..) |\n             hir::ItemUse(..) |\n-            hir::ItemAutoImpl(..) |\n             hir::ItemTy(..) |\n             hir::ItemTraitAlias(..) => {\n                 // no sub-item recording needed in these cases"}, {"sha": "c542f65dcecf370609dab3821414dd6f2a43e23b", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -303,7 +303,6 @@ pub enum EntryKind<'tcx> {\n     Generator(Lazy<GeneratorData<'tcx>>),\n     Trait(Lazy<TraitData<'tcx>>),\n     Impl(Lazy<ImplData<'tcx>>),\n-    AutoImpl(Lazy<ImplData<'tcx>>),\n     Method(Lazy<MethodData<'tcx>>),\n     AssociatedType(AssociatedContainer),\n     AssociatedConst(AssociatedContainer, u8),\n@@ -359,7 +358,6 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for EntryKind<'gcx> {\n             EntryKind::Trait(ref trait_data) => {\n                 trait_data.hash_stable(hcx, hasher);\n             }\n-            EntryKind::AutoImpl(ref impl_data) |\n             EntryKind::Impl(ref impl_data) => {\n                 impl_data.hash_stable(hcx, hasher);\n             }"}, {"sha": "f16187797d4e5127d2f6544683207a8cc244cb5c", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -910,7 +910,6 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n             hir::ItemUse(..)         |\n             hir::ItemForeignMod(..)  |\n             hir::ItemTy(..)          |\n-            hir::ItemAutoImpl(..) |\n             hir::ItemTrait(..)       |\n             hir::ItemTraitAlias(..)  |\n             hir::ItemMod(..)         => {"}, {"sha": "c41591bbc37ef4fa4259ec8b9b910b5968406683", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -215,8 +215,13 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n \n     fn visit_item(&mut self, item: &'a Item) {\n         match item.node {\n-            ItemKind::Impl(.., Some(..), _, ref impl_items) => {\n+            ItemKind::Impl(.., Some(..), ref ty, ref impl_items) => {\n                 self.invalid_visibility(&item.vis, item.span, None);\n+                if ty.node == TyKind::Err {\n+                    self.err_handler()\n+                        .struct_span_err(item.span, \"`impl Trait for .. {}` is an obsolete syntax\")\n+                        .help(\"use `auto trait Trait {}` instead\").emit();\n+                }\n                 for impl_item in impl_items {\n                     self.invalid_visibility(&impl_item.vis, impl_item.span, None);\n                     if let ImplItemKind::Method(ref sig, _) = impl_item.node {\n@@ -229,9 +234,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                                         item.span,\n                                         Some(\"place qualifiers on individual impl items instead\"));\n             }\n-            ItemKind::AutoImpl(..) => {\n-                self.invalid_visibility(&item.vis, item.span, None);\n-            }\n             ItemKind::ForeignMod(..) => {\n                 self.invalid_visibility(&item.vis,\n                                         item.span,\n@@ -250,16 +252,16 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 if is_auto == IsAuto::Yes {\n                     // Auto traits cannot have generics, super traits nor contain items.\n                     if generics.is_parameterized() {\n-                        self.err_handler().span_err(item.span,\n-                                                    \"auto traits cannot have generics\");\n+                        struct_span_err!(self.session, item.span, E0567,\n+                                        \"auto traits cannot have generic parameters\").emit();\n                     }\n                     if !bounds.is_empty() {\n-                        self.err_handler().span_err(item.span,\n-                                                    \"auto traits cannot have super traits\");\n+                        struct_span_err!(self.session, item.span, E0568,\n+                                        \"auto traits cannot have super traits\").emit();\n                     }\n                     if !trait_items.is_empty() {\n-                        self.err_handler().span_err(item.span,\n-                                                    \"auto traits cannot contain items\");\n+                        struct_span_err!(self.session, item.span, E0380,\n+                                \"auto traits cannot have methods or associated items\").emit();\n                     }\n                 }\n                 self.no_questions_in_bounds(bounds, \"supertraits\", true);"}, {"sha": "cbfdace7e0ff2718eab22fef3f846b46111b2aff", "filename": "src/librustc_passes/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_passes%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_passes%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostics.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -150,6 +150,13 @@ Trait methods cannot be declared `const` by design. For more information, see\n [RFC 911]: https://github.com/rust-lang/rfcs/pull/911\n \"##,\n \n+E0380: r##\"\n+Auto traits cannot have methods or associated items.\n+For more information see the [opt-in builtin traits RFC][RFC 19].\n+\n+[RFC 19]: https://github.com/rust-lang/rfcs/blob/master/text/0019-opt-in-builtin-traits.md\n+\"##,\n+\n E0449: r##\"\n A visibility qualifier was used when it was unnecessary. Erroneous code\n examples:\n@@ -264,5 +271,7 @@ register_diagnostics! {\n     E0226, // only a single explicit lifetime bound is permitted\n     E0472, // asm! is unsupported on this target\n     E0561, // patterns aren't allowed in function pointer types\n+    E0567, // auto traits can not have generic parameters\n+    E0568, // auto traits can not have super traits\n     E0642, // patterns aren't allowed in methods without bodies\n }"}, {"sha": "b525ab852a7e551c70379a3e24ae0520731ddae4", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -147,10 +147,6 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n                 let def_id = self.tcx.hir.local_def_id(item.id);\n                 cmp::min(self.item_ty_level(def_id), self.impl_trait_level(def_id))\n             }\n-            hir::ItemAutoImpl(..) => {\n-                let def_id = self.tcx.hir.local_def_id(item.id);\n-                self.impl_trait_level(def_id)\n-            }\n             // Foreign mods inherit level from parents\n             hir::ItemForeignMod(..) => {\n                 self.prev_level\n@@ -214,7 +210,7 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n             }\n             hir::ItemUse(..) | hir::ItemStatic(..) | hir::ItemConst(..) |\n             hir::ItemGlobalAsm(..) | hir::ItemTy(..) | hir::ItemMod(..) | hir::ItemTraitAlias(..) |\n-            hir::ItemFn(..) | hir::ItemExternCrate(..) | hir::ItemAutoImpl(..) => {}\n+            hir::ItemFn(..) | hir::ItemExternCrate(..) => {}\n         }\n \n         // Mark all items in interfaces of reachable items as reachable\n@@ -226,8 +222,6 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n             // Reexports are handled in visit_mod\n             hir::ItemUse(..) => {}\n             // The interface is empty\n-            hir::ItemAutoImpl(..) => {}\n-            // The interface is empty\n             hir::ItemGlobalAsm(..) => {}\n             // Visit everything\n             hir::ItemConst(..) | hir::ItemStatic(..) |\n@@ -1571,8 +1565,6 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n                     self.check(field.id, min(item_visibility, field_visibility)).ty();\n                 }\n             }\n-            // The interface is empty\n-            hir::ItemAutoImpl(..) => {}\n             // An inherent impl is public when its type is public\n             // Subitems of inherent impls have their own publicity\n             hir::ItemImpl(.., None, _, ref impl_item_refs) => {"}, {"sha": "10bd72ac4a00afb10912d2ef087e07b92f78b93e", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -400,7 +400,7 @@ impl<'a> Resolver<'a> {\n                 self.insert_field_names(item_def_id, field_names);\n             }\n \n-            ItemKind::AutoImpl(..) | ItemKind::Impl(..) => {}\n+            ItemKind::Impl(..) => {}\n \n             ItemKind::Trait(..) => {\n                 let def_id = self.definitions.local_def_id(item.id);"}, {"sha": "0a29441cef7efdfe7395d53fcc41a47242101c15", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -1902,12 +1902,6 @@ impl<'a> Resolver<'a> {\n                                              |this| visit::walk_item(this, item));\n             }\n \n-            ItemKind::AutoImpl(_, ref trait_ref) => {\n-                self.with_optional_trait_ref(Some(trait_ref), |this, _| {\n-                    // Resolve type arguments in trait path\n-                    visit::walk_trait_ref(this, trait_ref);\n-                });\n-            }\n             ItemKind::Impl(.., ref generics, ref opt_trait_ref, ref self_type, ref impl_items) =>\n                 self.resolve_implementation(generics,\n                                             opt_trait_ref,"}, {"sha": "0c890ce19d0818c605c01e193c06be72d5cf82e6", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -511,17 +511,6 @@ impl Sig for ast::Item {\n \n                 Ok(sig)\n             }\n-            ast::ItemKind::AutoImpl(unsafety, ref trait_ref) => {\n-                let mut text = String::new();\n-                if unsafety == ast::Unsafety::Unsafe {\n-                    text.push_str(\"unsafe \");\n-                }\n-                text.push_str(\"impl \");\n-                let trait_sig = trait_ref.path.make(offset + text.len(), id, scx)?;\n-                text.push_str(&trait_sig.text);\n-                text.push_str(\" for .. {}\");\n-                Ok(replace_text(trait_sig, text))\n-            }\n             ast::ItemKind::Impl(\n                 unsafety,\n                 polarity,"}, {"sha": "60d28fb0e087a1b4ab03ab4c3f3c8445da3f958b", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -275,74 +275,8 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n         });\n     }\n \n-    fn check_auto_trait(&mut self, trait_def_id: DefId, span: Span) {\n-        // We want to ensure:\n-        //\n-        // 1) that there are no items contained within\n-        // the trait definition\n-        //\n-        // 2) that the definition doesn't violate the no-super trait rule\n-        // for auto traits.\n-        //\n-        // 3) that the trait definition does not have any type parameters\n-\n-        let predicates = self.tcx.predicates_of(trait_def_id);\n-\n-        // We must exclude the Self : Trait predicate contained by all\n-        // traits.\n-        let has_predicates =\n-            predicates.predicates.iter().any(|predicate| {\n-                match predicate {\n-                    &ty::Predicate::Trait(ref poly_trait_ref) => {\n-                        let self_ty = poly_trait_ref.0.self_ty();\n-                        !(self_ty.is_self() && poly_trait_ref.def_id() == trait_def_id)\n-                    },\n-                    _ => true,\n-                }\n-            });\n-\n-        let has_ty_params = self.tcx.generics_of(trait_def_id).types.len() > 1;\n-\n-        // We use an if-else here, since the generics will also trigger\n-        // an extraneous error message when we find predicates like\n-        // `T : Sized` for a trait like: `trait Magic<T>`.\n-        //\n-        // We also put the check on the number of items here,\n-        // as it seems confusing to report an error about\n-        // extraneous predicates created by things like\n-        // an associated type inside the trait.\n-        let mut err = None;\n-        if !self.tcx.associated_item_def_ids(trait_def_id).is_empty() {\n-            error_380(self.tcx, span);\n-        } else if has_ty_params {\n-            err = Some(struct_span_err!(self.tcx.sess, span, E0567,\n-                \"traits with auto impls (`e.g. impl \\\n-                    Trait for ..`) can not have type parameters\"));\n-        } else if has_predicates {\n-            err = Some(struct_span_err!(self.tcx.sess, span, E0568,\n-                \"traits with auto impls (`e.g. impl \\\n-                    Trait for ..`) cannot have predicates\"));\n-        }\n-\n-        // Finally if either of the above conditions apply we should add a note\n-        // indicating that this error is the result of a recent soundness fix.\n-        match err {\n-            None => {},\n-            Some(mut e) => {\n-                e.note(\"the new auto trait rules are the result of a \\\n-                          recent soundness fix; see #29859 for more details\");\n-                e.emit();\n-            }\n-        }\n-    }\n-\n     fn check_trait(&mut self, item: &hir::Item) {\n         let trait_def_id = self.tcx.hir.local_def_id(item.id);\n-\n-        if self.tcx.trait_is_auto(trait_def_id) {\n-            self.check_auto_trait(trait_def_id, item.span);\n-        }\n-\n         self.for_item(item).with_fcx(|fcx, this| {\n             let predicates = fcx.tcx.predicates_of(trait_def_id).instantiate_identity(fcx.tcx);\n             let predicates = fcx.normalize_associated_types_in(item.span, &predicates);\n@@ -733,12 +667,6 @@ fn error_192(tcx: TyCtxt, span: Span) {\n                default impls (e.g., `Send` and `Sync`)\")\n }\n \n-fn error_380(tcx: TyCtxt, span: Span) {\n-    span_err!(tcx.sess, span, E0380,\n-              \"traits with default impls (`e.g. impl \\\n-               Trait for ..`) must have no methods or associated items\")\n-}\n-\n fn error_392<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, span: Span, param_name: ast::Name)\n                        -> DiagnosticBuilder<'tcx> {\n     let mut err = struct_span_err!(tcx.sess, span, E0392,"}, {"sha": "f65d627781f0fb802b848fcc40f5ad5c145d0b3f", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 45, "deletions": 3, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -16,6 +16,7 @@\n // mappings. That mapping code resides here.\n \n use hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc::traits;\n use rustc::ty::{self, TyCtxt, TypeFoldable};\n use rustc::ty::maps::Providers;\n \n@@ -25,7 +26,6 @@ mod builtin;\n mod inherent_impls;\n mod inherent_impls_overlap;\n mod orphan;\n-mod overlap;\n mod unsafety;\n \n fn check_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, node_id: ast::NodeId) {\n@@ -119,7 +119,7 @@ fn coherent_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n         check_impl(tcx, impl_id);\n     }\n     for &impl_id in impls {\n-        overlap::check_impl(tcx, impl_id);\n+        check_impl_overlap(tcx, impl_id);\n     }\n     builtin::check_trait(tcx, def_id);\n }\n@@ -131,9 +131,51 @@ pub fn check_coherence<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n \n     unsafety::check(tcx);\n     orphan::check(tcx);\n-    overlap::check_auto_impls(tcx);\n \n     // these queries are executed for side-effects (error reporting):\n     ty::maps::queries::crate_inherent_impls::ensure(tcx, LOCAL_CRATE);\n     ty::maps::queries::crate_inherent_impls_overlap_check::ensure(tcx, LOCAL_CRATE);\n }\n+\n+/// Overlap: No two impls for the same trait are implemented for the\n+/// same type. Likewise, no two inherent impls for a given type\n+/// constructor provide a method with the same name.\n+fn check_impl_overlap<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, node_id: ast::NodeId) {\n+    let impl_def_id = tcx.hir.local_def_id(node_id);\n+    let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n+    let trait_def_id = trait_ref.def_id;\n+\n+    if trait_ref.references_error() {\n+        debug!(\"coherence: skipping impl {:?} with error {:?}\",\n+               impl_def_id, trait_ref);\n+        return\n+    }\n+\n+    // Trigger building the specialization graph for the trait of this impl.\n+    // This will detect any overlap errors.\n+    tcx.specialization_graph_of(trait_def_id);\n+\n+    // check for overlap with the automatic `impl Trait for Trait`\n+    if let ty::TyDynamic(ref data, ..) = trait_ref.self_ty().sty {\n+        // This is something like impl Trait1 for Trait2. Illegal\n+        // if Trait1 is a supertrait of Trait2 or Trait2 is not object safe.\n+\n+        if data.principal().map_or(true, |p| !tcx.is_object_safe(p.def_id())) {\n+            // This is an error, but it will be reported by wfcheck.  Ignore it here.\n+            // This is tested by `coherence-impl-trait-for-trait-object-safe.rs`.\n+        } else {\n+            let mut supertrait_def_ids =\n+                traits::supertrait_def_ids(tcx,\n+                                           data.principal().unwrap().def_id());\n+            if supertrait_def_ids.any(|d| d == trait_def_id) {\n+                span_err!(tcx.sess,\n+                          tcx.span_of_impl(impl_def_id).unwrap(),\n+                          E0371,\n+                          \"the object type `{}` automatically \\\n+                           implements the trait `{}`\",\n+                          trait_ref.self_ty(),\n+                          tcx.item_path_str(trait_def_id));\n+            }\n+        }\n+    }\n+}"}, {"sha": "ab19a862a66fdfc3944da5cdf5b51829910bb475", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -142,24 +142,6 @@ impl<'cx, 'tcx, 'v> ItemLikeVisitor<'v> for OrphanChecker<'cx, 'tcx> {\n                     }\n                 }\n             }\n-            hir::ItemAutoImpl(_, ref item_trait_ref) => {\n-                // \"Trait\" impl\n-                debug!(\"coherence2::orphan check: default trait impl {}\",\n-                       self.tcx.hir.node_to_string(item.id));\n-                let trait_ref = self.tcx.impl_trait_ref(def_id).unwrap();\n-                if !trait_ref.def_id.is_local() {\n-                    struct_span_err!(self.tcx.sess,\n-                                     item_trait_ref.path.span,\n-                                     E0318,\n-                                     \"cannot create default implementations for traits outside \\\n-                                      the crate they're defined in; define a new trait instead\")\n-                        .span_label(item_trait_ref.path.span,\n-                                    format!(\"`{}` trait not defined in this crate\",\n-                            self.tcx.hir.node_to_pretty_string(item_trait_ref.ref_id)))\n-                        .emit();\n-                    return;\n-                }\n-            }\n             _ => {\n                 // Not an impl\n             }"}, {"sha": "5cc6eaa5602fbe7d57bafe0f67853c8655bc1eee", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "removed", "additions": 0, "deletions": 110, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/e6072a7b3835f1875e81c9fd27799f9b20a0770c/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6072a7b3835f1875e81c9fd27799f9b20a0770c/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=e6072a7b3835f1875e81c9fd27799f9b20a0770c", "patch": "@@ -1,110 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Overlap: No two impls for the same trait are implemented for the\n-//! same type. Likewise, no two inherent impls for a given type\n-//! constructor provide a method with the same name.\n-\n-use rustc::traits;\n-use rustc::ty::{self, TyCtxt, TypeFoldable};\n-use syntax::ast;\n-use rustc::hir;\n-use rustc::hir::itemlikevisit::ItemLikeVisitor;\n-\n-pub fn check_auto_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    let mut overlap = OverlapChecker { tcx };\n-\n-    // this secondary walk specifically checks for some other cases,\n-    // like defaulted traits, for which additional overlap rules exist\n-    tcx.hir.krate().visit_all_item_likes(&mut overlap);\n-}\n-\n-pub fn check_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, node_id: ast::NodeId) {\n-    let impl_def_id = tcx.hir.local_def_id(node_id);\n-    let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n-    let trait_def_id = trait_ref.def_id;\n-\n-    if trait_ref.references_error() {\n-        debug!(\"coherence: skipping impl {:?} with error {:?}\",\n-               impl_def_id, trait_ref);\n-        return\n-    }\n-\n-    // Trigger building the specialization graph for the trait of this impl.\n-    // This will detect any overlap errors.\n-    tcx.specialization_graph_of(trait_def_id);\n-\n-\n-    // check for overlap with the automatic `impl Trait for Trait`\n-    if let ty::TyDynamic(ref data, ..) = trait_ref.self_ty().sty {\n-        // This is something like impl Trait1 for Trait2. Illegal\n-        // if Trait1 is a supertrait of Trait2 or Trait2 is not object safe.\n-\n-        if data.principal().map_or(true, |p| !tcx.is_object_safe(p.def_id())) {\n-            // This is an error, but it will be reported by wfcheck.  Ignore it here.\n-            // This is tested by `coherence-impl-trait-for-trait-object-safe.rs`.\n-        } else {\n-            let mut supertrait_def_ids =\n-                traits::supertrait_def_ids(tcx,\n-                                           data.principal().unwrap().def_id());\n-            if supertrait_def_ids.any(|d| d == trait_def_id) {\n-                span_err!(tcx.sess,\n-                          tcx.span_of_impl(impl_def_id).unwrap(),\n-                          E0371,\n-                          \"the object type `{}` automatically \\\n-                           implements the trait `{}`\",\n-                          trait_ref.self_ty(),\n-                          tcx.item_path_str(trait_def_id));\n-            }\n-        }\n-    }\n-}\n-\n-struct OverlapChecker<'cx, 'tcx: 'cx> {\n-    tcx: TyCtxt<'cx, 'tcx, 'tcx>,\n-}\n-\n-impl<'cx, 'tcx, 'v> ItemLikeVisitor<'v> for OverlapChecker<'cx, 'tcx> {\n-    fn visit_item(&mut self, item: &'v hir::Item) {\n-        match item.node {\n-            hir::ItemAutoImpl(..) => {\n-                // look for another auto impl; note that due to the\n-                // general orphan/coherence rules, it must always be\n-                // in this crate.\n-                let impl_def_id = self.tcx.hir.local_def_id(item.id);\n-                let trait_ref = self.tcx.impl_trait_ref(impl_def_id).unwrap();\n-\n-                let prev_id = self.tcx.hir.trait_auto_impl(trait_ref.def_id).unwrap();\n-                if prev_id != item.id {\n-                    let mut err = struct_span_err!(self.tcx.sess,\n-                                                   self.tcx.span_of_impl(impl_def_id).unwrap(),\n-                                                   E0521,\n-                                                   \"redundant auto implementations of trait \\\n-                                                    `{}`:\",\n-                                                   trait_ref);\n-                    err.span_note(self.tcx\n-                                      .span_of_impl(self.tcx.hir.local_def_id(prev_id))\n-                                      .unwrap(),\n-                                  \"redundant implementation is here:\");\n-                    err.emit();\n-                }\n-            }\n-            hir::ItemImpl(.., Some(_), _, _) => {\n-            }\n-            _ => {}\n-        }\n-    }\n-\n-    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) {\n-    }\n-\n-    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {\n-    }\n-}"}, {"sha": "c924a3364ebf0003e888a886b99ba6b3eb11c910", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -84,9 +84,6 @@ impl<'cx, 'tcx, 'v> UnsafetyChecker<'cx, 'tcx> {\n impl<'cx, 'tcx, 'v> ItemLikeVisitor<'v> for UnsafetyChecker<'cx, 'tcx> {\n     fn visit_item(&mut self, item: &'v hir::Item) {\n         match item.node {\n-            hir::ItemAutoImpl(unsafety, _) => {\n-                self.check_unsafety_coherence(item, None, unsafety, hir::ImplPolarity::Positive);\n-            }\n             hir::ItemImpl(unsafety, polarity, _, ref generics, ..) => {\n                 self.check_unsafety_coherence(item, Some(generics), unsafety, polarity);\n             }"}, {"sha": "5485045b7043897f459e02445b8152abde6a1096", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 28, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -73,7 +73,6 @@ pub fn provide(providers: &mut Providers) {\n         impl_trait_ref,\n         impl_polarity,\n         is_foreign_item,\n-        is_auto_impl,\n         ..*providers\n     };\n }\n@@ -424,9 +423,6 @@ fn convert_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_id: ast::NodeId) {\n             tcx.predicates_of(def_id);\n             convert_enum_variant_types(tcx, def_id, &enum_definition.variants);\n         },\n-        hir::ItemAutoImpl(..) => {\n-            tcx.impl_trait_ref(def_id);\n-        }\n         hir::ItemImpl(..) => {\n             tcx.generics_of(def_id);\n             tcx.type_of(def_id);\n@@ -716,9 +712,9 @@ fn trait_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let node_id = tcx.hir.as_local_node_id(def_id).unwrap();\n     let item = tcx.hir.expect_item(node_id);\n \n-    let unsafety = match item.node {\n-        hir::ItemTrait(_, unsafety, ..) => unsafety,\n-        hir::ItemTraitAlias(..) => hir::Unsafety::Normal,\n+    let (is_auto, unsafety) = match item.node {\n+        hir::ItemTrait(is_auto, unsafety, ..) => (is_auto == hir::IsAuto::Yes, unsafety),\n+        hir::ItemTraitAlias(..) => (false, hir::Unsafety::Normal),\n         _ => span_bug!(item.span, \"trait_def_of_item invoked on non-trait\"),\n     };\n \n@@ -735,10 +731,6 @@ fn trait_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n \n     let def_path_hash = tcx.def_path_hash(def_id);\n-    let is_auto = match item.node {\n-        hir::ItemTrait(hir::IsAuto::Yes, ..) => true,\n-        _ => tcx.hir.trait_is_auto(def_id),\n-    };\n     let def = ty::TraitDef::new(def_id,\n                                 unsafety,\n                                 paren_sugar,\n@@ -1109,7 +1101,6 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     let substs = Substs::identity_for_item(tcx, def_id);\n                     tcx.mk_adt(def, substs)\n                 }\n-                ItemAutoImpl(..) |\n                 ItemTrait(..) | ItemTraitAlias(..) |\n                 ItemMod(..) |\n                 ItemForeignMod(..) |\n@@ -1278,11 +1269,6 @@ fn impl_trait_ref<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let node_id = tcx.hir.as_local_node_id(def_id).unwrap();\n     match tcx.hir.expect_item(node_id).node {\n-        hir::ItemAutoImpl(_, ref ast_trait_ref) => {\n-            Some(AstConv::instantiate_mono_trait_ref(&icx,\n-                                                     ast_trait_ref,\n-                                                     tcx.mk_self_type()))\n-        }\n         hir::ItemImpl(.., ref opt_trait_ref, _, _) => {\n             opt_trait_ref.as_ref().map(|ast_trait_ref| {\n                 let selfty = tcx.type_of(def_id);\n@@ -1728,14 +1714,3 @@ fn is_foreign_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         _ => bug!(\"is_foreign_item applied to non-local def-id {:?}\", def_id)\n     }\n }\n-\n-fn is_auto_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                             def_id: DefId)\n-                             -> bool {\n-    match tcx.hir.get_if_local(def_id) {\n-        Some(hir_map::NodeItem(&hir::Item { node: hir::ItemAutoImpl(..), .. }))\n-             => true,\n-        Some(_) => false,\n-        _ => bug!(\"is_auto_impl applied to non-local def-id {:?}\", def_id)\n-    }\n-}"}, {"sha": "11b983fd314da2a6b0493de23249cae22642645d", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -1854,14 +1854,12 @@ unsafe impl !Clone for Foo { }\n \n This will compile:\n \n-```ignore (ignore auto_trait future compatibility warning)\n+```\n #![feature(optin_builtin_traits)]\n \n struct Foo;\n \n-trait Enterprise {}\n-\n-impl Enterprise for .. { }\n+auto trait Enterprise {}\n \n impl !Enterprise for Foo { }\n ```\n@@ -2533,13 +2531,6 @@ struct Bar<S, T> { x: Foo<S, T> }\n ```\n \"##,\n \n-E0318: r##\"\n-Default impls for a trait must be located in the same crate where the trait was\n-defined. For more information see the [opt-in builtin traits RFC][RFC 19].\n-\n-[RFC 19]: https://github.com/rust-lang/rfcs/blob/master/text/0019-opt-in-builtin-traits.md\n-\"##,\n-\n E0321: r##\"\n A cross-crate opt-out trait was implemented on something which wasn't a struct\n or enum type. Erroneous code example:\n@@ -3172,13 +3163,6 @@ containing the unsized type is the last and only unsized type field in the\n struct.\n \"##,\n \n-E0380: r##\"\n-Default impls are only allowed for traits with no methods or associated items.\n-For more information see the [opt-in builtin traits RFC][RFC 19].\n-\n-[RFC 19]: https://github.com/rust-lang/rfcs/blob/master/text/0019-opt-in-builtin-traits.md\n-\"##,\n-\n E0390: r##\"\n You tried to implement methods for a primitive type. Erroneous code example:\n \n@@ -4731,13 +4715,10 @@ register_diagnostics! {\n //  E0372, // coherence not object safe\n     E0377, // the trait `CoerceUnsized` may only be implemented for a coercion\n            // between structures with the same definition\n-    E0521, // redundant auto implementations of trait\n     E0533, // `{}` does not name a unit variant, unit struct or a constant\n //  E0563, // cannot determine a type for this `impl Trait`: {} // removed in 6383de15\n     E0564, // only named lifetimes are allowed in `impl Trait`,\n            // but `{}` was found in the type `{}`\n-    E0567, // auto traits can not have type parameters\n-    E0568, // auto-traits can not have predicates,\n     E0587, // struct has conflicting packed and align representation hints\n     E0588, // packed struct cannot transitively contain a `[repr(align)]` struct\n     E0592, // duplicate definitions with name `{}`"}, {"sha": "496389da7f2f165c8b8a04edc68aa99bdf90e7eb", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -300,27 +300,6 @@ pub fn build_impl(cx: &DocContext, did: DefId, ret: &mut Vec<clean::Item>) {\n         }\n     }\n \n-    // If this is an auto impl, then bail out early here\n-    if tcx.is_auto_impl(did) {\n-        return ret.push(clean::Item {\n-            inner: clean::AutoImplItem(clean::AutoImpl {\n-                // FIXME: this should be decoded\n-                unsafety: hir::Unsafety::Normal,\n-                trait_: match associated_trait.as_ref().unwrap().clean(cx) {\n-                    clean::TraitBound(polyt, _) => polyt.trait_,\n-                    clean::RegionBound(..) => unreachable!(),\n-                },\n-            }),\n-            source: tcx.def_span(did).clean(cx),\n-            name: None,\n-            attrs,\n-            visibility: Some(clean::Inherited),\n-            stability: tcx.lookup_stability(did).clean(cx),\n-            deprecation: tcx.lookup_deprecation(did).clean(cx),\n-            def_id: did,\n-        });\n-    }\n-\n     let for_ = tcx.type_of(did).clean(cx);\n \n     // Only inline impl if the implementing type is"}, {"sha": "271bc967bc9bc1021d1a0bf1692d5419ae75fb74", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -430,7 +430,6 @@ pub enum ItemEnum {\n     PrimitiveItem(PrimitiveType),\n     AssociatedConstItem(Type, Option<String>),\n     AssociatedTypeItem(Vec<TyParamBound>, Option<Type>),\n-    AutoImplItem(AutoImpl),\n     /// An item that has been stripped by a rustdoc pass\n     StrippedItem(Box<ItemEnum>),\n }\n@@ -481,7 +480,6 @@ impl Clean<Item> for doctree::Module {\n         items.extend(self.traits.iter().map(|x| x.clean(cx)));\n         items.extend(self.impls.iter().flat_map(|x| x.clean(cx)));\n         items.extend(self.macros.iter().map(|x| x.clean(cx)));\n-        items.extend(self.def_traits.iter().map(|x| x.clean(cx)));\n \n         // determine if we should display the inner contents or\n         // the outer `mod` item for the source code.\n@@ -2941,30 +2939,6 @@ fn build_deref_target_impls(cx: &DocContext,\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub struct AutoImpl {\n-    pub unsafety: hir::Unsafety,\n-    pub trait_: Type,\n-}\n-\n-impl Clean<Item> for doctree::AutoImpl {\n-    fn clean(&self, cx: &DocContext) -> Item {\n-        Item {\n-            name: None,\n-            attrs: self.attrs.clean(cx),\n-            source: self.whence.clean(cx),\n-            def_id: cx.tcx.hir.local_def_id(self.id),\n-            visibility: Some(Public),\n-            stability: None,\n-            deprecation: None,\n-            inner: AutoImplItem(AutoImpl {\n-                unsafety: self.unsafety,\n-                trait_: self.trait_.clean(cx),\n-            }),\n-        }\n-    }\n-}\n-\n impl Clean<Item> for doctree::ExternCrate {\n     fn clean(&self, cx: &DocContext) -> Item {\n         Item {"}, {"sha": "776ec7f409c4488910a2187a3be0161cb3e31660", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -44,7 +44,6 @@ pub struct Module {\n     pub stab: Option<attr::Stability>,\n     pub depr: Option<attr::Deprecation>,\n     pub impls: Vec<Impl>,\n-    pub def_traits: Vec<AutoImpl>,\n     pub foreigns: Vec<hir::ForeignMod>,\n     pub macros: Vec<Macro>,\n     pub is_crate: bool,\n@@ -73,7 +72,6 @@ impl Module {\n             constants  : Vec::new(),\n             traits     : Vec::new(),\n             impls      : Vec::new(),\n-            def_traits : Vec::new(),\n             foreigns   : Vec::new(),\n             macros     : Vec::new(),\n             is_crate   : false,\n@@ -227,14 +225,6 @@ pub struct Impl {\n     pub id: ast::NodeId,\n }\n \n-pub struct AutoImpl {\n-    pub unsafety: hir::Unsafety,\n-    pub trait_: hir::TraitRef,\n-    pub id: ast::NodeId,\n-    pub attrs: hir::HirVec<ast::Attribute>,\n-    pub whence: Span,\n-}\n-\n // For Macro we store the DefId instead of the NodeId, since we also create\n // these imported macro_rules (which only have a DUMMY_NODE_ID).\n pub struct Macro {"}, {"sha": "81087cd412e2c281db1b10af598964147327257b", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -82,7 +82,6 @@ impl<'a> From<&'a clean::Item> for ItemType {\n             clean::PrimitiveItem(..)       => ItemType::Primitive,\n             clean::AssociatedConstItem(..) => ItemType::AssociatedConst,\n             clean::AssociatedTypeItem(..)  => ItemType::AssociatedType,\n-            clean::AutoImplItem(..)        => ItemType::Impl,\n             clean::ForeignTypeItem         => ItemType::ForeignType,\n             clean::StrippedItem(..)        => unreachable!(),\n         }"}, {"sha": "6e4980c9e919b5596f4917b27b0be4bd43fa9523", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -1964,12 +1964,8 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n                item: &clean::Item, items: &[clean::Item]) -> fmt::Result {\n     document(w, cx, item)?;\n \n-    let mut indices = (0..items.len()).filter(|i| {\n-        if let clean::AutoImplItem(..) = items[*i].inner {\n-            return false;\n-        }\n-        !items[*i].is_stripped()\n-    }).collect::<Vec<usize>>();\n+    let mut indices = (0..items.len()).filter(|i| !items[*i].is_stripped())\n+                                      .collect::<Vec<usize>>();\n \n     // the order of item types in the listing\n     fn reorder(ty: ItemType) -> u8 {\n@@ -3973,13 +3969,7 @@ fn sidebar_module(fmt: &mut fmt::Formatter, _it: &clean::Item,\n                    ItemType::Function, ItemType::Typedef, ItemType::Union, ItemType::Impl,\n                    ItemType::TyMethod, ItemType::Method, ItemType::StructField, ItemType::Variant,\n                    ItemType::AssociatedType, ItemType::AssociatedConst, ItemType::ForeignType] {\n-        if items.iter().any(|it| {\n-            if let clean::AutoImplItem(..) = it.inner {\n-                false\n-            } else {\n-                !it.is_stripped() && it.type_() == myty\n-            }\n-        }) {\n+        if items.iter().any(|it| !it.is_stripped() && it.type_() == myty) {\n             let (short, name) = match myty {\n                 ItemType::ExternCrate |\n                 ItemType::Import          => (\"reexports\", \"Reexports\"),"}, {"sha": "32f0bcada1d20924414211dcdd462dc7c7bdbe0c", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -116,7 +116,7 @@ impl<'a> fold::DocFolder for Stripper<'a> {\n             // handled in the `strip-priv-imports` pass\n             clean::ExternCrateItem(..) | clean::ImportItem(..) => {}\n \n-            clean::AutoImplItem(..) | clean::ImplItem(..) => {}\n+            clean::ImplItem(..) => {}\n \n             // tymethods/macros have no control over privacy\n             clean::MacroItem(..) | clean::TyMethodItem(..) => {}"}, {"sha": "95531b468f41e24735af46cd1029319f706dcd01", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -548,19 +548,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     om.impls.push(i);\n                 }\n             },\n-            hir::ItemAutoImpl(unsafety, ref trait_ref) => {\n-                // See comment above about ItemImpl.\n-                if !self.inlining {\n-                    let i = AutoImpl {\n-                        unsafety,\n-                        trait_: trait_ref.clone(),\n-                        id: item.id,\n-                        attrs: item.attrs.clone(),\n-                        whence: item.span,\n-                    };\n-                    om.def_traits.push(i);\n-                }\n-            }\n         }\n     }\n "}, {"sha": "53c2211745c328dda26a9d50025525b6c2ee6e19", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -101,7 +101,7 @@ pub use panicking::{take_hook, set_hook, PanicInfo, Location};\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n #[rustc_on_unimplemented = \"the type {Self} may not be safely transferred \\\n                             across an unwind boundary\"]\n-pub trait UnwindSafe {}\n+pub auto trait UnwindSafe {}\n \n /// A marker trait representing types where a shared reference is considered\n /// unwind safe.\n@@ -115,7 +115,7 @@ pub trait UnwindSafe {}\n #[rustc_on_unimplemented = \"the type {Self} may contain interior mutability \\\n                             and a reference may not be safely transferrable \\\n                             across a catch_unwind boundary\"]\n-pub trait RefUnwindSafe {}\n+pub auto trait RefUnwindSafe {}\n \n /// A simple wrapper around a type to assert that it is unwind safe.\n ///\n@@ -187,10 +187,7 @@ pub struct AssertUnwindSafe<T>(\n // * Unique, an owning pointer, lifts an implementation\n // * Types like Mutex/RwLock which are explicilty poisoned are unwind safe\n // * Our custom AssertUnwindSafe wrapper is indeed unwind safe\n-#[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n-#[allow(unknown_lints)]\n-#[allow(auto_impl)]\n-impl UnwindSafe for .. {}\n+\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n impl<'a, T: ?Sized> !UnwindSafe for &'a mut T {}\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n@@ -219,14 +216,10 @@ impl<T: RefUnwindSafe + ?Sized> UnwindSafe for Rc<T> {}\n impl<T: RefUnwindSafe + ?Sized> UnwindSafe for Arc<T> {}\n \n // Pretty simple implementations for the `RefUnwindSafe` marker trait,\n-// basically just saying that this is a marker trait and `UnsafeCell` is the\n+// basically just saying that `UnsafeCell` is the\n // only thing which doesn't implement it (which then transitively applies to\n // everything else).\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n-#[allow(unknown_lints)]\n-#[allow(auto_impl)]\n-impl RefUnwindSafe for .. {}\n-#[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n impl<T: ?Sized> !RefUnwindSafe for UnsafeCell<T> {}\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n impl<T> RefUnwindSafe for AssertUnwindSafe<T> {}"}, {"sha": "9c0622e7bef9740a16b7112debd5d5ef6be14753", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -2022,10 +2022,6 @@ pub enum ItemKind {\n     ///\n     /// E.g. `trait Foo = Bar + Quux;`\n     TraitAlias(Generics, TyParamBounds),\n-    /// Auto trait implementation.\n-    ///\n-    /// E.g. `impl Trait for .. {}` or `impl<T> Trait<T> for .. {}`\n-    AutoImpl(Unsafety, TraitRef),\n     /// An implementation.\n     ///\n     /// E.g. `impl<A> Foo<A> { .. }` or `impl<A> Trait for Foo<A> { .. }`\n@@ -2064,8 +2060,7 @@ impl ItemKind {\n             ItemKind::TraitAlias(..) => \"trait alias\",\n             ItemKind::Mac(..) |\n             ItemKind::MacroDef(..) |\n-            ItemKind::Impl(..) |\n-            ItemKind::AutoImpl(..) => \"item\"\n+            ItemKind::Impl(..) => \"item\"\n         }\n     }\n }"}, {"sha": "c3bf5dbff5c586351d780a22f70589a8de9318c1", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -1532,13 +1532,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                    \"trait aliases are not yet fully implemented\");\n             }\n \n-            ast::ItemKind::AutoImpl(..) => {\n-                gate_feature_post!(&self, optin_builtin_traits,\n-                                   i.span,\n-                                   \"auto trait implementations are experimental \\\n-                                    and possibly buggy\");\n-            }\n-\n             ast::ItemKind::Impl(_, polarity, defaultness, _, _, _, ref impl_items) => {\n                 if polarity == ast::ImplPolarity::Negative {\n                     gate_feature_post!(&self, optin_builtin_traits,"}, {"sha": "c304e3a9f50525c86e8bc4f40df8b5671e78503d", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -911,9 +911,6 @@ pub fn noop_fold_item_kind<T: Folder>(i: ItemKind, folder: &mut T) -> ItemKind {\n             let generics = folder.fold_generics(generics);\n             ItemKind::Union(folder.fold_variant_data(struct_def), generics)\n         }\n-        ItemKind::AutoImpl(unsafety, ref trait_ref) => {\n-            ItemKind::AutoImpl(unsafety, folder.fold_trait_ref((*trait_ref).clone()))\n-        }\n         ItemKind::Impl(unsafety,\n                        polarity,\n                        defaultness,"}, {"sha": "ad9c802ac85043c909c84e5347864b7070f0ec28", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 38, "deletions": 49, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -4084,14 +4084,14 @@ impl<'a> Parser<'a> {\n         self.token.is_keyword(keywords::Extern) && self.look_ahead(1, |t| t != &token::ModSep)\n     }\n \n-    fn eat_auto_trait(&mut self) -> bool {\n-        if self.token.is_keyword(keywords::Auto)\n-            && self.look_ahead(1, |t| t.is_keyword(keywords::Trait))\n-        {\n-            self.eat_keyword(keywords::Auto) && self.eat_keyword(keywords::Trait)\n-        } else {\n-            false\n-        }\n+    fn is_auto_trait_item(&mut self) -> bool {\n+        // auto trait\n+        (self.token.is_keyword(keywords::Auto)\n+            && self.look_ahead(1, |t| t.is_keyword(keywords::Trait)))\n+        || // unsafe auto trait\n+        (self.token.is_keyword(keywords::Unsafe) &&\n+         self.look_ahead(1, |t| t.is_keyword(keywords::Auto)) &&\n+         self.look_ahead(2, |t| t.is_keyword(keywords::Trait)))\n     }\n \n     fn is_defaultness(&self) -> bool {\n@@ -4194,7 +4194,8 @@ impl<'a> Parser<'a> {\n                 node: StmtKind::Item(macro_def),\n                 span: lo.to(self.prev_span),\n             }\n-        // Starts like a simple path, but not a union item or item with `crate` visibility.\n+        // Starts like a simple path, being careful to avoid contextual keywords\n+        // such as a union items, item with `crate` visibility or auto trait items.\n         // Our goal here is to parse an arbitrary path `a::b::c` but not something that starts\n         // like a path (1 token), but it fact not a path.\n         // `union::b::c` - path, `union U { ... }` - not a path.\n@@ -4204,7 +4205,8 @@ impl<'a> Parser<'a> {\n                   !self.token.is_qpath_start() &&\n                   !self.is_union_item() &&\n                   !self.is_crate_vis() &&\n-                  !self.is_extern_non_path() {\n+                  !self.is_extern_non_path() &&\n+                  !self.is_auto_trait_item() {\n             let pth = self.parse_path(PathStyle::Expr)?;\n \n             if !self.eat(&token::Not) {\n@@ -5374,11 +5376,9 @@ impl<'a> Parser<'a> {\n     /// Parses items implementations variants\n     ///    impl<T> Foo { ... }\n     ///    impl<T> ToString for &'static T { ... }\n-    ///    impl Send for .. {}\n     fn parse_item_impl(&mut self,\n                        unsafety: ast::Unsafety,\n                        defaultness: Defaultness) -> PResult<'a, ItemInfo> {\n-        let impl_span = self.span;\n \n         // First, parse type parameters if necessary.\n         let mut generics = self.parse_generics()?;\n@@ -5421,48 +5421,35 @@ impl<'a> Parser<'a> {\n             None\n         };\n \n-        if opt_trait.is_some() && self.eat(&token::DotDot) {\n-            if generics.is_parameterized() {\n-                self.span_err(impl_span, \"auto trait implementations are not \\\n-                                          allowed to have generics\");\n-            }\n-\n-            if let ast::Defaultness::Default = defaultness {\n-                self.span_err(impl_span, \"`default impl` is not allowed for \\\n-                                         auto trait implementations\");\n-            }\n-\n-            self.expect(&token::OpenDelim(token::Brace))?;\n-            self.expect(&token::CloseDelim(token::Brace))?;\n-            Ok((keywords::Invalid.ident(),\n-             ItemKind::AutoImpl(unsafety, opt_trait.unwrap()), None))\n-        } else {\n-            if opt_trait.is_some() {\n-                ty = self.parse_ty()?;\n+        if opt_trait.is_some() {\n+            ty = if self.eat(&token::DotDot) {\n+                P(Ty { node: TyKind::Err, span: self.prev_span, id: ast::DUMMY_NODE_ID })\n+            } else {\n+                self.parse_ty()?\n             }\n-            generics.where_clause = self.parse_where_clause()?;\n+        }\n+        generics.where_clause = self.parse_where_clause()?;\n \n-            self.expect(&token::OpenDelim(token::Brace))?;\n-            let attrs = self.parse_inner_attributes()?;\n+        self.expect(&token::OpenDelim(token::Brace))?;\n+        let attrs = self.parse_inner_attributes()?;\n \n-            let mut impl_items = vec![];\n-            while !self.eat(&token::CloseDelim(token::Brace)) {\n-                let mut at_end = false;\n-                match self.parse_impl_item(&mut at_end) {\n-                    Ok(item) => impl_items.push(item),\n-                    Err(mut e) => {\n-                        e.emit();\n-                        if !at_end {\n-                            self.recover_stmt_(SemiColonMode::Break, BlockMode::Break);\n-                        }\n+        let mut impl_items = vec![];\n+        while !self.eat(&token::CloseDelim(token::Brace)) {\n+            let mut at_end = false;\n+            match self.parse_impl_item(&mut at_end) {\n+                Ok(item) => impl_items.push(item),\n+                Err(mut e) => {\n+                    e.emit();\n+                    if !at_end {\n+                        self.recover_stmt_(SemiColonMode::Break, BlockMode::Break);\n                     }\n                 }\n             }\n-\n-            Ok((keywords::Invalid.ident(),\n-             ItemKind::Impl(unsafety, polarity, defaultness, generics, opt_trait, ty, impl_items),\n-             Some(attrs)))\n         }\n+\n+        Ok((keywords::Invalid.ident(),\n+            ItemKind::Impl(unsafety, polarity, defaultness, generics, opt_trait, ty, impl_items),\n+            Some(attrs)))\n     }\n \n     fn parse_late_bound_lifetime_defs(&mut self) -> PResult<'a, Vec<GenericParam>> {\n@@ -6387,7 +6374,8 @@ impl<'a> Parser<'a> {\n             let is_auto = if self.eat_keyword(keywords::Trait) {\n                 IsAuto::No\n             } else {\n-                self.eat_auto_trait();\n+                self.expect_keyword(keywords::Auto)?;\n+                self.expect_keyword(keywords::Trait)?;\n                 IsAuto::Yes\n             };\n             let (ident, item_, extra_attrs) =\n@@ -6501,7 +6489,8 @@ impl<'a> Parser<'a> {\n             let is_auto = if self.eat_keyword(keywords::Trait) {\n                 IsAuto::No\n             } else {\n-                self.eat_auto_trait();\n+                self.expect_keyword(keywords::Auto)?;\n+                self.expect_keyword(keywords::Trait)?;\n                 IsAuto::Yes\n             };\n             // TRAIT ITEM"}, {"sha": "5374bf180f49a1172228dc1ac3d52b883638b438", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -1294,18 +1294,6 @@ impl<'a> State<'a> {\n                 self.head(&visibility_qualified(&item.vis, \"union\"))?;\n                 self.print_struct(struct_def, generics, item.ident, item.span, true)?;\n             }\n-            ast::ItemKind::AutoImpl(unsafety, ref trait_ref) => {\n-                self.head(\"\")?;\n-                self.print_visibility(&item.vis)?;\n-                self.print_unsafety(unsafety)?;\n-                self.word_nbsp(\"impl\")?;\n-                self.print_trait_ref(trait_ref)?;\n-                self.s.space()?;\n-                self.word_space(\"for\")?;\n-                self.word_space(\"..\")?;\n-                self.bopen()?;\n-                self.bclose(item.span)?;\n-            }\n             ast::ItemKind::Impl(unsafety,\n                           polarity,\n                           defaultness,"}, {"sha": "b5fc9236ad39a895b97f9d4215546e943f1eca3f", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -259,9 +259,6 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             visitor.visit_generics(type_parameters);\n             visitor.visit_enum_def(enum_definition, type_parameters, item.id, item.span)\n         }\n-        ItemKind::AutoImpl(_, ref trait_ref) => {\n-            visitor.visit_trait_ref(trait_ref)\n-        }\n         ItemKind::Impl(_, _, _,\n                  ref type_parameters,\n                  ref opt_trait_reference,"}, {"sha": "7d5581bb774b03132b384146479f6004ac46b417", "filename": "src/rtstartup/rsbegin.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Frtstartup%2Frsbegin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Frtstartup%2Frsbegin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frtstartup%2Frsbegin.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -30,17 +30,11 @@\n #[lang = \"sized\"]\n trait Sized {}\n #[lang = \"sync\"]\n-trait Sync {}\n-#[allow(unknown_lints)]\n-#[allow(auto_impl)]\n-impl Sync for .. {}\n+auto trait Sync {}\n #[lang = \"copy\"]\n trait Copy {}\n #[lang = \"freeze\"]\n-trait Freeze {}\n-#[allow(unknown_lints)]\n-#[allow(auto_impl)]\n-impl Freeze for .. {}\n+auto trait Freeze {}\n \n #[lang = \"drop_in_place\"]\n #[inline]"}, {"sha": "f487f1d410e03874ea65cadac68c1824f28f2bbb", "filename": "src/rtstartup/rsend.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Frtstartup%2Frsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Frtstartup%2Frsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frtstartup%2Frsend.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -22,10 +22,7 @@ impl<T> Sync for T {}\n #[lang = \"copy\"]\n trait Copy {}\n #[lang = \"freeze\"]\n-trait Freeze {}\n-#[allow(unknown_lints)]\n-#[allow(auto_impl)]\n-impl Freeze for .. {}\n+auto trait Freeze {}\n \n #[lang = \"drop_in_place\"]\n #[inline]"}, {"sha": "92b222e1322b8b5e13442a973daa68bd0a38ba80", "filename": "src/test/compile-fail/auto-trait-validation.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fcompile-fail%2Fauto-trait-validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fcompile-fail%2Fauto-trait-validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauto-trait-validation.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -11,12 +11,9 @@\n #![feature(optin_builtin_traits)]\n \n auto trait Generic<T> {}\n-//~^ ERROR auto traits cannot have generics\n-//~^^ traits with auto impls (`e.g. impl Trait for ..`) can not have type parameters\n+//~^ auto traits cannot have generic parameters [E0567]\n auto trait Bound : Copy {}\n-//~^ ERROR auto traits cannot have super traits\n-//~^^ traits with auto impls (`e.g. impl Trait for ..`) cannot have predicates\n+//~^ auto traits cannot have super traits [E0568]\n auto trait MyTrait { fn foo() {} }\n-//~^ ERROR auto traits cannot contain items\n-//~^^ traits with default impls (`e.g. impl Trait for ..`) must have no methods or associated items\n+//~^ auto traits cannot have methods or associated items [E0380]\n fn main() {}"}, {"sha": "f6f7a250174ba5b2c2b7ded7bd6cea7f506c5eef", "filename": "src/test/compile-fail/auxiliary/tdticc_coherence_lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Ftdticc_coherence_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Ftdticc_coherence_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Ftdticc_coherence_lib.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -11,8 +11,6 @@\n #![feature(optin_builtin_traits, core)]\n #![crate_type = \"rlib\"]\n \n-pub trait DefaultedTrait { }\n-#[allow(auto_impl)]\n-impl DefaultedTrait for .. { }\n+pub auto trait DefaultedTrait { }\n \n pub struct Something<T> { t: T }"}, {"sha": "751d0a14c57ee12ce6d511bbd88ba903311b1a2d", "filename": "src/test/compile-fail/coherence-default-trait-impl.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fcompile-fail%2Fcoherence-default-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fcompile-fail%2Fcoherence-default-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-default-trait-impl.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -10,25 +10,16 @@\n \n #![feature(optin_builtin_traits)]\n \n-trait MyTrait { fn foo() {} }\n+auto trait MySafeTrait {}\n \n-#[allow(auto_impl)]\n-impl MyTrait for .. {}\n-//~^ ERROR redundant auto implementations of trait `MyTrait`\n+struct Foo;\n \n-#[allow(auto_impl)]\n-impl MyTrait for .. {}\n-\n-trait MySafeTrait {}\n-\n-#[allow(auto_impl)]\n-unsafe impl MySafeTrait for .. {}\n+unsafe impl MySafeTrait for Foo {}\n //~^ ERROR implementing the trait `MySafeTrait` is not unsafe\n \n-unsafe trait MyUnsafeTrait {}\n+unsafe auto trait MyUnsafeTrait {}\n \n-#[allow(auto_impl)]\n-impl MyUnsafeTrait for .. {}\n+impl MyUnsafeTrait for Foo {}\n //~^ ERROR the trait `MyUnsafeTrait` requires an `unsafe impl` declaration\n \n fn main() {}"}, {"sha": "2aa87f8424b9584498dcbd54fe594fe9345d9bc3", "filename": "src/test/compile-fail/issue-23080-2.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fcompile-fail%2Fissue-23080-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fcompile-fail%2Fissue-23080-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23080-2.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -12,17 +12,15 @@\n \n #![feature(optin_builtin_traits)]\n \n-unsafe trait Trait {\n+unsafe auto trait Trait {\n //~^ ERROR E0380\n     type Output;\n }\n \n-#[allow(auto_impl)]\n-unsafe impl Trait for .. {}\n-\n fn call_method<T: Trait>(x: T) {}\n \n fn main() {\n     // ICE\n     call_method(());\n+    //~^ ERROR\n }"}, {"sha": "153b6fd07e6d1832cfcebee72ddb08550cf81e41", "filename": "src/test/compile-fail/issue-23080.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fcompile-fail%2Fissue-23080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fcompile-fail%2Fissue-23080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23080.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -12,16 +12,13 @@\n \n #![feature(optin_builtin_traits)]\n \n-unsafe trait Trait {\n+unsafe auto trait Trait {\n //~^ ERROR E0380\n     fn method(&self) {\n         println!(\"Hello\");\n     }\n }\n \n-#[allow(auto_impl)]\n-unsafe impl Trait for .. {}\n-\n fn call_method<T: Trait>(x: T) {\n     x.method();\n }"}, {"sha": "52bc0126612bfda94361edbbd70d54ae6d0e0fac", "filename": "src/test/compile-fail/phantom-oibit.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fcompile-fail%2Fphantom-oibit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fcompile-fail%2Fphantom-oibit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fphantom-oibit.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -16,10 +16,7 @@\n \n use std::marker::{PhantomData};\n \n-unsafe trait Zen {}\n-\n-#[allow(auto_impl)]\n-unsafe impl Zen for .. {}\n+unsafe auto trait Zen {}\n \n unsafe impl<'a, T: 'a> Zen for &'a T where T: Sync {}\n "}, {"sha": "f245b7cef29b9e56f5003408162cd769195d4b5e", "filename": "src/test/compile-fail/privacy-sanity.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fcompile-fail%2Fprivacy-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fcompile-fail%2Fprivacy-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy-sanity.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -10,7 +10,6 @@\n \n #![feature(optin_builtin_traits)]\n \n-trait MarkerTr {}\n pub trait Tr {\n     fn f();\n     const C: u8;\n@@ -21,8 +20,6 @@ pub struct S {\n }\n struct Ts(pub u8);\n \n-#[allow(auto_impl)]\n-pub impl MarkerTr for .. {} //~ ERROR unnecessary visibility qualifier\n pub impl Tr for S {  //~ ERROR unnecessary visibility qualifier\n     pub fn f() {} //~ ERROR unnecessary visibility qualifier\n     pub const C: u8 = 0; //~ ERROR unnecessary visibility qualifier\n@@ -39,7 +36,6 @@ pub extern \"C\" { //~ ERROR unnecessary visibility qualifier\n }\n \n const MAIN: u8 = {\n-    trait MarkerTr {}\n     pub trait Tr {\n         fn f();\n         const C: u8;\n@@ -50,8 +46,6 @@ const MAIN: u8 = {\n     }\n     struct Ts(pub u8);\n \n-    #[allow(auto_impl)]\n-    pub impl MarkerTr for .. {} //~ ERROR unnecessary visibility qualifier\n     pub impl Tr for S {  //~ ERROR unnecessary visibility qualifier\n         pub fn f() {} //~ ERROR unnecessary visibility qualifier\n         pub const C: u8 = 0; //~ ERROR unnecessary visibility qualifier\n@@ -71,7 +65,6 @@ const MAIN: u8 = {\n };\n \n fn main() {\n-    trait MarkerTr {}\n     pub trait Tr {\n         fn f();\n         const C: u8;\n@@ -82,8 +75,6 @@ fn main() {\n     }\n     struct Ts(pub u8);\n \n-    #[allow(auto_impl)]\n-    pub impl MarkerTr for .. {} //~ ERROR unnecessary visibility qualifier\n     pub impl Tr for S {  //~ ERROR unnecessary visibility qualifier\n         pub fn f() {} //~ ERROR unnecessary visibility qualifier\n         pub const C: u8 = 0; //~ ERROR unnecessary visibility qualifier"}, {"sha": "cad43ffeacec9afd002cf17275513a612faa147b", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-no-default-trait-implementations.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e6072a7b3835f1875e81c9fd27799f9b20a0770c/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default-trait-implementations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6072a7b3835f1875e81c9fd27799f9b20a0770c/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default-trait-implementations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default-trait-implementations.rs?ref=e6072a7b3835f1875e81c9fd27799f9b20a0770c", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(specialization)]\n-#![feature(optin_builtin_traits)]\n-\n-trait Foo {}\n-\n-#[allow(auto_impl)]\n-default impl Foo for .. {}\n-//~^ ERROR `default impl` is not allowed for auto trait implementations\n-\n-fn main() {}"}, {"sha": "b28a63c8293aed1103a399cc9a539c47a73e1f7a", "filename": "src/test/compile-fail/specialization/specialization-polarity.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fspecialization-polarity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fspecialization-polarity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fspecialization-polarity.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -13,18 +13,12 @@\n #![feature(optin_builtin_traits)]\n #![feature(specialization)]\n \n-trait Foo {}\n-\n-#[allow(auto_impl)]\n-impl Foo for .. {}\n+auto trait Foo {}\n \n impl<T> Foo for T {}\n impl !Foo for u8 {} //~ ERROR E0119\n \n-trait Bar {}\n-\n-#[allow(auto_impl)]\n-impl Bar for .. {}\n+auto trait Bar {}\n \n impl<T> !Bar for T {}\n impl Bar for u8 {} //~ ERROR E0119"}, {"sha": "45303cbf70025c2e283dbd422631888da47479ff", "filename": "src/test/compile-fail/syntaxt-default-trait-impls.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e6072a7b3835f1875e81c9fd27799f9b20a0770c/src%2Ftest%2Fcompile-fail%2Fsyntaxt-default-trait-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6072a7b3835f1875e81c9fd27799f9b20a0770c/src%2Ftest%2Fcompile-fail%2Fsyntaxt-default-trait-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntaxt-default-trait-impls.rs?ref=e6072a7b3835f1875e81c9fd27799f9b20a0770c", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(optin_builtin_traits)]\n-\n-trait MyAutoImpl {}\n-\n-#[allow(auto_impl)]\n-impl<T> MyAutoImpl for .. {}\n-//~^ ERROR auto trait implementations are not allowed to have generics\n-\n-fn main() {}"}, {"sha": "59d5dc6c58b47821071dfbdc75a70d981f9b451f", "filename": "src/test/compile-fail/traits-inductive-overflow-supertrait-oibit.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-supertrait-oibit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-supertrait-oibit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-supertrait-oibit.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -14,16 +14,14 @@\n \n #![feature(optin_builtin_traits)]\n \n-trait Magic: Copy {} //~ ERROR E0568\n-#[allow(auto_impl)]\n-impl Magic for .. {}\n+auto trait Magic: Copy {} //~ ERROR E0568\n \n fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n \n #[derive(Debug)]\n struct NoClone;\n \n fn main() {\n-    let (a, b) = copy(NoClone);\n+    let (a, b) = copy(NoClone); //~ ERROR\n     println!(\"{:?} {:?}\", a, b);\n }"}, {"sha": "fa63088d00088028a6e5ae86f7f70f13e892dc42", "filename": "src/test/compile-fail/typeck-auto-trait-no-supertraits-2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-supertraits-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-supertraits-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-supertraits-2.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -10,9 +10,7 @@\n \n #![feature(optin_builtin_traits)]\n \n-trait Magic : Sized where Option<Self> : Magic {} //~ ERROR E0568\n-#[allow(auto_impl)]\n-impl Magic for .. {}\n+auto trait Magic : Sized where Option<Self> : Magic {} //~ ERROR E0568\n impl<T:Magic> Magic for T {}\n \n fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }"}, {"sha": "c8cf96f52fcf1775f4c3d419ee4d14cc9ee233ee", "filename": "src/test/compile-fail/typeck-auto-trait-no-supertraits.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-supertraits.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -34,9 +34,7 @@\n \n #![feature(optin_builtin_traits)]\n \n-trait Magic: Copy {} //~ ERROR E0568\n-#[allow(auto_impl)]\n-impl Magic for .. {}\n+auto trait Magic: Copy {} //~ ERROR E0568\n impl<T:Magic> Magic for T {}\n \n fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }"}, {"sha": "3c409d1b371eb3ee90eb916adcb660fb1854698b", "filename": "src/test/compile-fail/typeck-auto-trait-no-typeparams.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e6072a7b3835f1875e81c9fd27799f9b20a0770c/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-typeparams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6072a7b3835f1875e81c9fd27799f9b20a0770c/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-typeparams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-typeparams.rs?ref=e6072a7b3835f1875e81c9fd27799f9b20a0770c", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(optin_builtin_traits)]\n-\n-trait Magic<T> {} //~ ERROR E0567\n-#[allow(auto_impl)]\n-impl Magic<isize> for .. {}"}, {"sha": "6e7c9afb6749a8e10fe801a13f38842e96cbeee0", "filename": "src/test/compile-fail/typeck-default-trait-impl-constituent-types-2.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types-2.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -10,10 +10,7 @@\n \n #![feature(optin_builtin_traits)]\n \n-trait MyTrait {}\n-\n-#[allow(auto_impl)]\n-impl MyTrait for .. {}\n+auto trait MyTrait {}\n \n struct MyS;\n "}, {"sha": "4660ecf4fb4b424a11d9dab70381898a59073699", "filename": "src/test/compile-fail/typeck-default-trait-impl-constituent-types.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -10,10 +10,8 @@\n \n #![feature(optin_builtin_traits)]\n \n-trait MyTrait {}\n+auto trait MyTrait {}\n \n-#[allow(auto_impl)]\n-impl MyTrait for .. {}\n impl<T> !MyTrait for *mut T {}\n \n struct MyS;"}, {"sha": "b28cdd8aa2450c74c2b3e14ac1e089a552142851", "filename": "src/test/compile-fail/typeck-default-trait-impl-negation.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -10,15 +10,9 @@\n \n #![feature(optin_builtin_traits)]\n \n-trait MyTrait {}\n+auto trait MyTrait {}\n \n-#[allow(auto_impl)]\n-impl MyTrait for .. {}\n-\n-unsafe trait MyUnsafeTrait {}\n-\n-#[allow(auto_impl)]\n-unsafe impl MyUnsafeTrait for .. {}\n+unsafe auto trait MyUnsafeTrait {}\n \n struct ThisImplsTrait;\n "}, {"sha": "d63d70bad2204e9db7dbcc71b3116c360b697b26", "filename": "src/test/compile-fail/typeck-default-trait-impl-precedence.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-precedence.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -10,14 +10,12 @@\n \n // Test that declaring that `&T` is `Defaulted` if `T:Signed` implies\n // that other `&T` is NOT `Defaulted` if `T:Signed` does not hold. In\n-// other words, the `..` impl only applies if there are no existing\n+// other words, the auto impl only applies if there are no existing\n // impls whose types unify.\n \n #![feature(optin_builtin_traits)]\n \n-trait Defaulted { }\n-#[allow(auto_impl)]\n-impl Defaulted for .. { }\n+auto trait Defaulted { }\n impl<'a,T:Signed> Defaulted for &'a T { }\n impl<'a,T:Signed> Defaulted for &'a mut T { }\n fn is_defaulted<T:Defaulted>() { }"}, {"sha": "94b91c711cce0d9c7bebb69ef8b7a7c5383d3276", "filename": "src/test/run-make/simd-ffi/simd.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -80,6 +80,4 @@ pub mod marker {\n }\n \n #[lang = \"freeze\"]\n-trait Freeze {}\n-#[allow(auto_impl)]\n-impl Freeze for .. {}\n+auto trait Freeze {}"}, {"sha": "bbd1c5d900fafbc99088c7294106583a57f979aa", "filename": "src/test/run-make/target-specs/foo.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Frun-make%2Ftarget-specs%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Frun-make%2Ftarget-specs%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftarget-specs%2Ffoo.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -18,9 +18,7 @@ trait Copy { }\n trait Sized { }\n \n #[lang = \"freeze\"]\n-trait Freeze {}\n-#[allow(auto_impl)]\n-impl Freeze for .. {}\n+auto trait Freeze {}\n \n #[lang=\"start\"]\n fn start(_main: *const u8, _argc: isize, _argv: *const *const u8) -> isize { 0 }"}, {"sha": "2a18b402bc64d4c70575ce67caf6707ed0af0178", "filename": "src/test/run-pass/auto-traits.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Frun-pass%2Fauto-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Frun-pass%2Fauto-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-traits.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -11,10 +11,6 @@\n #![feature(optin_builtin_traits)]\n \n auto trait Auto {}\n-// Redundant but accepted until we remove it.\n-#[allow(auto_impl)]\n-impl Auto for .. {}\n-\n unsafe auto trait AutoUnsafe {}\n \n impl !Auto for bool {}\n@@ -29,6 +25,10 @@ fn take_auto<T: Auto>(_: T) {}\n fn take_auto_unsafe<T: AutoUnsafe>(_: T) {}\n \n fn main() {\n+    // Parse inside functions.\n+    auto trait AutoInner {}\n+    unsafe auto trait AutoUnsafeInner {}\n+\n     take_auto(0);\n     take_auto(AutoBool(true));\n     take_auto_unsafe(0);"}, {"sha": "465986583b15560d3edb575faddfb31ebaf19592", "filename": "src/test/run-pass/issue-29516.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Frun-pass%2Fissue-29516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Frun-pass%2Fissue-29516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-29516.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -10,9 +10,8 @@\n \n #![feature(optin_builtin_traits)]\n \n-trait NotSame {}\n-#[allow(auto_impl)]\n-impl NotSame for .. {}\n+auto trait NotSame {}\n+\n impl<A> !NotSame for (A, A) {}\n \n trait OneOfEach {}"}, {"sha": "34a1331353dca96d1259937dd9d06caaf520ecc7", "filename": "src/test/rustdoc/auxiliary/rustdoc-default-impl.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Frustdoc%2Fauxiliary%2Frustdoc-default-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Frustdoc%2Fauxiliary%2Frustdoc-default-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Frustdoc-default-impl.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -14,10 +14,7 @@\n pub mod bar {\n     use std::marker;\n \n-    pub trait Bar {}\n-\n-    #[allow(auto_impl)]\n-    impl Bar for .. {}\n+    pub auto trait Bar {}\n \n     pub trait Foo {\n         fn foo(&self) {}"}, {"sha": "977d98ca87b10b4cb9fcde1692edd9f3c7e0af79", "filename": "src/test/rustdoc/auxiliary/rustdoc-impl-parts-crosscrate.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Frustdoc%2Fauxiliary%2Frustdoc-impl-parts-crosscrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Frustdoc%2Fauxiliary%2Frustdoc-impl-parts-crosscrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Frustdoc-impl-parts-crosscrate.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -10,7 +10,4 @@\n \n #![feature(optin_builtin_traits)]\n \n-pub trait AnOibit {}\n-\n-#[allow(auto_impl)]\n-impl AnOibit for .. {}\n+pub auto trait AnOibit {}"}, {"sha": "6e472da379c592546b392de66a2917f113cbb4fd", "filename": "src/test/rustdoc/impl-parts.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Frustdoc%2Fimpl-parts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Frustdoc%2Fimpl-parts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpl-parts.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -10,10 +10,7 @@\n \n #![feature(optin_builtin_traits)]\n \n-pub trait AnOibit {}\n-\n-#[allow(auto_impl)]\n-impl AnOibit for .. {}\n+pub auto trait AnOibit {}\n \n pub struct Foo<T> { field: T }\n "}, {"sha": "ab3313af16d5d6b325a70539cfbeb82899d3aad3", "filename": "src/test/ui/feature-gate-optin-builtin-traits.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fui%2Ffeature-gate-optin-builtin-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fui%2Ffeature-gate-optin-builtin-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-optin-builtin-traits.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -20,10 +20,6 @@ trait DummyTrait {\n auto trait AutoDummyTrait {}\n //~^ ERROR auto traits are experimental and possibly buggy\n \n-#[allow(auto_impl)]\n-impl DummyTrait for .. {}\n-//~^ ERROR auto trait implementations are experimental and possibly buggy\n-\n impl !DummyTrait for DummyStruct {}\n //~^ ERROR negative trait bounds are not yet fully implemented; use marker types for now\n "}, {"sha": "d66da1224f8b950d0fd8dcc460ff8ecd8d2b18b0", "filename": "src/test/ui/feature-gate-optin-builtin-traits.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fui%2Ffeature-gate-optin-builtin-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fui%2Ffeature-gate-optin-builtin-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-optin-builtin-traits.stderr?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -6,21 +6,13 @@ error: auto traits are experimental and possibly buggy (see issue #13231)\n    |\n    = help: add #![feature(optin_builtin_traits)] to the crate attributes to enable\n \n-error: auto trait implementations are experimental and possibly buggy (see issue #13231)\n-  --> $DIR/feature-gate-optin-builtin-traits.rs:24:1\n-   |\n-24 | impl DummyTrait for .. {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(optin_builtin_traits)] to the crate attributes to enable\n-\n error: negative trait bounds are not yet fully implemented; use marker types for now (see issue #13231)\n-  --> $DIR/feature-gate-optin-builtin-traits.rs:27:1\n+  --> $DIR/feature-gate-optin-builtin-traits.rs:23:1\n    |\n-27 | impl !DummyTrait for DummyStruct {}\n+23 | impl !DummyTrait for DummyStruct {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(optin_builtin_traits)] to the crate attributes to enable\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n "}, {"sha": "914621a117d0007636c218cfed48cb7054316ec5", "filename": "src/test/ui/obsolete-syntax-impl-for-dotdot.rs", "status": "renamed", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fui%2Fobsolete-syntax-impl-for-dotdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fui%2Fobsolete-syntax-impl-for-dotdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobsolete-syntax-impl-for-dotdot.rs?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -8,9 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(optin_builtin_traits)]\n+trait Trait1 {}\n+trait Trait2 {}\n \n-trait Foo {}\n-impl Foo for .. {}\n-//~^ ERROR The form `impl Foo for .. {}` will be removed, please use `auto trait Foo {}`\n-//~^^ WARN this was previously accepted by the compiler\n+#[cfg(not_enabled)]\n+impl Trait1 for .. {}\n+\n+impl Trait2 for .. {} //~ ERROR `impl Trait for .. {}` is an obsolete syntax\n+\n+fn main() {}", "previous_filename": "src/test/compile-fail/auto-impl-future-compat.rs"}, {"sha": "aa0af840d1a1f14ae18453f9281ec218284de616", "filename": "src/test/ui/obsolete-syntax-impl-for-dotdot.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fui%2Fobsolete-syntax-impl-for-dotdot.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf4c3cbe5524608fd3a8fcd626f3c73223022be7/src%2Ftest%2Fui%2Fobsolete-syntax-impl-for-dotdot.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobsolete-syntax-impl-for-dotdot.stderr?ref=cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "patch": "@@ -0,0 +1,10 @@\n+error: `impl Trait for .. {}` is an obsolete syntax\n+  --> $DIR/obsolete-syntax-impl-for-dotdot.rs:17:1\n+   |\n+17 | impl Trait2 for .. {} //~ ERROR `impl Trait for .. {}` is an obsolete syntax\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use `auto trait Trait {}` instead\n+\n+error: aborting due to previous error\n+"}, {"sha": "ff0446e23e63e173f680bca7c5d0c1f8f8eb9284", "filename": "src/test/ui/typeck-default-trait-impl-outside-crate.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e6072a7b3835f1875e81c9fd27799f9b20a0770c/src%2Ftest%2Fui%2Ftypeck-default-trait-impl-outside-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6072a7b3835f1875e81c9fd27799f9b20a0770c/src%2Ftest%2Fui%2Ftypeck-default-trait-impl-outside-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck-default-trait-impl-outside-crate.rs?ref=e6072a7b3835f1875e81c9fd27799f9b20a0770c", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(optin_builtin_traits)]\n-\n-#[allow(auto_impl)]\n-impl Copy for .. {} //~ ERROR E0318\n-fn main() {}"}]}