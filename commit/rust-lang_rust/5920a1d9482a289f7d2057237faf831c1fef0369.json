{"sha": "5920a1d9482a289f7d2057237faf831c1fef0369", "node_id": "C_kwDOAAsO6NoAKDU5MjBhMWQ5NDgyYTI4OWY3ZDIwNTcyMzdmYWY4MzFjMWZlZjAzNjk", "commit": {"author": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2021-11-29T12:55:00Z"}, "committer": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2021-12-13T14:27:26Z"}, "message": "Avoid cloning refcounted types during folding", "tree": {"sha": "44c14d3d3319d78d47850efe7dfea7203b48d5f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44c14d3d3319d78d47850efe7dfea7203b48d5f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5920a1d9482a289f7d2057237faf831c1fef0369", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEm/Nz5g9hEBdpmKVOB8rDzKfgZD8FAmG3WE4ACgkQB8rDzKfg\nZD8xDQ/8C4xo6RvQgtZedPL+tN31saFALkxNZehRQo1mbm/GCA/aojgqsxLUjt2u\nZAoGrzI0Dh6RCjbMWqV8uLIufRFPYgxAwBDOYu7pJas7mfSWJhLkBdUOFT/8hAgI\nt69iDgR6iE3tL4GiYJnHHaRWLcXvlmE0q6iuXFehC0qQlKLQUyp1bXUDlmBiAYTE\n8EcXS46wiBmSUXhOgrGef100M2P6tyr9P67R81WuV0vTPvfwllZogdoDDuXott9k\nV+bSP3X8j+v3AsshLcl0zSkrACqBgIcE0D1lMiOHfU1Z+nNVyTIC3XhdDskHXPkZ\nf7/plXhMtc/kJ+kk9P36piMiHU6yvsY4tZeiq0iKbL48XeDuyb3G1Mf+9g9jHbc2\nKpVkpidzdTH40TNrxhDXvbXcehlKQNK9gfApIUvL0GxpB/oTwUNIX6QJYDBJVfZK\n+g9aK7swyhqYxnzjKRTzxMx/Uw287GRq9X4C7AlTFzeR75vqrQhOiV/vgenD58fJ\nP5Ak0RrXMLZkLbmUqE2Ch1Qj1+weEKjPV20evTMupEoRuURtir2xc67YNHs6F/Ha\nbX4FGpZixX0t1jGutKZwlQcAHrZxZakovnaojNqYFEeNU6wAPTqC24rdZBLjSA2h\nFGCTAFolZCswoJmXNn77PpRadBblFBojD+7rUDwoN2kRBX3L8bM=\n=+1en\n-----END PGP SIGNATURE-----", "payload": "tree 44c14d3d3319d78d47850efe7dfea7203b48d5f1\nparent a737592a3d8f0f5ec76524c880d226f28bef2c84\nauthor Alan Egerton <eggyal@gmail.com> 1638190500 +0000\ncommitter Alan Egerton <eggyal@gmail.com> 1639405646 +0000\n\nAvoid cloning refcounted types during folding\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5920a1d9482a289f7d2057237faf831c1fef0369", "html_url": "https://github.com/rust-lang/rust/commit/5920a1d9482a289f7d2057237faf831c1fef0369", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5920a1d9482a289f7d2057237faf831c1fef0369/comments", "author": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a737592a3d8f0f5ec76524c880d226f28bef2c84", "url": "https://api.github.com/repos/rust-lang/rust/commits/a737592a3d8f0f5ec76524c880d226f28bef2c84", "html_url": "https://github.com/rust-lang/rust/commit/a737592a3d8f0f5ec76524c880d226f28bef2c84"}], "stats": {"total": 74, "additions": 68, "deletions": 6}, "files": [{"sha": "9d8588c9a8ea7419940178fee75b7014f50ae185", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5920a1d9482a289f7d2057237faf831c1fef0369/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5920a1d9482a289f7d2057237faf831c1fef0369/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=5920a1d9482a289f7d2057237faf831c1fef0369", "patch": "@@ -33,6 +33,7 @@\n #![feature(derive_default_enum)]\n #![feature(discriminant_kind)]\n #![feature(exhaustive_patterns)]\n+#![feature(get_mut_unchecked)]\n #![feature(if_let_guard)]\n #![feature(map_first_last)]\n #![feature(never_type)]"}, {"sha": "28dc9767b782ee948a99cc4a0189d57583f33932", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 67, "deletions": 6, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/5920a1d9482a289f7d2057237faf831c1fef0369/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5920a1d9482a289f7d2057237faf831c1fef0369/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=5920a1d9482a289f7d2057237faf831c1fef0369", "patch": "@@ -13,6 +13,7 @@ use rustc_hir::def_id::CRATE_DEF_INDEX;\n use rustc_index::vec::{Idx, IndexVec};\n \n use std::fmt;\n+use std::mem::ManuallyDrop;\n use std::ops::ControlFlow;\n use std::rc::Rc;\n use std::sync::Arc;\n@@ -732,11 +733,41 @@ EnumTypeFoldableImpl! {\n \n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Rc<T> {\n     fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n+        mut self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n-        // FIXME: Reuse the `Rc` here.\n-        (*self).clone().try_fold_with(folder).map(Rc::new)\n+        // We merely want to replace the contained `T`, if at all possible,\n+        // so that we don't needlessly allocate a new `Rc` or indeed clone\n+        // the contained type.\n+        unsafe {\n+            // First step is to ensure that we have a unique reference to\n+            // the contained type, which `Rc::make_mut` will accomplish (by\n+            // allocating a new `Rc` and cloning the `T` only if required).\n+            // This is done *before* casting to `Rc<ManuallyDrop<T>>` so that\n+            // panicking during `make_mut` does not leak the `T`.\n+            Rc::make_mut(&mut self);\n+\n+            // Casting to `Rc<ManuallyDrop<T>>` is safe because `ManuallyDrop`\n+            // is `repr(transparent)`.\n+            let ptr = Rc::into_raw(self).cast::<ManuallyDrop<T>>();\n+            let mut unique = Rc::from_raw(ptr);\n+\n+            // Call to `Rc::make_mut` above guarantees that `unique` is the\n+            // sole reference to the contained value, so we can avoid doing\n+            // a checked `get_mut` here.\n+            let slot = Rc::get_mut_unchecked(&mut unique);\n+\n+            // Semantically move the contained type out from `unique`, fold\n+            // it, then move the folded value back into `unique`.  Should\n+            // folding fail, `ManuallyDrop` ensures that the \"moved-out\"\n+            // value is not re-dropped.\n+            let owned = ManuallyDrop::take(slot);\n+            let folded = owned.try_fold_with(folder)?;\n+            *slot = ManuallyDrop::new(folded);\n+\n+            // Cast back to `Rc<T>`.\n+            Ok(Rc::from_raw(Rc::into_raw(unique).cast()))\n+        }\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n@@ -746,11 +777,41 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Rc<T> {\n \n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Arc<T> {\n     fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n+        mut self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n-        // FIXME: Reuse the `Arc` here.\n-        (*self).clone().try_fold_with(folder).map(Arc::new)\n+        // We merely want to replace the contained `T`, if at all possible,\n+        // so that we don't needlessly allocate a new `Arc` or indeed clone\n+        // the contained type.\n+        unsafe {\n+            // First step is to ensure that we have a unique reference to\n+            // the contained type, which `Arc::make_mut` will accomplish (by\n+            // allocating a new `Arc` and cloning the `T` only if required).\n+            // This is done *before* casting to `Arc<ManuallyDrop<T>>` so that\n+            // panicking during `make_mut` does not leak the `T`.\n+            Arc::make_mut(&mut self);\n+\n+            // Casting to `Arc<ManuallyDrop<T>>` is safe because `ManuallyDrop`\n+            // is `repr(transparent)`.\n+            let ptr = Arc::into_raw(self).cast::<ManuallyDrop<T>>();\n+            let mut unique = Arc::from_raw(ptr);\n+\n+            // Call to `Arc::make_mut` above guarantees that `unique` is the\n+            // sole reference to the contained value, so we can avoid doing\n+            // a checked `get_mut` here.\n+            let slot = Arc::get_mut_unchecked(&mut unique);\n+\n+            // Semantically move the contained type out from `unique`, fold\n+            // it, then move the folded value back into `unique`.  Should\n+            // folding fail, `ManuallyDrop` ensures that the \"moved-out\"\n+            // value is not re-dropped.\n+            let owned = ManuallyDrop::take(slot);\n+            let folded = owned.try_fold_with(folder)?;\n+            *slot = ManuallyDrop::new(folded);\n+\n+            // Cast back to `Arc<T>`.\n+            Ok(Arc::from_raw(Arc::into_raw(unique).cast()))\n+        }\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {"}]}