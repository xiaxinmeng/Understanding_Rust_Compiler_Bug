{"sha": "351bba9bee136d856f987037b6ecffd0642d606f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MWJiYTliZWUxMzZkODU2Zjk4NzAzN2I2ZWNmZmQwNjQyZDYwNmY=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-06-18T13:37:22Z"}, "committer": {"name": "Paul Daniel Faria", "email": "nashenas88@users.noreply.github.com", "date": "2020-06-23T16:08:04Z"}, "message": "Add support for marking doctest items as distinct from normal code, add default tag to all doctest elements", "tree": {"sha": "50ef4af147ef3f539086aec02e274655552ee6ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50ef4af147ef3f539086aec02e274655552ee6ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/351bba9bee136d856f987037b6ecffd0642d606f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/351bba9bee136d856f987037b6ecffd0642d606f", "html_url": "https://github.com/rust-lang/rust/commit/351bba9bee136d856f987037b6ecffd0642d606f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/351bba9bee136d856f987037b6ecffd0642d606f/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c12c4f9609ee72487af9b55a558b01af73ffe3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c12c4f9609ee72487af9b55a558b01af73ffe3e", "html_url": "https://github.com/rust-lang/rust/commit/0c12c4f9609ee72487af9b55a558b01af73ffe3e"}], "stats": {"total": 81, "additions": 47, "deletions": 34}, "files": [{"sha": "22203b4a3c81e60b5d1109ab72cf4d453958f75d", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/351bba9bee136d856f987037b6ecffd0642d606f/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351bba9bee136d856f987037b6ecffd0642d606f/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=351bba9bee136d856f987037b6ecffd0642d606f", "patch": "@@ -443,13 +443,13 @@ impl Analysis {\n \n     /// Computes syntax highlighting for the given file\n     pub fn highlight(&self, file_id: FileId) -> Cancelable<Vec<HighlightedRange>> {\n-        self.with_db(|db| syntax_highlighting::highlight(db, file_id, None, false))\n+        self.with_db(|db| syntax_highlighting::highlight(db, file_id, None, false, None))\n     }\n \n     /// Computes syntax highlighting for the given file range.\n     pub fn highlight_range(&self, frange: FileRange) -> Cancelable<Vec<HighlightedRange>> {\n         self.with_db(|db| {\n-            syntax_highlighting::highlight(db, frange.file_id, Some(frange.range), false)\n+            syntax_highlighting::highlight(db, frange.file_id, Some(frange.range), false, None)\n         })\n     }\n "}, {"sha": "dbed8a506a89f295e9e75ec774f0a91d3636b6d9", "filename": "crates/ra_ide/src/prime_caches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/351bba9bee136d856f987037b6ecffd0642d606f/crates%2Fra_ide%2Fsrc%2Fprime_caches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351bba9bee136d856f987037b6ecffd0642d606f/crates%2Fra_ide%2Fsrc%2Fprime_caches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fprime_caches.rs?ref=351bba9bee136d856f987037b6ecffd0642d606f", "patch": "@@ -7,6 +7,6 @@ use crate::{FileId, RootDatabase};\n \n pub(crate) fn prime_caches(db: &RootDatabase, files: Vec<FileId>) {\n     for file in files {\n-        let _ = crate::syntax_highlighting::highlight(db, file, None, false);\n+        let _ = crate::syntax_highlighting::highlight(db, file, None, false, None);\n     }\n }"}, {"sha": "6b3932aff2d6156c0f46f9904500192fd95b1d8c", "filename": "crates/ra_ide/src/snapshots/highlight_doctest.html", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/351bba9bee136d856f987037b6ecffd0642d606f/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/351bba9bee136d856f987037b6ecffd0642d606f/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_doctest.html?ref=351bba9bee136d856f987037b6ecffd0642d606f", "patch": "@@ -47,9 +47,9 @@\n     <span class=\"comment documentation\">/// # Examples</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"comment documentation\">/// #</span> <span class=\"attribute\">#![</span><span class=\"function attribute\">allow</span><span class=\"attribute\">(unused_mut)]</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">foo</span>: <span class=\"struct\">Foo</span> = <span class=\"struct\">Foo</span>::<span class=\"function\">new</span>();\n-    <span class=\"comment documentation\">/// ```</span>\n+    <span class=\"comment documentation\">/// #</span> <span class=\"operator injected\">#</span><span class=\"operator injected\">!</span><span class=\"operator injected\">[</span><span class=\"operator injected\">allow</span><span class=\"operator injected\">(</span><span class=\"operator injected\">unused_mut</span><span class=\"operator injected\">)</span><span class=\"operator injected\">]</span><span class=\"operator injected\">\n+</span>    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"operator injected\"> </span><span class=\"keyword injected\">mut</span><span class=\"operator injected\"> </span><span class=\"operator injected\">foo</span><span class=\"operator injected\">:</span><span class=\"operator injected\"> </span><span class=\"operator injected\">Foo</span><span class=\"operator injected\"> </span><span class=\"operator injected\">=</span><span class=\"operator injected\"> </span><span class=\"operator injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"operator injected\">new</span><span class=\"operator injected\">(</span><span class=\"operator injected\">)</span><span class=\"operator injected\">;</span><span class=\"operator injected\">\n+</span><span class=\"operator injected\"> </span>   <span class=\"comment documentation\">/// ```</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"keyword\">fn</span> <span class=\"function declaration\">new</span>() -&gt; <span class=\"struct\">Foo</span> {\n         <span class=\"struct\">Foo</span> { <span class=\"field\">bar</span>: <span class=\"bool_literal\">true</span> }\n     }\n@@ -59,27 +59,27 @@\n     <span class=\"comment documentation\">/// # Examples</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword\">use</span> <span class=\"module\">x</span>::<span class=\"module\">y</span>;\n-    <span class=\"comment documentation\">///</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword\">let</span> <span class=\"variable declaration\">foo</span> = <span class=\"struct\">Foo</span>::<span class=\"function\">new</span>();\n-    <span class=\"comment documentation\">///</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"comment\">// calls bar on foo</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"macro\">assert!</span>(foo.bar());\n-    <span class=\"comment documentation\">///</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword\">let</span> <span class=\"variable declaration\">bar</span> = <span class=\"variable\">foo</span>.<span class=\"field\">bar</span> || <span class=\"struct\">Foo</span>::<span class=\"constant\">bar</span>;\n-    <span class=\"comment documentation\">///</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"comment\">/* multi-line\n-    </span><span class=\"comment documentation\">/// </span><span class=\"comment\">       comment */</span>\n-    <span class=\"comment documentation\">///</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword\">let</span> <span class=\"variable declaration\">multi_line_string</span> = <span class=\"string_literal\">\"Foo\n-    </span><span class=\"comment documentation\">/// </span><span class=\"string_literal\">  bar\n-    </span><span class=\"comment documentation\">/// </span><span class=\"string_literal\">         \"</span>;\n-    <span class=\"comment documentation\">///</span>\n-    <span class=\"comment documentation\">/// ```</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">use</span><span class=\"operator injected\"> </span><span class=\"operator injected\">x</span><span class=\"operator injected\">::</span><span class=\"operator injected\">y</span><span class=\"operator injected\">;</span><span class=\"operator injected\">\n+    </span><span class=\"comment documentation\">///</span><span class=\"operator injected\">\n+</span>    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"operator injected\"> </span><span class=\"operator injected\">foo</span><span class=\"operator injected\"> </span><span class=\"operator injected\">=</span><span class=\"operator injected\"> </span><span class=\"operator injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"operator injected\">new</span><span class=\"operator injected\">(</span><span class=\"operator injected\">)</span><span class=\"operator injected\">;</span><span class=\"operator injected\">\n+    </span><span class=\"comment documentation\">///</span><span class=\"operator injected\">\n+</span>    <span class=\"comment documentation\">/// </span><span class=\"comment injected\">// calls bar on foo</span><span class=\"operator injected\">\n+</span>    <span class=\"comment documentation\">/// </span><span class=\"macro injected\">assert!</span><span class=\"operator injected\">(</span><span class=\"operator injected\">foo</span><span class=\"operator injected\">.</span><span class=\"operator injected\">bar</span><span class=\"operator injected\">(</span><span class=\"operator injected\">)</span><span class=\"operator injected\">)</span><span class=\"operator injected\">;</span><span class=\"operator injected\">\n+    </span><span class=\"comment documentation\">///</span><span class=\"operator injected\">\n+</span>    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"operator injected\"> </span><span class=\"operator injected\">bar</span><span class=\"operator injected\"> </span><span class=\"operator injected\">=</span><span class=\"operator injected\"> </span><span class=\"operator injected\">foo</span><span class=\"operator injected\">.</span><span class=\"operator injected\">bar</span><span class=\"operator injected\"> </span><span class=\"operator injected\">||</span><span class=\"operator injected\"> </span><span class=\"operator injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"operator injected\">bar</span><span class=\"operator injected\">;</span><span class=\"operator injected\">\n+    </span><span class=\"comment documentation\">///</span><span class=\"operator injected\">\n+</span>    <span class=\"comment documentation\">/// </span><span class=\"comment injected\">/* multi-line\n+    </span><span class=\"comment documentation\">/// </span><span class=\"comment injected\">       comment */</span><span class=\"operator injected\">\n+    </span><span class=\"comment documentation\">///</span><span class=\"operator injected\">\n+</span>    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"operator injected\"> </span><span class=\"operator injected\">multi_line_string</span><span class=\"operator injected\"> </span><span class=\"operator injected\">=</span><span class=\"operator injected\"> </span><span class=\"string_literal injected\">\"Foo\n+    </span><span class=\"comment documentation\">/// </span><span class=\"string_literal injected\">  bar\n+    </span><span class=\"comment documentation\">/// </span><span class=\"string_literal injected\">         \"</span><span class=\"operator injected\">;</span><span class=\"operator injected\">\n+    </span><span class=\"comment documentation\">///</span><span class=\"operator injected\">\n+</span>    <span class=\"comment documentation\">/// ```</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```rust,no_run</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword\">let</span> <span class=\"variable declaration\">foobar</span> = <span class=\"struct\">Foo</span>::<span class=\"function\">new</span>().<span class=\"function\">bar</span>();\n-    <span class=\"comment documentation\">/// ```</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"operator injected\"> </span><span class=\"operator injected\">foobar</span><span class=\"operator injected\"> </span><span class=\"operator injected\">=</span><span class=\"operator injected\"> </span><span class=\"operator injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"operator injected\">new</span><span class=\"operator injected\">(</span><span class=\"operator injected\">)</span><span class=\"operator injected\">.</span><span class=\"operator injected\">bar</span><span class=\"operator injected\">(</span><span class=\"operator injected\">)</span><span class=\"operator injected\">;</span><span class=\"operator injected\">\n+</span><span class=\"operator injected\"> </span>   <span class=\"comment documentation\">/// ```</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```sh</span>\n     <span class=\"comment documentation\">/// echo 1</span>"}, {"sha": "b4dcdba39366ab76ddac436904dbb3a423665c98", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/351bba9bee136d856f987037b6ecffd0642d606f/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351bba9bee136d856f987037b6ecffd0642d606f/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=351bba9bee136d856f987037b6ecffd0642d606f", "patch": "@@ -45,6 +45,7 @@ pub(crate) fn highlight(\n     file_id: FileId,\n     range_to_highlight: Option<TextRange>,\n     syntactic_name_ref_highlighting: bool,\n+    default_tag: Option<HighlightTag>,\n ) -> Vec<HighlightedRange> {\n     let _p = profile(\"highlight\");\n     let sema = Semantics::new(db);\n@@ -107,6 +108,7 @@ pub(crate) fn highlight(\n                         &mut bindings_shadow_count,\n                         syntactic_name_ref_highlighting,\n                         name.syntax().clone().into(),\n+                        default_tag,\n                     ) {\n                         stack.add(HighlightedRange {\n                             range: name.syntax().text_range(),\n@@ -206,6 +208,7 @@ pub(crate) fn highlight(\n             &mut bindings_shadow_count,\n             syntactic_name_ref_highlighting,\n             element_to_highlight.clone(),\n+            default_tag,\n         ) {\n             stack.add(HighlightedRange { range, highlight, binding_hash });\n             if let Some(string) =\n@@ -430,13 +433,14 @@ fn highlight_element(\n     bindings_shadow_count: &mut FxHashMap<Name, u32>,\n     syntactic_name_ref_highlighting: bool,\n     element: SyntaxElement,\n+    default_tag: Option<HighlightTag>,\n ) -> Option<(Highlight, Option<u64>)> {\n     let db = sema.db;\n     let mut binding_hash = None;\n     let highlight: Highlight = match element.kind() {\n         FN_DEF => {\n             bindings_shadow_count.clear();\n-            return None;\n+            default_tag?.into()\n         }\n \n         // Highlight definitions depending on the \"type\" of the definition.\n@@ -515,12 +519,12 @@ fn highlight_element(\n             let expr = prefix_expr.expr()?;\n             let ty = sema.type_of_expr(&expr)?;\n             if !ty.is_raw_ptr() {\n-                return None;\n+                default_tag?.into()\n+            } else {\n+                let mut h = Highlight::new(HighlightTag::Operator);\n+                h |= HighlightModifier::Unsafe;\n+                h\n             }\n-\n-            let mut h = Highlight::new(HighlightTag::Operator);\n-            h |= HighlightModifier::Unsafe;\n-            h\n         }\n         T![!] if element.parent().and_then(ast::MacroCall::cast).is_some() => {\n             Highlight::new(HighlightTag::Macro)\n@@ -546,7 +550,7 @@ fn highlight_element(\n             }\n         }\n \n-        _ => return None,\n+        _ => default_tag?.into(),\n     };\n \n     return Some((highlight, binding_hash));"}, {"sha": "9043024dfdbcc4c45da2472e78406077025ac46b", "filename": "crates/ra_ide/src/syntax_highlighting/html.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/351bba9bee136d856f987037b6ecffd0642d606f/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351bba9bee136d856f987037b6ecffd0642d606f/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs?ref=351bba9bee136d856f987037b6ecffd0642d606f", "patch": "@@ -19,7 +19,7 @@ pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: boo\n         )\n     }\n \n-    let ranges = highlight(db, file_id, None, false);\n+    let ranges = highlight(db, file_id, None, false, None);\n     let text = parse.tree().syntax().to_string();\n     let mut prev_pos = TextSize::from(0);\n     let mut buf = String::new();"}, {"sha": "bd38cdb6f31ca7c0a4d22c023614d913f87813b0", "filename": "crates/ra_ide/src/syntax_highlighting/injection.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/351bba9bee136d856f987037b6ecffd0642d606f/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351bba9bee136d856f987037b6ecffd0642d606f/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs?ref=351bba9bee136d856f987037b6ecffd0642d606f", "patch": "@@ -150,7 +150,10 @@ pub(super) fn highlight_doc_comment(\n     let (analysis, tmp_file_id) = Analysis::from_single_file(text);\n \n     stack.push();\n-    for mut h in analysis.with_db(|db| super::highlight(db, tmp_file_id, None, true)).unwrap() {\n+    for mut h in analysis\n+        .with_db(|db| super::highlight(db, tmp_file_id, None, true, Some(HighlightTag::Operator)))\n+        .unwrap()\n+    {\n         // Determine start offset and end offset in case of multi-line ranges\n         let mut start_offset = None;\n         let mut end_offset = None;\n@@ -172,6 +175,7 @@ pub(super) fn highlight_doc_comment(\n                 h.range.end() + end_offset.unwrap_or(start_offset) - h.range.start(),\n             );\n \n+            h.highlight |= HighlightModifier::Injected;\n             stack.add(h);\n         }\n     }"}, {"sha": "f5ab7386524aef38d67367d0ded9a54f4175f102", "filename": "crates/ra_ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/351bba9bee136d856f987037b6ecffd0642d606f/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351bba9bee136d856f987037b6ecffd0642d606f/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=351bba9bee136d856f987037b6ecffd0642d606f", "patch": "@@ -57,6 +57,7 @@ pub enum HighlightModifier {\n     /// not.\n     Definition,\n     Documentation,\n+    Injected,\n     Mutable,\n     Unsafe,\n }\n@@ -110,6 +111,7 @@ impl HighlightModifier {\n         HighlightModifier::ControlFlow,\n         HighlightModifier::Definition,\n         HighlightModifier::Documentation,\n+        HighlightModifier::Injected,\n         HighlightModifier::Mutable,\n         HighlightModifier::Unsafe,\n     ];\n@@ -120,6 +122,7 @@ impl HighlightModifier {\n             HighlightModifier::ControlFlow => \"control\",\n             HighlightModifier::Definition => \"declaration\",\n             HighlightModifier::Documentation => \"documentation\",\n+            HighlightModifier::Injected => \"injected\",\n             HighlightModifier::Mutable => \"mutable\",\n             HighlightModifier::Unsafe => \"unsafe\",\n         }"}, {"sha": "6f43667a34adf75f3ae56cc0f9a288d3fbdc5ed2", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/351bba9bee136d856f987037b6ecffd0642d606f/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351bba9bee136d856f987037b6ecffd0642d606f/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=351bba9bee136d856f987037b6ecffd0642d606f", "patch": "@@ -68,6 +68,7 @@ macro_rules! define_semantic_token_modifiers {\n define_semantic_token_modifiers![\n     (CONSTANT, \"constant\"),\n     (CONTROL_FLOW, \"controlFlow\"),\n+    (INJECTED, \"injected\"),\n     (MUTABLE, \"mutable\"),\n     (UNSAFE, \"unsafe\"),\n     (ATTRIBUTE_MODIFIER, \"attribute\"),"}, {"sha": "dee5d7859e8c4f1a91acc4cb331bd431a8e6cda3", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/351bba9bee136d856f987037b6ecffd0642d606f/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351bba9bee136d856f987037b6ecffd0642d606f/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=351bba9bee136d856f987037b6ecffd0642d606f", "patch": "@@ -331,6 +331,7 @@ fn semantic_token_type_and_modifiers(\n             HighlightModifier::Attribute => semantic_tokens::ATTRIBUTE_MODIFIER,\n             HighlightModifier::Definition => lsp_types::SemanticTokenModifier::DECLARATION,\n             HighlightModifier::Documentation => lsp_types::SemanticTokenModifier::DOCUMENTATION,\n+            HighlightModifier::Injected => semantic_tokens::INJECTED,\n             HighlightModifier::ControlFlow => semantic_tokens::CONTROL_FLOW,\n             HighlightModifier::Mutable => semantic_tokens::MUTABLE,\n             HighlightModifier::Unsafe => semantic_tokens::UNSAFE,"}]}