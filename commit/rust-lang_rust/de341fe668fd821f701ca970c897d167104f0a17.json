{"sha": "de341fe668fd821f701ca970c897d167104f0a17", "node_id": "C_kwDOAAsO6NoAKGRlMzQxZmU2NjhmZDgyMWY3MDFjYTk3MGM4OTdkMTY3MTA0ZjBhMTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-01T03:56:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-01T03:56:21Z"}, "message": "Auto merge of #102526 - matthiaskrgr:rollup-9o6p98c, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #102361 (Fix ICE in const_trait check code)\n - #102373 (Flush delayed bugs before codegen)\n - #102483 (create def ids for impl traits during ast lowering)\n - #102490 (Generate synthetic region from `impl` even in closure body within an associated fn)\n - #102492 (Don't lower assoc bindings just to deny them)\n - #102493 (Group together more size assertions.)\n - #102521 (rustdoc: add missing margin to no-docblock methods)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "90b54768b33cc51c02935bc4fe79b1ec13d85371", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90b54768b33cc51c02935bc4fe79b1ec13d85371"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de341fe668fd821f701ca970c897d167104f0a17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de341fe668fd821f701ca970c897d167104f0a17", "html_url": "https://github.com/rust-lang/rust/commit/de341fe668fd821f701ca970c897d167104f0a17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de341fe668fd821f701ca970c897d167104f0a17/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5b105dc9a14116248512ba6fec8d3f0f4f24f0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5b105dc9a14116248512ba6fec8d3f0f4f24f0f", "html_url": "https://github.com/rust-lang/rust/commit/c5b105dc9a14116248512ba6fec8d3f0f4f24f0f"}, {"sha": "2fadfe0284370a31a453b8e90b9eb357475164f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fadfe0284370a31a453b8e90b9eb357475164f5", "html_url": "https://github.com/rust-lang/rust/commit/2fadfe0284370a31a453b8e90b9eb357475164f5"}], "stats": {"total": 301, "additions": 209, "deletions": 92}, "files": [{"sha": "99034799b3c3121ed1855cf3f6da8c1984c92fa3", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/de341fe668fd821f701ca970c897d167104f0a17/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de341fe668fd821f701ca970c897d167104f0a17/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=de341fe668fd821f701ca970c897d167104f0a17", "patch": "@@ -256,10 +256,6 @@ pub enum TokenKind {\n     Eof,\n }\n \n-// `TokenKind` is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(TokenKind, 16);\n-\n #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]\n pub struct Token {\n     pub kind: TokenKind,\n@@ -752,10 +748,6 @@ pub enum Nonterminal {\n     NtVis(P<ast::Visibility>),\n }\n \n-// `Nonterminal` is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(Nonterminal, 16);\n-\n #[derive(Debug, Copy, Clone, PartialEq, Encodable, Decodable)]\n pub enum NonterminalKind {\n     Item,\n@@ -894,3 +886,16 @@ where\n         panic!(\"interpolated tokens should not be present in the HIR\")\n     }\n }\n+\n+// Some types are used a lot. Make sure they don't unintentionally get bigger.\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n+mod size_asserts {\n+    use super::*;\n+    use rustc_data_structures::static_assert_size;\n+    // These are in alphabetical order, which is easy to maintain.\n+    static_assert_size!(Lit, 12);\n+    static_assert_size!(LitKind, 2);\n+    static_assert_size!(Nonterminal, 16);\n+    static_assert_size!(Token, 24);\n+    static_assert_size!(TokenKind, 16);\n+}"}, {"sha": "824206a99d8d3d0fa9c1c3a5e273f7d9757b28a0", "filename": "compiler/rustc_ast/src/tokenstream.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/de341fe668fd821f701ca970c897d167104f0a17/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de341fe668fd821f701ca970c897d167104f0a17/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs?ref=de341fe668fd821f701ca970c897d167104f0a17", "patch": "@@ -47,10 +47,6 @@ pub enum TokenTree {\n     Delimited(DelimSpan, Delimiter, TokenStream),\n }\n \n-// This type is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(TokenTree, 32);\n-\n // Ensure all fields of `TokenTree` is `Send` and `Sync`.\n #[cfg(parallel_compiler)]\n fn _dummy()\n@@ -308,10 +304,6 @@ pub struct AttributesData {\n #[derive(Clone, Debug, Default, Encodable, Decodable)]\n pub struct TokenStream(pub(crate) Lrc<Vec<TokenTree>>);\n \n-// `TokenStream` is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(TokenStream, 8);\n-\n #[derive(Clone, Copy, Debug, PartialEq, Encodable, Decodable, HashStable_Generic)]\n pub enum Spacing {\n     Alone,\n@@ -664,3 +656,16 @@ impl DelimSpan {\n         self.open.with_hi(self.close.hi())\n     }\n }\n+\n+// Some types are used a lot. Make sure they don't unintentionally get bigger.\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n+mod size_asserts {\n+    use super::*;\n+    use rustc_data_structures::static_assert_size;\n+    // These are in alphabetical order, which is easy to maintain.\n+    static_assert_size!(AttrTokenStream, 8);\n+    static_assert_size!(AttrTokenTree, 32);\n+    static_assert_size!(LazyAttrTokenStream, 8);\n+    static_assert_size!(TokenStream, 8);\n+    static_assert_size!(TokenTree, 32);\n+}"}, {"sha": "8281164ab12070dc60beb1c3979baa1e692e75df", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/de341fe668fd821f701ca970c897d167104f0a17/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de341fe668fd821f701ca970c897d167104f0a17/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=de341fe668fd821f701ca970c897d167104f0a17", "patch": "@@ -61,8 +61,8 @@ use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n use rustc_hir::definitions::DefPathData;\n use rustc_hir::{ConstArg, GenericArg, ItemLocalId, ParamName, TraitCandidate};\n use rustc_index::vec::{Idx, IndexVec};\n-use rustc_middle::span_bug;\n use rustc_middle::ty::{ResolverAstLowering, TyCtxt};\n+use rustc_middle::{bug, span_bug};\n use rustc_session::parse::feature_err;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::DesugaringKind;\n@@ -1060,13 +1060,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     // Desugar `AssocTy: Bounds` into `AssocTy = impl Bounds`. We do this by\n                     // constructing the HIR for `impl bounds...` and then lowering that.\n \n-                    let parent_def_id = self.current_hir_id_owner;\n                     let impl_trait_node_id = self.next_node_id();\n-                    self.create_def(\n-                        parent_def_id.def_id,\n-                        impl_trait_node_id,\n-                        DefPathData::ImplTrait,\n-                    );\n \n                     self.with_dyn_type_scope(false, |this| {\n                         let node_id = this.next_node_id();\n@@ -1357,9 +1351,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         def_node_id,\n                         bounds,\n                         false,\n-                        &ImplTraitContext::TypeAliasesOpaqueTy,\n+                        itctx,\n                     ),\n                     ImplTraitContext::Universal => {\n+                        self.create_def(\n+                            self.current_hir_id_owner.def_id,\n+                            def_node_id,\n+                            DefPathData::ImplTrait,\n+                        );\n                         let span = t.span;\n                         let ident = Ident::from_str_and_span(&pprust::ty_to_string(t), span);\n                         let (param, bounds, path) =\n@@ -1453,7 +1452,17 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         // frequently opened issues show.\n         let opaque_ty_span = self.mark_span_with_reason(DesugaringKind::OpaqueTy, span, None);\n \n-        let opaque_ty_def_id = self.local_def_id(opaque_ty_node_id);\n+        let opaque_ty_def_id = match origin {\n+            hir::OpaqueTyOrigin::TyAlias => self.create_def(\n+                self.current_hir_id_owner.def_id,\n+                opaque_ty_node_id,\n+                DefPathData::ImplTrait,\n+            ),\n+            hir::OpaqueTyOrigin::FnReturn(fn_def_id) => {\n+                self.create_def(fn_def_id, opaque_ty_node_id, DefPathData::ImplTrait)\n+            }\n+            hir::OpaqueTyOrigin::AsyncFn(..) => bug!(\"unreachable\"),\n+        };\n         debug!(?opaque_ty_def_id);\n \n         // Contains the new lifetime definitions created for the TAIT (if any)."}, {"sha": "4d251cf7ac752ddbe89cfbbc6ee34e1e4d39b842", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de341fe668fd821f701ca970c897d167104f0a17/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de341fe668fd821f701ca970c897d167104f0a17/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=de341fe668fd821f701ca970c897d167104f0a17", "patch": "@@ -864,15 +864,13 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n         };\n \n         let tcx = self.infcx.tcx;\n-        let body_parent_did = tcx.opt_parent(self.mir_def_id().to_def_id())?;\n-        if tcx.parent(region.def_id) != body_parent_did\n-            || tcx.def_kind(body_parent_did) != DefKind::Impl\n-        {\n+        let region_parent = tcx.parent(region.def_id);\n+        if tcx.def_kind(region_parent) != DefKind::Impl {\n             return None;\n         }\n \n         let mut found = false;\n-        tcx.fold_regions(tcx.type_of(body_parent_did), |r: ty::Region<'tcx>, _| {\n+        tcx.fold_regions(tcx.type_of(region_parent), |r: ty::Region<'tcx>, _| {\n             if *r == ty::ReEarlyBound(region) {\n                 found = true;\n             }"}, {"sha": "c6ede209e65f62469d87d983b3ce270f2a687df7", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de341fe668fd821f701ca970c897d167104f0a17/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de341fe668fd821f701ca970c897d167104f0a17/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=de341fe668fd821f701ca970c897d167104f0a17", "patch": "@@ -66,7 +66,7 @@ pub type PErr<'a> = DiagnosticBuilder<'a, ErrorGuaranteed>;\n pub type PResult<'a, T> = Result<T, PErr<'a>>;\n \n // `PResult` is used a lot. Make sure it doesn't unintentionally get bigger.\n-// (See also the comment on `DiagnosticBuilder`'s `diagnostic` field.)\n+// (See also the comment on `DiagnosticBuilderInner`'s `diagnostic` field.)\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n rustc_data_structures::static_assert_size!(PResult<'_, ()>, 16);\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n@@ -1134,6 +1134,12 @@ impl Handler {\n         );\n         std::mem::take(&mut self.inner.borrow_mut().fulfilled_expectations)\n     }\n+\n+    pub fn flush_delayed(&self) {\n+        let mut inner = self.inner.lock();\n+        let bugs = std::mem::replace(&mut inner.delayed_span_bugs, Vec::new());\n+        inner.flush_delayed(bugs, \"no errors encountered even though `delay_span_bug` issued\");\n+    }\n }\n \n impl HandlerInner {"}, {"sha": "fbb0c8918d2bd8f678acd2a9943d50faaa78ac7f", "filename": "compiler/rustc_hir_analysis/src/astconv/generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de341fe668fd821f701ca970c897d167104f0a17/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de341fe668fd821f701ca970c897d167104f0a17/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs?ref=de341fe668fd821f701ca970c897d167104f0a17", "patch": "@@ -448,8 +448,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let infer_lifetimes =\n             (gen_pos != GenericArgPosition::Type || infer_args) && !gen_args.has_lifetime_params();\n \n-        if gen_pos != GenericArgPosition::Type && !gen_args.bindings.is_empty() {\n-            Self::prohibit_assoc_ty_binding(tcx, gen_args.bindings[0].span);\n+        if gen_pos != GenericArgPosition::Type && let Some(b) = gen_args.bindings.first() {\n+            Self::prohibit_assoc_ty_binding(tcx, b.span);\n         }\n \n         let explicit_late_bound ="}, {"sha": "ea6da299b8fc8529f09b6ce7ec659c1d959b72a2", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/de341fe668fd821f701ca970c897d167104f0a17/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de341fe668fd821f701ca970c897d167104f0a17/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=de341fe668fd821f701ca970c897d167104f0a17", "patch": "@@ -276,9 +276,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             item_segment.infer_args,\n             None,\n         );\n-        let assoc_bindings = self.create_assoc_bindings_for_generic_args(item_segment.args());\n-\n-        if let Some(b) = assoc_bindings.first() {\n+        if let Some(b) = item_segment.args().bindings.first() {\n             Self::prohibit_assoc_ty_binding(self.tcx(), b.span);\n         }\n \n@@ -605,8 +603,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             None,\n         );\n \n-        let assoc_bindings = self.create_assoc_bindings_for_generic_args(item_segment.args());\n-        if let Some(b) = assoc_bindings.first() {\n+        if let Some(b) = item_segment.args().bindings.first() {\n             Self::prohibit_assoc_ty_binding(self.tcx(), b.span);\n         }\n \n@@ -794,8 +791,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             trait_segment,\n             is_impl,\n         );\n-        let assoc_bindings = self.create_assoc_bindings_for_generic_args(trait_segment.args());\n-        if let Some(b) = assoc_bindings.first() {\n+        if let Some(b) = trait_segment.args().bindings.first() {\n             Self::prohibit_assoc_ty_binding(self.tcx(), b.span);\n         }\n         ty::TraitRef::new(trait_def_id, substs)\n@@ -2207,8 +2203,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         for segment in segments {\n             // Only emit the first error to avoid overloading the user with error messages.\n-            if let [binding, ..] = segment.args().bindings {\n-                Self::prohibit_assoc_ty_binding(self.tcx(), binding.span);\n+            if let Some(b) = segment.args().bindings.first() {\n+                Self::prohibit_assoc_ty_binding(self.tcx(), b.span);\n                 return true;\n             }\n         }"}, {"sha": "91d180e1eb7e5ab7d315be4ba0ab49fdc14621dc", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de341fe668fd821f701ca970c897d167104f0a17/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de341fe668fd821f701ca970c897d167104f0a17/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=de341fe668fd821f701ca970c897d167104f0a17", "patch": "@@ -246,6 +246,10 @@ impl<'tcx> Queries<'tcx> {\n                 // Don't do code generation if there were any errors\n                 self.session().compile_status()?;\n \n+                // If we have any delayed bugs, for example because we created TyKind::Error earlier,\n+                // it's likely that codegen will only cause more ICEs, obscuring the original problem\n+                self.session().diagnostic().flush_delayed();\n+\n                 // Hook for UI tests.\n                 Self::check_for_rustc_errors_attr(tcx);\n "}, {"sha": "8523b5ca0ec33b173ecdfcf476a41e3a3ec66501", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de341fe668fd821f701ca970c897d167104f0a17/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de341fe668fd821f701ca970c897d167104f0a17/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=de341fe668fd821f701ca970c897d167104f0a17", "patch": "@@ -14,7 +14,7 @@ use rustc_index::vec::Idx;\n use rustc_middle::hir::nested_filter;\n use rustc_span::def_id::StableCrateId;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use rustc_span::Span;\n+use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::abi::Abi;\n \n #[inline]\n@@ -1131,7 +1131,7 @@ pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {\n                 .filter_map(|(def_id, info)| {\n                     let _ = info.as_owner()?;\n                     let def_path_hash = definitions.def_path_hash(def_id);\n-                    let span = resolutions.source_span[def_id];\n+                    let span = resolutions.source_span.get(def_id).unwrap_or(&DUMMY_SP);\n                     debug_assert_eq!(span.parent(), None);\n                     Some((def_path_hash, span))\n                 })"}, {"sha": "0dc05475ce9447f3f7189690be8b82afc3f779b2", "filename": "compiler/rustc_parse/src/parser/attr_wrapper.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/de341fe668fd821f701ca970c897d167104f0a17/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de341fe668fd821f701ca970c897d167104f0a17/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs?ref=de341fe668fd821f701ca970c897d167104f0a17", "patch": "@@ -32,11 +32,6 @@ pub struct AttrWrapper {\n     start_pos: usize,\n }\n \n-// This struct is passed around very frequently,\n-// so make sure it doesn't accidentally get larger\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(AttrWrapper, 16);\n-\n impl AttrWrapper {\n     pub(super) fn new(attrs: AttrVec, start_pos: usize) -> AttrWrapper {\n         AttrWrapper { attrs, start_pos }\n@@ -96,9 +91,6 @@ struct LazyAttrTokenStreamImpl {\n     replace_ranges: Box<[ReplaceRange]>,\n }\n \n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(LazyAttrTokenStreamImpl, 144);\n-\n impl ToAttrTokenStream for LazyAttrTokenStreamImpl {\n     fn to_attr_token_stream(&self) -> AttrTokenStream {\n         // The token produced by the final call to `{,inlined_}next` was not\n@@ -461,3 +453,13 @@ fn make_token_stream(\n     }\n     AttrTokenStream::new(final_buf.inner)\n }\n+\n+// Some types are used a lot. Make sure they don't unintentionally get bigger.\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n+mod size_asserts {\n+    use super::*;\n+    use rustc_data_structures::static_assert_size;\n+    // These are in alphabetical order, which is easy to maintain.\n+    static_assert_size!(AttrWrapper, 16);\n+    static_assert_size!(LazyAttrTokenStreamImpl, 144);\n+}"}, {"sha": "116aaf4834981fafd967d0e80d578c1d01fbb37b", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de341fe668fd821f701ca970c897d167104f0a17/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de341fe668fd821f701ca970c897d167104f0a17/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=de341fe668fd821f701ca970c897d167104f0a17", "patch": "@@ -198,8 +198,8 @@ impl<'tcx> Visitor<'tcx> for CheckConstVisitor<'tcx> {\n             of_trait: Some(trait_ref),\n             ..\n         }) = item.kind\n+            && let Some(def_id) = trait_ref.trait_def_id()\n         {\n-            let def_id = trait_ref.trait_def_id().unwrap();\n             let source_map = tcx.sess.source_map();\n             if !tcx.has_attr(def_id, sym::const_trait) {\n                 tcx.sess"}, {"sha": "148eabb38e2303692f687517d1cc22df43bcaaa1", "filename": "compiler/rustc_query_system/src/ich/hcx.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de341fe668fd821f701ca970c897d167104f0a17/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de341fe668fd821f701ca970c897d167104f0a17/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs?ref=de341fe668fd821f701ca970c897d167104f0a17", "patch": "@@ -12,7 +12,7 @@ use rustc_session::cstore::CrateStore;\n use rustc_session::Session;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::Symbol;\n-use rustc_span::{BytePos, CachingSourceMapView, SourceFile, Span, SpanData};\n+use rustc_span::{BytePos, CachingSourceMapView, SourceFile, Span, SpanData, DUMMY_SP};\n \n /// This is the context state available during incr. comp. hashing. It contains\n /// enough information to transform `DefId`s and `HirId`s into stable `DefPath`s (i.e.,\n@@ -185,7 +185,7 @@ impl<'a> rustc_span::HashStableContext for StableHashingContext<'a> {\n \n     #[inline]\n     fn def_span(&self, def_id: LocalDefId) -> Span {\n-        self.source_span[def_id]\n+        *self.source_span.get(def_id).unwrap_or(&DUMMY_SP)\n     }\n \n     #[inline]"}, {"sha": "38a3c9dd71a5ef2f5dcc250ea476b1876cc05049", "filename": "compiler/rustc_resolve/src/def_collector.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/de341fe668fd821f701ca970c897d167104f0a17/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de341fe668fd821f701ca970c897d167104f0a17/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs?ref=de341fe668fd821f701ca970c897d167104f0a17", "patch": "@@ -285,21 +285,6 @@ impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n     fn visit_ty(&mut self, ty: &'a Ty) {\n         match ty.kind {\n             TyKind::MacCall(..) => self.visit_macro_invoc(ty.id),\n-            TyKind::ImplTrait(node_id, _) => {\n-                let parent_def = match self.impl_trait_context {\n-                    ImplTraitContext::Universal(item_def) => self.resolver.create_def(\n-                        item_def,\n-                        node_id,\n-                        DefPathData::ImplTrait,\n-                        self.expansion.to_expn_id(),\n-                        ty.span,\n-                    ),\n-                    ImplTraitContext::Existential => {\n-                        self.create_def(node_id, DefPathData::ImplTrait, ty.span)\n-                    }\n-                };\n-                self.with_parent(parent_def, |this| visit::walk_ty(this, ty))\n-            }\n             _ => visit::walk_ty(self, ty),\n         }\n     }"}, {"sha": "7bd0dbf9325fa6a19d2b137f8899660c98b3bdb0", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de341fe668fd821f701ca970c897d167104f0a17/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de341fe668fd821f701ca970c897d167104f0a17/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=de341fe668fd821f701ca970c897d167104f0a17", "patch": "@@ -718,7 +718,7 @@ fn item_trait(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean:\n         if toggled {\n             write!(w, \"<details class=\\\"rustdoc-toggle method-toggle\\\" open><summary>\");\n         }\n-        write!(w, \"<div id=\\\"{}\\\" class=\\\"method has-srclink\\\">\", id);\n+        write!(w, \"<section id=\\\"{}\\\" class=\\\"method has-srclink\\\">\", id);\n         render_rightside(w, cx, m, t, RenderMode::Normal);\n         write!(w, \"<h4 class=\\\"code-header\\\">\");\n         render_assoc_item(\n@@ -730,7 +730,7 @@ fn item_trait(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean:\n             RenderMode::Normal,\n         );\n         w.write_str(\"</h4>\");\n-        w.write_str(\"</div>\");\n+        w.write_str(\"</section>\");\n         if toggled {\n             write!(w, \"</summary>\");\n             w.push_buffer(content);"}, {"sha": "2076c88bb02d1e8d22ec0e62a167daaf7c548f9b", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/de341fe668fd821f701ca970c897d167104f0a17/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/de341fe668fd821f701ca970c897d167104f0a17/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=de341fe668fd821f701ca970c897d167104f0a17", "patch": "@@ -2006,7 +2006,10 @@ in storage.js plus the media query with (min-width: 701px)\n .method-toggle summary,\n .implementors-toggle summary,\n .impl,\n-#implementors-list > .docblock {\n+#implementors-list > .docblock,\n+.impl-items > section,\n+.methods > section\n+{\n \tmargin-bottom: 0.75em;\n }\n "}, {"sha": "2408be4534b5e932bb9e2072fa2adf45fcc5c325", "filename": "src/test/rustdoc-gui/no-docblock.goml", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de341fe668fd821f701ca970c897d167104f0a17/src%2Ftest%2Frustdoc-gui%2Fno-docblock.goml", "raw_url": "https://github.com/rust-lang/rust/raw/de341fe668fd821f701ca970c897d167104f0a17/src%2Ftest%2Frustdoc-gui%2Fno-docblock.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fno-docblock.goml?ref=de341fe668fd821f701ca970c897d167104f0a17", "patch": "@@ -0,0 +1,8 @@\n+// This test checks that there are margins applied to methods with no docblocks.\n+goto: file://|DOC_PATH|/test_docs/trait.TraitWithNoDocblocks.html\n+// Check that the two methods are more than 24px apart.\n+compare-elements-position-near-false: (\"//*[@id='tymethod.first_fn']\", \"//*[@id='tymethod.second_fn']\", {\"y\": 24})\n+\n+goto: file://|DOC_PATH|/test_docs/struct.TypeWithNoDocblocks.html\n+// Check that the two methods are more than 24px apart.\n+compare-elements-position-near-false: (\"//*[@id='method.first_fn']\", \"//*[@id='method.second_fn']\", {\"y\": 24})"}, {"sha": "6cb492cfc64e5f8bea5ee6e6e43c5dd3e87c4771", "filename": "src/test/rustdoc-gui/sidebar-mobile-scroll.goml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de341fe668fd821f701ca970c897d167104f0a17/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile-scroll.goml", "raw_url": "https://github.com/rust-lang/rust/raw/de341fe668fd821f701ca970c897d167104f0a17/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile-scroll.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile-scroll.goml?ref=de341fe668fd821f701ca970c897d167104f0a17", "patch": "@@ -6,7 +6,7 @@ assert-css: (\".sidebar\", {\"display\": \"block\", \"left\": \"-1000px\"})\n \n // Scroll down.\n scroll-to: \"//h2[@id='blanket-implementations']\"\n-assert-window-property: {\"pageYOffset\": \"639\"}\n+assert-window-property: {\"pageYOffset\": \"651\"}\n \n // Open the sidebar menu.\n click: \".sidebar-menu-toggle\"\n@@ -21,11 +21,11 @@ assert-window-property: {\"pageYOffset\": \"0\"}\n // Close the sidebar menu. Make sure the scroll position gets restored.\n click: \".sidebar-menu-toggle\"\n wait-for-css: (\".sidebar\", {\"left\": \"-1000px\"})\n-assert-window-property: {\"pageYOffset\": \"639\"}\n+assert-window-property: {\"pageYOffset\": \"651\"}\n \n // Now test that scrollability returns when the browser window is just resized.\n click: \".sidebar-menu-toggle\"\n wait-for-css: (\".sidebar\", {\"left\": \"0px\"})\n assert-window-property: {\"pageYOffset\": \"0\"}\n size: (900, 600)\n-assert-window-property: {\"pageYOffset\": \"639\"}\n+assert-window-property: {\"pageYOffset\": \"651\"}"}, {"sha": "0281973c1ba209af332412521f44727b5362897c", "filename": "src/test/rustdoc-gui/src/test_docs/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/de341fe668fd821f701ca970c897d167104f0a17/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de341fe668fd821f701ca970c897d167104f0a17/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs?ref=de341fe668fd821f701ca970c897d167104f0a17", "patch": "@@ -355,3 +355,15 @@ impl<R: std::io::Read> std::iter::Iterator for NotableStructWithLongName<R> {\n \n     fn next(&mut self) -> Option<Self::Item> { () }\n }\n+\n+pub trait TraitWithNoDocblocks {\n+    fn first_fn(&self);\n+    fn second_fn(&self);\n+}\n+\n+pub struct TypeWithNoDocblocks;\n+\n+impl TypeWithNoDocblocks {\n+    pub fn first_fn(&self) {}\n+    pub fn second_fn(&self) {}\n+}"}, {"sha": "75e67330a3ebfe06bfa08bc45a1d64f4766c9bfd", "filename": "src/test/rustdoc/anchors.no_const_anchor.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de341fe668fd821f701ca970c897d167104f0a17/src%2Ftest%2Frustdoc%2Fanchors.no_const_anchor.html", "raw_url": "https://github.com/rust-lang/rust/raw/de341fe668fd821f701ca970c897d167104f0a17/src%2Ftest%2Frustdoc%2Fanchors.no_const_anchor.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fanchors.no_const_anchor.html?ref=de341fe668fd821f701ca970c897d167104f0a17", "patch": "@@ -1 +1 @@\n-<div id=\"associatedconstant.YOLO\" class=\"method has-srclink\"><a class=\"srclink rightside\" href=\"../src/foo/anchors.rs.html#16\">source</a><h4 class=\"code-header\">const <a href=\"#associatedconstant.YOLO\" class=\"constant\">YOLO</a>: <a class=\"primitive\" href=\"{{channel}}/std/primitive.u32.html\">u32</a></h4></div>\n\\ No newline at end of file\n+<section id=\"associatedconstant.YOLO\" class=\"method has-srclink\"><a class=\"srclink rightside\" href=\"../src/foo/anchors.rs.html#16\">source</a><h4 class=\"code-header\">const <a href=\"#associatedconstant.YOLO\" class=\"constant\">YOLO</a>: <a class=\"primitive\" href=\"{{channel}}/std/primitive.u32.html\">u32</a></h4></section>\n\\ No newline at end of file"}, {"sha": "d7bd525ff0f539907f01adb10aaa8c896736a3cc", "filename": "src/test/rustdoc/anchors.no_trait_method_anchor.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de341fe668fd821f701ca970c897d167104f0a17/src%2Ftest%2Frustdoc%2Fanchors.no_trait_method_anchor.html", "raw_url": "https://github.com/rust-lang/rust/raw/de341fe668fd821f701ca970c897d167104f0a17/src%2Ftest%2Frustdoc%2Fanchors.no_trait_method_anchor.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fanchors.no_trait_method_anchor.html?ref=de341fe668fd821f701ca970c897d167104f0a17", "patch": "@@ -1 +1 @@\n-<div id=\"method.bar\" class=\"method has-srclink\"><a class=\"srclink rightside\" href=\"../src/foo/anchors.rs.html#23\">source</a><h4 class=\"code-header\">fn <a href=\"#method.bar\" class=\"fnname\">bar</a>()</h4></div>\n\\ No newline at end of file\n+<section id=\"method.bar\" class=\"method has-srclink\"><a class=\"srclink rightside\" href=\"../src/foo/anchors.rs.html#23\">source</a><h4 class=\"code-header\">fn <a href=\"#method.bar\" class=\"fnname\">bar</a>()</h4></section>\n\\ No newline at end of file"}, {"sha": "e668e5e4db15c3aa401806217e39a2b6a7fbdbf2", "filename": "src/test/rustdoc/anchors.no_tymethod_anchor.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de341fe668fd821f701ca970c897d167104f0a17/src%2Ftest%2Frustdoc%2Fanchors.no_tymethod_anchor.html", "raw_url": "https://github.com/rust-lang/rust/raw/de341fe668fd821f701ca970c897d167104f0a17/src%2Ftest%2Frustdoc%2Fanchors.no_tymethod_anchor.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fanchors.no_tymethod_anchor.html?ref=de341fe668fd821f701ca970c897d167104f0a17", "patch": "@@ -1 +1 @@\n-<div id=\"tymethod.foo\" class=\"method has-srclink\"><a class=\"srclink rightside\" href=\"../src/foo/anchors.rs.html#20\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.foo\" class=\"fnname\">foo</a>()</h4></div>\n\\ No newline at end of file\n+<section id=\"tymethod.foo\" class=\"method has-srclink\"><a class=\"srclink rightside\" href=\"../src/foo/anchors.rs.html#20\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.foo\" class=\"fnname\">foo</a>()</h4></section>\n\\ No newline at end of file"}, {"sha": "2c66d5aa315abab54a6f140ee77f4b861a452531", "filename": "src/test/rustdoc/anchors.no_type_anchor.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de341fe668fd821f701ca970c897d167104f0a17/src%2Ftest%2Frustdoc%2Fanchors.no_type_anchor.html", "raw_url": "https://github.com/rust-lang/rust/raw/de341fe668fd821f701ca970c897d167104f0a17/src%2Ftest%2Frustdoc%2Fanchors.no_type_anchor.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fanchors.no_type_anchor.html?ref=de341fe668fd821f701ca970c897d167104f0a17", "patch": "@@ -1 +1 @@\n-<div id=\"associatedtype.T\" class=\"method has-srclink\"><a class=\"srclink rightside\" href=\"../src/foo/anchors.rs.html#13\">source</a><h4 class=\"code-header\">type <a href=\"#associatedtype.T\" class=\"associatedtype\">T</a></h4></div>\n\\ No newline at end of file\n+<section id=\"associatedtype.T\" class=\"method has-srclink\"><a class=\"srclink rightside\" href=\"../src/foo/anchors.rs.html#13\">source</a><h4 class=\"code-header\">type <a href=\"#associatedtype.T\" class=\"associatedtype\">T</a></h4></section>\n\\ No newline at end of file"}, {"sha": "602ee1b1b1fcad577912f4a6c7bddb44305426b4", "filename": "src/test/rustdoc/rfc-2632-const-trait-impl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de341fe668fd821f701ca970c897d167104f0a17/src%2Ftest%2Frustdoc%2Frfc-2632-const-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de341fe668fd821f701ca970c897d167104f0a17/src%2Ftest%2Frustdoc%2Frfc-2632-const-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Frfc-2632-const-trait-impl.rs?ref=de341fe668fd821f701ca970c897d167104f0a17", "patch": "@@ -18,10 +18,10 @@ pub struct S<T>(T);\n // @has - '//pre[@class=\"rust trait\"]/code/span[@class=\"where\"]' ': Clone'\n #[const_trait]\n pub trait Tr<T> {\n-    // @!has - '//div[@id=\"method.a\"]/h4[@class=\"code-header\"]' '~const'\n-    // @has - '//div[@id=\"method.a\"]/h4[@class=\"code-header\"]/a[@class=\"trait\"]' 'Clone'\n-    // @!has - '//div[@id=\"method.a\"]/h4[@class=\"code-header\"]/span[@class=\"where\"]' '~const'\n-    // @has - '//div[@id=\"method.a\"]/h4[@class=\"code-header\"]/span[@class=\"where fmt-newline\"]' ': Clone'\n+    // @!has - '//section[@id=\"method.a\"]/h4[@class=\"code-header\"]' '~const'\n+    // @has - '//section[@id=\"method.a\"]/h4[@class=\"code-header\"]/a[@class=\"trait\"]' 'Clone'\n+    // @!has - '//section[@id=\"method.a\"]/h4[@class=\"code-header\"]/span[@class=\"where\"]' '~const'\n+    // @has - '//section[@id=\"method.a\"]/h4[@class=\"code-header\"]/span[@class=\"where fmt-newline\"]' ': Clone'\n     fn a<A: ~const Clone + ~const Destruct>()\n     where\n         Option<A>: ~const Clone + ~const Destruct,"}, {"sha": "37628bff7df4bd1a9df91d38b4602a91e09fc21f", "filename": "src/test/ui/borrowck/issue-102209.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/de341fe668fd821f701ca970c897d167104f0a17/src%2Ftest%2Fui%2Fborrowck%2Fissue-102209.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de341fe668fd821f701ca970c897d167104f0a17/src%2Ftest%2Fui%2Fborrowck%2Fissue-102209.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-102209.rs?ref=de341fe668fd821f701ca970c897d167104f0a17", "patch": "@@ -0,0 +1,28 @@\n+use std::marker::PhantomData;\n+\n+pub struct NfaBuilder<'brand> {\n+    brand: PhantomData<&'brand mut &'brand mut ()>,\n+}\n+\n+impl NfaBuilder<'_> {\n+    pub fn with<R, F: FnOnce(NfaBuilder<'_>) -> R>(f: F) -> R {\n+        Brand::with(|brand| {\n+            f(Self { brand: brand.lt })\n+            //~^ ERROR lifetime may not live long enough\n+            //~| ERROR lifetime may not live long enough\n+        })\n+    }\n+}\n+\n+#[derive(Clone, Copy)]\n+pub struct Brand<'brand> {\n+    lt: PhantomData<&'brand mut &'brand mut ()>,\n+}\n+\n+impl Brand<'_> {\n+    pub fn with<R, F: FnOnce(Brand<'_>) -> R>(f: F) -> R {\n+        f(Self { lt: PhantomData })\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "351de8217b2348ba37ef9e91c402f0767d0a1e1f", "filename": "src/test/ui/borrowck/issue-102209.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/de341fe668fd821f701ca970c897d167104f0a17/src%2Ftest%2Fui%2Fborrowck%2Fissue-102209.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de341fe668fd821f701ca970c897d167104f0a17/src%2Ftest%2Fui%2Fborrowck%2Fissue-102209.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-102209.stderr?ref=de341fe668fd821f701ca970c897d167104f0a17", "patch": "@@ -0,0 +1,22 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-102209.rs:10:29\n+   |\n+LL | impl NfaBuilder<'_> {\n+   |                 -- lifetime `'2` appears in the `impl`'s self type\n+LL |     pub fn with<R, F: FnOnce(NfaBuilder<'_>) -> R>(f: F) -> R {\n+LL |         Brand::with(|brand| {\n+   |                      ----- has type `Brand<'1>`\n+LL |             f(Self { brand: brand.lt })\n+   |                             ^^^^^^^^ this usage requires that `'1` must outlive `'2`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-102209.rs:10:29\n+   |\n+LL | impl NfaBuilder<'_> {\n+   |                 -- lifetime `'1` appears in the `impl`'s self type\n+...\n+LL |             f(Self { brand: brand.lt })\n+   |                             ^^^^^^^^ this usage requires that `'1` must outlive `'static`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "2e02078048027732a86e45f7d2adfa1faaa36948", "filename": "src/test/ui/generator/print/generator-print-verbose-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de341fe668fd821f701ca970c897d167104f0a17/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de341fe668fd821f701ca970c897d167104f0a17/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr?ref=de341fe668fd821f701ca970c897d167104f0a17", "patch": "@@ -9,7 +9,7 @@ note: generator is not `Send` as this value is used across a yield\n   --> $DIR/generator-print-verbose-1.rs:35:9\n    |\n LL |         let _non_send_gen = make_non_send_generator();\n-   |             ------------- has type `Opaque(DefId(0:34 ~ generator_print_verbose_1[749a]::make_non_send_generator::{opaque#0}), [])` which is not `Send`\n+   |             ------------- has type `Opaque(DefId(0:44 ~ generator_print_verbose_1[749a]::make_non_send_generator::{opaque#0}), [])` which is not `Send`\n LL |         yield;\n    |         ^^^^^ yield occurs here, with `_non_send_gen` maybe used later\n LL |     };\n@@ -35,17 +35,17 @@ note: required because it's used within this generator\n    |\n LL |     || {\n    |     ^^\n-note: required because it appears within the type `Opaque(DefId(0:39 ~ generator_print_verbose_1[749a]::make_gen2::{opaque#0}), [std::sync::Arc<std::cell::RefCell<i32>>])`\n+note: required because it appears within the type `Opaque(DefId(0:45 ~ generator_print_verbose_1[749a]::make_gen2::{opaque#0}), [std::sync::Arc<std::cell::RefCell<i32>>])`\n   --> $DIR/generator-print-verbose-1.rs:41:30\n    |\n LL | pub fn make_gen2<T>(t: T) -> impl Generator<Return = T> {\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: required because it appears within the type `Opaque(DefId(0:42 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`\n+note: required because it appears within the type `Opaque(DefId(0:46 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`\n   --> $DIR/generator-print-verbose-1.rs:47:34\n    |\n LL | fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> {\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: required because it captures the following types: `Opaque(DefId(0:42 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`, `()`\n+   = note: required because it captures the following types: `Opaque(DefId(0:46 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`, `()`\n note: required because it's used within this generator\n   --> $DIR/generator-print-verbose-1.rs:52:20\n    |"}, {"sha": "6a8a1ad1caadd242684015add8d640297fb32308", "filename": "src/test/ui/nll/ty-outlives/impl-trait-captures.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de341fe668fd821f701ca970c897d167104f0a17/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de341fe668fd821f701ca970c897d167104f0a17/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr?ref=de341fe668fd821f701ca970c897d167104f0a17", "patch": "@@ -1,14 +1,14 @@\n-error[E0700]: hidden type for `Opaque(DefId(0:11 ~ impl_trait_captures[1afc]::foo::{opaque#0}), [ReStatic, T, ReEarlyBound(0, 'a)])` captures lifetime that does not appear in bounds\n+error[E0700]: hidden type for `Opaque(DefId(0:13 ~ impl_trait_captures[1afc]::foo::{opaque#0}), [ReStatic, T, ReEarlyBound(0, 'a)])` captures lifetime that does not appear in bounds\n   --> $DIR/impl-trait-captures.rs:11:5\n    |\n LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> {\n-   |                  -- hidden type `&ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:13 ~ impl_trait_captures[1afc]::foo::'_), '_)) T` captures the anonymous lifetime defined here\n+   |                  -- hidden type `&ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:12 ~ impl_trait_captures[1afc]::foo::'_), '_)) T` captures the anonymous lifetime defined here\n LL |     x\n    |     ^\n    |\n-help: to declare that the `impl Trait` captures `ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:13 ~ impl_trait_captures[1afc]::foo::'_), '_))`, you can add an explicit `ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:13 ~ impl_trait_captures[1afc]::foo::'_), '_))` lifetime bound\n+help: to declare that the `impl Trait` captures `ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:12 ~ impl_trait_captures[1afc]::foo::'_), '_))`, you can add an explicit `ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:12 ~ impl_trait_captures[1afc]::foo::'_), '_))` lifetime bound\n    |\n-LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> + ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:13 ~ impl_trait_captures[1afc]::foo::'_), '_)) {\n+LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> + ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:12 ~ impl_trait_captures[1afc]::foo::'_), '_)) {\n    |                                      ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n \n error: aborting due to previous error"}, {"sha": "fe4e91081301304559a389d49f2b219b7e1f29d9", "filename": "src/test/ui/rfc-2632-const-trait-impl/issue-102156.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/de341fe668fd821f701ca970c897d167104f0a17/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-102156.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de341fe668fd821f701ca970c897d167104f0a17/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-102156.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-102156.rs?ref=de341fe668fd821f701ca970c897d167104f0a17", "patch": "@@ -0,0 +1,15 @@\n+#![feature(allocator_api)]\n+#![feature(const_trait_impl)]\n+\n+use core::convert::{From, TryFrom};\n+//~^ ERROR\n+//~| ERROR\n+\n+use std::pin::Pin;\n+use std::alloc::Allocator;\n+impl<T: ?Sized, A: Allocator> const From<Box<T, A>> for Pin<Box<T, A>>\n+where\n+    A: 'static,\n+{}\n+\n+pub fn main() {}"}, {"sha": "8bf00eaff1fb92be600685c32095f8950453bb42", "filename": "src/test/ui/rfc-2632-const-trait-impl/issue-102156.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/de341fe668fd821f701ca970c897d167104f0a17/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-102156.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de341fe668fd821f701ca970c897d167104f0a17/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-102156.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-102156.stderr?ref=de341fe668fd821f701ca970c897d167104f0a17", "patch": "@@ -0,0 +1,19 @@\n+error[E0433]: failed to resolve: maybe a missing crate `core`?\n+  --> $DIR/issue-102156.rs:4:5\n+   |\n+LL | use core::convert::{From, TryFrom};\n+   |     ^^^^ maybe a missing crate `core`?\n+   |\n+   = help: consider adding `extern crate core` to use the `core` crate\n+\n+error[E0433]: failed to resolve: maybe a missing crate `core`?\n+  --> $DIR/issue-102156.rs:4:5\n+   |\n+LL | use core::convert::{From, TryFrom};\n+   |     ^^^^ maybe a missing crate `core`?\n+   |\n+   = help: consider adding `extern crate core` to use the `core` crate\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0433`."}]}