{"sha": "0d4604dc05acd45d2401f4973d6085a4eba50016", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkNDYwNGRjMDVhY2Q0NWQyNDAxZjQ5NzNkNjA4NWE0ZWJhNTAwMTY=", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-05-12T23:41:22Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-05-12T23:41:22Z"}, "message": "Added `cargo collect-metadata` as a alias for the metadata collection lint", "tree": {"sha": "b1d45203b9cf5fad14faa2e3c234d731ff909d78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1d45203b9cf5fad14faa2e3c234d731ff909d78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d4604dc05acd45d2401f4973d6085a4eba50016", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d4604dc05acd45d2401f4973d6085a4eba50016", "html_url": "https://github.com/rust-lang/rust/commit/0d4604dc05acd45d2401f4973d6085a4eba50016", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d4604dc05acd45d2401f4973d6085a4eba50016/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa15a5442a975180a367373e563b7f8c626b5344", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa15a5442a975180a367373e563b7f8c626b5344", "html_url": "https://github.com/rust-lang/rust/commit/aa15a5442a975180a367373e563b7f8c626b5344"}], "stats": {"total": 69, "additions": 41, "deletions": 28}, "files": [{"sha": "e95ea224cb681361993f8643bd2be639d420a288", "filename": ".cargo/config", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d4604dc05acd45d2401f4973d6085a4eba50016/.cargo%2Fconfig", "raw_url": "https://github.com/rust-lang/rust/raw/0d4604dc05acd45d2401f4973d6085a4eba50016/.cargo%2Fconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.cargo%2Fconfig?ref=0d4604dc05acd45d2401f4973d6085a4eba50016", "patch": "@@ -2,6 +2,7 @@\n uitest = \"test --test compile-test\"\n dev = \"run --target-dir clippy_dev/target --package clippy_dev --bin clippy_dev --manifest-path clippy_dev/Cargo.toml --\"\n lintcheck = \"run --target-dir lintcheck/target --package lintcheck --bin lintcheck --manifest-path lintcheck/Cargo.toml  -- \"\n+collect-metadata = \"test --test dogfood --features metadata-collector-lint -- run_metadata_collection_lint --ignored\"\n \n [build]\n rustflags = [\"-Zunstable-options\"]"}, {"sha": "5d9f128753f105fada9a0dfc3405cd9ea7e7b8ba", "filename": "tests/dogfood.rs", "status": "modified", "additions": 40, "deletions": 28, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/0d4604dc05acd45d2401f4973d6085a4eba50016/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d4604dc05acd45d2401f4973d6085a4eba50016/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=0d4604dc05acd45d2401f4973d6085a4eba50016", "patch": "@@ -22,14 +22,12 @@ fn dogfood_clippy() {\n         return;\n     }\n     let root_dir = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n-    let enable_metadata_collection = std::env::var(\"ENABLE_METADATA_COLLECTION\").unwrap_or_else(|_| \"0\".to_string());\n \n     let mut command = Command::new(&*CLIPPY_PATH);\n     command\n         .current_dir(root_dir)\n         .env(\"CLIPPY_DOGFOOD\", \"1\")\n         .env(\"CARGO_INCREMENTAL\", \"0\")\n-        .env(\"ENABLE_METADATA_COLLECTION\", &enable_metadata_collection)\n         .arg(\"clippy\")\n         .arg(\"--all-targets\")\n         .arg(\"--all-features\")\n@@ -157,10 +155,9 @@ fn dogfood_subprojects() {\n     if cargo::is_rustc_test_suite() {\n         return;\n     }\n-    let root_dir = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n \n     // NOTE: `path_dep` crate is omitted on purpose here\n-    for d in &[\n+    for project in &[\n         \"clippy_workspace_tests\",\n         \"clippy_workspace_tests/src\",\n         \"clippy_workspace_tests/subcrate\",\n@@ -170,34 +167,49 @@ fn dogfood_subprojects() {\n         \"clippy_utils\",\n         \"rustc_tools_util\",\n     ] {\n-        let mut command = Command::new(&*CLIPPY_PATH);\n-        command\n-            .current_dir(root_dir.join(d))\n-            .env(\"CLIPPY_DOGFOOD\", \"1\")\n-            .env(\"CARGO_INCREMENTAL\", \"0\")\n-            .arg(\"clippy\")\n-            .arg(\"--all-targets\")\n-            .arg(\"--all-features\")\n-            .arg(\"--\")\n-            .args(&[\"-D\", \"clippy::all\"])\n-            .args(&[\"-D\", \"clippy::pedantic\"])\n-            .arg(\"-Cdebuginfo=0\"); // disable debuginfo to generate less data in the target dir\n+        run_clippy_for_project(project);\n+    }\n+\n+    // NOTE: Since tests run in parallel we can't run cargo commands on the same workspace at the\n+    // same time, so we test this immediately after the dogfood for workspaces.\n+    test_no_deps_ignores_path_deps_in_workspaces();\n+}\n \n-        // internal lints only exist if we build with the internal-lints feature\n-        if cfg!(feature = \"internal-lints\") {\n-            command.args(&[\"-D\", \"clippy::internal\"]);\n-        }\n+#[test]\n+#[ignore]\n+#[cfg(feature = \"metadata-collector-lint\")]\n+fn run_metadata_collection_lint() {\n+    std::env::set_var(\"ENABLE_METADATA_COLLECTION\", \"1\");\n+    run_clippy_for_project(\"clippy_lints\");\n+}\n \n-        let output = command.output().unwrap();\n+fn run_clippy_for_project(project: &str) {\n+    let root_dir = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n \n-        println!(\"status: {}\", output.status);\n-        println!(\"stdout: {}\", String::from_utf8_lossy(&output.stdout));\n-        println!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr));\n+    let mut command = Command::new(&*CLIPPY_PATH);\n \n-        assert!(output.status.success());\n+    command\n+        .current_dir(root_dir.join(project))\n+        .env(\"CLIPPY_DOGFOOD\", \"1\")\n+        .env(\"CARGO_INCREMENTAL\", \"0\")\n+        .arg(\"clippy\")\n+        .arg(\"--all-targets\")\n+        .arg(\"--all-features\")\n+        .arg(\"--\")\n+        .args(&[\"-D\", \"clippy::all\"])\n+        .args(&[\"-D\", \"clippy::pedantic\"])\n+        .arg(\"-Cdebuginfo=0\"); // disable debuginfo to generate less data in the target dir\n+\n+    // internal lints only exist if we build with the internal-lints feature\n+    if cfg!(feature = \"internal-lints\") {\n+        command.args(&[\"-D\", \"clippy::internal\"]);\n     }\n \n-    // NOTE: Since tests run in parallel we can't run cargo commands on the same workspace at the\n-    // same time, so we test this immediately after the dogfood for workspaces.\n-    test_no_deps_ignores_path_deps_in_workspaces();\n+    let output = command.output().unwrap();\n+\n+    println!(\"status: {}\", output.status);\n+    println!(\"stdout: {}\", String::from_utf8_lossy(&output.stdout));\n+    println!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr));\n+\n+    assert!(output.status.success());\n }"}]}