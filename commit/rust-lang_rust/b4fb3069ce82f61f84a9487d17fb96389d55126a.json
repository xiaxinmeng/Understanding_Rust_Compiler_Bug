{"sha": "b4fb3069ce82f61f84a9487d17fb96389d55126a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZmIzMDY5Y2U4MmY2MWY4NGE5NDg3ZDE3ZmI5NjM4OWQ1NTEyNmE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-04-17T15:44:16Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-04-17T16:09:04Z"}, "message": "Replace big JS dict with JSON parsing", "tree": {"sha": "505141f12fa16a8461d0e6716716c5f9174cc8e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/505141f12fa16a8461d0e6716716c5f9174cc8e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4fb3069ce82f61f84a9487d17fb96389d55126a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4fb3069ce82f61f84a9487d17fb96389d55126a", "html_url": "https://github.com/rust-lang/rust/commit/b4fb3069ce82f61f84a9487d17fb96389d55126a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4fb3069ce82f61f84a9487d17fb96389d55126a/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e4d49d60fd696c4036d438292673a2d7fd34519", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e4d49d60fd696c4036d438292673a2d7fd34519", "html_url": "https://github.com/rust-lang/rust/commit/4e4d49d60fd696c4036d438292673a2d7fd34519"}], "stats": {"total": 46, "additions": 41, "deletions": 5}, "files": [{"sha": "b91aab44f10a256b055be230a1822d88e3584575", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b4fb3069ce82f61f84a9487d17fb96389d55126a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4fb3069ce82f61f84a9487d17fb96389d55126a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=b4fb3069ce82f61f84a9487d17fb96389d55126a", "patch": "@@ -789,6 +789,37 @@ themePicker.onblur = handleThemeButtonsBlur;\n         Ok((ret, krates))\n     }\n \n+    fn collect_json(path: &Path, krate: &str) -> io::Result<(Vec<String>, Vec<String>)> {\n+        let mut ret = Vec::new();\n+        let mut krates = Vec::new();\n+\n+        if path.exists() {\n+            for line in BufReader::new(File::open(path)?).lines() {\n+                let line = line?;\n+                if !line.starts_with(\"\\\"\") {\n+                    continue;\n+                }\n+                if line.starts_with(&format!(\"\\\"{}\\\"\", krate)) {\n+                    continue;\n+                }\n+                if line.ends_with(\",\\\\\") {\n+                    ret.push(line[..line.len() - 2].to_string());\n+                } else {\n+                    // Ends with \"\\\\\" (it's the case for the last added crate line)\n+                    ret.push(line[..line.len() - 1].to_string());\n+                }\n+                krates.push(\n+                    line.split('\"')\n+                        .filter(|s| !s.is_empty())\n+                        .next()\n+                        .map(|s| s.to_owned())\n+                        .unwrap_or_else(String::new),\n+                );\n+            }\n+        }\n+        Ok((ret, krates))\n+    }\n+\n     fn show_item(item: &IndexItem, krate: &str) -> String {\n         format!(\n             \"{{'crate':'{}','ty':{},'name':'{}','desc':'{}','p':'{}'{}}}\",\n@@ -909,18 +940,18 @@ themePicker.onblur = handleThemeButtonsBlur;\n \n     // Update the search index\n     let dst = cx.dst.join(&format!(\"search-index{}.js\", cx.shared.resource_suffix));\n-    let (mut all_indexes, mut krates) = try_err!(collect(&dst, &krate.name, \"searchIndex\"), &dst);\n+    let (mut all_indexes, mut krates) = try_err!(collect_json(&dst, &krate.name), &dst);\n     all_indexes.push(search_index);\n \n     // Sort the indexes by crate so the file will be generated identically even\n     // with rustdoc running in parallel.\n     all_indexes.sort();\n     {\n-        let mut v = String::from(\"var searchIndex={};\\n\");\n-        v.push_str(&all_indexes.join(\"\\n\"));\n+        let mut v = String::from(\"var searchIndex = JSON.parse('{\\\\\\n\");\n+        v.push_str(&all_indexes.join(\",\\\\\\n\"));\n         // \"addSearchOptions\" has to be called first so the crate filtering can be set before the\n         // search might start (if it's set into the URL for example).\n-        v.push_str(\"\\naddSearchOptions(searchIndex);initSearch(searchIndex);\");\n+        v.push_str(\"\\\\\\n}');\\naddSearchOptions(searchIndex);initSearch(searchIndex);\");\n         cx.shared.fs.write(&dst, &v)?;\n     }\n     if options.enable_index_page {"}, {"sha": "03aa5d519c6f2abdb3543b679cc72bb33e373521", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4fb3069ce82f61f84a9487d17fb96389d55126a/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4fb3069ce82f61f84a9487d17fb96389d55126a/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=b4fb3069ce82f61f84a9487d17fb96389d55126a", "patch": "@@ -631,14 +631,19 @@ fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n \n     // Collect the index into a string\n     format!(\n-        r#\"searchIndex[\"{}\"] = {};\"#,\n+        r#\"\"{}\":{}\"#,\n         krate.name,\n         serde_json::to_string(&CrateData {\n             doc: crate_doc,\n             items: crate_items,\n             paths: crate_paths,\n         })\n         .expect(\"failed serde conversion\")\n+        // All these `replace` calls are because we have to go through JS string for JSON content.\n+        .replace(r\"\\\", r\"\\\\\")\n+        .replace(\"'\", r\"\\'\")\n+        // We need to escape double quotes for the JSON.\n+        .replace(\"\\\\\\\"\", \"\\\\\\\\\\\"\")\n     )\n }\n "}]}