{"sha": "30f2e96ab1d3f36d115249d932f7e5291e18b911", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwZjJlOTZhYjFkM2YzNmQxMTUyNDlkOTMyZjdlNTI5MWUxOGI5MTE=", "commit": {"author": {"name": "Son", "email": "leson.phung@gmail.com", "date": "2018-10-02T22:21:51Z"}, "committer": {"name": "Son", "email": "leson.phung@gmail.com", "date": "2018-10-02T22:21:51Z"}, "message": "Remove main() in examples", "tree": {"sha": "828e61ff2074bbeee056e2f3264b837cb1ffd638", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/828e61ff2074bbeee056e2f3264b837cb1ffd638"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30f2e96ab1d3f36d115249d932f7e5291e18b911", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30f2e96ab1d3f36d115249d932f7e5291e18b911", "html_url": "https://github.com/rust-lang/rust/commit/30f2e96ab1d3f36d115249d932f7e5291e18b911", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30f2e96ab1d3f36d115249d932f7e5291e18b911/comments", "author": {"login": "phungleson", "id": 93457, "node_id": "MDQ6VXNlcjkzNDU3", "avatar_url": "https://avatars.githubusercontent.com/u/93457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phungleson", "html_url": "https://github.com/phungleson", "followers_url": "https://api.github.com/users/phungleson/followers", "following_url": "https://api.github.com/users/phungleson/following{/other_user}", "gists_url": "https://api.github.com/users/phungleson/gists{/gist_id}", "starred_url": "https://api.github.com/users/phungleson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phungleson/subscriptions", "organizations_url": "https://api.github.com/users/phungleson/orgs", "repos_url": "https://api.github.com/users/phungleson/repos", "events_url": "https://api.github.com/users/phungleson/events{/privacy}", "received_events_url": "https://api.github.com/users/phungleson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phungleson", "id": 93457, "node_id": "MDQ6VXNlcjkzNDU3", "avatar_url": "https://avatars.githubusercontent.com/u/93457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phungleson", "html_url": "https://github.com/phungleson", "followers_url": "https://api.github.com/users/phungleson/followers", "following_url": "https://api.github.com/users/phungleson/following{/other_user}", "gists_url": "https://api.github.com/users/phungleson/gists{/gist_id}", "starred_url": "https://api.github.com/users/phungleson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phungleson/subscriptions", "organizations_url": "https://api.github.com/users/phungleson/orgs", "repos_url": "https://api.github.com/users/phungleson/repos", "events_url": "https://api.github.com/users/phungleson/events{/privacy}", "received_events_url": "https://api.github.com/users/phungleson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7cc1fccbd49a45a4d99a4c4ccdad16972b235bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7cc1fccbd49a45a4d99a4c4ccdad16972b235bf", "html_url": "https://github.com/rust-lang/rust/commit/a7cc1fccbd49a45a4d99a4c4ccdad16972b235bf"}], "stats": {"total": 76, "additions": 30, "deletions": 46}, "files": [{"sha": "1b872664e8d131bd4a05a8e2622ae3799710dc81", "filename": "src/libstd/error.rs", "status": "modified", "additions": 30, "deletions": 46, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/30f2e96ab1d3f36d115249d932f7e5291e18b911/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30f2e96ab1d3f36d115249d932f7e5291e18b911/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=30f2e96ab1d3f36d115249d932f7e5291e18b911", "patch": "@@ -176,12 +176,10 @@ impl<'a, E: Error + 'a> From<E> for Box<dyn Error + 'a> {\n     ///     }\n     /// }\n     ///\n-    /// fn main() {\n-    ///     let an_error = AnError;\n-    ///     assert!(0 == mem::size_of_val(&an_error));\n-    ///     let a_boxed_error = Box::<Error>::from(an_error);\n-    ///     assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n-    /// }\n+    /// let an_error = AnError;\n+    /// assert!(0 == mem::size_of_val(&an_error));\n+    /// let a_boxed_error = Box::<Error>::from(an_error);\n+    /// assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n     /// ```\n     fn from(err: E) -> Box<dyn Error + 'a> {\n         Box::new(err)\n@@ -219,13 +217,11 @@ impl<'a, E: Error + Send + Sync + 'a> From<E> for Box<dyn Error + Send + Sync +\n     ///\n     /// unsafe impl Sync for AnError {}\n     ///\n-    /// fn main() {\n-    ///     let an_error = AnError;\n-    ///     assert!(0 == mem::size_of_val(&an_error));\n-    ///     let a_boxed_error = Box::<Error + Send + Sync>::from(an_error);\n-    ///     assert!(\n-    ///         mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n-    /// }\n+    /// let an_error = AnError;\n+    /// assert!(0 == mem::size_of_val(&an_error));\n+    /// let a_boxed_error = Box::<Error + Send + Sync>::from(an_error);\n+    /// assert!(\n+    ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n     /// ```\n     fn from(err: E) -> Box<dyn Error + Send + Sync + 'a> {\n         Box::new(err)\n@@ -242,12 +238,10 @@ impl From<String> for Box<dyn Error + Send + Sync> {\n     /// use std::error::Error;\n     /// use std::mem;\n     ///\n-    /// fn main() {\n-    ///     let a_string_error = \"a string error\".to_string();\n-    ///     let a_boxed_error = Box::<Error + Send + Sync>::from(a_string_error);\n-    ///     assert!(\n-    ///         mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n-    /// }\n+    /// let a_string_error = \"a string error\".to_string();\n+    /// let a_boxed_error = Box::<Error + Send + Sync>::from(a_string_error);\n+    /// assert!(\n+    ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n     /// ```\n     fn from(err: String) -> Box<dyn Error + Send + Sync> {\n         #[derive(Debug)]\n@@ -277,11 +271,9 @@ impl From<String> for Box<dyn Error> {\n     /// use std::error::Error;\n     /// use std::mem;\n     ///\n-    /// fn main() {\n-    ///     let a_string_error = \"a string error\".to_string();\n-    ///     let a_boxed_error = Box::<Error>::from(a_string_error);\n-    ///     assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n-    /// }\n+    /// let a_string_error = \"a string error\".to_string();\n+    /// let a_boxed_error = Box::<Error>::from(a_string_error);\n+    /// assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n     /// ```\n     fn from(str_err: String) -> Box<dyn Error> {\n         let err1: Box<dyn Error + Send + Sync> = From::from(str_err);\n@@ -300,12 +292,10 @@ impl<'a, 'b> From<&'b str> for Box<dyn Error + Send + Sync + 'a> {\n     /// use std::error::Error;\n     /// use std::mem;\n     ///\n-    /// fn main() {\n-    ///     let a_str_error = \"a str error\";\n-    ///     let a_boxed_error = Box::<Error + Send + Sync>::from(a_str_error);\n-    ///     assert!(\n-    ///         mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n-    /// }\n+    /// let a_str_error = \"a str error\";\n+    /// let a_boxed_error = Box::<Error + Send + Sync>::from(a_str_error);\n+    /// assert!(\n+    ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n     /// ```\n     fn from(err: &'b str) -> Box<dyn Error + Send + Sync + 'a> {\n         From::from(String::from(err))\n@@ -322,11 +312,9 @@ impl<'a> From<&'a str> for Box<dyn Error> {\n     /// use std::error::Error;\n     /// use std::mem;\n     ///\n-    /// fn main() {\n-    ///     let a_str_error = \"a str error\";\n-    ///     let a_boxed_error = Box::<Error>::from(a_str_error);\n-    ///     assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n-    /// }\n+    /// let a_str_error = \"a str error\";\n+    /// let a_boxed_error = Box::<Error>::from(a_str_error);\n+    /// assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n     /// ```\n     fn from(err: &'a str) -> Box<dyn Error> {\n         From::from(String::from(err))\n@@ -344,12 +332,10 @@ impl<'a, 'b> From<Cow<'b, str>> for Box<dyn Error + Send + Sync + 'a> {\n     /// use std::mem;\n     /// use std::borrow::Cow;\n     ///\n-    /// fn main() {\n-    ///     let a_cow_str_error = Cow::from(\"a str error\");\n-    ///     let a_boxed_error = Box::<Error + Send + Sync>::from(a_cow_str_error);\n-    ///     assert!(\n-    ///         mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n-    /// }\n+    /// let a_cow_str_error = Cow::from(\"a str error\");\n+    /// let a_boxed_error = Box::<Error + Send + Sync>::from(a_cow_str_error);\n+    /// assert!(\n+    ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n     /// ```\n     fn from(err: Cow<'b, str>) -> Box<dyn Error + Send + Sync + 'a> {\n         From::from(String::from(err))\n@@ -367,11 +353,9 @@ impl<'a> From<Cow<'a, str>> for Box<dyn Error> {\n     /// use std::mem;\n     /// use std::borrow::Cow;\n     ///\n-    /// fn main() {\n-    ///     let a_cow_str_error = Cow::from(\"a str error\");\n-    ///     let a_boxed_error = Box::<Error>::from(a_cow_str_error);\n-    ///     assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n-    /// }\n+    /// let a_cow_str_error = Cow::from(\"a str error\");\n+    /// let a_boxed_error = Box::<Error>::from(a_cow_str_error);\n+    /// assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n     /// ```\n     fn from(err: Cow<'a, str>) -> Box<dyn Error> {\n         From::from(String::from(err))"}]}