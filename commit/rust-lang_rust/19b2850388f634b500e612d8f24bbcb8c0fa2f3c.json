{"sha": "19b2850388f634b500e612d8f24bbcb8c0fa2f3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5YjI4NTAzODhmNjM0YjUwMGU2MTJkOGYyNGJiY2I4YzBmYTJmM2M=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-02-25T03:24:12Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-02-25T03:25:05Z"}, "message": "rustc: Perform type parameter substitutions when emitting glue for generic tags. Un-XFAIL generic-tag.rs.", "tree": {"sha": "095312cd808b89226569f7bd4594b285e277d15a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/095312cd808b89226569f7bd4594b285e277d15a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19b2850388f634b500e612d8f24bbcb8c0fa2f3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19b2850388f634b500e612d8f24bbcb8c0fa2f3c", "html_url": "https://github.com/rust-lang/rust/commit/19b2850388f634b500e612d8f24bbcb8c0fa2f3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19b2850388f634b500e612d8f24bbcb8c0fa2f3c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88f0463c2bd6e7fd2af461afc5e83bd3417e3bc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/88f0463c2bd6e7fd2af461afc5e83bd3417e3bc5", "html_url": "https://github.com/rust-lang/rust/commit/88f0463c2bd6e7fd2af461afc5e83bd3417e3bc5"}], "stats": {"total": 88, "additions": 56, "deletions": 32}, "files": [{"sha": "1f5901ba405cfa13be910fc2c0b7f41cc5d6bfd3", "filename": "src/Makefile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19b2850388f634b500e612d8f24bbcb8c0fa2f3c/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/19b2850388f634b500e612d8f24bbcb8c0fa2f3c/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=19b2850388f634b500e612d8f24bbcb8c0fa2f3c", "patch": "@@ -468,7 +468,6 @@ TEST_XFAILS_RUSTC := $(addprefix test/run-pass/, \\\n                         generic-recursive-tag.rs \\\n                         generic-tag-alt.rs \\\n                         generic-tag-values.rs \\\n-                        generic-tag.rs \\\n                         integral-indexing.rs \\\n                         iter-range.rs \\\n                         iter-ret.rs \\"}, {"sha": "467aaa0df0ed7900dbab04b6b4cafc66427c9f3a", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/19b2850388f634b500e612d8f24bbcb8c0fa2f3c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b2850388f634b500e612d8f24bbcb8c0fa2f3c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=19b2850388f634b500e612d8f24bbcb8c0fa2f3c", "patch": "@@ -1,3 +1,4 @@\n+import std._int;\n import std._str;\n import std._uint;\n import std._vec;\n@@ -61,7 +62,8 @@ type glue_fns = rec(ValueRef activate_glue,\n tag arity { nullary; n_ary; }\n type tag_info = rec(type_handle th,\n                     mutable vec[tup(ast.def_id,arity)] variants,\n-                    mutable uint size);\n+                    mutable uint size,\n+                    vec[ast.ty_param] ty_params);\n \n state type crate_ctxt = rec(session.session sess,\n                             ModuleRef llmod,\n@@ -1498,9 +1500,7 @@ fn iter_structural_ty(@block_ctxt cx,\n                 i += 1;\n             }\n         }\n-        case (ty.ty_tag(?tid, _)) {\n-            // TODO: type params!\n-\n+        case (ty.ty_tag(?tid, ?tps)) {\n             check (cx.fcx.ccx.tags.contains_key(tid));\n             auto info = cx.fcx.ccx.tags.get(tid);\n             auto n_variants = _vec.len[tup(ast.def_id,arity)](info.variants);\n@@ -1559,11 +1559,15 @@ fn iter_structural_ty(@block_ctxt cx,\n                                     auto llfldp =\n                                         variant_cx.build.GEP(llvarp, v);\n \n+                                    auto ty_subst = ty.substitute_ty_params(\n+                                        info.ty_params, tps, a.ty);\n+\n                                     auto llfld =\n                                         load_scalar_or_boxed(variant_cx,\n-                                                             llfldp, a.ty);\n+                                                             llfldp,\n+                                                             ty_subst);\n \n-                                    auto res = f(variant_cx, llfld, a.ty);\n+                                    auto res = f(variant_cx, llfld, ty_subst);\n                                     variant_cx = res.bcx;\n                                     j += 1u;\n                                 }\n@@ -4433,13 +4437,14 @@ fn collect_item(&@crate_ctxt cx, @ast.item i) -> @crate_ctxt {\n             cx.items.insert(mid, i);\n         }\n \n-        case (ast.item_tag(_, ?variants, _, ?tag_id)) {\n+        case (ast.item_tag(_, ?variants, ?tps, ?tag_id)) {\n             auto vi = new_def_hash[uint]();\n             auto navi = new_def_hash[uint]();\n             let vec[tup(ast.def_id,arity)] variant_info = vec();\n             cx.tags.insert(tag_id, @rec(th=mk_type_handle(),\n                                         mutable variants=variant_info,\n-                                        mutable size=0u));\n+                                        mutable size=0u,\n+                                        ty_params=tps));\n             cx.items.insert(tag_id, i);\n         }\n "}, {"sha": "02a7ffc241bca7d4de9fbc1e4f07a7bcc157d73b", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/19b2850388f634b500e612d8f24bbcb8c0fa2f3c/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b2850388f634b500e612d8f24bbcb8c0fa2f3c/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=19b2850388f634b500e612d8f24bbcb8c0fa2f3c", "patch": "@@ -1450,7 +1450,7 @@ fn type_err_to_str(&ty.type_err err) -> str {\n     }\n }\n \n-// Type parameter resolution, used in translation\n+// Type parameter resolution, used in translation and typechecking\n \n fn resolve_ty_params(ty_params_and_ty ty_params_and_polyty,\n                      @t monoty) -> vec[@t] {\n@@ -1492,6 +1492,47 @@ fn resolve_ty_params(ty_params_and_ty ty_params_and_polyty,\n     ret result_tys;\n }\n \n+// Performs type parameter replacement using the supplied mapping from\n+// parameter IDs to types.\n+fn replace_type_params(@t typ, hashmap[ast.def_id,@t] param_map) -> @t {\n+    state obj param_replacer(hashmap[ast.def_id,@t] param_map) {\n+        fn fold_simple_ty(@t typ) -> @t {\n+            alt (typ.struct) {\n+                case (ty_param(?param_def)) {\n+                    if (param_map.contains_key(param_def)) {\n+                        ret param_map.get(param_def);\n+                    } else {\n+                        ret typ;\n+                    }\n+                }\n+                case (_) {\n+                    ret typ;\n+                }\n+            }\n+        }\n+    }\n+    auto replacer = param_replacer(param_map);\n+    ret fold_ty(replacer, typ);\n+}\n+\n+// Substitutes the type parameters specified by @ty_params with the\n+// corresponding types in @bound in the given type. The two vectors must have\n+// the same length.\n+fn substitute_ty_params(vec[ast.ty_param] ty_params, vec[@t] bound, @t ty)\n+        -> @t {\n+    auto ty_param_len = _vec.len[ast.ty_param](ty_params);\n+    check (ty_param_len == _vec.len[@t](bound));\n+\n+    auto bindings = common.new_def_hash[@t]();\n+    auto i = 0u;\n+    while (i < ty_param_len) {\n+        bindings.insert(ty_params.(i).id, bound.(i));\n+        i += 1u;\n+    }\n+\n+    ret replace_type_params(ty, bindings);\n+}\n+\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}, {"sha": "40fd0f152023420ddd21f6ef047c37f8416cc1c5", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/19b2850388f634b500e612d8f24bbcb8c0fa2f3c/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b2850388f634b500e612d8f24bbcb8c0fa2f3c/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=19b2850388f634b500e612d8f24bbcb8c0fa2f3c", "patch": "@@ -147,27 +147,6 @@ fn ast_ty_to_ty(ty_getter getter, &@ast.ty ast_ty) -> @ty.t {\n         ret rec(mode=arg.mode, ty=ast_ty_to_ty(getter, arg.ty));\n     }\n \n-    fn replace_type_params(@ty.t t, ty_table param_map) -> @ty.t {\n-        state obj param_replacer(ty_table param_map) {\n-            fn fold_simple_ty(@ty.t t) -> @ty.t {\n-                alt (t.struct) {\n-                    case (ty.ty_param(?param_def)) {\n-                        if (param_map.contains_key(param_def)) {\n-                            ret param_map.get(param_def);\n-                        } else {\n-                            ret t;\n-                        }\n-                    }\n-                    case (_) {\n-                        ret t;\n-                    }\n-                }\n-            }\n-        }\n-        auto replacer = param_replacer(param_map);\n-        ret ty.fold_ty(replacer, t);\n-    }\n-\n     fn instantiate(ty_getter getter, ast.def_id id,\n                    vec[@ast.ty] args) -> @ty.t {\n         // TODO: maybe record cname chains so we can do\n@@ -183,7 +162,7 @@ fn ast_ty_to_ty(ty_getter getter, &@ast.ty ast_ty) -> @ty.t {\n             auto param = params.(i);\n             param_map.insert(param.id, ast_ty_to_ty(getter, arg));\n         }\n-        ret replace_type_params(ty_and_params.ty, param_map);\n+        ret ty.replace_type_params(ty_and_params.ty, param_map);\n     }\n \n     auto mut = ast.imm;"}]}