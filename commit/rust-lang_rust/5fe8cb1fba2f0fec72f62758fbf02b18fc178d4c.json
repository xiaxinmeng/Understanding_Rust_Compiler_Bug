{"sha": "5fe8cb1fba2f0fec72f62758fbf02b18fc178d4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmZThjYjFmYmEyZjBmZWM3MmY2Mjc1OGZiZjAyYjE4ZmMxNzhkNGM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-08T23:20:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-08T23:20:54Z"}, "message": "Merge #7213\n\n7213: Simplify r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "e1dc8f568ac0cfa03fc04b60ab398e2b01105590", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1dc8f568ac0cfa03fc04b60ab398e2b01105590"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fe8cb1fba2f0fec72f62758fbf02b18fc178d4c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf+OjWCRBK7hj4Ov3rIwAAdHIIAKiUqflZvOF0uGUgAqbwBG4I\nyU+YiYt0048j32FJO9y41fdhlSk0WiQdxq14VkGd111rHElhjWCbnsgDNPFt44v1\nPr/81Dq4AGnse3c0UZsXY+bb4X1bcd3NVWKZfMB/SMp6OFunVXblOIOecFdzF40Q\nWysY7H6z+6TWIOqizBzqqR8DF2hg+4Ws79Ebw6Za87URjmN/hjy5YHsdGYIvB7qs\n/pfHo2fbzLSbhusrS10uYup4kgAYGa2L2QvQxKlKgifClMmqaOPm2nfM3biH1+ur\ngd8KUVwGmz8ZXWs8G7JLFFO6resf2EqBeYfvUnWOPYRMlr7agrsmjzXa2Ymk+7M=\n=v2xD\n-----END PGP SIGNATURE-----\n", "payload": "tree e1dc8f568ac0cfa03fc04b60ab398e2b01105590\nparent 056cabf25d3ef7a96220f9f3a6f904b2841feab6\nparent 5889bb27d673e4762490c21ad734e7fd9705d591\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1610148054 +0000\ncommitter GitHub <noreply@github.com> 1610148054 +0000\n\nMerge #7213\n\n7213: Simplify r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fe8cb1fba2f0fec72f62758fbf02b18fc178d4c", "html_url": "https://github.com/rust-lang/rust/commit/5fe8cb1fba2f0fec72f62758fbf02b18fc178d4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fe8cb1fba2f0fec72f62758fbf02b18fc178d4c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "056cabf25d3ef7a96220f9f3a6f904b2841feab6", "url": "https://api.github.com/repos/rust-lang/rust/commits/056cabf25d3ef7a96220f9f3a6f904b2841feab6", "html_url": "https://github.com/rust-lang/rust/commit/056cabf25d3ef7a96220f9f3a6f904b2841feab6"}, {"sha": "5889bb27d673e4762490c21ad734e7fd9705d591", "url": "https://api.github.com/repos/rust-lang/rust/commits/5889bb27d673e4762490c21ad734e7fd9705d591", "html_url": "https://github.com/rust-lang/rust/commit/5889bb27d673e4762490c21ad734e7fd9705d591"}], "stats": {"total": 30, "additions": 8, "deletions": 22}, "files": [{"sha": "b29d1fef9b861108771e4ec7050ee1035e19c1c6", "filename": "crates/ide/src/call_hierarchy.rs", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5fe8cb1fba2f0fec72f62758fbf02b18fc178d4c/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe8cb1fba2f0fec72f62758fbf02b18fc178d4c/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs?ref=5fe8cb1fba2f0fec72f62758fbf02b18fc178d4c", "patch": "@@ -5,7 +5,7 @@ use indexmap::IndexMap;\n use hir::Semantics;\n use ide_db::call_info::FnCallNode;\n use ide_db::RootDatabase;\n-use syntax::{ast, match_ast, AstNode, TextRange};\n+use syntax::{ast, AstNode, TextRange};\n \n use crate::{\n     display::TryToNav, goto_definition, references, FilePosition, NavigationTarget, RangeInfo,\n@@ -57,15 +57,9 @@ pub(crate) fn incoming_calls(db: &RootDatabase, position: FilePosition) -> Optio\n \n         // This target is the containing function\n         if let Some(nav) = syntax.ancestors().find_map(|node| {\n-            match_ast! {\n-                match node {\n-                    ast::Fn(it) => {\n-                        let def = sema.to_def(&it)?;\n-                        def.try_to_nav(sema.db)\n-                    },\n-                    _ => None,\n-                }\n-            }\n+            let fn_ = ast::Fn::cast(node)?;\n+            let def = sema.to_def(&fn_)?;\n+            def.try_to_nav(sema.db)\n         }) {\n             let relative_range = reference.file_range.range;\n             calls.add(&nav, relative_range);\n@@ -91,29 +85,21 @@ pub(crate) fn outgoing_calls(db: &RootDatabase, position: FilePosition) -> Optio\n         .filter_map(|node| FnCallNode::with_node_exact(&node))\n         .filter_map(|call_node| {\n             let name_ref = call_node.name_ref()?;\n-\n-            if let Some(func_target) = match &call_node {\n+            let func_target = match call_node {\n                 FnCallNode::CallExpr(expr) => {\n                     //FIXME: Type::as_callable is broken\n                     let callable = sema.type_of_expr(&expr.expr()?)?.as_callable(db)?;\n                     match callable.kind() {\n-                        hir::CallableKind::Function(it) => {\n-                            let fn_def: hir::Function = it.into();\n-                            let nav = fn_def.try_to_nav(db)?;\n-                            Some(nav)\n-                        }\n+                        hir::CallableKind::Function(it) => it.try_to_nav(db),\n                         _ => None,\n                     }\n                 }\n                 FnCallNode::MethodCallExpr(expr) => {\n                     let function = sema.resolve_method_call(&expr)?;\n                     function.try_to_nav(db)\n                 }\n-            } {\n-                Some((func_target, name_ref.syntax().text_range()))\n-            } else {\n-                None\n-            }\n+            }?;\n+            Some((func_target, name_ref.syntax().text_range()))\n         })\n         .for_each(|(nav, range)| calls.add(&nav, range));\n "}]}