{"sha": "1b0c0eb717fc5457ec1881c6310f7d7c25ba0d19", "node_id": "C_kwDOAAsO6NoAKDFiMGMwZWI3MTdmYzU0NTdlYzE4ODFjNjMxMGY3ZDdjMjViYTBkMTk", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-15T13:23:45Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-15T13:48:00Z"}, "message": "Deny mixing bin crate type with lib crate types\n\nThe produced library would get a main shim too which conflicts with the\nmain shim of the executable linking the library.\n\n```\n$ cat > main1.rs <<EOF\nfn main() {}\npub fn bar() {}\nEOF\n$ cat > main2.rs <<EOF\nextern crate main1;\nfn main() {\n    main1::bar();\n}\nEOF\n$ rustc --crate-type bin --crate-type lib main1.rs\n$ rustc -L. main2.rs\nerror: linking with `cc` failed: exit status: 1\n[...]\n  = note: /usr/bin/ld: /tmp/crate_bin_lib/libmain1.rlib(main1.main1.707747aa-cgu.0.rcgu.o): in function `main':\n          main1.707747aa-cgu.0:(.text.main+0x0): multiple definition of `main'; main2.main2.02a148fe-cgu.0.rcgu.o:main2.02a148fe-cgu.0:(.text.main+0x0): first defined here\n          collect2: error: ld returned 1 exit status\n```", "tree": {"sha": "2150daa9befd6a2701f42a9b584b11d24b57ee8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2150daa9befd6a2701f42a9b584b11d24b57ee8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b0c0eb717fc5457ec1881c6310f7d7c25ba0d19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b0c0eb717fc5457ec1881c6310f7d7c25ba0d19", "html_url": "https://github.com/rust-lang/rust/commit/1b0c0eb717fc5457ec1881c6310f7d7c25ba0d19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b0c0eb717fc5457ec1881c6310f7d7c25ba0d19/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38c22af0153cf8f920c01ef04493e8878401fd18", "url": "https://api.github.com/repos/rust-lang/rust/commits/38c22af0153cf8f920c01ef04493e8878401fd18", "html_url": "https://github.com/rust-lang/rust/commit/38c22af0153cf8f920c01ef04493e8878401fd18"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "c9dd114047b76eda6c0fb10bc249d2cdd82306b9", "filename": "compiler/rustc_builtin_macros/src/proc_macro_harness.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1b0c0eb717fc5457ec1881c6310f7d7c25ba0d19/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0c0eb717fc5457ec1881c6310f7d7c25ba0d19/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs?ref=1b0c0eb717fc5457ec1881c6310f7d7c25ba0d19", "patch": "@@ -56,7 +56,6 @@ pub fn inject(\n     is_proc_macro_crate: bool,\n     has_proc_macro_decls: bool,\n     is_test_crate: bool,\n-    num_crate_types: usize,\n     handler: &rustc_errors::Handler,\n ) -> ast::Crate {\n     let ecfg = ExpansionConfig::default(\"proc_macro\".to_string());\n@@ -81,10 +80,6 @@ pub fn inject(\n         return krate;\n     }\n \n-    if num_crate_types > 1 {\n-        handler.err(\"cannot mix `proc-macro` crate type with others\");\n-    }\n-\n     if is_test_crate {\n         return krate;\n     }"}, {"sha": "34e619540d2724e77a315a4520ce6179ce4610c4", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1b0c0eb717fc5457ec1881c6310f7d7c25ba0d19/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0c0eb717fc5457ec1881c6310f7d7c25ba0d19/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=1b0c0eb717fc5457ec1881c6310f7d7c25ba0d19", "patch": "@@ -382,8 +382,18 @@ pub fn configure_and_expand(\n     });\n \n     let crate_types = sess.crate_types();\n+    let is_executable_crate = crate_types.contains(&CrateType::Executable);\n     let is_proc_macro_crate = crate_types.contains(&CrateType::ProcMacro);\n \n+    if crate_types.len() > 1 {\n+        if is_executable_crate {\n+            sess.err(\"cannot mix `bin` crate type with others\");\n+        }\n+        if is_proc_macro_crate {\n+            sess.err(\"cannot mix `proc-macro` crate type with others\");\n+        }\n+    }\n+\n     // For backwards compatibility, we don't try to run proc macro injection\n     // if rustdoc is run on a proc macro crate without '--crate-type proc-macro' being\n     // specified. This should only affect users who manually invoke 'rustdoc', as\n@@ -400,7 +410,6 @@ pub fn configure_and_expand(\n         msg.emit()\n     } else {\n         krate = sess.time(\"maybe_create_a_macro_crate\", || {\n-            let num_crate_types = crate_types.len();\n             let is_test_crate = sess.opts.test;\n             rustc_builtin_macros::proc_macro_harness::inject(\n                 sess,\n@@ -409,7 +418,6 @@ pub fn configure_and_expand(\n                 is_proc_macro_crate,\n                 has_proc_macro_decls,\n                 is_test_crate,\n-                num_crate_types,\n                 sess.diagnostic(),\n             )\n         });"}]}