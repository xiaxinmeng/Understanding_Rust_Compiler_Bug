{"sha": "97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ZjRlNzAwYzIwY2NjOTVmNGU5ZWQzZDJjOWQzNjhjYmM0YmU0NDU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-06T18:10:16Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-10T18:19:40Z"}, "message": "syntax: Remove `SyntaxExtension::IdentTT` and `IdentMacroExpander`", "tree": {"sha": "b31a6f1c369fccd6605f8f683548c1677cdbec0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b31a6f1c369fccd6605f8f683548c1677cdbec0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445", "html_url": "https://github.com/rust-lang/rust/commit/97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a73ecb3d9c432f8f53117b1a6b6c209dc802dee7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a73ecb3d9c432f8f53117b1a6b6c209dc802dee7", "html_url": "https://github.com/rust-lang/rust/commit/a73ecb3d9c432f8f53117b1a6b6c209dc802dee7"}], "stats": {"total": 65, "additions": 1, "deletions": 64}, "files": [{"sha": "967fdcd2e7d4129c6ca580edd784cf50b4ec0257", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445", "patch": "@@ -4,7 +4,7 @@ use rustc::lint::{EarlyLintPassObject, LateLintPassObject, LintId, Lint};\n use rustc::session::Session;\n use rustc::util::nodemap::FxHashMap;\n \n-use syntax::ext::base::{SyntaxExtension, NamedSyntaxExtension, NormalTT, IdentTT};\n+use syntax::ext::base::{SyntaxExtension, NamedSyntaxExtension, NormalTT};\n use syntax::ext::base::MacroExpanderFn;\n use syntax::symbol::{Symbol, sym};\n use syntax::ast;\n@@ -109,9 +109,6 @@ impl<'a> Registry<'a> {\n                     edition,\n                 }\n             }\n-            IdentTT { expander, span: _, allow_internal_unstable } => {\n-                IdentTT { expander, span: Some(self.krate_span), allow_internal_unstable }\n-            }\n             _ => extension,\n         }));\n     }"}, {"sha": "ffc3212792442d769c3b050c03fb196c74f95045", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445", "patch": "@@ -288,34 +288,6 @@ impl<F> TTMacroExpander for F\n     }\n }\n \n-pub trait IdentMacroExpander {\n-    fn expand<'cx>(&self,\n-                   cx: &'cx mut ExtCtxt<'_>,\n-                   sp: Span,\n-                   ident: ast::Ident,\n-                   token_tree: Vec<tokenstream::TokenTree>)\n-                   -> Box<dyn MacResult+'cx>;\n-}\n-\n-pub type IdentMacroExpanderFn =\n-    for<'cx> fn(&'cx mut ExtCtxt<'_>, Span, ast::Ident, Vec<tokenstream::TokenTree>)\n-                -> Box<dyn MacResult+'cx>;\n-\n-impl<F> IdentMacroExpander for F\n-    where F : for<'cx> Fn(&'cx mut ExtCtxt<'_>, Span, ast::Ident,\n-                          Vec<tokenstream::TokenTree>) -> Box<dyn MacResult+'cx>\n-{\n-    fn expand<'cx>(&self,\n-                   cx: &'cx mut ExtCtxt<'_>,\n-                   sp: Span,\n-                   ident: ast::Ident,\n-                   token_tree: Vec<tokenstream::TokenTree>)\n-                   -> Box<dyn MacResult+'cx>\n-    {\n-        (*self)(cx, sp, ident, token_tree)\n-    }\n-}\n-\n // Use a macro because forwarding to a simple function has type system issues\n macro_rules! make_stmts_default {\n     ($me:expr) => {\n@@ -658,14 +630,6 @@ pub enum SyntaxExtension {\n         edition: Edition,\n     },\n \n-    /// A function-like syntax extension that has an extra ident before\n-    /// the block.\n-    IdentTT {\n-        expander: Box<dyn IdentMacroExpander + sync::Sync + sync::Send>,\n-        span: Option<Span>,\n-        allow_internal_unstable: Option<Lrc<[Symbol]>>,\n-    },\n-\n     /// An attribute-like procedural macro. TokenStream -> TokenStream.\n     /// The input is the annotated item.\n     /// Allows generating code to implement a Trait for a given struct\n@@ -691,7 +655,6 @@ impl SyntaxExtension {\n         match *self {\n             SyntaxExtension::DeclMacro { .. } |\n             SyntaxExtension::NormalTT { .. } |\n-            SyntaxExtension::IdentTT { .. } |\n             SyntaxExtension::ProcMacro { .. } =>\n                 MacroKind::Bang,\n             SyntaxExtension::NonMacroAttr { .. } |\n@@ -725,7 +688,6 @@ impl SyntaxExtension {\n             SyntaxExtension::ProcMacroDerive(.., edition) => edition,\n             // Unstable legacy stuff\n             SyntaxExtension::NonMacroAttr { .. } |\n-            SyntaxExtension::IdentTT { .. } |\n             SyntaxExtension::MultiDecorator(..) |\n             SyntaxExtension::MultiModifier(..) |\n             SyntaxExtension::BuiltinDerive(..) => default_edition,"}, {"sha": "008bcaab88914c49e0790e648b47d2e42fc6047d", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445", "patch": "@@ -791,28 +791,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 }\n             }\n \n-            IdentTT { ref expander, span: tt_span, ref allow_internal_unstable } => {\n-                if ident.name == kw::Invalid {\n-                    self.cx.span_err(path.span,\n-                                    &format!(\"macro {}! expects an ident argument\", path));\n-                    self.cx.trace_macros_diag();\n-                    kind.dummy(span)\n-                } else {\n-                    invoc.expansion_data.mark.set_expn_info(ExpnInfo {\n-                        call_site: span,\n-                        def_site: tt_span,\n-                        format: macro_bang_format(path),\n-                        allow_internal_unstable: allow_internal_unstable.clone(),\n-                        allow_internal_unsafe: false,\n-                        local_inner_macros: false,\n-                        edition: self.cx.parse_sess.edition,\n-                    });\n-\n-                    let input: Vec<_> = mac.node.stream().into_trees().collect();\n-                    kind.make_from(expander.expand(self.cx, span, ident, input))\n-                }\n-            }\n-\n             MultiDecorator(..) | MultiModifier(..) |\n             AttrProcMacro(..) | SyntaxExtension::NonMacroAttr { .. } => {\n                 self.cx.span_err(path.span,"}]}