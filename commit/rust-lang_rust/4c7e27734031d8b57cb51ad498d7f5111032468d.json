{"sha": "4c7e27734031d8b57cb51ad498d7f5111032468d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjN2UyNzczNDAzMWQ4YjU3Y2I1MWFkNDk4ZDdmNTExMTAzMjQ2OGQ=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2017-02-20T19:42:47Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2017-04-05T18:40:11Z"}, "message": "add an #[used] attribute\n\nsimilar to GCC's __attribute((used))__. This attribute prevents LLVM from\noptimizing away a non-exported symbol, within a compilation unit (object file),\nwhen there are no references to it.\n\nThis is better explained with an example:\n\n```\n#[used]\nstatic LIVE: i32 = 0;\n\nstatic REFERENCED: i32 = 0;\n\nstatic DEAD: i32 = 0;\n\nfn internal() {}\n\npub fn exported() -> &'static i32 {\n    &REFERENCED\n}\n```\n\nWithout optimizations, LLVM pretty much preserves all the static variables and\nfunctions within the compilation unit.\n\n```\n$ rustc --crate-type=lib --emit=obj symbols.rs && nm -C symbols.o\n0000000000000000 t drop::h1be0f8f27a2ba94a\n0000000000000000 r symbols::REFERENCED::hb3bdfd46050bc84c\n0000000000000000 r symbols::DEAD::hc2ea8f9bd06f380b\n0000000000000000 r symbols::LIVE::h0970cf9889edb56e\n0000000000000000 T symbols::exported::h6f096c2b1fc292b2\n0000000000000000 t symbols::internal::h0ac1aadbc1e3a494\n```\n\nWith optimizations, LLVM will drop dead code. Here `internal` is dropped because\nit's not a exported function/symbol (i.e. not `pub`lic). `DEAD` is dropped for\nthe same reason. `REFERENCED` is preserved, even though it's not exported,\nbecause it's referenced by the `exported` function. Finally, `LIVE` survives\nbecause of the `#[used]` attribute even though it's not exported or referenced.\n\n```\n$ rustc --crate-type=lib -C opt-level=3 --emit=obj symbols.rs && nm -C symbols.o\n0000000000000000 r symbols::REFERENCED::hb3bdfd46050bc84c\n0000000000000000 r symbols::LIVE::h0970cf9889edb56e\n0000000000000000 T symbols::exported::h6f096c2b1fc292b2\n```\n\nNote that the linker knows nothing about `#[used]` and will drop `LIVE`\nbecause no other object references to it.\n\n```\n$ echo 'fn main() {}' >> symbols.rs\n$ rustc symbols.rs && nm -C symbols | grep LIVE\n```\n\nAt this time, `#[used]` only works on `static` variables.", "tree": {"sha": "40b5aa9f7a262e9e2be02eca163c07b9434a808b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40b5aa9f7a262e9e2be02eca163c07b9434a808b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c7e27734031d8b57cb51ad498d7f5111032468d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c7e27734031d8b57cb51ad498d7f5111032468d", "html_url": "https://github.com/rust-lang/rust/commit/4c7e27734031d8b57cb51ad498d7f5111032468d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c7e27734031d8b57cb51ad498d7f5111032468d/comments", "author": null, "committer": null, "parents": [{"sha": "2564711e803f62e04bebf10408cc1c11297c0caf", "url": "https://api.github.com/repos/rust-lang/rust/commits/2564711e803f62e04bebf10408cc1c11297c0caf", "html_url": "https://github.com/rust-lang/rust/commit/2564711e803f62e04bebf10408cc1c11297c0caf"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "63258b74533179cb0cf63ec9e200ed38df183070", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4c7e27734031d8b57cb51ad498d7f5111032468d/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c7e27734031d8b57cb51ad498d7f5111032468d/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=4c7e27734031d8b57cb51ad498d7f5111032468d", "patch": "@@ -50,7 +50,7 @@ use builder::Builder;\n use callee;\n use common::{C_bool, C_bytes_in_context, C_i32, C_uint};\n use collector::{self, TransItemCollectionMode};\n-use common::{C_struct_in_context, C_u64, C_undef};\n+use common::{C_struct_in_context, C_u64, C_undef, C_array};\n use common::CrateContext;\n use common::{type_is_zero_size, val_ty};\n use common;\n@@ -1187,6 +1187,24 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 }\n             }\n \n+            // Create llvm.used variable\n+            if !ccx.used_statics().borrow().is_empty() {\n+                debug!(\"llvm.used\");\n+\n+                let name = CString::new(\"llvm.used\").unwrap();\n+                let section = CString::new(\"llvm.metadata\").unwrap();\n+                let array = C_array(Type::i8(&ccx).ptr_to(), &*ccx.used_statics().borrow());\n+\n+                unsafe {\n+                    let g = llvm::LLVMAddGlobal(ccx.llmod(),\n+                                                val_ty(array).to_ref(),\n+                                                name.as_ptr());\n+                    llvm::LLVMSetInitializer(g, array);\n+                    llvm::LLVMRustSetLinkage(g, llvm::Linkage::AppendingLinkage);\n+                    llvm::LLVMSetSection(g, section.as_ptr());\n+                }\n+            }\n+\n             // Finalize debuginfo\n             if ccx.sess().opts.debuginfo != NoDebugInfo {\n                 debuginfo::finalize(&ccx);"}, {"sha": "9974155f7c07d4d4eb8880303f1562f5a53481af", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c7e27734031d8b57cb51ad498d7f5111032468d/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c7e27734031d8b57cb51ad498d7f5111032468d/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=4c7e27734031d8b57cb51ad498d7f5111032468d", "patch": "@@ -276,6 +276,10 @@ pub fn trans_static<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n         base::set_link_section(ccx, g, attrs);\n \n+        if attr::contains_name(attrs, \"used\") {\n+            ccx.used_statics().borrow_mut().push(g);\n+        }\n+\n         Ok(g)\n     }\n }"}, {"sha": "2eca0a18e2b380520bcf30ae5097e240e1f2aba3", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4c7e27734031d8b57cb51ad498d7f5111032468d/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c7e27734031d8b57cb51ad498d7f5111032468d/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=4c7e27734031d8b57cb51ad498d7f5111032468d", "patch": "@@ -132,6 +132,8 @@ pub struct LocalCrateContext<'tcx> {\n     /// to constants.)\n     statics_to_rauw: RefCell<Vec<(ValueRef, ValueRef)>>,\n \n+    used_statics: RefCell<Vec<ValueRef>>,\n+\n     lltypes: RefCell<FxHashMap<Ty<'tcx>, Type>>,\n     llsizingtypes: RefCell<FxHashMap<Ty<'tcx>, Type>>,\n     type_hashcodes: RefCell<FxHashMap<Ty<'tcx>, String>>,\n@@ -587,6 +589,7 @@ impl<'tcx> LocalCrateContext<'tcx> {\n                 impl_method_cache: RefCell::new(FxHashMap()),\n                 closure_bare_wrapper_cache: RefCell::new(FxHashMap()),\n                 statics_to_rauw: RefCell::new(Vec::new()),\n+                used_statics: RefCell::new(Vec::new()),\n                 lltypes: RefCell::new(FxHashMap()),\n                 llsizingtypes: RefCell::new(FxHashMap()),\n                 type_hashcodes: RefCell::new(FxHashMap()),\n@@ -754,6 +757,10 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n         &self.local().statics_to_rauw\n     }\n \n+    pub fn used_statics<'a>(&'a self) -> &'a RefCell<Vec<ValueRef>> {\n+        &self.local().used_statics\n+    }\n+\n     pub fn lltypes<'a>(&'a self) -> &'a RefCell<FxHashMap<Ty<'tcx>, Type>> {\n         &self.local().lltypes\n     }"}, {"sha": "66a813025c4376bebeda76bcef2a594bf3cc4a21", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4c7e27734031d8b57cb51ad498d7f5111032468d/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c7e27734031d8b57cb51ad498d7f5111032468d/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=4c7e27734031d8b57cb51ad498d7f5111032468d", "patch": "@@ -337,11 +337,15 @@ declare_features! (\n     // `extern \"x86-interrupt\" fn()`\n     (active, abi_x86_interrupt, \"1.17.0\", Some(40180)),\n \n+\n     // Allows the `catch {...}` expression\n     (active, catch_expr, \"1.17.0\", Some(31436)),\n \n     // See rust-lang/rfcs#1414. Allows code like `let x: &'static u32 = &42` to work.\n     (active, rvalue_static_promotion, \"1.15.1\", Some(38865)),\n+\n+    // Used to preserve symbols\n+    (active, used, \"1.18.0\", None),\n );\n \n declare_features! (\n@@ -748,6 +752,10 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                   \"unwind_attributes\",\n                                   \"#[unwind] is experimental\",\n                                   cfg_fn!(unwind_attributes))),\n+    (\"used\", Whitelisted, Gated(\n+        Stability::Unstable, \"used\",\n+        \"the `#[used]` attribute is an experimental feature\",\n+        cfg_fn!(used))),\n \n     // used in resolve\n     (\"prelude_import\", Whitelisted, Gated(Stability::Unstable,"}]}