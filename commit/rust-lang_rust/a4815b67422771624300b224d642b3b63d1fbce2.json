{"sha": "a4815b67422771624300b224d642b3b63d1fbce2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ODE1YjY3NDIyNzcxNjI0MzAwYjIyNGQ2NDJiM2I2M2QxZmJjZTI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-09-12T23:13:28Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-09-12T23:13:28Z"}, "message": "Factor imports mindlessly.", "tree": {"sha": "cd7c18e70a6350a9f73afe8eb90b8160021a6eb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd7c18e70a6350a9f73afe8eb90b8160021a6eb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4815b67422771624300b224d642b3b63d1fbce2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4815b67422771624300b224d642b3b63d1fbce2", "html_url": "https://github.com/rust-lang/rust/commit/a4815b67422771624300b224d642b3b63d1fbce2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4815b67422771624300b224d642b3b63d1fbce2/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71297a5e178e3f616f3502ac1a365a33c8f20bb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/71297a5e178e3f616f3502ac1a365a33c8f20bb8", "html_url": "https://github.com/rust-lang/rust/commit/71297a5e178e3f616f3502ac1a365a33c8f20bb8"}], "stats": {"total": 1007, "additions": 257, "deletions": 750}, "files": [{"sha": "20b34897162a696aad1c56f4320fcc3e42a84326", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 9, "deletions": 31, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,42 +1,20 @@\n \n \n // -*- rust -*-\n-import metadata::creader;\n-import metadata::cstore;\n-import syntax::parse::parser;\n-import syntax::parse::token;\n-import syntax::ast;\n-import syntax::codemap;\n+import metadata::{creader, cstore};\n+import syntax::parse::{parser, token};\n+import syntax::{ast, codemap};\n import front::attr;\n-import middle::trans;\n-import middle::resolve;\n-import middle::freevars;\n-import middle::kind;\n-import middle::ty;\n-import middle::typeck;\n+import middle::{trans, resolve, freevars, kind, ty, typeck};\n import middle::tstate::ck;\n-import syntax::print::pp;\n-import syntax::print::pprust;\n-import util::ppaux;\n+import syntax::print::{pp, pprust};\n+import util::{ppaux, common};\n import back::link;\n import lib::llvm;\n-import util::common;\n-import std::fs;\n+import std::{fs, option, str, vec, int, io, run, getopts};\n import std::map::mk_hashmap;\n-import std::option;\n-import std::option::some;\n-import std::option::none;\n-import std::str;\n-import std::vec;\n-import std::int;\n-import std::io;\n-import std::run;\n-import std::getopts;\n-import std::getopts::optopt;\n-import std::getopts::optmulti;\n-import std::getopts::optflag;\n-import std::getopts::optflagopt;\n-import std::getopts::opt_present;\n+import std::option::{some, none};\n+import std::getopts::{optopt, optmulti, optflag, optflagopt, opt_present};\n import back::link::output_type;\n \n tag pp_mode { ppm_normal; ppm_expanded; ppm_typed; ppm_identified; }"}, {"sha": "61b29ffb73cb698df4145dfa35127d23294e5c87", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,15 +1,10 @@\n \n-import syntax::ast;\n+import syntax::{ast, codemap};\n import syntax::ast::node_id;\n-import syntax::codemap;\n import codemap::span;\n import syntax::ast::ty_mach;\n-import std::uint;\n-import std::map;\n-import std::option;\n-import std::option::some;\n-import std::option::none;\n-import std::str;\n+import std::{uint, map, option, str};\n+import std::option::{some, none};\n import syntax::parse::parser::parse_sess;\n \n tag os { os_win32; os_macos; os_linux; }"}, {"sha": "a84c74b94f42d112668d208cfde213f980fb2fb6", "filename": "src/comp/front/attr.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Ffront%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Ffront%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fattr.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,11 +1,7 @@\n // Functions dealing with attributes and meta_items\n \n-import std::vec;\n-import std::str;\n-import std::map;\n-import std::option;\n-import syntax::ast;\n-import syntax::ast_util;\n+import std::{vec, str, map, option};\n+import syntax::{ast, ast_util};\n import util::common;\n import driver::session;\n "}, {"sha": "a00a71ddedb3c682e375b9899f6bdb15934c78f2", "filename": "src/comp/front/config.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fconfig.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,7 +1,5 @@\n-import std::vec;\n-import std::option;\n-import syntax::ast;\n-import syntax::fold;\n+import std::{vec, option};\n+import syntax::{ast, fold};\n import attr;\n \n export strip_unconfigured_items;"}, {"sha": "2f68c1fc6710d4dfb4d9d95d0ade4e382abc3445", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,10 +1,7 @@\n // Code that generates a test runner to run all the tests in a crate\n \n-import std::option;\n-import std::vec;\n-import std::str;\n-import syntax::ast;\n-import syntax::ast_util;\n+import std::{option, vec, str};\n+import syntax::{ast, ast_util};\n import syntax::ast_util::*;\n //import syntax::ast_util::dummy_sp;\n import syntax::fold;"}, {"sha": "fa8ad19f92fc998bd6f848146b327a5dd7e4af21", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,28 +1,11 @@\n-import std::vec;\n-import std::str;\n+import std::{vec, str};\n import std::str::sbuf;\n \n-import llvm::ModuleRef;\n-import llvm::ContextRef;\n-import llvm::TypeRef;\n-import llvm::TypeHandleRef;\n-import llvm::ValueRef;\n-import llvm::BasicBlockRef;\n-import llvm::BuilderRef;\n-import llvm::ModuleProviderRef;\n-import llvm::MemoryBufferRef;\n-import llvm::PassManagerRef;\n-import llvm::UseRef;\n-import llvm::TargetDataRef;\n-import llvm::Linkage;\n-import llvm::Attribute;\n-import llvm::Visibility;\n-import llvm::CallConv;\n-import llvm::IntPredicate;\n-import llvm::RealPredicate;\n-import llvm::Opcode;\n-import llvm::ObjectFileRef;\n-import llvm::SectionIteratorRef;\n+import llvm::{ModuleRef, ContextRef, TypeRef, TypeHandleRef, ValueRef,\n+              BasicBlockRef, BuilderRef, ModuleProviderRef, MemoryBufferRef,\n+              PassManagerRef, UseRef, TargetDataRef, Linkage, Attribute,\n+              Visibility, CallConv, IntPredicate, RealPredicate, Opcode,\n+              ObjectFileRef, SectionIteratorRef};\n \n type ULongLong = u64;\n type LongLong = i64;"}, {"sha": "066243476d6d3af3af3badc8482b2accc8311049", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,27 +1,17 @@\n // Extracting metadata from crate files\n \n import driver::session;\n-import syntax::ast;\n-import syntax::ast_util;\n-import lib::llvm::False;\n-import lib::llvm::llvm;\n-import lib::llvm::mk_object_file;\n-import lib::llvm::mk_section_iter;\n+import syntax::{ast, ast_util};\n+import lib::llvm::{False, llvm, mk_object_file, mk_section_iter};\n import front::attr;\n import middle::resolve;\n import syntax::visit;\n import syntax::codemap::span;\n import back::x86;\n import util::common;\n-import std::vec;\n-import std::str;\n-import std::fs;\n-import std::io;\n-import std::option;\n-import std::option::none;\n-import std::option::some;\n-import std::map::hashmap;\n-import std::map::new_int_hash;\n+import std::{vec, str, fs, io, option};\n+import std::option::{none, some};\n+import std::map::{hashmap, new_int_hash};\n import syntax::print::pprust;\n import common::*;\n "}, {"sha": "ee80b11fb5b59dce58d686d7c41d7c0a63cf1dfb", "filename": "src/comp/metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcstore.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,9 +1,7 @@\n // The crate store - a central repo for information collected about external\n // crates and libraries\n \n-import std::vec;\n-import std::map;\n-import std::str;\n+import std::{vec, map, str};\n import syntax::ast;\n \n export cstore;"}, {"sha": "ca3b4f4e2c5e6286918b5ef10c8cf2b7d1ea57bd", "filename": "src/comp/metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fdecoder.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,18 +1,12 @@\n // Decoding metadata from a single crate's metadata\n \n-import std::ebml;\n-import std::vec;\n-import std::option;\n-import std::str;\n-import std::io;\n+import std::{ebml, vec, option, str, io};\n import std::map::hashmap;\n-import syntax::ast;\n-import syntax::ast_util;\n+import syntax::{ast, ast_util};\n import front::attr;\n import middle::ty;\n import common::*;\n-import tydecode::parse_def_id;\n-import tydecode::parse_ty_data;\n+import tydecode::{parse_def_id, parse_ty_data};\n import driver::session;\n import syntax::print::pprust;\n import cstore;"}, {"sha": "115e50635855ce4ffcbda81a8a286e16c9b855b5", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,14 +1,7 @@\n // Metadata encoding\n \n-import std::vec;\n-import std::str;\n-import std::uint;\n-import std::io;\n-import std::option;\n-import std::option::some;\n-import std::option::none;\n-import std::ebml;\n-import std::map;\n+import std::{vec, str, uint, io, option, ebml, map};\n+import std::option::{some, none};\n import syntax::ast::*;\n import syntax::ast_util;\n import syntax::ast_util::local_def;"}, {"sha": "883fd0328f2933bdd663e9424b608c387f8da846", "filename": "src/comp/metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftydecode.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,11 +1,7 @@\n // Type decoding\n \n-import std::vec;\n-import std::str;\n-import std::uint;\n-import std::option;\n-import std::option::none;\n-import std::option::some;\n+import std::{vec, str, uint, option};\n+import std::option::{none, some};\n import syntax::ast;\n import syntax::ast::*;\n import syntax::ast_util;"}, {"sha": "32bcefa0442508b2d2ea0fb1e1cee1ad7db88120", "filename": "src/comp/metadata/tyencode.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftyencode.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,12 +1,8 @@\n // Type encoding\n \n-import std::str;\n-import std::io;\n+import std::{str, io, int, uint};\n import std::map::hashmap;\n-import std::option::some;\n-import std::option::none;\n-import std::int;\n-import std::uint;\n+import std::option::{some, none};\n import syntax::ast::*;\n import middle::ty;\n import syntax::print::pprust::*;"}, {"sha": "47abdbbfe46330cf1793907ebd0c52a6245a03b8", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,20 +1,12 @@\n \n-import syntax::ast;\n-import syntax::ast_util;\n-import ast::ident;\n-import ast::fn_ident;\n-import ast::node_id;\n-import ast::def_id;\n+import syntax::{ast, ast_util};\n+import ast::{ident, fn_ident, node_id, def_id};\n import mut::{expr_root, mut_field, inner_mut};\n import syntax::codemap::span;\n import syntax::visit;\n import visit::vt;\n-import std::vec;\n-import std::str;\n-import std::option;\n-import std::option::some;\n-import std::option::none;\n-import std::option::is_none;\n+import std::{vec, str, option};\n+import std::option::{some, none, is_none};\n \n // This is not an alias-analyser (though it would merit from becoming one, or\n // getting input from one, to be more precise). It is a pass that checks"}, {"sha": "53274625298e039ae78b038d3c71ff2aa83b6466", "filename": "src/comp/middle/ast_map.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fast_map.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,8 +1,6 @@\n-import std::smallintmap;\n-import std::option;\n+import std::{smallintmap, option};\n import syntax::ast::*;\n-import syntax::visit;\n-import syntax::codemap;\n+import syntax::{visit, codemap};\n import visit::vt;\n \n tag ast_node {"}, {"sha": "354d23f38f6f005024563d1d25ef8f423a27f67c", "filename": "src/comp/middle/check_alt.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fcheck_alt.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,6 +1,5 @@\n import syntax::ast::*;\n-import syntax::ast_util::variant_def_ids;\n-import syntax::ast_util::dummy_sp;\n+import syntax::ast_util::{variant_def_ids, dummy_sp};\n import syntax::visit;\n \n fn check_crate(tcx: ty::ctxt, crate: @crate) {"}, {"sha": "e0a05a9f63ea3957066d22e8b05b62e4eae104df", "filename": "src/comp/middle/freevars.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffreevars.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,15 +1,10 @@\n // A pass that annotates for each loops and functions with the free\n // variables that they contain.\n \n-import std::map;\n+import std::{map, option, int, str};\n import std::map::*;\n-import std::option;\n-import std::int;\n-import std::str;\n import std::option::*;\n-import syntax::ast;\n-import syntax::ast_util;\n-import syntax::visit;\n+import syntax::{ast, ast_util, visit};\n import driver::session;\n import middle::resolve;\n import syntax::codemap::span;"}, {"sha": "8c77a7d06eeb63b5e4d0528de9c74d6f66cb8939", "filename": "src/comp/middle/gc.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fgc.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,18 +1,13 @@\n // Routines useful for garbage collection.\n \n-import lib::llvm::False;\n-import lib::llvm::True;\n+import lib::llvm::{True, False};\n import lib::llvm::llvm::ValueRef;\n import middle::trans;\n import middle::trans::{get_tydesc, tps_normal};\n import middle::trans_common::*;\n import middle::ty;\n-import std::option::none;\n-import std::option::some;\n-import std::ptr;\n-import std::str;\n-import std::unsafe;\n-import std::vec;\n+import std::option::{some, none};\n+import std::{ptr, str, unsafe, vec};\n \n import lll = lib::llvm::llvm;\n import bld = trans_build;"}, {"sha": "4e7ed2fd95999783b45ca33c04d9274fc3d059ac", "filename": "src/comp/middle/kind.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fkind.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -70,19 +70,9 @@\n *\n */\n \n-\n-import syntax::ast;\n-import syntax::ast_util;\n-import syntax::visit;\n-\n-import std::vec;\n-import std::option;\n-import std::str;\n-\n-import ast::kind;\n-import ast::kind_unique;\n-import ast::kind_shared;\n-import ast::kind_pinned;\n+import syntax::{ast, ast_util, visit};\n+import std::{vec, option, str};\n+import ast::{kind, kind_unique, kind_shared, kind_pinned};\n \n fn kind_lteq(a: kind, b: kind) -> bool {\n     alt a {"}, {"sha": "ae5996ffadb4aca9a68d38fbe2535bb4b8cf5042", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 9, "deletions": 26, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,38 +1,21 @@\n \n-import syntax::ast;\n+import syntax::{ast, ast_util, codemap};\n import syntax::ast::*;\n-import syntax::ast_util;\n-import syntax::codemap;\n-import ast::ident;\n-import ast::fn_ident;\n-import ast::def;\n-import ast::def_id;\n-import ast::node_id;\n-import syntax::ast_util::local_def;\n-\n-import metadata::csearch;\n-import metadata::cstore;\n+import ast::{ident, fn_ident, def, def_id, node_id};\n+import syntax::ast_util::{local_def, respan};\n+\n+import metadata::{csearch, cstore};\n import driver::session::session;\n import util::common::*;\n-import std::map::new_int_hash;\n-import std::map::new_str_hash;\n+import std::map::{new_int_hash, new_str_hash};\n import syntax::codemap::span;\n-import syntax::ast_util::respan;\n import middle::ty::constr_table;\n import syntax::visit;\n import visit::vt;\n-import std::vec;\n-import std::int;\n+import std::{vec, int, list, option, str};\n import std::map::hashmap;\n-import std::list;\n-import std::list::list;\n-import std::list::nil;\n-import std::list::cons;\n-import std::option;\n-import std::option::is_none;\n-import std::option::some;\n-import std::option::none;\n-import std::str;\n+import std::list::{list, nil, cons};\n+import std::option::{some, none, is_none};\n import syntax::print::pprust::*;\n \n export resolve_crate;"}, {"sha": "973063207b2fd1b9198b98cc25c29d60fde15b86", "filename": "src/comp/middle/shape.rs", "status": "modified", "additions": 7, "deletions": 20, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fshape.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -2,35 +2,22 @@\n // This substitutes for the runtime tags used by e.g. MLs.\n \n import lib::llvm::True;\n-import lib::llvm::llvm::ModuleRef;\n-import lib::llvm::llvm::TypeRef;\n-import lib::llvm::llvm::ValueRef;\n-import middle::trans;\n-import middle::trans_common::crate_ctxt;\n+import lib::llvm::llvm::{ModuleRef, TypeRef, ValueRef};\n+import middle::{trans, trans_common};\n import middle::trans::llsize_of;\n-import middle::trans_common::val_ty;\n-import middle::trans_common;\n-import middle::trans_common::C_bytes;\n-import middle::trans_common::C_int;\n-import middle::trans_common::C_named_struct;\n-import middle::trans_common::C_struct;\n-import middle::trans_common::C_uint;\n-import middle::trans_common::T_i8;\n-import middle::trans_common::T_ptr;\n+import middle::trans_common::{crate_ctxt, val_ty, C_bytes, C_int,\n+                              C_named_struct, C_struct, C_uint, T_i8, T_ptr};\n import middle::ty;\n-import middle::ty::field;\n-import middle::ty::mt;\n+import middle::ty::{field, mt};\n import syntax::ast;\n import syntax::ast_util::dummy_sp;\n import syntax::codemap::span;\n import syntax::util::interner;\n import util::common;\n \n-import std::vec;\n+import std::{vec, str};\n import std::map::hashmap;\n-import std::option::none;\n-import std::option::some;\n-import std::str;\n+import std::option::{none, some};\n \n import ty_ctxt = middle::ty::ctxt;\n "}, {"sha": "2ce9e94ea9a84d0e7d3a83d76873f784a91027d3", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 21, "deletions": 49, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -12,66 +12,38 @@\n //     pcwalton).  You can, instead, find out its TypeRef by calling val_ty,\n //     but many TypeRefs correspond to one ty::t; for instance, tup(int, int,\n //     int) and rec(x=int, y=int, z=int) will have the same TypeRef.\n-import std::int;\n-import std::str;\n-import std::uint;\n-import std::map;\n+import std::{int, str, uint, map, option, fs, time, vec};\n import std::map::hashmap;\n-import std::option;\n-import std::option::some;\n-import std::option::none;\n-import std::fs;\n-import std::time;\n-import std::vec;\n-import syntax::ast;\n-import syntax::ast_util;\n+import std::map::{new_int_hash, new_str_hash};\n+import std::option::{some, none};\n import driver::session;\n-import middle::ty;\n+import middle::{ty, gc};\n import middle::freevars::*;\n-import middle::gc;\n-import back::link;\n-import back::x86;\n-import back::abi;\n-import back::upcall;\n+import back::{link, x86, abi, upcall};\n+import syntax::{ast, ast_util};\n import syntax::visit;\n+import syntax::codemap::span;\n+import syntax::print::pprust::{expr_to_str, path_to_str};\n import visit::vt;\n import util::common;\n import util::common::*;\n-import std::map::new_int_hash;\n-import std::map::new_str_hash;\n-import syntax::codemap::span;\n-import lib::llvm::llvm;\n-import lib::llvm::target_data;\n-import lib::llvm::type_names;\n-import lib::llvm::mk_target_data;\n-import lib::llvm::mk_type_names;\n-import lib::llvm::llvm::ModuleRef;\n-import lib::llvm::llvm::ValueRef;\n-import lib::llvm::llvm::TypeRef;\n-import lib::llvm::llvm::TypeHandleRef;\n-import lib::llvm::llvm::BuilderRef;\n-import lib::llvm::llvm::BasicBlockRef;\n-import lib::llvm::False;\n-import lib::llvm::True;\n-import lib::llvm::Bool;\n-import link::mangle_internal_name_by_type_only;\n-import link::mangle_internal_name_by_seq;\n-import link::mangle_internal_name_by_path;\n-import link::mangle_internal_name_by_path_and_seq;\n-import link::mangle_exported_name;\n-import metadata::creader;\n-import metadata::csearch;\n-import metadata::cstore;\n-import util::ppaux::ty_to_str;\n-import util::ppaux::ty_to_short_str;\n-import syntax::print::pprust::expr_to_str;\n-import syntax::print::pprust::path_to_str;\n+import lib::llvm::{llvm, target_data, type_names,\n+                   mk_target_data, mk_type_names};\n+import lib::llvm::llvm::{ModuleRef, ValueRef, TypeRef, TypeHandleRef, \n+                         BuilderRef, BasicBlockRef};\n+import lib::llvm::{Bool, True, False};\n+import link::{mangle_internal_name_by_type_only,\n+              mangle_internal_name_by_seq,\n+              mangle_internal_name_by_path,\n+              mangle_internal_name_by_path_and_seq,\n+              mangle_exported_name};\n+import metadata::{creader, csearch, cstore};\n+import util::ppaux::{ty_to_str, ty_to_short_str};\n \n import trans_common::*;\n import trans_build::*;\n \n-import trans_objects::trans_anon_obj;\n-import trans_objects::trans_obj;\n+import trans_objects::{trans_anon_obj, trans_obj};\n import tvec = trans_vec;\n \n fn type_of(cx: @crate_ctxt, sp: span, t: ty::t) : type_has_static_size(cx, t)"}, {"sha": "cd15116964f0f7ff0ba30b3d8099d5634434ec33", "filename": "src/comp/middle/trans_alt.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,18 +1,11 @@\n-import std::str;\n-import std::vec;\n-import std::option;\n-import option::some;\n-import option::none;\n+import std::{str, vec, option};\n+import option::{some, none};\n import std::map::hashmap;\n \n import lib::llvm::llvm;\n-import lib::llvm::llvm::ValueRef;\n-import lib::llvm::llvm::TypeRef;\n-import lib::llvm::llvm::BasicBlockRef;\n+import lib::llvm::llvm::{ValueRef, TypeRef, BasicBlockRef};\n import trans_build::*;\n-import trans::new_sub_block_ctxt;\n-import trans::new_scope_block_ctxt;\n-import trans::load_if_immediate;\n+import trans::{new_sub_block_ctxt, new_scope_block_ctxt, load_if_immediate};\n import ty::pat_ty;\n import syntax::ast;\n import syntax::ast_util;"}, {"sha": "cb350bcea14619fab33a704ec2be224a06ce9844", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 18, "deletions": 44, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -3,63 +3,37 @@\n \n */\n \n-import std::int;\n-import std::vec;\n+import std::{int, vec, str, uint, map, option, fs, unsafe};\n import std::vec::to_ptr;\n-import std::str;\n-import std::uint;\n-import std::map;\n import std::map::hashmap;\n-import std::option;\n-import std::option::some;\n-import std::option::none;\n-import std::fs;\n-import std::unsafe;\n+import std::option::{some, none};\n import syntax::ast;\n import driver::session;\n import middle::ty;\n-import back::link;\n-import back::x86;\n-import back::abi;\n-import back::upcall;\n+import back::{link, x86, abi, upcall};\n import syntax::visit;\n import visit::vt;\n import util::common;\n import util::common::*;\n-import std::map::new_int_hash;\n-import std::map::new_str_hash;\n+import std::map::{new_int_hash, new_str_hash};\n import syntax::codemap::span;\n-import lib::llvm::llvm;\n-import lib::llvm::target_data;\n-import lib::llvm::type_names;\n-import lib::llvm::mk_target_data;\n-import lib::llvm::mk_type_names;\n-import lib::llvm::llvm::ModuleRef;\n-import lib::llvm::llvm::ValueRef;\n-import lib::llvm::llvm::TypeRef;\n-import lib::llvm::llvm::TypeHandleRef;\n-import lib::llvm::llvm::BuilderRef;\n-import lib::llvm::llvm::BasicBlockRef;\n-import lib::llvm::False;\n-import lib::llvm::True;\n-import lib::llvm::Bool;\n-import link::mangle_internal_name_by_type_only;\n-import link::mangle_internal_name_by_seq;\n-import link::mangle_internal_name_by_path;\n-import link::mangle_internal_name_by_path_and_seq;\n-import link::mangle_exported_name;\n-import metadata::creader;\n-import metadata::csearch;\n-import metadata::cstore;\n-import util::ppaux::ty_to_str;\n-import util::ppaux::ty_to_short_str;\n-import syntax::print::pprust::expr_to_str;\n-import syntax::print::pprust::path_to_str;\n+import lib::llvm::{llvm, target_data, type_names,\n+                   mk_target_data, mk_type_names};\n+import lib::llvm::llvm::{ModuleRef, ValueRef, TypeRef, TypeHandleRef,\n+                         BuilderRef, BasicBlockRef};\n+import lib::llvm::{True, False, Bool};\n+import link::{mangle_internal_name_by_type_only,\n+              mangle_internal_name_by_seq,\n+              mangle_internal_name_by_path,\n+              mangle_internal_name_by_path_and_seq,\n+              mangle_exported_name};\n+import metadata::{creader, csearch, cstore};\n+import util::ppaux::{ty_to_str, ty_to_short_str};\n+import syntax::print::pprust::{expr_to_str, path_to_str};\n import bld = trans_build;\n \n // FIXME: These should probably be pulled in here too.\n-import trans::type_of_fn_full;\n-import trans::drop_ty;\n+import trans::{type_of_fn_full, drop_ty};\n \n obj namegen(mutable i: int) {\n     fn next(prefix: str) -> str { i += 1; ret prefix + int::str(i); }"}, {"sha": "e19f9a43df6efb78dc7ea2477ff849e592bfa5ea", "filename": "src/comp/middle/trans_objects.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,22 +1,15 @@\n // Translation of object-related things to LLVM IR.\n \n-import std::str;\n-import std::option;\n-import std::vec;\n-import option::none;\n-import option::some;\n-\n-import lib::llvm::llvm;\n-import lib::llvm::Bool;\n-import lib::llvm::True;\n-import lib::llvm::llvm::TypeRef;\n-import lib::llvm::llvm::ValueRef;\n+import std::{str, option, vec};\n+import option::{none, some};\n+\n+import lib::llvm::{llvm, Bool, True};\n+import lib::llvm::llvm::{TypeRef, ValueRef};\n \n import back::abi;\n-import back::link::mangle_internal_name_by_path;\n-import back::link::mangle_internal_name_by_path_and_seq;\n-import syntax::ast;\n-import syntax::ast_util;\n+import back::link::{mangle_internal_name_by_path,\n+                    mangle_internal_name_by_path_and_seq};\n+import syntax::{ast, ast_util};\n import syntax::codemap::span;\n \n import trans_common::*;"}, {"sha": "cb97511c578d2e0578348ed9aa0eb72d89418563", "filename": "src/comp/middle/tstate/annotate.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,28 +1,15 @@\n \n-import std::option;\n-import std::option::some;\n-import std::option::none;\n-import std::int;\n-import std::uint;\n-import std::str;\n+import std::{int, uint, str, option};\n+import std::option::{some, none};\n import syntax::ast::*;\n import syntax::ast_util::pat_binding_ids;\n import syntax::visit;\n import syntax::codemap::span;\n import std::map::new_str_hash;\n-import util::common::log_expr_err;\n-import util::common::log_block_err;\n-import util::common::log_item_err;\n-import util::common::log_stmt_err;\n-import util::common::log_expr;\n-import util::common::log_block;\n-import util::common::log_stmt;\n-import aux::fn_info;\n-import aux::fn_info_map;\n-import aux::num_constraints;\n-import aux::get_fn_info;\n-import aux::crate_ctxt;\n-import aux::add_node;\n+import util::common::{log_expr_err, log_block_err, log_item_err,\n+                      log_stmt_err, log_expr, log_block, log_stmt};\n+import aux::{fn_info, fn_info_map, num_constraints, get_fn_info,\n+             crate_ctxt, add_node};\n import middle::tstate::ann::empty_ann;\n \n fn collect_ids_expr(e: @expr, rs: @mutable [node_id]) { *rs += [e.id]; }"}, {"sha": "62638dd0d4379c230737f53b3a643bd91f171b50", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 12, "deletions": 34, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,48 +1,26 @@\n-import std::vec;\n-import std::int::str;\n-import std::str;\n-import std::option;\n+import std::{vec, int, uint, str, option};\n import std::option::*;\n-import std::int;\n-import std::uint;\n import syntax::ast::*;\n import syntax::ast_util::*;\n import syntax::codemap::span;\n import syntax::visit;\n import util::common;\n import util::common::log_block;\n-import std::map::new_int_hash;\n-import std::map::new_uint_hash;\n-import util::common::log_expr_err;\n-import util::common::lit_eq;\n+import std::map::{new_int_hash, new_uint_hash};\n+import util::common::{log_expr_err, lit_eq};\n import syntax::print::pprust::path_to_str;\n-import tstate::ann::pre_and_post;\n-import tstate::ann::pre_and_post_state;\n-import tstate::ann::empty_ann;\n-import tstate::ann::prestate;\n-import tstate::ann::poststate;\n-import tstate::ann::precond;\n-import tstate::ann::postcond;\n-import tstate::ann::empty_states;\n-import tstate::ann::pps_len;\n-import tstate::ann::set_prestate;\n-import tstate::ann::set_poststate;\n-import tstate::ann::set_in_poststate_;\n-import tstate::ann::extend_prestate;\n-import tstate::ann::extend_poststate;\n-import tstate::ann::set_precondition;\n-import tstate::ann::set_postcondition;\n-import tstate::ann::set_in_postcond_;\n-import tstate::ann::ts_ann;\n-import tstate::ann::clear_in_postcond;\n-import tstate::ann::clear_in_poststate;\n-import tstate::ann::clear_in_poststate_;\n+import tstate::ann::{pre_and_post, pre_and_post_state, empty_ann, prestate,\n+                     poststate, precond, postcond, empty_states, pps_len,\n+                     set_prestate, set_poststate, set_in_poststate_,\n+                     extend_prestate, extend_poststate, set_precondition,\n+                     set_postcondition, set_in_postcond_, ts_ann,\n+                     clear_in_postcond,\n+                     clear_in_poststate, clear_in_poststate_};\n import tritv::*;\n import bitvectors::promises_;\n \n-import syntax::print::pprust::constr_args_to_str;\n-import syntax::print::pprust::constr_arg_to_str;\n-import syntax::print::pprust::lit_to_str;\n+import syntax::print::pprust::{constr_args_to_str, constr_arg_to_str,\n+                               lit_to_str};\n \n // Used to communicate which operands should be invalidated\n // to helper functions"}, {"sha": "0d9e558b1f76ca1259b4a589eb6b693c8c656be4", "filename": "src/comp/middle/tstate/bitvectors.rs", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -3,27 +3,13 @@ import syntax::visit;\n import std::vec;\n import std::option::*;\n import aux::*;\n-import tstate::ann::pre_and_post;\n-import tstate::ann::precond;\n-import tstate::ann::postcond;\n-import tstate::ann::prestate;\n-import tstate::ann::poststate;\n-import tstate::ann::relax_prestate;\n-import tstate::ann::relax_precond;\n-import tstate::ann::relax_poststate;\n-import tstate::ann::pps_len;\n-import tstate::ann::true_precond;\n-import tstate::ann::empty_prestate;\n-import tstate::ann::difference;\n-import tstate::ann::union;\n-import tstate::ann::intersect;\n-import tstate::ann::clone;\n-import tstate::ann::set_in_postcond;\n-import tstate::ann::set_in_poststate;\n-import tstate::ann::set_in_poststate_;\n-import tstate::ann::clear_in_poststate;\n-import tstate::ann::clear_in_prestate;\n-import tstate::ann::clear_in_poststate_;\n+import tstate::ann::{pre_and_post, precond, postcond, prestate, poststate,\n+                     relax_prestate, relax_precond, relax_poststate,\n+                     pps_len, true_precond, empty_prestate,\n+                     difference, union, intersect, clone,\n+                     set_in_postcond, set_in_poststate, set_in_poststate_,\n+                     clear_in_poststate, clear_in_prestate,\n+                     clear_in_poststate_};\n import tritv::*;\n import util::common::*;\n "}, {"sha": "68d91b5083ed7d99058c250b8131821195b8a79d", "filename": "src/comp/middle/tstate/ck.rs", "status": "modified", "additions": 9, "deletions": 35, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,43 +1,17 @@\n \n import syntax::ast;\n-import ast::method;\n-import ast::item;\n-import ast::item_fn;\n-import ast::_fn;\n-import ast::obj_field;\n-import ast::_obj;\n-import ast::stmt;\n-import ast::ident;\n-import ast::fn_ident;\n-import ast::node_id;\n-import ast::def_id;\n+import ast::{method, item, item_fn, _fn, obj_field, _obj, stmt, ident,\n+             fn_ident, node_id, def_id, ty_param, crate, return, noreturn,\n+             expr};\n import syntax::ast_util::local_def;\n-import ast::ty_param;\n-import ast::crate;\n-import ast::return;\n-import ast::noreturn;\n-import ast::expr;\n import syntax::visit;\n import syntax::codemap::span;\n-import middle::ty::type_is_nil;\n-import middle::ty::ret_ty_of_fn;\n-import tstate::ann::ts_ann;\n-import tstate::ann::empty_poststate;\n-import tstate::ann::true_precond;\n-import tstate::ann::true_postcond;\n-import tstate::ann::false_postcond;\n-import tstate::ann::precond;\n-import tstate::ann::postcond;\n-import tstate::ann::poststate;\n-import tstate::ann::prestate;\n-import tstate::ann::implies;\n-import tstate::ann::ann_precond;\n-import tstate::ann::ann_prestate;\n-import std::option;\n-import std::option::t;\n-import std::option::some;\n-import std::option::none;\n-import std::str;\n+import middle::ty::{type_is_nil, ret_ty_of_fn};\n+import tstate::ann::{ts_ann, empty_poststate, true_precond, true_postcond,\n+                     false_postcond, precond, postcond, poststate, prestate,\n+                     implies, ann_precond, ann_prestate};\n+import std::{str, option};\n+import std::option::{t, some, none};\n import aux::*;\n import syntax::print::pprust::ty_to_str;\n import util::common::log_stmt_err;"}, {"sha": "aebae2777fb81cde532516b1ffe65ef2da7a0f2c", "filename": "src/comp/middle/tstate/collect_locals.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,7 +1,4 @@\n-import std::str;\n-import std::uint;\n-import std::int;\n-import std::vec;\n+import std::{str, uint, int, vec};\n import syntax::ast::*;\n import syntax::ast_util::*;\n import util::ppaux::fn_ident_to_string;"}, {"sha": "d5a7e5c9c0686e35888d8aa3f39c59ae58ab7c36", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 8, "deletions": 24, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,36 +1,20 @@\n \n-import std::vec;\n-import std::str;\n-import std::option;\n-import std::option::none;\n-import std::option::some;\n+import std::{vec, str, option};\n+import std::option::{none, some};\n \n import tstate::ann::*;\n import aux::*;\n-import bitvectors::bit_num;\n-import bitvectors::promises;\n-import bitvectors::seq_preconds;\n-import bitvectors::seq_postconds;\n-import bitvectors::intersect_states;\n-import bitvectors::declare_var;\n-import bitvectors::gen_poststate;\n-import bitvectors::relax_precond_block;\n-import bitvectors::gen;\n+import bitvectors::{bit_num, promises, seq_preconds, seq_postconds,\n+                    intersect_states, declare_var, gen_poststate,\n+                    relax_precond_block, gen};\n import tritv::*;\n import syntax::ast::*;\n import syntax::ast_util::*;\n import syntax::visit;\n import std::map::new_int_hash;\n-import util::common::new_def_hash;\n-import util::common::log_expr;\n-import util::common::log_fn;\n-import util::common::field_exprs;\n-import util::common::has_nonlocal_exits;\n-import util::common::log_stmt;\n-import util::common::log_stmt_err;\n-import util::common::log_expr_err;\n-import util::common::log_block_err;\n-import util::common::log_block;\n+import util::common::{new_def_hash, log_expr, log_fn, field_exprs,\n+                      has_nonlocal_exits, log_stmt, log_stmt_err,\n+                      log_expr_err, log_block_err, log_block};\n import syntax::codemap::span;\n import util::ppaux::fn_ident_to_string;\n "}, {"sha": "f2da03c8bc36e4a3ab79f0ab80fd337edee10c4f", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 7, "deletions": 24, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,36 +1,19 @@\n import syntax::print::pprust::path_to_str;\n import util::ppaux::ty_to_str;\n-import std::vec;\n-import std::str;\n-import std::option;\n-import std::option::get;\n-import std::option::is_none;\n-import std::option::none;\n-import std::option::some;\n-import std::option::maybe;\n+import std::{vec, str, option};\n+import std::option::{get, is_none, none, some, maybe};\n import ann::*;\n import aux::*;\n-import tritv::tritv_clone;\n-import tritv::tritv_set;\n-import tritv::ttrue;\n+import tritv::{tritv_clone, tritv_set, ttrue};\n \n import bitvectors::*;\n import syntax::ast::*;\n import syntax::ast_util::*;\n import syntax::codemap::span;\n-import middle::ty::expr_ty;\n-import middle::ty::type_is_nil;\n-import middle::ty::type_is_bot;\n-import util::common::new_def_hash;\n-import util::common::log_expr;\n-import util::common::log_block;\n-import util::common::log_block_err;\n-import util::common::log_fn;\n-import util::common::field_exprs;\n-import util::common::has_nonlocal_exits;\n-import util::common::log_stmt;\n-import util::common::log_stmt_err;\n-import util::common::log_expr_err;\n+import middle::ty::{expr_ty, type_is_nil, type_is_bot};\n+import util::common::{new_def_hash, log_expr, log_block, log_block_err,\n+                      log_fn, field_exprs, has_nonlocal_exits, log_stmt,\n+                      log_stmt_err, log_expr_err};\n \n fn forbid_upvar(fcx: fn_ctxt, rhs_id: node_id, sp: span, t: oper_type) {\n     alt t {"}, {"sha": "9dad31f8624db6bffba97f14b006c87dc74b79fa", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 11, "deletions": 36, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,47 +1,22 @@\n-import syntax::ast;\n-import syntax::ast_util;\n-import ast::mutability;\n-import syntax::ast_util::local_def;\n-import syntax::ast_util::respan;\n-import ast::spanned;\n+import syntax::{ast, ast_util};\n+import ast::{mutability, spanned};\n+import syntax::ast_util::{local_def, respan};\n import syntax::visit;\n import metadata::csearch;\n import driver::session;\n import util::common;\n import util::common::*;\n import syntax::codemap::span;\n-import std::map::new_int_hash;\n-import std::map::new_str_hash;\n import middle::ty;\n-import middle::ty::node_id_to_type;\n-import middle::ty::arg;\n-import middle::ty::bind_params_in_type;\n-import middle::ty::block_ty;\n-import middle::ty::expr_ty;\n-import middle::ty::field;\n-import middle::ty::method;\n-import middle::ty::node_type_table;\n-import middle::ty::pat_ty;\n-import middle::ty::ty_param_substs_opt_and_ty;\n+import middle::ty::{node_id_to_type, arg, bind_params_in_type, block_ty,\n+                    expr_ty, field, method, node_type_table, pat_ty,\n+                    ty_param_substs_opt_and_ty, ty_param_kinds_and_ty,\n+                    ty_nil};\n import util::ppaux::ty_to_str;\n-import middle::ty::ty_param_kinds_and_ty;\n-import middle::ty::ty_nil;\n-import middle::ty::unify::ures_ok;\n-import middle::ty::unify::ures_err;\n-import middle::ty::unify::fixup_result;\n-import middle::ty::unify::fix_ok;\n-import middle::ty::unify::fix_err;\n-import std::int;\n-import std::vec;\n-import std::str;\n-import std::uint;\n-import std::map;\n-import std::map::hashmap;\n-import std::option;\n-import std::option::none;\n-import std::option::some;\n-import std::option::from_maybe;\n-import std::smallintmap;\n+import middle::ty::unify::{ures_ok, ures_err, fixup_result, fix_ok, fix_err};\n+import std::{int, vec, str, uint, map, option, smallintmap};\n+import std::map::{hashmap, new_int_hash, new_str_hash};\n+import std::option::{none, some, from_maybe};\n import middle::tstate::ann::ts_ann;\n import syntax::print::pprust::*;\n "}, {"sha": "6032ea11dbc84950f434b5d85a2593b99260d23f", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,8 +1,7 @@\n // The Rust abstract syntax tree.\n \n import std::option;\n-import codemap::span;\n-import codemap::filename;\n+import codemap::{span, filename};\n \n type spanned<T> = {node: T, span: span};\n "}, {"sha": "1c11a56272e49b5d9a227eb992e56ee929d1d9a8", "filename": "src/comp/syntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast_util.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,5 +1,4 @@\n-import std::str;\n-import std::option;\n+import std::{str, option};\n import codemap::span;\n import ast::*;\n "}, {"sha": "33b996093419501dcb2c0bc1651a11ed197500c4", "filename": "src/comp/syntax/codemap.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fcodemap.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,11 +1,5 @@\n-import std::vec;\n-import std::uint;\n-import std::str;\n-import std::term;\n-import std::io;\n-import std::option;\n-import std::option::some;\n-import std::option::none;\n+import std::{vec, uint, str, term, io, option};\n+import std::option::{some, none};\n \n type filename = str;\n "}, {"sha": "3f020a8aeb28b1c49dc3652597fc2b210e4079b4", "filename": "src/comp/syntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,6 +1,4 @@\n-import std::str;\n-import std::vec;\n-import std::option;\n+import std::{str, vec, option};\n import std::map::hashmap;\n import driver::session::session;\n import codemap::span;"}, {"sha": "68b2ea87148211257fd90cc7fbcfda95497a8398", "filename": "src/comp/syntax/ext/env.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fenv.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -4,10 +4,7 @@\n  * should all get sucked into either the compiler syntax extension plugin\n  * interface.\n  */\n-import std::vec;\n-import std::str;\n-import std::option;\n-import std::generic_os;\n+import std::{vec, str, option, generic_os};\n import base::*;\n export expand_syntax_ext;\n "}, {"sha": "5fd2b1692dae4ce1d6efac6418777dfcc922e2f5", "filename": "src/comp/syntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,16 +1,11 @@\n import driver::session;\n \n-import std::option::none;\n-import std::option::some;\n+import std::option::{none, some};\n \n import std::map::hashmap;\n-import std::vec;\n-import std::str;\n+import std::{vec, str};\n \n-import syntax::ast::crate;\n-import syntax::ast::expr_;\n-import syntax::ast::expr_mac;\n-import syntax::ast::mac_invoc;\n+import syntax::ast::{crate, expr_, expr_mac, mac_invoc};\n import syntax::fold::*;\n import syntax::ext::base::*;\n "}, {"sha": "b51db707daf528d2a2c8865dc65d46567ed01fd3", "filename": "src/comp/syntax/ext/fmt.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -5,11 +5,8 @@\n  * should all get sucked into either the standard library extfmt module or the\n  * compiler syntax extension plugin interface.\n  */\n-import std::vec;\n-import std::str;\n-import std::option;\n-import std::option::none;\n-import std::option::some;\n+import std::{vec, str, option};\n+import std::option::{none, some};\n import std::extfmt::ct::*;\n import base::*;\n import codemap::span;"}, {"sha": "e6e4f4e794e44d3b78a9f8665e4a6792459571de", "filename": "src/comp/syntax/ext/ident_to_str.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Fext%2Fident_to_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Fext%2Fident_to_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fident_to_str.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,6 +1,4 @@\n-import std::vec;\n-import std::str;\n-import std::option;\n+import std::{vec, str, option};\n import base::*;\n import syntax::ast;\n "}, {"sha": "4cda6b82f5b2536e6029f8a0639e864bdc05d0fc", "filename": "src/comp/syntax/ext/log_syntax.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Flog_syntax.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,7 +1,6 @@\n-import std::option;\n+import std::{str, option};\n import base::*;\n import syntax::ast;\n-import std::str;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: @ast::expr,\n                      _body: option::t<str>) -> @ast::expr {"}, {"sha": "5171f78157821c361593718d51439b4467cf12ad", "filename": "src/comp/syntax/ext/simplext.rs", "status": "modified", "additions": 8, "deletions": 26, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,35 +1,17 @@\n use std;\n \n import codemap::span;\n-import std::vec;\n-import std::str;\n-import std::option;\n-import std::map::hashmap;\n-import std::map::new_str_hash;\n-import option::some;\n-import option::none;\n-\n-import base::syntax_extension;\n-import base::ext_ctxt;\n-import base::normal;\n-import base::expr_to_str;\n-import base::expr_to_ident;\n+import std::{vec, str, option};\n+import std::map::{hashmap, new_str_hash};\n+import option::{some, none};\n+\n+import base::{syntax_extension, ext_ctxt, normal,\n+              expr_to_str, expr_to_ident};\n \n import fold::*;\n-import ast::node_id;\n import ast_util::respan;\n-import ast::ident;\n-import ast::path;\n-import ast::ty;\n-import ast::blk;\n-import ast::blk_;\n-import ast::expr;\n-import ast::expr_;\n-import ast::path_;\n-import ast::expr_path;\n-import ast::expr_vec;\n-import ast::expr_mac;\n-import ast::mac_invoc;\n+import ast::{ident, path, ty, blk, blk_, expr, expr_, path_, expr_path,\n+             expr_vec, expr_mac, mac_invoc, node_id};\n \n export add_new_extension;\n "}, {"sha": "ad0edde86e6695f828a4ff30ed87b6d36bcd5526", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,8 +1,7 @@\n import syntax::codemap::span;\n import ast::*;\n \n-import std::vec;\n-import std::option;\n+import std::{vec, option};\n \n export ast_fold_precursor;\n export ast_fold;"}, {"sha": "ab0dfdcf706041470a39879527497e68d0b46277", "filename": "src/comp/syntax/parse/eval.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,15 +1,11 @@\n \n-import std::str;\n-import std::option;\n-import std::option::some;\n-import std::option::none;\n+import std::{str, option};\n+import std::option::{some, none};\n import syntax::ast;\n import syntax::parse::token;\n-import syntax::parse::parser::parser;\n-import syntax::parse::parser::new_parser_from_file;\n-import syntax::parse::parser::parse_inner_attrs_and_next;\n-import syntax::parse::parser::parse_mod_items;\n-import syntax::parse::parser::SOURCE_FILE;\n+import syntax::parse::parser::{parser, new_parser_from_file, \n+                               parse_inner_attrs_and_next,\n+                               parse_mod_items, SOURCE_FILE};\n \n export eval_crate_directives_to_mod;\n export mode_parse;"}, {"sha": "bad8c01afa84935f8cf926151a895ad9e334c12e", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,13 +1,7 @@\n \n-import std::io;\n-import std::int;\n-import std::vec;\n-import std::str;\n-import std::map;\n+import std::{io, int, vec, str, map, option};\n import std::map::hashmap;\n-import std::option;\n-import std::option::some;\n-import std::option::none;\n+import std::option::{some, none};\n import util::interner;\n import util::interner::intern;\n import codemap;"}, {"sha": "be54b38a68aa40b177a9c26745f4f4f91ea8ae33", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,21 +1,13 @@\n \n-import std::io;\n-import std::vec;\n-import std::str;\n-import std::option;\n-import std::option::some;\n-import std::option::none;\n-import std::either;\n-import std::either::left;\n-import std::either::right;\n-import std::map::hashmap;\n+import std::{io, vec, str, option, either};\n+import std::option::{some, none};\n+import std::either::{left, right};\n+import std::map::{hashmap, new_str_hash};\n import token::can_begin_expr;\n import ex = ext::base;\n import codemap::span;\n-import std::map::new_str_hash;\n import util::interner;\n-import ast::node_id;\n-import ast::spanned;\n+import ast::{node_id, spanned};\n \n tag restriction { UNRESTRICTED; RESTRICT_NO_CALL_EXPRS; }\n "}, {"sha": "5a4457682511c2547654047098eacd84436caca7", "filename": "src/comp/syntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -3,9 +3,7 @@ import ast::ty_mach;\n import ast_util::ty_mach_to_str;\n import std::map::new_str_hash;\n import util::interner;\n-import std::int;\n-import std::uint;\n-import std::str;\n+import std::{int, uint, str};\n \n type str_num = uint;\n "}, {"sha": "35dce523710dff68c62ecba484755ad8a7d7b797", "filename": "src/comp/syntax/print/pp.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpp.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,7 +1,5 @@\n \n-import std::io;\n-import std::vec;\n-import std::str;\n+import std::{io, vec, str};\n \n /*\n  * This pretty-printer is a direct reimplementation of Philip Karlton's"}, {"sha": "6acd02798d71a2b2d59d48aa70471cd9e0fd2713", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,29 +1,14 @@\n \n-import std::vec;\n-import std::int;\n-import std::io;\n-import std::str;\n-import std::uint;\n-import std::option;\n+import std::{vec, int, io, str, uint, option};\n import parse::lexer;\n import syntax::codemap::codemap;\n import syntax::visit;\n import ast;\n import ast_util;\n-import option::some;\n-import option::none;\n-import pp::printer;\n-import pp::break_offset;\n-import pp::word;\n-import pp::huge_word;\n-import pp::zero_word;\n-import pp::space;\n-import pp::zerobreak;\n-import pp::hardbreak;\n-import pp::breaks;\n-import pp::consistent;\n-import pp::inconsistent;\n-import pp::eof;\n+import option::{some, none};\n+import pp::{printer, break_offset, word, huge_word, zero_word,\n+            space, zerobreak, hardbreak, breaks, consistent,\n+            inconsistent, eof};\n \n // The ps is stored here to prevent recursive type.\n // FIXME use a nominal tag instead"}, {"sha": "ce1124d68aa95e47220d68248316e7ded40a994c", "filename": "src/comp/syntax/util/interner.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Futil%2Finterner.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,14 +1,9 @@\n // An \"interner\" is a data structure that associates values with uint tags and\n // allows bidirectional lookup; i.e. given a value, one can easily find the\n // type, and vice versa.\n-import std::vec;\n-import std::map;\n-import std::map::hashmap;\n-import std::map::hashfn;\n-import std::map::eqfn;\n-import std::option;\n-import std::option::none;\n-import std::option::some;\n+import std::{vec, map, option};\n+import std::map::{hashmap, hashfn, eqfn};\n+import std::option::{none, some};\n \n type interner<T> =\n     {map: hashmap<T, uint>,"}, {"sha": "a50785ced24dd00730fcc48f2fb1605a5395c5c8", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,8 +1,7 @@\n \n import ast::*;\n import std::option;\n-import std::option::some;\n-import std::option::none;\n+import std::option::{none, some};\n import codemap::span;\n \n "}, {"sha": "355fcd934b4fea28be6e69a2e2cbfcce58372ef9", "filename": "src/comp/util/common.rs", "status": "modified", "additions": 7, "deletions": 24, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fcommon.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,31 +1,14 @@\n-import std::str;\n-import std::map;\n+import std::{str, map, uint, int, option};\n import std::map::hashmap;\n-import std::uint;\n-import std::int;\n-import std::option;\n-import std::option::none;\n-import std::option::some;\n+import std::option::{none, some};\n import syntax::ast;\n-import ast::ty;\n-import ast::pat;\n-import syntax::codemap::codemap;\n-import syntax::codemap::span;\n-import ast::lit;\n-import ast::path;\n+import ast::{ty, pat, lit, path};\n+import syntax::codemap::{codemap, span};\n import syntax::visit;\n-import std::io::stdout;\n-import std::io::str_writer;\n-import std::io::string_writer;\n+import std::io::{stdout, str_writer, string_writer};\n import syntax::print;\n-import print::pprust::print_block;\n-import print::pprust::print_item;\n-import print::pprust::print_expr;\n-import print::pprust::print_path;\n-import print::pprust::print_decl;\n-import print::pprust::print_fn;\n-import print::pprust::print_type;\n-import print::pprust::print_literal;\n+import print::pprust::{print_block, print_item, print_expr, print_path,\n+                       print_decl, print_fn, print_type, print_literal};\n import print::pp::mk_printer;\n \n type flag = hashmap<str, ()>;"}, {"sha": "23c148d17311553c4e474e2ed46adc0b2ac2272f", "filename": "src/comp/util/ppaux.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Fcomp%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fppaux.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,21 +1,11 @@\n-import std::vec;\n-import std::str;\n-import std::int;\n-import std::option;\n-import std::option::none;\n-import std::option::some;\n+import std::{vec, str, int, option};\n+import std::option::{none, some};\n import middle::ty;\n import middle::ty::*;\n import metadata::encoder;\n-import syntax::print::pp;\n-import syntax::print::pprust;\n-import syntax::print::pprust::path_to_str;\n-import syntax::print::pprust::constr_args_to_str;\n-import syntax::print::pprust::proto_to_str;\n-import pp::word;\n-import pp::eof;\n-import pp::zerobreak;\n-import pp::hardbreak;\n+import syntax::print::{pp, pprust};\n+import syntax::print::pprust::{path_to_str, constr_args_to_str, proto_to_str};\n+import pp::{word, eof, zerobreak, hardbreak};\n import syntax::ast_util::ty_mach_to_str;\n import syntax::ast;\n import middle::ast_map;"}, {"sha": "441b2289661b497f4228e2c41bc7c74591658ffe", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,22 +1,11 @@\n use std;\n use rustc;\n \n-import std::fs;\n-import std::getopts;\n-import std::getopts::optopt;\n-import std::getopts::opt_present;\n-import std::getopts::opt_str;\n-import std::io;\n+import std::{fs, io, getopts, vec, str, uint, option};\n+import std::getopts::{optopt, opt_present, opt_str};\n import std::io::stdout;\n-import std::vec;\n-import std::str;\n-import std::uint;\n-import std::option;\n-\n-import rustc::syntax::ast;\n-import rustc::syntax::fold;\n-import rustc::syntax::visit;\n-import rustc::syntax::codemap;\n+\n+import rustc::syntax::{ast, fold, visit, codemap};\n import rustc::syntax::parse::parser;\n import rustc::syntax::print::pprust;\n "}, {"sha": "21ee8f374f6f2c9938507d71d103fb1953aad038", "filename": "src/lib/aio.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Flib%2Faio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Flib%2Faio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Faio.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -2,10 +2,7 @@ import task;\n import vec;\n \n import comm;\n-import comm::chan;\n-import comm::port;\n-import comm::send;\n-import comm::recv;\n+import comm::{chan, port, send, recv};\n import net;\n \n native \"rust\" mod rustrt {"}, {"sha": "0b3ee5730da3b6754ee84987d8f3648a7a01284a", "filename": "src/lib/ebml.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Flib%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Flib%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Febml.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -3,8 +3,7 @@\n // Simple Extensible Binary Markup Language (ebml) reader and writer on a\n // cursor model. See the specification here:\n //     http://www.matroska.org/technical/specs/rfc/index.html\n-import option::none;\n-import option::some;\n+import option::{some, none};\n \n type ebml_tag = {id: uint, size: uint};\n "}, {"sha": "0a23f3973bebe940723036f64148a6279127b050", "filename": "src/lib/either.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Flib%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Flib%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Feither.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,7 +1,6 @@\n \n import option;\n-import option::some;\n-import option::none;\n+import option::{some, none};\n \n tag t<T, U> { left(T); right(U); }\n "}, {"sha": "6337be01f7048b4d41249186072d81a60d1e3b23", "filename": "src/lib/extfmt.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Flib%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Flib%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fextfmt.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -14,8 +14,7 @@\n  * we also only support translating-to-rust a tiny subset of the possible\n  * combinations at the moment.\n  */\n-import option::none;\n-import option::some;\n+import option::{some, none};\n \n \n /*"}, {"sha": "0fe87c0727325028ad30854da511f817b6ef87fc", "filename": "src/lib/fun_treemap.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Flib%2Ffun_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Flib%2Ffun_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ffun_treemap.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -10,8 +10,7 @@ of features.\n \n */\n \n-import option::some;\n-import option::none;\n+import option::{some, none};\n import option = option::t;\n \n export treemap;"}, {"sha": "beae20a0d910c0ddb7a644b54ea28102ca183c45", "filename": "src/lib/getopts.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Flib%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Flib%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fgetopts.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -8,8 +8,7 @@\n  * is what you expect. Use opt_* accessors (bottom of the file) to get\n  * argument values out of the match object.\n  */\n-import option::some;\n-import option::none;\n+import option::{some, none};\n export opt;\n export reqopt;\n export optopt;"}, {"sha": "7037cff365aada77330ecbc8947ede067813b902", "filename": "src/lib/list.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Flib%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Flib%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Flist.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,5 +1,4 @@\n-import option::some;\n-import option::none;\n+import option::{some, none};\n \n tag list<T> { cons(T, @list<T>); nil; }\n "}, {"sha": "fccf8b5c8fd06059e9686c6ee26efd743c737053", "filename": "src/lib/sio.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Flib%2Fsio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Flib%2Fsio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fsio.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,7 +1,4 @@\n-import comm::port;\n-import comm::chan;\n-import comm::send;\n-import comm::recv;\n+import comm::{port, chan, send, recv};\n \n import net;\n "}, {"sha": "1eec907ffb27ac89922ee81433c8d00d887670f7", "filename": "src/lib/smallintmap.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Flib%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Flib%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fsmallintmap.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -2,8 +2,7 @@\n \n /// A simple map based on a vector for small integer keys. Space requirements\n /// are O(highest integer key).\n-import option::none;\n-import option::some;\n+import option::{some, none};\n \n // FIXME: Should not be @; there's a bug somewhere in rustc that requires this\n // to be."}, {"sha": "a24225392dde1803f3f1f6fcf08c4a3429bb8b23", "filename": "src/lib/sort.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Flib%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Flib%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fsort.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,6 +1,5 @@\n \n-import vec::len;\n-import vec::slice;\n+import vec::{len, slice};\n \n export merge_sort;\n export quick_sort;"}, {"sha": "7b572d1c3f6d6edad22d574d352bdcd6cb921fcb", "filename": "src/lib/task.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Flib%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Flib%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftask.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,7 +1,6 @@\n import cast = unsafe::reinterpret_cast;\n import comm;\n-import option::some;\n-import option::none;\n+import option::{some, none};\n import option = option::t;\n import ptr;\n "}, {"sha": "593a1664920b03076e6d270b0cb27d4b18dd6de1", "filename": "src/lib/treemap.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Flib%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Flib%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftreemap.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -7,8 +7,7 @@ red-black tree or something else.\n \n */\n \n-import option::some;\n-import option::none;\n+import option::{some, none};\n import option = option::t;\n \n export treemap;"}, {"sha": "d5d76d65ef4a0261a6df78ad03e49f3b07f57284", "filename": "src/lib/ufind.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Flib%2Fufind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Flib%2Fufind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fufind.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,6 +1,5 @@\n \n-import option::none;\n-import option::some;\n+import option::{some, none};\n \n \n // A very naive implementation of union-find with unsigned integer nodes."}, {"sha": "6ca0c9bb61e0aaa3dfa63799678bba190996532b", "filename": "src/lib/vec.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4815b67422771624300b224d642b3b63d1fbce2/src%2Flib%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4815b67422771624300b224d642b3b63d1fbce2/src%2Flib%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fvec.rs?ref=a4815b67422771624300b224d642b3b63d1fbce2", "patch": "@@ -1,7 +1,6 @@\n // Interior vector utility functions.\n \n-import option::none;\n-import option::some;\n+import option::{some, none};\n import uint::next_power_of_two;\n import ptr::addr_of;\n "}]}