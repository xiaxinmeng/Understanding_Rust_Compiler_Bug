{"sha": "d97f2f6b9bc5d22dc2e029cfccb61a268781a99a", "node_id": "C_kwDOAAsO6NoAKGQ5N2YyZjZiOWJjNWQyMmRjMmUwMjljZmNjYjYxYTI2ODc4MWE5OWE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-12-11T13:50:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-11T13:50:55Z"}, "message": "Merge #10976\n\n10976: fix: Show case-insensitive exact matches instead of fuzzy flyimport for short paths r=Veykril a=Veykril\n\nAnd raise the fuzzy trigger from 2 to 3 chars. This way we keep the ability of flyimporting short names like `Rc`.\r\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/6917\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "d325c175b6d58b2b62172fb65bbd9b6571ac96fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d325c175b6d58b2b62172fb65bbd9b6571ac96fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d97f2f6b9bc5d22dc2e029cfccb61a268781a99a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhtKy/CRBK7hj4Ov3rIwAAZq8IAHeSIOycYHHZmMQGW+QAARth\nK+EMqLEXMgNEY+gCC1ddj9mA17klH9sWw25EKTtQqD0aM9g0K752UmnKoXRDtSrd\n3Xcb74si3UopogdkuMI+umwNNqNCgHc3X/CEahDir3vR9Q3TSW+6foF2zsvJk6ON\nzTXX6MwHq3Lgr1Mw7KraK0YbxgrMraOsID9OPVqnfYzjXGdKTwFqq8NJg6QoGeBh\nQ3UlQsUXafl2tWd1Y1oUe9ALVLEYYQDRHMCfnb52a/NPC3J6Pzx+ybld/CtvBn0q\npY1fAm1oz0vP2hYwuQ51kfD1rL7kr9Wbl3Hz1mQqbkz5+MkhUSI/4XEgcxEzZZ8=\n=baVZ\n-----END PGP SIGNATURE-----\n", "payload": "tree d325c175b6d58b2b62172fb65bbd9b6571ac96fb\nparent d03397fe1173eaeb2e04c9e55ac223289e7e08ee\nparent 143a30aa519ecdb8b98bf6bf2c625f77920e7921\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1639230655 +0000\ncommitter GitHub <noreply@github.com> 1639230655 +0000\n\nMerge #10976\n\n10976: fix: Show case-insensitive exact matches instead of fuzzy flyimport for short paths r=Veykril a=Veykril\n\nAnd raise the fuzzy trigger from 2 to 3 chars. This way we keep the ability of flyimporting short names like `Rc`.\r\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/6917\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d97f2f6b9bc5d22dc2e029cfccb61a268781a99a", "html_url": "https://github.com/rust-lang/rust/commit/d97f2f6b9bc5d22dc2e029cfccb61a268781a99a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d97f2f6b9bc5d22dc2e029cfccb61a268781a99a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d03397fe1173eaeb2e04c9e55ac223289e7e08ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/d03397fe1173eaeb2e04c9e55ac223289e7e08ee", "html_url": "https://github.com/rust-lang/rust/commit/d03397fe1173eaeb2e04c9e55ac223289e7e08ee"}, {"sha": "143a30aa519ecdb8b98bf6bf2c625f77920e7921", "url": "https://api.github.com/repos/rust-lang/rust/commits/143a30aa519ecdb8b98bf6bf2c625f77920e7921", "html_url": "https://github.com/rust-lang/rust/commit/143a30aa519ecdb8b98bf6bf2c625f77920e7921"}], "stats": {"total": 88, "additions": 55, "deletions": 33}, "files": [{"sha": "46bf4d7b46361a7b7bf78f0db2b45025ebbdc431", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d97f2f6b9bc5d22dc2e029cfccb61a268781a99a/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97f2f6b9bc5d22dc2e029cfccb61a268781a99a/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=d97f2f6b9bc5d22dc2e029cfccb61a268781a99a", "patch": "@@ -65,7 +65,7 @@ pub(crate) fn replace_derive_with_manual_impl(\n     let found_traits = items_locator::items_with_name(\n         &ctx.sema,\n         current_crate,\n-        NameToImport::Exact(trait_path.segments().last()?.to_string()),\n+        NameToImport::exact_case_sensitive(trait_path.segments().last()?.to_string()),\n         items_locator::AssocItemSearch::Exclude,\n         Some(items_locator::DEFAULT_QUERY_SEARCH_LIMIT.inner()),\n     )"}, {"sha": "8994c25475b131cc4da5a994a3b1d31d3c9be7e6", "filename": "crates/ide_completion/src/completions/flyimport.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d97f2f6b9bc5d22dc2e029cfccb61a268781a99a/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97f2f6b9bc5d22dc2e029cfccb61a268781a99a/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=d97f2f6b9bc5d22dc2e029cfccb61a268781a99a", "patch": "@@ -227,22 +227,18 @@ fn import_assets(ctx: &CompletionContext, fuzzy_name: String) -> Option<ImportAs\n         )\n     } else {\n         let fuzzy_name_length = fuzzy_name.len();\n-        let assets_for_path = ImportAssets::for_fuzzy_path(\n+        let mut assets_for_path = ImportAssets::for_fuzzy_path(\n             current_module,\n             ctx.path_qual().cloned(),\n             fuzzy_name,\n             &ctx.sema,\n             ctx.token.parent()?,\n         )?;\n-\n-        if matches!(assets_for_path.import_candidate(), ImportCandidate::Path(_))\n-            && fuzzy_name_length < 2\n-        {\n-            cov_mark::hit!(ignore_short_input_for_path);\n-            None\n-        } else {\n-            Some(assets_for_path)\n+        if fuzzy_name_length < 3 {\n+            cov_mark::hit!(flyimport_exact_on_short_path);\n+            assets_for_path.path_fuzzy_name_to_exact(false);\n         }\n+        Some(assets_for_path)\n     }\n }\n "}, {"sha": "6a087edc4f226bbd5c35cf8b0352640a72bc2c01", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d97f2f6b9bc5d22dc2e029cfccb61a268781a99a/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97f2f6b9bc5d22dc2e029cfccb61a268781a99a/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=d97f2f6b9bc5d22dc2e029cfccb61a268781a99a", "patch": "@@ -195,7 +195,7 @@ pub fn resolve_completion_edits(\n         let items_with_name = items_locator::items_with_name(\n             &ctx.sema,\n             current_crate,\n-            NameToImport::Exact(imported_name),\n+            NameToImport::exact_case_sensitive(imported_name),\n             items_locator::AssocItemSearch::Include,\n             Some(items_locator::DEFAULT_QUERY_SEARCH_LIMIT.inner()),\n         );"}, {"sha": "fbef6d9937e68be05f10628b4c22c5554c628bea", "filename": "crates/ide_completion/src/tests/flyimport.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d97f2f6b9bc5d22dc2e029cfccb61a268781a99a/crates%2Fide_completion%2Fsrc%2Ftests%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97f2f6b9bc5d22dc2e029cfccb61a268781a99a/crates%2Fide_completion%2Fsrc%2Ftests%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fflyimport.rs?ref=d97f2f6b9bc5d22dc2e029cfccb61a268781a99a", "patch": "@@ -96,25 +96,29 @@ fn main() {\n \n #[test]\n fn short_paths_are_ignored() {\n-    cov_mark::check!(ignore_short_input_for_path);\n+    cov_mark::check!(flyimport_exact_on_short_path);\n \n     check(\n         r#\"\n //- /lib.rs crate:dep\n-pub struct FirstStruct;\n+pub struct Bar;\n+pub struct Rcar;\n+pub struct Rc;\n pub mod some_module {\n-    pub struct SecondStruct;\n-    pub struct ThirdStruct;\n+    pub struct Bar;\n+    pub struct Rcar;\n+    pub struct Rc;\n }\n \n //- /main.rs crate:main deps:dep\n-use dep::{FirstStruct, some_module::SecondStruct};\n-\n fn main() {\n-    t$0\n+    rc$0\n }\n \"#,\n-        expect![[r#\"\"#]],\n+        expect![[r#\"\n+            st Rc (use dep::Rc)\n+            st Rc (use dep::some_module::Rc)\n+        \"#]],\n     );\n }\n \n@@ -772,7 +776,7 @@ mod foo {\n }\n \n fn main() {\n-    TE$0\n+    TES$0\n }\"#,\n         expect![[r#\"\n         ct TEST_CONST (use foo::TEST_CONST)\n@@ -789,7 +793,7 @@ mod foo {\n }\n \n fn main() {\n-    te$0\n+    tes$0\n }\"#,\n         expect![[r#\"\n         ct TEST_CONST (use foo::TEST_CONST)\n@@ -846,7 +850,7 @@ struct Foo {\n     some_field: i32,\n }\n fn main() {\n-    let _ = Foo { some_field: so$0 };\n+    let _ = Foo { some_field: som$0 };\n }\n \"#,\n         expect![[r#\""}, {"sha": "fbcc157a06ef96ac369d23339331b56c778bbadc", "filename": "crates/ide_db/src/helpers/import_assets.rs", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d97f2f6b9bc5d22dc2e029cfccb61a268781a99a/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97f2f6b9bc5d22dc2e029cfccb61a268781a99a/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs?ref=d97f2f6b9bc5d22dc2e029cfccb61a268781a99a", "patch": "@@ -68,17 +68,23 @@ pub struct FirstSegmentUnresolved {\n /// A name that will be used during item lookups.\n #[derive(Debug, Clone)]\n pub enum NameToImport {\n-    /// Requires items with names that exactly match the given string, case-sensitive.\n-    Exact(String),\n+    /// Requires items with names that exactly match the given string, bool indicatse case-sensitivity.\n+    Exact(String, bool),\n     /// Requires items with names that case-insensitively contain all letters from the string,\n     /// in the same order, but not necessary adjacent.\n     Fuzzy(String),\n }\n \n+impl NameToImport {\n+    pub fn exact_case_sensitive(s: String) -> NameToImport {\n+        NameToImport::Exact(s, true)\n+    }\n+}\n+\n impl NameToImport {\n     pub fn text(&self) -> &str {\n         match self {\n-            NameToImport::Exact(text) => text.as_str(),\n+            NameToImport::Exact(text, _) => text.as_str(),\n             NameToImport::Fuzzy(text) => text.as_str(),\n         }\n     }\n@@ -140,7 +146,7 @@ impl ImportAssets {\n         if let Some(_) = path.qualifier() {\n             return None;\n         }\n-        let name = NameToImport::Exact(path.segment()?.name_ref()?.to_string());\n+        let name = NameToImport::exact_case_sensitive(path.segment()?.name_ref()?.to_string());\n         let candidate_node = attr.syntax().clone();\n         Some(Self {\n             import_candidate: ImportCandidate::Path(PathImportCandidate { qualifier: None, name }),\n@@ -230,6 +236,18 @@ impl ImportAssets {\n         self.search_for(sema, None)\n     }\n \n+    pub fn path_fuzzy_name_to_exact(&mut self, case_sensitive: bool) {\n+        if let ImportCandidate::Path(PathImportCandidate { name: to_import, .. }) =\n+            &mut self.import_candidate\n+        {\n+            let name = match to_import {\n+                NameToImport::Fuzzy(name) => std::mem::take(name),\n+                _ => return,\n+            };\n+            *to_import = NameToImport::Exact(name, case_sensitive);\n+        }\n+    }\n+\n     fn search_for(\n         &self,\n         sema: &Semantics<RootDatabase>,\n@@ -563,7 +581,9 @@ impl ImportCandidate {\n             Some(_) => None,\n             None => Some(Self::TraitMethod(TraitImportCandidate {\n                 receiver_ty: sema.type_of_expr(&method_call.receiver()?)?.adjusted(),\n-                assoc_item_name: NameToImport::Exact(method_call.name_ref()?.to_string()),\n+                assoc_item_name: NameToImport::exact_case_sensitive(\n+                    method_call.name_ref()?.to_string(),\n+                ),\n             })),\n         }\n     }\n@@ -575,7 +595,7 @@ impl ImportCandidate {\n         path_import_candidate(\n             sema,\n             path.qualifier(),\n-            NameToImport::Exact(path.segment()?.name_ref()?.to_string()),\n+            NameToImport::exact_case_sensitive(path.segment()?.name_ref()?.to_string()),\n         )\n     }\n \n@@ -589,7 +609,7 @@ impl ImportCandidate {\n         }\n         Some(ImportCandidate::Path(PathImportCandidate {\n             qualifier: None,\n-            name: NameToImport::Exact(name.to_string()),\n+            name: NameToImport::exact_case_sensitive(name.to_string()),\n         }))\n     }\n "}, {"sha": "ca8266b6d24fb1517906758a138954060a7e0ee9", "filename": "crates/ide_db/src/items_locator.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d97f2f6b9bc5d22dc2e029cfccb61a268781a99a/crates%2Fide_db%2Fsrc%2Fitems_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97f2f6b9bc5d22dc2e029cfccb61a268781a99a/crates%2Fide_db%2Fsrc%2Fitems_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fitems_locator.rs?ref=d97f2f6b9bc5d22dc2e029cfccb61a268781a99a", "patch": "@@ -50,16 +50,18 @@ pub fn items_with_name<'a>(\n     });\n \n     let (mut local_query, mut external_query) = match name {\n-        NameToImport::Exact(exact_name) => {\n+        NameToImport::Exact(exact_name, case_sensitive) => {\n             let mut local_query = symbol_index::Query::new(exact_name.clone());\n             local_query.exact();\n \n             let external_query = import_map::Query::new(exact_name)\n                 .name_only()\n-                .search_mode(import_map::SearchMode::Equals)\n-                .case_sensitive();\n+                .search_mode(import_map::SearchMode::Equals);\n \n-            (local_query, external_query)\n+            (\n+                local_query,\n+                if case_sensitive { external_query.case_sensitive() } else { external_query },\n+            )\n         }\n         NameToImport::Fuzzy(fuzzy_search_string) => {\n             let mut local_query = symbol_index::Query::new(fuzzy_search_string.clone());"}]}