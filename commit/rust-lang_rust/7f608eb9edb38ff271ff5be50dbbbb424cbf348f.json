{"sha": "7f608eb9edb38ff271ff5be50dbbbb424cbf348f", "node_id": "C_kwDOAAsO6NoAKDdmNjA4ZWI5ZWRiMzhmZjI3MWZmNWJlNTBkYmJiYjQyNGNiZjM0OGY", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-01T17:28:46Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-02T15:40:12Z"}, "message": "Prevent two opaque types in their defining scopes from being defined via the other", "tree": {"sha": "012aa765a63266fb522e081eb5c4e62fb7842b2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/012aa765a63266fb522e081eb5c4e62fb7842b2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f608eb9edb38ff271ff5be50dbbbb424cbf348f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f608eb9edb38ff271ff5be50dbbbb424cbf348f", "html_url": "https://github.com/rust-lang/rust/commit/7f608eb9edb38ff271ff5be50dbbbb424cbf348f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f608eb9edb38ff271ff5be50dbbbb424cbf348f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bae04fb3ded72c71a660d34749d83d2752580052", "url": "https://api.github.com/repos/rust-lang/rust/commits/bae04fb3ded72c71a660d34749d83d2752580052", "html_url": "https://github.com/rust-lang/rust/commit/bae04fb3ded72c71a660d34749d83d2752580052"}], "stats": {"total": 272, "additions": 216, "deletions": 56}, "files": [{"sha": "35104c71bfc989bda8c5faae6668f78e05fa1755", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 63, "deletions": 41, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/7f608eb9edb38ff271ff5be50dbbbb424cbf348f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f608eb9edb38ff271ff5be50dbbbb424cbf348f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=7f608eb9edb38ff271ff5be50dbbbb424cbf348f", "patch": "@@ -80,47 +80,69 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n         if self.defining_use_anchor.is_some() {\n             let process = |a: Ty<'tcx>, b: Ty<'tcx>| match *a.kind() {\n-                ty::Opaque(def_id, substs) => Some(self.register_hidden_type(\n-                    OpaqueTypeKey { def_id, substs },\n-                    cause.clone(),\n-                    param_env,\n-                    b,\n-                    // Check that this is `impl Trait` type is\n-                    // declared by `parent_def_id` -- i.e., one whose\n-                    // value we are inferring.  At present, this is\n-                    // always true during the first phase of\n-                    // type-check, but not always true later on during\n-                    // NLL. Once we support named opaque types more fully,\n-                    // this same scenario will be able to arise during all phases.\n-                    //\n-                    // Here is an example using type alias `impl Trait`\n-                    // that indicates the distinction we are checking for:\n-                    //\n-                    // ```rust\n-                    // mod a {\n-                    //   pub type Foo = impl Iterator;\n-                    //   pub fn make_foo() -> Foo { .. }\n-                    // }\n-                    //\n-                    // mod b {\n-                    //   fn foo() -> a::Foo { a::make_foo() }\n-                    // }\n-                    // ```\n-                    //\n-                    // Here, the return type of `foo` references an\n-                    // `Opaque` indeed, but not one whose value is\n-                    // presently being inferred. You can get into a\n-                    // similar situation with closure return types\n-                    // today:\n-                    //\n-                    // ```rust\n-                    // fn foo() -> impl Iterator { .. }\n-                    // fn bar() {\n-                    //     let x = || foo(); // returns the Opaque assoc with `foo`\n-                    // }\n-                    // ```\n-                    self.opaque_type_origin(def_id, cause.span)?,\n-                )),\n+                ty::Opaque(def_id, substs) => {\n+                    if let ty::Opaque(did2, _) = *b.kind() {\n+                        if self.opaque_type_origin(did2, cause.span).is_some() {\n+                            self.tcx\n+                                .sess\n+                                .struct_span_err(\n+                                    cause.span,\n+                                    \"opaque type's hidden type cannot be another opaque type from the same scope\",\n+                                )\n+                                .span_label(cause.span, \"one of the two opaque types used here has to be outside its defining scope\")\n+                                .span_note(\n+                                    self.tcx.def_span(def_id),\n+                                    \"opaque type whose hidden type is being assigned\",\n+                                )\n+                                .span_note(\n+                                    self.tcx.def_span(did2),\n+                                    \"opaque type being used as hidden type\",\n+                                )\n+                                .emit();\n+                        }\n+                    }\n+                    Some(self.register_hidden_type(\n+                        OpaqueTypeKey { def_id, substs },\n+                        cause.clone(),\n+                        param_env,\n+                        b,\n+                        // Check that this is `impl Trait` type is\n+                        // declared by `parent_def_id` -- i.e., one whose\n+                        // value we are inferring.  At present, this is\n+                        // always true during the first phase of\n+                        // type-check, but not always true later on during\n+                        // NLL. Once we support named opaque types more fully,\n+                        // this same scenario will be able to arise during all phases.\n+                        //\n+                        // Here is an example using type alias `impl Trait`\n+                        // that indicates the distinction we are checking for:\n+                        //\n+                        // ```rust\n+                        // mod a {\n+                        //   pub type Foo = impl Iterator;\n+                        //   pub fn make_foo() -> Foo { .. }\n+                        // }\n+                        //\n+                        // mod b {\n+                        //   fn foo() -> a::Foo { a::make_foo() }\n+                        // }\n+                        // ```\n+                        //\n+                        // Here, the return type of `foo` references an\n+                        // `Opaque` indeed, but not one whose value is\n+                        // presently being inferred. You can get into a\n+                        // similar situation with closure return types\n+                        // today:\n+                        //\n+                        // ```rust\n+                        // fn foo() -> impl Iterator { .. }\n+                        // fn bar() {\n+                        //     let x = || foo(); // returns the Opaque assoc with `foo`\n+                        // }\n+                        // ```\n+                        self.opaque_type_origin(def_id, cause.span)?,\n+                    ))\n+                }\n                 _ => None,\n             };\n             if let Some(res) = process(a, b) {"}, {"sha": "26618eec1d712297c456c7b676c6b937596191c5", "filename": "src/test/ui/impl-trait/example-calendar.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7f608eb9edb38ff271ff5be50dbbbb424cbf348f/src%2Ftest%2Fui%2Fimpl-trait%2Fexample-calendar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f608eb9edb38ff271ff5be50dbbbb424cbf348f/src%2Ftest%2Fui%2Fimpl-trait%2Fexample-calendar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexample-calendar.rs?ref=7f608eb9edb38ff271ff5be50dbbbb424cbf348f", "patch": "@@ -1,4 +1,3 @@\n-// run-pass\n // ignore-compare-mode-chalk\n \n #![feature(fn_traits,\n@@ -590,7 +589,7 @@ fn test_format_month() {\n fn format_months(it: impl Iterator<Item = impl DateIterator>)\n                 -> impl Iterator<Item=impl Iterator<Item=String>>\n {\n-    it.map(format_month)\n+    it.map(format_month) //~ ERROR opaque type's hidden type cannot be another opaque type\n }\n \n /// Takes an iterator of iterators of strings; the sub-iterators are consumed"}, {"sha": "3894285947fec7d462300adfbe50e34befe2d46c", "filename": "src/test/ui/impl-trait/example-calendar.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7f608eb9edb38ff271ff5be50dbbbb424cbf348f/src%2Ftest%2Fui%2Fimpl-trait%2Fexample-calendar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f608eb9edb38ff271ff5be50dbbbb424cbf348f/src%2Ftest%2Fui%2Fimpl-trait%2Fexample-calendar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexample-calendar.stderr?ref=7f608eb9edb38ff271ff5be50dbbbb424cbf348f", "patch": "@@ -0,0 +1,19 @@\n+error: opaque type's hidden type cannot be another opaque type from the same scope\n+  --> $DIR/example-calendar.rs:592:5\n+   |\n+LL |     it.map(format_month)\n+   |     ^^^^^^^^^^^^^^^^^^^^ one of the two opaque types used here has to be outside its defining scope\n+   |\n+note: opaque type whose hidden type is being assigned\n+  --> $DIR/example-calendar.rs:560:43\n+   |\n+LL | fn format_month(it: impl DateIterator) -> impl Iterator<Item=String> {\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: opaque type being used as hidden type\n+  --> $DIR/example-calendar.rs:590:39\n+   |\n+LL |                 -> impl Iterator<Item=impl Iterator<Item=String>>\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "8169cfafac71127665f97b6138b61fea1188f89b", "filename": "src/test/ui/impl-trait/issues/issue-70877.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f608eb9edb38ff271ff5be50dbbbb424cbf348f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f608eb9edb38ff271ff5be50dbbbb424cbf348f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.rs?ref=7f608eb9edb38ff271ff5be50dbbbb424cbf348f", "patch": "@@ -1,7 +1,5 @@\n #![feature(type_alias_impl_trait)]\n \n-// check-pass\n-\n type FooArg<'a> = &'a dyn ToString;\n type FooRet = impl std::fmt::Debug;\n \n@@ -30,7 +28,7 @@ fn ham() -> Foo {\n fn oof() -> impl std::fmt::Debug {\n     let mut bar = ham();\n     let func = bar.next().unwrap();\n-    return func(&\"oof\");\n+    return func(&\"oof\"); //~ ERROR opaque type's hidden type cannot be another opaque type\n }\n \n fn main() {"}, {"sha": "8813bff3c353e3c656efc75d246b37af50949431", "filename": "src/test/ui/impl-trait/issues/issue-70877.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7f608eb9edb38ff271ff5be50dbbbb424cbf348f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f608eb9edb38ff271ff5be50dbbbb424cbf348f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.stderr?ref=7f608eb9edb38ff271ff5be50dbbbb424cbf348f", "patch": "@@ -0,0 +1,19 @@\n+error: opaque type's hidden type cannot be another opaque type from the same scope\n+  --> $DIR/issue-70877.rs:31:12\n+   |\n+LL |     return func(&\"oof\");\n+   |            ^^^^^^^^^^^^ one of the two opaque types used here has to be outside its defining scope\n+   |\n+note: opaque type whose hidden type is being assigned\n+  --> $DIR/issue-70877.rs:28:13\n+   |\n+LL | fn oof() -> impl std::fmt::Debug {\n+   |             ^^^^^^^^^^^^^^^^^^^^\n+note: opaque type being used as hidden type\n+  --> $DIR/issue-70877.rs:4:15\n+   |\n+LL | type FooRet = impl std::fmt::Debug;\n+   |               ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "86323add77905060d354e973e935172f4ce16787", "filename": "src/test/ui/impl-trait/issues/issue-88236-2.nll.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7f608eb9edb38ff271ff5be50dbbbb424cbf348f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f608eb9edb38ff271ff5be50dbbbb424cbf348f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236-2.nll.stderr?ref=7f608eb9edb38ff271ff5be50dbbbb424cbf348f", "patch": "@@ -0,0 +1,39 @@\n+error: higher-ranked subtype error\n+  --> $DIR/issue-88236-2.rs:17:5\n+   |\n+LL |     &()\n+   |     ^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/issue-88236-2.rs:17:5\n+   |\n+LL |     &()\n+   |     ^^^\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-88236-2.rs:20:5\n+   |\n+LL | fn make_bad_impl<'b>(x: &'b ()) -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> {\n+   |                  -- lifetime `'b` defined here\n+LL |     x\n+   |     ^ returning this value requires that `'b` must outlive `'static`\n+   |\n+help: to allow this `impl Trait` to capture borrowed data with lifetime `'b`, add `'b` as a bound\n+   |\n+LL | fn make_bad_impl<'b>(x: &'b ()) -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> + 'b {\n+   |                                                                                  ++++\n+\n+error: higher-ranked subtype error\n+  --> $DIR/issue-88236-2.rs:20:5\n+   |\n+LL |     x\n+   |     ^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/issue-88236-2.rs:20:5\n+   |\n+LL |     x\n+   |     ^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "6eb2a11b22c5f359e89099183bcdd64c9c54f301", "filename": "src/test/ui/impl-trait/two_tait_defining_each_other.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7f608eb9edb38ff271ff5be50dbbbb424cbf348f/src%2Ftest%2Fui%2Fimpl-trait%2Ftwo_tait_defining_each_other.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f608eb9edb38ff271ff5be50dbbbb424cbf348f/src%2Ftest%2Fui%2Fimpl-trait%2Ftwo_tait_defining_each_other.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftwo_tait_defining_each_other.rs?ref=7f608eb9edb38ff271ff5be50dbbbb424cbf348f", "patch": "@@ -1,7 +1,5 @@\n #![feature(type_alias_impl_trait)]\n \n-// check-pass\n-\n type A = impl Foo;\n type B = impl Foo;\n \n@@ -12,6 +10,7 @@ fn muh(x: A) -> B {\n         return Bar; // B's hidden type is Bar\n     }\n     x // A's hidden type is `Bar`, because all the hidden types of `B` are compared with each other\n+    //~^ ERROR opaque type's hidden type cannot be another opaque type\n }\n \n struct Bar;"}, {"sha": "1a42ac525a6a8f12f60f5a7b47f7ca4bf09d7714", "filename": "src/test/ui/impl-trait/two_tait_defining_each_other.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7f608eb9edb38ff271ff5be50dbbbb424cbf348f/src%2Ftest%2Fui%2Fimpl-trait%2Ftwo_tait_defining_each_other.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f608eb9edb38ff271ff5be50dbbbb424cbf348f/src%2Ftest%2Fui%2Fimpl-trait%2Ftwo_tait_defining_each_other.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftwo_tait_defining_each_other.stderr?ref=7f608eb9edb38ff271ff5be50dbbbb424cbf348f", "patch": "@@ -0,0 +1,19 @@\n+error: opaque type's hidden type cannot be another opaque type from the same scope\n+  --> $DIR/two_tait_defining_each_other.rs:12:5\n+   |\n+LL |     x // A's hidden type is `Bar`, because all the hidden types of `B` are compared with each other\n+   |     ^ one of the two opaque types used here has to be outside its defining scope\n+   |\n+note: opaque type whose hidden type is being assigned\n+  --> $DIR/two_tait_defining_each_other.rs:4:10\n+   |\n+LL | type B = impl Foo;\n+   |          ^^^^^^^^\n+note: opaque type being used as hidden type\n+  --> $DIR/two_tait_defining_each_other.rs:3:10\n+   |\n+LL | type A = impl Foo;\n+   |          ^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "3b16d0f5e047f4fe9a4850b3a157f8a1b8e159ab", "filename": "src/test/ui/impl-trait/two_tait_defining_each_other2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f608eb9edb38ff271ff5be50dbbbb424cbf348f/src%2Ftest%2Fui%2Fimpl-trait%2Ftwo_tait_defining_each_other2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f608eb9edb38ff271ff5be50dbbbb424cbf348f/src%2Ftest%2Fui%2Fimpl-trait%2Ftwo_tait_defining_each_other2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftwo_tait_defining_each_other2.rs?ref=7f608eb9edb38ff271ff5be50dbbbb424cbf348f", "patch": "@@ -1,13 +1,13 @@\n #![feature(type_alias_impl_trait)]\n \n type A = impl Foo;\n-//~^ ERROR unconstrained opaque type\n type B = impl Foo;\n \n trait Foo {}\n \n fn muh(x: A) -> B {\n     x // B's hidden type is A (opaquely)\n+    //~^ ERROR opaque type's hidden type cannot be another opaque type\n }\n \n struct Bar;"}, {"sha": "ef2089a6c5b176c2132d4b708df92f5ab25fd9d9", "filename": "src/test/ui/impl-trait/two_tait_defining_each_other2.stderr", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7f608eb9edb38ff271ff5be50dbbbb424cbf348f/src%2Ftest%2Fui%2Fimpl-trait%2Ftwo_tait_defining_each_other2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f608eb9edb38ff271ff5be50dbbbb424cbf348f/src%2Ftest%2Fui%2Fimpl-trait%2Ftwo_tait_defining_each_other2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftwo_tait_defining_each_other2.stderr?ref=7f608eb9edb38ff271ff5be50dbbbb424cbf348f", "patch": "@@ -1,10 +1,19 @@\n-error: unconstrained opaque type\n+error: opaque type's hidden type cannot be another opaque type from the same scope\n+  --> $DIR/two_tait_defining_each_other2.rs:9:5\n+   |\n+LL |     x // B's hidden type is A (opaquely)\n+   |     ^ one of the two opaque types used here has to be outside its defining scope\n+   |\n+note: opaque type whose hidden type is being assigned\n+  --> $DIR/two_tait_defining_each_other2.rs:4:10\n+   |\n+LL | type B = impl Foo;\n+   |          ^^^^^^^^\n+note: opaque type being used as hidden type\n   --> $DIR/two_tait_defining_each_other2.rs:3:10\n    |\n LL | type A = impl Foo;\n    |          ^^^^^^^^\n-   |\n-   = note: `A` must be used in combination with a concrete type within the same module\n \n error: aborting due to previous error\n "}, {"sha": "37f8ae1b84b55f50cd7ada951e389cd9b269d007", "filename": "src/test/ui/impl-trait/two_tait_defining_each_other3.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7f608eb9edb38ff271ff5be50dbbbb424cbf348f/src%2Ftest%2Fui%2Fimpl-trait%2Ftwo_tait_defining_each_other3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f608eb9edb38ff271ff5be50dbbbb424cbf348f/src%2Ftest%2Fui%2Fimpl-trait%2Ftwo_tait_defining_each_other3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftwo_tait_defining_each_other3.rs?ref=7f608eb9edb38ff271ff5be50dbbbb424cbf348f", "patch": "@@ -1,7 +1,5 @@\n #![feature(type_alias_impl_trait)]\n \n-// check-pass\n-\n type A = impl Foo;\n type B = impl Foo;\n \n@@ -10,6 +8,7 @@ trait Foo {}\n fn muh(x: A) -> B {\n     if false {\n         return x;  // B's hidden type is A (opaquely)\n+        //~^ ERROR opaque type's hidden type cannot be another opaque type\n     }\n     Bar // A's hidden type is `Bar`, because all the return types are compared with each other\n }"}, {"sha": "b06dc16d5e700c505e179dc37298a1881b473d2e", "filename": "src/test/ui/impl-trait/two_tait_defining_each_other3.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7f608eb9edb38ff271ff5be50dbbbb424cbf348f/src%2Ftest%2Fui%2Fimpl-trait%2Ftwo_tait_defining_each_other3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f608eb9edb38ff271ff5be50dbbbb424cbf348f/src%2Ftest%2Fui%2Fimpl-trait%2Ftwo_tait_defining_each_other3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftwo_tait_defining_each_other3.stderr?ref=7f608eb9edb38ff271ff5be50dbbbb424cbf348f", "patch": "@@ -0,0 +1,19 @@\n+error: opaque type's hidden type cannot be another opaque type from the same scope\n+  --> $DIR/two_tait_defining_each_other3.rs:10:16\n+   |\n+LL |         return x;  // B's hidden type is A (opaquely)\n+   |                ^ one of the two opaque types used here has to be outside its defining scope\n+   |\n+note: opaque type whose hidden type is being assigned\n+  --> $DIR/two_tait_defining_each_other3.rs:4:10\n+   |\n+LL | type B = impl Foo;\n+   |          ^^^^^^^^\n+note: opaque type being used as hidden type\n+  --> $DIR/two_tait_defining_each_other3.rs:3:10\n+   |\n+LL | type A = impl Foo;\n+   |          ^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "60b6e1aac6281672b544be3f2dc979251b3f507e", "filename": "src/test/ui/type-alias-impl-trait/nested_type_alias_impl_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f608eb9edb38ff271ff5be50dbbbb424cbf348f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested_type_alias_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f608eb9edb38ff271ff5be50dbbbb424cbf348f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested_type_alias_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested_type_alias_impl_trait.rs?ref=7f608eb9edb38ff271ff5be50dbbbb424cbf348f", "patch": "@@ -1,5 +1,5 @@\n #![feature(type_alias_impl_trait)]\n-// build-pass (FIXME(62277): could be check-pass?)\n+\n mod my_mod {\n     use std::fmt::Debug;\n \n@@ -11,7 +11,7 @@ mod my_mod {\n     }\n \n     pub fn get_foot() -> Foot {\n-        get_foo()\n+        get_foo() //~ ERROR opaque type's hidden type cannot be another opaque type\n     }\n }\n "}, {"sha": "fa6ecf68d28f3fa195ad93619ba1f74d92ee0952", "filename": "src/test/ui/type-alias-impl-trait/nested_type_alias_impl_trait.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7f608eb9edb38ff271ff5be50dbbbb424cbf348f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested_type_alias_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f608eb9edb38ff271ff5be50dbbbb424cbf348f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested_type_alias_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested_type_alias_impl_trait.stderr?ref=7f608eb9edb38ff271ff5be50dbbbb424cbf348f", "patch": "@@ -0,0 +1,19 @@\n+error: opaque type's hidden type cannot be another opaque type from the same scope\n+  --> $DIR/nested_type_alias_impl_trait.rs:14:9\n+   |\n+LL |         get_foo()\n+   |         ^^^^^^^^^ one of the two opaque types used here has to be outside its defining scope\n+   |\n+note: opaque type whose hidden type is being assigned\n+  --> $DIR/nested_type_alias_impl_trait.rs:7:21\n+   |\n+LL |     pub type Foot = impl Debug;\n+   |                     ^^^^^^^^^^\n+note: opaque type being used as hidden type\n+  --> $DIR/nested_type_alias_impl_trait.rs:6:20\n+   |\n+LL |     pub type Foo = impl Debug;\n+   |                    ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}