{"sha": "5f74ef4fb1d86d80a3052e772010e613353dbfa7", "node_id": "C_kwDOAAsO6NoAKDVmNzRlZjRmYjFkODZkODBhMzA1MmU3NzIwMTBlNjEzMzUzZGJmYTc", "commit": {"author": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2022-01-18T22:38:17Z"}, "committer": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2022-01-18T22:38:17Z"}, "message": "Formally implement let chains", "tree": {"sha": "07b04d52535a6472f60b6482028a3bcb725e4494", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07b04d52535a6472f60b6482028a3bcb725e4494"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f74ef4fb1d86d80a3052e772010e613353dbfa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f74ef4fb1d86d80a3052e772010e613353dbfa7", "html_url": "https://github.com/rust-lang/rust/commit/5f74ef4fb1d86d80a3052e772010e613353dbfa7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f74ef4fb1d86d80a3052e772010e613353dbfa7/comments", "author": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "committer": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ad5d82f822b3cb67637f11be2e65c5662b66ec0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ad5d82f822b3cb67637f11be2e65c5662b66ec0", "html_url": "https://github.com/rust-lang/rust/commit/9ad5d82f822b3cb67637f11be2e65c5662b66ec0"}], "stats": {"total": 876, "additions": 536, "deletions": 340}, "files": [{"sha": "6c172d59f837b4f97690ea8582e11a13a91baee1", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5f74ef4fb1d86d80a3052e772010e613353dbfa7/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f74ef4fb1d86d80a3052e772010e613353dbfa7/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=5f74ef4fb1d86d80a3052e772010e613353dbfa7", "patch": "@@ -392,14 +392,20 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     // If `cond` kind is `let`, returns `let`. Otherwise, wraps and returns `cond`\n     // in a temporary block.\n     fn manage_let_cond(&mut self, cond: &'hir hir::Expr<'hir>) -> &'hir hir::Expr<'hir> {\n-        match cond.kind {\n-            hir::ExprKind::Let(..) => cond,\n-            _ => {\n-                let span_block =\n-                    self.mark_span_with_reason(DesugaringKind::CondTemporary, cond.span, None);\n-                self.expr_drop_temps(span_block, cond, AttrVec::new())\n+        fn has_let_expr<'hir>(expr: &'hir hir::Expr<'hir>) -> bool {\n+            match expr.kind {\n+                hir::ExprKind::Binary(_, lhs, rhs) => has_let_expr(lhs) || has_let_expr(rhs),\n+                hir::ExprKind::Let(..) => true,\n+                _ => false,\n             }\n         }\n+        if has_let_expr(cond) {\n+            cond\n+        } else {\n+            let reason = DesugaringKind::CondTemporary;\n+            let span_block = self.mark_span_with_reason(reason, cond.span, None);\n+            self.expr_drop_temps(span_block, cond, AttrVec::new())\n+        }\n     }\n \n     // We desugar: `'label: while $cond $body` into:"}, {"sha": "a6ecfa4520608a42cf1425844db1171b84313733", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f74ef4fb1d86d80a3052e772010e613353dbfa7/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f74ef4fb1d86d80a3052e772010e613353dbfa7/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=5f74ef4fb1d86d80a3052e772010e613353dbfa7", "patch": "@@ -707,11 +707,7 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n         \"`if let` guards are experimental\",\n         \"you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\"\n     );\n-    gate_all!(\n-        let_chains,\n-        \"`let` expressions in this position are experimental\",\n-        \"you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\"\n-    );\n+    gate_all!(let_chains, \"`let` expressions in this position are unstable\");\n     gate_all!(\n         async_closure,\n         \"async closures are unstable\","}, {"sha": "0b65a5ff3ecc3b28df5607f105d7248e733ed1d6", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f74ef4fb1d86d80a3052e772010e613353dbfa7/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f74ef4fb1d86d80a3052e772010e613353dbfa7/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=5f74ef4fb1d86d80a3052e772010e613353dbfa7", "patch": "@@ -415,7 +415,7 @@ declare_features! (\n     // Allows setting the threshold for the `large_assignments` lint.\n     (active, large_assignments, \"1.52.0\", Some(83518), None),\n     /// Allows `if/while p && let q = r && ...` chains.\n-    (incomplete, let_chains, \"1.37.0\", Some(53667), None),\n+    (active, let_chains, \"1.37.0\", Some(53667), None),\n     /// Allows `let...else` statements.\n     (active, let_else, \"1.56.0\", Some(87335), None),\n     /// Allows `#[link(..., cfg(..))]`."}, {"sha": "11dc69ab71566f2289391e5c4671532d3305903a", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f74ef4fb1d86d80a3052e772010e613353dbfa7/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f74ef4fb1d86d80a3052e772010e613353dbfa7/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=5f74ef4fb1d86d80a3052e772010e613353dbfa7", "patch": "@@ -213,7 +213,7 @@ pub struct Expr<'tcx> {\n \n #[derive(Debug, HashStable)]\n pub enum ExprKind<'tcx> {\n-    /// `Scope`s are used to explicitely mark destruction scopes,\n+    /// `Scope`s are used to explicitly mark destruction scopes,\n     /// and to track the `HirId` of the expressions within the scope.\n     Scope {\n         region_scope: region::Scope,"}, {"sha": "da8fbdbf3bce4b2e72434a639a5d03b5a377ff13", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5f74ef4fb1d86d80a3052e772010e613353dbfa7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f74ef4fb1d86d80a3052e772010e613353dbfa7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=5f74ef4fb1d86d80a3052e772010e613353dbfa7", "patch": "@@ -90,17 +90,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 };\n \n                 let join_block = this.cfg.start_new_block();\n-                this.cfg.terminate(\n-                    then_blk,\n-                    source_info,\n-                    TerminatorKind::Goto { target: join_block },\n-                );\n-                this.cfg.terminate(\n-                    else_blk,\n-                    source_info,\n-                    TerminatorKind::Goto { target: join_block },\n-                );\n-\n+                this.cfg.goto(then_blk, source_info, join_block);\n+                this.cfg.goto(else_blk, source_info, join_block);\n                 join_block.unit()\n             }\n             ExprKind::Let { expr, ref pat } => {\n@@ -109,8 +100,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     this.lower_let_expr(block, &this.thir[expr], pat, scope, expr_span)\n                 });\n \n-                let join_block = this.cfg.start_new_block();\n-\n                 this.cfg.push_assign_constant(\n                     true_block,\n                     source_info,\n@@ -133,6 +122,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     },\n                 );\n \n+                let join_block = this.cfg.start_new_block();\n                 this.cfg.goto(true_block, source_info, join_block);\n                 this.cfg.goto(false_block, source_info, join_block);\n                 join_block.unit()"}, {"sha": "85950d82419408d1cb2ed7c387f8c2d8bdd2f3fc", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5f74ef4fb1d86d80a3052e772010e613353dbfa7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f74ef4fb1d86d80a3052e772010e613353dbfa7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=5f74ef4fb1d86d80a3052e772010e613353dbfa7", "patch": "@@ -47,6 +47,25 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let expr_span = expr.span;\n \n         match expr.kind {\n+            ExprKind::LogicalOp { op: LogicalOp::And, lhs, rhs } => {\n+                let lhs_then_block = unpack!(this.then_else_break(\n+                    block,\n+                    &this.thir[lhs],\n+                    temp_scope_override,\n+                    break_scope,\n+                    variable_scope_span,\n+                ));\n+\n+                let rhs_then_block = unpack!(this.then_else_break(\n+                    lhs_then_block,\n+                    &this.thir[rhs],\n+                    temp_scope_override,\n+                    break_scope,\n+                    variable_scope_span,\n+                ));\n+\n+                rhs_then_block.unit()\n+            }\n             ExprKind::Scope { region_scope, lint_level, value } => {\n                 let region_scope = (region_scope, this.source_info(expr_span));\n                 this.in_scope(region_scope, lint_level, |this| {"}, {"sha": "84d6c1d2db87f1c3834a2cafb9b5d121af446d97", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f74ef4fb1d86d80a3052e772010e613353dbfa7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f74ef4fb1d86d80a3052e772010e613353dbfa7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=5f74ef4fb1d86d80a3052e772010e613353dbfa7", "patch": "@@ -498,7 +498,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     ///\n     /// if let Some(x) = a && let Some(y) = b && let Some(z) = c { ... }\n     ///\n-    /// there are three possible ways the condition can be false and we may have\n+    /// There are three possible ways the condition can be false and we may have\n     /// to drop `x`, `x` and `y`, or neither depending on which binding fails.\n     /// To handle this correctly we use a `DropTree` in a similar way to a\n     /// `loop` expression and 'break' out on all of the 'else' paths."}, {"sha": "a43388808cd5ce2c3664b5ea6377304f43c2cf73", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f74ef4fb1d86d80a3052e772010e613353dbfa7/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f74ef4fb1d86d80a3052e772010e613353dbfa7/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=5f74ef4fb1d86d80a3052e772010e613353dbfa7", "patch": "@@ -315,7 +315,6 @@ impl<'tcx> Cx<'tcx> {\n                             lhs: self.mirror_expr(lhs),\n                             rhs: self.mirror_expr(rhs),\n                         },\n-\n                         _ => {\n                             let op = bin_op(op.node);\n                             ExprKind::Binary {"}, {"sha": "34204c3852ad0842e839fa1bb21368019ecaa780", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5f74ef4fb1d86d80a3052e772010e613353dbfa7/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f74ef4fb1d86d80a3052e772010e613353dbfa7/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=5f74ef4fb1d86d80a3052e772010e613353dbfa7", "patch": "@@ -17,6 +17,7 @@ use rustc_session::lint::builtin::{\n     BINDINGS_WITH_VARIANT_NAME, IRREFUTABLE_LET_PATTERNS, UNREACHABLE_PATTERNS,\n };\n use rustc_session::Session;\n+use rustc_span::source_map::Spanned;\n use rustc_span::{DesugaringKind, ExpnKind, Span};\n \n crate fn check_match(tcx: TyCtxt<'_>, def_id: DefId) {\n@@ -445,6 +446,10 @@ fn check_let_reachability<'p, 'tcx>(\n     pat: &'p DeconstructedPat<'p, 'tcx>,\n     span: Span,\n ) {\n+    if is_let_chain(cx.tcx, pat_id) {\n+        return;\n+    }\n+\n     let arms = [MatchArm { pat, hir_id: pat_id, has_guard: false }];\n     let report = compute_match_usefulness(&cx, &arms, pat_id, pat.ty());\n \n@@ -764,8 +769,11 @@ pub enum LetSource {\n \n fn let_source(tcx: TyCtxt<'_>, pat_id: HirId) -> LetSource {\n     let hir = tcx.hir();\n+\n     let parent = hir.get_parent_node(pat_id);\n-    match hir.get(parent) {\n+    let parent_node = hir.get(parent);\n+\n+    match parent_node {\n         hir::Node::Arm(hir::Arm {\n             guard: Some(hir::Guard::IfLet(&hir::Pat { hir_id, .. }, _)),\n             ..\n@@ -780,6 +788,7 @@ fn let_source(tcx: TyCtxt<'_>, pat_id: HirId) -> LetSource {\n         }\n         _ => {}\n     }\n+\n     let parent_parent = hir.get_parent_node(parent);\n     let parent_parent_node = hir.get(parent_parent);\n \n@@ -792,12 +801,30 @@ fn let_source(tcx: TyCtxt<'_>, pat_id: HirId) -> LetSource {\n         ..\n     }) = parent_parent_parent_parent_node\n     {\n-        LetSource::WhileLet\n-    } else if let hir::Node::Expr(hir::Expr { kind: hir::ExprKind::If { .. }, .. }) =\n-        parent_parent_node\n-    {\n-        LetSource::IfLet\n-    } else {\n-        LetSource::GenericLet\n+        return LetSource::WhileLet;\n+    }\n+\n+    if let hir::Node::Expr(hir::Expr { kind: hir::ExprKind::If(..), .. }) = parent_parent_node {\n+        return LetSource::IfLet;\n     }\n+\n+    LetSource::GenericLet\n+}\n+\n+// Since this function is called within a let context, it is reasonable to assume that any parent\n+// `&&` infers a let chain\n+fn is_let_chain(tcx: TyCtxt<'_>, pat_id: HirId) -> bool {\n+    let hir = tcx.hir();\n+    let parent = hir.get_parent_node(pat_id);\n+    let parent_parent = hir.get_parent_node(parent);\n+    matches!(\n+        hir.get(parent_parent),\n+        hir::Node::Expr(\n+            hir::Expr {\n+                kind: hir::ExprKind::Binary(Spanned { node: hir::BinOpKind::And, .. }, ..),\n+                ..\n+            },\n+            ..\n+        )\n+    )\n }"}, {"sha": "2cd8731141af752a8b65559c9155948f6b47eeb2", "filename": "src/test/ui/expr/if/attrs/let-chains-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Flet-chains-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Flet-chains-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Flet-chains-attr.rs?ref=5f74ef4fb1d86d80a3052e772010e613353dbfa7", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![feature(let_chains)] //~ WARN the feature `let_chains` is incomplete\n+#![feature(let_chains)]\n \n #[cfg(FALSE)]\n fn foo() {"}, {"sha": "8b9874715342c30e23133117b9a38eec1061a4de", "filename": "src/test/ui/expr/if/attrs/let-chains-attr.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9ad5d82f822b3cb67637f11be2e65c5662b66ec0/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Flet-chains-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ad5d82f822b3cb67637f11be2e65c5662b66ec0/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Flet-chains-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Flet-chains-attr.stderr?ref=9ad5d82f822b3cb67637f11be2e65c5662b66ec0", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `let_chains` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/let-chains-attr.rs:3:12\n-   |\n-LL | #![feature(let_chains)]\n-   |            ^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "01f943c87dd7fda9a1e078f7adee4137a3b80901", "filename": "src/test/ui/mir/mir_let_chains_drop_order.rs", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Fmir%2Fmir_let_chains_drop_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Fmir%2Fmir_let_chains_drop_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_let_chains_drop_order.rs?ref=5f74ef4fb1d86d80a3052e772010e613353dbfa7", "patch": "@@ -0,0 +1,93 @@\n+// run-pass\n+// needs-unwind\n+// ignore-wasm32-bare compiled with panic=abort by default\n+\n+// See `mir_drop_order.rs` for more information\n+\n+#![feature(let_chains)]\n+\n+use std::cell::RefCell;\n+use std::panic;\n+\n+pub struct DropLogger<'a, T> {\n+    extra: T,\n+    id: usize,\n+    log: &'a panic::AssertUnwindSafe<RefCell<Vec<usize>>>\n+}\n+\n+impl<'a, T> Drop for DropLogger<'a, T> {\n+    fn drop(&mut self) {\n+        self.log.0.borrow_mut().push(self.id);\n+    }\n+}\n+\n+struct InjectedFailure;\n+\n+#[allow(unreachable_code)]\n+fn main() {\n+    let log = panic::AssertUnwindSafe(RefCell::new(vec![]));\n+    let d = |id, extra| DropLogger { extra, id: id, log: &log };\n+    let get = || -> Vec<_> {\n+        let mut m = log.0.borrow_mut();\n+        let n = m.drain(..);\n+        n.collect()\n+    };\n+\n+    {\n+        let _x = (\n+            d(\n+                0,\n+                d(\n+                    1,\n+                    if let Some(_) = d(2, Some(true)).extra && let DropLogger { .. } = d(3, None) {\n+                        None\n+                    } else {\n+                        Some(true)\n+                    }\n+                ).extra\n+            ),\n+            d(4, None),\n+            &d(5, None),\n+            d(6, None),\n+            if let DropLogger { .. } = d(7, None) && let DropLogger { .. } = d(8, None) {\n+                d(9, None)\n+            }\n+            else {\n+                // 10 is not constructed\n+                d(10, None)\n+            }\n+        );\n+        assert_eq!(get(), vec![3, 8, 7, 1, 2]);\n+    }\n+    assert_eq!(get(), vec![0, 4, 6, 9, 5]);\n+\n+    let _ = std::panic::catch_unwind(|| {\n+        (\n+            d(\n+                11,\n+                d(\n+                    12,\n+                    if let Some(_) = d(13, Some(true)).extra\n+                        && let DropLogger { .. } = d(14, None)\n+                    {\n+                        None\n+                    } else {\n+                        Some(true)\n+                    }\n+                ).extra\n+            ),\n+            d(15, None),\n+            &d(16, None),\n+            d(17, None),\n+            if let DropLogger { .. } = d(18, None) && let DropLogger { .. } = d(19, None) {\n+                d(20, None)\n+            }\n+            else {\n+                // 10 is not constructed\n+                d(21, None)\n+            },\n+            panic::panic_any(InjectedFailure)\n+        );\n+    });\n+    assert_eq!(get(), vec![14, 19, 20, 17, 15, 11, 18, 16, 12, 13]);\n+}"}, {"sha": "d8da0ac8aa6c5cb8c426540ef28a7e65cc3d88f4", "filename": "src/test/ui/pattern/issue-82290.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9ad5d82f822b3cb67637f11be2e65c5662b66ec0/src%2Ftest%2Fui%2Fpattern%2Fissue-82290.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ad5d82f822b3cb67637f11be2e65c5662b66ec0/src%2Ftest%2Fui%2Fpattern%2Fissue-82290.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-82290.rs?ref=9ad5d82f822b3cb67637f11be2e65c5662b66ec0", "patch": "@@ -1,9 +0,0 @@\n-// check-pass\n-\n-#![feature(let_chains)] //~ WARN the feature `let_chains` is incomplete\n-\n-fn main() {\n-    if true && let x = 1 { //~ WARN irrefutable `let` pattern\n-        let _ = x;\n-    }\n-}"}, {"sha": "0a3cf2c794f47baa7e85c4029876768cef79a33a", "filename": "src/test/ui/pattern/issue-82290.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9ad5d82f822b3cb67637f11be2e65c5662b66ec0/src%2Ftest%2Fui%2Fpattern%2Fissue-82290.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ad5d82f822b3cb67637f11be2e65c5662b66ec0/src%2Ftest%2Fui%2Fpattern%2Fissue-82290.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-82290.stderr?ref=9ad5d82f822b3cb67637f11be2e65c5662b66ec0", "patch": "@@ -1,21 +0,0 @@\n-warning: the feature `let_chains` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-82290.rs:3:12\n-   |\n-LL | #![feature(let_chains)]\n-   |            ^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-\n-warning: irrefutable `let` pattern\n-  --> $DIR/issue-82290.rs:6:16\n-   |\n-LL |     if true && let x = 1 {\n-   |                ^^^^^^^^^\n-   |\n-   = note: `#[warn(irrefutable_let_patterns)]` on by default\n-   = note: this pattern will always match, so the `let` is useless\n-   = help: consider removing `let`\n-\n-warning: 2 warnings emitted\n-"}, {"sha": "34d2d84da934ff6b28a8389ec1b285b981ea2c9d", "filename": "src/test/ui/rfc-2294-if-let-guard/feature-gate.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs?ref=5f74ef4fb1d86d80a3052e772010e613353dbfa7", "patch": "@@ -8,36 +8,36 @@ fn _if_let_guard() {\n         //~^ ERROR `if let` guards are experimental\n \n         () if (let 0 = 1) => {}\n-        //~^ ERROR `let` expressions in this position are experimental\n+        //~^ ERROR `let` expressions in this position are unstable\n \n         () if (((let 0 = 1))) => {}\n-        //~^ ERROR `let` expressions in this position are experimental\n+        //~^ ERROR `let` expressions in this position are unstable\n \n         () if true && let 0 = 1 => {}\n-        //~^ ERROR `let` expressions in this position are experimental\n+        //~^ ERROR `let` expressions in this position are unstable\n \n         () if let 0 = 1 && true => {}\n-        //~^ ERROR `let` expressions in this position are experimental\n+        //~^ ERROR `let` expressions in this position are unstable\n \n         () if (let 0 = 1) && true => {}\n-        //~^ ERROR `let` expressions in this position are experimental\n+        //~^ ERROR `let` expressions in this position are unstable\n \n         () if true && (let 0 = 1) => {}\n-        //~^ ERROR `let` expressions in this position are experimental\n+        //~^ ERROR `let` expressions in this position are unstable\n \n         () if (let 0 = 1) && (let 0 = 1) => {}\n-        //~^ ERROR `let` expressions in this position are experimental\n-        //~| ERROR `let` expressions in this position are experimental\n+        //~^ ERROR `let` expressions in this position are unstable\n+        //~| ERROR `let` expressions in this position are unstable\n \n         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n-        //~^ ERROR `let` expressions in this position are experimental\n-        //~| ERROR `let` expressions in this position are experimental\n-        //~| ERROR `let` expressions in this position are experimental\n-        //~| ERROR `let` expressions in this position are experimental\n-        //~| ERROR `let` expressions in this position are experimental\n+        //~^ ERROR `let` expressions in this position are unstable\n+        //~| ERROR `let` expressions in this position are unstable\n+        //~| ERROR `let` expressions in this position are unstable\n+        //~| ERROR `let` expressions in this position are unstable\n+        //~| ERROR `let` expressions in this position are unstable\n \n         () if let Range { start: _, end: _ } = (true..true) && false => {}\n-        //~^ ERROR `let` expressions in this position are experimental\n+        //~^ ERROR `let` expressions in this position are unstable\n         _ => {}\n     }\n }\n@@ -52,9 +52,9 @@ fn _macros() {\n         }\n     }\n     use_expr!((let 0 = 1 && 0 == 0));\n-    //~^ ERROR `let` expressions in this position are experimental\n+    //~^ ERROR `let` expressions in this position are unstable\n     use_expr!((let 0 = 1));\n-    //~^ ERROR `let` expressions in this position are experimental\n+    //~^ ERROR `let` expressions in this position are unstable\n     match () {\n         #[cfg(FALSE)]\n         () if let 0 = 1 => {}"}, {"sha": "0cda6ba9a99279d51a57289b6a20633331d3e526", "filename": "src/test/ui/rfc-2294-if-let-guard/feature-gate.stderr", "status": "modified", "additions": 16, "deletions": 32, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr?ref=5f74ef4fb1d86d80a3052e772010e613353dbfa7", "patch": "@@ -27,165 +27,149 @@ LL |         () if let 0 = 1 => {}\n    = help: add `#![feature(if_let_guard)]` to the crate attributes to enable\n    = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:10:16\n    |\n LL |         () if (let 0 = 1) => {}\n    |                ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:13:18\n    |\n LL |         () if (((let 0 = 1))) => {}\n    |                  ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:16:23\n    |\n LL |         () if true && let 0 = 1 => {}\n    |                       ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:19:15\n    |\n LL |         () if let 0 = 1 && true => {}\n    |               ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:22:16\n    |\n LL |         () if (let 0 = 1) && true => {}\n    |                ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:25:24\n    |\n LL |         () if true && (let 0 = 1) => {}\n    |                        ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:28:16\n    |\n LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    |                ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:28:31\n    |\n LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    |                               ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:32:15\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |               ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:32:28\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                            ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:32:42\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                          ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:32:55\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                                       ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:32:68\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                                                    ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:39:15\n    |\n LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:54:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:56:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error: aborting due to 19 previous errors\n "}, {"sha": "708bcdd0aefe35feb31eb5d2baf7aa05f5a3d9cd", "filename": "src/test/ui/rfc-2497-if-let-chains/ast-lowering-does-not-wrap-let-chains.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fast-lowering-does-not-wrap-let-chains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fast-lowering-does-not-wrap-let-chains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fast-lowering-does-not-wrap-let-chains.rs?ref=5f74ef4fb1d86d80a3052e772010e613353dbfa7", "patch": "@@ -0,0 +1,15 @@\n+// run-pass\n+\n+#![feature(let_chains)]\n+\n+fn main() {\n+    let first = Some(1);\n+    let second = Some(2);\n+    let mut n = 0;\n+    if let x = first && let y = second && 1 == 1 {\n+        assert_eq!(x, first);\n+        assert_eq!(y, second);\n+        n = 1;\n+    }\n+    assert_eq!(n, 1);\n+}"}, {"sha": "69bc189dd3579cd795fe0730b7cfb283826ce4f3", "filename": "src/test/ui/rfc-2497-if-let-chains/ast-pretty-check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fast-pretty-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fast-pretty-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fast-pretty-check.rs?ref=5f74ef4fb1d86d80a3052e772010e613353dbfa7", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // compile-flags: -Z unpretty=expanded\n \n fn main() {"}, {"sha": "e737ef26e9b3819822566c628bd3f2314be4e9b7", "filename": "src/test/ui/rfc-2497-if-let-chains/ast-pretty-check.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fast-pretty-check.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fast-pretty-check.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fast-pretty-check.stdout?ref=5f74ef4fb1d86d80a3052e772010e613353dbfa7", "patch": "@@ -4,7 +4,7 @@\n use ::std::prelude::rust_2015::*;\n #[macro_use]\n extern crate std;\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // compile-flags: -Z unpretty=expanded\n \n fn main() { if let 0 = 1 {} }"}, {"sha": "a7e108d72d1ff92054f1cf32b9ec48cca4940585", "filename": "src/test/ui/rfc-2497-if-let-chains/chains-without-let.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fchains-without-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fchains-without-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fchains-without-let.rs?ref=5f74ef4fb1d86d80a3052e772010e613353dbfa7", "patch": "@@ -0,0 +1,20 @@\n+fn and_chain() {\n+    let z;\n+    if true && { z = 3; true} && z == 3 {}\n+    //~^ ERROR use of possibly-uninitialized\n+}\n+\n+fn and_chain_2() {\n+    let z;\n+    true && { z = 3; true} && z == 3;\n+    //~^ ERROR use of possibly-uninitialized\n+}\n+\n+fn or_chain() {\n+    let z;\n+    if false || { z = 3; false} || z == 3 {}\n+    //~^ ERROR use of possibly-uninitialized\n+}\n+\n+fn main() {\n+}"}, {"sha": "3c47040cc8c24ca28a9f75a2d893c269bad3fb1e", "filename": "src/test/ui/rfc-2497-if-let-chains/chains-without-let.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fchains-without-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fchains-without-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fchains-without-let.stderr?ref=5f74ef4fb1d86d80a3052e772010e613353dbfa7", "patch": "@@ -0,0 +1,21 @@\n+error[E0381]: use of possibly-uninitialized variable: `z`\n+  --> $DIR/chains-without-let.rs:3:34\n+   |\n+LL |     if true && { z = 3; true} && z == 3 {}\n+   |                                  ^ use of possibly-uninitialized `z`\n+\n+error[E0381]: use of possibly-uninitialized variable: `z`\n+  --> $DIR/chains-without-let.rs:9:31\n+   |\n+LL |     true && { z = 3; true} && z == 3;\n+   |                               ^ use of possibly-uninitialized `z`\n+\n+error[E0381]: use of possibly-uninitialized variable: `z`\n+  --> $DIR/chains-without-let.rs:15:36\n+   |\n+LL |     if false || { z = 3; false} || z == 3 {}\n+   |                                    ^ use of possibly-uninitialized `z`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0381`."}, {"sha": "5b2693d07a7905eb5944555a93943d9c0c7bfd7f", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs?ref=5f74ef4fb1d86d80a3052e772010e613353dbfa7", "patch": "@@ -18,7 +18,6 @@\n // To that end, we check some positions which is not part of the language above.\n \n #![feature(let_chains)] // Avoid inflating `.stderr` with overzealous gates in this test.\n-//~^ WARN the feature `let_chains` is incomplete\n \n #![allow(irrefutable_let_patterns)]\n "}, {"sha": "4c830554d435c9c6949956575d2f5542a54891fc", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 106, "deletions": 115, "changes": 221, "blob_url": "https://github.com/rust-lang/rust/blob/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=5f74ef4fb1d86d80a3052e772010e613353dbfa7", "patch": "@@ -1,5 +1,5 @@\n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/disallowed-positions.rs:233:9\n+  --> $DIR/disallowed-positions.rs:232:9\n    |\n LL |         true && let 1 = 1\n    |         ^^^^^^^^^^^^^^^^^\n@@ -10,7 +10,7 @@ LL |         { true && let 1 = 1 }\n    |         +                   +\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:30:9\n+  --> $DIR/disallowed-positions.rs:29:9\n    |\n LL |     if &let 0 = 0 {}\n    |         ^^^^^^^^^\n@@ -19,7 +19,7 @@ LL |     if &let 0 = 0 {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:33:9\n+  --> $DIR/disallowed-positions.rs:32:9\n    |\n LL |     if !let 0 = 0 {}\n    |         ^^^^^^^^^\n@@ -28,7 +28,7 @@ LL |     if !let 0 = 0 {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:34:9\n+  --> $DIR/disallowed-positions.rs:33:9\n    |\n LL |     if *let 0 = 0 {}\n    |         ^^^^^^^^^\n@@ -37,7 +37,7 @@ LL |     if *let 0 = 0 {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:36:9\n+  --> $DIR/disallowed-positions.rs:35:9\n    |\n LL |     if -let 0 = 0 {}\n    |         ^^^^^^^^^\n@@ -46,7 +46,7 @@ LL |     if -let 0 = 0 {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:44:9\n+  --> $DIR/disallowed-positions.rs:43:9\n    |\n LL |     if (let 0 = 0)? {}\n    |         ^^^^^^^^^\n@@ -55,7 +55,7 @@ LL |     if (let 0 = 0)? {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:48:16\n+  --> $DIR/disallowed-positions.rs:47:16\n    |\n LL |     if true || let 0 = 0 {}\n    |                ^^^^^^^^^\n@@ -64,7 +64,7 @@ LL |     if true || let 0 = 0 {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:49:17\n+  --> $DIR/disallowed-positions.rs:48:17\n    |\n LL |     if (true || let 0 = 0) {}\n    |                 ^^^^^^^^^\n@@ -73,7 +73,7 @@ LL |     if (true || let 0 = 0) {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:50:25\n+  --> $DIR/disallowed-positions.rs:49:25\n    |\n LL |     if true && (true || let 0 = 0) {}\n    |                         ^^^^^^^^^\n@@ -82,7 +82,7 @@ LL |     if true && (true || let 0 = 0) {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:51:25\n+  --> $DIR/disallowed-positions.rs:50:25\n    |\n LL |     if true || (true && let 0 = 0) {}\n    |                         ^^^^^^^^^\n@@ -91,7 +91,7 @@ LL |     if true || (true && let 0 = 0) {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:54:12\n+  --> $DIR/disallowed-positions.rs:53:12\n    |\n LL |     if x = let 0 = 0 {}\n    |            ^^^^^^^^^\n@@ -100,7 +100,7 @@ LL |     if x = let 0 = 0 {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:57:15\n+  --> $DIR/disallowed-positions.rs:56:15\n    |\n LL |     if true..(let 0 = 0) {}\n    |               ^^^^^^^^^\n@@ -109,7 +109,7 @@ LL |     if true..(let 0 = 0) {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:59:11\n+  --> $DIR/disallowed-positions.rs:58:11\n    |\n LL |     if ..(let 0 = 0) {}\n    |           ^^^^^^^^^\n@@ -118,7 +118,7 @@ LL |     if ..(let 0 = 0) {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:61:9\n+  --> $DIR/disallowed-positions.rs:60:9\n    |\n LL |     if (let 0 = 0).. {}\n    |         ^^^^^^^^^\n@@ -127,7 +127,7 @@ LL |     if (let 0 = 0).. {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:65:8\n+  --> $DIR/disallowed-positions.rs:64:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -136,7 +136,7 @@ LL |     if let Range { start: _, end: _ } = true..true && false {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:69:8\n+  --> $DIR/disallowed-positions.rs:68:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -145,7 +145,7 @@ LL |     if let Range { start: _, end: _ } = true..true || false {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:76:8\n+  --> $DIR/disallowed-positions.rs:75:8\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -154,7 +154,7 @@ LL |     if let Range { start: F, end } = F..|| true {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:84:8\n+  --> $DIR/disallowed-positions.rs:83:8\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -163,7 +163,7 @@ LL |     if let Range { start: true, end } = t..&&false {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:90:19\n+  --> $DIR/disallowed-positions.rs:89:19\n    |\n LL |     if let true = let true = true {}\n    |                   ^^^^^^^^^^^^^^^\n@@ -172,7 +172,7 @@ LL |     if let true = let true = true {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:94:12\n+  --> $DIR/disallowed-positions.rs:93:12\n    |\n LL |     while &let 0 = 0 {}\n    |            ^^^^^^^^^\n@@ -181,7 +181,7 @@ LL |     while &let 0 = 0 {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:97:12\n+  --> $DIR/disallowed-positions.rs:96:12\n    |\n LL |     while !let 0 = 0 {}\n    |            ^^^^^^^^^\n@@ -190,7 +190,7 @@ LL |     while !let 0 = 0 {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:98:12\n+  --> $DIR/disallowed-positions.rs:97:12\n    |\n LL |     while *let 0 = 0 {}\n    |            ^^^^^^^^^\n@@ -199,7 +199,7 @@ LL |     while *let 0 = 0 {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:100:12\n+  --> $DIR/disallowed-positions.rs:99:12\n    |\n LL |     while -let 0 = 0 {}\n    |            ^^^^^^^^^\n@@ -208,7 +208,7 @@ LL |     while -let 0 = 0 {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:108:12\n+  --> $DIR/disallowed-positions.rs:107:12\n    |\n LL |     while (let 0 = 0)? {}\n    |            ^^^^^^^^^\n@@ -217,7 +217,7 @@ LL |     while (let 0 = 0)? {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:112:19\n+  --> $DIR/disallowed-positions.rs:111:19\n    |\n LL |     while true || let 0 = 0 {}\n    |                   ^^^^^^^^^\n@@ -226,7 +226,7 @@ LL |     while true || let 0 = 0 {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:113:20\n+  --> $DIR/disallowed-positions.rs:112:20\n    |\n LL |     while (true || let 0 = 0) {}\n    |                    ^^^^^^^^^\n@@ -235,7 +235,7 @@ LL |     while (true || let 0 = 0) {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:114:28\n+  --> $DIR/disallowed-positions.rs:113:28\n    |\n LL |     while true && (true || let 0 = 0) {}\n    |                            ^^^^^^^^^\n@@ -244,7 +244,7 @@ LL |     while true && (true || let 0 = 0) {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:115:28\n+  --> $DIR/disallowed-positions.rs:114:28\n    |\n LL |     while true || (true && let 0 = 0) {}\n    |                            ^^^^^^^^^\n@@ -253,7 +253,7 @@ LL |     while true || (true && let 0 = 0) {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:118:15\n+  --> $DIR/disallowed-positions.rs:117:15\n    |\n LL |     while x = let 0 = 0 {}\n    |               ^^^^^^^^^\n@@ -262,7 +262,7 @@ LL |     while x = let 0 = 0 {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:121:18\n+  --> $DIR/disallowed-positions.rs:120:18\n    |\n LL |     while true..(let 0 = 0) {}\n    |                  ^^^^^^^^^\n@@ -271,7 +271,7 @@ LL |     while true..(let 0 = 0) {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:123:14\n+  --> $DIR/disallowed-positions.rs:122:14\n    |\n LL |     while ..(let 0 = 0) {}\n    |              ^^^^^^^^^\n@@ -280,7 +280,7 @@ LL |     while ..(let 0 = 0) {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:125:12\n+  --> $DIR/disallowed-positions.rs:124:12\n    |\n LL |     while (let 0 = 0).. {}\n    |            ^^^^^^^^^\n@@ -289,7 +289,7 @@ LL |     while (let 0 = 0).. {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:129:11\n+  --> $DIR/disallowed-positions.rs:128:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -298,7 +298,7 @@ LL |     while let Range { start: _, end: _ } = true..true && false {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:133:11\n+  --> $DIR/disallowed-positions.rs:132:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -307,7 +307,7 @@ LL |     while let Range { start: _, end: _ } = true..true || false {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:140:11\n+  --> $DIR/disallowed-positions.rs:139:11\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -316,7 +316,7 @@ LL |     while let Range { start: F, end } = F..|| true {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:148:11\n+  --> $DIR/disallowed-positions.rs:147:11\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -325,7 +325,7 @@ LL |     while let Range { start: true, end } = t..&&false {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:154:22\n+  --> $DIR/disallowed-positions.rs:153:22\n    |\n LL |     while let true = let true = true {}\n    |                      ^^^^^^^^^^^^^^^\n@@ -334,7 +334,7 @@ LL |     while let true = let true = true {}\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:168:6\n+  --> $DIR/disallowed-positions.rs:167:6\n    |\n LL |     &let 0 = 0;\n    |      ^^^^^^^^^\n@@ -343,7 +343,7 @@ LL |     &let 0 = 0;\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:170:6\n+  --> $DIR/disallowed-positions.rs:169:6\n    |\n LL |     !let 0 = 0;\n    |      ^^^^^^^^^\n@@ -352,7 +352,7 @@ LL |     !let 0 = 0;\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:171:6\n+  --> $DIR/disallowed-positions.rs:170:6\n    |\n LL |     *let 0 = 0;\n    |      ^^^^^^^^^\n@@ -361,7 +361,7 @@ LL |     *let 0 = 0;\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:173:6\n+  --> $DIR/disallowed-positions.rs:172:6\n    |\n LL |     -let 0 = 0;\n    |      ^^^^^^^^^\n@@ -370,7 +370,7 @@ LL |     -let 0 = 0;\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:181:6\n+  --> $DIR/disallowed-positions.rs:180:6\n    |\n LL |     (let 0 = 0)?;\n    |      ^^^^^^^^^\n@@ -379,7 +379,7 @@ LL |     (let 0 = 0)?;\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:185:13\n+  --> $DIR/disallowed-positions.rs:184:13\n    |\n LL |     true || let 0 = 0;\n    |             ^^^^^^^^^\n@@ -388,7 +388,7 @@ LL |     true || let 0 = 0;\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:186:14\n+  --> $DIR/disallowed-positions.rs:185:14\n    |\n LL |     (true || let 0 = 0);\n    |              ^^^^^^^^^\n@@ -397,7 +397,7 @@ LL |     (true || let 0 = 0);\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:187:22\n+  --> $DIR/disallowed-positions.rs:186:22\n    |\n LL |     true && (true || let 0 = 0);\n    |                      ^^^^^^^^^\n@@ -406,7 +406,7 @@ LL |     true && (true || let 0 = 0);\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:190:9\n+  --> $DIR/disallowed-positions.rs:189:9\n    |\n LL |     x = let 0 = 0;\n    |         ^^^^^^^^^\n@@ -415,7 +415,7 @@ LL |     x = let 0 = 0;\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:192:12\n+  --> $DIR/disallowed-positions.rs:191:12\n    |\n LL |     true..(let 0 = 0);\n    |            ^^^^^^^^^\n@@ -424,7 +424,7 @@ LL |     true..(let 0 = 0);\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:193:8\n+  --> $DIR/disallowed-positions.rs:192:8\n    |\n LL |     ..(let 0 = 0);\n    |        ^^^^^^^^^\n@@ -433,7 +433,7 @@ LL |     ..(let 0 = 0);\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:194:6\n+  --> $DIR/disallowed-positions.rs:193:6\n    |\n LL |     (let 0 = 0)..;\n    |      ^^^^^^^^^\n@@ -442,7 +442,7 @@ LL |     (let 0 = 0)..;\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:196:6\n+  --> $DIR/disallowed-positions.rs:195:6\n    |\n LL |     (let Range { start: _, end: _ } = true..true || false);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -451,7 +451,7 @@ LL |     (let Range { start: _, end: _ } = true..true || false);\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:200:6\n+  --> $DIR/disallowed-positions.rs:199:6\n    |\n LL |     (let true = let true = true);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -460,7 +460,7 @@ LL |     (let true = let true = true);\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:204:6\n+  --> $DIR/disallowed-positions.rs:203:6\n    |\n LL |     &let 0 = 0\n    |      ^^^^^^^^^\n@@ -469,7 +469,7 @@ LL |     &let 0 = 0\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:215:17\n+  --> $DIR/disallowed-positions.rs:214:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n@@ -478,7 +478,7 @@ LL |         true && let 1 = 1\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:219:17\n+  --> $DIR/disallowed-positions.rs:218:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n@@ -487,7 +487,7 @@ LL |         true && let 1 = 1\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:223:17\n+  --> $DIR/disallowed-positions.rs:222:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n@@ -496,25 +496,16 @@ LL |         true && let 1 = 1\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:233:17\n+  --> $DIR/disallowed-positions.rs:232:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n    = note: as well as when nested within `&&` and parentheses in those conditions\n \n-warning: the feature `let_chains` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/disallowed-positions.rs:20:12\n-   |\n-LL | #![feature(let_chains)] // Avoid inflating `.stderr` with overzealous gates in this test.\n-   |            ^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-\n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:30:8\n+  --> $DIR/disallowed-positions.rs:29:8\n    |\n LL |     if &let 0 = 0 {}\n    |        ^^^^^^^^^^ expected `bool`, found `&bool`\n@@ -526,27 +517,27 @@ LL +     if let 0 = 0 {}\n    | \n \n error[E0614]: type `bool` cannot be dereferenced\n-  --> $DIR/disallowed-positions.rs:34:8\n+  --> $DIR/disallowed-positions.rs:33:8\n    |\n LL |     if *let 0 = 0 {}\n    |        ^^^^^^^^^^\n \n error[E0600]: cannot apply unary operator `-` to type `bool`\n-  --> $DIR/disallowed-positions.rs:36:8\n+  --> $DIR/disallowed-positions.rs:35:8\n    |\n LL |     if -let 0 = 0 {}\n    |        ^^^^^^^^^^ cannot apply unary operator `-`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:44:8\n+  --> $DIR/disallowed-positions.rs:43:8\n    |\n LL |     if (let 0 = 0)? {}\n    |        ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n-  --> $DIR/disallowed-positions.rs:44:19\n+  --> $DIR/disallowed-positions.rs:43:19\n    |\n LL | / fn nested_within_if_expr() {\n LL | |     if &let 0 = 0 {}\n@@ -563,7 +554,7 @@ LL | | }\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:54:8\n+  --> $DIR/disallowed-positions.rs:53:8\n    |\n LL |     if x = let 0 = 0 {}\n    |        ^^^^^^^^^^^^^ expected `bool`, found `()`\n@@ -574,7 +565,7 @@ LL |     if x == let 0 = 0 {}\n    |          ~~\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:57:8\n+  --> $DIR/disallowed-positions.rs:56:8\n    |\n LL |     if true..(let 0 = 0) {}\n    |        ^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -583,7 +574,7 @@ LL |     if true..(let 0 = 0) {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:59:8\n+  --> $DIR/disallowed-positions.rs:58:8\n    |\n LL |     if ..(let 0 = 0) {}\n    |        ^^^^^^^^^^^^^ expected `bool`, found struct `RangeTo`\n@@ -592,7 +583,7 @@ LL |     if ..(let 0 = 0) {}\n             found struct `RangeTo<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:61:8\n+  --> $DIR/disallowed-positions.rs:60:8\n    |\n LL |     if (let 0 = 0).. {}\n    |        ^^^^^^^^^^^^^ expected `bool`, found struct `RangeFrom`\n@@ -601,7 +592,7 @@ LL |     if (let 0 = 0).. {}\n             found struct `RangeFrom<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:65:12\n+  --> $DIR/disallowed-positions.rs:64:12\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -612,7 +603,7 @@ LL |     if let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:65:8\n+  --> $DIR/disallowed-positions.rs:64:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -621,7 +612,7 @@ LL |     if let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:69:12\n+  --> $DIR/disallowed-positions.rs:68:12\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -632,7 +623,7 @@ LL |     if let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:69:8\n+  --> $DIR/disallowed-positions.rs:68:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -641,7 +632,7 @@ LL |     if let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:76:12\n+  --> $DIR/disallowed-positions.rs:75:12\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `fn() -> bool`\n@@ -652,16 +643,16 @@ LL |     if let Range { start: F, end } = F..|| true {}\n                   found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:76:41\n+  --> $DIR/disallowed-positions.rs:75:41\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |                                         ^^^^^^^ expected `bool`, found closure\n    |\n    = note: expected type `bool`\n-           found closure `[closure@$DIR/disallowed-positions.rs:76:41: 76:48]`\n+           found closure `[closure@$DIR/disallowed-positions.rs:75:41: 75:48]`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:76:8\n+  --> $DIR/disallowed-positions.rs:75:8\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -670,7 +661,7 @@ LL |     if let Range { start: F, end } = F..|| true {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:84:12\n+  --> $DIR/disallowed-positions.rs:83:12\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `&&bool`\n@@ -681,13 +672,13 @@ LL |     if let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:84:44\n+  --> $DIR/disallowed-positions.rs:83:44\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |                                            ^^^^^^^ expected `bool`, found `&&bool`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:84:8\n+  --> $DIR/disallowed-positions.rs:83:8\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -696,15 +687,15 @@ LL |     if let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:40:20\n+  --> $DIR/disallowed-positions.rs:39:20\n    |\n LL |         if let 0 = 0? {}\n    |                    ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:94:11\n+  --> $DIR/disallowed-positions.rs:93:11\n    |\n LL |     while &let 0 = 0 {}\n    |           ^^^^^^^^^^ expected `bool`, found `&bool`\n@@ -716,27 +707,27 @@ LL +     while let 0 = 0 {}\n    | \n \n error[E0614]: type `bool` cannot be dereferenced\n-  --> $DIR/disallowed-positions.rs:98:11\n+  --> $DIR/disallowed-positions.rs:97:11\n    |\n LL |     while *let 0 = 0 {}\n    |           ^^^^^^^^^^\n \n error[E0600]: cannot apply unary operator `-` to type `bool`\n-  --> $DIR/disallowed-positions.rs:100:11\n+  --> $DIR/disallowed-positions.rs:99:11\n    |\n LL |     while -let 0 = 0 {}\n    |           ^^^^^^^^^^ cannot apply unary operator `-`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:108:11\n+  --> $DIR/disallowed-positions.rs:107:11\n    |\n LL |     while (let 0 = 0)? {}\n    |           ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n-  --> $DIR/disallowed-positions.rs:108:22\n+  --> $DIR/disallowed-positions.rs:107:22\n    |\n LL | / fn nested_within_while_expr() {\n LL | |     while &let 0 = 0 {}\n@@ -753,7 +744,7 @@ LL | | }\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:118:11\n+  --> $DIR/disallowed-positions.rs:117:11\n    |\n LL |     while x = let 0 = 0 {}\n    |           ^^^^^^^^^^^^^ expected `bool`, found `()`\n@@ -764,7 +755,7 @@ LL |     while x == let 0 = 0 {}\n    |             ~~\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:121:11\n+  --> $DIR/disallowed-positions.rs:120:11\n    |\n LL |     while true..(let 0 = 0) {}\n    |           ^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -773,7 +764,7 @@ LL |     while true..(let 0 = 0) {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:123:11\n+  --> $DIR/disallowed-positions.rs:122:11\n    |\n LL |     while ..(let 0 = 0) {}\n    |           ^^^^^^^^^^^^^ expected `bool`, found struct `RangeTo`\n@@ -782,7 +773,7 @@ LL |     while ..(let 0 = 0) {}\n             found struct `RangeTo<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:125:11\n+  --> $DIR/disallowed-positions.rs:124:11\n    |\n LL |     while (let 0 = 0).. {}\n    |           ^^^^^^^^^^^^^ expected `bool`, found struct `RangeFrom`\n@@ -791,7 +782,7 @@ LL |     while (let 0 = 0).. {}\n             found struct `RangeFrom<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:129:15\n+  --> $DIR/disallowed-positions.rs:128:15\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -802,7 +793,7 @@ LL |     while let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:129:11\n+  --> $DIR/disallowed-positions.rs:128:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -811,7 +802,7 @@ LL |     while let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:133:15\n+  --> $DIR/disallowed-positions.rs:132:15\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -822,7 +813,7 @@ LL |     while let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:133:11\n+  --> $DIR/disallowed-positions.rs:132:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -831,7 +822,7 @@ LL |     while let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:140:15\n+  --> $DIR/disallowed-positions.rs:139:15\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `fn() -> bool`\n@@ -842,16 +833,16 @@ LL |     while let Range { start: F, end } = F..|| true {}\n                   found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:140:44\n+  --> $DIR/disallowed-positions.rs:139:44\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |                                            ^^^^^^^ expected `bool`, found closure\n    |\n    = note: expected type `bool`\n-           found closure `[closure@$DIR/disallowed-positions.rs:140:44: 140:51]`\n+           found closure `[closure@$DIR/disallowed-positions.rs:139:44: 139:51]`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:140:11\n+  --> $DIR/disallowed-positions.rs:139:11\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -860,7 +851,7 @@ LL |     while let Range { start: F, end } = F..|| true {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:148:15\n+  --> $DIR/disallowed-positions.rs:147:15\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `&&bool`\n@@ -871,13 +862,13 @@ LL |     while let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:148:47\n+  --> $DIR/disallowed-positions.rs:147:47\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |                                               ^^^^^^^ expected `bool`, found `&&bool`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:148:11\n+  --> $DIR/disallowed-positions.rs:147:11\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -886,35 +877,35 @@ LL |     while let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:104:23\n+  --> $DIR/disallowed-positions.rs:103:23\n    |\n LL |         while let 0 = 0? {}\n    |                       ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n \n error[E0614]: type `bool` cannot be dereferenced\n-  --> $DIR/disallowed-positions.rs:171:5\n+  --> $DIR/disallowed-positions.rs:170:5\n    |\n LL |     *let 0 = 0;\n    |     ^^^^^^^^^^\n \n error[E0600]: cannot apply unary operator `-` to type `bool`\n-  --> $DIR/disallowed-positions.rs:173:5\n+  --> $DIR/disallowed-positions.rs:172:5\n    |\n LL |     -let 0 = 0;\n    |     ^^^^^^^^^^ cannot apply unary operator `-`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:181:5\n+  --> $DIR/disallowed-positions.rs:180:5\n    |\n LL |     (let 0 = 0)?;\n    |     ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n-  --> $DIR/disallowed-positions.rs:181:16\n+  --> $DIR/disallowed-positions.rs:180:16\n    |\n LL | / fn outside_if_and_while_expr() {\n LL | |     &let 0 = 0;\n@@ -931,7 +922,7 @@ LL | | }\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:196:10\n+  --> $DIR/disallowed-positions.rs:195:10\n    |\n LL |     (let Range { start: _, end: _ } = true..true || false);\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -942,7 +933,7 @@ LL |     (let Range { start: _, end: _ } = true..true || false);\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:204:5\n+  --> $DIR/disallowed-positions.rs:203:5\n    |\n LL | fn outside_if_and_while_expr() {\n    |                                - help: try adding a return type: `-> &bool`\n@@ -951,14 +942,14 @@ LL |     &let 0 = 0\n    |     ^^^^^^^^^^ expected `()`, found `&bool`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:177:17\n+  --> $DIR/disallowed-positions.rs:176:17\n    |\n LL |         let 0 = 0?;\n    |                 ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n \n-error: aborting due to 103 previous errors; 1 warning emitted\n+error: aborting due to 103 previous errors\n \n Some errors have detailed explanations: E0277, E0308, E0600, E0614.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "53fec8316e7e710400e9e5065054103729b44388", "filename": "src/test/ui/rfc-2497-if-let-chains/feature-gate.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs?ref=5f74ef4fb1d86d80a3052e772010e613353dbfa7", "patch": "@@ -12,79 +12,79 @@ fn _if() {\n     if let 0 = 1 {} // Stable!\n \n     if (let 0 = 1) {}\n-    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~^ ERROR `let` expressions in this position are unstable [E0658]\n \n     if (((let 0 = 1))) {}\n-    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~^ ERROR `let` expressions in this position are unstable [E0658]\n \n     if true && let 0 = 1 {}\n-    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~^ ERROR `let` expressions in this position are unstable [E0658]\n \n     if let 0 = 1 && true {}\n-    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~^ ERROR `let` expressions in this position are unstable [E0658]\n \n     if (let 0 = 1) && true {}\n-    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~^ ERROR `let` expressions in this position are unstable [E0658]\n \n     if true && (let 0 = 1) {}\n-    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~^ ERROR `let` expressions in this position are unstable [E0658]\n \n     if (let 0 = 1) && (let 0 = 1) {}\n-    //~^ ERROR `let` expressions in this position are experimental [E0658]\n-    //~| ERROR `let` expressions in this position are experimental [E0658]\n+    //~^ ERROR `let` expressions in this position are unstable [E0658]\n+    //~| ERROR `let` expressions in this position are unstable [E0658]\n \n     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n-    //~^ ERROR `let` expressions in this position are experimental [E0658]\n-    //~| ERROR `let` expressions in this position are experimental [E0658]\n-    //~| ERROR `let` expressions in this position are experimental [E0658]\n-    //~| ERROR `let` expressions in this position are experimental [E0658]\n-    //~| ERROR `let` expressions in this position are experimental [E0658]\n+    //~^ ERROR `let` expressions in this position are unstable [E0658]\n+    //~| ERROR `let` expressions in this position are unstable [E0658]\n+    //~| ERROR `let` expressions in this position are unstable [E0658]\n+    //~| ERROR `let` expressions in this position are unstable [E0658]\n+    //~| ERROR `let` expressions in this position are unstable [E0658]\n \n     if let Range { start: _, end: _ } = (true..true) && false {}\n-    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~^ ERROR `let` expressions in this position are unstable [E0658]\n }\n \n fn _while() {\n     while let 0 = 1 {} // Stable!\n \n     while (let 0 = 1) {}\n-    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~^ ERROR `let` expressions in this position are unstable [E0658]\n \n     while (((let 0 = 1))) {}\n-    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~^ ERROR `let` expressions in this position are unstable [E0658]\n \n     while true && let 0 = 1 {}\n-    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~^ ERROR `let` expressions in this position are unstable [E0658]\n \n     while let 0 = 1 && true {}\n-    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~^ ERROR `let` expressions in this position are unstable [E0658]\n \n     while (let 0 = 1) && true {}\n-    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~^ ERROR `let` expressions in this position are unstable [E0658]\n \n     while true && (let 0 = 1) {}\n-    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~^ ERROR `let` expressions in this position are unstable [E0658]\n \n     while (let 0 = 1) && (let 0 = 1) {}\n-    //~^ ERROR `let` expressions in this position are experimental [E0658]\n-    //~| ERROR `let` expressions in this position are experimental [E0658]\n+    //~^ ERROR `let` expressions in this position are unstable [E0658]\n+    //~| ERROR `let` expressions in this position are unstable [E0658]\n \n     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n-    //~^ ERROR `let` expressions in this position are experimental [E0658]\n-    //~| ERROR `let` expressions in this position are experimental [E0658]\n-    //~| ERROR `let` expressions in this position are experimental [E0658]\n-    //~| ERROR `let` expressions in this position are experimental [E0658]\n-    //~| ERROR `let` expressions in this position are experimental [E0658]\n+    //~^ ERROR `let` expressions in this position are unstable [E0658]\n+    //~| ERROR `let` expressions in this position are unstable [E0658]\n+    //~| ERROR `let` expressions in this position are unstable [E0658]\n+    //~| ERROR `let` expressions in this position are unstable [E0658]\n+    //~| ERROR `let` expressions in this position are unstable [E0658]\n \n     while let Range { start: _, end: _ } = (true..true) && false {}\n-    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~^ ERROR `let` expressions in this position are unstable [E0658]\n }\n \n fn _macros() {\n     macro_rules! noop_expr { ($e:expr) => {}; }\n \n     noop_expr!((let 0 = 1));\n-    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~^ ERROR `let` expressions in this position are unstable [E0658]\n \n     macro_rules! use_expr {\n         ($e:expr) => {\n@@ -93,11 +93,11 @@ fn _macros() {\n         }\n     }\n     use_expr!((let 0 = 1 && 0 == 0));\n-    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~^ ERROR `let` expressions in this position are unstable [E0658]\n     use_expr!((let 0 = 1));\n-    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~^ ERROR `let` expressions in this position are unstable [E0658]\n     #[cfg(FALSE)] (let 0 = 1);\n-    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~^ ERROR `let` expressions in this position are unstable [E0658]\n     use_expr!(let 0 = 1);\n     //~^ ERROR no rules expected the token `let`\n     // ^--- FIXME(53667): Consider whether `Let` can be added to `ident_can_begin_expr`."}, {"sha": "458826498fe2d1044ec7a6e2562f7e138852cb0d", "filename": "src/test/ui/rfc-2497-if-let-chains/feature-gate.stderr", "status": "modified", "additions": 32, "deletions": 64, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr?ref=5f74ef4fb1d86d80a3052e772010e613353dbfa7", "patch": "@@ -7,325 +7,293 @@ LL |     macro_rules! use_expr {\n LL |     use_expr!(let 0 = 1);\n    |               ^^^ no rules expected this token in macro call\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:14:9\n    |\n LL |     if (let 0 = 1) {}\n    |         ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:17:11\n    |\n LL |     if (((let 0 = 1))) {}\n    |           ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:20:16\n    |\n LL |     if true && let 0 = 1 {}\n    |                ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:23:8\n    |\n LL |     if let 0 = 1 && true {}\n    |        ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:26:9\n    |\n LL |     if (let 0 = 1) && true {}\n    |         ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:29:17\n    |\n LL |     if true && (let 0 = 1) {}\n    |                 ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:32:9\n    |\n LL |     if (let 0 = 1) && (let 0 = 1) {}\n    |         ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:32:24\n    |\n LL |     if (let 0 = 1) && (let 0 = 1) {}\n    |                        ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:36:8\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |        ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:36:21\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                     ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:36:35\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                   ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:36:48\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:36:61\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                             ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:43:8\n    |\n LL |     if let Range { start: _, end: _ } = (true..true) && false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:50:12\n    |\n LL |     while (let 0 = 1) {}\n    |            ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:53:14\n    |\n LL |     while (((let 0 = 1))) {}\n    |              ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:56:19\n    |\n LL |     while true && let 0 = 1 {}\n    |                   ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:59:11\n    |\n LL |     while let 0 = 1 && true {}\n    |           ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:62:12\n    |\n LL |     while (let 0 = 1) && true {}\n    |            ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:65:20\n    |\n LL |     while true && (let 0 = 1) {}\n    |                    ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:68:12\n    |\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |            ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:68:27\n    |\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |                           ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:72:11\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |           ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:72:24\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                        ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:72:38\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                      ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:72:51\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                   ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:72:64\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                                ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:79:11\n    |\n LL |     while let Range { start: _, end: _ } = (true..true) && false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:99:20\n    |\n LL |     #[cfg(FALSE)] (let 0 = 1);\n    |                    ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:86:17\n    |\n LL |     noop_expr!((let 0 = 1));\n    |                 ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:95:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are experimental\n+error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:97:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error: aborting due to 33 previous errors\n "}, {"sha": "5915cb9df269c127bd8d101d906d669fe725c336", "filename": "src/test/ui/rfc-2497-if-let-chains/irrefutable-lets.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Firrefutable-lets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Firrefutable-lets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Firrefutable-lets.rs?ref=5f74ef4fb1d86d80a3052e772010e613353dbfa7", "patch": "@@ -0,0 +1,27 @@\n+// check-pass\n+\n+#![feature(let_chains)]\n+\n+use std::ops::Range;\n+\n+fn main() {\n+    let opt = Some(None..Some(1));\n+\n+    if let first = &opt && let Some(ref second) = first && let None = second.start {\n+    }\n+    if let Some(ref first) = opt && let second = first && let _third = second {\n+    }\n+    if let Some(ref first) = opt\n+        && let Range { start: local_start, end: _ } = first\n+        && let None = local_start {\n+    }\n+\n+    while let first = &opt && let Some(ref second) = first && let None = second.start {\n+    }\n+    while let Some(ref first) = opt && let second = first && let _third = second {\n+    }\n+    while let Some(ref first) = opt\n+        && let Range { start: local_start, end: _ } = first\n+        && let None = local_start {\n+    }\n+}"}, {"sha": "3eb8a9ad060207e1cb993f05cb25d5f153fed871", "filename": "src/test/ui/rfc-2497-if-let-chains/issue-88498.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fissue-88498.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fissue-88498.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fissue-88498.rs?ref=5f74ef4fb1d86d80a3052e772010e613353dbfa7", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+\n+pub enum UnOp {\n+    Not(Vec<()>),\n+}\n+\n+pub fn foo() {\n+    if let Some(x) = None {\n+        match x {\n+            UnOp::Not(_) => {}\n+        }\n+    }\n+}\n+\n+fn main() {\n+}"}, {"sha": "6b7d88356508549ce72a53ad57afd2daa952420a", "filename": "src/test/ui/rfc-2497-if-let-chains/issue-90722.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fissue-90722.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fissue-90722.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fissue-90722.rs?ref=5f74ef4fb1d86d80a3052e772010e613353dbfa7", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+\n+#![feature(let_chains)]\n+\n+fn main() {\n+    let x = Some(vec![\"test\"]);\n+\n+    if let Some(v) = x && v.is_empty() {\n+        println!(\"x == Some([])\");\n+    }\n+}"}, {"sha": "7c7e31f4db4007e5a8f7d443239f86af4c77f942", "filename": "src/test/ui/rfc-2497-if-let-chains/issue-92145.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fissue-92145.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fissue-92145.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fissue-92145.rs?ref=5f74ef4fb1d86d80a3052e772010e613353dbfa7", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+\n+#![feature(let_chains)]\n+\n+fn main() {\n+    let opt = Some(\"foo bar\");\n+\n+    if true && let Some(x) = opt {\n+        println!(\"{}\", x);\n+    }\n+}"}, {"sha": "6b91c455e0e9769685826d96d4062213a1bc011e", "filename": "src/test/ui/rfc-2497-if-let-chains/no-double-assigments.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fno-double-assigments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fno-double-assigments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fno-double-assigments.rs?ref=5f74ef4fb1d86d80a3052e772010e613353dbfa7", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+\n+fn main() {\n+    loop {\n+        // [1][0] should leave top scope\n+        if true && [1][0] == 1 && true {\n+        }\n+    }\n+}"}, {"sha": "0856a10520636d42a9ff5bcbc28f050a6c00c6a9", "filename": "src/test/ui/rfc-2497-if-let-chains/then-else-blocks.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fthen-else-blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f74ef4fb1d86d80a3052e772010e613353dbfa7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fthen-else-blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fthen-else-blocks.rs?ref=5f74ef4fb1d86d80a3052e772010e613353dbfa7", "patch": "@@ -0,0 +1,35 @@\n+// run-pass\n+\n+#![feature(let_chains)]\n+\n+fn check_if_let(opt: Option<Option<Option<i32>>>, value: i32) -> bool {\n+    if let Some(first) = opt\n+        && let Some(second) = first\n+        && let Some(third) = second\n+        && third == value\n+    {\n+        true\n+    }\n+    else {\n+        false\n+    }\n+}\n+\n+fn check_while_let(opt: Option<Option<Option<i32>>>, value: i32) -> bool {\n+    while let Some(first) = opt\n+        && let Some(second) = first\n+        && let Some(third) = second\n+        && third == value\n+    {\n+        return true;\n+    }\n+    false\n+}\n+\n+fn main() {\n+    assert_eq!(check_if_let(Some(Some(Some(1))), 1), true);\n+    assert_eq!(check_if_let(Some(Some(Some(1))), 9), false);\n+\n+    assert_eq!(check_while_let(Some(Some(Some(1))), 1), true);\n+    assert_eq!(check_while_let(Some(Some(Some(1))), 9), false);\n+}"}]}