{"sha": "d3c2386434fa7a7881bbb123cb96c2da158edc4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzYzIzODY0MzRmYTdhNzg4MWJiYjEyM2NiOTZjMmRhMTU4ZWRjNGM=", "commit": {"author": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2017-09-13T19:34:47Z"}, "committer": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2017-09-14T04:26:44Z"}, "message": "extend E0623 for earlybound and latebound for structs", "tree": {"sha": "1e810596fbb30870301f4fe9ab09deaf8971273c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e810596fbb30870301f4fe9ab09deaf8971273c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3c2386434fa7a7881bbb123cb96c2da158edc4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3c2386434fa7a7881bbb123cb96c2da158edc4c", "html_url": "https://github.com/rust-lang/rust/commit/d3c2386434fa7a7881bbb123cb96c2da158edc4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3c2386434fa7a7881bbb123cb96c2da158edc4c/comments", "author": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1ca653b170c235ad01a83d89fcb18b1f8b6a3b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1ca653b170c235ad01a83d89fcb18b1f8b6a3b0", "html_url": "https://github.com/rust-lang/rust/commit/d1ca653b170c235ad01a83d89fcb18b1f8b6a3b0"}], "stats": {"total": 44, "additions": 33, "deletions": 11}, "files": [{"sha": "bf1428cabd63c0b7c8ea806312186efa74f294dc", "filename": "src/librustc/infer/error_reporting/different_lifetimes.rs", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d3c2386434fa7a7881bbb123cb96c2da158edc4c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c2386434fa7a7881bbb123cb96c2da158edc4c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs?ref=d3c2386434fa7a7881bbb123cb96c2da158edc4c", "patch": "@@ -321,24 +321,46 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for TyPathVisitor<'a, 'gcx, 'tcx> {\n     }\n \n     fn visit_lifetime(&mut self, lifetime: &hir::Lifetime) {\n-        let br_index = match self.bound_region {\n-            ty::BrAnon(index) => index,\n-            _ => return,\n-        };\n \n         let hir_id = self.infcx.tcx.hir.node_to_hir_id(lifetime.id);\n-        match self.infcx.tcx.named_region(hir_id) {\n+        match (self.infcx.tcx.named_region(hir_id), self.bound_region) {\n             // the lifetime of the TyPath!\n-            Some(rl::Region::LateBoundAnon(debruijn_index, anon_index)) => {\n+            (Some(rl::Region::LateBoundAnon(debruijn_index, anon_index)), ty::BrAnon(br_index)) => {\n                 if debruijn_index.depth == 1 && anon_index == br_index {\n                     self.found_it = true;\n+                    return;\n+                }\n+            }\n+\n+            (Some(rl::Region::EarlyBound(_, id)), ty::BrNamed(def_id, _)) => {\n+                debug!(\"EarlyBound self.infcx.tcx.hir.local_def_id(id)={:?} \\\n+                                        def_id={:?}\",\n+                       self.infcx.tcx.hir.local_def_id(id),\n+                       def_id);\n+                if self.infcx.tcx.hir.local_def_id(id) == def_id {\n+                    self.found_it = true;\n+                    return; // we can stop visiting now\n                 }\n             }\n-            Some(rl::Region::Static) |\n-            Some(rl::Region::EarlyBound(_, _)) |\n-            Some(rl::Region::LateBound(_, _)) |\n-            Some(rl::Region::Free(_, _)) |\n-            None => {\n+\n+            (Some(rl::Region::LateBound(debruijn_index, id)), ty::BrNamed(def_id, _)) => {\n+                debug!(\"FindNestedTypeVisitor::visit_ty: LateBound depth = {:?}\",\n+                       debruijn_index.depth);\n+                debug!(\"self.infcx.tcx.hir.local_def_id(id)={:?}\",\n+                       self.infcx.tcx.hir.local_def_id(id));\n+                debug!(\"def_id={:?}\", def_id);\n+                if debruijn_index.depth == 1 && self.infcx.tcx.hir.local_def_id(id) == def_id {\n+                    self.found_it = true;\n+                    return; // we can stop visiting now\n+                }\n+            }\n+\n+            (Some(rl::Region::Static), _) |\n+            (Some(rl::Region::EarlyBound(_, _)), _) |\n+            (Some(rl::Region::LateBound(_, _)), _) |\n+            (Some(rl::Region::LateBoundAnon(_, _)), _) |\n+            (Some(rl::Region::Free(_, _)), _) |\n+            (None, _) => {\n                 debug!(\"no arg found\");\n             }\n         }"}]}