{"sha": "1544e89c49c67df00fc72d841f3e39be792cbe2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NDRlODljNDljNjdkZjAwZmM3MmQ4NDFmM2UzOWJlNzkyY2JlMmI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-09T19:35:55Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-09T19:35:55Z"}, "message": "G: mod item", "tree": {"sha": "1c8354cd22a77cfc32a2026fa1535cc2986007f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c8354cd22a77cfc32a2026fa1535cc2986007f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1544e89c49c67df00fc72d841f3e39be792cbe2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1544e89c49c67df00fc72d841f3e39be792cbe2b", "html_url": "https://github.com/rust-lang/rust/commit/1544e89c49c67df00fc72d841f3e39be792cbe2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1544e89c49c67df00fc72d841f3e39be792cbe2b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f8ca07d864b5ec8e668c48c4c029dd0584eae4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f8ca07d864b5ec8e668c48c4c029dd0584eae4a", "html_url": "https://github.com/rust-lang/rust/commit/7f8ca07d864b5ec8e668c48c4c029dd0584eae4a"}], "stats": {"total": 249, "additions": 180, "deletions": 69}, "files": [{"sha": "8871a1996e45b7cbbea229758745b73e8da904ee", "filename": "grammar.ron", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1544e89c49c67df00fc72d841f3e39be792cbe2b/grammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/1544e89c49c67df00fc72d841f3e39be792cbe2b/grammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/grammar.ron?ref=1544e89c49c67df00fc72d841f3e39be792cbe2b", "patch": "@@ -11,6 +11,7 @@ Grammar(\n         \"as\",\n         \"extern\",\n         \"crate\",\n+        \"mod\",\n     ],\n     tokens: [\n         \"ERROR\",\n@@ -73,6 +74,7 @@ Grammar(\n         \"EXTERN_CRATE_ITEM\",\n         \"ATTR\",\n         \"META_ITEM\",\n+        \"MOD_ITEM\",\n         \"LITERAL\",\n         \"ALIAS\",\n     ]"}, {"sha": "e775db14b6c52b247d8da5bae8d79da649bb5049", "filename": "src/parser/event_parser/grammar/items.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1544e89c49c67df00fc72d841f3e39be792cbe2b/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1544e89c49c67df00fc72d841f3e39be792cbe2b/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems.rs?ref=1544e89c49c67df00fc72d841f3e39be792cbe2b", "patch": "@@ -1,22 +1,23 @@\n use super::*;\n \n-pub(super) fn mod_items(p: &mut Parser) {\n+pub(super) fn mod_contents(p: &mut Parser) {\n+    attributes::inner_attributes(p);\n     many(p, |p| {\n         skip_to_first(\n-            p, item_first, mod_item,\n+            p, item_first, mod_contents_item,\n             \"expected item\",\n         )\n     });\n }\n \n fn item_first(p: &Parser) -> bool {\n     match p.current() {\n-        STRUCT_KW | FN_KW | EXTERN_KW => true,\n+        STRUCT_KW | FN_KW | EXTERN_KW | MOD_KW => true,\n         _ => false,\n     }\n }\n \n-fn mod_item(p: &mut Parser) {\n+fn mod_contents_item(p: &mut Parser) {\n     if item(p) {\n         if p.current() == SEMI {\n             node(p, ERROR, |p| {\n@@ -39,9 +40,9 @@ fn item(p: &mut Parser) -> bool {\n     // || node_if(p, CONST_KW, CONST_ITEM, const_item) or const FN!\n     // || unsafe trait, impl\n     // || node_if(p, FN_KW, FN_ITEM, fn_item)\n-    // || node_if(p, MOD_KW, MOD_ITEM, mod_item)\n     // || node_if(p, TYPE_KW, TYPE_ITEM, type_item)\n     node_if(p, [EXTERN_KW, CRATE_KW], EXTERN_CRATE_ITEM, extern_crate_item)\n+        || node_if(p, MOD_KW, MOD_ITEM, mod_item)\n         || node_if(p, STRUCT_KW, STRUCT_ITEM, struct_item)\n         || node_if(p, FN_KW, FN_ITEM, fn_item)\n }\n@@ -55,6 +56,16 @@ fn extern_crate_item(p: &mut Parser) {\n     p.expect(IDENT) && alias(p) && p.expect(SEMI);\n }\n \n+fn mod_item(p: &mut Parser) {\n+    if !p.expect(IDENT) {\n+        return;\n+    }\n+    if p.eat(SEMI) {\n+        return;\n+    }\n+    p.curly_block(mod_contents);\n+}\n+\n fn struct_field(p: &mut Parser) -> bool {\n     node_if(p, IDENT, STRUCT_FIELD, |p| {\n         p.expect(COLON) && p.expect(IDENT);"}, {"sha": "6d1cd7ec34e0b83322ebb46dbabb134f2ee295ac", "filename": "src/parser/event_parser/grammar/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1544e89c49c67df00fc72d841f3e39be792cbe2b/src%2Fparser%2Fevent_parser%2Fgrammar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1544e89c49c67df00fc72d841f3e39be792cbe2b/src%2Fparser%2Fevent_parser%2Fgrammar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar%2Fmod.rs?ref=1544e89c49c67df00fc72d841f3e39be792cbe2b", "patch": "@@ -10,8 +10,7 @@ mod expressions;\n pub(crate) fn file(p: &mut Parser) {\n     node(p, FILE, |p| {\n         p.optional(SHEBANG);\n-        attributes::inner_attributes(p);\n-        items::mod_items(p);\n+        items::mod_contents(p);\n     })\n }\n "}, {"sha": "26838d2d8e4b9897948a3cbda7a51592c4d70912", "filename": "src/syntax_kinds.rs", "status": "modified", "additions": 66, "deletions": 61, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/1544e89c49c67df00fc72d841f3e39be792cbe2b/src%2Fsyntax_kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1544e89c49c67df00fc72d841f3e39be792cbe2b/src%2Fsyntax_kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds.rs?ref=1544e89c49c67df00fc72d841f3e39be792cbe2b", "patch": "@@ -12,68 +12,70 @@ pub const FALSE_KW: SyntaxKind = SyntaxKind(7);\n pub const AS_KW: SyntaxKind = SyntaxKind(8);\n pub const EXTERN_KW: SyntaxKind = SyntaxKind(9);\n pub const CRATE_KW: SyntaxKind = SyntaxKind(10);\n-pub const ERROR: SyntaxKind = SyntaxKind(11);\n-pub const IDENT: SyntaxKind = SyntaxKind(12);\n-pub const UNDERSCORE: SyntaxKind = SyntaxKind(13);\n-pub const WHITESPACE: SyntaxKind = SyntaxKind(14);\n-pub const INT_NUMBER: SyntaxKind = SyntaxKind(15);\n-pub const FLOAT_NUMBER: SyntaxKind = SyntaxKind(16);\n-pub const SEMI: SyntaxKind = SyntaxKind(17);\n-pub const COMMA: SyntaxKind = SyntaxKind(18);\n-pub const DOT: SyntaxKind = SyntaxKind(19);\n-pub const DOTDOT: SyntaxKind = SyntaxKind(20);\n-pub const DOTDOTDOT: SyntaxKind = SyntaxKind(21);\n-pub const DOTDOTEQ: SyntaxKind = SyntaxKind(22);\n-pub const L_PAREN: SyntaxKind = SyntaxKind(23);\n-pub const R_PAREN: SyntaxKind = SyntaxKind(24);\n-pub const L_CURLY: SyntaxKind = SyntaxKind(25);\n-pub const R_CURLY: SyntaxKind = SyntaxKind(26);\n-pub const L_BRACK: SyntaxKind = SyntaxKind(27);\n-pub const R_BRACK: SyntaxKind = SyntaxKind(28);\n-pub const L_ANGLE: SyntaxKind = SyntaxKind(29);\n-pub const R_ANGLE: SyntaxKind = SyntaxKind(30);\n-pub const AT: SyntaxKind = SyntaxKind(31);\n-pub const POUND: SyntaxKind = SyntaxKind(32);\n-pub const TILDE: SyntaxKind = SyntaxKind(33);\n-pub const QUESTION: SyntaxKind = SyntaxKind(34);\n-pub const COLON: SyntaxKind = SyntaxKind(35);\n-pub const COLONCOLON: SyntaxKind = SyntaxKind(36);\n-pub const DOLLAR: SyntaxKind = SyntaxKind(37);\n-pub const EQ: SyntaxKind = SyntaxKind(38);\n-pub const EQEQ: SyntaxKind = SyntaxKind(39);\n-pub const FAT_ARROW: SyntaxKind = SyntaxKind(40);\n-pub const NEQ: SyntaxKind = SyntaxKind(41);\n-pub const EXCL: SyntaxKind = SyntaxKind(42);\n-pub const LIFETIME: SyntaxKind = SyntaxKind(43);\n-pub const CHAR: SyntaxKind = SyntaxKind(44);\n-pub const BYTE: SyntaxKind = SyntaxKind(45);\n-pub const STRING: SyntaxKind = SyntaxKind(46);\n-pub const RAW_STRING: SyntaxKind = SyntaxKind(47);\n-pub const BYTE_STRING: SyntaxKind = SyntaxKind(48);\n-pub const RAW_BYTE_STRING: SyntaxKind = SyntaxKind(49);\n-pub const PLUS: SyntaxKind = SyntaxKind(50);\n-pub const MINUS: SyntaxKind = SyntaxKind(51);\n-pub const STAR: SyntaxKind = SyntaxKind(52);\n-pub const SLASH: SyntaxKind = SyntaxKind(53);\n-pub const CARET: SyntaxKind = SyntaxKind(54);\n-pub const PERCENT: SyntaxKind = SyntaxKind(55);\n-pub const AMPERSAND: SyntaxKind = SyntaxKind(56);\n-pub const PIPE: SyntaxKind = SyntaxKind(57);\n-pub const THIN_ARROW: SyntaxKind = SyntaxKind(58);\n-pub const COMMENT: SyntaxKind = SyntaxKind(59);\n-pub const DOC_COMMENT: SyntaxKind = SyntaxKind(60);\n-pub const SHEBANG: SyntaxKind = SyntaxKind(61);\n-pub const FILE: SyntaxKind = SyntaxKind(62);\n-pub const STRUCT_ITEM: SyntaxKind = SyntaxKind(63);\n-pub const STRUCT_FIELD: SyntaxKind = SyntaxKind(64);\n-pub const FN_ITEM: SyntaxKind = SyntaxKind(65);\n-pub const EXTERN_CRATE_ITEM: SyntaxKind = SyntaxKind(66);\n-pub const ATTR: SyntaxKind = SyntaxKind(67);\n-pub const META_ITEM: SyntaxKind = SyntaxKind(68);\n-pub const LITERAL: SyntaxKind = SyntaxKind(69);\n-pub const ALIAS: SyntaxKind = SyntaxKind(70);\n+pub const MOD_KW: SyntaxKind = SyntaxKind(11);\n+pub const ERROR: SyntaxKind = SyntaxKind(12);\n+pub const IDENT: SyntaxKind = SyntaxKind(13);\n+pub const UNDERSCORE: SyntaxKind = SyntaxKind(14);\n+pub const WHITESPACE: SyntaxKind = SyntaxKind(15);\n+pub const INT_NUMBER: SyntaxKind = SyntaxKind(16);\n+pub const FLOAT_NUMBER: SyntaxKind = SyntaxKind(17);\n+pub const SEMI: SyntaxKind = SyntaxKind(18);\n+pub const COMMA: SyntaxKind = SyntaxKind(19);\n+pub const DOT: SyntaxKind = SyntaxKind(20);\n+pub const DOTDOT: SyntaxKind = SyntaxKind(21);\n+pub const DOTDOTDOT: SyntaxKind = SyntaxKind(22);\n+pub const DOTDOTEQ: SyntaxKind = SyntaxKind(23);\n+pub const L_PAREN: SyntaxKind = SyntaxKind(24);\n+pub const R_PAREN: SyntaxKind = SyntaxKind(25);\n+pub const L_CURLY: SyntaxKind = SyntaxKind(26);\n+pub const R_CURLY: SyntaxKind = SyntaxKind(27);\n+pub const L_BRACK: SyntaxKind = SyntaxKind(28);\n+pub const R_BRACK: SyntaxKind = SyntaxKind(29);\n+pub const L_ANGLE: SyntaxKind = SyntaxKind(30);\n+pub const R_ANGLE: SyntaxKind = SyntaxKind(31);\n+pub const AT: SyntaxKind = SyntaxKind(32);\n+pub const POUND: SyntaxKind = SyntaxKind(33);\n+pub const TILDE: SyntaxKind = SyntaxKind(34);\n+pub const QUESTION: SyntaxKind = SyntaxKind(35);\n+pub const COLON: SyntaxKind = SyntaxKind(36);\n+pub const COLONCOLON: SyntaxKind = SyntaxKind(37);\n+pub const DOLLAR: SyntaxKind = SyntaxKind(38);\n+pub const EQ: SyntaxKind = SyntaxKind(39);\n+pub const EQEQ: SyntaxKind = SyntaxKind(40);\n+pub const FAT_ARROW: SyntaxKind = SyntaxKind(41);\n+pub const NEQ: SyntaxKind = SyntaxKind(42);\n+pub const EXCL: SyntaxKind = SyntaxKind(43);\n+pub const LIFETIME: SyntaxKind = SyntaxKind(44);\n+pub const CHAR: SyntaxKind = SyntaxKind(45);\n+pub const BYTE: SyntaxKind = SyntaxKind(46);\n+pub const STRING: SyntaxKind = SyntaxKind(47);\n+pub const RAW_STRING: SyntaxKind = SyntaxKind(48);\n+pub const BYTE_STRING: SyntaxKind = SyntaxKind(49);\n+pub const RAW_BYTE_STRING: SyntaxKind = SyntaxKind(50);\n+pub const PLUS: SyntaxKind = SyntaxKind(51);\n+pub const MINUS: SyntaxKind = SyntaxKind(52);\n+pub const STAR: SyntaxKind = SyntaxKind(53);\n+pub const SLASH: SyntaxKind = SyntaxKind(54);\n+pub const CARET: SyntaxKind = SyntaxKind(55);\n+pub const PERCENT: SyntaxKind = SyntaxKind(56);\n+pub const AMPERSAND: SyntaxKind = SyntaxKind(57);\n+pub const PIPE: SyntaxKind = SyntaxKind(58);\n+pub const THIN_ARROW: SyntaxKind = SyntaxKind(59);\n+pub const COMMENT: SyntaxKind = SyntaxKind(60);\n+pub const DOC_COMMENT: SyntaxKind = SyntaxKind(61);\n+pub const SHEBANG: SyntaxKind = SyntaxKind(62);\n+pub const FILE: SyntaxKind = SyntaxKind(63);\n+pub const STRUCT_ITEM: SyntaxKind = SyntaxKind(64);\n+pub const STRUCT_FIELD: SyntaxKind = SyntaxKind(65);\n+pub const FN_ITEM: SyntaxKind = SyntaxKind(66);\n+pub const EXTERN_CRATE_ITEM: SyntaxKind = SyntaxKind(67);\n+pub const ATTR: SyntaxKind = SyntaxKind(68);\n+pub const META_ITEM: SyntaxKind = SyntaxKind(69);\n+pub const MOD_ITEM: SyntaxKind = SyntaxKind(70);\n+pub const LITERAL: SyntaxKind = SyntaxKind(71);\n+pub const ALIAS: SyntaxKind = SyntaxKind(72);\n \n-static INFOS: [SyntaxInfo; 71] = [\n+static INFOS: [SyntaxInfo; 73] = [\n     SyntaxInfo { name: \"USE_KW\" },\n     SyntaxInfo { name: \"FN_KW\" },\n     SyntaxInfo { name: \"STRUCT_KW\" },\n@@ -85,6 +87,7 @@ static INFOS: [SyntaxInfo; 71] = [\n     SyntaxInfo { name: \"AS_KW\" },\n     SyntaxInfo { name: \"EXTERN_KW\" },\n     SyntaxInfo { name: \"CRATE_KW\" },\n+    SyntaxInfo { name: \"MOD_KW\" },\n     SyntaxInfo { name: \"ERROR\" },\n     SyntaxInfo { name: \"IDENT\" },\n     SyntaxInfo { name: \"UNDERSCORE\" },\n@@ -143,6 +146,7 @@ static INFOS: [SyntaxInfo; 71] = [\n     SyntaxInfo { name: \"EXTERN_CRATE_ITEM\" },\n     SyntaxInfo { name: \"ATTR\" },\n     SyntaxInfo { name: \"META_ITEM\" },\n+    SyntaxInfo { name: \"MOD_ITEM\" },\n     SyntaxInfo { name: \"LITERAL\" },\n     SyntaxInfo { name: \"ALIAS\" },\n ];\n@@ -164,6 +168,7 @@ pub(crate) fn ident_to_keyword(ident: &str) -> Option<SyntaxKind> {\n        \"as\" => Some(AS_KW),\n        \"extern\" => Some(EXTERN_KW),\n        \"crate\" => Some(CRATE_KW),\n+       \"mod\" => Some(MOD_KW),\n        _ => None,\n    }\n }"}, {"sha": "58568b20d6044c2888dbaa90b147d628f9bb36f5", "filename": "tests/data/lexer/0011_keywords.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1544e89c49c67df00fc72d841f3e39be792cbe2b/tests%2Fdata%2Flexer%2F0011_keywords.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1544e89c49c67df00fc72d841f3e39be792cbe2b/tests%2Fdata%2Flexer%2F0011_keywords.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Flexer%2F0011_keywords.rs?ref=1544e89c49c67df00fc72d841f3e39be792cbe2b", "patch": "@@ -1 +1 @@\n-fn use struct trait enum impl true false as extern crate\n+fn use struct trait enum impl true false as extern crate mod"}, {"sha": "35d9a3871d410322ecceed703c564198a0cd017b", "filename": "tests/data/lexer/0011_keywords.txt", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1544e89c49c67df00fc72d841f3e39be792cbe2b/tests%2Fdata%2Flexer%2F0011_keywords.txt", "raw_url": "https://github.com/rust-lang/rust/raw/1544e89c49c67df00fc72d841f3e39be792cbe2b/tests%2Fdata%2Flexer%2F0011_keywords.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Flexer%2F0011_keywords.txt?ref=1544e89c49c67df00fc72d841f3e39be792cbe2b", "patch": "@@ -19,4 +19,6 @@ WHITESPACE 1 \" \"\n EXTERN_KW 6 \"extern\"\n WHITESPACE 1 \" \"\n CRATE_KW 5 \"crate\"\n+WHITESPACE 1 \" \"\n+MOD_KW 3 \"mod\"\n WHITESPACE 1 \"\\n\""}, {"sha": "d22993bc150f6f79670ca36cd931f1e76bcdbf32", "filename": "tests/data/parser/ok/0008_mod_item.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1544e89c49c67df00fc72d841f3e39be792cbe2b/tests%2Fdata%2Fparser%2Fok%2F0008_mod_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1544e89c49c67df00fc72d841f3e39be792cbe2b/tests%2Fdata%2Fparser%2Fok%2F0008_mod_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Fok%2F0008_mod_item.rs?ref=1544e89c49c67df00fc72d841f3e39be792cbe2b", "patch": "@@ -0,0 +1,17 @@\n+mod a;\n+\n+mod b {\n+}\n+\n+mod c {\n+    fn foo() {\n+    }\n+    struct S {}\n+}\n+\n+mod d {\n+    #![attr]\n+    mod e;\n+    mod f {\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "425e3344c748f097f95d248d91bf68d976af0560", "filename": "tests/data/parser/ok/0008_mod_item.txt", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/1544e89c49c67df00fc72d841f3e39be792cbe2b/tests%2Fdata%2Fparser%2Fok%2F0008_mod_item.txt", "raw_url": "https://github.com/rust-lang/rust/raw/1544e89c49c67df00fc72d841f3e39be792cbe2b/tests%2Fdata%2Fparser%2Fok%2F0008_mod_item.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Fok%2F0008_mod_item.txt?ref=1544e89c49c67df00fc72d841f3e39be792cbe2b", "patch": "@@ -0,0 +1,75 @@\n+FILE@[0; 118)\n+  MOD_ITEM@[0; 8)\n+    MOD_KW@[0; 3)\n+    WHITESPACE@[3; 4)\n+    IDENT@[4; 5)\n+    SEMI@[5; 6)\n+    WHITESPACE@[6; 8)\n+  MOD_ITEM@[8; 19)\n+    MOD_KW@[8; 11)\n+    WHITESPACE@[11; 12)\n+    IDENT@[12; 13)\n+    WHITESPACE@[13; 14)\n+    L_CURLY@[14; 15)\n+    WHITESPACE@[15; 16)\n+    R_CURLY@[16; 17)\n+    WHITESPACE@[17; 19)\n+  MOD_ITEM@[19; 67)\n+    MOD_KW@[19; 22)\n+    WHITESPACE@[22; 23)\n+    IDENT@[23; 24)\n+    WHITESPACE@[24; 25)\n+    L_CURLY@[25; 26)\n+    FN_ITEM@[26; 52)\n+      WHITESPACE@[26; 31)\n+      FN_KW@[31; 33)\n+      WHITESPACE@[33; 34)\n+      IDENT@[34; 37)\n+      L_PAREN@[37; 38)\n+      R_PAREN@[38; 39)\n+      WHITESPACE@[39; 40)\n+      L_CURLY@[40; 41)\n+      WHITESPACE@[41; 46)\n+      R_CURLY@[46; 47)\n+      WHITESPACE@[47; 52)\n+    STRUCT_ITEM@[52; 64)\n+      STRUCT_KW@[52; 58)\n+      WHITESPACE@[58; 59)\n+      IDENT@[59; 60)\n+      WHITESPACE@[60; 61)\n+      L_CURLY@[61; 62)\n+      R_CURLY@[62; 63)\n+      WHITESPACE@[63; 64)\n+    R_CURLY@[64; 65)\n+    WHITESPACE@[65; 67)\n+  MOD_ITEM@[67; 118)\n+    MOD_KW@[67; 70)\n+    WHITESPACE@[70; 71)\n+    IDENT@[71; 72)\n+    WHITESPACE@[72; 73)\n+    L_CURLY@[73; 74)\n+    ATTR@[74; 92)\n+      WHITESPACE@[74; 79)\n+      POUND@[79; 80)\n+      EXCL@[80; 81)\n+      L_BRACK@[81; 82)\n+      META_ITEM@[82; 86)\n+        IDENT@[82; 86)\n+      R_BRACK@[86; 87)\n+      WHITESPACE@[87; 92)\n+    MOD_ITEM@[92; 103)\n+      MOD_KW@[92; 95)\n+      WHITESPACE@[95; 96)\n+      IDENT@[96; 97)\n+      SEMI@[97; 98)\n+      WHITESPACE@[98; 103)\n+    MOD_ITEM@[103; 117)\n+      MOD_KW@[103; 106)\n+      WHITESPACE@[106; 107)\n+      IDENT@[107; 108)\n+      WHITESPACE@[108; 109)\n+      L_CURLY@[109; 110)\n+      WHITESPACE@[110; 115)\n+      R_CURLY@[115; 116)\n+      WHITESPACE@[116; 117)\n+    R_CURLY@[117; 118)"}]}