{"sha": "a131c518ad640ccd12711ccd63d8b98cafa55ee9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMzFjNTE4YWQ2NDBjY2QxMjcxMWNjZDYzZDhiOThjYWZhNTVlZTk=", "commit": {"author": {"name": "Irina Popa", "email": "irinagpopa@gmail.com", "date": "2018-04-26T13:07:26Z"}, "committer": {"name": "Irina Popa", "email": "irinagpopa@gmail.com", "date": "2018-04-26T14:49:24Z"}, "message": "Fixed tidy errors.", "tree": {"sha": "5fc47e5862bd70b8728e6eb204c815f007c8dcad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fc47e5862bd70b8728e6eb204c815f007c8dcad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a131c518ad640ccd12711ccd63d8b98cafa55ee9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a131c518ad640ccd12711ccd63d8b98cafa55ee9", "html_url": "https://github.com/rust-lang/rust/commit/a131c518ad640ccd12711ccd63d8b98cafa55ee9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a131c518ad640ccd12711ccd63d8b98cafa55ee9/comments", "author": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04fa0e7bb3e462080be4a6cee45fd94b1c27d287", "url": "https://api.github.com/repos/rust-lang/rust/commits/04fa0e7bb3e462080be4a6cee45fd94b1c27d287", "html_url": "https://github.com/rust-lang/rust/commit/04fa0e7bb3e462080be4a6cee45fd94b1c27d287"}], "stats": {"total": 76, "additions": 39, "deletions": 37}, "files": [{"sha": "4f49b159ad387dcb4ce983cfb5caf44d3dab03f4", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a131c518ad640ccd12711ccd63d8b98cafa55ee9/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a131c518ad640ccd12711ccd63d8b98cafa55ee9/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=a131c518ad640ccd12711ccd63d8b98cafa55ee9", "patch": "@@ -1204,7 +1204,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                   f: F) -> R\n                                   where F: for<'b> FnOnce(TyCtxt<'b, 'tcx, 'tcx>) -> R\n     {\n-        let data_layout = TargetDataLayout::parse(&s.target.target).unwrap_or_else(|err| { \n+        let data_layout = TargetDataLayout::parse(&s.target.target).unwrap_or_else(|err| {\n             s.fatal(&err);\n         });\n         let interners = CtxtInterners::new(&arenas.interner);"}, {"sha": "942cfdb36b8da9bb09f95739baedf4db0b1a7692", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a131c518ad640ccd12711ccd63d8b98cafa55ee9/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a131c518ad640ccd12711ccd63d8b98cafa55ee9/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=a131c518ad640ccd12711ccd63d8b98cafa55ee9", "patch": "@@ -1440,7 +1440,7 @@ impl<'a, 'tcx> ty::maps::TyCtxtAt<'a, 'tcx, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx> \n+impl<'a, 'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx>\n     where C: LayoutOf<Ty = Ty<'tcx>> + HasTyCtxt<'tcx>,\n           C::TyLayout: MaybeResult<TyLayout<'tcx>>\n {"}, {"sha": "90b5b97b51ee2da68a4008a725433df62c82f266", "filename": "src/librustc_target/abi/call/aarch64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a131c518ad640ccd12711ccd63d8b98cafa55ee9/src%2Flibrustc_target%2Fabi%2Fcall%2Faarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a131c518ad640ccd12711ccd63d8b98cafa55ee9/src%2Flibrustc_target%2Fabi%2Fcall%2Faarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Faarch64.rs?ref=a131c518ad640ccd12711ccd63d8b98cafa55ee9", "patch": "@@ -12,7 +12,7 @@ use abi::call::{FnType, ArgType, Reg, RegKind, Uniform};\n use abi::{HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n \n fn is_homogeneous_aggregate<'a, Ty, C>(cx: C, arg: &mut ArgType<'a, Ty>)\n-                                     -> Option<Uniform> \n+                                     -> Option<Uniform>\n     where Ty: TyLayoutMethods<'a, C> + Copy,\n           C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n {\n@@ -41,7 +41,7 @@ fn is_homogeneous_aggregate<'a, Ty, C>(cx: C, arg: &mut ArgType<'a, Ty>)\n     })\n }\n \n-fn classify_ret_ty<'a, Ty, C>(cx: C, ret: &mut ArgType<'a, Ty>) \n+fn classify_ret_ty<'a, Ty, C>(cx: C, ret: &mut ArgType<'a, Ty>)\n     where Ty: TyLayoutMethods<'a, C> + Copy,\n           C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n {\n@@ -75,7 +75,7 @@ fn classify_ret_ty<'a, Ty, C>(cx: C, ret: &mut ArgType<'a, Ty>)\n     ret.make_indirect();\n }\n \n-fn classify_arg_ty<'a, Ty, C>(cx: C, arg: &mut ArgType<'a, Ty>) \n+fn classify_arg_ty<'a, Ty, C>(cx: C, arg: &mut ArgType<'a, Ty>)\n     where Ty: TyLayoutMethods<'a, C> + Copy,\n           C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n {\n@@ -109,7 +109,7 @@ fn classify_arg_ty<'a, Ty, C>(cx: C, arg: &mut ArgType<'a, Ty>)\n     arg.make_indirect();\n }\n \n-pub fn compute_abi_info<'a, Ty, C>(cx: C, fty: &mut FnType<'a, Ty>) \n+pub fn compute_abi_info<'a, Ty, C>(cx: C, fty: &mut FnType<'a, Ty>)\n     where Ty: TyLayoutMethods<'a, C> + Copy,\n           C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n {"}, {"sha": "249aad2d937ea27606587ad9ea58311c6c70cae7", "filename": "src/librustc_target/abi/call/arm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a131c518ad640ccd12711ccd63d8b98cafa55ee9/src%2Flibrustc_target%2Fabi%2Fcall%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a131c518ad640ccd12711ccd63d8b98cafa55ee9/src%2Flibrustc_target%2Fabi%2Fcall%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Farm.rs?ref=a131c518ad640ccd12711ccd63d8b98cafa55ee9", "patch": "@@ -13,7 +13,7 @@ use abi::{HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n use spec::HasTargetSpec;\n \n fn is_homogeneous_aggregate<'a, Ty, C>(cx: C, arg: &mut ArgType<'a, Ty>)\n-                                     -> Option<Uniform> \n+                                     -> Option<Uniform>\n     where Ty: TyLayoutMethods<'a, C> + Copy,\n           C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n {\n@@ -77,7 +77,7 @@ fn classify_ret_ty<'a, Ty, C>(cx: C, ret: &mut ArgType<'a, Ty>, vfp: bool)\n     ret.make_indirect();\n }\n \n-fn classify_arg_ty<'a, Ty, C>(cx: C, arg: &mut ArgType<'a, Ty>, vfp: bool) \n+fn classify_arg_ty<'a, Ty, C>(cx: C, arg: &mut ArgType<'a, Ty>, vfp: bool)\n     where Ty: TyLayoutMethods<'a, C> + Copy,\n           C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n {\n@@ -101,7 +101,7 @@ fn classify_arg_ty<'a, Ty, C>(cx: C, arg: &mut ArgType<'a, Ty>, vfp: bool)\n     });\n }\n \n-pub fn compute_abi_info<'a, Ty, C>(cx: C, fty: &mut FnType<'a, Ty>) \n+pub fn compute_abi_info<'a, Ty, C>(cx: C, fty: &mut FnType<'a, Ty>)\n     where Ty: TyLayoutMethods<'a, C> + Copy,\n           C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout + HasTargetSpec\n {"}, {"sha": "81d6f7b134b3e126bb8d86116ccf8b8de532a0c6", "filename": "src/librustc_target/abi/call/asmjs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a131c518ad640ccd12711ccd63d8b98cafa55ee9/src%2Flibrustc_target%2Fabi%2Fcall%2Fasmjs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a131c518ad640ccd12711ccd63d8b98cafa55ee9/src%2Flibrustc_target%2Fabi%2Fcall%2Fasmjs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fasmjs.rs?ref=a131c518ad640ccd12711ccd63d8b98cafa55ee9", "patch": "@@ -16,7 +16,7 @@ use abi::{HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n // See the https://github.com/kripken/emscripten-fastcomp-clang repository.\n // The class `EmscriptenABIInfo` in `/lib/CodeGen/TargetInfo.cpp` contains the ABI definitions.\n \n-fn classify_ret_ty<'a, Ty, C>(cx: C, ret: &mut ArgType<'a, Ty>) \n+fn classify_ret_ty<'a, Ty, C>(cx: C, ret: &mut ArgType<'a, Ty>)\n     where Ty: TyLayoutMethods<'a, C> + Copy,\n           C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n {\n@@ -42,7 +42,7 @@ fn classify_arg_ty<Ty>(arg: &mut ArgType<Ty>) {\n     }\n }\n \n-pub fn compute_abi_info<'a, Ty, C>(cx: C, fty: &mut FnType<'a, Ty>) \n+pub fn compute_abi_info<'a, Ty, C>(cx: C, fty: &mut FnType<'a, Ty>)\n     where Ty: TyLayoutMethods<'a, C> + Copy,\n           C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n {"}, {"sha": "5001499ea5d3b04134e5cb603c86edece4148f96", "filename": "src/librustc_target/abi/call/mips.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a131c518ad640ccd12711ccd63d8b98cafa55ee9/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a131c518ad640ccd12711ccd63d8b98cafa55ee9/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips.rs?ref=a131c518ad640ccd12711ccd63d8b98cafa55ee9", "patch": "@@ -44,7 +44,7 @@ fn classify_arg_ty<'a, Ty, C>(cx: C, arg: &mut ArgType<Ty>, offset: &mut Size)\n     *offset = offset.abi_align(align) + size.abi_align(align);\n }\n \n-pub fn compute_abi_info<'a, Ty, C>(cx: C, fty: &mut FnType<Ty>) \n+pub fn compute_abi_info<'a, Ty, C>(cx: C, fty: &mut FnType<Ty>)\n     where Ty: TyLayoutMethods<'a, C>, C: LayoutOf<Ty = Ty> + HasDataLayout\n {\n     let mut offset = Size::from_bytes(0);"}, {"sha": "e5cbc6424a450ae3af6098a3d7bdf8bf64aa7c19", "filename": "src/librustc_target/abi/call/mips64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a131c518ad640ccd12711ccd63d8b98cafa55ee9/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a131c518ad640ccd12711ccd63d8b98cafa55ee9/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips64.rs?ref=a131c518ad640ccd12711ccd63d8b98cafa55ee9", "patch": "@@ -27,7 +27,7 @@ fn extend_integer_width_mips<Ty>(arg: &mut ArgType<Ty>, bits: u64) {\n     arg.extend_integer_width_to(bits);\n }\n \n-fn float_reg<'a, Ty, C>(cx: C, ret: &ArgType<'a, Ty>, i: usize) -> Option<Reg> \n+fn float_reg<'a, Ty, C>(cx: C, ret: &ArgType<'a, Ty>, i: usize) -> Option<Reg>\n     where Ty: TyLayoutMethods<'a, C> + Copy,\n           C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n {\n@@ -41,7 +41,7 @@ fn float_reg<'a, Ty, C>(cx: C, ret: &ArgType<'a, Ty>, i: usize) -> Option<Reg>\n     }\n }\n \n-fn classify_ret_ty<'a, Ty, C>(cx: C, ret: &mut ArgType<'a, Ty>) \n+fn classify_ret_ty<'a, Ty, C>(cx: C, ret: &mut ArgType<'a, Ty>)\n     where Ty: TyLayoutMethods<'a, C> + Copy,\n           C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n {\n@@ -83,7 +83,7 @@ fn classify_ret_ty<'a, Ty, C>(cx: C, ret: &mut ArgType<'a, Ty>)\n     }\n }\n \n-fn classify_arg_ty<'a, Ty, C>(cx: C, arg: &mut ArgType<'a, Ty>) \n+fn classify_arg_ty<'a, Ty, C>(cx: C, arg: &mut ArgType<'a, Ty>)\n     where Ty: TyLayoutMethods<'a, C> + Copy,\n           C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n {\n@@ -151,7 +151,7 @@ fn classify_arg_ty<'a, Ty, C>(cx: C, arg: &mut ArgType<'a, Ty>)\n     });\n }\n \n-pub fn compute_abi_info<'a, Ty, C>(cx: C, fty: &mut FnType<'a, Ty>) \n+pub fn compute_abi_info<'a, Ty, C>(cx: C, fty: &mut FnType<'a, Ty>)\n     where Ty: TyLayoutMethods<'a, C> + Copy,\n           C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n {"}, {"sha": "2d8996bb5ae27108416d4dd04b6438967abaa4e4", "filename": "src/librustc_target/abi/call/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a131c518ad640ccd12711ccd63d8b98cafa55ee9/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a131c518ad640ccd12711ccd63d8b98cafa55ee9/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs?ref=a131c518ad640ccd12711ccd63d8b98cafa55ee9", "patch": "@@ -245,7 +245,7 @@ impl<'a, Ty> TyLayout<'a, Ty> {\n         }\n     }\n \n-    fn homogeneous_aggregate<C>(&self, cx: C) -> Option<Reg> \n+    fn homogeneous_aggregate<C>(&self, cx: C) -> Option<Reg>\n         where Ty: TyLayoutMethods<'a, C> + Copy, C: LayoutOf<Ty = Ty, TyLayout = Self> + Copy\n     {\n         match self.abi {"}, {"sha": "0c5ec77a3982d418045ca79dca502c1b892020f3", "filename": "src/librustc_target/abi/call/powerpc64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a131c518ad640ccd12711ccd63d8b98cafa55ee9/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a131c518ad640ccd12711ccd63d8b98cafa55ee9/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc64.rs?ref=a131c518ad640ccd12711ccd63d8b98cafa55ee9", "patch": "@@ -22,11 +22,11 @@ enum ABI {\n }\n use self::ABI::*;\n \n-fn is_homogeneous_aggregate<'a, Ty, C>(cx: C, arg: &mut ArgType<'a, Ty>, abi: ABI) \n+fn is_homogeneous_aggregate<'a, Ty, C>(cx: C, arg: &mut ArgType<'a, Ty>, abi: ABI)\n                                        -> Option<Uniform>\n     where Ty: TyLayoutMethods<'a, C> + Copy,\n           C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n-{                                   \n+{\n     arg.layout.homogeneous_aggregate(cx).and_then(|unit| {\n         // ELFv1 only passes one-member aggregates transparently.\n         // ELFv2 passes up to eight uniquely addressable members."}, {"sha": "3002a3c46c8a84cfd80ca00db10f53b1679865ad", "filename": "src/librustc_target/abi/call/s390x.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a131c518ad640ccd12711ccd63d8b98cafa55ee9/src%2Flibrustc_target%2Fabi%2Fcall%2Fs390x.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a131c518ad640ccd12711ccd63d8b98cafa55ee9/src%2Flibrustc_target%2Fabi%2Fcall%2Fs390x.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fs390x.rs?ref=a131c518ad640ccd12711ccd63d8b98cafa55ee9", "patch": "@@ -14,7 +14,7 @@\n use abi::call::{FnType, ArgType, Reg};\n use abi::{self, HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n \n-fn classify_ret_ty<'a, Ty, C>(ret: &mut ArgType<Ty>) \n+fn classify_ret_ty<'a, Ty, C>(ret: &mut ArgType<Ty>)\n     where Ty: TyLayoutMethods<'a, C>, C: LayoutOf<Ty = Ty> + HasDataLayout\n {\n     if !ret.layout.is_aggregate() && ret.layout.size.bits() <= 64 {\n@@ -46,7 +46,7 @@ fn is_single_fp_element<'a, Ty, C>(cx: C, layout: TyLayout<'a, Ty>) -> bool\n     }\n }\n \n-fn classify_arg_ty<'a, Ty, C>(cx: C, arg: &mut ArgType<'a, Ty>) \n+fn classify_arg_ty<'a, Ty, C>(cx: C, arg: &mut ArgType<'a, Ty>)\n     where Ty: TyLayoutMethods<'a, C> + Copy,\n           C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n {\n@@ -72,7 +72,7 @@ fn classify_arg_ty<'a, Ty, C>(cx: C, arg: &mut ArgType<'a, Ty>)\n     }\n }\n \n-pub fn compute_abi_info<'a, Ty, C>(cx: C, fty: &mut FnType<'a, Ty>) \n+pub fn compute_abi_info<'a, Ty, C>(cx: C, fty: &mut FnType<'a, Ty>)\n     where Ty: TyLayoutMethods<'a, C> + Copy,\n           C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n {"}, {"sha": "5001499ea5d3b04134e5cb603c86edece4148f96", "filename": "src/librustc_target/abi/call/sparc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a131c518ad640ccd12711ccd63d8b98cafa55ee9/src%2Flibrustc_target%2Fabi%2Fcall%2Fsparc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a131c518ad640ccd12711ccd63d8b98cafa55ee9/src%2Flibrustc_target%2Fabi%2Fcall%2Fsparc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fsparc.rs?ref=a131c518ad640ccd12711ccd63d8b98cafa55ee9", "patch": "@@ -11,7 +11,7 @@\n use abi::call::{ArgType, FnType, Reg, Uniform};\n use abi::{HasDataLayout, LayoutOf, Size, TyLayoutMethods};\n \n-fn classify_ret_ty<'a, Ty, C>(cx: C, ret: &mut ArgType<Ty>, offset: &mut Size) \n+fn classify_ret_ty<'a, Ty, C>(cx: C, ret: &mut ArgType<Ty>, offset: &mut Size)\n     where Ty: TyLayoutMethods<'a, C>, C: LayoutOf<Ty = Ty> + HasDataLayout\n {\n     if !ret.layout.is_aggregate() {"}, {"sha": "987f56e6f98511ed822ebc1cbe37bc8726f0f97a", "filename": "src/librustc_target/abi/call/sparc64.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a131c518ad640ccd12711ccd63d8b98cafa55ee9/src%2Flibrustc_target%2Fabi%2Fcall%2Fsparc64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a131c518ad640ccd12711ccd63d8b98cafa55ee9/src%2Flibrustc_target%2Fabi%2Fcall%2Fsparc64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fsparc64.rs?ref=a131c518ad640ccd12711ccd63d8b98cafa55ee9", "patch": "@@ -16,7 +16,7 @@ use abi::{HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n fn is_homogeneous_aggregate<'a, Ty, C>(cx: C, arg: &mut ArgType<'a, Ty>)\n                                      -> Option<Uniform>\n     where Ty: TyLayoutMethods<'a, C> + Copy,\n-          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout \n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n {\n     arg.layout.homogeneous_aggregate(cx).and_then(|unit| {\n         // Ensure we have at most eight uniquely addressable members.\n@@ -41,9 +41,9 @@ fn is_homogeneous_aggregate<'a, Ty, C>(cx: C, arg: &mut ArgType<'a, Ty>)\n     })\n }\n \n-fn classify_ret_ty<'a, Ty, C>(cx: C, ret: &mut ArgType<'a, Ty>) \n+fn classify_ret_ty<'a, Ty, C>(cx: C, ret: &mut ArgType<'a, Ty>)\n     where Ty: TyLayoutMethods<'a, C> + Copy,\n-          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout \n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n {\n     if !ret.layout.is_aggregate() {\n         ret.extend_integer_width_to(64);\n@@ -78,9 +78,9 @@ fn classify_ret_ty<'a, Ty, C>(cx: C, ret: &mut ArgType<'a, Ty>)\n     ret.make_indirect();\n }\n \n-fn classify_arg_ty<'a, Ty, C>(cx: C, arg: &mut ArgType<'a, Ty>) \n+fn classify_arg_ty<'a, Ty, C>(cx: C, arg: &mut ArgType<'a, Ty>)\n     where Ty: TyLayoutMethods<'a, C> + Copy,\n-          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout \n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n {\n     if !arg.layout.is_aggregate() {\n         arg.extend_integer_width_to(64);\n@@ -104,9 +104,9 @@ fn classify_arg_ty<'a, Ty, C>(cx: C, arg: &mut ArgType<'a, Ty>)\n     });\n }\n \n-pub fn compute_abi_info<'a, Ty, C>(cx: C, fty: &mut FnType<'a, Ty>)  \n+pub fn compute_abi_info<'a, Ty, C>(cx: C, fty: &mut FnType<'a, Ty>)\n     where Ty: TyLayoutMethods<'a, C> + Copy,\n-          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout \n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n {\n     if !fty.ret.is_ignore() {\n         classify_ret_ty(cx, &mut fty.ret);"}, {"sha": "e803b96b21cfa63ef9001d8f03fd5b5cb8f9465e", "filename": "src/librustc_target/abi/call/x86.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a131c518ad640ccd12711ccd63d8b98cafa55ee9/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a131c518ad640ccd12711ccd63d8b98cafa55ee9/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86.rs?ref=a131c518ad640ccd12711ccd63d8b98cafa55ee9", "patch": "@@ -40,7 +40,7 @@ fn is_single_fp_element<'a, Ty, C>(cx: C, layout: TyLayout<'a, Ty>) -> bool\n     }\n }\n \n-pub fn compute_abi_info<'a, Ty, C>(cx: C, fty: &mut FnType<'a, Ty>, flavor: Flavor) \n+pub fn compute_abi_info<'a, Ty, C>(cx: C, fty: &mut FnType<'a, Ty>, flavor: Flavor)\n     where Ty: TyLayoutMethods<'a, C> + Copy,\n           C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout + HasTargetSpec\n {"}, {"sha": "0ba1ee736e769f85b2a1a196525daa6523046631", "filename": "src/librustc_target/abi/call/x86_64.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a131c518ad640ccd12711ccd63d8b98cafa55ee9/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a131c518ad640ccd12711ccd63d8b98cafa55ee9/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_64.rs?ref=a131c518ad640ccd12711ccd63d8b98cafa55ee9", "patch": "@@ -32,12 +32,12 @@ const LARGEST_VECTOR_SIZE: usize = 512;\n const MAX_EIGHTBYTES: usize = LARGEST_VECTOR_SIZE / 64;\n \n fn classify_arg<'a, Ty, C>(cx: C, arg: &ArgType<'a, Ty>)\n-                          -> Result<[Option<Class>; MAX_EIGHTBYTES], Memory> \n+                          -> Result<[Option<Class>; MAX_EIGHTBYTES], Memory>\n     where Ty: TyLayoutMethods<'a, C> + Copy,\n           C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n {\n     fn classify<'a, Ty, C>(cx: C, layout: TyLayout<'a, Ty>,\n-                          cls: &mut [Option<Class>], off: Size) -> Result<(), Memory> \n+                          cls: &mut [Option<Class>], off: Size) -> Result<(), Memory>\n         where Ty: TyLayoutMethods<'a, C> + Copy,\n             C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n     {\n@@ -179,7 +179,7 @@ fn cast_target(cls: &[Option<Class>], size: Size) -> CastTarget {\n     target\n }\n \n-pub fn compute_abi_info<'a, Ty, C>(cx: C, fty: &mut FnType<'a, Ty>) \n+pub fn compute_abi_info<'a, Ty, C>(cx: C, fty: &mut FnType<'a, Ty>)\n     where Ty: TyLayoutMethods<'a, C> + Copy,\n           C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n {"}, {"sha": "18dd04c0ee86774384c9a80fe5d0165848f7773e", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a131c518ad640ccd12711ccd63d8b98cafa55ee9/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a131c518ad640ccd12711ccd63d8b98cafa55ee9/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=a131c518ad640ccd12711ccd63d8b98cafa55ee9", "patch": "@@ -794,7 +794,7 @@ impl<'a, Ty> TyLayout<'a, Ty> {\n     where Ty: TyLayoutMethods<'a, C>, C: LayoutOf<Ty = Ty> {\n         Ty::for_variant(self, cx, variant_index)\n     }\n-    pub fn field<C>(self, cx: C, i: usize) -> C::TyLayout \n+    pub fn field<C>(self, cx: C, i: usize) -> C::TyLayout\n     where Ty: TyLayoutMethods<'a, C>, C: LayoutOf<Ty = Ty> {\n         Ty::field(self, cx, i)\n     }\n@@ -820,4 +820,4 @@ impl<'a, Ty> TyLayout<'a, Ty> {\n     pub fn size_and_align(&self) -> (Size, Align) {\n         (self.size, self.align)\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "1734692f9e7589639024e77643f4278b40e70b97", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a131c518ad640ccd12711ccd63d8b98cafa55ee9/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a131c518ad640ccd12711ccd63d8b98cafa55ee9/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=a131c518ad640ccd12711ccd63d8b98cafa55ee9", "patch": "@@ -563,7 +563,9 @@ fn mk_main(cx: &mut TestCtxt) -> P<ast::Item> {\n     let main = ast::ItemKind::Fn(ecx.fn_decl(vec![], ast::FunctionRetTy::Ty(main_ret_ty)),\n                            ast::Unsafety::Normal,\n                            dummy_spanned(ast::Constness::NotConst),\n-                           ::rustc_target::spec::abi::Abi::Rust, ast::Generics::default(), main_body);\n+                           ::rustc_target::spec::abi::Abi::Rust,\n+                           ast::Generics::default(),\n+                           main_body);\n     P(ast::Item {\n         ident: Ident::from_str(\"main\"),\n         attrs: vec![main_attr],"}]}