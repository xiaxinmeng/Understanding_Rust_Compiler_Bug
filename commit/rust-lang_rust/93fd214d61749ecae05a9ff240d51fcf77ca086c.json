{"sha": "93fd214d61749ecae05a9ff240d51fcf77ca086c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZmQyMTRkNjE3NDllY2FlMDVhOWZmMjQwZDUxZmNmNzdjYTA4NmM=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-07-31T20:40:03Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-07-31T20:40:03Z"}, "message": "Clean up `resolve_trait_reference`.", "tree": {"sha": "96e93729e7da3f3bbde5a3298235500694c117d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96e93729e7da3f3bbde5a3298235500694c117d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93fd214d61749ecae05a9ff240d51fcf77ca086c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93fd214d61749ecae05a9ff240d51fcf77ca086c", "html_url": "https://github.com/rust-lang/rust/commit/93fd214d61749ecae05a9ff240d51fcf77ca086c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93fd214d61749ecae05a9ff240d51fcf77ca086c/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46bd5d3fa01a86925f7e7776a5567c536e6f2408", "url": "https://api.github.com/repos/rust-lang/rust/commits/46bd5d3fa01a86925f7e7776a5567c536e6f2408", "html_url": "https://github.com/rust-lang/rust/commit/46bd5d3fa01a86925f7e7776a5567c536e6f2408"}], "stats": {"total": 63, "additions": 31, "deletions": 32}, "files": [{"sha": "33e5282188c2826f34e6381f32b2815a122b087a", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 31, "deletions": 32, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/93fd214d61749ecae05a9ff240d51fcf77ca086c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93fd214d61749ecae05a9ff240d51fcf77ca086c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=93fd214d61749ecae05a9ff240d51fcf77ca086c", "patch": "@@ -1807,41 +1807,40 @@ impl<'a> Resolver<'a> {\n                                path_depth: usize)\n                                -> Result<PathResolution, ()> {\n         self.resolve_path(id, trait_path, path_depth, TypeNS).and_then(|path_res| {\n-            if let Def::Trait(_) = path_res.base_def {\n-                debug!(\"(resolving trait) found trait def: {:?}\", path_res);\n-                Ok(path_res)\n-            } else if path_res.base_def == Def::Err {\n-                Err(true)\n-            } else {\n-                let mut err =\n-                    resolve_struct_error(self,\n-                                  trait_path.span,\n-                                  ResolutionError::IsNotATrait(&path_names_to_string(trait_path,\n-                                                                                      path_depth)));\n-\n-                // If it's a typedef, give a note\n-                if let Def::TyAlias(..) = path_res.base_def {\n-                    let trait_name = trait_path.segments.last().unwrap().identifier.name;\n-                    err.span_label(trait_path.span,\n-                                   &format!(\"`{}` is not a trait\", trait_name));\n-\n-                    let definition_site = {\n-                        let segments = &trait_path.segments;\n-                        if trait_path.global {\n-                            self.resolve_crate_relative_path(trait_path.span, segments, TypeNS)\n-                        } else {\n-                            self.resolve_module_relative_path(trait_path.span, segments, TypeNS)\n-                        }.map(|binding| binding.span).unwrap_or(syntax_pos::DUMMY_SP)\n-                    };\n+            match path_res.base_def {\n+                Def::Trait(_) => {\n+                    debug!(\"(resolving trait) found trait def: {:?}\", path_res);\n+                    return Ok(path_res);\n+                }\n+                Def::Err => return Err(true),\n+                _ => {}\n+            }\n \n-                    if definition_site != syntax_pos::DUMMY_SP {\n-                        err.span_label(definition_site,\n-                                       &format!(\"type aliases cannot be used for traits\"));\n-                    }\n+            let mut err = resolve_struct_error(self, trait_path.span, {\n+                ResolutionError::IsNotATrait(&path_names_to_string(trait_path, path_depth))\n+            });\n+\n+            // If it's a typedef, give a note\n+            if let Def::TyAlias(..) = path_res.base_def {\n+                let trait_name = trait_path.segments.last().unwrap().identifier.name;\n+                err.span_label(trait_path.span, &format!(\"`{}` is not a trait\", trait_name));\n+\n+                let definition_site = {\n+                    let segments = &trait_path.segments;\n+                    if trait_path.global {\n+                        self.resolve_crate_relative_path(trait_path.span, segments, TypeNS)\n+                    } else {\n+                        self.resolve_module_relative_path(trait_path.span, segments, TypeNS)\n+                    }.map(|binding| binding.span).unwrap_or(syntax_pos::DUMMY_SP)\n+                };\n+\n+                if definition_site != syntax_pos::DUMMY_SP {\n+                    err.span_label(definition_site,\n+                                   &format!(\"type aliases cannot be used for traits\"));\n                 }\n-                err.emit();\n-                Err(true)\n             }\n+            err.emit();\n+            Err(true)\n         }).map_err(|error_reported| {\n             if error_reported { return }\n "}]}