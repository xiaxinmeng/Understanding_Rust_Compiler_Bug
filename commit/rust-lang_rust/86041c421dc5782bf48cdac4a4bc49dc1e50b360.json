{"sha": "86041c421dc5782bf48cdac4a4bc49dc1e50b360", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2MDQxYzQyMWRjNTc4MmJmNDhjZGFjNGE0YmM0OWRjMWU1MGIzNjA=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-28T01:03:00Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-28T01:03:13Z"}, "message": "De-export std::{dbg,sha1,md4,tempfile,term}. Part of #3583.", "tree": {"sha": "0bf390d975e8ee0fd20fda0590e09b7368ebec19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bf390d975e8ee0fd20fda0590e09b7368ebec19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86041c421dc5782bf48cdac4a4bc49dc1e50b360", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86041c421dc5782bf48cdac4a4bc49dc1e50b360", "html_url": "https://github.com/rust-lang/rust/commit/86041c421dc5782bf48cdac4a4bc49dc1e50b360", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86041c421dc5782bf48cdac4a4bc49dc1e50b360/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "438bdd687b8604090676422239f95e92149caddd", "url": "https://api.github.com/repos/rust-lang/rust/commits/438bdd687b8604090676422239f95e92149caddd", "html_url": "https://github.com/rust-lang/rust/commit/438bdd687b8604090676422239f95e92149caddd"}], "stats": {"total": 85, "additions": 36, "deletions": 49}, "files": [{"sha": "ac343053bed81d8d16c2d286bf7dfcaed22a886e", "filename": "src/libstd/dbg.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/86041c421dc5782bf48cdac4a4bc49dc1e50b360/src%2Flibstd%2Fdbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86041c421dc5782bf48cdac4a4bc49dc1e50b360/src%2Flibstd%2Fdbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdbg.rs?ref=86041c421dc5782bf48cdac4a4bc49dc1e50b360", "patch": "@@ -4,13 +4,6 @@\n \n use cast::reinterpret_cast;\n \n-export debug_tydesc;\n-export debug_opaque;\n-export debug_box;\n-export debug_tag;\n-export debug_fn;\n-export ptr_cast;\n-export breakpoint;\n \n #[abi = \"cdecl\"]\n extern mod rustrt {\n@@ -24,34 +17,34 @@ extern mod rustrt {\n     fn rust_dbg_breakpoint();\n }\n \n-fn debug_tydesc<T>() {\n+pub fn debug_tydesc<T>() {\n     rustrt::debug_tydesc(sys::get_type_desc::<T>());\n }\n \n-fn debug_opaque<T>(+x: T) {\n+pub fn debug_opaque<T>(+x: T) {\n     rustrt::debug_opaque(sys::get_type_desc::<T>(), ptr::addr_of(x) as *());\n }\n \n-fn debug_box<T>(x: @T) {\n+pub fn debug_box<T>(x: @T) {\n     rustrt::debug_box(sys::get_type_desc::<T>(), ptr::addr_of(x) as *());\n }\n \n-fn debug_tag<T>(+x: T) {\n+pub fn debug_tag<T>(+x: T) {\n     rustrt::debug_tag(sys::get_type_desc::<T>(), ptr::addr_of(x) as *());\n }\n \n-fn debug_fn<T>(+x: T) {\n+pub fn debug_fn<T>(+x: T) {\n     rustrt::debug_fn(sys::get_type_desc::<T>(), ptr::addr_of(x) as *());\n }\n \n-unsafe fn ptr_cast<T, U>(x: @T) -> @U {\n+pub unsafe fn ptr_cast<T, U>(x: @T) -> @U {\n     reinterpret_cast(\n         &rustrt::debug_ptrcast(sys::get_type_desc::<T>(),\n                               reinterpret_cast(&x)))\n }\n \n /// Triggers a debugger breakpoint\n-fn breakpoint() {\n+pub fn breakpoint() {\n     rustrt::rust_dbg_breakpoint();\n }\n "}, {"sha": "6de6ea8b16c7d2b149ea364d40f2018e6bd64249", "filename": "src/libstd/md4.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86041c421dc5782bf48cdac4a4bc49dc1e50b360/src%2Flibstd%2Fmd4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86041c421dc5782bf48cdac4a4bc49dc1e50b360/src%2Flibstd%2Fmd4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmd4.rs?ref=86041c421dc5782bf48cdac4a4bc49dc1e50b360", "patch": "@@ -1,7 +1,7 @@\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n-fn md4(msg: &[u8]) -> {a: u32, b: u32, c: u32, d: u32} {\n+pub fn md4(msg: &[u8]) -> {a: u32, b: u32, c: u32, d: u32} {\n     // subtle: if orig_len is merely uint, then the code below\n     // which performs shifts by 32 bits or more has undefined\n     // results.\n@@ -85,7 +85,7 @@ fn md4(msg: &[u8]) -> {a: u32, b: u32, c: u32, d: u32} {\n     return {a: a, b: b, c: c, d: d};\n }\n \n-fn md4_str(msg: &[u8]) -> ~str {\n+pub fn md4_str(msg: &[u8]) -> ~str {\n     let {a, b, c, d} = md4(msg);\n     fn app(a: u32, b: u32, c: u32, d: u32, f: fn(u32)) {\n         f(a); f(b); f(c); f(d);\n@@ -103,7 +103,7 @@ fn md4_str(msg: &[u8]) -> ~str {\n     result\n }\n \n-fn md4_text(msg: &str) -> ~str { md4_str(str::to_bytes(msg)) }\n+pub fn md4_text(msg: &str) -> ~str { md4_str(str::to_bytes(msg)) }\n \n #[test]\n fn test_md4() {"}, {"sha": "178bf2be7fe24cfd64c6a361aab80be439a75497", "filename": "src/libstd/sha1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86041c421dc5782bf48cdac4a4bc49dc1e50b360/src%2Flibstd%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86041c421dc5782bf48cdac4a4bc49dc1e50b360/src%2Flibstd%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsha1.rs?ref=86041c421dc5782bf48cdac4a4bc49dc1e50b360", "patch": "@@ -20,7 +20,6 @@\n  * implementation, which is written for clarity, not speed. At some\n  * point this will want to be rewritten.\n  */\n-export sha1;\n \n /// The SHA-1 interface\n trait Sha1 {\n@@ -53,7 +52,7 @@ const k3: u32 = 0xCA62C1D6u32;\n \n \n /// Construct a `sha` object\n-fn sha1() -> Sha1 {\n+pub fn sha1() -> Sha1 {\n     type Sha1State =\n         {h: ~[mut u32],\n          mut len_low: u32,"}, {"sha": "fba3f85ae5d460bb7fd9d536f087e8c318288b2c", "filename": "src/libstd/std.rc", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/86041c421dc5782bf48cdac4a4bc49dc1e50b360/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/86041c421dc5782bf48cdac4a4bc49dc1e50b360/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=86041c421dc5782bf48cdac4a4bc49dc1e50b360", "patch": "@@ -110,19 +110,14 @@ mod treemap;\n mod ebml;\n #[legacy_exports]\n mod ebml2;\n-#[legacy_exports]\n mod dbg;\n #[legacy_exports]\n mod getopts;\n #[legacy_exports]\n mod json;\n-#[legacy_exports]\n mod sha1;\n-#[legacy_exports]\n mod md4;\n-#[legacy_exports]\n mod tempfile;\n-#[legacy_exports]\n mod term;\n #[legacy_exports]\n mod time;"}, {"sha": "5c59bc02cb7b73faf40ce0edc70a5a359b1b2ba0", "filename": "src/libstd/tempfile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86041c421dc5782bf48cdac4a4bc49dc1e50b360/src%2Flibstd%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86041c421dc5782bf48cdac4a4bc49dc1e50b360/src%2Flibstd%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftempfile.rs?ref=86041c421dc5782bf48cdac4a4bc49dc1e50b360", "patch": "@@ -6,7 +6,7 @@\n use core::option;\n use option::{None, Some};\n \n-fn mkdtemp(tmpdir: &Path, suffix: &str) -> Option<Path> {\n+pub fn mkdtemp(tmpdir: &Path, suffix: &str) -> Option<Path> {\n     let r = rand::Rng();\n     let mut i = 0u;\n     while (i < 1000u) {"}, {"sha": "af7fde5a1742ff2ebac141c4e6c32e24e64b14eb", "filename": "src/libstd/term.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/86041c421dc5782bf48cdac4a4bc49dc1e50b360/src%2Flibstd%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86041c421dc5782bf48cdac4a4bc49dc1e50b360/src%2Flibstd%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fterm.rs?ref=86041c421dc5782bf48cdac4a4bc49dc1e50b360", "patch": "@@ -6,35 +6,35 @@ use core::Option;\n \n // FIXME (#2807): Windows support.\n \n-const color_black: u8 = 0u8;\n-const color_red: u8 = 1u8;\n-const color_green: u8 = 2u8;\n-const color_yellow: u8 = 3u8;\n-const color_blue: u8 = 4u8;\n-const color_magenta: u8 = 5u8;\n-const color_cyan: u8 = 6u8;\n-const color_light_gray: u8 = 7u8;\n-const color_light_grey: u8 = 7u8;\n-const color_dark_gray: u8 = 8u8;\n-const color_dark_grey: u8 = 8u8;\n-const color_bright_red: u8 = 9u8;\n-const color_bright_green: u8 = 10u8;\n-const color_bright_yellow: u8 = 11u8;\n-const color_bright_blue: u8 = 12u8;\n-const color_bright_magenta: u8 = 13u8;\n-const color_bright_cyan: u8 = 14u8;\n-const color_bright_white: u8 = 15u8;\n+pub const color_black: u8 = 0u8;\n+pub const color_red: u8 = 1u8;\n+pub const color_green: u8 = 2u8;\n+pub const color_yellow: u8 = 3u8;\n+pub const color_blue: u8 = 4u8;\n+pub const color_magenta: u8 = 5u8;\n+pub const color_cyan: u8 = 6u8;\n+pub const color_light_gray: u8 = 7u8;\n+pub const color_light_grey: u8 = 7u8;\n+pub const color_dark_gray: u8 = 8u8;\n+pub const color_dark_grey: u8 = 8u8;\n+pub const color_bright_red: u8 = 9u8;\n+pub const color_bright_green: u8 = 10u8;\n+pub const color_bright_yellow: u8 = 11u8;\n+pub const color_bright_blue: u8 = 12u8;\n+pub const color_bright_magenta: u8 = 13u8;\n+pub const color_bright_cyan: u8 = 14u8;\n+pub const color_bright_white: u8 = 15u8;\n \n-fn esc(writer: io::Writer) { writer.write(~[0x1bu8, '[' as u8]); }\n+pub fn esc(writer: io::Writer) { writer.write(~[0x1bu8, '[' as u8]); }\n \n /// Reset the foreground and background colors to default\n-fn reset(writer: io::Writer) {\n+pub fn reset(writer: io::Writer) {\n     esc(writer);\n     writer.write(~['0' as u8, 'm' as u8]);\n }\n \n /// Returns true if the terminal supports color\n-fn color_supported() -> bool {\n+pub fn color_supported() -> bool {\n     let supported_terms = ~[~\"xterm-color\", ~\"xterm\",\n                            ~\"screen-bce\", ~\"xterm-256color\"];\n     return match os::getenv(~\"TERM\") {\n@@ -48,7 +48,7 @@ fn color_supported() -> bool {\n         };\n }\n \n-fn set_color(writer: io::Writer, first_char: u8, color: u8) {\n+pub fn set_color(writer: io::Writer, first_char: u8, color: u8) {\n     assert (color < 16u8);\n     esc(writer);\n     let mut color = color;\n@@ -57,12 +57,12 @@ fn set_color(writer: io::Writer, first_char: u8, color: u8) {\n }\n \n /// Set the foreground color\n-fn fg(writer: io::Writer, color: u8) {\n+pub fn fg(writer: io::Writer, color: u8) {\n     return set_color(writer, '3' as u8, color);\n }\n \n /// Set the background color\n-fn bg(writer: io::Writer, color: u8) {\n+pub fn bg(writer: io::Writer, color: u8) {\n     return set_color(writer, '4' as u8, color);\n }\n "}]}