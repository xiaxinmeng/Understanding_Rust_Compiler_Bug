{"sha": "e901b24310d05dedd8d5f6d20285fd91a6d86714", "node_id": "C_kwDOAAsO6NoAKGU5MDFiMjQzMTBkMDVkZWRkOGQ1ZjZkMjAyODVmZDkxYTZkODY3MTQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-20T22:37:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-20T22:37:38Z"}, "message": "Rollup merge of #93098 - Aaron1011:def-path-hash-debug, r=oli-obk\n\nShow a more informative panic message when `DefPathHash` does not exist\n\nThis should hopefully make it easier to debug incremental compilation\nbugs like #93096 without affecting performance.", "tree": {"sha": "374c6a78c844e0408d6834df8683d6dec570b01b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/374c6a78c844e0408d6834df8683d6dec570b01b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e901b24310d05dedd8d5f6d20285fd91a6d86714", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh6eQzCRBK7hj4Ov3rIwAAUVEIABivC3S3j5wgDNZkKMCM7cyc\nw/ptWQ/VdNFOk9TSWpZs4hjcmw9OHHU7GguhwsVY5bHj1SSB3CYWPRuu+Zz+TJAx\nac0TyLYJ3+6Jc5sQ22EkVX7J8UXqn2yI0EEIF7XqJUtuapObreiJNMkmWB12j7oc\nPbSSUMw/xO29w5c9o/i8YS4rTSDOAVPcaxmKfIOZ7Iyi7HdMTOu5kM1L8Dj1mmZW\nI6jRSnPSimG6DnoEqA44r//OedrCW4YMXcVCua4oAd4Ptq/Wj0JQWl0WyM8oDEf7\n2pdDjQluNku8zxgA1nxBlx+0jtX6KnmsCORA3XtrMyYF6SBSfjHN/Ftc5f2wXRs=\n=oNcw\n-----END PGP SIGNATURE-----\n", "payload": "tree 374c6a78c844e0408d6834df8683d6dec570b01b\nparent 6cdd2e510c4d8aefa4a31ca21e8092da2768d894\nparent 70d36a05bc79667578a3c7b2b4926e21a9a5d013\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642718258 +0100\ncommitter GitHub <noreply@github.com> 1642718258 +0100\n\nRollup merge of #93098 - Aaron1011:def-path-hash-debug, r=oli-obk\n\nShow a more informative panic message when `DefPathHash` does not exist\n\nThis should hopefully make it easier to debug incremental compilation\nbugs like #93096 without affecting performance.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e901b24310d05dedd8d5f6d20285fd91a6d86714", "html_url": "https://github.com/rust-lang/rust/commit/e901b24310d05dedd8d5f6d20285fd91a6d86714", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e901b24310d05dedd8d5f6d20285fd91a6d86714/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cdd2e510c4d8aefa4a31ca21e8092da2768d894", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cdd2e510c4d8aefa4a31ca21e8092da2768d894", "html_url": "https://github.com/rust-lang/rust/commit/6cdd2e510c4d8aefa4a31ca21e8092da2768d894"}, {"sha": "70d36a05bc79667578a3c7b2b4926e21a9a5d013", "url": "https://api.github.com/repos/rust-lang/rust/commits/70d36a05bc79667578a3c7b2b4926e21a9a5d013", "html_url": "https://github.com/rust-lang/rust/commit/70d36a05bc79667578a3c7b2b4926e21a9a5d013"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "e839f7fc7779a6763ff53369a87c2747f2076d7f", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e901b24310d05dedd8d5f6d20285fd91a6d86714/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e901b24310d05dedd8d5f6d20285fd91a6d86714/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=e901b24310d05dedd8d5f6d20285fd91a6d86714", "patch": "@@ -449,13 +449,17 @@ impl Definitions {\n     }\n \n     #[inline(always)]\n-    pub fn local_def_path_hash_to_def_id(&self, hash: DefPathHash) -> LocalDefId {\n+    pub fn local_def_path_hash_to_def_id(\n+        &self,\n+        hash: DefPathHash,\n+        err: &mut dyn FnMut() -> !,\n+    ) -> LocalDefId {\n         debug_assert!(hash.stable_crate_id() == self.stable_crate_id);\n         self.table\n             .def_path_hash_to_index\n             .get(&hash)\n             .map(|local_def_index| LocalDefId { local_def_index })\n-            .unwrap()\n+            .unwrap_or_else(|| err())\n     }\n \n     pub fn def_path_hash_to_def_index_map(&self) -> &DefPathHashMap {"}, {"sha": "d20be0a34d2d5f525f456c9c604d3426678e8d2f", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e901b24310d05dedd8d5f6d20285fd91a6d86714/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e901b24310d05dedd8d5f6d20285fd91a6d86714/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=e901b24310d05dedd8d5f6d20285fd91a6d86714", "patch": "@@ -266,7 +266,9 @@ impl DepNodeExt for DepNode {\n     /// has been removed.\n     fn extract_def_id<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Option<DefId> {\n         if self.kind.fingerprint_style(tcx) == FingerprintStyle::DefPathHash {\n-            Some(tcx.def_path_hash_to_def_id(DefPathHash(self.hash.into())))\n+            Some(tcx.def_path_hash_to_def_id(DefPathHash(self.hash.into()), &mut || {\n+                panic!(\"Failed to extract DefId: {:?} {}\", self.kind, self.hash)\n+            }))\n         } else {\n             None\n         }"}, {"sha": "b493ff16203801bf6fbd3496b384f7af9230600b", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e901b24310d05dedd8d5f6d20285fd91a6d86714/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e901b24310d05dedd8d5f6d20285fd91a6d86714/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=e901b24310d05dedd8d5f6d20285fd91a6d86714", "patch": "@@ -1308,15 +1308,18 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Converts a `DefPathHash` to its corresponding `DefId` in the current compilation\n     /// session, if it still exists. This is used during incremental compilation to\n     /// turn a deserialized `DefPathHash` into its current `DefId`.\n-    pub fn def_path_hash_to_def_id(self, hash: DefPathHash) -> DefId {\n+    pub fn def_path_hash_to_def_id(self, hash: DefPathHash, err: &mut dyn FnMut() -> !) -> DefId {\n         debug!(\"def_path_hash_to_def_id({:?})\", hash);\n \n         let stable_crate_id = hash.stable_crate_id();\n \n         // If this is a DefPathHash from the local crate, we can look up the\n         // DefId in the tcx's `Definitions`.\n         if stable_crate_id == self.sess.local_stable_crate_id() {\n-            self.untracked_resolutions.definitions.local_def_path_hash_to_def_id(hash).to_def_id()\n+            self.untracked_resolutions\n+                .definitions\n+                .local_def_path_hash_to_def_id(hash, err)\n+                .to_def_id()\n         } else {\n             // If this is a DefPathHash from an upstream crate, let the CrateStore map\n             // it to a DefId."}, {"sha": "5f6d9b050b2e54442546faf071c2177b316469dd", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e901b24310d05dedd8d5f6d20285fd91a6d86714/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e901b24310d05dedd8d5f6d20285fd91a6d86714/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=e901b24310d05dedd8d5f6d20285fd91a6d86714", "patch": "@@ -761,7 +761,9 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for DefId {\n         // If we get to this point, then all of the query inputs were green,\n         // which means that the definition with this hash is guaranteed to\n         // still exist in the current compilation session.\n-        Ok(d.tcx().def_path_hash_to_def_id(def_path_hash))\n+        Ok(d.tcx().def_path_hash_to_def_id(def_path_hash, &mut || {\n+            panic!(\"Failed to convert DefPathHash {:?}\", def_path_hash)\n+        }))\n     }\n }\n "}]}