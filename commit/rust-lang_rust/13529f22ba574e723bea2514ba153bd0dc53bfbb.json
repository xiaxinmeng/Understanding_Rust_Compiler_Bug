{"sha": "13529f22ba574e723bea2514ba153bd0dc53bfbb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNTI5ZjIyYmE1NzRlNzIzYmVhMjUxNGJhMTUzYmQwZGM1M2JmYmI=", "commit": {"author": {"name": "Naz\u0131m Can Alt\u0131nova", "email": "canaltinova@gmail.com", "date": "2020-08-04T20:01:12Z"}, "committer": {"name": "Naz\u0131m Can Alt\u0131nova", "email": "canaltinova@gmail.com", "date": "2020-08-07T11:13:41Z"}, "message": "Add `into_{keys,values}` methods for BTreeMap", "tree": {"sha": "32908c434381f183d111e9f977e5e2044496e879", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32908c434381f183d111e9f977e5e2044496e879"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13529f22ba574e723bea2514ba153bd0dc53bfbb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEpYetfNnk4ATM3f2Aci54bwcpZHoFAl8tN2UACgkQci54bwcp\nZHoRxxAA5A0y1bZYudZGdJP5tLrMvHPDvVSsBFFryzpYpdW3LNbu3vkhWtjryICp\nPzwRBCw29zJO8/M2J9jbXcHIuGR5JmGulbnkeTYYWtsOQtuyY3ohEnCVEhl/jX+k\ne3qw2RTx/1sEoN1UchvXk7ilDSvJMgwxsd/ygr4jNSC4PUH6dIxctjbPP2fvmHLR\nx02r9rhlAnye9AII4crO0tjcwT38KAB05XPJDaidgjRt4oobM4RdTIy5XzXs5olH\nro9Xl7Nd2ncWOuh044urj5reRKlGoYButNQaXFFgh5vSoEd8xHh5Lmyg1EcsCsRm\n66yGWGsefWMLH+KwzCizaC7d2DFyD2m6GBeTSocshUhIUhv1VaF1bekzZPiclYIt\nBrUTE1bFPY+ShrAhW9CI0mxosfCWajF1cmaQm0QOgPH9iMigni5Ucj7HyephZVsr\n9wCfbPexurtvNinbwDlELoaWE8MSo4xU4sQBSSBykIbd85fyATNCvUqubBq+xSmw\nxACz2aieZdtKa6XYyotwypVECtuJ9/Fmrj9mIpMEvjsK9UHkAnitGu7s4Etf7C1k\nnLlrEbgzO/M74gad5KnRtufdisH5LQBONoecTL0gl5uWSFm3phwIZChiPxeYj8DP\ny/Y2Yzt3sqENRSo++JJF16FdKYp6oJU/0JNLztVfCnq4lsXcgsI=\n=jDij\n-----END PGP SIGNATURE-----", "payload": "tree 32908c434381f183d111e9f977e5e2044496e879\nparent e31116af50f35ff81f83561ba607c610f42bbf4a\nauthor Naz\u0131m Can Alt\u0131nova <canaltinova@gmail.com> 1596571272 +0200\ncommitter Naz\u0131m Can Alt\u0131nova <canaltinova@gmail.com> 1596798821 +0200\n\nAdd `into_{keys,values}` methods for BTreeMap\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13529f22ba574e723bea2514ba153bd0dc53bfbb", "html_url": "https://github.com/rust-lang/rust/commit/13529f22ba574e723bea2514ba153bd0dc53bfbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13529f22ba574e723bea2514ba153bd0dc53bfbb/comments", "author": {"login": "canova", "id": 466239, "node_id": "MDQ6VXNlcjQ2NjIzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/466239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canova", "html_url": "https://github.com/canova", "followers_url": "https://api.github.com/users/canova/followers", "following_url": "https://api.github.com/users/canova/following{/other_user}", "gists_url": "https://api.github.com/users/canova/gists{/gist_id}", "starred_url": "https://api.github.com/users/canova/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canova/subscriptions", "organizations_url": "https://api.github.com/users/canova/orgs", "repos_url": "https://api.github.com/users/canova/repos", "events_url": "https://api.github.com/users/canova/events{/privacy}", "received_events_url": "https://api.github.com/users/canova/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canova", "id": 466239, "node_id": "MDQ6VXNlcjQ2NjIzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/466239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canova", "html_url": "https://github.com/canova", "followers_url": "https://api.github.com/users/canova/followers", "following_url": "https://api.github.com/users/canova/following{/other_user}", "gists_url": "https://api.github.com/users/canova/gists{/gist_id}", "starred_url": "https://api.github.com/users/canova/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canova/subscriptions", "organizations_url": "https://api.github.com/users/canova/orgs", "repos_url": "https://api.github.com/users/canova/repos", "events_url": "https://api.github.com/users/canova/events{/privacy}", "received_events_url": "https://api.github.com/users/canova/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e31116af50f35ff81f83561ba607c610f42bbf4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e31116af50f35ff81f83561ba607c610f42bbf4a", "html_url": "https://github.com/rust-lang/rust/commit/e31116af50f35ff81f83561ba607c610f42bbf4a"}], "stats": {"total": 156, "additions": 156, "deletions": 0}, "files": [{"sha": "3e7433dfbcfa47bc09a0cdeb9a0938d1072cec30", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/13529f22ba574e723bea2514ba153bd0dc53bfbb/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13529f22ba574e723bea2514ba153bd0dc53bfbb/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=13529f22ba574e723bea2514ba153bd0dc53bfbb", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-filelength\n+\n use core::borrow::Borrow;\n use core::cmp::Ordering;\n use core::fmt::Debug;\n@@ -355,6 +357,30 @@ pub struct ValuesMut<'a, K: 'a, V: 'a> {\n     inner: IterMut<'a, K, V>,\n }\n \n+/// An owning iterator over the keys of a `BTreeMap`.\n+///\n+/// This `struct` is created by the [`into_keys`] method on [`BTreeMap`].\n+/// See its documentation for more.\n+///\n+/// [`into_keys`]: BTreeMap::into_keys\n+#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+#[derive(Debug)]\n+pub struct IntoKeys<K, V> {\n+    inner: IntoIter<K, V>,\n+}\n+\n+/// An owning iterator over the values of a `BTreeMap`.\n+///\n+/// This `struct` is created by the [`into_values`] method on [`BTreeMap`].\n+/// See its documentation for more.\n+///\n+/// [`into_values`]: BTreeMap::into_values\n+#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+#[derive(Debug)]\n+pub struct IntoValues<K, V> {\n+    inner: IntoIter<K, V>,\n+}\n+\n /// An iterator over a sub-range of entries in a `BTreeMap`.\n ///\n /// This `struct` is created by the [`range`] method on [`BTreeMap`]. See its\n@@ -1291,6 +1317,52 @@ impl<K: Ord, V> BTreeMap<K, V> {\n \n         self.length = dfs(self.root.as_ref().unwrap().as_ref());\n     }\n+\n+    /// Creates a consuming iterator visiting all the keys, in sorted order.\n+    /// The map cannot be used after calling this.\n+    /// The iterator element type is `K`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(map_into_keys_values)]\n+    /// use std::collections::BTreeMap;\n+    ///\n+    /// let mut a = BTreeMap::new();\n+    /// a.insert(2, \"b\");\n+    /// a.insert(1, \"a\");\n+    ///\n+    /// let keys: Vec<i32> = a.into_keys().collect();\n+    /// assert_eq!(keys, [1, 2]);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+    pub fn into_keys(self) -> IntoKeys<K, V> {\n+        IntoKeys { inner: self.into_iter() }\n+    }\n+\n+    /// Creates a consuming iterator visiting all the values, in sorted order.\n+    /// The map cannot be used after calling this.\n+    /// The iterator element type is `V`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(map_into_keys_values)]\n+    /// use std::collections::BTreeMap;\n+    ///\n+    /// let mut a = BTreeMap::new();\n+    /// a.insert(1, \"hello\");\n+    /// a.insert(2, \"goodbye\");\n+    ///\n+    /// let values: Vec<&str> = a.into_values().collect();\n+    /// assert_eq!(values, [\"hello\", \"goodbye\"]);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+    pub fn into_values(self) -> IntoValues<K, V> {\n+        IntoValues { inner: self.into_iter() }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1781,6 +1853,90 @@ impl<'a, K, V> Range<'a, K, V> {\n     }\n }\n \n+#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+impl<K, V> Iterator for IntoKeys<K, V> {\n+    type Item = K;\n+\n+    fn next(&mut self) -> Option<K> {\n+        self.inner.next().map(|(k, _)| k)\n+    }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.inner.size_hint()\n+    }\n+\n+    fn last(mut self) -> Option<K> {\n+        self.next_back()\n+    }\n+\n+    fn min(mut self) -> Option<K> {\n+        self.next()\n+    }\n+\n+    fn max(mut self) -> Option<K> {\n+        self.next_back()\n+    }\n+}\n+\n+#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+impl<K, V> DoubleEndedIterator for IntoKeys<K, V> {\n+    fn next_back(&mut self) -> Option<K> {\n+        self.inner.next_back().map(|(k, _)| k)\n+    }\n+}\n+\n+#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+impl<K, V> ExactSizeIterator for IntoKeys<K, V> {\n+    fn len(&self) -> usize {\n+        self.inner.len()\n+    }\n+}\n+\n+#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+impl<K, V> FusedIterator for IntoKeys<K, V> {}\n+\n+#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+impl<K, V> Iterator for IntoValues<K, V> {\n+    type Item = V;\n+\n+    fn next(&mut self) -> Option<V> {\n+        self.inner.next().map(|(_, v)| v)\n+    }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.inner.size_hint()\n+    }\n+\n+    fn last(mut self) -> Option<V> {\n+        self.next_back()\n+    }\n+\n+    fn min(mut self) -> Option<V> {\n+        self.next()\n+    }\n+\n+    fn max(mut self) -> Option<V> {\n+        self.next_back()\n+    }\n+}\n+\n+#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+impl<K, V> DoubleEndedIterator for IntoValues<K, V> {\n+    fn next_back(&mut self) -> Option<V> {\n+        self.inner.next_back().map(|(_, v)| v)\n+    }\n+}\n+\n+#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+impl<K, V> ExactSizeIterator for IntoValues<K, V> {\n+    fn len(&self) -> usize {\n+        self.inner.len()\n+    }\n+}\n+\n+#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+impl<K, V> FusedIterator for IntoValues<K, V> {}\n+\n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n impl<'a, K, V> DoubleEndedIterator for Range<'a, K, V> {\n     fn next_back(&mut self) -> Option<(&'a K, &'a V)> {"}]}