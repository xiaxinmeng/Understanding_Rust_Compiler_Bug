{"sha": "ee95a35664e6fe9153f6324cfc57872ca365887c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlOTVhMzU2NjRlNmZlOTE1M2Y2MzI0Y2ZjNTc4NzJjYTM2NTg4N2M=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-20T14:49:57Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-20T14:50:02Z"}, "message": "Don't duplicate ContainerId type", "tree": {"sha": "3f13501f0e73fee374a0df05fb55614311559f15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f13501f0e73fee374a0df05fb55614311559f15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee95a35664e6fe9153f6324cfc57872ca365887c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee95a35664e6fe9153f6324cfc57872ca365887c", "html_url": "https://github.com/rust-lang/rust/commit/ee95a35664e6fe9153f6324cfc57872ca365887c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee95a35664e6fe9153f6324cfc57872ca365887c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64c21ed19594b323e72605ba8c5dd4c6eee433f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/64c21ed19594b323e72605ba8c5dd4c6eee433f6", "html_url": "https://github.com/rust-lang/rust/commit/64c21ed19594b323e72605ba8c5dd4c6eee433f6"}], "stats": {"total": 77, "additions": 35, "deletions": 42}, "files": [{"sha": "6696669897ea5e9475eefed55413b7142435b2db", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ee95a35664e6fe9153f6324cfc57872ca365887c/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee95a35664e6fe9153f6324cfc57872ca365887c/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=ee95a35664e6fe9153f6324cfc57872ca365887c", "patch": "@@ -12,8 +12,8 @@ use hir_def::{\n     builtin_type::BuiltinType,\n     traits::TraitData,\n     type_ref::{Mutability, TypeRef},\n-    AssocItemId, CrateModuleId, FunctionContainerId, HasModule, ImplId, LocalEnumVariantId,\n-    LocalStructFieldId, Lookup, ModuleId, TypeAliasContainerId, UnionId,\n+    AssocItemId, ContainerId, CrateModuleId, HasModule, ImplId, LocalEnumVariantId,\n+    LocalStructFieldId, Lookup, ModuleId, UnionId,\n };\n use hir_expand::{\n     diagnostics::DiagnosticSink,\n@@ -697,9 +697,9 @@ impl Function {\n \n     pub fn container(self, db: &impl DefDatabase) -> Option<Container> {\n         match self.id.lookup(db).container {\n-            FunctionContainerId::TraitId(it) => Some(Container::Trait(it.into())),\n-            FunctionContainerId::ImplId(it) => Some(Container::ImplBlock(it.into())),\n-            FunctionContainerId::ModuleId(_) => None,\n+            ContainerId::TraitId(it) => Some(Container::Trait(it.into())),\n+            ContainerId::ImplId(it) => Some(Container::ImplBlock(it.into())),\n+            ContainerId::ModuleId(_) => None,\n         }\n     }\n \n@@ -979,9 +979,9 @@ impl TypeAlias {\n \n     pub fn container(self, db: &impl DefDatabase) -> Option<Container> {\n         match self.id.lookup(db).container {\n-            TypeAliasContainerId::TraitId(it) => Some(Container::Trait(it.into())),\n-            TypeAliasContainerId::ImplId(it) => Some(Container::ImplBlock(it.into())),\n-            TypeAliasContainerId::ModuleId(_) => None,\n+            ContainerId::TraitId(it) => Some(Container::Trait(it.into())),\n+            ContainerId::ImplId(it) => Some(Container::ImplBlock(it.into())),\n+            ContainerId::ModuleId(_) => None,\n         }\n     }\n "}, {"sha": "574086ac72c7b15f1ab0a224ca9e6d7b13ae29f3", "filename": "crates/ra_hir_def/src/impls.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee95a35664e6fe9153f6324cfc57872ca365887c/crates%2Fra_hir_def%2Fsrc%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee95a35664e6fe9153f6324cfc57872ca365887c/crates%2Fra_hir_def%2Fsrc%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fimpls.rs?ref=ee95a35664e6fe9153f6324cfc57872ca365887c", "patch": "@@ -9,8 +9,8 @@ use hir_expand::AstId;\n use ra_syntax::ast;\n \n use crate::{\n-    db::DefDatabase2, type_ref::TypeRef, AssocItemId, AstItemDef, ConstId, FunctionContainerId,\n-    FunctionLoc, ImplId, Intern, LocationCtx, TypeAliasContainerId, TypeAliasLoc,\n+    db::DefDatabase2, type_ref::TypeRef, AssocItemId, AstItemDef, ConstId, ContainerId,\n+    FunctionLoc, ImplId, Intern, LocationCtx, TypeAliasLoc,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -37,7 +37,7 @@ impl ImplData {\n                 .map(|item_node| match item_node {\n                     ast::ImplItem::FnDef(it) => {\n                         let def = FunctionLoc {\n-                            container: FunctionContainerId::ImplId(id),\n+                            container: ContainerId::ImplId(id),\n                             ast_id: AstId::new(src.file_id, items.ast_id(&it)),\n                         }\n                         .intern(db);\n@@ -48,7 +48,7 @@ impl ImplData {\n                     }\n                     ast::ImplItem::TypeAliasDef(it) => {\n                         let def = TypeAliasLoc {\n-                            container: TypeAliasContainerId::ImplId(id),\n+                            container: ContainerId::ImplId(id),\n                             ast_id: AstId::new(src.file_id, items.ast_id(&it)),\n                         }\n                         .intern(db);"}, {"sha": "da6506fcd166d61d5a3a93228638d86883b6aba1", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 15, "deletions": 22, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ee95a35664e6fe9153f6324cfc57872ca365887c/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee95a35664e6fe9153f6324cfc57872ca365887c/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=ee95a35664e6fe9153f6324cfc57872ca365887c", "patch": "@@ -201,7 +201,7 @@ impl_intern_key!(FunctionId);\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct FunctionLoc {\n-    pub container: FunctionContainerId,\n+    pub container: ContainerId,\n     pub ast_id: AstId<ast::FnDef>,\n }\n \n@@ -219,13 +219,6 @@ impl Lookup for FunctionId {\n     }\n }\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub enum FunctionContainerId {\n-    ModuleId(ModuleId),\n-    ImplId(ImplId),\n-    TraitId(TraitId),\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct StructOrUnionId(salsa::InternId);\n impl_intern_key!(StructOrUnionId);\n@@ -335,7 +328,7 @@ impl_intern_key!(TypeAliasId);\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TypeAliasLoc {\n-    pub container: TypeAliasContainerId,\n+    pub container: ContainerId,\n     pub ast_id: AstId<ast::TypeAliasDef>,\n }\n \n@@ -353,13 +346,6 @@ impl Lookup for TypeAliasId {\n     }\n }\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub enum TypeAliasContainerId {\n-    ModuleId(ModuleId),\n-    ImplId(ImplId),\n-    TraitId(TraitId),\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct ImplId(salsa::InternId);\n impl_intern_key!(ImplId);\n@@ -391,6 +377,13 @@ macro_rules! impl_froms {\n     }\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub enum ContainerId {\n+    ModuleId(ModuleId),\n+    ImplId(ImplId),\n+    TraitId(TraitId),\n+}\n+\n /// A Data Type\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub enum AdtId {\n@@ -488,19 +481,19 @@ pub trait HasModule {\n impl HasModule for FunctionLoc {\n     fn module(&self, db: &impl db::DefDatabase2) -> ModuleId {\n         match self.container {\n-            FunctionContainerId::ModuleId(it) => it,\n-            FunctionContainerId::ImplId(it) => it.module(db),\n-            FunctionContainerId::TraitId(it) => it.module(db),\n+            ContainerId::ModuleId(it) => it,\n+            ContainerId::ImplId(it) => it.module(db),\n+            ContainerId::TraitId(it) => it.module(db),\n         }\n     }\n }\n \n impl HasModule for TypeAliasLoc {\n     fn module(&self, db: &impl db::DefDatabase2) -> ModuleId {\n         match self.container {\n-            TypeAliasContainerId::ModuleId(it) => it,\n-            TypeAliasContainerId::ImplId(it) => it.module(db),\n-            TypeAliasContainerId::TraitId(it) => it.module(db),\n+            ContainerId::ModuleId(it) => it,\n+            ContainerId::ImplId(it) => it.module(db),\n+            ContainerId::TraitId(it) => it.module(db),\n         }\n     }\n }"}, {"sha": "71e01279d73be1c2c45921316a33b2aac473a1f8", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee95a35664e6fe9153f6324cfc57872ca365887c/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee95a35664e6fe9153f6324cfc57872ca365887c/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=ee95a35664e6fe9153f6324cfc57872ca365887c", "patch": "@@ -19,9 +19,9 @@ use crate::{\n         per_ns::PerNs, raw, CrateDefMap, ModuleData, Resolution, ResolveMode,\n     },\n     path::{Path, PathKind},\n-    AdtId, AstId, AstItemDef, ConstId, CrateModuleId, EnumId, EnumVariantId, FunctionContainerId,\n+    AdtId, AstId, AstItemDef, ConstId, ContainerId, CrateModuleId, EnumId, EnumVariantId,\n     FunctionLoc, ImplId, Intern, LocationCtx, ModuleDefId, ModuleId, StaticId, StructId,\n-    StructOrUnionId, TraitId, TypeAliasContainerId, TypeAliasLoc, UnionId,\n+    StructOrUnionId, TraitId, TypeAliasLoc, UnionId,\n };\n \n pub(super) fn collect_defs(db: &impl DefDatabase2, mut def_map: CrateDefMap) -> CrateDefMap {\n@@ -674,7 +674,7 @@ where\n         let def: PerNs = match def.kind {\n             raw::DefKind::Function(ast_id) => {\n                 let def = FunctionLoc {\n-                    container: FunctionContainerId::ModuleId(module),\n+                    container: ContainerId::ModuleId(module),\n                     ast_id: AstId::new(self.file_id, ast_id),\n                 }\n                 .intern(self.def_collector.db);\n@@ -699,7 +699,7 @@ where\n             raw::DefKind::Trait(ast_id) => PerNs::types(TraitId::from_ast_id(ctx, ast_id).into()),\n             raw::DefKind::TypeAlias(ast_id) => {\n                 let def = TypeAliasLoc {\n-                    container: TypeAliasContainerId::ModuleId(module),\n+                    container: ContainerId::ModuleId(module),\n                     ast_id: AstId::new(self.file_id, ast_id),\n                 }\n                 .intern(self.def_collector.db);"}, {"sha": "bb61e852a8c6fe81d9d189d1f14dfdd8486bd9cc", "filename": "crates/ra_hir_def/src/traits.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee95a35664e6fe9153f6324cfc57872ca365887c/crates%2Fra_hir_def%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee95a35664e6fe9153f6324cfc57872ca365887c/crates%2Fra_hir_def%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftraits.rs?ref=ee95a35664e6fe9153f6324cfc57872ca365887c", "patch": "@@ -11,8 +11,8 @@ use ra_syntax::ast::{self, NameOwner};\n use rustc_hash::FxHashMap;\n \n use crate::{\n-    db::DefDatabase2, AssocItemId, AstItemDef, ConstId, FunctionContainerId, FunctionLoc, Intern,\n-    LocationCtx, ModuleDefId, ModuleId, TraitId, TypeAliasContainerId, TypeAliasLoc,\n+    db::DefDatabase2, AssocItemId, AstItemDef, ConstId, ContainerId, FunctionLoc, Intern,\n+    LocationCtx, ModuleDefId, ModuleId, TraitId, TypeAliasLoc,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -35,14 +35,14 @@ impl TraitData {\n                 .impl_items()\n                 .map(|item_node| match item_node {\n                     ast::ImplItem::FnDef(it) => FunctionLoc {\n-                        container: FunctionContainerId::TraitId(tr),\n+                        container: ContainerId::TraitId(tr),\n                         ast_id: AstId::new(src.file_id, ast_id_map.ast_id(&it)),\n                     }\n                     .intern(db)\n                     .into(),\n                     ast::ImplItem::ConstDef(it) => ConstId::from_ast(ctx, &it).into(),\n                     ast::ImplItem::TypeAliasDef(it) => TypeAliasLoc {\n-                        container: TypeAliasContainerId::TraitId(tr),\n+                        container: ContainerId::TraitId(tr),\n                         ast_id: AstId::new(src.file_id, ast_id_map.ast_id(&it)),\n                     }\n                     .intern(db)"}]}