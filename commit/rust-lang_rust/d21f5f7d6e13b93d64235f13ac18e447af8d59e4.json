{"sha": "d21f5f7d6e13b93d64235f13ac18e447af8d59e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMWY1ZjdkNmUxM2I5M2Q2NDIzNWYxM2FjMThlNDQ3YWY4ZDU5ZTQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-17T10:27:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-17T10:27:28Z"}, "message": "Merge #6911\n\n6911: decl_check: don't pass `db` around so often r=matklad a=jonas-schievink\n\nInstead, store it in the `DeclValidator`.\r\n\r\nAlso pass the `CrateId` that defines the checked item along. This is not yet needed, but will be once I've refactored `Attrs` to handle `cfg_attr` internally.\r\n\r\nWe could also try to extract the crate from the \"owner\" `ModuleDefId` instead of passing it in, but then it might not be present for builtin types. Open to suggestions.\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "06403ae68423f829e545b86835a96b4173c49519", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06403ae68423f829e545b86835a96b4173c49519"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d21f5f7d6e13b93d64235f13ac18e447af8d59e4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf2zKQCRBK7hj4Ov3rIwAAdHIIADySpV3MQa62iZL0p/VucIsw\nB2o28nozb0EL2KUKuteUV9YEWgMkwxic3lFbS3ozCc5gOF/g4cH7cGwhwjr0z8ma\nQJi2Lfgfvb6+qJlJoRI3FmvtcS/RjmbLZ5X7csWHWClFiX4X2dywU9JPsVCmNT3y\noe9fb8Znu4nwQvKdIg9PFLB/Teue10H8nJ3Y/40Ikcjm7xcv4NoT7Gau2nRpGdMs\nV5i3k2AE7j2p6D2+ZVLnKgna6jOFZRh9cHrqE8gMhlTQKmUJBQFfW2wPTjcvfuPg\nMnaZSI0/Swg1qt3aolsnvL09n03hWG1wcOmq3F7XICsvchwOshj6/pord1Yalbo=\n=2Kc6\n-----END PGP SIGNATURE-----\n", "payload": "tree 06403ae68423f829e545b86835a96b4173c49519\nparent 554dd215c729c3598ceb014f61d9d295d554036a\nparent 6615fda695dfe6cb2c6792eed5d472b43ac63423\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1608200848 +0000\ncommitter GitHub <noreply@github.com> 1608200848 +0000\n\nMerge #6911\n\n6911: decl_check: don't pass `db` around so often r=matklad a=jonas-schievink\n\nInstead, store it in the `DeclValidator`.\r\n\r\nAlso pass the `CrateId` that defines the checked item along. This is not yet needed, but will be once I've refactored `Attrs` to handle `cfg_attr` internally.\r\n\r\nWe could also try to extract the crate from the \"owner\" `ModuleDefId` instead of passing it in, but then it might not be present for builtin types. Open to suggestions.\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d21f5f7d6e13b93d64235f13ac18e447af8d59e4", "html_url": "https://github.com/rust-lang/rust/commit/d21f5f7d6e13b93d64235f13ac18e447af8d59e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d21f5f7d6e13b93d64235f13ac18e447af8d59e4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "554dd215c729c3598ceb014f61d9d295d554036a", "url": "https://api.github.com/repos/rust-lang/rust/commits/554dd215c729c3598ceb014f61d9d295d554036a", "html_url": "https://github.com/rust-lang/rust/commit/554dd215c729c3598ceb014f61d9d295d554036a"}, {"sha": "6615fda695dfe6cb2c6792eed5d472b43ac63423", "url": "https://api.github.com/repos/rust-lang/rust/commits/6615fda695dfe6cb2c6792eed5d472b43ac63423", "html_url": "https://github.com/rust-lang/rust/commit/6615fda695dfe6cb2c6792eed5d472b43ac63423"}], "stats": {"total": 128, "additions": 68, "deletions": 60}, "files": [{"sha": "b1a1bc3374e1afb5de4e935683757a1eb9d86522", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d21f5f7d6e13b93d64235f13ac18e447af8d59e4/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21f5f7d6e13b93d64235f13ac18e447af8d59e4/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=d21f5f7d6e13b93d64235f13ac18e447af8d59e4", "patch": "@@ -267,7 +267,12 @@ impl ModuleDef {\n             _ => return,\n         };\n \n-        hir_ty::diagnostics::validate_module_item(db, id, sink)\n+        let module = match self.module(db) {\n+            Some(it) => it,\n+            None => return,\n+        };\n+\n+        hir_ty::diagnostics::validate_module_item(db, module.id.krate, id, sink)\n     }\n }\n \n@@ -780,8 +785,9 @@ impl Function {\n     }\n \n     pub fn diagnostics(self, db: &dyn HirDatabase, sink: &mut DiagnosticSink) {\n+        let krate = self.module(db).id.krate;\n         hir_def::diagnostics::validate_body(db.upcast(), self.id.into(), sink);\n-        hir_ty::diagnostics::validate_module_item(db, self.id.into(), sink);\n+        hir_ty::diagnostics::validate_module_item(db, krate, self.id.into(), sink);\n         hir_ty::diagnostics::validate_body(db, self.id.into(), sink);\n     }\n "}, {"sha": "14e18f5a117a04cf34efc859573885ea4edfef5b", "filename": "crates/hir_ty/src/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d21f5f7d6e13b93d64235f13ac18e447af8d59e4/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21f5f7d6e13b93d64235f13ac18e447af8d59e4/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs?ref=d21f5f7d6e13b93d64235f13ac18e447af8d59e4", "patch": "@@ -6,6 +6,7 @@ mod decl_check;\n \n use std::{any::Any, fmt};\n \n+use base_db::CrateId;\n use hir_def::{DefWithBodyId, ModuleDefId};\n use hir_expand::diagnostics::{Diagnostic, DiagnosticCode, DiagnosticSink};\n use hir_expand::{name::Name, HirFileId, InFile};\n@@ -18,12 +19,13 @@ pub use crate::diagnostics::expr::{record_literal_missing_fields, record_pattern\n \n pub fn validate_module_item(\n     db: &dyn HirDatabase,\n+    krate: CrateId,\n     owner: ModuleDefId,\n     sink: &mut DiagnosticSink<'_>,\n ) {\n     let _p = profile::span(\"validate_module_item\");\n-    let mut validator = decl_check::DeclValidator::new(owner, sink);\n-    validator.validate_item(db);\n+    let mut validator = decl_check::DeclValidator::new(db, krate, sink);\n+    validator.validate_item(owner);\n }\n \n pub fn validate_body(db: &dyn HirDatabase, owner: DefWithBodyId, sink: &mut DiagnosticSink<'_>) {\n@@ -407,7 +409,7 @@ mod tests {\n                 for (module_id, _) in crate_def_map.modules.iter() {\n                     for decl in crate_def_map[module_id].scope.declarations() {\n                         let mut sink = DiagnosticSinkBuilder::new().build(&mut cb);\n-                        validate_module_item(self, decl, &mut sink);\n+                        validate_module_item(self, krate, decl, &mut sink);\n \n                         if let ModuleDefId::FunctionId(f) = decl {\n                             fns.push(f)\n@@ -419,7 +421,12 @@ mod tests {\n                         for item in impl_data.items.iter() {\n                             if let AssocItemId::FunctionId(f) = item {\n                                 let mut sink = DiagnosticSinkBuilder::new().build(&mut cb);\n-                                validate_module_item(self, ModuleDefId::FunctionId(*f), &mut sink);\n+                                validate_module_item(\n+                                    self,\n+                                    krate,\n+                                    ModuleDefId::FunctionId(*f),\n+                                    &mut sink,\n+                                );\n                                 fns.push(*f)\n                             }\n                         }"}, {"sha": "eaeb6899f1abb758093c857e69d8cd15b9353031", "filename": "crates/hir_ty/src/diagnostics/decl_check.rs", "status": "modified", "additions": 49, "deletions": 54, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/d21f5f7d6e13b93d64235f13ac18e447af8d59e4/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21f5f7d6e13b93d64235f13ac18e447af8d59e4/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs?ref=d21f5f7d6e13b93d64235f13ac18e447af8d59e4", "patch": "@@ -12,6 +12,7 @@\n \n mod case_conv;\n \n+use base_db::CrateId;\n use hir_def::{\n     adt::VariantData,\n     expr::{Pat, PatId},\n@@ -40,7 +41,8 @@ mod allow {\n }\n \n pub(super) struct DeclValidator<'a, 'b: 'a> {\n-    owner: ModuleDefId,\n+    db: &'a dyn HirDatabase,\n+    krate: CrateId,\n     sink: &'a mut DiagnosticSink<'b>,\n }\n \n@@ -53,26 +55,27 @@ struct Replacement {\n \n impl<'a, 'b> DeclValidator<'a, 'b> {\n     pub(super) fn new(\n-        owner: ModuleDefId,\n+        db: &'a dyn HirDatabase,\n+        krate: CrateId,\n         sink: &'a mut DiagnosticSink<'b>,\n     ) -> DeclValidator<'a, 'b> {\n-        DeclValidator { owner, sink }\n+        DeclValidator { db, krate, sink }\n     }\n \n-    pub(super) fn validate_item(&mut self, db: &dyn HirDatabase) {\n-        match self.owner {\n-            ModuleDefId::FunctionId(func) => self.validate_func(db, func),\n-            ModuleDefId::AdtId(adt) => self.validate_adt(db, adt),\n-            ModuleDefId::ConstId(const_id) => self.validate_const(db, const_id),\n-            ModuleDefId::StaticId(static_id) => self.validate_static(db, static_id),\n+    pub(super) fn validate_item(&mut self, item: ModuleDefId) {\n+        match item {\n+            ModuleDefId::FunctionId(func) => self.validate_func(func),\n+            ModuleDefId::AdtId(adt) => self.validate_adt(adt),\n+            ModuleDefId::ConstId(const_id) => self.validate_const(const_id),\n+            ModuleDefId::StaticId(static_id) => self.validate_static(static_id),\n             _ => return,\n         }\n     }\n \n-    fn validate_adt(&mut self, db: &dyn HirDatabase, adt: AdtId) {\n+    fn validate_adt(&mut self, adt: AdtId) {\n         match adt {\n-            AdtId::StructId(struct_id) => self.validate_struct(db, struct_id),\n-            AdtId::EnumId(enum_id) => self.validate_enum(db, enum_id),\n+            AdtId::StructId(struct_id) => self.validate_struct(struct_id),\n+            AdtId::EnumId(enum_id) => self.validate_enum(enum_id),\n             AdtId::UnionId(_) => {\n                 // Unions aren't yet supported by this validator.\n             }\n@@ -82,27 +85,27 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n     /// Checks whether not following the convention is allowed for this item.\n     ///\n     /// Currently this method doesn't check parent attributes.\n-    fn allowed(&self, db: &dyn HirDatabase, id: AttrDefId, allow_name: &str) -> bool {\n-        db.attrs(id).by_key(\"allow\").tt_values().any(|tt| tt.to_string().contains(allow_name))\n+    fn allowed(&self, id: AttrDefId, allow_name: &str) -> bool {\n+        self.db.attrs(id).by_key(\"allow\").tt_values().any(|tt| tt.to_string().contains(allow_name))\n     }\n \n-    fn validate_func(&mut self, db: &dyn HirDatabase, func: FunctionId) {\n-        let data = db.function_data(func);\n+    fn validate_func(&mut self, func: FunctionId) {\n+        let data = self.db.function_data(func);\n         if data.is_extern {\n             mark::hit!(extern_func_incorrect_case_ignored);\n             return;\n         }\n \n-        let body = db.body(func.into());\n+        let body = self.db.body(func.into());\n \n         // Recursively validate inner scope items, such as static variables and constants.\n         for (item_id, _) in body.item_scope.values() {\n-            let mut validator = DeclValidator::new(item_id, self.sink);\n-            validator.validate_item(db);\n+            let mut validator = DeclValidator::new(self.db, self.krate, self.sink);\n+            validator.validate_item(item_id);\n         }\n \n         // Check whether non-snake case identifiers are allowed for this function.\n-        if self.allowed(db, func.into(), allow::NON_SNAKE_CASE) {\n+        if self.allowed(func.into(), allow::NON_SNAKE_CASE) {\n             return;\n         }\n \n@@ -169,19 +172,17 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n         // If there is at least one element to spawn a warning on, go to the source map and generate a warning.\n         self.create_incorrect_case_diagnostic_for_func(\n             func,\n-            db,\n             fn_name_replacement,\n             fn_param_replacements,\n         );\n-        self.create_incorrect_case_diagnostic_for_variables(func, db, pats_replacements);\n+        self.create_incorrect_case_diagnostic_for_variables(func, pats_replacements);\n     }\n \n     /// Given the information about incorrect names in the function declaration, looks up into the source code\n     /// for exact locations and adds diagnostics into the sink.\n     fn create_incorrect_case_diagnostic_for_func(\n         &mut self,\n         func: FunctionId,\n-        db: &dyn HirDatabase,\n         fn_name_replacement: Option<Replacement>,\n         fn_param_replacements: Vec<Replacement>,\n     ) {\n@@ -190,8 +191,8 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             return;\n         }\n \n-        let fn_loc = func.lookup(db.upcast());\n-        let fn_src = fn_loc.source(db.upcast());\n+        let fn_loc = func.lookup(self.db.upcast());\n+        let fn_src = fn_loc.source(self.db.upcast());\n \n         // Diagnostic for function name.\n         if let Some(replacement) = fn_name_replacement {\n@@ -282,20 +283,19 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n     fn create_incorrect_case_diagnostic_for_variables(\n         &mut self,\n         func: FunctionId,\n-        db: &dyn HirDatabase,\n         pats_replacements: Vec<(PatId, Replacement)>,\n     ) {\n         // XXX: only look at source_map if we do have missing fields\n         if pats_replacements.is_empty() {\n             return;\n         }\n \n-        let (_, source_map) = db.body_with_source_map(func.into());\n+        let (_, source_map) = self.db.body_with_source_map(func.into());\n \n         for (id, replacement) in pats_replacements {\n             if let Ok(source_ptr) = source_map.pat_syntax(id) {\n                 if let Some(expr) = source_ptr.value.as_ref().left() {\n-                    let root = source_ptr.file_syntax(db.upcast());\n+                    let root = source_ptr.file_syntax(self.db.upcast());\n                     if let ast::Pat::IdentPat(ident_pat) = expr.to_node(&root) {\n                         let parent = match ident_pat.syntax().parent() {\n                             Some(parent) => parent,\n@@ -333,12 +333,11 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n         }\n     }\n \n-    fn validate_struct(&mut self, db: &dyn HirDatabase, struct_id: StructId) {\n-        let data = db.struct_data(struct_id);\n+    fn validate_struct(&mut self, struct_id: StructId) {\n+        let data = self.db.struct_data(struct_id);\n \n-        let non_camel_case_allowed =\n-            self.allowed(db, struct_id.into(), allow::NON_CAMEL_CASE_TYPES);\n-        let non_snake_case_allowed = self.allowed(db, struct_id.into(), allow::NON_SNAKE_CASE);\n+        let non_camel_case_allowed = self.allowed(struct_id.into(), allow::NON_CAMEL_CASE_TYPES);\n+        let non_snake_case_allowed = self.allowed(struct_id.into(), allow::NON_SNAKE_CASE);\n \n         // Check the structure name.\n         let struct_name = data.name.to_string();\n@@ -379,7 +378,6 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n         // If there is at least one element to spawn a warning on, go to the source map and generate a warning.\n         self.create_incorrect_case_diagnostic_for_struct(\n             struct_id,\n-            db,\n             struct_name_replacement,\n             struct_fields_replacements,\n         );\n@@ -390,7 +388,6 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n     fn create_incorrect_case_diagnostic_for_struct(\n         &mut self,\n         struct_id: StructId,\n-        db: &dyn HirDatabase,\n         struct_name_replacement: Option<Replacement>,\n         struct_fields_replacements: Vec<Replacement>,\n     ) {\n@@ -399,8 +396,8 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             return;\n         }\n \n-        let struct_loc = struct_id.lookup(db.upcast());\n-        let struct_src = struct_loc.source(db.upcast());\n+        let struct_loc = struct_id.lookup(self.db.upcast());\n+        let struct_src = struct_loc.source(self.db.upcast());\n \n         if let Some(replacement) = struct_name_replacement {\n             let ast_ptr = match struct_src.value.name() {\n@@ -473,11 +470,11 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n         }\n     }\n \n-    fn validate_enum(&mut self, db: &dyn HirDatabase, enum_id: EnumId) {\n-        let data = db.enum_data(enum_id);\n+    fn validate_enum(&mut self, enum_id: EnumId) {\n+        let data = self.db.enum_data(enum_id);\n \n         // Check whether non-camel case names are allowed for this enum.\n-        if self.allowed(db, enum_id.into(), allow::NON_CAMEL_CASE_TYPES) {\n+        if self.allowed(enum_id.into(), allow::NON_CAMEL_CASE_TYPES) {\n             return;\n         }\n \n@@ -512,7 +509,6 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n         // If there is at least one element to spawn a warning on, go to the source map and generate a warning.\n         self.create_incorrect_case_diagnostic_for_enum(\n             enum_id,\n-            db,\n             enum_name_replacement,\n             enum_fields_replacements,\n         )\n@@ -523,7 +519,6 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n     fn create_incorrect_case_diagnostic_for_enum(\n         &mut self,\n         enum_id: EnumId,\n-        db: &dyn HirDatabase,\n         enum_name_replacement: Option<Replacement>,\n         enum_variants_replacements: Vec<Replacement>,\n     ) {\n@@ -532,8 +527,8 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             return;\n         }\n \n-        let enum_loc = enum_id.lookup(db.upcast());\n-        let enum_src = enum_loc.source(db.upcast());\n+        let enum_loc = enum_id.lookup(self.db.upcast());\n+        let enum_src = enum_loc.source(self.db.upcast());\n \n         if let Some(replacement) = enum_name_replacement {\n             let ast_ptr = match enum_src.value.name() {\n@@ -608,10 +603,10 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n         }\n     }\n \n-    fn validate_const(&mut self, db: &dyn HirDatabase, const_id: ConstId) {\n-        let data = db.const_data(const_id);\n+    fn validate_const(&mut self, const_id: ConstId) {\n+        let data = self.db.const_data(const_id);\n \n-        if self.allowed(db, const_id.into(), allow::NON_UPPER_CASE_GLOBAL) {\n+        if self.allowed(const_id.into(), allow::NON_UPPER_CASE_GLOBAL) {\n             return;\n         }\n \n@@ -632,8 +627,8 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             return;\n         };\n \n-        let const_loc = const_id.lookup(db.upcast());\n-        let const_src = const_loc.source(db.upcast());\n+        let const_loc = const_id.lookup(self.db.upcast());\n+        let const_src = const_loc.source(self.db.upcast());\n \n         let ast_ptr = match const_src.value.name() {\n             Some(name) => name,\n@@ -652,14 +647,14 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n         self.sink.push(diagnostic);\n     }\n \n-    fn validate_static(&mut self, db: &dyn HirDatabase, static_id: StaticId) {\n-        let data = db.static_data(static_id);\n+    fn validate_static(&mut self, static_id: StaticId) {\n+        let data = self.db.static_data(static_id);\n         if data.is_extern {\n             mark::hit!(extern_static_incorrect_case_ignored);\n             return;\n         }\n \n-        if self.allowed(db, static_id.into(), allow::NON_UPPER_CASE_GLOBAL) {\n+        if self.allowed(static_id.into(), allow::NON_UPPER_CASE_GLOBAL) {\n             return;\n         }\n \n@@ -680,8 +675,8 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             return;\n         };\n \n-        let static_loc = static_id.lookup(db.upcast());\n-        let static_src = static_loc.source(db.upcast());\n+        let static_loc = static_id.lookup(self.db.upcast());\n+        let static_src = static_loc.source(self.db.upcast());\n \n         let ast_ptr = match static_src.value.name() {\n             Some(name) => name,"}]}