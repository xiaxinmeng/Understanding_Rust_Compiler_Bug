{"sha": "72ba683457f3bb2b62754dec78ddd0c633982c65", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyYmE2ODM0NTdmM2JiMmI2Mjc1NGRlYzc4ZGRkMGM2MzM5ODJjNjU=", "commit": {"author": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-08-31T10:31:15Z"}, "committer": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-08-31T10:31:15Z"}, "message": "extract allocation info from byref", "tree": {"sha": "224f8b989c7503837f6aedff3aaea4c31cff0c3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/224f8b989c7503837f6aedff3aaea4c31cff0c3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72ba683457f3bb2b62754dec78ddd0c633982c65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72ba683457f3bb2b62754dec78ddd0c633982c65", "html_url": "https://github.com/rust-lang/rust/commit/72ba683457f3bb2b62754dec78ddd0c633982c65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72ba683457f3bb2b62754dec78ddd0c633982c65/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66d7216469faa5f22d0fe1deb9573e84d22142c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/66d7216469faa5f22d0fe1deb9573e84d22142c5", "html_url": "https://github.com/rust-lang/rust/commit/66d7216469faa5f22d0fe1deb9573e84d22142c5"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "79e635a03b2edd007d0a58313cb8fa31251dc4e2", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/72ba683457f3bb2b62754dec78ddd0c633982c65/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ba683457f3bb2b62754dec78ddd0c633982c65/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=72ba683457f3bb2b62754dec78ddd0c633982c65", "patch": "@@ -22,7 +22,7 @@ use std::ptr;\n \n use rustc::ty::{self, Instance, query::TyCtxtAt};\n use rustc::ty::layout::{self, Align, TargetDataLayout, Size, HasDataLayout};\n-use rustc::mir::interpret::{Pointer, AllocId, Allocation, ScalarMaybeUndef, GlobalId,\n+use rustc::mir::interpret::{Pointer, AllocId, Allocation, ConstValue, ScalarMaybeUndef, GlobalId,\n                             EvalResult, Scalar, EvalErrorKind, AllocType, PointerArithmetic,\n                             truncate};\n pub use rustc::mir::interpret::{write_target_uint, read_target_uint};\n@@ -340,9 +340,12 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n             // no need to report anything, the const_eval call takes care of that for statics\n             assert!(tcx.is_static(def_id).is_some());\n             EvalErrorKind::ReferencedConstant(err).into()\n-        }).map(|val| {\n-            // FIXME We got our static (will be a ByRef), now we make a *copy*?!?\n-            tcx.const_to_allocation(val)\n+        }).map(|const_val| {\n+            if let ConstValue::ByRef(_, allocation, _) = const_val.val {\n+                allocation\n+            } else {\n+                panic!(\"Trying to get allocation info from non-byref const value\")\n+            }\n         })\n     }\n "}, {"sha": "2129cdf6f466b1506f35184f1462e26c94432877", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72ba683457f3bb2b62754dec78ddd0c633982c65/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ba683457f3bb2b62754dec78ddd0c633982c65/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=72ba683457f3bb2b62754dec78ddd0c633982c65", "patch": "@@ -94,7 +94,7 @@ use rustc::infer::{self, InferCtxt, InferOk, RegionVariableOrigin};\n use rustc::infer::anon_types::AnonTypeDecl;\n use rustc::infer::type_variable::{TypeVariableOrigin};\n use rustc::middle::region;\n-use rustc::mir::interpret::{GlobalId};\n+use rustc::mir::interpret::{ConstValue, GlobalId};\n use rustc::ty::subst::{CanonicalSubsts, UnpackedKind, Subst, Substs};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, TraitEngine};\n use rustc::ty::{self, Ty, TyCtxt, GenericParamDefKind, Visibility, ToPredicate, RegionKind};\n@@ -1375,7 +1375,11 @@ fn maybe_check_static_with_link_section(tcx: TyCtxt, id: DefId, span: Span) {\n     };\n     let param_env = ty::ParamEnv::reveal_all();\n     if let Ok(static_) = tcx.const_eval(param_env.and(cid)) {\n-        let alloc = tcx.const_to_allocation(static_);\n+        let alloc = if let ConstValue::ByRef(_, allocation, _) = static_.val {\n+            allocation\n+        } else {\n+            panic!(\"Trying to get allocation info from non-byref const value\")\n+        };\n         if alloc.relocations.len() != 0 {\n             let msg = \"statics with a custom `#[link_section]` must be a \\\n                        simple list of bytes on the wasm target with no \\"}]}