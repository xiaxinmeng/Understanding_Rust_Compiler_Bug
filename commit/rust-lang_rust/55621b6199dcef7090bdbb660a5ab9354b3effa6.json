{"sha": "55621b6199dcef7090bdbb660a5ab9354b3effa6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NjIxYjYxOTlkY2VmNzA5MGJkYmI2NjBhNWFiOTM1NGIzZWZmYTY=", "commit": {"author": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-07-24T20:39:11Z"}, "committer": {"name": "Jared Roesch", "email": "jroesch@MacBook.home", "date": "2015-07-26T03:05:42Z"}, "message": "Add feature gate", "tree": {"sha": "f1a353116a88e0e35e64f9b8548b2f09e2f6e582", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1a353116a88e0e35e64f9b8548b2f09e2f6e582"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55621b6199dcef7090bdbb660a5ab9354b3effa6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55621b6199dcef7090bdbb660a5ab9354b3effa6", "html_url": "https://github.com/rust-lang/rust/commit/55621b6199dcef7090bdbb660a5ab9354b3effa6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55621b6199dcef7090bdbb660a5ab9354b3effa6/comments", "author": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9da04b2bd1fdcd147f6d0ebcdbb5108f63bf7576", "url": "https://api.github.com/repos/rust-lang/rust/commits/9da04b2bd1fdcd147f6d0ebcdbb5108f63bf7576", "html_url": "https://github.com/rust-lang/rust/commit/9da04b2bd1fdcd147f6d0ebcdbb5108f63bf7576"}], "stats": {"total": 84, "additions": 74, "deletions": 10}, "files": [{"sha": "59721edda707b391943255650a6f2e5bc97072d9", "filename": "src/doc/reference.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55621b6199dcef7090bdbb660a5ab9354b3effa6/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/55621b6199dcef7090bdbb660a5ab9354b3effa6/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=55621b6199dcef7090bdbb660a5ab9354b3effa6", "patch": "@@ -2368,6 +2368,8 @@ The currently implemented features of the reference compiler are:\n                               internally without imposing on callers\n                               (i.e. making them behave like function calls in\n                               terms of encapsulation).\n+* - `default_type_parameter_fallback` - Allows type parameter defaults to\n+                                        influence type inference.\n \n If a feature is promoted to a language feature, then all existing programs will\n start to receive compilation warnings about `#![feature]` directives which enabled"}, {"sha": "eb0ef30d396cdcb00cf835f5c9cdfb80406690ad", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/55621b6199dcef7090bdbb660a5ab9354b3effa6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55621b6199dcef7090bdbb660a5ab9354b3effa6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=55621b6199dcef7090bdbb660a5ab9354b3effa6", "patch": "@@ -1709,10 +1709,47 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    /// Apply \"fallbacks\" to some types\n+    /// ! gets replaced with (), unconstrained ints with i32, and unconstrained floats with f64.\n+    pub fn default_type_parameters(&self) {\n+        use middle::ty::UnconstrainedNumeric::{UnconstrainedInt, UnconstrainedFloat, Neither};\n+        for ty in &self.infcx().unsolved_variables() {\n+            let resolved = self.infcx().resolve_type_vars_if_possible(ty);\n+            if self.infcx().type_var_diverges(resolved) {\n+                demand::eqtype(self, codemap::DUMMY_SP, *ty, self.tcx().mk_nil());\n+            } else {\n+                match self.infcx().type_is_unconstrained_numeric(resolved) {\n+                    UnconstrainedInt => {\n+                        demand::eqtype(self, codemap::DUMMY_SP, *ty, self.tcx().types.i32)\n+                    },\n+                    UnconstrainedFloat => {\n+                        demand::eqtype(self, codemap::DUMMY_SP, *ty, self.tcx().types.f64)\n+                    }\n+                    Neither => { }\n+                }\n+            }\n+        }\n+    }\n+\n     fn select_all_obligations_and_apply_defaults(&self) {\n+        if self.tcx().sess.features.borrow().default_type_parameter_fallback {\n+            self.new_select_all_obligations_and_apply_defaults();\n+        } else {\n+            self.old_select_all_obligations_and_apply_defaults();\n+        }\n+    }\n+\n+    // Implements old type inference fallback algorithm\n+    fn old_select_all_obligations_and_apply_defaults(&self) {\n+        self.select_obligations_where_possible();\n+        self.default_type_parameters();\n+        self.select_obligations_where_possible();\n+    }\n+\n+    fn new_select_all_obligations_and_apply_defaults(&self) {\n         use middle::ty::UnconstrainedNumeric::{UnconstrainedInt, UnconstrainedFloat, Neither};\n \n-        // For the time being this errs on the side of being memory wasteful but provides better\n+            // For the time being this errs on the side of being memory wasteful but provides better\n         // error reporting.\n         // let type_variables = self.infcx().type_variables.clone();\n \n@@ -1934,6 +1971,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         assert!(self.inh.deferred_call_resolutions.borrow().is_empty());\n \n         self.select_all_obligations_and_apply_defaults();\n+\n         let mut fulfillment_cx = self.inh.infcx.fulfillment_cx.borrow_mut();\n         match fulfillment_cx.select_all_or_error(self.infcx()) {\n             Ok(()) => { }"}, {"sha": "af7e4a6855f7a97cb2e32741dae9bed5052e976a", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/55621b6199dcef7090bdbb660a5ab9354b3effa6/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55621b6199dcef7090bdbb660a5ab9354b3effa6/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=55621b6199dcef7090bdbb660a5ab9354b3effa6", "patch": "@@ -163,6 +163,8 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Status)] = &[\n \n     // Allows the definition recursive static items.\n     (\"static_recursion\", \"1.3.0\", Active),\n+// Allows default type parameters to influence type inference.\n+    (\"default_type_parameter_fallback\", \"1.3.0\", Active)\n ];\n // (changing above list without updating src/doc/reference.md makes @cmr sad)\n \n@@ -341,7 +343,8 @@ pub struct Features {\n     /// #![feature] attrs for non-language (library) features\n     pub declared_lib_features: Vec<(InternedString, Span)>,\n     pub const_fn: bool,\n-    pub static_recursion: bool\n+    pub static_recursion: bool,\n+    pub default_type_parameter_fallback: bool,\n }\n \n impl Features {\n@@ -366,7 +369,8 @@ impl Features {\n             declared_stable_lang_features: Vec::new(),\n             declared_lib_features: Vec::new(),\n             const_fn: false,\n-            static_recursion: false\n+            static_recursion: false,\n+            default_type_parameter_fallback: false,\n         }\n     }\n }\n@@ -865,6 +869,7 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler,\n         declared_lib_features: unknown_features,\n         const_fn: cx.has_feature(\"const_fn\"),\n         static_recursion: cx.has_feature(\"static_recursion\")\n+        default_type_parameter_fallback: cx.has_feature(\"default_type_parameter_fallback\"),\n     }\n }\n "}, {"sha": "48c5cd1ff7706995256927d057080c7ac974e984", "filename": "src/test/compile-fail/default_ty_param_conflict.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55621b6199dcef7090bdbb660a5ab9354b3effa6/src%2Ftest%2Fcompile-fail%2Fdefault_ty_param_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55621b6199dcef7090bdbb660a5ab9354b3effa6/src%2Ftest%2Fcompile-fail%2Fdefault_ty_param_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdefault_ty_param_conflict.rs?ref=55621b6199dcef7090bdbb660a5ab9354b3effa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(default_type_parameter_fallback)]\n+\n use std::fmt::Debug;\n \n // Example from the RFC"}, {"sha": "4d60724372ada45b2856c09e5d8431408bd193eb", "filename": "src/test/compile-fail/default_ty_param_conflict_cross_crate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55621b6199dcef7090bdbb660a5ab9354b3effa6/src%2Ftest%2Fcompile-fail%2Fdefault_ty_param_conflict_cross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55621b6199dcef7090bdbb660a5ab9354b3effa6/src%2Ftest%2Fcompile-fail%2Fdefault_ty_param_conflict_cross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdefault_ty_param_conflict_cross_crate.rs?ref=55621b6199dcef7090bdbb660a5ab9354b3effa6", "patch": "@@ -9,6 +9,9 @@\n // except according to those terms.\n //\n //aux-build:default_ty_param_cross_crate_crate.rs\n+\n+#![feature(default_type_parameter_fallback)]\n+\n extern crate default_param_test;\n \n use default_param_test::{Foo, bleh};"}, {"sha": "8fc2c2e6bce70009bc949f187d6458ef82f5b1ec", "filename": "src/test/run-pass/default_ty_param_default_dependent_associated_type.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55621b6199dcef7090bdbb660a5ab9354b3effa6/src%2Ftest%2Frun-pass%2Fdefault_ty_param_default_dependent_associated_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55621b6199dcef7090bdbb660a5ab9354b3effa6/src%2Ftest%2Frun-pass%2Fdefault_ty_param_default_dependent_associated_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault_ty_param_default_dependent_associated_type.rs?ref=55621b6199dcef7090bdbb660a5ab9354b3effa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n+\n+#![feature(default_type_parameter_fallback)]\n+\n use std::marker::PhantomData;\n \n trait Id {"}, {"sha": "ac833d0f54744e2a659d0c9738da4695edfe3cc4", "filename": "src/test/run-pass/default_ty_param_dependent_defaults.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/55621b6199dcef7090bdbb660a5ab9354b3effa6/src%2Ftest%2Frun-pass%2Fdefault_ty_param_dependent_defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55621b6199dcef7090bdbb660a5ab9354b3effa6/src%2Ftest%2Frun-pass%2Fdefault_ty_param_dependent_defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault_ty_param_dependent_defaults.rs?ref=55621b6199dcef7090bdbb660a5ab9354b3effa6", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n //\n \n+#![feature(default_type_parameter_fallback)]\n use std::marker::PhantomData;\n \n struct Foo<T,U=T> { t: T, data: PhantomData<U> }"}, {"sha": "e8d93092ec53d31704a5da06482dd58a9d00a719", "filename": "src/test/run-pass/default_ty_param_method_call_test.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55621b6199dcef7090bdbb660a5ab9354b3effa6/src%2Ftest%2Frun-pass%2Fdefault_ty_param_method_call_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55621b6199dcef7090bdbb660a5ab9354b3effa6/src%2Ftest%2Frun-pass%2Fdefault_ty_param_method_call_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault_ty_param_method_call_test.rs?ref=55621b6199dcef7090bdbb660a5ab9354b3effa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(default_type_parameter_fallback)]\n+\n struct Foo;\n \n impl Foo {"}, {"sha": "d9ac51fc23b0281a07a4934f97fda0dec7f7bcf8", "filename": "src/test/run-pass/default_ty_param_struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55621b6199dcef7090bdbb660a5ab9354b3effa6/src%2Ftest%2Frun-pass%2Fdefault_ty_param_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55621b6199dcef7090bdbb660a5ab9354b3effa6/src%2Ftest%2Frun-pass%2Fdefault_ty_param_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault_ty_param_struct.rs?ref=55621b6199dcef7090bdbb660a5ab9354b3effa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(default_type_parameter_fallback)]\n+\n struct Foo<A>(A);\n \n impl<A:Default=i32> Foo<A> {"}, {"sha": "6e3e60a02e5e2fee05255c97d237e22428fcaab0", "filename": "src/test/run-pass/default_ty_param_struct_and_type_alias.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55621b6199dcef7090bdbb660a5ab9354b3effa6/src%2Ftest%2Frun-pass%2Fdefault_ty_param_struct_and_type_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55621b6199dcef7090bdbb660a5ab9354b3effa6/src%2Ftest%2Frun-pass%2Fdefault_ty_param_struct_and_type_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault_ty_param_struct_and_type_alias.rs?ref=55621b6199dcef7090bdbb660a5ab9354b3effa6", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n //\n \n+#![feature(default_type_parameter_fallback)]\n+\n use std::marker::PhantomData;\n \n struct DeterministicHasher;"}, {"sha": "c67d3a49aff3d01a1288affa33fb307305dd036a", "filename": "src/test/run-pass/default_ty_param_trait_impl.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/55621b6199dcef7090bdbb660a5ab9354b3effa6/src%2Ftest%2Frun-pass%2Fdefault_ty_param_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55621b6199dcef7090bdbb660a5ab9354b3effa6/src%2Ftest%2Frun-pass%2Fdefault_ty_param_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault_ty_param_trait_impl.rs?ref=55621b6199dcef7090bdbb660a5ab9354b3effa6", "patch": "@@ -8,14 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(default_type_parameter_fallback)]\n+\n // Another example from the RFC\n trait Foo { }\n trait Bar { }\n \n-impl<T:Bar=usize> Foo for Vec<T> {} // Impl 1\n-impl Bar for usize { } // Impl 2\n+impl<T:Bar=usize> Foo for Vec<T> {}\n+impl Bar for usize {}\n \n-fn takes_foo<F:Foo>(f: F) { }\n+fn takes_foo<F:Foo>(f: F) {}\n \n fn main() {\n     let x = Vec::new(); // x: Vec<$0>"}, {"sha": "067ad524922c0bfa17066c0939457504b321fe1d", "filename": "src/test/run-pass/default_ty_param_trait_impl_simple.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/55621b6199dcef7090bdbb660a5ab9354b3effa6/src%2Ftest%2Frun-pass%2Fdefault_ty_param_trait_impl_simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55621b6199dcef7090bdbb660a5ab9354b3effa6/src%2Ftest%2Frun-pass%2Fdefault_ty_param_trait_impl_simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault_ty_param_trait_impl_simple.rs?ref=55621b6199dcef7090bdbb660a5ab9354b3effa6", "patch": "@@ -8,17 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(default_type_parameter_fallback)]\n+\n // An example from the RFC\n trait Foo { fn takes_foo(&self); }\n trait Bar { }\n \n impl<T:Bar=usize> Foo for Vec<T> {\n     fn takes_foo(&self) {}\n-} // Impl 1\n-\n-impl Bar for usize { } // Impl 2\n+}\n \n-// fn takes_foo<F:Foo>(f: F) { }\n+impl Bar for usize {}\n \n fn main() {\n     let x = Vec::new(); // x: Vec<$0>"}, {"sha": "1b4747406d0c66e948f33b3b9be0773887cab1af", "filename": "src/test/run-pass/default_ty_param_type_alias.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55621b6199dcef7090bdbb660a5ab9354b3effa6/src%2Ftest%2Frun-pass%2Fdefault_ty_param_type_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55621b6199dcef7090bdbb660a5ab9354b3effa6/src%2Ftest%2Frun-pass%2Fdefault_ty_param_type_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault_ty_param_type_alias.rs?ref=55621b6199dcef7090bdbb660a5ab9354b3effa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(default_type_parameter_fallback)]\n+\n use std::collections::HashMap;\n \n type IntMap<K=usize> = HashMap<K, usize>;"}]}