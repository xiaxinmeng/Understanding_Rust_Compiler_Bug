{"sha": "c88b167f1518370833c9216706d09735d1e2d697", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4OGIxNjdmMTUxODM3MDgzM2M5MjE2NzA2ZDA5NzM1ZDFlMmQ2OTc=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-08-30T19:26:03Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-08-31T06:19:15Z"}, "message": "Additional assumption to elide bounds check", "tree": {"sha": "50924d0492e779e68afe4ed78ae4eff0f8bf32a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50924d0492e779e68afe4ed78ae4eff0f8bf32a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c88b167f1518370833c9216706d09735d1e2d697", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c88b167f1518370833c9216706d09735d1e2d697", "html_url": "https://github.com/rust-lang/rust/commit/c88b167f1518370833c9216706d09735d1e2d697", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c88b167f1518370833c9216706d09735d1e2d697/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85fbf49ce0e2274d0acf798f6e703747674feec3", "url": "https://api.github.com/repos/rust-lang/rust/commits/85fbf49ce0e2274d0acf798f6e703747674feec3", "html_url": "https://github.com/rust-lang/rust/commit/85fbf49ce0e2274d0acf798f6e703747674feec3"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "43521048012fafd1e13c7b3f294ff5eb767f8d10", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c88b167f1518370833c9216706d09735d1e2d697/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88b167f1518370833c9216706d09735d1e2d697/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=c88b167f1518370833c9216706d09735d1e2d697", "patch": "@@ -327,13 +327,29 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                 if er.end != er.start\n                                     && scalar.valid_range.end() > scalar.valid_range.start()\n                                 {\n-                                    // We want `table[e as usize]` to not\n+                                    // We want `table[e as usize \u00b1 k]` to not\n                                     // have bound checks, and this is the most\n-                                    // convenient place to put the `assume`.\n-                                    let ll_t_in_const =\n+                                    // convenient place to put the `assume`s.\n+                                    if *scalar.valid_range.start() > 0 {\n+                                        let enum_value_lower_bound = bx\n+                                            .cx()\n+                                            .const_uint_big(ll_t_in, *scalar.valid_range.start());\n+                                        let cmp_start = bx.icmp(\n+                                            IntPredicate::IntUGE,\n+                                            llval,\n+                                            enum_value_lower_bound,\n+                                        );\n+                                        bx.assume(cmp_start);\n+                                    }\n+\n+                                    let enum_value_upper_bound =\n                                         bx.cx().const_uint_big(ll_t_in, *scalar.valid_range.end());\n-                                    let cmp = bx.icmp(IntPredicate::IntULE, llval, ll_t_in_const);\n-                                    bx.assume(cmp);\n+                                    let cmp_end = bx.icmp(\n+                                        IntPredicate::IntULE,\n+                                        llval,\n+                                        enum_value_upper_bound,\n+                                    );\n+                                    bx.assume(cmp_end);\n                                 }\n                             }\n                         }"}]}