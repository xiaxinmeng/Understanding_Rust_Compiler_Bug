{"sha": "c02dff716785721c4c992d03ee816d764fb43402", "node_id": "C_kwDOAAsO6NoAKGMwMmRmZjcxNjc4NTcyMWM0Yzk5MmQwM2VlODE2ZDc2NGZiNDM0MDI", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-02-15T16:29:02Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-02-18T20:01:58Z"}, "message": "Fix `transmute_undefined_repr` when converting between a pointer and a type containing a pointer", "tree": {"sha": "b9bdedc9b0394a56949c09d3875a15235ee18e65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9bdedc9b0394a56949c09d3875a15235ee18e65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c02dff716785721c4c992d03ee816d764fb43402", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c02dff716785721c4c992d03ee816d764fb43402", "html_url": "https://github.com/rust-lang/rust/commit/c02dff716785721c4c992d03ee816d764fb43402", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c02dff716785721c4c992d03ee816d764fb43402/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73367f8768f7ebffe3bba9c5b94813c2bb5c045f", "url": "https://api.github.com/repos/rust-lang/rust/commits/73367f8768f7ebffe3bba9c5b94813c2bb5c045f", "html_url": "https://github.com/rust-lang/rust/commit/73367f8768f7ebffe3bba9c5b94813c2bb5c045f"}], "stats": {"total": 43, "additions": 39, "deletions": 4}, "files": [{"sha": "74ea7a3b893925e52b2ac3d86ee19790b0e7a4a2", "filename": "clippy_lints/src/transmute/transmute_undefined_repr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c02dff716785721c4c992d03ee816d764fb43402/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02dff716785721c4c992d03ee816d764fb43402/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs?ref=c02dff716785721c4c992d03ee816d764fb43402", "patch": "@@ -273,7 +273,8 @@ fn reduce_ty<'tcx>(cx: &LateContext<'tcx>, mut ty: Ty<'tcx>) -> ReducedTy<'tcx>\n                     ReducedTy::UnorderedFields(ty)\n                 }\n             },\n-            ty::Ref(..) | ty::RawPtr(_) => ReducedTy::Ref(ty),\n+            ty::Ref(_, ty, _) => ReducedTy::Ref(ty),\n+            ty::RawPtr(ty) => ReducedTy::Ref(ty.ty),\n             _ => ReducedTy::Other(ty),\n         };\n     }"}, {"sha": "0916da819b13357804b1b5c1fb40a537f38e8fa6", "filename": "tests/ui/transmute_undefined_repr.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c02dff716785721c4c992d03ee816d764fb43402/tests%2Fui%2Ftransmute_undefined_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02dff716785721c4c992d03ee816d764fb43402/tests%2Fui%2Ftransmute_undefined_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_undefined_repr.rs?ref=c02dff716785721c4c992d03ee816d764fb43402", "patch": "@@ -44,5 +44,19 @@ fn main() {\n         // issue #8417\n         let _: Ty2C<Ty2<u32, i32>, ()> = core::mem::transmute(value::<Ty2<u32, i32>>()); // Ok, Ty2 types are the same\n         let _: Ty2<u32, i32> = core::mem::transmute(value::<Ty2C<Ty2<u32, i32>, ()>>()); // Ok, Ty2 types are the same\n+\n+        // Ty2 types are the same\n+        let _: &'static mut Ty2<u32, u32> = core::mem::transmute(value::<Box<Ty2<u32, u32>>>()); // Ok\n+        // Ty2 types are the same\n+        let _: Box<Ty2<u32, u32>> = core::mem::transmute(value::<&'static mut Ty2<u32, u32>>()); // Ok\n+        let _: *mut Ty2<u32, u32> = core::mem::transmute(value::<Box<Ty2<u32, u32>>>()); // Ok, Ty2 types are the same\n+        let _: Box<Ty2<u32, u32>> = core::mem::transmute(value::<*mut Ty2<u32, u32>>()); // Ok, Ty2 types are the same\n+\n+        // Different Ty2 instances\n+        let _: &'static mut Ty2<u32, f32> = core::mem::transmute(value::<Box<Ty2<u32, u32>>>()); // Lint\n+        // Different Ty2 instances\n+        let _: Box<Ty2<u32, u32>> = core::mem::transmute(value::<&'static mut Ty2<u32, f32>>()); // Lint\n+\n+\n     }\n }"}, {"sha": "98035305ec0c339d4240ffec8ca4553f683e6126", "filename": "tests/ui/transmute_undefined_repr.stderr", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c02dff716785721c4c992d03ee816d764fb43402/tests%2Fui%2Ftransmute_undefined_repr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c02dff716785721c4c992d03ee816d764fb43402/tests%2Fui%2Ftransmute_undefined_repr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_undefined_repr.stderr?ref=c02dff716785721c4c992d03ee816d764fb43402", "patch": "@@ -28,17 +28,37 @@ LL |         let _: Ty<Ty2<u32, i32>> = core::mem::transmute(value::<Ty2<u32, f3\n    |\n    = note: two instances of the same generic type (`Ty2`) may have different layouts\n \n-error: transmute to `&Ty2<u32, f32>` which has an undefined layout\n+error: transmute from `Ty<&Ty2<u32, i32>>` to `&Ty2<u32, f32>`, both of which have an undefined layout\n   --> $DIR/transmute_undefined_repr.rs:35:33\n    |\n LL |         let _: &Ty2<u32, f32> = core::mem::transmute(value::<Ty<&Ty2<u32, i32>>>()); // Lint, different Ty2 instances\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: two instances of the same generic type (`Ty2`) may have different layouts\n \n-error: transmute from `&Ty2<u32, f32>` which has an undefined layout\n+error: transmute from `&Ty2<u32, f32>` to `Ty<&Ty2<u32, i32>>`, both of which have an undefined layout\n   --> $DIR/transmute_undefined_repr.rs:36:37\n    |\n LL |         let _: Ty<&Ty2<u32, i32>> = core::mem::transmute(value::<&Ty2<u32, f32>>()); // Lint, different Ty2 instances\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: two instances of the same generic type (`Ty2`) may have different layouts\n+\n+error: transmute from `std::boxed::Box<Ty2<u32, u32>>` to `&mut Ty2<u32, f32>`, both of which have an undefined layout\n+  --> $DIR/transmute_undefined_repr.rs:56:45\n+   |\n+LL |         let _: &'static mut Ty2<u32, f32> = core::mem::transmute(value::<Box<Ty2<u32, u32>>>()); // Lint\n+   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: two instances of the same generic type (`Ty2`) may have different layouts\n+\n+error: transmute from `&mut Ty2<u32, f32>` to `std::boxed::Box<Ty2<u32, u32>>`, both of which have an undefined layout\n+  --> $DIR/transmute_undefined_repr.rs:58:37\n+   |\n+LL |         let _: Box<Ty2<u32, u32>> = core::mem::transmute(value::<&'static mut Ty2<u32, f32>>()); // Lint\n+   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: two instances of the same generic type (`Ty2`) may have different layouts\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 8 previous errors\n "}]}