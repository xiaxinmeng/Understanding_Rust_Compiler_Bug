{"sha": "092e9ccd8aaf4cb255095b63941b8a701f5d805a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MmU5Y2NkOGFhZjRjYjI1NTA5NWI2Mzk0MWI4YTcwMWY1ZDgwNWE=", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-07-30T14:51:40Z"}, "committer": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-08-06T10:42:05Z"}, "message": "Point to the value instead of the TAIT declaration for obligation failures", "tree": {"sha": "6a06465081334fe7504d35a8134cf77f1d7182fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a06465081334fe7504d35a8134cf77f1d7182fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/092e9ccd8aaf4cb255095b63941b8a701f5d805a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/092e9ccd8aaf4cb255095b63941b8a701f5d805a", "html_url": "https://github.com/rust-lang/rust/commit/092e9ccd8aaf4cb255095b63941b8a701f5d805a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/092e9ccd8aaf4cb255095b63941b8a701f5d805a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2c1919a3d1f0e77a64168c079caaa9610316f02", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2c1919a3d1f0e77a64168c079caaa9610316f02", "html_url": "https://github.com/rust-lang/rust/commit/b2c1919a3d1f0e77a64168c079caaa9610316f02"}], "stats": {"total": 99, "additions": 49, "deletions": 50}, "files": [{"sha": "f7ed5cd6bd1ff24498174cb99011bc4ac293da28", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/092e9ccd8aaf4cb255095b63941b8a701f5d805a/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092e9ccd8aaf4cb255095b63941b8a701f5d805a/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=092e9ccd8aaf4cb255095b63941b8a701f5d805a", "patch": "@@ -965,10 +965,10 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n             debug!(\"instantiate_opaque_types: returning concrete ty {:?}\", opaque_defn.concrete_ty);\n             return opaque_defn.concrete_ty;\n         }\n-        let span = tcx.def_span(def_id);\n-        debug!(\"fold_opaque_ty {:?} {:?}\", self.value_span, span);\n-        let ty_var = infcx\n-            .next_ty_var(TypeVariableOrigin { kind: TypeVariableOriginKind::TypeInference, span });\n+        let ty_var = infcx.next_ty_var(TypeVariableOrigin {\n+            kind: TypeVariableOriginKind::TypeInference,\n+            span: self.value_span,\n+        });\n \n         // Make sure that we are in fact defining the *entire* type\n         // (e.g., `type Foo<T: Bound> = impl Bar;` needs to be\n@@ -993,16 +993,12 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n         }\n \n         debug!(\"instantiate_opaque_types: ty_var={:?}\", ty_var);\n-        self.compute_opaque_type_obligations(opaque_type_key, span);\n+        self.compute_opaque_type_obligations(opaque_type_key);\n \n         ty_var\n     }\n \n-    fn compute_opaque_type_obligations(\n-        &mut self,\n-        opaque_type_key: OpaqueTypeKey<'tcx>,\n-        span: Span,\n-    ) {\n+    fn compute_opaque_type_obligations(&mut self, opaque_type_key: OpaqueTypeKey<'tcx>) {\n         let infcx = self.infcx;\n         let tcx = infcx.tcx;\n         let OpaqueTypeKey { def_id, substs } = opaque_type_key;\n@@ -1014,7 +1010,7 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n \n         let param_env = tcx.param_env(def_id);\n         let InferOk { value: bounds, obligations } = infcx.partially_normalize_associated_types_in(\n-            ObligationCause::misc(span, self.body_id),\n+            ObligationCause::misc(self.value_span, self.body_id),\n             param_env,\n             bounds,\n         );\n@@ -1038,7 +1034,8 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n             // This also instantiates nested instances of `impl Trait`.\n             let predicate = self.instantiate_opaque_types_in_map(predicate);\n \n-            let cause = traits::ObligationCause::new(span, self.body_id, traits::OpaqueType);\n+            let cause =\n+                traits::ObligationCause::new(self.value_span, self.body_id, traits::OpaqueType);\n \n             // Require that the predicate holds for the concrete type.\n             debug!(\"instantiate_opaque_types: predicate={:?}\", predicate);"}, {"sha": "4c36289f47b857ac0e5c50ae4fa9df26d9dc7863", "filename": "src/test/ui/associated-type-bounds/assoc-type-eq-with-dyn-atb-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/092e9ccd8aaf4cb255095b63941b8a701f5d805a/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092e9ccd8aaf4cb255095b63941b8a701f5d805a/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.rs?ref=092e9ccd8aaf4cb255095b63941b8a701f5d805a", "patch": "@@ -28,9 +28,9 @@ impl Bar for AssocNoCopy {\n \n impl Thing for AssocNoCopy {\n     type Out = Box<dyn Bar<Assoc: Copy>>;\n-    //~^ ERROR the trait bound `String: Copy` is not satisfied\n \n     fn func() -> Self::Out {\n+        //~^ ERROR the trait bound `String: Copy` is not satisfied\n         Box::new(AssocNoCopy)\n     }\n }"}, {"sha": "a32ab453152a0b4663c06788b189aaba8cd23431", "filename": "src/test/ui/associated-type-bounds/assoc-type-eq-with-dyn-atb-fail.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/092e9ccd8aaf4cb255095b63941b8a701f5d805a/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/092e9ccd8aaf4cb255095b63941b8a701f5d805a/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.stderr?ref=092e9ccd8aaf4cb255095b63941b8a701f5d805a", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `String: Copy` is not satisfied\n-  --> $DIR/assoc-type-eq-with-dyn-atb-fail.rs:30:28\n+  --> $DIR/assoc-type-eq-with-dyn-atb-fail.rs:32:18\n    |\n-LL |     type Out = Box<dyn Bar<Assoc: Copy>>;\n-   |                            ^^^^^^^^^^^ the trait `Copy` is not implemented for `String`\n+LL |     fn func() -> Self::Out {\n+   |                  ^^^^^^^^^ the trait `Copy` is not implemented for `String`\n \n error: aborting due to previous error\n "}, {"sha": "46188636475db0362549d659208bef75878f060a", "filename": "src/test/ui/impl-trait/issue-55872-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/092e9ccd8aaf4cb255095b63941b8a701f5d805a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092e9ccd8aaf4cb255095b63941b8a701f5d805a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.rs?ref=092e9ccd8aaf4cb255095b63941b8a701f5d805a", "patch": "@@ -8,12 +8,12 @@ pub trait Bar {\n \n impl<S: Default> Bar for S {\n     type E = impl Copy;\n-    //~^ ERROR the trait bound `S: Copy` is not satisfied in `(S, T)` [E0277]\n-    //~^^ ERROR the trait bound `T: Copy` is not satisfied in `(S, T)` [E0277]\n \n     fn foo<T: Default>() -> Self::E {\n         //~^ ERROR type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n         //~| ERROR impl has stricter requirements than trait\n+        //~| ERROR the trait bound `S: Copy` is not satisfied in `(S, T)` [E0277]\n+        //~| ERROR the trait bound `T: Copy` is not satisfied in `(S, T)` [E0277]\n         (S::default(), T::default())\n     }\n }"}, {"sha": "56f5bff939fb7211e6bb511d8bf9defddf64ddfd", "filename": "src/test/ui/impl-trait/issue-55872-1.stderr", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/092e9ccd8aaf4cb255095b63941b8a701f5d805a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/092e9ccd8aaf4cb255095b63941b8a701f5d805a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr?ref=092e9ccd8aaf4cb255095b63941b8a701f5d805a", "patch": "@@ -1,5 +1,5 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/issue-55872-1.rs:14:5\n+  --> $DIR/issue-55872-1.rs:12:5\n    |\n LL |     fn foo<T>() -> Self::E;\n    |     ----------------------- definition of `foo` from trait\n@@ -8,10 +8,10 @@ LL |     fn foo<T: Default>() -> Self::E {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: Default`\n \n error[E0277]: the trait bound `S: Copy` is not satisfied in `(S, T)`\n-  --> $DIR/issue-55872-1.rs:10:14\n+  --> $DIR/issue-55872-1.rs:12:29\n    |\n-LL |     type E = impl Copy;\n-   |              ^^^^^^^^^ within `(S, T)`, the trait `Copy` is not implemented for `S`\n+LL |     fn foo<T: Default>() -> Self::E {\n+   |                             ^^^^^^^ within `(S, T)`, the trait `Copy` is not implemented for `S`\n    |\n    = note: required because it appears within the type `(S, T)`\n help: consider further restricting this bound\n@@ -20,10 +20,10 @@ LL | impl<S: Default + std::marker::Copy> Bar for S {\n    |                 ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `T: Copy` is not satisfied in `(S, T)`\n-  --> $DIR/issue-55872-1.rs:10:14\n+  --> $DIR/issue-55872-1.rs:12:29\n    |\n-LL |     type E = impl Copy;\n-   |              ^^^^^^^^^ within `(S, T)`, the trait `Copy` is not implemented for `T`\n+LL |     fn foo<T: Default>() -> Self::E {\n+   |                             ^^^^^^^ within `(S, T)`, the trait `Copy` is not implemented for `T`\n    |\n    = note: required because it appears within the type `(S, T)`\n help: consider further restricting this bound\n@@ -32,12 +32,14 @@ LL |     fn foo<T: Default + std::marker::Copy>() -> Self::E {\n    |                       ^^^^^^^^^^^^^^^^^^^\n \n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872-1.rs:14:37\n+  --> $DIR/issue-55872-1.rs:12:37\n    |\n LL |       fn foo<T: Default>() -> Self::E {\n    |  _____________________________________^\n LL | |\n LL | |\n+LL | |\n+LL | |\n LL | |         (S::default(), T::default())\n LL | |     }\n    | |_____^"}, {"sha": "9546d01ac5c6895ea2c0560ab2bf255f94dff540", "filename": "src/test/ui/impl-trait/issue-55872-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/092e9ccd8aaf4cb255095b63941b8a701f5d805a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092e9ccd8aaf4cb255095b63941b8a701f5d805a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs?ref=092e9ccd8aaf4cb255095b63941b8a701f5d805a", "patch": "@@ -11,9 +11,9 @@ pub trait Bar {\n \n impl<S> Bar for S {\n     type E = impl std::marker::Copy;\n-    //~^ ERROR the trait bound `impl Future: Copy` is not satisfied [E0277]\n     fn foo<T>() -> Self::E {\n         //~^ ERROR type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n+        //~| ERROR the trait bound `impl Future: Copy` is not satisfied [E0277]\n         async {}\n     }\n }"}, {"sha": "31b8fbd299c51ea9087e988a24a02940feb05aa1", "filename": "src/test/ui/impl-trait/issue-55872-2.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/092e9ccd8aaf4cb255095b63941b8a701f5d805a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/092e9ccd8aaf4cb255095b63941b8a701f5d805a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr?ref=092e9ccd8aaf4cb255095b63941b8a701f5d805a", "patch": "@@ -1,15 +1,16 @@\n error[E0277]: the trait bound `impl Future: Copy` is not satisfied\n-  --> $DIR/issue-55872-2.rs:13:14\n+  --> $DIR/issue-55872-2.rs:14:20\n    |\n-LL |     type E = impl std::marker::Copy;\n-   |              ^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `impl Future`\n+LL |     fn foo<T>() -> Self::E {\n+   |                    ^^^^^^^ the trait `Copy` is not implemented for `impl Future`\n \n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872-2.rs:15:28\n+  --> $DIR/issue-55872-2.rs:14:28\n    |\n LL |       fn foo<T>() -> Self::E {\n    |  ____________________________^\n LL | |\n+LL | |\n LL | |         async {}\n LL | |     }\n    | |_____^"}, {"sha": "78d25e30e0382eba41de11a042664471784ca8a2", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/092e9ccd8aaf4cb255095b63941b8a701f5d805a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092e9ccd8aaf4cb255095b63941b8a701f5d805a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs?ref=092e9ccd8aaf4cb255095b63941b8a701f5d805a", "patch": "@@ -7,9 +7,9 @@ fn main() {\n }\n \n type WrongGeneric<T> = impl 'static;\n-//~^ ERROR the parameter type `T` may not live long enough\n-//~| ERROR: at least one trait must be specified\n+//~^ ERROR: at least one trait must be specified\n \n fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n+    //~^ ERROR the parameter type `T` may not live long enough\n     t\n }"}, {"sha": "568784372e5191db73218523175ccec67dafc72c", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/092e9ccd8aaf4cb255095b63941b8a701f5d805a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/092e9ccd8aaf4cb255095b63941b8a701f5d805a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr?ref=092e9ccd8aaf4cb255095b63941b8a701f5d805a", "patch": "@@ -19,13 +19,12 @@ LL | type WrongGeneric<T> = impl 'static;\n            found opaque type `impl Sized`\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:9:24\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:12:30\n    |\n-LL | type WrongGeneric<T> = impl 'static;\n-   |                        ^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n-...\n LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n-   |                  - help: consider adding an explicit lifetime bound...: `T: 'static`\n+   |                  -           ^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |                  |\n+   |                  help: consider adding an explicit lifetime bound...: `T: 'static`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "625e46b6bc0122b4ed5e1d74367e150e5e2595dc", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/092e9ccd8aaf4cb255095b63941b8a701f5d805a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092e9ccd8aaf4cb255095b63941b8a701f5d805a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs?ref=092e9ccd8aaf4cb255095b63941b8a701f5d805a", "patch": "@@ -15,9 +15,9 @@ struct X;\n \n impl Foo for X {\n     type Bar = impl Baz<Self, Self>;\n-    //~^ ERROR implementation of `FnOnce` is not general enough\n \n     fn bar(&self) -> Self::Bar {\n+        //~^ ERROR implementation of `FnOnce` is not general enough\n         |x| x\n     }\n }"}, {"sha": "54d237159d80b56fd0edb903825ec19682ab342e", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/092e9ccd8aaf4cb255095b63941b8a701f5d805a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/092e9ccd8aaf4cb255095b63941b8a701f5d805a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr?ref=092e9ccd8aaf4cb255095b63941b8a701f5d805a", "patch": "@@ -1,8 +1,8 @@\n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-57611-trait-alias.rs:17:16\n+  --> $DIR/issue-57611-trait-alias.rs:19:22\n    |\n-LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n+LL |     fn bar(&self) -> Self::Bar {\n+   |                      ^^^^^^^^^ implementation of `FnOnce` is not general enough\n    |\n    = note: closure with signature `fn(&'2 X) -> &X` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n    = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`"}, {"sha": "37a2f28ce074fed466fbb7dcb3f4b95ef7a0a7cd", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/092e9ccd8aaf4cb255095b63941b8a701f5d805a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092e9ccd8aaf4cb255095b63941b8a701f5d805a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs?ref=092e9ccd8aaf4cb255095b63941b8a701f5d805a", "patch": "@@ -8,9 +8,9 @@ trait Bug {\n \n impl Bug for &() {\n     type Item = impl Bug; //~ ERROR `impl Trait` in type aliases is unstable\n-    //~^ ERROR the trait bound `(): Bug` is not satisfied\n \n     const FUN: fn() -> Self::Item = || ();\n+    //~^ ERROR the trait bound `(): Bug` is not satisfied\n }\n \n fn main() {}"}, {"sha": "1710e07644d647e3b698b4fe60fbf10997c44952", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/092e9ccd8aaf4cb255095b63941b8a701f5d805a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/092e9ccd8aaf4cb255095b63941b8a701f5d805a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr?ref=092e9ccd8aaf4cb255095b63941b8a701f5d805a", "patch": "@@ -8,10 +8,10 @@ LL |     type Item = impl Bug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `(): Bug` is not satisfied\n-  --> $DIR/issue-60371.rs:10:17\n+  --> $DIR/issue-60371.rs:12:40\n    |\n-LL |     type Item = impl Bug;\n-   |                 ^^^^^^^^ the trait `Bug` is not implemented for `()`\n+LL |     const FUN: fn() -> Self::Item = || ();\n+   |                                        ^ the trait `Bug` is not implemented for `()`\n    |\n    = help: the following implementations were found:\n              <&() as Bug>"}, {"sha": "da845e86147b7ffb620f880936aae59069a2095f", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/092e9ccd8aaf4cb255095b63941b8a701f5d805a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092e9ccd8aaf4cb255095b63941b8a701f5d805a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.rs?ref=092e9ccd8aaf4cb255095b63941b8a701f5d805a", "patch": "@@ -5,9 +5,9 @@\n #![feature(type_alias_impl_trait)]\n \n type X<A, B> = impl Into<&'static A>;\n-//~^ ERROR the trait bound `&'static B: From<&A>` is not satisfied\n \n fn f<A, B: 'static>(a: &'static A, b: B) -> (X<A, B>, X<B, A>) {\n+    //~^ ERROR the trait bound `&'static B: From<&A>` is not satisfied\n     (a, a)\n }\n "}, {"sha": "734f15a9283de9052516ccac0206f0992fb3076b", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/092e9ccd8aaf4cb255095b63941b8a701f5d805a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/092e9ccd8aaf4cb255095b63941b8a701f5d805a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.stderr?ref=092e9ccd8aaf4cb255095b63941b8a701f5d805a", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `&'static B: From<&A>` is not satisfied\n-  --> $DIR/multiple-def-uses-in-one-fn.rs:7:16\n+  --> $DIR/multiple-def-uses-in-one-fn.rs:9:45\n    |\n-LL | type X<A, B> = impl Into<&'static A>;\n-   |                ^^^^^^^^^^^^^^^^^^^^^ the trait `From<&A>` is not implemented for `&'static B`\n+LL | fn f<A, B: 'static>(a: &'static A, b: B) -> (X<A, B>, X<B, A>) {\n+   |                                             ^^^^^^^^^^^^^^^^^^ the trait `From<&A>` is not implemented for `&'static B`\n    |\n    = note: required because of the requirements on the impl of `Into<&'static B>` for `&A`\n help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement"}]}