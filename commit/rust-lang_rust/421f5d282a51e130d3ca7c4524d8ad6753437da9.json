{"sha": "421f5d282a51e130d3ca7c4524d8ad6753437da9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMWY1ZDI4MmE1MWUxMzBkM2NhN2M0NTI0ZDhhZDY3NTM0MzdkYTk=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-03-29T02:22:48Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-03-29T02:48:13Z"}, "message": "fix double-drop in in-place collect specialization", "tree": {"sha": "f285fb739dbdf73d79484b1454d8da02db380544", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f285fb739dbdf73d79484b1454d8da02db380544"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/421f5d282a51e130d3ca7c4524d8ad6753437da9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/421f5d282a51e130d3ca7c4524d8ad6753437da9", "html_url": "https://github.com/rust-lang/rust/commit/421f5d282a51e130d3ca7c4524d8ad6753437da9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/421f5d282a51e130d3ca7c4524d8ad6753437da9/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa89c0fbcfa8f4d44f153b1195ec5a305540ffc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa89c0fbcfa8f4d44f153b1195ec5a305540ffc4", "html_url": "https://github.com/rust-lang/rust/commit/fa89c0fbcfa8f4d44f153b1195ec5a305540ffc4"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "324e894bafd23a0d698573a507dd57a2bcf6e13e", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/421f5d282a51e130d3ca7c4524d8ad6753437da9/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421f5d282a51e130d3ca7c4524d8ad6753437da9/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=421f5d282a51e130d3ca7c4524d8ad6753437da9", "patch": "@@ -85,20 +85,29 @@ impl<T, A: Allocator> IntoIter<T, A> {\n         ptr::slice_from_raw_parts_mut(self.ptr as *mut T, self.len())\n     }\n \n-    pub(super) fn drop_remaining(&mut self) {\n-        unsafe {\n-            ptr::drop_in_place(self.as_mut_slice());\n-        }\n-        self.ptr = self.end;\n-    }\n+    /// Drops remaining elements and relinquishes the backing allocation.\n+    ///\n+    /// This is roughly equivalent to the following, but more efficient\n+    ///\n+    /// ```\n+    /// # let mut into_iter = Vec::<u8>::with_capacity(10).into_iter();\n+    /// (&mut into_iter).for_each(core::mem::drop);\n+    /// unsafe { core::ptr::write(&mut into_iter, Vec::new().into_iter()); }\n+    /// ```\n+    pub(super) fn forget_allocation_drop_remaining(&mut self) {\n+        let remaining = self.as_raw_mut_slice();\n \n-    /// Relinquishes the backing allocation, equivalent to\n-    /// `ptr::write(&mut self, Vec::new().into_iter())`\n-    pub(super) fn forget_allocation(&mut self) {\n+        // overwrite the individual fields instead of creating a new\n+        // struct and then overwriting &mut self.\n+        // this creates less assembly\n         self.cap = 0;\n         self.buf = unsafe { NonNull::new_unchecked(RawVec::NEW.ptr()) };\n         self.ptr = self.buf.as_ptr();\n         self.end = self.buf.as_ptr();\n+\n+        unsafe {\n+            ptr::drop_in_place(remaining);\n+        }\n     }\n }\n "}, {"sha": "e857d284d3ab654d14710d73d08a921f96f6661e", "filename": "library/alloc/src/vec/source_iter_marker.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/421f5d282a51e130d3ca7c4524d8ad6753437da9/library%2Falloc%2Fsrc%2Fvec%2Fsource_iter_marker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421f5d282a51e130d3ca7c4524d8ad6753437da9/library%2Falloc%2Fsrc%2Fvec%2Fsource_iter_marker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fsource_iter_marker.rs?ref=421f5d282a51e130d3ca7c4524d8ad6753437da9", "patch": "@@ -69,9 +69,9 @@ where\n         }\n \n         // drop any remaining values at the tail of the source\n-        src.drop_remaining();\n         // but prevent drop of the allocation itself once IntoIter goes out of scope\n-        src.forget_allocation();\n+        // if the drop panics then we also leak any elements collected into dst_buf\n+        src.forget_allocation_drop_remaining();\n \n         let vec = unsafe { Vec::from_raw_parts(dst_buf, len, cap) };\n "}]}