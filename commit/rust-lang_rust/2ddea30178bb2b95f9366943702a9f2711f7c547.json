{"sha": "2ddea30178bb2b95f9366943702a9f2711f7c547", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZGVhMzAxNzhiYjJiOTVmOTM2Njk0MzcwMmE5ZjI3MTFmN2M1NDc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-03T06:13:59Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-20T21:41:28Z"}, "message": "extract suggest_slice_pat", "tree": {"sha": "3c9a1b9bca9f76075bb461b856153455762996b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c9a1b9bca9f76075bb461b856153455762996b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ddea30178bb2b95f9366943702a9f2711f7c547", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ddea30178bb2b95f9366943702a9f2711f7c547", "html_url": "https://github.com/rust-lang/rust/commit/2ddea30178bb2b95f9366943702a9f2711f7c547", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ddea30178bb2b95f9366943702a9f2711f7c547/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c54c9ef863f3b9bfb3dd6e74cf183282fafacbd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c54c9ef863f3b9bfb3dd6e74cf183282fafacbd7", "html_url": "https://github.com/rust-lang/rust/commit/c54c9ef863f3b9bfb3dd6e74cf183282fafacbd7"}], "stats": {"total": 46, "additions": 25, "deletions": 21}, "files": [{"sha": "107fe388ed0464c75d4d6ce08650e203086dfa36", "filename": "src/libsyntax_expand/mbe/macro_rules.rs", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/2ddea30178bb2b95f9366943702a9f2711f7c547/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ddea30178bb2b95f9366943702a9f2711f7c547/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs?ref=2ddea30178bb2b95f9366943702a9f2711f7c547", "patch": "@@ -63,6 +63,30 @@ crate fn annotate_err_with_kind(\n     };\n }\n \n+/// Instead of e.g. `vec![a, b, c]` in a pattern context, suggest `[a, b, c]`.\n+fn suggest_slice_pat(e: &mut DiagnosticBuilder<'_>, site_span: Span, parser: &Parser<'_>) {\n+    let mut suggestion = None;\n+    if let Ok(code) = parser.sess.source_map().span_to_snippet(site_span) {\n+        if let Some(bang) = code.find('!') {\n+            suggestion = Some(code[bang + 1..].to_string());\n+        }\n+    }\n+    if let Some(suggestion) = suggestion {\n+        e.span_suggestion(\n+            site_span,\n+            \"use a slice pattern here instead\",\n+            suggestion,\n+            Applicability::MachineApplicable,\n+        );\n+    } else {\n+        e.span_label(site_span, \"use a slice pattern here instead\");\n+    }\n+    e.help(\n+        \"for more information, see https://doc.rust-lang.org/edition-guide/\\\n+        rust-2018/slice-patterns.html\"\n+    );\n+}\n+\n impl<'a> ParserAnyMacro<'a> {\n     crate fn make(mut self: Box<ParserAnyMacro<'a>>, kind: AstFragmentKind) -> AstFragment {\n         let ParserAnyMacro { site_span, macro_ident, ref mut parser, arm_span } = *self;\n@@ -92,27 +116,7 @@ impl<'a> ParserAnyMacro<'a> {\n             }\n             match kind {\n                 AstFragmentKind::Pat if macro_ident.name == sym::vec => {\n-                    let mut suggestion = None;\n-                    if let Ok(code) = parser.sess.source_map().span_to_snippet(site_span) {\n-                        if let Some(bang) = code.find('!') {\n-                            suggestion = Some(code[bang + 1..].to_string());\n-                        }\n-                    }\n-                    if let Some(suggestion) = suggestion {\n-                        e.span_suggestion(\n-                            site_span,\n-                            \"use a slice pattern here instead\",\n-                            suggestion,\n-                            Applicability::MachineApplicable,\n-                        );\n-                    } else {\n-                        e.span_label(\n-                            site_span,\n-                            \"use a slice pattern here instead\",\n-                        );\n-                    }\n-                    e.help(\"for more information, see https://doc.rust-lang.org/edition-guide/\\\n-                            rust-2018/slice-patterns.html\");\n+                    suggest_slice_pat(&mut e, site_span, parser);\n                 }\n                 _ => annotate_err_with_kind(&mut e, kind, site_span),\n             };"}]}