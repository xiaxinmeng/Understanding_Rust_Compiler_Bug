{"sha": "1af8eb9c08f974a1b3beecfebadeb03144ef337d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhZjhlYjljMDhmOTc0YTFiM2JlZWNmZWJhZGViMDMxNDRlZjMzN2Q=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-31T19:41:29Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-31T19:41:29Z"}, "message": "impl trait type", "tree": {"sha": "cd7d3d253679af61bf43fdee6eb1ea85d2796575", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd7d3d253679af61bf43fdee6eb1ea85d2796575"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1af8eb9c08f974a1b3beecfebadeb03144ef337d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1af8eb9c08f974a1b3beecfebadeb03144ef337d", "html_url": "https://github.com/rust-lang/rust/commit/1af8eb9c08f974a1b3beecfebadeb03144ef337d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1af8eb9c08f974a1b3beecfebadeb03144ef337d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "643d23503527d9fcee32dea4f974b7dd0ee26143", "url": "https://api.github.com/repos/rust-lang/rust/commits/643d23503527d9fcee32dea4f974b7dd0ee26143", "html_url": "https://github.com/rust-lang/rust/commit/643d23503527d9fcee32dea4f974b7dd0ee26143"}], "stats": {"total": 59, "additions": 59, "deletions": 0}, "files": [{"sha": "df7b4083b02a834525bf7845619781c99b97185d", "filename": "src/grammar.ron", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1af8eb9c08f974a1b3beecfebadeb03144ef337d/src%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/1af8eb9c08f974a1b3beecfebadeb03144ef337d/src%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar.ron?ref=1af8eb9c08f974a1b3beecfebadeb03144ef337d", "patch": "@@ -118,6 +118,7 @@ Grammar(\n         \"PLACEHOLDER_TYPE\",\n         \"FN_POINTER_TYPE\",\n         \"FOR_TYPE\",\n+        \"IMPL_TRAIT_TYPE\",\n \n         \"REF_PAT\",\n         \"BIND_PAT\","}, {"sha": "2affd47ccfdfdf999ee244235d942acd776e5172", "filename": "src/parser/grammar/type_params.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1af8eb9c08f974a1b3beecfebadeb03144ef337d/src%2Fparser%2Fgrammar%2Ftype_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af8eb9c08f974a1b3beecfebadeb03144ef337d/src%2Fparser%2Fgrammar%2Ftype_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Ftype_params.rs?ref=1af8eb9c08f974a1b3beecfebadeb03144ef337d", "patch": "@@ -57,6 +57,10 @@ pub(super) fn list(p: &mut Parser) {\n pub(super) fn bounds(p: &mut Parser) {\n     assert!(p.at(COLON));\n     p.bump();\n+    bounds_without_colon(p);\n+}\n+\n+pub(super) fn bounds_without_colon(p: &mut Parser) {\n     loop {\n         let has_paren = p.eat(L_PAREN);\n         p.eat(QUESTION);\n@@ -79,6 +83,7 @@ pub(super) fn bounds(p: &mut Parser) {\n     }\n }\n \n+\n pub(super) fn where_clause(p: &mut Parser) {\n     if p.at(WHERE_KW) {\n         let m = p.start();"}, {"sha": "31871ceece41495cfd7139676e988c8f26fd2c5e", "filename": "src/parser/grammar/types.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1af8eb9c08f974a1b3beecfebadeb03144ef337d/src%2Fparser%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af8eb9c08f974a1b3beecfebadeb03144ef337d/src%2Fparser%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Ftypes.rs?ref=1af8eb9c08f974a1b3beecfebadeb03144ef337d", "patch": "@@ -10,6 +10,7 @@ pub(super) fn type_(p: &mut Parser) {\n         UNDERSCORE => placeholder_type(p),\n         FN_KW | UNSAFE_KW | EXTERN_KW => fn_pointer_type(p),\n         FOR_KW => for_type(p),\n+        IMPL_KW => impl_trait_type(p),\n         _ if paths::is_path_start(p) => path_type(p),\n         _ => {\n             p.error(\"expected type\");\n@@ -183,6 +184,16 @@ fn for_type(p: &mut Parser) {\n     m.complete(p, FOR_TYPE);\n }\n \n+// test impl_trait_type\n+// type A = impl Iterator<Item=Foo<'a>> + 'a;\n+fn impl_trait_type(p: &mut Parser) {\n+    assert!(p.at(IMPL_KW));\n+    let m = p.start();\n+    p.bump();\n+    type_params::bounds_without_colon(p);\n+    m.complete(p, IMPL_TRAIT_TYPE);\n+}\n+\n // test path_type\n // type A = Foo;\n // type B = ::Foo;"}, {"sha": "156d42db4a5506f3e60cab05618c3edaf5abc2e4", "filename": "src/syntax_kinds/generated.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1af8eb9c08f974a1b3beecfebadeb03144ef337d/src%2Fsyntax_kinds%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af8eb9c08f974a1b3beecfebadeb03144ef337d/src%2Fsyntax_kinds%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds%2Fgenerated.rs?ref=1af8eb9c08f974a1b3beecfebadeb03144ef337d", "patch": "@@ -111,6 +111,7 @@ pub enum SyntaxKind {\n     PLACEHOLDER_TYPE,\n     FN_POINTER_TYPE,\n     FOR_TYPE,\n+    IMPL_TRAIT_TYPE,\n     REF_PAT,\n     BIND_PAT,\n     PLACEHOLDER_PAT,\n@@ -271,6 +272,7 @@ impl SyntaxKind {\n             PLACEHOLDER_TYPE => &SyntaxInfo { name: \"PLACEHOLDER_TYPE\" },\n             FN_POINTER_TYPE => &SyntaxInfo { name: \"FN_POINTER_TYPE\" },\n             FOR_TYPE => &SyntaxInfo { name: \"FOR_TYPE\" },\n+            IMPL_TRAIT_TYPE => &SyntaxInfo { name: \"IMPL_TRAIT_TYPE\" },\n             REF_PAT => &SyntaxInfo { name: \"REF_PAT\" },\n             BIND_PAT => &SyntaxInfo { name: \"BIND_PAT\" },\n             PLACEHOLDER_PAT => &SyntaxInfo { name: \"PLACEHOLDER_PAT\" },"}, {"sha": "54c5a7c4604d54115b1f048dc62ac691e7bb8547", "filename": "tests/data/parser/inline/0063_impl_trait_type.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1af8eb9c08f974a1b3beecfebadeb03144ef337d/tests%2Fdata%2Fparser%2Finline%2F0063_impl_trait_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af8eb9c08f974a1b3beecfebadeb03144ef337d/tests%2Fdata%2Fparser%2Finline%2F0063_impl_trait_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0063_impl_trait_type.rs?ref=1af8eb9c08f974a1b3beecfebadeb03144ef337d", "patch": "@@ -0,0 +1 @@\n+type A = impl Iterator<Item=Foo<'a>> + 'a;"}, {"sha": "1a7d8618f6b5c9129b0f253350315454cb5f7e56", "filename": "tests/data/parser/inline/0063_impl_trait_type.txt", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1af8eb9c08f974a1b3beecfebadeb03144ef337d/tests%2Fdata%2Fparser%2Finline%2F0063_impl_trait_type.txt", "raw_url": "https://github.com/rust-lang/rust/raw/1af8eb9c08f974a1b3beecfebadeb03144ef337d/tests%2Fdata%2Fparser%2Finline%2F0063_impl_trait_type.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0063_impl_trait_type.txt?ref=1af8eb9c08f974a1b3beecfebadeb03144ef337d", "patch": "@@ -0,0 +1,39 @@\n+FILE@[0; 43)\n+  TYPE_ITEM@[0; 43)\n+    TYPE_KW@[0; 4)\n+    NAME@[4; 7)\n+      WHITESPACE@[4; 5)\n+      IDENT@[5; 6) \"A\"\n+      WHITESPACE@[6; 7)\n+    EQ@[7; 8)\n+    IMPL_TRAIT_TYPE@[8; 41)\n+      WHITESPACE@[8; 9)\n+      IMPL_KW@[9; 13)\n+      PATH@[13; 37)\n+        PATH_SEGMENT@[13; 37)\n+          NAME_REF@[13; 22)\n+            WHITESPACE@[13; 14)\n+            IDENT@[14; 22) \"Iterator\"\n+          TYPE_ARG_LIST@[22; 37)\n+            L_ANGLE@[22; 23)\n+            ASSOC_TYPE_ARG@[23; 35)\n+              NAME_REF@[23; 27)\n+                IDENT@[23; 27) \"Item\"\n+              EQ@[27; 28)\n+              PATH_TYPE@[28; 35)\n+                PATH@[28; 35)\n+                  PATH_SEGMENT@[28; 35)\n+                    NAME_REF@[28; 31)\n+                      IDENT@[28; 31) \"Foo\"\n+                    TYPE_ARG_LIST@[31; 35)\n+                      L_ANGLE@[31; 32)\n+                      LIFETIME_ARG@[32; 34)\n+                        LIFETIME@[32; 34) \"'a\"\n+                      R_ANGLE@[34; 35)\n+            R_ANGLE@[35; 36)\n+            WHITESPACE@[36; 37)\n+      PLUS@[37; 38)\n+      WHITESPACE@[38; 39)\n+      LIFETIME@[39; 41) \"'a\"\n+    SEMI@[41; 42)\n+    WHITESPACE@[42; 43)"}]}