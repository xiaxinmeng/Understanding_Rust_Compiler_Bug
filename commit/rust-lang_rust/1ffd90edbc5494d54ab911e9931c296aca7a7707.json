{"sha": "1ffd90edbc5494d54ab911e9931c296aca7a7707", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmZmQ5MGVkYmM1NDk0ZDU0YWI5MTFlOTkzMWMyOTZhY2E3YTc3MDc=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-19T22:13:04Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-19T22:51:44Z"}, "message": "Remove redundant hashmap constructor functions.", "tree": {"sha": "7d6cf224429bdc7f26cef9b91ccd170a9318b7e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d6cf224429bdc7f26cef9b91ccd170a9318b7e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ffd90edbc5494d54ab911e9931c296aca7a7707", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ffd90edbc5494d54ab911e9931c296aca7a7707", "html_url": "https://github.com/rust-lang/rust/commit/1ffd90edbc5494d54ab911e9931c296aca7a7707", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ffd90edbc5494d54ab911e9931c296aca7a7707/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "384906c1e807196fbb8653e3233c92f920888d40", "url": "https://api.github.com/repos/rust-lang/rust/commits/384906c1e807196fbb8653e3233c92f920888d40", "html_url": "https://github.com/rust-lang/rust/commit/384906c1e807196fbb8653e3233c92f920888d40"}], "stats": {"total": 374, "additions": 155, "deletions": 219}, "files": [{"sha": "07e9400a1336fe2fd21971b05fe3af6188f83c35", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -668,11 +668,11 @@ fn configure(opts: options) -> cargo {\n \n     let p = result::get(get_cargo_dir());\n \n-    let sources = map::str_hash();\n+    let sources = map::HashMap();\n     try_parse_sources(&home.push(\"sources.json\"), sources);\n     try_parse_sources(&home.push(\"local-sources.json\"), sources);\n \n-    let dep_cache = map::str_hash();\n+    let dep_cache = map::HashMap();\n \n     let mut c = {\n         pgp: pgp::supported(),\n@@ -1577,7 +1577,7 @@ fn dump_cache(c: &cargo) {\n     need_dir(&c.root);\n \n     let out = c.root.push(\"cache.json\");\n-    let _root = json::Dict(map::str_hash());\n+    let _root = json::Dict(map::HashMap());\n \n     if os::path_exists(&out) {\n         copy_warn(&out, &c.root.push(\"cache.json.old\"));\n@@ -1598,11 +1598,11 @@ fn dump_sources(c: &cargo) {\n \n     match io::buffered_file_writer(&out) {\n         result::Ok(writer) => {\n-            let hash = map::str_hash();\n+            let hash = map::HashMap();\n             let root = json::Dict(hash);\n \n           for c.sources.each |k, v| {\n-                let chash = map::str_hash();\n+                let chash = map::HashMap();\n                 let child = json::Dict(chash);\n \n                 chash.insert(~\"url\", json::String(@v.url));"}, {"sha": "b10c40f634a86db220af9bbcbef3026fe351d85a", "filename": "src/libstd/json.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -517,7 +517,7 @@ impl Parser {\n         self.bump();\n         self.parse_whitespace();\n \n-        let values = map::str_hash();\n+        let values = map::HashMap();\n \n         if self.ch == '}' {\n           self.bump();\n@@ -802,7 +802,7 @@ impl <A: ToJson> ~[A]: ToJson {\n \n impl <A: ToJson Copy> HashMap<~str, A>: ToJson {\n     fn to_json() -> Json {\n-        let d = map::str_hash();\n+        let d = map::HashMap();\n         for self.each() |key, value| {\n             d.insert(copy key, value.to_json());\n         }\n@@ -832,7 +832,7 @@ impl Error: to_str::ToStr {\n #[cfg(test)]\n mod tests {\n     fn mk_dict(items: &[(~str, Json)]) -> Json {\n-        let d = map::str_hash();\n+        let d = map::HashMap();\n \n         for vec::each(items) |item| {\n             let (key, value) = copy *item;"}, {"sha": "cdca0aae15782167013fa20307afa1b091ede4fd", "filename": "src/libstd/map.rs", "status": "modified", "additions": 3, "deletions": 56, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -12,11 +12,8 @@ use core::cmp::Eq;\n use hash::Hash;\n use to_bytes::IterBytes;\n \n-export HashMap, hashfn, eqfn, Set, Map, chained, hashmap, str_hash;\n-export box_str_hash;\n-export bytes_hash, int_hash, uint_hash, set_add;\n-export hash_from_vec, hash_from_strs, hash_from_bytes;\n-export hash_from_ints, hash_from_uints;\n+export HashMap, hashfn, eqfn, Set, Map, chained, set_add;\n+export hash_from_vec;\n export vec_from_set;\n \n /// A convenience type to treat a hashmap as a set\n@@ -385,36 +382,6 @@ fn HashMap<K:Eq IterBytes Hash Const, V: Copy>()\n     chained::mk()\n }\n \n-/// Construct a hashmap for string-slice keys\n-fn str_slice_hash<V: Copy>() -> HashMap<&str, V> {\n-    return HashMap();\n-}\n-\n-/// Construct a hashmap for string keys\n-fn str_hash<V: Copy>() -> HashMap<~str, V> {\n-    return HashMap();\n-}\n-\n-/// Construct a hashmap for boxed string keys\n-fn box_str_hash<V: Copy>() -> HashMap<@~str, V> {\n-    HashMap()\n-}\n-\n-/// Construct a hashmap for byte string keys\n-fn bytes_hash<V: Copy>() -> HashMap<~[u8], V> {\n-    return HashMap();\n-}\n-\n-/// Construct a hashmap for int keys\n-fn int_hash<V: Copy>() -> HashMap<int, V> {\n-    return HashMap();\n-}\n-\n-/// Construct a hashmap for uint keys\n-fn uint_hash<V: Copy>() -> HashMap<uint, V> {\n-    return HashMap();\n-}\n-\n /// Convenience function for adding keys to a hashmap with nil type keys\n fn set_add<K:Eq IterBytes Hash Const Copy>(set: Set<K>, +key: K) -> bool {\n     set.insert(key, ())\n@@ -445,26 +412,6 @@ fn hash_from_vec<K: Eq IterBytes Hash Const Copy, V: Copy>(\n     map\n }\n \n-/// Construct a hashmap from a vector with string keys\n-fn hash_from_strs<V: Copy>(items: &[(~str, V)]) -> HashMap<~str, V> {\n-    hash_from_vec(items)\n-}\n-\n-/// Construct a hashmap from a vector with byte keys\n-fn hash_from_bytes<V: Copy>(items: &[(~[u8], V)]) -> HashMap<~[u8], V> {\n-    hash_from_vec(items)\n-}\n-\n-/// Construct a hashmap from a vector with int keys\n-fn hash_from_ints<V: Copy>(items: &[(int, V)]) -> HashMap<int, V> {\n-    hash_from_vec(items)\n-}\n-\n-/// Construct a hashmap from a vector with uint keys\n-fn hash_from_uints<V: Copy>(items: &[(uint, V)]) -> HashMap<uint, V> {\n-    hash_from_vec(items)\n-}\n-\n // XXX Transitional\n impl<K: Eq IterBytes Hash Copy, V: Copy> @Mut<LinearMap<K, V>>:\n     Map<K, V> {\n@@ -810,7 +757,7 @@ mod tests {\n \n     #[test]\n     fn test_hash_from_vec() {\n-        let map = map::hash_from_strs(~[\n+        let map = map::hash_from_vec(~[\n             (~\"a\", 1),\n             (~\"b\", 2),\n             (~\"c\", 3)"}, {"sha": "edd562fa1a74352e969625dd4dbdc35570880835", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -3,7 +3,7 @@\n #[forbid(deprecated_pattern)];\n \n use core::cmp::Eq;\n-use map::{HashMap, str_hash};\n+use map::HashMap;\n use io::{Reader, ReaderUtil};\n use dvec::DVec;\n use from_str::FromStr;\n@@ -213,7 +213,7 @@ fn encode_form_urlencoded(m: HashMap<~str, @DVec<@~str>>) -> ~str {\n fn decode_form_urlencoded(s: ~[u8]) ->\n     map::HashMap<~str, @dvec::DVec<@~str>> {\n     do io::with_bytes_reader(s) |rdr| {\n-        let m = str_hash();\n+        let m = HashMap();\n         let mut key = ~\"\";\n         let mut value = ~\"\";\n         let mut parsing_key = true;\n@@ -1069,26 +1069,24 @@ mod tests {\n \n     #[test]\n     fn test_encode_form_urlencoded() {\n-        let m = str_hash();\n+        let m = HashMap();\n         assert encode_form_urlencoded(m) == ~\"\";\n \n         m.insert(~\"\", @DVec());\n         m.insert(~\"foo\", @DVec());\n         assert encode_form_urlencoded(m) == ~\"\";\n \n-        let m = str_hash();\n+        let m = HashMap();\n         m.insert(~\"foo\", @dvec::from_vec(~[@~\"bar\", @~\"123\"]));\n         assert encode_form_urlencoded(m) == ~\"foo=bar&foo=123\";\n \n-        let m = str_hash();\n+        let m = HashMap();\n         m.insert(~\"foo bar\", @dvec::from_vec(~[@~\"abc\", @~\"12 = 34\"]));\n         assert encode_form_urlencoded(m) == ~\"foo+bar=abc&foo+bar=12+%3D+34\";\n     }\n \n     #[test]\n     fn test_decode_form_urlencoded() {\n-        use map::hash_from_strs;\n-\n         assert decode_form_urlencoded(~[]).size() == 0;\n \n         let s = str::to_bytes(~\"a=1&foo+bar=abc&foo+bar=12+%3D+34\");"}, {"sha": "7917ff4d886fe1675b16167258465297b138aa77", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -103,7 +103,7 @@ fn mk_ast_map_visitor() -> vt {\n }\n \n fn map_crate(diag: span_handler, c: crate) -> map {\n-    let cx = {map: std::map::int_hash(),\n+    let cx = {map: std::map::HashMap(),\n               mut path: ~[],\n               mut local_id: 0u,\n               diag: diag};"}, {"sha": "ef8a4b602d14e3c3828c75a19ae9b1d2676e0a91", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -259,10 +259,6 @@ impl def_id : core::to_bytes::IterBytes {\n     }\n }\n \n-fn new_def_hash<V: Copy>() -> std::map::HashMap<ast::def_id, V> {\n-    return std::map::HashMap::<ast::def_id, V>();\n-}\n-\n fn block_from_expr(e: @expr) -> blk {\n     let blk_ = default_block(~[], option::Some::<@expr>(e), e.id);\n     return {node: blk_, span: e.span};"}, {"sha": "17e34db0426e2ad9f2cf236b28a5159b3a4fdbd3", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -368,7 +368,7 @@ fn find_inline_attr(attrs: ~[ast::attribute]) -> inline_attr {\n \n fn require_unique_names(diagnostic: span_handler,\n                         metas: ~[@ast::meta_item]) {\n-    let map = map::str_hash();\n+    let map = map::HashMap();\n     for metas.each |meta| {\n         let name = get_meta_item_name(meta);\n "}, {"sha": "f4ad277b908a0bd983d6e75afc8fed1318a29be3", "filename": "src/libsyntax/ext/auto_serialize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_serialize.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -564,7 +564,7 @@ fn mk_ser_fn(cx: ext_ctxt, span: span, name: ast::ident,\n                       id: cx.next_id()}],\n                     tp_inputs);\n \n-    let tps_map = map::uint_hash();\n+    let tps_map = map::HashMap();\n     do vec::iter2(tps, tp_inputs) |tp, arg| {\n         let arg_ident = arg.ident;\n         tps_map.insert(\n@@ -771,7 +771,7 @@ fn mk_deser_fn(cx: ext_ctxt, span: span,\n                       id: cx.next_id()}],\n                     tp_inputs);\n \n-    let tps_map = map::uint_hash();\n+    let tps_map = map::HashMap();\n     do vec::iter2(tps, tp_inputs) |tp, arg| {\n         let arg_ident = arg.ident;\n         tps_map.insert("}, {"sha": "8143213dbf84e1c6a9fe01d4b2c8146cffe14d29", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -2,7 +2,6 @@ use std::map::HashMap;\n use parse::parser;\n use diagnostic::span_handler;\n use codemap::{codemap, span, expn_info, expanded_from};\n-use std::map::str_hash;\n \n // obsolete old-style #macro code:\n //\n@@ -74,7 +73,7 @@ fn syntax_expander_table() -> HashMap<~str, syntax_extension> {\n     fn builtin_item_tt(f: syntax_expander_tt_item_) -> syntax_extension {\n         item_tt({expander: f, span: None})\n     }\n-    let syntax_expanders = str_hash::<syntax_extension>();\n+    let syntax_expanders = HashMap::<~str,syntax_extension>();\n     syntax_expanders.insert(~\"macro\",\n                             macro_defining(ext::simplext::add_new_extension));\n     syntax_expanders.insert(~\"macro_rules\","}, {"sha": "8c7ef65d2270debab43e427bcf1cf46b4ec50c77", "filename": "src/libsyntax/ext/simplext.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Flibsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Flibsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsimplext.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -1,5 +1,5 @@\n use codemap::span;\n-use std::map::{HashMap, str_hash, uint_hash};\n+use std::map::HashMap;\n use dvec::DVec;\n \n use base::*;\n@@ -135,7 +135,7 @@ fn acumm_bindings(_cx: ext_ctxt, _b_dest: bindings, _b_src: bindings) { }\n \n fn pattern_to_selectors(cx: ext_ctxt, e: @expr) -> binders {\n     let res: binders =\n-        {real_binders: uint_hash::<selector>(),\n+        {real_binders: HashMap(),\n          literal_ast_matchers: DVec()};\n     //this oughta return binders instead, but macro args are a sequence of\n     //expressions, rather than a single expression\n@@ -153,7 +153,7 @@ bindings. Most of the work is done in p_t_s, which generates the\n selectors. */\n \n fn use_selectors_to_bind(b: binders, e: @expr) -> Option<bindings> {\n-    let res = uint_hash::<arb_depth<matchable>>();\n+    let res = HashMap();\n     //need to do this first, to check vec lengths.\n     for b.literal_ast_matchers.each |sel| {\n         match sel(match_expr(e)) { None => return None, _ => () }\n@@ -237,7 +237,7 @@ fn follow_for_trans(cx: ext_ctxt, mmaybe: Option<arb_depth<matchable>>,\n \n /* helper for transcribe_exprs: what vars from `b` occur in `e`? */\n fn free_vars(b: bindings, e: @expr, it: fn(ident)) {\n-    let idents: HashMap<ident, ()> = uint_hash::<()>();\n+    let idents: HashMap<ident, ()> = HashMap();\n     fn mark_ident(&&i: ident, _fld: ast_fold, b: bindings,\n                   idents: HashMap<ident, ()>) -> ident {\n         if b.contains_key(i) { idents.insert(i, ()); }"}, {"sha": "c0a8848139fceb255e70f7da10898151cbf013be", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -10,7 +10,7 @@ use parse::parse_sess;\n use dvec::DVec;\n use ast::{matcher, match_tok, match_seq, match_nonterminal, ident};\n use ast_util::mk_sp;\n-use std::map::{HashMap, uint_hash};\n+use std::map::HashMap;\n \n /* This is an Earley-like parser, without support for in-grammar nonterminals,\n only by calling out to the main rust parser for named nonterminals (which it\n@@ -185,7 +185,7 @@ fn nameize(p_s: parse_sess, ms: ~[matcher], res: ~[@named_match])\n           }\n         }\n     }\n-    let ret_val = uint_hash::<@named_match>();\n+    let ret_val = HashMap::<uint,@named_match>();\n     for ms.each() |m| { n_rec(p_s, m, res, ret_val) }\n     return ret_val;\n }"}, {"sha": "c6499e025daee89bba2ebcc8dc421e70658337ac", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -4,7 +4,7 @@ use macro_parser::{named_match, matched_seq, matched_nonterminal};\n use codemap::span;\n use parse::token::{EOF, INTERPOLATED, IDENT, token, nt_ident,\n                       ident_interner};\n-use std::map::{HashMap, box_str_hash};\n+use std::map::HashMap;\n \n export tt_reader,  new_tt_reader, dup_tt_reader, tt_next_token;\n \n@@ -47,7 +47,7 @@ fn new_tt_reader(sp_diag: span_handler, itr: ident_interner,\n               mut cur: @{readme: src, mut idx: 0u, dotdotdoted: false,\n                          sep: None, up: tt_frame_up(option::None)},\n               interpolations: match interp { /* just a convienience */\n-                None => std::map::uint_hash::<@named_match>(),\n+                None => std::map::HashMap::<uint,@named_match>(),\n                 Some(x) => x\n               },\n               mut repeat_idx: ~[mut], mut repeat_len: ~[],"}, {"sha": "0902567e8644de6b71242359caf1e787faf69f16", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -2,7 +2,7 @@ use print::pprust::expr_to_str;\n \n use result::Result;\n use either::{Either, Left, Right};\n-use std::map::{HashMap, str_hash};\n+use std::map::HashMap;\n use token::{can_begin_expr, is_ident, is_ident_or_path, is_plain_ident,\n             INTERPOLATED, special_idents};\n use codemap::{span,fss_none};"}, {"sha": "2bd5d15506375d34e64ed0f42891422aaeca89eb", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -1,6 +1,6 @@\n use util::interner;\n use util::interner::interner;\n-use std::map::{HashMap, str_hash};\n+use std::map::HashMap;\n use std::serialization::{Serializer,\n                             Deserializer,\n                             serialize_uint,\n@@ -369,7 +369,7 @@ fn mk_fake_ident_interner() -> ident_interner {\n  * the language and may not appear as identifiers.\n  */\n fn keyword_table() -> HashMap<~str, ()> {\n-    let keywords = str_hash();\n+    let keywords = HashMap();\n     for temporary_keyword_table().each_key |word| {\n         keywords.insert(word, ());\n     }\n@@ -384,7 +384,7 @@ fn keyword_table() -> HashMap<~str, ()> {\n \n /// Keywords that may be used as identifiers\n fn temporary_keyword_table() -> HashMap<~str, ()> {\n-    let words = str_hash();\n+    let words = HashMap();\n     let keys = ~[\n         ~\"self\", ~\"static\",\n     ];\n@@ -396,7 +396,7 @@ fn temporary_keyword_table() -> HashMap<~str, ()> {\n \n /// Full keywords. May not appear anywhere else.\n fn strict_keyword_table() -> HashMap<~str, ()> {\n-    let words = str_hash();\n+    let words = HashMap();\n     let keys = ~[\n         ~\"as\", ~\"assert\",\n         ~\"break\",\n@@ -421,7 +421,7 @@ fn strict_keyword_table() -> HashMap<~str, ()> {\n }\n \n fn reserved_keyword_table() -> HashMap<~str, ()> {\n-    let words = str_hash();\n+    let words = HashMap();\n     let keys = ~[\n         ~\"be\"\n     ];"}, {"sha": "5dcc4a5eca3ebab9361193865a1859e2383726cc", "filename": "src/rustc/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Frpath.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -167,7 +167,7 @@ fn get_install_prefix_rpath(target_triple: &str) -> Path {\n }\n \n fn minimize_rpaths(rpaths: &[Path]) -> ~[Path] {\n-    let set = map::str_hash::<()>();\n+    let set = map::HashMap();\n     let mut minimized = ~[];\n     for rpaths.each |rpath| {\n         let s = rpath.to_str();"}, {"sha": "bd97c896a450b3fc936832e6d9eddeba80f2823d", "filename": "src/rustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Flib%2Fllvm.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -1058,7 +1058,7 @@ fn mk_type_names() -> type_names {\n     pure fn hash(t: &TypeRef) -> uint { *t as uint }\n     pure fn eq(a: &TypeRef, b: &TypeRef) -> bool { *a == *b }\n     @{type_names: std::map::HashMap(),\n-      named_types: std::map::str_hash()}\n+      named_types: std::map::HashMap()}\n }\n \n fn type_to_str(names: type_names, ty: TypeRef) -> ~str {"}, {"sha": "017dbf6836f7f979b6f7ee95f46ca9ac9baf8937", "filename": "src/rustc/metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcreader.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -5,7 +5,7 @@ use syntax::{ast, ast_util};\n use syntax::attr;\n use syntax::visit;\n use syntax::codemap::span;\n-use std::map::{HashMap, int_hash};\n+use std::map::HashMap;\n use syntax::print::pprust;\n use filesearch::filesearch;\n use common::*;\n@@ -248,7 +248,7 @@ fn resolve_crate_deps(e: env, cdata: @~[u8]) -> cstore::cnum_map {\n     debug!(\"resolving deps of external crate\");\n     // The map from crate numbers in the crate we're resolving to local crate\n     // numbers\n-    let cnum_map = int_hash::<ast::crate_num>();\n+    let cnum_map = HashMap::<int,ast::crate_num>();\n     for decoder::get_crate_deps(e.intr, cdata).each |dep| {\n         let extrn_cnum = dep.cnum;\n         let cname = dep.name;"}, {"sha": "cec533a2d0c28de8e9b37a116e11ccd2e3cc8b51", "filename": "src/rustc/metadata/cstore.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcstore.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -4,7 +4,6 @@\n use std::map;\n use std::map::HashMap;\n use syntax::{ast, attr};\n-use syntax::ast_util::new_def_hash;\n use syntax::parse::token::ident_interner;\n \n export cstore;\n@@ -70,9 +69,9 @@ pure fn p(cstore: cstore) -> cstore_private {\n }\n \n fn mk_cstore(intr: ident_interner) -> cstore {\n-    let meta_cache = map::int_hash::<crate_metadata>();\n-    let crate_map = map::int_hash::<ast::crate_num>();\n-    let mod_path_map = new_def_hash();\n+    let meta_cache = map::HashMap::<int,crate_metadata>();\n+    let crate_map = map::HashMap::<int,ast::crate_num>();\n+    let mod_path_map = HashMap();\n     return private(@{metas: meta_cache,\n                      use_crate_map: crate_map,\n                      mod_path_map: mod_path_map,"}, {"sha": "cf76cf110e98b41b017e73e80bcf0bdc83b00629", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -1,7 +1,7 @@\n // Decoding metadata from a single crate's metadata\n \n use std::{ebml, map};\n-use std::map::{HashMap, str_hash};\n+use std::map::HashMap;\n use io::WriterUtil;\n use dvec::DVec;\n use syntax::{ast, ast_util};\n@@ -969,7 +969,7 @@ fn get_crate_module_paths(intr: ident_interner, cdata: cmd)\n     // find all module (path, def_ids), which are not\n     // fowarded path due to renamed import or reexport\n     let mut res = ~[];\n-    let mods = map::str_hash();\n+    let mods = map::HashMap::<~str,bool>();\n     do iter_crate_items(intr, cdata) |path, did| {\n         let m = mod_of_path(path);\n         if str::is_not_empty(m) {"}, {"sha": "d2327bd3ce5c0f8d0a052248575795c66a90fdd3", "filename": "src/rustc/middle/borrowck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -222,7 +222,7 @@ use syntax::ast_map;\n use syntax::codemap::span;\n use util::ppaux::{ty_to_str, region_to_str, explain_region,\n                   expr_repr, note_and_explain_region};\n-use std::map::{int_hash, HashMap, Set};\n+use std::map::{HashMap, Set};\n use std::list;\n use std::list::{List, Cons, Nil};\n use result::{Result, Ok, Err};\n@@ -244,7 +244,7 @@ fn check_crate(tcx: ty::ctxt,\n                                 method_map: method_map,\n                                 last_use_map: last_use_map,\n                                 root_map: root_map(),\n-                                mutbl_map: int_hash(),\n+                                mutbl_map: HashMap(),\n                                 mut loaned_paths_same: 0,\n                                 mut loaned_paths_imm: 0,\n                                 mut stable_paths: 0,"}, {"sha": "839c2f5589492371dfbf0aa7341eeee32eafce94", "filename": "src/rustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -61,7 +61,7 @@ fn check_loans(bccx: borrowck_ctxt,\n                crate: @ast::crate) {\n     let clcx = check_loan_ctxt(@{bccx: bccx,\n                                  req_maps: req_maps,\n-                                 reported: int_hash(),\n+                                 reported: HashMap(),\n                                  mut in_ctor: false,\n                                  mut declared_purity: ast::impure_fn,\n                                  mut fn_args: @~[]});"}, {"sha": "167e19152fa13ce4ff2808a6d1acf1663f076b75", "filename": "src/rustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -47,8 +47,8 @@ enum gather_loan_ctxt = @{bccx: borrowck_ctxt,\n \n fn gather_loans(bccx: borrowck_ctxt, crate: @ast::crate) -> req_maps {\n     let glcx = gather_loan_ctxt(@{bccx: bccx,\n-                                  req_maps: {req_loan_map: int_hash(),\n-                                             pure_map: int_hash()},\n+                                  req_maps: {req_loan_map: HashMap(),\n+                                             pure_map: HashMap()},\n                                   mut item_ub: 0,\n                                   mut root_ub: 0});\n     let v = visit::mk_vt(@{visit_expr: req_loans_in_expr,"}, {"sha": "25c5b16194dae0ba06c226ad8b76bbcf03c174bd", "filename": "src/rustc/middle/capture.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Fcapture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Fcapture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcapture.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -36,7 +36,7 @@ fn check_capture_clause(tcx: ty::ctxt,\n                         fn_expr_id: ast::node_id,\n                         cap_clause: ast::capture_clause) {\n     let freevars = freevars::get_freevars(tcx, fn_expr_id);\n-    let seen_defs = map::int_hash();\n+    let seen_defs = map::HashMap();\n \n     for (*cap_clause).each |cap_item| {\n         let cap_def = tcx.def_map.get(cap_item.id);\n@@ -62,7 +62,7 @@ fn compute_capture_vars(tcx: ty::ctxt,\n                         fn_proto: ty::fn_proto,\n                         cap_clause: ast::capture_clause) -> ~[capture_var] {\n     let freevars = freevars::get_freevars(tcx, fn_expr_id);\n-    let cap_map = map::int_hash();\n+    let cap_map = map::HashMap();\n \n     // first add entries for anything explicitly named in the cap clause\n "}, {"sha": "251ef2c89b7953eed09093f89aead213e023b004", "filename": "src/rustc/middle/freevars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ffreevars.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -32,7 +32,7 @@ type freevar_map = HashMap<ast::node_id, freevar_info>;\n // in order to start the search.\n fn collect_freevars(def_map: resolve::DefMap, blk: ast::blk)\n     -> freevar_info {\n-    let seen = int_hash();\n+    let seen = HashMap();\n     let refs = @mut ~[];\n \n     fn ignore_item(_i: @ast::item, &&_depth: int, _v: visit::vt<int>) { }\n@@ -87,7 +87,7 @@ fn collect_freevars(def_map: resolve::DefMap, blk: ast::blk)\n // one pass. This could be improved upon if it turns out to matter.\n fn annotate_freevars(def_map: resolve::DefMap, crate: @ast::crate) ->\n    freevar_map {\n-    let freevars = int_hash();\n+    let freevars = HashMap();\n \n     let walk_fn = fn@(_fk: visit::fn_kind, _decl: ast::fn_decl,\n                       blk: ast::blk, _sp: span, nid: ast::node_id) {"}, {"sha": "6e12475cd9d38e05208f28a83eedd75fc3351bae", "filename": "src/rustc/middle/lang_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flang_items.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -19,7 +19,7 @@ use syntax::ast_util::{local_def};\n use syntax::visit::{default_simple_visitor, mk_simple_visitor};\n use syntax::visit::{visit_crate, visit_item};\n \n-use std::map::{HashMap, str_hash};\n+use std::map::HashMap;\n use str_eq = str::eq;\n \n struct LanguageItems {\n@@ -84,7 +84,7 @@ fn LanguageItemCollector(crate: @crate, session: session,\n                          items: &r/LanguageItems)\n     -> LanguageItemCollector/&r {\n \n-    let item_refs = str_hash();\n+    let item_refs = HashMap();\n \n     item_refs.insert(~\"const\", &mut items.const_trait);\n     item_refs.insert(~\"copy\", &mut items.copy_trait);"}, {"sha": "630be4c6f6b8829f37edd22a7be5dea79a1e0db4", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -4,7 +4,7 @@ use middle::ty;\n use syntax::{ast, ast_util, visit};\n use syntax::attr;\n use syntax::codemap::span;\n-use std::map::{Map,HashMap,int_hash,hash_from_strs};\n+use std::map::{Map,HashMap};\n use std::smallintmap::{Map,SmallIntMap};\n use io::WriterUtil;\n use util::ppaux::{ty_to_str};\n@@ -198,7 +198,7 @@ fn get_lint_dict() -> lint_dict {\n            default: warn}),\n         */\n     ];\n-    hash_from_strs(v)\n+    std::map::hash_from_vec(v)\n }\n \n // This is a highly not-optimal set of data structure decisions.\n@@ -215,7 +215,7 @@ type lint_settings = {\n \n fn mk_lint_settings() -> lint_settings {\n     {default_settings: std::smallintmap::mk(),\n-     settings_map: int_hash()}\n+     settings_map: HashMap()}\n }\n \n fn get_lint_level(modes: lint_modes, lint: lint) -> level {"}, {"sha": "6a50bdf6698d049e35f866309d82baa6154338f9", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -101,7 +101,7 @@\n  */\n \n use dvec::DVec;\n-use std::map::{HashMap, int_hash, str_hash, uint_hash};\n+use std::map::HashMap;\n use syntax::{visit, ast_util};\n use syntax::print::pprust::{expr_to_str};\n use visit::vt;\n@@ -187,7 +187,7 @@ fn check_crate(tcx: ty::ctxt,\n         .. *visit::default_visitor()\n     });\n \n-    let last_use_map = int_hash();\n+    let last_use_map = HashMap();\n     let initial_maps = @IrMaps(tcx, method_map, last_use_map);\n     visit::visit_crate(*crate, initial_maps, visitor);\n     tcx.sess.abort_if_errors();\n@@ -290,10 +290,10 @@ fn IrMaps(tcx: ty::ctxt, method_map: typeck::method_map,\n         last_use_map: last_use_map,\n         num_live_nodes: 0u,\n         num_vars: 0u,\n-        live_node_map: int_hash(),\n-        variable_map: int_hash(),\n-        capture_map: int_hash(),\n-        field_map: uint_hash(),\n+        live_node_map: HashMap(),\n+        variable_map: HashMap(),\n+        capture_map: HashMap(),\n+        field_map: HashMap(),\n         var_kinds: ~[],\n         lnks: ~[]\n     }"}, {"sha": "e67b85b869c77840885fd08c4dccd2eba1023946", "filename": "src/rustc/middle/pat_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fpat_util.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -14,7 +14,7 @@ type PatIdMap = std::map::HashMap<ident, node_id>;\n // This is used because same-named variables in alternative patterns need to\n // use the node_id of their namesake in the first pattern.\n fn pat_id_map(dm: resolve::DefMap, pat: @pat) -> PatIdMap {\n-    let map = std::map::uint_hash();\n+    let map = std::map::HashMap();\n     do pat_bindings(dm, pat) |_bm, p_id, _s, n| {\n       map.insert(path_to_ident(n), p_id);\n     };"}, {"sha": "5c6e55fe4226afcc8dfad36d8b89680869eab736", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -12,15 +12,14 @@ use middle::ty;\n use syntax::{ast, visit};\n use syntax::codemap::span;\n use syntax::print::pprust;\n-use syntax::ast_util::new_def_hash;\n use syntax::ast_map;\n use dvec::DVec;\n use metadata::csearch;\n use ty::{region_variance, rv_covariant, rv_invariant, rv_contravariant};\n \n use std::list;\n use std::list::list;\n-use std::map::{HashMap, int_hash};\n+use std::map::HashMap;\n \n type parent = Option<ast::node_id>;\n \n@@ -333,8 +332,8 @@ fn resolve_crate(sess: session, def_map: resolve::DefMap,\n                  crate: @ast::crate) -> region_map {\n     let cx: ctxt = ctxt {sess: sess,\n                          def_map: def_map,\n-                         region_map: int_hash(),\n-                         root_exprs: int_hash(),\n+                         region_map: HashMap(),\n+                         root_exprs: HashMap(),\n                          parent: None};\n     let visitor = visit::mk_vt(@{\n         visit_block: resolve_block,\n@@ -762,8 +761,8 @@ fn determine_rp_in_crate(sess: session,\n     let cx = determine_rp_ctxt_(@{sess: sess,\n                                   ast_map: ast_map,\n                                   def_map: def_map,\n-                                  region_paramd_items: int_hash(),\n-                                  dep_map: int_hash(),\n+                                  region_paramd_items: HashMap(),\n+                                  dep_map: HashMap(),\n                                   worklist: DVec(),\n                                   mut item_id: 0,\n                                   mut anon_implies_rp: false,"}, {"sha": "e2aa963750a4534860d87b528e0b5c6ccf2ba674", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -42,7 +42,7 @@ use syntax::ast::{ty_u16, ty_u32, ty_u64, ty_u8, ty_uint, type_value_ns};\n use syntax::ast::{variant, view_item, view_item_export, view_item_import};\n use syntax::ast::{view_item_use, view_path_glob, view_path_list};\n use syntax::ast::{view_path_simple, visibility, anonymous, named};\n-use syntax::ast_util::{def_id_of_def, dummy_sp, local_def, new_def_hash};\n+use syntax::ast_util::{def_id_of_def, dummy_sp, local_def};\n use syntax::ast_util::{path_to_ident, walk_pat, trait_method_to_ty_method};\n use syntax::attr::{attr_metas, contains_name};\n use syntax::print::pprust::{pat_to_str, path_to_str};\n@@ -60,7 +60,7 @@ use vec::pop;\n use syntax::parse::token::ident_interner;\n \n use std::list::{Cons, List, Nil};\n-use std::map::{HashMap, int_hash, uint_hash};\n+use std::map::HashMap;\n use str_eq = str::eq;\n \n // Definition mapping\n@@ -458,7 +458,7 @@ fn Module(parent_link: ParentLink, def_id: Option<def_id>) -> Module {\n         def_id: def_id,\n         children: atom_hashmap(),\n         imports: DVec(),\n-        anonymous_children: int_hash(),\n+        anonymous_children: HashMap(),\n         exported_names: atom_hashmap(),\n         import_resolutions: atom_hashmap(),\n         glob_count: 0u,\n@@ -701,8 +701,8 @@ fn Resolver(session: session, lang_items: LanguageItems,\n \n         unused_import_lint_level: unused_import_lint_level(session),\n \n-        trait_info: new_def_hash(),\n-        structs: new_def_hash(),\n+        trait_info: HashMap(),\n+        structs: HashMap(),\n \n         unresolved_imports: 0u,\n \n@@ -720,10 +720,10 @@ fn Resolver(session: session, lang_items: LanguageItems,\n \n         namespaces: ~[ ModuleNS, TypeNS, ValueNS ],\n \n-        def_map: int_hash(),\n-        export_map: int_hash(),\n-        export_map2: int_hash(),\n-        trait_map: @int_hash(),\n+        def_map: HashMap(),\n+        export_map: HashMap(),\n+        export_map2: HashMap(),\n+        trait_map: @HashMap(),\n \n         intr: session.intr()\n     };\n@@ -1510,7 +1510,7 @@ impl Resolver {\n      * crate.\n      */\n     fn build_reduced_graph_for_external_crate(root: @Module) {\n-        let modules = new_def_hash();\n+        let modules = HashMap();\n \n         // Create all the items reachable by paths.\n         for each_path(self.session.cstore, get(root.def_id).crate)\n@@ -3664,7 +3664,7 @@ impl Resolver {\n     }\n \n     fn binding_mode_map(pat: @pat) -> BindingMap {\n-        let result = uint_hash();\n+        let result = HashMap();\n         do pat_bindings(self.def_map, pat) |binding_mode, _id, sp, path| {\n             let ident = path_to_ident(path);\n             result.insert(ident,"}, {"sha": "dddcc70f23224da9f6ddd0fc785628161ac8c6c1", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -1096,7 +1096,7 @@ fn trans_alt_inner(scope_cx: block,\n         // to an alloca() that will be the value for that local variable.\n         // Note that we use the names because each binding will have many ids\n         // from the various alternatives.\n-        let bindings_map = std::map::uint_hash();\n+        let bindings_map = std::map::HashMap();\n         do pat_bindings(tcx.def_map, arm.pats[0]) |bm, p_id, _s, path| {\n             let ident = path_to_ident(path);\n             let variable_ty = node_id_type(bcx, p_id);"}, {"sha": "2cd4b2c7ec85f68bbd074a78a3ea531c825b70d4", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -16,7 +16,6 @@\n use libc::{c_uint, c_ulonglong};\n use std::{map, time, list};\n use std::map::HashMap;\n-use std::map::{int_hash, str_hash};\n use driver::session;\n use session::session;\n use syntax::attr;\n@@ -1407,9 +1406,9 @@ fn new_fn_ctxt_w_id(ccx: @crate_ctxt, path: path,\n           mut llself: None,\n           mut personality: None,\n           mut loop_ret: None,\n-          llargs: int_hash::<local_val>(),\n-          lllocals: int_hash::<local_val>(),\n-          llupvars: int_hash::<ValueRef>(),\n+          llargs: HashMap::<int,local_val>(),\n+          lllocals: HashMap::<int,local_val>(),\n+          llupvars: HashMap::<int,ValueRef>(),\n           id: id,\n           param_substs: param_substs,\n           span: sp,\n@@ -2309,7 +2308,7 @@ fn declare_intrinsics(llmod: ModuleRef) -> HashMap<~str, ValueRef> {\n     let frameaddress = decl_cdecl_fn(llmod, ~\"llvm.frameaddress\",\n                                      T_fn(T_frameaddress_args,\n                                           T_ptr(T_i8())));\n-    let intrinsics = str_hash::<ValueRef>();\n+    let intrinsics = HashMap::<~str,ValueRef>();\n     intrinsics.insert(~\"llvm.gcroot\", gcroot);\n     intrinsics.insert(~\"llvm.gcread\", gcread);\n     intrinsics.insert(~\"llvm.memmove.p0i8.p0i8.i32\", memmove32);\n@@ -2624,35 +2623,35 @@ fn trans_crate(sess: session::session,\n           llmod: llmod,\n           td: td,\n           tn: tn,\n-          externs: str_hash::<ValueRef>(),\n+          externs: HashMap::<~str,ValueRef>(),\n           intrinsics: intrinsics,\n-          item_vals: int_hash::<ValueRef>(),\n+          item_vals: HashMap::<int,ValueRef>(),\n           exp_map: emap,\n           exp_map2: emap2,\n           reachable: reachable,\n-          item_symbols: int_hash::<~str>(),\n+          item_symbols: HashMap::<int,~str>(),\n           mut main_fn: None::<ValueRef>,\n           link_meta: link_meta,\n           enum_sizes: ty::new_ty_hash(),\n-          discrims: ast_util::new_def_hash::<ValueRef>(),\n-          discrim_symbols: int_hash::<~str>(),\n+          discrims: HashMap(),\n+          discrim_symbols: HashMap::<int,~str>(),\n           tydescs: ty::new_ty_hash(),\n           mut finished_tydescs: false,\n-          external: ast_util::new_def_hash(),\n-          monomorphized: map::HashMap(),\n-          monomorphizing: ast_util::new_def_hash(),\n-          type_use_cache: ast_util::new_def_hash(),\n+          external: HashMap(),\n+          monomorphized: HashMap(),\n+          monomorphizing: HashMap(),\n+          type_use_cache: HashMap(),\n           vtables: map::HashMap(),\n-          const_cstr_cache: map::str_hash(),\n-          const_globals: int_hash::<ValueRef>(),\n-          module_data: str_hash::<ValueRef>(),\n+          const_cstr_cache: HashMap(),\n+          const_globals: HashMap::<int,ValueRef>(),\n+          module_data: HashMap::<~str,ValueRef>(),\n           lltypes: ty::new_ty_hash(),\n           names: new_namegen(sess.parse_sess.interner),\n           next_addrspace: new_addrspace_gen(),\n           symbol_hasher: symbol_hasher,\n           type_hashcodes: ty::new_ty_hash(),\n           type_short_names: ty::new_ty_hash(),\n-          all_llvm_symbols: str_hash::<()>(),\n+          all_llvm_symbols: HashMap::<~str,()>(),\n           tcx: tcx,\n           maps: maps,\n           stats:\n@@ -2665,12 +2664,12 @@ fn trans_crate(sess: session::session,\n                mut n_inlines: 0u,\n                mut n_closures: 0u,\n                llvm_insn_ctxt: @mut ~[],\n-               llvm_insns: str_hash(),\n+               llvm_insns: HashMap(),\n                fn_times: @mut ~[]},\n           upcalls:\n               upcall::declare_upcalls(targ_cfg, tn, tydesc_type,\n                                       llmod),\n-          rtcalls: str_hash::<ast::def_id>(),\n+          rtcalls: HashMap::<~str,ast::def_id>(),\n           tydesc_type: tydesc_type,\n           int_type: int_type,\n           float_type: float_type,\n@@ -2681,7 +2680,7 @@ fn trans_crate(sess: session::session,\n           crate_map: crate_map,\n           mut uses_gc: false,\n           dbg_cx: dbg_cx,\n-          class_ctors: int_hash::<ast::def_id>(),\n+          class_ctors: HashMap::<int,ast::def_id>(),\n           mut do_not_commit_warning_issued: false};\n \n "}, {"sha": "c0846a601bd8d53f85e401f418e076293ff331ec", "filename": "src/rustc/middle/trans/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -1,4 +1,4 @@\n-use std::map::{HashMap, str_hash};\n+use std::map::HashMap;\n use libc::{c_uint, c_int};\n use lib::llvm::llvm;\n use syntax::codemap;\n@@ -24,7 +24,7 @@ fn count_insn(cx: block, category: &str) {\n         // Build version of path with cycles removed.\n \n         // Pass 1: scan table mapping str -> rightmost pos.\n-        let mm = str_hash();\n+        let mm = HashMap();\n         let len = vec::len(*v);\n         let mut i = 0u;\n         while i < len {"}, {"sha": "641f0024820e48c471d2c25ade1cf91e48fba388", "filename": "src/rustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -91,7 +91,7 @@ type debug_ctxt = {\n };\n \n fn mk_ctxt(crate: ~str, intr: ident_interner) -> debug_ctxt {\n-    {llmetadata: map::int_hash(),\n+    {llmetadata: map::HashMap(),\n      names: new_namegen(intr),\n      crate_file: crate}\n }"}, {"sha": "f1a4a1ff5d1267065f640c43450e1d7a9192479a", "filename": "src/rustc/middle/trans/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -24,7 +24,7 @@ type ctx = {exp_map: resolve::ExportMap,\n \n fn find_reachable(crate_mod: _mod, exp_map: resolve::ExportMap,\n                   tcx: ty::ctxt, method_map: typeck::method_map) -> map {\n-    let rmap = std::map::int_hash();\n+    let rmap = std::map::HashMap();\n     let cx = {exp_map: exp_map, tcx: tcx, method_map: method_map, rmap: rmap};\n     traverse_public_mod(cx, crate_mod);\n     traverse_all_resources_and_impls(cx, crate_mod);"}, {"sha": "149a751c41fcee3848cc36ac25b99746560c02d3", "filename": "src/rustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -1,4 +1,4 @@\n-use std::map::{HashMap,str_hash};\n+use std::map::HashMap;\n use driver::session::session;\n use lib::llvm::{TypeRef, ValueRef};\n use syntax::ast;"}, {"sha": "fcbe0427af0aa383981becb8727b2ca8e3dbcaf9", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -11,7 +11,7 @@ use back::abi;\n use middle::ty;\n use middle::ty::field;\n use syntax::ast;\n-use syntax::ast_util::{dummy_sp, new_def_hash};\n+use syntax::ast_util::dummy_sp;\n use syntax::util::interner;\n use util::ppaux::ty_to_str;\n use syntax::codemap::span;"}, {"sha": "5197bd9a16172958d1e9f67a642a39d997c535bd", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -8,7 +8,7 @@ use driver::session;\n use session::session;\n use syntax::{ast, ast_map};\n use syntax::ast_util;\n-use syntax::ast_util::{is_local, local_def, new_def_hash};\n+use syntax::ast_util::{is_local, local_def};\n use syntax::codemap::span;\n use metadata::csearch;\n use util::ppaux::{region_to_str, explain_region, vstore_to_str,\n@@ -856,23 +856,23 @@ fn mk_ctxt(s: session::session,\n       region_map: region_map,\n       region_paramd_items: region_paramd_items,\n       node_types: @smallintmap::mk(),\n-      node_type_substs: map::int_hash(),\n+      node_type_substs: map::HashMap(),\n       items: amap,\n-      intrinsic_defs: map::uint_hash(),\n+      intrinsic_defs: map::HashMap(),\n       freevars: freevars,\n-      tcache: ast_util::new_def_hash(),\n+      tcache: HashMap(),\n       rcache: mk_rcache(),\n-      ccache: ast_util::new_def_hash(),\n+      ccache: HashMap(),\n       short_names_cache: new_ty_hash(),\n       needs_drop_cache: new_ty_hash(),\n       needs_unwind_cleanup_cache: new_ty_hash(),\n       kind_cache: new_ty_hash(),\n-      ast_ty_to_ty_cache: map::HashMap(),\n-      enum_var_cache: new_def_hash(),\n-      trait_method_cache: new_def_hash(),\n-      ty_param_bounds: map::int_hash(),\n-      inferred_modes: map::int_hash(),\n-      adjustments: map::int_hash(),\n+      ast_ty_to_ty_cache: HashMap(),\n+      enum_var_cache: HashMap(),\n+      trait_method_cache: HashMap(),\n+      ty_param_bounds: HashMap(),\n+      inferred_modes: HashMap(),\n+      adjustments: HashMap(),\n       normalized_cache: new_ty_hash(),\n       lang_items: move lang_items}\n }"}, {"sha": "20c12c25cca0573339811a5bd1c8ebcc7447e51a", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -55,7 +55,7 @@ use middle::ty::{arg, field, node_type_table, mk_nil, ty_param_bounds_and_ty};\n use middle::ty::{vstore_uniq};\n use std::smallintmap;\n use std::map;\n-use std::map::{HashMap, int_hash};\n+use std::map::HashMap;\n use std::serialization::{serialize_uint, deserialize_uint};\n use syntax::print::pprust::*;\n use util::ppaux::{ty_to_str, tys_to_str, region_to_str,\n@@ -329,10 +329,10 @@ fn check_crate(tcx: ty::ctxt,\n             -> (method_map, vtable_map) {\n \n     let ccx = @crate_ctxt_({trait_map: trait_map,\n-                            method_map: std::map::int_hash(),\n-                            vtable_map: std::map::int_hash(),\n+                            method_map: std::map::HashMap(),\n+                            vtable_map: std::map::HashMap(),\n                             coherence_info: @coherence::CoherenceInfo(),\n-                            provided_methods_map: std::map::int_hash(),\n+                            provided_methods_map: std::map::HashMap(),\n                             tcx: tcx});\n     collect::collect_item_types(ccx, crate);\n     coherence::check_coherence(ccx, crate);"}, {"sha": "5a078210276e8b0cee8dbafb5270a1a07e33ec52", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -79,7 +79,7 @@ use result::{Result, Ok, Err};\n use syntax::print::pprust;\n use syntax::parse::token::special_idents;\n \n-use std::map::{str_hash, uint_hash};\n+use std::map::HashMap;\n \n type self_info = {\n     self_ty: ty::t,\n@@ -141,10 +141,10 @@ struct fn_ctxt {\n fn blank_inherited(ccx: @crate_ctxt) -> @inherited {\n     @inherited {\n         infcx: infer::new_infer_ctxt(ccx.tcx),\n-        locals: int_hash(),\n-        node_types: map::int_hash(),\n-        node_type_substs: map::int_hash(),\n-        adjustments: map::int_hash()\n+        locals: HashMap(),\n+        node_types: map::HashMap(),\n+        node_type_substs: map::HashMap(),\n+        adjustments: map::HashMap()\n     }\n }\n \n@@ -425,7 +425,7 @@ fn check_method(ccx: @crate_ctxt, method: @ast::method,\n \n fn check_no_duplicate_fields(tcx: ty::ctxt, fields:\n                              ~[(ast::ident, span)]) {\n-    let field_names = uint_hash();\n+    let field_names = HashMap();\n \n     for fields.each |p| {\n         let (id, sp) = p;\n@@ -1963,7 +1963,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n \n         // Look up the class fields and build up a map.\n         let class_fields = ty::lookup_class_fields(tcx, class_id);\n-        let class_field_map = uint_hash();\n+        let class_field_map = HashMap();\n         let mut fields_found = 0;\n         for class_fields.each |field| {\n             // XXX: Check visibility here."}, {"sha": "cd454c54b2c3c19df077a175e407f113536d0bdc", "filename": "src/rustc/middle/typeck/check/alt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -349,13 +349,13 @@ fn check_pat(pcx: pat_ctxt, pat: @ast::pat, expected: ty::t) {\n         }\n \n         // Index the class fields.\n-        let field_map = std::map::uint_hash();\n+        let field_map = std::map::HashMap();\n         for class_fields.eachi |i, class_field| {\n             field_map.insert(class_field.ident, i);\n         }\n \n         // Typecheck each field.\n-        let found_fields = std::map::uint_hash();\n+        let found_fields = std::map::HashMap();\n         for fields.each |field| {\n             match field_map.find(field.ident) {\n                 Some(index) => {"}, {"sha": "edb157a60592992d2f09909f81d3a5896543278b", "filename": "src/rustc/middle/typeck/check/method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -76,7 +76,7 @@ use syntax::ast::{def_id, sty_by_ref, sty_value, sty_region, sty_box,\n                   m_const, m_mutbl, m_imm};\n use syntax::ast_map;\n use syntax::ast_map::node_id_to_str;\n-use syntax::ast_util::{dummy_sp, new_def_hash};\n+use syntax::ast_util::dummy_sp;\n use dvec::DVec;\n \n fn lookup(\n@@ -98,7 +98,7 @@ fn lookup(\n         callee_id: callee_id,\n         m_name: m_name,\n         supplied_tps: supplied_tps,\n-        impl_dups: new_def_hash(),\n+        impl_dups: HashMap(),\n         inherent_candidates: DVec(),\n         extension_candidates: DVec()\n     };"}, {"sha": "08564ff41511dd8b9852aeae434db29675879135", "filename": "src/rustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -1,7 +1,6 @@\n use check::{fn_ctxt, impl_self_ty};\n use infer::{resolve_type, resolve_and_force_all_but_regions,\n                fixup_err_to_str};\n-use ast_util::new_def_hash;\n use syntax::print::pprust;\n use result::{Result, Ok, Err};\n use util::common::indenter;\n@@ -177,7 +176,7 @@ fn lookup_vtable(fcx: @fn_ctxt,\n         _ => {\n             let mut found = ~[];\n \n-            let mut impls_seen = new_def_hash();\n+            let mut impls_seen = HashMap();\n \n             match fcx.ccx.coherence_info.extension_methods.find(trait_id) {\n                 None => {"}, {"sha": "e4ffc6c17c3c23f74c843a57a3df63405d1c18be", "filename": "src/rustc/middle/typeck/coherence.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -23,7 +23,7 @@ use syntax::ast::{item_foreign_mod, item_impl, item_mac, item_mod};\n use syntax::ast::{item_trait, item_ty, local_crate, method, node_id};\n use syntax::ast::{trait_ref};\n use syntax::ast_map::node_item;\n-use syntax::ast_util::{def_id_of_def, dummy_sp, new_def_hash};\n+use syntax::ast_util::{def_id_of_def, dummy_sp};\n use syntax::codemap::span;\n use syntax::visit::{default_simple_visitor, default_visitor};\n use syntax::visit::{mk_simple_visitor, mk_vt, visit_crate, visit_item};\n@@ -32,7 +32,7 @@ use util::ppaux::ty_to_str;\n \n use dvec::DVec;\n use result::Ok;\n-use std::map::{HashMap, int_hash};\n+use std::map::HashMap;\n use uint::range;\n use vec::{len, push};\n \n@@ -130,8 +130,8 @@ struct CoherenceInfo {\n \n fn CoherenceInfo() -> CoherenceInfo {\n     CoherenceInfo {\n-        inherent_methods: new_def_hash(),\n-        extension_methods: new_def_hash()\n+        inherent_methods: HashMap(),\n+        extension_methods: HashMap()\n     }\n }\n \n@@ -140,8 +140,8 @@ fn CoherenceChecker(crate_context: @crate_ctxt) -> CoherenceChecker {\n         crate_context: crate_context,\n         inference_context: new_infer_ctxt(crate_context.tcx),\n \n-        base_type_def_ids: new_def_hash(),\n-        privileged_implementations: int_hash()\n+        base_type_def_ids: HashMap(),\n+        privileged_implementations: HashMap()\n     }\n }\n \n@@ -728,7 +728,7 @@ impl CoherenceChecker {\n     }\n \n     fn add_external_crates() {\n-        let impls_seen = new_def_hash();\n+        let impls_seen = HashMap();\n \n         let crate_store = self.crate_context.tcx.sess.cstore;\n         do iter_crate_data(crate_store) |crate_number, _crate_metadata| {"}, {"sha": "02e170d575e93619f1aa72e08d0a83a85e076287", "filename": "src/rustc/middle/typeck/infer/region_var_bindings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_var_bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_var_bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_var_bindings.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -308,7 +308,7 @@ because `&x` was created alone, but is relatable to `&A`.\n use dvec::DVec;\n use result::Result;\n use result::{Ok, Err};\n-use std::map::{HashMap, uint_hash};\n+use std::map::HashMap;\n use std::cell::{Cell, empty_cell};\n use std::list::{List, Nil, Cons};\n \n@@ -1188,7 +1188,7 @@ impl RegionVarBindings {\n     fn collect_concrete_regions(graph: &Graph,\n                                 orig_node_idx: RegionVid,\n                                 dir: Direction) -> ~[SpannedRegion] {\n-        let set = uint_hash();\n+        let set = HashMap();\n         let mut stack = ~[orig_node_idx];\n         set.insert(*orig_node_idx, ());\n         let mut result = ~[];"}, {"sha": "32cce47610b817c7851846dd154bfd2d34b4f8f8", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -157,9 +157,9 @@ fn main(args: ~[~str]) {\n         let rng = rand::seeded_rng(copy seed);\n         let mut results = empty_results();\n         int_benchmarks::<map::HashMap<uint, uint>>(\n-            map::uint_hash, rng, num_keys, &mut results);\n+            map::HashMap, rng, num_keys, &mut results);\n         str_benchmarks::<map::HashMap<~str, uint>>(\n-            map::str_hash, rng, num_keys, &mut results);\n+            map::HashMap, rng, num_keys, &mut results);\n         write_results(\"libstd::map::hashmap\", &results);\n     }\n "}, {"sha": "78225a0d68a1fae35c403ef3a640b1310edc5600", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -94,7 +94,7 @@ fn windows_with_carry(bb: &[u8], nn: uint,\n fn make_sequence_processor(sz: uint, from_parent: pipes::Port<~[u8]>,\n                            to_parent: pipes::Chan<~str>) {\n    \n-   let freqs: HashMap<~[u8], uint> = map::bytes_hash();\n+   let freqs: HashMap<~[u8], uint> = map::HashMap();\n    let mut carry: ~[u8] = ~[];\n    let mut total: uint = 0u;\n "}, {"sha": "dae261502ce23992908ef53218db2a1bfd13dfb6", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -91,7 +91,7 @@ fn windows_with_carry(bb: &[u8], nn: uint,\n fn make_sequence_processor(sz: uint, from_parent: comm::Port<~[u8]>,\n                            to_parent: comm::Chan<~str>) {\n    \n-   let freqs: HashMap<~[u8], uint> = map::bytes_hash();\n+   let freqs: HashMap<~[u8], uint> = map::HashMap();\n    let mut carry: ~[u8] = ~[];\n    let mut total: uint = 0u;\n "}, {"sha": "cc07ea04e7708ed5665a3e77683a5d83d5d0b0cd", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -120,7 +120,7 @@ fn writer(path: ~str, writech: comm::Chan<comm::Chan<line>>, size: uint)\n     };\n     cout.write_line(~\"P4\");\n     cout.write_line(fmt!(\"%u %u\", size, size));\n-    let lines: HashMap<uint, ~[u8]> = std::map::uint_hash();\n+    let lines: HashMap<uint, ~[u8]> = HashMap();\n     let mut done = 0_u;\n     let mut i = 0_u;\n     while i < size {"}, {"sha": "f1140a32a28ece450410d84df377d01cba398112", "filename": "src/test/compile-fail/map-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -6,7 +6,7 @@ use std::map::Map;\n // Test that trait types printed in error msgs include the type arguments.\n \n fn main() {\n-    let x: Map<~str,~str> = map::str_hash::<~str>() as Map::<~str,~str>;\n+    let x: Map<~str,~str> = map::HashMap::<~str,~str>() as Map::<~str,~str>;\n     let y: Map<uint,~str> = x;\n     //~^ ERROR mismatched types: expected `@std::map::Map<uint,~str>`\n }"}, {"sha": "5d89cee10837d3a7819d8cbf4ed8f749ce295533", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -35,7 +35,7 @@ mod map_reduce {\n     }\n \n     fn map_task(ctrl: Chan<ctrl_proto>, input: ~str) {\n-        let intermediates = map::str_hash();\n+        let intermediates = map::HashMap();\n \n         fn emit(im: map::HashMap<~str, int>, ctrl: Chan<ctrl_proto>, key: ~str,\n                 val: ~str) {\n@@ -66,7 +66,7 @@ mod map_reduce {\n \n         let mut reducers: map::HashMap<~str, int>;\n \n-        reducers = map::str_hash();\n+        reducers = map::HashMap();\n \n         start_mappers(Chan(ctrl), inputs);\n "}, {"sha": "d1e70d5d9d59a997d246880573abf50870cb6e59", "filename": "src/test/run-pass/issue-1696.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1696.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -3,7 +3,7 @@ use std::map;\n use std::map::HashMap;\n \n fn main() {\n-    let m = map::bytes_hash();\n+    let m = map::HashMap();\n     m.insert(str::to_bytes(~\"foo\"), str::to_bytes(~\"bar\"));\n     log(error, m);\n }"}, {"sha": "a6868186c91785416772b3f808dfae3ed9b2ce63", "filename": "src/test/run-pass/issue-2631-b.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd90edbc5494d54ab911e9931c296aca7a7707/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs?ref=1ffd90edbc5494d54ab911e9931c296aca7a7707", "patch": "@@ -6,11 +6,11 @@ extern mod std;\n \n use req::*;\n use std::map::*;\n-use std::map::str_hash;\n+use std::map::HashMap;\n \n fn main() {\n   let v = ~[@~\"hi\"];\n-  let m: req::header_map = str_hash();\n+  let m: req::header_map = HashMap();\n   m.insert(~\"METHOD\", @dvec::from_vec(v));\n   request::<int>(m);\n }"}]}