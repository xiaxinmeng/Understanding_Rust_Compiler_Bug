{"sha": "9a1d2a46c249fa81294c156b9e23b624e14495cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMWQyYTQ2YzI0OWZhODEyOTRjMTU2YjllMjNiNjI0ZTE0NDk1Y2Q=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-07T22:56:14Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-07T22:56:14Z"}, "message": "Merge #760\n\n760: Add new assist to remove dbg!() calls r=matklad a=vipentti\n\nThis fixes #758.\r\n\r\nCurrently we try to maintain the cursor position relative to the statement under\r\ncursor, if the cursor is inside the dbg! macro call.\r\n\r\nMeaning:\r\n```rust\r\nlet foo = dbg!(some.complex<|>().expression());\r\n```\r\nShould turn into:\r\n```rust\r\nlet foo = some.complex<|>().expression();\r\n```\r\nWith the cursor staying in place.\n\nCo-authored-by: Ville Penttinen <villem.penttinen@gmail.com>", "tree": {"sha": "774b4ad5f5f769e6045330c1b886ac1995eb2066", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/774b4ad5f5f769e6045330c1b886ac1995eb2066"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a1d2a46c249fa81294c156b9e23b624e14495cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a1d2a46c249fa81294c156b9e23b624e14495cd", "html_url": "https://github.com/rust-lang/rust/commit/9a1d2a46c249fa81294c156b9e23b624e14495cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a1d2a46c249fa81294c156b9e23b624e14495cd/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "7e3776ca56a7f042a6a07f7cc2a4b27feb652516", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e3776ca56a7f042a6a07f7cc2a4b27feb652516", "html_url": "https://github.com/rust-lang/rust/commit/7e3776ca56a7f042a6a07f7cc2a4b27feb652516"}, {"sha": "be7c5eecc4ec9e099bf34e78289cd672aacbd168", "url": "https://api.github.com/repos/rust-lang/rust/commits/be7c5eecc4ec9e099bf34e78289cd672aacbd168", "html_url": "https://github.com/rust-lang/rust/commit/be7c5eecc4ec9e099bf34e78289cd672aacbd168"}], "stats": {"total": 125, "additions": 125, "deletions": 0}, "files": [{"sha": "555af51bce09b28e6dcd1b526f1df353b0c0be4e", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a1d2a46c249fa81294c156b9e23b624e14495cd/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a1d2a46c249fa81294c156b9e23b624e14495cd/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=9a1d2a46c249fa81294c156b9e23b624e14495cd", "patch": "@@ -73,6 +73,7 @@ mod fill_match_arms;\n mod introduce_variable;\n mod replace_if_let_with_match;\n mod split_import;\n+mod remove_dbg;\n fn all_assists<DB: HirDatabase>() -> &'static [fn(AssistCtx<DB>) -> Option<Assist>] {\n     &[\n         add_derive::add_derive,\n@@ -83,6 +84,7 @@ fn all_assists<DB: HirDatabase>() -> &'static [fn(AssistCtx<DB>) -> Option<Assis\n         introduce_variable::introduce_variable,\n         replace_if_let_with_match::replace_if_let_with_match,\n         split_import::split_import,\n+        remove_dbg::remove_dbg,\n     ]\n }\n "}, {"sha": "40f97a84920e2d92390c7019a6a35b56ec44862a", "filename": "crates/ra_assists/src/remove_dbg.rs", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/9a1d2a46c249fa81294c156b9e23b624e14495cd/crates%2Fra_assists%2Fsrc%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a1d2a46c249fa81294c156b9e23b624e14495cd/crates%2Fra_assists%2Fsrc%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fremove_dbg.rs?ref=9a1d2a46c249fa81294c156b9e23b624e14495cd", "patch": "@@ -0,0 +1,123 @@\n+use hir::db::HirDatabase;\n+use ra_syntax::{\n+    ast::{self, AstNode},\n+    TextUnit,\n+    SyntaxKind::{\n+        L_PAREN, R_PAREN, L_CURLY, R_CURLY, L_BRACK, R_BRACK, EXCL\n+    },\n+};\n+use crate::{AssistCtx, Assist};\n+\n+pub(crate) fn remove_dbg(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+    let macro_call = ctx.node_at_offset::<ast::MacroCall>()?;\n+\n+    if !is_valid_macrocall(macro_call, \"dbg\")? {\n+        return None;\n+    }\n+\n+    let macro_range = macro_call.syntax().range();\n+\n+    // If the cursor is inside the macrocall, we'll try to maintain\n+    // the cursor position by subtracting the length of dbg!( from the start\n+    // of the filerange, otherwise we'll default to using the start of the macrocall\n+    let cursor_pos = {\n+        let file_range = ctx.frange.range;\n+\n+        let offset_start = file_range\n+            .start()\n+            .checked_sub(macro_range.start())\n+            .unwrap_or_else(|| TextUnit::from(0));\n+\n+        let dbg_size = TextUnit::of_str(\"dbg!(\");\n+\n+        if offset_start > dbg_size {\n+            file_range.start() - dbg_size\n+        } else {\n+            macro_range.start()\n+        }\n+    };\n+\n+    let macro_content = {\n+        let macro_args = macro_call.token_tree()?.syntax();\n+        let range = macro_args.range();\n+        let start = range.start() + TextUnit::of_char('(');\n+        let end = range.end() - TextUnit::of_char(')');\n+\n+        macro_args.text().slice(start..end).to_string()\n+    };\n+\n+    ctx.build(\"remove dbg!()\", |edit| {\n+        edit.replace(macro_range, macro_content);\n+        edit.set_cursor(cursor_pos);\n+    })\n+}\n+\n+/// Verifies that the given macro_call actually matches the given name\n+/// and contains proper ending tokens\n+fn is_valid_macrocall(macro_call: &ast::MacroCall, macro_name: &str) -> Option<bool> {\n+    let path = macro_call.path()?;\n+    let name_ref = path.segment()?.name_ref()?;\n+\n+    // Make sure it is actually a dbg-macrocall, dbg followed by !\n+    let excl = path.syntax().next_sibling()?;\n+\n+    if name_ref.text() != macro_name || excl.kind() != EXCL {\n+        return None;\n+    }\n+\n+    let node = macro_call.token_tree()?.syntax();\n+    let first_child = node.first_child()?;\n+    let last_child = node.last_child()?;\n+\n+    match (first_child.kind(), last_child.kind()) {\n+        (L_PAREN, R_PAREN) | (L_BRACK, R_BRACK) | (L_CURLY, R_CURLY) => Some(true),\n+        _ => Some(false),\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use crate::helpers::{check_assist, check_assist_not_applicable};\n+\n+    #[test]\n+    fn test_remove_dbg() {\n+        check_assist(remove_dbg, \"<|>dbg!(1 + 1)\", \"<|>1 + 1\");\n+\n+        check_assist(remove_dbg, \"dbg!<|>((1 + 1))\", \"<|>(1 + 1)\");\n+\n+        check_assist(remove_dbg, \"dbg!(1 <|>+ 1)\", \"1 <|>+ 1\");\n+\n+        check_assist(remove_dbg, \"let _ = <|>dbg!(1 + 1)\", \"let _ = <|>1 + 1\");\n+\n+        check_assist(\n+            remove_dbg,\n+            \"\n+fn foo(n: usize) {\n+    if let Some(_) = dbg!(n.<|>checked_sub(4)) {\n+        // ...\n+    }\n+}\n+\",\n+            \"\n+fn foo(n: usize) {\n+    if let Some(_) = n.<|>checked_sub(4) {\n+        // ...\n+    }\n+}\n+\",\n+        );\n+    }\n+    #[test]\n+    fn test_remove_dbg_with_brackets_and_braces() {\n+        check_assist(remove_dbg, \"dbg![<|>1 + 1]\", \"<|>1 + 1\");\n+        check_assist(remove_dbg, \"dbg!{<|>1 + 1}\", \"<|>1 + 1\");\n+    }\n+\n+    #[test]\n+    fn test_remove_dbg_not_applicable() {\n+        check_assist_not_applicable(remove_dbg, \"<|>vec![1, 2, 3]\");\n+        check_assist_not_applicable(remove_dbg, \"<|>dbg(5, 6, 7)\");\n+        check_assist_not_applicable(remove_dbg, \"<|>dbg!(5, 6, 7\");\n+    }\n+}"}]}