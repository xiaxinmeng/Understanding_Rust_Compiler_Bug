{"sha": "4896ffb65c09ae7a2e961e6c942287296826ba46", "node_id": "C_kwDOAAsO6NoAKDQ4OTZmZmI2NWMwOWFlN2EyZTk2MWU2Yzk0MjI4NzI5NjgyNmJhNDY", "commit": {"author": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-01-22T10:54:37Z"}, "committer": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-01-22T12:08:32Z"}, "message": "removing unwraps", "tree": {"sha": "032db56364cbd67c5d0c33e03b1119b2f6163bb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/032db56364cbd67c5d0c33e03b1119b2f6163bb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4896ffb65c09ae7a2e961e6c942287296826ba46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4896ffb65c09ae7a2e961e6c942287296826ba46", "html_url": "https://github.com/rust-lang/rust/commit/4896ffb65c09ae7a2e961e6c942287296826ba46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4896ffb65c09ae7a2e961e6c942287296826ba46/comments", "author": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50c913c733de6aabae9d9770187093ac00cafbaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/50c913c733de6aabae9d9770187093ac00cafbaf", "html_url": "https://github.com/rust-lang/rust/commit/50c913c733de6aabae9d9770187093ac00cafbaf"}], "stats": {"total": 64, "additions": 30, "deletions": 34}, "files": [{"sha": "3f83041bec0e2b1ede472977f443cf9eac64c8bb", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4896ffb65c09ae7a2e961e6c942287296826ba46/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4896ffb65c09ae7a2e961e6c942287296826ba46/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=4896ffb65c09ae7a2e961e6c942287296826ba46", "patch": "@@ -5,7 +5,7 @@ exclude = [\"crates/proc_macro_test/imp\"]\n [profile.dev]\n # Disabling debug info speeds up builds a bunch,\n # and we don't rely on it for debugging that much.\n-debug = 2\n+debug = 0\n \n [profile.dev.package]\n # These speed up local tests."}, {"sha": "cfa4343f7c5553f9242ec449db6618d087e2c319", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 24, "deletions": 29, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/4896ffb65c09ae7a2e961e6c942287296826ba46/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4896ffb65c09ae7a2e961e6c942287296826ba46/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=4896ffb65c09ae7a2e961e6c942287296826ba46", "patch": "@@ -484,9 +484,6 @@ impl FunctionBody {\n         }\n     }\n \n-    // selection: 36..67\n-    // resulting: 57..67\n-\n     fn from_range(parent: ast::StmtList, selected: TextRange) -> FunctionBody {\n         let full_body = parent.syntax().children_with_tokens();\n         for st in parent.syntax().children_with_tokens() {\n@@ -1468,33 +1465,32 @@ fn make_body(\n                 .map(|it| match it {\n                     syntax::NodeOrToken::Node(n) => {\n                         println!(\"Found node: {:?}\", n);\n-                        return syntax::NodeOrToken::try_from(rewrite_body_segment(\n-                            ctx,\n-                            &fun.params,\n-                            &handler,\n-                            &n,\n-                        ))\n-                        .unwrap()\n+                        let node_rewritten = rewrite_body_segment(ctx, &fun.params, &handler, &n);\n+\n+                        syntax::NodeOrToken::Node(node_rewritten)\n                     }\n                     syntax::NodeOrToken::Token(t) => {\n                         println!(\"Found token: {:?}\", t);\n-                        return syntax::NodeOrToken::try_from(t).unwrap()\n+                        syntax::NodeOrToken::Token(t)\n                     }\n                 })\n                 .collect();\n \n             let mut tail_expr = match elements.pop() {\n-                Some(node) if node.as_node().is_some() => {\n-                    ast::Expr::cast(node.as_node().unwrap().clone()).or_else(|| {\n-                        elements.push(node);\n+                Some(element) => match element {\n+                    syntax::NodeOrToken::Node(node) => {\n+                        ast::Expr::cast(node.clone()).or_else(|| {\n+                            elements.push(syntax::NodeOrToken::Node(node));\n+                            None\n+                        })\n+                    }\n+                    syntax::NodeOrToken::Token(token) if token.kind() == COMMENT => {\n+                        elements.push(syntax::NodeOrToken::Token(token));\n                         None\n-                    })\n-                },\n-                Some(token) if token.as_token().is_some() && token.as_token().unwrap().kind() == COMMENT => {\n-                    elements.push(token);\n-                    None\n+                    }\n+                    _ => None,\n                 },\n-                _ => None,\n+                None => None,\n             };\n \n             if tail_expr.is_none() {\n@@ -1510,19 +1506,20 @@ fn make_body(\n                     }\n                 }\n             }\n-            \n+\n             let body_indent = IndentLevel(1);\n-            let elements: Vec<SyntaxElement> = elements.into_iter().map(|stmt| {\n-                match stmt {\n+            let elements: Vec<SyntaxElement> = elements\n+                .into_iter()\n+                .map(|stmt| match stmt {\n                     syntax::NodeOrToken::Node(n) => {\n                         let ast_element = ast::Stmt::cast(n).unwrap();\n                         let indented = ast_element.dedent(old_indent).indent(body_indent);\n                         let ast_node = indented.syntax().clone_subtree();\n                         syntax::NodeOrToken::try_from(ast_node).unwrap()\n-                    },\n-                    syntax::NodeOrToken::Token(t) => syntax::NodeOrToken::try_from(t).unwrap()\n-                }\n-            }).collect::<Vec<SyntaxElement>>();\n+                    }\n+                    syntax::NodeOrToken::Token(t) => syntax::NodeOrToken::try_from(t).unwrap(),\n+                })\n+                .collect::<Vec<SyntaxElement>>();\n             let tail_expr = tail_expr.map(|expr| expr.dedent(old_indent).indent(body_indent));\n \n             for element in &elements {\n@@ -1531,8 +1528,6 @@ fn make_body(\n \n             make::block_expr_full(elements, tail_expr)\n \n-            \n-\n             // make::block_expr(parent.statements().into_iter(), tail_expr)\n         }\n     };"}, {"sha": "2d1e9ac05d21bf744446a16bee7d9575a3ccb2fa", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4896ffb65c09ae7a2e961e6c942287296826ba46/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4896ffb65c09ae7a2e961e6c942287296826ba46/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=4896ffb65c09ae7a2e961e6c942287296826ba46", "patch": "@@ -335,14 +335,15 @@ pub fn block_expr_full(\n ) -> ast::BlockExpr {\n     let mut buf = \"{\\n\".to_string();\n     for stmt in stmts.into_iter() {\n-        \n         match stmt {\n             rowan::NodeOrToken::Node(n) => {\n                 println!(\"Node: {:?}\", n.text());\n                 format_to!(buf, \"    {}\\n\", n)\n-            },\n-            rowan::NodeOrToken::Token(t) if t.kind() == SyntaxKind::COMMENT => format_to!(buf, \"    {}\\n\", t),\n-            _ => ()\n+            }\n+            rowan::NodeOrToken::Token(t) if t.kind() == SyntaxKind::COMMENT => {\n+                format_to!(buf, \"    {}\\n\", t)\n+            }\n+            _ => (),\n         }\n     }\n     if let Some(tail_expr) = tail_expr {"}]}