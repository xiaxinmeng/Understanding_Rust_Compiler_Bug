{"sha": "90a190e03b56b9efd5f431caee9b9f7ebc17371d", "node_id": "C_kwDOAAsO6NoAKDkwYTE5MGUwM2I1NmI5ZWZkNWY0MzFjYWVlOWI5ZjdlYmMxNzM3MWQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-05-15T08:26:47Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-05-15T08:26:47Z"}, "message": "don't ICE when libcore is missing", "tree": {"sha": "c6e44b3e857e681aa632d7242533ac1a8e19e72d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6e44b3e857e681aa632d7242533ac1a8e19e72d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90a190e03b56b9efd5f431caee9b9f7ebc17371d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90a190e03b56b9efd5f431caee9b9f7ebc17371d", "html_url": "https://github.com/rust-lang/rust/commit/90a190e03b56b9efd5f431caee9b9f7ebc17371d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90a190e03b56b9efd5f431caee9b9f7ebc17371d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90d28eada18e19cde2764d360d72da0cf72c9694", "url": "https://api.github.com/repos/rust-lang/rust/commits/90d28eada18e19cde2764d360d72da0cf72c9694", "html_url": "https://github.com/rust-lang/rust/commit/90d28eada18e19cde2764d360d72da0cf72c9694"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "5f6348fe0bde5ecb62ff7d1aec93ea7c44d8e4e9", "filename": "src/eval.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/90a190e03b56b9efd5f431caee9b9f7ebc17371d/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a190e03b56b9efd5f431caee9b9f7ebc17371d/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=90a190e03b56b9efd5f431caee9b9f7ebc17371d", "patch": "@@ -172,15 +172,18 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     Evaluator::late_init(&mut ecx, config)?;\n \n     // Make sure we have MIR. We check MIR for some stable monomorphic function in libcore.\n-    let sentinel = ecx.resolve_path(&[\"core\", \"ascii\", \"escape_default\"]);\n-    if !tcx.is_mir_available(sentinel.def.def_id()) {\n-        tcx.sess.fatal(\"the current sysroot was built without `-Zalways-encode-mir`. Use `cargo miri setup` to prepare a sysroot that is suitable for Miri.\");\n+    let sentinel = ecx.try_resolve_path(&[\"core\", \"ascii\", \"escape_default\"]);\n+    if !matches!(sentinel, Some(s) if tcx.is_mir_available(s.def.def_id())) {\n+        tcx.sess.fatal(\n+            \"the current sysroot was built without `-Zalways-encode-mir`, or libcore seems missing. \\\n+            Use `cargo miri setup` to prepare a sysroot that is suitable for Miri.\"\n+        );\n     }\n \n-    // Setup first stack-frame\n+    // Setup first stack frame.\n     let entry_instance = ty::Instance::mono(tcx, entry_id);\n \n-    // First argument is constructed later, because its skipped if the entry function uses #[start]\n+    // First argument is constructed later, because it's skipped if the entry function uses #[start].\n \n     // Second argument (argc): length of `config.args`.\n     let argc = Scalar::from_machine_usize(u64::try_from(config.args.len()).unwrap(), &ecx);"}, {"sha": "6beb3f8c3bb0917d85ac10d558dcc93262cca503", "filename": "src/helpers.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/90a190e03b56b9efd5f431caee9b9f7ebc17371d/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a190e03b56b9efd5f431caee9b9f7ebc17371d/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=90a190e03b56b9efd5f431caee9b9f7ebc17371d", "patch": "@@ -71,11 +71,16 @@ fn try_resolve_did<'tcx>(tcx: TyCtxt<'tcx>, path: &[&str]) -> Option<DefId> {\n }\n \n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+    /// Gets an instance for a path; fails gracefully if the path does not exist.\n+    fn try_resolve_path(&self, path: &[&str]) -> Option<ty::Instance<'tcx>> {\n+        let did = try_resolve_did(self.eval_context_ref().tcx.tcx, path)?;\n+        Some(ty::Instance::mono(self.eval_context_ref().tcx.tcx, did))\n+    }\n+\n     /// Gets an instance for a path.\n     fn resolve_path(&self, path: &[&str]) -> ty::Instance<'tcx> {\n-        let did = try_resolve_did(self.eval_context_ref().tcx.tcx, path)\n-            .unwrap_or_else(|| panic!(\"failed to find required Rust item: {:?}\", path));\n-        ty::Instance::mono(self.eval_context_ref().tcx.tcx, did)\n+        self.try_resolve_path(path)\n+            .unwrap_or_else(|| panic!(\"failed to find required Rust item: {:?}\", path))\n     }\n \n     /// Evaluates the scalar at the specified path. Returns Some(val)"}]}