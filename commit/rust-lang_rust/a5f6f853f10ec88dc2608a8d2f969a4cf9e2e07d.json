{"sha": "a5f6f853f10ec88dc2608a8d2f969a4cf9e2e07d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ZjZmODUzZjEwZWM4OGRjMjYwOGE4ZDJmOTY5YTRjZjllMmUwN2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-07T07:36:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-07T07:36:06Z"}, "message": "auto merge of #10322 : thestinger/rust/no_freeze, r=alexcrichton", "tree": {"sha": "7c29cb5e2a7c33c090c444a696c006f1bc01e697", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c29cb5e2a7c33c090c444a696c006f1bc01e697"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5f6f853f10ec88dc2608a8d2f969a4cf9e2e07d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5f6f853f10ec88dc2608a8d2f969a4cf9e2e07d", "html_url": "https://github.com/rust-lang/rust/commit/a5f6f853f10ec88dc2608a8d2f969a4cf9e2e07d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5f6f853f10ec88dc2608a8d2f969a4cf9e2e07d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fc689305cd38a0168ed5b139f4c118f81e2217e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fc689305cd38a0168ed5b139f4c118f81e2217e", "html_url": "https://github.com/rust-lang/rust/commit/7fc689305cd38a0168ed5b139f4c118f81e2217e"}, {"sha": "8662141c21720e9398dd3230d6503c41db9de59e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8662141c21720e9398dd3230d6503c41db9de59e", "html_url": "https://github.com/rust-lang/rust/commit/8662141c21720e9398dd3230d6503c41db9de59e"}], "stats": {"total": 64, "additions": 43, "deletions": 21}, "files": [{"sha": "cc2f739ce98d8f0ba8d7beeb996878d41a9a15b4", "filename": "src/libstd/rc.rs", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a5f6f853f10ec88dc2608a8d2f969a4cf9e2e07d/src%2Flibstd%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5f6f853f10ec88dc2608a8d2f969a4cf9e2e07d/src%2Flibstd%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frc.rs?ref=a5f6f853f10ec88dc2608a8d2f969a4cf9e2e07d", "patch": "@@ -48,12 +48,21 @@ impl<T: Freeze> Rc<T> {\n     }\n }\n \n+impl<T: Send> Rc<T> {\n+    /// Construct a new reference-counted box from a `Send` value\n+    #[inline]\n+    pub fn from_send(value: T) -> Rc<T> {\n+        unsafe {\n+            Rc::new_unchecked(value)\n+        }\n+    }\n+}\n+\n impl<T> Rc<T> {\n     /// Unsafety construct a new reference-counted box from any value.\n     ///\n-    /// If the type is not `Freeze`, the `Rc` box will incorrectly still be considered as a `Freeze`\n-    /// type. It is also possible to create cycles, which will leak, and may interact poorly with\n-    /// managed pointers.\n+    /// It is possible to create cycles, which will leak, and may interact\n+    /// poorly with managed pointers.\n     #[inline]\n     pub unsafe fn new_unchecked(value: T) -> Rc<T> {\n         Rc{ptr: transmute(~RcBox{value: value, count: 1})}\n@@ -104,26 +113,22 @@ mod test_rc {\n \n     #[test]\n     fn test_clone() {\n-        unsafe {\n-            let x = Rc::new_unchecked(Cell::new(5));\n-            let y = x.clone();\n-            do x.borrow().with_mut_ref |inner| {\n-                *inner = 20;\n-            }\n-            assert_eq!(y.borrow().take(), 20);\n+        let x = Rc::from_send(Cell::new(5));\n+        let y = x.clone();\n+        do x.borrow().with_mut_ref |inner| {\n+            *inner = 20;\n         }\n+        assert_eq!(y.borrow().take(), 20);\n     }\n \n     #[test]\n     fn test_deep_clone() {\n-        unsafe {\n-            let x = Rc::new_unchecked(Cell::new(5));\n-            let y = x.deep_clone();\n-            do x.borrow().with_mut_ref |inner| {\n-                *inner = 20;\n-            }\n-            assert_eq!(y.borrow().take(), 5);\n+        let x = Rc::from_send(Cell::new(5));\n+        let y = x.deep_clone();\n+        do x.borrow().with_mut_ref |inner| {\n+            *inner = 20;\n         }\n+        assert_eq!(y.borrow().take(), 5);\n     }\n \n     #[test]\n@@ -142,10 +147,8 @@ mod test_rc {\n \n     #[test]\n     fn test_destructor() {\n-        unsafe {\n-            let x = Rc::new_unchecked(~5);\n-            assert_eq!(**x.borrow(), 5);\n-        }\n+        let x = Rc::from_send(~5);\n+        assert_eq!(**x.borrow(), 5);\n     }\n }\n "}, {"sha": "6185ccf2e7e5e61d7b251fd9ecf5f6affbd2e4ac", "filename": "src/test/compile-fail/no_freeze-rc.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a5f6f853f10ec88dc2608a8d2f969a4cf9e2e07d/src%2Ftest%2Fcompile-fail%2Fno_freeze-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5f6f853f10ec88dc2608a8d2f969a4cf9e2e07d/src%2Ftest%2Fcompile-fail%2Fno_freeze-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_freeze-rc.rs?ref=a5f6f853f10ec88dc2608a8d2f969a4cf9e2e07d", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::rc::Rc;\n+use std::cell::Cell;\n+\n+fn bar<T: Freeze>(_: T) {}\n+\n+fn main() {\n+    let x = Rc::from_send(Cell::new(5));\n+    bar(x); //~ ERROR instantiating a type parameter with an incompatible type `std::rc::Rc<std::cell::Cell<int>>`, which does not fulfill `Freeze`\n+}"}]}