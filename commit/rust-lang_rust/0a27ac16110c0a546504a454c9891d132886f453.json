{"sha": "0a27ac16110c0a546504a454c9891d132886f453", "node_id": "C_kwDOAAsO6NoAKDBhMjdhYzE2MTEwYzBhNTQ2NTA0YTQ1NGM5ODkxZDEzMjg4NmY0NTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-15T06:12:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-15T06:12:39Z"}, "message": "Auto merge of #101838 - matthiaskrgr:rollup-d1nm6b3, r=matthiaskrgr\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #100415 (Add BE8 support)\n - #101559 (Adding \"backtrace off\" option for fuchsia targets)\n - #101740 (Adding ignore-fuchsia arg to non-applicable compiler ui tests)\n - #101778 (rustdoc: clean up DOM by removing `.dockblock-short p`)\n - #101786 (Tidy will not check coding style in bootstrap/target)\n - #101810 (Constify `PartialEq` for `Ordering`)\n - #101812 (rustdoc: clean up CSS `#titles` using flexbox)\n - #101820 (rustdoc: remove no-op rule `a { background: transparent }`)\n - #101828 (Add test for #101743)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "2e25223dc748469f9fd2aff178070896a8cb5cf3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e25223dc748469f9fd2aff178070896a8cb5cf3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a27ac16110c0a546504a454c9891d132886f453", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a27ac16110c0a546504a454c9891d132886f453", "html_url": "https://github.com/rust-lang/rust/commit/0a27ac16110c0a546504a454c9891d132886f453", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a27ac16110c0a546504a454c9891d132886f453/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3f59295fecb9a7cb067bc4a5b50f779e159a55b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3f59295fecb9a7cb067bc4a5b50f779e159a55b", "html_url": "https://github.com/rust-lang/rust/commit/c3f59295fecb9a7cb067bc4a5b50f779e159a55b"}, {"sha": "384fee97033b107cafe47efc9731f368051fabce", "url": "https://api.github.com/repos/rust-lang/rust/commits/384fee97033b107cafe47efc9731f368051fabce", "html_url": "https://github.com/rust-lang/rust/commit/384fee97033b107cafe47efc9731f368051fabce"}], "stats": {"total": 264, "additions": 184, "deletions": 80}, "files": [{"sha": "4836f3cf7202b493c1827cccb19ee7f682e95f68", "filename": "compiler/rustc_target/src/spec/armeb_unknown_linux_gnueabi.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0a27ac16110c0a546504a454c9891d132886f453/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmeb_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a27ac16110c0a546504a454c9891d132886f453/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmeb_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmeb_unknown_linux_gnueabi.rs?ref=0a27ac16110c0a546504a454c9891d132886f453", "patch": "@@ -0,0 +1,19 @@\n+use crate::abi::Endian;\n+use crate::spec::{Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    Target {\n+        llvm_target: \"armeb-unknown-linux-gnueabi\".into(),\n+        pointer_width: 32,\n+        data_layout: \"E-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n+        options: TargetOptions {\n+            abi: \"eabi\".into(),\n+            features: \"+strict-align,+v8,+crc\".into(),\n+            endian: Endian::Big,\n+            max_atomic_width: Some(64),\n+            mcount: \"\\u{1}__gnu_mcount_nc\".into(),\n+            ..super::linux_gnu_base::opts()\n+        },\n+    }\n+}"}, {"sha": "7e7f7a82e90d31311b8d78835ede9273b4a0b39a", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a27ac16110c0a546504a454c9891d132886f453/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a27ac16110c0a546504a454c9891d132886f453/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=0a27ac16110c0a546504a454c9891d132886f453", "patch": "@@ -932,6 +932,7 @@ supported_targets! {\n     (\"sparc64-unknown-linux-gnu\", sparc64_unknown_linux_gnu),\n     (\"arm-unknown-linux-gnueabi\", arm_unknown_linux_gnueabi),\n     (\"arm-unknown-linux-gnueabihf\", arm_unknown_linux_gnueabihf),\n+    (\"armeb-unknown-linux-gnueabi\", armeb_unknown_linux_gnueabi),\n     (\"arm-unknown-linux-musleabi\", arm_unknown_linux_musleabi),\n     (\"arm-unknown-linux-musleabihf\", arm_unknown_linux_musleabihf),\n     (\"armv4t-unknown-linux-gnueabi\", armv4t_unknown_linux_gnueabi),"}, {"sha": "d9f2d3d64d667113ed660b38dc7ee95b7e34da09", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0a27ac16110c0a546504a454c9891d132886f453/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a27ac16110c0a546504a454c9891d132886f453/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=0a27ac16110c0a546504a454c9891d132886f453", "patch": "@@ -23,6 +23,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::marker::Destruct;\n+use crate::marker::StructuralPartialEq;\n \n use self::Ordering::*;\n \n@@ -338,7 +339,7 @@ pub struct AssertParamIsEq<T: Eq + ?Sized> {\n /// let result = 2.cmp(&1);\n /// assert_eq!(Ordering::Greater, result);\n /// ```\n-#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, Copy, Eq, Debug, Hash)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[repr(i8)]\n pub enum Ordering {\n@@ -884,6 +885,18 @@ pub macro Ord($item:item) {\n     /* compiler built-in */\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl StructuralPartialEq for Ordering {}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n+impl const PartialEq for Ordering {\n+    #[inline]\n+    fn eq(&self, other: &Self) -> bool {\n+        (*self as i32).eq(&(*other as i32))\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n impl const Ord for Ordering {"}, {"sha": "c4f022de021efa8e8ec2d80bb324bbb207b30180", "filename": "library/std/src/panic.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0a27ac16110c0a546504a454c9891d132886f453/library%2Fstd%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a27ac16110c0a546504a454c9891d132886f453/library%2Fstd%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanic.rs?ref=0a27ac16110c0a546504a454c9891d132886f453", "patch": "@@ -295,23 +295,22 @@ pub fn get_backtrace_style() -> Option<BacktraceStyle> {\n         return Some(style);\n     }\n \n-    // Setting environment variables for Fuchsia components isn't a standard\n-    // or easily supported workflow. For now, display backtraces by default.\n-    let format = if cfg!(target_os = \"fuchsia\") {\n-        BacktraceStyle::Full\n-    } else {\n-        crate::env::var_os(\"RUST_BACKTRACE\")\n-            .map(|x| {\n-                if &x == \"0\" {\n-                    BacktraceStyle::Off\n-                } else if &x == \"full\" {\n-                    BacktraceStyle::Full\n-                } else {\n-                    BacktraceStyle::Short\n-                }\n-            })\n-            .unwrap_or(BacktraceStyle::Off)\n-    };\n+    let format = crate::env::var_os(\"RUST_BACKTRACE\")\n+        .map(|x| {\n+            if &x == \"0\" {\n+                BacktraceStyle::Off\n+            } else if &x == \"full\" {\n+                BacktraceStyle::Full\n+            } else {\n+                BacktraceStyle::Short\n+            }\n+        })\n+        .unwrap_or(if cfg!(target_os = \"fuchsia\") {\n+            // Fuchsia components default to full backtrace.\n+            BacktraceStyle::Full\n+        } else {\n+            BacktraceStyle::Off\n+        });\n     set_backtrace_style(format);\n     Some(format)\n }"}, {"sha": "d9d430c2046728cc610f47cd9107f94795160dfe", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a27ac16110c0a546504a454c9891d132886f453/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a27ac16110c0a546504a454c9891d132886f453/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=0a27ac16110c0a546504a454c9891d132886f453", "patch": "@@ -18,6 +18,7 @@\n     - [aarch64-apple-ios-sim](platform-support/aarch64-apple-ios-sim.md)\n     - [\\*-apple-watchos\\*](platform-support/apple-watchos.md)\n     - [aarch64-nintendo-switch-freestanding](platform-support/aarch64-nintendo-switch-freestanding.md)\n+    - [armeb-unknown-linux-gnueabi](platform-support/armeb-unknown-linux-gnueabi.md)\n     - [armv4t-none-eabi](platform-support/armv4t-none-eabi.md)\n     - [armv6k-nintendo-3ds](platform-support/armv6k-nintendo-3ds.md)\n     - [armv7-unknown-linux-uclibceabi](platform-support/armv7-unknown-linux-uclibceabi.md)"}, {"sha": "3a6963ebc87d12d01820db3659397c2ae3027f4a", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a27ac16110c0a546504a454c9891d132886f453/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a27ac16110c0a546504a454c9891d132886f453/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=0a27ac16110c0a546504a454c9891d132886f453", "patch": "@@ -223,6 +223,7 @@ target | std | host | notes\n `aarch64_be-unknown-linux-gnu_ilp32` | \u2713 | \u2713 | ARM64 Linux (big-endian, ILP32 ABI)\n `aarch64_be-unknown-linux-gnu` | \u2713 | \u2713 | ARM64 Linux (big-endian)\n [`arm64_32-apple-watchos`](platform-support/apple-watchos.md) | \u2713 | | ARM Apple WatchOS 64-bit with 32-bit pointers\n+[`armeb-unknown-linux-gnueabi`](platform-support/armeb-unknown-linux-gnueabi.md) | \u2713 | ? | ARM BE8 the default ARM big-endian architecture since [ARMv6](https://developer.arm.com/documentation/101754/0616/armlink-Reference/armlink-Command-line-Options/--be8?lang=en).\n `armv4t-none-eabi` | * |  | ARMv4T A32\n `armv4t-unknown-linux-gnueabi` | ? |  |\n `armv5te-unknown-linux-uclibceabi` | ? |  | ARMv5TE Linux with uClibc"}, {"sha": "507631cdc540aa8fb24f418e8f9a8bcfa9b34535", "filename": "src/doc/rustc/src/platform-support/armeb-unknown-linux-gnueabi.md", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/0a27ac16110c0a546504a454c9891d132886f453/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmeb-unknown-linux-gnueabi.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a27ac16110c0a546504a454c9891d132886f453/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmeb-unknown-linux-gnueabi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmeb-unknown-linux-gnueabi.md?ref=0a27ac16110c0a546504a454c9891d132886f453", "patch": "@@ -0,0 +1,74 @@\n+# armeb-unknown-linux-gnueabi\n+**Tier: 3**\n+\n+Target for cross-compiling Linux user-mode applications targetting the ARM BE8 architecture.\n+\n+## Overview\n+BE8 architecture retains the same little-endian ordered code-stream used by conventional little endian ARM systems, however the data accesses are in big-endian. BE8 is used primarily in high-performance networking applications where the ability to read packets in their native \"Network Byte Order\" is important (many network protocols transmit data in big-endian byte order for their wire formats).\n+\n+## History\n+BE8 architecture is the default big-endian architecture for ARM since [ARMv6](https://developer.arm.com/documentation/101754/0616/armlink-Reference/armlink-Command-line-Options/--be8?lang=en). It's predecessor, used for ARMv4 and ARMv5 devices was [BE32](https://developer.arm.com/documentation/dui0474/j/linker-command-line-options/--be32). On ARMv6 architecture, endianness can be configured via [system registers](https://developer.arm.com/documentation/ddi0290/g/unaligned-and-mixed-endian-data-access-support/mixed-endian-access-support/interaction-between-the-bus-protocol-and-the-core-endianness). However, BE32 was withdrawn for [ARMv7](https://developer.arm.com/documentation/ddi0406/cb/Appendixes/Deprecated-and-Obsolete-Features/Obsolete-features/Support-for-BE-32-endianness-model) onwards.\n+\n+## Target Maintainers\n+* [@WorksButNotTested](https://github.com/WorksButNotTested)\n+\n+## Requirements\n+The target is cross-compiled. This target supports `std` in the normal way (indeed only nominal changes are required from the standard ARM configuration).\n+\n+## Target definition\n+The target definition can be seen [here](https://github.com/rust-lang/rust/tree/master/compiler/rustc_target/src/spec/armeb_unknown_linux_gnueabi.rs). In particular, it should be noted that the `features` specify that this target is built for the ARMv8 core. Though this can likely be modified as required.\n+\n+## Building the target\n+Because it is Tier 3, rust does not yet ship pre-compiled artifacts for this target.\n+\n+Therefore, you can build Rust with support for the target by adding it to the target list in config.toml, a sample configuration is shown below. It is expected that the user already have a working GNU compiler toolchain and update the paths accordingly.\n+\n+```toml\n+[llvm]\n+download-ci-llvm = false\n+skip-rebuild = true\n+optimize = true\n+ninja = true\n+targets = \"ARM;X86\"\n+clang = false\n+\n+[build]\n+target = [\"x86_64-unknown-linux-gnu\", \"armeb-unknown-linux-gnueabi\"]\n+docs = false\n+docs-minification = false\n+compiler-docs = false\n+[install]\n+prefix = \"/home/user/x-tools/rust/\"\n+\n+[rust]\n+debug-logging=true\n+backtrace = true\n+incremental = true\n+\n+[target.x86_64-unknown-linux-gnu]\n+\n+[dist]\n+\n+[target.armeb-unknown-linux-gnueabi]\n+cc = \"/home/user/x-tools/armeb-unknown-linux-gnueabi/bin/armeb-unknown-linux-gnueabi-gcc\"\n+cxx = \"/home/user/x-tools/armeb-unknown-linux-gnueabi/bin/armeb-unknown-linux-gnueabi-g++\"\n+ar = \"/home/user/x-tools/armeb-unknown-linux-gnueabi/bin/armeb-unknown-linux-gnueabi-ar\"\n+ranlib = \"/home/user/x-tools/armeb-unknown-linux-gnueabi/bin/armeb-unknown-linux-gnueabi-ranlib\"\n+linker = \"/home/user/x-tools/armeb-unknown-linux-gnueabi/bin/armeb-unknown-linux-gnueabi-gcc\"\n+llvm-config = \"/home/user/x-tools/clang/bin/llvm-config\"\n+llvm-filecheck = \"/home/user/x-tools/clang/bin/FileCheck\"\n+```\n+\n+## Building Rust programs\n+\n+The following `.cargo/config` is needed inside any project directory to build for the BE8 target:\n+\n+```toml\n+[build]\n+target = \"armeb-unknown-linux-gnueabi\"\n+\n+[target.armeb-unknown-linux-gnueabi]\n+linker = \"armeb-unknown-linux-gnueabi-gcc\"\n+```\n+\n+Note that it is expected that the user has a suitable linker from the GNU toolchain."}, {"sha": "43d07d4a53337ae6100fdfb9c7ac53b745bb810e", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a27ac16110c0a546504a454c9891d132886f453/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a27ac16110c0a546504a454c9891d132886f453/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=0a27ac16110c0a546504a454c9891d132886f453", "patch": "@@ -1119,7 +1119,11 @@ impl MarkdownSummaryLine<'_> {\n \n         let mut s = String::new();\n \n-        html::push_html(&mut s, LinkReplacer::new(SummaryLine::new(p), links));\n+        let without_paragraphs = LinkReplacer::new(SummaryLine::new(p), links).filter(|event| {\n+            !matches!(event, Event::Start(Tag::Paragraph) | Event::End(Tag::Paragraph))\n+        });\n+\n+        html::push_html(&mut s, without_paragraphs);\n \n         s\n     }"}, {"sha": "8bfaaf21c8e57226070db791947893c0596f801e", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 7, "deletions": 29, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0a27ac16110c0a546504a454c9891d132886f453/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/0a27ac16110c0a546504a454c9891d132886f453/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=0a27ac16110c0a546504a454c9891d132886f453", "patch": "@@ -609,16 +609,12 @@ h2.location a {\n .docblock-short {\n \toverflow-wrap: break-word;\n \toverflow-wrap: anywhere;\n-}\n-.docblock-short p {\n-\tdisplay: inline;\n \toverflow: hidden;\n \ttext-overflow: ellipsis;\n-\tmargin: 0;\n }\n /* Wrap non-pre code blocks (`text`) but not (```text```). */\n .docblock > :not(pre) > code,\n-.docblock-short > :not(pre) > code {\n+.docblock-short > code {\n \twhite-space: pre-wrap;\n }\n \n@@ -758,7 +754,6 @@ nav.sub form { display: inline; }\n \n a {\n \ttext-decoration: none;\n-\tbackground: transparent;\n }\n \n .small-section-header {\n@@ -1369,27 +1364,19 @@ pre.rust {\n }\n \n #titles {\n-\theight: 35px;\n+\tdisplay: flex;\n+\tflex-direction: row;\n+\tgap: 1px;\n+\tmargin-bottom: 4px;\n }\n \n #titles > button {\n-\tfloat: left;\n-\twidth: 33.3%;\n \ttext-align: center;\n \tfont-size: 1.125rem;\n \tcursor: pointer;\n \tborder: 0;\n \tborder-top: 2px solid;\n-}\n-\n-#titles > button:first-child:last-child {\n-\tmargin-right: 1px;\n-\twidth: calc(100% - 1px);\n-}\n-\n-#titles > button:not(:last-child) {\n-\tmargin-right: 1px;\n-\twidth: calc(33.3% - 1px);\n+\tflex: 1;\n }\n \n #titles > button > div.count {\n@@ -1886,12 +1873,7 @@ in storage.js plus the media query with (min-width: 701px)\n \t}\n \n \t#titles > button > div.count {\n-\t\tfloat: left;\n-\t\twidth: 100%;\n-\t}\n-\n-\t#titles {\n-\t\theight: 50px;\n+\t\tdisplay: block;\n \t}\n \n \t/* Because of ios, we need to actually have a full height sidebar title so the\n@@ -2022,10 +2004,6 @@ in storage.js plus the media query with (min-width: 701px)\n }\n \n @media (max-width: 464px) {\n-\t#titles, #titles > button {\n-\t\theight: 73px;\n-\t}\n-\n \t#crate-search {\n \t\tborder-radius: 4px;\n \t}"}, {"sha": "4b4cea2621fff7deeecd2087c70bec097ff0c281", "filename": "src/test/rustdoc-gui/label-next-to-symbol.goml", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0a27ac16110c0a546504a454c9891d132886f453/src%2Ftest%2Frustdoc-gui%2Flabel-next-to-symbol.goml", "raw_url": "https://github.com/rust-lang/rust/raw/0a27ac16110c0a546504a454c9891d132886f453/src%2Ftest%2Frustdoc-gui%2Flabel-next-to-symbol.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Flabel-next-to-symbol.goml?ref=0a27ac16110c0a546504a454c9891d132886f453", "patch": "@@ -31,15 +31,9 @@ compare-elements-position: (\n )\n \n // Ensure no wrap\n-compare-elements-position-near: (\n-    \"//*[@class='item-left module-item']//a[text()='replaced_function']\",\n-    \"//*[@class='item-right docblock-short']//p[text()='a thing with a label']\",\n-    {\"y\": 2},\n-)\n-// compare parent elements\n compare-elements-position: (\n     \"//*[@class='item-left module-item']//a[text()='replaced_function']/..\",\n-    \"//*[@class='item-right docblock-short']//p[text()='a thing with a label']/..\",\n+    \"//*[@class='item-right docblock-short'][text()='a thing with a label']\",\n     (\"y\"),\n )\n \n@@ -60,19 +54,13 @@ compare-elements-position: (\n )\n \n // Ensure wrap\n-compare-elements-position-near-false: (\n-    \"//*[@class='item-left module-item']//a[text()='replaced_function']\",\n-    \"//*[@class='item-right docblock-short']//p[text()='a thing with a label']\",\n-    {\"y\": 12},\n-)\n-// compare parent elements\n compare-elements-position-false: (\n     \"//*[@class='item-left module-item']//a[text()='replaced_function']/..\",\n-    \"//*[@class='item-right docblock-short']//p[text()='a thing with a label']/..\",\n+    \"//*[@class='item-right docblock-short'][text()='a thing with a label']\",\n     (\"y\"),\n )\n compare-elements-position-false: (\n     \".item-left .stab.deprecated\",\n-    \"//*[@class='item-right docblock-short']//p[text()='a thing with a label']\",\n+    \"//*[@class='item-right docblock-short'][text()='a thing with a label']\",\n     (\"y\"),\n )"}, {"sha": "631181fec66c8939fdec7c2cdeec8e68a243e150", "filename": "src/test/rustdoc/issue-101743-bold-tag.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0a27ac16110c0a546504a454c9891d132886f453/src%2Ftest%2Frustdoc%2Fissue-101743-bold-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a27ac16110c0a546504a454c9891d132886f453/src%2Ftest%2Frustdoc%2Fissue-101743-bold-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-101743-bold-tag.rs?ref=0a27ac16110c0a546504a454c9891d132886f453", "patch": "@@ -0,0 +1,19 @@\n+// Regression test for https://github.com/rust-lang/rust/issues/101743\n+\n+#![crate_name=\"foo\"]\n+\n+pub type Word = usize;\n+pub struct Repr<const B: usize>([i32; B]);\n+pub struct IBig(usize);\n+\n+pub const fn base_as_ibig<const B: Word>() -> IBig {\n+    IBig(B)\n+}\n+\n+impl<const B: Word> Repr<B> {\n+    // If we change back to rendering the value of consts, check this doesn't add\n+    // a <b> tag, but escapes correctly\n+\n+    // @has foo/struct.Repr.html '//section[@id=\"associatedconstant.BASE\"]/h4' '= _'\n+    pub const BASE: IBig = base_as_ibig::<B>();\n+}"}, {"sha": "1a8a689be1d1e2090f3b47c08e8a79dd593cc9fc", "filename": "src/test/rustdoc/short-docblock.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0a27ac16110c0a546504a454c9891d132886f453/src%2Ftest%2Frustdoc%2Fshort-docblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a27ac16110c0a546504a454c9891d132886f453/src%2Ftest%2Frustdoc%2Fshort-docblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fshort-docblock.rs?ref=0a27ac16110c0a546504a454c9891d132886f453", "patch": "@@ -1,24 +1,24 @@\n #![crate_name = \"foo\"]\n \n-// @has foo/index.html '//*[@class=\"item-right docblock-short\"]/p' 'fooo'\n-// @!has foo/index.html '//*[@class=\"item-right docblock-short\"]/p/h1' 'fooo'\n+// @has foo/index.html '//*[@class=\"item-right docblock-short\"]' 'fooo'\n+// @!has foo/index.html '//*[@class=\"item-right docblock-short\"]/h1' 'fooo'\n // @has foo/fn.foo.html '//h2[@id=\"fooo\"]/a[@href=\"#fooo\"]' 'fooo'\n \n /// # fooo\n ///\n /// foo\n pub fn foo() {}\n \n-// @has foo/index.html '//*[@class=\"item-right docblock-short\"]/p' 'mooood'\n-// @!has foo/index.html '//*[@class=\"item-right docblock-short\"]/p/h2' 'mooood'\n+// @has foo/index.html '//*[@class=\"item-right docblock-short\"]' 'mooood'\n+// @!has foo/index.html '//*[@class=\"item-right docblock-short\"]/h2' 'mooood'\n // @has foo/foo/index.html '//h3[@id=\"mooood\"]/a[@href=\"#mooood\"]' 'mooood'\n \n /// ## mooood\n ///\n /// foo mod\n pub mod foo {}\n \n-// @has foo/index.html '//*[@class=\"item-right docblock-short\"]/p/a[@href=\\\n+// @has foo/index.html '//*[@class=\"item-right docblock-short\"]/a[@href=\\\n //                      \"https://nougat.world\"]/code' 'nougat'\n \n /// [`nougat`](https://nougat.world)"}, {"sha": "195cdf009b9937f37d355f15702347a69942fe7b", "filename": "src/test/rustdoc/trait-impl.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0a27ac16110c0a546504a454c9891d132886f453/src%2Ftest%2Frustdoc%2Ftrait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a27ac16110c0a546504a454c9891d132886f453/src%2Ftest%2Frustdoc%2Ftrait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait-impl.rs?ref=0a27ac16110c0a546504a454c9891d132886f453", "patch": "@@ -21,26 +21,26 @@ pub trait Trait {\n pub struct Struct;\n \n impl Trait for Struct {\n-    // @has trait_impl/struct.Struct.html '//*[@id=\"method.a\"]/../../div[@class=\"docblock\"]/p' 'Some long docs'\n-    // @!has - '//*[@id=\"method.a\"]/../../div[@class=\"docblock\"]/p' 'link will be added'\n-    // @has - '//*[@id=\"method.a\"]/../../div[@class=\"docblock\"]/p/a' 'Read more'\n-    // @has - '//*[@id=\"method.a\"]/../../div[@class=\"docblock\"]/p/a/@href' 'trait.Trait.html#tymethod.a'\n+    // @has trait_impl/struct.Struct.html '//*[@id=\"method.a\"]/../../div[@class=\"docblock\"]' 'Some long docs'\n+    // @!has - '//*[@id=\"method.a\"]/../../div[@class=\"docblock\"]' 'link will be added'\n+    // @has - '//*[@id=\"method.a\"]/../../div[@class=\"docblock\"]/a' 'Read more'\n+    // @has - '//*[@id=\"method.a\"]/../../div[@class=\"docblock\"]/a/@href' 'trait.Trait.html#tymethod.a'\n     fn a() {}\n \n-    // @has - '//*[@id=\"method.b\"]/../../div[@class=\"docblock\"]/p' 'These docs contain'\n-    // @has - '//*[@id=\"method.b\"]/../../div[@class=\"docblock\"]/p/a' 'reference link'\n-    // @has - '//*[@id=\"method.b\"]/../../div[@class=\"docblock\"]/p/a/@href' 'https://example.com'\n-    // @has - '//*[@id=\"method.b\"]/../../div[@class=\"docblock\"]/p/a' 'Read more'\n-    // @has - '//*[@id=\"method.b\"]/../../div[@class=\"docblock\"]/p/a/@href' 'trait.Trait.html#tymethod.b'\n+    // @has - '//*[@id=\"method.b\"]/../../div[@class=\"docblock\"]' 'These docs contain'\n+    // @has - '//*[@id=\"method.b\"]/../../div[@class=\"docblock\"]/a' 'reference link'\n+    // @has - '//*[@id=\"method.b\"]/../../div[@class=\"docblock\"]/a/@href' 'https://example.com'\n+    // @has - '//*[@id=\"method.b\"]/../../div[@class=\"docblock\"]/a' 'Read more'\n+    // @has - '//*[@id=\"method.b\"]/../../div[@class=\"docblock\"]/a/@href' 'trait.Trait.html#tymethod.b'\n     fn b() {}\n \n-    // @!has - '//*[@id=\"method.c\"]/../../div[@class=\"docblock\"]/p' 'code block'\n+    // @!has - '//*[@id=\"method.c\"]/../../div[@class=\"docblock\"]' 'code block'\n     // @has - '//*[@id=\"method.c\"]/../../div[@class=\"docblock\"]/a' 'Read more'\n     // @has - '//*[@id=\"method.c\"]/../../div[@class=\"docblock\"]/a/@href' 'trait.Trait.html#tymethod.c'\n     fn c() {}\n \n-    // @has - '//*[@id=\"method.d\"]/../../div[@class=\"docblock\"]/p' 'Escaped formatting a*b*c* works'\n-    // @!has - '//*[@id=\"method.d\"]/../../div[@class=\"docblock\"]/p/em' ''\n+    // @has - '//*[@id=\"method.d\"]/../../div[@class=\"docblock\"]' 'Escaped formatting a*b*c* works'\n+    // @!has - '//*[@id=\"method.d\"]/../../div[@class=\"docblock\"]/em' ''\n     fn d() {}\n \n     // @has - '//*[@id=\"impl-Trait-for-Struct\"]/h3//a/@href' 'trait.Trait.html'"}, {"sha": "46e20d8c61f5219a860546384544cb30908ed7ae", "filename": "src/test/ui/env-funky-keys.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a27ac16110c0a546504a454c9891d132886f453/src%2Ftest%2Fui%2Fenv-funky-keys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a27ac16110c0a546504a454c9891d132886f453/src%2Ftest%2Fui%2Fenv-funky-keys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenv-funky-keys.rs?ref=0a27ac16110c0a546504a454c9891d132886f453", "patch": "@@ -6,6 +6,7 @@\n // ignore-emscripten no execve\n // ignore-sgx no execve\n // ignore-vxworks no execve\n+// ignore-fuchsia no 'execve'\n // no-prefer-dynamic\n \n #![feature(rustc_private)]"}, {"sha": "d0e97bf01f38abea06b454a9377bdd3b241dabca", "filename": "src/test/ui/process/core-run-destroy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a27ac16110c0a546504a454c9891d132886f453/src%2Ftest%2Fui%2Fprocess%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a27ac16110c0a546504a454c9891d132886f453/src%2Ftest%2Fui%2Fprocess%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprocess%2Fcore-run-destroy.rs?ref=0a27ac16110c0a546504a454c9891d132886f453", "patch": "@@ -8,6 +8,7 @@\n // ignore-emscripten no processes\n // ignore-sgx no processes\n // ignore-vxworks no 'cat' and 'sleep'\n+// ignore-fuchsia no 'cat'\n \n // N.B., these tests kill child processes. Valgrind sees these children as leaking\n // memory, which makes for some *confusing* logs. That's why these are here"}, {"sha": "f3a469791427d7460477369936d92cced818096c", "filename": "src/test/ui/process/process-envs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a27ac16110c0a546504a454c9891d132886f453/src%2Ftest%2Fui%2Fprocess%2Fprocess-envs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a27ac16110c0a546504a454c9891d132886f453/src%2Ftest%2Fui%2Fprocess%2Fprocess-envs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprocess%2Fprocess-envs.rs?ref=0a27ac16110c0a546504a454c9891d132886f453", "patch": "@@ -2,6 +2,7 @@\n // ignore-emscripten no processes\n // ignore-sgx no processes\n // ignore-vxworks no 'env'\n+// ignore-fuchsia no 'env'\n \n use std::process::Command;\n use std::env;"}, {"sha": "ad027d68588ff0b5888f3c5486bf691fee4741db", "filename": "src/test/ui/process/process-remove-from-env.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a27ac16110c0a546504a454c9891d132886f453/src%2Ftest%2Fui%2Fprocess%2Fprocess-remove-from-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a27ac16110c0a546504a454c9891d132886f453/src%2Ftest%2Fui%2Fprocess%2Fprocess-remove-from-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprocess%2Fprocess-remove-from-env.rs?ref=0a27ac16110c0a546504a454c9891d132886f453", "patch": "@@ -2,6 +2,7 @@\n // ignore-emscripten no processes\n // ignore-sgx no processes\n // ignore-vxworks no 'env'\n+// ignore-fuchsia no 'env'\n \n use std::process::Command;\n use std::env;"}, {"sha": "107eba45dc2ff15ff9a54dbdc05f9d6e3e7d5dc0", "filename": "src/test/ui/process/process-sigpipe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a27ac16110c0a546504a454c9891d132886f453/src%2Ftest%2Fui%2Fprocess%2Fprocess-sigpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a27ac16110c0a546504a454c9891d132886f453/src%2Ftest%2Fui%2Fprocess%2Fprocess-sigpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprocess%2Fprocess-sigpipe.rs?ref=0a27ac16110c0a546504a454c9891d132886f453", "patch": "@@ -14,6 +14,7 @@\n \n // ignore-emscripten no threads support\n // ignore-vxworks no 'sh'\n+// ignore-fuchsia no 'sh'\n \n use std::process;\n use std::thread;"}, {"sha": "674c26a43f208ef04f5394b069cc296348b92019", "filename": "src/test/ui/wait-forked-but-failed-child.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a27ac16110c0a546504a454c9891d132886f453/src%2Ftest%2Fui%2Fwait-forked-but-failed-child.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a27ac16110c0a546504a454c9891d132886f453/src%2Ftest%2Fui%2Fwait-forked-but-failed-child.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwait-forked-but-failed-child.rs?ref=0a27ac16110c0a546504a454c9891d132886f453", "patch": "@@ -2,6 +2,7 @@\n // ignore-emscripten no processes\n // ignore-sgx no processes\n // ignore-vxworks no 'ps'\n+// ignore-fuchsia no 'ps'\n \n #![feature(rustc_private)]\n "}, {"sha": "b07e80767fae77ce4efd6838d2582865281a0fd8", "filename": "src/tools/tidy/src/walk.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a27ac16110c0a546504a454c9891d132886f453/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a27ac16110c0a546504a454c9891d132886f453/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs?ref=0a27ac16110c0a546504a454c9891d132886f453", "patch": "@@ -23,6 +23,7 @@ pub fn filter_dirs(path: &Path) -> bool {\n         \"src/doc/book\",\n         // Filter RLS output directories\n         \"target/rls\",\n+        \"src/bootstrap/target\",\n     ];\n     skip.iter().any(|p| path.ends_with(p))\n }"}]}