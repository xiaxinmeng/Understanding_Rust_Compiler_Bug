{"sha": "1aaca5f29069a05e1aed73e33dd314c069fde756", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhYWNhNWYyOTA2OWEwNWUxYWVkNzNlMzNkZDMxNGMwNjlmZGU3NTY=", "commit": {"author": {"name": "Steven Allen", "email": "steven@stebalien.com", "date": "2016-11-19T17:53:54Z"}, "committer": {"name": "Steven Allen", "email": "steven@stebalien.com", "date": "2016-11-22T16:42:28Z"}, "message": "Add a method for setting permissions directly on an open file.\n\nOn unix like systems, the underlying file corresponding to any given path may\nchange at any time. This function makes it possible to set the permissions of\nthe a file corresponding to a `File` object even if its path changes.", "tree": {"sha": "d9b9caaf90e7c207f56d1fc4adabd8ee548c6e45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9b9caaf90e7c207f56d1fc4adabd8ee548c6e45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1aaca5f29069a05e1aed73e33dd314c069fde756", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1aaca5f29069a05e1aed73e33dd314c069fde756", "html_url": "https://github.com/rust-lang/rust/commit/1aaca5f29069a05e1aed73e33dd314c069fde756", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1aaca5f29069a05e1aed73e33dd314c069fde756/comments", "author": {"login": "Stebalien", "id": 310393, "node_id": "MDQ6VXNlcjMxMDM5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/310393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stebalien", "html_url": "https://github.com/Stebalien", "followers_url": "https://api.github.com/users/Stebalien/followers", "following_url": "https://api.github.com/users/Stebalien/following{/other_user}", "gists_url": "https://api.github.com/users/Stebalien/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stebalien/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stebalien/subscriptions", "organizations_url": "https://api.github.com/users/Stebalien/orgs", "repos_url": "https://api.github.com/users/Stebalien/repos", "events_url": "https://api.github.com/users/Stebalien/events{/privacy}", "received_events_url": "https://api.github.com/users/Stebalien/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Stebalien", "id": 310393, "node_id": "MDQ6VXNlcjMxMDM5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/310393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stebalien", "html_url": "https://github.com/Stebalien", "followers_url": "https://api.github.com/users/Stebalien/followers", "following_url": "https://api.github.com/users/Stebalien/following{/other_user}", "gists_url": "https://api.github.com/users/Stebalien/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stebalien/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stebalien/subscriptions", "organizations_url": "https://api.github.com/users/Stebalien/orgs", "repos_url": "https://api.github.com/users/Stebalien/repos", "events_url": "https://api.github.com/users/Stebalien/events{/privacy}", "received_events_url": "https://api.github.com/users/Stebalien/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f7c75b74fb7adc436eedc66c0032879293eeac6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f7c75b74fb7adc436eedc66c0032879293eeac6", "html_url": "https://github.com/rust-lang/rust/commit/0f7c75b74fb7adc436eedc66c0032879293eeac6"}], "stats": {"total": 85, "additions": 85, "deletions": 0}, "files": [{"sha": "e91e808c5489a48a6a2d2cd03929e73384996a8d", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/1aaca5f29069a05e1aed73e33dd314c069fde756/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aaca5f29069a05e1aed73e33dd314c069fde756/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=1aaca5f29069a05e1aed73e33dd314c069fde756", "patch": "@@ -348,6 +348,41 @@ impl File {\n             inner: self.inner.duplicate()?\n         })\n     }\n+\n+    /// Changes the permissions on the underlying file.\n+    ///\n+    /// # Platform-specific behavior\n+    ///\n+    /// This function currently corresponds to the `fchmod` function on Unix and\n+    /// the `SetFileInformationByHandle` function on Windows. Note that, this\n+    /// [may change in the future][changes].\n+    ///\n+    /// [changes]: ../io/index.html#platform-specific-behavior\n+    ///\n+    /// # Errors\n+    ///\n+    /// This function will return an error if the user lacks permission change\n+    /// attributes on the underlying file. It may also return an error in other\n+    /// os-specific unspecified cases.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(set_permissions_atomic)]\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// use std::fs::File;\n+    ///\n+    /// let file = File::open(\"foo.txt\")?;\n+    /// let mut perms = file.metadata()?.permissions();\n+    /// perms.set_readonly(true);\n+    /// file.set_permissions(perms)?;\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n+    #[unstable(feature = \"set_permissions_atomic\", issue=\"37916\")]\n+    pub fn set_permissions(&self, perm: Permissions) -> io::Result<()> {\n+        self.inner.set_permissions(perm.0)\n+    }\n }\n \n impl AsInner<fs_imp::File> for File {\n@@ -2469,6 +2504,24 @@ mod tests {\n         check!(fs::set_permissions(&file, p));\n     }\n \n+    #[test]\n+    fn fchmod_works() {\n+        let tmpdir = tmpdir();\n+        let path = tmpdir.join(\"in.txt\");\n+\n+        let file = check!(File::create(&path));\n+        let attr = check!(fs::metadata(&path));\n+        assert!(!attr.permissions().readonly());\n+        let mut p = attr.permissions();\n+        p.set_readonly(true);\n+        check!(file.set_permissions(p.clone()));\n+        let attr = check!(fs::metadata(&path));\n+        assert!(attr.permissions().readonly());\n+\n+        p.set_readonly(false);\n+        check!(file.set_permissions(p));\n+    }\n+\n     #[test]\n     fn sync_doesnt_kill_anything() {\n         let tmpdir = tmpdir();"}, {"sha": "9ee0458b5da365d1fae1c99bfa17fbdf0d20113f", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1aaca5f29069a05e1aed73e33dd314c069fde756/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aaca5f29069a05e1aed73e33dd314c069fde756/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=1aaca5f29069a05e1aed73e33dd314c069fde756", "patch": "@@ -526,6 +526,11 @@ impl File {\n     pub fn fd(&self) -> &FileDesc { &self.0 }\n \n     pub fn into_fd(self) -> FileDesc { self.0 }\n+\n+    pub fn set_permissions(&self, perm: FilePermissions) -> io::Result<()> {\n+        cvt_r(|| unsafe { libc::fchmod(self.0.raw(), perm.mode) })?;\n+        Ok(())\n+    }\n }\n \n impl DirBuilder {"}, {"sha": "1a563127f7f0668d69ba11485abdadfd5f49aa7d", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1aaca5f29069a05e1aed73e33dd314c069fde756/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aaca5f29069a05e1aed73e33dd314c069fde756/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=1aaca5f29069a05e1aed73e33dd314c069fde756", "patch": "@@ -389,6 +389,15 @@ pub enum FILE_INFO_BY_HANDLE_CLASS {\n     MaximumFileInfoByHandlesClass\n }\n \n+#[repr(C)]\n+pub struct FILE_BASIC_INFO {\n+    pub CreationTime: LARGE_INTEGER,\n+    pub LastAccessTime: LARGE_INTEGER,\n+    pub LastWriteTime: LARGE_INTEGER,\n+    pub ChangeTime: LARGE_INTEGER,\n+    pub FileAttributes: DWORD,\n+}\n+\n #[repr(C)]\n pub struct FILE_END_OF_FILE_INFO {\n     pub EndOfFile: LARGE_INTEGER,"}, {"sha": "7d7d78bbd87308315d75551a88c9ac5ef4558ac1", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1aaca5f29069a05e1aed73e33dd314c069fde756/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aaca5f29069a05e1aed73e33dd314c069fde756/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=1aaca5f29069a05e1aed73e33dd314c069fde756", "patch": "@@ -417,6 +417,24 @@ impl File {\n             Ok(PathBuf::from(OsString::from_wide(subst)))\n         }\n     }\n+\n+    pub fn set_permissions(&self, perm: FilePermissions) -> io::Result<()> {\n+        let mut info = c::FILE_BASIC_INFO {\n+            CreationTime: 0,\n+            LastAccessTime: 0,\n+            LastWriteTime: 0,\n+            ChangeTime: 0,\n+            FileAttributes: perm.attrs,\n+        };\n+        let size = mem::size_of_val(&info);\n+        cvt(unsafe {\n+            c::SetFileInformationByHandle(self.handle.raw(),\n+                                          c::FileBasicInfo,\n+                                          &mut info as *mut _ as *mut _,\n+                                          size as c::DWORD)\n+        })?;\n+        Ok(())\n+    }\n }\n \n impl FromInner<c::HANDLE> for File {"}]}