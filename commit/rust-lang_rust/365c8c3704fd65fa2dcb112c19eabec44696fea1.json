{"sha": "365c8c3704fd65fa2dcb112c19eabec44696fea1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2NWM4YzM3MDRmZDY1ZmEyZGNiMTEyYzE5ZWFiZWM0NDY5NmZlYTE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-10T23:29:38Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-15T13:21:32Z"}, "message": "Remove GenericParamDef::to_type", "tree": {"sha": "fc9b8f3336fb72afb0cd719132fdf62567ddff34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc9b8f3336fb72afb0cd719132fdf62567ddff34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/365c8c3704fd65fa2dcb112c19eabec44696fea1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/365c8c3704fd65fa2dcb112c19eabec44696fea1", "html_url": "https://github.com/rust-lang/rust/commit/365c8c3704fd65fa2dcb112c19eabec44696fea1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/365c8c3704fd65fa2dcb112c19eabec44696fea1/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "007de2f89672559c8fd4593831c3edb93f1983a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/007de2f89672559c8fd4593831c3edb93f1983a5", "html_url": "https://github.com/rust-lang/rust/commit/007de2f89672559c8fd4593831c3edb93f1983a5"}], "stats": {"total": 57, "additions": 34, "deletions": 23}, "files": [{"sha": "aef8e7f5eea752e61e06f1c8441a057acecae70a", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/365c8c3704fd65fa2dcb112c19eabec44696fea1/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365c8c3704fd65fa2dcb112c19eabec44696fea1/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=365c8c3704fd65fa2dcb112c19eabec44696fea1", "patch": "@@ -743,13 +743,6 @@ pub struct GenericParamDef {\n }\n \n impl GenericParamDef {\n-    pub fn to_type(&self) -> TypeParamDef {\n-        match self.kind {\n-            GenericParamDefKind::Type(ty) => ty,\n-            _ => bug!(\"cannot convert a non-type to a type\")\n-        }\n-    }\n-\n     pub fn to_early_bound_region_data(&self) -> ty::EarlyBoundRegion {\n         match self.kind {\n             GenericParamDefKind::Lifetime => {"}, {"sha": "6c64d1ae0213643a2579fa265d32727e572b6177", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/365c8c3704fd65fa2dcb112c19eabec44696fea1/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365c8c3704fd65fa2dcb112c19eabec44696fea1/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=365c8c3704fd65fa2dcb112c19eabec44696fea1", "patch": "@@ -20,7 +20,7 @@ use middle::resolve_lifetime as rl;\n use namespace::Namespace;\n use rustc::ty::subst::{Kind, UnpackedKind, Subst, Substs};\n use rustc::traits;\n-use rustc::ty::{self, RegionKind, Ty, TyCtxt, ToPredicate, TypeFoldable};\n+use rustc::ty::{self, RegionKind, Ty, TyCtxt, GenericParamDefKind, ToPredicate, TypeFoldable};\n use rustc::ty::wf::object_region_bounds;\n use rustc_target::spec::abi;\n use std::slice;\n@@ -246,11 +246,13 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n         let is_object = self_ty.map_or(false, |ty| ty.sty == TRAIT_OBJECT_DUMMY_SELF);\n         let default_needs_object_self = |param: &ty::GenericParamDef| {\n-            if is_object && param.to_type().has_default {\n-                if tcx.at(span).type_of(param.def_id).has_self_ty() {\n-                    // There is no suitable inference default for a type parameter\n-                    // that references self, in an object type.\n-                    return true;\n+            if let GenericParamDefKind::Type(ty) = param.kind {\n+                if is_object && ty.has_default {\n+                    if tcx.at(span).type_of(param.def_id).has_self_ty() {\n+                        // There is no suitable inference default for a type parameter\n+                        // that references self, in an object type.\n+                        return true;\n+                    }\n                 }\n             }\n \n@@ -272,6 +274,11 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 return ty;\n             }\n \n+            let has_default = match def.kind {\n+                GenericParamDefKind::Type(ty) => ty.has_default,\n+                _ => unreachable!()\n+            };\n+\n             let i = i - (param_counts.lifetimes + own_self);\n             if i < num_types_provided {\n                 // A provided type parameter.\n@@ -284,7 +291,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                     self.ty_infer(span)\n                 };\n                 ty_var\n-            } else if def.to_type().has_default {\n+            } else if has_default {\n                 // No type parameter provided, but a default exists.\n \n                 // If we are converting an object type, then the"}, {"sha": "355440769cdf08d00cc21eaf54b6e8ed9fbf7d98", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/365c8c3704fd65fa2dcb112c19eabec44696fea1/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365c8c3704fd65fa2dcb112c19eabec44696fea1/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=365c8c3704fd65fa2dcb112c19eabec44696fea1", "patch": "@@ -730,21 +730,22 @@ fn compare_synthetic_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let trait_m_generics = tcx.generics_of(trait_m.def_id);\n     let impl_m_type_params = impl_m_generics.params.iter().filter_map(|param| {\n         match param.kind {\n-            GenericParamDefKind::Type(_) => Some(param),\n+            GenericParamDefKind::Type(ty) => Some((param.def_id, ty.synthetic)),\n             GenericParamDefKind::Lifetime => None,\n         }\n     });\n     let trait_m_type_params = trait_m_generics.params.iter().filter_map(|param| {\n         match param.kind {\n-            GenericParamDefKind::Type(_) => Some(param),\n+            GenericParamDefKind::Type(ty) => Some((param.def_id, ty.synthetic)),\n             GenericParamDefKind::Lifetime => None,\n         }\n     });\n-    for (impl_ty, trait_ty) in impl_m_type_params.zip(trait_m_type_params) {\n-        if impl_ty.to_type().synthetic != trait_ty.to_type().synthetic {\n-            let impl_node_id = tcx.hir.as_local_node_id(impl_ty.def_id).unwrap();\n+    for ((impl_def_id, impl_synthetic),\n+         (trait_def_id, trait_synthetic)) in impl_m_type_params.zip(trait_m_type_params) {\n+        if impl_synthetic != trait_synthetic {\n+            let impl_node_id = tcx.hir.as_local_node_id(impl_def_id).unwrap();\n             let impl_span = tcx.hir.span(impl_node_id);\n-            let trait_span = tcx.def_span(trait_ty.def_id);\n+            let trait_span = tcx.def_span(trait_def_id);\n             let mut err = struct_span_err!(tcx.sess,\n                                            impl_span,\n                                            E0643,"}, {"sha": "a6b072f3213d90663a18e678a7a0ebb2b6eb13a0", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/365c8c3704fd65fa2dcb112c19eabec44696fea1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365c8c3704fd65fa2dcb112c19eabec44696fea1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=365c8c3704fd65fa2dcb112c19eabec44696fea1", "patch": "@@ -96,7 +96,7 @@ use rustc::middle::region;\n use rustc::mir::interpret::{GlobalId};\n use rustc::ty::subst::{Kind, Subst, Substs};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, TraitEngine};\n-use rustc::ty::{self, Ty, TyCtxt, Visibility, ToPredicate};\n+use rustc::ty::{self, Ty, TyCtxt, GenericParamDefKind, Visibility, ToPredicate};\n use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::maps::Providers;\n@@ -4802,10 +4802,15 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 i -= generics.param_counts().lifetimes;\n             }\n \n+            let has_default = match def.kind {\n+                GenericParamDefKind::Type(ty) => ty.has_default,\n+                _ => unreachable!()\n+            };\n+\n             if let Some(ast_ty) = types.get(i) {\n                 // A provided type parameter.\n                 self.to_ty(ast_ty)\n-            } else if !infer_types && def.to_type().has_default {\n+            } else if !infer_types && has_default {\n                 // No type parameter provided, but a default exists.\n                 let default = self.tcx.type_of(def.def_id);\n                 self.normalize_ty("}, {"sha": "a37137c68cb76ac523f322e5852640a870bd0705", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/365c8c3704fd65fa2dcb112c19eabec44696fea1/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365c8c3704fd65fa2dcb112c19eabec44696fea1/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=365c8c3704fd65fa2dcb112c19eabec44696fea1", "patch": "@@ -371,7 +371,12 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n \n     let generics = tcx.generics_of(def_id);\n     let is_our_default = |def: &ty::GenericParamDef| {\n-        def.to_type().has_default && def.index >= generics.parent_count as u32\n+        match def.kind {\n+            GenericParamDefKind::Type(ty) => {\n+                ty.has_default && def.index >= generics.parent_count as u32\n+            }\n+            _ => unreachable!()\n+        }\n     };\n \n     // Check that concrete defaults are well-formed. See test `type-check-defaults.rs`."}]}