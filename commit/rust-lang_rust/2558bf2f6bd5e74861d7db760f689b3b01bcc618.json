{"sha": "2558bf2f6bd5e74861d7db760f689b3b01bcc618", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NThiZjJmNmJkNWU3NDg2MWQ3ZGI3NjBmNjg5YjNiMDFiY2M2MTg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-16T14:04:50Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-16T14:04:50Z"}, "message": "Workaround for missing `#[rustc_args_required_const(..)]` support\n\ncc #666", "tree": {"sha": "d9726d4a7f92a13246af0703269f74a3663c3032", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9726d4a7f92a13246af0703269f74a3663c3032"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2558bf2f6bd5e74861d7db760f689b3b01bcc618", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2558bf2f6bd5e74861d7db760f689b3b01bcc618", "html_url": "https://github.com/rust-lang/rust/commit/2558bf2f6bd5e74861d7db760f689b3b01bcc618", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2558bf2f6bd5e74861d7db760f689b3b01bcc618/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bf47ad0d42ebf756518584fe45fd081f3eba7c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bf47ad0d42ebf756518584fe45fd081f3eba7c3", "html_url": "https://github.com/rust-lang/rust/commit/6bf47ad0d42ebf756518584fe45fd081f3eba7c3"}], "stats": {"total": 43, "additions": 33, "deletions": 10}, "files": [{"sha": "61182a49b9cce8142045ab6260f5ca93fe457958", "filename": "example/std_example.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2558bf2f6bd5e74861d7db760f689b3b01bcc618/example%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2558bf2f6bd5e74861d7db760f689b3b01bcc618/example%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fstd_example.rs?ref=2558bf2f6bd5e74861d7db760f689b3b01bcc618", "patch": "@@ -75,6 +75,9 @@ unsafe fn test_simd() {\n     test_mm_cvtepi8_epi16();\n     test_mm_cvtsi128_si64();\n \n+    // FIXME(#666) implement `#[rustc_arg_required_const(..)]` support\n+    //test_mm_extract_epi8();\n+\n     let mask1 = _mm_movemask_epi8(dbg!(_mm_setr_epi8(255u8 as i8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)));\n     assert_eq!(mask1, 1);\n }\n@@ -194,6 +197,19 @@ unsafe fn test_mm_cvtepi8_epi16() {\n     assert_eq_m128i(r, e);\n }\n \n+#[target_feature(enable = \"sse4.1\")]\n+unsafe fn test_mm_extract_epi8() {\n+    #[rustfmt::skip]\n+    let a = _mm_setr_epi8(\n+        -1, 1, 2, 3, 4, 5, 6, 7,\n+        8, 9, 10, 11, 12, 13, 14, 15\n+    );\n+    let r1 = _mm_extract_epi8(a, 0);\n+    let r2 = _mm_extract_epi8(a, 19);\n+    assert_eq!(r1, 0xFF);\n+    assert_eq!(r2, 3);\n+}\n+\n #[derive(PartialEq)]\n enum LoopState {\n     Continue(()),"}, {"sha": "23f550050e45c7c6b92dc2a8b416af678c528e74", "filename": "src/constant.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2558bf2f6bd5e74861d7db760f689b3b01bcc618/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2558bf2f6bd5e74861d7db760f689b3b01bcc618/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=2558bf2f6bd5e74861d7db760f689b3b01bcc618", "patch": "@@ -439,22 +439,19 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for TransPlaceInterpreter {\n pub fn mir_operand_get_const_val<'tcx>(\n     fx: &FunctionCx<'_, 'tcx, impl Backend>,\n     operand: &Operand<'tcx>,\n-) -> Result<&'tcx Const<'tcx>, String> {\n+) -> Option<&'tcx Const<'tcx>> {\n     let place = match operand {\n-        Operand::Copy(place) => place,\n-        Operand::Constant(const_) => return Ok(force_eval_const(fx, const_.literal)),\n-        _ => return Err(format!(\"{:?}\", operand)),\n+        Operand::Copy(place) | Operand::Move(place) => place,\n+        Operand::Constant(const_) => return Some(force_eval_const(fx, const_.literal)),\n     };\n \n     assert!(place.projection.is_none());\n     let static_ = match &place.base {\n-        PlaceBase::Static(static_) => {\n-            static_\n-        }\n-        PlaceBase::Local(_) => return Err(\"local\".to_string()),\n+        PlaceBase::Static(static_) => static_,\n+        PlaceBase::Local(_) => return None,\n     };\n \n-    Ok(match &static_.kind {\n+    Some(match &static_.kind {\n         StaticKind::Static(_) => unimplemented!(),\n         StaticKind::Promoted(promoted) => {\n             fx.tcx.const_eval(ParamEnv::reveal_all().and(GlobalId {"}, {"sha": "bd78271057c9e9fe1a31cc01aca05ec49432ec12", "filename": "src/intrinsics.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2558bf2f6bd5e74861d7db760f689b3b01bcc618/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2558bf2f6bd5e74861d7db760f689b3b01bcc618/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=2558bf2f6bd5e74861d7db760f689b3b01bcc618", "patch": "@@ -951,7 +951,17 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n         };\n \n         simd_extract, (c v, o idx) {\n-            let idx_const = crate::constant::mir_operand_get_const_val(fx, idx).expect(\"simd_extract* idx not const\");\n+            let idx_const = if let Some(idx_const) = crate::constant::mir_operand_get_const_val(fx, idx) {\n+                idx_const\n+            } else {\n+                fx.tcx.sess.span_warn(\n+                    fx.mir.span,\n+                    \"`#[rustc_arg_required_const(..)]` is not yet supported. Calling this function will panic.\",\n+                );\n+                crate::trap::trap_panic(fx, \"`#[rustc_arg_required_const(..)]` is not yet supported.\");\n+                return;\n+            };\n+\n             let idx = idx_const.val.try_to_bits(Size::from_bytes(4 /* u32*/)).expect(&format!(\"kind not scalar: {:?}\", idx_const));\n             let (_lane_type, lane_count) = lane_type_and_count(fx, v.layout(), intrinsic);\n             if idx >= lane_count.into() {"}]}