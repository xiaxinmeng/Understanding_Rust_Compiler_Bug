{"sha": "5481c78f32cdf4fd61dab239d7c4675929fd2ba8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0ODFjNzhmMzJjZGY0ZmQ2MWRhYjIzOWQ3YzQ2NzU5MjlmZDJiYTg=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-17T16:24:16Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-17T16:24:16Z"}, "message": "Check whether cursor is on and not between intra doc links in goto_definition", "tree": {"sha": "de13e9e2b264161d9b695a746a794cfa56a0a515", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de13e9e2b264161d9b695a746a794cfa56a0a515"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5481c78f32cdf4fd61dab239d7c4675929fd2ba8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5481c78f32cdf4fd61dab239d7c4675929fd2ba8", "html_url": "https://github.com/rust-lang/rust/commit/5481c78f32cdf4fd61dab239d7c4675929fd2ba8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5481c78f32cdf4fd61dab239d7c4675929fd2ba8/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edf11480ceae1ef77d7084604011c0ef6f692c72", "url": "https://api.github.com/repos/rust-lang/rust/commits/edf11480ceae1ef77d7084604011c0ef6f692c72", "html_url": "https://github.com/rust-lang/rust/commit/edf11480ceae1ef77d7084604011c0ef6f692c72"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "598b47e417c9e5d0a4cabaf3ff6f280cee978a90", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5481c78f32cdf4fd61dab239d7c4675929fd2ba8/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5481c78f32cdf4fd61dab239d7c4675929fd2ba8/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=5481c78f32cdf4fd61dab239d7c4675929fd2ba8", "patch": "@@ -1,11 +1,14 @@\n+use std::ops::Range;\n+\n use either::Either;\n use hir::{HasAttrs, ModuleDef, Semantics};\n use ide_db::{\n     defs::{Definition, NameClass, NameRefClass},\n     RootDatabase,\n };\n use syntax::{\n-    ast, match_ast, AstNode, AstToken, SyntaxKind::*, SyntaxToken, TextSize, TokenAtOffset, T,\n+    ast, match_ast, AstNode, AstToken, SyntaxKind::*, SyntaxToken, TextRange, TextSize,\n+    TokenAtOffset, T,\n };\n \n use crate::{\n@@ -92,15 +95,18 @@ fn extract_positioned_link_from_comment(\n     position: FilePosition,\n     comment: &ast::Comment,\n ) -> Option<(String, Option<hir::Namespace>)> {\n-    let comment_range = comment.syntax().text_range();\n     let doc_comment = comment.doc_comment()?;\n+    let comment_start =\n+        comment.syntax().text_range().start() + TextSize::from(comment.prefix().len() as u32);\n     let def_links = extract_definitions_from_markdown(doc_comment);\n-    let start = comment_range.start() + TextSize::from(comment.prefix().len() as u32);\n-    let (def_link, ns, _) = def_links.iter().min_by_key(|(_, _, def_link_range)| {\n-        let matched_position = start + TextSize::from(def_link_range.start as u32);\n-        position.offset.checked_sub(matched_position).unwrap_or_else(|| comment_range.end())\n+    let (def_link, ns, _) = def_links.into_iter().find(|&(_, _, Range { start, end })| {\n+        TextRange::at(\n+            comment_start + TextSize::from(start as u32),\n+            TextSize::from((end - start) as u32),\n+        )\n+        .contains(position.offset)\n     })?;\n-    Some((def_link.to_string(), *ns))\n+    Some((def_link, ns))\n }\n \n fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n@@ -1134,7 +1140,7 @@ fn foo<'foo>(_: &'foo ()) {\n     fn goto_def_for_intra_doc_link_same_file() {\n         check(\n             r#\"\n-/// Blah, [`bar`](bar) .. [`foo`](foo)$0 has [`bar`](bar)\n+/// Blah, [`bar`](bar) .. [`foo`](foo$0) has [`bar`](bar)\n pub fn bar() { }\n \n /// You might want to see [`std::fs::read()`] too."}]}