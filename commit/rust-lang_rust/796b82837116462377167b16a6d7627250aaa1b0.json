{"sha": "796b82837116462377167b16a6d7627250aaa1b0", "node_id": "C_kwDOAAsO6NoAKDc5NmI4MjgzNzExNjQ2MjM3NzE2N2IxNmE2ZDc2MjcyNTBhYWExYjA", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-04-01T11:38:43Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-04-01T11:38:43Z"}, "message": "convert more `DefId`s to `LocalDefId`", "tree": {"sha": "d3d2f69c2cbb377f602176428ba8022cb31eef58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3d2f69c2cbb377f602176428ba8022cb31eef58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/796b82837116462377167b16a6d7627250aaa1b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/796b82837116462377167b16a6d7627250aaa1b0", "html_url": "https://github.com/rust-lang/rust/commit/796b82837116462377167b16a6d7627250aaa1b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/796b82837116462377167b16a6d7627250aaa1b0/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0677edc86e342f333d4828b0ee1ef395a4e70fe5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0677edc86e342f333d4828b0ee1ef395a4e70fe5", "html_url": "https://github.com/rust-lang/rust/commit/0677edc86e342f333d4828b0ee1ef395a4e70fe5"}], "stats": {"total": 93, "additions": 50, "deletions": 43}, "files": [{"sha": "c33c0c996bdeeae535704f863bd4c9fb88f10466", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/796b82837116462377167b16a6d7627250aaa1b0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/796b82837116462377167b16a6d7627250aaa1b0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=796b82837116462377167b16a6d7627250aaa1b0", "patch": "@@ -237,15 +237,15 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                 ObligationCauseCode::MatchImpl(parent, ..) => parent.code(),\n                 _ => cause.code(),\n             }\n-            && let (ObligationCauseCode::ItemObligation(item_def_id), None) = (code, override_error_code)\n+            && let (&ObligationCauseCode::ItemObligation(item_def_id), None) = (code, override_error_code)\n         {\n             // Same case of `impl Foo for dyn Bar { fn qux(&self) {} }` introducing a `'static`\n             // lifetime as above, but called using a fully-qualified path to the method:\n             // `Foo::qux(bar)`.\n             let mut v = TraitObjectVisitor(FxHashSet::default());\n             v.visit_ty(param.param_ty);\n             if let Some((ident, self_ty)) =\n-                self.get_impl_ident_and_self_ty_from_trait(*item_def_id, &v.0)\n+                self.get_impl_ident_and_self_ty_from_trait(item_def_id, &v.0)\n                 && self.suggest_constrain_dyn_trait_in_impl(&mut err, &v.0, ident, self_ty)\n             {\n                 override_error_code = Some(ident.name);"}, {"sha": "6d23dc4f471f7392910365a46422f921d111398b", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/796b82837116462377167b16a6d7627250aaa1b0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/796b82837116462377167b16a6d7627250aaa1b0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=796b82837116462377167b16a6d7627250aaa1b0", "patch": "@@ -7,7 +7,7 @@ use crate::traits::ObligationCauseCode::CompareImplMethodObligation;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::Visitor;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::print::RegionHighlightMode;\n@@ -51,7 +51,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         {\n             let guar = self.emit_associated_type_err(\n                 span,\n-                self.infcx.tcx.item_name(impl_item_def_id),\n+                self.infcx.tcx.item_name(impl_item_def_id.to_def_id()),\n                 impl_item_def_id,\n                 trait_item_def_id,\n             );\n@@ -155,7 +155,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         &self,\n         span: Span,\n         item_name: Symbol,\n-        impl_item_def_id: DefId,\n+        impl_item_def_id: LocalDefId,\n         trait_item_def_id: DefId,\n     ) -> ErrorGuaranteed {\n         let impl_sp = self.tcx().def_span(impl_item_def_id);"}, {"sha": "5dcac7f56cc41dfe630553c7c417d62e35357d39", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/796b82837116462377167b16a6d7627250aaa1b0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/796b82837116462377167b16a6d7627250aaa1b0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=796b82837116462377167b16a6d7627250aaa1b0", "patch": "@@ -348,7 +348,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 let mut err = self.report_concrete_failure(*parent, sub, sup);\n \n                 let trait_item_span = self.tcx.def_span(trait_item_def_id);\n-                let item_name = self.tcx.item_name(impl_item_def_id);\n+                let item_name = self.tcx.item_name(impl_item_def_id.to_def_id());\n                 err.span_label(\n                     trait_item_span,\n                     format!(\"definition of `{}` from trait\", item_name),\n@@ -370,7 +370,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     let where_clause_span = self\n                         .tcx\n                         .hir()\n-                        .get_generics(impl_item_def_id.expect_local())\n+                        .get_generics(impl_item_def_id)\n                         .unwrap()\n                         .where_clause\n                         .tail_span_for_suggestion();"}, {"sha": "0bb66054922814b3a4cf166c0a240f30e1fdbdf7", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/796b82837116462377167b16a6d7627250aaa1b0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/796b82837116462377167b16a6d7627250aaa1b0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=796b82837116462377167b16a6d7627250aaa1b0", "patch": "@@ -425,16 +425,20 @@ pub enum SubregionOrigin<'tcx> {\n \n     /// Comparing the signature and requirements of an impl method against\n     /// the containing trait.\n-    CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },\n+    CompareImplMethodObligation {\n+        span: Span,\n+        impl_item_def_id: LocalDefId,\n+        trait_item_def_id: DefId,\n+    },\n \n     /// Comparing the signature and requirements of an impl associated type\n     /// against the containing trait\n-    CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },\n+    CompareImplTypeObligation { span: Span, impl_item_def_id: LocalDefId, trait_item_def_id: DefId },\n \n     /// Checking that the bounds of a trait's associated type hold for a given impl\n     CheckAssociatedTypeBounds {\n         parent: Box<SubregionOrigin<'tcx>>,\n-        impl_item_def_id: DefId,\n+        impl_item_def_id: LocalDefId,\n         trait_item_def_id: DefId,\n     },\n }"}, {"sha": "25b11e31d57d4737d32cff0da17e153c2a22f3a0", "filename": "compiler/rustc_infer/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/796b82837116462377167b16a6d7627250aaa1b0/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/796b82837116462377167b16a6d7627250aaa1b0/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=796b82837116462377167b16a6d7627250aaa1b0", "patch": "@@ -4,7 +4,7 @@ use crate::infer::InferCtxt;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{struct_span_err, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::ty::TyCtxt;\n use rustc_span::{MultiSpan, Span};\n use std::fmt;\n@@ -14,7 +14,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn report_extra_impl_obligation(\n         &self,\n         error_span: Span,\n-        impl_item_def_id: DefId,\n+        impl_item_def_id: LocalDefId,\n         trait_item_def_id: DefId,\n         requirement: &dyn fmt::Display,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n@@ -25,7 +25,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         if let Some(trait_item_span) = self.tcx.hir().span_if_local(trait_item_def_id) {\n             let span = self.tcx.sess.source_map().guess_head_span(trait_item_span);\n-            let item_name = self.tcx.item_name(impl_item_def_id);\n+            let item_name = self.tcx.item_name(impl_item_def_id.to_def_id());\n             err.span_label(span, format!(\"definition of `{}` from trait\", item_name));\n         }\n "}, {"sha": "353b872a216daa2aac1d6b2e6e562f658e12e7b9", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/796b82837116462377167b16a6d7627250aaa1b0/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/796b82837116462377167b16a6d7627250aaa1b0/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=796b82837116462377167b16a6d7627250aaa1b0", "patch": "@@ -276,19 +276,19 @@ pub enum ObligationCauseCode<'tcx> {\n \n     /// Error derived when matching traits/impls; see ObligationCause for more details\n     CompareImplMethodObligation {\n-        impl_item_def_id: DefId,\n+        impl_item_def_id: LocalDefId,\n         trait_item_def_id: DefId,\n     },\n \n     /// Error derived when matching traits/impls; see ObligationCause for more details\n     CompareImplTypeObligation {\n-        impl_item_def_id: DefId,\n+        impl_item_def_id: LocalDefId,\n         trait_item_def_id: DefId,\n     },\n \n     /// Checking that the bounds of a trait's associated type hold for a given impl\n     CheckAssociatedTypeBounds {\n-        impl_item_def_id: DefId,\n+        impl_item_def_id: LocalDefId,\n         trait_item_def_id: DefId,\n     },\n "}, {"sha": "51b09906e396ca668f15b16ba285650956521184", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/796b82837116462377167b16a6d7627250aaa1b0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/796b82837116462377167b16a6d7627250aaa1b0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=796b82837116462377167b16a6d7627250aaa1b0", "patch": "@@ -1797,15 +1797,15 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                     self.suggest_fully_qualified_path(&mut err, def_id, span, trait_ref.def_id());\n                 } else if let (\n                     Ok(ref snippet),\n-                    ObligationCauseCode::BindingObligation(ref def_id, _),\n+                    &ObligationCauseCode::BindingObligation(def_id, _),\n                 ) =\n                     (self.tcx.sess.source_map().span_to_snippet(span), obligation.cause.code())\n                 {\n-                    let generics = self.tcx.generics_of(*def_id);\n+                    let generics = self.tcx.generics_of(def_id);\n                     if generics.params.iter().any(|p| p.name != kw::SelfUpper)\n                         && !snippet.ends_with('>')\n                         && !generics.has_impl_trait()\n-                        && !self.tcx.fn_trait_kind_from_lang_item(*def_id).is_some()\n+                        && !self.tcx.fn_trait_kind_from_lang_item(def_id).is_some()\n                     {\n                         // FIXME: To avoid spurious suggestions in functions where type arguments\n                         // where already supplied, we check the snippet to make sure it doesn't\n@@ -2107,6 +2107,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n             \"suggest_unsized_bound_if_applicable: pred={:?} item_def_id={:?} span={:?}\",\n             pred, item_def_id, span\n         );\n+\n         let (Some(node), true) = (\n             self.tcx.hir().get_if_local(item_def_id),\n             Some(pred.def_id()) == self.tcx.lang_items().sized_trait(),"}, {"sha": "b49a5f6578f75bdf670e0a012b72f5f574bc4b81", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/796b82837116462377167b16a6d7627250aaa1b0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/796b82837116462377167b16a6d7627250aaa1b0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=796b82837116462377167b16a6d7627250aaa1b0", "patch": "@@ -128,7 +128,7 @@ pub trait InferCtxtExt<'tcx> {\n     fn suggest_fully_qualified_path(\n         &self,\n         err: &mut Diagnostic,\n-        def_id: DefId,\n+        item_def_id: DefId,\n         span: Span,\n         trait_ref: DefId,\n     );\n@@ -1317,16 +1317,16 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     fn suggest_fully_qualified_path(\n         &self,\n         err: &mut Diagnostic,\n-        def_id: DefId,\n+        item_def_id: DefId,\n         span: Span,\n         trait_ref: DefId,\n     ) {\n-        if let Some(assoc_item) = self.tcx.opt_associated_item(def_id) {\n+        if let Some(assoc_item) = self.tcx.opt_associated_item(item_def_id) {\n             if let ty::AssocKind::Const | ty::AssocKind::Type = assoc_item.kind {\n                 err.note(&format!(\n                     \"{}s cannot be accessed directly on a `trait`, they can only be \\\n                         accessed through a specific `impl`\",\n-                    assoc_item.kind.as_def_kind().descr(def_id)\n+                    assoc_item.kind.as_def_kind().descr(item_def_id)\n                 ));\n                 err.span_suggestion(\n                     span,"}, {"sha": "0bd5e018f4a3851bca1685f7524a0b6b2e240d88", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/796b82837116462377167b16a6d7627250aaa1b0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/796b82837116462377167b16a6d7627250aaa1b0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=796b82837116462377167b16a6d7627250aaa1b0", "patch": "@@ -28,7 +28,6 @@ use super::{potentially_plural_count, FnCtxt, Inherited};\n /// - `impl_m_span`: span to use for reporting errors\n /// - `trait_m`: the method in the trait\n /// - `impl_trait_ref`: the TraitRef corresponding to the trait implementation\n-\n crate fn compare_impl_method<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     impl_m: &ty::AssocItem,\n@@ -88,7 +87,7 @@ fn compare_predicate_entailment<'tcx>(\n         impl_m_span,\n         impl_m_hir_id,\n         ObligationCauseCode::CompareImplMethodObligation {\n-            impl_item_def_id: impl_m.def_id,\n+            impl_item_def_id: impl_m.def_id.expect_local(),\n             trait_item_def_id: trait_m.def_id,\n         },\n     );\n@@ -231,7 +230,7 @@ fn compare_predicate_entailment<'tcx>(\n                 span,\n                 impl_m_hir_id,\n                 ObligationCauseCode::CompareImplMethodObligation {\n-                    impl_item_def_id: impl_m.def_id,\n+                    impl_item_def_id: impl_m.def_id.expect_local(),\n                     trait_item_def_id: trait_m.def_id,\n                 },\n             );\n@@ -1154,7 +1153,7 @@ fn compare_type_predicate_entailment<'tcx>(\n         impl_ty_span,\n         impl_ty_hir_id,\n         ObligationCauseCode::CompareImplTypeObligation {\n-            impl_item_def_id: impl_ty.def_id,\n+            impl_item_def_id: impl_ty.def_id.expect_local(),\n             trait_item_def_id: trait_ty.def_id,\n         },\n     );\n@@ -1383,7 +1382,7 @@ pub fn check_type_bounds<'tcx>(\n             impl_ty_span,\n             impl_ty_hir_id,\n             ObligationCauseCode::CheckAssociatedTypeBounds {\n-                impl_item_def_id: impl_ty.def_id,\n+                impl_item_def_id: impl_ty.def_id.expect_local(),\n                 trait_item_def_id: trait_ty.def_id,\n             },\n         );"}, {"sha": "bc0fa9165561da32e12488fae8967c8eb25e2216", "filename": "compiler/rustc_typeck/src/check/method/confirm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/796b82837116462377167b16a6d7627250aaa1b0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/796b82837116462377167b16a6d7627250aaa1b0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs?ref=796b82837116462377167b16a6d7627250aaa1b0", "patch": "@@ -2,9 +2,9 @@ use super::{probe, MethodCallee};\n \n use crate::astconv::{AstConv, CreateSubstsForGenericArgsCtxt, IsMethodCall};\n use crate::check::{callee, FnCtxt};\n-use crate::hir::def_id::DefId;\n-use crate::hir::GenericArg;\n use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::GenericArg;\n use rustc_infer::infer::{self, InferOk};\n use rustc_middle::traits::{ObligationCauseCode, UnifyReceiverContext};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, PointerCast};"}, {"sha": "9b1767c7835555d7b7b4c65ee7e49970f5ac8765", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/796b82837116462377167b16a6d7627250aaa1b0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/796b82837116462377167b16a6d7627250aaa1b0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=796b82837116462377167b16a6d7627250aaa1b0", "patch": "@@ -940,7 +940,7 @@ fn check_associated_item(\n                     item.ident(fcx.tcx).span,\n                     sig,\n                     hir_sig.decl,\n-                    item.def_id,\n+                    item.def_id.expect_local(),\n                     &mut implied_bounds,\n                 );\n                 check_method_receiver(fcx, hir_sig, item, self_ty);\n@@ -1068,7 +1068,7 @@ fn check_type_defn<'tcx, F>(\n             }\n         }\n \n-        check_where_clauses(fcx, item.span, item.def_id.to_def_id(), None);\n+        check_where_clauses(fcx, item.span, item.def_id, None);\n \n         // No implied bounds in a struct definition.\n         FxHashSet::default()\n@@ -1096,7 +1096,7 @@ fn check_trait(tcx: TyCtxt<'_>, item: &hir::Item<'_>) {\n \n     // FIXME: this shouldn't use an `FnCtxt` at all.\n     for_item(tcx, item).with_fcx(|fcx| {\n-        check_where_clauses(fcx, item.span, item.def_id.to_def_id(), None);\n+        check_where_clauses(fcx, item.span, item.def_id, None);\n \n         FxHashSet::default()\n     });\n@@ -1144,7 +1144,7 @@ fn check_item_fn(\n     for_id(tcx, def_id, span).with_fcx(|fcx| {\n         let sig = tcx.fn_sig(def_id);\n         let mut implied_bounds = FxHashSet::default();\n-        check_fn_or_method(fcx, ident.span, sig, decl, def_id.to_def_id(), &mut implied_bounds);\n+        check_fn_or_method(fcx, ident.span, sig, decl, def_id, &mut implied_bounds);\n         implied_bounds\n     })\n }\n@@ -1238,7 +1238,7 @@ fn check_impl<'tcx>(\n             }\n         }\n \n-        check_where_clauses(fcx, item.span, item.def_id.to_def_id(), None);\n+        check_where_clauses(fcx, item.span, item.def_id, None);\n \n         fcx.impl_implied_bounds(item.def_id.to_def_id(), item.span)\n     });\n@@ -1249,7 +1249,7 @@ fn check_impl<'tcx>(\n fn check_where_clauses<'tcx, 'fcx>(\n     fcx: &FnCtxt<'fcx, 'tcx>,\n     span: Span,\n-    def_id: DefId,\n+    def_id: LocalDefId,\n     return_ty: Option<(Ty<'tcx>, Span)>,\n ) {\n     let tcx = fcx.tcx;\n@@ -1317,7 +1317,7 @@ fn check_where_clauses<'tcx, 'fcx>(\n     // For more examples see tests `defaults-well-formedness.rs` and `type-check-defaults.rs`.\n     //\n     // First we build the defaulted substitution.\n-    let substs = InternalSubsts::for_item(tcx, def_id, |param, _| {\n+    let substs = InternalSubsts::for_item(tcx, def_id.to_def_id(), |param, _| {\n         match param.kind {\n             GenericParamDefKind::Lifetime => {\n                 // All regions are identity.\n@@ -1411,8 +1411,11 @@ fn check_where_clauses<'tcx, 'fcx>(\n             // below: there, we are not trying to prove those predicates\n             // to be *true* but merely *well-formed*.\n             let pred = fcx.normalize_associated_types_in(sp, pred);\n-            let cause =\n-                traits::ObligationCause::new(sp, fcx.body_id, traits::ItemObligation(def_id));\n+            let cause = traits::ObligationCause::new(\n+                sp,\n+                fcx.body_id,\n+                traits::ItemObligation(def_id.to_def_id()),\n+            );\n             traits::Obligation::new(cause, fcx.param_env, pred)\n         });\n \n@@ -1445,10 +1448,10 @@ fn check_fn_or_method<'fcx, 'tcx>(\n     span: Span,\n     sig: ty::PolyFnSig<'tcx>,\n     hir_decl: &hir::FnDecl<'_>,\n-    def_id: DefId,\n+    def_id: LocalDefId,\n     implied_bounds: &mut FxHashSet<Ty<'tcx>>,\n ) {\n-    let sig = fcx.tcx.liberate_late_bound_regions(def_id, sig);\n+    let sig = fcx.tcx.liberate_late_bound_regions(def_id.to_def_id(), sig);\n \n     // Normalize the input and output types one at a time, using a different\n     // `WellFormedLoc` for each. We cannot call `normalize_associated_types`\n@@ -1462,7 +1465,7 @@ fn check_fn_or_method<'fcx, 'tcx>(\n                 span,\n                 ty,\n                 WellFormedLoc::Param {\n-                    function: def_id.expect_local(),\n+                    function: def_id,\n                     // Note that the `param_idx` of the output type is\n                     // one greater than the index of the last input type.\n                     param_idx: i.try_into().unwrap(),\n@@ -1485,7 +1488,7 @@ fn check_fn_or_method<'fcx, 'tcx>(\n             input_ty.into(),\n             ty.span,\n             ObligationCauseCode::WellFormed(Some(WellFormedLoc::Param {\n-                function: def_id.expect_local(),\n+                function: def_id,\n                 param_idx: i.try_into().unwrap(),\n             })),\n         );"}]}