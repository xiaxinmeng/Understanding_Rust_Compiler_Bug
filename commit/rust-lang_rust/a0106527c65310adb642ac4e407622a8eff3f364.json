{"sha": "a0106527c65310adb642ac4e407622a8eff3f364", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwMTA2NTI3YzY1MzEwYWRiNjQyYWM0ZTQwNzYyMmE4ZWZmM2YzNjQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-10-12T18:48:19Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-10-12T18:51:24Z"}, "message": "fix #[unwind(abort)] for Rust ABIs", "tree": {"sha": "6bfab0315ca74c6bb27d8e8bd03528e8d5531566", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bfab0315ca74c6bb27d8e8bd03528e8d5531566"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0106527c65310adb642ac4e407622a8eff3f364", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0106527c65310adb642ac4e407622a8eff3f364", "html_url": "https://github.com/rust-lang/rust/commit/a0106527c65310adb642ac4e407622a8eff3f364", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0106527c65310adb642ac4e407622a8eff3f364/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "152527f443c51517bb867befa93809ce5b9b1cd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/152527f443c51517bb867befa93809ce5b9b1cd1", "html_url": "https://github.com/rust-lang/rust/commit/152527f443c51517bb867befa93809ce5b9b1cd1"}], "stats": {"total": 13, "additions": 5, "deletions": 8}, "files": [{"sha": "ffb70180bbb4b7676f1c88098e7fcf21071a756c", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a0106527c65310adb642ac4e407622a8eff3f364/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0106527c65310adb642ac4e407622a8eff3f364/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=a0106527c65310adb642ac4e407622a8eff3f364", "patch": "@@ -502,24 +502,21 @@ macro_rules! unpack {\n     };\n }\n \n-fn should_abort_on_panic(tcx: TyCtxt<'_>, fn_def_id: DefId, abi: Abi) -> bool {\n-    // Not callable from C, so we can safely unwind through these\n-    if abi == Abi::Rust || abi == Abi::RustCall { return false; }\n-\n-    // Validate `#[unwind]` syntax regardless of platform-specific panic strategy\n+fn should_abort_on_panic(tcx: TyCtxt<'_>, fn_def_id: DefId, _abi: Abi) -> bool {\n+    // Validate `#[unwind]` syntax regardless of platform-specific panic strategy.\n     let attrs = &tcx.get_attrs(fn_def_id);\n     let unwind_attr = attr::find_unwind_attr(Some(tcx.sess.diagnostic()), attrs);\n \n-    // We never unwind, so it's not relevant to stop an unwind\n+    // We never unwind, so it's not relevant to stop an unwind.\n     if tcx.sess.panic_strategy() != PanicStrategy::Unwind { return false; }\n \n-    // We cannot add landing pads, so don't add one\n+    // We cannot add landing pads, so don't add one.\n     if tcx.sess.no_landing_pads() { return false; }\n \n     // This is a special case: some functions have a C abi but are meant to\n     // unwind anyway. Don't stop them.\n     match unwind_attr {\n-        None => false, // FIXME(#58794)\n+        None => false, // FIXME(#58794); should be `!(abi == Abi::Rust || abi == Abi::RustCall)`\n         Some(UnwindAttr::Allowed) => false,\n         Some(UnwindAttr::Aborts) => true,\n     }"}]}