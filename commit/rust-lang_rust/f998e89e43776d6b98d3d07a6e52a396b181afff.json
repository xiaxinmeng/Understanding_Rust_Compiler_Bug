{"sha": "f998e89e43776d6b98d3d07a6e52a396b181afff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5OThlODllNDM3NzZkNmI5OGQzZDA3YTZlNTJhMzk2YjE4MWFmZmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-10T00:52:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-10T00:52:04Z"}, "message": "Auto merge of #7478 - DevinR528:preemtive, r=llogiq\n\nFix nonstandard_macro_braces FP and docs of disallowed_types\n\nchangelog: Fix FP in [`nonstandard_macro_braces`] lint", "tree": {"sha": "73a02caa07588b42afe63218712e17720ebdbdaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73a02caa07588b42afe63218712e17720ebdbdaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f998e89e43776d6b98d3d07a6e52a396b181afff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f998e89e43776d6b98d3d07a6e52a396b181afff", "html_url": "https://github.com/rust-lang/rust/commit/f998e89e43776d6b98d3d07a6e52a396b181afff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f998e89e43776d6b98d3d07a6e52a396b181afff/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87ce09d0df245ba804966cb6827a178410bca26a", "url": "https://api.github.com/repos/rust-lang/rust/commits/87ce09d0df245ba804966cb6827a178410bca26a", "html_url": "https://github.com/rust-lang/rust/commit/87ce09d0df245ba804966cb6827a178410bca26a"}, {"sha": "bc7fac9526a157cff245c0bbd55e156b37292a0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc7fac9526a157cff245c0bbd55e156b37292a0b", "html_url": "https://github.com/rust-lang/rust/commit/bc7fac9526a157cff245c0bbd55e156b37292a0b"}], "stats": {"total": 51, "additions": 35, "deletions": 16}, "files": [{"sha": "ca660a9250db15f2332a71b44dfad2340c8d1f06", "filename": "clippy_lints/src/nonstandard_macro_braces.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f998e89e43776d6b98d3d07a6e52a396b181afff/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f998e89e43776d6b98d3d07a6e52a396b181afff/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs?ref=f998e89e43776d6b98d3d07a6e52a396b181afff", "patch": "@@ -7,6 +7,7 @@ use clippy_utils::{diagnostics::span_lint_and_help, in_macro, is_direct_expn_of,\n use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_hir::def_id::DefId;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n@@ -91,13 +92,23 @@ impl EarlyLintPass for MacroBraces {\n }\n \n fn is_offending_macro<'a>(cx: &EarlyContext<'_>, span: Span, mac_braces: &'a MacroBraces) -> Option<MacroInfo<'a>> {\n+    let unnested_or_local = || {\n+        let nested = in_macro(span.ctxt().outer_expn_data().call_site);\n+        !nested\n+            || span\n+                .macro_backtrace()\n+                .last()\n+                .map_or(false, |e| e.macro_def_id.map_or(false, DefId::is_local))\n+    };\n     if_chain! {\n+        // Make sure we are only one level deep otherwise there are to many FP's\n         if in_macro(span);\n         if let Some((name, braces)) = find_matching_macro(span, &mac_braces.macro_braces);\n         if let Some(snip) = snippet_opt(cx, span.ctxt().outer_expn_data().call_site);\n         // we must check only invocation sites\n         // https://github.com/rust-lang/rust-clippy/issues/7422\n-        if snip.starts_with(name);\n+        if snip.starts_with(&format!(\"{}!\", name));\n+        if unnested_or_local();\n         // make formatting consistent\n         let c = snip.replace(\" \", \"\");\n         if !c.starts_with(&format!(\"{}!{}\", name, braces.0));"}, {"sha": "5b4adc868dff19259611c087a3623dfdacf2d3d0", "filename": "tests/ui-toml/nonstandard_macro_braces/conf_nonstandard_macro_braces.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f998e89e43776d6b98d3d07a6e52a396b181afff/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f998e89e43776d6b98d3d07a6e52a396b181afff/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.rs?ref=f998e89e43776d6b98d3d07a6e52a396b181afff", "patch": "@@ -32,13 +32,19 @@ macro_rules! type_pos {\n     };\n }\n \n+macro_rules! printlnfoo {\n+    ($thing:expr) => {\n+        println!(\"{}\", $thing)\n+    };\n+}\n+\n #[rustfmt::skip]\n fn main() {\n     let _ = vec! {1, 2, 3};\n     let _ = format![\"ugh {} stop being such a good compiler\", \"hello\"];\n     let _ = quote!(let x = 1;);\n     let _ = quote::quote!(match match match);\n-    let _ = test!();\n+    let _ = test!(); // trigger when macro def is inside our own crate\n     let _ = vec![1,2,3];\n \n     let _ = quote::quote! {true || false};\n@@ -49,4 +55,6 @@ fn main() {\n     let _: type_pos!(usize) = vec![];\n \n     eprint!(\"test if user config overrides defaults\");\n+\n+    printlnfoo![\"test if printlnfoo is triggered by println\"];\n }"}, {"sha": "87e962b9228c4b74627e5d7623761b0f5a246141", "filename": "tests/ui-toml/nonstandard_macro_braces/conf_nonstandard_macro_braces.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f998e89e43776d6b98d3d07a6e52a396b181afff/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f998e89e43776d6b98d3d07a6e52a396b181afff/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.stderr?ref=f998e89e43776d6b98d3d07a6e52a396b181afff", "patch": "@@ -1,48 +1,48 @@\n error: use of irregular braces for `vec!` macro\n-  --> $DIR/conf_nonstandard_macro_braces.rs:37:13\n+  --> $DIR/conf_nonstandard_macro_braces.rs:43:13\n    |\n LL |     let _ = vec! {1, 2, 3};\n    |             ^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::nonstandard-macro-braces` implied by `-D warnings`\n help: consider writing `vec![1, 2, 3]`\n-  --> $DIR/conf_nonstandard_macro_braces.rs:37:13\n+  --> $DIR/conf_nonstandard_macro_braces.rs:43:13\n    |\n LL |     let _ = vec! {1, 2, 3};\n    |             ^^^^^^^^^^^^^^\n \n error: use of irregular braces for `format!` macro\n-  --> $DIR/conf_nonstandard_macro_braces.rs:38:13\n+  --> $DIR/conf_nonstandard_macro_braces.rs:44:13\n    |\n LL |     let _ = format![\"ugh {} stop being such a good compiler\", \"hello\"];\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n help: consider writing `format!(\"ugh () stop being such a good compiler\", \"hello\")`\n-  --> $DIR/conf_nonstandard_macro_braces.rs:38:13\n+  --> $DIR/conf_nonstandard_macro_braces.rs:44:13\n    |\n LL |     let _ = format![\"ugh {} stop being such a good compiler\", \"hello\"];\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: use of irregular braces for `quote!` macro\n-  --> $DIR/conf_nonstandard_macro_braces.rs:39:13\n+  --> $DIR/conf_nonstandard_macro_braces.rs:45:13\n    |\n LL |     let _ = quote!(let x = 1;);\n    |             ^^^^^^^^^^^^^^^^^^\n    |\n help: consider writing `quote! {let x = 1;}`\n-  --> $DIR/conf_nonstandard_macro_braces.rs:39:13\n+  --> $DIR/conf_nonstandard_macro_braces.rs:45:13\n    |\n LL |     let _ = quote!(let x = 1;);\n    |             ^^^^^^^^^^^^^^^^^^\n \n error: use of irregular braces for `quote::quote!` macro\n-  --> $DIR/conf_nonstandard_macro_braces.rs:40:13\n+  --> $DIR/conf_nonstandard_macro_braces.rs:46:13\n    |\n LL |     let _ = quote::quote!(match match match);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n help: consider writing `quote::quote! {match match match}`\n-  --> $DIR/conf_nonstandard_macro_braces.rs:40:13\n+  --> $DIR/conf_nonstandard_macro_braces.rs:46:13\n    |\n LL |     let _ = quote::quote!(match match match);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -53,7 +53,7 @@ error: use of irregular braces for `vec!` macro\n LL |         vec!{0, 0, 0}\n    |         ^^^^^^^^^^^^^\n ...\n-LL |     let _ = test!();\n+LL |     let _ = test!(); // trigger when macro def is inside our own crate\n    |             ------- in this macro invocation\n    |\n help: consider writing `vec![0, 0, 0]`\n@@ -62,30 +62,30 @@ help: consider writing `vec![0, 0, 0]`\n LL |         vec!{0, 0, 0}\n    |         ^^^^^^^^^^^^^\n ...\n-LL |     let _ = test!();\n+LL |     let _ = test!(); // trigger when macro def is inside our own crate\n    |             ------- in this macro invocation\n    = note: this error originates in the macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: use of irregular braces for `type_pos!` macro\n-  --> $DIR/conf_nonstandard_macro_braces.rs:49:12\n+  --> $DIR/conf_nonstandard_macro_braces.rs:55:12\n    |\n LL |     let _: type_pos!(usize) = vec![];\n    |            ^^^^^^^^^^^^^^^^\n    |\n help: consider writing `type_pos![usize]`\n-  --> $DIR/conf_nonstandard_macro_braces.rs:49:12\n+  --> $DIR/conf_nonstandard_macro_braces.rs:55:12\n    |\n LL |     let _: type_pos!(usize) = vec![];\n    |            ^^^^^^^^^^^^^^^^\n \n error: use of irregular braces for `eprint!` macro\n-  --> $DIR/conf_nonstandard_macro_braces.rs:51:5\n+  --> $DIR/conf_nonstandard_macro_braces.rs:57:5\n    |\n LL |     eprint!(\"test if user config overrides defaults\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n help: consider writing `eprint![\"test if user config overrides defaults\"];`\n-  --> $DIR/conf_nonstandard_macro_braces.rs:51:5\n+  --> $DIR/conf_nonstandard_macro_braces.rs:57:5\n    |\n LL |     eprint!(\"test if user config overrides defaults\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}