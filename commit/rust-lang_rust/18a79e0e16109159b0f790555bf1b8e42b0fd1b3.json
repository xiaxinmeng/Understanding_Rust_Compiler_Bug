{"sha": "18a79e0e16109159b0f790555bf1b8e42b0fd1b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4YTc5ZTBlMTYxMDkxNTliMGY3OTA1NTViZjFiOGU0MmIwZmQxYjM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-06T22:27:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-06T22:27:02Z"}, "message": "Rollup merge of #67078 - kamleshbhalui:master, r=Centril\n\naccept union inside enum if not followed by identifier\n\nFixes #66943", "tree": {"sha": "b337c6df349d103823beee1338f451c1fe555520", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b337c6df349d103823beee1338f451c1fe555520"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18a79e0e16109159b0f790555bf1b8e42b0fd1b3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd6tW2CRBK7hj4Ov3rIwAAdHIIAGC0BF1ug5tptgGu0a3bEE8o\nC88QBScqd1J1Q6baq9meRcGiYamEqlfX7T8kAR9ORZGZjRmaINaY64/bUKIZYNz/\nbXvxz5PlxIt27M87jEM+S+jwUMFqtXVXH7dXwDl3os1WDFsW8XJLNrzGCXammJEl\nAjOFJ0xOGBgXx5y/3LIecw5zlhu1GaUCt61kltRci9Nf6Om4BdryFNR/y35i2lft\n6sErPL+TVwYtUJkTM0M1+Cr0L4Fg/IlZt20aOZb2ayXBaaHeMEbo9+LmE40K3Tp4\nRXlXAWzm87rcuP+2OaeIr/X24cnwEb7aeJo0jQ6O5VXSRP6lIWBu1ddvpe5Jnn8=\n=Fy4Q\n-----END PGP SIGNATURE-----\n", "payload": "tree b337c6df349d103823beee1338f451c1fe555520\nparent 459398dc40deb76ff2aab5ac9d2f00ce68bf6d3d\nparent f8ecf04f4b60f1004b9ba4092747f16d290dfff7\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1575671222 +0100\ncommitter GitHub <noreply@github.com> 1575671222 +0100\n\nRollup merge of #67078 - kamleshbhalui:master, r=Centril\n\naccept union inside enum if not followed by identifier\n\nFixes #66943\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18a79e0e16109159b0f790555bf1b8e42b0fd1b3", "html_url": "https://github.com/rust-lang/rust/commit/18a79e0e16109159b0f790555bf1b8e42b0fd1b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18a79e0e16109159b0f790555bf1b8e42b0fd1b3/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "459398dc40deb76ff2aab5ac9d2f00ce68bf6d3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/459398dc40deb76ff2aab5ac9d2f00ce68bf6d3d", "html_url": "https://github.com/rust-lang/rust/commit/459398dc40deb76ff2aab5ac9d2f00ce68bf6d3d"}, {"sha": "f8ecf04f4b60f1004b9ba4092747f16d290dfff7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8ecf04f4b60f1004b9ba4092747f16d290dfff7", "html_url": "https://github.com/rust-lang/rust/commit/f8ecf04f4b60f1004b9ba4092747f16d290dfff7"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "c3e5b39635f03530c14a878cf80486c3bbee8db2", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/18a79e0e16109159b0f790555bf1b8e42b0fd1b3/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18a79e0e16109159b0f790555bf1b8e42b0fd1b3/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=18a79e0e16109159b0f790555bf1b8e42b0fd1b3", "patch": "@@ -1727,9 +1727,10 @@ impl<'a> Parser<'a> {\n     /// Checks if current token is one of tokens which cannot be nested like `kw::Enum`. In case\n     /// it is, we try to parse the item and report error about nested types.\n     fn recover_nested_adt_item(&mut self, keyword: Symbol) -> PResult<'a, bool> {\n-        if self.token.is_keyword(kw::Enum) ||\n+        if (self.token.is_keyword(kw::Enum) ||\n             self.token.is_keyword(kw::Struct) ||\n-            self.token.is_keyword(kw::Union)\n+            self.token.is_keyword(kw::Union))\n+           && self.look_ahead(1, |t| t.is_ident())\n         {\n             let kw_token = self.token.clone();\n             let kw_str = pprust::token_to_string(&kw_token);"}, {"sha": "048913e25cd96b9205de9bd1a72a1c55f96ad30f", "filename": "src/test/ui/enum/union-in-enum.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/18a79e0e16109159b0f790555bf1b8e42b0fd1b3/src%2Ftest%2Fui%2Fenum%2Funion-in-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18a79e0e16109159b0f790555bf1b8e42b0fd1b3/src%2Ftest%2Fui%2Fenum%2Funion-in-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum%2Funion-in-enum.rs?ref=18a79e0e16109159b0f790555bf1b8e42b0fd1b3", "patch": "@@ -0,0 +1,13 @@\n+// This test checks that the union keyword\n+// is accepted as the name of an enum variant\n+// when not followed by an identifier\n+// This special case exists because `union` is a contextual keyword.\n+\n+#![allow(warnings)]\n+\n+// check-pass\n+\n+enum A { union }\n+enum B { union {} }\n+enum C { union() }\n+fn main(){}"}]}