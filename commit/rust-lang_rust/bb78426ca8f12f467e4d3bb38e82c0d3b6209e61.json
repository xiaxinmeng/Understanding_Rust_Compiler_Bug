{"sha": "bb78426ca8f12f467e4d3bb38e82c0d3b6209e61", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiNzg0MjZjYThmMTJmNDY3ZTRkM2JiMzhlODJjMGQzYjYyMDllNjE=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-08-13T11:48:47Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-08-22T16:28:57Z"}, "message": "Allow panicking with string literal messages inside constants", "tree": {"sha": "80627d1053b6bb1cdcaea8f50789786613026f04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80627d1053b6bb1cdcaea8f50789786613026f04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61", "html_url": "https://github.com/rust-lang/rust/commit/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "674ef668f13c52a1fadbf01b24d8da1e12d15e70", "url": "https://api.github.com/repos/rust-lang/rust/commits/674ef668f13c52a1fadbf01b24d8da1e12d15e70", "html_url": "https://github.com/rust-lang/rust/commit/674ef668f13c52a1fadbf01b24d8da1e12d15e70"}], "stats": {"total": 391, "additions": 366, "deletions": 25}, "files": [{"sha": "54829058f44fa0186991401591a783a956c0b840", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=bb78426ca8f12f467e4d3bb38e82c0d3b6209e61", "patch": "@@ -536,7 +536,6 @@ for ::mir::interpret::EvalErrorKind<'gcx, O> {\n             DeallocateNonBasePtr |\n             HeapAllocZeroBytes |\n             Unreachable |\n-            Panic |\n             ReadFromReturnPointer |\n             UnimplementedTraitSelection |\n             TypeckError |\n@@ -550,6 +549,12 @@ for ::mir::interpret::EvalErrorKind<'gcx, O> {\n             GeneratorResumedAfterReturn |\n             GeneratorResumedAfterPanic |\n             InfiniteLoop => {}\n+            Panic { ref msg, ref file, line, col } => {\n+                msg.hash_stable(hcx, hasher);\n+                file.hash_stable(hcx, hasher);\n+                line.hash_stable(hcx, hasher);\n+                col.hash_stable(hcx, hasher);\n+            },\n             ReferencedConstant(ref err) => err.hash_stable(hcx, hasher),\n             MachineError(ref err) => err.hash_stable(hcx, hasher),\n             FunctionPointerTyMismatch(a, b) => {"}, {"sha": "8c300a0aba0ecc5cf57fb21946e3da9b5f0ba63b", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=bb78426ca8f12f467e4d3bb38e82c0d3b6209e61", "patch": "@@ -305,6 +305,8 @@ language_item_table! {\n     PanicBoundsCheckFnLangItem,      \"panic_bounds_check\",      panic_bounds_check_fn;\n     PanicInfoLangItem,               \"panic_info\",              panic_info;\n     PanicImplLangItem,               \"panic_impl\",              panic_impl;\n+    // Libstd panic entry point. Necessary for const eval to be able to catch it\n+    BeginPanicFnLangItem,            \"begin_panic\",             begin_panic_fn;\n \n     ExchangeMallocFnLangItem,        \"exchange_malloc\",         exchange_malloc_fn;\n     BoxFreeFnLangItem,               \"box_free\",                box_free_fn;"}, {"sha": "436478b84162ac72497d4794f79699bbf9b4e2ad", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=bb78426ca8f12f467e4d3bb38e82c0d3b6209e61", "patch": "@@ -17,6 +17,7 @@ use errors::DiagnosticBuilder;\n \n use syntax_pos::Span;\n use syntax::ast;\n+use syntax::symbol::Symbol;\n \n pub type ConstEvalResult<'tcx> = Result<&'tcx ty::Const<'tcx>, Lrc<ConstEvalErr<'tcx>>>;\n \n@@ -250,7 +251,12 @@ pub enum EvalErrorKind<'tcx, O> {\n     HeapAllocZeroBytes,\n     HeapAllocNonPowerOfTwoAlignment(u64),\n     Unreachable,\n-    Panic,\n+    Panic {\n+        msg: Symbol,\n+        line: u32,\n+        col: u32,\n+        file: Symbol,\n+    },\n     ReadFromReturnPointer,\n     PathNotFound(Vec<String>),\n     UnimplementedTraitSelection,\n@@ -370,7 +376,7 @@ impl<'tcx, O> EvalErrorKind<'tcx, O> {\n                 \"tried to re-, de-, or allocate heap memory with alignment that is not a power of two\",\n             Unreachable =>\n                 \"entered unreachable code\",\n-            Panic =>\n+            Panic { .. } =>\n                 \"the evaluated program panicked\",\n             ReadFromReturnPointer =>\n                 \"tried to read from the return pointer\",\n@@ -465,6 +471,8 @@ impl<'tcx, O: fmt::Debug> fmt::Debug for EvalErrorKind<'tcx, O> {\n                 write!(f, \"{}\", inner),\n             IncorrectAllocationInformation(size, size2, align, align2) =>\n                 write!(f, \"incorrect alloc info: expected size {} and align {}, got size {} and align {}\", size.bytes(), align.abi(), size2.bytes(), align2.abi()),\n+            Panic { ref msg, line, col, ref file } =>\n+                write!(f, \"the evaluated program panicked at '{}', {}:{}:{}\", msg, file, line, col),\n             _ => write!(f, \"{}\", self.description()),\n         }\n     }"}, {"sha": "95e2cc6c3870d6d593d2118257faf20d3be837b8", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=bb78426ca8f12f467e4d3bb38e82c0d3b6209e61", "patch": "@@ -574,7 +574,11 @@ impl<'a, 'tcx, O: Lift<'tcx>> Lift<'tcx> for interpret::EvalErrorKind<'a, O> {\n             HeapAllocZeroBytes => HeapAllocZeroBytes,\n             HeapAllocNonPowerOfTwoAlignment(n) => HeapAllocNonPowerOfTwoAlignment(n),\n             Unreachable => Unreachable,\n-            Panic => Panic,\n+            Panic { ref msg, ref file, line, col } => Panic {\n+                msg: msg.clone(),\n+                file: file.clone(),\n+                line, col,\n+            },\n             ReadFromReturnPointer => ReadFromReturnPointer,\n             PathNotFound(ref v) => PathNotFound(v.clone()),\n             UnimplementedTraitSelection => UnimplementedTraitSelection,"}, {"sha": "a306a4d7c1e1efe201506577f0e131795f0def9d", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 81, "deletions": 14, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=bb78426ca8f12f467e4d3bb38e82c0d3b6209e61", "patch": "@@ -5,21 +5,22 @@ use rustc::hir;\n use rustc::mir::interpret::ConstEvalErr;\n use rustc::mir;\n use rustc::ty::{self, TyCtxt, Instance};\n-use rustc::ty::layout::{LayoutOf, Primitive, TyLayout};\n+use rustc::ty::layout::{LayoutOf, Primitive, TyLayout, Size};\n use rustc::ty::subst::Subst;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n \n use syntax::ast::Mutability;\n use syntax::source_map::Span;\n use syntax::source_map::DUMMY_SP;\n+use syntax::symbol::Symbol;\n \n use rustc::mir::interpret::{\n     EvalResult, EvalError, EvalErrorKind, GlobalId,\n     Scalar, AllocId, Allocation, ConstValue,\n };\n use super::{\n     Place, PlaceExtra, PlaceTy, MemPlace, OpTy, Operand, Value,\n-    EvalContext, StackPopCleanup, Memory, MemoryKind\n+    EvalContext, StackPopCleanup, Memory, MemoryKind, MPlaceTy,\n };\n \n pub fn mk_borrowck_eval_cx<'a, 'mir, 'tcx>(\n@@ -237,23 +238,56 @@ impl<'mir, 'tcx> super::Machine<'mir, 'tcx> for CompileTimeEvaluator {\n         if !ecx.tcx.is_const_fn(instance.def_id()) {\n             let def_id = instance.def_id();\n             // Some fn calls are actually BinOp intrinsics\n-            let (op, oflo) = if let Some(op) = ecx.tcx.is_binop_lang_item(def_id) {\n-                op\n+            let _: ! = if let Some((op, oflo)) = ecx.tcx.is_binop_lang_item(def_id) {\n+                let (dest, bb) = destination.expect(\"128 lowerings can't diverge\");\n+                let l = ecx.read_value(args[0])?;\n+                let r = ecx.read_value(args[1])?;\n+                if oflo {\n+                    ecx.binop_with_overflow(op, l, r, dest)?;\n+                } else {\n+                    ecx.binop_ignore_overflow(op, l, r, dest)?;\n+                }\n+                ecx.goto_block(bb);\n+                return Ok(true);\n+            } else if Some(def_id) == ecx.tcx.lang_items().panic_fn() {\n+                assert!(args.len() == 1);\n+                // &(&'static str, &'static str, u32, u32)\n+                let ptr = ecx.read_value(args[0])?;\n+                let place = ecx.ref_to_mplace(ptr)?;\n+                let (msg, file, line, col) = (\n+                    place_field(ecx, 0, place)?,\n+                    place_field(ecx, 1, place)?,\n+                    place_field(ecx, 2, place)?,\n+                    place_field(ecx, 3, place)?,\n+                );\n+\n+                let msg = to_str(ecx, msg)?;\n+                let file = to_str(ecx, file)?;\n+                let line = to_u32(line)?;\n+                let col = to_u32(col)?;\n+                return Err(EvalErrorKind::Panic { msg, file, line, col }.into());\n+            } else if Some(def_id) == ecx.tcx.lang_items().begin_panic_fn() {\n+                assert!(args.len() == 2);\n+                // &'static str, &(&'static str, u32, u32)\n+                let msg = ecx.read_value(args[0])?;\n+                let ptr = ecx.read_value(args[1])?;\n+                let place = ecx.ref_to_mplace(ptr)?;\n+                let (file, line, col) = (\n+                    place_field(ecx, 0, place)?,\n+                    place_field(ecx, 1, place)?,\n+                    place_field(ecx, 2, place)?,\n+                );\n+\n+                let msg = to_str(ecx, msg.value)?;\n+                let file = to_str(ecx, file)?;\n+                let line = to_u32(line)?;\n+                let col = to_u32(col)?;\n+                return Err(EvalErrorKind::Panic { msg, file, line, col }.into());\n             } else {\n                 return Err(\n                     ConstEvalError::NotConst(format!(\"calling non-const fn `{}`\", instance)).into(),\n                 );\n             };\n-            let (dest, bb) = destination.expect(\"128 lowerings can't diverge\");\n-            let l = ecx.read_value(args[0])?;\n-            let r = ecx.read_value(args[1])?;\n-            if oflo {\n-                ecx.binop_with_overflow(op, l, r, dest)?;\n-            } else {\n-                ecx.binop_ignore_overflow(op, l, r, dest)?;\n-            }\n-            ecx.goto_block(bb);\n-            return Ok(true);\n         }\n         let mir = match ecx.load_mir(instance.def) {\n             Ok(mir) => mir,\n@@ -412,6 +446,39 @@ impl<'mir, 'tcx> super::Machine<'mir, 'tcx> for CompileTimeEvaluator {\n     }\n }\n \n+fn place_field<'a, 'tcx, 'mir>(\n+    ecx: &mut EvalContext<'a, 'mir, 'tcx, CompileTimeEvaluator>,\n+    i: u64,\n+    place: MPlaceTy<'tcx>,\n+) -> EvalResult<'tcx, Value> {\n+    let place = ecx.mplace_field(place, i)?;\n+    Ok(ecx.try_read_value_from_mplace(place)?.expect(\"bad panic arg layout\"))\n+}\n+\n+fn to_str<'a, 'tcx, 'mir>(\n+    ecx: &mut EvalContext<'a, 'mir, 'tcx, CompileTimeEvaluator>,\n+    val: Value,\n+) -> EvalResult<'tcx, Symbol> {\n+    if let Value::ScalarPair(ptr, len) = val {\n+        let len = len.not_undef()?.to_bits(ecx.memory.pointer_size())?;\n+        let bytes = ecx.memory.read_bytes(ptr.not_undef()?, Size::from_bytes(len as u64))?;\n+        let str = ::std::str::from_utf8(bytes).map_err(|err| EvalErrorKind::ValidationFailure(err.to_string()))?;\n+        Ok(Symbol::intern(str))\n+    } else {\n+        bug!(\"panic arg is not a str\")\n+    }\n+}\n+\n+fn to_u32<'a, 'tcx, 'mir>(\n+    val: Value,\n+) -> EvalResult<'tcx, u32> {\n+    if let Value::Scalar(n) = val {\n+        Ok(n.not_undef()?.to_bits(Size::from_bits(32))? as u32)\n+    } else {\n+        bug!(\"panic arg is not a str\")\n+    }\n+}\n+\n /// Project to a field of a (variant of a) const\n pub fn const_field<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,"}, {"sha": "d9e7f33e836f5b5f5ec089f66e6180f20898b676", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=bb78426ca8f12f467e4d3bb38e82c0d3b6209e61", "patch": "@@ -213,7 +213,7 @@ fn from_known_layout<'tcx>(\n impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n     /// Try reading a value in memory; this is interesting particularily for ScalarPair.\n     /// Return None if the layout does not permit loading this as a value.\n-    fn try_read_value_from_mplace(\n+    pub(super) fn try_read_value_from_mplace(\n         &self,\n         mplace: MPlaceTy<'tcx>,\n     ) -> EvalResult<'tcx, Option<Value>> {"}, {"sha": "fa11e6f0719b19d92bd6edb434143b6890ed055e", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=bb78426ca8f12f467e4d3bb38e82c0d3b6209e61", "patch": "@@ -230,7 +230,7 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n                     // FIXME: implement\n                     => {},\n \n-                    | Panic\n+                    | Panic { .. }\n                     | BoundsCheck{..}\n                     | Overflow(_)\n                     | OverflowNeg"}, {"sha": "20525b5f484bafe68983c0931034a5025dd398d2", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=bb78426ca8f12f467e4d3bb38e82c0d3b6209e61", "patch": "@@ -400,6 +400,11 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n \n         (self.qualif, Lrc::new(promoted_temps))\n     }\n+\n+    fn is_const_panic_fn(&self, def_id: DefId) -> bool {\n+        Some(def_id) == self.tcx.lang_items().panic_fn() ||\n+        Some(def_id) == self.tcx.lang_items().begin_panic_fn()\n+    }\n }\n \n /// Accumulates an Rvalue or Call's effects in self.qualif.\n@@ -834,7 +839,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                         }\n                     }\n                     _ => {\n-                        if self.tcx.is_const_fn(def_id) {\n+                        if self.tcx.is_const_fn(def_id) || self.is_const_panic_fn(def_id) {\n                             is_const_fn = Some(def_id);\n                         }\n                     }\n@@ -880,8 +885,25 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n \n             // Const fn calls.\n             if let Some(def_id) = is_const_fn {\n+                // check the const_panic feature gate or\n                 // find corresponding rustc_const_unstable feature\n-                if let Some(&attr::Stability {\n+                // FIXME: cannot allow this inside `allow_internal_unstable` because that would make\n+                // `panic!` insta stable in constants, since the macro is marked with the attr\n+                if self.is_const_panic_fn(def_id) {\n+                    if self.mode == Mode::Fn {\n+                        // never promote panics\n+                        self.qualif = Qualif::NOT_CONST;\n+                    } else if !self.tcx.sess.features_untracked().const_panic {\n+                        // don't allow panics in constants without the feature gate\n+                        emit_feature_err(\n+                            &self.tcx.sess.parse_sess,\n+                            \"const_panic\",\n+                            self.span,\n+                            GateIssue::Language,\n+                            &format!(\"panicking in {}s is unstable\", self.mode),\n+                        );\n+                    }\n+                } else if let Some(&attr::Stability {\n                     rustc_const_unstable: Some(attr::RustcConstUnstable {\n                         feature: ref feature_name\n                     }),"}, {"sha": "862f0fd71b0a3d18056eec43111ef88476d53973", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=bb78426ca8f12f467e4d3bb38e82c0d3b6209e61", "patch": "@@ -397,6 +397,7 @@ fn continue_panic_fmt(info: &PanicInfo) -> ! {\n #[unstable(feature = \"libstd_sys_internals\",\n            reason = \"used by the panic! macro\",\n            issue = \"0\")]\n+#[cfg_attr(not(any(stage0, test)), lang = \"begin_panic\")]\n #[inline(never)] #[cold] // avoid code bloat at the call sites as much as possible\n pub fn begin_panic<M: Any + Send>(msg: M, file_line_col: &(&'static str, u32, u32)) -> ! {\n     // Note that this should be the only allocation performed in this code path."}, {"sha": "4a819814d815c2212b4a1c1f3be0dd153a04c062", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=bb78426ca8f12f467e4d3bb38e82c0d3b6209e61", "patch": "@@ -224,6 +224,9 @@ declare_features! (\n     // Allows comparing raw pointers during const eval\n     (active, const_compare_raw_pointers, \"1.27.0\", Some(53020), None),\n \n+    // Allows panicking during const eval (produces compile-time errors)\n+    (active, const_panic, \"1.29.0\", Some(51999), None),\n+\n     // Allows using #[prelude_import] on glob `use` items.\n     //\n     // rustc internal"}, {"sha": "f2170f509eb30a40c0c486ea2614050dd000aed9", "filename": "src/test/ui/const-eval/const_panic.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Ftest%2Fui%2Fconst-eval%2Fconst_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Ftest%2Fui%2Fconst-eval%2Fconst_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconst_panic.rs?ref=bb78426ca8f12f467e4d3bb38e82c0d3b6209e61", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_panic)]\n+\n+fn main() {}\n+\n+const Z: () = panic!(\"cheese\");\n+//~^ ERROR this constant cannot be used\n+\n+const Y: () = unreachable!();\n+//~^ ERROR this constant cannot be used\n+\n+const X: () = unimplemented!();\n+//~^ ERROR this constant cannot be used"}, {"sha": "c11146f4882c205847d75edbd411c6f71659c3b2", "filename": "src/test/ui/const-eval/const_panic.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Ftest%2Fui%2Fconst-eval%2Fconst_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Ftest%2Fui%2Fconst-eval%2Fconst_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconst_panic.stderr?ref=bb78426ca8f12f467e4d3bb38e82c0d3b6209e61", "patch": "@@ -0,0 +1,33 @@\n+error: this constant cannot be used\n+  --> $DIR/const_panic.rs:15:1\n+   |\n+LL | const Z: () = panic!(\"cheese\");\n+   | ^^^^^^^^^^^^^^----------------^\n+   |               |\n+   |               the evaluated program panicked at 'cheese', $DIR/const_panic.rs:15:15\n+   |\n+   = note: #[deny(const_err)] on by default\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: this constant cannot be used\n+  --> $DIR/const_panic.rs:18:1\n+   |\n+LL | const Y: () = unreachable!();\n+   | ^^^^^^^^^^^^^^--------------^\n+   |               |\n+   |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:18:15\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: this constant cannot be used\n+  --> $DIR/const_panic.rs:21:1\n+   |\n+LL | const X: () = unimplemented!();\n+   | ^^^^^^^^^^^^^^----------------^\n+   |               |\n+   |               the evaluated program panicked at 'not yet implemented', $DIR/const_panic.rs:21:15\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "59aeca18129a8b86d8c7303c5af5846194a3eb5a", "filename": "src/test/ui/const-eval/const_panic_libcore.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Ftest%2Fui%2Fconst-eval%2Fconst_panic_libcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Ftest%2Fui%2Fconst-eval%2Fconst_panic_libcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconst_panic_libcore.rs?ref=bb78426ca8f12f467e4d3bb38e82c0d3b6209e61", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![no_std]\n+#![crate_type = \"lib\"]\n+#![feature(const_panic)]\n+\n+const Z: () = panic!(\"cheese\");\n+//~^ ERROR this constant cannot be used\n+\n+const Y: () = unreachable!();\n+//~^ ERROR this constant cannot be used\n+\n+const X: () = unimplemented!();\n+//~^ ERROR this constant cannot be used"}, {"sha": "45f2ee7744e828068611f77c8e73dca1645897a8", "filename": "src/test/ui/const-eval/const_panic_libcore.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Ftest%2Fui%2Fconst-eval%2Fconst_panic_libcore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Ftest%2Fui%2Fconst-eval%2Fconst_panic_libcore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconst_panic_libcore.stderr?ref=bb78426ca8f12f467e4d3bb38e82c0d3b6209e61", "patch": "@@ -0,0 +1,33 @@\n+error: this constant cannot be used\n+  --> $DIR/const_panic_libcore.rs:15:1\n+   |\n+LL | const Z: () = panic!(\"cheese\");\n+   | ^^^^^^^^^^^^^^----------------^\n+   |               |\n+   |               the evaluated program panicked at 'cheese', $DIR/const_panic_libcore.rs:15:15\n+   |\n+   = note: #[deny(const_err)] on by default\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: this constant cannot be used\n+  --> $DIR/const_panic_libcore.rs:18:1\n+   |\n+LL | const Y: () = unreachable!();\n+   | ^^^^^^^^^^^^^^--------------^\n+   |               |\n+   |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore.rs:18:15\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: this constant cannot be used\n+  --> $DIR/const_panic_libcore.rs:21:1\n+   |\n+LL | const X: () = unimplemented!();\n+   | ^^^^^^^^^^^^^^----------------^\n+   |               |\n+   |               the evaluated program panicked at 'not yet implemented', $DIR/const_panic_libcore.rs:21:15\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "bbbe827a8ef2c819fd25cbd83f7a5a15f6e541dd", "filename": "src/test/ui/const-eval/const_panic_libcore_main.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Ftest%2Fui%2Fconst-eval%2Fconst_panic_libcore_main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Ftest%2Fui%2Fconst-eval%2Fconst_panic_libcore_main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconst_panic_libcore_main.rs?ref=bb78426ca8f12f467e4d3bb38e82c0d3b6209e61", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"bin\"]\n+#![feature(lang_items)]\n+#![feature(panic_implementation)]\n+#![feature(const_panic)]\n+#![no_main]\n+#![no_std]\n+\n+use core::panic::PanicInfo;\n+\n+const Z: () = panic!(\"cheese\");\n+//~^ ERROR this constant cannot be used\n+\n+const Y: () = unreachable!();\n+//~^ ERROR this constant cannot be used\n+\n+const X: () = unimplemented!();\n+//~^ ERROR this constant cannot be used\n+\n+#[lang = \"eh_personality\"]\n+fn eh() {}\n+\n+#[panic_implementation]\n+fn panic(_info: &PanicInfo) -> ! {\n+    loop {}\n+}"}, {"sha": "7cb9f51c427a74e9d20e6aa62487672a0f0d1ada", "filename": "src/test/ui/const-eval/const_panic_libcore_main.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Ftest%2Fui%2Fconst-eval%2Fconst_panic_libcore_main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Ftest%2Fui%2Fconst-eval%2Fconst_panic_libcore_main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconst_panic_libcore_main.stderr?ref=bb78426ca8f12f467e4d3bb38e82c0d3b6209e61", "patch": "@@ -0,0 +1,33 @@\n+error: this constant cannot be used\n+  --> $DIR/const_panic_libcore_main.rs:20:1\n+   |\n+LL | const Z: () = panic!(\"cheese\");\n+   | ^^^^^^^^^^^^^^----------------^\n+   |               |\n+   |               the evaluated program panicked at 'cheese', $DIR/const_panic_libcore_main.rs:20:15\n+   |\n+   = note: #[deny(const_err)] on by default\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: this constant cannot be used\n+  --> $DIR/const_panic_libcore_main.rs:23:1\n+   |\n+LL | const Y: () = unreachable!();\n+   | ^^^^^^^^^^^^^^--------------^\n+   |               |\n+   |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore_main.rs:23:15\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: this constant cannot be used\n+  --> $DIR/const_panic_libcore_main.rs:26:1\n+   |\n+LL | const X: () = unimplemented!();\n+   | ^^^^^^^^^^^^^^----------------^\n+   |               |\n+   |               the evaluated program panicked at 'not yet implemented', $DIR/const_panic_libcore_main.rs:26:15\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "26eb95d9c662c26cf2615ab11e3c2b5321e9c61a", "filename": "src/test/ui/const-eval/feature-gate-const_panic.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Ftest%2Fui%2Fconst-eval%2Ffeature-gate-const_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Ftest%2Fui%2Fconst-eval%2Ffeature-gate-const_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Ffeature-gate-const_panic.rs?ref=bb78426ca8f12f467e4d3bb38e82c0d3b6209e61", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {}\n+\n+const Z: () = panic!(\"cheese\");\n+//~^ ERROR panicking in constants is unstable\n+\n+const Y: () = unreachable!();\n+//~^ ERROR panicking in constants is unstable\n+\n+const X: () = unimplemented!();\n+//~^ ERROR panicking in constants is unstable"}, {"sha": "f4d05edd04a483c7be547c80dfd342f6847afd55", "filename": "src/test/ui/const-eval/feature-gate-const_panic.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Ftest%2Fui%2Fconst-eval%2Ffeature-gate-const_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Ftest%2Fui%2Fconst-eval%2Ffeature-gate-const_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Ffeature-gate-const_panic.stderr?ref=bb78426ca8f12f467e4d3bb38e82c0d3b6209e61", "patch": "@@ -0,0 +1,30 @@\n+error[E0658]: panicking in constants is unstable (see issue #51999)\n+  --> $DIR/feature-gate-const_panic.rs:13:15\n+   |\n+LL | const Z: () = panic!(\"cheese\");\n+   |               ^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_panic)] to the crate attributes to enable\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error[E0658]: panicking in constants is unstable (see issue #51999)\n+  --> $DIR/feature-gate-const_panic.rs:19:15\n+   |\n+LL | const X: () = unimplemented!();\n+   |               ^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_panic)] to the crate attributes to enable\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error[E0658]: panicking in constants is unstable (see issue #51999)\n+  --> $DIR/feature-gate-const_panic.rs:16:15\n+   |\n+LL | const Y: () = unreachable!();\n+   |               ^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_panic)] to the crate attributes to enable\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "2d333f324c4d36a8533bf8cbd6adaf8dfdf07eb3", "filename": "src/test/ui/issues/issue-32829.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Ftest%2Fui%2Fissues%2Fissue-32829.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Ftest%2Fui%2Fissues%2Fissue-32829.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32829.rs?ref=bb78426ca8f12f467e4d3bb38e82c0d3b6209e61", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n static S : u64 = { { panic!(\"foo\"); 0 } };\n-//~^ ERROR calls in statics are limited\n+//~^ ERROR panicking in statics is unstable\n \n fn main() {\n     println!(\"{:?}\", S);"}, {"sha": "55ee6d80d1f89fb8fcaa818d243155a066e53f5e", "filename": "src/test/ui/issues/issue-32829.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Ftest%2Fui%2Fissues%2Fissue-32829.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb78426ca8f12f467e4d3bb38e82c0d3b6209e61/src%2Ftest%2Fui%2Fissues%2Fissue-32829.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32829.stderr?ref=bb78426ca8f12f467e4d3bb38e82c0d3b6209e61", "patch": "@@ -1,11 +1,12 @@\n-error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n+error[E0658]: panicking in statics is unstable (see issue #51999)\n   --> $DIR/issue-32829.rs:11:22\n    |\n LL | static S : u64 = { { panic!(\"foo\"); 0 } };\n    |                      ^^^^^^^^^^^^^^\n    |\n+   = help: add #![feature(const_panic)] to the crate attributes to enable\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0658`."}]}