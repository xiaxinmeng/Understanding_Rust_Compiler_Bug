{"sha": "0b9bc79738d3a0bc9672b29196d478e9e7f177cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiOWJjNzk3MzhkM2EwYmM5NjcyYjI5MTk2ZDQ3OGU5ZTdmMTc3Y2Q=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-07-01T22:51:35Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-07-01T22:51:35Z"}, "message": "Tests for number of times rustdoc is built with x.py test and doc.", "tree": {"sha": "fc68d0cfd21041ccfe2162780c1ca8012ac7cb64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc68d0cfd21041ccfe2162780c1ca8012ac7cb64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b9bc79738d3a0bc9672b29196d478e9e7f177cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b9bc79738d3a0bc9672b29196d478e9e7f177cd", "html_url": "https://github.com/rust-lang/rust/commit/0b9bc79738d3a0bc9672b29196d478e9e7f177cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b9bc79738d3a0bc9672b29196d478e9e7f177cd/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "915486364759689dce6932d67599d5ea234cd91a", "url": "https://api.github.com/repos/rust-lang/rust/commits/915486364759689dce6932d67599d5ea234cd91a", "html_url": "https://github.com/rust-lang/rust/commit/915486364759689dce6932d67599d5ea234cd91a"}], "stats": {"total": 108, "additions": 94, "deletions": 14}, "files": [{"sha": "1e75e67af0c9e17f847e5e63255ad1d41e2d8feb", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/0b9bc79738d3a0bc9672b29196d478e9e7f177cd/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b9bc79738d3a0bc9672b29196d478e9e7f177cd/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=0b9bc79738d3a0bc9672b29196d478e9e7f177cd", "patch": "@@ -54,6 +54,11 @@ fn dist_baseline() {\n         &[dist::Std { compiler: Compiler { host: a, stage: 1 }, target: a },]\n     );\n     assert_eq!(first(builder.cache.all::<dist::Src>()), &[dist::Src]);\n+    // Make sure rustdoc is only built once.\n+    assert_eq!(\n+        first(builder.cache.all::<tool::Rustdoc>()),\n+        &[tool::Rustdoc { compiler: Compiler { host: a, stage: 2 } },]\n+    );\n }\n \n #[test]\n@@ -414,3 +419,77 @@ fn test_exclude() {\n     // Ensure other tests are not affected.\n     assert!(builder.cache.contains::<test::RustdocUi>());\n }\n+\n+#[test]\n+fn doc_default() {\n+    let mut config = configure(&[], &[]);\n+    config.compiler_docs = true;\n+    config.cmd = Subcommand::Doc { paths: Vec::new(), open: false };\n+    let build = Build::new(config);\n+    let mut builder = Builder::new(&build);\n+    builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Doc), &[]);\n+    let a = INTERNER.intern_str(\"A\");\n+\n+    // error_index_generator uses stage 1 to share rustdoc artifacts with the\n+    // rustdoc tool.\n+    assert_eq!(\n+        first(builder.cache.all::<doc::ErrorIndex>()),\n+        &[doc::ErrorIndex { compiler: Compiler { host: a, stage: 1 }, target: a },]\n+    );\n+    assert_eq!(\n+        first(builder.cache.all::<tool::ErrorIndex>()),\n+        &[tool::ErrorIndex { compiler: Compiler { host: a, stage: 1 } }]\n+    );\n+    // This is actually stage 1, but Rustdoc::run swaps out the compiler with\n+    // stage minus 1 if --stage is not 0. Very confusing!\n+    assert_eq!(\n+        first(builder.cache.all::<tool::Rustdoc>()),\n+        &[tool::Rustdoc { compiler: Compiler { host: a, stage: 2 } },]\n+    );\n+}\n+\n+#[test]\n+fn test_docs() {\n+    // Behavior of `x.py test` doing various documentation tests.\n+    let mut config = configure(&[], &[]);\n+    config.cmd = Subcommand::Test {\n+        paths: vec![],\n+        test_args: vec![],\n+        rustc_args: vec![],\n+        fail_fast: true,\n+        doc_tests: DocTests::Yes,\n+        bless: false,\n+        compare_mode: None,\n+        rustfix_coverage: false,\n+        pass: None,\n+    };\n+    let build = Build::new(config);\n+    let mut builder = Builder::new(&build);\n+    builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Test), &[]);\n+    let a = INTERNER.intern_str(\"A\");\n+\n+    // error_index_generator uses stage 1 to share rustdoc artifacts with the\n+    // rustdoc tool.\n+    assert_eq!(\n+        first(builder.cache.all::<doc::ErrorIndex>()),\n+        &[doc::ErrorIndex { compiler: Compiler { host: a, stage: 1 }, target: a },]\n+    );\n+    assert_eq!(\n+        first(builder.cache.all::<tool::ErrorIndex>()),\n+        &[tool::ErrorIndex { compiler: Compiler { host: a, stage: 1 } }]\n+    );\n+    // Unfortunately rustdoc is built twice. Once from stage1 for compiletest\n+    // (and other things), and once from stage0 for std crates. Ideally it\n+    // would only be built once. If someone wants to fix this, it might be\n+    // worth investigating if it would be possible to test std from stage1.\n+    // Note that the stages here are +1 than what they actually are because\n+    // Rustdoc::run swaps out the compiler with stage minus 1 if --stage is\n+    // not 0.\n+    assert_eq!(\n+        first(builder.cache.all::<tool::Rustdoc>()),\n+        &[\n+            tool::Rustdoc { compiler: Compiler { host: a, stage: 1 } },\n+            tool::Rustdoc { compiler: Compiler { host: a, stage: 2 } },\n+        ]\n+    );\n+}"}, {"sha": "d02c19467ee68da0b9b420a038f7bdf8d6eb43e5", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0b9bc79738d3a0bc9672b29196d478e9e7f177cd/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b9bc79738d3a0bc9672b29196d478e9e7f177cd/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=0b9bc79738d3a0bc9672b29196d478e9e7f177cd", "patch": "@@ -637,9 +637,10 @@ impl Step for Rustdoc {\n     }\n }\n \n-#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+#[derive(Ord, PartialOrd, Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct ErrorIndex {\n-    target: Interned<String>,\n+    pub compiler: Compiler,\n+    pub target: Interned<String>,\n }\n \n impl Step for ErrorIndex {\n@@ -653,22 +654,22 @@ impl Step for ErrorIndex {\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(ErrorIndex { target: run.target });\n+        let target = run.target;\n+        // error_index_generator depends on librustdoc. Use the compiler that\n+        // is normally used to build rustdoc for other documentation so that\n+        // it shares the same artifacts.\n+        let compiler =\n+            run.builder.compiler_for(run.builder.top_stage, run.builder.config.build, target);\n+        run.builder.ensure(ErrorIndex { compiler, target });\n     }\n \n     /// Generates the HTML rendered error-index by running the\n     /// `error_index_generator` tool.\n     fn run(self, builder: &Builder<'_>) {\n-        let target = self.target;\n-\n-        builder.info(&format!(\"Documenting error index ({})\", target));\n-        let out = builder.doc_out(target);\n+        builder.info(&format!(\"Documenting error index ({})\", self.target));\n+        let out = builder.doc_out(self.target);\n         t!(fs::create_dir_all(&out));\n-        // error_index_generator depends on librustdoc. Use the compiler that\n-        // is normally used to build rustdoc for other documentation so that\n-        // it shares the same artifacts.\n-        let compiler = builder.compiler_for(builder.top_stage, builder.config.build, target);\n-        let mut index = tool::ErrorIndex::command(builder, compiler);\n+        let mut index = tool::ErrorIndex::command(builder, self.compiler);\n         index.arg(\"html\");\n         index.arg(out.join(\"error-index.html\"));\n         index.arg(crate::channel::CFG_RELEASE_NUM);"}, {"sha": "45f5073f4310081b221c90493ddfb993f875495f", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b9bc79738d3a0bc9672b29196d478e9e7f177cd/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b9bc79738d3a0bc9672b29196d478e9e7f177cd/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=0b9bc79738d3a0bc9672b29196d478e9e7f177cd", "patch": "@@ -366,7 +366,7 @@ bootstrap_tool!(\n     ExpandYamlAnchors, \"src/tools/expand-yaml-anchors\", \"expand-yaml-anchors\";\n );\n \n-#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq, Ord, PartialOrd)]\n pub struct ErrorIndex {\n     pub compiler: Compiler,\n }\n@@ -449,7 +449,7 @@ impl Step for RemoteTestServer {\n     }\n }\n \n-#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq, Ord, PartialOrd)]\n pub struct Rustdoc {\n     /// This should only ever be 0 or 2.\n     /// We sometimes want to reference the \"bootstrap\" rustdoc, which is why this option is here."}]}