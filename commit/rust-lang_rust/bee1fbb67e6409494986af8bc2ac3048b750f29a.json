{"sha": "bee1fbb67e6409494986af8bc2ac3048b750f29a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlZTFmYmI2N2U2NDA5NDk0OTg2YWY4YmMyYWMzMDQ4Yjc1MGYyOWE=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-10-27T18:22:58Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-08T16:59:27Z"}, "message": "Make try_load_from_on_disk_cache a function pointer.", "tree": {"sha": "80dd9fac5fe73e12c937db64ced3f4491e71397c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80dd9fac5fe73e12c937db64ced3f4491e71397c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bee1fbb67e6409494986af8bc2ac3048b750f29a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bee1fbb67e6409494986af8bc2ac3048b750f29a", "html_url": "https://github.com/rust-lang/rust/commit/bee1fbb67e6409494986af8bc2ac3048b750f29a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bee1fbb67e6409494986af8bc2ac3048b750f29a/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "438c430c765ca531f17dfed300c1ff4b35ca3cce", "url": "https://api.github.com/repos/rust-lang/rust/commits/438c430c765ca531f17dfed300c1ff4b35ca3cce", "html_url": "https://github.com/rust-lang/rust/commit/438c430c765ca531f17dfed300c1ff4b35ca3cce"}], "stats": {"total": 60, "additions": 31, "deletions": 29}, "files": [{"sha": "899a805a8d46103d7d84d270251be9a2e1ac934f", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/bee1fbb67e6409494986af8bc2ac3048b750f29a/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bee1fbb67e6409494986af8bc2ac3048b750f29a/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=bee1fbb67e6409494986af8bc2ac3048b750f29a", "patch": "@@ -94,6 +94,9 @@ pub struct DepKindStruct {\n     // FIXME: Make this a simple boolean once DepNodeParams::can_reconstruct_query_key\n     // can be made a specialized associated const.\n     can_reconstruct_query_key: fn() -> bool,\n+\n+    /// Invoke a query to put the on-disk cached value in memory.\n+    pub(super) try_load_from_on_disk_cache: fn(TyCtxt<'_>, &DepNode),\n }\n \n impl std::ops::Deref for DepKind {\n@@ -152,7 +155,8 @@ macro_rules! contains_eval_always_attr {\n #[allow(non_upper_case_globals)]\n pub mod dep_kind {\n     use super::*;\n-    use crate::ty::query::query_keys;\n+    use crate::ty::query::{queries, query_keys};\n+    use rustc_query_system::query::QueryDescription;\n \n     // We use this for most things when incr. comp. is turned off.\n     pub const Null: DepKindStruct = DepKindStruct {\n@@ -161,6 +165,7 @@ pub mod dep_kind {\n         is_eval_always: false,\n \n         can_reconstruct_query_key: || true,\n+        try_load_from_on_disk_cache: |_, _| {},\n     };\n \n     // Represents metadata from an extern crate.\n@@ -170,6 +175,7 @@ pub mod dep_kind {\n         is_eval_always: true,\n \n         can_reconstruct_query_key: || true,\n+        try_load_from_on_disk_cache: |_, _| {},\n     };\n \n     pub const TraitSelect: DepKindStruct = DepKindStruct {\n@@ -178,6 +184,7 @@ pub mod dep_kind {\n         is_eval_always: false,\n \n         can_reconstruct_query_key: || false,\n+        try_load_from_on_disk_cache: |_, _| {},\n     };\n \n     pub const CompileCodegenUnit: DepKindStruct = DepKindStruct {\n@@ -186,6 +193,7 @@ pub mod dep_kind {\n         is_eval_always: false,\n \n         can_reconstruct_query_key: || false,\n+        try_load_from_on_disk_cache: |_, _| {},\n     };\n \n     macro_rules! define_query_dep_kinds {\n@@ -205,11 +213,32 @@ pub mod dep_kind {\n                         ::can_reconstruct_query_key()\n                 }\n \n+                fn recover<'tcx>(tcx: TyCtxt<'tcx>, dep_node: &DepNode) -> Option<query_keys::$variant<'tcx>> {\n+                    <query_keys::$variant<'_> as DepNodeParams<TyCtxt<'_>>>::recover(tcx, dep_node)\n+                }\n+\n+                fn try_load_from_on_disk_cache(tcx: TyCtxt<'_>, dep_node: &DepNode) {\n+                    if !can_reconstruct_query_key() {\n+                        return\n+                    }\n+\n+                    debug_assert!(tcx.dep_graph\n+                                     .node_color(dep_node)\n+                                     .map(|c| c.is_green())\n+                                     .unwrap_or(false));\n+\n+                    let key = recover(tcx, dep_node).unwrap_or_else(|| panic!(\"Failed to recover key for {:?} with hash {}\", dep_node, dep_node.hash));\n+                    if queries::$variant::cache_on_disk(tcx, &key, None) {\n+                        let _ = tcx.$variant(key);\n+                    }\n+                }\n+\n                 DepKindStruct {\n                     has_params,\n                     is_anon,\n                     is_eval_always,\n                     can_reconstruct_query_key,\n+                    try_load_from_on_disk_cache,\n                 }\n             };)*\n         );"}, {"sha": "88441af674d33c0f151ffa6266e1bb8581be19b8", "filename": "compiler/rustc_middle/src/dep_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bee1fbb67e6409494986af8bc2ac3048b750f29a/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bee1fbb67e6409494986af8bc2ac3048b750f29a/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs?ref=bee1fbb67e6409494986af8bc2ac3048b750f29a", "patch": "@@ -1,5 +1,4 @@\n use crate::ich::StableHashingContext;\n-use crate::ty::query::try_load_from_on_disk_cache;\n use crate::ty::{self, TyCtxt};\n use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::sync::Lock;\n@@ -169,7 +168,7 @@ impl<'tcx> DepContext for TyCtxt<'tcx> {\n \n     // Interactions with on_disk_cache\n     fn try_load_from_on_disk_cache(&self, dep_node: &DepNode) {\n-        try_load_from_on_disk_cache(*self, dep_node)\n+        (dep_node.kind.try_load_from_on_disk_cache)(*self, dep_node)\n     }\n \n     fn load_diagnostics(&self, prev_dep_node_index: SerializedDepNodeIndex) -> Vec<Diagnostic> {"}, {"sha": "fd0a93899b11445fbf493b7a70595c3640c2165c", "filename": "compiler/rustc_middle/src/ty/query/mod.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bee1fbb67e6409494986af8bc2ac3048b750f29a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bee1fbb67e6409494986af8bc2ac3048b750f29a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs?ref=bee1fbb67e6409494986af8bc2ac3048b750f29a", "patch": "@@ -209,32 +209,6 @@ pub fn force_from_dep_node<'tcx>(tcx: TyCtxt<'tcx>, dep_node: &DepNode) -> bool\n     false\n }\n \n-pub(crate) fn try_load_from_on_disk_cache<'tcx>(tcx: TyCtxt<'tcx>, dep_node: &DepNode) {\n-    macro_rules! try_load_from_on_disk_cache {\n-        ($($name:ident,)*) => {\n-            match dep_node.kind {\n-                $(DepKind::$name => {\n-                    if <query_keys::$name<'tcx> as DepNodeParams<TyCtxt<'_>>>::can_reconstruct_query_key() {\n-                        debug_assert!(tcx.dep_graph\n-                                         .node_color(dep_node)\n-                                         .map(|c| c.is_green())\n-                                         .unwrap_or(false));\n-\n-                        let key = <query_keys::$name<'tcx> as DepNodeParams<TyCtxt<'_>>>::recover(tcx, dep_node).unwrap_or_else(|| panic!(\"Failed to recover key for {:?} with hash {}\", dep_node, dep_node.hash));\n-                        if queries::$name::cache_on_disk(tcx, &key, None) {\n-                            let _ = tcx.$name(key);\n-                        }\n-                    }\n-                })*\n-\n-                _ => (),\n-            }\n-        }\n-    }\n-\n-    rustc_cached_queries!(try_load_from_on_disk_cache!);\n-}\n-\n mod sealed {\n     use super::{DefId, LocalDefId};\n "}]}