{"sha": "2013ccc218a488768ad6b647dd8ecc293e7847b4", "node_id": "C_kwDOAAsO6NoAKDIwMTNjY2MyMThhNDg4NzY4YWQ2YjY0N2RkOGVjYzI5M2U3ODQ3YjQ", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-04-19T15:53:23Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-05-29T16:58:11Z"}, "message": "rustc_target: Refactor linker flavor inference\n\nGo through an intermediate pair of `cc`and `lld` hints instead of mapping CLI options to `LinkerFlavor` directly, and use the target's default linker flavor as a reference.", "tree": {"sha": "de9f89b74756ea587499918c6dc0e3b8ca80b01f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de9f89b74756ea587499918c6dc0e3b8ca80b01f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2013ccc218a488768ad6b647dd8ecc293e7847b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2013ccc218a488768ad6b647dd8ecc293e7847b4", "html_url": "https://github.com/rust-lang/rust/commit/2013ccc218a488768ad6b647dd8ecc293e7847b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2013ccc218a488768ad6b647dd8ecc293e7847b4/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "498553fc04f6a3fdc53412320f4e913bc53bc267", "url": "https://api.github.com/repos/rust-lang/rust/commits/498553fc04f6a3fdc53412320f4e913bc53bc267", "html_url": "https://github.com/rust-lang/rust/commit/498553fc04f6a3fdc53412320f4e913bc53bc267"}], "stats": {"total": 132, "additions": 76, "deletions": 56}, "files": [{"sha": "f8bb9bf2bb50bcc61fc4e0c66f395b96584bfd9a", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 3, "deletions": 40, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2013ccc218a488768ad6b647dd8ecc293e7847b4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2013ccc218a488768ad6b647dd8ecc293e7847b4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=2013ccc218a488768ad6b647dd8ecc293e7847b4", "patch": "@@ -23,7 +23,7 @@ use rustc_session::utils::NativeLibKind;\n use rustc_session::{filesearch, Session};\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::crt_objects::{CrtObjects, LinkSelfContainedDefault};\n-use rustc_target::spec::{Cc, LinkOutputKind, LinkerFlavor, LinkerFlavorCli, Lld, PanicStrategy};\n+use rustc_target::spec::{Cc, LinkOutputKind, LinkerFlavor, Lld, PanicStrategy};\n use rustc_target::spec::{RelocModel, RelroLevel, SanitizerSet, SplitDebuginfo};\n \n use super::archive::{ArchiveBuilder, ArchiveBuilderBuilder};\n@@ -1302,44 +1302,7 @@ pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n                 let stem = linker.file_stem().and_then(|stem| stem.to_str()).unwrap_or_else(|| {\n                     sess.emit_fatal(errors::LinkerFileStem);\n                 });\n-\n-                // Remove any version postfix.\n-                let stem = stem\n-                    .rsplit_once('-')\n-                    .and_then(|(lhs, rhs)| rhs.chars().all(char::is_numeric).then_some(lhs))\n-                    .unwrap_or(stem);\n-\n-                // GCC/Clang can have an optional target prefix.\n-                let flavor = if stem == \"emcc\" {\n-                    LinkerFlavor::EmCc\n-                } else if stem == \"gcc\"\n-                    || stem.ends_with(\"-gcc\")\n-                    || stem == \"g++\"\n-                    || stem.ends_with(\"-g++\")\n-                    || stem == \"clang\"\n-                    || stem.ends_with(\"-clang\")\n-                    || stem == \"clang++\"\n-                    || stem.ends_with(\"-clang++\")\n-                {\n-                    LinkerFlavor::from_cli(LinkerFlavorCli::Gcc, &sess.target)\n-                } else if stem == \"wasm-ld\" || stem.ends_with(\"-wasm-ld\") {\n-                    LinkerFlavor::WasmLld(Cc::No)\n-                } else if stem == \"ld\" || stem.ends_with(\"-ld\") {\n-                    LinkerFlavor::from_cli(LinkerFlavorCli::Ld, &sess.target)\n-                } else if stem == \"ld.lld\" {\n-                    LinkerFlavor::Gnu(Cc::No, Lld::Yes)\n-                } else if stem == \"link\" {\n-                    LinkerFlavor::Msvc(Lld::No)\n-                } else if stem == \"lld-link\" {\n-                    LinkerFlavor::Msvc(Lld::Yes)\n-                } else if stem == \"lld\" || stem == \"rust-lld\" {\n-                    let lld_flavor = sess.target.linker_flavor.lld_flavor();\n-                    LinkerFlavor::from_cli(LinkerFlavorCli::Lld(lld_flavor), &sess.target)\n-                } else {\n-                    // fall back to the value in the target spec\n-                    sess.target.linker_flavor\n-                };\n-\n+                let flavor = sess.target.linker_flavor.with_linker_hints(stem);\n                 Some((linker, flavor))\n             }\n             (None, None) => None,\n@@ -1349,7 +1312,7 @@ pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n     // linker and linker flavor specified via command line have precedence over what the target\n     // specification specifies\n     let linker_flavor =\n-        sess.opts.cg.linker_flavor.map(|flavor| LinkerFlavor::from_cli(flavor, &sess.target));\n+        sess.opts.cg.linker_flavor.map(|flavor| sess.target.linker_flavor.with_cli_hints(flavor));\n     if let Some(ret) = infer_from(sess, sess.opts.cg.linker.clone(), linker_flavor) {\n         return ret;\n     }"}, {"sha": "6a3eea1427ffce20da4a293b498109b30664779e", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 73, "deletions": 16, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/2013ccc218a488768ad6b647dd8ecc293e7847b4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2013ccc218a488768ad6b647dd8ecc293e7847b4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=2013ccc218a488768ad6b647dd8ecc293e7847b4", "patch": "@@ -205,15 +205,11 @@ impl ToJson for LldFlavor {\n }\n \n impl LinkerFlavor {\n-    pub fn from_cli(cli: LinkerFlavorCli, target: &TargetOptions) -> LinkerFlavor {\n-        Self::from_cli_impl(cli, target.linker_flavor.lld_flavor(), target.linker_flavor.is_gnu())\n-    }\n-\n-    /// The passed CLI flavor is preferred over other args coming from the default target spec,\n-    /// so this function can produce a flavor that is incompatible with the current target.\n-    /// FIXME: Produce errors when `-Clinker-flavor` is set to something incompatible\n-    /// with the current target.\n-    fn from_cli_impl(cli: LinkerFlavorCli, lld_flavor: LldFlavor, is_gnu: bool) -> LinkerFlavor {\n+    /// At this point the target's reference linker flavor doesn't yet exist and we need to infer\n+    /// it. The inference always succeds and gives some result, and we don't report any flavor\n+    /// incompatibility errors for json target specs. The CLI flavor is used as the main source\n+    /// of truth, other flags are used in case of ambiguities.\n+    fn from_cli_json(cli: LinkerFlavorCli, lld_flavor: LldFlavor, is_gnu: bool) -> LinkerFlavor {\n         match cli {\n             LinkerFlavorCli::Gcc => match lld_flavor {\n                 LldFlavor::Ld if is_gnu => LinkerFlavor::Gnu(Cc::Yes, Lld::No),\n@@ -257,6 +253,72 @@ impl LinkerFlavor {\n         }\n     }\n \n+    fn infer_cli_hints(cli: LinkerFlavorCli) -> (Option<Cc>, Option<Lld>) {\n+        match cli {\n+            LinkerFlavorCli::Gcc | LinkerFlavorCli::Em => (Some(Cc::Yes), None),\n+            LinkerFlavorCli::Lld(_) => (Some(Cc::No), Some(Lld::Yes)),\n+            LinkerFlavorCli::Ld | LinkerFlavorCli::Msvc => (Some(Cc::No), Some(Lld::No)),\n+            LinkerFlavorCli::BpfLinker | LinkerFlavorCli::PtxLinker => (None, None),\n+        }\n+    }\n+\n+    fn infer_linker_hints(linker_stem: &str) -> (Option<Cc>, Option<Lld>) {\n+        // Remove any version postfix.\n+        let stem = linker_stem\n+            .rsplit_once('-')\n+            .and_then(|(lhs, rhs)| rhs.chars().all(char::is_numeric).then_some(lhs))\n+            .unwrap_or(linker_stem);\n+\n+        // GCC/Clang can have an optional target prefix.\n+        if stem == \"emcc\"\n+            || stem == \"gcc\"\n+            || stem.ends_with(\"-gcc\")\n+            || stem == \"g++\"\n+            || stem.ends_with(\"-g++\")\n+            || stem == \"clang\"\n+            || stem.ends_with(\"-clang\")\n+            || stem == \"clang++\"\n+            || stem.ends_with(\"-clang++\")\n+        {\n+            (Some(Cc::Yes), None)\n+        } else if stem == \"wasm-ld\"\n+            || stem.ends_with(\"-wasm-ld\")\n+            || stem == \"ld.lld\"\n+            || stem == \"lld\"\n+            || stem == \"rust-lld\"\n+            || stem == \"lld-link\"\n+        {\n+            (Some(Cc::No), Some(Lld::Yes))\n+        } else if stem == \"ld\" || stem.ends_with(\"-ld\") || stem == \"link\" {\n+            (Some(Cc::No), Some(Lld::No))\n+        } else {\n+            (None, None)\n+        }\n+    }\n+\n+    fn with_hints(self, (cc_hint, lld_hint): (Option<Cc>, Option<Lld>)) -> LinkerFlavor {\n+        match self {\n+            LinkerFlavor::Gnu(cc, lld) => {\n+                LinkerFlavor::Gnu(cc_hint.unwrap_or(cc), lld_hint.unwrap_or(lld))\n+            }\n+            LinkerFlavor::Darwin(cc, lld) => {\n+                LinkerFlavor::Darwin(cc_hint.unwrap_or(cc), lld_hint.unwrap_or(lld))\n+            }\n+            LinkerFlavor::WasmLld(cc) => LinkerFlavor::WasmLld(cc_hint.unwrap_or(cc)),\n+            LinkerFlavor::Unix(cc) => LinkerFlavor::Unix(cc_hint.unwrap_or(cc)),\n+            LinkerFlavor::Msvc(lld) => LinkerFlavor::Msvc(lld_hint.unwrap_or(lld)),\n+            LinkerFlavor::EmCc | LinkerFlavor::Bpf | LinkerFlavor::Ptx => self,\n+        }\n+    }\n+\n+    pub fn with_cli_hints(self, cli: LinkerFlavorCli) -> LinkerFlavor {\n+        self.with_hints(LinkerFlavor::infer_cli_hints(cli))\n+    }\n+\n+    pub fn with_linker_hints(self, linker_stem: &str) -> LinkerFlavor {\n+        self.with_hints(LinkerFlavor::infer_linker_hints(linker_stem))\n+    }\n+\n     pub fn lld_flavor(self) -> LldFlavor {\n         match self {\n             LinkerFlavor::Gnu(..)\n@@ -1801,7 +1863,7 @@ impl TargetOptions {\n     }\n \n     fn update_from_cli(&mut self) {\n-        self.linker_flavor = LinkerFlavor::from_cli_impl(\n+        self.linker_flavor = LinkerFlavor::from_cli_json(\n             self.linker_flavor_json,\n             self.lld_flavor_json,\n             self.linker_is_gnu_json,\n@@ -1815,12 +1877,7 @@ impl TargetOptions {\n         ] {\n             args.clear();\n             for (flavor, args_json) in args_json {\n-                // Cannot use `from_cli` due to borrow checker.\n-                let linker_flavor = LinkerFlavor::from_cli_impl(\n-                    *flavor,\n-                    self.lld_flavor_json,\n-                    self.linker_is_gnu_json,\n-                );\n+                let linker_flavor = self.linker_flavor.with_cli_hints(*flavor);\n                 // Normalize to no lld to avoid asserts.\n                 let linker_flavor = match linker_flavor {\n                     LinkerFlavor::Gnu(cc, _) => LinkerFlavor::Gnu(cc, Lld::No),"}]}