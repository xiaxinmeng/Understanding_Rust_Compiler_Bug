{"sha": "01169572a23dc599a5a4c2f338afe68e62b295fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMTY5NTcyYTIzZGM1OTlhNWE0YzJmMzM4YWZlNjhlNjJiMjk1ZmE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-05T20:13:13Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-11T21:34:01Z"}, "message": "Account for existing names when suggesting adding a type param", "tree": {"sha": "7bae4c5f4710da9cfd8fe9409e18a0768d7cde0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bae4c5f4710da9cfd8fe9409e18a0768d7cde0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01169572a23dc599a5a4c2f338afe68e62b295fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01169572a23dc599a5a4c2f338afe68e62b295fa", "html_url": "https://github.com/rust-lang/rust/commit/01169572a23dc599a5a4c2f338afe68e62b295fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01169572a23dc599a5a4c2f338afe68e62b295fa/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c85fde126ed936685b0cdf9d28a3baa96bb0aa3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c85fde126ed936685b0cdf9d28a3baa96bb0aa3c", "html_url": "https://github.com/rust-lang/rust/commit/c85fde126ed936685b0cdf9d28a3baa96bb0aa3c"}], "stats": {"total": 87, "additions": 60, "deletions": 27}, "files": [{"sha": "b4744a7d6db1f1c11f882b592d6979e171f62e8b", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/01169572a23dc599a5a4c2f338afe68e62b295fa/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01169572a23dc599a5a4c2f338afe68e62b295fa/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=01169572a23dc599a5a4c2f338afe68e62b295fa", "patch": "@@ -437,6 +437,29 @@ impl GenericParam<'hir> {\n     }\n }\n \n+pub trait NextTypeParamName {\n+    fn next_type_param_name(&self) -> &'static str;\n+}\n+\n+impl NextTypeParamName for &[GenericParam<'_>] {\n+    fn next_type_param_name(&self) -> &'static str {\n+        // This is the whitelist of possible parameter names that we might suggest.\n+        let possible_names = [\"T\", \"U\", \"V\", \"X\", \"Y\", \"Z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"];\n+        let used_names = self\n+            .iter()\n+            .filter_map(|p| match p.name {\n+                ParamName::Plain(ident) => Some(ident.name),\n+                _ => None,\n+            })\n+            .collect::<Vec<_>>();\n+\n+        possible_names\n+            .iter()\n+            .find(|n| !used_names.contains(&Symbol::intern(n)))\n+            .unwrap_or(&\"ParamName\")\n+    }\n+}\n+\n #[derive(Default)]\n pub struct GenericParamCount {\n     pub lifetimes: usize,"}, {"sha": "16bdfe5d0d1ecfdfa82b5636fb6d5c72ae0517cd", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/01169572a23dc599a5a4c2f338afe68e62b295fa/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01169572a23dc599a5a4c2f338afe68e62b295fa/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=01169572a23dc599a5a4c2f338afe68e62b295fa", "patch": "@@ -10,7 +10,7 @@ use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n-use rustc_hir::Node;\n+use rustc_hir::{NextTypeParamName, Node};\n use rustc_middle::ty::TypeckTables;\n use rustc_middle::ty::{\n     self, AdtKind, DefIdTree, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n@@ -211,13 +211,14 @@ fn suggest_restriction(\n             }\n         }\n \n+        let type_param_name = generics.params.next_type_param_name();\n         // The type param `T: Trait` we will suggest to introduce.\n-        let type_param = format!(\"{}: {}\", \"T\", name);\n+        let type_param = format!(\"{}: {}\", type_param_name, name);\n \n         // FIXME: modify the `trait_ref` instead of string shenanigans.\n         // Turn `<impl Trait as Foo>::Bar: Qux` into `<T as Foo>::Bar: Qux`.\n         let pred = trait_ref.without_const().to_predicate().to_string();\n-        let pred = pred.replace(&impl_name, \"T\");\n+        let pred = pred.replace(&impl_name, type_param_name);\n         let mut sugg = vec![\n             match generics\n                 .params\n@@ -245,7 +246,7 @@ fn suggest_restriction(\n             //                       ^ suggest `where <T as Trait>::A: Bound`\n             predicate_constraint(generics, pred),\n         ];\n-        sugg.extend(ty_spans.into_iter().map(|s| (s, \"T\".to_string())));\n+        sugg.extend(ty_spans.into_iter().map(|s| (s, type_param_name.to_string())));\n \n         // Suggest `fn foo<T: Trait>(t: T) where <T as Trait>::A: Bound`.\n         err.multipart_suggestion("}, {"sha": "eb8f46e83bbf5308c05d7eba4d701a46590bd5e1", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/01169572a23dc599a5a4c2f338afe68e62b295fa/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01169572a23dc599a5a4c2f338afe68e62b295fa/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=01169572a23dc599a5a4c2f338afe68e62b295fa", "patch": "@@ -29,7 +29,7 @@ use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::weak_lang_items;\n-use rustc_hir::{GenericParamKind, Node, Unsafety};\n+use rustc_hir::{GenericParamKind, NextTypeParamName, Node, Unsafety};\n use rustc_middle::hir::map::blocks::FnLikeNode;\n use rustc_middle::hir::map::Map;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n@@ -135,20 +135,7 @@ crate fn placeholder_type_error(\n     if placeholder_types.is_empty() {\n         return;\n     }\n-    // This is the whitelist of possible parameter names that we might suggest.\n-    let possible_names = [\"T\", \"K\", \"L\", \"A\", \"B\", \"C\"];\n-    let used_names = generics\n-        .iter()\n-        .filter_map(|p| match p.name {\n-            hir::ParamName::Plain(ident) => Some(ident.name),\n-            _ => None,\n-        })\n-        .collect::<Vec<_>>();\n-\n-    let type_name = possible_names\n-        .iter()\n-        .find(|n| !used_names.contains(&Symbol::intern(n)))\n-        .unwrap_or(&\"ParamName\");\n+    let type_name = generics.next_type_param_name();\n \n     let mut sugg: Vec<_> =\n         placeholder_types.iter().map(|sp| (*sp, (*type_name).to_string())).collect();"}, {"sha": "6947bc0a734b9c8ced2e7421aa7572a0a76290c4", "filename": "src/test/ui/suggestions/impl-trait-with-missing-bounds.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/01169572a23dc599a5a4c2f338afe68e62b295fa/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01169572a23dc599a5a4c2f338afe68e62b295fa/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.rs?ref=01169572a23dc599a5a4c2f338afe68e62b295fa", "patch": "@@ -24,14 +24,21 @@ fn baz(t: impl std::fmt::Debug, constraints: impl Iterator) {\n     }\n }\n \n-fn bat<T: std::fmt::Debug>(t: T, constraints: impl Iterator) {\n+fn bat<K, T: std::fmt::Debug>(t: T, constraints: impl Iterator, _: K) {\n     for constraint in constraints {\n         qux(t);\n         qux(constraint);\n //~^ ERROR `<impl Iterator as std::iter::Iterator>::Item` doesn't implement `std::fmt::Debug`\n     }\n }\n \n+fn bak(constraints: impl  Iterator + std::fmt::Debug) {\n+    for constraint in constraints {\n+        qux(constraint);\n+//~^ ERROR `<impl Iterator + std::fmt::Debug as std::iter::Iterator>::Item` doesn't implement\n+    }\n+}\n+\n fn qux(_: impl std::fmt::Debug) {}\n \n fn main() {}"}, {"sha": "2d48be42233eae341fea0c00e10e654884410c38", "filename": "src/test/ui/suggestions/impl-trait-with-missing-bounds.stderr", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/01169572a23dc599a5a4c2f338afe68e62b295fa/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01169572a23dc599a5a4c2f338afe68e62b295fa/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.stderr?ref=01169572a23dc599a5a4c2f338afe68e62b295fa", "patch": "@@ -25,7 +25,7 @@ LL | fn qux(_: impl std::fmt::Debug) {}\n    = help: the trait `std::fmt::Debug` is not implemented for `<impl Iterator as std::iter::Iterator>::Item`\n help: introduce a type parameter with a trait bound instead of using `impl Trait`\n    |\n-LL | fn bar<T, T: Iterator>(t: T, constraints: T) where T: std::fmt::Debug, <T as std::iter::Iterator>::Item: std::fmt::Debug  {\n+LL | fn bar<T, U: Iterator>(t: T, constraints: U) where T: std::fmt::Debug, <U as std::iter::Iterator>::Item: std::fmt::Debug  {\n    |         ^^^^^^^^^^^^^                     ^                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `<impl Iterator as std::iter::Iterator>::Item` doesn't implement `std::fmt::Debug`\n@@ -55,9 +55,24 @@ LL | fn qux(_: impl std::fmt::Debug) {}\n    = help: the trait `std::fmt::Debug` is not implemented for `<impl Iterator as std::iter::Iterator>::Item`\n help: introduce a type parameter with a trait bound instead of using `impl Trait`\n    |\n-LL | fn bat<T: std::fmt::Debug, T: Iterator>(t: T, constraints: T) where <T as std::iter::Iterator>::Item: std::fmt::Debug  {\n-   |                          ^^^^^^^^^^^^^                     ^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn bat<K, T: std::fmt::Debug, U: Iterator>(t: T, constraints: U, _: K) where <U as std::iter::Iterator>::Item: std::fmt::Debug  {\n+   |                             ^^^^^^^^^^^^^                     ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error[E0277]: `<impl Iterator + std::fmt::Debug as std::iter::Iterator>::Item` doesn't implement `std::fmt::Debug`\n+  --> $DIR/impl-trait-with-missing-bounds.rs:37:13\n+   |\n+LL |         qux(constraint);\n+   |             ^^^^^^^^^^ `<impl Iterator + std::fmt::Debug as std::iter::Iterator>::Item` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+...\n+LL | fn qux(_: impl std::fmt::Debug) {}\n+   |    ---         --------------- required by this bound in `qux`\n+   |\n+   = help: the trait `std::fmt::Debug` is not implemented for `<impl Iterator + std::fmt::Debug as std::iter::Iterator>::Item`\n+help: introduce a type parameter with a trait bound instead of using `impl Trait`\n+   |\n+LL | fn bak<T: Iterator + std::fmt::Debug>(constraints: T) where <T as std::iter::Iterator>::Item: std::fmt::Debug  {\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^              ^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "6c0653d5fcb7c64f28458f2cef69b81d33036122", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01169572a23dc599a5a4c2f338afe68e62b295fa/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01169572a23dc599a5a4c2f338afe68e62b295fa/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=01169572a23dc599a5a4c2f338afe68e62b295fa", "patch": "@@ -106,7 +106,7 @@ LL | fn test6_b<T>(_: _, _: T) { }\n    |\n help: use type parameters instead\n    |\n-LL | fn test6_b<T, K>(_: K, _: T) { }\n+LL | fn test6_b<T, U>(_: U, _: T) { }\n    |             ^^^     ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n@@ -117,7 +117,7 @@ LL | fn test6_c<T, K, L, A, B>(_: _, _: (T, K, L, A, B)) { }\n    |\n help: use type parameters instead\n    |\n-LL | fn test6_c<T, K, L, A, B, C>(_: C, _: (T, K, L, A, B)) { }\n+LL | fn test6_c<T, K, L, A, B, U>(_: U, _: (T, K, L, A, B)) { }\n    |                         ^^^     ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n@@ -377,7 +377,7 @@ LL | struct BadStruct2<_, T>(_, T);\n    |\n help: use type parameters instead\n    |\n-LL | struct BadStruct2<K, T>(K, T);\n+LL | struct BadStruct2<U, T>(U, T);\n    |                   ^     ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures"}]}