{"sha": "156bda8bc708cca60e9de18743d833c8d97dd7ff", "node_id": "C_kwDOAAsO6NoAKDE1NmJkYThiYzcwOGNjYTYwZTlkZTE4NzQzZDgzM2M4ZDk3ZGQ3ZmY", "commit": {"author": {"name": "Afonso Bordado", "email": "afonso360@users.noreply.github.com", "date": "2022-08-23T10:42:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-23T10:42:24Z"}, "message": "Avoid masking shift amounts (#1268)\n\nCranelift 0.87 now follows its own documentation regarding\r\nshift amounts, and implicitly masks them if the arch requires it. [0]\r\n\r\n[0]: https://github.com/bytecodealliance/wasmtime/commit/05089321740a07757dff0a285176b2651a49aae2", "tree": {"sha": "35b4472d79268e2f5892f5cf727c986deb493c06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35b4472d79268e2f5892f5cf727c986deb493c06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/156bda8bc708cca60e9de18743d833c8d97dd7ff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjBK8QCRBK7hj4Ov3rIwAAYRwIABn4OXD3NZzI323tKPHY9vNL\nrXy7skDqbmiggVZRAcbpI0vU9zM3kFVCDAOzyZRLqjwwlDWUVADhdPfcwqcbw1Sa\nmH6CYES+GtOgqjakYDr87oi8J96rdn8RVLMemVav+fipeiqsR6dBYosC2TRlKsIv\noH+97O3lCYXM6giWAs7sdJ4pSarM0yUqDnS+I9J3dzZns9ZddDQTiHT4X3KgU+5L\nDrKvRYW0AHsHOJVaZGhQhSvNnpEdFKXnkaxuaoCzLdd9FOrVSSAlOmk2dJ4XnDwq\n0m9vlRzUpb4lUolyTZ69AbiOKBxwMa46TNj8yBjwAoFLG9JJpkJW3U4jembJoYU=\n=Km85\n-----END PGP SIGNATURE-----\n", "payload": "tree 35b4472d79268e2f5892f5cf727c986deb493c06\nparent b14c7337db5861288afc3b26ba006859ed052d39\nauthor Afonso Bordado <afonso360@users.noreply.github.com> 1661251344 +0100\ncommitter GitHub <noreply@github.com> 1661251344 +0200\n\nAvoid masking shift amounts (#1268)\n\nCranelift 0.87 now follows its own documentation regarding\r\nshift amounts, and implicitly masks them if the arch requires it. [0]\r\n\r\n[0]: https://github.com/bytecodealliance/wasmtime/commit/05089321740a07757dff0a285176b2651a49aae2"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/156bda8bc708cca60e9de18743d833c8d97dd7ff", "html_url": "https://github.com/rust-lang/rust/commit/156bda8bc708cca60e9de18743d833c8d97dd7ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/156bda8bc708cca60e9de18743d833c8d97dd7ff/comments", "author": {"login": "afonso360", "id": 1357143, "node_id": "MDQ6VXNlcjEzNTcxNDM=", "avatar_url": "https://avatars.githubusercontent.com/u/1357143?v=4", "gravatar_id": "", "url": "https://api.github.com/users/afonso360", "html_url": "https://github.com/afonso360", "followers_url": "https://api.github.com/users/afonso360/followers", "following_url": "https://api.github.com/users/afonso360/following{/other_user}", "gists_url": "https://api.github.com/users/afonso360/gists{/gist_id}", "starred_url": "https://api.github.com/users/afonso360/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/afonso360/subscriptions", "organizations_url": "https://api.github.com/users/afonso360/orgs", "repos_url": "https://api.github.com/users/afonso360/repos", "events_url": "https://api.github.com/users/afonso360/events{/privacy}", "received_events_url": "https://api.github.com/users/afonso360/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b14c7337db5861288afc3b26ba006859ed052d39", "url": "https://api.github.com/repos/rust-lang/rust/commits/b14c7337db5861288afc3b26ba006859ed052d39", "html_url": "https://github.com/rust-lang/rust/commit/b14c7337db5861288afc3b26ba006859ed052d39"}], "stats": {"total": 25, "additions": 6, "deletions": 19}, "files": [{"sha": "679974710df9751667b7862ae19045c21a9d3fec", "filename": "src/num.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/156bda8bc708cca60e9de18743d833c8d97dd7ff/src%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156bda8bc708cca60e9de18743d833c8d97dd7ff/src%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnum.rs?ref=156bda8bc708cca60e9de18743d833c8d97dd7ff", "patch": "@@ -150,18 +150,12 @@ pub(crate) fn codegen_int_binop<'tcx>(\n         BinOp::BitXor => b.bxor(lhs, rhs),\n         BinOp::BitAnd => b.band(lhs, rhs),\n         BinOp::BitOr => b.bor(lhs, rhs),\n-        BinOp::Shl => {\n-            let lhs_ty = fx.bcx.func.dfg.value_type(lhs);\n-            let actual_shift = fx.bcx.ins().band_imm(rhs, i64::from(lhs_ty.bits() - 1));\n-            fx.bcx.ins().ishl(lhs, actual_shift)\n-        }\n+        BinOp::Shl => b.ishl(lhs, rhs),\n         BinOp::Shr => {\n-            let lhs_ty = fx.bcx.func.dfg.value_type(lhs);\n-            let actual_shift = fx.bcx.ins().band_imm(rhs, i64::from(lhs_ty.bits() - 1));\n             if signed {\n-                fx.bcx.ins().sshr(lhs, actual_shift)\n+                b.sshr(lhs, rhs)\n             } else {\n-                fx.bcx.ins().ushr(lhs, actual_shift)\n+                b.ushr(lhs, rhs)\n             }\n         }\n         // Compare binops handles by `codegen_binop`.\n@@ -279,22 +273,15 @@ pub(crate) fn codegen_checked_int_binop<'tcx>(\n             }\n         }\n         BinOp::Shl => {\n-            let lhs_ty = fx.bcx.func.dfg.value_type(lhs);\n-            let masked_shift = fx.bcx.ins().band_imm(rhs, i64::from(lhs_ty.bits() - 1));\n-            let val = fx.bcx.ins().ishl(lhs, masked_shift);\n+            let val = fx.bcx.ins().ishl(lhs, rhs);\n             let ty = fx.bcx.func.dfg.value_type(val);\n             let max_shift = i64::from(ty.bits()) - 1;\n             let has_overflow = fx.bcx.ins().icmp_imm(IntCC::UnsignedGreaterThan, rhs, max_shift);\n             (val, has_overflow)\n         }\n         BinOp::Shr => {\n-            let lhs_ty = fx.bcx.func.dfg.value_type(lhs);\n-            let masked_shift = fx.bcx.ins().band_imm(rhs, i64::from(lhs_ty.bits() - 1));\n-            let val = if !signed {\n-                fx.bcx.ins().ushr(lhs, masked_shift)\n-            } else {\n-                fx.bcx.ins().sshr(lhs, masked_shift)\n-            };\n+            let val =\n+                if !signed { fx.bcx.ins().ushr(lhs, rhs) } else { fx.bcx.ins().sshr(lhs, rhs) };\n             let ty = fx.bcx.func.dfg.value_type(val);\n             let max_shift = i64::from(ty.bits()) - 1;\n             let has_overflow = fx.bcx.ins().icmp_imm(IntCC::UnsignedGreaterThan, rhs, max_shift);"}]}