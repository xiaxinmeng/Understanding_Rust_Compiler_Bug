{"sha": "d15f646ff17e2da0d4e8dc2754ba83213cf1a8bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNWY2NDZmZjE3ZTJkYTBkNGU4ZGMyNzU0YmE4MzIxM2NmMWE4YmI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-29T15:56:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-29T15:56:06Z"}, "message": "Merge #10074\n\n10074: internal: improve compile times a bit r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "8f28325ec5a633bcb625356cb3359b16681bbe52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f28325ec5a633bcb625356cb3359b16681bbe52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d15f646ff17e2da0d4e8dc2754ba83213cf1a8bb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhK64WCRBK7hj4Ov3rIwAAvDcIAKuG5V/Y2P64DKsUBldmrZ6w\nQ9EEkkszU+39zwYTwr2Ho1jfZxucQAldHBM08AWtg6ATKCPjACedq+z3pKe4JdQs\nRYfZsuYBL1esoRn4qk/ItdURPNV9XK6H0QZLwtfkc5NKvxJhd8k977hU/4Q1k2Fg\nOyW1eAtDmQMIyAkztVL9mdir1FA7voScfPCvXihxN6388UHzn3C7SoKx9UttVfGr\nA0b4y0AFZlm+Cdn3JrMEyCyt85XGAj32S/ItvHjnVBA5bWRCQczGAzYBx+TGRC3Z\nBprdPwXBjmgZ9CWox5yw5jS5to4XaNe6Fj8vpS280IIt3JPJLXhf56BflpP4bc4=\n=hFS8\n-----END PGP SIGNATURE-----\n", "payload": "tree 8f28325ec5a633bcb625356cb3359b16681bbe52\nparent 35d98070d223240ea46fc5dff7dac459425d5718\nparent cfa3f679e9f9de0be803b5a86d27da8c9dbe364f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1630252566 +0000\ncommitter GitHub <noreply@github.com> 1630252566 +0000\n\nMerge #10074\n\n10074: internal: improve compile times a bit r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d15f646ff17e2da0d4e8dc2754ba83213cf1a8bb", "html_url": "https://github.com/rust-lang/rust/commit/d15f646ff17e2da0d4e8dc2754ba83213cf1a8bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d15f646ff17e2da0d4e8dc2754ba83213cf1a8bb/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35d98070d223240ea46fc5dff7dac459425d5718", "url": "https://api.github.com/repos/rust-lang/rust/commits/35d98070d223240ea46fc5dff7dac459425d5718", "html_url": "https://github.com/rust-lang/rust/commit/35d98070d223240ea46fc5dff7dac459425d5718"}, {"sha": "cfa3f679e9f9de0be803b5a86d27da8c9dbe364f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfa3f679e9f9de0be803b5a86d27da8c9dbe364f", "html_url": "https://github.com/rust-lang/rust/commit/cfa3f679e9f9de0be803b5a86d27da8c9dbe364f"}], "stats": {"total": 95, "additions": 78, "deletions": 17}, "files": [{"sha": "544312f6fc32b0618a3a248f0e69cecad2897d01", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 76, "deletions": 15, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/d15f646ff17e2da0d4e8dc2754ba83213cf1a8bb/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d15f646ff17e2da0d4e8dc2754ba83213cf1a8bb/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=d15f646ff17e2da0d4e8dc2754ba83213cf1a8bb", "patch": "@@ -2517,18 +2517,35 @@ impl Type {\n         krate: Crate,\n         mut callback: impl FnMut(AssocItem) -> Option<T>,\n     ) -> Option<T> {\n-        for krate in method_resolution::def_crates(db, &self.ty, krate.id)? {\n+        let mut slot = None;\n+        self.iterate_assoc_items_dyn(db, krate, &mut |assoc_item_id| {\n+            slot = callback(assoc_item_id.into());\n+            slot.is_some()\n+        });\n+        slot\n+    }\n+\n+    fn iterate_assoc_items_dyn(\n+        self,\n+        db: &dyn HirDatabase,\n+        krate: Crate,\n+        callback: &mut dyn FnMut(AssocItemId) -> bool,\n+    ) {\n+        let def_crates = match method_resolution::def_crates(db, &self.ty, krate.id) {\n+            Some(it) => it,\n+            None => return,\n+        };\n+        for krate in def_crates {\n             let impls = db.inherent_impls_in_crate(krate);\n \n             for impl_def in impls.for_self_ty(&self.ty) {\n                 for &item in db.impl_data(*impl_def).items.iter() {\n-                    if let Some(result) = callback(item.into()) {\n-                        return Some(result);\n+                    if callback(item) {\n+                        return;\n                     }\n                 }\n             }\n         }\n-        None\n     }\n \n     pub fn type_arguments(&self) -> impl Iterator<Item = Type> + '_ {\n@@ -2547,9 +2564,34 @@ impl Type {\n         krate: Crate,\n         traits_in_scope: &FxHashSet<TraitId>,\n         name: Option<&Name>,\n-        mut callback: impl FnMut(&Ty, Function) -> Option<T>,\n+        mut callback: impl FnMut(Type, Function) -> Option<T>,\n     ) -> Option<T> {\n         let _p = profile::span(\"iterate_method_candidates\");\n+        let mut slot = None;\n+        self.iterate_method_candidates_dyn(\n+            db,\n+            krate,\n+            traits_in_scope,\n+            name,\n+            &mut |ty, assoc_item_id| match assoc_item_id {\n+                AssocItemId::FunctionId(it) => {\n+                    slot = callback(self.derived(ty.clone()), it.into());\n+                    slot.is_some()\n+                }\n+                AssocItemId::ConstId(_) | AssocItemId::TypeAliasId(_) => false,\n+            },\n+        );\n+        slot\n+    }\n+\n+    fn iterate_method_candidates_dyn(\n+        &self,\n+        db: &dyn HirDatabase,\n+        krate: Crate,\n+        traits_in_scope: &FxHashSet<TraitId>,\n+        name: Option<&Name>,\n+        callback: &mut dyn FnMut(&Ty, AssocItemId) -> bool,\n+    ) {\n         // There should be no inference vars in types passed here\n         // FIXME check that?\n         // FIXME replace Unknown by bound vars here\n@@ -2559,7 +2601,7 @@ impl Type {\n         let env = self.env.clone();\n         let krate = krate.id;\n \n-        method_resolution::iterate_method_candidates(\n+        method_resolution::iterate_method_candidates_dyn(\n             &canonical,\n             db,\n             env,\n@@ -2568,11 +2610,8 @@ impl Type {\n             None,\n             name,\n             method_resolution::LookupMode::MethodCall,\n-            |ty, it| match it {\n-                AssocItemId::FunctionId(f) => callback(ty, f.into()),\n-                _ => None,\n-            },\n-        )\n+            callback,\n+        );\n     }\n \n     pub fn iterate_path_candidates<T>(\n@@ -2581,15 +2620,37 @@ impl Type {\n         krate: Crate,\n         traits_in_scope: &FxHashSet<TraitId>,\n         name: Option<&Name>,\n-        mut callback: impl FnMut(&Ty, AssocItem) -> Option<T>,\n+        mut callback: impl FnMut(Type, AssocItem) -> Option<T>,\n     ) -> Option<T> {\n         let _p = profile::span(\"iterate_path_candidates\");\n+        let mut slot = None;\n+        self.iterate_path_candidates_dyn(\n+            db,\n+            krate,\n+            traits_in_scope,\n+            name,\n+            &mut |ty, assoc_item_id| {\n+                slot = callback(self.derived(ty.clone()), assoc_item_id.into());\n+                slot.is_some()\n+            },\n+        );\n+        slot\n+    }\n+\n+    fn iterate_path_candidates_dyn(\n+        &self,\n+        db: &dyn HirDatabase,\n+        krate: Crate,\n+        traits_in_scope: &FxHashSet<TraitId>,\n+        name: Option<&Name>,\n+        callback: &mut dyn FnMut(&Ty, AssocItemId) -> bool,\n+    ) {\n         let canonical = hir_ty::replace_errors_with_variables(&self.ty);\n \n         let env = self.env.clone();\n         let krate = krate.id;\n \n-        method_resolution::iterate_method_candidates(\n+        method_resolution::iterate_method_candidates_dyn(\n             &canonical,\n             db,\n             env,\n@@ -2598,8 +2659,8 @@ impl Type {\n             None,\n             name,\n             method_resolution::LookupMode::Path,\n-            |ty, it| callback(ty, it.into()),\n-        )\n+            callback,\n+        );\n     }\n \n     pub fn as_adt(&self) -> Option<Adt> {"}, {"sha": "9b789b5fa2fcd4243bb045641ce3fc304a6e2f98", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d15f646ff17e2da0d4e8dc2754ba83213cf1a8bb/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d15f646ff17e2da0d4e8dc2754ba83213cf1a8bb/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=d15f646ff17e2da0d4e8dc2754ba83213cf1a8bb", "patch": "@@ -422,7 +422,7 @@ pub fn iterate_method_candidates<T>(\n     mut callback: impl FnMut(&Ty, AssocItemId) -> Option<T>,\n ) -> Option<T> {\n     let mut slot = None;\n-    iterate_method_candidates_impl(\n+    iterate_method_candidates_dyn(\n         ty,\n         db,\n         env,\n@@ -440,7 +440,7 @@ pub fn iterate_method_candidates<T>(\n     slot\n }\n \n-fn iterate_method_candidates_impl(\n+pub fn iterate_method_candidates_dyn(\n     ty: &Canonical<Ty>,\n     db: &dyn HirDatabase,\n     env: Arc<TraitEnvironment>,"}]}