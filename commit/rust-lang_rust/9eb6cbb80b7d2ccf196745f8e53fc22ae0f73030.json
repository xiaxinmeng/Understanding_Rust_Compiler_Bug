{"sha": "9eb6cbb80b7d2ccf196745f8e53fc22ae0f73030", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllYjZjYmI4MGI3ZDJjY2YxOTY3NDVmOGU1M2ZjMjJhZTBmNzMwMzA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-10-21T20:09:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-21T20:09:11Z"}, "message": "Merge #6307\n\n6307: Add whitelist of safe intrinsics r=frazar a=frazar\n\nThis PR should fix #5996, where intrinsic operations where all marked as unsafe.\r\n\r\nI'm rather new to this codebase, so I might be doing something *very* wrong. Please forgive me!\r\n\r\nIn particular, I'm not sure how to \"check that we are in extern `rust-intrinsics`\" as mentioned [in this comment](https://github.com/rust-analyzer/rust-analyzer/issues/5996#issuecomment-709234802). \n\nCo-authored-by: Francesco Zardi <frazar@users.noreply.github.com>", "tree": {"sha": "d18c053f76b22c831e61cd9b5da2ec0ff5560b4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d18c053f76b22c831e61cd9b5da2ec0ff5560b4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9eb6cbb80b7d2ccf196745f8e53fc22ae0f73030", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfkJVnCRBK7hj4Ov3rIwAAdHIIABtLlUXPwPw6TjZuRV/G6pZY\novaSCb112zz6mzOnRZpNaoJNn324C2W93MXTUDmk+4Aaazlku/rSHEa611P8jvLK\n305YYz5FYI1UfMpFgSh2J/c5zzZwAq1h0y4x4S17BrW4BadX396IdOosITCuDjVk\nQRV3ZLqf82SJre1AOXhjDeg10tD2TSpC+PIvEWInGBYBPXdCsST1FmYoQVQIEfv4\nBdTFyEXL7owZK/+ZUqYpNCTezq0qMavJMQ1EiiJfzYbg3JQ9GVYXfP7YD6khTF3c\n6ZrGmoXj5JW6QDz5fb8u+g+uHIwKi+WvGCfK+pgpAjne6ToofYJPcyOzZjGdvkI=\n=Zd1F\n-----END PGP SIGNATURE-----\n", "payload": "tree d18c053f76b22c831e61cd9b5da2ec0ff5560b4f\nparent cc63f153f07af0d494f6bdfba9291e821a839807\nparent aff04d81ba6a334c1ba20ea4e6e04ffc88221aee\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1603310951 +0000\ncommitter GitHub <noreply@github.com> 1603310951 +0000\n\nMerge #6307\n\n6307: Add whitelist of safe intrinsics r=frazar a=frazar\n\nThis PR should fix #5996, where intrinsic operations where all marked as unsafe.\r\n\r\nI'm rather new to this codebase, so I might be doing something *very* wrong. Please forgive me!\r\n\r\nIn particular, I'm not sure how to \"check that we are in extern `rust-intrinsics`\" as mentioned [in this comment](https://github.com/rust-analyzer/rust-analyzer/issues/5996#issuecomment-709234802). \n\nCo-authored-by: Francesco Zardi <frazar@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9eb6cbb80b7d2ccf196745f8e53fc22ae0f73030", "html_url": "https://github.com/rust-lang/rust/commit/9eb6cbb80b7d2ccf196745f8e53fc22ae0f73030", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9eb6cbb80b7d2ccf196745f8e53fc22ae0f73030/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc63f153f07af0d494f6bdfba9291e821a839807", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc63f153f07af0d494f6bdfba9291e821a839807", "html_url": "https://github.com/rust-lang/rust/commit/cc63f153f07af0d494f6bdfba9291e821a839807"}, {"sha": "aff04d81ba6a334c1ba20ea4e6e04ffc88221aee", "url": "https://api.github.com/repos/rust-lang/rust/commits/aff04d81ba6a334c1ba20ea4e6e04ffc88221aee", "html_url": "https://github.com/rust-lang/rust/commit/aff04d81ba6a334c1ba20ea4e6e04ffc88221aee"}], "stats": {"total": 101, "additions": 99, "deletions": 2}, "files": [{"sha": "ca7fb4a43dbe242cb684a768c7881272a7181966", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9eb6cbb80b7d2ccf196745f8e53fc22ae0f73030/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb6cbb80b7d2ccf196745f8e53fc22ae0f73030/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=9eb6cbb80b7d2ccf196745f8e53fc22ae0f73030", "patch": "@@ -3,7 +3,7 @@\n use std::{collections::hash_map::Entry, mem, sync::Arc};\n \n use arena::map::ArenaMap;\n-use hir_expand::{ast_id_map::AstIdMap, hygiene::Hygiene, HirFileId};\n+use hir_expand::{ast_id_map::AstIdMap, hygiene::Hygiene, name::known, HirFileId};\n use smallvec::SmallVec;\n use syntax::{\n     ast::{self, ModuleItemOwner},\n@@ -555,7 +555,8 @@ impl Ctx {\n                     let id: ModItem = match item {\n                         ast::ExternItem::Fn(ast) => {\n                             let func = self.lower_function(&ast)?;\n-                            self.data().functions[func.index].is_unsafe = true;\n+                            self.data().functions[func.index].is_unsafe =\n+                                is_intrinsic_fn_unsafe(&self.data().functions[func.index].name);\n                             func.into()\n                         }\n                         ast::ExternItem::Static(ast) => {\n@@ -713,3 +714,45 @@ enum GenericsOwner<'a> {\n     TypeAlias,\n     Impl,\n }\n+\n+/// Returns `true` if the given intrinsic is unsafe to call, or false otherwise.\n+fn is_intrinsic_fn_unsafe(name: &Name) -> bool {\n+    // Should be kept in sync with https://github.com/rust-lang/rust/blob/c6e4db620a7d2f569f11dcab627430921ea8aacf/compiler/rustc_typeck/src/check/intrinsic.rs#L68\n+    ![\n+        known::abort,\n+        known::min_align_of,\n+        known::needs_drop,\n+        known::caller_location,\n+        known::size_of_val,\n+        known::min_align_of_val,\n+        known::add_with_overflow,\n+        known::sub_with_overflow,\n+        known::mul_with_overflow,\n+        known::wrapping_add,\n+        known::wrapping_sub,\n+        known::wrapping_mul,\n+        known::saturating_add,\n+        known::saturating_sub,\n+        known::rotate_left,\n+        known::rotate_right,\n+        known::ctpop,\n+        known::ctlz,\n+        known::cttz,\n+        known::bswap,\n+        known::bitreverse,\n+        known::discriminant_value,\n+        known::type_id,\n+        known::likely,\n+        known::unlikely,\n+        known::ptr_guaranteed_eq,\n+        known::ptr_guaranteed_ne,\n+        known::minnumf32,\n+        known::minnumf64,\n+        known::maxnumf32,\n+        known::rustc_peek,\n+        known::maxnumf64,\n+        known::type_name,\n+        known::variant_count,\n+    ]\n+    .contains(&name)\n+}"}, {"sha": "b26ffa1ef2e3b3c87668000e22f1cd54834a6d70", "filename": "crates/hir_expand/src/name.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9eb6cbb80b7d2ccf196745f8e53fc22ae0f73030/crates%2Fhir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb6cbb80b7d2ccf196745f8e53fc22ae0f73030/crates%2Fhir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fname.rs?ref=9eb6cbb80b7d2ccf196745f8e53fc22ae0f73030", "patch": "@@ -208,6 +208,42 @@ pub mod known {\n         PartialOrd,\n         Eq,\n         PartialEq,\n+        // Safe intrinsics\n+        abort,\n+        size_of,\n+        min_align_of,\n+        needs_drop,\n+        caller_location,\n+        size_of_val,\n+        min_align_of_val,\n+        add_with_overflow,\n+        sub_with_overflow,\n+        mul_with_overflow,\n+        wrapping_add,\n+        wrapping_sub,\n+        wrapping_mul,\n+        saturating_add,\n+        saturating_sub,\n+        rotate_left,\n+        rotate_right,\n+        ctpop,\n+        ctlz,\n+        cttz,\n+        bswap,\n+        bitreverse,\n+        discriminant_value,\n+        type_id,\n+        likely,\n+        unlikely,\n+        ptr_guaranteed_eq,\n+        ptr_guaranteed_ne,\n+        minnumf32,\n+        minnumf64,\n+        maxnumf32,\n+        rustc_peek,\n+        maxnumf64,\n+        type_name,\n+        variant_count,\n     );\n \n     // self/Self cannot be used as an identifier"}, {"sha": "2da9688cab0e0703f12444587fb8c9a372cb8932", "filename": "crates/hir_ty/src/diagnostics/unsafe_check.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9eb6cbb80b7d2ccf196745f8e53fc22ae0f73030/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb6cbb80b7d2ccf196745f8e53fc22ae0f73030/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs?ref=9eb6cbb80b7d2ccf196745f8e53fc22ae0f73030", "patch": "@@ -199,6 +199,24 @@ fn main() {\n         let x = STATIC_MUT.a;\n     }\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn no_missing_unsafe_diagnostic_with_safe_intrinsic() {\n+        check_diagnostics(\n+            r#\"\n+extern \"rust-intrinsic\" {\n+    pub fn bitreverse(x: u32) -> u32; // Safe intrinsic\n+    pub fn floorf32(x: f32) -> f32; // Unsafe intrinsic\n+}\n+\n+fn main() {\n+    let _ = bitreverse(12);\n+    let _ = floorf32(12.0);\n+          //^^^^^^^^^^^^^^ This operation is unsafe and requires an unsafe function or block\n+}\n \"#,\n         );\n     }"}]}