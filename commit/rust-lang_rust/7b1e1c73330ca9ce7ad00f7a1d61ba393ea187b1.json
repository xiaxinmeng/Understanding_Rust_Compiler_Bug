{"sha": "7b1e1c73330ca9ce7ad00f7a1d61ba393ea187b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMWUxYzczMzMwY2E5Y2U3YWQwMGY3YTFkNjFiYTM5M2VhMTg3YjE=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-06-08T20:16:05Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-06-08T20:17:48Z"}, "message": "add VecMap docs", "tree": {"sha": "36375d8e9fcaf05d4499866e70c62dac3c3644c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36375d8e9fcaf05d4499866e70c62dac3c3644c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b1e1c73330ca9ce7ad00f7a1d61ba393ea187b1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmC/0GwACgkQgTGiTgx5\n76+S4Q/+JCQ4FNITaXLVtGRtRhK5P0AyUL6LHVOMiLc/MG9hLlhUL8qKRh6UHyqx\nzXv3XUeMBTiOOP+hO70CmtUfgfRzE6wGJ/xfJ3B7qZdyrGilVmaf3Sij8jqTKDZC\nHoZOINkcar02GinzbNhT5K0lB02k5qbvws5A9mRAleDzbA13EnJ7RzBmwK2QIBCk\nht6Q5EF9B0m6ibBQSw/OQD29gpZAYKLYyXkPd4AJYauMGJje5fPxZCHsEAfaiNMn\ncjFGpyJAgdiP3jz+XcMNuG4v9zifByBVbXZwdL8DAOC6JNOy0W0/euXSNY27Plyf\nJv3Amvewoj/00ii419ovNmQw9Tm8VRGW8wDJpCqSC+67AVSK7pk9I3zyxWjw5MpJ\nefgh+dBNmBaxw2+f3+0jYwuuMs3Om8eetDob7dUn53yE4dPA+PbILJAVgSTYnIW9\n9ZgEjRWmtBM6jCy1o1BKH4/ew7YOzYTF702PD0XkUHg9AtvM3xb5W8SqXiXF2nOn\nymY1ZHT/XIBJBf7qwTu1HAWS+h6RtdVZ98c7bsTSjnq2JK+i9ta6VJhFWZ3XcrRP\ntssbvxa7/+4pDOZeK/Kc97Qb2aGqSPPLrWjx20qhJfbp2jdbJdVTQ4dkMkv64Jyh\nU1EcO8BEWMEkCe10uPcFdEN3Dh+zknU2MSep6Z+6a1WRT8n2V04=\n=ZrKU\n-----END PGP SIGNATURE-----", "payload": "tree 36375d8e9fcaf05d4499866e70c62dac3c3644c0\nparent cad762b1e24e350af3422b50b81e8b4e3b8393a0\nauthor Santiago Pastorino <spastorino@gmail.com> 1623183365 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1623183468 -0300\n\nadd VecMap docs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b1e1c73330ca9ce7ad00f7a1d61ba393ea187b1", "html_url": "https://github.com/rust-lang/rust/commit/7b1e1c73330ca9ce7ad00f7a1d61ba393ea187b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b1e1c73330ca9ce7ad00f7a1d61ba393ea187b1/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cad762b1e24e350af3422b50b81e8b4e3b8393a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/cad762b1e24e350af3422b50b81e8b4e3b8393a0", "html_url": "https://github.com/rust-lang/rust/commit/cad762b1e24e350af3422b50b81e8b4e3b8393a0"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "73b04d3329cb8e79e9c9a3c5d63f5f178b307e27", "filename": "compiler/rustc_data_structures/src/vec_map.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7b1e1c73330ca9ce7ad00f7a1d61ba393ea187b1/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b1e1c73330ca9ce7ad00f7a1d61ba393ea187b1/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs?ref=7b1e1c73330ca9ce7ad00f7a1d61ba393ea187b1", "patch": "@@ -5,6 +5,8 @@ use std::vec::IntoIter;\n \n use crate::stable_hasher::{HashStable, StableHasher};\n \n+/// A map type implemented as a vector of pairs `K` (key) and `V` (value).\n+/// It currently provides a subset of all the map operations, the rest could be added as needed.\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub struct VecMap<K, V>(Vec<(K, V)>);\n \n@@ -16,6 +18,7 @@ where\n         VecMap(Default::default())\n     }\n \n+    /// Sets the value of the entry, and returns the entry's old value.\n     pub fn insert(&mut self, k: K, v: V) -> Option<V> {\n         if let Some(elem) = self.0.iter_mut().find(|(key, _)| *key == k) {\n             Some(std::mem::replace(&mut elem.1, v))\n@@ -25,6 +28,7 @@ where\n         }\n     }\n \n+    /// Gets a reference to the value in the entry.\n     pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>\n     where\n         K: Borrow<Q>,\n@@ -33,10 +37,19 @@ where\n         self.0.iter().find(|(key, _)| k == key.borrow()).map(|elem| &elem.1)\n     }\n \n+    /// Returns the value corresponding to the supplied predicate filter.\n+    ///\n+    /// The supplied predicate will be applied to each (key, value) pair and it will return a\n+    /// reference to the values where the predicate returns `true`.\n     pub fn get_by(&self, mut predicate: impl FnMut(&(K, V)) -> bool) -> Option<&V> {\n         self.0.iter().find(|kv| predicate(kv)).map(|elem| &elem.1)\n     }\n \n+    /// Returns `true` if the map contains a value for the specified key.\n+    ///\n+    /// The key may be any borrowed form of the map's key type,\n+    /// [`Eq`] on the borrowed form *must* match those for\n+    /// the key type.\n     pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool\n     where\n         K: Borrow<Q>,\n@@ -45,6 +58,7 @@ where\n         self.get(k).is_some()\n     }\n \n+    /// Returns `true` if the map contains no elements.\n     pub fn is_empty(&self) -> bool {\n         self.0.is_empty()\n     }"}]}