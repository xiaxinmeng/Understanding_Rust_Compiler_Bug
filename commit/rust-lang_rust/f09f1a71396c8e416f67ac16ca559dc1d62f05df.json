{"sha": "f09f1a71396c8e416f67ac16ca559dc1d62f05df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwOWYxYTcxMzk2YzhlNDE2ZjY3YWMxNmNhNTU5ZGMxZDYyZjA1ZGY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-24T03:08:49Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-24T17:15:42Z"}, "message": "typeck/pat.rs: extract `check_pat_slice`.", "tree": {"sha": "b365d399a55c8985aac0f7bef0b2d26153d39c95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b365d399a55c8985aac0f7bef0b2d26153d39c95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f09f1a71396c8e416f67ac16ca559dc1d62f05df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f09f1a71396c8e416f67ac16ca559dc1d62f05df", "html_url": "https://github.com/rust-lang/rust/commit/f09f1a71396c8e416f67ac16ca559dc1d62f05df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f09f1a71396c8e416f67ac16ca559dc1d62f05df/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4a4e718deee509408407a39b561461ece58355c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4a4e718deee509408407a39b561461ece58355c", "html_url": "https://github.com/rust-lang/rust/commit/b4a4e718deee509408407a39b561461ece58355c"}], "stats": {"total": 159, "additions": 86, "deletions": 73}, "files": [{"sha": "7b78474e79979b6517fac80b9ab5704a37a4616f", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 86, "deletions": 73, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/f09f1a71396c8e416f67ac16ca559dc1d62f05df/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09f1a71396c8e416f67ac16ca559dc1d62f05df/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=f09f1a71396c8e416f67ac16ca559dc1d62f05df", "patch": "@@ -52,8 +52,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         def_bm: ty::BindingMode,\n         discrim_span: Option<Span>,\n     ) {\n-        let tcx = self.tcx;\n-\n         debug!(\"check_pat_walk(pat={:?},expected={:?},def_bm={:?})\", pat, expected, def_bm);\n \n         let path_resolution = match &pat.node {\n@@ -114,77 +112,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.check_pat_ref(pat, inner, mutbl, expected, def_bm, discrim_span)\n             }\n             PatKind::Slice(ref before, ref slice, ref after) => {\n-                let expected_ty = self.structurally_resolved_type(pat.span, expected);\n-                let (inner_ty, slice_ty) = match expected_ty.sty {\n-                    ty::Array(inner_ty, size) => {\n-                        if let Some(size) = size.try_eval_usize(tcx, self.param_env) {\n-                            let min_len = before.len() as u64 + after.len() as u64;\n-                            if slice.is_none() {\n-                                if min_len != size {\n-                                    struct_span_err!(\n-                                        tcx.sess, pat.span, E0527,\n-                                        \"pattern requires {} elements but array has {}\",\n-                                        min_len, size)\n-                                        .span_label(pat.span, format!(\"expected {} elements\", size))\n-                                        .emit();\n-                                }\n-                                (inner_ty, tcx.types.err)\n-                            } else if let Some(rest) = size.checked_sub(min_len) {\n-                                (inner_ty, tcx.mk_array(inner_ty, rest))\n-                            } else {\n-                                struct_span_err!(tcx.sess, pat.span, E0528,\n-                                        \"pattern requires at least {} elements but array has {}\",\n-                                        min_len, size)\n-                                    .span_label(pat.span,\n-                                        format!(\"pattern cannot match array of {} elements\", size))\n-                                    .emit();\n-                                (inner_ty, tcx.types.err)\n-                            }\n-                        } else {\n-                            struct_span_err!(\n-                                tcx.sess,\n-                                pat.span,\n-                                E0730,\n-                                \"cannot pattern-match on an array without a fixed length\",\n-                            ).emit();\n-                            (inner_ty, tcx.types.err)\n-                        }\n-                    }\n-                    ty::Slice(inner_ty) => (inner_ty, expected_ty),\n-                    _ => {\n-                        if !expected_ty.references_error() {\n-                            let mut err = struct_span_err!(\n-                                tcx.sess, pat.span, E0529,\n-                                \"expected an array or slice, found `{}`\",\n-                                expected_ty);\n-                            if let ty::Ref(_, ty, _) = expected_ty.sty {\n-                                match ty.sty {\n-                                    ty::Array(..) | ty::Slice(..) => {\n-                                        err.help(\"the semantics of slice patterns changed \\\n-                                                  recently; see issue #62254\");\n-                                    }\n-                                    _ => {}\n-                                }\n-                            }\n-\n-                            err.span_label( pat.span,\n-                                format!(\"pattern cannot match with input type `{}`\", expected_ty)\n-                            ).emit();\n-                        }\n-                        (tcx.types.err, tcx.types.err)\n-                    }\n-                };\n-\n-                for elt in before {\n-                    self.check_pat_walk(&elt, inner_ty, def_bm, discrim_span);\n-                }\n-                if let Some(ref slice) = *slice {\n-                    self.check_pat_walk(&slice, slice_ty, def_bm, discrim_span);\n-                }\n-                for elt in after {\n-                    self.check_pat_walk(&elt, inner_ty, def_bm, discrim_span);\n-                }\n-                expected_ty\n+                let slice = slice.as_deref();\n+                self.check_pat_slice(pat.span, before, slice, after, expected, def_bm, discrim_span)\n             }\n         };\n \n@@ -1070,4 +999,88 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             tcx.types.err\n         }\n     }\n+\n+    fn check_pat_slice(\n+        &self,\n+        span: Span,\n+        before: &'tcx [P<hir::Pat>],\n+        slice: Option<&'tcx hir::Pat>,\n+        after: &'tcx [P<hir::Pat>],\n+        expected: Ty<'tcx>,\n+        def_bm: ty::BindingMode,\n+        discrim_span: Option<Span>,\n+    ) -> Ty<'tcx> {\n+        let tcx = self.tcx;\n+        let expected_ty = self.structurally_resolved_type(span, expected);\n+        let (inner_ty, slice_ty) = match expected_ty.sty {\n+            ty::Array(inner_ty, size) => {\n+                if let Some(size) = size.try_eval_usize(tcx, self.param_env) {\n+                    let min_len = before.len() as u64 + after.len() as u64;\n+                    if slice.is_none() {\n+                        if min_len != size {\n+                            struct_span_err!(\n+                                tcx.sess, span, E0527,\n+                                \"pattern requires {} elements but array has {}\",\n+                                min_len, size\n+                            )\n+                            .span_label(span, format!(\"expected {} elements\", size))\n+                            .emit();\n+                        }\n+                        (inner_ty, tcx.types.err)\n+                    } else if let Some(rest) = size.checked_sub(min_len) {\n+                        (inner_ty, tcx.mk_array(inner_ty, rest))\n+                    } else {\n+                        let msg = format!(\"pattern cannot match array of {} elements\", size);\n+                        struct_span_err!(\n+                            tcx.sess, span, E0528,\n+                            \"pattern requires at least {} elements but array has {}\",\n+                            min_len, size\n+                        )\n+                        .span_label(span, msg)\n+                        .emit();\n+                        (inner_ty, tcx.types.err)\n+                    }\n+                } else {\n+                    struct_span_err!(\n+                        tcx.sess, span, E0730,\n+                        \"cannot pattern-match on an array without a fixed length\",\n+                    )\n+                    .emit();\n+                    (inner_ty, tcx.types.err)\n+                }\n+            }\n+            ty::Slice(inner_ty) => (inner_ty, expected_ty),\n+            _ => {\n+                if !expected_ty.references_error() {\n+                    let mut err = struct_span_err!(\n+                        tcx.sess, span, E0529,\n+                        \"expected an array or slice, found `{}`\",\n+                        expected_ty\n+                    );\n+                    if let ty::Ref(_, ty, _) = expected_ty.sty {\n+                        if let ty::Array(..) | ty::Slice(..) = ty.sty {\n+                            err.help(\"the semantics of slice patterns changed \\\n+                                     recently; see issue #62254\");\n+                        }\n+                    }\n+\n+                    let msg = format!(\"pattern cannot match with input type `{}`\", expected_ty);\n+                    err.span_label(span, msg);\n+                    err.emit();\n+                }\n+                (tcx.types.err, tcx.types.err)\n+            }\n+        };\n+\n+        for elt in before {\n+            self.check_pat_walk(&elt, inner_ty, def_bm, discrim_span);\n+        }\n+        if let Some(slice) = slice {\n+            self.check_pat_walk(&slice, slice_ty, def_bm, discrim_span);\n+        }\n+        for elt in after {\n+            self.check_pat_walk(&elt, inner_ty, def_bm, discrim_span);\n+        }\n+        expected_ty\n+    }\n }"}]}