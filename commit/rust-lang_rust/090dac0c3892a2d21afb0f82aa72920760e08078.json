{"sha": "090dac0c3892a2d21afb0f82aa72920760e08078", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MGRhYzBjMzg5MmEyZDIxYWZiMGY4MmFhNzI5MjA3NjBlMDgwNzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-16T05:45:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-16T05:45:10Z"}, "message": "Auto merge of #81734 - richkadel:fixfordash, r=pnkfelix\n\nEnsures `make` tests run under /bin/dash (if available), like CI, and fixes a Makefile\n\nNote: This cherrypicks #81688 (`@pnkfelix)`\n\nUpdates `tools.mk` to explicitly require `SHELL := /bin/dash`, since CI uses `dash` but other environments (including developer local machines) may default to `bash`.\n\nReplaces bash-specific shell command in one Makefile with a dash-compatible alternative, and re-enables the affected Makefile test.\n\nRemoves apparently redundant definition of `UNAME`.\n\nAlso see: [zulip discussion thread](https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/how.20to.20run.2Fbless.20src.2Ftest.2Frun-make-fulldeps.2Fcoverage.20.3F)\n\nr? `@pnkfelix`\n\nFYI: `@wesleywiser` `@tmandry`", "tree": {"sha": "8a5379b6c252f87467b9c098bde06d0c5f9b6c17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a5379b6c252f87467b9c098bde06d0c5f9b6c17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/090dac0c3892a2d21afb0f82aa72920760e08078", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/090dac0c3892a2d21afb0f82aa72920760e08078", "html_url": "https://github.com/rust-lang/rust/commit/090dac0c3892a2d21afb0f82aa72920760e08078", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/090dac0c3892a2d21afb0f82aa72920760e08078/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42a4673fbd40b09a99d057eaa9b3e5579b54c184", "url": "https://api.github.com/repos/rust-lang/rust/commits/42a4673fbd40b09a99d057eaa9b3e5579b54c184", "html_url": "https://github.com/rust-lang/rust/commit/42a4673fbd40b09a99d057eaa9b3e5579b54c184"}, {"sha": "cbe6c70c687c97a0189cc2ccf2d3071f4ed01174", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbe6c70c687c97a0189cc2ccf2d3071f4ed01174", "html_url": "https://github.com/rust-lang/rust/commit/cbe6c70c687c97a0189cc2ccf2d3071f4ed01174"}], "stats": {"total": 60, "additions": 21, "deletions": 39}, "files": [{"sha": "31583eaa8fee5bacd556d2f9d960512029bfccc6", "filename": "src/test/run-make-fulldeps/coverage-reports/Makefile", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/090dac0c3892a2d21afb0f82aa72920760e08078/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/090dac0c3892a2d21afb0f82aa72920760e08078/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile?ref=090dac0c3892a2d21afb0f82aa72920760e08078", "patch": "@@ -1,4 +1,3 @@\n-# ignore-test Broken; accidentally silently ignored on Linux CI; FIXME(#81688)\n # needs-profiler-support\n # ignore-windows-gnu\n # min-llvm-version: 11.0\n@@ -128,7 +127,7 @@ endif\n \t\t\t$$( \\\n \t\t\t\tfor file in $(TMPDIR)/rustdoc-$@/*/rust_out; \\\n \t\t\t\tdo \\\n-\t\t\t\t[[ -x $$file ]] && printf \"%s %s \" -object $$file; \\\n+\t\t\t\t[ -x \"$$file\" ] && printf \"%s %s \" -object $$file; \\\n \t\t\t\tdone \\\n \t\t\t) \\\n \t\t2> \"$(TMPDIR)\"/show_coverage_stderr.$@.txt \\"}, {"sha": "9cc9a4d47ad1c0a7b00c09b26597b5981129f926", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.partial_eq.txt", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/090dac0c3892a2d21afb0f82aa72920760e08078/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.partial_eq.txt", "raw_url": "https://github.com/rust-lang/rust/raw/090dac0c3892a2d21afb0f82aa72920760e08078/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.partial_eq.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.partial_eq.txt?ref=090dac0c3892a2d21afb0f82aa72920760e08078", "patch": "@@ -2,11 +2,11 @@\n     2|       |// structure of this test.\n     3|       |\n     4|      2|#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]\n-                       ^0            ^0      ^0 ^0  ^1       ^0 ^0^0\n+                       ^0            ^0      ^0 ^0  ^1       ^1 ^0^0\n     5|       |pub struct Version {\n     6|       |    major: usize,\n-    7|      1|    minor: usize, // Count: 1 - `PartialOrd` compared `minor` values in 3.2.1 vs. 3.3.0\n-    8|      0|    patch: usize, // Count: 0 - `PartialOrd` was determined by `minor` (2 < 3)\n+    7|       |    minor: usize,\n+    8|       |    patch: usize,\n     9|       |}\n    10|       |\n    11|       |impl Version {\n@@ -45,19 +45,4 @@\n    44|       |`function_source_hash` without a code region, if necessary.\n    45|       |\n    46|       |*/\n-   47|       |\n-   48|       |// FIXME(#79626): The derived traits get coverage, which is great, but some of the traits appear\n-   49|       |// to get two coverage execution counts at different positions:\n-   50|       |//\n-   51|       |// ```text\n-   52|       |//    4|      2|#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]\n-   53|       |//                       ^0            ^0      ^0 ^0  ^1       ^0 ^0^0\n-   54|       |// ```text\n-   55|       |//\n-   56|       |// `PartialEq`, `PartialOrd`, and `Ord` (and possibly `Eq`, if the trait name was longer than 2\n-   57|       |// characters) have counts at their first and last characters.\n-   58|       |//\n-   59|       |// Why is this? Why does `PartialOrd` have two values (1 and 0)? This must mean we are checking\n-   60|       |// distinct coverages, so maybe we don't want to eliminate one of them. Should we merge them?\n-   61|       |// If merged, do we lose some information?\n "}, {"sha": "38643aaf9021e383d8129ebdec669631bc8c8f41", "filename": "src/test/run-make-fulldeps/coverage/coverage_tools.mk", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/090dac0c3892a2d21afb0f82aa72920760e08078/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fcoverage_tools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/090dac0c3892a2d21afb0f82aa72920760e08078/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fcoverage_tools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fcoverage_tools.mk?ref=090dac0c3892a2d21afb0f82aa72920760e08078", "patch": "@@ -12,5 +12,3 @@\n # Enabling `-C link-dead-code` is not necessary when compiling with `-Z instrument-coverage`,\n # due to improvements in the coverage map generation, to add unreachable functions known to Rust.\n # Therefore, `-C link-dead-code` is no longer automatically enabled.\n-\n-UNAME = $(shell uname)"}, {"sha": "4ceaba9b111e93850dfceaeb377b53a02618d583", "filename": "src/test/run-make-fulldeps/coverage/partial_eq.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/090dac0c3892a2d21afb0f82aa72920760e08078/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/090dac0c3892a2d21afb0f82aa72920760e08078/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fpartial_eq.rs?ref=090dac0c3892a2d21afb0f82aa72920760e08078", "patch": "@@ -4,8 +4,8 @@\n #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]\n pub struct Version {\n     major: usize,\n-    minor: usize, // Count: 1 - `PartialOrd` compared `minor` values in 3.2.1 vs. 3.3.0\n-    patch: usize, // Count: 0 - `PartialOrd` was determined by `minor` (2 < 3)\n+    minor: usize,\n+    patch: usize,\n }\n \n impl Version {\n@@ -44,18 +44,3 @@ one expression, which is allowed, but the `function_source_hash` was only passed\n `function_source_hash` without a code region, if necessary.\n \n */\n-\n-// FIXME(#79626): The derived traits get coverage, which is great, but some of the traits appear\n-// to get two coverage execution counts at different positions:\n-//\n-// ```text\n-//    4|      2|#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]\n-//                       ^0            ^0      ^0 ^0  ^1       ^0 ^0^0\n-// ```text\n-//\n-// `PartialEq`, `PartialOrd`, and `Ord` (and possibly `Eq`, if the trait name was longer than 2\n-// characters) have counts at their first and last characters.\n-//\n-// Why is this? Why does `PartialOrd` have two values (1 and 0)? This must mean we are checking\n-// distinct coverages, so maybe we don't want to eliminate one of them. Should we merge them?\n-// If merged, do we lose some information?"}, {"sha": "a1a076dd7473dfdd367ecc2721c3510df45dda69", "filename": "src/test/run-make-fulldeps/tools.mk", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/090dac0c3892a2d21afb0f82aa72920760e08078/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/090dac0c3892a2d21afb0f82aa72920760e08078/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk?ref=090dac0c3892a2d21afb0f82aa72920760e08078", "patch": "@@ -21,6 +21,21 @@ CGREP := \"$(S)/src/etc/cat-and-grep.sh\"\n # diff with common flags for multi-platform diffs against text output\n DIFF := diff -u --strip-trailing-cr\n \n+# Some of the Rust CI platforms use `/bin/dash` to run `shell` script in\n+# Makefiles. Other platforms, including many developer platforms, default to\n+# `/bin/bash`. (In many cases, `make` is actually using `/bin/sh`, but `sh`\n+# is configured to execute one or the other shell binary). `dash` features\n+# support only a small subset of `bash` features, so `dash` can be thought of as\n+# the lowest common denominator, and tests should be validated against `dash`\n+# whenever possible. Most developer platforms include `/bin/dash`, but to ensure\n+# tests still work when `/bin/dash`, if not available, this `SHELL` override is\n+# conditional:\n+ifndef IS_WINDOWS # dash interprets backslashes in executable paths incorrectly\n+ifneq (,$(wildcard /bin/dash))\n+SHELL := /bin/dash\n+endif\n+endif\n+\n # This is the name of the binary we will generate and run; use this\n # e.g. for `$(CC) -o $(RUN_BINFILE)`.\n RUN_BINFILE = $(TMPDIR)/$(1)"}]}