{"sha": "b6bde885dc276b2fab3dd0b2de98627dcc304026", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2YmRlODg1ZGMyNzZiMmZhYjNkZDBiMmRlOTg2MjdkY2MzMDQwMjY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-23T00:00:24Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-23T21:21:15Z"}, "message": "core: Use less code for option dancing that notification channel", "tree": {"sha": "3670395865e3a7153866f0fc41c95f05303861ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3670395865e3a7153866f0fc41c95f05303861ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6bde885dc276b2fab3dd0b2de98627dcc304026", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6bde885dc276b2fab3dd0b2de98627dcc304026", "html_url": "https://github.com/rust-lang/rust/commit/b6bde885dc276b2fab3dd0b2de98627dcc304026", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6bde885dc276b2fab3dd0b2de98627dcc304026/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84c85496227e1b31f763dfd7e9a82c9b5da52407", "url": "https://api.github.com/repos/rust-lang/rust/commits/84c85496227e1b31f763dfd7e9a82c9b5da52407", "html_url": "https://github.com/rust-lang/rust/commit/84c85496227e1b31f763dfd7e9a82c9b5da52407"}], "stats": {"total": 45, "additions": 8, "deletions": 37}, "files": [{"sha": "37ee9ddf96bd22c0e870712704e0ffea27eec466", "filename": "src/libcore/task.rs", "status": "modified", "additions": 8, "deletions": 37, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b6bde885dc276b2fab3dd0b2de98627dcc304026/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6bde885dc276b2fab3dd0b2de98627dcc304026/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=b6bde885dc276b2fab3dd0b2de98627dcc304026", "patch": "@@ -32,6 +32,7 @@ use cmp::Eq;\n use result::Result;\n use pipes::{stream, Chan, Port};\n use local_data_priv::{local_get, local_set};\n+use util::replace;\n \n use rt::task_id;\n use rt::rust_task;\n@@ -246,11 +247,7 @@ priv impl TaskBuilder {\n             fail ~\"Cannot copy a task_builder\"; // Fake move mode on self\n         }\n         self.consumed = true;\n-        let notify_chan = if self.opts.notify_chan.is_none() {\n-            None\n-        } else {\n-            Some(option::swap_unwrap(&mut self.opts.notify_chan))\n-        };\n+        let notify_chan = replace(&mut self.opts.notify_chan, None);\n         TaskBuilder({\n             opts: {\n                 linked: self.opts.linked,\n@@ -271,11 +268,7 @@ impl TaskBuilder {\n      * the other will not be killed.\n      */\n     fn unlinked() -> TaskBuilder {\n-        let notify_chan = if self.opts.notify_chan.is_none() {\n-            None\n-        } else {\n-            Some(option::swap_unwrap(&mut self.opts.notify_chan))\n-        };\n+        let notify_chan = replace(&mut self.opts.notify_chan, None);\n         TaskBuilder({\n             opts: {\n                 linked: false,\n@@ -293,11 +286,7 @@ impl TaskBuilder {\n      * the child.\n      */\n     fn supervised() -> TaskBuilder {\n-        let notify_chan = if self.opts.notify_chan.is_none() {\n-            None\n-        } else {\n-            Some(option::swap_unwrap(&mut self.opts.notify_chan))\n-        };\n+        let notify_chan = replace(&mut self.opts.notify_chan, None);\n         TaskBuilder({\n             opts: {\n                 linked: false,\n@@ -314,11 +303,7 @@ impl TaskBuilder {\n      * other will be killed.\n      */\n     fn linked() -> TaskBuilder {\n-        let notify_chan = if self.opts.notify_chan.is_none() {\n-            None\n-        } else {\n-            Some(option::swap_unwrap(&mut self.opts.notify_chan))\n-        };\n+        let notify_chan = replace(&mut self.opts.notify_chan, None);\n         TaskBuilder({\n             opts: {\n                 linked: true,\n@@ -381,11 +366,7 @@ impl TaskBuilder {\n     }\n     /// Configure a custom scheduler mode for the task.\n     fn sched_mode(mode: SchedMode) -> TaskBuilder {\n-        let notify_chan = if self.opts.notify_chan.is_none() {\n-            None\n-        } else {\n-            Some(option::swap_unwrap(&mut self.opts.notify_chan))\n-        };\n+        let notify_chan = replace(&mut self.opts.notify_chan, None);\n         TaskBuilder({\n             opts: {\n                 linked: self.opts.linked,\n@@ -412,11 +393,7 @@ impl TaskBuilder {\n      */\n     fn add_wrapper(wrapper: fn@(v: fn~()) -> fn~()) -> TaskBuilder {\n         let prev_gen_body = self.gen_body;\n-        let notify_chan = if self.opts.notify_chan.is_none() {\n-            None\n-        } else {\n-            Some(option::swap_unwrap(&mut self.opts.notify_chan))\n-        };\n+        let notify_chan = replace(&mut self.opts.notify_chan, None);\n         TaskBuilder({\n             opts: {\n                 linked: self.opts.linked,\n@@ -447,13 +424,7 @@ impl TaskBuilder {\n      * must be greater than zero.\n      */\n     fn spawn(f: fn~()) {\n-        let notify_chan = if self.opts.notify_chan.is_none() {\n-            None\n-        } else {\n-            let swapped_notify_chan =\n-                option::swap_unwrap(&mut self.opts.notify_chan);\n-            Some(move swapped_notify_chan)\n-        };\n+        let notify_chan = replace(&mut self.opts.notify_chan, None);\n         let x = self.consume();\n         let opts = {\n             linked: x.opts.linked,"}]}