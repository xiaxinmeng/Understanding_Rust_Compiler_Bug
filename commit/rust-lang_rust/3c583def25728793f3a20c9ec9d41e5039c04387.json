{"sha": "3c583def25728793f3a20c9ec9d41e5039c04387", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjNTgzZGVmMjU3Mjg3OTNmM2EyMGM5ZWM5ZDQxZTUwMzljMDQzODc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-18T23:28:31Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-18T23:28:59Z"}, "message": "rustc: Make resolve3 multiple-trait-per-impl-aware", "tree": {"sha": "6dedb047d00bf4ad13e0b47d89c13a8901e5a3a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dedb047d00bf4ad13e0b47d89c13a8901e5a3a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c583def25728793f3a20c9ec9d41e5039c04387", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c583def25728793f3a20c9ec9d41e5039c04387", "html_url": "https://github.com/rust-lang/rust/commit/3c583def25728793f3a20c9ec9d41e5039c04387", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c583def25728793f3a20c9ec9d41e5039c04387/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "135a8afd7b2e969bac352baa5fef377c5c90476f", "url": "https://api.github.com/repos/rust-lang/rust/commits/135a8afd7b2e969bac352baa5fef377c5c90476f", "html_url": "https://github.com/rust-lang/rust/commit/135a8afd7b2e969bac352baa5fef377c5c90476f"}], "stats": {"total": 55, "additions": 25, "deletions": 30}, "files": [{"sha": "b9ca1c7709ee21db91e6a7af3b889bced507d97c", "filename": "src/rustc/middle/resolve3.rs", "status": "modified", "additions": 25, "deletions": 30, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/3c583def25728793f3a20c9ec9d41e5039c04387/src%2Frustc%2Fmiddle%2Fresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c583def25728793f3a20c9ec9d41e5039c04387/src%2Frustc%2Fmiddle%2Fresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve3.rs?ref=3c583def25728793f3a20c9ec9d41e5039c04387", "patch": "@@ -624,7 +624,7 @@ class Resolver {\n     let mut xray_context: XrayFlag;\n \n     // The trait that the current context can refer to.\n-    let mut current_trait_ref: option<def_id>;\n+    let mut current_trait_refs: option<@dvec<def_id>>;\n \n     // The atom for the keyword \"self\".\n     let self_atom: Atom;\n@@ -665,7 +665,7 @@ class Resolver {\n         self.type_ribs = @dvec();\n \n         self.xray_context = NoXray;\n-        self.current_trait_ref = none;\n+        self.current_trait_refs = none;\n \n         self.self_atom = (*self.atom_table).intern(@~\"self\");\n         self.primitive_type_table = @PrimitiveTypeTable(self.atom_table);\n@@ -2969,16 +2969,9 @@ class Resolver {\n             item_impl(type_parameters, implemented_traits, self_type,\n                       methods) {\n \n-                // XXX: Should take an array of traits.\n-                let trait_reference;\n-                if implemented_traits.len() == 0 {\n-                    trait_reference = none;\n-                } else {\n-                    trait_reference = some(implemented_traits[0]);\n-                }\n-\n                 self.resolve_implementation(item.id, item.span,\n-                                            type_parameters, trait_reference,\n+                                            type_parameters,\n+                                            implemented_traits,\n                                             self_type, methods, visitor);\n             }\n \n@@ -3376,7 +3369,7 @@ class Resolver {\n     fn resolve_implementation(id: node_id,\n                               span: span,\n                               type_parameters: ~[ty_param],\n-                              interface_reference: option<@trait_ref>,\n+                              trait_references: ~[@trait_ref],\n                               self_type: @ty,\n                               methods: ~[@method],\n                               visitor: ResolveVisitor) {\n@@ -3392,27 +3385,28 @@ class Resolver {\n             self.resolve_type_parameters(type_parameters, visitor);\n \n             // Resolve the interface reference, if necessary.\n-            let original_trait_ref = self.current_trait_ref;\n-            alt interface_reference {\n-                none {\n-                    // Nothing to do.\n-                }\n-                some(interface_reference) {\n-                    alt self.resolve_path(interface_reference.path, TypeNS,\n-                                          true, visitor) {\n+            let original_trait_refs = self.current_trait_refs;\n+            if trait_references.len() >= 1 {\n+                let mut new_trait_refs = @dvec();\n+                for trait_references.each |trait_reference| {\n+                    alt self.resolve_path(trait_reference.path, TypeNS, true,\n+                                          visitor) {\n                         none {\n                             self.session.span_err(span,\n                                                   ~\"attempt to implement an \\\n-                                                   unknown interface\");\n+                                                    unknown trait\");\n                         }\n                         some(def) {\n-                            self.record_def(interface_reference.ref_id, def);\n+                            self.record_def(trait_reference.ref_id, def);\n \n                             // Record the current trait reference.\n-                            self.current_trait_ref = some(def_id_of_def(def));\n+                            (*new_trait_refs).push(def_id_of_def(def));\n                         }\n                     }\n                 }\n+\n+                // Record the current set of trait references.\n+                self.current_trait_refs = some(new_trait_refs);\n             }\n \n             // Resolve the self type.\n@@ -3436,8 +3430,8 @@ class Resolver {\n                                       visitor);\n             }\n \n-            // Restore the original trait reference.\n-            self.current_trait_ref = original_trait_ref;\n+            // Restore the original trait references.\n+            self.current_trait_refs = original_trait_refs;\n         }\n     }\n \n@@ -4202,11 +4196,12 @@ class Resolver {\n         let mut search_module = self.current_module;\n         loop {\n             // Look for the current trait.\n-            alt copy self.current_trait_ref {\n-                some(trait_def_id) {\n-                    self.add_trait_info_if_containing_method(found_traits,\n-                                                             trait_def_id,\n-                                                             name);\n+            alt copy self.current_trait_refs {\n+                some(trait_def_ids) {\n+                    for trait_def_ids.each |trait_def_id| {\n+                        self.add_trait_info_if_containing_method\n+                            (found_traits, trait_def_id, name);\n+                    }\n                 }\n                 none {\n                     // Nothing to do."}]}