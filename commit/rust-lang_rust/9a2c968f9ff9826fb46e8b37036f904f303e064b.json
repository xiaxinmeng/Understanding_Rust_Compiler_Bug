{"sha": "9a2c968f9ff9826fb46e8b37036f904f303e064b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMmM5NjhmOWZmOTgyNmZiNDZlOGIzNzAzNmY5MDRmMzAzZTA2NGI=", "commit": {"author": {"name": "Evan Stoll", "email": "evanjsx@gmail.com", "date": "2019-11-02T18:10:59Z"}, "committer": {"name": "Evan Stoll", "email": "evanjsx@gmail.com", "date": "2019-11-02T18:11:25Z"}, "message": "deprecated_lints: align doc comment indents with `pub LINT_NAME`", "tree": {"sha": "3e36f08b1ec73033befcc5e64bf6b7b96d55ffe3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e36f08b1ec73033befcc5e64bf6b7b96d55ffe3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a2c968f9ff9826fb46e8b37036f904f303e064b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a2c968f9ff9826fb46e8b37036f904f303e064b", "html_url": "https://github.com/rust-lang/rust/commit/9a2c968f9ff9826fb46e8b37036f904f303e064b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a2c968f9ff9826fb46e8b37036f904f303e064b/comments", "author": {"login": "evanjs", "id": 1847524, "node_id": "MDQ6VXNlcjE4NDc1MjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1847524?v=4", "gravatar_id": "", "url": "https://api.github.com/users/evanjs", "html_url": "https://github.com/evanjs", "followers_url": "https://api.github.com/users/evanjs/followers", "following_url": "https://api.github.com/users/evanjs/following{/other_user}", "gists_url": "https://api.github.com/users/evanjs/gists{/gist_id}", "starred_url": "https://api.github.com/users/evanjs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/evanjs/subscriptions", "organizations_url": "https://api.github.com/users/evanjs/orgs", "repos_url": "https://api.github.com/users/evanjs/repos", "events_url": "https://api.github.com/users/evanjs/events{/privacy}", "received_events_url": "https://api.github.com/users/evanjs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "evanjs", "id": 1847524, "node_id": "MDQ6VXNlcjE4NDc1MjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1847524?v=4", "gravatar_id": "", "url": "https://api.github.com/users/evanjs", "html_url": "https://github.com/evanjs", "followers_url": "https://api.github.com/users/evanjs/followers", "following_url": "https://api.github.com/users/evanjs/following{/other_user}", "gists_url": "https://api.github.com/users/evanjs/gists{/gist_id}", "starred_url": "https://api.github.com/users/evanjs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/evanjs/subscriptions", "organizations_url": "https://api.github.com/users/evanjs/orgs", "repos_url": "https://api.github.com/users/evanjs/repos", "events_url": "https://api.github.com/users/evanjs/events{/privacy}", "received_events_url": "https://api.github.com/users/evanjs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1acea2e4fc231e4dd6229b6e0869f29e79b40edc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1acea2e4fc231e4dd6229b6e0869f29e79b40edc", "html_url": "https://github.com/rust-lang/rust/commit/1acea2e4fc231e4dd6229b6e0869f29e79b40edc"}], "stats": {"total": 112, "additions": 56, "deletions": 56}, "files": [{"sha": "a7640b8e8cedaa39eb277d9919eaf38a61f5ccb4", "filename": "clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/9a2c968f9ff9826fb46e8b37036f904f303e064b/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2c968f9ff9826fb46e8b37036f904f303e064b/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=9a2c968f9ff9826fb46e8b37036f904f303e064b", "patch": "@@ -5,79 +5,79 @@ macro_rules! declare_deprecated_lint {\n }\n \n declare_deprecated_lint! {\n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** This used to check for `assert!(a == b)` and recommend\n-/// replacement with `assert_eq!(a, b)`, but this is no longer needed after RFC 2011.\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This used to check for `assert!(a == b)` and recommend\n+    /// replacement with `assert_eq!(a, b)`, but this is no longer needed after RFC 2011.\n     pub SHOULD_ASSERT_EQ,\n     \"`assert!()` will be more flexible with RFC 2011\"\n }\n \n declare_deprecated_lint! {\n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** This used to check for `Vec::extend`, which was slower than\n-/// `Vec::extend_from_slice`. Thanks to specialization, this is no longer true.\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This used to check for `Vec::extend`, which was slower than\n+    /// `Vec::extend_from_slice`. Thanks to specialization, this is no longer true.\n     pub EXTEND_FROM_SLICE,\n     \"`.extend_from_slice(_)` is a faster way to extend a Vec by a slice\"\n }\n \n declare_deprecated_lint! {\n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** `Range::step_by(0)` used to be linted since it's\n-/// an infinite iterator, which is better expressed by `iter::repeat`,\n-/// but the method has been removed for `Iterator::step_by` which panics\n-/// if given a zero\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** `Range::step_by(0)` used to be linted since it's\n+    /// an infinite iterator, which is better expressed by `iter::repeat`,\n+    /// but the method has been removed for `Iterator::step_by` which panics\n+    /// if given a zero\n     pub RANGE_STEP_BY_ZERO,\n     \"`iterator.step_by(0)` panics nowadays\"\n }\n \n declare_deprecated_lint! {\n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** This used to check for `Vec::as_slice`, which was unstable with good\n-/// stable alternatives. `Vec::as_slice` has now been stabilized.\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This used to check for `Vec::as_slice`, which was unstable with good\n+    /// stable alternatives. `Vec::as_slice` has now been stabilized.\n     pub UNSTABLE_AS_SLICE,\n     \"`Vec::as_slice` has been stabilized in 1.7\"\n }\n \n declare_deprecated_lint! {\n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** This used to check for `Vec::as_mut_slice`, which was unstable with good\n-/// stable alternatives. `Vec::as_mut_slice` has now been stabilized.\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This used to check for `Vec::as_mut_slice`, which was unstable with good\n+    /// stable alternatives. `Vec::as_mut_slice` has now been stabilized.\n     pub UNSTABLE_AS_MUT_SLICE,\n     \"`Vec::as_mut_slice` has been stabilized in 1.7\"\n }\n \n declare_deprecated_lint! {\n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** This used to check for `.to_string()` method calls on values\n-/// of type `&str`. This is not unidiomatic and with specialization coming, `to_string` could be\n-/// specialized to be as efficient as `to_owned`.\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This used to check for `.to_string()` method calls on values\n+    /// of type `&str`. This is not unidiomatic and with specialization coming, `to_string` could be\n+    /// specialized to be as efficient as `to_owned`.\n     pub STR_TO_STRING,\n     \"using `str::to_string` is common even today and specialization will likely happen soon\"\n }\n \n declare_deprecated_lint! {\n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** This used to check for `.to_string()` method calls on values\n-/// of type `String`. This is not unidiomatic and with specialization coming, `to_string` could be\n-/// specialized to be as efficient as `clone`.\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This used to check for `.to_string()` method calls on values\n+    /// of type `String`. This is not unidiomatic and with specialization coming, `to_string` could be\n+    /// specialized to be as efficient as `clone`.\n     pub STRING_TO_STRING,\n     \"using `string::to_string` is common even today and specialization will likely happen soon\"\n }\n \n declare_deprecated_lint! {\n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** This lint should never have applied to non-pointer types, as transmuting\n-/// between non-pointer types of differing alignment is well-defined behavior (it's semantically\n-/// equivalent to a memcpy). This lint has thus been refactored into two separate lints:\n-/// cast_ptr_alignment and transmute_ptr_to_ptr.\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This lint should never have applied to non-pointer types, as transmuting\n+    /// between non-pointer types of differing alignment is well-defined behavior (it's semantically\n+    /// equivalent to a memcpy). This lint has thus been refactored into two separate lints:\n+    /// cast_ptr_alignment and transmute_ptr_to_ptr.\n     pub MISALIGNED_TRANSMUTE,\n     \"this lint has been split into cast_ptr_alignment and transmute_ptr_to_ptr\"\n }\n@@ -93,39 +93,39 @@ declare_deprecated_lint! {\n }\n \n declare_deprecated_lint! {\n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** The original rule will only lint for `if let`. After\n-/// making it support to lint `match`, naming as `if let` is not suitable for it.\n-/// So, this lint is deprecated.\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** The original rule will only lint for `if let`. After\n+    /// making it support to lint `match`, naming as `if let` is not suitable for it.\n+    /// So, this lint is deprecated.\n     pub IF_LET_REDUNDANT_PATTERN_MATCHING,\n     \"this lint has been changed to redundant_pattern_matching\"\n }\n \n declare_deprecated_lint! {\n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** This lint used to suggest replacing `let mut vec =\n-/// Vec::with_capacity(n); vec.set_len(n);` with `let vec = vec![0; n];`. The\n-/// replacement has very different performance characteristics so the lint is\n-/// deprecated.\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This lint used to suggest replacing `let mut vec =\n+    /// Vec::with_capacity(n); vec.set_len(n);` with `let vec = vec![0; n];`. The\n+    /// replacement has very different performance characteristics so the lint is\n+    /// deprecated.\n     pub UNSAFE_VECTOR_INITIALIZATION,\n     \"the replacement suggested by this lint had substantially different behavior\"\n }\n \n declare_deprecated_lint! {\n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** This lint has been superseded by the warn-by-default\n-/// `invalid_value` rustc lint.\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This lint has been superseded by the warn-by-default\n+    /// `invalid_value` rustc lint.\n     pub INVALID_REF,\n     \"superseded by rustc lint `invalid_value`\"\n }\n \n declare_deprecated_lint! {\n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** This lint has been superseded by #[must_use] in rustc.\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This lint has been superseded by #[must_use] in rustc.\n     pub UNUSED_COLLECT,\n     \"`collect` has been marked as #[must_use] in rustc and that covers all cases of this lint\"\n }"}]}