{"sha": "e2e892b59b1f31d75a6d37302ebb9d25d67de4c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyZTg5MmI1OWIxZjMxZDc1YTZkMzczMDJlYmI5ZDI1ZDY3ZGU0YzM=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-11-14T06:01:39Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-11-14T06:01:39Z"}, "message": "Fix wrong suggestion for `redundant_closure_call`\n\nFixes #1684", "tree": {"sha": "437e3cc1332b35f130881de62ba1c5e3eb27b6a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/437e3cc1332b35f130881de62ba1c5e3eb27b6a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2e892b59b1f31d75a6d37302ebb9d25d67de4c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2e892b59b1f31d75a6d37302ebb9d25d67de4c3", "html_url": "https://github.com/rust-lang/rust/commit/e2e892b59b1f31d75a6d37302ebb9d25d67de4c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2e892b59b1f31d75a6d37302ebb9d25d67de4c3/comments", "author": null, "committer": null, "parents": [{"sha": "6cc502dda0b487c77e25d104447356d5946b184f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cc502dda0b487c77e25d104447356d5946b184f", "html_url": "https://github.com/rust-lang/rust/commit/6cc502dda0b487c77e25d104447356d5946b184f"}], "stats": {"total": 66, "additions": 50, "deletions": 16}, "files": [{"sha": "550d7f242108c0e00a924b7ae0dea79618762293", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 45, "deletions": 16, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/e2e892b59b1f31d75a6d37302ebb9d25d67de4c3/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2e892b59b1f31d75a6d37302ebb9d25d67de4c3/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=e2e892b59b1f31d75a6d37302ebb9d25d67de4c3", "patch": "@@ -15,7 +15,7 @@ use if_chain::if_chain;\n use std::char;\n use crate::syntax::ast::*;\n use crate::syntax::source_map::Span;\n-use crate::syntax::visit::FnKind;\n+use crate::syntax::visit::{FnKind, Visitor, walk_expr};\n use crate::utils::{constants, snippet, snippet_opt, span_help_and_lint, span_lint, span_lint_and_then};\n use crate::rustc_errors::Applicability;\n \n@@ -199,6 +199,31 @@ impl LintPass for MiscEarly {\n     }\n }\n \n+// Used to find `return` statements or equivalents e.g. `?`\n+struct ReturnVisitor {\n+    found_return: bool,\n+}\n+\n+impl ReturnVisitor {\n+    fn new() -> ReturnVisitor {\n+        ReturnVisitor {\n+            found_return: false,\n+        }\n+    }\n+}\n+\n+impl<'ast> Visitor<'ast> for ReturnVisitor {\n+    fn visit_expr(&mut self, ex: &'ast Expr) {\n+        if let ExprKind::Ret(_) = ex.node {\n+            self.found_return = true;\n+        } else if let ExprKind::Try(_) = ex.node {\n+            self.found_return = true;\n+        }\n+\n+        walk_expr(self, ex)\n+    }\n+}\n+\n impl EarlyLintPass for MiscEarly {\n     fn check_generics(&mut self, cx: &EarlyContext<'_>, gen: &Generics) {\n         for param in &gen.params {\n@@ -311,21 +336,25 @@ impl EarlyLintPass for MiscEarly {\n         match expr.node {\n             ExprKind::Call(ref paren, _) => if let ExprKind::Paren(ref closure) = paren.node {\n                 if let ExprKind::Closure(_, _, _, ref decl, ref block, _) = closure.node {\n-                    span_lint_and_then(\n-                        cx,\n-                        REDUNDANT_CLOSURE_CALL,\n-                        expr.span,\n-                        \"Try not to call a closure in the expression where it is declared.\",\n-                        |db| if decl.inputs.is_empty() {\n-                            let hint = snippet(cx, block.span, \"..\").into_owned();\n-                            db.span_suggestion_with_applicability(\n-                                expr.span,\n-                                \"Try doing something like: \",\n-                                hint,\n-                                Applicability::MachineApplicable, // snippet\n-                            );\n-                        },\n-                    );\n+                    let mut visitor = ReturnVisitor::new();\n+                    visitor.visit_expr(block);\n+                    if !visitor.found_return {\n+                        span_lint_and_then(\n+                            cx,\n+                            REDUNDANT_CLOSURE_CALL,\n+                            expr.span,\n+                            \"Try not to call a closure in the expression where it is declared.\",\n+                            |db| if decl.inputs.is_empty() {\n+                                let hint = snippet(cx, block.span, \"..\").into_owned();\n+                                db.span_suggestion_with_applicability(\n+                                    expr.span,\n+                                    \"Try doing something like: \",\n+                                    hint,\n+                                    Applicability::MachineApplicable, // snippet\n+                                );\n+                            },\n+                        );\n+                    }\n                 }\n             },\n             ExprKind::Unary(UnOp::Neg, ref inner) => if let ExprKind::Unary(UnOp::Neg, _) = inner.node {"}, {"sha": "e68cdc2c1d17f244eebf59667575ad454c3bd0d7", "filename": "tests/ui/redundant_closure_call.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e2e892b59b1f31d75a6d37302ebb9d25d67de4c3/tests%2Fui%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2e892b59b1f31d75a6d37302ebb9d25d67de4c3/tests%2Fui%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call.rs?ref=e2e892b59b1f31d75a6d37302ebb9d25d67de4c3", "patch": "@@ -28,4 +28,9 @@ fn main() {\n \ti = closure(3);\n \n \ti = closure(4);\n+\n+    #[allow(clippy::needless_return)]\n+    (|| return 2)();\n+    (|| -> Option<i32> { None? })();\n+    (|| -> Result<i32, i32> { r#try!(Err(2)) })();\n }"}]}