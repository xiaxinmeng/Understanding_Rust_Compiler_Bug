{"sha": "03707b56717ab6b105cba5627985689c5a3debe5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNzA3YjU2NzE3YWI2YjEwNWNiYTU2Mjc5ODU2ODljNWEzZGViZTU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-15T22:39:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-15T22:39:13Z"}, "message": "Rollup merge of #69903 - estebank:icemation, r=oli-obk\n\nDo not ICE in the face of invalid enum discriminant\n\nFix #67377.\n\nr? @pnkfelix", "tree": {"sha": "b5d291590534cd8d0cbaf593db276c5bbc701b63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5d291590534cd8d0cbaf593db276c5bbc701b63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03707b56717ab6b105cba5627985689c5a3debe5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJel40SCRBK7hj4Ov3rIwAAdHIIABB9gfw+MZL4Jwy953WYMt7q\nvom4GXztBv5AfgODtMDGmITb7mVDmuex5gzBOgp8s3efYpD81cJv/zMGi1DRSRVU\nXzIwdby0xpgc6JcJmy/m/CSlij/xm5Xx8btHWq8JAN9dOnoK12rKkFkRNSI4g5Gd\nvdqIfPyibXT2GX/p0OxtxcvmmisDHOK371JhfA2yVrcpY2/df1O3PvVtm16EDNTT\nB/euYUpUzLMK0BX/5ThOv/yaPm9wYFzh0L0vUXbwTpv/SLU+7vDFxpUf45bsugcP\nUVjR0rAHiwK73xXPG4UdMadCajVwwitsOa5TN5k3HIuCLsqy+vZCdfwcinCO144=\n=szDP\n-----END PGP SIGNATURE-----\n", "payload": "tree b5d291590534cd8d0cbaf593db276c5bbc701b63\nparent 835428c35d785733e72bfbf32fc2f8fff3e50e63\nparent f47c4ffdfacc783b3fe4bad395a6e16ae296b3d1\nauthor Dylan DPC <dylan.dpc@gmail.com> 1586990353 +0200\ncommitter GitHub <noreply@github.com> 1586990353 +0200\n\nRollup merge of #69903 - estebank:icemation, r=oli-obk\n\nDo not ICE in the face of invalid enum discriminant\n\nFix #67377.\n\nr? @pnkfelix\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03707b56717ab6b105cba5627985689c5a3debe5", "html_url": "https://github.com/rust-lang/rust/commit/03707b56717ab6b105cba5627985689c5a3debe5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03707b56717ab6b105cba5627985689c5a3debe5/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "835428c35d785733e72bfbf32fc2f8fff3e50e63", "url": "https://api.github.com/repos/rust-lang/rust/commits/835428c35d785733e72bfbf32fc2f8fff3e50e63", "html_url": "https://github.com/rust-lang/rust/commit/835428c35d785733e72bfbf32fc2f8fff3e50e63"}, {"sha": "f47c4ffdfacc783b3fe4bad395a6e16ae296b3d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f47c4ffdfacc783b3fe4bad395a6e16ae296b3d1", "html_url": "https://github.com/rust-lang/rust/commit/f47c4ffdfacc783b3fe4bad395a6e16ae296b3d1"}], "stats": {"total": 178, "additions": 173, "deletions": 5}, "files": [{"sha": "430ff67d56b68c027f63639029e28826708aaa25", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03707b56717ab6b105cba5627985689c5a3debe5/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03707b56717ab6b105cba5627985689c5a3debe5/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=03707b56717ab6b105cba5627985689c5a3debe5", "patch": "@@ -2399,7 +2399,11 @@ impl<'tcx> AdtDef {\n                 None\n             }\n             Err(ErrorHandled::TooGeneric) => {\n-                span_bug!(tcx.def_span(expr_did), \"enum discriminant depends on generic arguments\",)\n+                tcx.sess.delay_span_bug(\n+                    tcx.def_span(expr_did),\n+                    \"enum discriminant depends on generic arguments\",\n+                );\n+                None\n             }\n         }\n     }"}, {"sha": "d2d99cf030d96bcdb574454b17f5ef1125bd7ce9", "filename": "src/librustc_mir_build/hair/cx/expr.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/03707b56717ab6b105cba5627985689c5a3debe5/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03707b56717ab6b105cba5627985689c5a3debe5/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs?ref=03707b56717ab6b105cba5627985689c5a3debe5", "patch": "@@ -12,7 +12,7 @@ use rustc_middle::ty::adjustment::{\n     Adjust, Adjustment, AutoBorrow, AutoBorrowMutability, PointerCast,\n };\n use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n-use rustc_middle::ty::{self, AdtKind, Ty};\n+use rustc_middle::ty::{self, AdtKind, Ty, TypeFoldable};\n use rustc_span::Span;\n \n impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr<'tcx> {\n@@ -718,8 +718,7 @@ fn convert_path_expr<'a, 'tcx>(\n \n         Res::Def(DefKind::Ctor(_, CtorKind::Const), def_id) => {\n             let user_provided_types = cx.tables.user_provided_types();\n-            let user_provided_type = user_provided_types.get(expr.hir_id).copied();\n-            debug!(\"convert_path_expr: user_provided_type={:?}\", user_provided_type);\n+            let user_ty = user_provided_types.get(expr.hir_id).copied();\n             let ty = cx.tables().node_type(expr.hir_id);\n             match ty.kind {\n                 // A unit struct/variant which is used as a value.\n@@ -728,10 +727,17 @@ fn convert_path_expr<'a, 'tcx>(\n                     adt_def,\n                     variant_index: adt_def.variant_index_with_ctor_id(def_id),\n                     substs,\n-                    user_ty: user_provided_type,\n+                    user_ty,\n                     fields: vec![],\n                     base: None,\n                 },\n+                _ if ty.references_error() => {\n+                    // Handle degenerate input without ICE (#67377).\n+                    ExprKind::Literal {\n+                        literal: ty::Const::zero_sized(cx.tcx, cx.tcx.types.err),\n+                        user_ty: None,\n+                    }\n+                }\n                 _ => bug!(\"unexpected ty: {:?}\", ty),\n             }\n         }"}, {"sha": "87222ef4b59245f5931b2c26b8565efe947dace2", "filename": "src/test/ui/parser/issue-67377-invalid-syntax-in-enum-discriminant.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/03707b56717ab6b105cba5627985689c5a3debe5/src%2Ftest%2Fui%2Fparser%2Fissue-67377-invalid-syntax-in-enum-discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03707b56717ab6b105cba5627985689c5a3debe5/src%2Ftest%2Fui%2Fparser%2Fissue-67377-invalid-syntax-in-enum-discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-67377-invalid-syntax-in-enum-discriminant.rs?ref=03707b56717ab6b105cba5627985689c5a3debe5", "patch": "@@ -0,0 +1,35 @@\n+mod a {\n+    use std::marker::PhantomData;\n+\n+    enum Bug {\n+        V = [PhantomData; { [ () ].len() ].len() as isize,\n+        //~^ ERROR mismatched closing delimiter: `]`\n+        //~| ERROR mismatched closing delimiter: `]`\n+        //~| ERROR mismatched closing delimiter: `]`\n+        //~| ERROR mismatched closing delimiter: `]`\n+    }\n+}\n+\n+mod b {\n+    enum Bug {\n+        V = [Vec::new; { [].len()  ].len() as isize,\n+        //~^ ERROR mismatched closing delimiter: `]`\n+        //~| ERROR mismatched closing delimiter: `]`\n+        //~| ERROR mismatched closing delimiter: `]`\n+        //~| ERROR mismatched closing delimiter: `]`\n+        //~| ERROR type annotations needed\n+    }\n+}\n+\n+mod c {\n+    enum Bug {\n+        V = [Vec::new; { [0].len() ].len() as isize,\n+        //~^ ERROR mismatched closing delimiter: `]`\n+        //~| ERROR mismatched closing delimiter: `]`\n+        //~| ERROR mismatched closing delimiter: `]`\n+        //~| ERROR mismatched closing delimiter: `]`\n+        //~| ERROR type annotations needed\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "f20ec75535354aec7a98c0ab439217eb64458cc7", "filename": "src/test/ui/parser/issue-67377-invalid-syntax-in-enum-discriminant.stderr", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/03707b56717ab6b105cba5627985689c5a3debe5/src%2Ftest%2Fui%2Fparser%2Fissue-67377-invalid-syntax-in-enum-discriminant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03707b56717ab6b105cba5627985689c5a3debe5/src%2Ftest%2Fui%2Fparser%2Fissue-67377-invalid-syntax-in-enum-discriminant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-67377-invalid-syntax-in-enum-discriminant.stderr?ref=03707b56717ab6b105cba5627985689c5a3debe5", "patch": "@@ -0,0 +1,123 @@\n+error: mismatched closing delimiter: `]`\n+  --> $DIR/issue-67377-invalid-syntax-in-enum-discriminant.rs:5:42\n+   |\n+LL |         V = [PhantomData; { [ () ].len() ].len() as isize,\n+   |             -             -              ^ mismatched closing delimiter\n+   |             |             |\n+   |             |             unclosed delimiter\n+   |             closing delimiter possibly meant for this\n+\n+error: mismatched closing delimiter: `]`\n+  --> $DIR/issue-67377-invalid-syntax-in-enum-discriminant.rs:15:36\n+   |\n+LL |         V = [Vec::new; { [].len()  ].len() as isize,\n+   |             -          -           ^ mismatched closing delimiter\n+   |             |          |\n+   |             |          unclosed delimiter\n+   |             closing delimiter possibly meant for this\n+\n+error: mismatched closing delimiter: `]`\n+  --> $DIR/issue-67377-invalid-syntax-in-enum-discriminant.rs:26:36\n+   |\n+LL |         V = [Vec::new; { [0].len() ].len() as isize,\n+   |             -          -           ^ mismatched closing delimiter\n+   |             |          |\n+   |             |          unclosed delimiter\n+   |             closing delimiter possibly meant for this\n+\n+error: mismatched closing delimiter: `]`\n+  --> $DIR/issue-67377-invalid-syntax-in-enum-discriminant.rs:5:42\n+   |\n+LL |         V = [PhantomData; { [ () ].len() ].len() as isize,\n+   |             -             -              ^ mismatched closing delimiter\n+   |             |             |\n+   |             |             unclosed delimiter\n+   |             closing delimiter possibly meant for this\n+\n+error: mismatched closing delimiter: `]`\n+  --> $DIR/issue-67377-invalid-syntax-in-enum-discriminant.rs:15:36\n+   |\n+LL |         V = [Vec::new; { [].len()  ].len() as isize,\n+   |             -          -           ^ mismatched closing delimiter\n+   |             |          |\n+   |             |          unclosed delimiter\n+   |             closing delimiter possibly meant for this\n+\n+error: mismatched closing delimiter: `]`\n+  --> $DIR/issue-67377-invalid-syntax-in-enum-discriminant.rs:26:36\n+   |\n+LL |         V = [Vec::new; { [0].len() ].len() as isize,\n+   |             -          -           ^ mismatched closing delimiter\n+   |             |          |\n+   |             |          unclosed delimiter\n+   |             closing delimiter possibly meant for this\n+\n+error: mismatched closing delimiter: `]`\n+  --> $DIR/issue-67377-invalid-syntax-in-enum-discriminant.rs:5:42\n+   |\n+LL |         V = [PhantomData; { [ () ].len() ].len() as isize,\n+   |             -             -              ^ mismatched closing delimiter\n+   |             |             |\n+   |             |             unclosed delimiter\n+   |             closing delimiter possibly meant for this\n+\n+error: mismatched closing delimiter: `]`\n+  --> $DIR/issue-67377-invalid-syntax-in-enum-discriminant.rs:15:36\n+   |\n+LL |         V = [Vec::new; { [].len()  ].len() as isize,\n+   |             -          -           ^ mismatched closing delimiter\n+   |             |          |\n+   |             |          unclosed delimiter\n+   |             closing delimiter possibly meant for this\n+\n+error: mismatched closing delimiter: `]`\n+  --> $DIR/issue-67377-invalid-syntax-in-enum-discriminant.rs:26:36\n+   |\n+LL |         V = [Vec::new; { [0].len() ].len() as isize,\n+   |             -          -           ^ mismatched closing delimiter\n+   |             |          |\n+   |             |          unclosed delimiter\n+   |             closing delimiter possibly meant for this\n+\n+error: mismatched closing delimiter: `]`\n+  --> $DIR/issue-67377-invalid-syntax-in-enum-discriminant.rs:5:42\n+   |\n+LL |         V = [PhantomData; { [ () ].len() ].len() as isize,\n+   |             -             -              ^ mismatched closing delimiter\n+   |             |             |\n+   |             |             unclosed delimiter\n+   |             closing delimiter possibly meant for this\n+\n+error: mismatched closing delimiter: `]`\n+  --> $DIR/issue-67377-invalid-syntax-in-enum-discriminant.rs:15:36\n+   |\n+LL |         V = [Vec::new; { [].len()  ].len() as isize,\n+   |             -          -           ^ mismatched closing delimiter\n+   |             |          |\n+   |             |          unclosed delimiter\n+   |             closing delimiter possibly meant for this\n+\n+error: mismatched closing delimiter: `]`\n+  --> $DIR/issue-67377-invalid-syntax-in-enum-discriminant.rs:26:36\n+   |\n+LL |         V = [Vec::new; { [0].len() ].len() as isize,\n+   |             -          -           ^ mismatched closing delimiter\n+   |             |          |\n+   |             |          unclosed delimiter\n+   |             closing delimiter possibly meant for this\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-67377-invalid-syntax-in-enum-discriminant.rs:15:29\n+   |\n+LL |         V = [Vec::new; { [].len()  ].len() as isize,\n+   |                             ^^^ cannot infer type for type parameter `T`\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-67377-invalid-syntax-in-enum-discriminant.rs:26:14\n+   |\n+LL |         V = [Vec::new; { [0].len() ].len() as isize,\n+   |              ^^^^^^^^ cannot infer type for type parameter `T`\n+\n+error: aborting due to 14 previous errors\n+\n+For more information about this error, try `rustc --explain E0282`."}]}