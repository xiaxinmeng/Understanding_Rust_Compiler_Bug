{"sha": "41e64b6c5c8d3afabe8f06e28ba0e0f247933391", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxZTY0YjZjNWM4ZDNhZmFiZThmMDZlMjhiYTBlMGYyNDc5MzMzOTE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-30T06:51:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-30T06:51:37Z"}, "message": "Rollup merge of #59455 - estebank:borrow-sugg-shorthand-field, r=davidtwco\n\nAccount for short-hand field syntax when suggesting borrow\n\nFix #52965.", "tree": {"sha": "045d0645a1b3afe1ca0e470e45f1425428f398d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/045d0645a1b3afe1ca0e470e45f1425428f398d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41e64b6c5c8d3afabe8f06e28ba0e0f247933391", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcnxH5CRBK7hj4Ov3rIwAAdHIIAE4jl2T1ccGNlnjsCse+E3OC\n6VtHnyh1J5yblnwNFmCX3Vl3FFkqOpe5TJMHqRKE2ksdOmnfYT+XiUsHRUdlkuZu\nceLPkT1k/NCgFBSxzASK2jK6id7GgOy6FL6U3zrx0xUiG8X45dwXdBFCwVdZBmd0\ngQT42wtWMSYh41MMw2Pr3E3AmwpHLw0PfYcbawoQUUsmVOcSMExN3PIklCRtsyi2\n6mpIIdDLd4LK82lzMRsUhHpkff4n13NnHemUNKxxKER2c4D+6NDEQdmZAPXTZp5o\n4mBuA6oIpPmw6JKvU0iaPRxq5nr/o9JiXvsTtyTkJ3HNJH2FdMofECccn19q7CI=\n=u3S1\n-----END PGP SIGNATURE-----\n", "payload": "tree 045d0645a1b3afe1ca0e470e45f1425428f398d7\nparent c28704c2a89219dd84cefa042d4e809cafee8402\nparent ddfa47f4b4926d411d52afa0e29dead708c2a9d0\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1553928697 +0100\ncommitter GitHub <noreply@github.com> 1553928697 +0100\n\nRollup merge of #59455 - estebank:borrow-sugg-shorthand-field, r=davidtwco\n\nAccount for short-hand field syntax when suggesting borrow\n\nFix #52965.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41e64b6c5c8d3afabe8f06e28ba0e0f247933391", "html_url": "https://github.com/rust-lang/rust/commit/41e64b6c5c8d3afabe8f06e28ba0e0f247933391", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41e64b6c5c8d3afabe8f06e28ba0e0f247933391/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c28704c2a89219dd84cefa042d4e809cafee8402", "url": "https://api.github.com/repos/rust-lang/rust/commits/c28704c2a89219dd84cefa042d4e809cafee8402", "html_url": "https://github.com/rust-lang/rust/commit/c28704c2a89219dd84cefa042d4e809cafee8402"}, {"sha": "ddfa47f4b4926d411d52afa0e29dead708c2a9d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddfa47f4b4926d411d52afa0e29dead708c2a9d0", "html_url": "https://github.com/rust-lang/rust/commit/ddfa47f4b4926d411d52afa0e29dead708c2a9d0"}], "stats": {"total": 145, "additions": 125, "deletions": 20}, "files": [{"sha": "8739147c621e6319d047cd4e5a1709f41f1757ea", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 55, "deletions": 16, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/41e64b6c5c8d3afabe8f06e28ba0e0f247933391/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41e64b6c5c8d3afabe8f06e28ba0e0f247933391/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=41e64b6c5c8d3afabe8f06e28ba0e0f247933391", "patch": "@@ -270,6 +270,26 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         None\n     }\n \n+    fn is_hir_id_from_struct_pattern_shorthand_field(&self, hir_id: hir::HirId, sp: Span) -> bool {\n+        let cm = self.sess().source_map();\n+        let parent_id = self.tcx.hir().get_parent_node_by_hir_id(hir_id);\n+        if let Some(parent) = self.tcx.hir().find_by_hir_id(parent_id) {\n+            // Account for fields\n+            if let Node::Expr(hir::Expr {\n+                node: hir::ExprKind::Struct(_, fields, ..), ..\n+            }) = parent {\n+                if let Ok(src) = cm.span_to_snippet(sp) {\n+                    for field in fields {\n+                        if field.ident.as_str() == src.as_str() && field.is_shorthand {\n+                            return true;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        false\n+    }\n+\n     /// This function is used to determine potential \"simple\" improvements or users' errors and\n     /// provide them useful help. For example:\n     ///\n@@ -299,6 +319,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             return None;\n         }\n \n+        let is_struct_pat_shorthand_field = self.is_hir_id_from_struct_pattern_shorthand_field(\n+            expr.hir_id,\n+            sp,\n+        );\n+\n         match (&expected.sty, &checked_ty.sty) {\n             (&ty::Ref(_, exp, _), &ty::Ref(_, check, _)) => match (&exp.sty, &check.sty) {\n                 (&ty::Str, &ty::Array(arr, _)) |\n@@ -337,12 +362,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // bar(&x); // error, expected &mut\n                 // ```\n                 let ref_ty = match mutability {\n-                    hir::Mutability::MutMutable => self.tcx.mk_mut_ref(\n-                                                       self.tcx.mk_region(ty::ReStatic),\n-                                                       checked_ty),\n-                    hir::Mutability::MutImmutable => self.tcx.mk_imm_ref(\n-                                                       self.tcx.mk_region(ty::ReStatic),\n-                                                       checked_ty),\n+                    hir::Mutability::MutMutable => {\n+                        self.tcx.mk_mut_ref(self.tcx.mk_region(ty::ReStatic), checked_ty)\n+                    }\n+                    hir::Mutability::MutImmutable => {\n+                        self.tcx.mk_imm_ref(self.tcx.mk_region(ty::ReStatic), checked_ty)\n+                    }\n                 };\n                 if self.can_coerce(ref_ty, expected) {\n                     if let Ok(src) = cm.span_to_snippet(sp) {\n@@ -363,14 +388,22 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         if let Some(sugg) = self.can_use_as_ref(expr) {\n                             return Some(sugg);\n                         }\n+                        let field_name = if is_struct_pat_shorthand_field {\n+                            format!(\"{}: \", sugg_expr)\n+                        } else {\n+                            String::new()\n+                        };\n                         return Some(match mutability {\n-                            hir::Mutability::MutMutable => {\n-                                (sp, \"consider mutably borrowing here\", format!(\"&mut {}\",\n-                                                                                sugg_expr))\n-                            }\n-                            hir::Mutability::MutImmutable => {\n-                                (sp, \"consider borrowing here\", format!(\"&{}\", sugg_expr))\n-                            }\n+                            hir::Mutability::MutMutable => (\n+                                sp,\n+                                \"consider mutably borrowing here\",\n+                                format!(\"{}&mut {}\", field_name, sugg_expr),\n+                            ),\n+                            hir::Mutability::MutImmutable => (\n+                                sp,\n+                                \"consider borrowing here\",\n+                                format!(\"{}&{}\", field_name, sugg_expr),\n+                            ),\n                         });\n                     }\n                 }\n@@ -411,12 +444,18 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                                                       checked,\n                                                                       sp) {\n                                 // do not suggest if the span comes from a macro (#52783)\n-                                if let (Ok(code),\n-                                        true) = (cm.span_to_snippet(sp), sp == expr.span) {\n+                                if let (Ok(code), true) = (\n+                                    cm.span_to_snippet(sp),\n+                                    sp == expr.span,\n+                                ) {\n                                     return Some((\n                                         sp,\n                                         \"consider dereferencing the borrow\",\n-                                        format!(\"*{}\", code),\n+                                        if is_struct_pat_shorthand_field {\n+                                            format!(\"{}: *{}\", code, code)\n+                                        } else {\n+                                            format!(\"*{}\", code)\n+                                        },\n                                     ));\n                                 }\n                             }"}, {"sha": "580410aecf4f8b0180cd796ac14a4c43db952926", "filename": "src/test/ui/deref-suggestion.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/41e64b6c5c8d3afabe8f06e28ba0e0f247933391/src%2Ftest%2Fui%2Fderef-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41e64b6c5c8d3afabe8f06e28ba0e0f247933391/src%2Ftest%2Fui%2Fderef-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-suggestion.rs?ref=41e64b6c5c8d3afabe8f06e28ba0e0f247933391", "patch": "@@ -15,6 +15,14 @@ fn foo4(u: &u32) {\n     //~^ ERROR mismatched types\n }\n \n+struct S<'a> {\n+    u: &'a u32,\n+}\n+\n+struct R {\n+    i: u32,\n+}\n+\n fn main() {\n     let s = String::new();\n     let r_s = &s;\n@@ -27,4 +35,14 @@ fn main() {\n     foo4(&0);\n     assert_eq!(3i32, &3i32);\n     //~^ ERROR mismatched types\n+    let u = 3;\n+    let s = S { u };\n+    //~^ ERROR mismatched types\n+    let s = S { u: u };\n+    //~^ ERROR mismatched types\n+    let i = &4;\n+    let r = R { i };\n+    //~^ ERROR mismatched types\n+    let r = R { i: i };\n+    //~^ ERROR mismatched types\n }"}, {"sha": "9c49f541c9309b0c8ed4364cde7fd672b3a8e426", "filename": "src/test/ui/deref-suggestion.stderr", "status": "modified", "additions": 52, "deletions": 4, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/41e64b6c5c8d3afabe8f06e28ba0e0f247933391/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41e64b6c5c8d3afabe8f06e28ba0e0f247933391/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-suggestion.stderr?ref=41e64b6c5c8d3afabe8f06e28ba0e0f247933391", "patch": "@@ -23,7 +23,7 @@ LL |     foo3(u);\n               found type `&u32`\n \n error[E0308]: mismatched types\n-  --> $DIR/deref-suggestion.rs:22:9\n+  --> $DIR/deref-suggestion.rs:30:9\n    |\n LL |     foo(&\"aaa\".to_owned());\n    |         ^^^^^^^^^^^^^^^^^\n@@ -35,7 +35,7 @@ LL |     foo(&\"aaa\".to_owned());\n               found type `&std::string::String`\n \n error[E0308]: mismatched types\n-  --> $DIR/deref-suggestion.rs:24:9\n+  --> $DIR/deref-suggestion.rs:32:9\n    |\n LL |     foo(&mut \"aaa\".to_owned());\n    |         ^^^^^^^^^^^^^^^^^^^^^\n@@ -59,7 +59,7 @@ LL |     foo3(borrow!(0));\n               found type `&{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/deref-suggestion.rs:28:5\n+  --> $DIR/deref-suggestion.rs:36:5\n    |\n LL |     assert_eq!(3i32, &3i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ expected i32, found &i32\n@@ -68,6 +68,54 @@ LL |     assert_eq!(3i32, &3i32);\n               found type `&i32`\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: aborting due to 6 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/deref-suggestion.rs:39:17\n+   |\n+LL |     let s = S { u };\n+   |                 ^\n+   |                 |\n+   |                 expected &u32, found integer\n+   |                 help: consider borrowing here: `u: &u`\n+   |\n+   = note: expected type `&u32`\n+              found type `{integer}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/deref-suggestion.rs:41:20\n+   |\n+LL |     let s = S { u: u };\n+   |                    ^\n+   |                    |\n+   |                    expected &u32, found integer\n+   |                    help: consider borrowing here: `&u`\n+   |\n+   = note: expected type `&u32`\n+              found type `{integer}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/deref-suggestion.rs:44:17\n+   |\n+LL |     let r = R { i };\n+   |                 ^\n+   |                 |\n+   |                 expected u32, found &{integer}\n+   |                 help: consider dereferencing the borrow: `i: *i`\n+   |\n+   = note: expected type `u32`\n+              found type `&{integer}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/deref-suggestion.rs:46:20\n+   |\n+LL |     let r = R { i: i };\n+   |                    ^\n+   |                    |\n+   |                    expected u32, found &{integer}\n+   |                    help: consider dereferencing the borrow: `*i`\n+   |\n+   = note: expected type `u32`\n+              found type `&{integer}`\n+\n+error: aborting due to 10 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}