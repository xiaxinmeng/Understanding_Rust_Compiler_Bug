{"sha": "ee411c2a74c9d9876c1ac5e03a300456e3caa6bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlNDExYzJhNzRjOWQ5ODc2YzFhYzVlMDNhMzAwNDU2ZTNjYWE2YmI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-24T09:24:41Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-24T09:24:41Z"}, "message": "beef up catch_panic test", "tree": {"sha": "7b7e0b46fd2bfc3396dc1a6c526893d2785b4759", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b7e0b46fd2bfc3396dc1a6c526893d2785b4759"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee411c2a74c9d9876c1ac5e03a300456e3caa6bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee411c2a74c9d9876c1ac5e03a300456e3caa6bb", "html_url": "https://github.com/rust-lang/rust/commit/ee411c2a74c9d9876c1ac5e03a300456e3caa6bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee411c2a74c9d9876c1ac5e03a300456e3caa6bb/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1541fe80e1f5d0d83a94d2bb39d13cb641b985c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1541fe80e1f5d0d83a94d2bb39d13cb641b985c7", "html_url": "https://github.com/rust-lang/rust/commit/1541fe80e1f5d0d83a94d2bb39d13cb641b985c7"}], "stats": {"total": 85, "additions": 54, "deletions": 31}, "files": [{"sha": "4d1f9a850489302431275d144d6fba8eebce870c", "filename": "tests/run-pass/catch_panic.rs", "status": "modified", "additions": 47, "deletions": 20, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/ee411c2a74c9d9876c1ac5e03a300456e3caa6bb/tests%2Frun-pass%2Fcatch_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee411c2a74c9d9876c1ac5e03a300456e3caa6bb/tests%2Frun-pass%2Fcatch_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fcatch_panic.rs?ref=ee411c2a74c9d9876c1ac5e03a300456e3caa6bb", "patch": "@@ -1,5 +1,5 @@\n // ignore-windows: Unwind panicking does not currently work on Windows\n-use std::panic::catch_unwind;\n+use std::panic::{catch_unwind, AssertUnwindSafe};\n use std::cell::Cell;\n \n thread_local! {\n@@ -18,7 +18,7 @@ impl Drop for DropTester {\n     }\n }\n \n-fn do_panic_counter() {\n+fn do_panic_counter(do_panic: impl FnOnce(usize) -> !) {\n     // If this gets leaked, it will be easy to spot\n     // in Miri's leak report\n     let _string = \"LEAKED FROM do_panic_counter\".to_string();\n@@ -28,35 +28,62 @@ fn do_panic_counter() {\n \n     // Check for bugs in Miri's panic implementation.\n     // If do_panic_counter() somehow gets called more than once,\n-    // we'll generate a different panic message\n+    // we'll generate a different panic message and stderr will differ.\n     let old_val = MY_COUNTER.with(|c| {\n         let val = c.get();\n         c.set(val + 1);\n         val\n     });\n-    panic!(format!(\"Hello from panic: {:?}\", old_val));\n+    do_panic(old_val);\n }\n \n fn main() {\n-    std::panic::set_hook(Box::new(|_panic_info| {\n+    let prev = std::panic::take_hook();\n+    std::panic::set_hook(Box::new(move |panic_info| {\n         HOOK_CALLED.with(|h| h.set(true));\n+        prev(panic_info)\n     }));\n-    let res = catch_unwind(|| {\n+\n+    test(|_old_val| panic!(\"Hello from panic: std\"));\n+    test(|old_val| panic!(format!(\"Hello from panic: {:?}\", old_val)));\n+    test(|old_val| panic!(\"Hello from panic: {:?}\", old_val));\n+    // FIXME https://github.com/rust-lang/miri/issues/1071\n+    //test(|_old_val| core::panic!(\"Hello from panic: core\"));\n+    //test(|old_val| core::panic!(&format!(\"Hello from panic: {:?}\", old_val)));\n+    //test(|old_val| core::panic!(\"Hello from panic: {:?}\", old_val));\n+\n+    // Cleanup: reset to default hook.\n+    drop(std::panic::take_hook());\n+\n+    eprintln!(\"Success!\"); // Make sure we get this in stderr\n+}\n+\n+fn test(do_panic: impl FnOnce(usize) -> !) {\n+    // Reset test flags.\n+    DROPPED.with(|c| c.set(false));\n+    HOOK_CALLED.with(|c| c.set(false));\n+\n+    // Cause and catch a panic.\n+    let res = catch_unwind(AssertUnwindSafe(|| {\n         let _string = \"LEAKED FROM CLOSURE\".to_string();\n-        do_panic_counter()\n-    });\n-    let expected: Box<String> = Box::new(\"Hello from panic: 0\".to_string());\n-    let actual = res.expect_err(\"do_panic() did not panic!\")\n-        .downcast::<String>().expect(\"Failed to cast to string!\");\n-        \n-    assert_eq!(expected, actual);\n-    DROPPED.with(|c| {\n-        // This should have been set to 'true' by DropTester\n-        assert!(c.get());\n-    });\n+        do_panic_counter(do_panic)\n+    })).expect_err(\"do_panic() did not panic!\");\n \n-    HOOK_CALLED.with(|h| {\n-        assert!(h.get());\n-    });\n+    // See if we can extract panic message.\n+    match res.downcast::<String>() {\n+        Ok(s) => {\n+            eprintln!(\"Caught panic message (String): {}\", s);\n+        }\n+        Err(res) =>\n+            if let Ok(s) = res.downcast::<&str>() {\n+                eprintln!(\"Caught panic message (&str): {}\", s);\n+            } else {\n+                eprintln!(\"Failed get caught panic message.\");\n+            }\n+    }\n+\n+    // Test flags.\n+    assert!(DROPPED.with(|c| c.get()));\n+    assert!(HOOK_CALLED.with(|c| c.get()));\n }\n "}, {"sha": "f6e5456559076577ac82d9578ea7eabeca3e22f1", "filename": "tests/run-pass/catch_panic.stderr", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ee411c2a74c9d9876c1ac5e03a300456e3caa6bb/tests%2Frun-pass%2Fcatch_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee411c2a74c9d9876c1ac5e03a300456e3caa6bb/tests%2Frun-pass%2Fcatch_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fcatch_panic.stderr?ref=ee411c2a74c9d9876c1ac5e03a300456e3caa6bb", "patch": "@@ -0,0 +1,7 @@\n+thread 'main' panicked at 'Hello from panic: std', $DIR/catch_panic.rs:47:21\n+Caught panic message (&str): Hello from panic: std\n+thread 'main' panicked at 'Hello from panic: 1', $DIR/catch_panic.rs:48:20\n+Caught panic message (String): Hello from panic: 1\n+thread 'main' panicked at 'Hello from panic: 2', $DIR/catch_panic.rs:49:20\n+Caught panic message (String): Hello from panic: 2\n+Success!"}, {"sha": "261db018d6da065c25b024adb9d8dfcb37b99c1a", "filename": "tests/run-pass/panic1.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1541fe80e1f5d0d83a94d2bb39d13cb641b985c7/tests%2Frun-pass%2Fpanic1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1541fe80e1f5d0d83a94d2bb39d13cb641b985c7/tests%2Frun-pass%2Fpanic1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic1.rs?ref=1541fe80e1f5d0d83a94d2bb39d13cb641b985c7", "patch": "@@ -1,4 +0,0 @@\n-// ignore-windows: Unwind panicking does not currently work on Windows\n-fn main() {\n-    panic!(\"Miri panic!\");\n-}"}, {"sha": "b1607dd864fb856d40d89a1d833f335c54e3d3c3", "filename": "tests/run-pass/panic1.stderr", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1541fe80e1f5d0d83a94d2bb39d13cb641b985c7/tests%2Frun-pass%2Fpanic1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1541fe80e1f5d0d83a94d2bb39d13cb641b985c7/tests%2Frun-pass%2Fpanic1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic1.stderr?ref=1541fe80e1f5d0d83a94d2bb39d13cb641b985c7", "patch": "@@ -1 +0,0 @@\n-thread 'main' panicked at 'Miri panic!', $DIR/panic1.rs:3:5"}, {"sha": "deaf606d9a2e0d04343e4219dbf845dc1a568475", "filename": "tests/run-pass/panic2.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1541fe80e1f5d0d83a94d2bb39d13cb641b985c7/tests%2Frun-pass%2Fpanic2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1541fe80e1f5d0d83a94d2bb39d13cb641b985c7/tests%2Frun-pass%2Fpanic2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic2.rs?ref=1541fe80e1f5d0d83a94d2bb39d13cb641b985c7", "patch": "@@ -1,5 +0,0 @@\n-// ignore-windows: Unwind panicking does not currently work on Windows\n-fn main() {\n-    let val = \"Value\".to_string();\n-    panic!(\"Miri panic with value: {}\", val);\n-}"}, {"sha": "bc5df83ec0f076cee623baa7a625253641ea3206", "filename": "tests/run-pass/panic2.stderr", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1541fe80e1f5d0d83a94d2bb39d13cb641b985c7/tests%2Frun-pass%2Fpanic2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1541fe80e1f5d0d83a94d2bb39d13cb641b985c7/tests%2Frun-pass%2Fpanic2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic2.stderr?ref=1541fe80e1f5d0d83a94d2bb39d13cb641b985c7", "patch": "@@ -1 +0,0 @@\n-thread 'main' panicked at 'Miri panic with value: Value', $DIR/panic2.rs:4:5"}]}