{"sha": "7230a15c32d01e1653d98c39ddd79097a59b550c", "node_id": "C_kwDOAAsO6NoAKDcyMzBhMTVjMzJkMDFlMTY1M2Q5OGMzOWRkZDc5MDk3YTU5YjU1MGM", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-05-28T21:22:07Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-05-28T22:41:14Z"}, "message": "Use Box::new() instead of box syntax in alloc tests", "tree": {"sha": "baf025e66e31151b78a54a3c516a630348efa5de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/baf025e66e31151b78a54a3c516a630348efa5de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7230a15c32d01e1653d98c39ddd79097a59b550c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7230a15c32d01e1653d98c39ddd79097a59b550c", "html_url": "https://github.com/rust-lang/rust/commit/7230a15c32d01e1653d98c39ddd79097a59b550c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7230a15c32d01e1653d98c39ddd79097a59b550c/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68314177e70017c08f6cdf295631bb508f9f85bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/68314177e70017c08f6cdf295631bb508f9f85bc", "html_url": "https://github.com/rust-lang/rust/commit/68314177e70017c08f6cdf295631bb508f9f85bc"}], "stats": {"total": 101, "additions": 51, "deletions": 50}, "files": [{"sha": "7d560964d85be7108d99a51e50a3a180ae684858", "filename": "library/alloc/src/alloc/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7230a15c32d01e1653d98c39ddd79097a59b550c/library%2Falloc%2Fsrc%2Falloc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7230a15c32d01e1653d98c39ddd79097a59b550c/library%2Falloc%2Fsrc%2Falloc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc%2Ftests.rs?ref=7230a15c32d01e1653d98c39ddd79097a59b550c", "patch": "@@ -25,6 +25,6 @@ fn allocate_zeroed() {\n #[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n fn alloc_owned_small(b: &mut Bencher) {\n     b.iter(|| {\n-        let _: Box<_> = box 10;\n+        let _: Box<_> = Box::new(10);\n     })\n }"}, {"sha": "5a05215aeeddfcd6b0e2f34c4c95f5a9b3b0714c", "filename": "library/alloc/src/collections/binary_heap/tests.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7230a15c32d01e1653d98c39ddd79097a59b550c/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7230a15c32d01e1653d98c39ddd79097a59b550c/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Ftests.rs?ref=7230a15c32d01e1653d98c39ddd79097a59b550c", "patch": "@@ -183,22 +183,22 @@ fn test_push() {\n \n #[test]\n fn test_push_unique() {\n-    let mut heap = BinaryHeap::<Box<_>>::from(vec![box 2, box 4, box 9]);\n+    let mut heap = BinaryHeap::<Box<_>>::from(vec![Box::new(2), Box::new(4), Box::new(9)]);\n     assert_eq!(heap.len(), 3);\n     assert!(**heap.peek().unwrap() == 9);\n-    heap.push(box 11);\n+    heap.push(Box::new(11));\n     assert_eq!(heap.len(), 4);\n     assert!(**heap.peek().unwrap() == 11);\n-    heap.push(box 5);\n+    heap.push(Box::new(5));\n     assert_eq!(heap.len(), 5);\n     assert!(**heap.peek().unwrap() == 11);\n-    heap.push(box 27);\n+    heap.push(Box::new(27));\n     assert_eq!(heap.len(), 6);\n     assert!(**heap.peek().unwrap() == 27);\n-    heap.push(box 3);\n+    heap.push(Box::new(3));\n     assert_eq!(heap.len(), 7);\n     assert!(**heap.peek().unwrap() == 27);\n-    heap.push(box 103);\n+    heap.push(Box::new(103));\n     assert_eq!(heap.len(), 8);\n     assert!(**heap.peek().unwrap() == 103);\n }"}, {"sha": "e21c8aa3bd536d1fa4ecfda330f82df66f8985e1", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7230a15c32d01e1653d98c39ddd79097a59b550c/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7230a15c32d01e1653d98c39ddd79097a59b550c/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=7230a15c32d01e1653d98c39ddd79097a59b550c", "patch": "@@ -791,7 +791,7 @@ impl<T> LinkedList<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn push_front(&mut self, elt: T) {\n-        self.push_front_node(box Node::new(elt));\n+        self.push_front_node(Box::new(Node::new(elt)));\n     }\n \n     /// Removes the first element and returns it, or `None` if the list is\n@@ -834,7 +834,7 @@ impl<T> LinkedList<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn push_back(&mut self, elt: T) {\n-        self.push_back_node(box Node::new(elt));\n+        self.push_back_node(Box::new(Node::new(elt)));\n     }\n \n     /// Removes the last element from a list and returns it, or `None` if"}, {"sha": "f8fbfa1bfbc87bdc171dfc785415779dedb2809e", "filename": "library/alloc/src/collections/linked_list/tests.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7230a15c32d01e1653d98c39ddd79097a59b550c/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7230a15c32d01e1653d98c39ddd79097a59b550c/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list%2Ftests.rs?ref=7230a15c32d01e1653d98c39ddd79097a59b550c", "patch": "@@ -12,20 +12,20 @@ fn test_basic() {\n     assert_eq!(m.pop_front(), None);\n     assert_eq!(m.pop_back(), None);\n     assert_eq!(m.pop_front(), None);\n-    m.push_front(box 1);\n-    assert_eq!(m.pop_front(), Some(box 1));\n-    m.push_back(box 2);\n-    m.push_back(box 3);\n+    m.push_front(Box::new(1));\n+    assert_eq!(m.pop_front(), Some(Box::new(1)));\n+    m.push_back(Box::new(2));\n+    m.push_back(Box::new(3));\n     assert_eq!(m.len(), 2);\n-    assert_eq!(m.pop_front(), Some(box 2));\n-    assert_eq!(m.pop_front(), Some(box 3));\n+    assert_eq!(m.pop_front(), Some(Box::new(2)));\n+    assert_eq!(m.pop_front(), Some(Box::new(3)));\n     assert_eq!(m.len(), 0);\n     assert_eq!(m.pop_front(), None);\n-    m.push_back(box 1);\n-    m.push_back(box 3);\n-    m.push_back(box 5);\n-    m.push_back(box 7);\n-    assert_eq!(m.pop_front(), Some(box 1));\n+    m.push_back(Box::new(1));\n+    m.push_back(Box::new(3));\n+    m.push_back(Box::new(5));\n+    m.push_back(Box::new(7));\n+    assert_eq!(m.pop_front(), Some(Box::new(1)));\n \n     let mut n = LinkedList::new();\n     n.push_front(2);"}, {"sha": "2b3736019ba40ee05627208d74604a33228d46c8", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7230a15c32d01e1653d98c39ddd79097a59b550c/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7230a15c32d01e1653d98c39ddd79097a59b550c/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=7230a15c32d01e1653d98c39ddd79097a59b550c", "patch": "@@ -369,7 +369,8 @@ impl<T> Rc<T> {\n         // if the weak pointer is stored inside the strong one.\n         unsafe {\n             Self::from_inner(\n-                Box::leak(box RcBox { strong: Cell::new(1), weak: Cell::new(1), value }).into(),\n+                Box::leak(Box::new(RcBox { strong: Cell::new(1), weak: Cell::new(1), value }))\n+                    .into(),\n             )\n         }\n     }\n@@ -433,11 +434,11 @@ impl<T> Rc<T> {\n     {\n         // Construct the inner in the \"uninitialized\" state with a single\n         // weak reference.\n-        let uninit_ptr: NonNull<_> = Box::leak(box RcBox {\n+        let uninit_ptr: NonNull<_> = Box::leak(Box::new(RcBox {\n             strong: Cell::new(0),\n             weak: Cell::new(1),\n             value: mem::MaybeUninit::<T>::uninit(),\n-        })\n+        }))\n         .into();\n \n         let init_ptr: NonNull<RcBox<T>> = uninit_ptr.cast();"}, {"sha": "32433cfbdcff6f8ed173e9f81bc15e007fe0a8d7", "filename": "library/alloc/src/rc/tests.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7230a15c32d01e1653d98c39ddd79097a59b550c/library%2Falloc%2Fsrc%2Frc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7230a15c32d01e1653d98c39ddd79097a59b550c/library%2Falloc%2Fsrc%2Frc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc%2Ftests.rs?ref=7230a15c32d01e1653d98c39ddd79097a59b550c", "patch": "@@ -32,7 +32,7 @@ fn test_simple_clone() {\n \n #[test]\n fn test_destructor() {\n-    let x: Rc<Box<_>> = Rc::new(box 5);\n+    let x: Rc<Box<_>> = Rc::new(Box::new(5));\n     assert_eq!(**x, 5);\n }\n \n@@ -153,7 +153,7 @@ fn try_unwrap() {\n \n #[test]\n fn into_from_raw() {\n-    let x = Rc::new(box \"hello\");\n+    let x = Rc::new(Box::new(\"hello\"));\n     let y = x.clone();\n \n     let x_ptr = Rc::into_raw(x);\n@@ -192,7 +192,7 @@ fn test_into_from_raw_unsized() {\n \n #[test]\n fn into_from_weak_raw() {\n-    let x = Rc::new(box \"hello\");\n+    let x = Rc::new(Box::new(\"hello\"));\n     let y = Rc::downgrade(&x);\n \n     let y_ptr = Weak::into_raw(y);\n@@ -409,7 +409,7 @@ fn test_clone_from_slice_panic() {\n \n #[test]\n fn test_from_box() {\n-    let b: Box<u32> = box 123;\n+    let b: Box<u32> = Box::new(123);\n     let r: Rc<u32> = Rc::from(b);\n \n     assert_eq!(*r, 123);\n@@ -438,7 +438,7 @@ fn test_from_box_trait() {\n     use std::fmt::Display;\n     use std::string::ToString;\n \n-    let b: Box<dyn Display> = box 123;\n+    let b: Box<dyn Display> = Box::new(123);\n     let r: Rc<dyn Display> = Rc::from(b);\n \n     assert_eq!(r.to_string(), \"123\");\n@@ -448,7 +448,7 @@ fn test_from_box_trait() {\n fn test_from_box_trait_zero_sized() {\n     use std::fmt::Debug;\n \n-    let b: Box<dyn Debug> = box ();\n+    let b: Box<dyn Debug> = Box::new(());\n     let r: Rc<dyn Debug> = Rc::from(b);\n \n     assert_eq!(format!(\"{r:?}\"), \"()\");"}, {"sha": "d5ed3fd18c3b87f43b7191785e814e5a3abe509f", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7230a15c32d01e1653d98c39ddd79097a59b550c/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7230a15c32d01e1653d98c39ddd79097a59b550c/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=7230a15c32d01e1653d98c39ddd79097a59b550c", "patch": "@@ -343,11 +343,11 @@ impl<T> Arc<T> {\n     pub fn new(data: T) -> Arc<T> {\n         // Start the weak pointer count as 1 which is the weak pointer that's\n         // held by all the strong pointers (kinda), see std/rc.rs for more info\n-        let x: Box<_> = box ArcInner {\n+        let x: Box<_> = Box::new(ArcInner {\n             strong: atomic::AtomicUsize::new(1),\n             weak: atomic::AtomicUsize::new(1),\n             data,\n-        };\n+        });\n         unsafe { Self::from_inner(Box::leak(x).into()) }\n     }\n \n@@ -411,11 +411,11 @@ impl<T> Arc<T> {\n     {\n         // Construct the inner in the \"uninitialized\" state with a single\n         // weak reference.\n-        let uninit_ptr: NonNull<_> = Box::leak(box ArcInner {\n+        let uninit_ptr: NonNull<_> = Box::leak(Box::new(ArcInner {\n             strong: atomic::AtomicUsize::new(0),\n             weak: atomic::AtomicUsize::new(1),\n             data: mem::MaybeUninit::<T>::uninit(),\n-        })\n+        }))\n         .into();\n         let init_ptr: NonNull<ArcInner<T>> = uninit_ptr.cast();\n "}, {"sha": "202d0e7f02057df1162e867982c4d6d09409d393", "filename": "library/alloc/src/sync/tests.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7230a15c32d01e1653d98c39ddd79097a59b550c/library%2Falloc%2Fsrc%2Fsync%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7230a15c32d01e1653d98c39ddd79097a59b550c/library%2Falloc%2Fsrc%2Fsync%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync%2Ftests.rs?ref=7230a15c32d01e1653d98c39ddd79097a59b550c", "patch": "@@ -103,7 +103,7 @@ fn try_unwrap() {\n \n #[test]\n fn into_from_raw() {\n-    let x = Arc::new(box \"hello\");\n+    let x = Arc::new(Box::new(\"hello\"));\n     let y = x.clone();\n \n     let x_ptr = Arc::into_raw(x);\n@@ -142,7 +142,7 @@ fn test_into_from_raw_unsized() {\n \n #[test]\n fn into_from_weak_raw() {\n-    let x = Arc::new(box \"hello\");\n+    let x = Arc::new(Box::new(\"hello\"));\n     let y = Arc::downgrade(&x);\n \n     let y_ptr = Weak::into_raw(y);\n@@ -467,7 +467,7 @@ fn test_clone_from_slice_panic() {\n \n #[test]\n fn test_from_box() {\n-    let b: Box<u32> = box 123;\n+    let b: Box<u32> = Box::new(123);\n     let r: Arc<u32> = Arc::from(b);\n \n     assert_eq!(*r, 123);\n@@ -496,7 +496,7 @@ fn test_from_box_trait() {\n     use std::fmt::Display;\n     use std::string::ToString;\n \n-    let b: Box<dyn Display> = box 123;\n+    let b: Box<dyn Display> = Box::new(123);\n     let r: Arc<dyn Display> = Arc::from(b);\n \n     assert_eq!(r.to_string(), \"123\");\n@@ -506,7 +506,7 @@ fn test_from_box_trait() {\n fn test_from_box_trait_zero_sized() {\n     use std::fmt::Debug;\n \n-    let b: Box<dyn Debug> = box ();\n+    let b: Box<dyn Debug> = Box::new(());\n     let r: Arc<dyn Debug> = Arc::from(b);\n \n     assert_eq!(format!(\"{r:?}\"), \"()\");"}, {"sha": "21f894343be097394aee870a5b71f83fec2f64ab", "filename": "library/alloc/tests/slice.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7230a15c32d01e1653d98c39ddd79097a59b550c/library%2Falloc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7230a15c32d01e1653d98c39ddd79097a59b550c/library%2Falloc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fslice.rs?ref=7230a15c32d01e1653d98c39ddd79097a59b550c", "patch": "@@ -268,9 +268,9 @@ fn test_swap_remove_fail() {\n fn test_swap_remove_noncopyable() {\n     // Tests that we don't accidentally run destructors twice.\n     let mut v: Vec<Box<_>> = Vec::new();\n-    v.push(box 0);\n-    v.push(box 0);\n-    v.push(box 0);\n+    v.push(Box::new(0));\n+    v.push(Box::new(0));\n+    v.push(Box::new(0));\n     let mut _e = v.swap_remove(0);\n     assert_eq!(v.len(), 2);\n     _e = v.swap_remove(1);\n@@ -296,7 +296,7 @@ fn test_push() {\n \n #[test]\n fn test_truncate() {\n-    let mut v: Vec<Box<_>> = vec![box 6, box 5, box 4];\n+    let mut v: Vec<Box<_>> = vec![Box::new(6), Box::new(5), Box::new(4)];\n     v.truncate(1);\n     let v = v;\n     assert_eq!(v.len(), 1);\n@@ -306,7 +306,7 @@ fn test_truncate() {\n \n #[test]\n fn test_clear() {\n-    let mut v: Vec<Box<_>> = vec![box 6, box 5, box 4];\n+    let mut v: Vec<Box<_>> = vec![Box::new(6), Box::new(5), Box::new(4)];\n     v.clear();\n     assert_eq!(v.len(), 0);\n     // If the unsafe block didn't drop things properly, we blow up here.\n@@ -1516,14 +1516,14 @@ fn test_mut_last() {\n \n #[test]\n fn test_to_vec() {\n-    let xs: Box<_> = box [1, 2, 3];\n+    let xs: Box<_> = Box::new([1, 2, 3]);\n     let ys = xs.to_vec();\n     assert_eq!(ys, [1, 2, 3]);\n }\n \n #[test]\n fn test_in_place_iterator_specialization() {\n-    let src: Box<[usize]> = box [1, 2, 3];\n+    let src: Box<[usize]> = Box::new([1, 2, 3]);\n     let src_ptr = src.as_ptr();\n     let sink: Box<_> = src.into_vec().into_iter().map(std::convert::identity).collect();\n     let sink_ptr = sink.as_ptr();"}, {"sha": "cc768c73c0e0391abf597e8a6f1a0ae9a9147d9b", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7230a15c32d01e1653d98c39ddd79097a59b550c/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7230a15c32d01e1653d98c39ddd79097a59b550c/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=7230a15c32d01e1653d98c39ddd79097a59b550c", "patch": "@@ -266,8 +266,8 @@ fn test_clone() {\n #[test]\n fn test_clone_from() {\n     let mut v = vec![];\n-    let three: Vec<Box<_>> = vec![box 1, box 2, box 3];\n-    let two: Vec<Box<_>> = vec![box 4, box 5];\n+    let three: Vec<Box<_>> = vec![Box::new(1), Box::new(2), Box::new(3)];\n+    let two: Vec<Box<_>> = vec![Box::new(4), Box::new(5)];\n     // zero, long\n     v.clone_from(&three);\n     assert_eq!(v, three);\n@@ -407,11 +407,11 @@ fn test_dedup_by() {\n \n #[test]\n fn test_dedup_unique() {\n-    let mut v0: Vec<Box<_>> = vec![box 1, box 1, box 2, box 3];\n+    let mut v0: Vec<Box<_>> = vec![Box::new(1), Box::new(1), Box::new(2), Box::new(3)];\n     v0.dedup();\n-    let mut v1: Vec<Box<_>> = vec![box 1, box 2, box 2, box 3];\n+    let mut v1: Vec<Box<_>> = vec![Box::new(1), Box::new(2), Box::new(2), Box::new(3)];\n     v1.dedup();\n-    let mut v2: Vec<Box<_>> = vec![box 1, box 2, box 3, box 3];\n+    let mut v2: Vec<Box<_>> = vec![Box::new(1), Box::new(2), Box::new(3), Box::new(3)];\n     v2.dedup();\n     // If the boxed pointers were leaked or otherwise misused, valgrind\n     // and/or rt should raise errors."}]}