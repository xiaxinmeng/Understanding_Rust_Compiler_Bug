{"sha": "4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "node_id": "C_kwDOAAsO6NoAKDRmNmIyYTIwZmQwNDE3YzZjMWM2NDE2M2Q5Y2U3YTVjOTE1YWZkZTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-13T15:02:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-13T15:02:00Z"}, "message": "Auto merge of #12241 - jonas-schievink:does-not-float-my-boat, r=jonas-schievink\n\nfix: revert float parsing \"fix\" to avoid macro-related panics\n\nReverts https://github.com/rust-lang/rust-analyzer/pull/12149 and the follow-up fixes, while keeping their tests.\n\nhttps://github.com/rust-lang/rust-analyzer/pull/12149 has caused many unexpected panics related to macros, and the fixes for those are not straightforward and further complicate the MBE token conversion logic, which was already fairly hard to follow before these fixes.", "tree": {"sha": "5e61af322a4fde837f3cadd0c89ecd597c5795d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e61af322a4fde837f3cadd0c89ecd597c5795d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "html_url": "https://github.com/rust-lang/rust/commit/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f9ffb5e358bfd62ce84afcc89c5e1a5c13297f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f9ffb5e358bfd62ce84afcc89c5e1a5c13297f8", "html_url": "https://github.com/rust-lang/rust/commit/0f9ffb5e358bfd62ce84afcc89c5e1a5c13297f8"}, {"sha": "0831f3123bc0cf12d35c775a4072fb92d9b03549", "url": "https://api.github.com/repos/rust-lang/rust/commits/0831f3123bc0cf12d35c775a4072fb92d9b03549", "html_url": "https://github.com/rust-lang/rust/commit/0831f3123bc0cf12d35c775a4072fb92d9b03549"}], "stats": {"total": 758, "additions": 152, "deletions": 606}, "files": [{"sha": "e8303ec40f747aaf678a6b27097c6f1d299a45fc", "filename": "crates/hir-def/src/body/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -972,7 +972,7 @@ impl From<ast::LiteralKind> for Literal {\n                 }\n             }\n             LiteralKind::FloatNumber(lit) => {\n-                let ty = lit.suffix().and_then(|s| BuiltinFloat::from_suffix(&s));\n+                let ty = lit.suffix().and_then(BuiltinFloat::from_suffix);\n                 Literal::Float(Default::default(), ty)\n             }\n             LiteralKind::ByteString(bs) => {"}, {"sha": "befef6547cb60270f46dbaf1390ade5c25dae6ec", "filename": "crates/hir-def/src/macro_expansion_tests/mbe.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -48,6 +48,8 @@ struct#10 MyTraitMap2#32 {#13\n \n #[test]\n fn token_mapping_floats() {\n+    // Regression test for https://github.com/rust-lang/rust-analyzer/issues/12216\n+    // (and related issues)\n     check(\n         r#\"\n // +tokenids\n@@ -87,9 +89,9 @@ macro_rules! f {#0\n // }\n fn#19 main#20(#21)#21 {#22\n     1#23;#24\n-    1#26.0;\n-    let x#31 =#22 1;\n-}\n+    1.0#25;#26\n+    let#27 x#28 =#29 1#30;#31\n+}#22\n \n \n \"##]],"}, {"sha": "2de10ddbdf9bfb32fc5c52b8f8f616ce5dc63418", "filename": "crates/hir-def/src/macro_expansion_tests/mbe/meta_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmeta_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmeta_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmeta_syntax.rs?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -80,7 +80,7 @@ macro_rules! f3 { ($i:_) => () }\n \n #[test]\n fn test_rustc_issue_57597() {\n-    // <https://github.com/rust-lang/rust/blob/master/src/test/ui/macros/issue-57597.rs>\n+    // <https://github.com/rust-lang/rust/blob/master/src/test/ui/issues/issue-57597.rs>\n     check(\n         r#\"\n macro_rules! m0 { ($($($i:ident)?)+) => {}; }"}, {"sha": "0710b1ac3d6961c1fd8ec265ad24eea487974c80", "filename": "crates/hir-def/src/macro_expansion_tests/mbe/tt_conversion.rs", "status": "modified", "additions": 22, "deletions": 29, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -38,7 +38,6 @@ macro_rules! m {\n         let _ = 12E+99_f64;\n         let _ = \"rust1\";\n         let _ = -92;\n-        let _ = -1.3e4f32;\n     }\n }\n fn f() {\n@@ -53,7 +52,6 @@ macro_rules! m {\n         let _ = 12E+99_f64;\n         let _ = \"rust1\";\n         let _ = -92;\n-        let _ = -1.3e4f32;\n     }\n }\n fn f() {\n@@ -62,7 +60,6 @@ fn f() {\n     let _ = 12E+99_f64;\n     let _ = \"rust1\";\n     let _ = -92;\n-    let _ = -1.3e4f32;\n }\n \"#]],\n     );\n@@ -153,55 +150,51 @@ $ = ();\n }\n \n #[test]\n-fn float_literal_in_output() {\n+fn float_literal_in_tt() {\n     check(\n         r#\"\n macro_rules! constant {\n-    ($e:expr ;) => {$e};\n+    ($( $ret:expr; )*) => {};\n }\n-\n-const _: () = constant!(0.0;);\n-const _: () = constant!(0.;);\n-const _: () = constant!(0e0;);\n+macro_rules! float_const_impl {\n+    () => ( constant!(0.3; 3.3;); );\n+}\n+float_const_impl! {}\n \"#,\n         expect![[r#\"\n macro_rules! constant {\n-    ($e:expr ;) => {$e};\n+    ($( $ret:expr; )*) => {};\n }\n-\n-const _: () = 0.0;\n-const _: () = 0.;\n-const _: () = 0e0;\n+macro_rules! float_const_impl {\n+    () => ( constant!(0.3; 3.3;); );\n+}\n+constant!(0.3;\n+3.3;\n+);\n \"#]],\n     );\n }\n \n #[test]\n-fn float_literal_in_tt() {\n+fn float_literal_in_output() {\n     check(\n         r#\"\n macro_rules! constant {\n-    ($( $ret:expr; )*) => {};\n-}\n-\n-macro_rules! float_const_impl {\n-    () => ( constant!(0.3; 3.3;); );\n+    ($e:expr ;) => {$e};\n }\n \n-float_const_impl! {}\n+const _: () = constant!(0.0;);\n+const _: () = constant!(0.;);\n+const _: () = constant!(0e0;);\n \"#,\n         expect![[r#\"\n macro_rules! constant {\n-    ($( $ret:expr; )*) => {};\n-}\n-\n-macro_rules! float_const_impl {\n-    () => ( constant!(0.3; 3.3;); );\n+    ($e:expr ;) => {$e};\n }\n \n-constant!(0.3;\n-3.3;\n-);\n+const _: () = 0.0;\n+const _: () = 0.;\n+const _: () = 0e0;\n \"#]],\n     );\n }"}, {"sha": "72c44a0fbcb21e5b76cec7e4acd928c9000cf89f", "filename": "crates/hir-def/src/macro_expansion_tests/proc_macros.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fproc_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fproc_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fproc_macros.rs?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -104,8 +104,7 @@ macro_rules! id {\n         $($t)*\n     };\n }\n-\n-id! {\n+id /*+errors*/! {\n     #[proc_macros::identity]\n     impl Foo for WrapBj {\n         async fn foo(&self) {\n@@ -120,7 +119,7 @@ macro_rules! id {\n         $($t)*\n     };\n }\n-\n+/* parse error: expected SEMICOLON */\n #[proc_macros::identity] impl Foo for WrapBj {\n     async fn foo(&self ) {\n         self .0.id().await ;"}, {"sha": "aa09912f302dc0f712ff6bfb6b04ae486c204561", "filename": "crates/hir-expand/src/builtin_fn_macro.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -4,7 +4,10 @@ use base_db::{AnchoredPath, Edition, FileId};\n use cfg::CfgExpr;\n use either::Either;\n use mbe::{parse_exprs_with_sep, parse_to_token_tree};\n-use syntax::{ast, SmolStr};\n+use syntax::{\n+    ast::{self, AstToken},\n+    SmolStr,\n+};\n \n use crate::{db::AstDatabase, name, quote, ExpandError, ExpandResult, MacroCallId, MacroCallLoc};\n \n@@ -355,7 +358,14 @@ fn unreachable_expand(\n }\n \n fn unquote_str(lit: &tt::Literal) -> Option<String> {\n-    let token = ast::make::literal(&lit.to_string()).as_string()?;\n+    let lit = ast::make::tokens::literal(&lit.to_string());\n+    let token = ast::String::cast(lit)?;\n+    token.value().map(|it| it.into_owned())\n+}\n+\n+fn unquote_byte_string(lit: &tt::Literal) -> Option<Vec<u8>> {\n+    let lit = ast::make::tokens::literal(&lit.to_string());\n+    let token = ast::ByteString::cast(lit)?;\n     token.value().map(|it| it.into_owned())\n }\n \n@@ -432,16 +442,12 @@ fn concat_bytes_expand(\n     for (i, t) in tt.token_trees.iter().enumerate() {\n         match t {\n             tt::TokenTree::Leaf(tt::Leaf::Literal(lit)) => {\n-                let lit = ast::make::literal(&lit.to_string());\n-                match lit.kind() {\n-                    ast::LiteralKind::ByteString(s) => {\n-                        s.value()\n-                            .unwrap_or_default()\n-                            .into_iter()\n-                            .for_each(|x| bytes.push(x.to_string()));\n-                    }\n-                    ast::LiteralKind::Byte(_) => {\n-                        bytes.push(lit.to_string());\n+                let token = ast::make::tokens::literal(&lit.to_string());\n+                match token.kind() {\n+                    syntax::SyntaxKind::BYTE => bytes.push(token.text().to_string()),\n+                    syntax::SyntaxKind::BYTE_STRING => {\n+                        let components = unquote_byte_string(lit).unwrap_or_else(Vec::new);\n+                        components.into_iter().for_each(|x| bytes.push(x.to_string()));\n                     }\n                     _ => {\n                         err.get_or_insert(mbe::ExpandError::UnexpectedToken.into());\n@@ -475,10 +481,10 @@ fn concat_bytes_expand_subtree(\n     for (ti, tt) in tree.token_trees.iter().enumerate() {\n         match tt {\n             tt::TokenTree::Leaf(tt::Leaf::Literal(lit)) => {\n-                let lit = ast::make::literal(&lit.to_string());\n+                let lit = ast::make::tokens::literal(&lit.to_string());\n                 match lit.kind() {\n-                    ast::LiteralKind::IntNumber(_) | ast::LiteralKind::Byte(_) => {\n-                        bytes.push(lit.to_string());\n+                    syntax::SyntaxKind::BYTE | syntax::SyntaxKind::INT_NUMBER => {\n+                        bytes.push(lit.text().to_string())\n                     }\n                     _ => {\n                         return Err(mbe::ExpandError::UnexpectedToken.into());"}, {"sha": "d4d61c2167cdbff2ce18ff81f938431bd47a9a2c", "filename": "crates/hir-ty/src/tests/simple.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -2733,14 +2733,3 @@ fn f() {\n     \"#,\n     );\n }\n-\n-#[test]\n-fn nested_tuple_index() {\n-    check_no_mismatches(\n-        r#\"\n-fn main() {\n-    let fld: i32 = ((0,),).0.0;\n-}\n-\"#,\n-    );\n-}"}, {"sha": "9b5ececfd07b389feee57158bc43ca2d254df137", "filename": "crates/ide-completion/src/completions/dot.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -793,24 +793,4 @@ fn main() {\n \",\n         )\n     }\n-\n-    #[test]\n-    fn tuple_index_completion() {\n-        check(\n-            r#\"\n-struct I;\n-impl I {\n-    fn i_method(&self) {}\n-}\n-struct S((), I);\n-\n-fn f(s: S) {\n-    s.1.$0\n-}\n-\"#,\n-            expect![[r#\"\n-                me i_method() fn(&self)\n-            \"#]],\n-        );\n-    }\n }"}, {"sha": "28256bd7042029d5bc21fdb4af62fd5c1586ecff", "filename": "crates/ide-completion/src/completions/postfix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -5,7 +5,7 @@ mod format_like;\n use hir::{Documentation, HasAttrs};\n use ide_db::{imports::insert_use::ImportScope, ty_filter::TryEnum, SnippetCap};\n use syntax::{\n-    ast::{self, AstNode, LiteralKind},\n+    ast::{self, AstNode, AstToken},\n     SyntaxKind::{EXPR_STMT, STMT_LIST},\n     TextRange, TextSize,\n };\n@@ -194,7 +194,7 @@ pub(crate) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n     }\n \n     if let ast::Expr::Literal(literal) = dot_receiver.clone() {\n-        if let LiteralKind::String(literal_text) = literal.kind() {\n+        if let Some(literal_text) = ast::String::cast(literal.token()) {\n             add_format_like_completions(acc, ctx, &dot_receiver, cap, &literal_text);\n         }\n     }"}, {"sha": "fbf3278ad1f7c7b57cdf6ec7b009303f33c8e955", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -1062,7 +1062,7 @@ impl<'a> CompletionContext<'a> {\n                     let receiver_is_ambiguous_float_literal = match &receiver {\n                         Some(ast::Expr::Literal(l)) => matches! {\n                             l.kind(),\n-                            ast::LiteralKind::FloatNumber { .. } if l.syntax().last_token().map_or(false, |it| it.kind() == T![.])\n+                            ast::LiteralKind::FloatNumber { .. } if l.syntax().last_token().map_or(false, |it| it.text().ends_with('.'))\n                         },\n                         _ => false,\n                     };"}, {"sha": "e04fd5a7c7f26ae377ce87dbd97772f0ffe13013", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -30,15 +30,7 @@ pub(super) fn token(sema: &Semantics<RootDatabase>, token: SyntaxToken) -> Optio\n         INT_NUMBER if token.ancestors().nth(1).map(|it| it.kind()) == Some(FIELD_EXPR) => {\n             SymbolKind::Field.into()\n         }\n-        INT_NUMBER | FLOAT_NUMBER_PART | FLOAT_NUMBER_START_0 | FLOAT_NUMBER_START_1\n-        | FLOAT_NUMBER_START_2 => HlTag::NumericLiteral.into(),\n-        DOT if matches!(\n-            token.prev_token().map(|n| n.kind()),\n-            Some(FLOAT_NUMBER_START_1 | FLOAT_NUMBER_START_2)\n-        ) =>\n-        {\n-            HlTag::NumericLiteral.into()\n-        }\n+        INT_NUMBER | FLOAT_NUMBER => HlTag::NumericLiteral.into(),\n         BYTE => HlTag::ByteLiteral.into(),\n         CHAR => HlTag::CharLiteral.into(),\n         IDENT if token.parent().and_then(ast::TokenTree::cast).is_some() => {"}, {"sha": "60bc290121118ac2d2420e7d45030577ac46a046", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_strings.html", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -119,13 +119,13 @@\n     <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">-</span><span class=\"numeric_literal\">5</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">#</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">10</span><span class=\"variable\">x</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">27</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">.</span><span class=\"numeric_literal\">01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">.</span><span class=\"numeric_literal\">01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">.</span><span class=\"numeric_literal\">01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span>    <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">.</span><span class=\"numeric_literal\">01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span>   <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">.</span><span class=\"numeric_literal\">01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"variable\">number</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"variable\">prec</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> prec <span class=\"operator\">=</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> number <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">.</span><span class=\"numeric_literal\">01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 fractional digits\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">3</span><span class=\"comma\">,</span> name<span class=\"operator\">=</span><span class=\"numeric_literal\">1234</span><span class=\"numeric_literal\">.</span><span class=\"numeric_literal\">56</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span>    <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span>   <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"variable\">number</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"variable\">prec</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> prec <span class=\"operator\">=</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> number <span class=\"operator\">=</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 fractional digits\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">3</span><span class=\"comma\">,</span> name<span class=\"operator\">=</span><span class=\"numeric_literal\">1234.56</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 characters\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">3</span><span class=\"comma\">,</span> name<span class=\"operator\">=</span><span class=\"string_literal\">\"1234.56\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&gt;</span><span class=\"numeric_literal\">8</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 right-aligned characters\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">3</span><span class=\"comma\">,</span> name<span class=\"operator\">=</span><span class=\"string_literal\">\"1234.56\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello {{}}\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>"}, {"sha": "21a0aa4284a57df6964b27743819127aa62de79e", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 0, "deletions": 79, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -243,8 +243,6 @@ fn convert_tokens<C: TokenConvertor>(conv: &mut C) -> tt::Subtree {\n             let char = match token.to_char(conv) {\n                 Some(c) => c,\n                 None => {\n-                    // FIXME: this isn't really correct, `to_char` yields the *first* char of the token,\n-                    // and this is relevant when eg. creating 2 `tt::Punct` from a single `::` token\n                     panic!(\"Token from lexer must be single char: token = {:#?}\", token);\n                 }\n             };\n@@ -262,33 +260,6 @@ fn convert_tokens<C: TokenConvertor>(conv: &mut C) -> tt::Subtree {\n                 IDENT => make_leaf!(Ident),\n                 UNDERSCORE => make_leaf!(Ident),\n                 k if k.is_keyword() => make_leaf!(Ident),\n-                FLOAT_NUMBER_START_0 | FLOAT_NUMBER_START_1 | FLOAT_NUMBER_START_2 => {\n-                    // Reassemble a split-up float token.\n-                    let mut range = range;\n-                    let mut text = token.to_text(conv).to_string();\n-                    if kind == FLOAT_NUMBER_START_1 || kind == FLOAT_NUMBER_START_2 {\n-                        let (dot, dot_range) = conv.bump().unwrap();\n-                        assert_eq!(dot.kind(conv), DOT);\n-                        text += &*dot.to_text(conv);\n-                        range = TextRange::new(range.start(), dot_range.end());\n-\n-                        if kind == FLOAT_NUMBER_START_2 {\n-                            let (tail, tail_range) = conv.bump().unwrap();\n-                            assert_eq!(tail.kind(conv), FLOAT_NUMBER_PART);\n-                            text += &*tail.to_text(conv);\n-                            range = TextRange::new(range.start(), tail_range.end());\n-                        }\n-                    }\n-\n-                    result.push(\n-                        tt::Leaf::from(tt::Literal {\n-                            id: conv.id_alloc().alloc(range, synth_id),\n-                            text: text.into(),\n-                        })\n-                        .into(),\n-                    );\n-                    continue;\n-                }\n                 k if k.is_literal() => make_leaf!(Literal),\n                 LIFETIME_IDENT => {\n                     let char_unit = TextSize::of('\\'');\n@@ -742,7 +713,6 @@ struct TtTreeSink<'a> {\n     text_pos: TextSize,\n     inner: SyntaxTreeBuilder,\n     token_map: TokenMap,\n-    remaining_float_lit_text: String,\n }\n \n impl<'a> TtTreeSink<'a> {\n@@ -754,7 +724,6 @@ impl<'a> TtTreeSink<'a> {\n             text_pos: 0.into(),\n             inner: SyntaxTreeBuilder::default(),\n             token_map: TokenMap::default(),\n-            remaining_float_lit_text: String::new(),\n         }\n     }\n \n@@ -781,54 +750,6 @@ impl<'a> TtTreeSink<'a> {\n             n_tokens = 2;\n         }\n \n-        // We need to split a float `tt::Literal` into up to 3 tokens consumed by the parser.\n-        match self.cursor.token_tree() {\n-            Some(tt::buffer::TokenTreeRef::Subtree(sub, _)) if sub.delimiter.is_none() => {\n-                self.cursor = self.cursor.subtree().unwrap()\n-            }\n-            _ => {}\n-        }\n-        let literal = match self.cursor.token_tree() {\n-            Some(tt::buffer::TokenTreeRef::Leaf(tt::Leaf::Literal(lit), _)) => Some(lit),\n-            _ => None,\n-        };\n-        if matches!(\n-            kind,\n-            FLOAT_NUMBER_PART | FLOAT_NUMBER_START_0 | FLOAT_NUMBER_START_1 | FLOAT_NUMBER_START_2\n-        ) {\n-            if self.remaining_float_lit_text.is_empty() {\n-                always!(\n-                    literal.is_some(),\n-                    \"kind={:?}, cursor tt={:?}\",\n-                    kind,\n-                    self.cursor.token_tree()\n-                );\n-                let text = literal.map_or(String::new(), |lit| lit.to_string());\n-                self.cursor = self.cursor.bump();\n-                match text.split_once('.') {\n-                    Some((start, end)) => {\n-                        self.inner.token(kind, start);\n-                        self.remaining_float_lit_text = format!(\".{end}\");\n-                        return;\n-                    }\n-                    None => {\n-                        self.inner.token(kind, &text);\n-                        return;\n-                    }\n-                }\n-            } else {\n-                self.inner.token(kind, &self.remaining_float_lit_text);\n-                self.remaining_float_lit_text.clear();\n-                return;\n-            }\n-        }\n-        if kind == DOT && !self.remaining_float_lit_text.is_empty() {\n-            always!(self.remaining_float_lit_text.chars().next() == Some('.'));\n-            self.inner.token(kind, \".\");\n-            self.remaining_float_lit_text = self.remaining_float_lit_text[1..].to_string();\n-            return;\n-        }\n-\n         let mut last = self.cursor;\n         for _ in 0..n_tokens {\n             let tmp: u8;"}, {"sha": "6faa147218e1d14f96c2da53dc2d10216dd40839", "filename": "crates/mbe/src/to_parser_input.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fmbe%2Fsrc%2Fto_parser_input.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fmbe%2Fsrc%2Fto_parser_input.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fto_parser_input.rs?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -35,13 +35,15 @@ pub(crate) fn to_parser_input(buffer: &TokenBuffer) -> parser::Input {\n                         let is_negated = lit.text.starts_with('-');\n                         let inner_text = &lit.text[if is_negated { 1 } else { 0 }..];\n \n-                        let lexed_str = parser::LexedStr::new(inner_text);\n-                        if lexed_str.is_empty() {\n-                            panic!(\"failed to convert literal: {:?}\", lit);\n-                        }\n-                        for i in 0..lexed_str.len() {\n-                            res.push(lexed_str.kind(i));\n-                        }\n+                        let kind = parser::LexedStr::single_token(inner_text)\n+                            .map(|(kind, _error)| kind)\n+                            .filter(|kind| {\n+                                kind.is_literal()\n+                                    && (!is_negated || matches!(kind, FLOAT_NUMBER | INT_NUMBER))\n+                            })\n+                            .unwrap_or_else(|| panic!(\"Fail to convert given literal {:#?}\", &lit));\n+\n+                        res.push(kind);\n                     }\n                     tt::Leaf::Ident(ident) => match ident.text.as_ref() {\n                         \"_\" => res.push(T![_]),"}, {"sha": "fc5590b71845163a92a74b122f4074217846e909", "filename": "crates/mbe/src/tt_iter.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fmbe%2Fsrc%2Ftt_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fmbe%2Fsrc%2Ftt_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftt_iter.rs?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -90,20 +90,9 @@ impl<'a> TtIter<'a> {\n \n         let mut cursor = buffer.begin();\n         let mut error = false;\n-        let mut float_fragments_to_skip = 0;\n         for step in tree_traversal.iter() {\n             match step {\n                 parser::Step::Token { kind, mut n_input_tokens } => {\n-                    if float_fragments_to_skip > 0 {\n-                        float_fragments_to_skip -= 1;\n-                        n_input_tokens = 0;\n-                    }\n-                    match kind {\n-                        SyntaxKind::LIFETIME_IDENT => n_input_tokens = 2,\n-                        SyntaxKind::FLOAT_NUMBER_START_1 => float_fragments_to_skip = 1,\n-                        SyntaxKind::FLOAT_NUMBER_START_2 => float_fragments_to_skip = 2,\n-                        _ => {}\n-                    }\n                     if kind == SyntaxKind::LIFETIME_IDENT {\n                         n_input_tokens = 2;\n                     }"}, {"sha": "4efbf9a606e1939bcdcd96398465e7cd1f201b5d", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -39,7 +39,6 @@ mod generic_params;\n mod types;\n \n use crate::{\n-    grammar::expressions::FLOAT_LITERAL_FIRST,\n     parser::{CompletedMarker, Marker, Parser},\n     SyntaxKind::{self, *},\n     TokenSet, T,\n@@ -319,17 +318,9 @@ fn name_ref(p: &mut Parser) {\n }\n \n fn name_ref_or_index(p: &mut Parser) {\n-    assert!(\n-        p.at(IDENT) || p.at(INT_NUMBER) || p.at(FLOAT_NUMBER_PART) || p.at_ts(FLOAT_LITERAL_FIRST)\n-    );\n+    assert!(p.at(IDENT) || p.at(INT_NUMBER));\n     let m = p.start();\n-    if p.at(FLOAT_NUMBER_PART) || p.at_ts(FLOAT_LITERAL_FIRST) {\n-        // Ideally we'd remap this to `INT_NUMBER` instead, but that causes the MBE conversion to\n-        // lose track of what's a float and what isn't, causing panics.\n-        p.bump_remap(FLOAT_NUMBER_PART);\n-    } else {\n-        p.bump_any();\n-    }\n+    p.bump_any();\n     m.complete(p, NAME_REF);\n }\n "}, {"sha": "b063c73a9d68955f48d00343476f47294d9b54ac", "filename": "crates/parser/src/grammar/expressions.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -3,7 +3,7 @@ mod atom;\n use super::*;\n \n pub(crate) use self::atom::{block_expr, match_arm_list};\n-pub(super) use self::atom::{literal, FLOAT_LITERAL_FIRST, LITERAL_FIRST};\n+pub(super) use self::atom::{literal, LITERAL_FIRST};\n \n #[derive(PartialEq, Eq)]\n pub(super) enum Semicolon {\n@@ -452,9 +452,6 @@ fn index_expr(p: &mut Parser, lhs: CompletedMarker) -> CompletedMarker {\n // fn foo() {\n //     x.foo();\n //     y.bar::<T>(1, 2,);\n-//\n-//     0e0.sin();\n-//     0e0f32.sin();\n // }\n fn method_call_expr(p: &mut Parser, lhs: CompletedMarker) -> CompletedMarker {\n     assert!(p.at(T![.]) && p.nth(1) == IDENT && (p.nth(2) == T!['('] || p.nth_at(2, T![::])));\n@@ -472,16 +469,17 @@ fn method_call_expr(p: &mut Parser, lhs: CompletedMarker) -> CompletedMarker {\n // fn foo() {\n //     x.foo;\n //     x.0.bar;\n-//     x.0. bar;\n-//     x.0.1;\n //     x.0();\n // }\n fn field_expr(p: &mut Parser, lhs: CompletedMarker) -> CompletedMarker {\n     assert!(p.at(T![.]));\n     let m = lhs.precede(p);\n     p.bump(T![.]);\n-    if p.at(IDENT) || p.at(INT_NUMBER) || p.at(FLOAT_NUMBER_PART) || p.at_ts(FLOAT_LITERAL_FIRST) {\n+    if p.at(IDENT) || p.at(INT_NUMBER) {\n         name_ref_or_index(p);\n+    } else if p.at(FLOAT_NUMBER) {\n+        // FIXME: How to recover and instead parse INT + T![.]?\n+        p.bump_any();\n     } else {\n         p.error(\"expected field name or number\");\n     }"}, {"sha": "10e5d897e0781c32d7f66e5bffd0ef015ed217ad", "filename": "crates/parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 2, "deletions": 38, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -17,58 +17,22 @@ pub(crate) const LITERAL_FIRST: TokenSet = TokenSet::new(&[\n     T![true],\n     T![false],\n     INT_NUMBER,\n-    FLOAT_NUMBER_START_0,\n-    FLOAT_NUMBER_START_1,\n-    FLOAT_NUMBER_START_2,\n+    FLOAT_NUMBER,\n     BYTE,\n     CHAR,\n     STRING,\n     BYTE_STRING,\n ]);\n \n-pub(crate) const FLOAT_LITERAL_FIRST: TokenSet =\n-    TokenSet::new(&[FLOAT_NUMBER_START_0, FLOAT_NUMBER_START_1, FLOAT_NUMBER_START_2]);\n-\n pub(crate) fn literal(p: &mut Parser) -> Option<CompletedMarker> {\n     if !p.at_ts(LITERAL_FIRST) {\n         return None;\n     }\n     let m = p.start();\n-    if p.at_ts(FLOAT_LITERAL_FIRST) {\n-        float_literal(p);\n-    } else {\n-        // Everything else is just one token.\n-        p.bump_any();\n-    }\n+    p.bump_any();\n     Some(m.complete(p, LITERAL))\n }\n \n-// test float_literal\n-// fn f() {\n-//     0.0;\n-//     1.;\n-//     0e0;\n-//     0e0f32;\n-//     1.23f64;\n-// }\n-pub(crate) fn float_literal(p: &mut Parser) {\n-    // Floats can be up to 3 tokens. The first token indicates how many there are.\n-    let f = p.start();\n-    if p.at(FLOAT_NUMBER_START_0) {\n-        p.bump(FLOAT_NUMBER_START_0);\n-    } else if p.at(FLOAT_NUMBER_START_1) {\n-        p.bump(FLOAT_NUMBER_START_1);\n-        p.bump(DOT);\n-    } else if p.at(FLOAT_NUMBER_START_2) {\n-        p.bump(FLOAT_NUMBER_START_2);\n-        p.bump(DOT);\n-        p.bump(FLOAT_NUMBER_PART);\n-    } else {\n-        unreachable!();\n-    }\n-    f.complete(p, FLOAT_LITERAL);\n-}\n-\n // E.g. for after the break in `if break {}`, this should not match\n pub(super) const ATOM_EXPR_FIRST: TokenSet =\n     LITERAL_FIRST.union(paths::PATH_FIRST).union(TokenSet::new(&["}, {"sha": "1f622b32e5b1b762a2fd54a239a49382e0167ed8", "filename": "crates/parser/src/grammar/patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -140,7 +140,7 @@ fn atom_pat(p: &mut Parser, recovery_set: TokenSet) -> Option<CompletedMarker> {\n }\n \n fn is_literal_pat_start(p: &Parser) -> bool {\n-    p.at(T![-]) && (p.nth(1) == INT_NUMBER || p.nth(1) == FLOAT_NUMBER_PART)\n+    p.at(T![-]) && (p.nth(1) == INT_NUMBER || p.nth(1) == FLOAT_NUMBER)\n         || p.at_ts(expressions::LITERAL_FIRST)\n }\n "}, {"sha": "f4b9988eacb0c25b7d092d83cbddb0f8f020b36e", "filename": "crates/parser/src/lexed_str.rs", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fparser%2Fsrc%2Flexed_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fparser%2Fsrc%2Flexed_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Flexed_str.rs?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -177,7 +177,7 @@ impl<'a> Converter<'a> {\n \n                 rustc_lexer::TokenKind::RawIdent => IDENT,\n                 rustc_lexer::TokenKind::Literal { kind, .. } => {\n-                    self.extend_literal(token_text, kind);\n+                    self.extend_literal(token_text.len(), kind);\n                     return;\n                 }\n \n@@ -223,7 +223,7 @@ impl<'a> Converter<'a> {\n         self.push(syntax_kind, token_text.len(), err);\n     }\n \n-    fn extend_literal(&mut self, token_text: &str, kind: &rustc_lexer::LiteralKind) {\n+    fn extend_literal(&mut self, len: usize, kind: &rustc_lexer::LiteralKind) {\n         let mut err = \"\";\n \n         let syntax_kind = match *kind {\n@@ -237,27 +237,7 @@ impl<'a> Converter<'a> {\n                 if empty_exponent {\n                     err = \"Missing digits after the exponent symbol\";\n                 }\n-\n-                // In order to correctly parse nested tuple accesses like `tup.0.0`, where the `0.0`\n-                // is lexed as a float, we split floats that contain a `.` into 3 tokens.\n-                // To ensure that later stages can always reconstruct the token correctly, the first\n-                // token in the sequence indicates the number of following tokens that are part of\n-                // the float literal.\n-                if let Some((before, after)) = token_text.split_once('.') {\n-                    let err = if err.is_empty() { None } else { Some(err) };\n-\n-                    assert!(!before.is_empty());\n-                    let tok =\n-                        if after.is_empty() { FLOAT_NUMBER_START_1 } else { FLOAT_NUMBER_START_2 };\n-                    self.push(tok, before.len(), None);\n-                    self.push(DOT, 1, None);\n-                    if !after.is_empty() {\n-                        self.push(FLOAT_NUMBER_PART, after.len(), err);\n-                    }\n-                    return;\n-                }\n-\n-                FLOAT_NUMBER_START_0\n+                FLOAT_NUMBER\n             }\n             rustc_lexer::LiteralKind::Char { terminated } => {\n                 if !terminated {\n@@ -315,6 +295,6 @@ impl<'a> Converter<'a> {\n         };\n \n         let err = if err.is_empty() { None } else { Some(err) };\n-        self.push(syntax_kind, token_text.len(), err);\n+        self.push(syntax_kind, len, err);\n     }\n }"}, {"sha": "628fa745e752d678d625ef5489173918529b265b", "filename": "crates/parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -110,10 +110,7 @@ pub enum SyntaxKind {\n     RAW_KW,\n     MACRO_RULES_KW,\n     INT_NUMBER,\n-    FLOAT_NUMBER_START_0,\n-    FLOAT_NUMBER_START_1,\n-    FLOAT_NUMBER_START_2,\n-    FLOAT_NUMBER_PART,\n+    FLOAT_NUMBER,\n     CHAR,\n     BYTE,\n     STRING,\n@@ -230,7 +227,6 @@ pub enum SyntaxKind {\n     PATH,\n     PATH_SEGMENT,\n     LITERAL,\n-    FLOAT_LITERAL,\n     RENAME,\n     VISIBILITY,\n     WHERE_CLAUSE,\n@@ -290,8 +286,7 @@ impl SyntaxKind {\n     }\n     pub fn is_literal(self) -> bool {\n         match self {\n-            INT_NUMBER | FLOAT_NUMBER_START_0 | FLOAT_NUMBER_START_1 | FLOAT_NUMBER_START_2\n-            | FLOAT_NUMBER_PART | CHAR | BYTE | STRING | BYTE_STRING => true,\n+            INT_NUMBER | FLOAT_NUMBER | CHAR | BYTE | STRING | BYTE_STRING => true,\n             _ => false,\n         }\n     }\n@@ -391,5 +386,5 @@ impl SyntaxKind {\n     }\n }\n #[macro_export]\n-macro_rules ! T { [;] => { $ crate :: SyntaxKind :: SEMICOLON } ; [,] => { $ crate :: SyntaxKind :: COMMA } ; ['('] => { $ crate :: SyntaxKind :: L_PAREN } ; [')'] => { $ crate :: SyntaxKind :: R_PAREN } ; ['{'] => { $ crate :: SyntaxKind :: L_CURLY } ; ['}'] => { $ crate :: SyntaxKind :: R_CURLY } ; ['['] => { $ crate :: SyntaxKind :: L_BRACK } ; [']'] => { $ crate :: SyntaxKind :: R_BRACK } ; [<] => { $ crate :: SyntaxKind :: L_ANGLE } ; [>] => { $ crate :: SyntaxKind :: R_ANGLE } ; [@] => { $ crate :: SyntaxKind :: AT } ; [#] => { $ crate :: SyntaxKind :: POUND } ; [~] => { $ crate :: SyntaxKind :: TILDE } ; [?] => { $ crate :: SyntaxKind :: QUESTION } ; [$] => { $ crate :: SyntaxKind :: DOLLAR } ; [&] => { $ crate :: SyntaxKind :: AMP } ; [|] => { $ crate :: SyntaxKind :: PIPE } ; [+] => { $ crate :: SyntaxKind :: PLUS } ; [*] => { $ crate :: SyntaxKind :: STAR } ; [/] => { $ crate :: SyntaxKind :: SLASH } ; [^] => { $ crate :: SyntaxKind :: CARET } ; [%] => { $ crate :: SyntaxKind :: PERCENT } ; [_] => { $ crate :: SyntaxKind :: UNDERSCORE } ; [.] => { $ crate :: SyntaxKind :: DOT } ; [..] => { $ crate :: SyntaxKind :: DOT2 } ; [...] => { $ crate :: SyntaxKind :: DOT3 } ; [..=] => { $ crate :: SyntaxKind :: DOT2EQ } ; [:] => { $ crate :: SyntaxKind :: COLON } ; [::] => { $ crate :: SyntaxKind :: COLON2 } ; [=] => { $ crate :: SyntaxKind :: EQ } ; [==] => { $ crate :: SyntaxKind :: EQ2 } ; [=>] => { $ crate :: SyntaxKind :: FAT_ARROW } ; [!] => { $ crate :: SyntaxKind :: BANG } ; [!=] => { $ crate :: SyntaxKind :: NEQ } ; [-] => { $ crate :: SyntaxKind :: MINUS } ; [->] => { $ crate :: SyntaxKind :: THIN_ARROW } ; [<=] => { $ crate :: SyntaxKind :: LTEQ } ; [>=] => { $ crate :: SyntaxKind :: GTEQ } ; [+=] => { $ crate :: SyntaxKind :: PLUSEQ } ; [-=] => { $ crate :: SyntaxKind :: MINUSEQ } ; [|=] => { $ crate :: SyntaxKind :: PIPEEQ } ; [&=] => { $ crate :: SyntaxKind :: AMPEQ } ; [^=] => { $ crate :: SyntaxKind :: CARETEQ } ; [/=] => { $ crate :: SyntaxKind :: SLASHEQ } ; [*=] => { $ crate :: SyntaxKind :: STAREQ } ; [%=] => { $ crate :: SyntaxKind :: PERCENTEQ } ; [&&] => { $ crate :: SyntaxKind :: AMP2 } ; [||] => { $ crate :: SyntaxKind :: PIPE2 } ; [<<] => { $ crate :: SyntaxKind :: SHL } ; [>>] => { $ crate :: SyntaxKind :: SHR } ; [<<=] => { $ crate :: SyntaxKind :: SHLEQ } ; [>>=] => { $ crate :: SyntaxKind :: SHREQ } ; [as] => { $ crate :: SyntaxKind :: AS_KW } ; [async] => { $ crate :: SyntaxKind :: ASYNC_KW } ; [await] => { $ crate :: SyntaxKind :: AWAIT_KW } ; [box] => { $ crate :: SyntaxKind :: BOX_KW } ; [break] => { $ crate :: SyntaxKind :: BREAK_KW } ; [const] => { $ crate :: SyntaxKind :: CONST_KW } ; [continue] => { $ crate :: SyntaxKind :: CONTINUE_KW } ; [crate] => { $ crate :: SyntaxKind :: CRATE_KW } ; [dyn] => { $ crate :: SyntaxKind :: DYN_KW } ; [else] => { $ crate :: SyntaxKind :: ELSE_KW } ; [enum] => { $ crate :: SyntaxKind :: ENUM_KW } ; [extern] => { $ crate :: SyntaxKind :: EXTERN_KW } ; [false] => { $ crate :: SyntaxKind :: FALSE_KW } ; [fn] => { $ crate :: SyntaxKind :: FN_KW } ; [for] => { $ crate :: SyntaxKind :: FOR_KW } ; [if] => { $ crate :: SyntaxKind :: IF_KW } ; [impl] => { $ crate :: SyntaxKind :: IMPL_KW } ; [in] => { $ crate :: SyntaxKind :: IN_KW } ; [let] => { $ crate :: SyntaxKind :: LET_KW } ; [loop] => { $ crate :: SyntaxKind :: LOOP_KW } ; [macro] => { $ crate :: SyntaxKind :: MACRO_KW } ; [match] => { $ crate :: SyntaxKind :: MATCH_KW } ; [mod] => { $ crate :: SyntaxKind :: MOD_KW } ; [move] => { $ crate :: SyntaxKind :: MOVE_KW } ; [mut] => { $ crate :: SyntaxKind :: MUT_KW } ; [pub] => { $ crate :: SyntaxKind :: PUB_KW } ; [ref] => { $ crate :: SyntaxKind :: REF_KW } ; [return] => { $ crate :: SyntaxKind :: RETURN_KW } ; [self] => { $ crate :: SyntaxKind :: SELF_KW } ; [Self] => { $ crate :: SyntaxKind :: SELF_TYPE_KW } ; [static] => { $ crate :: SyntaxKind :: STATIC_KW } ; [struct] => { $ crate :: SyntaxKind :: STRUCT_KW } ; [super] => { $ crate :: SyntaxKind :: SUPER_KW } ; [trait] => { $ crate :: SyntaxKind :: TRAIT_KW } ; [true] => { $ crate :: SyntaxKind :: TRUE_KW } ; [try] => { $ crate :: SyntaxKind :: TRY_KW } ; [type] => { $ crate :: SyntaxKind :: TYPE_KW } ; [unsafe] => { $ crate :: SyntaxKind :: UNSAFE_KW } ; [use] => { $ crate :: SyntaxKind :: USE_KW } ; [where] => { $ crate :: SyntaxKind :: WHERE_KW } ; [while] => { $ crate :: SyntaxKind :: WHILE_KW } ; [yield] => { $ crate :: SyntaxKind :: YIELD_KW } ; [auto] => { $ crate :: SyntaxKind :: AUTO_KW } ; [default] => { $ crate :: SyntaxKind :: DEFAULT_KW } ; [existential] => { $ crate :: SyntaxKind :: EXISTENTIAL_KW } ; [union] => { $ crate :: SyntaxKind :: UNION_KW } ; [raw] => { $ crate :: SyntaxKind :: RAW_KW } ; [macro_rules] => { $ crate :: SyntaxKind :: MACRO_RULES_KW } ; [lifetime_ident] => { $ crate :: SyntaxKind :: LIFETIME_IDENT } ; [ident] => { $ crate :: SyntaxKind :: IDENT } ; [shebang] => { $ crate :: SyntaxKind :: SHEBANG } ; [float_number_part] => { $ crate :: SyntaxKind :: FLOAT_NUMBER_PART } ; [float_number_start_0] => { $ crate :: SyntaxKind :: FLOAT_NUMBER_START_0 } ; [float_number_start_1] => { $ crate :: SyntaxKind :: FLOAT_NUMBER_START_1 } ; [float_number_start_2] => { $ crate :: SyntaxKind :: FLOAT_NUMBER_START_2 } ; }\n+macro_rules ! T { [;] => { $ crate :: SyntaxKind :: SEMICOLON } ; [,] => { $ crate :: SyntaxKind :: COMMA } ; ['('] => { $ crate :: SyntaxKind :: L_PAREN } ; [')'] => { $ crate :: SyntaxKind :: R_PAREN } ; ['{'] => { $ crate :: SyntaxKind :: L_CURLY } ; ['}'] => { $ crate :: SyntaxKind :: R_CURLY } ; ['['] => { $ crate :: SyntaxKind :: L_BRACK } ; [']'] => { $ crate :: SyntaxKind :: R_BRACK } ; [<] => { $ crate :: SyntaxKind :: L_ANGLE } ; [>] => { $ crate :: SyntaxKind :: R_ANGLE } ; [@] => { $ crate :: SyntaxKind :: AT } ; [#] => { $ crate :: SyntaxKind :: POUND } ; [~] => { $ crate :: SyntaxKind :: TILDE } ; [?] => { $ crate :: SyntaxKind :: QUESTION } ; [$] => { $ crate :: SyntaxKind :: DOLLAR } ; [&] => { $ crate :: SyntaxKind :: AMP } ; [|] => { $ crate :: SyntaxKind :: PIPE } ; [+] => { $ crate :: SyntaxKind :: PLUS } ; [*] => { $ crate :: SyntaxKind :: STAR } ; [/] => { $ crate :: SyntaxKind :: SLASH } ; [^] => { $ crate :: SyntaxKind :: CARET } ; [%] => { $ crate :: SyntaxKind :: PERCENT } ; [_] => { $ crate :: SyntaxKind :: UNDERSCORE } ; [.] => { $ crate :: SyntaxKind :: DOT } ; [..] => { $ crate :: SyntaxKind :: DOT2 } ; [...] => { $ crate :: SyntaxKind :: DOT3 } ; [..=] => { $ crate :: SyntaxKind :: DOT2EQ } ; [:] => { $ crate :: SyntaxKind :: COLON } ; [::] => { $ crate :: SyntaxKind :: COLON2 } ; [=] => { $ crate :: SyntaxKind :: EQ } ; [==] => { $ crate :: SyntaxKind :: EQ2 } ; [=>] => { $ crate :: SyntaxKind :: FAT_ARROW } ; [!] => { $ crate :: SyntaxKind :: BANG } ; [!=] => { $ crate :: SyntaxKind :: NEQ } ; [-] => { $ crate :: SyntaxKind :: MINUS } ; [->] => { $ crate :: SyntaxKind :: THIN_ARROW } ; [<=] => { $ crate :: SyntaxKind :: LTEQ } ; [>=] => { $ crate :: SyntaxKind :: GTEQ } ; [+=] => { $ crate :: SyntaxKind :: PLUSEQ } ; [-=] => { $ crate :: SyntaxKind :: MINUSEQ } ; [|=] => { $ crate :: SyntaxKind :: PIPEEQ } ; [&=] => { $ crate :: SyntaxKind :: AMPEQ } ; [^=] => { $ crate :: SyntaxKind :: CARETEQ } ; [/=] => { $ crate :: SyntaxKind :: SLASHEQ } ; [*=] => { $ crate :: SyntaxKind :: STAREQ } ; [%=] => { $ crate :: SyntaxKind :: PERCENTEQ } ; [&&] => { $ crate :: SyntaxKind :: AMP2 } ; [||] => { $ crate :: SyntaxKind :: PIPE2 } ; [<<] => { $ crate :: SyntaxKind :: SHL } ; [>>] => { $ crate :: SyntaxKind :: SHR } ; [<<=] => { $ crate :: SyntaxKind :: SHLEQ } ; [>>=] => { $ crate :: SyntaxKind :: SHREQ } ; [as] => { $ crate :: SyntaxKind :: AS_KW } ; [async] => { $ crate :: SyntaxKind :: ASYNC_KW } ; [await] => { $ crate :: SyntaxKind :: AWAIT_KW } ; [box] => { $ crate :: SyntaxKind :: BOX_KW } ; [break] => { $ crate :: SyntaxKind :: BREAK_KW } ; [const] => { $ crate :: SyntaxKind :: CONST_KW } ; [continue] => { $ crate :: SyntaxKind :: CONTINUE_KW } ; [crate] => { $ crate :: SyntaxKind :: CRATE_KW } ; [dyn] => { $ crate :: SyntaxKind :: DYN_KW } ; [else] => { $ crate :: SyntaxKind :: ELSE_KW } ; [enum] => { $ crate :: SyntaxKind :: ENUM_KW } ; [extern] => { $ crate :: SyntaxKind :: EXTERN_KW } ; [false] => { $ crate :: SyntaxKind :: FALSE_KW } ; [fn] => { $ crate :: SyntaxKind :: FN_KW } ; [for] => { $ crate :: SyntaxKind :: FOR_KW } ; [if] => { $ crate :: SyntaxKind :: IF_KW } ; [impl] => { $ crate :: SyntaxKind :: IMPL_KW } ; [in] => { $ crate :: SyntaxKind :: IN_KW } ; [let] => { $ crate :: SyntaxKind :: LET_KW } ; [loop] => { $ crate :: SyntaxKind :: LOOP_KW } ; [macro] => { $ crate :: SyntaxKind :: MACRO_KW } ; [match] => { $ crate :: SyntaxKind :: MATCH_KW } ; [mod] => { $ crate :: SyntaxKind :: MOD_KW } ; [move] => { $ crate :: SyntaxKind :: MOVE_KW } ; [mut] => { $ crate :: SyntaxKind :: MUT_KW } ; [pub] => { $ crate :: SyntaxKind :: PUB_KW } ; [ref] => { $ crate :: SyntaxKind :: REF_KW } ; [return] => { $ crate :: SyntaxKind :: RETURN_KW } ; [self] => { $ crate :: SyntaxKind :: SELF_KW } ; [Self] => { $ crate :: SyntaxKind :: SELF_TYPE_KW } ; [static] => { $ crate :: SyntaxKind :: STATIC_KW } ; [struct] => { $ crate :: SyntaxKind :: STRUCT_KW } ; [super] => { $ crate :: SyntaxKind :: SUPER_KW } ; [trait] => { $ crate :: SyntaxKind :: TRAIT_KW } ; [true] => { $ crate :: SyntaxKind :: TRUE_KW } ; [try] => { $ crate :: SyntaxKind :: TRY_KW } ; [type] => { $ crate :: SyntaxKind :: TYPE_KW } ; [unsafe] => { $ crate :: SyntaxKind :: UNSAFE_KW } ; [use] => { $ crate :: SyntaxKind :: USE_KW } ; [where] => { $ crate :: SyntaxKind :: WHERE_KW } ; [while] => { $ crate :: SyntaxKind :: WHILE_KW } ; [yield] => { $ crate :: SyntaxKind :: YIELD_KW } ; [auto] => { $ crate :: SyntaxKind :: AUTO_KW } ; [default] => { $ crate :: SyntaxKind :: DEFAULT_KW } ; [existential] => { $ crate :: SyntaxKind :: EXISTENTIAL_KW } ; [union] => { $ crate :: SyntaxKind :: UNION_KW } ; [raw] => { $ crate :: SyntaxKind :: RAW_KW } ; [macro_rules] => { $ crate :: SyntaxKind :: MACRO_RULES_KW } ; [lifetime_ident] => { $ crate :: SyntaxKind :: LIFETIME_IDENT } ; [ident] => { $ crate :: SyntaxKind :: IDENT } ; [shebang] => { $ crate :: SyntaxKind :: SHEBANG } ; }\n pub use T;"}, {"sha": "af03d73ced9a60490eeab6e92d255df0e1f08aef", "filename": "crates/parser/test_data/lexer/err/empty_exponent.rast", "status": "modified", "additions": 14, "deletions": 30, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Fempty_exponent.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Fempty_exponent.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Fempty_exponent.rast?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -1,14 +1,14 @@\n-FLOAT_NUMBER_START_0 \"0e\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER \"0e\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER_START_0 \"0E\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER \"0E\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\\n\"\n-FLOAT_NUMBER_START_0 \"42e+\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER \"42e+\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER_START_0 \"42e-\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER \"42e-\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER_START_0 \"42E+\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER \"42E+\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER_START_0 \"42E-\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER \"42E-\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\\n\"\n INT_NUMBER \"42\"\n DOT \".\"\n@@ -30,35 +30,19 @@ DOT \".\"\n IDENT \"E\"\n MINUS \"-\"\n WHITESPACE \"\\n\\n\"\n-FLOAT_NUMBER_START_2 \"42\"\n-DOT \".\"\n-FLOAT_NUMBER_PART \"2e+\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER \"42.2e+\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER_START_2 \"42\"\n-DOT \".\"\n-FLOAT_NUMBER_PART \"2e-\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER \"42.2e-\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER_START_2 \"42\"\n-DOT \".\"\n-FLOAT_NUMBER_PART \"2E+\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER \"42.2E+\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER_START_2 \"42\"\n-DOT \".\"\n-FLOAT_NUMBER_PART \"2E-\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER \"42.2E-\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\\n\"\n-FLOAT_NUMBER_START_2 \"42\"\n-DOT \".\"\n-FLOAT_NUMBER_PART \"2e+f32\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER \"42.2e+f32\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER_START_2 \"42\"\n-DOT \".\"\n-FLOAT_NUMBER_PART \"2e-f32\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER \"42.2e-f32\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER_START_2 \"42\"\n-DOT \".\"\n-FLOAT_NUMBER_PART \"2E+f32\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER \"42.2E+f32\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER_START_2 \"42\"\n-DOT \".\"\n-FLOAT_NUMBER_PART \"2E-f32\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER \"42.2E-f32\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\""}, {"sha": "8d13c3f610681fa5ffc83118092b525c1ebc2a43", "filename": "crates/parser/test_data/lexer/ok/numbers.rast", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fparser%2Ftest_data%2Flexer%2Fok%2Fnumbers.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fparser%2Ftest_data%2Flexer%2Fok%2Fnumbers.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Flexer%2Fok%2Fnumbers.rast?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -4,8 +4,7 @@ INT_NUMBER \"00\"\n WHITESPACE \" \"\n INT_NUMBER \"0_\"\n WHITESPACE \" \"\n-FLOAT_NUMBER_START_1 \"0\"\n-DOT \".\"\n+FLOAT_NUMBER \"0.\"\n WHITESPACE \" \"\n INT_NUMBER \"0z\"\n WHITESPACE \"\\n\"\n@@ -21,13 +20,11 @@ INT_NUMBER \"001279\"\n WHITESPACE \" \"\n INT_NUMBER \"0_1279\"\n WHITESPACE \" \"\n-FLOAT_NUMBER_START_2 \"0\"\n-DOT \".\"\n-FLOAT_NUMBER_PART \"1279\"\n+FLOAT_NUMBER \"0.1279\"\n WHITESPACE \" \"\n-FLOAT_NUMBER_START_0 \"0e1279\"\n+FLOAT_NUMBER \"0e1279\"\n WHITESPACE \" \"\n-FLOAT_NUMBER_START_0 \"0E1279\"\n+FLOAT_NUMBER \"0E1279\"\n WHITESPACE \"\\n\"\n INT_NUMBER \"0\"\n DOT \".\"\n@@ -40,27 +37,21 @@ IDENT \"foo\"\n L_PAREN \"(\"\n R_PAREN \")\"\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER_START_0 \"0e+1\"\n+FLOAT_NUMBER \"0e+1\"\n WHITESPACE \"\\n\"\n INT_NUMBER \"0\"\n DOT \".\"\n IDENT \"e\"\n PLUS \"+\"\n INT_NUMBER \"1\"\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER_START_2 \"0\"\n-DOT \".\"\n-FLOAT_NUMBER_PART \"0E-2\"\n+FLOAT_NUMBER \"0.0E-2\"\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER_START_2 \"0___0\"\n-DOT \".\"\n-FLOAT_NUMBER_PART \"10000____0000e+111__\"\n+FLOAT_NUMBER \"0___0.10000____0000e+111__\"\n WHITESPACE \"\\n\"\n INT_NUMBER \"1i64\"\n WHITESPACE \" \"\n-FLOAT_NUMBER_START_2 \"92\"\n-DOT \".\"\n-FLOAT_NUMBER_PART \"0f32\"\n+FLOAT_NUMBER \"92.0f32\"\n WHITESPACE \" \"\n INT_NUMBER \"11__s\"\n WHITESPACE \"\\n\""}, {"sha": "4064a7a1ff2de2ca8f1d87794b7b8d99e941942c", "filename": "crates/parser/test_data/parser/err/0023_mismatched_paren.rast", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0023_mismatched_paren.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0023_mismatched_paren.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0023_mismatched_paren.rast?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -32,9 +32,7 @@ SOURCE_FILE\n               INT_NUMBER \"1\"\n               COMMA \",\"\n               WHITESPACE \" \"\n-              FLOAT_NUMBER_START_2 \"2\"\n-              DOT \".\"\n-              FLOAT_NUMBER_PART \"0\"\n+              FLOAT_NUMBER \"2.0\"\n         WHITESPACE \"\\n    \"\n         R_CURLY \"}\"\n   WHITESPACE \" \""}, {"sha": "8498724b9ef076fcc9f0ed400a403c246c0fb998", "filename": "crates/parser/test_data/parser/inline/ok/0011_field_expr.rast", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0011_field_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0011_field_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0011_field_expr.rast?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -40,39 +40,6 @@ SOURCE_FILE\n               IDENT \"bar\"\n           SEMICOLON \";\"\n         WHITESPACE \"\\n    \"\n-        EXPR_STMT\n-          FIELD_EXPR\n-            FIELD_EXPR\n-              PATH_EXPR\n-                PATH\n-                  PATH_SEGMENT\n-                    NAME_REF\n-                      IDENT \"x\"\n-              DOT \".\"\n-              NAME_REF\n-                FLOAT_NUMBER_PART \"0\"\n-            DOT \".\"\n-            WHITESPACE \" \"\n-            NAME_REF\n-              IDENT \"bar\"\n-          SEMICOLON \";\"\n-        WHITESPACE \"\\n    \"\n-        EXPR_STMT\n-          FIELD_EXPR\n-            FIELD_EXPR\n-              PATH_EXPR\n-                PATH\n-                  PATH_SEGMENT\n-                    NAME_REF\n-                      IDENT \"x\"\n-              DOT \".\"\n-              NAME_REF\n-                FLOAT_NUMBER_PART \"0\"\n-            DOT \".\"\n-            NAME_REF\n-              FLOAT_NUMBER_PART \"1\"\n-          SEMICOLON \";\"\n-        WHITESPACE \"\\n    \"\n         EXPR_STMT\n           CALL_EXPR\n             FIELD_EXPR"}, {"sha": "b8da2ddc30947c126793948daf2508b3f8ff0e9c", "filename": "crates/parser/test_data/parser/inline/ok/0011_field_expr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0011_field_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0011_field_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0011_field_expr.rs?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -1,7 +1,5 @@\n fn foo() {\n     x.foo;\n     x.0.bar;\n-    x.0. bar;\n-    x.0.1;\n     x.0();\n }"}, {"sha": "403c265ea35bea654c5e970e9254362a1f4837fb", "filename": "crates/parser/test_data/parser/inline/ok/0085_expr_literals.rast", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0085_expr_literals.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0085_expr_literals.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0085_expr_literals.rast?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -57,10 +57,7 @@ SOURCE_FILE\n           EQ \"=\"\n           WHITESPACE \" \"\n           LITERAL\n-            FLOAT_LITERAL\n-              FLOAT_NUMBER_START_2 \"2\"\n-              DOT \".\"\n-              FLOAT_NUMBER_PART \"0\"\n+            FLOAT_NUMBER \"2.0\"\n           SEMICOLON \";\"\n         WHITESPACE \"\\n    \"\n         LET_STMT"}, {"sha": "dcbcfe1231e62ecdd2db756d3af30c1437af88c5", "filename": "crates/parser/test_data/parser/inline/ok/0107_method_call_expr.rast", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0107_method_call_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0107_method_call_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0107_method_call_expr.rast?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -58,32 +58,6 @@ SOURCE_FILE\n               COMMA \",\"\n               R_PAREN \")\"\n           SEMICOLON \";\"\n-        WHITESPACE \"\\n\\n    \"\n-        EXPR_STMT\n-          METHOD_CALL_EXPR\n-            LITERAL\n-              FLOAT_LITERAL\n-                FLOAT_NUMBER_START_0 \"0e0\"\n-            DOT \".\"\n-            NAME_REF\n-              IDENT \"sin\"\n-            ARG_LIST\n-              L_PAREN \"(\"\n-              R_PAREN \")\"\n-          SEMICOLON \";\"\n-        WHITESPACE \"\\n    \"\n-        EXPR_STMT\n-          METHOD_CALL_EXPR\n-            LITERAL\n-              FLOAT_LITERAL\n-                FLOAT_NUMBER_START_0 \"0e0f32\"\n-            DOT \".\"\n-            NAME_REF\n-              IDENT \"sin\"\n-            ARG_LIST\n-              L_PAREN \"(\"\n-              R_PAREN \")\"\n-          SEMICOLON \";\"\n         WHITESPACE \"\\n\"\n         R_CURLY \"}\"\n   WHITESPACE \"\\n\""}, {"sha": "1a3aa35ae8e73cb890aadbfbd72ceda99b278dc6", "filename": "crates/parser/test_data/parser/inline/ok/0107_method_call_expr.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0107_method_call_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0107_method_call_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0107_method_call_expr.rs?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -1,7 +1,4 @@\n fn foo() {\n     x.foo();\n     y.bar::<T>(1, 2,);\n-\n-    0e0.sin();\n-    0e0f32.sin();\n }"}, {"sha": "df4fb6eb417ba0ceb9b79ba9a86d584cfb6b4861", "filename": "crates/parser/test_data/parser/inline/ok/0201_float_literal.rast", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/0f9ffb5e358bfd62ce84afcc89c5e1a5c13297f8/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0201_float_literal.rast", "raw_url": "https://github.com/rust-lang/rust/raw/0f9ffb5e358bfd62ce84afcc89c5e1a5c13297f8/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0201_float_literal.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0201_float_literal.rast?ref=0f9ffb5e358bfd62ce84afcc89c5e1a5c13297f8", "patch": "@@ -1,51 +0,0 @@\n-SOURCE_FILE\n-  FN\n-    FN_KW \"fn\"\n-    WHITESPACE \" \"\n-    NAME\n-      IDENT \"f\"\n-    PARAM_LIST\n-      L_PAREN \"(\"\n-      R_PAREN \")\"\n-    WHITESPACE \" \"\n-    BLOCK_EXPR\n-      STMT_LIST\n-        L_CURLY \"{\"\n-        WHITESPACE \"\\n    \"\n-        EXPR_STMT\n-          LITERAL\n-            FLOAT_LITERAL\n-              FLOAT_NUMBER_START_2 \"0\"\n-              DOT \".\"\n-              FLOAT_NUMBER_PART \"0\"\n-          SEMICOLON \";\"\n-        WHITESPACE \"\\n    \"\n-        EXPR_STMT\n-          LITERAL\n-            FLOAT_LITERAL\n-              FLOAT_NUMBER_START_1 \"1\"\n-              DOT \".\"\n-          SEMICOLON \";\"\n-        WHITESPACE \"\\n    \"\n-        EXPR_STMT\n-          LITERAL\n-            FLOAT_LITERAL\n-              FLOAT_NUMBER_START_0 \"0e0\"\n-          SEMICOLON \";\"\n-        WHITESPACE \"\\n    \"\n-        EXPR_STMT\n-          LITERAL\n-            FLOAT_LITERAL\n-              FLOAT_NUMBER_START_0 \"0e0f32\"\n-          SEMICOLON \";\"\n-        WHITESPACE \"\\n    \"\n-        EXPR_STMT\n-          LITERAL\n-            FLOAT_LITERAL\n-              FLOAT_NUMBER_START_2 \"1\"\n-              DOT \".\"\n-              FLOAT_NUMBER_PART \"23f64\"\n-          SEMICOLON \";\"\n-        WHITESPACE \"\\n\"\n-        R_CURLY \"}\"\n-  WHITESPACE \"\\n\""}, {"sha": "0d51ec1252fa8d2814d249ffa6ff16960843e24b", "filename": "crates/parser/test_data/parser/inline/ok/0201_float_literal.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0f9ffb5e358bfd62ce84afcc89c5e1a5c13297f8/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0201_float_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9ffb5e358bfd62ce84afcc89c5e1a5c13297f8/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0201_float_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0201_float_literal.rs?ref=0f9ffb5e358bfd62ce84afcc89c5e1a5c13297f8", "patch": "@@ -1,7 +0,0 @@\n-fn f() {\n-    0.0;\n-    1.;\n-    0e0;\n-    0e0f32;\n-    1.23f64;\n-}"}, {"sha": "55ce31275fba65be0aa97f6f4d2f9d5a407cf852", "filename": "crates/parser/test_data/parser/ok/0056_neq_in_type.rast", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0056_neq_in_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0056_neq_in_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0056_neq_in_type.rast?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -19,10 +19,7 @@ SOURCE_FILE\n             CAST_EXPR\n               METHOD_CALL_EXPR\n                 LITERAL\n-                  FLOAT_LITERAL\n-                    FLOAT_NUMBER_START_2 \"1\"\n-                    DOT \".\"\n-                    FLOAT_NUMBER_PART \"0f32\"\n+                  FLOAT_NUMBER \"1.0f32\"\n                 DOT \".\"\n                 NAME_REF\n                   IDENT \"floor\"\n@@ -43,10 +40,7 @@ SOURCE_FILE\n             CAST_EXPR\n               METHOD_CALL_EXPR\n                 LITERAL\n-                  FLOAT_LITERAL\n-                    FLOAT_NUMBER_START_2 \"1\"\n-                    DOT \".\"\n-                    FLOAT_NUMBER_PART \"0f32\"\n+                  FLOAT_NUMBER \"1.0f32\"\n                 DOT \".\"\n                 NAME_REF\n                   IDENT \"floor\""}, {"sha": "62aa47839942a42b596723d7da9b241f128afc58", "filename": "crates/syntax/rust.ungram", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fsyntax%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fsyntax%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Frust.ungram?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -365,20 +365,13 @@ MacroExpr =\n \n Literal =\n   Attr* value:(\n-    'int_number' | FloatLiteral\n+    'int_number' | 'float_number'\n   | 'string' | 'raw_string'\n   | 'byte_string' | 'raw_byte_string'\n   | 'true' | 'false'\n   | 'char' | 'byte'\n   )\n \n-FloatLiteral =\n-  'float_number_start_0'?\n-  'float_number_start_1'?\n-  'float_number_start_2'?\n-  '.'?\n-  'float_number_part'?\n-\n PathExpr =\n   Attr* Path\n "}, {"sha": "17785152bc59bcdc314fda23490b70f78f50bd13", "filename": "crates/syntax/src/ast/expr_ext.rs", "status": "modified", "additions": 10, "deletions": 32, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -8,7 +8,7 @@ use crate::{\n         operators::{ArithOp, BinaryOp, CmpOp, LogicOp, Ordering, RangeOp, UnaryOp},\n         support, AstChildren, AstNode,\n     },\n-    AstToken, SyntaxElement,\n+    AstToken,\n     SyntaxKind::*,\n     SyntaxNode, SyntaxToken, T,\n };\n@@ -282,32 +282,30 @@ pub enum LiteralKind {\n     String(ast::String),\n     ByteString(ast::ByteString),\n     IntNumber(ast::IntNumber),\n-    FloatNumber(ast::FloatLiteral),\n+    FloatNumber(ast::FloatNumber),\n     Char(ast::Char),\n     Byte(ast::Byte),\n     Bool(bool),\n }\n \n impl ast::Literal {\n-    pub fn value(&self) -> SyntaxElement {\n+    pub fn token(&self) -> SyntaxToken {\n         self.syntax()\n             .children_with_tokens()\n             .find(|e| e.kind() != ATTR && !e.kind().is_trivia())\n+            .and_then(|e| e.into_token())\n             .unwrap()\n     }\n+\n     pub fn kind(&self) -> LiteralKind {\n-        let token = match self.value() {\n-            rowan::NodeOrToken::Node(node) => {\n-                return LiteralKind::FloatNumber(\n-                    ast::FloatLiteral::cast(node).expect(\"unreachable\"),\n-                );\n-            }\n-            rowan::NodeOrToken::Token(token) => token,\n-        };\n+        let token = self.token();\n \n         if let Some(t) = ast::IntNumber::cast(token.clone()) {\n             return LiteralKind::IntNumber(t);\n         }\n+        if let Some(t) = ast::FloatNumber::cast(token.clone()) {\n+            return LiteralKind::FloatNumber(t);\n+        }\n         if let Some(t) = ast::String::cast(token.clone()) {\n             return LiteralKind::String(t);\n         }\n@@ -327,26 +325,6 @@ impl ast::Literal {\n             _ => unreachable!(),\n         }\n     }\n-\n-    pub fn as_string(&self) -> Option<ast::String> {\n-        match self.kind() {\n-            LiteralKind::String(it) => Some(it),\n-            _ => None,\n-        }\n-    }\n-\n-    pub fn as_byte_string(&self) -> Option<ast::ByteString> {\n-        match self.kind() {\n-            LiteralKind::ByteString(it) => Some(it),\n-            _ => None,\n-        }\n-    }\n-}\n-\n-impl ast::FloatLiteral {\n-    pub fn suffix(&self) -> Option<String> {\n-        ast::FloatNumberPart::cast(self.syntax().last_token()?)?.suffix().map(|s| s.to_string())\n-    }\n }\n \n pub enum BlockModifier {\n@@ -386,7 +364,7 @@ impl ast::BlockExpr {\n fn test_literal_with_attr() {\n     let parse = ast::SourceFile::parse(r#\"const _: &str = { #[attr] \"Hello\" };\"#);\n     let lit = parse.tree().syntax().descendants().find_map(ast::Literal::cast).unwrap();\n-    assert_eq!(lit.value().to_string(), r#\"\"Hello\"\"#);\n+    assert_eq!(lit.token().text(), r#\"\"Hello\"\"#);\n }\n \n impl ast::RecordExprField {"}, {"sha": "cf90ba64cff1ab5ba6e41e3e7c9246698a21fc11", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -1085,26 +1085,6 @@ impl UnderscoreExpr {\n     pub fn underscore_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![_]) }\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct FloatLiteral {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl FloatLiteral {\n-    pub fn float_number_start_0_token(&self) -> Option<SyntaxToken> {\n-        support::token(&self.syntax, T![float_number_start_0])\n-    }\n-    pub fn float_number_start_1_token(&self) -> Option<SyntaxToken> {\n-        support::token(&self.syntax, T![float_number_start_1])\n-    }\n-    pub fn float_number_start_2_token(&self) -> Option<SyntaxToken> {\n-        support::token(&self.syntax, T![float_number_start_2])\n-    }\n-    pub fn dot_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![.]) }\n-    pub fn float_number_part_token(&self) -> Option<SyntaxToken> {\n-        support::token(&self.syntax, T![float_number_part])\n-    }\n-}\n-\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct StmtList {\n     pub(crate) syntax: SyntaxNode,\n@@ -2739,17 +2719,6 @@ impl AstNode for UnderscoreExpr {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for FloatLiteral {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == FLOAT_LITERAL }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n impl AstNode for StmtList {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == STMT_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -4639,11 +4608,6 @@ impl std::fmt::Display for UnderscoreExpr {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for FloatLiteral {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl std::fmt::Display for StmtList {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "a3209c5abd23e1c8a9b93ae5f4ceffb2046cc5a7", "filename": "crates/syntax/src/ast/generated/tokens.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -112,16 +112,16 @@ impl AstToken for IntNumber {\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct FloatNumberPart {\n+pub struct FloatNumber {\n     pub(crate) syntax: SyntaxToken,\n }\n-impl std::fmt::Display for FloatNumberPart {\n+impl std::fmt::Display for FloatNumber {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(&self.syntax, f)\n     }\n }\n-impl AstToken for FloatNumberPart {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == FLOAT_NUMBER_PART }\n+impl AstToken for FloatNumber {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == FLOAT_NUMBER }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })"}, {"sha": "5908dda8e6383d76cc5ca30dff4f0dc038af7de9", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -799,11 +799,6 @@ pub fn struct_(\n     ))\n }\n \n-pub fn literal(text: &str) -> ast::Literal {\n-    assert_eq!(text.trim(), text);\n-    ast_from_text(&format!(\"fn f() {{ let _ = {}; }}\", text))\n-}\n-\n #[track_caller]\n fn ast_from_text<N: AstNode>(text: &str) -> N {\n     let parse = SourceFile::parse(text);\n@@ -832,7 +827,7 @@ pub fn token(kind: SyntaxKind) -> SyntaxToken {\n pub mod tokens {\n     use once_cell::sync::Lazy;\n \n-    use crate::{AstNode, Parse, SourceFile, SyntaxKind::*, SyntaxToken};\n+    use crate::{ast, AstNode, Parse, SourceFile, SyntaxKind::*, SyntaxToken};\n \n     pub(super) static SOURCE_FILE: Lazy<Parse<SourceFile>> = Lazy::new(|| {\n         SourceFile::parse(\n@@ -863,6 +858,12 @@ pub mod tokens {\n         sf.syntax().first_child_or_token().unwrap().into_token().unwrap()\n     }\n \n+    pub fn literal(text: &str) -> SyntaxToken {\n+        assert_eq!(text.trim(), text);\n+        let lit: ast::Literal = super::ast_from_text(&format!(\"fn f() {{ let _ = {}; }}\", text));\n+        lit.syntax().first_child_or_token().unwrap().into_token().unwrap()\n+    }\n+\n     pub fn single_newline() -> SyntaxToken {\n         let res = SOURCE_FILE\n             .tree()"}, {"sha": "f2153ca92119de982709349ec984c2b6d08c12b6", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -555,9 +555,7 @@ impl ast::FieldExpr {\n         self.syntax\n             .children_with_tokens()\n             // FIXME: Accepting floats here to reject them in validation later\n-            .find(|c| {\n-                c.kind() == SyntaxKind::INT_NUMBER || c.kind() == SyntaxKind::FLOAT_NUMBER_PART\n-            })\n+            .find(|c| c.kind() == SyntaxKind::INT_NUMBER || c.kind() == SyntaxKind::FLOAT_NUMBER)\n             .as_ref()\n             .and_then(SyntaxElement::as_token)\n             .cloned()"}, {"sha": "4b6dc236b534dd5e7b70f68974d92deabe2fe7c4", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -321,7 +321,7 @@ impl ast::IntNumber {\n     }\n }\n \n-impl ast::FloatNumberPart {\n+impl ast::FloatNumber {\n     pub fn suffix(&self) -> Option<&str> {\n         let text = self.text();\n         let mut indices = text.char_indices();\n@@ -355,24 +355,14 @@ impl Radix {\n \n #[cfg(test)]\n mod tests {\n-    use crate::ast::{self, make};\n+    use crate::ast::{self, make, FloatNumber, IntNumber};\n \n     fn check_float_suffix<'a>(lit: &str, expected: impl Into<Option<&'a str>>) {\n-        let suffix = match make::literal(lit).kind() {\n-            ast::LiteralKind::FloatNumber(f) => f.suffix(),\n-            // `1f32` lexes as an INT_NUMBER\n-            ast::LiteralKind::IntNumber(i) => i.suffix().map(|s| s.to_string()),\n-            e => unreachable!(\"{e:?}\"),\n-        };\n-        assert_eq!(suffix.as_deref(), expected.into());\n+        assert_eq!(FloatNumber { syntax: make::tokens::literal(lit) }.suffix(), expected.into());\n     }\n \n     fn check_int_suffix<'a>(lit: &str, expected: impl Into<Option<&'a str>>) {\n-        let i = match make::literal(lit).kind() {\n-            ast::LiteralKind::IntNumber(i) => i,\n-            _ => unreachable!(),\n-        };\n-        assert_eq!(i.suffix(), expected.into());\n+        assert_eq!(IntNumber { syntax: make::tokens::literal(lit) }.suffix(), expected.into());\n     }\n \n     #[test]\n@@ -400,11 +390,12 @@ mod tests {\n     }\n \n     fn check_string_value<'a>(lit: &str, expected: impl Into<Option<&'a str>>) {\n-        let s = match make::literal(&format!(\"\\\"{}\\\"\", lit)).kind() {\n-            ast::LiteralKind::String(s) => s,\n-            _ => unreachable!(),\n-        };\n-        assert_eq!(s.value().as_deref(), expected.into());\n+        assert_eq!(\n+            ast::String { syntax: make::tokens::literal(&format!(\"\\\"{}\\\"\", lit)) }\n+                .value()\n+                .as_deref(),\n+            expected.into()\n+        );\n     }\n \n     #[test]"}, {"sha": "2f6932a1adddabfbb6d4330bdf1415c1e0bd8e71", "filename": "crates/syntax/src/tests/ast_src.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -71,17 +71,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"super\", \"trait\", \"true\", \"try\", \"type\", \"unsafe\", \"use\", \"where\", \"while\", \"yield\",\n     ],\n     contextual_keywords: &[\"auto\", \"default\", \"existential\", \"union\", \"raw\", \"macro_rules\"],\n-    literals: &[\n-        \"INT_NUMBER\",\n-        \"FLOAT_NUMBER_START_0\",\n-        \"FLOAT_NUMBER_START_1\",\n-        \"FLOAT_NUMBER_START_2\",\n-        \"FLOAT_NUMBER_PART\",\n-        \"CHAR\",\n-        \"BYTE\",\n-        \"STRING\",\n-        \"BYTE_STRING\",\n-    ],\n+    literals: &[\"INT_NUMBER\", \"FLOAT_NUMBER\", \"CHAR\", \"BYTE\", \"STRING\", \"BYTE_STRING\"],\n     tokens: &[\"ERROR\", \"IDENT\", \"WHITESPACE\", \"LIFETIME_IDENT\", \"COMMENT\", \"SHEBANG\"],\n     nodes: &[\n         \"SOURCE_FILE\",\n@@ -193,7 +183,6 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"PATH\",\n         \"PATH_SEGMENT\",\n         \"LITERAL\",\n-        \"FLOAT_LITERAL\",\n         \"RENAME\",\n         \"VISIBILITY\",\n         \"WHERE_CLAUSE\","}, {"sha": "4cfb8075cb155c5a47677701d8a50cc2c0938b28", "filename": "crates/syntax/src/tests/sourcegen_ast.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -462,10 +462,6 @@ fn generate_syntax_kinds(grammar: KindsSrc<'_>) -> String {\n             [lifetime_ident] => { $crate::SyntaxKind::LIFETIME_IDENT };\n             [ident] => { $crate::SyntaxKind::IDENT };\n             [shebang] => { $crate::SyntaxKind::SHEBANG };\n-            [float_number_part] => { $crate::SyntaxKind::FLOAT_NUMBER_PART };\n-            [float_number_start_0] => { $crate::SyntaxKind::FLOAT_NUMBER_START_0 };\n-            [float_number_start_1] => { $crate::SyntaxKind::FLOAT_NUMBER_START_1 };\n-            [float_number_start_2] => { $crate::SyntaxKind::FLOAT_NUMBER_START_2 };\n         }\n         pub use T;\n     };\n@@ -589,7 +585,7 @@ impl Field {\n \n fn lower(grammar: &Grammar) -> AstSrc {\n     let mut res = AstSrc {\n-        tokens: \"Whitespace Comment String ByteString IntNumber FloatNumberPart Char Byte Ident\"\n+        tokens: \"Whitespace Comment String ByteString IntNumber FloatNumber Char Byte Ident\"\n             .split_ascii_whitespace()\n             .map(|it| it.to_string())\n             .collect::<Vec<_>>(),"}, {"sha": "c2c2c82e11fbbf0df7125946e3d88d3cd4db5e75", "filename": "crates/syntax/src/validation.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fvalidation.rs?ref=4f6b2a20fd0417c6c1c64163d9ce7a5c915afde1", "patch": "@@ -119,15 +119,8 @@ fn validate_literal(literal: ast::Literal, acc: &mut Vec<SyntaxError>) {\n         text.rfind(end_delimiter).and_then(|end| text.get(prefix_len..end))\n     }\n \n-    let token = literal.value();\n-    let text;\n-    let text = match &token {\n-        rowan::NodeOrToken::Node(node) => {\n-            text = node.text().to_string();\n-            &*text\n-        }\n-        rowan::NodeOrToken::Token(token) => token.text(),\n-    };\n+    let token = literal.token();\n+    let text = token.text();\n \n     // FIXME: lift this lambda refactor to `fn` (https://github.com/rust-analyzer/rust-analyzer/pull/2834#discussion_r366199205)\n     let mut push_err = |prefix_len, (off, err): (usize, unescape::EscapeError)| {"}]}