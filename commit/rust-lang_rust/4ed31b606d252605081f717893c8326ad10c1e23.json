{"sha": "4ed31b606d252605081f717893c8326ad10c1e23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlZDMxYjYwNmQyNTI2MDUwODFmNzE3ODkzYzgzMjZhZDEwYzFlMjM=", "commit": {"author": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2019-02-07T09:51:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-07T09:51:08Z"}, "message": "Merge pull request #3322 from fyrchik/fix/3304\n\ncalculate statement first line properly", "tree": {"sha": "f3ff785f9a9f35e5dee37910d4bfe1b1ed759969", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3ff785f9a9f35e5dee37910d4bfe1b1ed759969"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ed31b606d252605081f717893c8326ad10c1e23", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcW/+MCRBK7hj4Ov3rIwAAdHIIAD1iz1zK0B9i3/pSlI3a6zdr\n5GKqfhtwLAlB46+PnSfXkpbpB/gXEj4ZxTgQ5B/uw4OFzWT9+qz730uHAAX0pea9\n2YiVHDKgIerLPvlyEjptsoazl72EdgAHcesHX0yJ0YOjkdrfn/cHW9ox8y0J+/yv\nSa7+4I6szeeYYgw1YG0zPgK5V4cEfnM/HzWmpMz6ixqvzVbMt/Pm7/3GCNqpJgC7\nwKsyEcCJnW9XtSfCK7f//HjypoQUgstqmi8GCB7Xc1gsmEF03pMX/diMyGTQdLK0\nLiOB7f+gpYpwMsUZOURvXHlWGjzaqmKTmNFGM1FE3eKFfOF4oFb3da21zXZDBAg=\n=9pzQ\n-----END PGP SIGNATURE-----\n", "payload": "tree f3ff785f9a9f35e5dee37910d4bfe1b1ed759969\nparent ecde43e06b6ee52b49ce2cc96c35f9db7a1b4058\nparent 109394536dd05f51559a9b70a2efa018166c5061\nauthor St\u00e9phane Campinas <stephane.campinas@gmail.com> 1549533068 +0100\ncommitter GitHub <noreply@github.com> 1549533068 +0100\n\nMerge pull request #3322 from fyrchik/fix/3304\n\ncalculate statement first line properly"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ed31b606d252605081f717893c8326ad10c1e23", "html_url": "https://github.com/rust-lang/rust/commit/4ed31b606d252605081f717893c8326ad10c1e23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ed31b606d252605081f717893c8326ad10c1e23/comments", "author": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecde43e06b6ee52b49ce2cc96c35f9db7a1b4058", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecde43e06b6ee52b49ce2cc96c35f9db7a1b4058", "html_url": "https://github.com/rust-lang/rust/commit/ecde43e06b6ee52b49ce2cc96c35f9db7a1b4058"}, {"sha": "109394536dd05f51559a9b70a2efa018166c5061", "url": "https://api.github.com/repos/rust-lang/rust/commits/109394536dd05f51559a9b70a2efa018166c5061", "html_url": "https://github.com/rust-lang/rust/commit/109394536dd05f51559a9b70a2efa018166c5061"}], "stats": {"total": 82, "additions": 72, "deletions": 10}, "files": [{"sha": "52b55a9a1752104e7c4521d6cc5ef8746e5366a0", "filename": "src/attr.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4ed31b606d252605081f717893c8326ad10c1e23/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed31b606d252605081f717893c8326ad10c1e23/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=4ed31b606d252605081f717893c8326ad10c1e23", "patch": "@@ -34,6 +34,18 @@ pub fn get_attrs_from_stmt(stmt: &ast::Stmt) -> &[ast::Attribute] {\n     }\n }\n \n+pub fn get_span_without_attrs(stmt: &ast::Stmt) -> Span {\n+    match stmt.node {\n+        ast::StmtKind::Local(ref local) => local.span,\n+        ast::StmtKind::Item(ref item) => item.span,\n+        ast::StmtKind::Expr(ref expr) | ast::StmtKind::Semi(ref expr) => expr.span,\n+        ast::StmtKind::Mac(ref mac) => {\n+            let (ref mac, _, _) = **mac;\n+            mac.span\n+        }\n+    }\n+}\n+\n /// Returns attributes that are within `outer_span`.\n pub fn filter_inline_attrs(attrs: &[ast::Attribute], outer_span: Span) -> Vec<ast::Attribute> {\n     attrs"}, {"sha": "83caaf495fb340ac19b05bf495b11fc8ecab121d", "filename": "src/visitor.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4ed31b606d252605081f717893c8326ad10c1e23/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed31b606d252605081f717893c8326ad10c1e23/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=4ed31b606d252605081f717893c8326ad10c1e23", "patch": "@@ -113,7 +113,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             ast::StmtKind::Local(..) | ast::StmtKind::Expr(..) | ast::StmtKind::Semi(..) => {\n                 let attrs = get_attrs_from_stmt(stmt);\n                 if contains_skip(attrs) {\n-                    self.push_skipped_with_span(attrs, stmt.span());\n+                    self.push_skipped_with_span(attrs, stmt.span(), get_span_without_attrs(stmt));\n                 } else {\n                     let shape = self.shape();\n                     let rewrite = self.with_context(|ctx| stmt.rewrite(&ctx, shape));\n@@ -123,7 +123,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             ast::StmtKind::Mac(ref mac) => {\n                 let (ref mac, _macro_style, ref attrs) = **mac;\n                 if self.visit_attrs(attrs, ast::AttrStyle::Outer) {\n-                    self.push_skipped_with_span(attrs, stmt.span());\n+                    self.push_skipped_with_span(attrs, stmt.span(), get_span_without_attrs(stmt));\n                 } else {\n                     self.visit_mac(mac, None, MacroPosition::Statement);\n                 }\n@@ -331,14 +331,14 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             // For use items, skip rewriting attributes. Just check for a skip attribute.\n             ast::ItemKind::Use(..) => {\n                 if contains_skip(attrs) {\n-                    self.push_skipped_with_span(attrs.as_slice(), item.span());\n+                    self.push_skipped_with_span(attrs.as_slice(), item.span(), item.span());\n                     return;\n                 }\n             }\n             // Module is inline, in this case we treat it like any other item.\n             _ if !is_mod_decl(item) => {\n                 if self.visit_attrs(&item.attrs, ast::AttrStyle::Outer) {\n-                    self.push_skipped_with_span(item.attrs.as_slice(), item.span());\n+                    self.push_skipped_with_span(item.attrs.as_slice(), item.span(), item.span());\n                     return;\n                 }\n             }\n@@ -357,7 +357,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             }\n             _ => {\n                 if self.visit_attrs(&item.attrs, ast::AttrStyle::Outer) {\n-                    self.push_skipped_with_span(item.attrs.as_slice(), item.span());\n+                    self.push_skipped_with_span(item.attrs.as_slice(), item.span(), item.span());\n                     return;\n                 }\n             }\n@@ -474,7 +474,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         skip_out_of_file_lines_range_visitor!(self, ti.span);\n \n         if self.visit_attrs(&ti.attrs, ast::AttrStyle::Outer) {\n-            self.push_skipped_with_span(ti.attrs.as_slice(), ti.span());\n+            self.push_skipped_with_span(ti.attrs.as_slice(), ti.span(), ti.span());\n             return;\n         }\n \n@@ -518,7 +518,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         skip_out_of_file_lines_range_visitor!(self, ii.span);\n \n         if self.visit_attrs(&ii.attrs, ast::AttrStyle::Outer) {\n-            self.push_skipped_with_span(ii.attrs.as_slice(), ii.span());\n+            self.push_skipped_with_span(ii.attrs.as_slice(), ii.span(), ii.span());\n             return;\n         }\n \n@@ -592,16 +592,24 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         self.push_rewrite_inner(span, rewrite);\n     }\n \n-    pub fn push_skipped_with_span(&mut self, attrs: &[ast::Attribute], item_span: Span) {\n+    pub fn push_skipped_with_span(\n+        &mut self,\n+        attrs: &[ast::Attribute],\n+        item_span: Span,\n+        main_span: Span,\n+    ) {\n         self.format_missing_with_indent(source!(self, item_span).lo());\n         // do not take into account the lines with attributes as part of the skipped range\n         let attrs_end = attrs\n             .iter()\n             .map(|attr| self.source_map.lookup_char_pos(attr.span().hi()).line)\n             .max()\n             .unwrap_or(1);\n-        // Add 1 to get the line past the last attribute\n-        let lo = attrs_end + 1;\n+        let first_line = self.source_map.lookup_char_pos(main_span.lo()).line;\n+        // Statement can start after some newlines and/or spaces\n+        // or it can be on the same line as the last attribute.\n+        // So here we need to take a minimum between the two.\n+        let lo = std::cmp::min(attrs_end + 1, first_line);\n         self.push_rewrite_inner(item_span, None);\n         let hi = self.line_number + 1;\n         self.skipped_range.push((lo, hi));"}, {"sha": "cc1910ce257138912e66042861a1e9e7624d3011", "filename": "tests/target/issue-3304.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4ed31b606d252605081f717893c8326ad10c1e23/tests%2Ftarget%2Fissue-3304.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed31b606d252605081f717893c8326ad10c1e23/tests%2Ftarget%2Fissue-3304.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3304.rs?ref=4ed31b606d252605081f717893c8326ad10c1e23", "patch": "@@ -0,0 +1,42 @@\n+// rustfmt-error_on_line_overflow: true\n+\n+#[rustfmt::skip] use one::two::three::four::five::six::seven::eight::night::ten::eleven::twelve::thirteen::fourteen::fiveteen;\n+#[rustfmt::skip]\n+\n+use one::two::three::four::five::six::seven::eight::night::ten::eleven::twelve::thirteen::fourteen::fiveteen;\n+\n+macro_rules! test_macro {\n+    ($($id:ident),*) => {};\n+}\n+\n+macro_rules! test_macro2 {\n+    ($($id:ident),*) => {\n+        1\n+    };\n+}\n+\n+fn main() {\n+    #[rustfmt::skip] test_macro! { one, two, three, four, five, six, seven, eight, night, ten, eleven, twelve, thirteen, fourteen, fiveteen };\n+    #[rustfmt::skip]\n+    \n+    test_macro! { one, two, three, four, five, six, seven, eight, night, ten, eleven, twelve, thirteen, fourteen, fiveteen };\n+}\n+\n+fn test_local() {\n+    #[rustfmt::skip] let x = test_macro! { one, two, three, four, five, six, seven, eight, night, ten, eleven, twelve, thirteen, fourteen, fiveteen };\n+    #[rustfmt::skip]\n+    \n+    let x = test_macro! { one, two, three, four, five, six, seven, eight, night, ten, eleven, twelve, thirteen, fourteen, fiveteen };\n+}\n+\n+fn test_expr(_: [u32]) -> u32 {\n+    #[rustfmt::skip] test_expr([9999999999999, 9999999999999, 9999999999999, 9999999999999, 9999999999999, 9999999999999, 9999999999999, 9999999999999]);\n+    #[rustfmt::skip]\n+    \n+    test_expr([9999999999999, 9999999999999, 9999999999999, 9999999999999, 9999999999999, 9999999999999, 9999999999999, 9999999999999])\n+}\n+\n+#[rustfmt::skip] mod test { use one::two::three::four::five::six::seven::eight::night::ten::eleven::twelve::thirteen::fourteen::fiveteen; }\n+#[rustfmt::skip]\n+\n+mod test { use one::two::three::four::five::six::seven::eight::night::ten::eleven::twelve::thirteen::fourteen::fiveteen; }"}]}