{"sha": "7464a29a37e08626c4b9dbb479e4525e108f0ca6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0NjRhMjlhMzdlMDg2MjZjNGI5ZGJiNDc5ZTQ1MjVlMTA4ZjBjYTY=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-12-05T18:07:11Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-12-05T18:07:11Z"}, "message": "rollup merge of #19474: luqmana/fl\n\nFixes #19339.", "tree": {"sha": "613e66881d27319ecbee152fdf4c9a08f0df42c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/613e66881d27319ecbee152fdf4c9a08f0df42c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7464a29a37e08626c4b9dbb479e4525e108f0ca6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7464a29a37e08626c4b9dbb479e4525e108f0ca6", "html_url": "https://github.com/rust-lang/rust/commit/7464a29a37e08626c4b9dbb479e4525e108f0ca6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7464a29a37e08626c4b9dbb479e4525e108f0ca6/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f173cdba66fd988295b3abe1a355330ddc710eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f173cdba66fd988295b3abe1a355330ddc710eb", "html_url": "https://github.com/rust-lang/rust/commit/6f173cdba66fd988295b3abe1a355330ddc710eb"}, {"sha": "89d09953733e72d61876c633dc0658180aefc4d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/89d09953733e72d61876c633dc0658180aefc4d6", "html_url": "https://github.com/rust-lang/rust/commit/89d09953733e72d61876c633dc0658180aefc4d6"}], "stats": {"total": 46, "additions": 37, "deletions": 9}, "files": [{"sha": "7e5918ea39e1edf6173bb397859f20727e69de57", "filename": "src/etc/gdb_rust_pretty_printing.py", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7464a29a37e08626c4b9dbb479e4525e108f0ca6/src%2Fetc%2Fgdb_rust_pretty_printing.py", "raw_url": "https://github.com/rust-lang/rust/raw/7464a29a37e08626c4b9dbb479e4525e108f0ca6/src%2Fetc%2Fgdb_rust_pretty_printing.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_rust_pretty_printing.py?ref=7464a29a37e08626c4b9dbb479e4525e108f0ca6", "patch": "@@ -54,21 +54,27 @@ def rust_pretty_printer_lookup_function(val):\n       return RustStructPrinter(val, false)\n \n     if enum_member_count == 1:\n-      if enum_members[0].name == None:\n+      first_variant_name = enum_members[0].name\n+      if first_variant_name == None:\n         # This is a singleton enum\n         return rust_pretty_printer_lookup_function(val[enum_members[0]])\n       else:\n-        assert enum_members[0].name.startswith(\"RUST$ENCODED$ENUM$\")\n+        assert first_variant_name.startswith(\"RUST$ENCODED$ENUM$\")\n         # This is a space-optimized enum\n-        last_separator_index = enum_members[0].name.rfind(\"$\")\n+        last_separator_index = first_variant_name.rfind(\"$\")\n         second_last_separator_index = first_variant_name.rfind(\"$\", 0, last_separator_index)\n         disr_field_index = first_variant_name[second_last_separator_index + 1 :\n                                               last_separator_index]\n         disr_field_index = int(disr_field_index)\n \n         sole_variant_val = val[enum_members[0]]\n         disr_field = get_field_at_index(sole_variant_val, disr_field_index)\n-        discriminant = int(sole_variant_val[disr_field])\n+        discriminant = sole_variant_val[disr_field]\n+\n+        # If the discriminant field is a fat pointer we have to consider the\n+        # first word as the true discriminant\n+        if discriminant.type.code == gdb.TYPE_CODE_STRUCT:\n+            discriminant = discriminant[get_field_at_index(discriminant, 0)]\n \n         if discriminant == 0:\n           null_variant_name = first_variant_name[last_separator_index + 1:]\n@@ -173,7 +179,7 @@ def to_string(self):\n \n class IdentityPrinter:\n   def __init__(self, string):\n-    self.string\n+    self.string = string\n \n   def to_string(self):\n     return self.string"}, {"sha": "f4f1a5121d1957a06862c97efa11f89a4fa25c5d", "filename": "src/etc/lldb_rust_formatters.py", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7464a29a37e08626c4b9dbb479e4525e108f0ca6/src%2Fetc%2Flldb_rust_formatters.py", "raw_url": "https://github.com/rust-lang/rust/raw/7464a29a37e08626c4b9dbb479e4525e108f0ca6/src%2Fetc%2Flldb_rust_formatters.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flldb_rust_formatters.py?ref=7464a29a37e08626c4b9dbb479e4525e108f0ca6", "patch": "@@ -138,9 +138,14 @@ def print_enum_val(val, internal_dict):\n         return \"<invalid enum encoding: %s>\" % first_variant_name\n \n       # Read the discriminant\n-      disr_val = val.GetChildAtIndex(0).GetChildAtIndex(disr_field_index).GetValueAsUnsigned()\n+      disr_val = val.GetChildAtIndex(0).GetChildAtIndex(disr_field_index)\n \n-      if disr_val == 0:\n+      # If the discriminant field is a fat pointer we have to consider the\n+      # first word as the true discriminant\n+      if disr_val.GetType().GetTypeClass() == lldb.eTypeClassStruct:\n+          disr_val = disr_val.GetChildAtIndex(0)\n+\n+      if disr_val.GetValueAsUnsigned() == 0:\n         # Null case: Print the name of the null-variant\n         null_variant_name = first_variant_name[last_separator_index + 1:]\n         return null_variant_name"}, {"sha": "76cf3c1149dd552e8665965cabeb1d2b0e3f921b", "filename": "src/test/debuginfo/gdb-pretty-struct-and-enums.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7464a29a37e08626c4b9dbb479e4525e108f0ca6/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7464a29a37e08626c4b9dbb479e4525e108f0ca6/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs?ref=7464a29a37e08626c4b9dbb479e4525e108f0ca6", "patch": "@@ -58,11 +58,17 @@\n // gdb-command: print none\n // gdb-check:$12 = None\n \n+// gdb-command: print some_fat\n+// gdb-check:$13 = Some = {\"abc\"}\n+\n+// gdb-command: print none_fat\n+// gdb-check:$14 = None\n+\n // gdb-command: print nested_variant1\n-// gdb-check:$13 = NestedVariant1 = {NestedStruct = {regular_struct = RegularStruct = {the_first_field = 111, the_second_field = 112.5, the_third_field = true, the_fourth_field = \"NestedStructString1\"}, tuple_struct = TupleStruct = {113.5, 114}, empty_struct = EmptyStruct, c_style_enum = CStyleEnumVar2, mixed_enum = MixedEnumTupleVar = {115, 116, false}}}\n+// gdb-check:$15 = NestedVariant1 = {NestedStruct = {regular_struct = RegularStruct = {the_first_field = 111, the_second_field = 112.5, the_third_field = true, the_fourth_field = \"NestedStructString1\"}, tuple_struct = TupleStruct = {113.5, 114}, empty_struct = EmptyStruct, c_style_enum = CStyleEnumVar2, mixed_enum = MixedEnumTupleVar = {115, 116, false}}}\n \n // gdb-command: print nested_variant2\n-// gdb-check:$14 = NestedVariant2 = {abc = NestedStruct = {regular_struct = RegularStruct = {the_first_field = 117, the_second_field = 118.5, the_third_field = false, the_fourth_field = \"NestedStructString10\"}, tuple_struct = TupleStruct = {119.5, 120}, empty_struct = EmptyStruct, c_style_enum = CStyleEnumVar3, mixed_enum = MixedEnumStructVar = {field1 = 121.5, field2 = -122}}}\n+// gdb-check:$16 = NestedVariant2 = {abc = NestedStruct = {regular_struct = RegularStruct = {the_first_field = 117, the_second_field = 118.5, the_third_field = false, the_fourth_field = \"NestedStructString10\"}, tuple_struct = TupleStruct = {119.5, 120}, empty_struct = EmptyStruct, c_style_enum = CStyleEnumVar3, mixed_enum = MixedEnumStructVar = {field1 = 121.5, field2 = -122}}}\n \n use self::CStyleEnum::{CStyleEnumVar1, CStyleEnumVar2, CStyleEnumVar3};\n use self::MixedEnum::{MixedEnumCStyleVar, MixedEnumTupleVar, MixedEnumStructVar};\n@@ -129,6 +135,8 @@ fn main() {\n \n     let some = Some(110u);\n     let none: Option<int> = None;\n+    let some_fat = Some(\"abc\");\n+    let none_fat: Option<&'static str> = None;\n \n     let nested_variant1 = NestedVariant1(\n         NestedStruct {"}, {"sha": "333a430e3511130c47567d22939ec712869f2aa4", "filename": "src/test/debuginfo/option-like-enum.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7464a29a37e08626c4b9dbb479e4525e108f0ca6/src%2Ftest%2Fdebuginfo%2Foption-like-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7464a29a37e08626c4b9dbb479e4525e108f0ca6/src%2Ftest%2Fdebuginfo%2Foption-like-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Foption-like-enum.rs?ref=7464a29a37e08626c4b9dbb479e4525e108f0ca6", "patch": "@@ -61,6 +61,12 @@\n // lldb-command:print void_droid\n // lldb-check:[...]$5 = Void\n \n+// lldb-command:print some_str\n+// lldb-check:[...]$6 = Some(&str { data_ptr: [...], length: 3 })\n+\n+// lldb-command:print none_str\n+// lldb-check:[...]$7 = None\n+\n \n // If a struct has exactly two variants, one of them is empty, and the other one\n // contains a non-nullable pointer, then this value is used as the discriminator.\n@@ -96,6 +102,9 @@ struct NamedFieldsRepr<'a> {\n \n fn main() {\n \n+    let some_str: Option<&'static str> = Some(\"abc\");\n+    let none_str: Option<&'static str> = None;\n+\n     let some: Option<&u32> = Some(unsafe { std::mem::transmute(0x12345678u) });\n     let none: Option<&u32> = None;\n "}]}