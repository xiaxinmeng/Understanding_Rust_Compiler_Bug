{"sha": "6225607e67d9934bcb8ddd0ab74abe4ea974f178", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMjU2MDdlNjdkOTkzNGJjYjhkZGQwYWI3NGFiZTRlYTk3NGYxNzg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-03T18:13:42Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-03T18:14:59Z"}, "message": "remove bogus example from drop_in_place", "tree": {"sha": "5d18095ef7f8bc2c53aa1ac7dd6f109039af5e7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d18095ef7f8bc2c53aa1ac7dd6f109039af5e7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6225607e67d9934bcb8ddd0ab74abe4ea974f178", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6225607e67d9934bcb8ddd0ab74abe4ea974f178", "html_url": "https://github.com/rust-lang/rust/commit/6225607e67d9934bcb8ddd0ab74abe4ea974f178", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6225607e67d9934bcb8ddd0ab74abe4ea974f178/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c6fb028ca887dff9ec2fe0a90398b6d5bf5fb45", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c6fb028ca887dff9ec2fe0a90398b6d5bf5fb45", "html_url": "https://github.com/rust-lang/rust/commit/8c6fb028ca887dff9ec2fe0a90398b6d5bf5fb45"}], "stats": {"total": 32, "additions": 5, "deletions": 27}, "files": [{"sha": "da781d7e9feeea2fe8f61b93f3675b7755213c09", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 5, "deletions": 27, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6225607e67d9934bcb8ddd0ab74abe4ea974f178/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6225607e67d9934bcb8ddd0ab74abe4ea974f178/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=6225607e67d9934bcb8ddd0ab74abe4ea974f178", "patch": "@@ -100,16 +100,19 @@ pub use unique::Unique;\n ///   as the compiler doesn't need to prove that it's sound to elide the\n ///   copy.\n ///\n+/// Unaligned values cannot be dropped in place, they must be copied to an aligned\n+/// location first using [`ptr::read_unaligned`].\n+///\n /// [`ptr::read`]: ../ptr/fn.read.html\n+/// [`ptr::read_unaligned`]: ../ptr/fn.read_unaligned.html\n ///\n /// # Safety\n ///\n /// Behavior is undefined if any of the following conditions are violated:\n ///\n /// * `to_drop` must be [valid] for reads.\n ///\n-/// * `to_drop` must be properly aligned. See the example below for how to drop\n-///   an unaligned pointer.\n+/// * `to_drop` must be properly aligned.\n ///\n /// Additionally, if `T` is not [`Copy`], using the pointed-to value after\n /// calling `drop_in_place` can cause undefined behavior. Note that `*to_drop =\n@@ -153,31 +156,6 @@ pub use unique::Unique;\n /// assert!(weak.upgrade().is_none());\n /// ```\n ///\n-/// Unaligned values cannot be dropped in place, they must be copied to an aligned\n-/// location first:\n-/// ```\n-/// use std::ptr;\n-/// use std::mem::{self, MaybeUninit};\n-///\n-/// unsafe fn drop_after_copy<T>(to_drop: *mut T) {\n-///     let mut copy: MaybeUninit<T> = MaybeUninit::uninit();\n-///     ptr::copy(to_drop, copy.as_mut_ptr(), 1);\n-///     drop(copy.assume_init());\n-/// }\n-///\n-/// #[repr(packed, C)]\n-/// struct Packed {\n-///     _padding: u8,\n-///     unaligned: Vec<i32>,\n-/// }\n-///\n-/// let mut p = Packed { _padding: 0, unaligned: vec![42] };\n-/// unsafe {\n-///     drop_after_copy(&mut p.unaligned as *mut _);\n-///     mem::forget(p);\n-/// }\n-/// ```\n-///\n /// Notice that the compiler performs this copy automatically when dropping packed structs,\n /// i.e., you do not usually have to worry about such issues unless you call `drop_in_place`\n /// manually."}]}