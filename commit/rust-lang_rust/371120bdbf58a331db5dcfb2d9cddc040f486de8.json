{"sha": "371120bdbf58a331db5dcfb2d9cddc040f486de8", "node_id": "C_kwDOAAsO6NoAKDM3MTEyMGJkYmY1OGEzMzFkYjVkY2ZiMmQ5Y2RkYzA0MGY0ODZkZTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-05T15:30:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-05T15:30:22Z"}, "message": "Auto merge of #10749 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? `@ghost`\n\nchangelog: none", "tree": {"sha": "ae2b79d2d844c134966d2d5577674984eb60e773", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae2b79d2d844c134966d2d5577674984eb60e773"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/371120bdbf58a331db5dcfb2d9cddc040f486de8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/371120bdbf58a331db5dcfb2d9cddc040f486de8", "html_url": "https://github.com/rust-lang/rust/commit/371120bdbf58a331db5dcfb2d9cddc040f486de8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/371120bdbf58a331db5dcfb2d9cddc040f486de8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7173e2599fd96364832c7599bd3edc31f15a914", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7173e2599fd96364832c7599bd3edc31f15a914", "html_url": "https://github.com/rust-lang/rust/commit/d7173e2599fd96364832c7599bd3edc31f15a914"}, {"sha": "79656cc95e0a1156360b678db71b1b851c3d2a61", "url": "https://api.github.com/repos/rust-lang/rust/commits/79656cc95e0a1156360b678db71b1b851c3d2a61", "html_url": "https://github.com/rust-lang/rust/commit/79656cc95e0a1156360b678db71b1b851c3d2a61"}], "stats": {"total": 336, "additions": 109, "deletions": 227}, "files": [{"sha": "ebf5b58a586992f4852d51892bb4c9cdb104f163", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371120bdbf58a331db5dcfb2d9cddc040f486de8/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/371120bdbf58a331db5dcfb2d9cddc040f486de8/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=371120bdbf58a331db5dcfb2d9cddc040f486de8", "patch": "@@ -62,7 +62,7 @@ Current stable, released 2023-04-20\n \n * [`explicit_auto_deref`]: Now considers projections when determining if auto deref is applicable\n   [#10386](https://github.com/rust-lang/rust-clippy/pull/10386)\n-* [`manual_let_else`]: Now considers side effects of branches before linting \n+* [`manual_let_else`]: Now considers side effects of branches before linting\n   [#10336](https://github.com/rust-lang/rust-clippy/pull/10336)\n * [`uninlined_format_args`]: No longer lints for arguments with generic parameters\n   [#10343](https://github.com/rust-lang/rust-clippy/pull/10343)"}, {"sha": "79d0f6f3607932225a93a5ca8d7e8fd745b47727", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=371120bdbf58a331db5dcfb2d9cddc040f486de8", "patch": "@@ -315,7 +315,6 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::methods::CHARS_NEXT_CMP_INFO,\n     crate::methods::CLEAR_WITH_DRAIN_INFO,\n     crate::methods::CLONED_INSTEAD_OF_COPIED_INFO,\n-    crate::methods::CLONE_DOUBLE_REF_INFO,\n     crate::methods::CLONE_ON_COPY_INFO,\n     crate::methods::CLONE_ON_REF_PTR_INFO,\n     crate::methods::COLLAPSIBLE_STR_REPLACE_INFO,"}, {"sha": "03b5a2d6d0829ac4fec38c49eae6adfc5a222a7c", "filename": "clippy_lints/src/default_union_representation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_lints%2Fsrc%2Fdefault_union_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_lints%2Fsrc%2Fdefault_union_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_union_representation.rs?ref=371120bdbf58a331db5dcfb2d9cddc040f486de8", "patch": "@@ -61,7 +61,7 @@ impl<'tcx> LateLintPass<'tcx> for DefaultUnionRepresentation {\n                 None,\n                 &format!(\n                     \"consider annotating `{}` with `#[repr(C)]` to explicitly specify memory layout\",\n-                    cx.tcx.def_path_str(item.owner_id.to_def_id())\n+                    cx.tcx.def_path_str(item.owner_id)\n                 ),\n             );\n         }"}, {"sha": "8f5d319cd4fc1860ec0226720f4d6a50fd54c839", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=371120bdbf58a331db5dcfb2d9cddc040f486de8", "patch": "@@ -517,7 +517,7 @@ fn param_env_for_derived_eq(tcx: TyCtxt<'_>, did: DefId, eq_trait_id: DefId) ->\n         tcx.mk_predicates_from_iter(ty_predicates.iter().map(|&(p, _)| p).chain(\n             params.iter().filter(|&&(_, needs_eq)| needs_eq).map(|&(param, _)| {\n                 tcx.mk_predicate(Binder::dummy(PredicateKind::Clause(Clause::Trait(TraitPredicate {\n-                    trait_ref: tcx.mk_trait_ref(eq_trait_id, [tcx.mk_param_from_def(param)]),\n+                    trait_ref: ty::TraitRef::new(tcx, eq_trait_id, [tcx.mk_param_from_def(param)]),\n                     constness: BoundConstness::NotConst,\n                     polarity: ImplPolarity::Positive,\n                 }))))"}, {"sha": "a51a8ee09f6e562f4ec255fab0bc877f610bb9bf", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=371120bdbf58a331db5dcfb2d9cddc040f486de8", "patch": "@@ -92,11 +92,8 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n                     if trait_item.id.owner_id.def_id == fn_def_id {\n                         // be sure we have `self` parameter in this function\n                         if trait_item.kind == (AssocItemKind::Fn { has_self: true }) {\n-                            trait_self_ty = Some(\n-                                TraitRef::identity(cx.tcx, trait_item.id.owner_id.to_def_id())\n-                                    .self_ty()\n-                                    .skip_binder(),\n-                            );\n+                            trait_self_ty =\n+                                Some(TraitRef::identity(cx.tcx, trait_item.id.owner_id.to_def_id()).self_ty());\n                         }\n                     }\n                 }"}, {"sha": "4762b354392b8f227a787110776c56017b5fc9e7", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=371120bdbf58a331db5dcfb2d9cddc040f486de8", "patch": "@@ -10,7 +10,7 @@ use rustc_span::source_map::Span;\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for usage of the nonexistent `=*`, `=!` and `=-`\n+    /// Checks for usage of the non-existent `=*`, `=!` and `=-`\n     /// operators.\n     ///\n     /// ### Why is this bad?"}, {"sha": "d1314795f580344f096db7750b7a9d5b43f938bc", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=371120bdbf58a331db5dcfb2d9cddc040f486de8", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, FnDecl};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{self, AliasTy, Clause, EarlyBinder, PredicateKind};\n+use rustc_middle::ty::{self, AliasTy, Clause, PredicateKind};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::{sym, Span};\n@@ -66,8 +66,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n         if let ty::Alias(ty::Opaque, AliasTy { def_id, substs, .. }) = *ret_ty.kind() {\n             let preds = cx.tcx.explicit_item_bounds(def_id);\n             let mut is_future = false;\n-            for &(p, _span) in preds {\n-                let p = EarlyBinder(p).subst(cx.tcx, substs);\n+            for (p, _span) in preds.subst_iter_copied(cx.tcx, substs) {\n                 if let Some(trait_pred) = p.to_opt_poly_trait_pred() {\n                     if Some(trait_pred.skip_binder().trait_ref.def_id) == cx.tcx.lang_items().future_trait() {\n                         is_future = true;\n@@ -97,7 +96,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n                                 if let PredicateKind::Clause(Clause::Trait(trait_pred)) =\n                                     obligation.predicate.kind().skip_binder()\n                                 {\n-                                    db.note(&format!(\n+                                    db.note(format!(\n                                         \"`{}` doesn't implement `{}`\",\n                                         trait_pred.self_ty(),\n                                         trait_pred.trait_ref.print_only_trait_path(),"}, {"sha": "3517842a01e7bb8104038977bb288ab8f0ceeb36", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=371120bdbf58a331db5dcfb2d9cddc040f486de8", "patch": "@@ -354,7 +354,7 @@ pub fn register_pre_expansion_lints(store: &mut rustc_lint::LintStore, sess: &Se\n pub fn read_conf(sess: &Session, path: &io::Result<(Option<PathBuf>, Vec<String>)>) -> Conf {\n     if let Ok((_, warnings)) = path {\n         for warning in warnings {\n-            sess.warn(warning);\n+            sess.warn(warning.clone());\n         }\n     }\n     let file_name = match path {"}, {"sha": "65fd50dff58465b3995189c1a51eea6e3aba507a", "filename": "clippy_lints/src/methods/clone_on_copy.rs", "status": "modified", "additions": 2, "deletions": 38, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs?ref=371120bdbf58a331db5dcfb2d9cddc040f486de8", "patch": "@@ -1,15 +1,13 @@\n-use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::get_parent_node;\n use clippy_utils::source::snippet_with_context;\n-use clippy_utils::sugg;\n use clippy_utils::ty::is_copy;\n use rustc_errors::Applicability;\n use rustc_hir::{BindingAnnotation, ByRef, Expr, ExprKind, MatchSource, Node, PatKind, QPath};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, adjustment::Adjust, print::with_forced_trimmed_paths};\n use rustc_span::symbol::{sym, Symbol};\n \n-use super::CLONE_DOUBLE_REF;\n use super::CLONE_ON_COPY;\n \n /// Checks for the `CLONE_ON_COPY` lint.\n@@ -42,41 +40,7 @@ pub(super) fn check(\n \n     let ty = cx.typeck_results().expr_ty(expr);\n     if let ty::Ref(_, inner, _) = arg_ty.kind() {\n-        if let ty::Ref(_, innermost, _) = inner.kind() {\n-            span_lint_and_then(\n-                cx,\n-                CLONE_DOUBLE_REF,\n-                expr.span,\n-                &with_forced_trimmed_paths!(format!(\n-                    \"using `clone` on a double-reference; \\\n-                    this will copy the reference of type `{ty}` instead of cloning the inner type\"\n-                )),\n-                |diag| {\n-                    if let Some(snip) = sugg::Sugg::hir_opt(cx, arg) {\n-                        let mut ty = innermost;\n-                        let mut n = 0;\n-                        while let ty::Ref(_, inner, _) = ty.kind() {\n-                            ty = inner;\n-                            n += 1;\n-                        }\n-                        let refs = \"&\".repeat(n + 1);\n-                        let derefs = \"*\".repeat(n);\n-                        let explicit = with_forced_trimmed_paths!(format!(\"<{refs}{ty}>::clone({snip})\"));\n-                        diag.span_suggestion(\n-                            expr.span,\n-                            \"try dereferencing it\",\n-                            with_forced_trimmed_paths!(format!(\"{refs}({derefs}{}).clone()\", snip.deref())),\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                        diag.span_suggestion(\n-                            expr.span,\n-                            \"or try being explicit if you are sure, that you want to clone a reference\",\n-                            explicit,\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    }\n-                },\n-            );\n+        if let ty::Ref(..) = inner.kind() {\n             return; // don't report clone_on_copy\n         }\n     }"}, {"sha": "06b88e34d2462ba34aec7bec73864776dda1601b", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 28, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=371120bdbf58a331db5dcfb2d9cddc040f486de8", "patch": "@@ -984,29 +984,6 @@ declare_clippy_lint! {\n     \"using 'clone' on a ref-counted pointer\"\n }\n \n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for usage of `.clone()` on an `&&T`.\n-    ///\n-    /// ### Why is this bad?\n-    /// Cloning an `&&T` copies the inner `&T`, instead of\n-    /// cloning the underlying `T`.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// fn main() {\n-    ///     let x = vec![1];\n-    ///     let y = &&x;\n-    ///     let z = y.clone();\n-    ///     println!(\"{:p} {:p}\", *y, z); // prints out the same pointer\n-    /// }\n-    /// ```\n-    #[clippy::version = \"pre 1.29.0\"]\n-    pub CLONE_DOUBLE_REF,\n-    correctness,\n-    \"using `clone` on `&&T`\"\n-}\n-\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for usage of `.to_string()` on an `&&T` where\n@@ -3258,7 +3235,6 @@ impl_lint_pass!(Methods => [\n     CHARS_LAST_CMP,\n     CLONE_ON_COPY,\n     CLONE_ON_REF_PTR,\n-    CLONE_DOUBLE_REF,\n     COLLAPSIBLE_STR_REPLACE,\n     ITER_OVEREAGER_CLONED,\n     CLONED_INSTEAD_OF_COPIED,\n@@ -3500,8 +3476,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 let first_arg_span = first_arg_ty.span;\n                 let first_arg_ty = hir_ty_to_ty(cx.tcx, first_arg_ty);\n                 let self_ty = TraitRef::identity(cx.tcx, item.owner_id.to_def_id())\n-                    .self_ty()\n-                    .skip_binder();\n+                    .self_ty();\n                 wrong_self_convention::check(\n                     cx,\n                     item.ident.name.as_str(),\n@@ -3519,8 +3494,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             if let TraitItemKind::Fn(_, _) = item.kind;\n             let ret_ty = return_ty(cx, item.owner_id);\n             let self_ty = TraitRef::identity(cx.tcx, item.owner_id.to_def_id())\n-                .self_ty()\n-                .skip_binder();\n+                .self_ty();\n             if !ret_ty.contains(self_ty);\n \n             then {"}, {"sha": "91f7ce1dbe58e438c7944854d7ac50ea61371586", "filename": "clippy_lints/src/methods/str_splitn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs?ref=371120bdbf58a331db5dcfb2d9cddc040f486de8", "patch": "@@ -175,13 +175,13 @@ fn check_manual_split_once_indirect(\n             let remove_msg = format!(\"remove the `{iter_ident}` usages\");\n             diag.span_suggestion(\n                 first.span,\n-                &remove_msg,\n+                remove_msg.clone(),\n                 \"\",\n                 app,\n             );\n             diag.span_suggestion(\n                 second.span,\n-                &remove_msg,\n+                remove_msg,\n                 \"\",\n                 app,\n             );"}, {"sha": "7eaa7db78a4706753f84ba60330710ab58117e1c", "filename": "clippy_lints/src/non_send_fields_in_send_ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs?ref=371120bdbf58a331db5dcfb2d9cddc040f486de8", "patch": "@@ -131,13 +131,13 @@ impl<'tcx> LateLintPass<'tcx> for NonSendFieldInSendTy {\n                             for field in non_send_fields {\n                                 diag.span_note(\n                                     field.def.span,\n-                                    &format!(\"it is not safe to send field `{}` to another thread\", field.def.ident.name),\n+                                    format!(\"it is not safe to send field `{}` to another thread\", field.def.ident.name),\n                                 );\n \n                                 match field.generic_params.len() {\n                                     0 => diag.help(\"use a thread-safe type that implements `Send`\"),\n-                                    1 if is_ty_param(field.ty) => diag.help(&format!(\"add `{}: Send` bound in `Send` impl\", field.ty)),\n-                                    _ => diag.help(&format!(\n+                                    1 if is_ty_param(field.ty) => diag.help(format!(\"add `{}: Send` bound in `Send` impl\", field.ty)),\n+                                    _ => diag.help(format!(\n                                         \"add bounds on type parameter{} `{}` that satisfy `{}: Send`\",\n                                         if field.generic_params.len() > 1 { \"s\" } else { \"\" },\n                                         field.generic_params_string(),"}, {"sha": "5e81a01a461ab4c6508affd27e48128d4374885d", "filename": "clippy_lints/src/renamed_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_lints%2Fsrc%2Frenamed_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_lints%2Fsrc%2Frenamed_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Frenamed_lints.rs?ref=371120bdbf58a331db5dcfb2d9cddc040f486de8", "patch": "@@ -30,6 +30,7 @@ pub static RENAMED_LINTS: &[(&str, &str)] = &[\n     (\"clippy::stutter\", \"clippy::module_name_repetitions\"),\n     (\"clippy::to_string_in_display\", \"clippy::recursive_format_impl\"),\n     (\"clippy::zero_width_space\", \"clippy::invisible_characters\"),\n+    (\"clippy::clone_double_ref\", \"suspicious_double_ref_op\"),\n     (\"clippy::drop_bounds\", \"drop_bounds\"),\n     (\"clippy::for_loop_over_option\", \"for_loops_over_fallibles\"),\n     (\"clippy::for_loop_over_result\", \"for_loops_over_fallibles\"),"}, {"sha": "e2cdc48b583c8abcf35c65ab170091f85a9e47ef", "filename": "clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=371120bdbf58a331db5dcfb2d9cddc040f486de8", "patch": "@@ -577,7 +577,7 @@ fn ident_difference_expr_with_base_location(\n         | (AssignOp(_, _, _), AssignOp(_, _, _))\n         | (Assign(_, _, _), Assign(_, _, _))\n         | (TryBlock(_), TryBlock(_))\n-        | (Await(_), Await(_))\n+        | (Await(_, _), Await(_, _))\n         | (Async(_, _), Async(_, _))\n         | (Block(_, _), Block(_, _))\n         | (Closure(_), Closure(_))"}, {"sha": "bb9da3a2047086b46b24c0f55b145431c351381a", "filename": "clippy_lints/src/trailing_empty_array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs?ref=371120bdbf58a331db5dcfb2d9cddc040f486de8", "patch": "@@ -46,7 +46,7 @@ impl<'tcx> LateLintPass<'tcx> for TrailingEmptyArray {\n                 None,\n                 &format!(\n                     \"consider annotating `{}` with `#[repr(C)]` or another `repr` attribute\",\n-                    cx.tcx.def_path_str(item.owner_id.to_def_id())\n+                    cx.tcx.def_path_str(item.owner_id)\n                 ),\n             );\n         }"}, {"sha": "8cc01f1ef9740c68eb93140ab660773cfd47d43f", "filename": "clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fast_utils.rs?ref=371120bdbf58a331db5dcfb2d9cddc040f486de8", "patch": "@@ -143,7 +143,7 @@ pub fn eq_expr(l: &Expr, r: &Expr) -> bool {\n         (Paren(l), _) => eq_expr(l, r),\n         (_, Paren(r)) => eq_expr(l, r),\n         (Err, Err) => true,\n-        (Try(l), Try(r)) | (Await(l), Await(r)) => eq_expr(l, r),\n+        (Try(l), Try(r)) | (Await(l, _), Await(r, _)) => eq_expr(l, r),\n         (Array(l), Array(r)) => over(l, r, |l, r| eq_expr(l, r)),\n         (Tup(l), Tup(r)) => over(l, r, |l, r| eq_expr(l, r)),\n         (Repeat(le, ls), Repeat(re, rs)) => eq_expr(le, re) && eq_expr(&ls.value, &rs.value),"}, {"sha": "49cb9718ef66e201414a13c6f59da771d17111cd", "filename": "clippy_utils/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_utils%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_utils%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fattrs.rs?ref=371120bdbf58a331db5dcfb2d9cddc040f486de8", "patch": "@@ -133,7 +133,7 @@ pub fn get_unique_attr<'a>(\n     let mut unique_attr: Option<&ast::Attribute> = None;\n     for attr in get_attr(sess, attrs, name) {\n         if let Some(duplicate) = unique_attr {\n-            sess.struct_span_err(attr.span, &format!(\"`{name}` is defined multiple times\"))\n+            sess.struct_span_err(attr.span, format!(\"`{name}` is defined multiple times\"))\n                 .span_note(duplicate.span, \"first definition found here\")\n                 .emit();\n         } else {"}, {"sha": "14f7f03016fbe5605110f03918bccade6b086b06", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=371120bdbf58a331db5dcfb2d9cddc040f486de8", "patch": "@@ -162,8 +162,9 @@ impl<'a> Sugg<'a> {\n                 get_snippet(lhs.span),\n                 get_snippet(rhs.span),\n             ),\n-            hir::ExprKind::Cast(lhs, ty) => Sugg::BinOp(AssocOp::As, get_snippet(lhs.span), get_snippet(ty.span)),\n-            hir::ExprKind::Type(lhs, ty) => Sugg::BinOp(AssocOp::Colon, get_snippet(lhs.span), get_snippet(ty.span)),\n+            hir::ExprKind::Cast(lhs, ty) |\n+            //FIXME(chenyukang), remove this after type ascription is removed from AST\n+            hir::ExprKind::Type(lhs, ty) => Sugg::BinOp(AssocOp::As, get_snippet(lhs.span), get_snippet(ty.span)),\n         }\n     }\n \n@@ -253,13 +254,10 @@ impl<'a> Sugg<'a> {\n                 snippet_with_context(cx, lhs.span, ctxt, default, app).0,\n                 snippet_with_context(cx, rhs.span, ctxt, default, app).0,\n             ),\n-            ast::ExprKind::Cast(ref lhs, ref ty) => Sugg::BinOp(\n-                AssocOp::As,\n-                snippet_with_context(cx, lhs.span, ctxt, default, app).0,\n-                snippet_with_context(cx, ty.span, ctxt, default, app).0,\n-            ),\n+            ast::ExprKind::Cast(ref lhs, ref ty) |\n+            //FIXME(chenyukang), remove this after type ascription is removed from AST\n             ast::ExprKind::Type(ref lhs, ref ty) => Sugg::BinOp(\n-                AssocOp::Colon,\n+                AssocOp::As,\n                 snippet_with_context(cx, lhs.span, ctxt, default, app).0,\n                 snippet_with_context(cx, ty.span, ctxt, default, app).0,\n             ),\n@@ -392,7 +390,6 @@ fn binop_to_string(op: AssocOp, lhs: &str, rhs: &str) -> String {\n         AssocOp::As => format!(\"{lhs} as {rhs}\"),\n         AssocOp::DotDot => format!(\"{lhs}..{rhs}\"),\n         AssocOp::DotDotEq => format!(\"{lhs}..={rhs}\"),\n-        AssocOp::Colon => format!(\"{lhs}: {rhs}\"),\n     }\n }\n \n@@ -602,13 +599,13 @@ enum Associativity {\n #[must_use]\n fn associativity(op: AssocOp) -> Associativity {\n     use rustc_ast::util::parser::AssocOp::{\n-        Add, As, Assign, AssignOp, BitAnd, BitOr, BitXor, Colon, Divide, DotDot, DotDotEq, Equal, Greater,\n-        GreaterEqual, LAnd, LOr, Less, LessEqual, Modulus, Multiply, NotEqual, ShiftLeft, ShiftRight, Subtract,\n+        Add, As, Assign, AssignOp, BitAnd, BitOr, BitXor, Divide, DotDot, DotDotEq, Equal, Greater, GreaterEqual, LAnd,\n+        LOr, Less, LessEqual, Modulus, Multiply, NotEqual, ShiftLeft, ShiftRight, Subtract,\n     };\n \n     match op {\n         Assign | AssignOp(_) => Associativity::Right,\n-        Add | BitAnd | BitOr | BitXor | LAnd | LOr | Multiply | As | Colon => Associativity::Both,\n+        Add | BitAnd | BitOr | BitXor | LAnd | LOr | Multiply | As => Associativity::Both,\n         Divide | Equal | Greater | GreaterEqual | Less | LessEqual | Modulus | NotEqual | ShiftLeft | ShiftRight\n         | Subtract => Associativity::Left,\n         DotDot | DotDotEq => Associativity::None,"}, {"sha": "7b4ed77e8edb9eac7570078f927f40c03f48f105", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371120bdbf58a331db5dcfb2d9cddc040f486de8/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=371120bdbf58a331db5dcfb2d9cddc040f486de8", "patch": "@@ -90,7 +90,7 @@ pub fn contains_ty_adt_constructor_opaque<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'\n                         return false;\n                     }\n \n-                    for &(predicate, _span) in cx.tcx.explicit_item_bounds(def_id) {\n+                    for (predicate, _span) in cx.tcx.explicit_item_bounds(def_id).subst_identity_iter_copied() {\n                         match predicate.kind().skip_binder() {\n                             // For `impl Trait<U>`, it will register a predicate of `T: Trait<U>`, so we go through\n                             // and check substitutions to find `U`.\n@@ -226,7 +226,7 @@ pub fn implements_trait_with_env<'tcx>(\n     ty_params: impl IntoIterator<Item = Option<GenericArg<'tcx>>>,\n ) -> bool {\n     // Clippy shouldn't have infer types\n-    assert!(!ty.needs_infer());\n+    assert!(!ty.has_infer());\n \n     let ty = tcx.erase_regions(ty);\n     if ty.has_escaping_bound_vars() {\n@@ -267,7 +267,7 @@ pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n         },\n         ty::Tuple(substs) => substs.iter().any(|ty| is_must_use_ty(cx, ty)),\n         ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) => {\n-            for (predicate, _) in cx.tcx.explicit_item_bounds(*def_id) {\n+            for (predicate, _) in cx.tcx.explicit_item_bounds(def_id).skip_binder() {\n                 if let ty::PredicateKind::Clause(ty::Clause::Trait(trait_predicate)) = predicate.kind().skip_binder() {\n                     if cx.tcx.has_attr(trait_predicate.trait_ref.def_id, sym::must_use) {\n                         return true;\n@@ -743,7 +743,7 @@ fn sig_for_projection<'tcx>(cx: &LateContext<'tcx>, ty: AliasTy<'tcx>) -> Option\n \n     for (pred, _) in cx\n         .tcx\n-        .bound_explicit_item_bounds(ty.def_id)\n+        .explicit_item_bounds(ty.def_id)\n         .subst_iter_copied(cx.tcx, ty.substs)\n     {\n         match pred.kind().skip_binder() {\n@@ -837,7 +837,7 @@ pub fn is_c_void(cx: &LateContext<'_>, ty: Ty<'_>) -> bool {\n     if let ty::Adt(adt, _) = ty.kind()\n         && let &[krate, .., name] = &*cx.get_def_path(adt.did())\n         && let sym::libc | sym::core | sym::std = krate\n-        && name.as_str() == \"c_void\"\n+        && name == rustc_span::sym::c_void\n     {\n         true\n     } else {"}, {"sha": "60b8a5ac0719353b14a0aef3e019b2b40ccdac9f", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371120bdbf58a331db5dcfb2d9cddc040f486de8/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/371120bdbf58a331db5dcfb2d9cddc040f486de8/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=371120bdbf58a331db5dcfb2d9cddc040f486de8", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2023-04-23\"\n+channel = \"nightly-2023-05-05\"\n components = [\"cargo\", \"llvm-tools\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "60482c66da7c437a7f213622c9a4f05aa73b45ad", "filename": "tests/ui/explicit_deref_methods.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371120bdbf58a331db5dcfb2d9cddc040f486de8/tests%2Fui%2Fexplicit_deref_methods.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/371120bdbf58a331db5dcfb2d9cddc040f486de8/tests%2Fui%2Fexplicit_deref_methods.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_deref_methods.fixed?ref=371120bdbf58a331db5dcfb2d9cddc040f486de8", "patch": "@@ -3,7 +3,7 @@\n #![allow(unused_variables)]\n #![allow(\n     clippy::borrow_deref_ref,\n-    clippy::clone_double_ref,\n+    suspicious_double_ref_op,\n     clippy::explicit_auto_deref,\n     clippy::needless_borrow,\n     clippy::uninlined_format_args"}, {"sha": "e3613e216bb223ac7e935d803dd22e810c70b9f1", "filename": "tests/ui/explicit_deref_methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371120bdbf58a331db5dcfb2d9cddc040f486de8/tests%2Fui%2Fexplicit_deref_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371120bdbf58a331db5dcfb2d9cddc040f486de8/tests%2Fui%2Fexplicit_deref_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_deref_methods.rs?ref=371120bdbf58a331db5dcfb2d9cddc040f486de8", "patch": "@@ -3,7 +3,7 @@\n #![allow(unused_variables)]\n #![allow(\n     clippy::borrow_deref_ref,\n-    clippy::clone_double_ref,\n+    suspicious_double_ref_op,\n     clippy::explicit_auto_deref,\n     clippy::needless_borrow,\n     clippy::uninlined_format_args"}, {"sha": "5c6348962a5ebc6ba56034d415a0fda063f7d97a", "filename": "tests/ui/future_not_send.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/371120bdbf58a331db5dcfb2d9cddc040f486de8/tests%2Fui%2Ffuture_not_send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371120bdbf58a331db5dcfb2d9cddc040f486de8/tests%2Fui%2Ffuture_not_send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffuture_not_send.stderr?ref=371120bdbf58a331db5dcfb2d9cddc040f486de8", "patch": "@@ -5,22 +5,22 @@ LL | async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {\n    |                                                              ^^^^ future returned by `private_future` is not `Send`\n    |\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/future_not_send.rs:8:19\n+  --> $DIR/future_not_send.rs:8:20\n    |\n LL | async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {\n    |                         -- has type `std::rc::Rc<[u8]>` which is not `Send`\n LL |     async { true }.await\n-   |                   ^^^^^^ await occurs here, with `rc` maybe used later\n+   |                    ^^^^^ await occurs here, with `rc` maybe used later\n LL | }\n    | - `rc` is later dropped here\n    = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Send`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/future_not_send.rs:8:19\n+  --> $DIR/future_not_send.rs:8:20\n    |\n LL | async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {\n    |                                       ---- has type `&std::cell::Cell<usize>` which is not `Send`\n LL |     async { true }.await\n-   |                   ^^^^^^ await occurs here, with `cell` maybe used later\n+   |                    ^^^^^ await occurs here, with `cell` maybe used later\n LL | }\n    | - `cell` is later dropped here\n    = note: `std::cell::Cell<usize>` doesn't implement `std::marker::Sync`\n@@ -33,12 +33,12 @@ LL | pub async fn public_future(rc: Rc<[u8]>) {\n    |                                          ^ future returned by `public_future` is not `Send`\n    |\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/future_not_send.rs:12:19\n+  --> $DIR/future_not_send.rs:12:20\n    |\n LL | pub async fn public_future(rc: Rc<[u8]>) {\n    |                            -- has type `std::rc::Rc<[u8]>` which is not `Send`\n LL |     async { true }.await;\n-   |                   ^^^^^^ await occurs here, with `rc` maybe used later\n+   |                    ^^^^^ await occurs here, with `rc` maybe used later\n LL | }\n    | - `rc` is later dropped here\n    = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Send`\n@@ -82,12 +82,12 @@ LL |     async fn private_future(&self) -> usize {\n    |                                       ^^^^^ future returned by `private_future` is not `Send`\n    |\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/future_not_send.rs:35:23\n+  --> $DIR/future_not_send.rs:35:24\n    |\n LL |     async fn private_future(&self) -> usize {\n    |                             ----- has type `&Dummy` which is not `Send`\n LL |         async { true }.await;\n-   |                       ^^^^^^ await occurs here, with `&self` maybe used later\n+   |                        ^^^^^ await occurs here, with `&self` maybe used later\n LL |         self.rc.len()\n LL |     }\n    |     - `&self` is later dropped here\n@@ -100,12 +100,12 @@ LL |     pub async fn public_future(&self) {\n    |                                       ^ future returned by `public_future` is not `Send`\n    |\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/future_not_send.rs:40:30\n+  --> $DIR/future_not_send.rs:40:31\n    |\n LL |     pub async fn public_future(&self) {\n    |                                ----- has type `&Dummy` which is not `Send`\n LL |         self.private_future().await;\n-   |                              ^^^^^^ await occurs here, with `&self` maybe used later\n+   |                               ^^^^^ await occurs here, with `&self` maybe used later\n LL |     }\n    |     - `&self` is later dropped here\n    = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Sync`\n@@ -117,12 +117,12 @@ LL | async fn generic_future<T>(t: T) -> T\n    |                                     ^ future returned by `generic_future` is not `Send`\n    |\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/future_not_send.rs:54:19\n+  --> $DIR/future_not_send.rs:54:20\n    |\n LL |     let rt = &t;\n    |         -- has type `&T` which is not `Send`\n LL |     async { true }.await;\n-   |                   ^^^^^^ await occurs here, with `rt` maybe used later\n+   |                    ^^^^^ await occurs here, with `rt` maybe used later\n LL |     t\n LL | }\n    | - `rt` is later dropped here"}, {"sha": "aa3b4f53d72139cf39723aa4aa8f3a96566e957f", "filename": "tests/ui/rename.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371120bdbf58a331db5dcfb2d9cddc040f486de8/tests%2Fui%2Frename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/371120bdbf58a331db5dcfb2d9cddc040f486de8/tests%2Fui%2Frename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.fixed?ref=371120bdbf58a331db5dcfb2d9cddc040f486de8", "patch": "@@ -27,6 +27,7 @@\n #![allow(clippy::module_name_repetitions)]\n #![allow(clippy::recursive_format_impl)]\n #![allow(clippy::invisible_characters)]\n+#![allow(suspicious_double_ref_op)]\n #![allow(drop_bounds)]\n #![allow(for_loops_over_fallibles)]\n #![allow(array_into_iter)]\n@@ -67,6 +68,7 @@\n #![warn(clippy::module_name_repetitions)]\n #![warn(clippy::recursive_format_impl)]\n #![warn(clippy::invisible_characters)]\n+#![warn(suspicious_double_ref_op)]\n #![warn(drop_bounds)]\n #![warn(for_loops_over_fallibles)]\n #![warn(for_loops_over_fallibles)]"}, {"sha": "600ec79fcbf77b027ef13b6be33a150c279b9e14", "filename": "tests/ui/rename.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371120bdbf58a331db5dcfb2d9cddc040f486de8/tests%2Fui%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371120bdbf58a331db5dcfb2d9cddc040f486de8/tests%2Fui%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.rs?ref=371120bdbf58a331db5dcfb2d9cddc040f486de8", "patch": "@@ -27,6 +27,7 @@\n #![allow(clippy::module_name_repetitions)]\n #![allow(clippy::recursive_format_impl)]\n #![allow(clippy::invisible_characters)]\n+#![allow(suspicious_double_ref_op)]\n #![allow(drop_bounds)]\n #![allow(for_loops_over_fallibles)]\n #![allow(array_into_iter)]\n@@ -67,6 +68,7 @@\n #![warn(clippy::stutter)]\n #![warn(clippy::to_string_in_display)]\n #![warn(clippy::zero_width_space)]\n+#![warn(clippy::clone_double_ref)]\n #![warn(clippy::drop_bounds)]\n #![warn(clippy::for_loop_over_option)]\n #![warn(clippy::for_loop_over_result)]"}, {"sha": "70d15408b9fc14eade2bc5d36ced6c9cc23e8ed9", "filename": "tests/ui/rename.stderr", "status": "modified", "additions": 49, "deletions": 43, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/371120bdbf58a331db5dcfb2d9cddc040f486de8/tests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371120bdbf58a331db5dcfb2d9cddc040f486de8/tests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.stderr?ref=371120bdbf58a331db5dcfb2d9cddc040f486de8", "patch": "@@ -1,256 +1,262 @@\n error: lint `clippy::almost_complete_letter_range` has been renamed to `clippy::almost_complete_range`\n-  --> $DIR/rename.rs:42:9\n+  --> $DIR/rename.rs:43:9\n    |\n LL | #![warn(clippy::almost_complete_letter_range)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::almost_complete_range`\n    |\n    = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n \n error: lint `clippy::blacklisted_name` has been renamed to `clippy::disallowed_names`\n-  --> $DIR/rename.rs:43:9\n+  --> $DIR/rename.rs:44:9\n    |\n LL | #![warn(clippy::blacklisted_name)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_names`\n \n error: lint `clippy::block_in_if_condition_expr` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:44:9\n+  --> $DIR/rename.rs:45:9\n    |\n LL | #![warn(clippy::block_in_if_condition_expr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::block_in_if_condition_stmt` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:45:9\n+  --> $DIR/rename.rs:46:9\n    |\n LL | #![warn(clippy::block_in_if_condition_stmt)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::box_vec` has been renamed to `clippy::box_collection`\n-  --> $DIR/rename.rs:46:9\n+  --> $DIR/rename.rs:47:9\n    |\n LL | #![warn(clippy::box_vec)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::box_collection`\n \n error: lint `clippy::const_static_lifetime` has been renamed to `clippy::redundant_static_lifetimes`\n-  --> $DIR/rename.rs:47:9\n+  --> $DIR/rename.rs:48:9\n    |\n LL | #![warn(clippy::const_static_lifetime)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::redundant_static_lifetimes`\n \n error: lint `clippy::cyclomatic_complexity` has been renamed to `clippy::cognitive_complexity`\n-  --> $DIR/rename.rs:48:9\n+  --> $DIR/rename.rs:49:9\n    |\n LL | #![warn(clippy::cyclomatic_complexity)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::cognitive_complexity`\n \n error: lint `clippy::derive_hash_xor_eq` has been renamed to `clippy::derived_hash_with_manual_eq`\n-  --> $DIR/rename.rs:49:9\n+  --> $DIR/rename.rs:50:9\n    |\n LL | #![warn(clippy::derive_hash_xor_eq)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::derived_hash_with_manual_eq`\n \n error: lint `clippy::disallowed_method` has been renamed to `clippy::disallowed_methods`\n-  --> $DIR/rename.rs:50:9\n+  --> $DIR/rename.rs:51:9\n    |\n LL | #![warn(clippy::disallowed_method)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_methods`\n \n error: lint `clippy::disallowed_type` has been renamed to `clippy::disallowed_types`\n-  --> $DIR/rename.rs:51:9\n+  --> $DIR/rename.rs:52:9\n    |\n LL | #![warn(clippy::disallowed_type)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_types`\n \n error: lint `clippy::eval_order_dependence` has been renamed to `clippy::mixed_read_write_in_expression`\n-  --> $DIR/rename.rs:52:9\n+  --> $DIR/rename.rs:53:9\n    |\n LL | #![warn(clippy::eval_order_dependence)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::mixed_read_write_in_expression`\n \n error: lint `clippy::identity_conversion` has been renamed to `clippy::useless_conversion`\n-  --> $DIR/rename.rs:53:9\n+  --> $DIR/rename.rs:54:9\n    |\n LL | #![warn(clippy::identity_conversion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::useless_conversion`\n \n error: lint `clippy::if_let_some_result` has been renamed to `clippy::match_result_ok`\n-  --> $DIR/rename.rs:54:9\n+  --> $DIR/rename.rs:55:9\n    |\n LL | #![warn(clippy::if_let_some_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::match_result_ok`\n \n error: lint `clippy::logic_bug` has been renamed to `clippy::overly_complex_bool_expr`\n-  --> $DIR/rename.rs:55:9\n+  --> $DIR/rename.rs:56:9\n    |\n LL | #![warn(clippy::logic_bug)]\n    |         ^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::overly_complex_bool_expr`\n \n error: lint `clippy::new_without_default_derive` has been renamed to `clippy::new_without_default`\n-  --> $DIR/rename.rs:56:9\n+  --> $DIR/rename.rs:57:9\n    |\n LL | #![warn(clippy::new_without_default_derive)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::new_without_default`\n \n error: lint `clippy::option_and_then_some` has been renamed to `clippy::bind_instead_of_map`\n-  --> $DIR/rename.rs:57:9\n+  --> $DIR/rename.rs:58:9\n    |\n LL | #![warn(clippy::option_and_then_some)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::bind_instead_of_map`\n \n error: lint `clippy::option_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:58:9\n+  --> $DIR/rename.rs:59:9\n    |\n LL | #![warn(clippy::option_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::option_map_unwrap_or` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:59:9\n+  --> $DIR/rename.rs:60:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:60:9\n+  --> $DIR/rename.rs:61:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:61:9\n+  --> $DIR/rename.rs:62:9\n    |\n LL | #![warn(clippy::option_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::ref_in_deref` has been renamed to `clippy::needless_borrow`\n-  --> $DIR/rename.rs:62:9\n+  --> $DIR/rename.rs:63:9\n    |\n LL | #![warn(clippy::ref_in_deref)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::needless_borrow`\n \n error: lint `clippy::result_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:63:9\n+  --> $DIR/rename.rs:64:9\n    |\n LL | #![warn(clippy::result_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::result_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:64:9\n+  --> $DIR/rename.rs:65:9\n    |\n LL | #![warn(clippy::result_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::result_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:65:9\n+  --> $DIR/rename.rs:66:9\n    |\n LL | #![warn(clippy::result_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::single_char_push_str` has been renamed to `clippy::single_char_add_str`\n-  --> $DIR/rename.rs:66:9\n+  --> $DIR/rename.rs:67:9\n    |\n LL | #![warn(clippy::single_char_push_str)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::single_char_add_str`\n \n error: lint `clippy::stutter` has been renamed to `clippy::module_name_repetitions`\n-  --> $DIR/rename.rs:67:9\n+  --> $DIR/rename.rs:68:9\n    |\n LL | #![warn(clippy::stutter)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::module_name_repetitions`\n \n error: lint `clippy::to_string_in_display` has been renamed to `clippy::recursive_format_impl`\n-  --> $DIR/rename.rs:68:9\n+  --> $DIR/rename.rs:69:9\n    |\n LL | #![warn(clippy::to_string_in_display)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::recursive_format_impl`\n \n error: lint `clippy::zero_width_space` has been renamed to `clippy::invisible_characters`\n-  --> $DIR/rename.rs:69:9\n+  --> $DIR/rename.rs:70:9\n    |\n LL | #![warn(clippy::zero_width_space)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::invisible_characters`\n \n+error: lint `clippy::clone_double_ref` has been renamed to `suspicious_double_ref_op`\n+  --> $DIR/rename.rs:71:9\n+   |\n+LL | #![warn(clippy::clone_double_ref)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `suspicious_double_ref_op`\n+\n error: lint `clippy::drop_bounds` has been renamed to `drop_bounds`\n-  --> $DIR/rename.rs:70:9\n+  --> $DIR/rename.rs:72:9\n    |\n LL | #![warn(clippy::drop_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `drop_bounds`\n \n error: lint `clippy::for_loop_over_option` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:71:9\n+  --> $DIR/rename.rs:73:9\n    |\n LL | #![warn(clippy::for_loop_over_option)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::for_loop_over_result` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:72:9\n+  --> $DIR/rename.rs:74:9\n    |\n LL | #![warn(clippy::for_loop_over_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::for_loops_over_fallibles` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:73:9\n+  --> $DIR/rename.rs:75:9\n    |\n LL | #![warn(clippy::for_loops_over_fallibles)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::into_iter_on_array` has been renamed to `array_into_iter`\n-  --> $DIR/rename.rs:74:9\n+  --> $DIR/rename.rs:76:9\n    |\n LL | #![warn(clippy::into_iter_on_array)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `array_into_iter`\n \n error: lint `clippy::invalid_atomic_ordering` has been renamed to `invalid_atomic_ordering`\n-  --> $DIR/rename.rs:75:9\n+  --> $DIR/rename.rs:77:9\n    |\n LL | #![warn(clippy::invalid_atomic_ordering)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_atomic_ordering`\n \n error: lint `clippy::invalid_ref` has been renamed to `invalid_value`\n-  --> $DIR/rename.rs:76:9\n+  --> $DIR/rename.rs:78:9\n    |\n LL | #![warn(clippy::invalid_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_value`\n \n error: lint `clippy::let_underscore_drop` has been renamed to `let_underscore_drop`\n-  --> $DIR/rename.rs:77:9\n+  --> $DIR/rename.rs:79:9\n    |\n LL | #![warn(clippy::let_underscore_drop)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `let_underscore_drop`\n \n error: lint `clippy::mem_discriminant_non_enum` has been renamed to `enum_intrinsics_non_enums`\n-  --> $DIR/rename.rs:78:9\n+  --> $DIR/rename.rs:80:9\n    |\n LL | #![warn(clippy::mem_discriminant_non_enum)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `enum_intrinsics_non_enums`\n \n error: lint `clippy::panic_params` has been renamed to `non_fmt_panics`\n-  --> $DIR/rename.rs:79:9\n+  --> $DIR/rename.rs:81:9\n    |\n LL | #![warn(clippy::panic_params)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `non_fmt_panics`\n \n error: lint `clippy::positional_named_format_parameters` has been renamed to `named_arguments_used_positionally`\n-  --> $DIR/rename.rs:80:9\n+  --> $DIR/rename.rs:82:9\n    |\n LL | #![warn(clippy::positional_named_format_parameters)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `named_arguments_used_positionally`\n \n error: lint `clippy::temporary_cstring_as_ptr` has been renamed to `temporary_cstring_as_ptr`\n-  --> $DIR/rename.rs:81:9\n+  --> $DIR/rename.rs:83:9\n    |\n LL | #![warn(clippy::temporary_cstring_as_ptr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `temporary_cstring_as_ptr`\n \n error: lint `clippy::unknown_clippy_lints` has been renamed to `unknown_lints`\n-  --> $DIR/rename.rs:82:9\n+  --> $DIR/rename.rs:84:9\n    |\n LL | #![warn(clippy::unknown_clippy_lints)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unknown_lints`\n \n error: lint `clippy::unused_label` has been renamed to `unused_labels`\n-  --> $DIR/rename.rs:83:9\n+  --> $DIR/rename.rs:85:9\n    |\n LL | #![warn(clippy::unused_label)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unused_labels`\n \n-error: aborting due to 42 previous errors\n+error: aborting due to 43 previous errors\n "}, {"sha": "7ceed3c75fd85a5b50815a13c0f1ca23644c9048", "filename": "tests/ui/unnecessary_clone.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/371120bdbf58a331db5dcfb2d9cddc040f486de8/tests%2Fui%2Funnecessary_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371120bdbf58a331db5dcfb2d9cddc040f486de8/tests%2Fui%2Funnecessary_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.rs?ref=371120bdbf58a331db5dcfb2d9cddc040f486de8", "patch": "@@ -42,14 +42,6 @@ fn clone_on_copy_generic<T: Copy>(t: T) {\n     Some(t).clone();\n }\n \n-fn clone_on_double_ref() {\n-    let x = vec![1];\n-    let y = &&x;\n-    let z: &Vec<_> = y.clone();\n-\n-    println!(\"{:p} {:p}\", *y, z);\n-}\n-\n mod many_derefs {\n     struct A;\n     struct B;\n@@ -84,11 +76,6 @@ mod many_derefs {\n         let _: E = a.clone();\n         let _: E = *****a;\n     }\n-\n-    fn check(mut encoded: &[u8]) {\n-        let _ = &mut encoded.clone();\n-        let _ = &encoded.clone();\n-    }\n }\n \n mod issue2076 {"}, {"sha": "5686ab6b4531ee60ca0c671ec6d0af45a29a84e5", "filename": "tests/ui/unnecessary_clone.stderr", "status": "modified", "additions": 3, "deletions": 49, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/371120bdbf58a331db5dcfb2d9cddc040f486de8/tests%2Fui%2Funnecessary_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371120bdbf58a331db5dcfb2d9cddc040f486de8/tests%2Fui%2Funnecessary_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.stderr?ref=371120bdbf58a331db5dcfb2d9cddc040f486de8", "patch": "@@ -44,63 +44,17 @@ error: using `clone` on type `Option<T>` which implements the `Copy` trait\n LL |     Some(t).clone();\n    |     ^^^^^^^^^^^^^^^ help: try removing the `clone` call: `Some(t)`\n \n-error: using `clone` on a double-reference; this will copy the reference of type `&Vec<i32>` instead of cloning the inner type\n-  --> $DIR/unnecessary_clone.rs:48:22\n-   |\n-LL |     let z: &Vec<_> = y.clone();\n-   |                      ^^^^^^^^^\n-   |\n-   = note: `#[deny(clippy::clone_double_ref)]` on by default\n-help: try dereferencing it\n-   |\n-LL |     let z: &Vec<_> = &(*y).clone();\n-   |                      ~~~~~~~~~~~~~\n-help: or try being explicit if you are sure, that you want to clone a reference\n-   |\n-LL |     let z: &Vec<_> = <&Vec<i32>>::clone(y);\n-   |                      ~~~~~~~~~~~~~~~~~~~~~\n-\n error: using `clone` on type `E` which implements the `Copy` trait\n-  --> $DIR/unnecessary_clone.rs:84:20\n+  --> $DIR/unnecessary_clone.rs:76:20\n    |\n LL |         let _: E = a.clone();\n    |                    ^^^^^^^^^ help: try dereferencing it: `*****a`\n \n-error: using `clone` on a double-reference; this will copy the reference of type `&[u8]` instead of cloning the inner type\n-  --> $DIR/unnecessary_clone.rs:89:22\n-   |\n-LL |         let _ = &mut encoded.clone();\n-   |                      ^^^^^^^^^^^^^^^\n-   |\n-help: try dereferencing it\n-   |\n-LL |         let _ = &mut &(*encoded).clone();\n-   |                      ~~~~~~~~~~~~~~~~~~~\n-help: or try being explicit if you are sure, that you want to clone a reference\n-   |\n-LL |         let _ = &mut <&[u8]>::clone(encoded);\n-   |                      ~~~~~~~~~~~~~~~~~~~~~~~\n-\n-error: using `clone` on a double-reference; this will copy the reference of type `&[u8]` instead of cloning the inner type\n-  --> $DIR/unnecessary_clone.rs:90:18\n-   |\n-LL |         let _ = &encoded.clone();\n-   |                  ^^^^^^^^^^^^^^^\n-   |\n-help: try dereferencing it\n-   |\n-LL |         let _ = &&(*encoded).clone();\n-   |                  ~~~~~~~~~~~~~~~~~~~\n-help: or try being explicit if you are sure, that you want to clone a reference\n-   |\n-LL |         let _ = &<&[u8]>::clone(encoded);\n-   |                  ~~~~~~~~~~~~~~~~~~~~~~~\n-\n error: using `.clone()` on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:108:14\n+  --> $DIR/unnecessary_clone.rs:95:14\n    |\n LL |         Some(try_opt!(Some(rc)).clone())\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `Rc::<u8>::clone(&try_opt!(Some(rc)))`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 9 previous errors\n "}]}