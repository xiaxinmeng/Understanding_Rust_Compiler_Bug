{"sha": "84c575a21201cdbeb391ff2cfae2fbbccaa76f8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0YzU3NWEyMTIwMWNkYmViMzkxZmYyY2ZhZTJmYmJjY2FhNzZmOGE=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-03-04T22:11:07Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-03-08T21:59:20Z"}, "message": "Restrict fuzzy qualifiers for now", "tree": {"sha": "53db325890176bacca7e17ddd4ac148ac4252f51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53db325890176bacca7e17ddd4ac148ac4252f51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84c575a21201cdbeb391ff2cfae2fbbccaa76f8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84c575a21201cdbeb391ff2cfae2fbbccaa76f8a", "html_url": "https://github.com/rust-lang/rust/commit/84c575a21201cdbeb391ff2cfae2fbbccaa76f8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84c575a21201cdbeb391ff2cfae2fbbccaa76f8a/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ca6f101c1b3a795ff6578bae6e01cb4b818e14c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ca6f101c1b3a795ff6578bae6e01cb4b818e14c", "html_url": "https://github.com/rust-lang/rust/commit/6ca6f101c1b3a795ff6578bae6e01cb4b818e14c"}], "stats": {"total": 73, "additions": 26, "deletions": 47}, "files": [{"sha": "369bc3350b7f6fcafd49cb7ff54c417c188f3edf", "filename": "crates/hir_def/src/import_map.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/84c575a21201cdbeb391ff2cfae2fbbccaa76f8a/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84c575a21201cdbeb391ff2cfae2fbbccaa76f8a/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fimport_map.rs?ref=84c575a21201cdbeb391ff2cfae2fbbccaa76f8a", "patch": "@@ -1094,27 +1094,4 @@ mod tests {\n             expect![[r#\"\"#]],\n         );\n     }\n-\n-    #[test]\n-    fn search_with_path() {\n-        check_search(\n-            r#\"\n-//- /main.rs crate:main deps:dep\n-//- /dep.rs crate:dep\n-pub mod foo {\n-    pub mod bar {\n-        pub mod baz {\n-            pub trait Display {\n-                fn fmt();\n-            }\n-        }\n-    }\n-}\"#,\n-            \"main\",\n-            Query::new(\"baz::fmt\".to_string()).search_mode(SearchMode::Fuzzy),\n-            expect![[r#\"\n-                dep::foo::bar::baz::Display::fmt (a)\n-            \"#]],\n-        );\n-    }\n }"}, {"sha": "8a11cba4110d7f78060ec7e294ef30221be4380d", "filename": "crates/ide_completion/src/completions/flyimport.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/84c575a21201cdbeb391ff2cfae2fbbccaa76f8a/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84c575a21201cdbeb391ff2cfae2fbbccaa76f8a/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=84c575a21201cdbeb391ff2cfae2fbbccaa76f8a", "patch": "@@ -21,8 +21,9 @@\n //! ```\n //!\n //! Also completes associated items, that require trait imports.\n-//! If any unresolved and/or partially-qualified path predeces the input, it will be taken into account: only the items with import string\n-//! containing this whole path will be considered and the corresponding path import will be added:\n+//! If any unresolved and/or partially-qualified path predeces the input, it will be taken into account.\n+//! Currently, only the imports with their import path ending with the whole qialifier will be proposed\n+//! (no fuzzy matching for qualifier).\n //!\n //! ```\n //! mod foo {\n@@ -187,7 +188,6 @@ fn import_assets<'a>(ctx: &'a CompletionContext, fuzzy_name: String) -> Option<I\n             ctx.scope.clone(),\n         )?;\n \n-        // TODO kb bad: with the path prefix, the \"min 3 symbols\" limit applies. Fix in a separate PR on the symbol_index level\n         if matches!(assets_for_path.import_candidate(), ImportCandidate::Path(_))\n             && fuzzy_name_length < 2\n         {\n@@ -937,7 +937,6 @@ mod foo {\n }\n \n fn main() {\n-    let zz = \"sdsd\";\n     bar::Ass$0\n }\"#,\n             expect![[]],"}, {"sha": "9bdc938774b77723ea82b3b2610e88d5c902ef7a", "filename": "crates/ide_db/src/helpers/import_assets.rs", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/84c575a21201cdbeb391ff2cfae2fbbccaa76f8a/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84c575a21201cdbeb391ff2cfae2fbbccaa76f8a/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs?ref=84c575a21201cdbeb391ff2cfae2fbbccaa76f8a", "patch": "@@ -314,19 +314,21 @@ fn import_for_item(\n     let import_path_candidate = mod_path(original_item_candidate)?;\n     let import_path_string = import_path_candidate.to_string();\n \n+    let expected_import_end = if item_as_assoc(db, original_item).is_some() {\n+        unresolved_qualifier.to_string()\n+    } else {\n+        format!(\"{}::{}\", unresolved_qualifier, item_name(db, original_item)?)\n+    };\n     if !import_path_string.contains(unresolved_first_segment)\n-        || !import_path_string.contains(unresolved_qualifier)\n+        || !import_path_string.ends_with(&expected_import_end)\n     {\n         return None;\n     }\n \n     let segment_import =\n         find_import_for_segment(db, original_item_candidate, &unresolved_first_segment)?;\n-    let trait_item_to_import = original_item\n-        .as_module_def_id()\n-        .and_then(|module_def_id| {\n-            ModuleDef::from(module_def_id).as_assoc_item(db)?.containing_trait(db)\n-        })\n+    let trait_item_to_import = item_as_assoc(db, original_item)\n+        .and_then(|assoc| assoc.containing_trait(db))\n         .map(|trait_| ItemInNs::from(ModuleDef::from(trait_)));\n     Some(match (segment_import == original_item_candidate, trait_item_to_import) {\n         (true, Some(_)) => {\n@@ -358,19 +360,15 @@ fn import_for_item(\n \n fn item_for_path_search(db: &RootDatabase, item: ItemInNs) -> Option<ItemInNs> {\n     Some(match item {\n-        ItemInNs::Types(module_def_id) | ItemInNs::Values(module_def_id) => {\n-            let module_def = ModuleDef::from(module_def_id);\n-\n-            match module_def.as_assoc_item(db) {\n-                Some(assoc_item) => match assoc_item.container(db) {\n-                    AssocItemContainer::Trait(trait_) => ItemInNs::from(ModuleDef::from(trait_)),\n-                    AssocItemContainer::Impl(impl_) => {\n-                        ItemInNs::from(ModuleDef::from(impl_.target_ty(db).as_adt()?))\n-                    }\n-                },\n-                None => item,\n-            }\n-        }\n+        ItemInNs::Types(_) | ItemInNs::Values(_) => match item_as_assoc(db, item) {\n+            Some(assoc_item) => match assoc_item.container(db) {\n+                AssocItemContainer::Trait(trait_) => ItemInNs::from(ModuleDef::from(trait_)),\n+                AssocItemContainer::Impl(impl_) => {\n+                    ItemInNs::from(ModuleDef::from(impl_.target_ty(db).as_adt()?))\n+                }\n+            },\n+            None => item,\n+        },\n         ItemInNs::Macros(_) => item,\n     })\n }\n@@ -427,7 +425,7 @@ fn trait_applicable_items(\n \n     let trait_candidates = items_with_candidate_name\n         .into_iter()\n-        .filter_map(|input| ModuleDef::from(input.as_module_def_id()?).as_assoc_item(db))\n+        .filter_map(|input| item_as_assoc(db, input))\n         .filter_map(|assoc| {\n             let assoc_item_trait = assoc.containing_trait(db)?;\n             required_assoc_items.insert(assoc);\n@@ -583,3 +581,8 @@ fn path_import_candidate(\n         None => ImportCandidate::Path(PathImportCandidate { qualifier: Qualifier::Absent, name }),\n     })\n }\n+\n+fn item_as_assoc(db: &RootDatabase, item: ItemInNs) -> Option<AssocItem> {\n+    item.as_module_def_id()\n+        .and_then(|module_def_id| ModuleDef::from(module_def_id).as_assoc_item(db))\n+}"}]}