{"sha": "c900abf42df64d1724d2a435b9ad5351ecbc3081", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5MDBhYmY0MmRmNjRkMTcyNGQyYTQzNWI5YWQ1MzUxZWNiYzMwODE=", "commit": {"author": {"name": "Douglas Campos", "email": "qmx@qmx.me", "date": "2017-09-21T02:51:35Z"}, "committer": {"name": "Douglas Campos", "email": "qmx@qmx.me", "date": "2017-09-25T13:50:37Z"}, "message": "expose ParamEnv as a param", "tree": {"sha": "2a53220b055cc4f0cd4c0566bbcf279747cdf0e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a53220b055cc4f0cd4c0566bbcf279747cdf0e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c900abf42df64d1724d2a435b9ad5351ecbc3081", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c900abf42df64d1724d2a435b9ad5351ecbc3081", "html_url": "https://github.com/rust-lang/rust/commit/c900abf42df64d1724d2a435b9ad5351ecbc3081", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c900abf42df64d1724d2a435b9ad5351ecbc3081/comments", "author": {"login": "qmx", "id": 66734, "node_id": "MDQ6VXNlcjY2NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/66734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qmx", "html_url": "https://github.com/qmx", "followers_url": "https://api.github.com/users/qmx/followers", "following_url": "https://api.github.com/users/qmx/following{/other_user}", "gists_url": "https://api.github.com/users/qmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/qmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qmx/subscriptions", "organizations_url": "https://api.github.com/users/qmx/orgs", "repos_url": "https://api.github.com/users/qmx/repos", "events_url": "https://api.github.com/users/qmx/events{/privacy}", "received_events_url": "https://api.github.com/users/qmx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qmx", "id": 66734, "node_id": "MDQ6VXNlcjY2NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/66734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qmx", "html_url": "https://github.com/qmx", "followers_url": "https://api.github.com/users/qmx/followers", "following_url": "https://api.github.com/users/qmx/following{/other_user}", "gists_url": "https://api.github.com/users/qmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/qmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qmx/subscriptions", "organizations_url": "https://api.github.com/users/qmx/orgs", "repos_url": "https://api.github.com/users/qmx/repos", "events_url": "https://api.github.com/users/qmx/events{/privacy}", "received_events_url": "https://api.github.com/users/qmx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77d3ca1bad2f99fe9a0691551c5524fcc290a406", "url": "https://api.github.com/repos/rust-lang/rust/commits/77d3ca1bad2f99fe9a0691551c5524fcc290a406", "html_url": "https://github.com/rust-lang/rust/commit/77d3ca1bad2f99fe9a0691551c5524fcc290a406"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "06001ecb11b06b77913c1aa14502c365b07b9c1a", "filename": "src/librustc/traits/trans/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c900abf42df64d1724d2a435b9ad5351ecbc3081/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c900abf42df64d1724d2a435b9ad5351ecbc3081/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs?ref=c900abf42df64d1724d2a435b9ad5351ecbc3081", "patch": "@@ -19,7 +19,7 @@ use std::cell::RefCell;\n use std::marker::PhantomData;\n use syntax::ast;\n use syntax_pos::Span;\n-use traits::{FulfillmentContext, Obligation, ObligationCause, Reveal, SelectionContext, Vtable};\n+use traits::{FulfillmentContext, Obligation, ObligationCause, SelectionContext, Vtable};\n use ty::{self, Ty, TyCtxt};\n use ty::subst::{Subst, Substs};\n use ty::fold::{TypeFoldable, TypeFolder};\n@@ -33,12 +33,12 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n     /// obligations *could be* resolved if we wanted to.\n     pub fn trans_fulfill_obligation(self,\n                                     span: Span,\n+                                    param_env: ty::ParamEnv<'tcx>,\n                                     trait_ref: ty::PolyTraitRef<'tcx>)\n                                     -> Vtable<'tcx, ()>\n     {\n         // Remove any references to regions; this helps improve caching.\n         let trait_ref = self.erase_regions(&trait_ref);\n-        let param_env = ty::ParamEnv::empty(Reveal::All);\n \n         self.trans_trait_caches.trait_cache.memoize((param_env, trait_ref), || {\n             debug!(\"trans::fulfill_obligation(trait_ref={:?}, def_id={:?})\","}, {"sha": "8ca843ac5bb82fc8c5f7942f2e94a96e72734f35", "filename": "src/librustc_trans/monomorphize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c900abf42df64d1724d2a435b9ad5351ecbc3081/src%2Flibrustc_trans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c900abf42df64d1724d2a435b9ad5351ecbc3081/src%2Flibrustc_trans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmonomorphize.rs?ref=c900abf42df64d1724d2a435b9ad5351ecbc3081", "patch": "@@ -112,7 +112,7 @@ fn resolve_associated_item<'a, 'tcx>(\n            def_id, trait_id, rcvr_substs);\n \n     let trait_ref = ty::TraitRef::from_method(tcx, trait_id, rcvr_substs);\n-    let vtbl = tcx.trans_fulfill_obligation(DUMMY_SP, ty::Binder(trait_ref));\n+    let vtbl = tcx.trans_fulfill_obligation(DUMMY_SP, ty::ParamEnv::empty(traits::Reveal::All), ty::Binder(trait_ref));\n \n     // Now that we know which impl is being used, we can dispatch to\n     // the actual function:\n@@ -226,7 +226,7 @@ pub fn custom_coerce_unsize_info<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         substs: tcx.mk_substs_trait(source_ty, &[target_ty])\n     });\n \n-    match tcx.trans_fulfill_obligation(DUMMY_SP, trait_ref) {\n+    match tcx.trans_fulfill_obligation(DUMMY_SP, ty::ParamEnv::empty(traits::Reveal::All), trait_ref) {\n         traits::VtableImpl(traits::VtableImplData { impl_def_id, .. }) => {\n             tcx.coerce_unsized_info(impl_def_id).custom_kind.unwrap()\n         }"}]}