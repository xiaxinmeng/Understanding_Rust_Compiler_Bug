{"sha": "cad96b541cb6f0cb9c7eca9c5b96b020f126cd1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhZDk2YjU0MWNiNmYwY2I5YzdlY2E5YzViOTZiMDIwZjEyNmNkMWU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-06T00:04:51Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-06T10:51:02Z"}, "message": "Rollup merge of #21987 - pnkfelix:eschew-arena-in-variance-analysis, r=huonw\n\n Use a TypedArena rather than an Arena for the backing storage of variance analysis.\n\n(The code was not using the main feature of Arena in the first place, since all of the `alloc` calls were on the same type.)", "tree": {"sha": "bcd2ba1ef5efd32698e72ef98d2ff955a426eeca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcd2ba1ef5efd32698e72ef98d2ff955a426eeca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cad96b541cb6f0cb9c7eca9c5b96b020f126cd1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cad96b541cb6f0cb9c7eca9c5b96b020f126cd1e", "html_url": "https://github.com/rust-lang/rust/commit/cad96b541cb6f0cb9c7eca9c5b96b020f126cd1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cad96b541cb6f0cb9c7eca9c5b96b020f126cd1e/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3573aa834627e52583a9895a8bac6206c56eeef", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3573aa834627e52583a9895a8bac6206c56eeef", "html_url": "https://github.com/rust-lang/rust/commit/f3573aa834627e52583a9895a8bac6206c56eeef"}, {"sha": "50c674211390ea56e8c54d8d52ee1e3a6a8f675e", "url": "https://api.github.com/repos/rust-lang/rust/commits/50c674211390ea56e8c54d8d52ee1e3a6a8f675e", "html_url": "https://github.com/rust-lang/rust/commit/50c674211390ea56e8c54d8d52ee1e3a6a8f675e"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "567a388836f25e52c382b36616accb5d5ebf5918", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cad96b541cb6f0cb9c7eca9c5b96b020f126cd1e/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cad96b541cb6f0cb9c7eca9c5b96b020f126cd1e/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=cad96b541cb6f0cb9c7eca9c5b96b020f126cd1e", "patch": "@@ -192,7 +192,7 @@ use self::VarianceTerm::*;\n use self::ParamKind::*;\n \n use arena;\n-use arena::Arena;\n+use arena::TypedArena;\n use middle::resolve_lifetime as rl;\n use middle::subst;\n use middle::subst::{ParamSpace, FnSpace, TypeSpace, SelfSpace, VecPerParamSpace};\n@@ -210,7 +210,7 @@ use util::ppaux::Repr;\n \n pub fn infer_variance(tcx: &ty::ctxt) {\n     let krate = tcx.map.krate();\n-    let mut arena = arena::Arena::new();\n+    let mut arena = arena::TypedArena::new();\n     let terms_cx = determine_parameters_to_be_inferred(tcx, &mut arena, krate);\n     let constraints_cx = add_constraints_from_crate(terms_cx, krate);\n     solve_constraints(constraints_cx);\n@@ -254,7 +254,7 @@ impl<'a> fmt::Debug for VarianceTerm<'a> {\n \n struct TermsContext<'a, 'tcx: 'a> {\n     tcx: &'a ty::ctxt<'tcx>,\n-    arena: &'a Arena,\n+    arena: &'a TypedArena<VarianceTerm<'a>>,\n \n     empty_variances: Rc<ty::ItemVariances>,\n \n@@ -282,7 +282,7 @@ struct InferredInfo<'a> {\n }\n \n fn determine_parameters_to_be_inferred<'a, 'tcx>(tcx: &'a ty::ctxt<'tcx>,\n-                                                 arena: &'a mut Arena,\n+                                                 arena: &'a mut TypedArena<VarianceTerm<'a>>,\n                                                  krate: &ast::Crate)\n                                                  -> TermsContext<'a, 'tcx> {\n     let mut terms_cx = TermsContext {\n@@ -312,7 +312,7 @@ impl<'a, 'tcx> TermsContext<'a, 'tcx> {\n                     index: uint,\n                     param_id: ast::NodeId) {\n         let inf_index = InferredIndex(self.inferred_infos.len());\n-        let term = self.arena.alloc(|| InferredTerm(inf_index));\n+        let term = self.arena.alloc(InferredTerm(inf_index));\n         self.inferred_infos.push(InferredInfo { item_id: item_id,\n                                                 kind: kind,\n                                                 space: space,\n@@ -455,10 +455,10 @@ fn add_constraints_from_crate<'a, 'tcx>(terms_cx: TermsContext<'a, 'tcx>,\n \n     let unsafe_lang_item = terms_cx.tcx.lang_items.unsafe_type();\n \n-    let covariant = terms_cx.arena.alloc(|| ConstantTerm(ty::Covariant));\n-    let contravariant = terms_cx.arena.alloc(|| ConstantTerm(ty::Contravariant));\n-    let invariant = terms_cx.arena.alloc(|| ConstantTerm(ty::Invariant));\n-    let bivariant = terms_cx.arena.alloc(|| ConstantTerm(ty::Bivariant));\n+    let covariant = terms_cx.arena.alloc(ConstantTerm(ty::Covariant));\n+    let contravariant = terms_cx.arena.alloc(ConstantTerm(ty::Contravariant));\n+    let invariant = terms_cx.arena.alloc(ConstantTerm(ty::Invariant));\n+    let bivariant = terms_cx.arena.alloc(ConstantTerm(ty::Bivariant));\n     let mut constraint_cx = ConstraintContext {\n         terms_cx: terms_cx,\n \n@@ -719,7 +719,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n             }\n \n             _ => {\n-                &*self.terms_cx.arena.alloc(|| TransformTerm(v1, v2))\n+                &*self.terms_cx.arena.alloc(TransformTerm(v1, v2))\n             }\n         }\n     }"}]}