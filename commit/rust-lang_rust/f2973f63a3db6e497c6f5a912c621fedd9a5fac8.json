{"sha": "f2973f63a3db6e497c6f5a912c621fedd9a5fac8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyOTczZjYzYTNkYjZlNDk3YzZmNWE5MTJjNjIxZmVkZDlhNWZhYzg=", "commit": {"author": {"name": "Jakub Wieczorek", "email": "jakub@jakub.cc", "date": "2014-10-01T21:28:54Z"}, "committer": {"name": "Jakub Wieczorek", "email": "jakub@jakub.cc", "date": "2014-10-02T19:31:06Z"}, "message": "Fix cross-crate tuple structs in statics\n\nFixes #17169.\nFixes #17649.", "tree": {"sha": "0df1daf70e2ac0a91edfc66096c62376fa422071", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0df1daf70e2ac0a91edfc66096c62376fa422071"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2973f63a3db6e497c6f5a912c621fedd9a5fac8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2973f63a3db6e497c6f5a912c621fedd9a5fac8", "html_url": "https://github.com/rust-lang/rust/commit/f2973f63a3db6e497c6f5a912c621fedd9a5fac8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2973f63a3db6e497c6f5a912c621fedd9a5fac8/comments", "author": null, "committer": null, "parents": [{"sha": "b224dfe1a6ff1b392fd68004cf7a0a04dfec9975", "url": "https://api.github.com/repos/rust-lang/rust/commits/b224dfe1a6ff1b392fd68004cf7a0a04dfec9975", "html_url": "https://github.com/rust-lang/rust/commit/b224dfe1a6ff1b392fd68004cf7a0a04dfec9975"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "d8753c0b12a79e0a97f1b662cda97646d8398e1d", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2973f63a3db6e497c6f5a912c621fedd9a5fac8/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973f63a3db6e497c6f5a912c621fedd9a5fac8/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=f2973f63a3db6e497c6f5a912c621fedd9a5fac8", "patch": "@@ -149,7 +149,7 @@ fn check_expr(v: &mut CheckCrateVisitor, e: &Expr) {\n           }\n           ExprCall(ref callee, _) => {\n             match v.tcx.def_map.borrow().find(&callee.id) {\n-                Some(&DefStruct(..)) => {}    // OK.\n+                Some(&DefStruct(..)) |\n                 Some(&DefVariant(..)) => {}    // OK.\n                 _ => {\n                     span_err!(v.tcx.sess, e.span, E0015,"}, {"sha": "36aa61c5c54f86462e8bdda8329775f23366efcd", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2973f63a3db6e497c6f5a912c621fedd9a5fac8/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973f63a3db6e497c6f5a912c621fedd9a5fac8/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=f2973f63a3db6e497c6f5a912c621fedd9a5fac8", "patch": "@@ -757,7 +757,7 @@ pub fn specialize<'a>(cx: &MatchCheckCtxt, r: &[&'a Pat],\n                 DefStatic(..) =>\n                     cx.tcx.sess.span_bug(pat_span, \"static pattern should've been rewritten\"),\n                 DefVariant(_, id, _) if *constructor != Variant(id) => None,\n-                DefVariant(..) | DefFn(..) | DefStruct(..) => {\n+                DefVariant(..) | DefStruct(..) => {\n                     Some(match args {\n                         &Some(ref args) => args.iter().map(|p| &**p).collect(),\n                         &None => Vec::from_elem(arity, &DUMMY_WILD_PAT)"}, {"sha": "c829b6dab4456ca688097254850287ea468066e3", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2973f63a3db6e497c6f5a912c621fedd9a5fac8/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973f63a3db6e497c6f5a912c621fedd9a5fac8/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=f2973f63a3db6e497c6f5a912c621fedd9a5fac8", "patch": "@@ -1083,7 +1083,6 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n                         if_ok!(self.cat_pattern(subcmt, &**subpat, |x,y,z| op(x,y,z)));\n                     }\n                 }\n-                Some(&def::DefFn(..)) |\n                 Some(&def::DefStruct(..)) => {\n                     for (i, subpat) in subpats.iter().enumerate() {\n                         let subpat_ty = if_ok!(self.pat_ty(&**subpat)); // see (*2)"}, {"sha": "7e415d1f5c1a72dcac132f339b4733a7c74ad0e6", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f2973f63a3db6e497c6f5a912c621fedd9a5fac8/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973f63a3db6e497c6f5a912c621fedd9a5fac8/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=f2973f63a3db6e497c6f5a912c621fedd9a5fac8", "patch": "@@ -931,15 +931,6 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n                             maybe_did.unwrap_or(did)\n                         })\n                     }\n-                    // Tuple struct constructors across crates are identified as\n-                    // DefFn types, so we explicitly handle that case here.\n-                    Some(&def::DefFn(did, _, _)) if !is_local(did) => {\n-                        match csearch::get_tuple_struct_definition_if_ctor(\n-                                    &self.tcx.sess.cstore, did) {\n-                            Some(did) => guard(did),\n-                            None => {}\n-                        }\n-                    }\n                     _ => {}\n                 }\n             }"}, {"sha": "cb93ad1b5cf874df418f737e44b334d74494f077", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f2973f63a3db6e497c6f5a912c621fedd9a5fac8/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973f63a3db6e497c6f5a912c621fedd9a5fac8/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=f2973f63a3db6e497c6f5a912c621fedd9a5fac8", "patch": "@@ -1824,6 +1824,11 @@ impl<'a> Resolver<'a> {\n                 child_name_bindings.define_value(def, DUMMY_SP, is_exported);\n             }\n           }\n+          DefFn(ctor_id, _, true) => {\n+            child_name_bindings.define_value(\n+                csearch::get_tuple_struct_definition_if_ctor(&self.session.cstore, ctor_id)\n+                    .map_or(def, |_| DefStruct(ctor_id)), DUMMY_SP, is_public);\n+          }\n           DefFn(..) | DefStaticMethod(..) | DefStatic(..) => {\n             debug!(\"(building reduced graph for external \\\n                     crate) building value (fn/static) {}\", final_ident);"}, {"sha": "ca62f518619182c1d6033651532e51d836c80aae", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2973f63a3db6e497c6f5a912c621fedd9a5fac8/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973f63a3db6e497c6f5a912c621fedd9a5fac8/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=f2973f63a3db6e497c6f5a912c621fedd9a5fac8", "patch": "@@ -698,7 +698,6 @@ fn any_irrefutable_adt_pat(tcx: &ty::ctxt, m: &[Match], col: uint) -> bool {\n             }\n             ast::PatEnum(..) | ast::PatIdent(_, _, None) => {\n                 match tcx.def_map.borrow().find(&pat.id) {\n-                    Some(&def::DefFn(..)) |\n                     Some(&def::DefStruct(..)) => true,\n                     _ => false\n                 }\n@@ -1646,7 +1645,6 @@ fn bind_irrefutable_pat<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                         }\n                     }\n                 }\n-                Some(def::DefFn(..)) |\n                 Some(def::DefStruct(..)) => {\n                     match *sub_pats {\n                         None => {"}, {"sha": "d56d7a70edfc863b6ff4565209588ac1a9f7ca59", "filename": "src/test/auxiliary/xcrate_unit_struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2973f63a3db6e497c6f5a912c621fedd9a5fac8/src%2Ftest%2Fauxiliary%2Fxcrate_unit_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973f63a3db6e497c6f5a912c621fedd9a5fac8/src%2Ftest%2Fauxiliary%2Fxcrate_unit_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fxcrate_unit_struct.rs?ref=f2973f63a3db6e497c6f5a912c621fedd9a5fac8", "patch": "@@ -19,6 +19,8 @@ pub enum Unit {\n     Argument(Struct)\n }\n \n+pub struct TupleStruct(pub uint, pub &'static str);\n+\n // used by the cfail test\n \n pub struct StructWithFields {"}, {"sha": "f66caa5fbfc6e0a4794740dd9d3b86a849fefc06", "filename": "src/test/run-pass/xcrate-unit-struct.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2973f63a3db6e497c6f5a912c621fedd9a5fac8/src%2Ftest%2Frun-pass%2Fxcrate-unit-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973f63a3db6e497c6f5a912c621fedd9a5fac8/src%2Ftest%2Frun-pass%2Fxcrate-unit-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fxcrate-unit-struct.rs?ref=f2973f63a3db6e497c6f5a912c621fedd9a5fac8", "patch": "@@ -16,17 +16,21 @@ static s2: xcrate_unit_struct::Unit = xcrate_unit_struct::UnitVariant;\n static s3: xcrate_unit_struct::Unit =\n                 xcrate_unit_struct::Argument(xcrate_unit_struct::Struct);\n static s4: xcrate_unit_struct::Unit = xcrate_unit_struct::Argument(s1);\n+static s5: xcrate_unit_struct::TupleStruct = xcrate_unit_struct::TupleStruct(20, \"foo\");\n \n fn f1(_: xcrate_unit_struct::Struct) {}\n fn f2(_: xcrate_unit_struct::Unit) {}\n+fn f3(_: xcrate_unit_struct::TupleStruct) {}\n \n pub fn main() {\n     f1(xcrate_unit_struct::Struct);\n     f2(xcrate_unit_struct::UnitVariant);\n     f2(xcrate_unit_struct::Argument(xcrate_unit_struct::Struct));\n+    f3(xcrate_unit_struct::TupleStruct(10, \"bar\"));\n \n     f1(s1);\n     f2(s2);\n     f2(s3);\n     f2(s4);\n+    f3(s5);\n }"}]}