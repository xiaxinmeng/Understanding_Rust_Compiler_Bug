{"sha": "7f96eb58d2a4eed4651570ce719363008a8f269f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmOTZlYjU4ZDJhNGVlZDQ2NTE1NzBjZTcxOTM2MzAwOGE4ZjI2OWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-24T05:46:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-24T05:46:39Z"}, "message": "auto merge of #7980 : graydon/rust/misc-benchmarks, r=catamorphism\n\nSome machinery for enabling #[bench] benchmarks in std and some examples showing how to write them.", "tree": {"sha": "f674603e356b5ac6d4faa76fdaf5387ecd8cdace", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f674603e356b5ac6d4faa76fdaf5387ecd8cdace"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f96eb58d2a4eed4651570ce719363008a8f269f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f96eb58d2a4eed4651570ce719363008a8f269f", "html_url": "https://github.com/rust-lang/rust/commit/7f96eb58d2a4eed4651570ce719363008a8f269f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f96eb58d2a4eed4651570ce719363008a8f269f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af78e23006d9795bca32267a31e6f3cb9e73a6e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/af78e23006d9795bca32267a31e6f3cb9e73a6e1", "html_url": "https://github.com/rust-lang/rust/commit/af78e23006d9795bca32267a31e6f3cb9e73a6e1"}, {"sha": "978e5d94bc09a18cdfaa699508848bf8a39b46a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/978e5d94bc09a18cdfaa699508848bf8a39b46a9", "html_url": "https://github.com/rust-lang/rust/commit/978e5d94bc09a18cdfaa699508848bf8a39b46a9"}], "stats": {"total": 240, "additions": 238, "deletions": 2}, "files": [{"sha": "722af828d5c115a5e08784f2da9593772cde3913", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7f96eb58d2a4eed4651570ce719363008a8f269f/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f96eb58d2a4eed4651570ce719363008a8f269f/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=7f96eb58d2a4eed4651570ce719363008a8f269f", "patch": "@@ -703,3 +703,27 @@ mod test {\n         assert_eq!(n, None);\n     }\n }\n+\n+#[cfg(test)]\n+mod bench {\n+    use extra::test::BenchHarness;\n+    use rand::{XorShiftRng,RngUtil};\n+    use uint;\n+    use float;\n+\n+    #[bench]\n+    fn uint_to_str_rand(bh: &mut BenchHarness) {\n+        let mut rng = XorShiftRng::new();\n+        do bh.iter {\n+            uint::to_str(rng.gen());\n+        }\n+    }\n+\n+    #[bench]\n+    fn float_to_str_rand(bh: &mut BenchHarness) {\n+        let mut rng = XorShiftRng::new();\n+        do bh.iter {\n+            float::to_str(rng.gen());\n+        }\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "756b4a10d3c9042ed7aa576b50edad859e515fce", "filename": "src/libstd/ops.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7f96eb58d2a4eed4651570ce719363008a8f269f/src%2Flibstd%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f96eb58d2a4eed4651570ce719363008a8f269f/src%2Flibstd%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fops.rs?ref=7f96eb58d2a4eed4651570ce719363008a8f269f", "patch": "@@ -81,3 +81,28 @@ pub trait Shr<RHS,Result> {\n pub trait Index<Index,Result> {\n     fn index(&self, index: &Index) -> Result;\n }\n+\n+#[cfg(test)]\n+mod bench {\n+\n+    use extra::test::BenchHarness;\n+    use ops::Drop;\n+\n+    // Overhead of dtors\n+\n+    struct HasDtor {\n+        x: int\n+    }\n+\n+    impl Drop for HasDtor {\n+        fn drop(&self) {\n+        }\n+    }\n+\n+    #[bench]\n+    fn alloc_obj_with_dtor(bh: &mut BenchHarness) {\n+        do bh.iter {\n+            HasDtor { x : 10 };\n+        }\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "06c743edd2bed2244ad563a5e9de78a1881f6aae", "filename": "src/libstd/rand.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7f96eb58d2a4eed4651570ce719363008a8f269f/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f96eb58d2a4eed4651570ce719363008a8f269f/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=7f96eb58d2a4eed4651570ce719363008a8f269f", "patch": "@@ -890,7 +890,7 @@ pub fn random<T: Rand>() -> T {\n }\n \n #[cfg(test)]\n-mod tests {\n+mod test {\n     use option::{Option, Some};\n     use super::*;\n \n@@ -1109,3 +1109,37 @@ mod tests {\n         }\n     }\n }\n+\n+#[cfg(test)]\n+mod bench {\n+    use extra::test::BenchHarness;\n+    use rand::*;\n+    use sys::size_of;\n+\n+    #[bench]\n+    fn rand_xorshift(bh: &mut BenchHarness) {\n+        let mut rng = XorShiftRng::new();\n+        do bh.iter {\n+            rng.gen::<uint>();\n+        }\n+        bh.bytes = size_of::<uint>() as u64;\n+    }\n+\n+    #[bench]\n+    fn rand_isaac(bh: &mut BenchHarness) {\n+        let mut rng = IsaacRng::new();\n+        do bh.iter {\n+            rng.gen::<uint>();\n+        }\n+        bh.bytes = size_of::<uint>() as u64;\n+    }\n+\n+    #[bench]\n+    fn rand_shuffle_100(bh: &mut BenchHarness) {\n+        let mut rng = XorShiftRng::new();\n+        let x : &mut[uint] = [1,..100];\n+        do bh.iter {\n+            rng.shuffle_mut(x);\n+        }\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "54e9cb263dbe7ffc23835d733d65dfbac1bf451d", "filename": "src/libstd/rt/global_heap.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7f96eb58d2a4eed4651570ce719363008a8f269f/src%2Flibstd%2Frt%2Fglobal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f96eb58d2a4eed4651570ce719363008a8f269f/src%2Flibstd%2Frt%2Fglobal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fglobal_heap.rs?ref=7f96eb58d2a4eed4651570ce719363008a8f269f", "patch": "@@ -101,3 +101,22 @@ pub unsafe fn exchange_free_(ptr: *c_char) {\n pub unsafe fn exchange_free(ptr: *c_char) {\n     free(ptr as *c_void);\n }\n+\n+#[cfg(test)]\n+mod bench {\n+    use extra::test::BenchHarness;\n+\n+    #[bench]\n+    fn alloc_owned_small(bh: &mut BenchHarness) {\n+        do bh.iter {\n+            ~10;\n+        }\n+    }\n+\n+    #[bench]\n+    fn alloc_owned_big(bh: &mut BenchHarness) {\n+        do bh.iter {\n+            ~[10, ..1000];\n+        }\n+    }\n+}"}, {"sha": "85917ae3edf12c1f0206b6512d902303fcd41a14", "filename": "src/libstd/rt/local_heap.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7f96eb58d2a4eed4651570ce719363008a8f269f/src%2Flibstd%2Frt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f96eb58d2a4eed4651570ce719363008a8f269f/src%2Flibstd%2Frt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_heap.rs?ref=7f96eb58d2a4eed4651570ce719363008a8f269f", "patch": "@@ -135,3 +135,22 @@ extern {\n     fn rust_boxed_region_free(region: *BoxedRegion, box: *OpaqueBox);\n     fn rust_current_boxed_region() -> *BoxedRegion;\n }\n+\n+#[cfg(test)]\n+mod bench {\n+    use extra::test::BenchHarness;\n+\n+    #[bench]\n+    fn alloc_managed_small(bh: &mut BenchHarness) {\n+        do bh.iter {\n+            @10;\n+        }\n+    }\n+\n+    #[bench]\n+    fn alloc_managed_big(bh: &mut BenchHarness) {\n+        do bh.iter {\n+            @[10, ..1000];\n+        }\n+    }\n+}"}, {"sha": "bbbc1702c626178aeb9a05fe7c790747c507a1cb", "filename": "src/libstd/std.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7f96eb58d2a4eed4651570ce719363008a8f269f/src%2Flibstd%2Fstd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f96eb58d2a4eed4651570ce719363008a8f269f/src%2Flibstd%2Fstd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rs?ref=7f96eb58d2a4eed4651570ce719363008a8f269f", "patch": "@@ -63,6 +63,9 @@ they contained the following prologue:\n #[deny(non_camel_case_types)];\n #[deny(missing_doc)];\n \n+// Make extra accessible for benchmarking\n+#[cfg(test)] extern mod extra(vers=\"0.8-pre\");\n+\n // Make std testable by not duplicating lang items. See #2912\n #[cfg(test)] extern mod realstd(name = \"std\");\n #[cfg(test)] pub use kinds = realstd::kinds;"}, {"sha": "c49a00502665b21416050fa7ad1a7096992e3a16", "filename": "src/libstd/str.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/7f96eb58d2a4eed4651570ce719363008a8f269f/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f96eb58d2a4eed4651570ce719363008a8f269f/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=7f96eb58d2a4eed4651570ce719363008a8f269f", "patch": "@@ -3532,3 +3532,50 @@ mod tests {\n         assert_eq!(5, sum_len([s.as_slice()]));\n     }\n }\n+\n+#[cfg(test)]\n+mod bench {\n+    use extra::test::BenchHarness;\n+    use str;\n+\n+    #[bench]\n+    fn is_utf8_100_ascii(bh: &mut BenchHarness) {\n+\n+        let s = bytes!(\"Hello there, the quick brown fox jumped over the lazy dog! \\\n+                        Lorem ipsum dolor sit amet, consectetur. \");\n+\n+        assert_eq!(100, s.len());\n+        do bh.iter {\n+            str::is_utf8(s);\n+        }\n+    }\n+\n+    #[bench]\n+    fn is_utf8_100_multibyte(bh: &mut BenchHarness) {\n+        let s = bytes!(\"\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\ud800\udf09\u0e1b\u0e23\u062f\u0648\u0644\u0629 \u0627\u0644\u0643\u0648\u064a\u062a\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\ud800\udf45\ud800\udf3f\ud800\udf3b\ud800\udf46\ud800\udf39\ud800\udf3b\ud800\udf30\");\n+        assert_eq!(100, s.len());\n+        do bh.iter {\n+            str::is_utf8(s);\n+        }\n+    }\n+\n+    #[bench]\n+    fn map_chars_100_ascii(bh: &mut BenchHarness) {\n+        let s = \"HelloHelloHelloHelloHelloHelloHelloHelloHelloHello\\\n+                 HelloHelloHelloHelloHelloHelloHelloHelloHelloHello\";\n+        do bh.iter {\n+            s.map_chars(|c| ((c as uint) + 1) as char);\n+        }\n+    }\n+\n+    #[bench]\n+    fn map_chars_100_multibytes(bh: &mut BenchHarness) {\n+        let s = \"\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\\\n+                 \ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\\\n+                 \ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\\\n+                 \ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\";\n+        do bh.iter {\n+            s.map_chars(|c| ((c as uint) + 1) as char);\n+        }\n+    }\n+}"}, {"sha": "8fcfa083cb65cae8762c50091246d8753af6d7ac", "filename": "src/libstd/util.rs", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/7f96eb58d2a4eed4651570ce719363008a8f269f/src%2Flibstd%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f96eb58d2a4eed4651570ce719363008a8f269f/src%2Flibstd%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Futil.rs?ref=7f96eb58d2a4eed4651570ce719363008a8f269f", "patch": "@@ -195,3 +195,68 @@ mod tests {\n         unsafe { assert_eq!(did_run, true); }\n     }\n }\n+\n+/// Completely miscellaneous language-construct benchmarks.\n+#[cfg(test)]\n+mod bench {\n+\n+    use extra::test::BenchHarness;\n+    use option::{Some,None};\n+\n+    // Static/dynamic method dispatch\n+\n+    struct Struct {\n+        field: int\n+    }\n+\n+    trait Trait {\n+        fn method(&self) -> int;\n+    }\n+\n+    impl Trait for Struct {\n+        fn method(&self) -> int {\n+            self.field\n+        }\n+    }\n+\n+    #[bench]\n+    fn trait_vtable_method_call(bh: &mut BenchHarness) {\n+        let s = Struct { field: 10 };\n+        let t = &s as &Trait;\n+        do bh.iter {\n+            t.method();\n+        }\n+    }\n+\n+    #[bench]\n+    fn trait_static_method_call(bh: &mut BenchHarness) {\n+        let s = Struct { field: 10 };\n+        do bh.iter {\n+            s.method();\n+        }\n+    }\n+\n+    // Overhead of various match forms\n+\n+    #[bench]\n+    fn match_option_some(bh: &mut BenchHarness) {\n+        let x = Some(10);\n+        do bh.iter {\n+            let _q = match x {\n+                Some(y) => y,\n+                None => 11\n+            };\n+        }\n+    }\n+\n+    #[bench]\n+    fn match_vec_pattern(bh: &mut BenchHarness) {\n+        let x = [1,2,3,4,5,6];\n+        do bh.iter {\n+            let _q = match x {\n+                [1,2,3,.._] => 10,\n+                _ => 11\n+            };\n+        }\n+    }\n+}"}, {"sha": "64d17ebc3ad266be757929590ee0929ebc78f57d", "filename": "src/rt/rust_crate_map.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f96eb58d2a4eed4651570ce719363008a8f269f/src%2Frt%2Frust_crate_map.h", "raw_url": "https://github.com/rust-lang/rust/raw/7f96eb58d2a4eed4651570ce719363008a8f269f/src%2Frt%2Frust_crate_map.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_crate_map.h?ref=7f96eb58d2a4eed4651570ce719363008a8f269f", "patch": "@@ -68,7 +68,7 @@ class cratemap {\n             return &reinterpret_cast<const cratemap_v0 *>(this)->\n                 m_children[0];\n         case 1:\n-            return &m_children[1];\n+            return &m_children[0];\n         default: assert(false && \"Unknown crate map version!\");\n             return NULL; // Appease -Werror=return-type\n         }"}]}