{"sha": "601bad86b227a73970a6912d1efea48553728b3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwMWJhZDg2YjIyN2E3Mzk3MGE2OTEyZDFlZmVhNDg1NTM3MjhiM2Q=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-03T10:30:12Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-04T06:08:45Z"}, "message": "cleanup lexer constructors", "tree": {"sha": "665f83bef3dd8f3df01ce98dbaec681ac9914d39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/665f83bef3dd8f3df01ce98dbaec681ac9914d39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/601bad86b227a73970a6912d1efea48553728b3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/601bad86b227a73970a6912d1efea48553728b3d", "html_url": "https://github.com/rust-lang/rust/commit/601bad86b227a73970a6912d1efea48553728b3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/601bad86b227a73970a6912d1efea48553728b3d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "256df83f642ff3cfff82b266edc7d9bbe3fd2ecc", "url": "https://api.github.com/repos/rust-lang/rust/commits/256df83f642ff3cfff82b266edc7d9bbe3fd2ecc", "html_url": "https://github.com/rust-lang/rust/commit/256df83f642ff3cfff82b266edc7d9bbe3fd2ecc"}], "stats": {"total": 49, "additions": 21, "deletions": 28}, "files": [{"sha": "8132074d6e0e7dd1fc307d6e61b929ec1a2de66e", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/601bad86b227a73970a6912d1efea48553728b3d/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601bad86b227a73970a6912d1efea48553728b3d/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=601bad86b227a73970a6912d1efea48553728b3d", "patch": "@@ -38,17 +38,17 @@ pub fn render_with_highlighting(\n         FileName::Custom(String::from(\"rustdoc-highlighting\")),\n         src.to_owned(),\n     );\n-    let highlight_result =\n-        lexer::StringReader::new_or_buffered_errs(&sess, fm, None).and_then(|lexer| {\n-            let mut classifier = Classifier::new(lexer, sess.source_map());\n-\n-            let mut highlighted_source = vec![];\n-            if classifier.write_source(&mut highlighted_source).is_err() {\n-                Err(classifier.lexer.buffer_fatal_errors())\n-            } else {\n-                Ok(String::from_utf8_lossy(&highlighted_source).into_owned())\n-            }\n-        });\n+    let highlight_result = {\n+        let lexer = lexer::StringReader::new(&sess, fm, None);\n+        let mut classifier = Classifier::new(lexer, sess.source_map());\n+\n+        let mut highlighted_source = vec![];\n+        if classifier.write_source(&mut highlighted_source).is_err() {\n+            Err(classifier.lexer.buffer_fatal_errors())\n+        } else {\n+            Ok(String::from_utf8_lossy(&highlighted_source).into_owned())\n+        }\n+    };\n \n     match highlight_result {\n         Ok(highlighted_source) => {"}, {"sha": "0488153e7cb732e418d7a0ee36dab956d26c3a5c", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/601bad86b227a73970a6912d1efea48553728b3d/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601bad86b227a73970a6912d1efea48553728b3d/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=601bad86b227a73970a6912d1efea48553728b3d", "patch": "@@ -32,7 +32,8 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n             dox[code_block.code].to_owned(),\n         );\n \n-        let errors = Lexer::new_or_buffered_errs(&sess, source_file, None).and_then(|mut lexer| {\n+        let errors = {\n+            let mut lexer = Lexer::new(&sess, source_file, None);\n             while let Ok(token::Token { kind, .. }) = lexer.try_next_token() {\n                 if kind == token::Eof {\n                     break;\n@@ -46,7 +47,7 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n             } else {\n                 Ok(())\n             }\n-        });\n+        };\n \n         if let Err(errors) = errors {\n             let mut diag = if let Some(sp) ="}, {"sha": "988f1aa38d926e814e9df631d7b4b1f118cb3e6a", "filename": "src/libsyntax/parse/lexer/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/601bad86b227a73970a6912d1efea48553728b3d/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601bad86b227a73970a6912d1efea48553728b3d/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs?ref=601bad86b227a73970a6912d1efea48553728b3d", "patch": "@@ -346,7 +346,7 @@ pub fn gather_comments(sess: &ParseSess, path: FileName, srdr: &mut dyn Read) ->\n     srdr.read_to_string(&mut src).unwrap();\n     let cm = SourceMap::new(sess.source_map().path_mapping().clone());\n     let source_file = cm.new_source_file(path, src);\n-    let mut rdr = lexer::StringReader::new_raw(sess, source_file, None);\n+    let mut rdr = lexer::StringReader::new(sess, source_file, None);\n \n     let mut comments: Vec<Comment> = Vec::new();\n     let mut code_to_the_left = false; // Only code"}, {"sha": "fd593fb0d090a695dddd4e0d0143979778a26705", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/601bad86b227a73970a6912d1efea48553728b3d/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601bad86b227a73970a6912d1efea48553728b3d/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=601bad86b227a73970a6912d1efea48553728b3d", "patch": "@@ -149,16 +149,15 @@ impl<'a> StringReader<'a> {\n         buffer\n     }\n \n-    /// For comments.rs, which hackily pokes into next_pos and ch\n-    fn new_raw(sess: &'a ParseSess,\n+    pub fn new(sess: &'a ParseSess,\n                source_file: Lrc<syntax_pos::SourceFile>,\n                override_span: Option<Span>) -> Self {\n-        let mut sr = StringReader::new_raw_internal(sess, source_file, override_span);\n+        let mut sr = StringReader::new_internal(sess, source_file, override_span);\n         sr.bump();\n         sr\n     }\n \n-    fn new_raw_internal(sess: &'a ParseSess, source_file: Lrc<syntax_pos::SourceFile>,\n+    fn new_internal(sess: &'a ParseSess, source_file: Lrc<syntax_pos::SourceFile>,\n         override_span: Option<Span>) -> Self\n     {\n         if source_file.src.is_none() {\n@@ -181,13 +180,6 @@ impl<'a> StringReader<'a> {\n         }\n     }\n \n-    pub fn new_or_buffered_errs(sess: &'a ParseSess,\n-                                source_file: Lrc<syntax_pos::SourceFile>,\n-                                override_span: Option<Span>) -> Result<Self, Vec<Diagnostic>> {\n-        let sr = StringReader::new_raw(sess, source_file, override_span);\n-        Ok(sr)\n-    }\n-\n     pub fn retokenize(sess: &'a ParseSess, mut span: Span) -> Self {\n         let begin = sess.source_map().lookup_byte_offset(span.lo());\n         let end = sess.source_map().lookup_byte_offset(span.hi());\n@@ -197,7 +189,7 @@ impl<'a> StringReader<'a> {\n             span = span.shrink_to_lo();\n         }\n \n-        let mut sr = StringReader::new_raw_internal(sess, begin.sf, None);\n+        let mut sr = StringReader::new_internal(sess, begin.sf, None);\n \n         // Seek the lexer to the right byte range.\n         sr.next_pos = span.lo();\n@@ -1428,7 +1420,7 @@ mod tests {\n                  teststr: String)\n                  -> StringReader<'a> {\n         let sf = sm.new_source_file(PathBuf::from(teststr.clone()).into(), teststr);\n-        StringReader::new_raw(sess, sf, None)\n+        StringReader::new(sess, sf, None)\n     }\n \n     #[test]"}, {"sha": "ff2275ca348bc4d5754b7d4ed3d11a7e8a74aaed", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/601bad86b227a73970a6912d1efea48553728b3d/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601bad86b227a73970a6912d1efea48553728b3d/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=601bad86b227a73970a6912d1efea48553728b3d", "patch": "@@ -305,7 +305,7 @@ pub fn maybe_file_to_stream(\n     source_file: Lrc<SourceFile>,\n     override_span: Option<Span>,\n ) -> Result<(TokenStream, Vec<lexer::UnmatchedBrace>), Vec<Diagnostic>> {\n-    let srdr = lexer::StringReader::new_or_buffered_errs(sess, source_file, override_span)?;\n+    let srdr = lexer::StringReader::new(sess, source_file, override_span);\n     let (token_trees, unmatched_braces) = srdr.into_token_trees();\n \n     match token_trees {"}]}