{"sha": "3b857e1c38bc04384da4a0df9e519a601c60265e", "node_id": "C_kwDOAAsO6NoAKDNiODU3ZTFjMzhiYzA0Mzg0ZGE0YTBkZjllNTE5YTYwMWM2MDI2NWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-03T10:15:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-03T10:15:27Z"}, "message": "Auto merge of #14238 - lowr:feat/allow-generate-fn-across-local-crates, r=Veykril\n\nfeat: allow `generate_function` to generate in different local crate\n\nCloses #14224\n\nThis PR allows `generate_function` assist to generate in crates other than the current one. I took a step further from the original request and made it allow to generate in any local crates since it looked reasonable and IDE layer doesn't really know about packages.\n\n(actually we have been checking which crate we're generating in only for methods and not for freestanding functions, so we were providing the assist for `std::foo$0()`; it's both feature and fix in a sense)\n\nThe first commit is a drive-by fix unrelated to the feature.", "tree": {"sha": "fed875f46b771891a564006e51f8f15c0f231df4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fed875f46b771891a564006e51f8f15c0f231df4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b857e1c38bc04384da4a0df9e519a601c60265e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b857e1c38bc04384da4a0df9e519a601c60265e", "html_url": "https://github.com/rust-lang/rust/commit/3b857e1c38bc04384da4a0df9e519a601c60265e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b857e1c38bc04384da4a0df9e519a601c60265e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b441b9c67531481c7c18cd09b2397c0591ae63f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b441b9c67531481c7c18cd09b2397c0591ae63f", "html_url": "https://github.com/rust-lang/rust/commit/9b441b9c67531481c7c18cd09b2397c0591ae63f"}, {"sha": "bda2af71c61d1fd558e1a96a1425bc55020c45d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/bda2af71c61d1fd558e1a96a1425bc55020c45d0", "html_url": "https://github.com/rust-lang/rust/commit/bda2af71c61d1fd558e1a96a1425bc55020c45d0"}], "stats": {"total": 177, "additions": 143, "deletions": 34}, "files": [{"sha": "26f678e5a9b7b1305dbacc77c05b8cd525cc8138", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b857e1c38bc04384da4a0df9e519a601c60265e/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b857e1c38bc04384da4a0df9e519a601c60265e/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=3b857e1c38bc04384da4a0df9e519a601c60265e", "patch": "@@ -489,7 +489,7 @@ impl Module {\n     }\n \n     /// Finds nearest non-block ancestor `Module` (`self` included).\n-    fn nearest_non_block_module(self, db: &dyn HirDatabase) -> Module {\n+    pub fn nearest_non_block_module(self, db: &dyn HirDatabase) -> Module {\n         let mut id = self.id;\n         loop {\n             let def_map = id.def_map(db.upcast());"}, {"sha": "eef037f98754aa8010357002ce7e4ea6bf774827", "filename": "crates/ide-assists/src/handlers/generate_function.rs", "status": "modified", "additions": 125, "deletions": 23, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/3b857e1c38bc04384da4a0df9e519a601c60265e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b857e1c38bc04384da4a0df9e519a601c60265e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=3b857e1c38bc04384da4a0df9e519a601c60265e", "patch": "@@ -5,6 +5,7 @@ use ide_db::{\n     base_db::FileId,\n     defs::{Definition, NameRefClass},\n     famous_defs::FamousDefs,\n+    helpers::is_editable_crate,\n     path_transform::PathTransform,\n     FxHashMap, FxHashSet, RootDatabase, SnippetCap,\n };\n@@ -65,6 +66,13 @@ fn gen_fn(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n     let fn_name = &*name_ref.text();\n     let TargetInfo { target_module, adt_name, target, file, insert_offset } =\n         fn_target_info(ctx, path, &call, fn_name)?;\n+\n+    if let Some(m) = target_module {\n+        if !is_editable_crate(m.krate(), ctx.db()) {\n+            return None;\n+        }\n+    }\n+\n     let function_builder = FunctionBuilder::from_call(ctx, &call, fn_name, target_module, target)?;\n     let text_range = call.syntax().text_range();\n     let label = format!(\"Generate {} function\", function_builder.fn_name);\n@@ -141,12 +149,11 @@ fn gen_method(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n     let receiver_ty = ctx.sema.type_of_expr(&call.receiver()?)?.original().strip_references();\n     let adt = receiver_ty.as_adt()?;\n \n-    let current_module = ctx.sema.scope(call.syntax())?.module();\n     let target_module = adt.module(ctx.sema.db);\n-\n-    if current_module.krate() != target_module.krate() {\n+    if !is_editable_crate(target_module.krate(), ctx.db()) {\n         return None;\n     }\n+\n     let (impl_, file) = get_adt_source(ctx, &adt, fn_name.text().as_str())?;\n     let (target, insert_offset) = get_method_target(ctx, &impl_, &adt)?;\n \n@@ -253,7 +260,7 @@ struct FunctionBuilder {\n     params: ast::ParamList,\n     ret_type: Option<ast::RetType>,\n     should_focus_return_type: bool,\n-    needs_pub: bool,\n+    visibility: Visibility,\n     is_async: bool,\n }\n \n@@ -264,12 +271,14 @@ impl FunctionBuilder {\n         ctx: &AssistContext<'_>,\n         call: &ast::CallExpr,\n         fn_name: &str,\n-        target_module: Option<hir::Module>,\n+        target_module: Option<Module>,\n         target: GeneratedFunctionTarget,\n     ) -> Option<Self> {\n-        let needs_pub = target_module.is_some();\n         let target_module =\n             target_module.or_else(|| ctx.sema.scope(target.syntax()).map(|it| it.module()))?;\n+\n+        let current_module = ctx.sema.scope(call.syntax())?.module();\n+        let visibility = calculate_necessary_visibility(current_module, target_module, ctx);\n         let fn_name = make::name(fn_name);\n         let mut necessary_generic_params = FxHashSet::default();\n         let params = fn_args(\n@@ -300,7 +309,7 @@ impl FunctionBuilder {\n             params,\n             ret_type,\n             should_focus_return_type,\n-            needs_pub,\n+            visibility,\n             is_async,\n         })\n     }\n@@ -313,8 +322,9 @@ impl FunctionBuilder {\n         target_module: Module,\n         target: GeneratedFunctionTarget,\n     ) -> Option<Self> {\n-        let needs_pub =\n-            !module_is_descendant(&ctx.sema.scope(call.syntax())?.module(), &target_module, ctx);\n+        let current_module = ctx.sema.scope(call.syntax())?.module();\n+        let visibility = calculate_necessary_visibility(current_module, target_module, ctx);\n+\n         let fn_name = make::name(&name.text());\n         let mut necessary_generic_params = FxHashSet::default();\n         necessary_generic_params.extend(receiver_ty.generic_params(ctx.db()));\n@@ -346,15 +356,19 @@ impl FunctionBuilder {\n             params,\n             ret_type,\n             should_focus_return_type,\n-            needs_pub,\n+            visibility,\n             is_async,\n         })\n     }\n \n     fn render(self, is_method: bool) -> FunctionTemplate {\n         let placeholder_expr = make::ext::expr_todo();\n         let fn_body = make::block_expr(vec![], Some(placeholder_expr));\n-        let visibility = if self.needs_pub { Some(make::visibility_pub_crate()) } else { None };\n+        let visibility = match self.visibility {\n+            Visibility::None => None,\n+            Visibility::Crate => Some(make::visibility_pub_crate()),\n+            Visibility::Pub => Some(make::visibility_pub()),\n+        };\n         let mut fn_def = make::fn_(\n             visibility,\n             self.fn_name,\n@@ -527,7 +541,7 @@ impl GeneratedFunctionTarget {\n /// Computes parameter list for the generated function.\n fn fn_args(\n     ctx: &AssistContext<'_>,\n-    target_module: hir::Module,\n+    target_module: Module,\n     call: ast::CallableExpr,\n     necessary_generic_params: &mut FxHashSet<hir::GenericParam>,\n ) -> Option<ast::ParamList> {\n@@ -957,13 +971,13 @@ fn fn_arg_name(sema: &Semantics<'_, RootDatabase>, arg_expr: &ast::Expr) -> Stri\n \n fn fn_arg_type(\n     ctx: &AssistContext<'_>,\n-    target_module: hir::Module,\n+    target_module: Module,\n     fn_arg: &ast::Expr,\n     generic_params: &mut FxHashSet<hir::GenericParam>,\n ) -> String {\n     fn maybe_displayed_type(\n         ctx: &AssistContext<'_>,\n-        target_module: hir::Module,\n+        target_module: Module,\n         fn_arg: &ast::Expr,\n         generic_params: &mut FxHashSet<hir::GenericParam>,\n     ) -> Option<String> {\n@@ -1048,16 +1062,29 @@ fn next_space_for_fn_in_impl(impl_: &ast::Impl) -> Option<GeneratedFunctionTarge\n     }\n }\n \n-fn module_is_descendant(module: &hir::Module, ans: &hir::Module, ctx: &AssistContext<'_>) -> bool {\n-    if module == ans {\n-        return true;\n-    }\n-    for c in ans.children(ctx.sema.db) {\n-        if module_is_descendant(module, &c, ctx) {\n-            return true;\n-        }\n+#[derive(Clone, Copy)]\n+enum Visibility {\n+    None,\n+    Crate,\n+    Pub,\n+}\n+\n+fn calculate_necessary_visibility(\n+    current_module: Module,\n+    target_module: Module,\n+    ctx: &AssistContext<'_>,\n+) -> Visibility {\n+    let db = ctx.db();\n+    let current_module = current_module.nearest_non_block_module(db);\n+    let target_module = target_module.nearest_non_block_module(db);\n+\n+    if target_module.krate() != current_module.krate() {\n+        Visibility::Pub\n+    } else if current_module.path_to_root(db).contains(&target_module) {\n+        Visibility::None\n+    } else {\n+        Visibility::Crate\n     }\n-    false\n }\n \n // This is never intended to be used as a generic graph strucuture. If there's ever another need of\n@@ -2656,4 +2683,79 @@ fn main() {\n \",\n         )\n     }\n+\n+    #[test]\n+    fn applicable_in_different_local_crate() {\n+        check_assist(\n+            generate_function,\n+            r\"\n+//- /lib.rs crate:lib new_source_root:local\n+fn dummy() {}\n+//- /main.rs crate:main deps:lib new_source_root:local\n+fn main() {\n+    lib::foo$0();\n+}\n+\",\n+            r\"\n+fn dummy() {}\n+\n+pub fn foo() ${0:-> _} {\n+    todo!()\n+}\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn applicable_in_different_local_crate_method() {\n+        check_assist(\n+            generate_function,\n+            r\"\n+//- /lib.rs crate:lib new_source_root:local\n+pub struct S;\n+//- /main.rs crate:main deps:lib new_source_root:local\n+fn main() {\n+    lib::S.foo$0();\n+}\n+\",\n+            r\"\n+pub struct S;\n+impl S {\n+    pub fn foo(&self) ${0:-> _} {\n+        todo!()\n+    }\n+}\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn not_applicable_in_different_library_crate() {\n+        check_assist_not_applicable(\n+            generate_function,\n+            r\"\n+//- /lib.rs crate:lib new_source_root:library\n+fn dummy() {}\n+//- /main.rs crate:main deps:lib new_source_root:local\n+fn main() {\n+    lib::foo$0();\n+}\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn not_applicable_in_different_library_crate_method() {\n+        check_assist_not_applicable(\n+            generate_function,\n+            r\"\n+//- /lib.rs crate:lib new_source_root:library\n+pub struct S;\n+//- /main.rs crate:main deps:lib new_source_root:local\n+fn main() {\n+    lib::S.foo$0();\n+}\n+\",\n+        );\n+    }\n }"}, {"sha": "e30a3e942c4cc8e79c67f6b0628a3e2f2c4fdde9", "filename": "crates/ide-assists/src/handlers/generate_new.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b857e1c38bc04384da4a0df9e519a601c60265e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b857e1c38bc04384da4a0df9e519a601c60265e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs?ref=3b857e1c38bc04384da4a0df9e519a601c60265e", "patch": "@@ -1,5 +1,5 @@\n use ide_db::{\n-    imports::import_assets::item_for_path_search, use_trivial_contructor::use_trivial_constructor,\n+    imports::import_assets::item_for_path_search, use_trivial_constructor::use_trivial_constructor,\n };\n use itertools::Itertools;\n use stdx::format_to;"}, {"sha": "d5dda6dae4f69d8087238f879417ca89a5546af6", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3b857e1c38bc04384da4a0df9e519a601c60265e/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b857e1c38bc04384da4a0df9e519a601c60265e/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=3b857e1c38bc04384da4a0df9e519a601c60265e", "patch": "@@ -6,13 +6,13 @@ mod tests;\n \n use std::iter;\n \n-use base_db::SourceDatabaseExt;\n use hir::{\n     HasAttrs, Local, Name, PathResolution, ScopeDef, Semantics, SemanticsScope, Type, TypeInfo,\n };\n use ide_db::{\n     base_db::{FilePosition, SourceDatabase},\n     famous_defs::FamousDefs,\n+    helpers::is_editable_crate,\n     FxHashMap, FxHashSet, RootDatabase,\n };\n use syntax::{\n@@ -525,10 +525,11 @@ impl<'a> CompletionContext<'a> {\n                 return Visible::No;\n             }\n             // If the definition location is editable, also show private items\n-            let root_file = defining_crate.root_file(self.db);\n-            let source_root_id = self.db.file_source_root(root_file);\n-            let is_editable = !self.db.source_root(source_root_id).is_library;\n-            return if is_editable { Visible::Editable } else { Visible::No };\n+            return if is_editable_crate(defining_crate, self.db) {\n+                Visible::Editable\n+            } else {\n+                Visible::No\n+            };\n         }\n \n         if self.is_doc_hidden(attrs, defining_crate) {"}, {"sha": "8e3b1eef15b2d2c7f1611398d1179f1d95ac1928", "filename": "crates/ide-db/src/helpers.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3b857e1c38bc04384da4a0df9e519a601c60265e/crates%2Fide-db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b857e1c38bc04384da4a0df9e519a601c60265e/crates%2Fide-db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fhelpers.rs?ref=3b857e1c38bc04384da4a0df9e519a601c60265e", "patch": "@@ -2,8 +2,8 @@\n \n use std::collections::VecDeque;\n \n-use base_db::FileId;\n-use hir::{ItemInNs, ModuleDef, Name, Semantics};\n+use base_db::{FileId, SourceDatabaseExt};\n+use hir::{Crate, ItemInNs, ModuleDef, Name, Semantics};\n use syntax::{\n     ast::{self, make},\n     AstToken, SyntaxKind, SyntaxToken, TokenAtOffset,\n@@ -103,3 +103,9 @@ pub fn lint_eq_or_in_group(lint: &str, lint_is: &str) -> bool {\n         false\n     }\n }\n+\n+pub fn is_editable_crate(krate: Crate, db: &RootDatabase) -> bool {\n+    let root_file = krate.root_file(db);\n+    let source_root_id = db.file_source_root(root_file);\n+    !db.source_root(source_root_id).is_library\n+}"}, {"sha": "e75694e50fda6fe3e1bd17a7a82df4a0af5034ea", "filename": "crates/ide-db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b857e1c38bc04384da4a0df9e519a601c60265e/crates%2Fide-db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b857e1c38bc04384da4a0df9e519a601c60265e/crates%2Fide-db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Flib.rs?ref=3b857e1c38bc04384da4a0df9e519a601c60265e", "patch": "@@ -22,7 +22,7 @@ pub mod source_change;\n pub mod symbol_index;\n pub mod traits;\n pub mod ty_filter;\n-pub mod use_trivial_contructor;\n+pub mod use_trivial_constructor;\n \n pub mod imports {\n     pub mod import_assets;"}, {"sha": "39431bed3821c8e5560a1dc13c0078f2f30dba56", "filename": "crates/ide-db/src/use_trivial_constructor.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3b857e1c38bc04384da4a0df9e519a601c60265e/crates%2Fide-db%2Fsrc%2Fuse_trivial_constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b857e1c38bc04384da4a0df9e519a601c60265e/crates%2Fide-db%2Fsrc%2Fuse_trivial_constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fuse_trivial_constructor.rs?ref=3b857e1c38bc04384da4a0df9e519a601c60265e", "previous_filename": "crates/ide-db/src/use_trivial_contructor.rs"}, {"sha": "14039087b3fd669c5a86e9170849f5085052924f", "filename": "crates/ide-diagnostics/src/handlers/missing_fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b857e1c38bc04384da4a0df9e519a601c60265e/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b857e1c38bc04384da4a0df9e519a601c60265e/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs?ref=3b857e1c38bc04384da4a0df9e519a601c60265e", "patch": "@@ -5,7 +5,7 @@ use hir::{\n };\n use ide_db::{\n     assists::Assist, famous_defs::FamousDefs, imports::import_assets::item_for_path_search,\n-    source_change::SourceChange, use_trivial_contructor::use_trivial_constructor, FxHashMap,\n+    source_change::SourceChange, use_trivial_constructor::use_trivial_constructor, FxHashMap,\n };\n use stdx::format_to;\n use syntax::{"}]}