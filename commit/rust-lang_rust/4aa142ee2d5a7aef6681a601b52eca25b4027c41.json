{"sha": "4aa142ee2d5a7aef6681a601b52eca25b4027c41", "node_id": "C_kwDOAAsO6NoAKDRhYTE0MmVlMmQ1YTdhZWY2NjgxYTYwMWI1MmVjYTI1YjQwMjdjNDE", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-02-22T16:47:00Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-02-22T16:49:06Z"}, "message": "Prevent duplicated imports", "tree": {"sha": "3383c964039fde4714542761e78f0fa9d6bb8312", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3383c964039fde4714542761e78f0fa9d6bb8312"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4aa142ee2d5a7aef6681a601b52eca25b4027c41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4aa142ee2d5a7aef6681a601b52eca25b4027c41", "html_url": "https://github.com/rust-lang/rust/commit/4aa142ee2d5a7aef6681a601b52eca25b4027c41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4aa142ee2d5a7aef6681a601b52eca25b4027c41/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9dba83f63237c01d2f9a30ac08787997c759f49", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9dba83f63237c01d2f9a30ac08787997c759f49", "html_url": "https://github.com/rust-lang/rust/commit/a9dba83f63237c01d2f9a30ac08787997c759f49"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "54825e55ba3758d331ddcf451514c437d348e47b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4aa142ee2d5a7aef6681a601b52eca25b4027c41/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa142ee2d5a7aef6681a601b52eca25b4027c41/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4aa142ee2d5a7aef6681a601b52eca25b4027c41", "patch": "@@ -77,7 +77,7 @@ pub(crate) fn clean_doc_module<'tcx>(doc: &DocModule<'tcx>, cx: &mut DocContext<\n     // This covers the case where somebody does an import which should pull in an item,\n     // but there's already an item with the same namespace and same name. Rust gives\n     // priority to the not-imported one, so we should, too.\n-    items.extend(doc.items.iter().flat_map(|(item, renamed, import_id)| {\n+    items.extend(doc.items.values().flat_map(|(item, renamed, import_id)| {\n         // First, lower everything other than imports.\n         if matches!(item.kind, hir::ItemKind::Use(_, hir::UseKind::Glob)) {\n             return Vec::new();\n@@ -90,7 +90,7 @@ pub(crate) fn clean_doc_module<'tcx>(doc: &DocModule<'tcx>, cx: &mut DocContext<\n         }\n         v\n     }));\n-    items.extend(doc.items.iter().flat_map(|(item, renamed, _)| {\n+    items.extend(doc.items.values().flat_map(|(item, renamed, _)| {\n         // Now we actually lower the imports, skipping everything else.\n         if let hir::ItemKind::Use(path, hir::UseKind::Glob) = item.kind {\n             let name = renamed.unwrap_or_else(|| cx.tcx.hir().name(item.hir_id()));"}, {"sha": "277201e4de978376955a6e65ecbd35bf2eb10949", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4aa142ee2d5a7aef6681a601b52eca25b4027c41/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa142ee2d5a7aef6681a601b52eca25b4027c41/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=4aa142ee2d5a7aef6681a601b52eca25b4027c41", "patch": "@@ -1,7 +1,7 @@\n //! The Rust AST Visitor. Extracts useful information and massages it into a form\n //! usable for `clean`.\n \n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId, LocalDefIdSet};\n@@ -26,8 +26,12 @@ pub(crate) struct Module<'hir> {\n     pub(crate) where_inner: Span,\n     pub(crate) mods: Vec<Module<'hir>>,\n     pub(crate) def_id: LocalDefId,\n-    // (item, renamed, import_id)\n-    pub(crate) items: Vec<(&'hir hir::Item<'hir>, Option<Symbol>, Option<LocalDefId>)>,\n+    /// The key is the item `ItemId` and the value is: (item, renamed, import_id).\n+    /// We use `FxIndexMap` to keep the insert order.\n+    pub(crate) items: FxIndexMap<\n+        (LocalDefId, Option<Symbol>),\n+        (&'hir hir::Item<'hir>, Option<Symbol>, Option<LocalDefId>),\n+    >,\n     pub(crate) foreigns: Vec<(&'hir hir::ForeignItem<'hir>, Option<Symbol>)>,\n }\n \n@@ -38,7 +42,7 @@ impl Module<'_> {\n             def_id,\n             where_inner,\n             mods: Vec::new(),\n-            items: Vec::new(),\n+            items: FxIndexMap::default(),\n             foreigns: Vec::new(),\n         }\n     }\n@@ -136,7 +140,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 inserted.insert(def_id)\n             {\n                     let item = self.cx.tcx.hir().expect_item(local_def_id);\n-                    top_level_module.items.push((item, None, None));\n+                    top_level_module.items.insert((local_def_id, Some(item.ident.name)), (item, None, None));\n             }\n         }\n \n@@ -294,7 +298,11 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         renamed: Option<Symbol>,\n         parent_id: Option<LocalDefId>,\n     ) {\n-        self.modules.last_mut().unwrap().items.push((item, renamed, parent_id))\n+        self.modules\n+            .last_mut()\n+            .unwrap()\n+            .items\n+            .insert((item.owner_id.def_id, renamed), (item, renamed, parent_id));\n     }\n \n     fn visit_item_inner("}]}