{"sha": "e81ebffa59929574c8ac8fa380e27eb9e612cff9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MWViZmZhNTk5Mjk1NzRjOGFjOGZhMzgwZTI3ZWI5ZTYxMmNmZjk=", "commit": {"author": {"name": "Elichai Turkel", "email": "elichai.turkel@gmail.com", "date": "2020-03-11T13:39:37Z"}, "committer": {"name": "Elichai Turkel", "email": "elichai.turkel@gmail.com", "date": "2020-03-11T14:00:08Z"}, "message": "Implement panic_if_any_invalid and panic_if_zero_invalid intrinsics", "tree": {"sha": "0bfe26d9edafcb7d3f4d54d60c8380d2654c4a23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bfe26d9edafcb7d3f4d54d60c8380d2654c4a23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e81ebffa59929574c8ac8fa380e27eb9e612cff9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJNBAABCAA3FiEEC5PUstyhDoo+NyfXk4PN6ejman8FAl5o7ugZHGVsaWNoYWku\ndHVya2VsQGdtYWlsLmNvbQAKCRCTg83p6OZqf9OID/sEBP7dxRdW/vuVVUO11JEw\n7kSh3W1NtIVnHIwP44dzkR5mIXMsZZxUtk36cOfFVq4a8AXiFIztAAiF9flJW9iA\nSMIUHrdhg8+Rhgx0znJR0ghMlJn5sR5NIbQInkVe5MY4/MrcI1l3FmA0csL8yMJg\ncl65guaMVSrK2Q8Aah6srxJJvaFW5uCw3zXIje5AhQJNIKmW2c4PWqOPqC+NMA5A\nivIV99wkybDjk28u2Jr6cjJhpL0DZVr+CJyq64o5nt7j8u/KIn0dgJOOcyzsHywW\ngAYCJ4T4tmvqbvDv7h0DZqV6D3iX8HjTx01vGie4PiKKDcTPcJkzzunYMDTGxFOY\n52Q9Spv3fEjovxRgCoUZh34h8DvvK7GBr6a/T4DYT3gHphrGURsS87rEOPxGWOmS\n2mjW5KPjUTYE9PG9DV70Do+Ae/0aLNEFnDh9c22HRZgKnGf0qT1QtZu3yZEM0WIR\nTozuyfdFRpTph2E2VTDh2Fo+VXPfZt0u33yzP55SxKy/4dKN5tB0QQIVDjzvOl1Z\ndd+UZW9hN+hTJGJGgDkBuTmUkgs3vwfYaBSU7Pc1mPA+f3vK/R9d8ndofrHXFlaE\n1w83tFKa7mH8Id2HA8HUsHnYWu3esHbUW+HluRxT0D90wl9/zGmYtuwcZK6X5fjU\nHTbXWOnQYs3Z7KlyP2ZwWw==\n=nKhv\n-----END PGP SIGNATURE-----", "payload": "tree 0bfe26d9edafcb7d3f4d54d60c8380d2654c4a23\nparent 881e65c01bfa5e483aa7deed3aee9771d672f231\nauthor Elichai Turkel <elichai.turkel@gmail.com> 1583933977 +0200\ncommitter Elichai Turkel <elichai.turkel@gmail.com> 1583935208 +0200\n\nImplement panic_if_any_invalid and panic_if_zero_invalid intrinsics\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e81ebffa59929574c8ac8fa380e27eb9e612cff9", "html_url": "https://github.com/rust-lang/rust/commit/e81ebffa59929574c8ac8fa380e27eb9e612cff9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e81ebffa59929574c8ac8fa380e27eb9e612cff9/comments", "author": {"login": "elichai", "id": 2167860, "node_id": "MDQ6VXNlcjIxNjc4NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elichai", "html_url": "https://github.com/elichai", "followers_url": "https://api.github.com/users/elichai/followers", "following_url": "https://api.github.com/users/elichai/following{/other_user}", "gists_url": "https://api.github.com/users/elichai/gists{/gist_id}", "starred_url": "https://api.github.com/users/elichai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elichai/subscriptions", "organizations_url": "https://api.github.com/users/elichai/orgs", "repos_url": "https://api.github.com/users/elichai/repos", "events_url": "https://api.github.com/users/elichai/events{/privacy}", "received_events_url": "https://api.github.com/users/elichai/received_events", "type": "User", "site_admin": false}, "committer": {"login": "elichai", "id": 2167860, "node_id": "MDQ6VXNlcjIxNjc4NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elichai", "html_url": "https://github.com/elichai", "followers_url": "https://api.github.com/users/elichai/followers", "following_url": "https://api.github.com/users/elichai/following{/other_user}", "gists_url": "https://api.github.com/users/elichai/gists{/gist_id}", "starred_url": "https://api.github.com/users/elichai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elichai/subscriptions", "organizations_url": "https://api.github.com/users/elichai/orgs", "repos_url": "https://api.github.com/users/elichai/repos", "events_url": "https://api.github.com/users/elichai/events{/privacy}", "received_events_url": "https://api.github.com/users/elichai/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "881e65c01bfa5e483aa7deed3aee9771d672f231", "url": "https://api.github.com/repos/rust-lang/rust/commits/881e65c01bfa5e483aa7deed3aee9771d672f231", "html_url": "https://github.com/rust-lang/rust/commit/881e65c01bfa5e483aa7deed3aee9771d672f231"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "d0305c0e9fbdd3d7474133ef0dae43f8c7f8dd08", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e81ebffa59929574c8ac8fa380e27eb9e612cff9/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81ebffa59929574c8ac8fa380e27eb9e612cff9/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=e81ebffa59929574c8ac8fa380e27eb9e612cff9", "patch": "@@ -449,7 +449,32 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let layout = this.layout_of(ty)?;\n                 if layout.abi.is_uninhabited() {\n                     // Return here because we paniced instead of returning normally from the intrinsic.\n-                    return this.start_panic(&format!(\"Attempted to instantiate uninhabited type {}\", ty), unwind);\n+                    return this.start_panic(&format!(\"attempted to instantiate uninhabited type {}\", ty), unwind);\n+                }\n+            }\n+\n+            \"panic_if_zero_invalid\" => {\n+                let ty = substs.type_at(0);\n+                let layout = this.layout_of(ty)?;\n+                // Check if it permits zeroed raw initialization\n+                if !layout.might_permit_raw_init(this, /*zero:*/ true).unwrap() {\n+                    // Return here because we paniced instead of returning normally from the intrinsic.\n+                    return this.start_panic(&format!(\"attempted to zero-initialize type `{}`, which is invalid\", ty), unwind);\n+                }\n+            }\n+\n+            \"panic_if_any_invalid\" => {\n+                let ty = substs.type_at(0);\n+                let layout = this.layout_of(ty)?;\n+                // rustc handles all these in a single function, but we don't so we need to make sure `mem::uninitialized::<!>()` returns the right error.\n+                // So we check for `is_uninhabited` here too.\n+                if layout.abi.is_uninhabited() {\n+                    return this.start_panic(&format!(\"attempted to instantiate uninhabited type {}\", ty), unwind);\n+                }\n+                // Check if it permits any raw initialization\n+                if !layout.might_permit_raw_init(this, /*zero:*/ false).unwrap() {\n+                    // Return here because we paniced instead of returning normally from the intrinsic.\n+                    return this.start_panic(&format!(\"attempted to leave type `{}` uninitialized, which is invalid\", ty), unwind);\n                 }\n             }\n "}]}