{"sha": "0f26781a8611a985eba374b7581a7b439dde760e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmMjY3ODFhODYxMWE5ODVlYmEzNzRiNzU4MWE3YjQzOWRkZTc2MGU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-14T18:58:24Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-14T18:58:24Z"}, "message": "Support simplejit and faerie at the same time", "tree": {"sha": "52a26882095629feea8a671af98e0abdf08bc9d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52a26882095629feea8a671af98e0abdf08bc9d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f26781a8611a985eba374b7581a7b439dde760e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f26781a8611a985eba374b7581a7b439dde760e", "html_url": "https://github.com/rust-lang/rust/commit/0f26781a8611a985eba374b7581a7b439dde760e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f26781a8611a985eba374b7581a7b439dde760e/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "178aa32b0cc4cfe0e590fd4a456536418bd3cf7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/178aa32b0cc4cfe0e590fd4a456536418bd3cf7f", "html_url": "https://github.com/rust-lang/rust/commit/178aa32b0cc4cfe0e590fd4a456536418bd3cf7f"}], "stats": {"total": 69, "additions": 49, "deletions": 20}, "files": [{"sha": "014d7aaa40c4b5e798312cca8d9f89b0e8116009", "filename": "examples/mini_core_hello_world.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f26781a8611a985eba374b7581a7b439dde760e/examples%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f26781a8611a985eba374b7581a7b439dde760e/examples%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fmini_core_hello_world.rs?ref=0f26781a8611a985eba374b7581a7b439dde760e", "patch": "@@ -26,6 +26,8 @@ fn start(_main: *const u8, i: isize, _: *const *const u8) -> isize {\n         puts(ptr);\n     }\n \n+    //panic(&(\"panic msg\", \"abc.rs\", 0, 43));\n+\n     unsafe {\n         NUM = 6 * 7 + 1 + (1u8 == 1u8) as u8; // 44\n         *NUM_REF as isize"}, {"sha": "3944d474d26a3f36b2ef6caa1be22592be72b5a1", "filename": "src/base.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0f26781a8611a985eba374b7581a7b439dde760e/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f26781a8611a985eba374b7581a7b439dde760e/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=0f26781a8611a985eba374b7581a7b439dde760e", "patch": "@@ -1,10 +1,8 @@\n use crate::prelude::*;\n \n-pub fn trans_mono_item<'a, 'tcx: 'a>(\n-    cx: &mut CodegenCx<'a, 'tcx, CurrentBackend>,\n-    mono_item: MonoItem<'tcx>,\n-) {\n+pub fn trans_mono_item<'a, 'tcx: 'a>(cx: &mut CodegenCx<'a, 'tcx>, mono_item: MonoItem<'tcx>) {\n     let tcx = cx.tcx;\n+    let context = &mut cx.context;\n \n     match mono_item {\n         MonoItem::Fn(inst) => match inst {\n@@ -20,8 +18,10 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(\n                     String::from_utf8_lossy(&mir.into_inner())\n                 ));\n \n-                let func_id = trans_fn(cx.tcx, cx.module, &mut cx.constants, &mut cx.context, inst);\n-                cx.defined_functions.push(func_id);\n+                let res = each_module!(cx, |(ccx, m)| trans_fn(tcx, *m, ccx, context, inst));\n+                if let Some(func_id) = res.jit {\n+                    cx.defined_functions.push(func_id);\n+                };\n             }\n             Instance {\n                 def: InstanceDef::DropGlue(_, _),\n@@ -30,7 +30,9 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(\n             inst => unimpl!(\"Unimplemented instance {:?}\", inst),\n         },\n         MonoItem::Static(def_id) => {\n-            crate::constant::codegen_static(&mut cx.constants, def_id);\n+            each_module!(cx, |(ccx, _m)| {\n+                crate::constant::codegen_static(ccx, def_id);\n+            });\n         }\n         MonoItem::GlobalAsm(node_id) => cx\n             .tcx\n@@ -41,7 +43,7 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(\n \n fn trans_fn<'a, 'tcx: 'a>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    module: &mut Module<SimpleJITBackend>,\n+    module: &mut Module<impl Backend>,\n     constants: &mut crate::constant::ConstantCx,\n     context: &mut Context,\n     instance: Instance<'tcx>,"}, {"sha": "7ed91a30d2f75d4015f622dd666fc3a8557d887b", "filename": "src/common.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f26781a8611a985eba374b7581a7b439dde760e/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f26781a8611a985eba374b7581a7b439dde760e/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=0f26781a8611a985eba374b7581a7b439dde760e", "patch": "@@ -6,8 +6,6 @@ use cranelift_module::Module;\n \n use crate::prelude::*;\n \n-pub type CurrentBackend = ::cranelift_simplejit::SimpleJITBackend;\n-\n #[derive(Debug, Copy, Clone, Eq, PartialEq)]\n pub struct Variable(pub Local);\n "}, {"sha": "b2f87a2171d672e89b50fe6256ffdaab8402a152", "filename": "src/lib.rs", "status": "modified", "additions": 37, "deletions": 10, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0f26781a8611a985eba374b7581a7b439dde760e/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f26781a8611a985eba374b7581a7b439dde760e/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=0f26781a8611a985eba374b7581a7b439dde760e", "patch": "@@ -47,6 +47,15 @@ macro_rules! unimpl {\n     };\n }\n \n+macro_rules! each_module {\n+    ($cx:expr, |$p:pat| $res:expr) => {\n+        ModuleTup {\n+            jit: $cx.jit.as_mut().map(|$p| $res),\n+            faerie: $cx.faerie.as_mut().map(|$p| $res),\n+        }\n+    };\n+}\n+\n mod abi;\n mod analyze;\n mod base;\n@@ -88,26 +97,32 @@ mod prelude {\n     pub use crate::common::Variable;\n     pub use crate::common::*;\n \n-    pub use crate::CodegenCx;\n+    pub use crate::{CodegenCx, ModuleTup};\n \n     pub fn should_codegen(tcx: TyCtxt) -> bool {\n         ::std::env::var(\"SHOULD_CODEGEN\").is_ok()\n             || tcx.sess.crate_types.get().contains(&CrateType::Executable)\n     }\n }\n \n+use crate::constant::ConstantCx;\n use crate::prelude::*;\n \n-pub struct CodegenCx<'a, 'tcx: 'a, B: Backend + 'a> {\n+pub struct CodegenCx<'a, 'tcx: 'a> {\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    pub module: &'a mut Module<B>,\n-    pub constants: crate::constant::ConstantCx,\n+    pub jit: Option<(ConstantCx, &'a mut Module<SimpleJITBackend>)>,\n+    pub faerie: Option<(ConstantCx, &'a mut Module<FaerieBackend>)>,\n     pub defined_functions: Vec<FuncId>,\n \n     // Cache\n     pub context: Context,\n }\n \n+pub struct ModuleTup<T> {\n+    jit: Option<T>,\n+    faerie: Option<T>,\n+}\n+\n struct CraneliftMetadataLoader;\n \n impl MetadataLoader for CraneliftMetadataLoader {\n@@ -265,8 +280,8 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             use std::io::Write;\n             let mut cx = CodegenCx {\n                 tcx,\n-                module: &mut jit_module,\n-                constants: Default::default(),\n+                jit: Some((ConstantCx::default(), &mut jit_module)),\n+                faerie: Some((ConstantCx::default(), &mut faerie_module)),\n                 defined_functions: Vec::new(),\n \n                 context: Context::new(),\n@@ -299,14 +314,27 @@ impl CodegenBackend for CraneliftCodegenBackend {\n                 }\n             }\n \n-            cx.constants.finalize(tcx, &mut cx.module);\n+            match cx {\n+                CodegenCx {\n+                    tcx,\n+                    jit,\n+                    faerie,\n+                    defined_functions: _,\n+                    context: _,\n+                } => {\n+                    jit.map(|jit| jit.0.finalize(tcx, jit.1));\n+                    faerie.map(|faerie| faerie.0.finalize(tcx, faerie.1));\n+                }\n+            }\n \n             let after = ::std::time::Instant::now();\n             println!(\"time: {:?}\", after - before);\n \n             cx.defined_functions\n         };\n \n+        tcx.sess.abort_if_errors();\n+\n         tcx.sess.warn(\"Compiled everything\");\n \n         // TODO: this doesn't work most of the time\n@@ -334,9 +362,8 @@ impl CodegenBackend for CraneliftCodegenBackend {\n \n             jit_module.finish();\n         } else if should_codegen(tcx) {\n-            for func_id in defined_functions {\n-                jit_module.finalize_function(func_id);\n-            }\n+            jit_module.finalize_all();\n+            faerie_module.finalize_all();\n \n             tcx.sess.warn(\"Finalized everything\");\n         }"}]}