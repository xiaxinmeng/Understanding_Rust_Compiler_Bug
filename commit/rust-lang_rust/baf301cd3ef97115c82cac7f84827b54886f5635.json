{"sha": "baf301cd3ef97115c82cac7f84827b54886f5635", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhZjMwMWNkM2VmOTcxMTVjODJjYWM3Zjg0ODI3YjU0ODg2ZjU2MzU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-31T03:32:36Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-31T03:32:36Z"}, "message": "rustdoc: De-mode", "tree": {"sha": "b6f160fd94998ac5a37ef682a689ae59b6011469", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6f160fd94998ac5a37ef682a689ae59b6011469"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/baf301cd3ef97115c82cac7f84827b54886f5635", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/baf301cd3ef97115c82cac7f84827b54886f5635", "html_url": "https://github.com/rust-lang/rust/commit/baf301cd3ef97115c82cac7f84827b54886f5635", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/baf301cd3ef97115c82cac7f84827b54886f5635/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16ea4b06abf4bbcec05cccf58d644085f3862541", "url": "https://api.github.com/repos/rust-lang/rust/commits/16ea4b06abf4bbcec05cccf58d644085f3862541", "html_url": "https://github.com/rust-lang/rust/commit/16ea4b06abf4bbcec05cccf58d644085f3862541"}], "stats": {"total": 509, "additions": 254, "deletions": 255}, "files": [{"sha": "c222ad10025742f7192b417fed2ed1802802d53b", "filename": "src/librustdoc/astsrv.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fastsrv.rs?ref=baf301cd3ef97115c82cac7f84827b54886f5635", "patch": "@@ -47,7 +47,7 @@ pub type Ctxt = {\n \n type SrvOwner<T> = fn(srv: Srv) -> T;\n pub type CtxtHandler<T> = fn~(ctxt: Ctxt) -> T;\n-type Parser = fn~(Session, +s: ~str) -> @ast::crate;\n+type Parser = fn~(Session, s: ~str) -> @ast::crate;\n \n enum Msg {\n     HandleRequest(fn~(Ctxt)),\n@@ -62,15 +62,15 @@ impl Srv: Clone {\n     fn clone(&self) -> Srv { copy *self }\n }\n \n-pub fn from_str<T>(+source: ~str, owner: SrvOwner<T>) -> T {\n+pub fn from_str<T>(source: ~str, owner: SrvOwner<T>) -> T {\n     run(owner, copy source, parse::from_str_sess)\n }\n \n-pub fn from_file<T>(+file: ~str, owner: SrvOwner<T>) -> T {\n+pub fn from_file<T>(file: ~str, owner: SrvOwner<T>) -> T {\n     run(owner, copy file, |sess, f| parse::from_file_sess(sess, &Path(f)))\n }\n \n-fn run<T>(owner: SrvOwner<T>, +source: ~str, +parse: Parser) -> T {\n+fn run<T>(owner: SrvOwner<T>, source: ~str, parse: Parser) -> T {\n \n     let srv_ = Srv({\n         ch: do util::spawn_listener |copy source, move parse, po| {\n@@ -83,7 +83,7 @@ fn run<T>(owner: SrvOwner<T>, +source: ~str, +parse: Parser) -> T {\n     move res\n }\n \n-fn act(po: oldcomm::Port<Msg>, +source: ~str, +parse: Parser) {\n+fn act(po: oldcomm::Port<Msg>, source: ~str, parse: Parser) {\n     let sess = build_session();\n \n     let ctxt = build_ctxt(\n@@ -106,7 +106,7 @@ fn act(po: oldcomm::Port<Msg>, +source: ~str, +parse: Parser) {\n \n pub fn exec<T:Owned>(\n     srv: Srv,\n-    +f: fn~(ctxt: Ctxt) -> T\n+    f: fn~(ctxt: Ctxt) -> T\n ) -> T {\n     let (po, ch) = stream();\n     let msg = HandleRequest(fn~(move f, ctxt: Ctxt) {"}, {"sha": "377b6a62c85d0dde4feeb328efd010190d11195e", "filename": "src/librustdoc/attr_parser.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_parser.rs?ref=baf301cd3ef97115c82cac7f84827b54886f5635", "patch": "@@ -36,7 +36,7 @@ mod test {\n \n     use core::option::None;\n \n-    pub fn parse_attributes(+source: ~str) -> ~[ast::attribute] {\n+    pub fn parse_attributes(source: ~str) -> ~[ast::attribute] {\n         use syntax::parse;\n         use syntax::parse::parser;\n         use syntax::parse::attr::parser_attr;\n@@ -52,7 +52,7 @@ mod test {\n }\n \n fn doc_metas(\n-    +attrs: ~[ast::attribute]\n+    attrs: ~[ast::attribute]\n ) -> ~[@ast::meta_item] {\n \n     let doc_attrs = attr::find_attrs_by_name(attrs, ~\"doc\");\n@@ -63,7 +63,7 @@ fn doc_metas(\n     return doc_metas;\n }\n \n-pub fn parse_crate(+attrs: ~[ast::attribute]) -> CrateAttrs {\n+pub fn parse_crate(attrs: ~[ast::attribute]) -> CrateAttrs {\n     let link_metas = attr::find_linkage_metas(attrs);\n \n     {\n@@ -95,7 +95,7 @@ fn should_not_extract_crate_name_if_no_name_value_in_link_attribute() {\n     assert attrs.name == None;\n }\n \n-pub fn parse_desc(+attrs: ~[ast::attribute]) -> Option<~str> {\n+pub fn parse_desc(attrs: ~[ast::attribute]) -> Option<~str> {\n     let doc_strs = do doc_metas(attrs).filter_map |meta| {\n         attr::get_meta_item_value_str(*meta)\n     };\n@@ -122,7 +122,7 @@ fn parse_desc_should_parse_simple_doc_attributes() {\n     assert attrs == Some(~\"basic\");\n }\n \n-pub fn parse_hidden(+attrs: ~[ast::attribute]) -> bool {\n+pub fn parse_hidden(attrs: ~[ast::attribute]) -> bool {\n     do doc_metas(attrs).find |meta| {\n         match attr::get_meta_item_list(*meta) {\n           Some(metas) => {"}, {"sha": "f8fa3ccd3d9e4f6f2fa6f84e664cb27f7cecd468", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=baf301cd3ef97115c82cac7f84827b54886f5635", "patch": "@@ -43,7 +43,7 @@ pub fn mk_pass() -> Pass {\n \n pub fn run(\n     srv: astsrv::Srv,\n-    +doc: doc::Doc\n+    doc: doc::Doc\n ) -> doc::Doc {\n     let fold = Fold {\n         fold_crate: fold_crate,\n@@ -58,7 +58,7 @@ pub fn run(\n \n fn fold_crate(\n     fold: &fold::Fold<astsrv::Srv>,\n-    +doc: doc::CrateDoc\n+    doc: doc::CrateDoc\n ) -> doc::CrateDoc {\n \n     let srv = fold.ctxt;\n@@ -89,7 +89,7 @@ fn should_replace_top_module_name_with_crate_name() {\n \n fn fold_item(\n     fold: &fold::Fold<astsrv::Srv>,\n-    +doc: doc::ItemDoc\n+    doc: doc::ItemDoc\n ) -> doc::ItemDoc {\n \n     let srv = fold.ctxt;\n@@ -113,7 +113,7 @@ fn fold_item(\n fn parse_item_attrs<T:Owned>(\n     srv: astsrv::Srv,\n     id: doc::AstId,\n-    +parse_attrs: fn~(+a: ~[ast::attribute]) -> T) -> T {\n+    parse_attrs: fn~(a: ~[ast::attribute]) -> T) -> T {\n     do astsrv::exec(srv) |move parse_attrs, ctxt| {\n         let attrs = match ctxt.ast_map.get(id) {\n           ast_map::node_item(item, _) => copy item.attrs,\n@@ -156,7 +156,7 @@ fn should_extract_fn_attributes() {\n \n fn fold_enum(\n     fold: &fold::Fold<astsrv::Srv>,\n-    +doc: doc::EnumDoc\n+    doc: doc::EnumDoc\n ) -> doc::EnumDoc {\n \n     let srv = fold.ctxt;\n@@ -207,7 +207,7 @@ fn should_extract_variant_docs() {\n \n fn fold_trait(\n     fold: &fold::Fold<astsrv::Srv>,\n-    +doc: doc::TraitDoc\n+    doc: doc::TraitDoc\n ) -> doc::TraitDoc {\n     let srv = fold.ctxt;\n     let doc = fold::default_seq_fold_trait(fold, doc);\n@@ -221,7 +221,7 @@ fn fold_trait(\n fn merge_method_attrs(\n     srv: astsrv::Srv,\n     item_id: doc::AstId,\n-    +docs: ~[doc::MethodDoc]\n+    docs: ~[doc::MethodDoc]\n ) -> ~[doc::MethodDoc] {\n \n     // Create an assoc list from method name to attributes\n@@ -284,7 +284,7 @@ fn should_extract_trait_method_docs() {\n \n fn fold_impl(\n     fold: &fold::Fold<astsrv::Srv>,\n-    +doc: doc::ImplDoc\n+    doc: doc::ImplDoc\n ) -> doc::ImplDoc {\n     let srv = fold.ctxt;\n     let doc = fold::default_seq_fold_impl(fold, doc);\n@@ -319,7 +319,7 @@ mod test {\n     use doc;\n     use extract;\n \n-    pub fn mk_doc(+source: ~str) -> doc::Doc {\n+    pub fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n             run(srv, doc)"}, {"sha": "8277ac0e45dce85384da76ed06e6bce726cffda6", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=baf301cd3ef97115c82cac7f84827b54886f5635", "patch": "@@ -123,7 +123,7 @@ pub fn parse_config(args: &[~str]) -> Result<Config, ~str> {\n \n pub fn parse_config_(\n     args: &[~str],\n-    +program_output: ProgramOutput\n+    program_output: ProgramOutput\n ) -> Result<Config, ~str> {\n     let args = args.tail();\n     let opts = vec::unzip(opts()).first();\n@@ -147,7 +147,7 @@ pub fn parse_config_(\n fn config_from_opts(\n     input_crate: &Path,\n     matches: &getopts::Matches,\n-    +program_output: ProgramOutput\n+    program_output: ProgramOutput\n ) -> Result<Config, ~str> {\n \n     let config = default_config(input_crate);\n@@ -222,8 +222,8 @@ fn parse_output_style(output_style: &str) -> Result<OutputStyle, ~str> {\n \n fn maybe_find_pandoc(\n     config: &Config,\n-    +maybe_pandoc_cmd: Option<~str>,\n-    +program_output: ProgramOutput\n+    maybe_pandoc_cmd: Option<~str>,\n+    program_output: ProgramOutput\n ) -> Result<Option<~str>, ~str> {\n     if config.output_format != PandocHtml {\n         return result::Ok(maybe_pandoc_cmd);"}, {"sha": "4a046aaf50338d21ec7e99930c8cbc3ef71bcd28", "filename": "src/librustdoc/demo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fdemo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fdemo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdemo.rs?ref=baf301cd3ef97115c82cac7f84827b54886f5635", "patch": "@@ -39,8 +39,8 @@ enum OmNomNomy {\n }\n \n fn take_my_order_please(\n-    +_waitperson: WaitPerson,\n-    +_order: ~[OmNomNomy]\n+    _waitperson: WaitPerson,\n+    _order: ~[OmNomNomy]\n ) -> uint {\n \n     /*!"}, {"sha": "9cb74a522a707f8215fe854b9f86316d76f10c91", "filename": "src/librustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs?ref=baf301cd3ef97115c82cac7f84827b54886f5635", "patch": "@@ -37,7 +37,7 @@ pub fn mk_pass() -> Pass {\n \n pub fn run(\n     _srv: astsrv::Srv,\n-    +doc: doc::Doc\n+    doc: doc::Doc\n ) -> doc::Doc {\n     let fold = Fold {\n         fold_item: fold_item,\n@@ -48,7 +48,7 @@ pub fn run(\n     (fold.fold_doc)(&fold, doc)\n }\n \n-fn fold_item(fold: &fold::Fold<()>, +doc: doc::ItemDoc) -> doc::ItemDoc {\n+fn fold_item(fold: &fold::Fold<()>, doc: doc::ItemDoc) -> doc::ItemDoc {\n     let doc = fold::default_seq_fold_item(fold, doc);\n \n     doc::ItemDoc {\n@@ -57,7 +57,7 @@ fn fold_item(fold: &fold::Fold<()>, +doc: doc::ItemDoc) -> doc::ItemDoc {\n     }\n }\n \n-fn fold_trait(fold: &fold::Fold<()>, +doc: doc::TraitDoc) -> doc::TraitDoc {\n+fn fold_trait(fold: &fold::Fold<()>, doc: doc::TraitDoc) -> doc::TraitDoc {\n     let doc =fold::default_seq_fold_trait(fold, doc);\n \n     doc::TraitDoc {\n@@ -69,7 +69,7 @@ fn fold_trait(fold: &fold::Fold<()>, +doc: doc::TraitDoc) -> doc::TraitDoc {\n     }\n }\n \n-fn fold_impl(fold: &fold::Fold<()>, +doc: doc::ImplDoc) -> doc::ImplDoc {\n+fn fold_impl(fold: &fold::Fold<()>, doc: doc::ImplDoc) -> doc::ImplDoc {\n     let doc =fold::default_seq_fold_impl(fold, doc);\n \n     doc::ImplDoc {\n@@ -108,7 +108,7 @@ pub mod test {\n     use doc;\n     use extract;\n \n-    pub fn mk_doc(+source: ~str) -> doc::Doc {\n+    pub fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n             let doc = (attr_pass::mk_pass().f)(srv, doc);\n@@ -117,15 +117,15 @@ pub mod test {\n     }\n }\n \n-fn extract(+desc: Option<~str>) -> Option<~str> {\n+fn extract(desc: Option<~str>) -> Option<~str> {\n     if desc.is_none() {\n         return None\n     }\n \n     parse_desc((copy desc).get())\n }\n \n-fn parse_desc(+desc: ~str) -> Option<~str> {\n+fn parse_desc(desc: ~str) -> Option<~str> {\n \n     const max_brief_len: uint = 120u;\n \n@@ -141,7 +141,7 @@ fn parse_desc(+desc: ~str) -> Option<~str> {\n     }\n }\n \n-fn first_sentence(+s: ~str) -> Option<~str> {\n+fn first_sentence(s: ~str) -> Option<~str> {\n     let paras = paragraphs(copy s);\n     if !paras.is_empty() {\n         let first_para = vec::head(paras);\n@@ -151,7 +151,7 @@ fn first_sentence(+s: ~str) -> Option<~str> {\n     }\n }\n \n-fn first_sentence_(+s: ~str) -> ~str {\n+fn first_sentence_(s: ~str) -> ~str {\n     let mut dotcount = 0;\n     // The index of the character following a single dot. This allows\n     // Things like [0..1) to appear in the brief description\n@@ -182,7 +182,7 @@ fn first_sentence_(+s: ~str) -> ~str {\n     }\n }\n \n-fn paragraphs(+s: ~str) -> ~[~str] {\n+fn paragraphs(s: ~str) -> ~[~str] {\n     let lines = str::lines_any(s);\n     let mut whitespace_lines = 0;\n     let mut accum = ~\"\";"}, {"sha": "de336d9e07e5ef03d7b58bc1616c8f67ca095ac6", "filename": "src/librustdoc/extract.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fextract.rs?ref=baf301cd3ef97115c82cac7f84827b54886f5635", "patch": "@@ -43,7 +43,7 @@ pub fn interner() -> @syntax::parse::token::ident_interner {\n \n pub fn from_srv(\n     srv: astsrv::Srv,\n-    +default_name: ~str\n+    default_name: ~str\n ) -> doc::Doc {\n \n     //! Use the AST service to create a document tree\n@@ -55,7 +55,7 @@ pub fn from_srv(\n \n pub fn extract(\n     crate: @ast::crate,\n-    +default_name: ~str\n+    default_name: ~str\n ) -> doc::Doc {\n     doc::Doc {\n         pages: ~[\n@@ -68,13 +68,13 @@ pub fn extract(\n \n fn top_moddoc_from_crate(\n     crate: @ast::crate,\n-    +default_name: ~str\n+    default_name: ~str\n ) -> doc::ModDoc {\n     moddoc_from_mod(mk_itemdoc(ast::crate_node_id, default_name),\n                     copy crate.node.module)\n }\n \n-fn mk_itemdoc(id: ast::node_id, +name: ~str) -> doc::ItemDoc {\n+fn mk_itemdoc(id: ast::node_id, name: ~str) -> doc::ItemDoc {\n     doc::ItemDoc {\n         id: id,\n         name: name,\n@@ -87,8 +87,8 @@ fn mk_itemdoc(id: ast::node_id, +name: ~str) -> doc::ItemDoc {\n }\n \n fn moddoc_from_mod(\n-    +itemdoc: doc::ItemDoc,\n-    +module_: ast::_mod\n+    itemdoc: doc::ItemDoc,\n+    module_: ast::_mod\n ) -> doc::ModDoc {\n     doc::ModDoc {\n         item: itemdoc,\n@@ -148,8 +148,8 @@ fn moddoc_from_mod(\n }\n \n fn nmoddoc_from_mod(\n-    +itemdoc: doc::ItemDoc,\n-    +module_: ast::foreign_mod\n+    itemdoc: doc::ItemDoc,\n+    module_: ast::foreign_mod\n ) -> doc::NmodDoc {\n     let mut fns = ~[];\n     for module_.items.each |item| {\n@@ -168,14 +168,14 @@ fn nmoddoc_from_mod(\n     }\n }\n \n-fn fndoc_from_fn(+itemdoc: doc::ItemDoc) -> doc::FnDoc {\n+fn fndoc_from_fn(itemdoc: doc::ItemDoc) -> doc::FnDoc {\n     doc::SimpleItemDoc {\n         item: itemdoc,\n         sig: None\n     }\n }\n \n-fn constdoc_from_const(+itemdoc: doc::ItemDoc) -> doc::ConstDoc {\n+fn constdoc_from_const(itemdoc: doc::ItemDoc) -> doc::ConstDoc {\n     doc::SimpleItemDoc {\n         item: itemdoc,\n         sig: None\n@@ -190,8 +190,8 @@ fn should_extract_const_name_and_id() {\n }\n \n fn enumdoc_from_enum(\n-    +itemdoc: doc::ItemDoc,\n-    +variants: ~[ast::variant]\n+    itemdoc: doc::ItemDoc,\n+    variants: ~[ast::variant]\n ) -> doc::EnumDoc {\n     doc::EnumDoc {\n         item: itemdoc,\n@@ -200,7 +200,7 @@ fn enumdoc_from_enum(\n }\n \n fn variantdocs_from_variants(\n-    +variants: ~[ast::variant]\n+    variants: ~[ast::variant]\n ) -> ~[doc::VariantDoc] {\n     vec::map(variants, variantdoc_from_variant)\n }\n@@ -227,8 +227,8 @@ fn should_extract_enum_variants() {\n }\n \n fn traitdoc_from_trait(\n-    +itemdoc: doc::ItemDoc,\n-    +methods: ~[ast::trait_method]\n+    itemdoc: doc::ItemDoc,\n+    methods: ~[ast::trait_method]\n ) -> doc::TraitDoc {\n     doc::TraitDoc {\n         item: itemdoc,\n@@ -272,8 +272,8 @@ fn should_extract_trait_methods() {\n }\n \n fn impldoc_from_impl(\n-    +itemdoc: doc::ItemDoc,\n-    +methods: ~[@ast::method]\n+    itemdoc: doc::ItemDoc,\n+    methods: ~[@ast::method]\n ) -> doc::ImplDoc {\n     doc::ImplDoc {\n         item: itemdoc,\n@@ -299,7 +299,7 @@ fn should_extract_impl_methods() {\n }\n \n fn tydoc_from_ty(\n-    +itemdoc: doc::ItemDoc\n+    itemdoc: doc::ItemDoc\n ) -> doc::TyDoc {\n     doc::SimpleItemDoc {\n         item: itemdoc,\n@@ -314,7 +314,7 @@ fn should_extract_tys() {\n }\n \n fn structdoc_from_struct(\n-    +itemdoc: doc::ItemDoc,\n+    itemdoc: doc::ItemDoc,\n     struct_def: @ast::struct_def\n ) -> doc::StructDoc {\n     doc::StructDoc {\n@@ -350,7 +350,7 @@ mod test {\n \n     use core::vec;\n \n-    pub fn mk_doc(+source: ~str) -> doc::Doc {\n+    pub fn mk_doc(source: ~str) -> doc::Doc {\n         let ast = parse::from_str(source);\n         extract(ast, ~\"\")\n     }"}, {"sha": "e85f8595a5ab8a85659c6639bf2b9eb536acd722", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=baf301cd3ef97115c82cac7f84827b54886f5635", "patch": "@@ -55,36 +55,36 @@ impl<T: Clone> Fold<T>: Clone {\n     }\n }\n \n-type FoldDoc<T> = fn~(fold: &Fold<T>, +doc: doc::Doc) -> doc::Doc;\n-type FoldCrate<T> = fn~(fold: &Fold<T>, +doc: doc::CrateDoc) -> doc::CrateDoc;\n-type FoldItem<T> = fn~(fold: &Fold<T>, +doc: doc::ItemDoc) -> doc::ItemDoc;\n-type FoldMod<T> = fn~(fold: &Fold<T>, +doc: doc::ModDoc) -> doc::ModDoc;\n-type FoldNmod<T> = fn~(fold: &Fold<T>, +doc: doc::NmodDoc) -> doc::NmodDoc;\n-type FoldFn<T> = fn~(fold: &Fold<T>, +doc: doc::FnDoc) -> doc::FnDoc;\n-type FoldConst<T> = fn~(fold: &Fold<T>, +doc: doc::ConstDoc) -> doc::ConstDoc;\n-type FoldEnum<T> = fn~(fold: &Fold<T>, +doc: doc::EnumDoc) -> doc::EnumDoc;\n-type FoldTrait<T> = fn~(fold: &Fold<T>, +doc: doc::TraitDoc) -> doc::TraitDoc;\n-type FoldImpl<T> = fn~(fold: &Fold<T>, +doc: doc::ImplDoc) -> doc::ImplDoc;\n-type FoldType<T> = fn~(fold: &Fold<T>, +doc: doc::TyDoc) -> doc::TyDoc;\n+type FoldDoc<T> = fn~(fold: &Fold<T>, doc: doc::Doc) -> doc::Doc;\n+type FoldCrate<T> = fn~(fold: &Fold<T>, doc: doc::CrateDoc) -> doc::CrateDoc;\n+type FoldItem<T> = fn~(fold: &Fold<T>, doc: doc::ItemDoc) -> doc::ItemDoc;\n+type FoldMod<T> = fn~(fold: &Fold<T>, doc: doc::ModDoc) -> doc::ModDoc;\n+type FoldNmod<T> = fn~(fold: &Fold<T>, doc: doc::NmodDoc) -> doc::NmodDoc;\n+type FoldFn<T> = fn~(fold: &Fold<T>, doc: doc::FnDoc) -> doc::FnDoc;\n+type FoldConst<T> = fn~(fold: &Fold<T>, doc: doc::ConstDoc) -> doc::ConstDoc;\n+type FoldEnum<T> = fn~(fold: &Fold<T>, doc: doc::EnumDoc) -> doc::EnumDoc;\n+type FoldTrait<T> = fn~(fold: &Fold<T>, doc: doc::TraitDoc) -> doc::TraitDoc;\n+type FoldImpl<T> = fn~(fold: &Fold<T>, doc: doc::ImplDoc) -> doc::ImplDoc;\n+type FoldType<T> = fn~(fold: &Fold<T>, doc: doc::TyDoc) -> doc::TyDoc;\n type FoldStruct<T> = fn~(fold: &Fold<T>,\n-                         +doc: doc::StructDoc) -> doc::StructDoc;\n+                         doc: doc::StructDoc) -> doc::StructDoc;\n \n // This exists because fn types don't infer correctly as record\n // initializers, but they do as function arguments\n fn mk_fold<T:Clone>(\n-    +ctxt: T,\n-    +fold_doc: FoldDoc<T>,\n-    +fold_crate: FoldCrate<T>,\n-    +fold_item: FoldItem<T>,\n-    +fold_mod: FoldMod<T>,\n-    +fold_nmod: FoldNmod<T>,\n-    +fold_fn: FoldFn<T>,\n-    +fold_const: FoldConst<T>,\n-    +fold_enum: FoldEnum<T>,\n-    +fold_trait: FoldTrait<T>,\n-    +fold_impl: FoldImpl<T>,\n-    +fold_type: FoldType<T>,\n-    +fold_struct: FoldStruct<T>\n+    ctxt: T,\n+    fold_doc: FoldDoc<T>,\n+    fold_crate: FoldCrate<T>,\n+    fold_item: FoldItem<T>,\n+    fold_mod: FoldMod<T>,\n+    fold_nmod: FoldNmod<T>,\n+    fold_fn: FoldFn<T>,\n+    fold_const: FoldConst<T>,\n+    fold_enum: FoldEnum<T>,\n+    fold_trait: FoldTrait<T>,\n+    fold_impl: FoldImpl<T>,\n+    fold_type: FoldType<T>,\n+    fold_struct: FoldStruct<T>\n ) -> Fold<T> {\n     Fold {\n         ctxt: move ctxt,\n@@ -103,7 +103,7 @@ fn mk_fold<T:Clone>(\n     }\n }\n \n-pub fn default_any_fold<T:Owned Clone>(+ctxt: T) -> Fold<T> {\n+pub fn default_any_fold<T:Owned Clone>(ctxt: T) -> Fold<T> {\n     mk_fold(\n         move ctxt,\n         |f, d| default_seq_fold_doc(f, d),\n@@ -121,7 +121,7 @@ pub fn default_any_fold<T:Owned Clone>(+ctxt: T) -> Fold<T> {\n     )\n }\n \n-pub fn default_seq_fold<T:Clone>(+ctxt: T) -> Fold<T> {\n+pub fn default_seq_fold<T:Clone>(ctxt: T) -> Fold<T> {\n     mk_fold(\n         move ctxt,\n         |f, d| default_seq_fold_doc(f, d),\n@@ -139,7 +139,7 @@ pub fn default_seq_fold<T:Clone>(+ctxt: T) -> Fold<T> {\n     )\n }\n \n-pub fn default_par_fold<T:Owned Clone>(+ctxt: T) -> Fold<T> {\n+pub fn default_par_fold<T:Owned Clone>(ctxt: T) -> Fold<T> {\n     mk_fold(\n         move ctxt,\n         |f, d| default_seq_fold_doc(f, d),\n@@ -157,7 +157,7 @@ pub fn default_par_fold<T:Owned Clone>(+ctxt: T) -> Fold<T> {\n     )\n }\n \n-pub fn default_seq_fold_doc<T>(fold: &Fold<T>, +doc: doc::Doc) -> doc::Doc {\n+pub fn default_seq_fold_doc<T>(fold: &Fold<T>, doc: doc::Doc) -> doc::Doc {\n     doc::Doc {\n         pages: do vec::map(doc.pages) |page| {\n             match copy *page {\n@@ -175,7 +175,7 @@ pub fn default_seq_fold_doc<T>(fold: &Fold<T>, +doc: doc::Doc) -> doc::Doc {\n \n pub fn default_seq_fold_crate<T>(\n     fold: &Fold<T>,\n-    +doc: doc::CrateDoc\n+    doc: doc::CrateDoc\n ) -> doc::CrateDoc {\n     doc::CrateDoc {\n         topmod: (fold.fold_mod)(fold, copy doc.topmod)\n@@ -184,14 +184,14 @@ pub fn default_seq_fold_crate<T>(\n \n pub fn default_seq_fold_item<T>(\n     _fold: &Fold<T>,\n-    +doc: doc::ItemDoc\n+    doc: doc::ItemDoc\n ) -> doc::ItemDoc {\n     doc\n }\n \n pub fn default_any_fold_mod<T:Owned Clone>(\n     fold: &Fold<T>,\n-    +doc: doc::ModDoc\n+    doc: doc::ModDoc\n ) -> doc::ModDoc {\n     let fold_copy = fold.clone();\n     doc::ModDoc {\n@@ -205,7 +205,7 @@ pub fn default_any_fold_mod<T:Owned Clone>(\n \n pub fn default_seq_fold_mod<T>(\n     fold: &Fold<T>,\n-    +doc: doc::ModDoc\n+    doc: doc::ModDoc\n ) -> doc::ModDoc {\n     doc::ModDoc {\n         item: (fold.fold_item)(fold, copy doc.item),\n@@ -218,7 +218,7 @@ pub fn default_seq_fold_mod<T>(\n \n pub fn default_par_fold_mod<T:Owned Clone>(\n     fold: &Fold<T>,\n-    +doc: doc::ModDoc\n+    doc: doc::ModDoc\n ) -> doc::ModDoc {\n     let fold_copy = fold.clone();\n     doc::ModDoc {\n@@ -232,7 +232,7 @@ pub fn default_par_fold_mod<T:Owned Clone>(\n \n pub fn default_any_fold_nmod<T:Owned Clone>(\n     fold: &Fold<T>,\n-    +doc: doc::NmodDoc\n+    doc: doc::NmodDoc\n ) -> doc::NmodDoc {\n     let fold_copy = fold.clone();\n     doc::NmodDoc {\n@@ -246,7 +246,7 @@ pub fn default_any_fold_nmod<T:Owned Clone>(\n \n pub fn default_seq_fold_nmod<T>(\n     fold: &Fold<T>,\n-    +doc: doc::NmodDoc\n+    doc: doc::NmodDoc\n ) -> doc::NmodDoc {\n     doc::NmodDoc {\n         item: (fold.fold_item)(fold, copy doc.item),\n@@ -259,7 +259,7 @@ pub fn default_seq_fold_nmod<T>(\n \n pub fn default_par_fold_nmod<T:Owned Clone>(\n     fold: &Fold<T>,\n-    +doc: doc::NmodDoc\n+    doc: doc::NmodDoc\n ) -> doc::NmodDoc {\n     let fold_copy = fold.clone();\n     doc::NmodDoc {\n@@ -271,7 +271,7 @@ pub fn default_par_fold_nmod<T:Owned Clone>(\n     }\n }\n \n-pub fn fold_ItemTag<T>(fold: &Fold<T>, +doc: doc::ItemTag) -> doc::ItemTag {\n+pub fn fold_ItemTag<T>(fold: &Fold<T>, doc: doc::ItemTag) -> doc::ItemTag {\n     match doc {\n       doc::ModTag(ModDoc) => {\n         doc::ModTag((fold.fold_mod)(fold, ModDoc))\n@@ -305,7 +305,7 @@ pub fn fold_ItemTag<T>(fold: &Fold<T>, +doc: doc::ItemTag) -> doc::ItemTag {\n \n pub fn default_seq_fold_fn<T>(\n     fold: &Fold<T>,\n-    +doc: doc::FnDoc\n+    doc: doc::FnDoc\n ) -> doc::FnDoc {\n     doc::SimpleItemDoc {\n         item: (fold.fold_item)(fold, copy doc.item),\n@@ -315,7 +315,7 @@ pub fn default_seq_fold_fn<T>(\n \n pub fn default_seq_fold_const<T>(\n     fold: &Fold<T>,\n-    +doc: doc::ConstDoc\n+    doc: doc::ConstDoc\n ) -> doc::ConstDoc {\n     doc::SimpleItemDoc {\n         item: (fold.fold_item)(fold, copy doc.item),\n@@ -325,7 +325,7 @@ pub fn default_seq_fold_const<T>(\n \n pub fn default_seq_fold_enum<T>(\n     fold: &Fold<T>,\n-    +doc: doc::EnumDoc\n+    doc: doc::EnumDoc\n ) -> doc::EnumDoc {\n     doc::EnumDoc {\n         item: (fold.fold_item)(fold, copy doc.item),\n@@ -335,7 +335,7 @@ pub fn default_seq_fold_enum<T>(\n \n pub fn default_seq_fold_trait<T>(\n     fold: &Fold<T>,\n-    +doc: doc::TraitDoc\n+    doc: doc::TraitDoc\n ) -> doc::TraitDoc {\n     doc::TraitDoc {\n         item: (fold.fold_item)(fold, copy doc.item),\n@@ -345,7 +345,7 @@ pub fn default_seq_fold_trait<T>(\n \n pub fn default_seq_fold_impl<T>(\n     fold: &Fold<T>,\n-    +doc: doc::ImplDoc\n+    doc: doc::ImplDoc\n ) -> doc::ImplDoc {\n     doc::ImplDoc {\n         item: (fold.fold_item)(fold, copy doc.item),\n@@ -355,7 +355,7 @@ pub fn default_seq_fold_impl<T>(\n \n pub fn default_seq_fold_type<T>(\n     fold: &Fold<T>,\n-    +doc: doc::TyDoc\n+    doc: doc::TyDoc\n ) -> doc::TyDoc {\n     doc::SimpleItemDoc {\n         item: (fold.fold_item)(fold, copy doc.item),\n@@ -365,7 +365,7 @@ pub fn default_seq_fold_type<T>(\n \n pub fn default_seq_fold_struct<T>(\n     fold: &Fold<T>,\n-    +doc: doc::StructDoc\n+    doc: doc::StructDoc\n ) -> doc::StructDoc {\n     doc::StructDoc {\n         item: (fold.fold_item)(fold, copy doc.item),"}, {"sha": "0c5a31ea7edc26083f2deab6d5e417a511f4f25a", "filename": "src/librustdoc/markdown_index_pass.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_index_pass.rs?ref=baf301cd3ef97115c82cac7f84827b54886f5635", "patch": "@@ -25,19 +25,19 @@ use pass::Pass;\n use core::str;\n use std::par;\n \n-pub fn mk_pass(+config: config::Config) -> Pass {\n+pub fn mk_pass(config: config::Config) -> Pass {\n     Pass {\n         name: ~\"markdown_index\",\n-        f: fn~(srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n+        f: fn~(srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {\n             run(srv, doc, copy config)\n         }\n     }\n }\n \n pub fn run(\n     _srv: astsrv::Srv,\n-    +doc: doc::Doc,\n-    +config: config::Config\n+    doc: doc::Doc,\n+    config: config::Config\n ) -> doc::Doc {\n     let fold = Fold {\n         fold_mod: fold_mod,\n@@ -49,7 +49,7 @@ pub fn run(\n \n fn fold_mod(\n     fold: &fold::Fold<config::Config>,\n-    +doc: doc::ModDoc\n+    doc: doc::ModDoc\n ) -> doc::ModDoc {\n \n     let doc = fold::default_any_fold_mod(fold, doc);\n@@ -62,7 +62,7 @@ fn fold_mod(\n \n fn fold_nmod(\n     fold: &fold::Fold<config::Config>,\n-    +doc: doc::NmodDoc\n+    doc: doc::NmodDoc\n ) -> doc::NmodDoc {\n \n     let doc = fold::default_any_fold_nmod(fold, doc);\n@@ -74,8 +74,8 @@ fn fold_nmod(\n }\n \n fn build_mod_index(\n-    +doc: doc::ModDoc,\n-    +config: config::Config\n+    doc: doc::ModDoc,\n+    config: config::Config\n ) -> doc::Index {\n     doc::Index {\n         entries: par::map(doc.items, |doc| {\n@@ -85,8 +85,8 @@ fn build_mod_index(\n }\n \n fn build_nmod_index(\n-    +doc: doc::NmodDoc,\n-    +config: config::Config\n+    doc: doc::NmodDoc,\n+    config: config::Config\n ) -> doc::Index {\n     doc::Index {\n         entries: par::map(doc.fns, |doc| {\n@@ -96,8 +96,8 @@ fn build_nmod_index(\n }\n \n fn item_to_entry(\n-    +doc: doc::ItemTag,\n-    +config: config::Config\n+    doc: doc::ItemTag,\n+    config: config::Config\n ) -> doc::IndexEntry {\n     let link = match doc {\n       doc::ModTag(_) | doc::NmodTag(_)\n@@ -266,7 +266,7 @@ mod test {\n \n     use core::path::Path;\n \n-    pub fn mk_doc(output_style: config::OutputStyle, +source: ~str)\n+    pub fn mk_doc(output_style: config::OutputStyle, source: ~str)\n                -> doc::Doc {\n         do astsrv::from_str(source) |srv| {\n             let config = config::Config {"}, {"sha": "a6be38b4eb4f58a527a4bae4188f2ece0830971a", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 47, "deletions": 47, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=baf301cd3ef97115c82cac7f84827b54886f5635", "patch": "@@ -41,9 +41,9 @@ use core::vec;\n use std::par;\n use syntax;\n \n-pub fn mk_pass(+writer_factory: WriterFactory) -> Pass {\n+pub fn mk_pass(writer_factory: WriterFactory) -> Pass {\n     let f = fn~(move writer_factory,\n-                srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n+                srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {\n         run(srv, doc, copy writer_factory)\n     };\n \n@@ -55,8 +55,8 @@ pub fn mk_pass(+writer_factory: WriterFactory) -> Pass {\n \n fn run(\n     srv: astsrv::Srv,\n-    +doc: doc::Doc,\n-    +writer_factory: WriterFactory\n+    doc: doc::Doc,\n+    writer_factory: WriterFactory\n ) -> doc::Doc {\n \n     pure fn mods_last(item1: &doc::ItemTag, item2: &doc::ItemTag) -> bool {\n@@ -115,8 +115,8 @@ type Ctxt = {\n };\n \n pub fn write_markdown(\n-    +doc: doc::Doc,\n-    +writer_factory: WriterFactory\n+    doc: doc::Doc,\n+    writer_factory: WriterFactory\n ) {\n     // There is easy parallelism to be had here, but\n     // we don't want to spawn too many pandoc processes.\n@@ -159,12 +159,12 @@ fn should_request_new_writer_for_each_page() {\n     }\n }\n \n-fn write_title(ctxt: &Ctxt, +page: doc::Page) {\n+fn write_title(ctxt: &Ctxt, page: doc::Page) {\n     ctxt.w.write_line(fmt!(\"%% %s\", make_title(page)));\n     ctxt.w.write_line(~\"\");\n }\n \n-fn make_title(+page: doc::Page) -> ~str {\n+fn make_title(page: doc::Page) -> ~str {\n     let item = match page {\n       doc::CratePage(CrateDoc) => {\n         doc::ModTag(copy CrateDoc.topmod)\n@@ -205,18 +205,18 @@ enum Hlvl {\n     H4 = 4\n }\n \n-fn write_header(ctxt: &Ctxt, lvl: Hlvl, +doc: doc::ItemTag) {\n+fn write_header(ctxt: &Ctxt, lvl: Hlvl, doc: doc::ItemTag) {\n     let text = header_text(doc);\n     write_header_(ctxt, lvl, text);\n }\n \n-fn write_header_(ctxt: &Ctxt, lvl: Hlvl, +title: ~str) {\n+fn write_header_(ctxt: &Ctxt, lvl: Hlvl, title: ~str) {\n     let hashes = str::from_chars(vec::from_elem(lvl as uint, '#'));\n     ctxt.w.write_line(fmt!(\"%s %s\", hashes, title));\n     ctxt.w.write_line(~\"\");\n }\n \n-pub fn header_kind(+doc: doc::ItemTag) -> ~str {\n+pub fn header_kind(doc: doc::ItemTag) -> ~str {\n     match doc {\n       doc::ModTag(_) => {\n         if doc.id() == syntax::ast::crate_node_id {\n@@ -252,7 +252,7 @@ pub fn header_kind(+doc: doc::ItemTag) -> ~str {\n     }\n }\n \n-pub fn header_name(+doc: doc::ItemTag) -> ~str {\n+pub fn header_name(doc: doc::ItemTag) -> ~str {\n     let fullpath = str::connect(doc.path() + ~[doc.name()], ~\"::\");\n     match &doc {\n       &doc::ModTag(_) if doc.id() != syntax::ast::crate_node_id => {\n@@ -281,7 +281,7 @@ pub fn header_name(+doc: doc::ItemTag) -> ~str {\n     }\n }\n \n-pub fn header_text(+doc: doc::ItemTag) -> ~str {\n+pub fn header_text(doc: doc::ItemTag) -> ~str {\n     match &doc {\n       &doc::ImplTag(ref ImplDoc) => {\n         let header_kind = header_kind(copy doc);\n@@ -305,21 +305,21 @@ fn header_text_(kind: &str, name: &str) -> ~str {\n \n fn write_crate(\n     ctxt: &Ctxt,\n-    +doc: doc::CrateDoc\n+    doc: doc::CrateDoc\n ) {\n     write_top_module(ctxt, copy doc.topmod);\n }\n \n fn write_top_module(\n     ctxt: &Ctxt,\n-    +ModDoc: doc::ModDoc\n+    ModDoc: doc::ModDoc\n ) {\n     write_mod_contents(ctxt, ModDoc);\n }\n \n fn write_mod(\n     ctxt: &Ctxt,\n-    +ModDoc: doc::ModDoc\n+    ModDoc: doc::ModDoc\n ) {\n     write_mod_contents(ctxt, ModDoc);\n }\n@@ -332,7 +332,7 @@ fn should_write_full_path_to_mod() {\n \n fn write_oldcommon(\n     ctxt: &Ctxt,\n-    +desc: Option<~str>,\n+    desc: Option<~str>,\n     sections: &[doc::Section]\n ) {\n     write_desc(ctxt, desc);\n@@ -341,7 +341,7 @@ fn write_oldcommon(\n \n fn write_desc(\n     ctxt: &Ctxt,\n-    +desc: Option<~str>\n+    desc: Option<~str>\n ) {\n     match desc {\n         Some(desc) => {\n@@ -358,7 +358,7 @@ fn write_sections(ctxt: &Ctxt, sections: &[doc::Section]) {\n     }\n }\n \n-fn write_section(ctxt: &Ctxt, +section: doc::Section) {\n+fn write_section(ctxt: &Ctxt, section: doc::Section) {\n     write_header_(ctxt, H4, copy section.header);\n     ctxt.w.write_line(copy section.body);\n     ctxt.w.write_line(~\"\");\n@@ -377,7 +377,7 @@ fn should_write_sections() {\n \n fn write_mod_contents(\n     ctxt: &Ctxt,\n-    +doc: doc::ModDoc\n+    doc: doc::ModDoc\n ) {\n     write_oldcommon(ctxt, doc.desc(), doc.sections());\n     if doc.index.is_some() {\n@@ -389,15 +389,15 @@ fn write_mod_contents(\n     }\n }\n \n-fn write_item(ctxt: &Ctxt, +doc: doc::ItemTag) {\n+fn write_item(ctxt: &Ctxt, doc: doc::ItemTag) {\n     write_item_(ctxt, doc, true);\n }\n \n-fn write_item_no_header(ctxt: &Ctxt, +doc: doc::ItemTag) {\n+fn write_item_no_header(ctxt: &Ctxt, doc: doc::ItemTag) {\n     write_item_(ctxt, doc, false);\n }\n \n-fn write_item_(ctxt: &Ctxt, +doc: doc::ItemTag, write_header: bool) {\n+fn write_item_(ctxt: &Ctxt, doc: doc::ItemTag, write_header: bool) {\n     if write_header {\n         write_item_header(ctxt, copy doc);\n     }\n@@ -415,13 +415,13 @@ fn write_item_(ctxt: &Ctxt, +doc: doc::ItemTag, write_header: bool) {\n     }\n }\n \n-fn write_item_header(ctxt: &Ctxt, +doc: doc::ItemTag) {\n-    write_header(ctxt, item_header_lvl(doc), doc);\n+fn write_item_header(ctxt: &Ctxt, doc: doc::ItemTag) {\n+    write_header(ctxt, item_header_lvl(&doc), doc);\n }\n \n-fn item_header_lvl(+doc: doc::ItemTag) -> Hlvl {\n+fn item_header_lvl(doc: &doc::ItemTag) -> Hlvl {\n     match doc {\n-      doc::ModTag(_) | doc::NmodTag(_) => H1,\n+      &doc::ModTag(_) | &doc::NmodTag(_) => H1,\n       _ => H2\n     }\n }\n@@ -432,7 +432,7 @@ fn should_write_crate_description() {\n     assert str::contains(markdown, ~\"this is the crate\");\n }\n \n-fn write_index(ctxt: &Ctxt, +index: doc::Index) {\n+fn write_index(ctxt: &Ctxt, index: doc::Index) {\n     if vec::is_empty(index.entries) {\n         return;\n     }\n@@ -481,7 +481,7 @@ fn should_write_index_for_foreign_mods() {\n     );\n }\n \n-fn write_nmod(ctxt: &Ctxt, +doc: doc::NmodDoc) {\n+fn write_nmod(ctxt: &Ctxt, doc: doc::NmodDoc) {\n     write_oldcommon(ctxt, doc.desc(), doc.sections());\n     if doc.index.is_some() {\n         write_index(ctxt, (&doc.index).get());\n@@ -516,7 +516,7 @@ fn should_write_foreign_fn_headers() {\n \n fn write_fn(\n     ctxt: &Ctxt,\n-    +doc: doc::FnDoc\n+    doc: doc::FnDoc\n ) {\n     write_fnlike(\n         ctxt,\n@@ -528,15 +528,15 @@ fn write_fn(\n \n fn write_fnlike(\n     ctxt: &Ctxt,\n-    +sig: Option<~str>,\n-    +desc: Option<~str>,\n+    sig: Option<~str>,\n+    desc: Option<~str>,\n     sections: &[doc::Section]\n ) {\n     write_sig(ctxt, sig);\n     write_oldcommon(ctxt, desc, sections);\n }\n \n-fn write_sig(ctxt: &Ctxt, +sig: Option<~str>) {\n+fn write_sig(ctxt: &Ctxt, sig: Option<~str>) {\n     match sig {\n       Some(sig) => {\n         ctxt.w.write_line(code_block_indent(sig));\n@@ -546,7 +546,7 @@ fn write_sig(ctxt: &Ctxt, +sig: Option<~str>) {\n     }\n }\n \n-fn code_block_indent(+s: ~str) -> ~str {\n+fn code_block_indent(s: ~str) -> ~str {\n     let lines = str::lines_any(s);\n     let indented = vec::map(lines, |line| fmt!(\"    %s\", *line) );\n     str::connect(indented, ~\"\\n\")\n@@ -599,7 +599,7 @@ fn should_leave_blank_line_between_fn_header_and_sig() {\n \n fn write_const(\n     ctxt: &Ctxt,\n-    +doc: doc::ConstDoc\n+    doc: doc::ConstDoc\n ) {\n     write_sig(ctxt, copy doc.sig);\n     write_oldcommon(ctxt, doc.desc(), doc.sections());\n@@ -621,7 +621,7 @@ fn should_write_const_description() {\n \n fn write_enum(\n     ctxt: &Ctxt,\n-    +doc: doc::EnumDoc\n+    doc: doc::EnumDoc\n ) {\n     write_oldcommon(ctxt, doc.desc(), doc.sections());\n     write_variants(ctxt, doc.variants);\n@@ -657,7 +657,7 @@ fn write_variants(\n     ctxt.w.write_line(~\"\");\n }\n \n-fn write_variant(ctxt: &Ctxt, +doc: doc::VariantDoc) {\n+fn write_variant(ctxt: &Ctxt, doc: doc::VariantDoc) {\n     assert doc.sig.is_some();\n     let sig = (&doc.sig).get();\n     match copy doc.desc {\n@@ -703,7 +703,7 @@ fn should_write_variant_list_with_signatures() {\n          \\n* `c(int)` - a\\n\\n\");\n }\n \n-fn write_trait(ctxt: &Ctxt, +doc: doc::TraitDoc) {\n+fn write_trait(ctxt: &Ctxt, doc: doc::TraitDoc) {\n     write_oldcommon(ctxt, doc.desc(), doc.sections());\n     write_methods(ctxt, doc.methods);\n }\n@@ -714,7 +714,7 @@ fn write_methods(ctxt: &Ctxt, docs: &[doc::MethodDoc]) {\n     }\n }\n \n-fn write_method(ctxt: &Ctxt, +doc: doc::MethodDoc) {\n+fn write_method(ctxt: &Ctxt, doc: doc::MethodDoc) {\n     write_header_(ctxt, H3, header_text_(~\"Method\", doc.name));\n     write_fnlike(\n         ctxt,\n@@ -751,7 +751,7 @@ fn should_write_trait_method_signature() {\n     assert str::contains(markdown, ~\"\\n    fn a()\");\n }\n \n-fn write_impl(ctxt: &Ctxt, +doc: doc::ImplDoc) {\n+fn write_impl(ctxt: &Ctxt, doc: doc::ImplDoc) {\n     write_oldcommon(ctxt, doc.desc(), doc.sections());\n     write_methods(ctxt, doc.methods);\n }\n@@ -791,7 +791,7 @@ fn should_write_impl_method_signature() {\n \n fn write_type(\n     ctxt: &Ctxt,\n-    +doc: doc::TyDoc\n+    doc: doc::TyDoc\n ) {\n     write_sig(ctxt, copy doc.sig);\n     write_oldcommon(ctxt, doc.desc(), doc.sections());\n@@ -818,7 +818,7 @@ fn should_write_type_signature() {\n \n fn write_struct(\n     ctxt: &Ctxt,\n-    +doc: doc::StructDoc\n+    doc: doc::StructDoc\n ) {\n     write_sig(ctxt, copy doc.sig);\n     write_oldcommon(ctxt, doc.desc(), doc.sections());\n@@ -851,14 +851,14 @@ mod test {\n     use core::path::Path;\n     use core::str;\n \n-    pub fn render(+source: ~str) -> ~str {\n+    pub fn render(source: ~str) -> ~str {\n         let (srv, doc) = create_doc_srv(source);\n         let markdown = write_markdown_str_srv(srv, doc);\n         debug!(\"markdown: %s\", markdown);\n         markdown\n     }\n \n-    pub fn create_doc_srv(+source: ~str) -> (astsrv::Srv, doc::Doc) {\n+    pub fn create_doc_srv(source: ~str) -> (astsrv::Srv, doc::Doc) {\n         do astsrv::from_str(source) |srv| {\n \n             let config = config::Config {\n@@ -888,13 +888,13 @@ mod test {\n         }\n     }\n \n-    pub fn create_doc(+source: ~str) -> doc::Doc {\n+    pub fn create_doc(source: ~str) -> doc::Doc {\n         let (_, doc) = create_doc_srv(source);\n         doc\n     }\n \n     pub fn write_markdown_str(\n-        +doc: doc::Doc\n+        doc: doc::Doc\n     ) -> ~str {\n         let (writer_factory, po) = markdown_writer::future_writer_factory();\n         write_markdown(doc, move writer_factory);\n@@ -903,7 +903,7 @@ mod test {\n \n     pub fn write_markdown_str_srv(\n         srv: astsrv::Srv,\n-        +doc: doc::Doc\n+        doc: doc::Doc\n     ) -> ~str {\n         let (writer_factory, po) = markdown_writer::future_writer_factory();\n         let pass = mk_pass(move writer_factory);"}, {"sha": "04f50ebe67f257aa1ba4ff911990e4719727581c", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=baf301cd3ef97115c82cac7f84827b54886f5635", "patch": "@@ -34,8 +34,8 @@ pub enum WriteInstr {\n     Done\n }\n \n-pub type Writer = fn~(+v: WriteInstr);\n-pub type WriterFactory = fn~(+page: doc::Page) -> Writer;\n+pub type Writer = fn~(v: WriteInstr);\n+pub type WriterFactory = fn~(page: doc::Page) -> Writer;\n \n pub trait WriterUtils {\n     fn write_str(+str: ~str);\n@@ -44,11 +44,11 @@ pub trait WriterUtils {\n }\n \n impl Writer: WriterUtils {\n-    fn write_str(+str: ~str) {\n+    fn write_str(str: ~str) {\n         self(Write(str));\n     }\n \n-    fn write_line(+str: ~str) {\n+    fn write_line(str: ~str) {\n         self.write_str(str + ~\"\\n\");\n     }\n \n@@ -57,7 +57,7 @@ impl Writer: WriterUtils {\n     }\n }\n \n-pub fn make_writer_factory(+config: config::Config) -> WriterFactory {\n+pub fn make_writer_factory(config: config::Config) -> WriterFactory {\n     match config.output_format {\n       config::Markdown => {\n         markdown_writer_factory(config)\n@@ -68,21 +68,21 @@ pub fn make_writer_factory(+config: config::Config) -> WriterFactory {\n     }\n }\n \n-fn markdown_writer_factory(+config: config::Config) -> WriterFactory {\n-    fn~(+page: doc::Page) -> Writer {\n+fn markdown_writer_factory(config: config::Config) -> WriterFactory {\n+    fn~(page: doc::Page) -> Writer {\n         markdown_writer(copy config, page)\n     }\n }\n \n-fn pandoc_writer_factory(+config: config::Config) -> WriterFactory {\n-    fn~(+page: doc::Page) -> Writer {\n+fn pandoc_writer_factory(config: config::Config) -> WriterFactory {\n+    fn~(page: doc::Page) -> Writer {\n         pandoc_writer(copy config, page)\n     }\n }\n \n fn markdown_writer(\n-    +config: config::Config,\n-    +page: doc::Page\n+    config: config::Config,\n+    page: doc::Page\n ) -> Writer {\n     let filename = make_local_filename(config, page);\n     do generic_writer |markdown| {\n@@ -91,8 +91,8 @@ fn markdown_writer(\n }\n \n fn pandoc_writer(\n-    +config: config::Config,\n-    +page: doc::Page\n+    config: config::Config,\n+    page: doc::Page\n ) -> Writer {\n     assert config.pandoc_cmd.is_some();\n     let pandoc_cmd = (&config.pandoc_cmd).get();\n@@ -167,7 +167,7 @@ fn readclose(fd: libc::c_int) -> ~str {\n     }\n }\n \n-fn generic_writer(+process: fn~(+markdown: ~str)) -> Writer {\n+fn generic_writer(process: fn~(markdown: ~str)) -> Writer {\n     let (setup_po, setup_ch) = pipes::stream();\n     do task::spawn |move process, move setup_ch| {\n         let po: oldcomm::Port<WriteInstr> = oldcomm::Port();\n@@ -186,22 +186,22 @@ fn generic_writer(+process: fn~(+markdown: ~str)) -> Writer {\n     };\n     let ch = setup_po.recv();\n \n-    fn~(+instr: WriteInstr) {\n+    fn~(instr: WriteInstr) {\n         oldcomm::send(ch, instr);\n     }\n }\n \n fn make_local_filename(\n-    +config: config::Config,\n-    +page: doc::Page\n+    config: config::Config,\n+    page: doc::Page\n ) -> Path {\n     let filename = make_filename(copy config, page);\n     config.output_dir.push_rel(&filename)\n }\n \n pub fn make_filename(\n-    +config: config::Config,\n-    +page: doc::Page\n+    config: config::Config,\n+    page: doc::Page\n ) -> Path {\n     let filename = {\n         match page {\n@@ -277,7 +277,7 @@ mod test {\n     use extract;\n     use path_pass;\n \n-    pub fn mk_doc(+name: ~str, +source: ~str) -> doc::Doc {\n+    pub fn mk_doc(name: ~str, source: ~str) -> doc::Doc {\n         do astsrv::from_str(source) |srv| {\n             let doc = extract::from_srv(srv, copy name);\n             let doc = (path_pass::mk_pass().f)(srv, doc);\n@@ -286,7 +286,7 @@ mod test {\n     }\n }\n \n-fn write_file(path: &Path, +s: ~str) {\n+fn write_file(path: &Path, s: ~str) {\n     use io::WriterUtil;\n \n     match io::file_writer(path, ~[io::Create, io::Truncate]) {\n@@ -301,7 +301,7 @@ pub fn future_writer_factory(\n ) -> (WriterFactory, oldcomm::Port<(doc::Page, ~str)>) {\n     let markdown_po = oldcomm::Port();\n     let markdown_ch = oldcomm::Chan(&markdown_po);\n-    let writer_factory = fn~(+page: doc::Page) -> Writer {\n+    let writer_factory = fn~(page: doc::Page) -> Writer {\n         let (writer_po, writer_ch) = pipes::stream();\n         do task::spawn |move writer_ch| {\n             let (writer, future) = future_writer();\n@@ -317,7 +317,7 @@ pub fn future_writer_factory(\n \n fn future_writer() -> (Writer, future::Future<~str>) {\n     let (port, chan) = pipes::stream();\n-    let writer = fn~(move chan, +instr: WriteInstr) {\n+    let writer = fn~(move chan, instr: WriteInstr) {\n         chan.send(copy instr);\n     };\n     let future = do future::from_fn |move port| {"}, {"sha": "1649a7ee82304abeed9adc0275c5abc05237159e", "filename": "src/librustdoc/page_pass.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fpage_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fpage_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpage_pass.rs?ref=baf301cd3ef97115c82cac7f84827b54886f5635", "patch": "@@ -36,15 +36,15 @@ use syntax::ast;\n pub fn mk_pass(output_style: config::OutputStyle) -> Pass {\n     Pass {\n         name: ~\"page\",\n-        f: fn~(srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n+        f: fn~(srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {\n             run(srv, doc, output_style)\n         }\n     }\n }\n \n pub fn run(\n     _srv: astsrv::Srv,\n-    +doc: doc::Doc,\n+    doc: doc::Doc,\n     output_style: config::OutputStyle\n ) -> doc::Doc {\n \n@@ -81,7 +81,7 @@ fn make_doc_from_pages(page_port: PagePort) -> doc::Doc {\n     }\n }\n \n-fn find_pages(+doc: doc::Doc, page_chan: PageChan) {\n+fn find_pages(doc: doc::Doc, page_chan: PageChan) {\n     let fold = Fold {\n         fold_crate: fold_crate,\n         fold_mod: fold_mod,\n@@ -95,7 +95,7 @@ fn find_pages(+doc: doc::Doc, page_chan: PageChan) {\n \n fn fold_crate(\n     fold: &fold::Fold<NominalPageChan>,\n-    +doc: doc::CrateDoc\n+    doc: doc::CrateDoc\n ) -> doc::CrateDoc {\n \n     let doc = fold::default_seq_fold_crate(fold, doc);\n@@ -112,7 +112,7 @@ fn fold_crate(\n \n fn fold_mod(\n     fold: &fold::Fold<NominalPageChan>,\n-    +doc: doc::ModDoc\n+    doc: doc::ModDoc\n ) -> doc::ModDoc {\n \n     let doc = fold::default_any_fold_mod(fold, doc);\n@@ -127,7 +127,7 @@ fn fold_mod(\n     doc\n }\n \n-fn strip_mod(+doc: doc::ModDoc) -> doc::ModDoc {\n+fn strip_mod(doc: doc::ModDoc) -> doc::ModDoc {\n     doc::ModDoc {\n         items: do doc.items.filtered |item| {\n             match *item {\n@@ -142,7 +142,7 @@ fn strip_mod(+doc: doc::ModDoc) -> doc::ModDoc {\n \n fn fold_nmod(\n     fold: &fold::Fold<NominalPageChan>,\n-    +doc: doc::NmodDoc\n+    doc: doc::NmodDoc\n ) -> doc::NmodDoc {\n     let doc = fold::default_seq_fold_nmod(fold, doc);\n     let page = doc::ItemPage(doc::NmodTag(copy doc));\n@@ -193,15 +193,15 @@ mod test {\n \n     pub fn mk_doc_(\n         output_style: config::OutputStyle,\n-        +source: ~str\n+        source: ~str\n     ) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n             run(srv, doc, output_style)\n         }\n     }\n \n-    pub fn mk_doc(+source: ~str) -> doc::Doc {\n+    pub fn mk_doc(source: ~str) -> doc::Doc {\n         mk_doc_(config::DocPerMod, copy source)\n     }\n }"}, {"sha": "b8fcc29c32bcc82687fa4d0f26087c7978a3aa8e", "filename": "src/librustdoc/parse.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fparse.rs?ref=baf301cd3ef97115c82cac7f84827b54886f5635", "patch": "@@ -25,7 +25,7 @@ pub fn from_file(file: &Path) -> @ast::crate {\n         file, ~[], parse::new_parse_sess(None))\n }\n \n-pub fn from_str(+source: ~str) -> @ast::crate {\n+pub fn from_str(source: ~str) -> @ast::crate {\n     parse::parse_crate_from_source_str(\n         ~\"-\", @source, ~[], parse::new_parse_sess(None))\n }\n@@ -35,11 +35,11 @@ pub fn from_file_sess(sess: session::Session, file: &Path) -> @ast::crate {\n         file, cfg(sess, file_input(copy *file)), sess.parse_sess)\n }\n \n-pub fn from_str_sess(sess: session::Session, +source: ~str) -> @ast::crate {\n+pub fn from_str_sess(sess: session::Session, source: ~str) -> @ast::crate {\n     parse::parse_crate_from_source_str(\n         ~\"-\", @copy source, cfg(sess, str_input(source)), sess.parse_sess)\n }\n \n-fn cfg(sess: session::Session, +input: driver::input) -> ast::crate_cfg {\n+fn cfg(sess: session::Session, input: driver::input) -> ast::crate_cfg {\n     driver::default_configuration(sess, ~\"rustdoc\", input)\n }"}, {"sha": "afd93175c9b32c10a48b5d26ff5c587323598329", "filename": "src/librustdoc/pass.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpass.rs?ref=baf301cd3ef97115c82cac7f84827b54886f5635", "patch": "@@ -25,8 +25,8 @@ pub struct Pass {\n \n pub fn run_passes(\n     srv: astsrv::Srv,\n-    +doc: doc::Doc,\n-    +passes: ~[Pass]\n+    doc: doc::Doc,\n+    passes: ~[Pass]\n ) -> doc::Doc {\n     let mut passno = 0;\n     do vec::foldl(doc, passes) |doc, pass| {\n@@ -42,7 +42,7 @@ pub fn run_passes(\n fn test_run_passes() {\n     fn pass1(\n         _srv: astsrv::Srv,\n-        +doc: doc::Doc\n+        doc: doc::Doc\n     ) -> doc::Doc {\n         doc::Doc{\n             pages: ~[\n@@ -61,7 +61,7 @@ fn test_run_passes() {\n     }\n     fn pass2(\n         _srv: astsrv::Srv,\n-        +doc: doc::Doc\n+        doc: doc::Doc\n     ) -> doc::Doc {\n         doc::Doc{\n             pages: ~["}, {"sha": "9c781c30dbcf6ddb89a0a636afdabb481b433fb2", "filename": "src/librustdoc/path_pass.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fpath_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fpath_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpath_pass.rs?ref=baf301cd3ef97115c82cac7f84827b54886f5635", "patch": "@@ -39,7 +39,7 @@ impl Ctxt: Clone {\n }\n \n #[allow(non_implicitly_copyable_typarams)]\n-fn run(srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n+fn run(srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {\n     let ctxt = Ctxt {\n         srv: srv,\n         mut path: ~[]\n@@ -53,15 +53,15 @@ fn run(srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n     (fold.fold_doc)(&fold, doc)\n }\n \n-fn fold_item(fold: &fold::Fold<Ctxt>, +doc: doc::ItemDoc) -> doc::ItemDoc {\n+fn fold_item(fold: &fold::Fold<Ctxt>, doc: doc::ItemDoc) -> doc::ItemDoc {\n     doc::ItemDoc {\n         path: copy fold.ctxt.path,\n         .. doc\n     }\n }\n \n #[allow(non_implicitly_copyable_typarams)]\n-fn fold_mod(fold: &fold::Fold<Ctxt>, +doc: doc::ModDoc) -> doc::ModDoc {\n+fn fold_mod(fold: &fold::Fold<Ctxt>, doc: doc::ModDoc) -> doc::ModDoc {\n     let is_topmod = doc.id() == ast::crate_node_id;\n \n     if !is_topmod { fold.ctxt.path.push(doc.name()); }\n@@ -74,7 +74,7 @@ fn fold_mod(fold: &fold::Fold<Ctxt>, +doc: doc::ModDoc) -> doc::ModDoc {\n     }\n }\n \n-fn fold_nmod(fold: &fold::Fold<Ctxt>, +doc: doc::NmodDoc) -> doc::NmodDoc {\n+fn fold_nmod(fold: &fold::Fold<Ctxt>, doc: doc::NmodDoc) -> doc::NmodDoc {\n     fold.ctxt.path.push(doc.name());\n     let doc = fold::default_seq_fold_nmod(fold, doc);\n     fold.ctxt.path.pop();"}, {"sha": "9a9ec19b7db0f5bee5461b832d14739d3ea6906b", "filename": "src/librustdoc/prune_hidden_pass.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_hidden_pass.rs?ref=baf301cd3ef97115c82cac7f84827b54886f5635", "patch": "@@ -28,7 +28,7 @@ pub fn mk_pass() -> Pass {\n     }\n }\n \n-pub fn run(srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n+pub fn run(srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {\n     let fold = Fold {\n         fold_mod: fold_mod,\n         .. fold::default_any_fold(srv)\n@@ -38,7 +38,7 @@ pub fn run(srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n \n fn fold_mod(\n     fold: &fold::Fold<astsrv::Srv>,\n-    +doc: doc::ModDoc\n+    doc: doc::ModDoc\n ) -> doc::ModDoc {\n     let doc = fold::default_any_fold_mod(fold, doc);\n \n@@ -50,7 +50,7 @@ fn fold_mod(\n     }\n }\n \n-fn is_hidden(srv: astsrv::Srv, +doc: doc::ItemDoc) -> bool {\n+fn is_hidden(srv: astsrv::Srv, doc: doc::ItemDoc) -> bool {\n     use syntax::ast_map;\n \n     let id = doc.id;\n@@ -76,7 +76,7 @@ pub mod test {\n     use extract;\n     use prune_hidden_pass::run;\n \n-    pub fn mk_doc(+source: ~str) -> doc::Doc {\n+    pub fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n             run(srv, doc)"}, {"sha": "94098e4df862779202f4fc8ce431d1681da3062f", "filename": "src/librustdoc/prune_private_pass.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fprune_private_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fprune_private_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_private_pass.rs?ref=baf301cd3ef97115c82cac7f84827b54886f5635", "patch": "@@ -29,7 +29,7 @@ pub fn mk_pass() -> Pass {\n     }\n }\n \n-pub fn run(srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n+pub fn run(srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {\n     let fold = Fold {\n         fold_mod: fold_mod,\n         .. fold::default_any_fold(srv)\n@@ -39,7 +39,7 @@ pub fn run(srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n \n fn fold_mod(\n     fold: &fold::Fold<astsrv::Srv>,\n-    +doc: doc::ModDoc\n+    doc: doc::ModDoc\n ) -> doc::ModDoc {\n     let doc = fold::default_any_fold_mod(fold, doc);\n \n@@ -51,7 +51,7 @@ fn fold_mod(\n     }\n }\n \n-fn is_visible(srv: astsrv::Srv, +doc: doc::ItemDoc) -> bool {\n+fn is_visible(srv: astsrv::Srv, doc: doc::ItemDoc) -> bool {\n     use syntax::ast_map;\n     use syntax::ast;\n \n@@ -80,7 +80,7 @@ pub mod test {\n     use extract;\n     use prune_private_pass::run;\n \n-    pub fn mk_doc(+source: ~str) -> doc::Doc {\n+    pub fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n             run(srv, doc)"}, {"sha": "1aa1edb61a326364a5a514686ccec7dbed6676a7", "filename": "src/librustdoc/rustdoc.rc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Frustdoc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Frustdoc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Frustdoc.rc?ref=baf301cd3ef97115c82cac7f84827b54886f5635", "patch": "@@ -20,7 +20,6 @@\n #[crate_type = \"lib\"];\n \n #[no_core];\n-#[legacy_modes];\n #[legacy_records];\n \n #[allow(non_implicitly_copyable_typarams)];\n@@ -88,7 +87,7 @@ fn main() {\n }\n \n /// Runs rustdoc over the given file\n-fn run(+config: Config) {\n+fn run(config: Config) {\n \n     let source_file = copy config.input_crate;\n \n@@ -147,7 +146,7 @@ fn run(+config: Config) {\n     }\n }\n \n-fn time<T>(+what: ~str, f: fn() -> T) -> T {\n+fn time<T>(what: ~str, f: fn() -> T) -> T {\n     let start = std::time::precise_time_s();\n     let rv = f();\n     let end = std::time::precise_time_s();"}, {"sha": "2e04f416176f922999213a9bb7cd7730898af0f6", "filename": "src/librustdoc/sectionalize_pass.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fsectionalize_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fsectionalize_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsectionalize_pass.rs?ref=baf301cd3ef97115c82cac7f84827b54886f5635", "patch": "@@ -32,7 +32,7 @@ pub fn mk_pass() -> Pass {\n     }\n }\n \n-pub fn run(_srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n+pub fn run(_srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {\n     let fold = Fold {\n         fold_item: fold_item,\n         fold_trait: fold_trait,\n@@ -42,7 +42,7 @@ pub fn run(_srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n     (fold.fold_doc)(&fold, doc)\n }\n \n-fn fold_item(fold: &fold::Fold<()>, +doc: doc::ItemDoc) -> doc::ItemDoc {\n+fn fold_item(fold: &fold::Fold<()>, doc: doc::ItemDoc) -> doc::ItemDoc {\n     let doc = fold::default_seq_fold_item(fold, doc);\n     let (desc, sections) = sectionalize(copy doc.desc);\n \n@@ -53,7 +53,7 @@ fn fold_item(fold: &fold::Fold<()>, +doc: doc::ItemDoc) -> doc::ItemDoc {\n     }\n }\n \n-fn fold_trait(fold: &fold::Fold<()>, +doc: doc::TraitDoc) -> doc::TraitDoc {\n+fn fold_trait(fold: &fold::Fold<()>, doc: doc::TraitDoc) -> doc::TraitDoc {\n     let doc = fold::default_seq_fold_trait(fold, doc);\n \n     doc::TraitDoc {\n@@ -70,7 +70,7 @@ fn fold_trait(fold: &fold::Fold<()>, +doc: doc::TraitDoc) -> doc::TraitDoc {\n     }\n }\n \n-fn fold_impl(fold: &fold::Fold<()>, +doc: doc::ImplDoc) -> doc::ImplDoc {\n+fn fold_impl(fold: &fold::Fold<()>, doc: doc::ImplDoc) -> doc::ImplDoc {\n     let doc = fold::default_seq_fold_impl(fold, doc);\n \n     doc::ImplDoc {\n@@ -87,7 +87,7 @@ fn fold_impl(fold: &fold::Fold<()>, +doc: doc::ImplDoc) -> doc::ImplDoc {\n     }\n }\n \n-fn sectionalize(+desc: Option<~str>) -> (Option<~str>, ~[doc::Section]) {\n+fn sectionalize(desc: Option<~str>) -> (Option<~str>, ~[doc::Section]) {\n \n     /*!\n      * Take a description of the form\n@@ -156,7 +156,7 @@ fn sectionalize(+desc: Option<~str>) -> (Option<~str>, ~[doc::Section]) {\n     (new_desc, sections)\n }\n \n-fn parse_header(+line: ~str) -> Option<~str> {\n+fn parse_header(line: ~str) -> Option<~str> {\n     if str::starts_with(line, ~\"# \") {\n         Some(str::slice(line, 2u, str::len(line)))\n     } else {\n@@ -259,7 +259,7 @@ pub mod test {\n     use extract;\n     use sectionalize_pass::run;\n \n-    pub fn mk_doc(+source: ~str) -> doc::Doc {\n+    pub fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n             let doc = (attr_pass::mk_pass().f)(srv, doc);"}, {"sha": "dcc4902c9b86b761dffe2df3f8e56d5c7d00ae92", "filename": "src/librustdoc/sort_pass.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fsort_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Fsort_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_pass.rs?ref=baf301cd3ef97115c82cac7f84827b54886f5635", "patch": "@@ -27,10 +27,10 @@ pub type ItemLtEqOp = pure fn~(v1: &doc::ItemTag, v2:  &doc::ItemTag) -> bool;\n \n type ItemLtEq = NominalOp<ItemLtEqOp>;\n \n-pub fn mk_pass(+name: ~str, +lteq: ItemLtEqOp) -> Pass {\n+pub fn mk_pass(name: ~str, lteq: ItemLtEqOp) -> Pass {\n     Pass {\n         name: copy name,\n-        f: fn~(move lteq, srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n+        f: fn~(move lteq, srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {\n             run(srv, doc, NominalOp { op: copy lteq })\n         }\n     }\n@@ -39,8 +39,8 @@ pub fn mk_pass(+name: ~str, +lteq: ItemLtEqOp) -> Pass {\n #[allow(non_implicitly_copyable_typarams)]\n fn run(\n     _srv: astsrv::Srv,\n-    +doc: doc::Doc,\n-    +lteq: ItemLtEq\n+    doc: doc::Doc,\n+    lteq: ItemLtEq\n ) -> doc::Doc {\n     let fold = Fold {\n         fold_mod: fold_mod,\n@@ -52,7 +52,7 @@ fn run(\n #[allow(non_implicitly_copyable_typarams)]\n fn fold_mod(\n     fold: &fold::Fold<ItemLtEq>,\n-    +doc: doc::ModDoc\n+    doc: doc::ModDoc\n ) -> doc::ModDoc {\n     let doc = fold::default_any_fold_mod(fold, doc);\n     doc::ModDoc {"}, {"sha": "f276854c4ec3be994916dea42caf07819c20a02c", "filename": "src/librustdoc/text_pass.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Ftext_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Ftext_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftext_pass.rs?ref=baf301cd3ef97115c82cac7f84827b54886f5635", "patch": "@@ -23,11 +23,11 @@ use util::NominalOp;\n use std::par;\n use std::cell::Cell;\n \n-pub fn mk_pass(+name: ~str, +op: fn~(&str) -> ~str) -> Pass {\n+pub fn mk_pass(name: ~str, op: fn~(&str) -> ~str) -> Pass {\n     let op = Cell(op);\n     Pass {\n         name: copy name,\n-        f: fn~(move op, srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n+        f: fn~(move op, srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {\n             run(srv, doc, op.take())\n         }\n     }\n@@ -38,8 +38,8 @@ type Op = fn~(&str) -> ~str;\n #[allow(non_implicitly_copyable_typarams)]\n fn run(\n     _srv: astsrv::Srv,\n-    +doc: doc::Doc,\n-    +op: Op\n+    doc: doc::Doc,\n+    op: Op\n ) -> doc::Doc {\n     let op = NominalOp {\n         op: move op\n@@ -54,13 +54,13 @@ fn run(\n     (fold.fold_doc)(&fold, doc)\n }\n \n-fn maybe_apply_op(+op: NominalOp<Op>, s: &Option<~str>) -> Option<~str> {\n+fn maybe_apply_op(op: NominalOp<Op>, s: &Option<~str>) -> Option<~str> {\n     s.map(|s| (op.op)(*s) )\n }\n \n fn fold_item(\n     fold: &fold::Fold<NominalOp<Op>>,\n-    +doc: doc::ItemDoc\n+    doc: doc::ItemDoc\n ) -> doc::ItemDoc {\n     let doc = fold::default_seq_fold_item(fold, doc);\n \n@@ -73,8 +73,8 @@ fn fold_item(\n }\n \n fn apply_to_sections(\n-    +op: NominalOp<Op>,\n-    +sections: ~[doc::Section]\n+    op: NominalOp<Op>,\n+    sections: ~[doc::Section]\n ) -> ~[doc::Section] {\n     par::map(sections, |section, copy op| doc::Section {\n         header: (op.op)(copy section.header),\n@@ -84,7 +84,7 @@ fn apply_to_sections(\n \n fn fold_enum(\n     fold: &fold::Fold<NominalOp<Op>>,\n-    +doc: doc::EnumDoc) -> doc::EnumDoc {\n+    doc: doc::EnumDoc) -> doc::EnumDoc {\n     let doc = fold::default_seq_fold_enum(fold, doc);\n     let fold_copy = copy *fold;\n \n@@ -101,7 +101,7 @@ fn fold_enum(\n \n fn fold_trait(\n     fold: &fold::Fold<NominalOp<Op>>,\n-    +doc: doc::TraitDoc\n+    doc: doc::TraitDoc\n ) -> doc::TraitDoc {\n     let doc = fold::default_seq_fold_trait(fold, doc);\n \n@@ -112,8 +112,8 @@ fn fold_trait(\n }\n \n fn apply_to_methods(\n-    +op: NominalOp<Op>,\n-    +docs: ~[doc::MethodDoc]\n+    op: NominalOp<Op>,\n+    docs: ~[doc::MethodDoc]\n ) -> ~[doc::MethodDoc] {\n     do par::map(docs) |doc, copy op| {\n         doc::MethodDoc {\n@@ -127,7 +127,7 @@ fn apply_to_methods(\n \n fn fold_impl(\n     fold: &fold::Fold<NominalOp<Op>>,\n-    +doc: doc::ImplDoc\n+    doc: doc::ImplDoc\n ) -> doc::ImplDoc {\n     let doc = fold::default_seq_fold_impl(fold, doc);\n \n@@ -303,7 +303,7 @@ mod test {\n \n     use core::str;\n \n-    pub fn mk_doc(+source: ~str) -> doc::Doc {\n+    pub fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n             let doc = (attr_pass::mk_pass().f)(srv, doc);"}, {"sha": "bac69e328481c125bdb0c508dc45ace3458112bd", "filename": "src/librustdoc/trim_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Ftrim_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Ftrim_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftrim_pass.rs?ref=baf301cd3ef97115c82cac7f84827b54886f5635", "patch": "@@ -43,7 +43,7 @@ mod test {\n     use extract;\n     use trim_pass::mk_pass;\n \n-    pub fn mk_doc(+source: ~str) -> doc::Doc {\n+    pub fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n             let doc = (attr_pass::mk_pass().f)(srv, doc);"}, {"sha": "f790c37e6ea7404799c85f463bfc491f7474ea7f", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=baf301cd3ef97115c82cac7f84827b54886f5635", "patch": "@@ -37,7 +37,7 @@ pub fn mk_pass() -> Pass {\n \n pub fn run(\n     srv: astsrv::Srv,\n-    +doc: doc::Doc\n+    doc: doc::Doc\n ) -> doc::Doc {\n     let fold = Fold {\n         fold_fn: fold_fn,\n@@ -54,7 +54,7 @@ pub fn run(\n \n fn fold_fn(\n     fold: &fold::Fold<astsrv::Srv>,\n-    +doc: doc::FnDoc\n+    doc: doc::FnDoc\n ) -> doc::FnDoc {\n \n     let srv = fold.ctxt;\n@@ -98,7 +98,7 @@ fn should_add_foreign_fn_sig() {\n \n fn fold_const(\n     fold: &fold::Fold<astsrv::Srv>,\n-    +doc: doc::ConstDoc\n+    doc: doc::ConstDoc\n ) -> doc::ConstDoc {\n     let srv = fold.ctxt;\n \n@@ -125,7 +125,7 @@ fn should_add_const_types() {\n \n fn fold_enum(\n     fold: &fold::Fold<astsrv::Srv>,\n-    +doc: doc::EnumDoc\n+    doc: doc::EnumDoc\n ) -> doc::EnumDoc {\n     let doc_id = doc.id();\n     let srv = fold.ctxt;\n@@ -166,7 +166,7 @@ fn should_add_variant_sigs() {\n \n fn fold_trait(\n     fold: &fold::Fold<astsrv::Srv>,\n-    +doc: doc::TraitDoc\n+    doc: doc::TraitDoc\n ) -> doc::TraitDoc {\n     doc::TraitDoc {\n         methods: merge_methods(fold.ctxt, doc.id(), copy doc.methods),\n@@ -177,7 +177,7 @@ fn fold_trait(\n fn merge_methods(\n     srv: astsrv::Srv,\n     item_id: doc::AstId,\n-    +docs: ~[doc::MethodDoc]\n+    docs: ~[doc::MethodDoc]\n ) -> ~[doc::MethodDoc] {\n     do par::map(docs) |doc| {\n         doc::MethodDoc {\n@@ -190,7 +190,7 @@ fn merge_methods(\n fn get_method_sig(\n     srv: astsrv::Srv,\n     item_id: doc::AstId,\n-    +method_name: ~str\n+    method_name: ~str\n ) -> Option<~str> {\n     do astsrv::exec(srv) |copy method_name, ctxt| {\n         match ctxt.ast_map.get(item_id) {\n@@ -257,7 +257,7 @@ fn should_add_trait_method_sigs() {\n \n fn fold_impl(\n     fold: &fold::Fold<astsrv::Srv>,\n-    +doc: doc::ImplDoc\n+    doc: doc::ImplDoc\n ) -> doc::ImplDoc {\n \n     let srv = fold.ctxt;\n@@ -312,7 +312,7 @@ fn should_add_impl_method_sigs() {\n \n fn fold_type(\n     fold: &fold::Fold<astsrv::Srv>,\n-    +doc: doc::TyDoc\n+    doc: doc::TyDoc\n ) -> doc::TyDoc {\n \n     let srv = fold.ctxt;\n@@ -346,7 +346,7 @@ fn should_add_type_signatures() {\n \n fn fold_struct(\n     fold: &fold::Fold<astsrv::Srv>,\n-    +doc: doc::StructDoc\n+    doc: doc::StructDoc\n ) -> doc::StructDoc {\n     let srv = fold.ctxt;\n \n@@ -415,7 +415,7 @@ pub mod test {\n     use extract;\n     use tystr_pass::run;\n \n-    pub fn mk_doc(+source: ~str) -> doc::Doc {\n+    pub fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n             run(srv, doc)"}, {"sha": "23741ed5acfa9ad55b6d7eef406fd35a18a29510", "filename": "src/librustdoc/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf301cd3ef97115c82cac7f84827b54886f5635/src%2Flibrustdoc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Futil.rs?ref=baf301cd3ef97115c82cac7f84827b54886f5635", "patch": "@@ -23,7 +23,7 @@ impl<T: Copy> NominalOp<T>: Clone {\n }\n \n pub fn spawn_listener<A: Owned>(\n-    +f: fn~(oldcomm::Port<A>)) -> oldcomm::Chan<A> {\n+    f: fn~(oldcomm::Port<A>)) -> oldcomm::Chan<A> {\n     let setup_po = oldcomm::Port();\n     let setup_ch = oldcomm::Chan(&setup_po);\n     do task::spawn |move f| {\n@@ -36,7 +36,7 @@ pub fn spawn_listener<A: Owned>(\n }\n \n pub fn spawn_conversation<A: Owned, B: Owned>\n-    (+f: fn~(oldcomm::Port<A>, oldcomm::Chan<B>))\n+    (f: fn~(oldcomm::Port<A>, oldcomm::Chan<B>))\n     -> (oldcomm::Port<B>, oldcomm::Chan<A>) {\n     let from_child = oldcomm::Port();\n     let to_parent = oldcomm::Chan(&from_child);"}]}