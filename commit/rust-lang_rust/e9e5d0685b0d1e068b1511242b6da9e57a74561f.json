{"sha": "e9e5d0685b0d1e068b1511242b6da9e57a74561f", "node_id": "C_kwDOAAsO6NoAKGU5ZTVkMDY4NWIwZDFlMDY4YjE1MTEyNDJiNmRhOWU1N2E3NDU2MWY", "commit": {"author": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2022-06-17T12:10:07Z"}, "committer": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2022-07-05T21:25:43Z"}, "message": "Relax constrained generics to TypeVisitable", "tree": {"sha": "2a53a59ce5ebc574c0d32b61b1327dfb4570fe7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a53a59ce5ebc574c0d32b61b1327dfb4570fe7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9e5d0685b0d1e068b1511242b6da9e57a74561f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEm/Nz5g9hEBdpmKVOB8rDzKfgZD8FAmLErFgACgkQB8rDzKfg\nZD9IpBAAirrleU/lrMSpSsu235RF2dnFDhzH4+BuAuDnt3lsz0DVlcDDBU7FB6GL\nX3QnpPUVeup00JZWDn/eWd46ttxxEQsBSSrG4ZGABhpms0v06/cNYz3ibyKqhkZl\nV5aMTJy55mu9DG7+hyoTIfdI4+v93QuKQqfkpYaoj+tdZM6Ng7HNFRxBt1ItpIdp\nLlRtfdhdomGoMOmcOPKW3D+rVPGZwpdO1tjLNvYQhR0EmGPb9D1GqtwKv216aNCg\nwWseMotQQPoH3aM3tHTj0eqfjHBAe2WyX9H26RBrZLQzWir67vLha3PESOPEwcfW\nJin8YJ1u+A5MzUgiiP5H6oyGXC3hV6U0gYlchn1YNFkfOOHV4aUxZTKh/G6Foj7n\nb8NCRqbl+zf9GDkpibFqEva7/aEEnxPZLdu925wHm1Jw3ivnLb1H29wZY0CgOwQm\ntqA0EgUdgCs2zmvC44Yuo+gVYgypmVzJmDhC49TkXvxiy9MPcFajSZHEdHJrHCLo\nqxaK48WET7daL5MeZPrtcYZtUK7Q0YGkQezDEKmcOHdQx37Hor1SjLTu2Xr84I2J\nm3a5sE6KU2ZQXEzENaxVsq7047H6N5P2cfTf97kgCVzkIAILYburSJhROEVa/mBz\nJwT7D8yilhx1Te+zRd4JlBmjQ5hztB3Glvt5jwu4EZsQtlJXBqQ=\n=7UFK\n-----END PGP SIGNATURE-----", "payload": "tree 2a53a59ce5ebc574c0d32b61b1327dfb4570fe7f\nparent f66c06f7f2341bfe5935c470be53c8e6767717f3\nauthor Alan Egerton <eggyal@gmail.com> 1655467807 +0100\ncommitter Alan Egerton <eggyal@gmail.com> 1657056343 +0100\n\nRelax constrained generics to TypeVisitable\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9e5d0685b0d1e068b1511242b6da9e57a74561f", "html_url": "https://github.com/rust-lang/rust/commit/e9e5d0685b0d1e068b1511242b6da9e57a74561f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9e5d0685b0d1e068b1511242b6da9e57a74561f/comments", "author": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f66c06f7f2341bfe5935c470be53c8e6767717f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f66c06f7f2341bfe5935c470be53c8e6767717f3", "html_url": "https://github.com/rust-lang/rust/commit/f66c06f7f2341bfe5935c470be53c8e6767717f3"}], "stats": {"total": 99, "additions": 56, "deletions": 43}, "files": [{"sha": "a2011c88d3a3d98053235908281b66d9da699302", "filename": "compiler/rustc_borrowck/src/constraint_generation.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs?ref=e9e5d0685b0d1e068b1511242b6da9e57a74561f", "patch": "@@ -7,6 +7,7 @@ use rustc_middle::mir::{\n };\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::SubstsRef;\n+use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{self, RegionVid, Ty};\n \n use crate::{\n@@ -163,7 +164,7 @@ impl<'cx, 'cg, 'tcx> ConstraintGeneration<'cx, 'cg, 'tcx> {\n     /// `location`.\n     fn add_regular_live_constraint<T>(&mut self, live_ty: T, location: Location)\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeVisitable<'tcx>,\n     {\n         debug!(\"add_regular_live_constraint(live_ty={:?}, location={:?})\", live_ty, location);\n "}, {"sha": "15401f6a5cf4d251bce0d5d491774bea266b6d24", "filename": "compiler/rustc_borrowck/src/type_check/liveness/trace.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs?ref=e9e5d0685b0d1e068b1511242b6da9e57a74561f", "patch": "@@ -3,7 +3,7 @@ use rustc_index::bit_set::HybridBitSet;\n use rustc_index::interval::IntervalSet;\n use rustc_infer::infer::canonical::QueryRegionConstraints;\n use rustc_middle::mir::{BasicBlock, Body, ConstraintCategory, Local, Location};\n-use rustc_middle::ty::{Ty, TypeFoldable};\n+use rustc_middle::ty::{Ty, TypeFoldable, TypeVisitable};\n use rustc_trait_selection::traits::query::dropck_outlives::DropckOutlivesResult;\n use rustc_trait_selection::traits::query::type_op::outlives::DropckOutlives;\n use rustc_trait_selection::traits::query::type_op::{TypeOp, TypeOpOutput};\n@@ -477,7 +477,7 @@ impl<'tcx> LivenessContext<'_, '_, '_, 'tcx> {\n     /// points `live_at`.\n     fn add_use_live_facts_for(\n         &mut self,\n-        value: impl TypeFoldable<'tcx>,\n+        value: impl TypeVisitable<'tcx>,\n         live_at: &IntervalSet<PointIndex>,\n     ) {\n         debug!(\"add_use_live_facts_for(value={:?})\", value);\n@@ -542,7 +542,7 @@ impl<'tcx> LivenessContext<'_, '_, '_, 'tcx> {\n     fn make_all_regions_live(\n         elements: &RegionValueElements,\n         typeck: &mut TypeChecker<'_, 'tcx>,\n-        value: impl TypeFoldable<'tcx>,\n+        value: impl TypeVisitable<'tcx>,\n         live_at: &IntervalSet<PointIndex>,\n     ) {\n         debug!(\"make_all_regions_live(value={:?})\", value);"}, {"sha": "f842183017972a026371f5bd9d3955c51f4dac34", "filename": "compiler/rustc_const_eval/src/interpret/util.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs?ref=e9e5d0685b0d1e068b1511242b6da9e57a74561f", "patch": "@@ -1,5 +1,7 @@\n use rustc_middle::mir::interpret::InterpResult;\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVisitor};\n+use rustc_middle::ty::{\n+    self, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVisitable, TypeVisitor,\n+};\n use std::convert::TryInto;\n use std::ops::ControlFlow;\n \n@@ -10,7 +12,7 @@ use std::ops::ControlFlow;\n /// case these parameters are unused.\n pub(crate) fn ensure_monomorphic_enough<'tcx, T>(tcx: TyCtxt<'tcx>, ty: T) -> InterpResult<'tcx>\n where\n-    T: TypeFoldable<'tcx>,\n+    T: TypeVisitable<'tcx>,\n {\n     debug!(\"ensure_monomorphic_enough: ty={:?}\", ty);\n     if !ty.needs_subst() {"}, {"sha": "96ef7a9be8e5b0789fafdfe56f68ae1062b631fe", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=e9e5d0685b0d1e068b1511242b6da9e57a74561f", "patch": "@@ -5,7 +5,7 @@ use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::TyCtxt;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n-use rustc_middle::ty::{self, Binder, DefIdTree, Region, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, Binder, DefIdTree, Region, Ty, TypeFoldable, TypeVisitable};\n use rustc_span::Span;\n \n /// Information about the anonymous region we are searching for.\n@@ -142,7 +142,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n \n     fn includes_region(\n         &self,\n-        ty: Binder<'tcx, impl TypeFoldable<'tcx>>,\n+        ty: Binder<'tcx, impl TypeVisitable<'tcx>>,\n         region: ty::BoundRegionKind,\n     ) -> bool {\n         let late_bound_regions = self.tcx().collect_referenced_late_bound_regions(&ty);"}, {"sha": "991fd23ab4344660949b4e0ce80673f672cc5aaa", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=e9e5d0685b0d1e068b1511242b6da9e57a74561f", "patch": "@@ -25,6 +25,7 @@ use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::relate::RelateResult;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, SubstsRef};\n+use rustc_middle::ty::visit::TypeVisitable;\n pub use rustc_middle::ty::IntVarValue;\n use rustc_middle::ty::{self, GenericParamDefKind, InferConst, Ty, TyCtxt};\n use rustc_middle::ty::{ConstVid, FloatVid, IntVid, TyVid};\n@@ -1438,7 +1439,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// `resolve_vars_if_possible()`.\n     pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeVisitable<'tcx>,\n     {\n         value.visit_with(&mut resolve::UnresolvedTypeFinder::new(self)).break_value()\n     }"}, {"sha": "74deae3f3c8560fc6b32a82024a9bc8425225ffd", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=e9e5d0685b0d1e068b1511242b6da9e57a74561f", "patch": "@@ -29,6 +29,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::fold::{TypeFoldable, TypeSuperFoldable, TypeVisitor};\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n+use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{self, InferConst, Ty, TyCtxt};\n use rustc_span::Span;\n use std::fmt::Debug;\n@@ -810,7 +811,7 @@ struct ScopeInstantiator<'me, 'tcx> {\n }\n \n impl<'me, 'tcx> TypeVisitor<'tcx> for ScopeInstantiator<'me, 'tcx> {\n-    fn visit_binder<T: TypeFoldable<'tcx>>(\n+    fn visit_binder<T: TypeVisitable<'tcx>>(\n         &mut self,\n         t: &ty::Binder<'tcx, T>,\n     ) -> ControlFlow<Self::BreakTy> {"}, {"sha": "324f474a8c7b0567f9225e68542d4220b8f7bb52", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=e9e5d0685b0d1e068b1511242b6da9e57a74561f", "patch": "@@ -9,7 +9,8 @@ use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::fold::BottomUpFolder;\n use rustc_middle::ty::subst::{GenericArgKind, Subst};\n use rustc_middle::ty::{\n-    self, OpaqueHiddenType, OpaqueTypeKey, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVisitor,\n+    self, OpaqueHiddenType, OpaqueTypeKey, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable,\n+    TypeVisitable, TypeVisitor,\n };\n use rustc_span::Span;\n \n@@ -461,7 +462,7 @@ impl<'tcx, OP> TypeVisitor<'tcx> for ConstrainOpaqueTypeRegionVisitor<OP>\n where\n     OP: FnMut(ty::Region<'tcx>),\n {\n-    fn visit_binder<T: TypeFoldable<'tcx>>(\n+    fn visit_binder<T: TypeVisitable<'tcx>>(\n         &mut self,\n         t: &ty::Binder<'tcx, T>,\n     ) -> ControlFlow<Self::BreakTy> {"}, {"sha": "3515593df6d679113091cac54eb56bd6218bf128", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=e9e5d0685b0d1e068b1511242b6da9e57a74561f", "patch": "@@ -3,8 +3,8 @@\n use std::ops::ControlFlow;\n \n use crate::ty::{\n-    fold::TypeFoldable, Const, ConstKind, DefIdTree, ExistentialPredicate, InferTy,\n-    PolyTraitPredicate, Ty, TyCtxt, TypeSuperFoldable, TypeVisitor,\n+    fold::TypeFoldable, visit::TypeVisitable, Const, ConstKind, DefIdTree, ExistentialPredicate,\n+    InferTy, PolyTraitPredicate, Ty, TyCtxt, TypeSuperFoldable, TypeVisitor,\n };\n \n use rustc_data_structures::fx::FxHashMap;\n@@ -87,7 +87,7 @@ pub trait IsSuggestable<'tcx> {\n \n impl<'tcx, T> IsSuggestable<'tcx> for T\n where\n-    T: TypeFoldable<'tcx>,\n+    T: TypeVisitable<'tcx>,\n {\n     fn is_suggestable(self, tcx: TyCtxt<'tcx>) -> bool {\n         self.visit_with(&mut IsSuggestableVisitor { tcx }).is_continue()"}, {"sha": "3a795af2121d0e409640353eb36da77e0b4f89de", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=e9e5d0685b0d1e068b1511242b6da9e57a74561f", "patch": "@@ -1514,7 +1514,7 @@ impl<'tcx> ParamEnv<'tcx> {\n     /// `where Box<u32>: Copy`, which are clearly never\n     /// satisfiable. We generally want to behave as if they were true,\n     /// although the surrounding function is never reachable.\n-    pub fn and<T: TypeFoldable<'tcx>>(self, value: T) -> ParamEnvAnd<'tcx, T> {\n+    pub fn and<T: TypeVisitable<'tcx>>(self, value: T) -> ParamEnvAnd<'tcx, T> {\n         match self.reveal() {\n             Reveal::UserFacing => ParamEnvAnd { param_env: self, value },\n "}, {"sha": "6d0073c6bf1ee46c37a68ce27922f809d55158a2", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=e9e5d0685b0d1e068b1511242b6da9e57a74561f", "patch": "@@ -2,7 +2,7 @@ use crate::mir::interpret::{AllocRange, GlobalAlloc, Pointer, Provenance, Scalar\n use crate::ty::subst::{GenericArg, GenericArgKind, Subst};\n use crate::ty::{\n     self, ConstInt, DefIdTree, ParamConst, ScalarInt, Term, Ty, TyCtxt, TypeFoldable,\n-    TypeSuperFoldable,\n+    TypeSuperFoldable, TypeVisitable,\n };\n use rustc_apfloat::ieee::{Double, Single};\n use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n@@ -2277,7 +2277,7 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n \n     fn prepare_late_bound_region_info<T>(&mut self, value: &ty::Binder<'tcx, T>)\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeVisitable<'tcx>,\n     {\n         struct LateBoundRegionNameCollector<'a, 'tcx> {\n             used_region_names: &'a mut FxHashSet<Symbol>,"}, {"sha": "eeaf960d5df96e065aedf3217b9244fb859f7246", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=e9e5d0685b0d1e068b1511242b6da9e57a74561f", "patch": "@@ -453,7 +453,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::PredicateKind<'a> {\n \n impl<'a, 'tcx, T: Lift<'tcx>> Lift<'tcx> for ty::Binder<'a, T>\n where\n-    <T as Lift<'tcx>>::Lifted: TypeFoldable<'tcx>,\n+    <T as Lift<'tcx>>::Lifted: TypeVisitable<'tcx>,\n {\n     type Lifted = ty::Binder<'tcx, T::Lifted>;\n     fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {"}, {"sha": "2cff120ff8ca3882b8347ef7b75f3960cbf43b83", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=e9e5d0685b0d1e068b1511242b6da9e57a74561f", "patch": "@@ -8,7 +8,7 @@ use crate::ty::subst::{GenericArg, InternalSubsts, Subst, SubstsRef};\n use crate::ty::InferTy::*;\n use crate::ty::{\n     self, AdtDef, DefIdTree, Discr, Term, Ty, TyCtxt, TypeFlags, TypeFoldable, TypeSuperFoldable,\n-    TypeVisitor,\n+    TypeVisitable, TypeVisitor,\n };\n use crate::ty::{List, ParamEnv};\n use polonius_engine::Atom;\n@@ -986,7 +986,7 @@ pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);\n \n impl<'tcx, T> Binder<'tcx, T>\n where\n-    T: TypeFoldable<'tcx>,\n+    T: TypeVisitable<'tcx>,\n {\n     /// Wraps `value` in a binder, asserting that `value` does not\n     /// contain any bound vars that would be bound by the\n@@ -1050,14 +1050,14 @@ impl<'tcx, T> Binder<'tcx, T> {\n         Binder(value, self.1)\n     }\n \n-    pub fn map_bound_ref<F, U: TypeFoldable<'tcx>>(&self, f: F) -> Binder<'tcx, U>\n+    pub fn map_bound_ref<F, U: TypeVisitable<'tcx>>(&self, f: F) -> Binder<'tcx, U>\n     where\n         F: FnOnce(&T) -> U,\n     {\n         self.as_ref().map_bound(f)\n     }\n \n-    pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>\n+    pub fn map_bound<F, U: TypeVisitable<'tcx>>(self, f: F) -> Binder<'tcx, U>\n     where\n         F: FnOnce(T) -> U,\n     {\n@@ -1069,7 +1069,7 @@ impl<'tcx, T> Binder<'tcx, T> {\n         Binder(value, self.1)\n     }\n \n-    pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>\n+    pub fn try_map_bound<F, U: TypeVisitable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>\n     where\n         F: FnOnce(T) -> Result<U, E>,\n     {\n@@ -1092,7 +1092,7 @@ impl<'tcx, T> Binder<'tcx, T> {\n     /// in `bind`. This may be (debug) asserted in the future.\n     pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>\n     where\n-        U: TypeFoldable<'tcx>,\n+        U: TypeVisitable<'tcx>,\n     {\n         if cfg!(debug_assertions) {\n             let mut validator = ValidateBoundVars::new(self.bound_vars());\n@@ -1113,7 +1113,7 @@ impl<'tcx, T> Binder<'tcx, T> {\n     /// would not be that useful.)\n     pub fn no_bound_vars(self) -> Option<T>\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeVisitable<'tcx>,\n     {\n         if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }\n     }"}, {"sha": "229d7f556953449a1400200b7bce2b9e177eecf4", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=e9e5d0685b0d1e068b1511242b6da9e57a74561f", "patch": "@@ -27,7 +27,9 @@ use rustc_middle::thir::abstract_const::Node as ACNode;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::{self, Const, DefIdTree, GenericParamDefKind};\n-use rustc_middle::ty::{TraitRef, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVisitor};\n+use rustc_middle::ty::{\n+    TraitRef, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVisitable, TypeVisitor,\n+};\n use rustc_session::lint;\n use rustc_span::hygiene::Transparency;\n use rustc_span::symbol::{kw, Ident};\n@@ -80,7 +82,7 @@ trait DefIdVisitor<'tcx> {\n             dummy: Default::default(),\n         }\n     }\n-    fn visit(&mut self, ty_fragment: impl TypeFoldable<'tcx>) -> ControlFlow<Self::BreakTy> {\n+    fn visit(&mut self, ty_fragment: impl TypeVisitable<'tcx>) -> ControlFlow<Self::BreakTy> {\n         ty_fragment.visit_with(&mut self.skeleton())\n     }\n     fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "a0221734d29223ef138edfc2e1ca5904ef03f8ff", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=e9e5d0685b0d1e068b1511242b6da9e57a74561f", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::ty::layout::IntegerExt;\n use rustc_middle::ty::print::{Print, Printer};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst};\n use rustc_middle::ty::{\n-    self, EarlyBinder, FloatTy, Instance, IntTy, Ty, TyCtxt, TypeFoldable, UintTy,\n+    self, EarlyBinder, FloatTy, Instance, IntTy, Ty, TyCtxt, TypeFoldable, TypeVisitable, UintTy,\n };\n use rustc_span::symbol::kw;\n use rustc_target::abi::call::FnAbi;\n@@ -240,7 +240,7 @@ impl<'tcx> SymbolMangler<'tcx> {\n         print_value: impl FnOnce(&'a mut Self, &T) -> Result<&'a mut Self, !>,\n     ) -> Result<&'a mut Self, !>\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeVisitable<'tcx>,\n     {\n         let regions = if value.has_late_bound_regions() {\n             self.tcx.collect_referenced_late_bound_regions(value)"}, {"sha": "ed5ab14cf19336af52e5aae0d366c367d4c372e6", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=e9e5d0685b0d1e068b1511242b6da9e57a74561f", "patch": "@@ -19,7 +19,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::{GenericArg, InternalSubsts, Subst};\n use rustc_middle::ty::{\n-    self, EarlyBinder, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVisitor,\n+    self, EarlyBinder, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVisitable, TypeVisitor,\n };\n use rustc_middle::ty::{Predicate, ToPredicate};\n use rustc_session::lint::builtin::WHERE_CLAUSES_OBJECT_SAFETY;\n@@ -731,7 +731,7 @@ fn receiver_is_dispatchable<'tcx>(\n     })\n }\n \n-fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n+fn contains_illegal_self_type_reference<'tcx, T: TypeVisitable<'tcx>>(\n     tcx: TyCtxt<'tcx>,\n     trait_def_id: DefId,\n     value: T,"}, {"sha": "1eb8ddc0f2fcaea938eb4844e9309f7bf64c6380", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=e9e5d0685b0d1e068b1511242b6da9e57a74561f", "patch": "@@ -31,6 +31,7 @@ use rustc_infer::infer::resolve::OpportunisticRegionResolver;\n use rustc_middle::traits::select::OverflowError;\n use rustc_middle::ty::fold::{MaxUniverse, TypeFoldable, TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::subst::Subst;\n+use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{self, EarlyBinder, Term, ToPredicate, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n \n@@ -359,7 +360,7 @@ where\n     result\n }\n \n-pub(crate) fn needs_normalization<'tcx, T: TypeFoldable<'tcx>>(value: &T, reveal: Reveal) -> bool {\n+pub(crate) fn needs_normalization<'tcx, T: TypeVisitable<'tcx>>(value: &T, reveal: Reveal) -> bool {\n     match reveal {\n         Reveal::UserFacing => value\n             .has_type_flags(ty::TypeFlags::HAS_TY_PROJECTION | ty::TypeFlags::HAS_CT_PROJECTION),"}, {"sha": "33ca7e33d6f2f33df97aaf5ff7a5f21c169d2e2d", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=e9e5d0685b0d1e068b1511242b6da9e57a74561f", "patch": "@@ -14,6 +14,7 @@ use rustc_infer::traits::Normalized;\n use rustc_middle::mir;\n use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeSuperFoldable};\n use rustc_middle::ty::subst::Subst;\n+use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitor};\n \n use std::ops::ControlFlow;\n@@ -108,7 +109,7 @@ struct MaxEscapingBoundVarVisitor {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for MaxEscapingBoundVarVisitor {\n-    fn visit_binder<T: TypeFoldable<'tcx>>(\n+    fn visit_binder<T: TypeVisitable<'tcx>>(\n         &mut self,\n         t: &ty::Binder<'tcx, T>,\n     ) -> ControlFlow<Self::BreakTy> {"}, {"sha": "f87ee95d461f28e39f2afe6824a32fe60afb248b", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=e9e5d0685b0d1e068b1511242b6da9e57a74561f", "patch": "@@ -35,7 +35,8 @@ use rustc_ast::ast;\n use rustc_middle::traits::{ChalkEnvironmentAndGoal, ChalkRustInterner as RustInterner};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n use rustc_middle::ty::{\n-    self, Binder, Region, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable, TypeVisitor,\n+    self, Binder, Region, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable, TypeVisitable,\n+    TypeVisitor,\n };\n use rustc_span::def_id::DefId;\n \n@@ -896,7 +897,7 @@ impl<'tcx> BoundVarsCollector<'tcx> {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n-    fn visit_binder<T: TypeFoldable<'tcx>>(\n+    fn visit_binder<T: TypeVisitable<'tcx>>(\n         &mut self,\n         t: &Binder<'tcx, T>,\n     ) -> ControlFlow<Self::BreakTy> {"}, {"sha": "d9425f8a6238a185f23c23767b9226acf9489a63", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=e9e5d0685b0d1e068b1511242b6da9e57a74561f", "patch": "@@ -4,7 +4,7 @@ use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::traits::CodegenObligationError;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{\n-    self, Binder, Instance, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVisitor,\n+    self, Binder, Instance, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVisitable, TypeVisitor,\n };\n use rustc_span::{sym, DUMMY_SP};\n use rustc_trait_selection::traits;\n@@ -56,7 +56,7 @@ impl<'tcx> BoundVarsCollector<'tcx> {\n impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n     type BreakTy = ();\n \n-    fn visit_binder<T: TypeFoldable<'tcx>>(\n+    fn visit_binder<T: TypeVisitable<'tcx>>(\n         &mut self,\n         t: &Binder<'tcx, T>,\n     ) -> ControlFlow<Self::BreakTy> {"}, {"sha": "f3341e72e7362d9741914116ae34485223f806a4", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=e9e5d0685b0d1e068b1511242b6da9e57a74561f", "patch": "@@ -23,6 +23,7 @@ use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::{\n     self, GenericArgKind, InternalSubsts, Subst, SubstsRef, UserSelfTy, UserSubsts,\n };\n+use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{\n     self, AdtKind, CanonicalUserType, DefIdTree, EarlyBinder, GenericParamDefKind, ToPolyTraitRef,\n     ToPredicate, Ty, UserType,\n@@ -557,7 +558,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     // sufficiently enforced with erased regions. =)\n     fn can_contain_user_lifetime_bounds<T>(t: T) -> bool\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeVisitable<'tcx>,\n     {\n         t.has_free_regions() || t.has_projections() || t.has_infer_types()\n     }"}, {"sha": "839a97f981d37ea7b18016d76f6209d97caef512", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=e9e5d0685b0d1e068b1511242b6da9e57a74561f", "patch": "@@ -18,7 +18,7 @@ use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts, Subst};\n use rustc_middle::ty::trait_def::TraitSpecializationKind;\n use rustc_middle::ty::{\n     self, AdtKind, DefIdTree, EarlyBinder, GenericParamDefKind, ToPredicate, Ty, TyCtxt,\n-    TypeFoldable, TypeSuperFoldable, TypeVisitor,\n+    TypeFoldable, TypeVisitable, TypeVisitor,\n };\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::{sym, Ident, Symbol};"}, {"sha": "279d4d7e6e5f15c9c0c8ef203e9c027c1d22ca52", "filename": "compiler/rustc_typeck/src/constrained_generic_params.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e5d0685b0d1e068b1511242b6da9e57a74561f/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs?ref=e9e5d0685b0d1e068b1511242b6da9e57a74561f", "patch": "@@ -1,5 +1,6 @@\n use rustc_data_structures::fx::FxHashSet;\n use rustc_middle::ty::fold::{TypeFoldable, TypeSuperFoldable, TypeVisitor};\n+use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::source_map::Span;\n use std::ops::ControlFlow;\n@@ -43,7 +44,7 @@ pub fn parameters_for_impl<'tcx>(\n /// of parameters whose values are needed in order to constrain `ty` - these\n /// differ, with the latter being a superset, in the presence of projections.\n pub fn parameters_for<'tcx>(\n-    t: &impl TypeFoldable<'tcx>,\n+    t: &impl TypeVisitable<'tcx>,\n     include_nonconstraining: bool,\n ) -> Vec<Parameter> {\n     let mut collector = ParameterCollector { parameters: vec![], include_nonconstraining };"}, {"sha": "a426fa1b0ffcfc927eb90dc075162f04dae1c21c", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9e5d0685b0d1e068b1511242b6da9e57a74561f/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e5d0685b0d1e068b1511242b6da9e57a74561f/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=e9e5d0685b0d1e068b1511242b6da9e57a74561f", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst};\n use rustc_middle::ty::{\n     self, AdtDef, Binder, BoundRegion, DefIdTree, FnSig, IntTy, ParamEnv, Predicate, PredicateKind, ProjectionTy,\n-    Region, RegionKind, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVisitor, UintTy, VariantDef, VariantDiscr,\n+    Region, RegionKind, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor, UintTy, VariantDef, VariantDiscr,\n };\n use rustc_span::symbol::Ident;\n use rustc_span::{sym, Span, Symbol, DUMMY_SP};\n@@ -765,7 +765,7 @@ pub fn for_each_top_level_late_bound_region<B>(\n                 ControlFlow::Continue(())\n             }\n         }\n-        fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<'tcx, T>) -> ControlFlow<Self::BreakTy> {\n+        fn visit_binder<T: TypeVisitable<'tcx>>(&mut self, t: &Binder<'tcx, T>) -> ControlFlow<Self::BreakTy> {\n             self.index += 1;\n             let res = t.super_visit_with(self);\n             self.index -= 1;"}]}