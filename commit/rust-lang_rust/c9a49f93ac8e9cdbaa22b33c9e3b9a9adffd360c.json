{"sha": "c9a49f93ac8e9cdbaa22b33c9e3b9a9adffd360c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5YTQ5ZjkzYWM4ZTljZGJhYTIyYjMzYzllM2I5YTlhZGZmZDM2MGM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-11T13:25:36Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-12T21:58:57Z"}, "message": "regionck.rs: remove dead fn type_strictly_outlives", "tree": {"sha": "1941bfad6e7b21eaa51a8237fb369fccb0c57a8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1941bfad6e7b21eaa51a8237fb369fccb0c57a8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9a49f93ac8e9cdbaa22b33c9e3b9a9adffd360c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9a49f93ac8e9cdbaa22b33c9e3b9a9adffd360c", "html_url": "https://github.com/rust-lang/rust/commit/c9a49f93ac8e9cdbaa22b33c9e3b9a9adffd360c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9a49f93ac8e9cdbaa22b33c9e3b9a9adffd360c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c3a8664b6c6ab0e5650166220f870c3a0c2b60b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c3a8664b6c6ab0e5650166220f870c3a0c2b60b", "html_url": "https://github.com/rust-lang/rust/commit/9c3a8664b6c6ab0e5650166220f870c3a0c2b60b"}], "stats": {"total": 41, "additions": 0, "deletions": 41}, "files": [{"sha": "fe40ade136da5614e8e769462352936fb259ba8d", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c9a49f93ac8e9cdbaa22b33c9e3b9a9adffd360c/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a49f93ac8e9cdbaa22b33c9e3b9a9adffd360c/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=c9a49f93ac8e9cdbaa22b33c9e3b9a9adffd360c", "patch": "@@ -1562,47 +1562,6 @@ fn components_must_outlive<'a, 'tcx>(rcx: &Rcx<'a, 'tcx>,\n     }\n }\n \n-/// Checks that all data reachable via `ty` *strictly* outlives `scope`.\n-/// This is used by dropck.\n-///\n-/// CAUTION: It is mostly but not entirely equivalent to `T:'parent`\n-/// where `'parent` is the parent of `scope`. The difference is subtle\n-/// and has to do with trait objects, primarily. In particular, if you\n-/// have `Foo<'y>+'z`, then we require that `'z:'parent` but not\n-/// `'y:'parent` (same with lifetimes appearing in fn arguments). This\n-/// is because there is no actual reference to the trait object that\n-/// outlives `scope`, so we don't need to require that the type could\n-/// be named outside `scope`.  Because trait objects are always\n-/// considered \"suspicious\" by dropck, if we don't add this special\n-/// case, you wind up with some kind of annoying and odd limitations\n-/// that crop up\n-/// `src/test/compile-fail/regions-early-bound-trait-param.rs`.\n-/// Basically there we have `&'foo Trait<'foo>+'bar`, and thus forcing\n-/// `'foo` to outlive `'parent` also forces the borrow to outlive\n-/// `'parent`, which is longer than should be necessary. The existence\n-/// of this \"the same but different\" predicate is somewhat bothersome\n-/// and questionable.\n-pub fn type_strictly_outlives<'a, 'tcx>(rcx: &mut Rcx<'a, 'tcx>,\n-                                        origin: infer::SubregionOrigin<'tcx>,\n-                                        ty: Ty<'tcx>,\n-                                        scope: CodeExtent)\n-{\n-    debug!(\"type_strictly_outlives(ty={:?}, scope={:?})\",\n-           ty, scope);\n-\n-    let span = origin.span();\n-\n-    let parent_region =\n-        match rcx.tcx().region_maps.opt_encl_scope(scope) {\n-            Some(parent_scope) => ty::ReScope(parent_scope),\n-            None => rcx.tcx().sess.span_bug(\n-                span, &format!(\"no enclosing scope found for scope: {:?}\",\n-                               scope)),\n-        };\n-\n-    type_must_outlive(rcx, origin, ty, parent_region);\n-}\n-\n fn param_ty_must_outlive<'a, 'tcx>(rcx: &Rcx<'a, 'tcx>,\n                                    origin: infer::SubregionOrigin<'tcx>,\n                                    region: ty::Region,"}]}