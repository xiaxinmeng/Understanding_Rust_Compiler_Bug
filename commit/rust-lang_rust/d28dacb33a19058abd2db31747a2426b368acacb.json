{"sha": "d28dacb33a19058abd2db31747a2426b368acacb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyOGRhY2IzM2ExOTA1OGFiZDJkYjMxNzQ3YTI0MjZiMzY4YWNhY2I=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-09-25T17:01:21Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-09-25T21:45:18Z"}, "message": "redundant_pattern_matching: make rustfixable", "tree": {"sha": "f3634aa62a35e8d3f1bb84e299cc052e71bc595f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3634aa62a35e8d3f1bb84e299cc052e71bc595f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d28dacb33a19058abd2db31747a2426b368acacb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d28dacb33a19058abd2db31747a2426b368acacb", "html_url": "https://github.com/rust-lang/rust/commit/d28dacb33a19058abd2db31747a2426b368acacb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d28dacb33a19058abd2db31747a2426b368acacb/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a83a8dccbae1a7028a3cf9fe0820b1940140a3d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a83a8dccbae1a7028a3cf9fe0820b1940140a3d6", "html_url": "https://github.com/rust-lang/rust/commit/a83a8dccbae1a7028a3cf9fe0820b1940140a3d6"}], "stats": {"total": 131, "additions": 97, "deletions": 34}, "files": [{"sha": "8fea20dba67c84ddb47481e1ca335aaa98b13232", "filename": "clippy_lints/src/redundant_pattern_matching.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d28dacb33a19058abd2db31747a2426b368acacb/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28dacb33a19058abd2db31747a2426b368acacb/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs?ref=d28dacb33a19058abd2db31747a2426b368acacb", "patch": "@@ -49,14 +49,22 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantPatternMatching {\n         if let ExprKind::Match(ref op, ref arms, ref match_source) = expr.node {\n             match match_source {\n                 MatchSource::Normal => find_sugg_for_match(cx, expr, op, arms),\n-                MatchSource::IfLetDesugar { .. } => find_sugg_for_if_let(cx, expr, op, arms),\n+                MatchSource::IfLetDesugar { contains_else_clause } => {\n+                    find_sugg_for_if_let(cx, expr, op, arms, *contains_else_clause)\n+                },\n                 _ => return,\n             }\n         }\n     }\n }\n \n-fn find_sugg_for_if_let<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr, op: &P<Expr>, arms: &HirVec<Arm>) {\n+fn find_sugg_for_if_let<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    expr: &'tcx Expr,\n+    op: &P<Expr>,\n+    arms: &HirVec<Arm>,\n+    has_else: bool,\n+) {\n     let good_method = match arms[0].pat.node {\n         PatKind::TupleStruct(ref path, ref patterns, _) if patterns.len() == 1 => {\n             if let PatKind::Wild = patterns[0].node {\n@@ -79,6 +87,8 @@ fn find_sugg_for_if_let<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr,\n         _ => return,\n     };\n \n+    let maybe_semi = if has_else { \"\" } else { \";\" };\n+\n     span_lint_and_then(\n         cx,\n         REDUNDANT_PATTERN_MATCHING,\n@@ -89,7 +99,7 @@ fn find_sugg_for_if_let<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr,\n             db.span_suggestion(\n                 span,\n                 \"try this\",\n-                format!(\"{}.{}\", snippet(cx, op.span, \"_\"), good_method),\n+                format!(\"{}.{}{}\", snippet(cx, op.span, \"_\"), good_method, maybe_semi),\n                 Applicability::MaybeIncorrect, // snippet\n             );\n         },"}, {"sha": "776c9444566bde988039bab8916f3ec34cbbc593", "filename": "tests/ui/redundant_pattern_matching.fixed", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/d28dacb33a19058abd2db31747a2426b368acacb/tests%2Fui%2Fredundant_pattern_matching.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d28dacb33a19058abd2db31747a2426b368acacb/tests%2Fui%2Fredundant_pattern_matching.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.fixed?ref=d28dacb33a19058abd2db31747a2426b368acacb", "patch": "@@ -0,0 +1,60 @@\n+// run-rustfix\n+\n+#![warn(clippy::all)]\n+#![warn(clippy::redundant_pattern_matching)]\n+#![allow(clippy::unit_arg, clippy::let_unit_value, unused_must_use)]\n+\n+fn main() {\n+    Ok::<i32, i32>(42).is_ok();\n+\n+    Err::<i32, i32>(42).is_err();\n+\n+    None::<()>.is_none();\n+\n+    Some(42).is_some();\n+\n+    if Ok::<i32, i32>(42).is_ok() {}\n+\n+    if Err::<i32, i32>(42).is_err() {}\n+\n+    if None::<i32>.is_none() {}\n+\n+    if Some(42).is_some() {}\n+\n+    if let Ok(x) = Ok::<i32, i32>(42) {\n+        println!(\"{}\", x);\n+    }\n+\n+    Ok::<i32, i32>(42).is_ok();\n+\n+    Ok::<i32, i32>(42).is_err();\n+\n+    Err::<i32, i32>(42).is_err();\n+\n+    Err::<i32, i32>(42).is_ok();\n+\n+    Some(42).is_some();\n+\n+    None::<()>.is_none();\n+\n+    let _ = None::<()>.is_none();\n+\n+    let _ = Ok::<usize, ()>(4).is_ok();\n+\n+    let _ = does_something();\n+    let _ = returns_unit();\n+\n+    let opt = Some(false);\n+    let x = opt.is_some();\n+    takes_bool(x);\n+}\n+\n+fn takes_bool(_: bool) {}\n+\n+fn does_something() -> bool {\n+    Ok::<i32, i32>(4).is_ok()\n+}\n+\n+fn returns_unit() {\n+    Ok::<i32, i32>(4).is_ok();\n+}"}, {"sha": "2b2d5b1c1ec67b38d56e4b1068ab8ecf62721811", "filename": "tests/ui/redundant_pattern_matching.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d28dacb33a19058abd2db31747a2426b368acacb/tests%2Fui%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28dacb33a19058abd2db31747a2426b368acacb/tests%2Fui%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.rs?ref=d28dacb33a19058abd2db31747a2426b368acacb", "patch": "@@ -1,6 +1,8 @@\n+// run-rustfix\n+\n #![warn(clippy::all)]\n #![warn(clippy::redundant_pattern_matching)]\n-#![allow(clippy::unit_arg, clippy::let_unit_value)]\n+#![allow(clippy::unit_arg, clippy::let_unit_value, unused_must_use)]\n \n fn main() {\n     if let Ok(_) = Ok::<i32, i32>(42) {}\n@@ -66,12 +68,9 @@ fn main() {\n     let opt = Some(false);\n     let x = if let Some(_) = opt { true } else { false };\n     takes_bool(x);\n-    let y = if let Some(_) = opt {};\n-    takes_unit(y);\n }\n \n-fn takes_bool(x: bool) {}\n-fn takes_unit(x: ()) {}\n+fn takes_bool(_: bool) {}\n \n fn does_something() -> bool {\n     if let Ok(_) = Ok::<i32, i32>(4) {"}, {"sha": "5a4a69b122003e3b52d10eab9ffb1a0fd1a0cb63", "filename": "tests/ui/redundant_pattern_matching.stderr", "status": "modified", "additions": 20, "deletions": 26, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d28dacb33a19058abd2db31747a2426b368acacb/tests%2Fui%2Fredundant_pattern_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d28dacb33a19058abd2db31747a2426b368acacb/tests%2Fui%2Fredundant_pattern_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.stderr?ref=d28dacb33a19058abd2db31747a2426b368acacb", "patch": "@@ -1,31 +1,31 @@\n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:6:12\n+  --> $DIR/redundant_pattern_matching.rs:8:12\n    |\n LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n-   |     -------^^^^^------------------------ help: try this: `Ok::<i32, i32>(42).is_ok()`\n+   |     -------^^^^^------------------------ help: try this: `Ok::<i32, i32>(42).is_ok();`\n    |\n    = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:8:12\n+  --> $DIR/redundant_pattern_matching.rs:10:12\n    |\n LL |     if let Err(_) = Err::<i32, i32>(42) {}\n-   |     -------^^^^^^------------------------- help: try this: `Err::<i32, i32>(42).is_err()`\n+   |     -------^^^^^^------------------------- help: try this: `Err::<i32, i32>(42).is_err();`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:10:12\n+  --> $DIR/redundant_pattern_matching.rs:12:12\n    |\n LL |     if let None = None::<()> {}\n-   |     -------^^^^---------------- help: try this: `None::<()>.is_none()`\n+   |     -------^^^^---------------- help: try this: `None::<()>.is_none();`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:12:12\n+  --> $DIR/redundant_pattern_matching.rs:14:12\n    |\n LL |     if let Some(_) = Some(42) {}\n-   |     -------^^^^^^^-------------- help: try this: `Some(42).is_some()`\n+   |     -------^^^^^^^-------------- help: try this: `Some(42).is_some();`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:26:5\n+  --> $DIR/redundant_pattern_matching.rs:28:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -34,7 +34,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:31:5\n+  --> $DIR/redundant_pattern_matching.rs:33:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n@@ -43,7 +43,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:36:5\n+  --> $DIR/redundant_pattern_matching.rs:38:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n@@ -52,7 +52,7 @@ LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:41:5\n+  --> $DIR/redundant_pattern_matching.rs:43:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -61,7 +61,7 @@ LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:46:5\n+  --> $DIR/redundant_pattern_matching.rs:48:5\n    |\n LL | /     match Some(42) {\n LL | |         Some(_) => true,\n@@ -70,7 +70,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:51:5\n+  --> $DIR/redundant_pattern_matching.rs:53:5\n    |\n LL | /     match None::<()> {\n LL | |         Some(_) => false,\n@@ -79,7 +79,7 @@ LL | |     };\n    | |_____^ help: try this: `None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:56:13\n+  --> $DIR/redundant_pattern_matching.rs:58:13\n    |\n LL |       let _ = match None::<()> {\n    |  _____________^\n@@ -89,25 +89,19 @@ LL | |     };\n    | |_____^ help: try this: `None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:61:20\n+  --> $DIR/redundant_pattern_matching.rs:63:20\n    |\n LL |     let _ = if let Ok(_) = Ok::<usize, ()>(4) { true } else { false };\n    |             -------^^^^^--------------------------------------------- help: try this: `Ok::<usize, ()>(4).is_ok()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:67:20\n+  --> $DIR/redundant_pattern_matching.rs:69:20\n    |\n LL |     let x = if let Some(_) = opt { true } else { false };\n    |             -------^^^^^^^------------------------------ help: try this: `opt.is_some()`\n \n-error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:69:20\n-   |\n-LL |     let y = if let Some(_) = opt {};\n-   |             -------^^^^^^^--------- help: try this: `opt.is_some()`\n-\n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:77:12\n+  --> $DIR/redundant_pattern_matching.rs:76:12\n    |\n LL |       if let Ok(_) = Ok::<i32, i32>(4) {\n    |  _____-      ^^^^^\n@@ -118,7 +112,7 @@ LL | |     }\n    | |_____- help: try this: `Ok::<i32, i32>(4).is_ok()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:85:12\n+  --> $DIR/redundant_pattern_matching.rs:84:12\n    |\n LL |       if let Ok(_) = Ok::<i32, i32>(4) {\n    |  _____-      ^^^^^\n@@ -128,5 +122,5 @@ LL | |         false\n LL | |     };\n    | |_____- help: try this: `Ok::<i32, i32>(4).is_ok()`\n \n-error: aborting due to 16 previous errors\n+error: aborting due to 15 previous errors\n "}]}