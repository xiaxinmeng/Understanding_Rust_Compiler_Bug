{"sha": "b62bf8cede38cf8a3baac83885436e13944b4950", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MmJmOGNlZGUzOGNmOGEzYmFhYzgzODg1NDM2ZTEzOTQ0YjQ5NTA=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-05-21T18:07:44Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-05-21T18:22:01Z"}, "message": "rustc: Allow if expressions to fail", "tree": {"sha": "933da6f2c9dff60edb342f09f1acfc36c8f31c1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/933da6f2c9dff60edb342f09f1acfc36c8f31c1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b62bf8cede38cf8a3baac83885436e13944b4950", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b62bf8cede38cf8a3baac83885436e13944b4950", "html_url": "https://github.com/rust-lang/rust/commit/b62bf8cede38cf8a3baac83885436e13944b4950", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b62bf8cede38cf8a3baac83885436e13944b4950/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6824f119fcaef80e6ac377e887cbe6789e587f77", "url": "https://api.github.com/repos/rust-lang/rust/commits/6824f119fcaef80e6ac377e887cbe6789e587f77", "html_url": "https://github.com/rust-lang/rust/commit/6824f119fcaef80e6ac377e887cbe6789e587f77"}], "stats": {"total": 93, "additions": 79, "deletions": 14}, "files": [{"sha": "b562805e8d9fd490514d1bbb4a4f6044fac2c4bb", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b62bf8cede38cf8a3baac83885436e13944b4950/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62bf8cede38cf8a3baac83885436e13944b4950/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=b62bf8cede38cf8a3baac83885436e13944b4950", "patch": "@@ -3660,7 +3660,8 @@ fn join_results(&@block_ctxt parent_cx,\n }\n \n fn trans_if(&@block_ctxt cx, &@ast::expr cond,\n-            &ast::block thn, &option::t[@ast::expr] els) -> result {\n+            &ast::block thn, &option::t[@ast::expr] els,\n+            &ast::ann ann) -> result {\n \n     auto cond_res = trans_expr(cx, cond);\n \n@@ -3699,12 +3700,12 @@ fn trans_if(&@block_ctxt cx, &@ast::expr cond,\n             // If we have an else expression, then the entire\n             // if expression can have a non-nil type.\n             // FIXME: This isn't quite right, particularly re: dynamic types\n-            auto expr_ty = ty::expr_ty(cx.fcx.lcx.ccx.tcx, elexpr);\n+            auto expr_ty = ty::ann_to_type(cx.fcx.lcx.ccx.tcx.node_types,\n+                                           ann);\n             if (ty::type_has_dynamic_size(cx.fcx.lcx.ccx.tcx, expr_ty)) {\n                 expr_llty = T_typaram_ptr(cx.fcx.lcx.ccx.tn);\n             } else {\n-                expr_llty = type_of(else_res.bcx.fcx.lcx.ccx, elexpr.span,\n-                                    expr_ty);\n+                expr_llty = type_of(cx.fcx.lcx.ccx, elexpr.span, expr_ty);\n                 if (ty::type_is_structural(cx.fcx.lcx.ccx.tcx, expr_ty)) {\n                     expr_llty = T_ptr(expr_llty);\n                 }\n@@ -5392,8 +5393,8 @@ fn trans_expr(&@block_ctxt cx, &@ast::expr e) -> result {\n             ret trans_binary(cx, op, x, y);\n         }\n \n-        case (ast::expr_if(?cond, ?thn, ?els, _)) {\n-            ret trans_if(cx, cond, thn, els);\n+        case (ast::expr_if(?cond, ?thn, ?els, ?ann)) {\n+            ret trans_if(cx, cond, thn, els, ann);\n         }\n \n         case (ast::expr_for(?decl, ?seq, ?body, _)) {"}, {"sha": "a679804e0b6e55d66fe52ec5efa0a82600df76cd", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b62bf8cede38cf8a3baac83885436e13944b4950/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62bf8cede38cf8a3baac83885436e13944b4950/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=b62bf8cede38cf8a3baac83885436e13944b4950", "patch": "@@ -1331,12 +1331,19 @@ mod Pushdown {\n             case (ast::expr_if(?cond, ?then_0, ?else_0, ?ann)) {\n                 auto t = Demand::autoderef(scx, e.span, expected,\n                     ann_to_type(scx.fcx.ccx.tcx.node_types, ann), adk);\n-                pushdown_block(scx, expected, then_0);\n+\n+                auto then_t = ty::block_ty(scx.fcx.ccx.tcx, then_0);\n+                if (!ty::type_is_bot(scx.fcx.ccx.tcx, then_t)) {\n+                    pushdown_block(scx, expected, then_0);\n+                }\n \n                 alt (else_0) {\n                     case (none[@ast::expr]) { /* no-op */ }\n                     case (some[@ast::expr](?e_0)) {\n-                        pushdown_expr(scx, expected, e_0);\n+                        auto else_t = ty::expr_ty(scx.fcx.ccx.tcx, e_0);\n+                        if (!ty::type_is_bot(scx.fcx.ccx.tcx, else_t)) {\n+                            pushdown_expr(scx, expected, e_0);\n+                        }\n                     }\n                 }\n                 write::ty_only_fixup(scx, ann.id, t);\n@@ -2129,21 +2136,30 @@ fn check_expr(&@stmt_ctxt scx, &@ast::expr expr) {\n             check_block(scx, thn);\n             auto thn_t = block_ty(scx.fcx.ccx.tcx, thn);\n \n-            auto elsopt_t;\n+            auto if_t;\n             alt (elsopt) {\n                 case (some[@ast::expr](?els)) {\n                     check_expr(scx, els);\n-                    Pushdown::pushdown_expr(scx, thn_t, els);\n-                    elsopt_t = expr_ty(scx.fcx.ccx.tcx, els);\n+                    auto elsopt_t = expr_ty(scx.fcx.ccx.tcx, els);\n+                    if (!ty::type_is_bot(scx.fcx.ccx.tcx, elsopt_t)) {\n+                        Pushdown::pushdown_expr(scx, thn_t, els);\n+                        if_t = elsopt_t;\n+                    } else if (!ty::type_is_bot(scx.fcx.ccx.tcx, thn_t)) {\n+                        if_t = thn_t;\n+                    } else {\n+                        if_t = ty::mk_nil(scx.fcx.ccx.tcx);\n+                    }\n                 }\n                 case (none[@ast::expr]) {\n-                    elsopt_t = ty::mk_nil(scx.fcx.ccx.tcx);\n+                    if_t = ty::mk_nil(scx.fcx.ccx.tcx);\n                 }\n             }\n \n-            Pushdown::pushdown_block(scx, elsopt_t, thn);\n+            if (!ty::type_is_bot(scx.fcx.ccx.tcx, thn_t)) {\n+                Pushdown::pushdown_block(scx, if_t, thn);\n+            }\n \n-            write::ty_only_fixup(scx, a.id, elsopt_t);\n+            write::ty_only_fixup(scx, a.id, if_t);\n         }\n \n         case (ast::expr_for(?decl, ?seq, ?body, ?a)) {"}, {"sha": "2a4f6d27a4c4b12ac4b1b4bb9578df65e709f5a7", "filename": "src/test/run-fail/expr-if-fail.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b62bf8cede38cf8a3baac83885436e13944b4950/src%2Ftest%2Frun-fail%2Fexpr-if-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62bf8cede38cf8a3baac83885436e13944b4950/src%2Ftest%2Frun-fail%2Fexpr-if-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexpr-if-fail.rs?ref=b62bf8cede38cf8a3baac83885436e13944b4950", "patch": "@@ -0,0 +1,12 @@\n+// xfail-stage0\n+// error-pattern:explicit failure\n+\n+fn main() {\n+  auto x = if (false) {\n+    0\n+  } else if (true) {\n+    fail\n+  } else {\n+    10\n+  };\n+}"}, {"sha": "189f8a72469464a30937949e27e4addc62301fb0", "filename": "src/test/run-pass/expr-if-fail.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b62bf8cede38cf8a3baac83885436e13944b4950/src%2Ftest%2Frun-pass%2Fexpr-if-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62bf8cede38cf8a3baac83885436e13944b4950/src%2Ftest%2Frun-pass%2Fexpr-if-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-fail.rs?ref=b62bf8cede38cf8a3baac83885436e13944b4950", "patch": "@@ -0,0 +1,36 @@\n+// xfail-stage0\n+\n+fn test_if_fail() {\n+  auto x = if (false) {\n+    fail\n+  } else {\n+    10\n+  };\n+  assert (x == 10);\n+}\n+\n+fn test_else_fail() {\n+  auto x = if (true) {\n+    10\n+  } else {\n+    fail\n+  };\n+  assert (x == 10);\n+}\n+\n+fn test_elseif_fail() {\n+  auto x = if (false) {\n+    0\n+  } else if (false) {\n+    fail\n+  } else {\n+    10\n+  };\n+  assert (x == 10);\n+}\n+\n+fn main() {\n+  test_if_fail();\n+  test_else_fail();\n+  test_elseif_fail();\n+}"}]}