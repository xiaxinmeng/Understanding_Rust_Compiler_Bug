{"sha": "50d179d0016ea5f3a3c820a45cdaa6921f9fb14c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZDE3OWQwMDE2ZWE1ZjNhM2M4MjBhNDVjZGFhNjkyMWY5ZmIxNGM=", "commit": {"author": {"name": "gamazeps", "email": "gamaz3ps@gmail.com", "date": "2014-09-18T12:16:26Z"}, "committer": {"name": "gamazeps", "email": "gamaz3ps@gmail.com", "date": "2014-09-18T12:16:26Z"}, "message": "Doc says to avoid mixing allocator instead of forbiding it", "tree": {"sha": "fbcafbe9f9f45b3f7ecc6fda9c814bd16e5e108b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbcafbe9f9f45b3f7ecc6fda9c814bd16e5e108b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50d179d0016ea5f3a3c820a45cdaa6921f9fb14c", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50d179d0016ea5f3a3c820a45cdaa6921f9fb14c", "html_url": "https://github.com/rust-lang/rust/commit/50d179d0016ea5f3a3c820a45cdaa6921f9fb14c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50d179d0016ea5f3a3c820a45cdaa6921f9fb14c/comments", "author": {"login": "gamazeps", "id": 4716134, "node_id": "MDQ6VXNlcjQ3MTYxMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4716134?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gamazeps", "html_url": "https://github.com/gamazeps", "followers_url": "https://api.github.com/users/gamazeps/followers", "following_url": "https://api.github.com/users/gamazeps/following{/other_user}", "gists_url": "https://api.github.com/users/gamazeps/gists{/gist_id}", "starred_url": "https://api.github.com/users/gamazeps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gamazeps/subscriptions", "organizations_url": "https://api.github.com/users/gamazeps/orgs", "repos_url": "https://api.github.com/users/gamazeps/repos", "events_url": "https://api.github.com/users/gamazeps/events{/privacy}", "received_events_url": "https://api.github.com/users/gamazeps/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gamazeps", "id": 4716134, "node_id": "MDQ6VXNlcjQ3MTYxMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4716134?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gamazeps", "html_url": "https://github.com/gamazeps", "followers_url": "https://api.github.com/users/gamazeps/followers", "following_url": "https://api.github.com/users/gamazeps/following{/other_user}", "gists_url": "https://api.github.com/users/gamazeps/gists{/gist_id}", "starred_url": "https://api.github.com/users/gamazeps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gamazeps/subscriptions", "organizations_url": "https://api.github.com/users/gamazeps/orgs", "repos_url": "https://api.github.com/users/gamazeps/repos", "events_url": "https://api.github.com/users/gamazeps/events{/privacy}", "received_events_url": "https://api.github.com/users/gamazeps/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a37692ecbb88cd9c3ae06a7ae9d619aa535719d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a37692ecbb88cd9c3ae06a7ae9d619aa535719d", "html_url": "https://github.com/rust-lang/rust/commit/6a37692ecbb88cd9c3ae06a7ae9d619aa535719d"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "04a4e96ecc40ee07d7c45763220474596499ea8a", "filename": "src/librustrt/c_str.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/50d179d0016ea5f3a3c820a45cdaa6921f9fb14c/src%2Flibrustrt%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d179d0016ea5f3a3c820a45cdaa6921f9fb14c/src%2Flibrustrt%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fc_str.rs?ref=50d179d0016ea5f3a3c820a45cdaa6921f9fb14c", "patch": "@@ -38,8 +38,9 @@ unnecessary amounts of allocations.\n \n Be carefull to remember that the memory is managed by C allocator API and not\n by Rust allocator API.\n-That means that the CString pointers should only be freed with C allocator API\n-if you intend to do that on your own.\n+That means that the CString pointers should be freed with C allocator API\n+if you intend to do that on your own, as the behaviour if you free them with\n+Rust's allocator API is not well defined\n \n An example of creating and using a C string would be:\n \n@@ -137,8 +138,8 @@ impl<S: hash::Writer> hash::Hash<S> for CString {\n \n impl CString {\n     /// Create a C String from a pointer, with memory managed by C's allocator\n-    /// API, so do not call it with a pointer to memory managed by Rust's\n-    /// allocator API.\n+    /// API, so avoid calling it with a pointer to memory managed by Rust's\n+    /// allocator API, as the behaviour would not be well defined.\n     ///\n     ///# Failure\n     ///\n@@ -272,7 +273,7 @@ impl CString {\n     /// forgotten, meaning that the backing allocation of this\n     /// `CString` is not automatically freed if it owns the\n     /// allocation. In this case, a user of `.unwrap()` should ensure\n-    /// the allocation is freed, to avoid leaking memory. You have to\n+    /// the allocation is freed, to avoid leaking memory. You should\n     /// use libc's memory allocator in this case.\n     ///\n     /// Prefer `.as_ptr()` when just retrieving a pointer to the"}]}