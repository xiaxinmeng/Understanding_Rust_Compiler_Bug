{"sha": "fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZGFiZDZmYmJmZTFhNDAxYmJkZDRiYTA5MTliMjFiYTRmN2M1ZDI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-04-20T15:07:58Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-04-20T16:09:28Z"}, "message": "Revert stabilization of `feature(never_type)`.\n\nThis commit is just covering the feature gate itself and the tests\nthat made direct use of `!` and thus need to opt back into the\nfeature.\n\nA follow on commit brings back the other change that motivates the\nrevert: Namely, going back to the old rules for falling back to `()`.", "tree": {"sha": "271fba7df00efddcfaec54a88dabbcf038158046", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/271fba7df00efddcfaec54a88dabbcf038158046"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "html_url": "https://github.com/rust-lang/rust/commit/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a4443995c91648460a5483ca8b7886cd04197e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a4443995c91648460a5483ca8b7886cd04197e2", "html_url": "https://github.com/rust-lang/rust/commit/1a4443995c91648460a5483ca8b7886cd04197e2"}], "stats": {"total": 144, "additions": 127, "deletions": 17}, "files": [{"sha": "f79f73516989f1597f4a55b425bd33009daddd66", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -179,7 +179,7 @@ mod impls {\n         bool char\n     }\n \n-    #[stable(feature = \"never_type\", since = \"1.26.0\")]\n+    #[unstable(feature = \"never_type\", issue = \"35121\")]\n     impl Clone for ! {\n         #[inline]\n         fn clone(&self) -> Self {"}, {"sha": "c91aa06609dd7a5bf4c019ba3d12eb1d0e7d0013", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -881,24 +881,24 @@ mod impls {\n \n     ord_impl! { char usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n-    #[stable(feature = \"never_type\", since = \"1.26.0\")]\n+    #[unstable(feature = \"never_type\", issue = \"35121\")]\n     impl PartialEq for ! {\n         fn eq(&self, _: &!) -> bool {\n             *self\n         }\n     }\n \n-    #[stable(feature = \"never_type\", since = \"1.26.0\")]\n+    #[unstable(feature = \"never_type\", issue = \"35121\")]\n     impl Eq for ! {}\n \n-    #[stable(feature = \"never_type\", since = \"1.26.0\")]\n+    #[unstable(feature = \"never_type\", issue = \"35121\")]\n     impl PartialOrd for ! {\n         fn partial_cmp(&self, _: &!) -> Option<Ordering> {\n             *self\n         }\n     }\n \n-    #[stable(feature = \"never_type\", since = \"1.26.0\")]\n+    #[unstable(feature = \"never_type\", issue = \"35121\")]\n     impl Ord for ! {\n         fn cmp(&self, _: &!) -> Ordering {\n             *self"}, {"sha": "a8430f14410e6aef368198e038840f4177214371", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -1780,14 +1780,14 @@ macro_rules! fmt_refs {\n \n fmt_refs! { Debug, Display, Octal, Binary, LowerHex, UpperHex, LowerExp, UpperExp }\n \n-#[stable(feature = \"never_type\", since = \"1.26.0\")]\n+#[unstable(feature = \"never_type\", issue = \"35121\")]\n impl Debug for ! {\n     fn fmt(&self, _: &mut Formatter) -> Result {\n         *self\n     }\n }\n \n-#[stable(feature = \"never_type\", since = \"1.26.0\")]\n+#[unstable(feature = \"never_type\", issue = \"35121\")]\n impl Display for ! {\n     fn fmt(&self, _: &mut Formatter) -> Result {\n         *self"}, {"sha": "ac1a8091eb3642de3c4060b41806c2c8adc7f9ee", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -82,6 +82,7 @@\n #![feature(iterator_repeat_with)]\n #![feature(lang_items)]\n #![feature(link_llvm_intrinsics)]\n+#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n #![feature(macro_at_most_once_rep)]\n #![feature(no_core)]"}, {"sha": "feb689dbc1fe8c525282b83ea0fda8ceeef46515", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -630,7 +630,7 @@ mod copy_impls {\n         bool char\n     }\n \n-    #[stable(feature = \"never_type\", since = \"1.26.0\")]\n+    #[unstable(feature = \"never_type\", issue = \"35121\")]\n     impl Copy for ! {}\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "bb495049483ac3c0d2b95671655be1dd47eefc3f", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -52,6 +52,7 @@\n #![cfg_attr(windows, feature(libc))]\n #![feature(macro_lifetime_matcher)]\n #![feature(macro_vis_matcher)]\n+#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n #![feature(non_exhaustive)]\n #![feature(nonzero)]"}, {"sha": "147b8cc2175af9d88de2a6400b16cb5f24c644f1", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -113,6 +113,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             PatternKind::Variant { adt_def, substs, variant_index, ref subpatterns } => {\n                 let irrefutable = adt_def.variants.iter().enumerate().all(|(i, v)| {\n                     i == variant_index || {\n+                        self.hir.tcx().features().never_type &&\n                         self.hir.tcx().features().exhaustive_patterns &&\n                         self.hir.tcx().is_variant_uninhabited_from_all_modules(v, substs)\n                     }"}, {"sha": "6c149b2e0f16b8143d194892f8af60432e2a6d5d", "filename": "src/libstd/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -233,7 +233,7 @@ impl<'a> From<Cow<'a, str>> for Box<Error> {\n     }\n }\n \n-#[stable(feature = \"never_type\", since = \"1.26.0\")]\n+#[unstable(feature = \"never_type\", issue = \"35121\")]\n impl Error for ! {\n     fn description(&self) -> &str { *self }\n }"}, {"sha": "8980cd8c6a480e25fa00bdee4ed16ff3a1bcb4bf", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -275,6 +275,7 @@\n #![feature(macro_reexport)]\n #![feature(macro_vis_matcher)]\n #![feature(needs_panic_runtime)]\n+#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n #![feature(nonzero)]\n #![feature(num_bits_bytes)]"}, {"sha": "a515b591f690b191b4e033805875a527f57154df", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -272,6 +272,9 @@ declare_features! (\n     // Allows cfg(target_has_atomic = \"...\").\n     (active, cfg_target_has_atomic, \"1.9.0\", Some(32976), None),\n \n+    // The `!` type. Does not imply exhaustive_patterns (below) any more.\n+    (active, never_type, \"1.13.0\", Some(35121), None),\n+\n     // Allows exhaustive pattern matching on types that contain uninhabited types.\n     (active, exhaustive_patterns, \"1.13.0\", None, None),\n \n@@ -1635,6 +1638,10 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::TyKind::BareFn(ref bare_fn_ty) => {\n                 self.check_abi(bare_fn_ty.abi, ty.span);\n             }\n+            ast::TyKind::Never => {\n+                gate_feature_post!(&self, never_type, ty.span,\n+                                   \"The `!` type is experimental\");\n+            }\n             ast::TyKind::TraitObject(_, ast::TraitObjectSyntax::Dyn) => {\n                 gate_feature_post!(&self, dyn_trait, ty.span,\n                                    \"`dyn Trait` syntax is unstable\");"}, {"sha": "583befed1e8287bf8d82f23f38a71f3e24a4a71b", "filename": "src/test/compile-fail/call-fn-never-arg-wrong-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fcompile-fail%2Fcall-fn-never-arg-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fcompile-fail%2Fcall-fn-never-arg-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcall-fn-never-arg-wrong-type.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -10,6 +10,8 @@\n \n // Test that we can't pass other types for !\n \n+#![feature(never_type)]\n+\n fn foo(x: !) -> ! {\n     x\n }"}, {"sha": "14a06b306d82a93a8dc71a82c5f3cf54b8f43b43", "filename": "src/test/compile-fail/coerce-to-bang-cast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang-cast.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(never_type)]\n+\n fn foo(x: usize, y: !, z: usize) { }\n \n fn cast_a() {"}, {"sha": "62ff09f4616b80c7268bcefeb6aa954c1132a6fc", "filename": "src/test/compile-fail/coerce-to-bang.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(never_type)]\n+\n fn foo(x: usize, y: !, z: usize) { }\n \n fn call_foo_a() {"}, {"sha": "d11aacec1963169919de344b7bd762004d5d3058", "filename": "src/test/compile-fail/inhabitedness-infinite-loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fcompile-fail%2Finhabitedness-infinite-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fcompile-fail%2Finhabitedness-infinite-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finhabitedness-infinite-loop.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -10,6 +10,7 @@\n \n // error-pattern:reached recursion limit\n \n+#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n \n struct Foo<'a, T: 'a> {"}, {"sha": "938f7fba2a0324320b3616e4b68e8acc66ec5ce9", "filename": "src/test/compile-fail/loop-break-value.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fcompile-fail%2Floop-break-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fcompile-fail%2Floop-break-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Floop-break-value.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(never_type)]\n+\n fn main() {\n     let val: ! = loop { break break; };\n     //~^ ERROR mismatched types"}, {"sha": "8777ef2ffe33c9e5a774024438c9f4262373a56c", "filename": "src/test/compile-fail/match-privately-empty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fcompile-fail%2Fmatch-privately-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fcompile-fail%2Fmatch-privately-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-privately-empty.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n \n mod private {"}, {"sha": "0fb75b535c6bcd5df32de572ee474ba824089747", "filename": "src/test/compile-fail/never-assign-dead-code.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fcompile-fail%2Fnever-assign-dead-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fcompile-fail%2Fnever-assign-dead-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnever-assign-dead-code.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -10,6 +10,7 @@\n \n // Test that an assignment of type ! makes the rest of the block dead code.\n \n+#![feature(never_type)]\n #![feature(rustc_attrs)]\n #![warn(unused)]\n "}, {"sha": "c0dd2cab749f4a24cf0753689a842b4bd33d9742", "filename": "src/test/compile-fail/never-assign-wrong-type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fcompile-fail%2Fnever-assign-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fcompile-fail%2Fnever-assign-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnever-assign-wrong-type.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -10,6 +10,7 @@\n \n // Test that we can't use another type in place of !\n \n+#![feature(never_type)]\n #![deny(warnings)]\n \n fn main() {"}, {"sha": "05a97b855e703e5fcd50b2b6c2567d3aaadb688e", "filename": "src/test/compile-fail/uninhabited-irrefutable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fcompile-fail%2Funinhabited-irrefutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fcompile-fail%2Funinhabited-irrefutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funinhabited-irrefutable.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n \n mod foo {"}, {"sha": "2cf4b78bdffe40927b446c817e93fe903bc657c5", "filename": "src/test/compile-fail/uninhabited-patterns.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fcompile-fail%2Funinhabited-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fcompile-fail%2Funinhabited-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funinhabited-patterns.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -10,6 +10,7 @@\n \n #![feature(box_patterns)]\n #![feature(box_syntax)]\n+#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n #![feature(slice_patterns)]\n #![deny(unreachable_patterns)]"}, {"sha": "cfd829e416e5b6f4cef4c51e30ad6b026521685f", "filename": "src/test/compile-fail/unreachable-loop-patterns.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fcompile-fail%2Funreachable-loop-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fcompile-fail%2Funreachable-loop-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funreachable-loop-patterns.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n #![deny(unreachable_patterns)]\n "}, {"sha": "df340095bb433477cbe3ddef4476a5decc89e70f", "filename": "src/test/compile-fail/unreachable-try-pattern.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fcompile-fail%2Funreachable-try-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fcompile-fail%2Funreachable-try-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funreachable-try-pattern.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(never_type)]\n #![feature(exhaustive_patterns, rustc_attrs)]\n #![warn(unreachable_code)]\n #![warn(unreachable_patterns)]"}, {"sha": "723a98bcdfa0d85a894e7aea8d20739afdc0aff0", "filename": "src/test/run-pass/diverging-fallback-control-flow.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Frun-pass%2Fdiverging-fallback-control-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Frun-pass%2Fdiverging-fallback-control-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdiverging-fallback-control-flow.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -14,6 +14,8 @@\n // These represent current behavior, but are pretty dubious.  I would\n // like to revisit these and potentially change them. --nmatsakis\n \n+#![feature(never_type)]\n+\n trait BadDefault {\n     fn default() -> Self;\n }"}, {"sha": "86cf9b5ec4783146db47f9b89b1fa0cf8cb15a18", "filename": "src/test/run-pass/empty-types-in-patterns.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Frun-pass%2Fempty-types-in-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Frun-pass%2Fempty-types-in-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-types-in-patterns.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n #![feature(slice_patterns)]\n #![allow(unreachable_patterns)]"}, {"sha": "794f5969bff507fbc04b2821e399522a5de85966", "filename": "src/test/run-pass/impl-for-never.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Frun-pass%2Fimpl-for-never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Frun-pass%2Fimpl-for-never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-for-never.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -10,6 +10,8 @@\n \n // Test that we can call static methods on ! both directly and when it appears in a generic\n \n+#![feature(never_type)]\n+\n trait StringifyType {\n     fn stringify_type() -> &'static str;\n }"}, {"sha": "5cbd3446d9b6fe186bf6198b6f6d708cf7de94f0", "filename": "src/test/run-pass/issue-44402.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Frun-pass%2Fissue-44402.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Frun-pass%2Fissue-44402.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-44402.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n \n // Regression test for inhabitedness check. The old"}, {"sha": "39053769b24b59d9aff3ffb37128675726c760f0", "filename": "src/test/run-pass/loop-break-value.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Frun-pass%2Floop-break-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Frun-pass%2Floop-break-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Floop-break-value.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(never_type)]\n+\n #[allow(unused)]\n fn never_returns() {\n     loop {"}, {"sha": "9641ed282936fafcbb6f178728a2b0a64b58f2d3", "filename": "src/test/run-pass/mir_calls_to_shims.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Frun-pass%2Fmir_calls_to_shims.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Frun-pass%2Fmir_calls_to_shims.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_calls_to_shims.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -11,6 +11,7 @@\n // ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(fn_traits)]\n+#![feature(never_type)]\n \n use std::panic;\n "}, {"sha": "5c0af392f44df27c659d6cebedccf666c1c4dee7", "filename": "src/test/run-pass/never-result.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Frun-pass%2Fnever-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Frun-pass%2Fnever-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnever-result.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -10,6 +10,8 @@\n \n // Test that we can extract a ! through pattern matching then use it as several different types.\n \n+#![feature(never_type)]\n+\n fn main() {\n     let x: Result<u32, !> = Ok(123);\n     match x {"}, {"sha": "7bd9a1703ee9413710160c1b8529b64ddda505b9", "filename": "src/test/run-pass/type-sizes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Frun-pass%2Ftype-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Frun-pass%2Ftype-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-sizes.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(never_type)]\n \n use std::mem::size_of;\n "}, {"sha": "c83d9b56bc39f029a36ab189d9b53c4ae0fce9af", "filename": "src/test/ui/feature-gate-exhaustive-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fui%2Ffeature-gate-exhaustive-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fui%2Ffeature-gate-exhaustive-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-exhaustive-patterns.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -7,7 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(never_type)]\n fn foo() -> Result<u32, !> {\n     Ok(123)\n }"}, {"sha": "ebbe17a821f02fdd5d740bd0cb23a273e563839c", "filename": "src/test/ui/feature-gate-never_type.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fui%2Ffeature-gate-never_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fui%2Ffeature-gate-never_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-never_type.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that ! errors when used in illegal positions with feature(never_type) disabled\n+\n+trait Foo {\n+    type Wub;\n+}\n+\n+type Ma = (u32, !, i32); //~ ERROR type is experimental\n+type Meeshka = Vec<!>; //~ ERROR type is experimental\n+type Mow = &fn(!) -> !; //~ ERROR type is experimental\n+type Skwoz = &mut !; //~ ERROR type is experimental\n+\n+impl Foo for Meeshka {\n+    type Wub = !; //~ ERROR type is experimental\n+}\n+\n+fn main() {\n+}"}, {"sha": "187be6d829137ab5324e99f17eff68aff58daef9", "filename": "src/test/ui/feature-gate-never_type.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fui%2Ffeature-gate-never_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fui%2Ffeature-gate-never_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-never_type.stderr?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -0,0 +1,43 @@\n+error[E0658]: The `!` type is experimental (see issue #35121)\n+  --> $DIR/feature-gate-never_type.rs:17:17\n+   |\n+LL | type Ma = (u32, !, i32); //~ ERROR type is experimental\n+   |                 ^\n+   |\n+   = help: add #![feature(never_type)] to the crate attributes to enable\n+\n+error[E0658]: The `!` type is experimental (see issue #35121)\n+  --> $DIR/feature-gate-never_type.rs:18:20\n+   |\n+LL | type Meeshka = Vec<!>; //~ ERROR type is experimental\n+   |                    ^\n+   |\n+   = help: add #![feature(never_type)] to the crate attributes to enable\n+\n+error[E0658]: The `!` type is experimental (see issue #35121)\n+  --> $DIR/feature-gate-never_type.rs:19:16\n+   |\n+LL | type Mow = &fn(!) -> !; //~ ERROR type is experimental\n+   |                ^\n+   |\n+   = help: add #![feature(never_type)] to the crate attributes to enable\n+\n+error[E0658]: The `!` type is experimental (see issue #35121)\n+  --> $DIR/feature-gate-never_type.rs:20:19\n+   |\n+LL | type Skwoz = &mut !; //~ ERROR type is experimental\n+   |                   ^\n+   |\n+   = help: add #![feature(never_type)] to the crate attributes to enable\n+\n+error[E0658]: The `!` type is experimental (see issue #35121)\n+  --> $DIR/feature-gate-never_type.rs:23:16\n+   |\n+LL |     type Wub = !; //~ ERROR type is experimental\n+   |                ^\n+   |\n+   = help: add #![feature(never_type)] to the crate attributes to enable\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "9ae86136a909170585b9513f41fd35d144858bc0", "filename": "src/test/ui/print_type_sizes/uninhabited.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -11,6 +11,7 @@\n // compile-flags: -Z print-type-sizes\n // compile-pass\n \n+#![feature(never_type)]\n #![feature(start)]\n \n #[start]"}, {"sha": "26760cfea4478cc1f39abde71abae7d9a1fa6416", "filename": "src/test/ui/reachable/expr_add.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fui%2Freachable%2Fexpr_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fui%2Freachable%2Fexpr_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_add.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -7,7 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(never_type)]\n #![allow(unused_variables)]\n #![deny(unreachable_code)]\n "}, {"sha": "308f2483be50a95b6bc3fc90b53094e85885adff", "filename": "src/test/ui/reachable/expr_assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -7,7 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(never_type)]\n #![allow(unused_variables)]\n #![allow(unused_assignments)]\n #![allow(dead_code)]"}, {"sha": "9696bdadf87e803cddf70b12033f879f1c061f10", "filename": "src/test/ui/reachable/expr_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fui%2Freachable%2Fexpr_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fui%2Freachable%2Fexpr_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_call.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -7,7 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(never_type)]\n #![allow(unused_variables)]\n #![allow(unused_assignments)]\n #![allow(dead_code)]"}, {"sha": "fc0041daf7c7c8635a4f433ba4f19b1dcc21c33b", "filename": "src/test/ui/reachable/expr_cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -12,7 +12,7 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(type_ascription)]\n+#![feature(never_type, type_ascription)]\n \n fn a() {\n     // the cast is unreachable:"}, {"sha": "c91646cfa1ef119b17fa061f384897268cae6344", "filename": "src/test/ui/reachable/expr_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fui%2Freachable%2Fexpr_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fui%2Freachable%2Fexpr_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_method.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -7,7 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(never_type)]\n #![allow(unused_variables)]\n #![allow(unused_assignments)]\n #![allow(dead_code)]"}, {"sha": "ce12412ba7438a6595a64733100a5b6e8be8b0e5", "filename": "src/test/ui/reachable/expr_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fui%2Freachable%2Fexpr_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fui%2Freachable%2Fexpr_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_type.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -12,7 +12,7 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(type_ascription)]\n+#![feature(never_type, type_ascription)]\n \n fn a() {\n     // the cast is unreachable:"}, {"sha": "5b7ea57b1661a01f21efe9af5ae8781fcf771a30", "filename": "src/test/ui/reachable/expr_unary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs?ref=fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "patch": "@@ -7,7 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(never_type)]\n #![allow(unused_variables)]\n #![allow(unused_assignments)]\n #![allow(dead_code)]"}]}