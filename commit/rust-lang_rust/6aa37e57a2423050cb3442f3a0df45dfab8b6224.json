{"sha": "6aa37e57a2423050cb3442f3a0df45dfab8b6224", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhYTM3ZTU3YTI0MjMwNTBjYjM0NDJmM2EwZGY0NWRmYWI4YjYyMjQ=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2016-05-31T17:17:31Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-05-31T21:30:49Z"}, "message": "s/PatKind::Ident/PatKind::Binding/g", "tree": {"sha": "36b3857c3aed61636ebd9d25ac8c72e4d033635d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36b3857c3aed61636ebd9d25ac8c72e4d033635d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6aa37e57a2423050cb3442f3a0df45dfab8b6224", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6aa37e57a2423050cb3442f3a0df45dfab8b6224", "html_url": "https://github.com/rust-lang/rust/commit/6aa37e57a2423050cb3442f3a0df45dfab8b6224", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6aa37e57a2423050cb3442f3a0df45dfab8b6224/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "762aff2519b504c43ec6e6c4f6a5d19a7914139a", "url": "https://api.github.com/repos/rust-lang/rust/commits/762aff2519b504c43ec6e6c4f6a5d19a7914139a", "html_url": "https://github.com/rust-lang/rust/commit/762aff2519b504c43ec6e6c4f6a5d19a7914139a"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "a2dbdf34a2ffedd120395692141eaaa0f69d6e14", "filename": "clippy_lints/src/blacklisted_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6aa37e57a2423050cb3442f3a0df45dfab8b6224/clippy_lints%2Fsrc%2Fblacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa37e57a2423050cb3442f3a0df45dfab8b6224/clippy_lints%2Fsrc%2Fblacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblacklisted_name.rs?ref=6aa37e57a2423050cb3442f3a0df45dfab8b6224", "patch": "@@ -34,7 +34,7 @@ impl LintPass for BlackListedName {\n \n impl LateLintPass for BlackListedName {\n     fn check_pat(&mut self, cx: &LateContext, pat: &Pat) {\n-        if let PatKind::Ident(_, ref ident, _) = pat.node {\n+        if let PatKind::Binding(_, ref ident, _) = pat.node {\n             if self.blacklist.iter().any(|s| s == &*ident.node.as_str()) {\n                 span_lint(cx,\n                           BLACKLISTED_NAME,"}, {"sha": "3022ffe730fc26580f424c719eaf516d3ec0f61c", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6aa37e57a2423050cb3442f3a0df45dfab8b6224/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa37e57a2423050cb3442f3a0df45dfab8b6224/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=6aa37e57a2423050cb3442f3a0df45dfab8b6224", "patch": "@@ -192,7 +192,7 @@ fn bindings<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &Pat) -> HashMap<Interned\n                     bindings_impl(cx, pat, map);\n                 }\n             }\n-            PatKind::Ident(_, ref ident, ref as_pat) => {\n+            PatKind::Binding(_, ref ident, ref as_pat) => {\n                 if let Entry::Vacant(v) = map.entry(ident.node.as_str()) {\n                     v.insert(cx.tcx.pat_ty(pat));\n                 }"}, {"sha": "99b40a0231b5df73b7112a96d33bf8402d88f242", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6aa37e57a2423050cb3442f3a0df45dfab8b6224/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa37e57a2423050cb3442f3a0df45dfab8b6224/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=6aa37e57a2423050cb3442f3a0df45dfab8b6224", "patch": "@@ -70,7 +70,7 @@ fn check_closure(cx: &LateContext, expr: &Expr) {\n                     _ => (),\n                 }\n                 for (ref a1, ref a2) in decl.inputs.iter().zip(args) {\n-                    if let PatKind::Ident(_, ident, _) = a1.pat.node {\n+                    if let PatKind::Binding(_, ident, _) = a1.pat.node {\n                         // XXXManishearth Should I be checking the binding mode here?\n                         if let ExprPath(None, ref p) = a2.node {\n                             if p.segments.len() != 1 {"}, {"sha": "3d3c9ab47a4155d5eae7d2444e9633fc4c8e5201", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6aa37e57a2423050cb3442f3a0df45dfab8b6224/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa37e57a2423050cb3442f3a0df45dfab8b6224/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=6aa37e57a2423050cb3442f3a0df45dfab8b6224", "patch": "@@ -330,7 +330,7 @@ fn check_for_loop(cx: &LateContext, pat: &Pat, arg: &Expr, body: &Expr, expr: &E\n fn check_for_loop_range(cx: &LateContext, pat: &Pat, arg: &Expr, body: &Expr, expr: &Expr) {\n     if let Some(UnsugaredRange { start: Some(ref start), ref end, .. }) = unsugar_range(arg) {\n         // the var must be a single name\n-        if let PatKind::Ident(_, ref ident, _) = pat.node {\n+        if let PatKind::Binding(_, ref ident, _) = pat.node {\n             let mut visitor = VarVisitor {\n                 cx: cx,\n                 var: ident.node,\n@@ -613,7 +613,7 @@ fn check_for_loop_over_map_kv(cx: &LateContext, pat: &Pat, arg: &Expr, body: &Ex\n fn pat_is_wild(pat: &PatKind, body: &Expr) -> bool {\n     match *pat {\n         PatKind::Wild => true,\n-        PatKind::Ident(_, ident, None) if ident.node.as_str().starts_with('_') => {\n+        PatKind::Binding(_, ident, None) if ident.node.as_str().starts_with('_') => {\n             let mut visitor = UsedVisitor {\n                 var: ident.node,\n                 used: false,\n@@ -884,7 +884,7 @@ impl<'v, 't> Visitor<'v> for InitializeVisitor<'v, 't> {\n         // Look for declarations of the variable\n         if let DeclLocal(ref local) = decl.node {\n             if local.pat.id == self.var_id {\n-                if let PatKind::Ident(_, ref ident, _) = local.pat.node {\n+                if let PatKind::Binding(_, ref ident, _) = local.pat.node {\n                     self.name = Some(ident.node);\n \n                     self.state = if let Some(ref init) = local.init {"}, {"sha": "bd81cb2316b7619e05c64510d879ec818c984336", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6aa37e57a2423050cb3442f3a0df45dfab8b6224/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa37e57a2423050cb3442f3a0df45dfab8b6224/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=6aa37e57a2423050cb3442f3a0df45dfab8b6224", "patch": "@@ -108,7 +108,7 @@ fn get_type_name(cx: &LateContext, expr: &Expr, arg: &Expr) -> Option<&'static s\n \n fn get_arg_name(pat: &Pat) -> Option<ast::Name> {\n     match pat.node {\n-        PatKind::Ident(_, name, None) => Some(name.node),\n+        PatKind::Binding(_, name, None) => Some(name.node),\n         PatKind::Ref(ref subpat, _) => get_arg_name(subpat),\n         _ => None,\n     }"}, {"sha": "4d1d9ac3ffa3fe12f8d9e63aceb988c596fd9883", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6aa37e57a2423050cb3442f3a0df45dfab8b6224/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa37e57a2423050cb3442f3a0df45dfab8b6224/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=6aa37e57a2423050cb3442f3a0df45dfab8b6224", "patch": "@@ -200,7 +200,7 @@ fn check_single_match_opt_like(cx: &LateContext, ex: &Expr, arms: &[Arm], expr:\n             }\n             path.to_string()\n         }\n-        PatKind::Ident(BindByValue(MutImmutable), ident, None) => ident.node.to_string(),\n+        PatKind::Binding(BindByValue(MutImmutable), ident, None) => ident.node.to_string(),\n         _ => return,\n     };\n "}, {"sha": "5f113cf47ceae79bbaec283e7c0b0f1ab361075e", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6aa37e57a2423050cb3442f3a0df45dfab8b6224/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa37e57a2423050cb3442f3a0df45dfab8b6224/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=6aa37e57a2423050cb3442f3a0df45dfab8b6224", "patch": "@@ -45,7 +45,7 @@ impl LateLintPass for TopLevelRefPass {\n             return;\n         }\n         for ref arg in &decl.inputs {\n-            if let PatKind::Ident(BindByRef(_), _, _) = arg.pat.node {\n+            if let PatKind::Binding(BindByRef(_), _, _) = arg.pat.node {\n                 span_lint(cx,\n                           TOPLEVEL_REF_ARG,\n                           arg.pat.span,\n@@ -58,7 +58,7 @@ impl LateLintPass for TopLevelRefPass {\n             [\n             let StmtDecl(ref d, _) = s.node,\n             let DeclLocal(ref l) = d.node,\n-            let PatKind::Ident(BindByRef(_), i, None) = l.pat.node,\n+            let PatKind::Binding(BindByRef(_), i, None) = l.pat.node,\n             let Some(ref init) = l.init\n             ], {\n                 let tyopt = if let Some(ref ty) = l.ty {\n@@ -346,7 +346,7 @@ impl LintPass for PatternPass {\n \n impl LateLintPass for PatternPass {\n     fn check_pat(&mut self, cx: &LateContext, pat: &Pat) {\n-        if let PatKind::Ident(_, ref ident, Some(ref right)) = pat.node {\n+        if let PatKind::Binding(_, ref ident, Some(ref right)) = pat.node {\n             if right.node == PatKind::Wild {\n                 span_lint(cx,\n                           REDUNDANT_PATTERN,"}, {"sha": "0954d92cf9a505974217a72ed6aec8611f8555a6", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6aa37e57a2423050cb3442f3a0df45dfab8b6224/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa37e57a2423050cb3442f3a0df45dfab8b6224/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=6aa37e57a2423050cb3442f3a0df45dfab8b6224", "patch": "@@ -65,7 +65,7 @@ impl LateLintPass for ShadowPass {\n fn check_fn(cx: &LateContext, decl: &FnDecl, block: &Block) {\n     let mut bindings = Vec::new();\n     for arg in &decl.inputs {\n-        if let PatKind::Ident(_, ident, _) = arg.pat.node {\n+        if let PatKind::Binding(_, ident, _) = arg.pat.node {\n             bindings.push((ident.node.unhygienize(), ident.span))\n         }\n     }\n@@ -119,7 +119,7 @@ fn is_binding(cx: &LateContext, pat: &Pat) -> bool {\n fn check_pat(cx: &LateContext, pat: &Pat, init: &Option<&Expr>, span: Span, bindings: &mut Vec<(Name, Span)>) {\n     // TODO: match more stuff / destructuring\n     match pat.node {\n-        PatKind::Ident(_, ref ident, ref inner) => {\n+        PatKind::Binding(_, ref ident, ref inner) => {\n             let name = ident.node.unhygienize();\n             if is_binding(cx, pat) {\n                 let mut new_binding = true;"}, {"sha": "6dc9dda37ec4860ba9a88f6960991c87ca4720ad", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6aa37e57a2423050cb3442f3a0df45dfab8b6224/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa37e57a2423050cb3442f3a0df45dfab8b6224/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=6aa37e57a2423050cb3442f3a0df45dfab8b6224", "patch": "@@ -63,7 +63,7 @@ fn check_manual_swap(cx: &LateContext, block: &Block) {\n             let StmtDecl(ref tmp, _) = w[0].node,\n             let DeclLocal(ref tmp) = tmp.node,\n             let Some(ref tmp_init) = tmp.init,\n-            let PatKind::Ident(_, ref tmp_name, None) = tmp.pat.node,\n+            let PatKind::Binding(_, ref tmp_name, None) = tmp.pat.node,\n \n             // foo() = bar();\n             let StmtSemi(ref first, _) = w[1].node,"}, {"sha": "95028376dcae0b631aefee01712043eb7a8dbf32", "filename": "clippy_lints/src/utils/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6aa37e57a2423050cb3442f3a0df45dfab8b6224/clippy_lints%2Fsrc%2Futils%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa37e57a2423050cb3442f3a0df45dfab8b6224/clippy_lints%2Fsrc%2Futils%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir.rs?ref=6aa37e57a2423050cb3442f3a0df45dfab8b6224", "patch": "@@ -145,7 +145,7 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n             (&PatKind::TupleStruct(ref lp, ref la, ls), &PatKind::TupleStruct(ref rp, ref ra, rs)) => {\n                 self.eq_path(lp, rp) && over(la, ra, |l, r| self.eq_pat(l, r)) && ls == rs\n             }\n-            (&PatKind::Ident(ref lb, ref li, ref lp), &PatKind::Ident(ref rb, ref ri, ref rp)) => {\n+            (&PatKind::Binding(ref lb, ref li, ref lp), &PatKind::Binding(ref rb, ref ri, ref rp)) => {\n                 lb == rb && li.node.as_str() == ri.node.as_str() && both(lp, rp, |l, r| self.eq_pat(l, r))\n             }\n             (&PatKind::Lit(ref l), &PatKind::Lit(ref r)) => self.eq_expr(l, r),"}]}