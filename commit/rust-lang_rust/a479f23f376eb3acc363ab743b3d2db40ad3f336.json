{"sha": "a479f23f376eb3acc363ab743b3d2db40ad3f336", "node_id": "C_kwDOAAsO6NoAKGE0NzlmMjNmMzc2ZWIzYWNjMzYzYWI3NDNiM2QyZGI0MGFkM2YzMzY", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-07-10T19:52:19Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-07-10T19:52:19Z"}, "message": "Don't pass InferCtxt to WfPredicates", "tree": {"sha": "1ec97e754a04f29083f0e228a50fafb8f5f711b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ec97e754a04f29083f0e228a50fafb8f5f711b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a479f23f376eb3acc363ab743b3d2db40ad3f336", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a479f23f376eb3acc363ab743b3d2db40ad3f336", "html_url": "https://github.com/rust-lang/rust/commit/a479f23f376eb3acc363ab743b3d2db40ad3f336", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a479f23f376eb3acc363ab743b3d2db40ad3f336/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d15f1ca42c39bb6982ebde8a84b4cda3c8f8874", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d15f1ca42c39bb6982ebde8a84b4cda3c8f8874", "html_url": "https://github.com/rust-lang/rust/commit/2d15f1ca42c39bb6982ebde8a84b4cda3c8f8874"}], "stats": {"total": 52, "additions": 29, "deletions": 23}, "files": [{"sha": "6e23c84219145c820e647a03ba77cfc5b773e4f1", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 29, "deletions": 23, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/a479f23f376eb3acc363ab743b3d2db40ad3f336/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a479f23f376eb3acc363ab743b3d2db40ad3f336/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=a479f23f376eb3acc363ab743b3d2db40ad3f336", "patch": "@@ -60,12 +60,19 @@ pub fn obligations<'a, 'tcx>(\n         GenericArgKind::Lifetime(..) => return Some(Vec::new()),\n     };\n \n-    let mut wf =\n-        WfPredicates { infcx, param_env, body_id, span, out: vec![], recursion_depth, item: None };\n+    let mut wf = WfPredicates {\n+        tcx: infcx.tcx,\n+        param_env,\n+        body_id,\n+        span,\n+        out: vec![],\n+        recursion_depth,\n+        item: None,\n+    };\n     wf.compute(arg);\n     debug!(\"wf::obligations({:?}, body_id={:?}) = {:?}\", arg, body_id, wf.out);\n \n-    let result = wf.normalize();\n+    let result = wf.normalize(infcx);\n     debug!(\"wf::obligations({:?}, body_id={:?}) ~~> {:?}\", arg, body_id, result);\n     Some(result)\n }\n@@ -83,7 +90,7 @@ pub fn trait_obligations<'a, 'tcx>(\n     item: &'tcx hir::Item<'tcx>,\n ) -> Vec<traits::PredicateObligation<'tcx>> {\n     let mut wf = WfPredicates {\n-        infcx,\n+        tcx: infcx.tcx,\n         param_env,\n         body_id,\n         span,\n@@ -93,7 +100,7 @@ pub fn trait_obligations<'a, 'tcx>(\n     };\n     wf.compute_trait_ref(trait_ref, Elaborate::All);\n     debug!(obligations = ?wf.out);\n-    wf.normalize()\n+    wf.normalize(infcx)\n }\n \n pub fn predicate_obligations<'a, 'tcx>(\n@@ -104,7 +111,7 @@ pub fn predicate_obligations<'a, 'tcx>(\n     span: Span,\n ) -> Vec<traits::PredicateObligation<'tcx>> {\n     let mut wf = WfPredicates {\n-        infcx,\n+        tcx: infcx.tcx,\n         param_env,\n         body_id,\n         span,\n@@ -159,11 +166,11 @@ pub fn predicate_obligations<'a, 'tcx>(\n         }\n     }\n \n-    wf.normalize()\n+    wf.normalize(infcx)\n }\n \n-struct WfPredicates<'a, 'tcx> {\n-    infcx: &'a InferCtxt<'a, 'tcx>,\n+struct WfPredicates<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     body_id: hir::HirId,\n     span: Span,\n@@ -260,18 +267,17 @@ fn extend_cause_with_original_assoc_item_obligation<'tcx>(\n     }\n }\n \n-impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n+impl<'tcx> WfPredicates<'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n-        self.infcx.tcx\n+        self.tcx\n     }\n \n     fn cause(&self, code: traits::ObligationCauseCode<'tcx>) -> traits::ObligationCause<'tcx> {\n         traits::ObligationCause::new(self.span, self.body_id, code)\n     }\n \n-    fn normalize(mut self) -> Vec<traits::PredicateObligation<'tcx>> {\n+    fn normalize(self, infcx: &InferCtxt<'_, 'tcx>) -> Vec<traits::PredicateObligation<'tcx>> {\n         let cause = self.cause(traits::WellFormed(None));\n-        let infcx = &mut self.infcx;\n         let param_env = self.param_env;\n         let mut obligations = Vec::with_capacity(self.out.len());\n         for mut obligation in self.out {\n@@ -296,7 +302,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n \n     /// Pushes the obligations required for `trait_ref` to be WF into `self.out`.\n     fn compute_trait_ref(&mut self, trait_ref: &ty::TraitRef<'tcx>, elaborate: Elaborate) {\n-        let tcx = self.infcx.tcx;\n+        let tcx = self.tcx;\n         let obligations = self.nominal_obligations(trait_ref.def_id, trait_ref.substs);\n \n         debug!(\"compute_trait_ref obligations {:?}\", obligations);\n@@ -410,14 +416,14 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n         if !subty.has_escaping_bound_vars() {\n             let cause = self.cause(cause);\n             let trait_ref = ty::TraitRef {\n-                def_id: self.infcx.tcx.require_lang_item(LangItem::Sized, None),\n-                substs: self.infcx.tcx.mk_substs_trait(subty, &[]),\n+                def_id: self.tcx.require_lang_item(LangItem::Sized, None),\n+                substs: self.tcx.mk_substs_trait(subty, &[]),\n             };\n             self.out.push(traits::Obligation::with_depth(\n                 cause,\n                 self.recursion_depth,\n                 self.param_env,\n-                ty::Binder::dummy(trait_ref).without_const().to_predicate(self.infcx.tcx),\n+                ty::Binder::dummy(trait_ref).without_const().to_predicate(self.tcx),\n             ));\n         }\n     }\n@@ -617,7 +623,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                     // of whatever returned this exact `impl Trait`.\n \n                     // for named opaque `impl Trait` types we still need to check them\n-                    if ty::is_impl_trait_defn(self.infcx.tcx, did).is_none() {\n+                    if ty::is_impl_trait_defn(self.tcx, did).is_none() {\n                         let obligations = self.nominal_obligations(did, substs);\n                         self.out.extend(obligations);\n                     }\n@@ -683,15 +689,15 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n         def_id: DefId,\n         substs: SubstsRef<'tcx>,\n     ) -> Vec<traits::PredicateObligation<'tcx>> {\n-        let predicates = self.infcx.tcx.predicates_of(def_id);\n+        let predicates = self.tcx.predicates_of(def_id);\n         let mut origins = vec![def_id; predicates.predicates.len()];\n         let mut head = predicates;\n         while let Some(parent) = head.parent {\n-            head = self.infcx.tcx.predicates_of(parent);\n+            head = self.tcx.predicates_of(parent);\n             origins.extend(iter::repeat(parent).take(head.predicates.len()));\n         }\n \n-        let predicates = predicates.instantiate(self.infcx.tcx, substs);\n+        let predicates = predicates.instantiate(self.tcx, substs);\n         debug_assert_eq!(predicates.predicates.len(), origins.len());\n \n         iter::zip(iter::zip(predicates.predicates, predicates.spans), origins.into_iter().rev())\n@@ -746,7 +752,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n         // Note: in fact we only permit builtin traits, not `Bar<'d>`, I\n         // am looking forward to the future here.\n         if !data.has_escaping_bound_vars() && !region.has_escaping_bound_vars() {\n-            let implicit_bounds = object_region_bounds(self.infcx.tcx, data);\n+            let implicit_bounds = object_region_bounds(self.tcx, data);\n \n             let explicit_bound = region;\n \n@@ -759,7 +765,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                     cause,\n                     self.recursion_depth,\n                     self.param_env,\n-                    outlives.to_predicate(self.infcx.tcx),\n+                    outlives.to_predicate(self.tcx),\n                 ));\n             }\n         }"}]}