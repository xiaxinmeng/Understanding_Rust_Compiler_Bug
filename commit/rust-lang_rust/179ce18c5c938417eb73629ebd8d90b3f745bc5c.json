{"sha": "179ce18c5c938417eb73629ebd8d90b3f745bc5c", "node_id": "C_kwDOAAsO6NoAKDE3OWNlMThjNWM5Mzg0MTdlYjczNjI5ZWJkOGQ5MGIzZjc0NWJjNWM", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-01-24T07:41:25Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-02-24T19:55:40Z"}, "message": "resolve/metadata: Stop encoding macros as reexports", "tree": {"sha": "01906e19a56ec8af8f2ba96b7d868f739a33e5cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01906e19a56ec8af8f2ba96b7d868f739a33e5cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/179ce18c5c938417eb73629ebd8d90b3f745bc5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/179ce18c5c938417eb73629ebd8d90b3f745bc5c", "html_url": "https://github.com/rust-lang/rust/commit/179ce18c5c938417eb73629ebd8d90b3f745bc5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/179ce18c5c938417eb73629ebd8d90b3f745bc5c/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50568b8ee5665e637e3fe1a481723ea2ec8a6d03", "url": "https://api.github.com/repos/rust-lang/rust/commits/50568b8ee5665e637e3fe1a481723ea2ec8a6d03", "html_url": "https://github.com/rust-lang/rust/commit/50568b8ee5665e637e3fe1a481723ea2ec8a6d03"}], "stats": {"total": 70, "additions": 47, "deletions": 23}, "files": [{"sha": "e5e0cce198f46078eb208d511b947e04e575008f", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/179ce18c5c938417eb73629ebd8d90b3f745bc5c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/179ce18c5c938417eb73629ebd8d90b3f745bc5c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=179ce18c5c938417eb73629ebd8d90b3f745bc5c", "patch": "@@ -1077,6 +1077,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                         res,\n                         vis: ty::Visibility::Public,\n                         span: ident.span,\n+                        macro_rules: false,\n                     });\n                 }\n             }\n@@ -1088,17 +1089,19 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             for child_index in children.decode((self, sess)) {\n                 if let Some(ident) = self.opt_item_ident(child_index, sess) {\n                     let kind = self.def_kind(child_index);\n-                    if matches!(kind, DefKind::Macro(..)) {\n-                        // FIXME: Macros are currently encoded twice, once as items and once as\n-                        // reexports. We ignore the items here and only use the reexports.\n-                        continue;\n-                    }\n                     let def_id = self.local_def_id(child_index);\n                     let res = Res::Def(kind, def_id);\n                     let vis = self.get_visibility(child_index);\n                     let span = self.get_span(child_index, sess);\n+                    let macro_rules = match kind {\n+                        DefKind::Macro(..) => match self.kind(child_index) {\n+                            EntryKind::MacroDef(_, macro_rules) => macro_rules,\n+                            _ => unreachable!(),\n+                        },\n+                        _ => false,\n+                    };\n \n-                    callback(ModChild { ident, res, vis, span });\n+                    callback(ModChild { ident, res, vis, span, macro_rules });\n \n                     // For non-re-export structs and variants add their constructors to children.\n                     // Re-export lists automatically contain constructors when necessary.\n@@ -1110,7 +1113,13 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                                 let ctor_res =\n                                     Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);\n                                 let vis = self.get_visibility(ctor_def_id.index);\n-                                callback(ModChild { ident, res: ctor_res, vis, span });\n+                                callback(ModChild {\n+                                    ident,\n+                                    res: ctor_res,\n+                                    vis,\n+                                    span,\n+                                    macro_rules: false,\n+                                });\n                             }\n                         }\n                         DefKind::Variant => {\n@@ -1135,7 +1144,13 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                                     vis = ty::Visibility::Restricted(crate_def_id);\n                                 }\n                             }\n-                            callback(ModChild { ident, res: ctor_res, vis, span });\n+                            callback(ModChild {\n+                                ident,\n+                                res: ctor_res,\n+                                vis,\n+                                span,\n+                                macro_rules: false,\n+                            });\n                         }\n                         _ => {}\n                     }"}, {"sha": "c8e78747d8e7b3a74ac53afb841bef9b9bd047dd", "filename": "compiler/rustc_middle/src/metadata.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/179ce18c5c938417eb73629ebd8d90b3f745bc5c/compiler%2Frustc_middle%2Fsrc%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/179ce18c5c938417eb73629ebd8d90b3f745bc5c/compiler%2Frustc_middle%2Fsrc%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmetadata.rs?ref=179ce18c5c938417eb73629ebd8d90b3f745bc5c", "patch": "@@ -21,4 +21,6 @@ pub struct ModChild {\n     pub vis: ty::Visibility,\n     /// Span of the item.\n     pub span: Span,\n+    /// A proper `macro_rules` item (not a reexport).\n+    pub macro_rules: bool,\n }"}, {"sha": "61a9b644cb8f50069f89c2359f52c8cab9f81472", "filename": "compiler/rustc_resolve/src/access_levels.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/179ce18c5c938417eb73629ebd8d90b3f745bc5c/compiler%2Frustc_resolve%2Fsrc%2Faccess_levels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/179ce18c5c938417eb73629ebd8d90b3f745bc5c/compiler%2Frustc_resolve%2Fsrc%2Faccess_levels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Faccess_levels.rs?ref=179ce18c5c938417eb73629ebd8d90b3f745bc5c", "patch": "@@ -133,7 +133,7 @@ impl<'r, 'ast> Visitor<'ast> for AccessLevelsVisitor<'ast, 'r> {\n             ast::ItemKind::Impl(..) => return,\n \n             // Only exported `macro_rules!` items are public, but they always are\n-            ast::ItemKind::MacroDef(..) => {\n+            ast::ItemKind::MacroDef(ref macro_def) if macro_def.macro_rules => {\n                 let is_macro_export =\n                     item.attrs.iter().any(|attr| attr.has_name(sym::macro_export));\n                 if is_macro_export { Some(AccessLevel::Public) } else { None }\n@@ -155,7 +155,8 @@ impl<'r, 'ast> Visitor<'ast> for AccessLevelsVisitor<'ast, 'r> {\n             | ast::ItemKind::Struct(..)\n             | ast::ItemKind::Union(..)\n             | ast::ItemKind::Trait(..)\n-            | ast::ItemKind::TraitAlias(..) => {\n+            | ast::ItemKind::TraitAlias(..)\n+            | ast::ItemKind::MacroDef(..) => {\n                 if item.vis.kind.is_pub() {\n                     self.prev_level\n                 } else {"}, {"sha": "6b70c9833448399c7b66251d0405bc48c1370059", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/179ce18c5c938417eb73629ebd8d90b3f745bc5c/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/179ce18c5c938417eb73629ebd8d90b3f745bc5c/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=179ce18c5c938417eb73629ebd8d90b3f745bc5c", "patch": "@@ -940,7 +940,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n     /// Builds the reduced graph for a single item in an external crate.\n     fn build_reduced_graph_for_external_crate_res(&mut self, child: ModChild) {\n         let parent = self.parent_scope.module;\n-        let ModChild { ident, res, vis, span } = child;\n+        let ModChild { ident, res, vis, span, macro_rules } = child;\n         let res = res.expect_non_local();\n         let expansion = self.parent_scope.expansion;\n         // Record primary definitions.\n@@ -972,7 +972,9 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 _,\n             ) => self.r.define(parent, ident, ValueNS, (res, vis, span, expansion)),\n             Res::Def(DefKind::Macro(..), _) | Res::NonMacroAttr(..) => {\n-                self.r.define(parent, ident, MacroNS, (res, vis, span, expansion))\n+                if !macro_rules {\n+                    self.r.define(parent, ident, MacroNS, (res, vis, span, expansion))\n+                }\n             }\n             Res::Def(\n                 DefKind::TyParam"}, {"sha": "bf570fb0f80b00a75279c3b439dc22fad545bd24", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/179ce18c5c938417eb73629ebd8d90b3f745bc5c/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/179ce18c5c938417eb73629ebd8d90b3f745bc5c/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=179ce18c5c938417eb73629ebd8d90b3f745bc5c", "patch": "@@ -1399,14 +1399,22 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         let mut reexports = Vec::new();\n \n         module.for_each_child(self.r, |_, ident, _, binding| {\n-            // Filter away ambiguous imports and anything that has def-site hygiene.\n-            // FIXME: Implement actual cross-crate hygiene.\n-            let is_good_import =\n-                binding.is_import() && !binding.is_ambiguity() && !ident.span.from_expansion();\n-            if is_good_import || binding.is_macro_def() {\n+            // FIXME: Consider changing the binding inserted by `#[macro_export] macro_rules`\n+            // into the crate root to actual `NameBindingKind::Import`.\n+            if binding.is_import()\n+                || matches!(binding.kind, NameBindingKind::Res(_, _is_macro_export @ true))\n+            {\n                 let res = binding.res().expect_non_local();\n-                if res != def::Res::Err {\n-                    reexports.push(ModChild { ident, res, vis: binding.vis, span: binding.span });\n+                // Ambiguous imports are treated as errors at this point and are\n+                // not exposed to other crates (see #36837 for more details).\n+                if res != def::Res::Err && !binding.is_ambiguity() {\n+                    reexports.push(ModChild {\n+                        ident,\n+                        res,\n+                        vis: binding.vis,\n+                        span: binding.span,\n+                        macro_rules: false,\n+                    });\n                 }\n             }\n         });"}, {"sha": "eed8aaed4ee09089e3b0c4fe749fec0ac42cec0a", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/179ce18c5c938417eb73629ebd8d90b3f745bc5c/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/179ce18c5c938417eb73629ebd8d90b3f745bc5c/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=179ce18c5c938417eb73629ebd8d90b3f745bc5c", "patch": "@@ -845,10 +845,6 @@ impl<'a> NameBinding<'a> {\n         )\n     }\n \n-    fn is_macro_def(&self) -> bool {\n-        matches!(self.kind, NameBindingKind::Res(Res::Def(DefKind::Macro(..), _), _))\n-    }\n-\n     fn macro_kind(&self) -> Option<MacroKind> {\n         self.res().macro_kind()\n     }"}]}