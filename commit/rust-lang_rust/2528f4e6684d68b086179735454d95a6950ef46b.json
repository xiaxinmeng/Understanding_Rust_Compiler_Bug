{"sha": "2528f4e6684d68b086179735454d95a6950ef46b", "node_id": "C_kwDOAAsO6NoAKDI1MjhmNGU2Njg0ZDY4YjA4NjE3OTczNTQ1NGQ5NWE2OTUwZWY0NmI", "commit": {"author": {"name": "Vanille-N", "email": "neven.villani@crans.org", "date": "2022-12-02T12:23:57Z"}, "committer": {"name": "Vanille-N", "email": "neven.villani@crans.org", "date": "2022-12-02T12:23:57Z"}, "message": "move stacked_borrows to borrow_tracker/stacked_borrows", "tree": {"sha": "e9c49c95be2c893bccf0111d040e6ba819dd974f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9c49c95be2c893bccf0111d040e6ba819dd974f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2528f4e6684d68b086179735454d95a6950ef46b", "comment_count": 0, "verification": {"verified": false, "reason": "invalid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEE1bhy5AfUOHIeWIegAOdl+n9PLt4FAmOJ7mwACgkQAOdl+n9P\nLt4eeAwAoOmXLBt8U7XQfes/ZHoyU/E5rvreYCZrhVzcQ3hs/ZI/QJVGvb/W+tim\n8HDugiUgfXC8jNgfo1vBd8pScgqicC67/JAFQoUIUxDUBHPbfI8rYd/D0F+p0eSo\n8gE/u7wet2LQZJ7UFPcyLwZiQ2VUtHP9K0xZ8g+ISy7ZIv+mtyDowblgiamgDWiN\nkNgYI5IEWcPGWhcXSF6HnNXM+wTjZuAEbnXtc7k3Q+zCueL0+9wpQTCOdzXkk4LP\nQpwqvbVWKDBKTZHte/ObE+D+3+w2KBesLgFHefSirSPrQSlTjtKEkpILil0dlASh\nD6WeWyeckKVpRZBYs7TnLU+EaWdTwwaA1Vafg8eA3IZ6E9peYaEUWbsrNulUjyYC\nb9cXd7NdJezMRNmvnkJ/Bev3Wgx4+09nGpsQr45XwXOsVPUOx+CxTdaWWScO+GZj\nfvvO/ZLJGlTlmOqbyHZhsJcdTXSzhGjWLmKimajNK1z4Mstk0BYxjIX2llqvW/fc\np93Cdz64\n=DKvE\n-----END PGP SIGNATURE-----", "payload": "tree e9c49c95be2c893bccf0111d040e6ba819dd974f\nparent 2d42d265eae884cb2ba90df11567257973d7be6f\nauthor Vanille-N <neven.villani@crans.org> 1669983837 +0100\ncommitter Vanille-N <neven.villani@crans.org> 1669983837 +0100\n\nmove stacked_borrows to borrow_tracker/stacked_borrows\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2528f4e6684d68b086179735454d95a6950ef46b", "html_url": "https://github.com/rust-lang/rust/commit/2528f4e6684d68b086179735454d95a6950ef46b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2528f4e6684d68b086179735454d95a6950ef46b/comments", "author": {"login": "Vanille-N", "id": 58042063, "node_id": "MDQ6VXNlcjU4MDQyMDYz", "avatar_url": "https://avatars.githubusercontent.com/u/58042063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vanille-N", "html_url": "https://github.com/Vanille-N", "followers_url": "https://api.github.com/users/Vanille-N/followers", "following_url": "https://api.github.com/users/Vanille-N/following{/other_user}", "gists_url": "https://api.github.com/users/Vanille-N/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vanille-N/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vanille-N/subscriptions", "organizations_url": "https://api.github.com/users/Vanille-N/orgs", "repos_url": "https://api.github.com/users/Vanille-N/repos", "events_url": "https://api.github.com/users/Vanille-N/events{/privacy}", "received_events_url": "https://api.github.com/users/Vanille-N/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Vanille-N", "id": 58042063, "node_id": "MDQ6VXNlcjU4MDQyMDYz", "avatar_url": "https://avatars.githubusercontent.com/u/58042063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vanille-N", "html_url": "https://github.com/Vanille-N", "followers_url": "https://api.github.com/users/Vanille-N/followers", "following_url": "https://api.github.com/users/Vanille-N/following{/other_user}", "gists_url": "https://api.github.com/users/Vanille-N/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vanille-N/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vanille-N/subscriptions", "organizations_url": "https://api.github.com/users/Vanille-N/orgs", "repos_url": "https://api.github.com/users/Vanille-N/repos", "events_url": "https://api.github.com/users/Vanille-N/events{/privacy}", "received_events_url": "https://api.github.com/users/Vanille-N/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d42d265eae884cb2ba90df11567257973d7be6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d42d265eae884cb2ba90df11567257973d7be6f", "html_url": "https://github.com/rust-lang/rust/commit/2d42d265eae884cb2ba90df11567257973d7be6f"}], "stats": {"total": 407, "additions": 116, "deletions": 291}, "files": [{"sha": "c5eb2113f9f8eb9c28ee8851edd692abedd81a12", "filename": "src/tools/miri/src/borrow_tracker/stacked_borrows/diagnostics.rs", "status": "renamed", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2528f4e6684d68b086179735454d95a6950ef46b/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2528f4e6684d68b086179735454d95a6950ef46b/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fdiagnostics.rs?ref=2528f4e6684d68b086179735454d95a6950ef46b", "patch": "@@ -1,17 +1,16 @@\n use smallvec::SmallVec;\n use std::fmt;\n \n-use rustc_middle::mir::interpret::{alloc_range, AllocId, AllocRange};\n+use rustc_middle::mir::interpret::{alloc_range, AllocId, AllocRange, InterpError};\n use rustc_span::{Span, SpanData};\n use rustc_target::abi::Size;\n \n-use crate::stacked_borrows::{\n-    err_sb_ub, AccessKind, GlobalStateInner, Permission, ProtectorKind, Stack,\n+use crate::borrow_tracker::{\n+    stacked_borrows::{err_sb_ub, Permission},\n+    AccessKind, GlobalStateInner, ProtectorKind,\n };\n use crate::*;\n \n-use rustc_middle::mir::interpret::InterpError;\n-\n #[derive(Clone, Debug)]\n pub struct AllocHistory {\n     id: AllocId,\n@@ -53,7 +52,7 @@ impl Creation {\n \n #[derive(Clone, Debug)]\n struct Invalidation {\n-    tag: SbTag,\n+    tag: BorTag,\n     range: AllocRange,\n     span: Span,\n     cause: InvalidationCause,\n@@ -100,7 +99,7 @@ impl fmt::Display for InvalidationCause {\n \n #[derive(Clone, Debug)]\n struct Protection {\n-    tag: SbTag,\n+    tag: BorTag,\n     span: Span,\n }\n \n@@ -135,7 +134,7 @@ impl<'ecx, 'mir, 'tcx> DiagnosticCxBuilder<'ecx, 'mir, 'tcx> {\n     pub fn retag(\n         machine: &'ecx MiriMachine<'mir, 'tcx>,\n         cause: RetagCause,\n-        new_tag: SbTag,\n+        new_tag: BorTag,\n         orig_tag: ProvenanceExtra,\n         range: AllocRange,\n     ) -> Self {\n@@ -185,7 +184,7 @@ enum Operation {\n #[derive(Debug, Clone)]\n struct RetagOp {\n     cause: RetagCause,\n-    new_tag: SbTag,\n+    new_tag: BorTag,\n     orig_tag: ProvenanceExtra,\n     range: AllocRange,\n     permission: Option<Permission>,\n@@ -257,7 +256,7 @@ impl<'history, 'ecx, 'mir, 'tcx> DiagnosticCx<'history, 'ecx, 'mir, 'tcx> {\n             .push(Creation { retag: op.clone(), span: self.machine.current_span() });\n     }\n \n-    pub fn log_invalidation(&mut self, tag: SbTag) {\n+    pub fn log_invalidation(&mut self, tag: BorTag) {\n         let mut span = self.machine.current_span();\n         let (range, cause) = match &self.operation {\n             Operation::Retag(RetagOp { cause, range, permission, .. }) => {\n@@ -288,8 +287,8 @@ impl<'history, 'ecx, 'mir, 'tcx> DiagnosticCx<'history, 'ecx, 'mir, 'tcx> {\n \n     pub fn get_logs_relevant_to(\n         &self,\n-        tag: SbTag,\n-        protector_tag: Option<SbTag>,\n+        tag: BorTag,\n+        protector_tag: Option<BorTag>,\n     ) -> Option<TagHistory> {\n         let Some(created) = self.history\n             .creations\n@@ -410,7 +409,7 @@ impl<'history, 'ecx, 'mir, 'tcx> DiagnosticCx<'history, 'ecx, 'mir, 'tcx> {\n             .all_stacks()\n             .flatten()\n             .map(|frame| {\n-                frame.extra.stacked_borrows.as_ref().expect(\"we should have Stacked Borrows data\")\n+                frame.extra.borrow_tracker.as_ref().expect(\"we should have borrow tracking data\")\n             })\n             .find(|frame| frame.protected_tags.contains(&item.tag()))\n             .map(|frame| frame.call_id)", "previous_filename": "src/tools/miri/src/stacked_borrows/diagnostics.rs"}, {"sha": "b9a52e4966cd7230914e084d568b77e782a2195f", "filename": "src/tools/miri/src/borrow_tracker/stacked_borrows/item.rs", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2528f4e6684d68b086179735454d95a6950ef46b/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2528f4e6684d68b086179735454d95a6950ef46b/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fitem.rs?ref=2528f4e6684d68b086179735454d95a6950ef46b", "patch": "@@ -1,13 +1,13 @@\n-use crate::stacked_borrows::SbTag;\n use std::fmt;\n-use std::num::NonZeroU64;\n+\n+use crate::borrow_tracker::BorTag;\n \n /// An item in the per-location borrow stack.\n #[derive(Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Item(u64);\n \n // An Item contains 3 bitfields:\n-// * Bits 0-61 store an SbTag\n+// * Bits 0-61 store a BorTag\n // * Bits 61-63 store a Permission\n // * Bit 64 stores a flag which indicates if we have a protector\n const TAG_MASK: u64 = u64::MAX >> 3;\n@@ -18,9 +18,9 @@ const PERM_SHIFT: u64 = 61;\n const PROTECTED_SHIFT: u64 = 63;\n \n impl Item {\n-    pub fn new(tag: SbTag, perm: Permission, protected: bool) -> Self {\n-        assert!(tag.0.get() <= TAG_MASK);\n-        let packed_tag = tag.0.get();\n+    pub fn new(tag: BorTag, perm: Permission, protected: bool) -> Self {\n+        assert!(tag.get() <= TAG_MASK);\n+        let packed_tag = tag.get();\n         let packed_perm = perm.to_bits() << PERM_SHIFT;\n         let packed_protected = u64::from(protected) << PROTECTED_SHIFT;\n \n@@ -34,8 +34,8 @@ impl Item {\n     }\n \n     /// The pointers the permission is granted to.\n-    pub fn tag(self) -> SbTag {\n-        SbTag(NonZeroU64::new(self.0 & TAG_MASK).unwrap())\n+    pub fn tag(self) -> BorTag {\n+        BorTag::new(self.0 & TAG_MASK).unwrap()\n     }\n \n     /// The permission this item grants.", "previous_filename": "src/tools/miri/src/stacked_borrows/item.rs"}, {"sha": "ec3be398a2c29d896ac1a92ac49ee236c025fd2c", "filename": "src/tools/miri/src/borrow_tracker/stacked_borrows/mod.rs", "status": "renamed", "additions": 83, "deletions": 260, "changes": 343, "blob_url": "https://github.com/rust-lang/rust/blob/2528f4e6684d68b086179735454d95a6950ef46b/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2528f4e6684d68b086179735454d95a6950ef46b/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fmod.rs?ref=2528f4e6684d68b086179735454d95a6950ef46b", "patch": "@@ -2,81 +2,30 @@\n //! for further information.\n \n use log::trace;\n-use std::cell::RefCell;\n use std::cmp;\n-use std::fmt;\n-use std::fmt::Write;\n-use std::num::NonZeroU64;\n+use std::fmt::{self, Write};\n \n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_hir::Mutability;\n-use rustc_middle::mir::RetagKind;\n+use rustc_data_structures::fx::FxHashSet;\n+use rustc_middle::mir::{Mutability, RetagKind};\n use rustc_middle::ty::{\n     self,\n     layout::{HasParamEnv, LayoutOf},\n };\n-use rustc_target::abi::Abi;\n-use rustc_target::abi::Size;\n-use smallvec::SmallVec;\n+use rustc_target::abi::{Abi, Size};\n \n+use crate::borrow_tracker::{\n+    stacked_borrows::diagnostics::{AllocHistory, DiagnosticCx, DiagnosticCxBuilder, TagHistory},\n+    AccessKind, GlobalStateInner, ProtectorKind, RetagCause, RetagFields,\n+};\n use crate::*;\n \n-pub mod diagnostics;\n-use diagnostics::{AllocHistory, DiagnosticCx, DiagnosticCxBuilder, RetagCause, TagHistory};\n-\n mod item;\n pub use item::{Item, Permission};\n mod stack;\n pub use stack::Stack;\n+pub mod diagnostics;\n \n-pub type CallId = NonZeroU64;\n-\n-// Even reading memory can have effects on the stack, so we need a `RefCell` here.\n-pub type AllocExtra = RefCell<Stacks>;\n-\n-/// Tracking pointer provenance\n-#[derive(Copy, Clone, Hash, PartialEq, Eq)]\n-pub struct SbTag(NonZeroU64);\n-\n-impl SbTag {\n-    pub fn new(i: u64) -> Option<Self> {\n-        NonZeroU64::new(i).map(SbTag)\n-    }\n-\n-    // The default to be used when SB is disabled\n-    #[allow(clippy::should_implement_trait)]\n-    pub fn default() -> Self {\n-        Self::new(1).unwrap()\n-    }\n-}\n-\n-impl fmt::Debug for SbTag {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"<{}>\", self.0)\n-    }\n-}\n-\n-#[derive(Debug)]\n-pub struct FrameExtra {\n-    /// The ID of the call this frame corresponds to.\n-    call_id: CallId,\n-\n-    /// If this frame is protecting any tags, they are listed here. We use this list to do\n-    /// incremental updates of the global list of protected tags stored in the\n-    /// `stacked_borrows::GlobalState` upon function return, and if we attempt to pop a protected\n-    /// tag, to identify which call is responsible for protecting the tag.\n-    /// See `Stack::item_invalidated` for more explanation.\n-    ///\n-    /// This will contain one tag per reference passed to the function, so\n-    /// a size of 2 is enough for the vast majority of functions.\n-    protected_tags: SmallVec<[SbTag; 2]>,\n-}\n-\n-impl VisitTags for FrameExtra {\n-    fn visit_tags(&self, _visit: &mut dyn FnMut(SbTag)) {\n-        // `protected_tags` are fine to GC.\n-    }\n-}\n+pub type AllocExtra = Stacks;\n \n /// Extra per-allocation state.\n #[derive(Clone, Debug)]\n@@ -86,98 +35,16 @@ pub struct Stacks {\n     /// Stores past operations on this allocation\n     history: AllocHistory,\n     /// The set of tags that have been exposed inside this allocation.\n-    exposed_tags: FxHashSet<SbTag>,\n+    exposed_tags: FxHashSet<BorTag>,\n     /// Whether this memory has been modified since the last time the tag GC ran\n     modified_since_last_gc: bool,\n }\n \n-/// The flavor of the protector.\n-#[derive(Copy, Clone, Debug)]\n-enum ProtectorKind {\n-    /// Protected against aliasing violations from other pointers.\n-    ///\n-    /// Items protected like this cause UB when they are invalidated, *but* the pointer itself may\n-    /// still be used to issue a deallocation.\n-    ///\n-    /// This is required for LLVM IR pointers that are `noalias` but *not* `dereferenceable`.\n-    WeakProtector,\n-\n-    /// Protected against any kind of invalidation.\n-    ///\n-    /// Items protected like this cause UB when they are invalidated or the memory is deallocated.\n-    /// This is strictly stronger protection than `WeakProtector`.\n-    ///\n-    /// This is required for LLVM IR pointers that are `dereferenceable` (and also allows `noalias`).\n-    StrongProtector,\n-}\n-\n-/// Extra global state, available to the memory access hooks.\n-#[derive(Debug)]\n-pub struct GlobalStateInner {\n-    /// Next unused pointer ID (tag).\n-    next_ptr_tag: SbTag,\n-    /// Table storing the \"base\" tag for each allocation.\n-    /// The base tag is the one used for the initial pointer.\n-    /// We need this in a separate table to handle cyclic statics.\n-    base_ptr_tags: FxHashMap<AllocId, SbTag>,\n-    /// Next unused call ID (for protectors).\n-    next_call_id: CallId,\n-    /// All currently protected tags, and the status of their protection.\n-    /// An item is protected if its tag is in this set, *and* it has the \"protected\" bit set.\n-    /// We add tags to this when they are created with a protector in `reborrow`, and\n-    /// we remove tags from this when the call which is protecting them returns, in\n-    /// `GlobalStateInner::end_call`. See `Stack::item_invalidated` for more details.\n-    protected_tags: FxHashMap<SbTag, ProtectorKind>,\n-    /// The pointer ids to trace\n-    tracked_pointer_tags: FxHashSet<SbTag>,\n-    /// The call ids to trace\n-    tracked_call_ids: FxHashSet<CallId>,\n-    /// Whether to recurse into datatypes when searching for pointers to retag.\n-    retag_fields: RetagFields,\n-}\n-\n-#[derive(Copy, Clone, Debug)]\n-pub enum RetagFields {\n-    /// Don't retag any fields.\n-    No,\n-    /// Retag all fields.\n-    Yes,\n-    /// Only retag fields of types with Scalar and ScalarPair layout,\n-    /// to match the LLVM `noalias` we generate.\n-    OnlyScalar,\n-}\n-\n-impl VisitTags for GlobalStateInner {\n-    fn visit_tags(&self, _visit: &mut dyn FnMut(SbTag)) {\n-        // The only candidate is base_ptr_tags, and that does not need visiting since we don't ever\n-        // GC the bottommost tag.\n-    }\n-}\n-\n-/// We need interior mutable access to the global state.\n-pub type GlobalState = RefCell<GlobalStateInner>;\n-\n-/// Indicates which kind of access is being performed.\n-#[derive(Copy, Clone, Hash, PartialEq, Eq, Debug)]\n-pub enum AccessKind {\n-    Read,\n-    Write,\n-}\n-\n-impl fmt::Display for AccessKind {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self {\n-            AccessKind::Read => write!(f, \"read access\"),\n-            AccessKind::Write => write!(f, \"write access\"),\n-        }\n-    }\n-}\n-\n /// Indicates which kind of reference is being created.\n /// Used by high-level `reborrow` to compute which permissions to grant to the\n /// new pointer.\n #[derive(Copy, Clone, Hash, PartialEq, Eq)]\n-pub enum RefKind {\n+enum RefKind {\n     /// `&mut` and `Box`.\n     Unique { two_phase: bool },\n     /// `&` with or without interior mutability.\n@@ -198,65 +65,6 @@ impl fmt::Display for RefKind {\n     }\n }\n \n-/// Utilities for initialization and ID generation\n-impl GlobalStateInner {\n-    pub fn new(\n-        tracked_pointer_tags: FxHashSet<SbTag>,\n-        tracked_call_ids: FxHashSet<CallId>,\n-        retag_fields: RetagFields,\n-    ) -> Self {\n-        GlobalStateInner {\n-            next_ptr_tag: SbTag(NonZeroU64::new(1).unwrap()),\n-            base_ptr_tags: FxHashMap::default(),\n-            next_call_id: NonZeroU64::new(1).unwrap(),\n-            protected_tags: FxHashMap::default(),\n-            tracked_pointer_tags,\n-            tracked_call_ids,\n-            retag_fields,\n-        }\n-    }\n-\n-    /// Generates a new pointer tag. Remember to also check track_pointer_tags and log its creation!\n-    fn new_ptr(&mut self) -> SbTag {\n-        let id = self.next_ptr_tag;\n-        self.next_ptr_tag = SbTag(NonZeroU64::new(id.0.get() + 1).unwrap());\n-        id\n-    }\n-\n-    pub fn new_frame(&mut self, machine: &MiriMachine<'_, '_>) -> FrameExtra {\n-        let call_id = self.next_call_id;\n-        trace!(\"new_frame: Assigning call ID {}\", call_id);\n-        if self.tracked_call_ids.contains(&call_id) {\n-            machine.emit_diagnostic(NonHaltingDiagnostic::CreatedCallId(call_id));\n-        }\n-        self.next_call_id = NonZeroU64::new(call_id.get() + 1).unwrap();\n-        FrameExtra { call_id, protected_tags: SmallVec::new() }\n-    }\n-\n-    pub fn end_call(&mut self, frame: &machine::FrameData<'_>) {\n-        for tag in &frame\n-            .stacked_borrows\n-            .as_ref()\n-            .expect(\"we should have Stacked Borrows data\")\n-            .protected_tags\n-        {\n-            self.protected_tags.remove(tag);\n-        }\n-    }\n-\n-    pub fn base_ptr_tag(&mut self, id: AllocId, machine: &MiriMachine<'_, '_>) -> SbTag {\n-        self.base_ptr_tags.get(&id).copied().unwrap_or_else(|| {\n-            let tag = self.new_ptr();\n-            if self.tracked_pointer_tags.contains(&tag) {\n-                machine.emit_diagnostic(NonHaltingDiagnostic::CreatedPointerTag(tag.0, None, None));\n-            }\n-            trace!(\"New allocation {:?} has base tag {:?}\", id, tag);\n-            self.base_ptr_tags.try_insert(id, tag).unwrap();\n-            tag\n-        })\n-    }\n-}\n-\n /// Error reporting\n pub fn err_sb_ub<'tcx>(\n     msg: String,\n@@ -329,14 +137,7 @@ impl<'tcx> Stack {\n         }\n     }\n \n-    /// Check if the given item is protected.\n-    ///\n-    /// The `provoking_access` argument is only used to produce diagnostics.\n-    /// It is `Some` when we are granting the contained access for said tag, and it is\n-    /// `None` during a deallocation.\n-    /// Within `provoking_access, the `AllocRange` refers the entire operation, and\n-    /// the `Size` refers to the specific location in the `AllocRange` that we are\n-    /// currently checking.\n+    /// The given item was invalidated -- check its protectors for whether that will cause UB.\n     fn item_invalidated(\n         item: &Item,\n         global: &GlobalStateInner,\n@@ -386,7 +187,7 @@ impl<'tcx> Stack {\n         tag: ProvenanceExtra,\n         global: &GlobalStateInner,\n         dcx: &mut DiagnosticCx<'_, '_, '_, 'tcx>,\n-        exposed_tags: &FxHashSet<SbTag>,\n+        exposed_tags: &FxHashSet<BorTag>,\n     ) -> InterpResult<'tcx> {\n         // Two main steps: Find granting item, remove incompatible items above.\n \n@@ -442,23 +243,24 @@ impl<'tcx> Stack {\n         if granting_idx.is_none() || matches!(tag, ProvenanceExtra::Wildcard) {\n             // Compute the upper bound of the items that remain.\n             // (This is why we did all the work above: to reduce the items we have to consider here.)\n-            let mut max = NonZeroU64::new(1).unwrap();\n+            let mut max = BorTag::one();\n             for i in 0..self.len() {\n                 let item = self.get(i).unwrap();\n                 // Skip disabled items, they cannot be matched anyway.\n                 if !matches!(item.perm(), Permission::Disabled) {\n                     // We are looking for a strict upper bound, so add 1 to this tag.\n-                    max = cmp::max(item.tag().0.checked_add(1).unwrap(), max);\n+                    max = cmp::max(item.tag().succ().unwrap(), max);\n                 }\n             }\n             if let Some(unk) = self.unknown_bottom() {\n-                max = cmp::max(unk.0, max);\n+                max = cmp::max(unk, max);\n             }\n             // Use `max` as new strict upper bound for everything.\n             trace!(\n-                \"access: forgetting stack to upper bound {max} due to wildcard or unknown access\"\n+                \"access: forgetting stack to upper bound {max} due to wildcard or unknown access\",\n+                max = max.get(),\n             );\n-            self.set_unknown_bottom(SbTag(max));\n+            self.set_unknown_bottom(max);\n         }\n \n         // Done.\n@@ -472,7 +274,7 @@ impl<'tcx> Stack {\n         tag: ProvenanceExtra,\n         global: &GlobalStateInner,\n         dcx: &mut DiagnosticCx<'_, '_, '_, 'tcx>,\n-        exposed_tags: &FxHashSet<SbTag>,\n+        exposed_tags: &FxHashSet<BorTag>,\n     ) -> InterpResult<'tcx> {\n         // Step 1: Make a write access.\n         // As part of this we do regular protector checking, i.e. even weakly protected items cause UB when popped.\n@@ -497,7 +299,7 @@ impl<'tcx> Stack {\n         access: Option<AccessKind>,\n         global: &GlobalStateInner,\n         dcx: &mut DiagnosticCx<'_, '_, '_, 'tcx>,\n-        exposed_tags: &FxHashSet<SbTag>,\n+        exposed_tags: &FxHashSet<BorTag>,\n     ) -> InterpResult<'tcx> {\n         dcx.start_grant(new.perm());\n \n@@ -550,9 +352,9 @@ impl<'tcx> Stack {\n }\n // # Stacked Borrows Core End\n \n-/// Integration with the SbTag garbage collector\n+/// Integration with the BorTag garbage collector\n impl Stacks {\n-    pub fn remove_unreachable_tags(&mut self, live_tags: &FxHashSet<SbTag>) {\n+    pub fn remove_unreachable_tags(&mut self, live_tags: &FxHashSet<BorTag>) {\n         if self.modified_since_last_gc {\n             for stack in self.stacks.iter_mut_all() {\n                 if stack.len() > 64 {\n@@ -565,7 +367,7 @@ impl Stacks {\n }\n \n impl VisitTags for Stacks {\n-    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n         for tag in self.exposed_tags.iter().copied() {\n             visit(tag);\n         }\n@@ -579,7 +381,7 @@ impl<'tcx> Stacks {\n     fn new(\n         size: Size,\n         perm: Permission,\n-        tag: SbTag,\n+        tag: BorTag,\n         id: AllocId,\n         machine: &MiriMachine<'_, '_>,\n     ) -> Self {\n@@ -602,7 +404,7 @@ impl<'tcx> Stacks {\n         mut f: impl FnMut(\n             &mut Stack,\n             &mut DiagnosticCx<'_, '_, '_, 'tcx>,\n-            &mut FxHashSet<SbTag>,\n+            &mut FxHashSet<BorTag>,\n         ) -> InterpResult<'tcx>,\n     ) -> InterpResult<'tcx> {\n         self.modified_since_last_gc = true;\n@@ -620,20 +422,19 @@ impl Stacks {\n     pub fn new_allocation(\n         id: AllocId,\n         size: Size,\n-        state: &GlobalState,\n+        state: &mut GlobalStateInner,\n         kind: MemoryKind<MiriMemoryKind>,\n         machine: &MiriMachine<'_, '_>,\n     ) -> Self {\n-        let mut extra = state.borrow_mut();\n         let (base_tag, perm) = match kind {\n             // New unique borrow. This tag is not accessible by the program,\n             // so it will only ever be used when using the local directly (i.e.,\n             // not through a pointer). That is, whenever we directly write to a local, this will pop\n             // everything else off the stack, invalidating all previous pointers,\n             // and in particular, *all* raw pointers.\n-            MemoryKind::Stack => (extra.base_ptr_tag(id, machine), Permission::Unique),\n+            MemoryKind::Stack => (state.base_ptr_tag(id, machine), Permission::Unique),\n             // Everything else is shared by default.\n-            _ => (extra.base_ptr_tag(id, machine), Permission::SharedReadWrite),\n+            _ => (state.base_ptr_tag(id, machine), Permission::SharedReadWrite),\n         };\n         Stacks::new(size, perm, base_tag, id, machine)\n     }\n@@ -656,7 +457,7 @@ impl Stacks {\n             range.size.bytes()\n         );\n         let dcx = DiagnosticCxBuilder::read(machine, tag, range);\n-        let state = machine.stacked_borrows.as_ref().unwrap().borrow();\n+        let state = machine.borrow_tracker.as_ref().unwrap().borrow();\n         self.for_each(range, dcx, |stack, dcx, exposed_tags| {\n             stack.access(AccessKind::Read, tag, &state, dcx, exposed_tags)\n         })\n@@ -677,7 +478,7 @@ impl Stacks {\n             range.size.bytes()\n         );\n         let dcx = DiagnosticCxBuilder::write(machine, tag, range);\n-        let state = machine.stacked_borrows.as_ref().unwrap().borrow();\n+        let state = machine.borrow_tracker.as_ref().unwrap().borrow();\n         self.for_each(range, dcx, |stack, dcx, exposed_tags| {\n             stack.access(AccessKind::Write, tag, &state, dcx, exposed_tags)\n         })\n@@ -693,12 +494,16 @@ impl Stacks {\n     ) -> InterpResult<'tcx> {\n         trace!(\"deallocation with tag {:?}: {:?}, size {}\", tag, alloc_id, range.size.bytes());\n         let dcx = DiagnosticCxBuilder::dealloc(machine, tag);\n-        let state = machine.stacked_borrows.as_ref().unwrap().borrow();\n+        let state = machine.borrow_tracker.as_ref().unwrap().borrow();\n         self.for_each(range, dcx, |stack, dcx, exposed_tags| {\n             stack.dealloc(tag, &state, dcx, exposed_tags)\n         })?;\n         Ok(())\n     }\n+\n+    fn expose_tag(&mut self, tag: BorTag) {\n+        self.exposed_tags.insert(tag);\n+    }\n }\n \n /// Retagging/reborrowing.  There is some policy in here, such as which permissions\n@@ -710,13 +515,13 @@ impl<'mir: 'ecx, 'tcx: 'mir, 'ecx> EvalContextPrivExt<'mir, 'tcx, 'ecx>\n trait EvalContextPrivExt<'mir: 'ecx, 'tcx: 'mir, 'ecx>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     /// Returns the `AllocId` the reborrow was done in, if some actual borrow stack manipulation\n     /// happened.\n-    fn reborrow(\n+    fn sb_reborrow(\n         &mut self,\n         place: &MPlaceTy<'tcx, Provenance>,\n         size: Size,\n         kind: RefKind,\n         retag_cause: RetagCause, // What caused this retag, for diagnostics only\n-        new_tag: SbTag,\n+        new_tag: BorTag,\n         protect: Option<ProtectorKind>,\n     ) -> InterpResult<'tcx, Option<AllocId>> {\n         let this = self.eval_context_mut();\n@@ -725,7 +530,7 @@ trait EvalContextPrivExt<'mir: 'ecx, 'tcx: 'mir, 'ecx>: crate::MiriInterpCxExt<'\n         let log_creation = |this: &MiriInterpCx<'mir, 'tcx>,\n                             loc: Option<(AllocId, Size, ProvenanceExtra)>| // alloc_id, base_offset, orig_tag\n          -> InterpResult<'tcx> {\n-            let global = this.machine.stacked_borrows.as_ref().unwrap().borrow();\n+            let global = this.machine.borrow_tracker.as_ref().unwrap().borrow();\n             let ty = place.layout.ty;\n             if global.tracked_pointer_tags.contains(&new_tag) {\n                 let mut kind_str = format!(\"{kind}\");\n@@ -743,7 +548,7 @@ trait EvalContextPrivExt<'mir: 'ecx, 'tcx: 'mir, 'ecx>: crate::MiriInterpCxExt<'\n                     _ => write!(kind_str, \" (pointee type {ty})\").unwrap(),\n                 };\n                 this.emit_diagnostic(NonHaltingDiagnostic::CreatedPointerTag(\n-                    new_tag.0,\n+                    new_tag.inner(),\n                     Some(kind_str),\n                     loc.map(|(alloc_id, base_offset, orig_tag)| (alloc_id, alloc_range(base_offset, size), orig_tag)),\n                 ));\n@@ -762,9 +567,10 @@ trait EvalContextPrivExt<'mir: 'ecx, 'tcx: 'mir, 'ecx>: crate::MiriInterpCxExt<'\n                     // uncovers a non-supported `extern static`.\n                     let extra = this.get_alloc_extra(alloc_id)?;\n                     let mut stacked_borrows = extra\n-                        .stacked_borrows\n+                        .borrow_tracker\n                         .as_ref()\n-                        .expect(\"we should have Stacked Borrows data\")\n+                        .expect(\"We should have borrow tracking data\")\n+                        .assert_sb()\n                         .borrow_mut();\n                     // Note that we create a *second* `DiagnosticCxBuilder` below for the actual retag.\n                     // FIXME: can this be done cleaner?\n@@ -780,7 +586,7 @@ trait EvalContextPrivExt<'mir: 'ecx, 'tcx: 'mir, 'ecx>: crate::MiriInterpCxExt<'\n                     if protect.is_some() {\n                         dcx.log_protector();\n                     }\n-                }\n+                },\n                 AllocKind::Function | AllocKind::VTable | AllocKind::Dead => {\n                     // No stacked borrows on these allocations.\n                 }\n@@ -839,9 +645,9 @@ trait EvalContextPrivExt<'mir: 'ecx, 'tcx: 'mir, 'ecx>: crate::MiriInterpCxExt<'\n \n         if let Some(protect) = protect {\n             // See comment in `Stack::item_invalidated` for why we store the tag twice.\n-            this.frame_mut().extra.stacked_borrows.as_mut().unwrap().protected_tags.push(new_tag);\n+            this.frame_mut().extra.borrow_tracker.as_mut().unwrap().protected_tags.push(new_tag);\n             this.machine\n-                .stacked_borrows\n+                .borrow_tracker\n                 .as_mut()\n                 .unwrap()\n                 .get_mut()\n@@ -876,9 +682,10 @@ trait EvalContextPrivExt<'mir: 'ecx, 'tcx: 'mir, 'ecx>: crate::MiriInterpCxExt<'\n                 // `visit_freeze_sensitive` needs to access the global state.\n                 let alloc_extra = this.get_alloc_extra(alloc_id)?;\n                 let mut stacked_borrows = alloc_extra\n-                    .stacked_borrows\n+                    .borrow_tracker\n                     .as_ref()\n-                    .expect(\"we should have Stacked Borrows data\")\n+                    .expect(\"We should have borrow tracking data\")\n+                    .assert_sb()\n                     .borrow_mut();\n                 this.visit_freeze_sensitive(place, size, |mut range, frozen| {\n                     // Adjust range.\n@@ -900,7 +707,7 @@ trait EvalContextPrivExt<'mir: 'ecx, 'tcx: 'mir, 'ecx>: crate::MiriInterpCxExt<'\n                         false\n                     };\n                     let item = Item::new(new_tag, perm, protected);\n-                    let global = this.machine.stacked_borrows.as_ref().unwrap().borrow();\n+                    let global = this.machine.borrow_tracker.as_ref().unwrap().borrow();\n                     let dcx = DiagnosticCxBuilder::retag(\n                         &this.machine,\n                         retag_cause,\n@@ -930,13 +737,14 @@ trait EvalContextPrivExt<'mir: 'ecx, 'tcx: 'mir, 'ecx>: crate::MiriInterpCxExt<'\n         // mutable pointer, that seems reasonable.\n         let (alloc_extra, machine) = this.get_alloc_extra_mut(alloc_id)?;\n         let stacked_borrows = alloc_extra\n-            .stacked_borrows\n+            .borrow_tracker\n             .as_mut()\n-            .expect(\"we should have Stacked Borrows data\")\n+            .expect(\"We should have borrow tracking data\")\n+            .assert_sb_mut()\n             .get_mut();\n         let item = Item::new(new_tag, perm, protect.is_some());\n         let range = alloc_range(base_offset, size);\n-        let global = machine.stacked_borrows.as_ref().unwrap().borrow();\n+        let global = machine.borrow_tracker.as_ref().unwrap().borrow();\n         let dcx = DiagnosticCxBuilder::retag(\n             machine,\n             retag_cause,\n@@ -960,8 +768,8 @@ trait EvalContextPrivExt<'mir: 'ecx, 'tcx: 'mir, 'ecx>: crate::MiriInterpCxExt<'\n     }\n \n     /// Retags an indidual pointer, returning the retagged version.\n-    /// `mutbl` can be `None` to make this a raw pointer.\n-    fn retag_reference(\n+    /// `kind` indicates what kind of reference is being created.\n+    fn sb_retag_reference(\n         &mut self,\n         val: &ImmTy<'tcx, Provenance>,\n         kind: RefKind,\n@@ -981,10 +789,10 @@ trait EvalContextPrivExt<'mir: 'ecx, 'tcx: 'mir, 'ecx>: crate::MiriInterpCxExt<'\n         };\n \n         // Compute new borrow.\n-        let new_tag = this.machine.stacked_borrows.as_mut().unwrap().get_mut().new_ptr();\n+        let new_tag = this.machine.borrow_tracker.as_mut().unwrap().get_mut().new_ptr();\n \n         // Reborrow.\n-        let alloc_id = this.reborrow(&place, size, kind, retag_cause, new_tag, protect)?;\n+        let alloc_id = this.sb_reborrow(&place, size, kind, retag_cause, new_tag, protect)?;\n \n         // Adjust pointer.\n         let new_place = place.map_provenance(|p| {\n@@ -993,7 +801,7 @@ trait EvalContextPrivExt<'mir: 'ecx, 'tcx: 'mir, 'ecx>: crate::MiriInterpCxExt<'\n                     Some(alloc_id) => {\n                         // If `reborrow` could figure out the AllocId of this ptr, hard-code it into the new one.\n                         // Even if we started out with a wildcard, this newly retagged pointer is tied to that allocation.\n-                        Provenance::Concrete { alloc_id, sb: new_tag }\n+                        Provenance::Concrete { alloc_id, tag: new_tag }\n                     }\n                     None => {\n                         // Looks like this has to stay a wildcard pointer.\n@@ -1011,9 +819,13 @@ trait EvalContextPrivExt<'mir: 'ecx, 'tcx: 'mir, 'ecx>: crate::MiriInterpCxExt<'\n \n impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n-    fn retag(&mut self, kind: RetagKind, place: &PlaceTy<'tcx, Provenance>) -> InterpResult<'tcx> {\n+    fn sb_retag(\n+        &mut self,\n+        kind: RetagKind,\n+        place: &PlaceTy<'tcx, Provenance>,\n+    ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n-        let retag_fields = this.machine.stacked_borrows.as_mut().unwrap().get_mut().retag_fields;\n+        let retag_fields = this.machine.borrow_tracker.as_mut().unwrap().get_mut().retag_fields;\n         let retag_cause = match kind {\n             RetagKind::TwoPhase { .. } => RetagCause::TwoPhase,\n             RetagKind::FnEntry => RetagCause::FnEntry,\n@@ -1039,7 +851,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 protector: Option<ProtectorKind>,\n             ) -> InterpResult<'tcx> {\n                 let val = self.ecx.read_immediate(&self.ecx.place_to_op(place)?)?;\n-                let val = self.ecx.retag_reference(&val, ref_kind, retag_cause, protector)?;\n+                let val = self.ecx.sb_retag_reference(&val, ref_kind, retag_cause, protector)?;\n                 self.ecx.write_immediate(*val, place)?;\n                 Ok(())\n             }\n@@ -1138,7 +950,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     ///\n     /// This is a HACK because there is nothing in MIR that would make the retag\n     /// explicit. Also see <https://github.com/rust-lang/rust/issues/71117>.\n-    fn retag_return_place(&mut self) -> InterpResult<'tcx> {\n+    fn sb_retag_return_place(&mut self) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n         let return_place = &this.frame().return_place;\n         if return_place.layout.is_zst() {\n@@ -1153,7 +965,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         let ptr_layout = this.layout_of(this.tcx.mk_mut_ptr(return_place.layout.ty))?;\n         let val = ImmTy::from_immediate(return_place.to_ref(this), ptr_layout);\n         // Reborrow it. With protection! That is part of the point.\n-        let val = this.retag_reference(\n+        let val = this.sb_retag_reference(\n             &val,\n             RefKind::Unique { two_phase: false },\n             RetagCause::FnReturn,\n@@ -1167,7 +979,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     }\n \n     /// Mark the given tag as exposed. It was found on a pointer with the given AllocId.\n-    fn expose_tag(&mut self, alloc_id: AllocId, tag: SbTag) -> InterpResult<'tcx> {\n+    fn sb_expose_tag(&mut self, alloc_id: AllocId, tag: BorTag) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n \n         // Function pointers and dead objects don't have an alloc_extra so we ignore them.\n@@ -1181,7 +993,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 // uncovers a non-supported `extern static`.\n                 let alloc_extra = this.get_alloc_extra(alloc_id)?;\n                 trace!(\"Stacked Borrows tag {tag:?} exposed in {alloc_id:?}\");\n-                alloc_extra.stacked_borrows.as_ref().unwrap().borrow_mut().exposed_tags.insert(tag);\n+                alloc_extra\n+                    .borrow_tracker\n+                    .as_ref()\n+                    .expect(\"We should have borrow tracking data\")\n+                    .assert_sb()\n+                    .borrow_mut()\n+                    .expose_tag(tag);\n             }\n             AllocKind::Function | AllocKind::VTable | AllocKind::Dead => {\n                 // No stacked borrows on these allocations.\n@@ -1193,7 +1011,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn print_stacks(&mut self, alloc_id: AllocId) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n         let alloc_extra = this.get_alloc_extra(alloc_id)?;\n-        let stacks = alloc_extra.stacked_borrows.as_ref().unwrap().borrow();\n+        let stacks = alloc_extra\n+            .borrow_tracker\n+            .as_ref()\n+            .expect(\"We should have borrow tracking data\")\n+            .assert_sb()\n+            .borrow();\n         for (range, stack) in stacks.stacks.iter_all() {\n             print!(\"{range:?}: [\");\n             if let Some(bottom) = stack.unknown_bottom() {", "previous_filename": "src/tools/miri/src/stacked_borrows/mod.rs"}, {"sha": "1d5cfec3500aeeef7d05339592a8f37c0745e4df", "filename": "src/tools/miri/src/borrow_tracker/stacked_borrows/stack.rs", "status": "renamed", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2528f4e6684d68b086179735454d95a6950ef46b/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2528f4e6684d68b086179735454d95a6950ef46b/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fstack.rs?ref=2528f4e6684d68b086179735454d95a6950ef46b", "patch": "@@ -3,11 +3,14 @@ use std::ops::Range;\n \n use rustc_data_structures::fx::FxHashSet;\n \n-use crate::stacked_borrows::{AccessKind, Item, Permission, SbTag};\n+use crate::borrow_tracker::{\n+    stacked_borrows::{Item, Permission},\n+    AccessKind, BorTag,\n+};\n use crate::ProvenanceExtra;\n \n /// Exactly what cache size we should use is a difficult tradeoff. There will always be some\n-/// workload which has a `SbTag` working set which exceeds the size of the cache, and ends up\n+/// workload which has a `BorTag` working set which exceeds the size of the cache, and ends up\n /// falling back to linear searches of the borrow stack very often.\n /// The cost of making this value too large is that the loop in `Stack::insert` which ensures the\n /// entries in the cache stay correct after an insert becomes expensive.\n@@ -28,7 +31,7 @@ pub struct Stack {\n     /// than `id`.\n     /// When the bottom is unknown, `borrows` always has a `SharedReadOnly` or `Unique` at the bottom;\n     /// we never have the unknown-to-known boundary in an SRW group.\n-    unknown_bottom: Option<SbTag>,\n+    unknown_bottom: Option<BorTag>,\n \n     /// A small LRU cache of searches of the borrow stack.\n     #[cfg(feature = \"stack-cache\")]\n@@ -40,7 +43,7 @@ pub struct Stack {\n }\n \n impl Stack {\n-    pub fn retain(&mut self, tags: &FxHashSet<SbTag>) {\n+    pub fn retain(&mut self, tags: &FxHashSet<BorTag>) {\n         let mut first_removed = None;\n \n         // We never consider removing the bottom-most tag. For stacks without an unknown\n@@ -185,7 +188,7 @@ impl<'tcx> Stack {\n         &mut self,\n         access: AccessKind,\n         tag: ProvenanceExtra,\n-        exposed_tags: &FxHashSet<SbTag>,\n+        exposed_tags: &FxHashSet<BorTag>,\n     ) -> Result<Option<usize>, ()> {\n         #[cfg(all(feature = \"stack-cache\", debug_assertions))]\n         self.verify_cache_consistency();\n@@ -219,12 +222,12 @@ impl<'tcx> Stack {\n \n         // Couldn't find it in the stack; but if there is an unknown bottom it might be there.\n         let found = self.unknown_bottom.is_some_and(|unknown_limit| {\n-            tag.0 < unknown_limit.0 // unknown_limit is an upper bound for what can be in the unknown bottom.\n+            tag < unknown_limit // unknown_limit is an upper bound for what can be in the unknown bottom.\n         });\n         if found { Ok(None) } else { Err(()) }\n     }\n \n-    fn find_granting_tagged(&mut self, access: AccessKind, tag: SbTag) -> Option<usize> {\n+    fn find_granting_tagged(&mut self, access: AccessKind, tag: BorTag) -> Option<usize> {\n         #[cfg(feature = \"stack-cache\")]\n         if let Some(idx) = self.find_granting_cache(access, tag) {\n             return Some(idx);\n@@ -243,7 +246,7 @@ impl<'tcx> Stack {\n     }\n \n     #[cfg(feature = \"stack-cache\")]\n-    fn find_granting_cache(&mut self, access: AccessKind, tag: SbTag) -> Option<usize> {\n+    fn find_granting_cache(&mut self, access: AccessKind, tag: BorTag) -> Option<usize> {\n         // This looks like a common-sense optimization; we're going to do a linear search of the\n         // cache or the borrow stack to scan the shorter of the two. This optimization is miniscule\n         // and this check actually ensures we do not access an invalid cache.\n@@ -349,11 +352,11 @@ impl<'tcx> Stack {\n         self.borrows.len()\n     }\n \n-    pub fn unknown_bottom(&self) -> Option<SbTag> {\n+    pub fn unknown_bottom(&self) -> Option<BorTag> {\n         self.unknown_bottom\n     }\n \n-    pub fn set_unknown_bottom(&mut self, tag: SbTag) {\n+    pub fn set_unknown_bottom(&mut self, tag: BorTag) {\n         // We clear the borrow stack but the lookup cache doesn't support clearing per se. Instead,\n         // there is a check explained in `find_granting_cache` which protects against accessing the\n         // cache when it has been cleared and not yet refilled.", "previous_filename": "src/tools/miri/src/stacked_borrows/stack.rs"}]}