{"sha": "542e2bb3910f8860d49b4b40bcd78d9c74e733ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0MmUyYmIzOTEwZjg4NjBkNDliNGI0MGJjZDc4ZDljNzRlNzMzZmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-15T18:42:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-15T18:42:54Z"}, "message": "Auto merge of #23353 - alexcrichton:stabilize-os, r=aturon\n\nThis commit starts to organize the `std::os::$platform` modules and in the\r\nprocess stabilizes some of the functionality contained within. The organization\r\nof these modules will reflect the organization of the standard library itself\r\nwith extension traits for primitives in the same corresponding module.\r\n\r\nThe OS-specific modules will grow more functionality over time including\r\nconcrete types that are not extending functionality of other structures, and\r\nthese will either go into the closest module in `std::os::$platform` or they\r\nwill grow a new module in the hierarchy.\r\n\r\nThe following items are now stable:\r\n\r\n* `os::{unix, windows}`\r\n* `unix::ffi`\r\n* `unix::ffi::OsStrExt`\r\n* `unix::ffi::OsStrExt::{from_bytes, as_bytes, to_cstring}`\r\n* `unix::ffi::OsString`\r\n* `unix::ffi::OsStringExt::{from_vec, into_vec}`\r\n* `unix::process`\r\n* `unix::process::CommandExt`\r\n* `unix::process::CommandExt::{uid, gid}`\r\n* `unix::process::ExitStatusExt`\r\n* `unix::process::ExitStatusExt::signal`\r\n* `unix::prelude`\r\n* `windows::ffi`\r\n* `windows::ffi::OsStringExt`\r\n* `windows::ffi::OsStringExt::from_wide`\r\n* `windows::ffi::OsStrExt`\r\n* `windows::ffi::OsStrExt::encode_wide`\r\n* `windows::prelude`\r\n\r\nThe following items remain unstable:\r\n\r\n* `unix::io`\r\n* `unix::io::{Fd, AsRawFd}`\r\n* `unix::fs::{PermissionsExt, OpenOptionsExt}`\r\n* `windows::io`\r\n* `windows::io::{Handle, AsRawHandle}`\r\n* `windows::io::{Socket, AsRawSocket}`\r\n* `windows::fs`\r\n* `windows::fs::OpenOptionsExt`\r\n\r\nDue to the reorgnization of the platform extension modules, this commit is a\r\nbreaking change. Most imports can be fixed by adding the relevant libstd module\r\nin the `use` path (such as `ffi` or `fs`).\r\n\r\n[breaking-change]", "tree": {"sha": "42bdd3ec581236d833e388cc217d917d1c6f7657", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42bdd3ec581236d833e388cc217d917d1c6f7657"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/542e2bb3910f8860d49b4b40bcd78d9c74e733ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/542e2bb3910f8860d49b4b40bcd78d9c74e733ff", "html_url": "https://github.com/rust-lang/rust/commit/542e2bb3910f8860d49b4b40bcd78d9c74e733ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/542e2bb3910f8860d49b4b40bcd78d9c74e733ff/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4f5e78b467fff62bcb5287f34940fd0037f2216", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4f5e78b467fff62bcb5287f34940fd0037f2216", "html_url": "https://github.com/rust-lang/rust/commit/b4f5e78b467fff62bcb5287f34940fd0037f2216"}, {"sha": "1f5f76adc36082ec514a6cfa4ad2d7e6655a5253", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f5f76adc36082ec514a6cfa4ad2d7e6655a5253", "html_url": "https://github.com/rust-lang/rust/commit/1f5f76adc36082ec514a6cfa4ad2d7e6655a5253"}], "stats": {"total": 720, "additions": 397, "deletions": 323}, "files": [{"sha": "9eac399ae1a8ab66bb0498a4789abaf7f3c09133", "filename": "src/libstd/os.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/542e2bb3910f8860d49b4b40bcd78d9c74e733ff/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542e2bb3910f8860d49b4b40bcd78d9c74e733ff/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=542e2bb3910f8860d49b4b40bcd78d9c74e733ff", "patch": "@@ -210,7 +210,7 @@ pub fn getenv_as_bytes(n: &str) -> Option<Vec<u8>> {\n \n #[cfg(unix)]\n fn byteify(s: OsString) -> Vec<u8> {\n-    use os::unix::*;\n+    use os::unix::prelude::*;\n     s.into_vec()\n }\n #[cfg(windows)]\n@@ -238,7 +238,7 @@ fn byteify(s: OsString) -> Vec<u8> {\n pub fn setenv<T: BytesContainer>(n: &str, v: T) {\n     #[cfg(unix)]\n     fn _setenv(n: &str, v: &[u8]) {\n-        use os::unix::*;\n+        use os::unix::prelude::*;\n         let v: OsString = OsStringExt::from_vec(v.to_vec());\n         env::set_var(n, &v)\n     }\n@@ -1705,13 +1705,13 @@ mod tests {\n \n         #[cfg(not(windows))]\n         fn get_fd(file: &File) -> libc::c_int {\n-            use os::unix::AsRawFd;\n+            use os::unix::prelude::*;\n             file.as_raw_fd()\n         }\n \n         #[cfg(windows)]\n         fn get_fd(file: &File) -> libc::HANDLE {\n-            use os::windows::AsRawHandle;\n+            use os::windows::prelude::*;\n             file.as_raw_handle()\n         }\n "}, {"sha": "08aa92d5f20dc0c4ae08c65c79ed65765cd6714a", "filename": "src/libstd/process.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/542e2bb3910f8860d49b4b40bcd78d9c74e733ff/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542e2bb3910f8860d49b4b40bcd78d9c74e733ff/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=542e2bb3910f8860d49b4b40bcd78d9c74e733ff", "patch": "@@ -573,7 +573,7 @@ mod tests {\n     #[cfg(all(unix, not(target_os=\"android\")))]\n     #[test]\n     fn signal_reported_right() {\n-        use os::unix::ExitStatusExt;\n+        use os::unix::process::ExitStatusExt;\n \n         let p = Command::new(\"/bin/sh\").arg(\"-c\").arg(\"kill -9 $$\").spawn();\n         assert!(p.is_ok());\n@@ -633,7 +633,7 @@ mod tests {\n     #[cfg(all(unix, not(target_os=\"android\")))]\n     #[test]\n     fn uid_works() {\n-        use os::unix::*;\n+        use os::unix::prelude::*;\n         use libc;\n         let mut p = Command::new(\"/bin/sh\")\n                             .arg(\"-c\").arg(\"true\")\n@@ -646,7 +646,7 @@ mod tests {\n     #[cfg(all(unix, not(target_os=\"android\")))]\n     #[test]\n     fn uid_to_root_fails() {\n-        use os::unix::*;\n+        use os::unix::prelude::*;\n         use libc;\n \n         // if we're already root, this isn't a valid test. Most of the bots run"}, {"sha": "0805949d5602193272bfdce4d0a5933cf4b357ae", "filename": "src/libstd/sys/unix/ext.rs", "status": "modified", "additions": 210, "deletions": 165, "changes": 375, "blob_url": "https://github.com/rust-lang/rust/blob/542e2bb3910f8860d49b4b40bcd78d9c74e733ff/src%2Flibstd%2Fsys%2Funix%2Fext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542e2bb3910f8860d49b4b40bcd78d9c74e733ff/src%2Flibstd%2Fsys%2Funix%2Fext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext.rs?ref=542e2bb3910f8860d49b4b40bcd78d9c74e733ff", "patch": "@@ -29,225 +29,265 @@\n //! }\n //! ```\n \n-#![unstable(feature = \"std_misc\")]\n-\n-use prelude::v1::*;\n-\n-use ffi::{CString, NulError, OsStr, OsString};\n-use fs::{self, Permissions, OpenOptions};\n-use net;\n-use mem;\n-use process;\n-use sys;\n-use sys::os_str::Buf;\n-use sys_common::{AsInner, AsInnerMut, IntoInner, FromInner};\n-use libc::{self, gid_t, uid_t};\n-\n-#[allow(deprecated)] use old_io;\n-\n-/// Raw file descriptors.\n-pub type Fd = libc::c_int;\n-\n-/// Extract raw file descriptor\n-pub trait AsRawFd {\n-    /// Extract the raw file descriptor, without taking any ownership.\n-    fn as_raw_fd(&self) -> Fd;\n-}\n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n+\n+/// Unix-specific extensions to general I/O primitives\n+#[unstable(feature = \"io_ext\",\n+           reason = \"may want a slightly different organization or a more \\\n+                     general file descriptor primitive\")]\n+pub mod io {\n+    #[allow(deprecated)] use old_io;\n+    use fs;\n+    use libc;\n+    use net;\n+    use sys_common::AsInner;\n+\n+    /// Raw file descriptors.\n+    pub type Fd = libc::c_int;\n+\n+    /// Extract raw file descriptor\n+    pub trait AsRawFd {\n+        /// Extract the raw file descriptor, without taking any ownership.\n+        fn as_raw_fd(&self) -> Fd;\n+    }\n \n-#[allow(deprecated)]\n-impl AsRawFd for old_io::fs::File {\n-    fn as_raw_fd(&self) -> Fd {\n-        self.as_inner().fd()\n+    #[allow(deprecated)]\n+    impl AsRawFd for old_io::fs::File {\n+        fn as_raw_fd(&self) -> Fd {\n+            self.as_inner().fd()\n+        }\n     }\n-}\n \n-impl AsRawFd for fs::File {\n-    fn as_raw_fd(&self) -> Fd {\n-        self.as_inner().fd().raw()\n+    impl AsRawFd for fs::File {\n+        fn as_raw_fd(&self) -> Fd {\n+            self.as_inner().fd().raw()\n+        }\n     }\n-}\n \n-#[allow(deprecated)]\n-impl AsRawFd for old_io::pipe::PipeStream {\n-    fn as_raw_fd(&self) -> Fd {\n-        self.as_inner().fd()\n+    #[allow(deprecated)]\n+    impl AsRawFd for old_io::pipe::PipeStream {\n+        fn as_raw_fd(&self) -> Fd {\n+            self.as_inner().fd()\n+        }\n     }\n-}\n \n-#[allow(deprecated)]\n-impl AsRawFd for old_io::net::pipe::UnixStream {\n-    fn as_raw_fd(&self) -> Fd {\n-        self.as_inner().fd()\n+    #[allow(deprecated)]\n+    impl AsRawFd for old_io::net::pipe::UnixStream {\n+        fn as_raw_fd(&self) -> Fd {\n+            self.as_inner().fd()\n+        }\n     }\n-}\n \n-#[allow(deprecated)]\n-impl AsRawFd for old_io::net::pipe::UnixListener {\n-    fn as_raw_fd(&self) -> Fd {\n-        self.as_inner().fd()\n+    #[allow(deprecated)]\n+    impl AsRawFd for old_io::net::pipe::UnixListener {\n+        fn as_raw_fd(&self) -> Fd {\n+            self.as_inner().fd()\n+        }\n     }\n-}\n \n-#[allow(deprecated)]\n-impl AsRawFd for old_io::net::pipe::UnixAcceptor {\n-    fn as_raw_fd(&self) -> Fd {\n-        self.as_inner().fd()\n+    #[allow(deprecated)]\n+    impl AsRawFd for old_io::net::pipe::UnixAcceptor {\n+        fn as_raw_fd(&self) -> Fd {\n+            self.as_inner().fd()\n+        }\n     }\n-}\n \n-#[allow(deprecated)]\n-impl AsRawFd for old_io::net::tcp::TcpStream {\n-    fn as_raw_fd(&self) -> Fd {\n-        self.as_inner().fd()\n+    #[allow(deprecated)]\n+    impl AsRawFd for old_io::net::tcp::TcpStream {\n+        fn as_raw_fd(&self) -> Fd {\n+            self.as_inner().fd()\n+        }\n     }\n-}\n \n-#[allow(deprecated)]\n-impl AsRawFd for old_io::net::tcp::TcpListener {\n-    fn as_raw_fd(&self) -> Fd {\n-        self.as_inner().fd()\n+    #[allow(deprecated)]\n+    impl AsRawFd for old_io::net::tcp::TcpListener {\n+        fn as_raw_fd(&self) -> Fd {\n+            self.as_inner().fd()\n+        }\n     }\n-}\n \n-#[allow(deprecated)]\n-impl AsRawFd for old_io::net::tcp::TcpAcceptor {\n-    fn as_raw_fd(&self) -> Fd {\n-        self.as_inner().fd()\n+    #[allow(deprecated)]\n+    impl AsRawFd for old_io::net::tcp::TcpAcceptor {\n+        fn as_raw_fd(&self) -> Fd {\n+            self.as_inner().fd()\n+        }\n     }\n-}\n \n-#[allow(deprecated)]\n-impl AsRawFd for old_io::net::udp::UdpSocket {\n-    fn as_raw_fd(&self) -> Fd {\n-        self.as_inner().fd()\n+    #[allow(deprecated)]\n+    impl AsRawFd for old_io::net::udp::UdpSocket {\n+        fn as_raw_fd(&self) -> Fd {\n+            self.as_inner().fd()\n+        }\n     }\n-}\n \n-impl AsRawFd for net::TcpStream {\n-    fn as_raw_fd(&self) -> Fd { *self.as_inner().socket().as_inner() }\n-}\n-impl AsRawFd for net::TcpListener {\n-    fn as_raw_fd(&self) -> Fd { *self.as_inner().socket().as_inner() }\n-}\n-impl AsRawFd for net::UdpSocket {\n-    fn as_raw_fd(&self) -> Fd { *self.as_inner().socket().as_inner() }\n+    impl AsRawFd for net::TcpStream {\n+        fn as_raw_fd(&self) -> Fd { *self.as_inner().socket().as_inner() }\n+    }\n+    impl AsRawFd for net::TcpListener {\n+        fn as_raw_fd(&self) -> Fd { *self.as_inner().socket().as_inner() }\n+    }\n+    impl AsRawFd for net::UdpSocket {\n+        fn as_raw_fd(&self) -> Fd { *self.as_inner().socket().as_inner() }\n+    }\n }\n \n ////////////////////////////////////////////////////////////////////////////////\n // OsString and OsStr\n ////////////////////////////////////////////////////////////////////////////////\n \n-/// Unix-specific extensions to `OsString`.\n-pub trait OsStringExt {\n-    /// Create an `OsString` from a byte vector.\n-    fn from_vec(vec: Vec<u8>) -> Self;\n-\n-    /// Yield the underlying byte vector of this `OsString`.\n-    fn into_vec(self) -> Vec<u8>;\n-}\n-\n-impl OsStringExt for OsString {\n-    fn from_vec(vec: Vec<u8>) -> OsString {\n-        FromInner::from_inner(Buf { inner: vec })\n+/// Unix-specific extension to the primitives in the `std::ffi` module\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub mod ffi {\n+    use ffi::{CString, NulError, OsStr, OsString};\n+    use mem;\n+    use prelude::v1::*;\n+    use sys::os_str::Buf;\n+    use sys_common::{FromInner, IntoInner, AsInner};\n+\n+    /// Unix-specific extensions to `OsString`.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub trait OsStringExt {\n+        /// Create an `OsString` from a byte vector.\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        fn from_vec(vec: Vec<u8>) -> Self;\n+\n+        /// Yield the underlying byte vector of this `OsString`.\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        fn into_vec(self) -> Vec<u8>;\n     }\n \n-    fn into_vec(self) -> Vec<u8> {\n-        self.into_inner().inner\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    impl OsStringExt for OsString {\n+        fn from_vec(vec: Vec<u8>) -> OsString {\n+            FromInner::from_inner(Buf { inner: vec })\n+        }\n+        fn into_vec(self) -> Vec<u8> {\n+            self.into_inner().inner\n+        }\n     }\n-}\n-\n-/// Unix-specific extensions to `OsStr`.\n-pub trait OsStrExt {\n-    fn from_bytes(slice: &[u8]) -> &OsStr;\n \n-    /// Get the underlying byte view of the `OsStr` slice.\n-    fn as_bytes(&self) -> &[u8];\n+    /// Unix-specific extensions to `OsStr`.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub trait OsStrExt {\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        fn from_bytes(slice: &[u8]) -> &Self;\n \n-    /// Convert the `OsStr` slice into a `CString`.\n-    fn to_cstring(&self) -> Result<CString, NulError>;\n-}\n+        /// Get the underlying byte view of the `OsStr` slice.\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        fn as_bytes(&self) -> &[u8];\n \n-impl OsStrExt for OsStr {\n-    fn from_bytes(slice: &[u8]) -> &OsStr {\n-        unsafe { mem::transmute(slice) }\n-    }\n-    fn as_bytes(&self) -> &[u8] {\n-        &self.as_inner().inner\n+        /// Convert the `OsStr` slice into a `CString`.\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        fn to_cstring(&self) -> Result<CString, NulError>;\n     }\n \n-    fn to_cstring(&self) -> Result<CString, NulError> {\n-        CString::new(self.as_bytes())\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    impl OsStrExt for OsStr {\n+        fn from_bytes(slice: &[u8]) -> &OsStr {\n+            unsafe { mem::transmute(slice) }\n+        }\n+        fn as_bytes(&self) -> &[u8] {\n+            &self.as_inner().inner\n+        }\n+        fn to_cstring(&self) -> Result<CString, NulError> {\n+            CString::new(self.as_bytes())\n+        }\n     }\n }\n \n-// Unix-specific extensions to `Permissions`\n-pub trait PermissionsExt {\n-    fn mode(&self) -> i32;\n-    fn set_mode(&mut self, mode: i32);\n-}\n+/// Unix-specific extensions to primitives in the `std::fs` module.\n+#[unstable(feature = \"fs_ext\",\n+           reason = \"may want a more useful mode abstraction\")]\n+pub mod fs {\n+    use sys_common::{FromInner, AsInner, AsInnerMut};\n+    use fs::{Permissions, OpenOptions};\n+\n+    /// Unix-specific extensions to `Permissions`\n+    pub trait PermissionsExt {\n+        fn mode(&self) -> i32;\n+        fn set_mode(&mut self, mode: i32);\n+    }\n \n-impl PermissionsExt for Permissions {\n-    fn mode(&self) -> i32 { self.as_inner().mode() }\n+    impl PermissionsExt for Permissions {\n+        fn mode(&self) -> i32 { self.as_inner().mode() }\n \n-    fn set_mode(&mut self, mode: i32) {\n-        *self = FromInner::from_inner(FromInner::from_inner(mode));\n+        fn set_mode(&mut self, mode: i32) {\n+            *self = FromInner::from_inner(FromInner::from_inner(mode));\n+        }\n     }\n-}\n \n-// Unix-specific extensions to `OpenOptions`\n-pub trait OpenOptionsExt {\n-    /// Set the mode bits that a new file will be created with.\n-    ///\n-    /// If a new file is created as part of a `File::open_opts` call then this\n-    /// specified `mode` will be used as the permission bits for the new file.\n-    fn mode(&mut self, mode: i32) -> &mut Self;\n-}\n+    /// Unix-specific extensions to `OpenOptions`\n+    pub trait OpenOptionsExt {\n+        /// Set the mode bits that a new file will be created with.\n+        ///\n+        /// If a new file is created as part of a `File::open_opts` call then this\n+        /// specified `mode` will be used as the permission bits for the new file.\n+        fn mode(&mut self, mode: i32) -> &mut Self;\n+    }\n \n-impl OpenOptionsExt for OpenOptions {\n-    fn mode(&mut self, mode: i32) -> &mut OpenOptions {\n-        self.as_inner_mut().mode(mode); self\n+    impl OpenOptionsExt for OpenOptions {\n+        fn mode(&mut self, mode: i32) -> &mut OpenOptions {\n+            self.as_inner_mut().mode(mode); self\n+        }\n     }\n }\n \n ////////////////////////////////////////////////////////////////////////////////\n // Process and Command\n ////////////////////////////////////////////////////////////////////////////////\n \n-/// Unix-specific extensions to the `std::process::Command` builder\n-pub trait CommandExt {\n-    /// Sets the child process's user id. This translates to a\n-    /// `setuid` call in the child process. Failure in the `setuid`\n-    /// call will cause the spawn to fail.\n-    fn uid(&mut self, id: uid_t) -> &mut process::Command;\n+/// Unix-specific extensions to primitives in the `std::process` module.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub mod process {\n+    use prelude::v1::*;\n+    use libc::{uid_t, gid_t};\n+    use process;\n+    use sys;\n+    use sys_common::{AsInnerMut, AsInner};\n+\n+    /// Unix-specific extensions to the `std::process::Command` builder\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub trait CommandExt {\n+        /// Sets the child process's user id. This translates to a\n+        /// `setuid` call in the child process. Failure in the `setuid`\n+        /// call will cause the spawn to fail.\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        fn uid(&mut self, id: uid_t) -> &mut process::Command;\n+\n+        /// Similar to `uid`, but sets the group id of the child process. This has\n+        /// the same semantics as the `uid` field.\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        fn gid(&mut self, id: gid_t) -> &mut process::Command;\n+    }\n \n-    /// Similar to `uid`, but sets the group id of the child process. This has\n-    /// the same semantics as the `uid` field.\n-    fn gid(&mut self, id: gid_t) -> &mut process::Command;\n-}\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    impl CommandExt for process::Command {\n+        fn uid(&mut self, id: uid_t) -> &mut process::Command {\n+            self.as_inner_mut().uid = Some(id);\n+            self\n+        }\n \n-impl CommandExt for process::Command {\n-    fn uid(&mut self, id: uid_t) -> &mut process::Command {\n-        self.as_inner_mut().uid = Some(id);\n-        self\n+        fn gid(&mut self, id: gid_t) -> &mut process::Command {\n+            self.as_inner_mut().gid = Some(id);\n+            self\n+        }\n     }\n \n-    fn gid(&mut self, id: gid_t) -> &mut process::Command {\n-        self.as_inner_mut().gid = Some(id);\n-        self\n+    /// Unix-specific extensions to `std::process::ExitStatus`\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub trait ExitStatusExt {\n+        /// If the process was terminated by a signal, returns that signal.\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        fn signal(&self) -> Option<i32>;\n     }\n-}\n-\n-/// Unix-specific extensions to `std::process::ExitStatus`\n-pub trait ExitStatusExt {\n-    /// If the process was terminated by a signal, returns that signal.\n-    fn signal(&self) -> Option<i32>;\n-}\n \n-impl ExitStatusExt for process::ExitStatus {\n-    fn signal(&self) -> Option<i32> {\n-        match *self.as_inner() {\n-            sys::process2::ExitStatus::Signal(s) => Some(s),\n-            _ => None\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    impl ExitStatusExt for process::ExitStatus {\n+        fn signal(&self) -> Option<i32> {\n+            match *self.as_inner() {\n+                sys::process2::ExitStatus::Signal(s) => Some(s),\n+                _ => None\n+            }\n         }\n     }\n }\n@@ -259,9 +299,14 @@ impl ExitStatusExt for process::ExitStatus {\n /// A prelude for conveniently writing platform-specific code.\n ///\n /// Includes all extension traits, and some important type definitions.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub mod prelude {\n     #[doc(no_inline)]\n-    pub use super::{Fd, AsRawFd, OsStrExt, OsStringExt, PermissionsExt};\n+    pub use super::io::{Fd, AsRawFd};\n+    #[doc(no_inline)] #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub use super::ffi::{OsStrExt, OsStringExt};\n     #[doc(no_inline)]\n-    pub use super::{CommandExt, ExitStatusExt};\n+    pub use super::fs::{PermissionsExt, OpenOptionsExt};\n+    #[doc(no_inline)] #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub use super::process::{CommandExt, ExitStatusExt};\n }"}, {"sha": "904341bfbc3ea1ca3265735de1354b2bc9a0a189", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/542e2bb3910f8860d49b4b40bcd78d9c74e733ff/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542e2bb3910f8860d49b4b40bcd78d9c74e733ff/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=542e2bb3910f8860d49b4b40bcd78d9c74e733ff", "patch": "@@ -13,7 +13,7 @@\n #![allow(unused_imports)] // lots of cfg code here\n \n use prelude::v1::*;\n-use os::unix::*;\n+use os::unix::prelude::*;\n \n use error::Error as StdError;\n use ffi::{CString, CStr, OsString, OsStr, AsOsStr};"}, {"sha": "20c409154b82428e1d175f5b6691f9c6c1c57fe5", "filename": "src/libstd/sys/unix/process2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/542e2bb3910f8860d49b4b40bcd78d9c74e733ff/src%2Flibstd%2Fsys%2Funix%2Fprocess2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542e2bb3910f8860d49b4b40bcd78d9c74e733ff/src%2Flibstd%2Fsys%2Funix%2Fprocess2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess2.rs?ref=542e2bb3910f8860d49b4b40bcd78d9c74e733ff", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use prelude::v1::*;\n+use os::unix::prelude::*;\n \n use collections::HashMap;\n use env;\n@@ -17,7 +18,6 @@ use fmt;\n use io::{self, Error, ErrorKind};\n use libc::{self, pid_t, c_void, c_int, gid_t, uid_t};\n use mem;\n-use os::unix::OsStrExt;\n use ptr;\n use sys::pipe2::AnonPipe;\n use sys::{self, retry, c, cvt};"}, {"sha": "7955397892b7726fc1d1891b26231a03e140c447", "filename": "src/libstd/sys/windows/ext.rs", "status": "modified", "additions": 174, "deletions": 146, "changes": 320, "blob_url": "https://github.com/rust-lang/rust/blob/542e2bb3910f8860d49b4b40bcd78d9c74e733ff/src%2Flibstd%2Fsys%2Fwindows%2Fext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542e2bb3910f8860d49b4b40bcd78d9c74e733ff/src%2Flibstd%2Fsys%2Fwindows%2Fext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext.rs?ref=542e2bb3910f8860d49b4b40bcd78d9c74e733ff", "patch": "@@ -14,197 +14,225 @@\n //! descriptors, and sockets, but its functionality will grow over\n //! time.\n \n-#![unstable(feature = \"std_misc\")]\n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-pub use sys_common::wtf8::{Wtf8Buf, EncodeWide};\n+#[unstable(feature = \"io_ext\",\n+           reason = \"organization may change slightly and the primitives \\\n+                     provided may be tweaked\")]\n+pub mod io {\n+    use fs;\n+    use libc;\n+    use net;\n+    use sys_common::AsInner;\n \n-use ffi::{OsStr, OsString};\n-use fs::{self, OpenOptions};\n-use libc;\n-use net;\n-use sys::os_str::Buf;\n-use sys_common::{AsInner, FromInner, AsInnerMut};\n+    #[allow(deprecated)]\n+    use old_io;\n \n-#[allow(deprecated)]\n-use old_io;\n+    /// Raw HANDLEs.\n+    pub type Handle = libc::HANDLE;\n \n-/// Raw HANDLEs.\n-pub type Handle = libc::HANDLE;\n+    /// Raw SOCKETs.\n+    pub type Socket = libc::SOCKET;\n \n-/// Raw SOCKETs.\n-pub type Socket = libc::SOCKET;\n+    /// Extract raw handles.\n+    pub trait AsRawHandle {\n+        /// Extract the raw handle, without taking any ownership.\n+        fn as_raw_handle(&self) -> Handle;\n+    }\n \n-/// Extract raw handles.\n-pub trait AsRawHandle {\n-    /// Extract the raw handle, without taking any ownership.\n-    fn as_raw_handle(&self) -> Handle;\n-}\n+    #[allow(deprecated)]\n+    impl AsRawHandle for old_io::fs::File {\n+        fn as_raw_handle(&self) -> Handle {\n+            self.as_inner().handle()\n+        }\n+    }\n \n-#[allow(deprecated)]\n-impl AsRawHandle for old_io::fs::File {\n-    fn as_raw_handle(&self) -> Handle {\n-        self.as_inner().handle()\n+    impl AsRawHandle for fs::File {\n+        fn as_raw_handle(&self) -> Handle {\n+            self.as_inner().handle().raw()\n+        }\n     }\n-}\n \n-impl AsRawHandle for fs::File {\n-    fn as_raw_handle(&self) -> Handle {\n-        self.as_inner().handle().raw()\n+    #[allow(deprecated)]\n+    impl AsRawHandle for old_io::pipe::PipeStream {\n+        fn as_raw_handle(&self) -> Handle {\n+            self.as_inner().handle()\n+        }\n     }\n-}\n \n-#[allow(deprecated)]\n-impl AsRawHandle for old_io::pipe::PipeStream {\n-    fn as_raw_handle(&self) -> Handle {\n-        self.as_inner().handle()\n+    #[allow(deprecated)]\n+    impl AsRawHandle for old_io::net::pipe::UnixStream {\n+        fn as_raw_handle(&self) -> Handle {\n+            self.as_inner().handle()\n+        }\n     }\n-}\n \n-#[allow(deprecated)]\n-impl AsRawHandle for old_io::net::pipe::UnixStream {\n-    fn as_raw_handle(&self) -> Handle {\n-        self.as_inner().handle()\n+    #[allow(deprecated)]\n+    impl AsRawHandle for old_io::net::pipe::UnixListener {\n+        fn as_raw_handle(&self) -> Handle {\n+            self.as_inner().handle()\n+        }\n     }\n-}\n \n-#[allow(deprecated)]\n-impl AsRawHandle for old_io::net::pipe::UnixListener {\n-    fn as_raw_handle(&self) -> Handle {\n-        self.as_inner().handle()\n+    #[allow(deprecated)]\n+    impl AsRawHandle for old_io::net::pipe::UnixAcceptor {\n+        fn as_raw_handle(&self) -> Handle {\n+            self.as_inner().handle()\n+        }\n     }\n-}\n \n-#[allow(deprecated)]\n-impl AsRawHandle for old_io::net::pipe::UnixAcceptor {\n-    fn as_raw_handle(&self) -> Handle {\n-        self.as_inner().handle()\n+    /// Extract raw sockets.\n+    pub trait AsRawSocket {\n+        fn as_raw_socket(&self) -> Socket;\n     }\n-}\n \n-/// Extract raw sockets.\n-pub trait AsRawSocket {\n-    fn as_raw_socket(&self) -> Socket;\n-}\n+    #[allow(deprecated)]\n+    impl AsRawSocket for old_io::net::tcp::TcpStream {\n+        fn as_raw_socket(&self) -> Socket {\n+            self.as_inner().fd()\n+        }\n+    }\n \n-#[allow(deprecated)]\n-impl AsRawSocket for old_io::net::tcp::TcpStream {\n-    fn as_raw_socket(&self) -> Socket {\n-        self.as_inner().fd()\n+    #[allow(deprecated)]\n+    impl AsRawSocket for old_io::net::tcp::TcpListener {\n+        fn as_raw_socket(&self) -> Socket {\n+            self.as_inner().socket()\n+        }\n     }\n-}\n \n-#[allow(deprecated)]\n-impl AsRawSocket for old_io::net::tcp::TcpListener {\n-    fn as_raw_socket(&self) -> Socket {\n-        self.as_inner().socket()\n+    #[allow(deprecated)]\n+    impl AsRawSocket for old_io::net::tcp::TcpAcceptor {\n+        fn as_raw_socket(&self) -> Socket {\n+            self.as_inner().socket()\n+        }\n     }\n-}\n \n-#[allow(deprecated)]\n-impl AsRawSocket for old_io::net::tcp::TcpAcceptor {\n-    fn as_raw_socket(&self) -> Socket {\n-        self.as_inner().socket()\n+    #[allow(deprecated)]\n+    impl AsRawSocket for old_io::net::udp::UdpSocket {\n+        fn as_raw_socket(&self) -> Socket {\n+            self.as_inner().fd()\n+        }\n     }\n-}\n \n-#[allow(deprecated)]\n-impl AsRawSocket for old_io::net::udp::UdpSocket {\n-    fn as_raw_socket(&self) -> Socket {\n-        self.as_inner().fd()\n+    impl AsRawSocket for net::TcpStream {\n+        fn as_raw_socket(&self) -> Socket { *self.as_inner().socket().as_inner() }\n+    }\n+    impl AsRawSocket for net::TcpListener {\n+        fn as_raw_socket(&self) -> Socket { *self.as_inner().socket().as_inner() }\n+    }\n+    impl AsRawSocket for net::UdpSocket {\n+        fn as_raw_socket(&self) -> Socket { *self.as_inner().socket().as_inner() }\n     }\n }\n \n-impl AsRawSocket for net::TcpStream {\n-    fn as_raw_socket(&self) -> Socket { *self.as_inner().socket().as_inner() }\n-}\n-impl AsRawSocket for net::TcpListener {\n-    fn as_raw_socket(&self) -> Socket { *self.as_inner().socket().as_inner() }\n-}\n-impl AsRawSocket for net::UdpSocket {\n-    fn as_raw_socket(&self) -> Socket { *self.as_inner().socket().as_inner() }\n-}\n+/// Windows-specific extensions to the primitives in the `std::ffi` module.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub mod ffi {\n+    use ffi::{OsString, OsStr};\n+    use sys::os_str::Buf;\n+    use sys_common::wtf8::Wtf8Buf;\n+    use sys_common::{FromInner, AsInner};\n \n-/// Windows-specific extensions to `OsString`.\n-pub trait OsStringExt {\n-    /// Create an `OsString` from a potentially ill-formed UTF-16 slice of 16-bit code units.\n-    ///\n-    /// This is lossless: calling `.encode_wide()` on the resulting string\n-    /// will always return the original code units.\n-    fn from_wide(wide: &[u16]) -> Self;\n-}\n+    pub use sys_common::wtf8::EncodeWide;\n \n-impl OsStringExt for OsString {\n-    fn from_wide(wide: &[u16]) -> OsString {\n-        FromInner::from_inner(Buf { inner: Wtf8Buf::from_wide(wide) })\n+    /// Windows-specific extensions to `OsString`.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub trait OsStringExt {\n+        /// Create an `OsString` from a potentially ill-formed UTF-16 slice of\n+        /// 16-bit code units.\n+        ///\n+        /// This is lossless: calling `.encode_wide()` on the resulting string\n+        /// will always return the original code units.\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        fn from_wide(wide: &[u16]) -> Self;\n     }\n-}\n \n-/// Windows-specific extensions to `OsStr`.\n-pub trait OsStrExt {\n-    /// Re-encode an `OsStr` as a wide character sequence,\n-    /// i.e. potentially ill-formed UTF-16.\n-    ///\n-    /// This is lossless. Note that the encoding does not include a final null.\n-    fn encode_wide(&self) -> EncodeWide;\n-}\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    impl OsStringExt for OsString {\n+        fn from_wide(wide: &[u16]) -> OsString {\n+            FromInner::from_inner(Buf { inner: Wtf8Buf::from_wide(wide) })\n+        }\n+    }\n \n-impl OsStrExt for OsStr {\n-    fn encode_wide(&self) -> EncodeWide {\n-        self.as_inner().inner.encode_wide()\n+    /// Windows-specific extensions to `OsStr`.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub trait OsStrExt {\n+        /// Re-encode an `OsStr` as a wide character sequence,\n+        /// i.e. potentially ill-formed UTF-16.\n+        ///\n+        /// This is lossless. Note that the encoding does not include a final\n+        /// null.\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        fn encode_wide(&self) -> EncodeWide;\n     }\n-}\n \n-// Windows-specific extensions to `OpenOptions`\n-pub trait OpenOptionsExt {\n-    /// Override the `dwDesiredAccess` argument to the call to `CreateFile` with\n-    /// the specified value.\n-    fn desired_access(&mut self, access: i32) -> &mut Self;\n-\n-    /// Override the `dwCreationDisposition` argument to the call to\n-    /// `CreateFile` with the specified value.\n-    ///\n-    /// This will override any values of the standard `create` flags, for\n-    /// example.\n-    fn creation_disposition(&mut self, val: i32) -> &mut Self;\n-\n-    /// Override the `dwFlagsAndAttributes` argument to the call to\n-    /// `CreateFile` with the specified value.\n-    ///\n-    /// This will override any values of the standard flags on the `OpenOptions`\n-    /// structure.\n-    fn flags_and_attributes(&mut self, val: i32) -> &mut Self;\n-\n-    /// Override the `dwShareMode` argument to the call to `CreateFile` with the\n-    /// specified value.\n-    ///\n-    /// This will override any values of the standard flags on the `OpenOptions`\n-    /// structure.\n-    fn share_mode(&mut self, val: i32) -> &mut Self;\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    impl OsStrExt for OsStr {\n+        fn encode_wide(&self) -> EncodeWide {\n+            self.as_inner().inner.encode_wide()\n+        }\n+    }\n }\n \n-impl OpenOptionsExt for OpenOptions {\n-    fn desired_access(&mut self, access: i32) -> &mut OpenOptions {\n-        self.as_inner_mut().desired_access(access); self\n-    }\n-    fn creation_disposition(&mut self, access: i32) -> &mut OpenOptions {\n-        self.as_inner_mut().creation_disposition(access); self\n-    }\n-    fn flags_and_attributes(&mut self, access: i32) -> &mut OpenOptions {\n-        self.as_inner_mut().flags_and_attributes(access); self\n-    }\n-    fn share_mode(&mut self, access: i32) -> &mut OpenOptions {\n-        self.as_inner_mut().share_mode(access); self\n+/// Windows-specific extensions for the primitives in `std::fs`\n+#[unstable(feature = \"fs_ext\", reason = \"may require more thought/methods\")]\n+pub mod fs {\n+    use fs::OpenOptions;\n+    use sys_common::AsInnerMut;\n+\n+    /// Windows-specific extensions to `OpenOptions`\n+    pub trait OpenOptionsExt {\n+        /// Override the `dwDesiredAccess` argument to the call to `CreateFile`\n+        /// with the specified value.\n+        fn desired_access(&mut self, access: i32) -> &mut Self;\n+\n+        /// Override the `dwCreationDisposition` argument to the call to\n+        /// `CreateFile` with the specified value.\n+        ///\n+        /// This will override any values of the standard `create` flags, for\n+        /// example.\n+        fn creation_disposition(&mut self, val: i32) -> &mut Self;\n+\n+        /// Override the `dwFlagsAndAttributes` argument to the call to\n+        /// `CreateFile` with the specified value.\n+        ///\n+        /// This will override any values of the standard flags on the\n+        /// `OpenOptions` structure.\n+        fn flags_and_attributes(&mut self, val: i32) -> &mut Self;\n+\n+        /// Override the `dwShareMode` argument to the call to `CreateFile` with\n+        /// the specified value.\n+        ///\n+        /// This will override any values of the standard flags on the\n+        /// `OpenOptions` structure.\n+        fn share_mode(&mut self, val: i32) -> &mut Self;\n+    }\n+\n+    impl OpenOptionsExt for OpenOptions {\n+        fn desired_access(&mut self, access: i32) -> &mut OpenOptions {\n+            self.as_inner_mut().desired_access(access); self\n+        }\n+        fn creation_disposition(&mut self, access: i32) -> &mut OpenOptions {\n+            self.as_inner_mut().creation_disposition(access); self\n+        }\n+        fn flags_and_attributes(&mut self, access: i32) -> &mut OpenOptions {\n+            self.as_inner_mut().flags_and_attributes(access); self\n+        }\n+        fn share_mode(&mut self, access: i32) -> &mut OpenOptions {\n+            self.as_inner_mut().share_mode(access); self\n+        }\n     }\n }\n \n /// A prelude for conveniently writing platform-specific code.\n ///\n /// Includes all extension traits, and some important type definitions.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub mod prelude {\n     #[doc(no_inline)]\n-    pub use super::{Socket, Handle, AsRawSocket, AsRawHandle};\n-    #[doc(no_inline)]\n-    pub use super::{OsStrExt, OsStringExt};\n+    pub use super::io::{Socket, Handle, AsRawSocket, AsRawHandle};\n+    #[doc(no_inline)] #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub use super::ffi::{OsStrExt, OsStringExt};\n     #[doc(no_inline)]\n-    pub use super::OpenOptionsExt;\n+    pub use super::fs::OpenOptionsExt;\n }"}, {"sha": "d02fe79fcdb1f9ea18f93f22ce599f32f38d1009", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/542e2bb3910f8860d49b4b40bcd78d9c74e733ff/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542e2bb3910f8860d49b4b40bcd78d9c74e733ff/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=542e2bb3910f8860d49b4b40bcd78d9c74e733ff", "patch": "@@ -20,7 +20,7 @@ use libc;\n use mem;\n use num::Int;\n use old_io::{self, IoResult, IoError};\n-use os::windows::{OsStrExt, OsStringExt};\n+use os::windows::ffi::{OsStrExt, OsStringExt};\n use path::PathBuf;\n use sync::{Once, ONCE_INIT};\n "}, {"sha": "4f6c4c9aab3660ff071c3f1790dd055922750d2d", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/542e2bb3910f8860d49b4b40bcd78d9c74e733ff/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542e2bb3910f8860d49b4b40bcd78d9c74e733ff/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=542e2bb3910f8860d49b4b40bcd78d9c74e733ff", "patch": "@@ -13,7 +13,7 @@\n #![allow(bad_style)]\n \n use prelude::v1::*;\n-use os::windows::*;\n+use os::windows::prelude::*;\n \n use error::Error as StdError;\n use ffi::{OsString, OsStr, AsOsStr};\n@@ -25,6 +25,7 @@ use mem;\n #[allow(deprecated)]\n use old_io::{IoError, IoResult};\n use ops::Range;\n+use os::windows::ffi::EncodeWide;\n use path::{self, PathBuf};\n use ptr;\n use slice;"}, {"sha": "4fbaabc9ecc2b17bc00778f7ec812dbcd787e68d", "filename": "src/libstd/sys/windows/process2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/542e2bb3910f8860d49b4b40bcd78d9c74e733ff/src%2Flibstd%2Fsys%2Fwindows%2Fprocess2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542e2bb3910f8860d49b4b40bcd78d9c74e733ff/src%2Flibstd%2Fsys%2Fwindows%2Fprocess2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess2.rs?ref=542e2bb3910f8860d49b4b40bcd78d9c74e733ff", "patch": "@@ -19,7 +19,7 @@ use fmt;\n use fs;\n use io::{self, Error};\n use libc::{self, c_void};\n-use os::windows::OsStrExt;\n+use os::windows::ffi::OsStrExt;\n use ptr;\n use sync::{StaticMutex, MUTEX_INIT};\n use sys::handle::Handle;"}]}