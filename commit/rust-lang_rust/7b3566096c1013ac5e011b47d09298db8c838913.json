{"sha": "7b3566096c1013ac5e011b47d09298db8c838913", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMzU2NjA5NmMxMDEzYWM1ZTAxMWI0N2QwOTI5OGRiOGM4Mzg5MTM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-16T09:10:27Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-16T09:11:35Z"}, "message": "configure rustfmt; fmt cargo-miri", "tree": {"sha": "17ee4ab800840a490488ceafa3cf20a1445cdd0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17ee4ab800840a490488ceafa3cf20a1445cdd0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b3566096c1013ac5e011b47d09298db8c838913", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b3566096c1013ac5e011b47d09298db8c838913", "html_url": "https://github.com/rust-lang/rust/commit/7b3566096c1013ac5e011b47d09298db8c838913", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b3566096c1013ac5e011b47d09298db8c838913/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6608d2232bd8052375eb1d72b6b4db2eb1ea3cfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/6608d2232bd8052375eb1d72b6b4db2eb1ea3cfd", "html_url": "https://github.com/rust-lang/rust/commit/6608d2232bd8052375eb1d72b6b4db2eb1ea3cfd"}], "stats": {"total": 85, "additions": 53, "deletions": 32}, "files": [{"sha": "295acd6638a2a37098510ffdf2678766f9a94edf", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 51, "deletions": 31, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/7b3566096c1013ac5e011b47d09298db8c838913/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3566096c1013ac5e011b47d09298db8c838913/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=7b3566096c1013ac5e011b47d09298db8c838913", "patch": "@@ -1,12 +1,12 @@\n use std::env;\n use std::ffi::OsString;\n+use std::fmt::Write as _;\n use std::fs::{self, File};\n-use std::iter::TakeWhile;\n use std::io::{self, BufRead, BufReader, BufWriter, Read, Write};\n+use std::iter::TakeWhile;\n use std::ops::Not;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n-use std::fmt::{Write as _};\n \n use serde::{Deserialize, Serialize};\n \n@@ -95,7 +95,8 @@ fn show_version() {\n     // Only use `option_env` on vergen variables to ensure the build succeeds\n     // when vergen failed to find the git info.\n     if let Some(sha) = option_env!(\"VERGEN_GIT_SHA_SHORT\") {\n-        write!(&mut version, \" ({} {})\", sha, option_env!(\"VERGEN_GIT_COMMIT_DATE\").unwrap()).unwrap();\n+        write!(&mut version, \" ({} {})\", sha, option_env!(\"VERGEN_GIT_COMMIT_DATE\").unwrap())\n+            .unwrap();\n     }\n     println!(\"{}\", version);\n }\n@@ -168,8 +169,7 @@ fn forward_patched_extern_arg(args: &mut impl Iterator<Item = String>, cmd: &mut\n }\n \n fn forward_miri_sysroot(cmd: &mut Command) {\n-    let sysroot =\n-        env::var_os(\"MIRI_SYSROOT\").expect(\"the wrapper should have set MIRI_SYSROOT\");\n+    let sysroot = env::var_os(\"MIRI_SYSROOT\").expect(\"the wrapper should have set MIRI_SYSROOT\");\n     cmd.arg(\"--sysroot\");\n     cmd.arg(sysroot);\n }\n@@ -471,7 +471,9 @@ fn phase_cargo_miri(mut args: env::Args) {\n         Some(\"run\") => MiriCommand::Run,\n         Some(\"setup\") => MiriCommand::Setup,\n         // Invalid command.\n-        _ => show_error(format!(\"`cargo miri` supports the following subcommands: `run`, `test`, and `setup`.\")),\n+        _ => show_error(format!(\n+            \"`cargo miri` supports the following subcommands: `run`, `test`, and `setup`.\"\n+        )),\n     };\n     let verbose = has_arg_flag(\"-v\");\n \n@@ -515,13 +517,14 @@ fn phase_cargo_miri(mut args: env::Args) {\n     // i.e., the first argument is `rustc` -- which is what we use in `main` to distinguish\n     // the two codepaths. (That extra argument is why we prefer this over setting `RUSTC`.)\n     if env::var_os(\"RUSTC_WRAPPER\").is_some() {\n-        println!(\"WARNING: Ignoring `RUSTC_WRAPPER` environment variable, Miri does not support wrapping.\");\n+        println!(\n+            \"WARNING: Ignoring `RUSTC_WRAPPER` environment variable, Miri does not support wrapping.\"\n+        );\n     }\n     cmd.env(\"RUSTC_WRAPPER\", &cargo_miri_path);\n \n-    let runner_env_name = |triple: &str| {\n-        format!(\"CARGO_TARGET_{}_RUNNER\", triple.to_uppercase().replace('-', \"_\"))\n-    };\n+    let runner_env_name =\n+        |triple: &str| format!(\"CARGO_TARGET_{}_RUNNER\", triple.to_uppercase().replace('-', \"_\"));\n     let host_runner_env_name = runner_env_name(&host);\n     let target_runner_env_name = runner_env_name(target);\n     // Set the target runner to us, so we can interpret the binaries.\n@@ -628,7 +631,10 @@ fn phase_rustc(mut args: env::Args, phase: RustcPhase) {\n     let runnable_crate = !print && is_runnable_crate();\n \n     if runnable_crate && target_crate {\n-        assert!(phase != RustcPhase::Setup, \"there should be no interpretation during sysroot build\");\n+        assert!(\n+            phase != RustcPhase::Setup,\n+            \"there should be no interpretation during sysroot build\"\n+        );\n         let inside_rustdoc = phase == RustcPhase::Rustdoc;\n         // This is the binary or test crate that we want to interpret under Miri.\n         // But we cannot run it here, as cargo invoked us as a compiler -- our stdin and stdout are not\n@@ -657,7 +663,10 @@ fn phase_rustc(mut args: env::Args, phase: RustcPhase) {\n             cmd.env(\"MIRI_BE_RUSTC\", \"target\");\n \n             if verbose {\n-                eprintln!(\"[cargo-miri rustc] captured input:\\n{}\", std::str::from_utf8(&env.stdin).unwrap());\n+                eprintln!(\n+                    \"[cargo-miri rustc] captured input:\\n{}\",\n+                    std::str::from_utf8(&env.stdin).unwrap()\n+                );\n                 eprintln!(\"[cargo-miri rustc] {:?}\", cmd);\n             }\n \n@@ -715,7 +724,9 @@ fn phase_rustc(mut args: env::Args, phase: RustcPhase) {\n         }\n \n         // During setup, patch the panic runtime for `libpanic_abort` (mirroring what bootstrap usually does).\n-        if phase == RustcPhase::Setup && get_arg_flag_value(\"--crate-name\").as_deref() == Some(\"panic_abort\") {\n+        if phase == RustcPhase::Setup\n+            && get_arg_flag_value(\"--crate-name\").as_deref() == Some(\"panic_abort\")\n+        {\n             cmd.arg(\"-C\").arg(\"panic=abort\");\n         }\n     } else {\n@@ -765,12 +776,18 @@ fn phase_runner(binary: &Path, binary_args: env::Args, phase: RunnerPhase) {\n         .unwrap_or_else(|_| show_error(format!(\"file {:?} not found or `cargo-miri` invoked incorrectly; please only invoke this binary through `cargo miri`\", binary)));\n     let file = BufReader::new(file);\n \n-    let info = serde_json::from_reader(file)\n-        .unwrap_or_else(|_| show_error(format!(\"file {:?} contains outdated or invalid JSON; try `cargo clean`\", binary)));\n+    let info = serde_json::from_reader(file).unwrap_or_else(|_| {\n+        show_error(format!(\n+            \"file {:?} contains outdated or invalid JSON; try `cargo clean`\",\n+            binary\n+        ))\n+    });\n     let info = match info {\n         CrateRunInfo::RunWith(info) => info,\n         CrateRunInfo::SkipProcMacroTest => {\n-            eprintln!(\"Running unit tests of `proc-macro` crates is not currently supported by Miri.\");\n+            eprintln!(\n+                \"Running unit tests of `proc-macro` crates is not currently supported by Miri.\"\n+            );\n             return;\n         }\n     };\n@@ -783,7 +800,10 @@ fn phase_runner(binary: &Path, binary_args: env::Args, phase: RunnerPhase) {\n         if verbose {\n             if let Some(old_val) = env::var_os(&name) {\n                 if old_val != val {\n-                    eprintln!(\"[cargo-miri runner] Overwriting run-time env var {:?}={:?} with build-time value {:?}\", name, old_val, val);\n+                    eprintln!(\n+                        \"[cargo-miri runner] Overwriting run-time env var {:?}={:?} with build-time value {:?}\",\n+                        name, old_val, val\n+                    );\n                 }\n             }\n         }\n@@ -822,11 +842,7 @@ fn phase_runner(binary: &Path, binary_args: env::Args, phase: RunnerPhase) {\n     // Respect `MIRIFLAGS`.\n     if let Ok(a) = env::var(\"MIRIFLAGS\") {\n         // This code is taken from `RUSTFLAGS` handling in cargo.\n-        let args = a\n-            .split(' ')\n-            .map(str::trim)\n-            .filter(|s| !s.is_empty())\n-            .map(str::to_string);\n+        let args = a.split(' ').map(str::trim).filter(|s| !s.is_empty()).map(str::to_string);\n         cmd.args(args);\n     }\n \n@@ -845,12 +861,8 @@ fn phase_runner(binary: &Path, binary_args: env::Args, phase: RunnerPhase) {\n     }\n \n     match phase {\n-        RunnerPhase::Rustdoc => {\n-            exec_with_pipe(cmd, &info.stdin)\n-        }\n-        RunnerPhase::Cargo => {\n-            exec(cmd)\n-        }\n+        RunnerPhase::Rustdoc => exec_with_pipe(cmd, &info.stdin),\n+        RunnerPhase::Cargo => exec(cmd),\n     }\n }\n \n@@ -946,7 +958,10 @@ fn main() {\n             if binary.exists() {\n                 phase_runner(binary, args, RunnerPhase::Rustdoc);\n             } else {\n-                show_error(format!(\"`cargo-miri` called with non-existing path argument `{}` in rustdoc mode; please invoke this binary through `cargo miri`\", arg));\n+                show_error(format!(\n+                    \"`cargo-miri` called with non-existing path argument `{}` in rustdoc mode; please invoke this binary through `cargo miri`\",\n+                    arg\n+                ));\n             }\n         } else {\n             phase_rustc(args, RustcPhase::Rustdoc);\n@@ -977,9 +992,14 @@ fn main() {\n             } else if arg.starts_with(\"--\") {\n                 phase_rustdoc(arg, args);\n             } else {\n-                show_error(format!(\"`cargo-miri` called with unexpected first argument `{}`; please only invoke this binary through `cargo miri`\", arg));\n+                show_error(format!(\n+                    \"`cargo-miri` called with unexpected first argument `{}`; please only invoke this binary through `cargo miri`\",\n+                    arg\n+                ));\n             }\n         }\n-        _ => show_error(format!(\"`cargo-miri` called without first argument; please only invoke this binary through `cargo miri`\")),\n+        _ => show_error(format!(\n+            \"`cargo-miri` called without first argument; please only invoke this binary through `cargo miri`\"\n+        )),\n     }\n }"}, {"sha": "373caafd106b108e74af778d3628417bb9fe7bab", "filename": "rustfmt.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b3566096c1013ac5e011b47d09298db8c838913/rustfmt.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7b3566096c1013ac5e011b47d09298db8c838913/rustfmt.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt.toml?ref=7b3566096c1013ac5e011b47d09298db8c838913", "patch": "@@ -1,3 +1,4 @@\n-use_small_heuristics = \"Max\"\n version = \"Two\"\n+use_small_heuristics = \"Max\"\n match_arm_blocks = false\n+match_arm_leading_pipes = \"Preserve\""}]}