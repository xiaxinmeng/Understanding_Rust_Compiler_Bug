{"sha": "99754adbbb423a325b03ce99d9d7f89128842ba9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NzU0YWRiYmI0MjNhMzI1YjAzY2U5OWQ5ZDdmODkxMjg4NDJiYTk=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-12T23:56:13Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-16T19:09:05Z"}, "message": "Some reformatting", "tree": {"sha": "5c4ff3d3e0e6a6eae2c36936a4a92e77388f6a01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c4ff3d3e0e6a6eae2c36936a4a92e77388f6a01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99754adbbb423a325b03ce99d9d7f89128842ba9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99754adbbb423a325b03ce99d9d7f89128842ba9", "html_url": "https://github.com/rust-lang/rust/commit/99754adbbb423a325b03ce99d9d7f89128842ba9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99754adbbb423a325b03ce99d9d7f89128842ba9/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfc8ce36f8978994c4bc3df9f210cb2d15363f02", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfc8ce36f8978994c4bc3df9f210cb2d15363f02", "html_url": "https://github.com/rust-lang/rust/commit/bfc8ce36f8978994c4bc3df9f210cb2d15363f02"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "5af9173be03375a3c830d8922f43110299b564a7", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/99754adbbb423a325b03ce99d9d7f89128842ba9/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99754adbbb423a325b03ce99d9d7f89128842ba9/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=99754adbbb423a325b03ce99d9d7f89128842ba9", "patch": "@@ -814,8 +814,7 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n         // FIXME: this might lead to \"unstable\" behavior with macro hygiene\n         // introducing uninhabited patterns for inaccessible fields. We\n         // need to figure out how to model that.\n-        ty: rows.iter().map(|r| r[0].ty).find(|ty| !ty.references_error())\n-            .unwrap_or(v[0].ty),\n+        ty: rows.iter().map(|r| r[0].ty).find(|ty| !ty.references_error()).unwrap_or(v[0].ty),\n         max_slice_length: max_slice_length(cx, rows.iter().map(|r| r[0]).chain(Some(v[0])))\n     };\n \n@@ -1046,7 +1045,7 @@ fn is_useful_specialized<'p, 'a:'p, 'tcx: 'a>(\n /// Slice patterns, however, can match slices of different lengths. For instance,\n /// `[a, b, ..tail]` can match a slice of length 2, 3, 4 and so on.\n ///\n-/// Returns None in case of a catch-all, which can't be specialized.\n+/// Returns `None` in case of a catch-all, which can't be specialized.\n fn pat_constructors<'tcx>(cx: &mut MatchCheckCtxt,\n                           pat: &Pattern<'tcx>,\n                           pcx: PatternContext)\n@@ -1319,13 +1318,13 @@ fn specialize<'p, 'a: 'p, 'tcx: 'a>(\n                         span_bug!(pat.span,\n                         \"unexpected const-val {:?} with ctor {:?}\", value, constructor)\n                     }\n-                },\n+                }\n                 _ => {\n                     match constructor_covered_by_range(\n                         cx.tcx,\n                         constructor, value, value, RangeEnd::Included,\n                         value.ty,\n-                            ) {\n+                    ) {\n                         Ok(true) => Some(vec![]),\n                         Ok(false) => None,\n                         Err(ErrorReported) => None,"}, {"sha": "3a1e29dfe97b0ac4ab483fbb19da41715be41bfa", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99754adbbb423a325b03ce99d9d7f89128842ba9/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99754adbbb423a325b03ce99d9d7f89128842ba9/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=99754adbbb423a325b03ce99d9d7f89128842ba9", "patch": "@@ -272,7 +272,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n                                                 self.tables);\n             let pattern = patcx.lower_pattern(pat);\n             let pattern_ty = pattern.ty;\n-            let pats : Matrix = vec![vec![\n+            let pats: Matrix = vec![vec![\n                 expand_pattern(cx, pattern)\n             ]].into_iter().collect();\n "}]}