{"sha": "d24a1063958f8603463526b7a61f68648daec185", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyNGExMDYzOTU4Zjg2MDM0NjM1MjZiN2E2MWY2ODY0OGRhZWMxODU=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-04-25T18:55:46Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-04-26T19:27:29Z"}, "message": "Apply suggestions from PR review\n\n- Show just one error message with multiple suggestions in case of\n  using multiple times an OS in target family position\n- Only suggest #[cfg(unix)] when the OS is in the Unix family\n- Test all the operating systems", "tree": {"sha": "6d51ae9edfe3077be5e6364c8dd930867b9f7525", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d51ae9edfe3077be5e6364c8dd930867b9f7525"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d24a1063958f8603463526b7a61f68648daec185", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d24a1063958f8603463526b7a61f68648daec185", "html_url": "https://github.com/rust-lang/rust/commit/d24a1063958f8603463526b7a61f68648daec185", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d24a1063958f8603463526b7a61f68648daec185/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "149f6d6046013619bc5a600341eee3ce2b6df9a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/149f6d6046013619bc5a600341eee3ce2b6df9a6", "html_url": "https://github.com/rust-lang/rust/commit/149f6d6046013619bc5a600341eee3ce2b6df9a6"}], "stats": {"total": 274, "additions": 233, "deletions": 41}, "files": [{"sha": "0f77b3731f6dac3582ce5b1e947270ddd5651fbe", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 39, "deletions": 17, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d24a1063958f8603463526b7a61f68648daec185/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d24a1063958f8603463526b7a61f68648daec185/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=d24a1063958f8603463526b7a61f68648daec185", "patch": "@@ -20,30 +20,28 @@ use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;\n use semver::Version;\n \n-// NOTE: windows is excluded from the list because it's also a valid target family.\n-static OPERATING_SYSTEMS: &[&str] = &[\n+static UNIX_SYSTEMS: &[&str] = &[\n     \"android\",\n-    \"cloudabi\",\n     \"dragonfly\",\n     \"emscripten\",\n     \"freebsd\",\n     \"fuchsia\",\n     \"haiku\",\n-    \"hermit\",\n     \"illumos\",\n     \"ios\",\n     \"l4re\",\n     \"linux\",\n     \"macos\",\n     \"netbsd\",\n-    \"none\",\n     \"openbsd\",\n     \"redox\",\n     \"solaris\",\n     \"vxworks\",\n-    \"wasi\",\n ];\n \n+// NOTE: windows is excluded from the list because it's also a valid target family.\n+static NON_UNIX_SYSTEMS: &[&str] = &[\"cloudabi\", \"hermit\", \"none\", \"wasi\"];\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for items annotated with `#[inline(always)]`,\n     /// unless the annotated function is empty or simply panics.\n@@ -592,18 +590,32 @@ fn check_deprecated_cfg_attr(cx: &EarlyContext<'_>, attr: &Attribute) {\n }\n \n fn check_mismatched_target_os(cx: &EarlyContext<'_>, attr: &Attribute) {\n+    fn find_os(name: &str) -> Option<&'static str> {\n+        UNIX_SYSTEMS\n+            .iter()\n+            .chain(NON_UNIX_SYSTEMS.iter())\n+            .find(|&&os| os == name)\n+            .copied()\n+    }\n+\n+    fn is_unix(name: &str) -> bool {\n+        UNIX_SYSTEMS.iter().any(|&os| os == name)\n+    }\n+\n     fn find_mismatched_target_os(items: &[NestedMetaItem]) -> Vec<(&str, Span)> {\n         let mut mismatched = Vec::new();\n+\n         for item in items {\n             if let NestedMetaItem::MetaItem(meta) = item {\n                 match &meta.kind {\n                     MetaItemKind::List(list) => {\n                         mismatched.extend(find_mismatched_target_os(&list));\n                     },\n                     MetaItemKind::Word => {\n-                        if let Some(ident) = meta.ident() {\n-                            let name = &*ident.name.as_str();\n-                            if let Some(os) = OPERATING_SYSTEMS.iter().find(|&&os| os == name) {\n+                        if_chain! {\n+                            if let Some(ident) = meta.ident();\n+                            if let Some(os) = find_os(&*ident.name.as_str());\n+                            then {\n                                 mismatched.push((os, ident.span));\n                             }\n                         }\n@@ -612,23 +624,33 @@ fn check_mismatched_target_os(cx: &EarlyContext<'_>, attr: &Attribute) {\n                 }\n             }\n         }\n+\n         mismatched\n     }\n \n     if_chain! {\n         if attr.check_name(sym!(cfg));\n         if let Some(list) = attr.meta_item_list();\n+        let mismatched = find_mismatched_target_os(&list);\n+        if let Some((_, span)) = mismatched.iter().peekable().peek();\n         then {\n-            let mismatched = find_mismatched_target_os(&list);\n-            for (os, span) in mismatched {\n-                let mess = format!(\"`{}` is not a valid target family\", os);\n-                let sugg = format!(\"target_os = \\\"{}\\\"\", os);\n+            let mess = \"operating system used in target family position\";\n \n-                span_lint_and_then(cx, MISMATCHED_TARGET_OS, span, &mess, |diag| {\n+            span_lint_and_then(cx, MISMATCHED_TARGET_OS, *span, &mess, |diag| {\n+                // Avoid showing the unix suggestion multiple times in case\n+                // we have more than one mismatch for unix-like systems\n+                let mut unix_suggested = false;\n+\n+                for (os, span) in mismatched {\n+                    let sugg = format!(\"target_os = \\\"{}\\\"\", os);\n                     diag.span_suggestion(span, \"try\", sugg, Applicability::MaybeIncorrect);\n-                    diag.help(\"Did you mean `unix`?\");\n-                });\n-            }\n+\n+                    if !unix_suggested && is_unix(os) {\n+                        diag.help(\"Did you mean `unix`?\");\n+                        unix_suggested = true;\n+                    }\n+                }\n+            });\n         }\n     }\n }"}, {"sha": "b89a29e92430cff7243e4b706b127507e85316df", "filename": "tests/ui/mismatched_target_os.fixed", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d24a1063958f8603463526b7a61f68648daec185/tests%2Fui%2Fmismatched_target_os.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d24a1063958f8603463526b7a61f68648daec185/tests%2Fui%2Fmismatched_target_os.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_target_os.fixed?ref=d24a1063958f8603463526b7a61f68648daec185", "patch": "@@ -3,6 +3,8 @@\n #![warn(clippy::mismatched_target_os)]\n #![allow(unused)]\n \n+// unix\n+\n #[cfg(target_os = \"linux\")]\n fn linux() {}\n \n@@ -27,6 +29,45 @@ fn ios() {}\n #[cfg(target_os = \"android\")]\n fn android() {}\n \n+#[cfg(target_os = \"emscripten\")]\n+fn emscripten() {}\n+\n+#[cfg(target_os = \"fuchsia\")]\n+fn fuchsia() {}\n+\n+#[cfg(target_os = \"haiku\")]\n+fn haiku() {}\n+\n+#[cfg(target_os = \"illumos\")]\n+fn illumos() {}\n+\n+#[cfg(target_os = \"l4re\")]\n+fn l4re() {}\n+\n+#[cfg(target_os = \"redox\")]\n+fn redox() {}\n+\n+#[cfg(target_os = \"solaris\")]\n+fn solaris() {}\n+\n+#[cfg(target_os = \"vxworks\")]\n+fn vxworks() {}\n+\n+// non-unix\n+\n+#[cfg(target_os = \"cloudabi\")]\n+fn cloudabi() {}\n+\n+#[cfg(target_os = \"hermit\")]\n+fn hermit() {}\n+\n+#[cfg(target_os = \"wasi\")]\n+fn wasi() {}\n+\n+#[cfg(target_os = \"none\")]\n+fn none() {}\n+\n+// list with conditions\n #[cfg(all(not(any(windows, target_os = \"linux\")), target_os = \"freebsd\"))]\n fn list() {}\n "}, {"sha": "66b2e7c8fdd29364ffbf825016830e45ba2565f8", "filename": "tests/ui/mismatched_target_os.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d24a1063958f8603463526b7a61f68648daec185/tests%2Fui%2Fmismatched_target_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d24a1063958f8603463526b7a61f68648daec185/tests%2Fui%2Fmismatched_target_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_target_os.rs?ref=d24a1063958f8603463526b7a61f68648daec185", "patch": "@@ -3,6 +3,8 @@\n #![warn(clippy::mismatched_target_os)]\n #![allow(unused)]\n \n+// unix\n+\n #[cfg(linux)]\n fn linux() {}\n \n@@ -27,6 +29,45 @@ fn ios() {}\n #[cfg(android)]\n fn android() {}\n \n+#[cfg(emscripten)]\n+fn emscripten() {}\n+\n+#[cfg(fuchsia)]\n+fn fuchsia() {}\n+\n+#[cfg(haiku)]\n+fn haiku() {}\n+\n+#[cfg(illumos)]\n+fn illumos() {}\n+\n+#[cfg(l4re)]\n+fn l4re() {}\n+\n+#[cfg(redox)]\n+fn redox() {}\n+\n+#[cfg(solaris)]\n+fn solaris() {}\n+\n+#[cfg(vxworks)]\n+fn vxworks() {}\n+\n+// non-unix\n+\n+#[cfg(cloudabi)]\n+fn cloudabi() {}\n+\n+#[cfg(hermit)]\n+fn hermit() {}\n+\n+#[cfg(wasi)]\n+fn wasi() {}\n+\n+#[cfg(none)]\n+fn none() {}\n+\n+// list with conditions\n #[cfg(all(not(any(windows, linux)), freebsd))]\n fn list() {}\n "}, {"sha": "4b18227421c796a72cd0de701f80f2573b9017e4", "filename": "tests/ui/mismatched_target_os.stderr", "status": "modified", "additions": 112, "deletions": 24, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/d24a1063958f8603463526b7a61f68648daec185/tests%2Fui%2Fmismatched_target_os.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d24a1063958f8603463526b7a61f68648daec185/tests%2Fui%2Fmismatched_target_os.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_target_os.stderr?ref=d24a1063958f8603463526b7a61f68648daec185", "patch": "@@ -1,83 +1,171 @@\n-error: `linux` is not a valid target family\n-  --> $DIR/mismatched_target_os.rs:6:7\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os.rs:8:7\n    |\n LL | #[cfg(linux)]\n    |       ^^^^^ help: try: `target_os = \"linux\"`\n    |\n    = note: `-D clippy::mismatched-target-os` implied by `-D warnings`\n    = help: Did you mean `unix`?\n \n-error: `freebsd` is not a valid target family\n-  --> $DIR/mismatched_target_os.rs:9:7\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os.rs:11:7\n    |\n LL | #[cfg(freebsd)]\n    |       ^^^^^^^ help: try: `target_os = \"freebsd\"`\n    |\n    = help: Did you mean `unix`?\n \n-error: `dragonfly` is not a valid target family\n-  --> $DIR/mismatched_target_os.rs:12:7\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os.rs:14:7\n    |\n LL | #[cfg(dragonfly)]\n    |       ^^^^^^^^^ help: try: `target_os = \"dragonfly\"`\n    |\n    = help: Did you mean `unix`?\n \n-error: `openbsd` is not a valid target family\n-  --> $DIR/mismatched_target_os.rs:15:7\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os.rs:17:7\n    |\n LL | #[cfg(openbsd)]\n    |       ^^^^^^^ help: try: `target_os = \"openbsd\"`\n    |\n    = help: Did you mean `unix`?\n \n-error: `netbsd` is not a valid target family\n-  --> $DIR/mismatched_target_os.rs:18:7\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os.rs:20:7\n    |\n LL | #[cfg(netbsd)]\n    |       ^^^^^^ help: try: `target_os = \"netbsd\"`\n    |\n    = help: Did you mean `unix`?\n \n-error: `macos` is not a valid target family\n-  --> $DIR/mismatched_target_os.rs:21:7\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os.rs:23:7\n    |\n LL | #[cfg(macos)]\n    |       ^^^^^ help: try: `target_os = \"macos\"`\n    |\n    = help: Did you mean `unix`?\n \n-error: `ios` is not a valid target family\n-  --> $DIR/mismatched_target_os.rs:24:7\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os.rs:26:7\n    |\n LL | #[cfg(ios)]\n    |       ^^^ help: try: `target_os = \"ios\"`\n    |\n    = help: Did you mean `unix`?\n \n-error: `android` is not a valid target family\n-  --> $DIR/mismatched_target_os.rs:27:7\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os.rs:29:7\n    |\n LL | #[cfg(android)]\n    |       ^^^^^^^ help: try: `target_os = \"android\"`\n    |\n    = help: Did you mean `unix`?\n \n-error: `linux` is not a valid target family\n-  --> $DIR/mismatched_target_os.rs:30:28\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os.rs:32:7\n    |\n-LL | #[cfg(all(not(any(windows, linux)), freebsd))]\n-   |                            ^^^^^ help: try: `target_os = \"linux\"`\n+LL | #[cfg(emscripten)]\n+   |       ^^^^^^^^^^ help: try: `target_os = \"emscripten\"`\n+   |\n+   = help: Did you mean `unix`?\n+\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os.rs:35:7\n+   |\n+LL | #[cfg(fuchsia)]\n+   |       ^^^^^^^ help: try: `target_os = \"fuchsia\"`\n+   |\n+   = help: Did you mean `unix`?\n+\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os.rs:38:7\n+   |\n+LL | #[cfg(haiku)]\n+   |       ^^^^^ help: try: `target_os = \"haiku\"`\n+   |\n+   = help: Did you mean `unix`?\n+\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os.rs:41:7\n+   |\n+LL | #[cfg(illumos)]\n+   |       ^^^^^^^ help: try: `target_os = \"illumos\"`\n+   |\n+   = help: Did you mean `unix`?\n+\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os.rs:44:7\n+   |\n+LL | #[cfg(l4re)]\n+   |       ^^^^ help: try: `target_os = \"l4re\"`\n    |\n    = help: Did you mean `unix`?\n \n-error: `freebsd` is not a valid target family\n-  --> $DIR/mismatched_target_os.rs:30:37\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os.rs:47:7\n+   |\n+LL | #[cfg(redox)]\n+   |       ^^^^^ help: try: `target_os = \"redox\"`\n+   |\n+   = help: Did you mean `unix`?\n+\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os.rs:50:7\n+   |\n+LL | #[cfg(solaris)]\n+   |       ^^^^^^^ help: try: `target_os = \"solaris\"`\n+   |\n+   = help: Did you mean `unix`?\n+\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os.rs:53:7\n+   |\n+LL | #[cfg(vxworks)]\n+   |       ^^^^^^^ help: try: `target_os = \"vxworks\"`\n+   |\n+   = help: Did you mean `unix`?\n+\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os.rs:58:7\n+   |\n+LL | #[cfg(cloudabi)]\n+   |       ^^^^^^^^ help: try: `target_os = \"cloudabi\"`\n+\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os.rs:61:7\n+   |\n+LL | #[cfg(hermit)]\n+   |       ^^^^^^ help: try: `target_os = \"hermit\"`\n+\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os.rs:64:7\n+   |\n+LL | #[cfg(wasi)]\n+   |       ^^^^ help: try: `target_os = \"wasi\"`\n+\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os.rs:67:7\n+   |\n+LL | #[cfg(none)]\n+   |       ^^^^ help: try: `target_os = \"none\"`\n+\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os.rs:71:28\n    |\n LL | #[cfg(all(not(any(windows, linux)), freebsd))]\n-   |                                     ^^^^^^^ help: try: `target_os = \"freebsd\"`\n+   |                            ^^^^^\n    |\n    = help: Did you mean `unix`?\n+help: try\n+   |\n+LL | #[cfg(all(not(any(windows, target_os = \"linux\")), freebsd))]\n+   |                            ^^^^^^^^^^^^^^^^^^^\n+help: try\n+   |\n+LL | #[cfg(all(not(any(windows, linux)), target_os = \"freebsd\"))]\n+   |                                     ^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 21 previous errors\n "}]}