{"sha": "af8132e610d1e649e67ab797e372d1efcf106c48", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmODEzMmU2MTBkMWU2NDllNjdhYjc5N2UzNzJkMWVmY2YxMDZjNDg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-30T16:39:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-30T16:39:40Z"}, "message": "Merge #5607\n\n5607: Finaize item grammar r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "b08fbc93e85f25301ad84a05a3f859ed3edfeb17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b08fbc93e85f25301ad84a05a3f859ed3edfeb17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af8132e610d1e649e67ab797e372d1efcf106c48", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfIvfMCRBK7hj4Ov3rIwAAdHIIACoDxtVuV7IQGSQV8H+3R6rU\nqunqKPOHLB4remvC9IfggKK3Sirnv+cQvlCQY3Lk0rY7/5fsctSfu4uEAKRJvhnL\n73tJBZu7VQ8SOHCtCzKocW4YHZRCKtRqFIF4TGpb4IX/DXsoHV0bG3I8E58jLGlQ\n0JkR11XJNF2AiNhQI/31k4kpCYPL2dD9/Lq7Fi8s5cQT6Co1tv5SsAp4J6BydG+o\nd+DYvIm2Xi+Z2QNb3b0xqEaBLKD+siR83ziPaDjCGFxOqmG4Eu0Fg9sdCrmXlZfC\niJ6EsouCcxBWZsgTKhHdNhkttm7BD619UnUjlIYpM28C96BHMF6xbRdGNdLigVE=\n=yfyY\n-----END PGP SIGNATURE-----\n", "payload": "tree b08fbc93e85f25301ad84a05a3f859ed3edfeb17\nparent 0f5805541be90a2789b0bc34c5d829042ac3b0ad\nparent 917c89c103597d09e95bdee273633f79123dd19e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1596127180 +0000\ncommitter GitHub <noreply@github.com> 1596127180 +0000\n\nMerge #5607\n\n5607: Finaize item grammar r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af8132e610d1e649e67ab797e372d1efcf106c48", "html_url": "https://github.com/rust-lang/rust/commit/af8132e610d1e649e67ab797e372d1efcf106c48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af8132e610d1e649e67ab797e372d1efcf106c48/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f5805541be90a2789b0bc34c5d829042ac3b0ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f5805541be90a2789b0bc34c5d829042ac3b0ad", "html_url": "https://github.com/rust-lang/rust/commit/0f5805541be90a2789b0bc34c5d829042ac3b0ad"}, {"sha": "917c89c103597d09e95bdee273633f79123dd19e", "url": "https://api.github.com/repos/rust-lang/rust/commits/917c89c103597d09e95bdee273633f79123dd19e", "html_url": "https://github.com/rust-lang/rust/commit/917c89c103597d09e95bdee273633f79123dd19e"}], "stats": {"total": 168, "additions": 88, "deletions": 80}, "files": [{"sha": "29f1de5477ea63dcb6dd1814c080e41adab247d6", "filename": "crates/ra_hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af8132e610d1e649e67ab797e372d1efcf106c48/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af8132e610d1e649e67ab797e372d1efcf106c48/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=af8132e610d1e649e67ab797e372d1efcf106c48", "patch": "@@ -557,6 +557,7 @@ impl Ctx {\n                             let statik = self.lower_static(&ast)?;\n                             statik.into()\n                         }\n+                        ast::ExternItem::MacroCall(_) => return None,\n                     };\n                     self.add_attrs(id.into(), attrs);\n                     Some(id)"}, {"sha": "9345a5e8f405fed9273d7a488f1a3557ab2f8faf", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 71, "deletions": 64, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/af8132e610d1e649e67ab797e372d1efcf106c48/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af8132e610d1e649e67ab797e372d1efcf106c48/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=af8132e610d1e649e67ab797e372d1efcf106c48", "patch": "@@ -453,12 +453,23 @@ impl Variant {\n pub struct AssocItemList {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl ast::AttrsOwner for AssocItemList {}\n impl AssocItemList {\n     pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n     pub fn assoc_items(&self) -> AstChildren<AssocItem> { support::children(&self.syntax) }\n     pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct ExternItemList {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl ast::AttrsOwner for ExternItemList {}\n+impl ExternItemList {\n+    pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n+    pub fn extern_items(&self) -> AstChildren<ExternItem> { support::children(&self.syntax) }\n+    pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ParenType {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -1254,15 +1265,6 @@ impl ConstArg {\n     pub fn block_expr(&self) -> Option<BlockExpr> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ExternItemList {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl ExternItemList {\n-    pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n-    pub fn extern_items(&self) -> AstChildren<ExternItem> { support::children(&self.syntax) }\n-    pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct MetaItem {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -1373,6 +1375,14 @@ pub enum AssocItem {\n impl ast::AttrsOwner for AssocItem {}\n impl ast::NameOwner for AssocItem {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub enum ExternItem {\n+    Fn(Fn),\n+    Static(Static),\n+    MacroCall(MacroCall),\n+}\n+impl ast::AttrsOwner for ExternItem {}\n+impl ast::NameOwner for ExternItem {}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum Stmt {\n     LetStmt(LetStmt),\n     ExprStmt(ExprStmt),\n@@ -1384,14 +1394,6 @@ pub enum AttrInput {\n     TokenTree(TokenTree),\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum ExternItem {\n-    Fn(Fn),\n-    Static(Static),\n-}\n-impl ast::AttrsOwner for ExternItem {}\n-impl ast::NameOwner for ExternItem {}\n-impl ast::VisibilityOwner for ExternItem {}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum AdtDef {\n     Struct(Struct),\n     Enum(Enum),\n@@ -1841,6 +1843,17 @@ impl AstNode for AssocItemList {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n+impl AstNode for ExternItemList {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == EXTERN_ITEM_LIST }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AstNode for ParenType {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == PAREN_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2754,17 +2767,6 @@ impl AstNode for ConstArg {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for ExternItemList {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == EXTERN_ITEM_LIST }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n impl AstNode for MetaItem {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == META_ITEM }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3290,6 +3292,39 @@ impl AstNode for AssocItem {\n         }\n     }\n }\n+impl From<Fn> for ExternItem {\n+    fn from(node: Fn) -> ExternItem { ExternItem::Fn(node) }\n+}\n+impl From<Static> for ExternItem {\n+    fn from(node: Static) -> ExternItem { ExternItem::Static(node) }\n+}\n+impl From<MacroCall> for ExternItem {\n+    fn from(node: MacroCall) -> ExternItem { ExternItem::MacroCall(node) }\n+}\n+impl AstNode for ExternItem {\n+    fn can_cast(kind: SyntaxKind) -> bool {\n+        match kind {\n+            FN | STATIC | MACRO_CALL => true,\n+            _ => false,\n+        }\n+    }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        let res = match syntax.kind() {\n+            FN => ExternItem::Fn(Fn { syntax }),\n+            STATIC => ExternItem::Static(Static { syntax }),\n+            MACRO_CALL => ExternItem::MacroCall(MacroCall { syntax }),\n+            _ => return None,\n+        };\n+        Some(res)\n+    }\n+    fn syntax(&self) -> &SyntaxNode {\n+        match self {\n+            ExternItem::Fn(it) => &it.syntax,\n+            ExternItem::Static(it) => &it.syntax,\n+            ExternItem::MacroCall(it) => &it.syntax,\n+        }\n+    }\n+}\n impl From<LetStmt> for Stmt {\n     fn from(node: LetStmt) -> Stmt { Stmt::LetStmt(node) }\n }\n@@ -3346,34 +3381,6 @@ impl AstNode for AttrInput {\n         }\n     }\n }\n-impl From<Fn> for ExternItem {\n-    fn from(node: Fn) -> ExternItem { ExternItem::Fn(node) }\n-}\n-impl From<Static> for ExternItem {\n-    fn from(node: Static) -> ExternItem { ExternItem::Static(node) }\n-}\n-impl AstNode for ExternItem {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            FN | STATIC => true,\n-            _ => false,\n-        }\n-    }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        let res = match syntax.kind() {\n-            FN => ExternItem::Fn(Fn { syntax }),\n-            STATIC => ExternItem::Static(Static { syntax }),\n-            _ => return None,\n-        };\n-        Some(res)\n-    }\n-    fn syntax(&self) -> &SyntaxNode {\n-        match self {\n-            ExternItem::Fn(it) => &it.syntax,\n-            ExternItem::Static(it) => &it.syntax,\n-        }\n-    }\n-}\n impl From<Struct> for AdtDef {\n     fn from(node: Struct) -> AdtDef { AdtDef::Struct(node) }\n }\n@@ -3437,17 +3444,17 @@ impl std::fmt::Display for AssocItem {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for Stmt {\n+impl std::fmt::Display for ExternItem {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for AttrInput {\n+impl std::fmt::Display for Stmt {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for ExternItem {\n+impl std::fmt::Display for AttrInput {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n@@ -3657,6 +3664,11 @@ impl std::fmt::Display for AssocItemList {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n+impl std::fmt::Display for ExternItemList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl std::fmt::Display for ParenType {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n@@ -4072,11 +4084,6 @@ impl std::fmt::Display for ConstArg {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for ExternItemList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl std::fmt::Display for MetaItem {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "cdd3adf45778bae099a805b0491c973571f337cc", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/af8132e610d1e649e67ab797e372d1efcf106c48/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/af8132e610d1e649e67ab797e372d1efcf106c48/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=af8132e610d1e649e67ab797e372d1efcf106c48", "patch": "@@ -129,7 +129,13 @@ Trait =\n   AssocItemList\n \n AssocItemList =\n-  '{' AssocItem* '}'\n+  '{' Attr* AssocItem* '}'\n+\n+AssocItem =\n+  Fn\n+| TypeAlias\n+| Const\n+| MacroCall\n \n Impl =\n  Attr* Visibility?\n@@ -139,6 +145,15 @@ Impl =\n  ) WhereClause?\n  AssocItemList\n \n+ExternBlock =\n+  Attr* Abi ExternItemList\n+\n+ExternItemList =\n+  '{' Attr* ExternItem* '}'\n+\n+ExternItem =\n+  Fn | Static | MacroCall\n+\n ParenType =\n   '(' TypeRef ')'\n \n@@ -449,12 +464,6 @@ LifetimeArg =\n ConstArg =\n   Literal | BlockExpr BlockExpr\n \n-ExternBlock =\n-  Attr* Abi ExternItemList\n-\n-ExternItemList =\n-  '{' extern_items:ExternItem* '}'\n-\n MetaItem =\n   Path '=' AttrInput nested_meta_items:MetaItem*\n \n@@ -478,15 +487,6 @@ TypeRef =\n | ImplTraitType\n | DynTraitType\n \n-AssocItem =\n-  Fn\n-| TypeAlias\n-| Const\n-| MacroCall\n-\n-ExternItem =\n-  Fn | Static\n-\n AttrInput =\n   Literal\n | TokenTree"}]}