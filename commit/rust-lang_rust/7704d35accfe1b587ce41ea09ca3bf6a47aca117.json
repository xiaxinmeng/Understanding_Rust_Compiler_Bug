{"sha": "7704d35accfe1b587ce41ea09ca3bf6a47aca117", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MDRkMzVhY2NmZTFiNTg3Y2U0MWVhMDljYTNiZjZhNDdhY2ExMTc=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-11-03T11:15:06Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-11-03T11:15:06Z"}, "message": "build-manifest: remove legacy promote-release support\n\nThis commit removes support for the legacy promote-release, as that's\nnot executed anymore on the nightly channel.", "tree": {"sha": "f1ac6e5b44b2796651d42594e3102193e4d58832", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1ac6e5b44b2796651d42594e3102193e4d58832"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7704d35accfe1b587ce41ea09ca3bf6a47aca117", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl+hO/0ACgkQPgar6Auq\n8ZxY/xAAjJ0BeBUoPj2YzNa0CUuw4+ptealExR8rghXSTBPVU0MyA+Io2Uu1hv8F\nnHg78ZN4DjSSAgd9AghCtD5AUD1WyllJg4oSnSVmDVSfS0IjyBxGPvfZwrGkRQyg\nObNAF+Ki9l5C04SjnRM5ebikVNmN1Mou/FBmQ+FYGqrkaGKAet32S7/qM8IicMHE\nI78fg0Rr8dwpCOuhyleSTr2ZIamyOiPrHQfK0iooQjt4eK0O1Fe1M+3K12fHz9Ve\nD+wYj6fkSGvPCEz2ScVklV3wvteS5jP7J4xVABguTxBW8uN15y4tpB1FQqIBvyO+\nNOUkgLxwDfySR0Vf5VlO6elAiiYGxjtN9dI97cTNyV6bTKhRvi073lsuBlmPpG2q\nHfwWWbZVcW70JdI/GyRPTbEbNWh/A50XbB8z6nKJLV7/+jlQQP+r1RErkJxb5eyf\n4LYPB0mTVgGzil1U6oOtXmYrCCDkI7hS0DEdcD13pmtWzUxxgoKOCy/QUkeq41zZ\nVhSuLp9fFO9CG+8xs53GkmPpJ5CGmvrcG82tO09jwolGIHx2HHPSRlQNt6Ut+cac\n2nWWjSsOi+qx9WTj8SBtNZQ6Y0hibZCGrR6ISp3stUwirWpVxOmreOtaqGJqILeK\nIaIr4Gr0vNfK4R2dmD8Jm/J3yDwMpZXcpCLdXtwLCx8d+ngJ9Hk=\n=CCSr\n-----END PGP SIGNATURE-----", "payload": "tree f1ac6e5b44b2796651d42594e3102193e4d58832\nparent d662f808550acadc5980969e1826a653ec35b408\nauthor Pietro Albini <pietro@pietroalbini.org> 1604402106 +0100\ncommitter Pietro Albini <pietro@pietroalbini.org> 1604402106 +0100\n\nbuild-manifest: remove legacy promote-release support\n\nThis commit removes support for the legacy promote-release, as that's\nnot executed anymore on the nightly channel.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7704d35accfe1b587ce41ea09ca3bf6a47aca117", "html_url": "https://github.com/rust-lang/rust/commit/7704d35accfe1b587ce41ea09ca3bf6a47aca117", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7704d35accfe1b587ce41ea09ca3bf6a47aca117/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d662f808550acadc5980969e1826a653ec35b408", "url": "https://api.github.com/repos/rust-lang/rust/commits/d662f808550acadc5980969e1826a653ec35b408", "html_url": "https://github.com/rust-lang/rust/commit/d662f808550acadc5980969e1826a653ec35b408"}], "stats": {"total": 153, "additions": 2, "deletions": 151}, "files": [{"sha": "3a8b243349c6b25a48c1d34fe421d6219cb9ce7a", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7704d35accfe1b587ce41ea09ca3bf6a47aca117/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7704d35accfe1b587ce41ea09ca3bf6a47aca117/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=7704d35accfe1b587ce41ea09ca3bf6a47aca117", "patch": "@@ -469,7 +469,6 @@ impl<'a> Builder<'a> {\n                 dist::RustDev,\n                 dist::Extended,\n                 dist::BuildManifest,\n-                dist::HashSign\n             ),\n             Kind::Install => describe!(\n                 install::Docs,"}, {"sha": "bdab12db43502f7d8f93af29ac2f7cb8649044ff", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 57, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/7704d35accfe1b587ce41ea09ca3bf6a47aca117/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7704d35accfe1b587ce41ea09ca3bf6a47aca117/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=7704d35accfe1b587ce41ea09ca3bf6a47aca117", "patch": "@@ -10,9 +10,8 @@\n \n use std::env;\n use std::fs;\n-use std::io::Write;\n use std::path::{Path, PathBuf};\n-use std::process::{Command, Stdio};\n+use std::process::Command;\n \n use build_helper::{output, t};\n \n@@ -2323,61 +2322,6 @@ fn add_env(builder: &Builder<'_>, cmd: &mut Command, target: TargetSelection) {\n     }\n }\n \n-#[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n-pub struct HashSign;\n-\n-impl Step for HashSign {\n-    type Output = ();\n-    const ONLY_HOSTS: bool = true;\n-\n-    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"hash-and-sign\")\n-    }\n-\n-    fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(HashSign);\n-    }\n-\n-    fn run(self, builder: &Builder<'_>) {\n-        // This gets called by `promote-release`\n-        // (https://github.com/rust-lang/rust-central-station/tree/master/promote-release).\n-        let mut cmd = builder.tool_cmd(Tool::BuildManifest);\n-        if builder.config.dry_run {\n-            return;\n-        }\n-        let sign = builder.config.dist_sign_folder.as_ref().unwrap_or_else(|| {\n-            panic!(\"\\n\\nfailed to specify `dist.sign-folder` in `config.toml`\\n\\n\")\n-        });\n-        let addr = builder.config.dist_upload_addr.as_ref().unwrap_or_else(|| {\n-            panic!(\"\\n\\nfailed to specify `dist.upload-addr` in `config.toml`\\n\\n\")\n-        });\n-        let pass = if env::var(\"BUILD_MANIFEST_DISABLE_SIGNING\").is_err() {\n-            let file = builder.config.dist_gpg_password_file.as_ref().unwrap_or_else(|| {\n-                panic!(\"\\n\\nfailed to specify `dist.gpg-password-file` in `config.toml`\\n\\n\")\n-            });\n-            t!(fs::read_to_string(&file))\n-        } else {\n-            String::new()\n-        };\n-\n-        let today = output(Command::new(\"date\").arg(\"+%Y-%m-%d\"));\n-\n-        cmd.arg(sign);\n-        cmd.arg(distdir(builder));\n-        cmd.arg(today.trim());\n-        cmd.arg(addr);\n-        cmd.arg(&builder.config.channel);\n-        cmd.env(\"BUILD_MANIFEST_LEGACY\", \"1\");\n-\n-        builder.create_dir(&distdir(builder));\n-\n-        let mut child = t!(cmd.stdin(Stdio::piped()).spawn());\n-        t!(child.stdin.take().unwrap().write_all(pass.as_bytes()));\n-        let status = t!(child.wait());\n-        assert!(status.success());\n-    }\n-}\n-\n /// Maybe add libLLVM.so to the given destination lib-dir. It will only have\n /// been built if LLVM tools are linked dynamically.\n ///"}, {"sha": "9a8f2404e4a1a6ea22d5e75e688fc9f785ee65f8", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 1, "deletions": 93, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/7704d35accfe1b587ce41ea09ca3bf6a47aca117/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7704d35accfe1b587ce41ea09ca3bf6a47aca117/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=7704d35accfe1b587ce41ea09ca3bf6a47aca117", "patch": "@@ -14,9 +14,7 @@ use crate::versions::{PkgType, Versions};\n use std::collections::{BTreeMap, HashMap, HashSet};\n use std::env;\n use std::fs::{self, File};\n-use std::io::{self, Read, Write};\n use std::path::{Path, PathBuf};\n-use std::process::{Command, Stdio};\n \n static HOSTS: &[&str] = &[\n     \"aarch64-apple-darwin\",\n@@ -200,29 +198,10 @@ struct Builder {\n     output: PathBuf,\n     s3_address: String,\n     date: String,\n-\n-    legacy: bool,\n-    legacy_gpg_passphrase: String,\n }\n \n fn main() {\n-    // Up until Rust 1.48 the release process relied on build-manifest to create the SHA256\n-    // checksums of released files and to sign the tarballs. That was moved over to promote-release\n-    // in time for the branching of Rust 1.48, but the old release process still had to work the\n-    // old way.\n-    //\n-    // When running build-manifest through the old ./x.py dist hash-and-sign the environment\n-    // variable will be set, enabling the legacy behavior of generating the .sha256 files and\n-    // signing the tarballs.\n-    //\n-    // Once the old release process is fully decommissioned, the environment variable, all the\n-    // related code in this tool and ./x.py dist hash-and-sign can be removed.\n-    let legacy = env::var_os(\"BUILD_MANIFEST_LEGACY\").is_some();\n-\n-    let num_threads = if legacy {\n-        // Avoid overloading the old server in legacy mode.\n-        1\n-    } else if let Some(num) = env::var_os(\"BUILD_MANIFEST_NUM_THREADS\") {\n+    let num_threads = if let Some(num) = env::var_os(\"BUILD_MANIFEST_NUM_THREADS\") {\n         num.to_str().unwrap().parse().expect(\"invalid number for BUILD_MANIFEST_NUM_THREADS\")\n     } else {\n         num_cpus::get()\n@@ -239,13 +218,6 @@ fn main() {\n     let s3_address = args.next().unwrap();\n     let channel = args.next().unwrap();\n \n-    // Do not ask for a passphrase while manually testing\n-    let mut passphrase = String::new();\n-    if legacy {\n-        // `x.py` passes the passphrase via stdin.\n-        t!(io::stdin().read_to_string(&mut passphrase));\n-    }\n-\n     Builder {\n         versions: Versions::new(&channel, &input).unwrap(),\n         checksums: t!(Checksums::new()),\n@@ -255,19 +227,13 @@ fn main() {\n         output,\n         s3_address,\n         date,\n-\n-        legacy,\n-        legacy_gpg_passphrase: passphrase,\n     }\n     .build();\n }\n \n impl Builder {\n     fn build(&mut self) {\n         self.check_toolstate();\n-        if self.legacy {\n-            self.digest_and_sign();\n-        }\n         let manifest = self.build_manifest();\n \n         let channel = self.versions.channel().to_string();\n@@ -310,15 +276,6 @@ impl Builder {\n         }\n     }\n \n-    /// Hash all files, compute their signatures, and collect the hashes in `self.digests`.\n-    fn digest_and_sign(&mut self) {\n-        for file in t!(self.input.read_dir()).map(|e| t!(e).path()) {\n-            file.file_name().unwrap().to_str().unwrap();\n-            self.hash(&file);\n-            self.sign(&file);\n-        }\n-    }\n-\n     fn build_manifest(&mut self) -> Manifest {\n         let mut manifest = Manifest {\n             manifest_version: \"2\".to_string(),\n@@ -584,51 +541,6 @@ impl Builder {\n         format!(\"{}/{}/{}\", self.s3_address, self.date, file_name)\n     }\n \n-    fn hash(&self, path: &Path) -> String {\n-        let sha = t!(Command::new(\"shasum\")\n-            .arg(\"-a\")\n-            .arg(\"256\")\n-            .arg(path.file_name().unwrap())\n-            .current_dir(path.parent().unwrap())\n-            .output());\n-        assert!(sha.status.success());\n-\n-        let filename = path.file_name().unwrap().to_str().unwrap();\n-        let sha256 = self.output.join(format!(\"{}.sha256\", filename));\n-        t!(fs::write(&sha256, &sha.stdout));\n-\n-        let stdout = String::from_utf8_lossy(&sha.stdout);\n-        stdout.split_whitespace().next().unwrap().to_string()\n-    }\n-\n-    fn sign(&self, path: &Path) {\n-        if !self.legacy {\n-            return;\n-        }\n-\n-        let filename = path.file_name().unwrap().to_str().unwrap();\n-        let asc = self.output.join(format!(\"{}.asc\", filename));\n-        println!(\"signing: {:?}\", path);\n-        let mut cmd = Command::new(\"gpg\");\n-        cmd.arg(\"--pinentry-mode=loopback\")\n-            .arg(\"--no-tty\")\n-            .arg(\"--yes\")\n-            .arg(\"--batch\")\n-            .arg(\"--passphrase-fd\")\n-            .arg(\"0\")\n-            .arg(\"--personal-digest-preferences\")\n-            .arg(\"SHA512\")\n-            .arg(\"--armor\")\n-            .arg(\"--output\")\n-            .arg(&asc)\n-            .arg(\"--detach-sign\")\n-            .arg(path)\n-            .stdin(Stdio::piped());\n-        let mut child = t!(cmd.spawn());\n-        t!(child.stdin.take().unwrap().write_all(self.legacy_gpg_passphrase.as_bytes()));\n-        assert!(t!(child.wait()).success());\n-    }\n-\n     fn write_channel_files(&mut self, channel_name: &str, manifest: &Manifest) {\n         self.write(&toml::to_string(&manifest).unwrap(), channel_name, \".toml\");\n         self.write(&manifest.date, channel_name, \"-date.txt\");\n@@ -645,10 +557,6 @@ impl Builder {\n \n         let dst = self.output.join(name);\n         t!(fs::write(&dst, contents));\n-        if self.legacy {\n-            self.hash(&dst);\n-            self.sign(&dst);\n-        }\n     }\n \n     fn write_shipped_files(&self, path: &Path) {"}]}