{"sha": "8b59542acc9901a6568731541baa9f623c1991b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNTk1NDJhY2M5OTAxYTY1Njg3MzE1NDFiYWE5ZjYyM2MxOTkxYjM=", "commit": {"author": {"name": "Shea Newton", "email": "shnewto@gmail.com", "date": "2018-06-14T16:41:56Z"}, "committer": {"name": "Shea Newton", "email": "shnewto@gmail.com", "date": "2018-06-19T16:28:10Z"}, "message": "Second pass at addressing changes requested\n\nThe changes reflected in this commit (requested in PR #2790) are as follows:\n\n- Extended `INDEXING_SLICING` documentation to include the array type so that it is clearer when indexing operations are allowed.\n- Variable `ty` defined identically in multiple scopes was moved to an outer scope so it's only defined once.\n- Added a missing return statement to ensure only one lint is triggered by a scenario.\n- Prettified match statement with a `let` clause. (I learned something new!)\n- Added `&x[5..].iter().map(|x| 2 * x).collect::<Vec<i32>>()` and `&x[2..].iter().map(|x| 2 * x).collect::<Vec<i32>>()` to the test cases. The first _should trigger the lint/stderr_ and the second _should not_.", "tree": {"sha": "5eebccffded6c4aac17027d5f6c2f5606322ad28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5eebccffded6c4aac17027d5f6c2f5606322ad28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b59542acc9901a6568731541baa9f623c1991b3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJbKS8bAAoJEBfrkSLclYZDi4YP/RxwDSS+8sqA60up4HuG9gaN\n71Uielhk22bpU1pY/P00q+vEIk3vGj4MtZwafEFIh4UcdV5RLioH8s3V9RoHwRos\nEb9HyPK3bYdLp97saSMlh63hWtZxsANwJliIqo1JQE/1iushdj3S4fFmlcnI4kpO\nxEdHm1w0C5tArfBujJzWOWAwgci6ja+v76L7gMo4AuiyU9OyrKcaTaTSPxZyRbXa\n2IuCqgwy7zP6/V+kobrREfWeoCdg4ixNqyKTh7M05LMOpzvCjOYVuR3Gmx5BoNU5\nkVGm97G9y0ehAfcNSrmZFRa8ndit7QVwW05adeq7MEwvnHsCFX45dZO6/+DFQzh4\nTGR90ZxTH85A10HJvEbucBrFiRa1G4vMDKr92ClDvVxH2Bm61+zRdRQWCTSxjgWS\nxOTzu3TKIlyvNKDyi9MmTTT7gupzr7EfbIuHi5LwFKKHK7VIvKgwW7NQJaoMhPg7\n30vnGqxuJYoIoc9jdwKX9kjXCJ8ZH8TdZHXTdF86hfwyvg0zkYRR7IWlsgIbXyLw\ny6jnEQS1sLMZ152cxDSaKvTY1WPtw4jvl0a2hnb5ffV/qT7CekJA3qwA4NbILjpn\nBrQ0eAcfe9rQigJDV5KwzY8/ZaHyqwIjKkW5Kid1vQqoOVDp3s3vBCKkNJtw208d\n5FdzaVwhv740R/NkMdm2\n=rYqP\n-----END PGP SIGNATURE-----", "payload": "tree 5eebccffded6c4aac17027d5f6c2f5606322ad28\nparent a7c0ff3fa676aaa3e6d27a413c302abb0eba9805\nauthor Shea Newton <shnewto@gmail.com> 1528994516 +0000\ncommitter Shea Newton <shnewto@gmail.com> 1529425690 +0000\n\nSecond pass at addressing changes requested\n\nThe changes reflected in this commit (requested in PR #2790) are as follows:\n\n- Extended `INDEXING_SLICING` documentation to include the array type so that it is clearer when indexing operations are allowed.\n- Variable `ty` defined identically in multiple scopes was moved to an outer scope so it's only defined once.\n- Added a missing return statement to ensure only one lint is triggered by a scenario.\n- Prettified match statement with a `let` clause. (I learned something new!)\n- Added `&x[5..].iter().map(|x| 2 * x).collect::<Vec<i32>>()` and `&x[2..].iter().map(|x| 2 * x).collect::<Vec<i32>>()` to the test cases. The first _should trigger the lint/stderr_ and the second _should not_.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b59542acc9901a6568731541baa9f623c1991b3", "html_url": "https://github.com/rust-lang/rust/commit/8b59542acc9901a6568731541baa9f623c1991b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b59542acc9901a6568731541baa9f623c1991b3/comments", "author": {"login": "shnewto", "id": 5607902, "node_id": "MDQ6VXNlcjU2MDc5MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/5607902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shnewto", "html_url": "https://github.com/shnewto", "followers_url": "https://api.github.com/users/shnewto/followers", "following_url": "https://api.github.com/users/shnewto/following{/other_user}", "gists_url": "https://api.github.com/users/shnewto/gists{/gist_id}", "starred_url": "https://api.github.com/users/shnewto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shnewto/subscriptions", "organizations_url": "https://api.github.com/users/shnewto/orgs", "repos_url": "https://api.github.com/users/shnewto/repos", "events_url": "https://api.github.com/users/shnewto/events{/privacy}", "received_events_url": "https://api.github.com/users/shnewto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "shnewto", "id": 5607902, "node_id": "MDQ6VXNlcjU2MDc5MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/5607902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shnewto", "html_url": "https://github.com/shnewto", "followers_url": "https://api.github.com/users/shnewto/followers", "following_url": "https://api.github.com/users/shnewto/following{/other_user}", "gists_url": "https://api.github.com/users/shnewto/gists{/gist_id}", "starred_url": "https://api.github.com/users/shnewto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shnewto/subscriptions", "organizations_url": "https://api.github.com/users/shnewto/orgs", "repos_url": "https://api.github.com/users/shnewto/repos", "events_url": "https://api.github.com/users/shnewto/events{/privacy}", "received_events_url": "https://api.github.com/users/shnewto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7c0ff3fa676aaa3e6d27a413c302abb0eba9805", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7c0ff3fa676aaa3e6d27a413c302abb0eba9805", "html_url": "https://github.com/rust-lang/rust/commit/a7c0ff3fa676aaa3e6d27a413c302abb0eba9805"}], "stats": {"total": 187, "additions": 70, "deletions": 117}, "files": [{"sha": "01f9f45c589119c65df02ed56c2d2fd93618fe50", "filename": "clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 36, "deletions": 19, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/8b59542acc9901a6568731541baa9f623c1991b3/clippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b59542acc9901a6568731541baa9f623c1991b3/clippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findexing_slicing.rs?ref=8b59542acc9901a6568731541baa9f623c1991b3", "patch": "@@ -34,7 +34,7 @@ declare_clippy_lint! {\n }\n \n /// **What it does:** Checks for usage of indexing or slicing. Does not report\n-/// if we can tell that the indexing or slicing operations on an array are in\n+/// on arrays if we can tell that the indexing or slicing operations are in\n /// bounds.\n ///\n /// **Why is this bad?** Indexing and slicing can panic at runtime and there are\n@@ -44,18 +44,39 @@ declare_clippy_lint! {\n ///\n /// **Example:**\n /// ```rust\n+/// // Vector\n /// let x = vec![0; 5];\n+///\n /// // Bad\n /// x[2];\n /// &x[2..100];\n /// &x[2..];\n /// &x[..100];\n ///\n /// // Good\n-/// x.get(2)\n-/// x.get(2..100)\n-/// x.get(2..)\n-/// x.get(..100)\n+/// x.get(2);\n+/// x.get(2..100);\n+/// x.get(2..);\n+/// x.get(..100);\n+///\n+/// // Array\n+/// let y = [0, 1, 2, 3];\n+///\n+/// // Bad\n+/// y[10];\n+/// &y[10..100];\n+/// &y[10..];\n+/// &y[..100];\n+///\n+/// // Good\n+/// y[2];\n+/// &y[2..];\n+/// &y[..2];\n+/// &y[0..3];\n+/// y.get(10);\n+/// y.get(10..100);\n+/// y.get(10..);\n+/// y.get(..100);\n /// ```\n declare_clippy_lint! {\n     pub INDEXING_SLICING,\n@@ -75,14 +96,14 @@ impl LintPass for IndexingSlicing {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IndexingSlicing {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprIndex(ref array, ref index) = &expr.node {\n+            let ty = cx.tables.expr_ty(array);\n             match &index.node {\n                 // Both ExprStruct and ExprPath require this approach's checks\n                 // on the `range` returned by `higher::range(cx, index)`.\n                 // ExprStruct handles &x[n..m], &x[n..] and &x[..n].\n                 // ExprPath handles &x[..] and x[var]\n                 ExprStruct(..) | ExprPath(..) => {\n                     if let Some(range) = higher::range(cx, index) {\n-                        let ty = cx.tables.expr_ty(array);\n                         if let ty::TyArray(_, s) = ty.sty {\n                             let size: u128 = s.assert_usize(cx.tcx).unwrap().into();\n                             // Index is a constant range.\n@@ -94,27 +115,24 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IndexingSlicing {\n                                         expr.span,\n                                         \"range is out of bounds\",\n                                     );\n-                                } else {\n-                                    // Range is in bounds, ok.\n-                                    return;\n-                                }\n+                                } // Else range is in bounds, ok.\n+\n+                                return;\n                             }\n                         }\n \n-                        let help_msg;\n-                        match (range.start, range.end) {\n+                        let help_msg = match (range.start, range.end) {\n                             (None, Some(_)) => {\n-                                help_msg = \"Consider using `.get(..n)`or `.get_mut(..n)` instead\";\n+                                \"Consider using `.get(..n)`or `.get_mut(..n)` instead\"\n                             }\n                             (Some(_), None) => {\n-                                help_msg = \"Consider using `.get(n..)` or .get_mut(n..)` instead\";\n+                                \"Consider using `.get(n..)` or .get_mut(n..)` instead\"\n                             }\n                             (Some(_), Some(_)) => {\n-                                help_msg =\n-                                    \"Consider using `.get(n..m)` or `.get_mut(n..m)` instead\";\n+                                \"Consider using `.get(n..m)` or `.get_mut(n..m)` instead\"\n                             }\n-                            (None, None) => return, // [..] is ok\n-                        }\n+                            (None, None) => return, // [..] is ok.\n+                        };\n \n                         utils::span_help_and_lint(\n                             cx,\n@@ -135,7 +153,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IndexingSlicing {\n                 }\n                 ExprLit(..) => {\n                     // [n]\n-                    let ty = cx.tables.expr_ty(array);\n                     if let ty::TyArray(_, s) = ty.sty {\n                         let size: u128 = s.assert_usize(cx.tcx).unwrap().into();\n                         // Index is a constant uint."}, {"sha": "a22c9034346d612660a3241b393fc05b974d717e", "filename": "tests/ui/indexing_slicing.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b59542acc9901a6568731541baa9f623c1991b3/tests%2Fui%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b59542acc9901a6568731541baa9f623c1991b3/tests%2Fui%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing.rs?ref=8b59542acc9901a6568731541baa9f623c1991b3", "patch": "@@ -30,6 +30,8 @@ fn main() {\n     &x[5..];\n     &x[..4];\n     &x[..5];\n+    &x[5..].iter().map(|x| 2 * x).collect::<Vec<i32>>();\n+    &x[2..].iter().map(|x| 2 * x).collect::<Vec<i32>>(); // Ok\n \n     let y = &x;\n     y[0];"}, {"sha": "605a96e8b8c2dd99a25557c1fa3a9eaedc78690f", "filename": "tests/ui/indexing_slicing.stderr", "status": "modified", "additions": 32, "deletions": 98, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/8b59542acc9901a6568731541baa9f623c1991b3/tests%2Fui%2Findexing_slicing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b59542acc9901a6568731541baa9f623c1991b3/tests%2Fui%2Findexing_slicing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing.stderr?ref=8b59542acc9901a6568731541baa9f623c1991b3", "patch": "@@ -61,14 +61,6 @@ error: range is out of bounds\n 20 |     &x[1..5];\n    |      ^^^^^^^\n \n-error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:20:6\n-   |\n-20 |     &x[1..5];\n-   |      ^^^^^^^\n-   |\n-   = help: Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n-\n error: slicing may panic.\n   --> $DIR/indexing_slicing.rs:21:6\n    |\n@@ -91,181 +83,123 @@ error: range is out of bounds\n 26 |     &x[..=4];\n    |      ^^^^^^^\n \n-error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:26:6\n-   |\n-26 |     &x[..=4];\n-   |      ^^^^^^^\n-   |\n-   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n-\n error: range is out of bounds\n   --> $DIR/indexing_slicing.rs:30:6\n    |\n 30 |     &x[5..];\n    |      ^^^^^^\n \n-error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:30:6\n-   |\n-30 |     &x[5..];\n-   |      ^^^^^^\n-   |\n-   = help: Consider using `.get(n..)` or .get_mut(n..)` instead\n-\n error: range is out of bounds\n   --> $DIR/indexing_slicing.rs:32:6\n    |\n 32 |     &x[..5];\n    |      ^^^^^^\n \n-error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:32:6\n+error: range is out of bounds\n+  --> $DIR/indexing_slicing.rs:33:6\n    |\n-32 |     &x[..5];\n+33 |     &x[5..].iter().map(|x| 2 * x).collect::<Vec<i32>>();\n    |      ^^^^^^\n-   |\n-   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: indexing may panic.\n-  --> $DIR/indexing_slicing.rs:35:5\n+  --> $DIR/indexing_slicing.rs:37:5\n    |\n-35 |     y[0];\n+37 |     y[0];\n    |     ^^^^\n    |\n    = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:36:6\n+  --> $DIR/indexing_slicing.rs:38:6\n    |\n-36 |     &y[1..2];\n+38 |     &y[1..2];\n    |      ^^^^^^^\n    |\n    = help: Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:39:6\n+  --> $DIR/indexing_slicing.rs:41:6\n    |\n-39 |     &y[..=4];\n+41 |     &y[..=4];\n    |      ^^^^^^^\n    |\n    = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: const index is out of bounds\n-  --> $DIR/indexing_slicing.rs:42:5\n+  --> $DIR/indexing_slicing.rs:44:5\n    |\n-42 |     empty[0];\n+44 |     empty[0];\n    |     ^^^^^^^^\n \n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:43:6\n-   |\n-43 |     &empty[1..5];\n-   |      ^^^^^^^^^^^\n-\n-error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:43:6\n-   |\n-43 |     &empty[1..5];\n-   |      ^^^^^^^^^^^\n-   |\n-   = help: Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n-\n error: range is out of bounds\n   --> $DIR/indexing_slicing.rs:45:6\n    |\n-45 |     &empty[..=4];\n+45 |     &empty[1..5];\n    |      ^^^^^^^^^^^\n \n-error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:45:6\n-   |\n-45 |     &empty[..=4];\n-   |      ^^^^^^^^^^^\n-   |\n-   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n-\n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:50:6\n-   |\n-50 |     &empty[..=0];\n-   |      ^^^^^^^^^^^\n-\n-error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:50:6\n+  --> $DIR/indexing_slicing.rs:47:6\n    |\n-50 |     &empty[..=0];\n+47 |     &empty[..=4];\n    |      ^^^^^^^^^^^\n-   |\n-   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: range is out of bounds\n   --> $DIR/indexing_slicing.rs:52:6\n    |\n-52 |     &empty[1..];\n-   |      ^^^^^^^^^^\n-\n-error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:52:6\n-   |\n-52 |     &empty[1..];\n-   |      ^^^^^^^^^^\n-   |\n-   = help: Consider using `.get(n..)` or .get_mut(n..)` instead\n+52 |     &empty[..=0];\n+   |      ^^^^^^^^^^^\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:53:6\n+  --> $DIR/indexing_slicing.rs:54:6\n    |\n-53 |     &empty[..4];\n+54 |     &empty[1..];\n    |      ^^^^^^^^^^\n \n-error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:53:6\n+error: range is out of bounds\n+  --> $DIR/indexing_slicing.rs:55:6\n    |\n-53 |     &empty[..4];\n+55 |     &empty[..4];\n    |      ^^^^^^^^^^\n-   |\n-   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: indexing may panic.\n-  --> $DIR/indexing_slicing.rs:56:5\n+  --> $DIR/indexing_slicing.rs:58:5\n    |\n-56 |     v[0];\n+58 |     v[0];\n    |     ^^^^\n    |\n    = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n error: indexing may panic.\n-  --> $DIR/indexing_slicing.rs:57:5\n+  --> $DIR/indexing_slicing.rs:59:5\n    |\n-57 |     v[10];\n+59 |     v[10];\n    |     ^^^^^\n    |\n    = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:58:6\n+  --> $DIR/indexing_slicing.rs:60:6\n    |\n-58 |     &v[10..100];\n+60 |     &v[10..100];\n    |      ^^^^^^^^^^\n    |\n    = help: Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:59:6\n+  --> $DIR/indexing_slicing.rs:61:6\n    |\n-59 |     &v[10..];\n+61 |     &v[10..];\n    |      ^^^^^^^\n    |\n    = help: Consider using `.get(n..)` or .get_mut(n..)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:60:6\n+  --> $DIR/indexing_slicing.rs:62:6\n    |\n-60 |     &v[..100];\n+62 |     &v[..100];\n    |      ^^^^^^^^\n    |\n    = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n-error: aborting due to 36 previous errors\n+error: aborting due to 28 previous errors\n "}]}