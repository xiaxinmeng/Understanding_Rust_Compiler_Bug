{"sha": "dc2cc109419ac497ac24046297f452c9cced0ec0", "node_id": "C_kwDOAAsO6NoAKGRjMmNjMTA5NDE5YWM0OTdhYzI0MDQ2Mjk3ZjQ1MmM5Y2NlZDBlYzA", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-04T15:06:04Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-25T14:30:47Z"}, "message": "make const_err show up in future breakage reports", "tree": {"sha": "ac708a9a4f8188fade474d4eb0a4e2f89ac92565", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac708a9a4f8188fade474d4eb0a4e2f89ac92565"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc2cc109419ac497ac24046297f452c9cced0ec0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc2cc109419ac497ac24046297f452c9cced0ec0", "html_url": "https://github.com/rust-lang/rust/commit/dc2cc109419ac497ac24046297f452c9cced0ec0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc2cc109419ac497ac24046297f452c9cced0ec0/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1aabd8a4a6e1871f14e804302bd60dfcbffd5761", "url": "https://api.github.com/repos/rust-lang/rust/commits/1aabd8a4a6e1871f14e804302bd60dfcbffd5761", "html_url": "https://github.com/rust-lang/rust/commit/1aabd8a4a6e1871f14e804302bd60dfcbffd5761"}], "stats": {"total": 2008, "additions": 2008, "deletions": 0}, "files": [{"sha": "d52455e2576c926f9e2ca8afe094bb140863baca", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -289,6 +289,7 @@ declare_lint! {\n     \"constant evaluation encountered erroneous expression\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #71800 <https://github.com/rust-lang/rust/issues/71800>\",\n+        reason: FutureIncompatibilityReason::FutureReleaseErrorReportNow,\n     };\n     report_in_external_macro\n }"}, {"sha": "b44251efdea42cab06e388df0e585fc54a80f3df", "filename": "src/test/ui/array-slice-vec/array_const_index-0.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-0.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -12,3 +12,16 @@ LL | const B: i32 = (&A)[1];\n \n error: aborting due to previous error\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/array_const_index-0.rs:2:16\n+   |\n+LL | const B: i32 = (&A)[1];\n+   | ---------------^^^^^^^-\n+   |                |\n+   |                index out of bounds: the length is 0 but the index is 1\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "8beebafb04c32a5179b115025fd28c171db5c54c", "filename": "src/test/ui/array-slice-vec/array_const_index-1.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-1.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -12,3 +12,16 @@ LL | const B: i32 = A[1];\n \n error: aborting due to previous error\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/array_const_index-1.rs:2:16\n+   |\n+LL | const B: i32 = A[1];\n+   | ---------------^^^^-\n+   |                |\n+   |                index out of bounds: the length is 0 but the index is 1\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "f04ea0b74770551a7a41c95587af07e86b190ca9", "filename": "src/test/ui/associated-consts/defaults-not-assumed-fail.stderr", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -29,3 +29,28 @@ LL |     assert_eq!(<() as Tr>::B, 0);    // causes the error above\n error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/defaults-not-assumed-fail.rs:8:19\n+   |\n+LL |     const B: u8 = Self::A + 1;\n+   |     --------------^^^^^^^^^^^-\n+   |                   |\n+   |                   attempt to compute `u8::MAX + 1_u8`, which would overflow\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: erroneous constant used\n+  --> $DIR/defaults-not-assumed-fail.rs:34:5\n+   |\n+LL |     assert_eq!(<() as Tr>::B, 0);    // causes the error above\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}, {"sha": "89f8f2ffc55cb88e40b96a6f79c8d36ec12307aa", "filename": "src/test/ui/consts/assert-type-intrinsics.stderr", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -37,3 +37,45 @@ LL | |     };\n \n error: aborting due to 3 previous errors\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/assert-type-intrinsics.rs:14:9\n+   |\n+LL | /     const _BAD1: () = unsafe {\n+LL | |         MaybeUninit::<!>::uninit().assume_init();\n+   | |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to instantiate uninhabited type `!`\n+LL | |     };\n+   | |______-\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/assert-type-intrinsics.rs:17:9\n+   |\n+LL | /     const _BAD2: () = unsafe {\n+LL | |         intrinsics::assert_uninit_valid::<bool>();\n+   | |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to leave type `bool` uninitialized, which is invalid\n+LL | |     };\n+   | |______-\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/assert-type-intrinsics.rs:20:9\n+   |\n+LL | /     const _BAD3: () = unsafe {\n+LL | |         intrinsics::assert_zero_valid::<&'static i32>();\n+   | |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to zero-initialize type `&i32`, which is invalid\n+LL | |     };\n+   | |______-\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "cccf62a8ff6d3b6f44ee5bb9cb93a93227c261d2", "filename": "src/test/ui/consts/assoc_const_generic_impl.stderr", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -22,3 +22,20 @@ LL |         let () = Self::I_AM_ZERO_SIZED;\n \n error: aborting due to previous error; 1 warning emitted\n \n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/assoc_const_generic_impl.rs:11:34\n+   |\n+LL |     const I_AM_ZERO_SIZED: ()  = [()][std::mem::size_of::<Self>()];\n+   |     -----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                                  |\n+   |                                  index out of bounds: the length is 1 but the index is 4\n+   |\n+note: the lint level is defined here\n+  --> $DIR/assoc_const_generic_impl.rs:3:9\n+   |\n+LL | #![warn(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "385e770eb4f0128e973515aa90e37eafdd257183", "filename": "src/test/ui/consts/const-err-early.stderr", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -60,3 +60,88 @@ LL | pub const E: u8 = [5u8][1];\n \n error: aborting due to 5 previous errors\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-err-early.rs:3:19\n+   |\n+LL | pub const A: i8 = -i8::MIN;\n+   | ------------------^^^^^^^^-\n+   |                   |\n+   |                   attempt to negate `i8::MIN`, which would overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-err-early.rs:1:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-err-early.rs:5:19\n+   |\n+LL | pub const B: u8 = 200u8 + 200u8;\n+   | ------------------^^^^^^^^^^^^^-\n+   |                   |\n+   |                   attempt to compute `200_u8 + 200_u8`, which would overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-err-early.rs:1:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-err-early.rs:7:19\n+   |\n+LL | pub const C: u8 = 200u8 * 4;\n+   | ------------------^^^^^^^^^-\n+   |                   |\n+   |                   attempt to compute `200_u8 * 4_u8`, which would overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-err-early.rs:1:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-err-early.rs:9:19\n+   |\n+LL | pub const D: u8 = 42u8 - (42u8 + 1);\n+   | ------------------^^^^^^^^^^^^^^^^^-\n+   |                   |\n+   |                   attempt to compute `42_u8 - 43_u8`, which would overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-err-early.rs:1:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-err-early.rs:11:19\n+   |\n+LL | pub const E: u8 = [5u8][1];\n+   | ------------------^^^^^^^^-\n+   |                   |\n+   |                   index out of bounds: the length is 1 but the index is 1\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-err-early.rs:1:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "a195459ff0884e40d3a32cbeb4bcf6a60579e09a", "filename": "src/test/ui/consts/const-err-multi.stderr", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -49,3 +49,71 @@ LL | pub const D: i8 = 50 - A;\n \n error: aborting due to 4 previous errors\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-err-multi.rs:3:19\n+   |\n+LL | pub const A: i8 = -i8::MIN;\n+   | ------------------^^^^^^^^-\n+   |                   |\n+   |                   attempt to negate `i8::MIN`, which would overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-err-multi.rs:1:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-err-multi.rs:6:19\n+   |\n+LL | pub const B: i8 = A;\n+   | ------------------^-\n+   |                   |\n+   |                   referenced constant has errors\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-err-multi.rs:1:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-err-multi.rs:9:19\n+   |\n+LL | pub const C: u8 = A as u8;\n+   | ------------------^-------\n+   |                   |\n+   |                   referenced constant has errors\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-err-multi.rs:1:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-err-multi.rs:12:24\n+   |\n+LL | pub const D: i8 = 50 - A;\n+   | -----------------------^-\n+   |                        |\n+   |                        referenced constant has errors\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-err-multi.rs:1:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "3b03e702dc4aec7d6342f1bcdef32d743d568aa3", "filename": "src/test/ui/consts/const-err.stderr", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -29,3 +29,20 @@ LL |     black_box((FOO, FOO));\n error: aborting due to 2 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/const-err.rs:11:17\n+   |\n+LL | const FOO: u8 = [5u8][1];\n+   | ----------------^^^^^^^^-\n+   |                 |\n+   |                 index out of bounds: the length is 1 but the index is 1\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-err.rs:5:9\n+   |\n+LL | #![warn(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "f88bf4454260bc1d09587ae021863993ba787c57", "filename": "src/test/ui/consts/const-eval/conditional_array_execution.stderr", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -33,3 +33,36 @@ LL |     println!(\"{}\", FOO);\n error: aborting due to previous error; 2 warnings emitted\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/conditional_array_execution.rs:7:19\n+   |\n+LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n+   | ------------------^^^^^---------------------------\n+   |                   |\n+   |                   attempt to compute `5_u32 - 6_u32`, which would overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/conditional_array_execution.rs:3:9\n+   |\n+LL | #![warn(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+warning: erroneous constant used\n+  --> $DIR/conditional_array_execution.rs:12:20\n+   |\n+LL |     println!(\"{}\", FOO);\n+   |                    ^^^ referenced constant has errors\n+   |\n+note: the lint level is defined here\n+  --> $DIR/conditional_array_execution.rs:3:9\n+   |\n+LL | #![warn(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: this warning originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}, {"sha": "1c74b978827c64a830254800e224aa1803331d71", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-2.stderr", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-2.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -12,3 +12,20 @@ LL |         NEG_NEG_128 => println!(\"A\"),\n \n error: aborting due to 2 previous errors\n \n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow-2.rs:11:25\n+   |\n+LL | const NEG_NEG_128: i8 = -NEG_128;\n+   | ------------------------^^^^^^^^-\n+   |                         |\n+   |                         attempt to negate `i8::MIN`, which would overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow-2.rs:4:36\n+   |\n+LL | #![allow(unused_imports, warnings, const_err)]\n+   |                                    ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "948ead521ea34100c9e50461c81136a315730427", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2.stderr", "status": "modified", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -107,3 +107,153 @@ LL | |      );\n \n error: aborting due to 8 previous errors\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2.rs:14:6\n+   |\n+LL | / const VALS_I8: (i8,) =\n+LL | |     (\n+LL | |      i8::MIN - 1,\n+   | |      ^^^^^^^^^^^ attempt to compute `i8::MIN - 1_i8`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2.rs:21:6\n+   |\n+LL | / const VALS_I16: (i16,) =\n+LL | |     (\n+LL | |      i16::MIN - 1,\n+   | |      ^^^^^^^^^^^^ attempt to compute `i16::MIN - 1_i16`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2.rs:28:6\n+   |\n+LL | / const VALS_I32: (i32,) =\n+LL | |     (\n+LL | |      i32::MIN - 1,\n+   | |      ^^^^^^^^^^^^ attempt to compute `i32::MIN - 1_i32`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2.rs:35:6\n+   |\n+LL | / const VALS_I64: (i64,) =\n+LL | |     (\n+LL | |      i64::MIN - 1,\n+   | |      ^^^^^^^^^^^^ attempt to compute `i64::MIN - 1_i64`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2.rs:42:6\n+   |\n+LL | / const VALS_U8: (u8,) =\n+LL | |     (\n+LL | |      u8::MIN - 1,\n+   | |      ^^^^^^^^^^^ attempt to compute `0_u8 - 1_u8`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2.rs:48:6\n+   |\n+LL | / const VALS_U16: (u16,) = (\n+LL | |      u16::MIN - 1,\n+   | |      ^^^^^^^^^^^^ attempt to compute `0_u16 - 1_u16`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2.rs:54:6\n+   |\n+LL | / const VALS_U32: (u32,) = (\n+LL | |      u32::MIN - 1,\n+   | |      ^^^^^^^^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2.rs:61:6\n+   |\n+LL | / const VALS_U64: (u64,) =\n+LL | |     (\n+LL | |      u64::MIN - 1,\n+   | |      ^^^^^^^^^^^^ attempt to compute `0_u64 - 1_u64`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "5db6a49a98b0c23d44d082a15aa9def30cd97931", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2b.stderr", "status": "modified", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -107,3 +107,153 @@ LL | |      );\n \n error: aborting due to 8 previous errors\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2b.rs:14:6\n+   |\n+LL | / const VALS_I8: (i8,) =\n+LL | |     (\n+LL | |      i8::MAX + 1,\n+   | |      ^^^^^^^^^^^ attempt to compute `i8::MAX + 1_i8`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2b.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2b.rs:21:6\n+   |\n+LL | / const VALS_I16: (i16,) =\n+LL | |     (\n+LL | |      i16::MAX + 1,\n+   | |      ^^^^^^^^^^^^ attempt to compute `i16::MAX + 1_i16`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2b.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2b.rs:28:6\n+   |\n+LL | / const VALS_I32: (i32,) =\n+LL | |     (\n+LL | |      i32::MAX + 1,\n+   | |      ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2b.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2b.rs:35:6\n+   |\n+LL | / const VALS_I64: (i64,) =\n+LL | |     (\n+LL | |      i64::MAX + 1,\n+   | |      ^^^^^^^^^^^^ attempt to compute `i64::MAX + 1_i64`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2b.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2b.rs:42:6\n+   |\n+LL | / const VALS_U8: (u8,) =\n+LL | |     (\n+LL | |      u8::MAX + 1,\n+   | |      ^^^^^^^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2b.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2b.rs:48:6\n+   |\n+LL | / const VALS_U16: (u16,) = (\n+LL | |      u16::MAX + 1,\n+   | |      ^^^^^^^^^^^^ attempt to compute `u16::MAX + 1_u16`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2b.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2b.rs:54:6\n+   |\n+LL | / const VALS_U32: (u32,) = (\n+LL | |      u32::MAX + 1,\n+   | |      ^^^^^^^^^^^^ attempt to compute `u32::MAX + 1_u32`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2b.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2b.rs:61:6\n+   |\n+LL | / const VALS_U64: (u64,) =\n+LL | |     (\n+LL | |      u64::MAX + 1,\n+   | |      ^^^^^^^^^^^^ attempt to compute `u64::MAX + 1_u64`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2b.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "ec3f3c110596bb2f5bd4d0b0f290173c18ca3136", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2c.stderr", "status": "modified", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -107,3 +107,153 @@ LL | |      );\n \n error: aborting due to 8 previous errors\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2c.rs:14:6\n+   |\n+LL | / const VALS_I8: (i8,) =\n+LL | |     (\n+LL | |      i8::MIN * 2,\n+   | |      ^^^^^^^^^^^ attempt to compute `i8::MIN * 2_i8`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2c.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2c.rs:21:6\n+   |\n+LL | / const VALS_I16: (i16,) =\n+LL | |     (\n+LL | |      i16::MIN * 2,\n+   | |      ^^^^^^^^^^^^ attempt to compute `i16::MIN * 2_i16`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2c.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2c.rs:28:6\n+   |\n+LL | / const VALS_I32: (i32,) =\n+LL | |     (\n+LL | |      i32::MIN * 2,\n+   | |      ^^^^^^^^^^^^ attempt to compute `i32::MIN * 2_i32`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2c.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2c.rs:35:6\n+   |\n+LL | / const VALS_I64: (i64,) =\n+LL | |     (\n+LL | |      i64::MIN * 2,\n+   | |      ^^^^^^^^^^^^ attempt to compute `i64::MIN * 2_i64`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2c.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2c.rs:42:6\n+   |\n+LL | / const VALS_U8: (u8,) =\n+LL | |     (\n+LL | |      u8::MAX * 2,\n+   | |      ^^^^^^^^^^^ attempt to compute `u8::MAX * 2_u8`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2c.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2c.rs:48:6\n+   |\n+LL | / const VALS_U16: (u16,) = (\n+LL | |      u16::MAX * 2,\n+   | |      ^^^^^^^^^^^^ attempt to compute `u16::MAX * 2_u16`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2c.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2c.rs:54:6\n+   |\n+LL | / const VALS_U32: (u32,) = (\n+LL | |      u32::MAX * 2,\n+   | |      ^^^^^^^^^^^^ attempt to compute `u32::MAX * 2_u32`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2c.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2c.rs:61:6\n+   |\n+LL | / const VALS_U64: (u64,) =\n+LL | |     (\n+LL | |      u64::MAX * 2,\n+   | |      ^^^^^^^^^^^^ attempt to compute `u64::MAX * 2_u64`, which would overflow\n+LL | |      );\n+   | |_______-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-overflow2c.rs:8:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "fb4c92861cb74a96cc9e949ece8898640fdb37e8", "filename": "src/test/ui/consts/const-eval/const-eval-query-stack.stderr", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -35,3 +35,20 @@ query stack during panic:\n #1 [optimized_mir] optimizing MIR for `main`\n #2 [collect_and_partition_mono_items] collect_and_partition_mono_items\n end of query stack\n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/const-eval-query-stack.rs:20:16\n+   |\n+LL | const X: i32 = 1 / 0;\n+   | ---------------^^^^^-\n+   |                |\n+   |                attempt to divide `1_i32` by zero\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-query-stack.rs:19:8\n+   |\n+LL | #[warn(const_err)]\n+   |        ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "9fcb27f04ab99681c6c34cd430bd2b8a2097ea17", "filename": "src/test/ui/consts/const-eval/const-pointer-values-in-various-types.64bit.stderr", "status": "modified", "additions": 260, "deletions": 0, "changes": 260, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.64bit.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -321,3 +321,263 @@ LL |     const STR_CHAR_UNION: char = unsafe { Nonsense { stringy: \"3\" }.charact\n error: aborting due to 29 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:29:43\n+   |\n+LL |     const I32_REF_U8_UNION: u8 = unsafe { Nonsense { int_32_ref: &3 }.uint_8 };\n+   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                           |\n+   |                                           unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:33:45\n+   |\n+LL |     const I32_REF_U16_UNION: u16 = unsafe { Nonsense { int_32_ref: &3 }.uint_16 };\n+   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                             |\n+   |                                             unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:37:45\n+   |\n+LL |     const I32_REF_U32_UNION: u32 = unsafe { Nonsense { int_32_ref: &3 }.uint_32 };\n+   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                             |\n+   |                                             unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:47:43\n+   |\n+LL |     const I32_REF_I8_UNION: i8 = unsafe { Nonsense { int_32_ref: &3 }.int_8 };\n+   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                           |\n+   |                                           unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:51:45\n+   |\n+LL |     const I32_REF_I16_UNION: i16 = unsafe { Nonsense { int_32_ref: &3 }.int_16 };\n+   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                             |\n+   |                                             unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:55:45\n+   |\n+LL |     const I32_REF_I32_UNION: i32 = unsafe { Nonsense { int_32_ref: &3 }.int_32 };\n+   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                             |\n+   |                                             unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:65:45\n+   |\n+LL |     const I32_REF_F32_UNION: f32 = unsafe { Nonsense { int_32_ref: &3 }.float_32 };\n+   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                             |\n+   |                                             unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:72:47\n+   |\n+LL |     const I32_REF_BOOL_UNION: bool = unsafe { Nonsense { int_32_ref: &3 }.truthy_falsey };\n+   |     ------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                               |\n+   |                                               unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:76:47\n+   |\n+LL |     const I32_REF_CHAR_UNION: char = unsafe { Nonsense { int_32_ref: &3 }.character };\n+   |     ------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                               |\n+   |                                               unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:80:39\n+   |\n+LL |     const STR_U8_UNION: u8 = unsafe { Nonsense { stringy: \"3\" }.uint_8 };\n+   |     ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                       |\n+   |                                       unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:84:41\n+   |\n+LL |     const STR_U16_UNION: u16 = unsafe { Nonsense { stringy: \"3\" }.uint_16 };\n+   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                         |\n+   |                                         unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:88:41\n+   |\n+LL |     const STR_U32_UNION: u32 = unsafe { Nonsense { stringy: \"3\" }.uint_32 };\n+   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                         |\n+   |                                         unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:95:43\n+   |\n+LL |     const STR_U128_UNION: u128 = unsafe { Nonsense { stringy: \"3\" }.uint_128 };\n+   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                           |\n+   |                                           unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:99:39\n+   |\n+LL |     const STR_I8_UNION: i8 = unsafe { Nonsense { stringy: \"3\" }.int_8 };\n+   |     ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                       |\n+   |                                       unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:103:41\n+   |\n+LL |     const STR_I16_UNION: i16 = unsafe { Nonsense { stringy: \"3\" }.int_16 };\n+   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                         |\n+   |                                         unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:107:41\n+   |\n+LL |     const STR_I32_UNION: i32 = unsafe { Nonsense { stringy: \"3\" }.int_32 };\n+   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                         |\n+   |                                         unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:114:43\n+   |\n+LL |     const STR_I128_UNION: i128 = unsafe { Nonsense { stringy: \"3\" }.int_128 };\n+   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                           |\n+   |                                           unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:118:41\n+   |\n+LL |     const STR_F32_UNION: f32 = unsafe { Nonsense { stringy: \"3\" }.float_32 };\n+   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                         |\n+   |                                         unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:125:43\n+   |\n+LL |     const STR_BOOL_UNION: bool = unsafe { Nonsense { stringy: \"3\" }.truthy_falsey };\n+   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                           |\n+   |                                           unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:129:43\n+   |\n+LL |     const STR_CHAR_UNION: char = unsafe { Nonsense { stringy: \"3\" }.character };\n+   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                           |\n+   |                                           unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "daf3d8927c19a3a99380dc14e2a5b2b9321e4871", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.stderr", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -21,3 +21,79 @@ LL |     x(y)\n error: aborting due to 2 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/const_fn_ptr_fail2.rs:12:5\n+   |\n+LL |     x(y)\n+   |     ^^^^\n+   |     |\n+   |     calling non-const function `double`\n+   |     inside `bar` at $DIR/const_fn_ptr_fail2.rs:12:5\n+   |     inside `Y` at $DIR/const_fn_ptr_fail2.rs:15:18\n+...\n+LL | const Y: usize = bar(X, 2); // FIXME: should fail to typeck someday\n+   | ---------------------------\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const_fn_ptr_fail2.rs:4:10\n+   |\n+LL | #![allow(const_err)]\n+   |          ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/const_fn_ptr_fail2.rs:12:5\n+   |\n+LL |     x(y)\n+   |     ^^^^\n+   |     |\n+   |     calling non-const function `double`\n+   |     inside `bar` at $DIR/const_fn_ptr_fail2.rs:12:5\n+   |     inside `Z` at $DIR/const_fn_ptr_fail2.rs:16:18\n+...\n+LL | const Z: usize = bar(double, 2); // FIXME: should fail to typeck someday\n+   | --------------------------------\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const_fn_ptr_fail2.rs:4:10\n+   |\n+LL | #![allow(const_err)]\n+   |          ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+warning: erroneous constant used\n+  --> $DIR/const_fn_ptr_fail2.rs:19:5\n+   |\n+LL |     assert_eq!(Y, 4);\n+   |     ^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const_fn_ptr_fail2.rs:4:10\n+   |\n+LL | #![allow(const_err)]\n+   |          ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: this warning originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+Future breakage diagnostic:\n+warning: erroneous constant used\n+  --> $DIR/const_fn_ptr_fail2.rs:21:5\n+   |\n+LL |     assert_eq!(Z, 4);\n+   |     ^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const_fn_ptr_fail2.rs:4:10\n+   |\n+LL | #![allow(const_err)]\n+   |          ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: this warning originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}, {"sha": "9057b58ded9da6d1b30d6e07c29577ab55e28c22", "filename": "src/test/ui/consts/const-eval/erroneous-const.stderr", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -41,3 +41,20 @@ LL | pub static FOO: () = no_codegen::<i32>();\n error: aborting due to previous error; 2 warnings emitted\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/erroneous-const.rs:6:22\n+   |\n+LL |     const VOID: () = [()][2];\n+   |     -----------------^^^^^^^-\n+   |                      |\n+   |                      index out of bounds: the length is 1 but the index is 2\n+   |\n+note: the lint level is defined here\n+  --> $DIR/erroneous-const.rs:2:9\n+   |\n+LL | #![warn(const_err, unconditional_panic)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "bf6cc8410a7ee1905db27277210ab4a66c686b61", "filename": "src/test/ui/consts/const-eval/erroneous-const2.stderr", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -35,3 +35,20 @@ LL |         let _ = PrintName::<i32>::VOID;\n error: aborting due to previous error; 2 warnings emitted\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/erroneous-const2.rs:6:22\n+   |\n+LL |     const VOID: () = [()][2];\n+   |     -----------------^^^^^^^-\n+   |                      |\n+   |                      index out of bounds: the length is 1 but the index is 2\n+   |\n+note: the lint level is defined here\n+  --> $DIR/erroneous-const2.rs:2:9\n+   |\n+LL | #![warn(const_err, unconditional_panic)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "7b3e46fccca7b8e8fce0c96c8bc51dce4fedbc40", "filename": "src/test/ui/consts/const-eval/index-out-of-bounds-never-type.stderr", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -22,3 +22,20 @@ LL |     let _ = PrintName::<T>::VOID;\n \n error: aborting due to previous error; 1 warning emitted\n \n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/index-out-of-bounds-never-type.rs:10:61\n+   |\n+LL |     const VOID: ! = { let x = 0 * std::mem::size_of::<T>(); [][x] };\n+   |     --------------------------------------------------------^^^^^---\n+   |                                                             |\n+   |                                                             index out of bounds: the length is 0 but the index is 0\n+   |\n+note: the lint level is defined here\n+  --> $DIR/index-out-of-bounds-never-type.rs:4:9\n+   |\n+LL | #![warn(const_err, unconditional_panic)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "53ed32638ced2333834af9e06c4b0bef55a1d6ee", "filename": "src/test/ui/consts/const-eval/issue-43197.stderr", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -60,3 +60,69 @@ LL |     println!(\"{} {}\", X, Y);\n error: aborting due to 2 previous errors; 4 warnings emitted\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/issue-43197.rs:10:20\n+   |\n+LL |     const X: u32 = 0 - 1;\n+   |     ---------------^^^^^-\n+   |                    |\n+   |                    attempt to compute `0_u32 - 1_u32`, which would overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-43197.rs:3:9\n+   |\n+LL | #![warn(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/issue-43197.rs:13:24\n+   |\n+LL |     const Y: u32 = foo(0 - 1);\n+   |     -------------------^^^^^--\n+   |                        |\n+   |                        attempt to compute `0_u32 - 1_u32`, which would overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-43197.rs:3:9\n+   |\n+LL | #![warn(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+warning: erroneous constant used\n+  --> $DIR/issue-43197.rs:16:23\n+   |\n+LL |     println!(\"{} {}\", X, Y);\n+   |                       ^ referenced constant has errors\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-43197.rs:3:9\n+   |\n+LL | #![warn(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: this warning originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+Future breakage diagnostic:\n+warning: erroneous constant used\n+  --> $DIR/issue-43197.rs:16:26\n+   |\n+LL |     println!(\"{} {}\", X, Y);\n+   |                          ^ referenced constant has errors\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-43197.rs:3:9\n+   |\n+LL | #![warn(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: this warning originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}, {"sha": "5ecdb7ef5568b497315b9de06f2e6389b573f230", "filename": "src/test/ui/consts/const-eval/issue-44578.stderr", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -7,3 +7,36 @@ LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/issue-44578.rs:15:24\n+   |\n+LL |     const AMT: usize = [A::AMT][(A::AMT > B::AMT) as usize];\n+   |     -------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                        |\n+   |                        index out of bounds: the length is 1 but the index is 1\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-44578.rs:3:10\n+   |\n+LL | #![allow(const_err)]\n+   |          ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+warning: erroneous constant used\n+  --> $DIR/issue-44578.rs:27:20\n+   |\n+LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-44578.rs:3:10\n+   |\n+LL | #![allow(const_err)]\n+   |          ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: this warning originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}, {"sha": "67af3b2b1d3aee8b00ba331850678d7ff87295da", "filename": "src/test/ui/consts/const-eval/issue-50814-2.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -25,3 +25,16 @@ LL |     println!(\"{:x}\", foo::<()>() as *const usize as usize);\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/issue-50814-2.rs:14:24\n+   |\n+LL |     const BAR: usize = [5, 6, 7][T::BOO];\n+   |     -------------------^^^^^^^^^^^^^^^^^-\n+   |                        |\n+   |                        index out of bounds: the length is 3 but the index is 42\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "b82bc9ca2f81ac867032a7a81536fd7f088f1050", "filename": "src/test/ui/consts/const-eval/issue-50814.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -25,3 +25,16 @@ LL |     foo(0);\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/issue-50814.rs:15:21\n+   |\n+LL |     const MAX: u8 = A::MAX + B::MAX;\n+   |     ----------------^^^^^^^^^^^^^^^-\n+   |                     |\n+   |                     attempt to compute `u8::MAX + u8::MAX`, which would overflow\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "1a7d386142097d61943ecfdfac17cdf057d4bd64", "filename": "src/test/ui/consts/const-eval/partial_ptr_overwrite.stderr", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpartial_ptr_overwrite.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpartial_ptr_overwrite.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpartial_ptr_overwrite.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -18,3 +18,22 @@ LL | | };\n \n error: aborting due to previous error\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/partial_ptr_overwrite.rs:8:9\n+   |\n+LL | / const PARTIAL_OVERWRITE: () = {\n+LL | |     let mut p = &42;\n+LL | |     unsafe {\n+LL | |         let ptr: *mut _ = &mut p;\n+LL | |         *(ptr as *mut u8) = 123;\n+   | |         ^^^^^^^^^^^^^^^^^^^^^^^ unable to overwrite parts of a pointer in memory at alloc4\n+...  |\n+LL | |     let x = *p;\n+LL | | };\n+   | |__-\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "be845339dfe67d80efe22237bc3c6ec1b8428550", "filename": "src/test/ui/consts/const-eval/promoted_errors.noopt.stderr", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -85,3 +85,53 @@ LL | | };\n \n warning: 7 warnings emitted\n \n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/promoted_errors.rs:15:5\n+   |\n+LL |       0 - 1\n+   |       ^^^^^\n+   |       |\n+   |       attempt to compute `0_u32 - 1_u32`, which would overflow\n+   |       inside `overflow` at $DIR/promoted_errors.rs:15:5\n+   |       inside `X` at $DIR/promoted_errors.rs:43:29\n+...\n+LL | / const X: () = {\n+LL | |     let _x: &'static u32 = &overflow();\n+LL | |\n+LL | |\n+...  |\n+LL | |     let _x: &'static i32 = &oob();\n+LL | | };\n+   | |__-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:11:9\n+   |\n+LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/promoted_errors.rs:43:28\n+   |\n+LL | / const X: () = {\n+LL | |     let _x: &'static u32 = &overflow();\n+   | |                            ^^^^^^^^^^^ referenced constant has errors\n+LL | |\n+LL | |\n+...  |\n+LL | |     let _x: &'static i32 = &oob();\n+LL | | };\n+   | |__-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:11:9\n+   |\n+LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "c91d52336c36d9f997f2f443d1bee837744c541a", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt.stderr", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -86,3 +86,54 @@ LL | | };\n \n warning: 7 warnings emitted\n \n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/promoted_errors.rs:21:5\n+   |\n+LL |       1 / 0\n+   |       ^^^^^\n+   |       |\n+   |       attempt to divide `1_i32` by zero\n+   |       inside `div_by_zero1` at $DIR/promoted_errors.rs:21:5\n+   |       inside `X` at $DIR/promoted_errors.rs:46:29\n+...\n+LL | / const X: () = {\n+LL | |     let _x: &'static u32 = &overflow();\n+LL | |\n+LL | |\n+...  |\n+LL | |     let _x: &'static i32 = &oob();\n+LL | | };\n+   | |__-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:11:9\n+   |\n+LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/promoted_errors.rs:46:28\n+   |\n+LL | / const X: () = {\n+LL | |     let _x: &'static u32 = &overflow();\n+LL | |\n+LL | |\n+LL | |     let _x: &'static i32 = &div_by_zero1();\n+   | |                            ^^^^^^^^^^^^^^^ referenced constant has errors\n+...  |\n+LL | |     let _x: &'static i32 = &oob();\n+LL | | };\n+   | |__-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:11:9\n+   |\n+LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "be845339dfe67d80efe22237bc3c6ec1b8428550", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt_with_overflow_checks.stderr", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -85,3 +85,53 @@ LL | | };\n \n warning: 7 warnings emitted\n \n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/promoted_errors.rs:15:5\n+   |\n+LL |       0 - 1\n+   |       ^^^^^\n+   |       |\n+   |       attempt to compute `0_u32 - 1_u32`, which would overflow\n+   |       inside `overflow` at $DIR/promoted_errors.rs:15:5\n+   |       inside `X` at $DIR/promoted_errors.rs:43:29\n+...\n+LL | / const X: () = {\n+LL | |     let _x: &'static u32 = &overflow();\n+LL | |\n+LL | |\n+...  |\n+LL | |     let _x: &'static i32 = &oob();\n+LL | | };\n+   | |__-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:11:9\n+   |\n+LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/promoted_errors.rs:43:28\n+   |\n+LL | / const X: () = {\n+LL | |     let _x: &'static u32 = &overflow();\n+   | |                            ^^^^^^^^^^^ referenced constant has errors\n+LL | |\n+LL | |\n+...  |\n+LL | |     let _x: &'static i32 = &oob();\n+LL | | };\n+   | |__-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:11:9\n+   |\n+LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "56d66827626b9a9476ac0463d0cc5fbdab1efb78", "filename": "src/test/ui/consts/const-eval/pub_const_err.stderr", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -16,3 +16,20 @@ LL | #![warn(const_err)]\n \n warning: 1 warning emitted\n \n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/pub_const_err.rs:6:20\n+   |\n+LL | pub const Z: u32 = 0 - 1;\n+   | -------------------^^^^^-\n+   |                    |\n+   |                    attempt to compute `0_u32 - 1_u32`, which would overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/pub_const_err.rs:2:9\n+   |\n+LL | #![warn(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "202ea781e975df18d5b8ac9222b2b89890c0a409", "filename": "src/test/ui/consts/const-eval/pub_const_err_bin.stderr", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -16,3 +16,20 @@ LL | #![warn(const_err)]\n \n warning: 1 warning emitted\n \n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/pub_const_err_bin.rs:4:20\n+   |\n+LL | pub const Z: u32 = 0 - 1;\n+   | -------------------^^^^^-\n+   |                    |\n+   |                    attempt to compute `0_u32 - 1_u32`, which would overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/pub_const_err_bin.rs:2:9\n+   |\n+LL | #![warn(const_err)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "bfc076aa5e64f1b6b48f940ab86753a275fe99a7", "filename": "src/test/ui/consts/const-eval/unused-broken-const.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -12,3 +12,16 @@ LL | const FOO: i32 = [][0];\n \n error: aborting due to previous error\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/unused-broken-const.rs:5:18\n+   |\n+LL | const FOO: i32 = [][0];\n+   | -----------------^^^^^-\n+   |                  |\n+   |                  index out of bounds: the length is 0 but the index is 0\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "205ee92dfd7cf28ba7c6a66767b3f67816e785b0", "filename": "src/test/ui/consts/const-external-macro-const-err.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -11,3 +11,15 @@ LL |     static_assert!(2 + 2 == 5);\n \n error: aborting due to previous error\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-external-macro-const-err.rs:12:5\n+   |\n+LL |     static_assert!(2 + 2 == 5);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: this error originates in the macro `static_assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}, {"sha": "0c10783476abc6d666b0a4d15d4049e66913e8ee", "filename": "src/test/ui/consts/const-len-underflow-separate-spans.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -19,3 +19,16 @@ LL |     let a: [i8; LEN] = unimplemented!();\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-len-underflow-separate-spans.rs:7:20\n+   |\n+LL | const LEN: usize = ONE - TWO;\n+   | -------------------^^^^^^^^^-\n+   |                    |\n+   |                    attempt to compute `1_usize - 2_usize`, which would overflow\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "a60cd16f05a18968aef3936f9be238a406fe2bf5", "filename": "src/test/ui/consts/const-prop-read-static-in-const.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -20,3 +20,16 @@ LL | const TEST: u8 = MY_STATIC;\n \n error: aborting due to previous error; 1 warning emitted\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-prop-read-static-in-const.rs:5:18\n+   |\n+LL | const TEST: u8 = MY_STATIC;\n+   | -----------------^^^^^^^^^-\n+   |                  |\n+   |                  constant accesses static\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "c6e0b321124b1e52792a49f2c379fdd1bdf8b7c2", "filename": "src/test/ui/consts/const-size_of_val-align_of_val-extern-type.stderr", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -23,3 +23,29 @@ LL | const _ALIGN: usize = unsafe { min_align_of_val(&4 as *const i32 as *const\n \n error: aborting due to 2 previous errors\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-size_of_val-align_of_val-extern-type.rs:11:31\n+   |\n+LL | const _SIZE: usize = unsafe { size_of_val(&4 as *const i32 as *const Opaque) };\n+   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                               |\n+   |                               `extern type` does not have known layout\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-size_of_val-align_of_val-extern-type.rs:13:32\n+   |\n+LL | const _ALIGN: usize = unsafe { min_align_of_val(&4 as *const i32 as *const Opaque) };\n+   | -------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                |\n+   |                                `extern type` does not have known layout\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "c9f949727bc633d62e863668b82067efc9b71fea", "filename": "src/test/ui/consts/const-slice-oob.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -12,3 +12,16 @@ LL | const BAR: u32 = FOO[5];\n \n error: aborting due to previous error\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-slice-oob.rs:4:18\n+   |\n+LL | const BAR: u32 = FOO[5];\n+   | -----------------^^^^^^-\n+   |                  |\n+   |                  index out of bounds: the length is 3 but the index is 5\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "ee95b0d518050a95a67d387329aaf70f2be3fceb", "filename": "src/test/ui/consts/const_limit/const_eval_limit_reached.stderr", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -17,3 +17,21 @@ LL | | };\n \n error: aborting due to previous error\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const_eval_limit_reached.rs:6:11\n+   |\n+LL | / const X: usize = {\n+LL | |     let mut x = 0;\n+LL | |     while x != 1000 {\n+   | |           ^^^^^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n+LL | |\n+...  |\n+LL | |     x\n+LL | | };\n+   | |__-\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "0d8b8ffcc161b76a0a6ea01c3df9742e038a5579", "filename": "src/test/ui/consts/invalid-union.64bit.stderr", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -22,3 +22,14 @@ LL |     let _: &'static _ = &C;\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: erroneous constant used\n+  --> $DIR/invalid-union.rs:41:25\n+   |\n+LL |     let _: &'static _ = &C;\n+   |                         ^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "73a0f8ec0d04f9d90abcef63f4f6227416d60d0a", "filename": "src/test/ui/consts/issue-56164.stderr", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -26,3 +26,14 @@ LL | const fn foo() { (||{})() }\n error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0015`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: erroneous constant used\n+  --> $DIR/issue-56164.rs:1:18\n+   |\n+LL | const fn foo() { (||{})() }\n+   |                  ^^^^^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "929f905ae918be05d91d9e25e7ff92d74b16361f", "filename": "src/test/ui/consts/issue-66693.stderr", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -34,3 +34,14 @@ LL |     panic!(&1);\n \n error: aborting due to 4 previous errors\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: erroneous constant used\n+  --> $DIR/issue-66693.rs:11:12\n+   |\n+LL |     panic!(&1);\n+   |            ^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "e76a1f96b46a568919502c273ba523b431c0c19d", "filename": "src/test/ui/consts/issue-miri-1910.stderr", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -24,3 +24,28 @@ LL | | };\n \n error: aborting due to previous error\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |\n+LL |           copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |           |\n+   |           unable to turn pointer into raw bytes\n+   |           inside `std::ptr::read::<u8>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |           inside `ptr::const_ptr::<impl *const u8>::read` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |           inside `C` at $DIR/issue-miri-1910.rs:7:5\n+   |\n+  ::: $DIR/issue-miri-1910.rs:4:1\n+   |\n+LL | / const C: () = unsafe {\n+LL | |     let foo = Some(&42 as *const i32);\n+LL | |     let one_and_a_half_pointers = std::mem::size_of::<*const i32>()/2*3;\n+LL | |     (&foo as *const _ as *const u8).add(one_and_a_half_pointers).read();\n+LL | | };\n+   | |__-\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "1765c9ed10a30725d4c6a00c64c4c54266269774", "filename": "src/test/ui/consts/miri_unleashed/assoc_const.stderr", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -15,3 +15,28 @@ LL |     const F: u32 = (U::X, 42).1;\n error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |\n+LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | |\n+   | calling non-const function `<Vec<u32> as Drop>::drop`\n+   | inside `std::ptr::drop_in_place::<Vec<u32>> - shim(Some(Vec<u32>))` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   | inside `std::ptr::drop_in_place::<(Vec<u32>, u32)> - shim(Some((Vec<u32>, u32)))` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   | inside `<String as Bar<Vec<u32>, String>>::F` at $DIR/assoc_const.rs:14:31\n+   |\n+  ::: $DIR/assoc_const.rs:14:5\n+   |\n+LL |     const F: u32 = (U::X, 42).1;\n+   |     ----------------------------\n+   |\n+note: the lint level is defined here\n+  --> $DIR/assoc_const.rs:4:10\n+   |\n+LL | #![allow(const_err)]\n+   |          ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "f7be42de03fd646e12651817842cc1f0ca525863", "filename": "src/test/ui/consts/miri_unleashed/assoc_const_2.stderr", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -7,3 +7,20 @@ LL |     let y = <String as Bar<String>>::F;\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/assoc_const_2.rs:12:20\n+   |\n+LL |     const F: u32 = 100 / U::X;\n+   |     ---------------^^^^^^^^^^-\n+   |                    |\n+   |                    attempt to divide `100_u32` by zero\n+   |\n+note: the lint level is defined here\n+  --> $DIR/assoc_const_2.rs:3:10\n+   |\n+LL | #![allow(const_err)]\n+   |          ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "98d4dff648a5f1e52f9560cb95fcf8b6e1109b16", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static.stderr", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -47,3 +47,58 @@ LL | const READ_MUT: u32 = unsafe { MUTABLE };\n error: aborting due to 3 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/const_refers_to_static.rs:13:5\n+   |\n+LL | / const MUTATE_INTERIOR_MUT: usize = {\n+LL | |     static FOO: AtomicUsize = AtomicUsize::new(0);\n+LL | |     FOO.fetch_add(1, Ordering::Relaxed)\n+   | |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ calling non-const function `AtomicUsize::fetch_add`\n+LL | | };\n+   | |__-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const_refers_to_static.rs:3:10\n+   |\n+LL | #![allow(const_err)]\n+   |          ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/const_refers_to_static.rs:18:14\n+   |\n+LL | / const READ_INTERIOR_MUT: usize = {\n+LL | |     static FOO: AtomicUsize = AtomicUsize::new(0);\n+LL | |     unsafe { *(&FOO as *const _ as *const usize) }\n+   | |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n+LL | | };\n+   | |__-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const_refers_to_static.rs:3:10\n+   |\n+LL | #![allow(const_err)]\n+   |          ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/const_refers_to_static.rs:22:32\n+   |\n+LL | const READ_MUT: u32 = unsafe { MUTABLE };\n+   | -------------------------------^^^^^^^---\n+   |                                |\n+   |                                constant accesses static\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const_refers_to_static.rs:3:10\n+   |\n+LL | #![allow(const_err)]\n+   |          ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "2d4f038d91490f5af0f13a484f5c2fa1bf8618cf", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.64bit.stderr", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -170,3 +170,45 @@ LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None =>\n error: aborting due to 10 previous errors; 3 warnings emitted\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/const_refers_to_static_cross_crate.rs:25:15\n+   |\n+LL | / const U8_MUT2: &u8 = {\n+LL | |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n+   | |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n+LL | |\n+LL | |\n+LL | |\n+LL | | };\n+   | |__-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const_refers_to_static_cross_crate.rs:23:8\n+   |\n+LL | #[warn(const_err)]\n+   |        ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+warning: any use of this value will cause an error\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n+   |\n+LL | / const U8_MUT3: &u8 = {\n+LL | |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n+   | |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n+LL | |\n+LL | |\n+LL | |\n+LL | | };\n+   | |__-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const_refers_to_static_cross_crate.rs:30:8\n+   |\n+LL | #[warn(const_err)]\n+   |        ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "7ff3faead6aa37a4aabb5215b02b69270785279e", "filename": "src/test/ui/consts/ptr_comparisons.stderr", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -44,3 +44,29 @@ LL | const _: usize = unsafe { *std::mem::transmute::<&&usize, &usize>(&FOO) + 4\n error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ptr_comparisons.rs:65:27\n+   |\n+LL | const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n+   | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                           |\n+   |                           unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ptr_comparisons.rs:70:27\n+   |\n+LL | const _: usize = unsafe { *std::mem::transmute::<&&usize, &usize>(&FOO) + 4 };\n+   | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                           |\n+   |                           unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "8d1e10d4176fff4fcc392ba64dda72ce19bb0159", "filename": "src/test/ui/consts/recursive.stderr", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -29,3 +29,22 @@ LL | const X: () = f(1);\n \n error: aborting due to previous error; 1 warning emitted\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/recursive.rs:4:5\n+   |\n+LL |     f(x);\n+   |     ^^^^\n+   |     |\n+   |     reached the configured maximum number of stack frames\n+   |     inside `f::<i32>` at $DIR/recursive.rs:4:5\n+   |     [... 126 additional calls inside `f::<i32>` at $DIR/recursive.rs:4:5 ...]\n+   |     inside `X` at $DIR/recursive.rs:9:15\n+...\n+LL | const X: () = f(1);\n+   | -------------------\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "17dd6131436c39b01fa590986b9ef134eaea96f0", "filename": "src/test/ui/consts/uninhabited-const-issue-61744.stderr", "status": "modified", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2cc109419ac497ac24046297f452c9cced0ec0/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr?ref=dc2cc109419ac497ac24046297f452c9cced0ec0", "patch": "@@ -150,3 +150,147 @@ LL |     dbg!(i32::CONSTANT);\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     reached the configured maximum number of stack frames\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n+   |     inside `fake_type::<i32>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `<i32 as Const>::CONSTANT` at $DIR/uninhabited-const-issue-61744.rs:13:36\n+...\n+LL |     const CONSTANT: i32 = unsafe { fake_type() };\n+   |     ---------------------------------------------\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}]}