{"sha": "5f1987c6c48fe8d194310a3629f04405f08710f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMTk4N2M2YzQ4ZmU4ZDE5NDMxMGEzNjI5ZjA0NDA1ZjA4NzEwZjA=", "commit": {"author": {"name": "alexrp", "email": "alex@lycus.org", "date": "2012-08-07T07:56:15Z"}, "committer": {"name": "alexrp", "email": "alex@lycus.org", "date": "2012-08-07T07:56:15Z"}, "message": "Fix typo in tutorial: 'retern' -> 'return'", "tree": {"sha": "6910a029a411ae6eba4a3478513973f0feb7e172", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6910a029a411ae6eba4a3478513973f0feb7e172"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f1987c6c48fe8d194310a3629f04405f08710f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f1987c6c48fe8d194310a3629f04405f08710f0", "html_url": "https://github.com/rust-lang/rust/commit/5f1987c6c48fe8d194310a3629f04405f08710f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f1987c6c48fe8d194310a3629f04405f08710f0/comments", "author": null, "committer": null, "parents": [{"sha": "793c0a1116af40d8a84941525f148a3d785c3f0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/793c0a1116af40d8a84941525f148a3d785c3f0c", "html_url": "https://github.com/rust-lang/rust/commit/793c0a1116af40d8a84941525f148a3d785c3f0c"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "1d0e87d1b739e0052a7fdb5cfa1b813f0431d5b4", "filename": "doc/tutorial.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f1987c6c48fe8d194310a3629f04405f08710f0/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/5f1987c6c48fe8d194310a3629f04405f08710f0/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=5f1987c6c48fe8d194310a3629f04405f08710f0", "patch": "@@ -1757,7 +1757,7 @@ Empty argument lists can be omitted from `do` expressions.\n \n Most iteration in Rust is done with `for` loops. Like `do`,\n `for` is a nice syntax for doing control flow with closures.\n-Additionally, within a `for` loop, `break`, `again`, and `retern`\n+Additionally, within a `for` loop, `break`, `again`, and `return`\n work just as they do with `while` and `loop`.\n \n Consider again our `each` function, this time improved to"}]}