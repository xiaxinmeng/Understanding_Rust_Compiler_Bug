{"sha": "45c9f6a0999fa69bb6c60f6b2c432f84dca7be87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1YzlmNmEwOTk5ZmE2OWJiNmM2MGY2YjJjNDMyZjg0ZGNhN2JlODc=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-23T17:21:58Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-23T19:25:06Z"}, "message": "add find method to the core::container::Map trait", "tree": {"sha": "a4f1df5d25ea838c3817e3cab952ff5b81b0ad50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4f1df5d25ea838c3817e3cab952ff5b81b0ad50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45c9f6a0999fa69bb6c60f6b2c432f84dca7be87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45c9f6a0999fa69bb6c60f6b2c432f84dca7be87", "html_url": "https://github.com/rust-lang/rust/commit/45c9f6a0999fa69bb6c60f6b2c432f84dca7be87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45c9f6a0999fa69bb6c60f6b2c432f84dca7be87/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee0a8c68ababf403ddf9c61252fb298a90714b9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee0a8c68ababf403ddf9c61252fb298a90714b9b", "html_url": "https://github.com/rust-lang/rust/commit/ee0a8c68ababf403ddf9c61252fb298a90714b9b"}], "stats": {"total": 85, "additions": 45, "deletions": 40}, "files": [{"sha": "272a2efc035538a0b7e9c9e2bf52ee60204249ea", "filename": "src/libcore/container.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/45c9f6a0999fa69bb6c60f6b2c432f84dca7be87/src%2Flibcore%2Fcontainer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c9f6a0999fa69bb6c60f6b2c432f84dca7be87/src%2Flibcore%2Fcontainer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcontainer.rs?ref=45c9f6a0999fa69bb6c60f6b2c432f84dca7be87", "patch": "@@ -13,6 +13,8 @@\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n+use option::Option;\n+\n pub trait Container {\n     /// Return the number of elements in the container\n     pure fn len(&self) -> uint;\n@@ -39,6 +41,9 @@ pub trait Map<K, V>: Mutable {\n     /// Visit all values\n     pure fn each_value(&self, f: fn(&V) -> bool);\n \n+    /// Return the value corresponding to the key in the map\n+    pure fn find(&self, key: &K) -> Option<&self/V>;\n+\n     /// Insert a key-value pair into the map. An existing value for a\n     /// key is replaced by the new value. Return true if the key did\n     /// not already exist in the map."}, {"sha": "b8e859d7eb00af69389295512ef2556d9d552999", "filename": "src/libcore/hashmap.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/45c9f6a0999fa69bb6c60f6b2c432f84dca7be87/src%2Flibcore%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c9f6a0999fa69bb6c60f6b2c432f84dca7be87/src%2Flibcore%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhashmap.rs?ref=45c9f6a0999fa69bb6c60f6b2c432f84dca7be87", "patch": "@@ -300,6 +300,26 @@ pub mod linear {\n             self.each(|_k, v| blk(v))\n         }\n \n+        pure fn find(&self, k: &K) -> Option<&self/V> {\n+            match self.bucket_for_key(self.buckets, k) {\n+                FoundEntry(idx) => {\n+                    match self.buckets[idx] {\n+                        Some(ref bkt) => {\n+                            // FIXME(#3148)---should be inferred\n+                            let bkt: &self/Bucket<K,V> = bkt;\n+                            Some(&bkt.value)\n+                        }\n+                        None => {\n+                            fail ~\"LinearMap::find: internal logic error\"\n+                        }\n+                    }\n+                }\n+                TableFull | FoundHole(_) => {\n+                    None\n+                }\n+            }\n+        }\n+\n         fn insert(&mut self, k: K, v: V) -> bool {\n             if self.size >= self.resize_at {\n                 // n.b.: We could also do this after searching, so\n@@ -369,26 +389,6 @@ pub mod linear {\n             }\n         }\n \n-        pure fn find(&self, k: &K) -> Option<&self/V> {\n-            match self.bucket_for_key(self.buckets, k) {\n-                FoundEntry(idx) => {\n-                    match self.buckets[idx] {\n-                        Some(ref bkt) => {\n-                            // FIXME(#3148)---should be inferred\n-                            let bkt: &self/Bucket<K,V> = bkt;\n-                            Some(&bkt.value)\n-                        }\n-                        None => {\n-                            fail ~\"LinearMap::find: internal logic error\"\n-                        }\n-                    }\n-                }\n-                TableFull | FoundHole(_) => {\n-                    None\n-                }\n-            }\n-        }\n-\n         pure fn get(&self, k: &K) -> &self/V {\n             match self.find(k) {\n                 Some(v) => v,"}, {"sha": "efe36ba4a694c73814c45f4f74f049b7a83e7e18", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/45c9f6a0999fa69bb6c60f6b2c432f84dca7be87/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c9f6a0999fa69bb6c60f6b2c432f84dca7be87/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=45c9f6a0999fa69bb6c60f6b2c432f84dca7be87", "patch": "@@ -98,6 +98,26 @@ impl <K: Ord, V> TreeMap<K, V>: Map<K, V> {\n     /// Visit all values in order\n     pure fn each_value(&self, f: fn(&V) -> bool) { self.each(|_, v| f(v)) }\n \n+    /// Return the value corresponding to the key in the map\n+    pure fn find(&self, key: &K) -> Option<&self/V> {\n+        let mut current: &self/Option<~TreeNode<K, V>> = &self.root;\n+        loop {\n+            match *current {\n+              Some(ref r) => {\n+                let r: &self/~TreeNode<K, V> = r; // FIXME: #3148\n+                if *key < r.key {\n+                    current = &r.left;\n+                } else if r.key < *key {\n+                    current = &r.right;\n+                } else {\n+                    return Some(&r.value);\n+                }\n+              }\n+              None => return None\n+            }\n+        }\n+    }\n+\n     /// Insert a key-value pair into the map. An existing value for a\n     /// key is replaced by the new value. Return true if the key did\n     /// not already exist in the map.\n@@ -136,26 +156,6 @@ impl <K: Ord, V> TreeMap<K, V> {\n         self.each_reverse(|_, v| f(v))\n     }\n \n-    /// Return the value corresponding to the key in the map\n-    pure fn find(&self, key: &K) -> Option<&self/V> {\n-        let mut current: &self/Option<~TreeNode<K, V>> = &self.root;\n-        loop {\n-            match *current {\n-              Some(ref r) => {\n-                let r: &self/~TreeNode<K, V> = r; // FIXME: #3148\n-                if *key < r.key {\n-                    current = &r.left;\n-                } else if r.key < *key {\n-                    current = &r.right;\n-                } else {\n-                    return Some(&r.value);\n-                }\n-              }\n-              None => return None\n-            }\n-        }\n-    }\n-\n     /// Get a lazy iterator over the key-value pairs in the map.\n     /// Requires that it be frozen (immutable).\n     pure fn iter(&self) -> TreeMapIterator/&self<K, V> {"}]}