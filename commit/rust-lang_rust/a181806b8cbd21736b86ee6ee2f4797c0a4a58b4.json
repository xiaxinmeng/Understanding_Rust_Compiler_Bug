{"sha": "a181806b8cbd21736b86ee6ee2f4797c0a4a58b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExODE4MDZiOGNiZDIxNzM2Yjg2ZWU2ZWUyZjQ3OTdjMGE0YTU4YjQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-05-18T12:08:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-18T12:08:46Z"}, "message": "Rollup merge of #85338 - lopopolo:core-iter-repeat-gh-81292, r=joshtriplett\n\nImplement more Iterator methods on core::iter::Repeat\n\n`core::iter::Repeat` always returns the same element, which means we can\ndo better than implementing most `Iterator` methods in terms of\n`Iterator::next`.\n\nFixes #81292.\n\n#81292 raises the question of whether these changes violate the contract of `core::iter::Repeat`, but as far as I can tell `core::iter::repeat` doesn't make any guarantees around how it calls `Clone::clone`.", "tree": {"sha": "770981685134cceff67e3e34a2fb646898263ef9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/770981685134cceff67e3e34a2fb646898263ef9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a181806b8cbd21736b86ee6ee2f4797c0a4a58b4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgo65QCRBK7hj4Ov3rIwAAkyMIAFV2mp3qHx1tiDXPp2xpXAb5\n/+5ENhfDpqodyZ5PwjyTW5Vyb9eSUvlLM9s6fdEGaHX/fdrEgFLPVIFNWbASkhJa\nZ6wMX+VHSjvR2aTHTmUXBD+buQgNn/0eOlAAcnXgUEL6Q3c9si5oVX/fVsyv5mVE\nbuv5sOz3juI47915gJwKaYiZ05QumJHDg1tPDQCvYfsdTouV3caM9DgvlFfT5N4k\nMIdi5SqwEVZFyKVEQLBEFyB3KZQ5/4AMNx08LmTmoGptCWDofuxT31BHAUYofyJK\nviNsfyrGe1vjZ59UnEh8l2f/VMJD+Gvvd06bC4UpPeaKNBLT07cPju3/WjXnsro=\n=Mykx\n-----END PGP SIGNATURE-----\n", "payload": "tree 770981685134cceff67e3e34a2fb646898263ef9\nparent d151ed869999f92b8a192f898197e5ad3e47e438\nparent 963bd3b643bae735cc46f8637e744163576244ea\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1621339726 +0200\ncommitter GitHub <noreply@github.com> 1621339726 +0200\n\nRollup merge of #85338 - lopopolo:core-iter-repeat-gh-81292, r=joshtriplett\n\nImplement more Iterator methods on core::iter::Repeat\n\n`core::iter::Repeat` always returns the same element, which means we can\ndo better than implementing most `Iterator` methods in terms of\n`Iterator::next`.\n\nFixes #81292.\n\n#81292 raises the question of whether these changes violate the contract of `core::iter::Repeat`, but as far as I can tell `core::iter::repeat` doesn't make any guarantees around how it calls `Clone::clone`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a181806b8cbd21736b86ee6ee2f4797c0a4a58b4", "html_url": "https://github.com/rust-lang/rust/commit/a181806b8cbd21736b86ee6ee2f4797c0a4a58b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a181806b8cbd21736b86ee6ee2f4797c0a4a58b4/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d151ed869999f92b8a192f898197e5ad3e47e438", "url": "https://api.github.com/repos/rust-lang/rust/commits/d151ed869999f92b8a192f898197e5ad3e47e438", "html_url": "https://github.com/rust-lang/rust/commit/d151ed869999f92b8a192f898197e5ad3e47e438"}, {"sha": "963bd3b643bae735cc46f8637e744163576244ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/963bd3b643bae735cc46f8637e744163576244ea", "html_url": "https://github.com/rust-lang/rust/commit/963bd3b643bae735cc46f8637e744163576244ea"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "a9478041c69c47f9783eebb8ebf8498d0714eea2", "filename": "library/core/src/iter/sources/repeat.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a181806b8cbd21736b86ee6ee2f4797c0a4a58b4/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a181806b8cbd21736b86ee6ee2f4797c0a4a58b4/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat.rs?ref=a181806b8cbd21736b86ee6ee2f4797c0a4a58b4", "patch": "@@ -72,10 +72,32 @@ impl<A: Clone> Iterator for Repeat<A> {\n     fn next(&mut self) -> Option<A> {\n         Some(self.element.clone())\n     }\n+\n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         (usize::MAX, None)\n     }\n+\n+    #[inline]\n+    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+        // Advancing an infinite iterator of a single element is a no-op.\n+        let _ = n;\n+        Ok(())\n+    }\n+\n+    #[inline]\n+    fn nth(&mut self, n: usize) -> Option<A> {\n+        let _ = n;\n+        Some(self.element.clone())\n+    }\n+\n+    fn last(self) -> Option<A> {\n+        loop {}\n+    }\n+\n+    fn count(self) -> usize {\n+        loop {}\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -84,6 +106,19 @@ impl<A: Clone> DoubleEndedIterator for Repeat<A> {\n     fn next_back(&mut self) -> Option<A> {\n         Some(self.element.clone())\n     }\n+\n+    #[inline]\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+        // Advancing an infinite iterator of a single element is a no-op.\n+        let _ = n;\n+        Ok(())\n+    }\n+\n+    #[inline]\n+    fn nth_back(&mut self, n: usize) -> Option<A> {\n+        let _ = n;\n+        Some(self.element.clone())\n+    }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]"}]}