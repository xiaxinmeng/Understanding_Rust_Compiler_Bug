{"sha": "c563296a4f13eeb5942215d336c10fe2fbd3f42a", "node_id": "C_kwDOAAsO6NoAKGM1NjMyOTZhNGYxM2VlYjU5NDIyMTVkMzM2YzEwZmUyZmJkM2Y0MmE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-06-16T09:16:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-16T09:16:14Z"}, "message": "Rollup merge of #112163 - bvanjoi:fix-105231-2, r=compiler-errors\n\nfix: inline `predicate_may_hold_fatal` and remove expect call in it\n\n- Fixes #105231\n- Discussion: https://github.com/rust-lang/rust/pull/111985#discussion_r1208888821\n\nr? ``@compiler-errors``", "tree": {"sha": "67f2f3fd6df2b42b19c4400b1c40a232e9a614ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67f2f3fd6df2b42b19c4400b1c40a232e9a614ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c563296a4f13eeb5942215d336c10fe2fbd3f42a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkjCheCRBK7hj4Ov3rIwAAm6EIAKTdANdovZt0mtoTwmRrrWiP\nLLx7edeVgPipoKpxjtv5UWYz6wnMN23amgrc7sPV7v/djBGJfC5QaJshTjL01eR6\nf3Cm92lktUZThTDMJ+EZrZ0RF7bgAb21g/gwXF6WoYXQx4w7RM5LcAjSCaH9NA2e\nCbBx4Iw3tVG+9j+u/sN312BfaR7gRH8JgoSjZ+hoBIHgHJvGknZ7IRdBkkCeL25B\nIhFi0ySGX5qnlv65q/KmSQMyNeLnphGzeJI6OqTPQ4TKrrp+tXFgULeRJK1hufgd\nI/eIVQAjsWKQOHyyR+3AMGfMDjOCK1ZKZatFyebdahpRg9+7fbmpPVZnI4OC31E=\n=f372\n-----END PGP SIGNATURE-----\n", "payload": "tree 67f2f3fd6df2b42b19c4400b1c40a232e9a614ee\nparent 0966f3202d1e811cd3aa35ac876b61a211b4819a\nparent b7921981d5c53097329cd5ff77a4721626433fe1\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1686906974 +0530\ncommitter GitHub <noreply@github.com> 1686906974 +0530\n\nRollup merge of #112163 - bvanjoi:fix-105231-2, r=compiler-errors\n\nfix: inline `predicate_may_hold_fatal` and remove expect call in it\n\n- Fixes #105231\n- Discussion: https://github.com/rust-lang/rust/pull/111985#discussion_r1208888821\n\nr? ``@compiler-errors``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c563296a4f13eeb5942215d336c10fe2fbd3f42a", "html_url": "https://github.com/rust-lang/rust/commit/c563296a4f13eeb5942215d336c10fe2fbd3f42a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c563296a4f13eeb5942215d336c10fe2fbd3f42a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0966f3202d1e811cd3aa35ac876b61a211b4819a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0966f3202d1e811cd3aa35ac876b61a211b4819a", "html_url": "https://github.com/rust-lang/rust/commit/0966f3202d1e811cd3aa35ac876b61a211b4819a"}, {"sha": "b7921981d5c53097329cd5ff77a4721626433fe1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7921981d5c53097329cd5ff77a4721626433fe1", "html_url": "https://github.com/rust-lang/rust/commit/b7921981d5c53097329cd5ff77a4721626433fe1"}], "stats": {"total": 58, "additions": 44, "deletions": 14}, "files": [{"sha": "3193d00e11b2ba8cf311e48ba4f2fc877094cc96", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c563296a4f13eeb5942215d336c10fe2fbd3f42a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c563296a4f13eeb5942215d336c10fe2fbd3f42a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=c563296a4f13eeb5942215d336c10fe2fbd3f42a", "patch": "@@ -292,7 +292,12 @@ fn impl_intersection_has_impossible_obligation<'cx, 'tcx>(\n             Obligation::new(infcx.tcx, ObligationCause::dummy(), param_env, predicate)\n         })\n         .chain(obligations)\n-        .find(|o| !selcx.predicate_may_hold_fatal(o));\n+        .find(|o| {\n+            selcx.evaluate_root_obligation(o).map_or(\n+                false, // Overflow has occurred, and treat the obligation as possibly holding.\n+                |result| !result.may_apply(),\n+            )\n+        });\n \n     if let Some(failing_obligation) = opt_failing_obligation {\n         debug!(\"overlap: obligation unsatisfiable {:?}\", failing_obligation);"}, {"sha": "4c5a794bc815bdc035f8fd0fc86b0f22e8385954", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c563296a4f13eeb5942215d336c10fe2fbd3f42a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c563296a4f13eeb5942215d336c10fe2fbd3f42a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=c563296a4f13eeb5942215d336c10fe2fbd3f42a", "patch": "@@ -518,19 +518,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     // The result is \"true\" if the obligation *may* hold and \"false\" if\n     // we can be sure it does not.\n \n-    /// Evaluates whether the obligation `obligation` can be satisfied (by any means).\n-    pub fn predicate_may_hold_fatal(&mut self, obligation: &PredicateObligation<'tcx>) -> bool {\n-        debug!(?obligation, \"predicate_may_hold_fatal\");\n-\n-        // This fatal query is a stopgap that should only be used in standard mode,\n-        // where we do not expect overflow to be propagated.\n-        assert!(self.query_mode == TraitQueryMode::Standard);\n-\n-        self.evaluate_root_obligation(obligation)\n-            .expect(\"Overflow should be caught earlier in standard query mode\")\n-            .may_apply()\n-    }\n-\n     /// Evaluates whether the obligation `obligation` can be satisfied\n     /// and returns an `EvaluationResult`. This is meant for the\n     /// *initial* call."}, {"sha": "74c7afd6b9edbb6357d64603fb82c9fb33011f95", "filename": "tests/ui/traits/issue-105231.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c563296a4f13eeb5942215d336c10fe2fbd3f42a/tests%2Fui%2Ftraits%2Fissue-105231.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c563296a4f13eeb5942215d336c10fe2fbd3f42a/tests%2Fui%2Ftraits%2Fissue-105231.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-105231.rs?ref=c563296a4f13eeb5942215d336c10fe2fbd3f42a", "patch": "@@ -0,0 +1,9 @@\n+//~ ERROR overflow evaluating the requirement `A<A<A<A<A<A<A<...>>>>>>>: Send`\n+struct A<T>(B<T>);\n+//~^ ERROR recursive types `A` and `B` have infinite size\n+struct B<T>(A<A<T>>);\n+trait Foo {}\n+impl<T> Foo for T where T: Send {}\n+impl Foo for B<u8> {}\n+\n+fn main() {}"}, {"sha": "fe20c47c57a805e407f75c0bb1819eb9dc377541", "filename": "tests/ui/traits/issue-105231.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c563296a4f13eeb5942215d336c10fe2fbd3f42a/tests%2Fui%2Ftraits%2Fissue-105231.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c563296a4f13eeb5942215d336c10fe2fbd3f42a/tests%2Fui%2Ftraits%2Fissue-105231.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-105231.stderr?ref=c563296a4f13eeb5942215d336c10fe2fbd3f42a", "patch": "@@ -0,0 +1,29 @@\n+error[E0072]: recursive types `A` and `B` have infinite size\n+  --> $DIR/issue-105231.rs:2:1\n+   |\n+LL | struct A<T>(B<T>);\n+   | ^^^^^^^^^^^ ---- recursive without indirection\n+LL |\n+LL | struct B<T>(A<A<T>>);\n+   | ^^^^^^^^^^^ ------- recursive without indirection\n+   |\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to break the cycle\n+   |\n+LL ~ struct A<T>(Box<B<T>>);\n+LL |\n+LL ~ struct B<T>(Box<A<A<T>>>);\n+   |\n+\n+error[E0275]: overflow evaluating the requirement `A<A<A<A<A<A<A<...>>>>>>>: Send`\n+   |\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_105231`)\n+note: required because it appears within the type `B<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<u8>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+  --> $DIR/issue-105231.rs:4:8\n+   |\n+LL | struct B<T>(A<A<T>>);\n+   |        ^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0072, E0275.\n+For more information about an error, try `rustc --explain E0072`."}]}