{"sha": "5dc433a13db0ba7907abb550fc7d13f0a24f791e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYzQzM2ExM2RiMGJhNzkwN2FiYjU1MGZjN2QxM2YwYTI0Zjc5MWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-07T08:18:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-07T08:18:09Z"}, "message": "Auto merge of #1039 - RalfJung:dyn-tests, r=RalfJung\n\nMore tests for dyn trait (in particular, unsized receivers)\n\nSo far we only tested them indirectly through `dyn FnOnce`; this also adds some self-contained tests from the rustc test suite.", "tree": {"sha": "590e008a08a47f019d00abd998c9b7bee419eca2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/590e008a08a47f019d00abd998c9b7bee419eca2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dc433a13db0ba7907abb550fc7d13f0a24f791e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dc433a13db0ba7907abb550fc7d13f0a24f791e", "html_url": "https://github.com/rust-lang/rust/commit/5dc433a13db0ba7907abb550fc7d13f0a24f791e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dc433a13db0ba7907abb550fc7d13f0a24f791e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0740a2040f1767aece15dec17f895c4fd0b613ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/0740a2040f1767aece15dec17f895c4fd0b613ab", "html_url": "https://github.com/rust-lang/rust/commit/0740a2040f1767aece15dec17f895c4fd0b613ab"}, {"sha": "57dec5c79158a494905bfd5e6e2473783da177c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/57dec5c79158a494905bfd5e6e2473783da177c8", "html_url": "https://github.com/rust-lang/rust/commit/57dec5c79158a494905bfd5e6e2473783da177c8"}], "stats": {"total": 222, "additions": 159, "deletions": 63}, "files": [{"sha": "e7620cd42f7000111bd3c669887445878ef55143", "filename": "tests/run-pass/box_box_trait.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0740a2040f1767aece15dec17f895c4fd0b613ab/tests%2Frun-pass%2Fbox_box_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0740a2040f1767aece15dec17f895c4fd0b613ab/tests%2Frun-pass%2Fbox_box_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbox_box_trait.rs?ref=0740a2040f1767aece15dec17f895c4fd0b613ab", "patch": "@@ -1,31 +0,0 @@\n-#![feature(box_syntax)]\n-\n-struct DroppableStruct;\n-\n-static mut DROPPED: bool = false;\n-\n-impl Drop for DroppableStruct {\n-    fn drop(&mut self) {\n-        unsafe { DROPPED = true; }\n-    }\n-}\n-\n-trait MyTrait { fn dummy(&self) { } }\n-impl MyTrait for Box<DroppableStruct> {}\n-\n-#[allow(dead_code)]\n-struct Whatever { w: Box<dyn MyTrait+'static> }\n-\n-impl  Whatever {\n-    fn new(w: Box<dyn MyTrait+'static>) -> Whatever {\n-        Whatever { w: w }\n-    }\n-}\n-\n-fn main() {\n-    {\n-        let f: Box<_> = box DroppableStruct;\n-        let _a = Whatever::new(box f as Box<dyn MyTrait>);\n-    }\n-    assert!(unsafe { DROPPED });\n-}"}, {"sha": "5e2e0f87bdaff22725d5a6e794ed53318f37ddb3", "filename": "tests/run-pass/closures.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5dc433a13db0ba7907abb550fc7d13f0a24f791e/tests%2Frun-pass%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc433a13db0ba7907abb550fc7d13f0a24f791e/tests%2Frun-pass%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fclosures.rs?ref=5dc433a13db0ba7907abb550fc7d13f0a24f791e", "patch": "@@ -40,10 +40,21 @@ fn fn_once_closure_with_multiple_args() -> i64 {\n     }\n }\n \n-fn boxed(f: Box<dyn FnOnce() -> i32>) -> i32 {\n+fn boxed_fn_once(f: Box<dyn FnOnce() -> i32>) -> i32 {\n     f()\n }\n \n+fn box_dyn() {\n+    let x: Box<dyn Fn(i32) -> i32> = Box::new(|x| x * 2);\n+    assert_eq!(x(21), 42);\n+    let mut i = 5;\n+    {\n+        let mut x: Box<dyn FnMut()> = Box::new(|| i *= 2);\n+        x(); x();\n+    }\n+    assert_eq!(i, 20);\n+}\n+\n fn fn_item_as_closure_trait_object() {\n     fn foo() {}\n     let f: &dyn Fn() = &foo;\n@@ -96,8 +107,9 @@ fn main() {\n     assert_eq!(crazy_closure(), (84, 10, 10));\n     assert_eq!(closure_arg_adjustment_problem(), 3);\n     assert_eq!(fn_once_closure_with_multiple_args(), 6);\n-    assert_eq!(boxed(Box::new({let x = 13; move || x})), 13);\n+    assert_eq!(boxed_fn_once(Box::new({let x = 13; move || x})), 13);\n \n+    box_dyn();\n     fn_item_as_closure_trait_object();\n     fn_item_with_args_as_closure_trait_object();\n     fn_item_with_multiple_args_as_closure_trait_object();"}, {"sha": "c9b59f635e14506815a4d8f410b6d5fb47f5326e", "filename": "tests/run-pass/drop_on_array_elements.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5dc433a13db0ba7907abb550fc7d13f0a24f791e/tests%2Frun-pass%2Fdrop_on_array_elements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc433a13db0ba7907abb550fc7d13f0a24f791e/tests%2Frun-pass%2Fdrop_on_array_elements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fdrop_on_array_elements.rs?ref=5dc433a13db0ba7907abb550fc7d13f0a24f791e", "previous_filename": "tests/run-pass/call_drop_on_array_elements.rs"}, {"sha": "36162d320212ae6ffc7c555d3e0c694308d8ecaf", "filename": "tests/run-pass/drop_on_fat_ptr_array_elements.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5dc433a13db0ba7907abb550fc7d13f0a24f791e/tests%2Frun-pass%2Fdrop_on_fat_ptr_array_elements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc433a13db0ba7907abb550fc7d13f0a24f791e/tests%2Frun-pass%2Fdrop_on_fat_ptr_array_elements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fdrop_on_fat_ptr_array_elements.rs?ref=5dc433a13db0ba7907abb550fc7d13f0a24f791e", "previous_filename": "tests/run-pass/call_drop_on_fat_ptr_array_elements.rs"}, {"sha": "1887130fdd8a4704b64990e5228e8c03ef0dd67f", "filename": "tests/run-pass/drop_on_zst_array_elements.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5dc433a13db0ba7907abb550fc7d13f0a24f791e/tests%2Frun-pass%2Fdrop_on_zst_array_elements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc433a13db0ba7907abb550fc7d13f0a24f791e/tests%2Frun-pass%2Fdrop_on_zst_array_elements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fdrop_on_zst_array_elements.rs?ref=5dc433a13db0ba7907abb550fc7d13f0a24f791e", "previous_filename": "tests/run-pass/call_drop_on_zst_array_elements.rs"}, {"sha": "3ec6be65ed8b6f8bc8bb35d560a42ef3c2f0dfb5", "filename": "tests/run-pass/drop_through_owned_slice.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5dc433a13db0ba7907abb550fc7d13f0a24f791e/tests%2Frun-pass%2Fdrop_through_owned_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc433a13db0ba7907abb550fc7d13f0a24f791e/tests%2Frun-pass%2Fdrop_through_owned_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fdrop_through_owned_slice.rs?ref=5dc433a13db0ba7907abb550fc7d13f0a24f791e", "previous_filename": "tests/run-pass/call_drop_through_owned_slice.rs"}, {"sha": "97ba69c9fe2882a81ba99b92241dcd8d571c1db2", "filename": "tests/run-pass/drop_through_trait_object.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5dc433a13db0ba7907abb550fc7d13f0a24f791e/tests%2Frun-pass%2Fdrop_through_trait_object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc433a13db0ba7907abb550fc7d13f0a24f791e/tests%2Frun-pass%2Fdrop_through_trait_object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fdrop_through_trait_object.rs?ref=5dc433a13db0ba7907abb550fc7d13f0a24f791e", "previous_filename": "tests/run-pass/call_drop_through_trait_object.rs"}, {"sha": "172a4580dc10548f0692f658cf0bde59fcdfffa9", "filename": "tests/run-pass/drop_through_trait_object_rc.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5dc433a13db0ba7907abb550fc7d13f0a24f791e/tests%2Frun-pass%2Fdrop_through_trait_object_rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc433a13db0ba7907abb550fc7d13f0a24f791e/tests%2Frun-pass%2Fdrop_through_trait_object_rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fdrop_through_trait_object_rc.rs?ref=5dc433a13db0ba7907abb550fc7d13f0a24f791e", "previous_filename": "tests/run-pass/call_drop_through_trait_object_rc.rs"}, {"sha": "33d1f4fc1cf0caac47eb0a21da611c0d7f68b231", "filename": "tests/run-pass/dyn-traits.rs", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/5dc433a13db0ba7907abb550fc7d13f0a24f791e/tests%2Frun-pass%2Fdyn-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc433a13db0ba7907abb550fc7d13f0a24f791e/tests%2Frun-pass%2Fdyn-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fdyn-traits.rs?ref=5dc433a13db0ba7907abb550fc7d13f0a24f791e", "patch": "@@ -0,0 +1,145 @@\n+#![feature(unsized_locals)]\n+\n+fn ref_box_dyn() {\n+    struct Struct(i32);\n+\n+    trait Trait {\n+        fn method(&self);\n+\n+        fn box_method(self: Box<Self>);\n+    }\n+\n+    impl Trait for Struct {\n+        fn method(&self) {\n+            assert_eq!(self.0, 42);\n+        }\n+\n+        fn box_method(self: Box<Self>) {\n+            assert_eq!(self.0, 7);\n+        }\n+    }\n+\n+    struct Foo<T: ?Sized>(T);\n+\n+    let y: &dyn Trait = &Struct(42);\n+    y.method();\n+\n+    let x: Foo<Struct> = Foo(Struct(42));\n+    let y: &Foo<dyn Trait> = &x;\n+    y.0.method();\n+\n+    let y: Box<dyn Trait> = Box::new(Struct(42));\n+    y.method();\n+\n+    let y = &y;\n+    y.method();\n+\n+    let y: Box<dyn Trait> = Box::new(Struct(7));\n+    y.box_method();\n+}\n+\n+\n+fn box_box_trait() {\n+    struct DroppableStruct;\n+\n+    static mut DROPPED: bool = false;\n+\n+    impl Drop for DroppableStruct {\n+        fn drop(&mut self) {\n+            unsafe { DROPPED = true; }\n+        }\n+    }\n+\n+    trait MyTrait { fn dummy(&self) { } }\n+    impl MyTrait for Box<DroppableStruct> {}\n+\n+    struct Whatever { w: Box<dyn MyTrait+'static> }\n+\n+    impl  Whatever {\n+        fn new(w: Box<dyn MyTrait+'static>) -> Whatever {\n+            Whatever { w: w }\n+        }\n+    }\n+\n+    {\n+        let f = Box::new(DroppableStruct);\n+        let a = Whatever::new(Box::new(f) as Box<dyn MyTrait>);\n+        a.w.dummy();\n+    }\n+    assert!(unsafe { DROPPED });\n+}\n+\n+fn unsized_dyn() {\n+    pub trait Foo {\n+        fn foo(self) -> String;\n+    }\n+\n+    struct A;\n+\n+    impl Foo for A {\n+        fn foo(self) -> String {\n+            format!(\"hello\")\n+        }\n+    }\n+\n+    let x = *(Box::new(A) as Box<dyn Foo>);\n+    assert_eq!(x.foo(), format!(\"hello\"));\n+\n+    // I'm not sure whether we want this to work\n+    let x = Box::new(A) as Box<dyn Foo>;\n+    assert_eq!(x.foo(), format!(\"hello\"));\n+}\n+\n+fn unsized_dyn_autoderef() {\n+    pub trait Foo {\n+        fn foo(self) -> String;\n+    }\n+\n+    impl Foo for [char] {\n+        fn foo(self) -> String {\n+            self.iter().collect()\n+        }\n+    }\n+\n+    impl Foo for str {\n+        fn foo(self) -> String {\n+            self.to_owned()\n+        }\n+    }\n+\n+    impl Foo for dyn FnMut() -> String {\n+        fn foo(mut self) -> String {\n+            self()\n+        }\n+    }\n+\n+    let x = *(Box::new(['h', 'e', 'l', 'l', 'o']) as Box<[char]>);\n+    assert_eq!(&x.foo() as &str, \"hello\");\n+\n+    let x = Box::new(['h', 'e', 'l', 'l', 'o']) as Box<[char]>;\n+    assert_eq!(&x.foo() as &str, \"hello\");\n+\n+    let x = \"hello\".to_owned().into_boxed_str();\n+    assert_eq!(&x.foo() as &str, \"hello\");\n+\n+    let x = *(\"hello\".to_owned().into_boxed_str());\n+    assert_eq!(&x.foo() as &str, \"hello\");\n+\n+    let x = \"hello\".to_owned().into_boxed_str();\n+    assert_eq!(&x.foo() as &str, \"hello\");\n+\n+    let x = *(Box::new(|| \"hello\".to_owned()) as Box<dyn FnMut() -> String>);\n+    assert_eq!(&x.foo() as &str, \"hello\");\n+\n+    let x = Box::new(|| \"hello\".to_owned()) as Box<dyn FnMut() -> String>;\n+    assert_eq!(&x.foo() as &str, \"hello\");\n+}\n+\n+fn main() {\n+    ref_box_dyn();\n+    box_box_trait();\n+\n+    // \"exotic\" receivers\n+    unsized_dyn();\n+    unsized_dyn_autoderef();\n+}"}, {"sha": "03d2db400f01368fb26bdd55a6bd088d33c53afb", "filename": "tests/run-pass/traits.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0740a2040f1767aece15dec17f895c4fd0b613ab/tests%2Frun-pass%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0740a2040f1767aece15dec17f895c4fd0b613ab/tests%2Frun-pass%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ftraits.rs?ref=0740a2040f1767aece15dec17f895c4fd0b613ab", "patch": "@@ -1,30 +0,0 @@\n-struct Struct(i32);\n-\n-trait Trait {\n-    fn method(&self);\n-}\n-\n-impl Trait for Struct {\n-    fn method(&self) {\n-        assert_eq!(self.0, 42);\n-    }\n-}\n-\n-struct Foo<T: ?Sized>(T);\n-\n-fn main() {\n-    let y: &dyn Trait = &Struct(42);\n-    y.method();\n-    let x: Foo<Struct> = Foo(Struct(42));\n-    let y: &Foo<dyn Trait> = &x;\n-    y.0.method();\n-\n-    let x: Box<dyn Fn(i32) -> i32> = Box::new(|x| x * 2);\n-    assert_eq!(x(21), 42);\n-    let mut i = 5;\n-    {\n-        let mut x: Box<dyn FnMut()> = Box::new(|| i *= 2);\n-        x(); x();\n-    }\n-    assert_eq!(i, 20);\n-}"}]}