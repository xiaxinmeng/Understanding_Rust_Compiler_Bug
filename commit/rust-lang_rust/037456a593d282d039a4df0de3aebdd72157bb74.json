{"sha": "037456a593d282d039a4df0de3aebdd72157bb74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNzQ1NmE1OTNkMjgyZDAzOWE0ZGYwZGUzYWViZGQ3MjE1N2JiNzQ=", "commit": {"author": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-06-03T06:34:39Z"}, "committer": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-06-03T06:34:39Z"}, "message": "Make E0201 detect when duplicate function is a method.", "tree": {"sha": "9d9a7762ce992425bf2ccb951c107a86ed47f28b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d9a7762ce992425bf2ccb951c107a86ed47f28b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/037456a593d282d039a4df0de3aebdd72157bb74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/037456a593d282d039a4df0de3aebdd72157bb74", "html_url": "https://github.com/rust-lang/rust/commit/037456a593d282d039a4df0de3aebdd72157bb74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/037456a593d282d039a4df0de3aebdd72157bb74/comments", "author": null, "committer": null, "parents": [{"sha": "f1db9cd7c3f9612c4d5d594fd81bf4ca1e721540", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1db9cd7c3f9612c4d5d594fd81bf4ca1e721540", "html_url": "https://github.com/rust-lang/rust/commit/f1db9cd7c3f9612c4d5d594fd81bf4ca1e721540"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "be2774f46d9162de879250c4b545f2fee622f6d0", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/037456a593d282d039a4df0de3aebdd72157bb74/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/037456a593d282d039a4df0de3aebdd72157bb74/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=037456a593d282d039a4df0de3aebdd72157bb74", "patch": "@@ -752,7 +752,11 @@ fn convert_methods<'a,'tcx,'i,I>(ccx: &CrateCtxt<'a, 'tcx>,\n     let mut seen_methods = FnvHashSet();\n     for (sig, id, ident, vis, span) in methods {\n         if !seen_methods.insert(ident.name) {\n-            span_err!(tcx.sess, span, E0201, \"duplicate associated function\");\n+            let fn_desc = match sig.explicit_self.node {\n+                ast::SelfStatic => \"associated function\",\n+                _               => \"method\",\n+            };\n+            span_err!(tcx.sess, span, E0201, \"duplicate {}\", fn_desc);\n         }\n \n         convert_method(ccx,"}, {"sha": "bbbb7b1db5c48740075f093662c8d6d47635ce53", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/037456a593d282d039a4df0de3aebdd72157bb74/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/037456a593d282d039a4df0de3aebdd72157bb74/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=037456a593d282d039a4df0de3aebdd72157bb74", "patch": "@@ -901,7 +901,7 @@ trait Baz {\n impl Baz for Foo {\n     fn baz(&self) -> bool { true }\n \n-    // error: duplicate associated function\n+    // error: duplicate method\n     fn baz(&self) -> bool { self.0 > 5 }\n }\n ```"}, {"sha": "6201d9862bb6974da1296c603c010f5a8ee64276", "filename": "src/test/compile-fail/impl-duplicate-methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/037456a593d282d039a4df0de3aebdd72157bb74/src%2Ftest%2Fcompile-fail%2Fimpl-duplicate-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/037456a593d282d039a4df0de3aebdd72157bb74/src%2Ftest%2Fcompile-fail%2Fimpl-duplicate-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-duplicate-methods.rs?ref=037456a593d282d039a4df0de3aebdd72157bb74", "patch": "@@ -11,7 +11,7 @@\n struct Foo;\n impl Foo {\n     fn orange(&self){}\n-    fn orange(&self){}   //~ ERROR duplicate associated function\n+    fn orange(&self){}   //~ ERROR duplicate method\n }\n \n fn main() {}"}, {"sha": "ea7224939ce56364f20a2020ed987ef1a99b6056", "filename": "src/test/compile-fail/issue-8153.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/037456a593d282d039a4df0de3aebdd72157bb74/src%2Ftest%2Fcompile-fail%2Fissue-8153.rs", "raw_url": "https://github.com/rust-lang/rust/raw/037456a593d282d039a4df0de3aebdd72157bb74/src%2Ftest%2Fcompile-fail%2Fissue-8153.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-8153.rs?ref=037456a593d282d039a4df0de3aebdd72157bb74", "patch": "@@ -18,7 +18,7 @@ trait Bar {\n \n impl Bar for Foo {\n     fn bar(&self) -> isize {1}\n-    fn bar(&self) -> isize {2} //~ ERROR duplicate associated function\n+    fn bar(&self) -> isize {2} //~ ERROR duplicate method\n }\n \n fn main() {"}, {"sha": "c9ef2df8e1326f01f26bb275f40bde1ce2f4d29d", "filename": "src/test/compile-fail/method-macro-backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/037456a593d282d039a4df0de3aebdd72157bb74/src%2Ftest%2Fcompile-fail%2Fmethod-macro-backtrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/037456a593d282d039a4df0de3aebdd72157bb74/src%2Ftest%2Fcompile-fail%2Fmethod-macro-backtrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-macro-backtrace.rs?ref=037456a593d282d039a4df0de3aebdd72157bb74", "patch": "@@ -29,7 +29,7 @@ impl S {\n \n     // Cause an error. It shouldn't have any macro backtrace frames.\n     fn bar(&self) { }\n-    fn bar(&self) { } //~ ERROR duplicate associated function\n+    fn bar(&self) { } //~ ERROR duplicate method\n }\n \n fn main() { }"}]}