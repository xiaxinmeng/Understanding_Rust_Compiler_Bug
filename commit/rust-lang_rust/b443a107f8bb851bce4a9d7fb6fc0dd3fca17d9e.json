{"sha": "b443a107f8bb851bce4a9d7fb6fc0dd3fca17d9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NDNhMTA3ZjhiYjg1MWJjZTRhOWQ3ZmI2ZmMwZGQzZmNhMTdkOWU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-19T16:15:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-19T16:15:16Z"}, "message": "Rollup merge of #73382 - Aaron1011:fix/self-receiver-candidates, r=petrochenkov\n\nOnly display other method receiver candidates if they actually apply\n\nPreviously, we would suggest `Box<Self>` as a valid receiver, even if\nmethod resolution only succeeded due to an autoderef (e.g. to `&self`)", "tree": {"sha": "b5aa40a68a23ca20476365bbebb005c38329def0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5aa40a68a23ca20476365bbebb005c38329def0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b443a107f8bb851bce4a9d7fb6fc0dd3fca17d9e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe7OSVCRBK7hj4Ov3rIwAAdHIIAH6JY8w4J4rGhNM65Qezr7u+\nxq1Fa25aUNqsOBRBiVml0c4uJf1zKac3FiLIJsLS2W4wHIGO/gi+/9Wqmen2aNAX\nbfZ7WmGTaac/jv17gpYrnG9yU98Z9OPlncrg7ia9ACvldwq3YFwPX+CaoPsSzeVK\n7jw7aLwDlIb+xzgP7hS8KPTyYHgd3GLBiuYCVdOxCBbMpa0V3cS0hYZif5CIuhgE\nJCoYX/nDHD0EovLVpx9PH02lNySoIKAOZRGFybV4OtHfxKGcWJBj53XAg+bSooqG\nu70a066wj/gtqPSafipOaSSK+dKMkOf9dXX41YnW1DBvX2QqfRoe+C2F0+OfgMw=\n=PO2v\n-----END PGP SIGNATURE-----\n", "payload": "tree b5aa40a68a23ca20476365bbebb005c38329def0\nparent 687f929c9b320fcd11097aee2778e2fc81fa8536\nparent 8956a7f58194b5a3a8de944ea1dc1b3b44a070ac\nauthor Manish Goregaokar <manishsmail@gmail.com> 1592583316 -0700\ncommitter GitHub <noreply@github.com> 1592583316 -0700\n\nRollup merge of #73382 - Aaron1011:fix/self-receiver-candidates, r=petrochenkov\n\nOnly display other method receiver candidates if they actually apply\n\nPreviously, we would suggest `Box<Self>` as a valid receiver, even if\nmethod resolution only succeeded due to an autoderef (e.g. to `&self`)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b443a107f8bb851bce4a9d7fb6fc0dd3fca17d9e", "html_url": "https://github.com/rust-lang/rust/commit/b443a107f8bb851bce4a9d7fb6fc0dd3fca17d9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b443a107f8bb851bce4a9d7fb6fc0dd3fca17d9e/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "687f929c9b320fcd11097aee2778e2fc81fa8536", "url": "https://api.github.com/repos/rust-lang/rust/commits/687f929c9b320fcd11097aee2778e2fc81fa8536", "html_url": "https://github.com/rust-lang/rust/commit/687f929c9b320fcd11097aee2778e2fc81fa8536"}, {"sha": "8956a7f58194b5a3a8de944ea1dc1b3b44a070ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/8956a7f58194b5a3a8de944ea1dc1b3b44a070ac", "html_url": "https://github.com/rust-lang/rust/commit/8956a7f58194b5a3a8de944ea1dc1b3b44a070ac"}], "stats": {"total": 39, "additions": 10, "deletions": 29}, "files": [{"sha": "6a00667637155d0b217fa80b53cf5b3366ec8e5e", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b443a107f8bb851bce4a9d7fb6fc0dd3fca17d9e/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b443a107f8bb851bce4a9d7fb6fc0dd3fca17d9e/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=b443a107f8bb851bce4a9d7fb6fc0dd3fca17d9e", "patch": "@@ -888,10 +888,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     rcvr,\n                     probe::ProbeScope::AllTraits,\n                 ) {\n-                    err.span_label(\n-                        pick.item.ident.span,\n-                        &format!(\"the method is available for `{}` here\", new_rcvr_t),\n-                    );\n+                    debug!(\"try_alt_rcvr: pick candidate {:?}\", pick);\n+                    // Make sure the method is defined for the *actual* receiver:\n+                    // we don't want to treat `Box<Self>` as a receiver if\n+                    // it only works because of an autoderef to `&self`\n+                    if pick.autoderefs == 0 {\n+                        err.span_label(\n+                            pick.item.ident.span,\n+                            &format!(\"the method is available for `{}` here\", new_rcvr_t),\n+                        );\n+                    }\n                 }\n             }\n         };"}, {"sha": "3cd4d0dd391af41490eebebb5b97cb4274cc60cc", "filename": "src/test/ui/impl-trait/no-method-suggested-traits.stderr", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b443a107f8bb851bce4a9d7fb6fc0dd3fca17d9e/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b443a107f8bb851bce4a9d7fb6fc0dd3fca17d9e/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr?ref=b443a107f8bb851bce4a9d7fb6fc0dd3fca17d9e", "patch": "@@ -49,14 +49,6 @@ LL | use foo::Bar;\n error[E0599]: no method named `method` found for struct `std::rc::Rc<&mut std::boxed::Box<&char>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:32:43\n    |\n-LL |         fn method(&self) {}\n-   |            ------\n-   |            |\n-   |            the method is available for `std::boxed::Box<std::rc::Rc<&mut std::boxed::Box<&char>>>` here\n-   |            the method is available for `std::pin::Pin<std::rc::Rc<&mut std::boxed::Box<&char>>>` here\n-   |            the method is available for `std::sync::Arc<std::rc::Rc<&mut std::boxed::Box<&char>>>` here\n-   |            the method is available for `std::rc::Rc<std::rc::Rc<&mut std::boxed::Box<&char>>>` here\n-...\n LL |     std::rc::Rc::new(&mut Box::new(&'a')).method();\n    |                                           ^^^^^^ method not found in `std::rc::Rc<&mut std::boxed::Box<&char>>`\n    |\n@@ -83,16 +75,6 @@ error[E0599]: no method named `method` found for struct `std::rc::Rc<&mut std::b\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&1i32)).method();\n    |                                            ^^^^^^ method not found in `std::rc::Rc<&mut std::boxed::Box<&i32>>`\n-   | \n-  ::: $DIR/auxiliary/no_method_suggested_traits.rs:8:12\n-   |\n-LL |         fn method(&self) {}\n-   |            ------\n-   |            |\n-   |            the method is available for `std::boxed::Box<std::rc::Rc<&mut std::boxed::Box<&i32>>>` here\n-   |            the method is available for `std::pin::Pin<std::rc::Rc<&mut std::boxed::Box<&i32>>>` here\n-   |            the method is available for `std::sync::Arc<std::rc::Rc<&mut std::boxed::Box<&i32>>>` here\n-   |            the method is available for `std::rc::Rc<std::rc::Rc<&mut std::boxed::Box<&i32>>>` here\n    |\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:"}, {"sha": "3be4f1109731176d132b4bd27ae86e38932082ee", "filename": "src/test/ui/traits/trait-item-privacy.stderr", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b443a107f8bb851bce4a9d7fb6fc0dd3fca17d9e/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b443a107f8bb851bce4a9d7fb6fc0dd3fca17d9e/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr?ref=b443a107f8bb851bce4a9d7fb6fc0dd3fca17d9e", "patch": "@@ -20,13 +20,6 @@ error[E0599]: no method named `b` found for struct `S` in the current scope\n LL | struct S;\n    | --------- method `b` not found for this\n ...\n-LL |         fn b(&self) { }\n-   |            -\n-   |            |\n-   |            the method is available for `std::boxed::Box<S>` here\n-   |            the method is available for `std::sync::Arc<S>` here\n-   |            the method is available for `std::rc::Rc<S>` here\n-...\n LL |     S.b();\n    |       ^ method not found in `S`\n    |"}]}