{"sha": "5480bed936e445b2b0f8edad14abe130efbeaed1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0ODBiZWQ5MzZlNDQ1YjJiMGY4ZWRhZDE0YWJlMTMwZWZiZWFlZDE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-06T20:01:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-06T20:01:50Z"}, "message": "Merge #7800\n\n7800: [WIP] 7708: Initial implementation of generate Default assist. r=Veykril a=chetankhilosiya\n\nThe Generate Default impl from new function.\n\nCo-authored-by: Chetan Khilosiya <chetan.khilosiya@gmail.com>", "tree": {"sha": "d687c4d02bc6a194cf8d231e0f3999a7cc06e66d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d687c4d02bc6a194cf8d231e0f3999a7cc06e66d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5480bed936e445b2b0f8edad14abe130efbeaed1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgQ9+uCRBK7hj4Ov3rIwAAdHIIAJQ9/X/3lxMuy1mtzogF6+w2\nUSxkr8KjFD/IFakuoUFHp15QXocgqS6DwifGdI7kfqyGJYMyiERnV5kwg8NLH9dp\nNpC/6557VjAmdhymJtLdPf2570yIdI7LRjOdxlP3NX2agfhiG0l+MfOHcT1c/QWU\nelF0A2a0O903rf44cCe1Ef4yswvGmEkFDcbRHgJdvdEtHPWKm1kx7VCgWw6rIHT7\nAcfjzs8rHx34momPLN86QnCpswrr8N1MjfQ/b7cvuf6F+AP6RIHLCT6LrbSV3Ty/\nEeJHOhwB8JQEZvANvcJw7/+hP5P0cchuWB/JhrZCWngZDKreVjdm9jWmCHG5Jjg=\n=y4FB\n-----END PGP SIGNATURE-----\n", "payload": "tree d687c4d02bc6a194cf8d231e0f3999a7cc06e66d\nparent 856c2850cd4ab90b79ef6f9232e2bcfc04d8fde2\nparent d40a4fc92c42271b085683c3b7de2d9815bdb410\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615060910 +0000\ncommitter GitHub <noreply@github.com> 1615060910 +0000\n\nMerge #7800\n\n7800: [WIP] 7708: Initial implementation of generate Default assist. r=Veykril a=chetankhilosiya\n\nThe Generate Default impl from new function.\n\nCo-authored-by: Chetan Khilosiya <chetan.khilosiya@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5480bed936e445b2b0f8edad14abe130efbeaed1", "html_url": "https://github.com/rust-lang/rust/commit/5480bed936e445b2b0f8edad14abe130efbeaed1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5480bed936e445b2b0f8edad14abe130efbeaed1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "856c2850cd4ab90b79ef6f9232e2bcfc04d8fde2", "url": "https://api.github.com/repos/rust-lang/rust/commits/856c2850cd4ab90b79ef6f9232e2bcfc04d8fde2", "html_url": "https://github.com/rust-lang/rust/commit/856c2850cd4ab90b79ef6f9232e2bcfc04d8fde2"}, {"sha": "d40a4fc92c42271b085683c3b7de2d9815bdb410", "url": "https://api.github.com/repos/rust-lang/rust/commits/d40a4fc92c42271b085683c3b7de2d9815bdb410", "html_url": "https://github.com/rust-lang/rust/commit/d40a4fc92c42271b085683c3b7de2d9815bdb410"}], "stats": {"total": 407, "additions": 407, "deletions": 0}, "files": [{"sha": "fa12545792f750e45da4009ca18890ecbfa5d1bb", "filename": "crates/ide_assists/src/handlers/generate_default_from_new.rs", "status": "added", "additions": 374, "deletions": 0, "changes": 374, "blob_url": "https://github.com/rust-lang/rust/blob/5480bed936e445b2b0f8edad14abe130efbeaed1/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5480bed936e445b2b0f8edad14abe130efbeaed1/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs?ref=5480bed936e445b2b0f8edad14abe130efbeaed1", "patch": "@@ -0,0 +1,374 @@\n+use crate::{\n+    assist_context::{AssistContext, Assists},\n+    AssistId,\n+};\n+use ide_db::helpers::FamousDefs;\n+use syntax::{\n+    ast::{self, Impl, NameOwner},\n+    AstNode,\n+};\n+use test_utils::mark;\n+\n+// Assist: generate_default_from_new\n+//\n+// Generates default implementation from new method.\n+//\n+// ```\n+// struct Example { _inner: () }\n+//\n+// impl Example {\n+//     pub fn n$0ew() -> Self {\n+//         Self { _inner: () }\n+//     }\n+// }\n+// ```\n+// ->\n+// ```\n+// struct Example { _inner: () }\n+//\n+// impl Example {\n+//     pub fn new() -> Self {\n+//         Self { _inner: () }\n+//     }\n+// }\n+//\n+// impl Default for Example {\n+//     fn default() -> Self {\n+//         Self::new()\n+//     }\n+// }\n+// ```\n+pub(crate) fn generate_default_from_new(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let fn_node = ctx.find_node_at_offset::<ast::Fn>()?;\n+    let fn_name = fn_node.name()?;\n+\n+    if fn_name.text() != \"new\" {\n+        mark::hit!(other_function_than_new);\n+        return None;\n+    }\n+\n+    if fn_node.param_list()?.params().next().is_some() {\n+        mark::hit!(new_function_with_parameters);\n+        return None;\n+    }\n+\n+    let impl_ = fn_node.syntax().ancestors().into_iter().find_map(ast::Impl::cast)?;\n+    if is_default_implemented(ctx, &impl_) {\n+        mark::hit!(default_block_is_already_present);\n+        mark::hit!(struct_in_module_with_default);\n+        return None;\n+    }\n+\n+    let insert_location = impl_.syntax().text_range();\n+\n+    acc.add(\n+        AssistId(\"generate_default_from_new\", crate::AssistKind::Generate),\n+        \"Generate a Default impl from a new fn\",\n+        insert_location,\n+        move |builder| {\n+            let code = default_fn_node_for_new(impl_);\n+            builder.insert(insert_location.end(), code);\n+        },\n+    )\n+}\n+\n+fn default_fn_node_for_new(impl_: Impl) -> String {\n+    format!(\n+        \"\n+\n+impl Default for {} {{\n+    fn default() -> Self {{\n+        Self::new()\n+    }}\n+}}\",\n+        impl_.self_ty().unwrap().syntax().text()\n+    )\n+}\n+\n+fn is_default_implemented(ctx: &AssistContext, impl_: &Impl) -> bool {\n+    let db = ctx.sema.db;\n+    let impl_ = ctx.sema.to_def(impl_);\n+    let impl_def = match impl_ {\n+        Some(value) => value,\n+        None => return false,\n+    };\n+\n+    let ty = impl_def.target_ty(db);\n+    let krate = impl_def.module(db).krate();\n+    let default = FamousDefs(&ctx.sema, Some(krate)).core_default_Default();\n+    let default_trait = match default {\n+        Some(value) => value,\n+        None => return false,\n+    };\n+\n+    ty.impls_trait(db, default_trait, &[])\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use ide_db::helpers::FamousDefs;\n+\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn generate_default() {\n+        check_pass(\n+            r#\"\n+struct Example { _inner: () }\n+\n+impl Example {\n+    pub fn ne$0w() -> Self {\n+        Self { _inner: () }\n+    }\n+}\n+\n+fn main() {}\n+\"#,\n+            r#\"\n+struct Example { _inner: () }\n+\n+impl Example {\n+    pub fn new() -> Self {\n+        Self { _inner: () }\n+    }\n+}\n+\n+impl Default for Example {\n+    fn default() -> Self {\n+        Self::new()\n+    }\n+}\n+\n+fn main() {}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn generate_default2() {\n+        check_pass(\n+            r#\"\n+struct Test { value: u32 }\n+\n+impl Test {\n+    pub fn ne$0w() -> Self {\n+        Self { value: 0 }\n+    }\n+}\n+\"#,\n+            r#\"\n+struct Test { value: u32 }\n+\n+impl Test {\n+    pub fn new() -> Self {\n+        Self { value: 0 }\n+    }\n+}\n+\n+impl Default for Test {\n+    fn default() -> Self {\n+        Self::new()\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn new_function_with_parameters() {\n+        mark::check!(new_function_with_parameters);\n+        check_not_applicable(\n+            r#\"\n+struct Example { _inner: () }\n+\n+impl Example {\n+    pub fn $0new(value: ()) -> Self {\n+        Self { _inner: value }\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn other_function_than_new() {\n+        mark::check!(other_function_than_new);\n+        check_not_applicable(\n+            r#\"\n+struct Example { _inner: () }\n+\n+impl Example {\n+    pub fn a$0dd() -> Self {\n+        Self { _inner: () }\n+    }\n+}\n+\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn default_block_is_already_present() {\n+        mark::check!(default_block_is_already_present);\n+        check_not_applicable(\n+            r#\"\n+struct Example { _inner: () }\n+\n+impl Example {\n+    pub fn n$0ew() -> Self {\n+        Self { _inner: () }\n+    }\n+}\n+\n+impl Default for Example {\n+    fn default() -> Self {\n+        Self::new()\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn standalone_new_function() {\n+        check_not_applicable(\n+            r#\"\n+fn n$0ew() -> u32 {\n+    0\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn multiple_struct_blocks() {\n+        check_pass(\n+            r#\"\n+struct Example { _inner: () }\n+struct Test { value: u32 }\n+\n+impl Example {\n+    pub fn new$0() -> Self {\n+        Self { _inner: () }\n+    }\n+}\n+\"#,\n+            r#\"\n+struct Example { _inner: () }\n+struct Test { value: u32 }\n+\n+impl Example {\n+    pub fn new() -> Self {\n+        Self { _inner: () }\n+    }\n+}\n+\n+impl Default for Example {\n+    fn default() -> Self {\n+        Self::new()\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn when_struct_is_after_impl() {\n+        check_pass(\n+            r#\"\n+impl Example {\n+    pub fn $0new() -> Self {\n+        Self { _inner: () }\n+    }\n+}\n+\n+struct Example { _inner: () }\n+\"#,\n+            r#\"\n+impl Example {\n+    pub fn new() -> Self {\n+        Self { _inner: () }\n+    }\n+}\n+\n+impl Default for Example {\n+    fn default() -> Self {\n+        Self::new()\n+    }\n+}\n+\n+struct Example { _inner: () }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn struct_in_module() {\n+        check_pass(\n+            r#\"\n+mod test {\n+    struct Example { _inner: () }\n+\n+    impl Example {\n+        pub fn n$0ew() -> Self {\n+            Self { _inner: () }\n+        }\n+    }\n+}\n+\"#,\n+            r#\"\n+mod test {\n+    struct Example { _inner: () }\n+\n+    impl Example {\n+        pub fn new() -> Self {\n+            Self { _inner: () }\n+        }\n+    }\n+\n+impl Default for Example {\n+    fn default() -> Self {\n+        Self::new()\n+    }\n+}\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn struct_in_module_with_default() {\n+        mark::check!(struct_in_module_with_default);\n+        check_not_applicable(\n+            r#\"\n+mod test {\n+    struct Example { _inner: () }\n+\n+    impl Example {\n+        pub fn n$0ew() -> Self {\n+            Self { _inner: () }\n+        }\n+    }\n+\n+    impl Default for Example {\n+        fn default() -> Self {\n+            Self::new()\n+        }\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    fn check_pass(before: &str, after: &str) {\n+        let before = &format!(\"//- /main.rs crate:main deps:core{}{}\", before, FamousDefs::FIXTURE);\n+        check_assist(generate_default_from_new, before, after);\n+    }\n+\n+    fn check_not_applicable(before: &str) {\n+        let before = &format!(\"//- /main.rs crate:main deps:core{}{}\", before, FamousDefs::FIXTURE);\n+        check_assist_not_applicable(generate_default_from_new, before);\n+    }\n+}"}, {"sha": "ea62d5f5da18cc3f17815b73ba47b24c520b5334", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5480bed936e445b2b0f8edad14abe130efbeaed1/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5480bed936e445b2b0f8edad14abe130efbeaed1/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=5480bed936e445b2b0f8edad14abe130efbeaed1", "patch": "@@ -127,6 +127,7 @@ mod handlers {\n     mod flip_comma;\n     mod flip_trait_bound;\n     mod generate_default_from_enum_variant;\n+    mod generate_default_from_new;\n     mod generate_derive;\n     mod generate_enum_is_method;\n     mod generate_enum_projection_method;\n@@ -189,6 +190,7 @@ mod handlers {\n             flip_comma::flip_comma,\n             flip_trait_bound::flip_trait_bound,\n             generate_default_from_enum_variant::generate_default_from_enum_variant,\n+            generate_default_from_new::generate_default_from_new,\n             generate_derive::generate_derive,\n             generate_enum_is_method::generate_enum_is_method,\n             generate_enum_projection_method::generate_enum_as_method,"}, {"sha": "304b5798f293340f8f9fcf4073d24426cc19e1c0", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5480bed936e445b2b0f8edad14abe130efbeaed1/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5480bed936e445b2b0f8edad14abe130efbeaed1/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=5480bed936e445b2b0f8edad14abe130efbeaed1", "patch": "@@ -439,6 +439,37 @@ impl Default for Version {\n     )\n }\n \n+#[test]\n+fn doctest_generate_default_from_new() {\n+    check_doc_test(\n+        \"generate_default_from_new\",\n+        r#####\"\n+struct Example { _inner: () }\n+\n+impl Example {\n+    pub fn n$0ew() -> Self {\n+        Self { _inner: () }\n+    }\n+}\n+\"#####,\n+        r#####\"\n+struct Example { _inner: () }\n+\n+impl Example {\n+    pub fn new() -> Self {\n+        Self { _inner: () }\n+    }\n+}\n+\n+impl Default for Example {\n+    fn default() -> Self {\n+        Self::new()\n+    }\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_generate_derive() {\n     check_doc_test("}]}