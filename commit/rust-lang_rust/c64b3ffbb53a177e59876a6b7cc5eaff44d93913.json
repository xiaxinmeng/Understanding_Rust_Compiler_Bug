{"sha": "c64b3ffbb53a177e59876a6b7cc5eaff44d93913", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NGIzZmZiYjUzYTE3N2U1OTg3NmE2YjdjYzVlYWZmNDRkOTM5MTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-10T10:44:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-10T10:44:17Z"}, "message": "Auto merge of #7204 - flip1995:beta_backport, r=flip1995\n\nBackport of #7170 to beta\n\nr? `@ghost`\n\nchangelog: none (fixes stack overflow, but this was introduced in this release cycle)\n\nNow actually opened towards the `beta` branch.", "tree": {"sha": "ab33b4af969ed50a3af041889044b6bf9acb631b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab33b4af969ed50a3af041889044b6bf9acb631b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c64b3ffbb53a177e59876a6b7cc5eaff44d93913", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c64b3ffbb53a177e59876a6b7cc5eaff44d93913", "html_url": "https://github.com/rust-lang/rust/commit/c64b3ffbb53a177e59876a6b7cc5eaff44d93913", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c64b3ffbb53a177e59876a6b7cc5eaff44d93913/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c7683c8efe447b251d6c5ca6cce51233060f6e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c7683c8efe447b251d6c5ca6cce51233060f6e8", "html_url": "https://github.com/rust-lang/rust/commit/7c7683c8efe447b251d6c5ca6cce51233060f6e8"}, {"sha": "98b11c8f7bfd7efd5044b6011ba1f4d71f46b223", "url": "https://api.github.com/repos/rust-lang/rust/commits/98b11c8f7bfd7efd5044b6011ba1f4d71f46b223", "html_url": "https://github.com/rust-lang/rust/commit/98b11c8f7bfd7efd5044b6011ba1f4d71f46b223"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "50e2898bdaae7a315a4b2d729f2f652b71763430", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c64b3ffbb53a177e59876a6b7cc5eaff44d93913/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c64b3ffbb53a177e59876a6b7cc5eaff44d93913/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=c64b3ffbb53a177e59876a6b7cc5eaff44d93913", "patch": "@@ -1712,6 +1712,7 @@ mod redundant_pattern_match {\n     use clippy_utils::{is_lang_ctor, is_qpath_def_path, is_trait_method, paths};\n     use if_chain::if_chain;\n     use rustc_ast::ast::LitKind;\n+    use rustc_data_structures::fx::FxHashSet;\n     use rustc_errors::Applicability;\n     use rustc_hir::LangItem::{OptionNone, OptionSome, PollPending, PollReady, ResultErr, ResultOk};\n     use rustc_hir::{\n@@ -1739,6 +1740,13 @@ mod redundant_pattern_match {\n     /// deallocate memory. For these types, and composites containing them, changing the drop order\n     /// won't result in any observable side effects.\n     fn type_needs_ordered_drop(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n+        type_needs_ordered_drop_inner(cx, ty, &mut FxHashSet::default())\n+    }\n+\n+    fn type_needs_ordered_drop_inner(cx: &LateContext<'tcx>, ty: Ty<'tcx>, seen: &mut FxHashSet<Ty<'tcx>>) -> bool {\n+        if !seen.insert(ty) {\n+            return false;\n+        }\n         if !ty.needs_drop(cx.tcx, cx.param_env) {\n             false\n         } else if !cx\n@@ -1750,12 +1758,12 @@ mod redundant_pattern_match {\n             // This type doesn't implement drop, so no side effects here.\n             // Check if any component type has any.\n             match ty.kind() {\n-                ty::Tuple(_) => ty.tuple_fields().any(|ty| type_needs_ordered_drop(cx, ty)),\n-                ty::Array(ty, _) => type_needs_ordered_drop(cx, ty),\n+                ty::Tuple(_) => ty.tuple_fields().any(|ty| type_needs_ordered_drop_inner(cx, ty, seen)),\n+                ty::Array(ty, _) => type_needs_ordered_drop_inner(cx, ty, seen),\n                 ty::Adt(adt, subs) => adt\n                     .all_fields()\n                     .map(|f| f.ty(cx.tcx, subs))\n-                    .any(|ty| type_needs_ordered_drop(cx, ty)),\n+                    .any(|ty| type_needs_ordered_drop_inner(cx, ty, seen)),\n                 _ => true,\n             }\n         }\n@@ -1772,7 +1780,7 @@ mod redundant_pattern_match {\n         {\n             // Check all of the generic arguments.\n             if let ty::Adt(_, subs) = ty.kind() {\n-                subs.types().any(|ty| type_needs_ordered_drop(cx, ty))\n+                subs.types().any(|ty| type_needs_ordered_drop_inner(cx, ty, seen))\n             } else {\n                 true\n             }"}, {"sha": "82095febc194aefc5ca5237007bc26f762bee6ba", "filename": "tests/ui/crashes/ice-7169.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c64b3ffbb53a177e59876a6b7cc5eaff44d93913/tests%2Fui%2Fcrashes%2Fice-7169.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c64b3ffbb53a177e59876a6b7cc5eaff44d93913/tests%2Fui%2Fcrashes%2Fice-7169.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-7169.rs?ref=c64b3ffbb53a177e59876a6b7cc5eaff44d93913", "patch": "@@ -0,0 +1,9 @@\n+#[derive(Default)]\n+struct A<T> {\n+    a: Vec<A<T>>,\n+    b: T,\n+}\n+\n+fn main() {\n+    if let Ok(_) = Ok::<_, ()>(A::<String>::default()) {}\n+}"}, {"sha": "5a9cd32380a19700ab44dc1a67c89934c8f1c19a", "filename": "tests/ui/crashes/ice-7169.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c64b3ffbb53a177e59876a6b7cc5eaff44d93913/tests%2Fui%2Fcrashes%2Fice-7169.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c64b3ffbb53a177e59876a6b7cc5eaff44d93913/tests%2Fui%2Fcrashes%2Fice-7169.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-7169.stderr?ref=c64b3ffbb53a177e59876a6b7cc5eaff44d93913", "patch": "@@ -0,0 +1,10 @@\n+error: redundant pattern matching, consider using `is_ok()`\n+  --> $DIR/ice-7169.rs:8:12\n+   |\n+LL |     if let Ok(_) = Ok::<_, ()>(A::<String>::default()) {}\n+   |     -------^^^^^-------------------------------------- help: try this: `if Ok::<_, ()>(A::<String>::default()).is_ok()`\n+   |\n+   = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}]}