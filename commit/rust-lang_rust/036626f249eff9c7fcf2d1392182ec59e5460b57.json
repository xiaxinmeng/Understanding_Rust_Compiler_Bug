{"sha": "036626f249eff9c7fcf2d1392182ec59e5460b57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNjYyNmYyNDllZmY5YzdmY2YyZDEzOTIxODJlYzU5ZTU0NjBiNTc=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-03-31T12:27:09Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-04-01T01:02:51Z"}, "message": "Address review feedback", "tree": {"sha": "a9d5cd78e4b3e9014a212b35cebeb0184fd67a6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9d5cd78e4b3e9014a212b35cebeb0184fd67a6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/036626f249eff9c7fcf2d1392182ec59e5460b57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/036626f249eff9c7fcf2d1392182ec59e5460b57", "html_url": "https://github.com/rust-lang/rust/commit/036626f249eff9c7fcf2d1392182ec59e5460b57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/036626f249eff9c7fcf2d1392182ec59e5460b57/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "097e9e528f45eea89677cf9ac3634c7cee9988aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/097e9e528f45eea89677cf9ac3634c7cee9988aa", "html_url": "https://github.com/rust-lang/rust/commit/097e9e528f45eea89677cf9ac3634c7cee9988aa"}], "stats": {"total": 29, "additions": 11, "deletions": 18}, "files": [{"sha": "064ca53bd1bd1ad1a2868b962f3293de098f8228", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/036626f249eff9c7fcf2d1392182ec59e5460b57/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/036626f249eff9c7fcf2d1392182ec59e5460b57/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=036626f249eff9c7fcf2d1392182ec59e5460b57", "patch": "@@ -396,6 +396,11 @@ impl<'tcx> FnAbiLlvmExt<'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n             llvm::Attribute::NoReturn.apply_llfn(llvm::AttributePlace::Function, llfn);\n         }\n \n+        // FIXME(eddyb, wesleywiser): apply this to callsites as well?\n+        if !self.can_unwind {\n+            llvm::Attribute::NoUnwind.apply_llfn(llvm::AttributePlace::Function, llfn);\n+        }\n+\n         let mut i = 0;\n         let mut apply = |attrs: &ArgAttributes, ty: Option<&Type>| {\n             attrs.apply_llfn(llvm::AttributePlace::Argument(i), llfn, ty);\n@@ -431,6 +436,8 @@ impl<'tcx> FnAbiLlvmExt<'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n     }\n \n     fn apply_attrs_callsite(&self, bx: &mut Builder<'a, 'll, 'tcx>, callsite: &'ll Value) {\n+        // FIXME(wesleywiser, eddyb): We should apply `nounwind` and `noreturn` as appropriate to this callsite.\n+\n         let mut i = 0;\n         let mut apply = |attrs: &ArgAttributes, ty: Option<&Type>| {\n             attrs.apply_callsite(llvm::AttributePlace::Argument(i), callsite, ty);"}, {"sha": "784a3a87e98852980b52d304ee927e2f85a6b620", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/036626f249eff9c7fcf2d1392182ec59e5460b57/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/036626f249eff9c7fcf2d1392182ec59e5460b57/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=036626f249eff9c7fcf2d1392182ec59e5460b57", "patch": "@@ -10,11 +10,10 @@ use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::ty::layout::HasTyCtxt;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::config::{OptLevel, Sanitizer};\n use rustc_session::Session;\n \n-use crate::abi::FnAbi;\n use crate::attributes;\n use crate::llvm::AttributePlace::Function;\n use crate::llvm::{self, Attribute};\n@@ -75,12 +74,6 @@ pub fn emit_uwtable(val: &'ll Value, emit: bool) {\n     Attribute::UWTable.toggle_llfn(Function, val, emit);\n }\n \n-/// Tell LLVM whether the function can or cannot unwind.\n-#[inline]\n-fn unwind(val: &'ll Value, can_unwind: bool) {\n-    Attribute::NoUnwind.toggle_llfn(Function, val, !can_unwind);\n-}\n-\n /// Tell LLVM if this function should be 'naked', i.e., skip the epilogue and prologue.\n #[inline]\n fn naked(val: &'ll Value, is_naked: bool) {\n@@ -244,12 +237,7 @@ pub(crate) fn default_optimisation_attrs(sess: &Session, llfn: &'ll Value) {\n \n /// Composite function which sets LLVM attributes for function depending on its AST (`#[attribute]`)\n /// attributes.\n-pub fn from_fn_attrs(\n-    cx: &CodegenCx<'ll, 'tcx>,\n-    llfn: &'ll Value,\n-    instance: ty::Instance<'tcx>,\n-    fn_abi: &FnAbi<'tcx, Ty<'tcx>>,\n-) {\n+pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::Instance<'tcx>) {\n     let codegen_fn_attrs = cx.tcx.codegen_fn_attrs(instance.def_id());\n \n     match codegen_fn_attrs.optimize {\n@@ -313,8 +301,6 @@ pub fn from_fn_attrs(\n     }\n     sanitize(cx, codegen_fn_attrs.flags, llfn);\n \n-    unwind(llfn, fn_abi.can_unwind);\n-\n     // Always annotate functions with the target-cpu they are compiled for.\n     // Without this, ThinLTO won't inline Rust functions into Clang generated\n     // functions (because Clang annotates functions this way too)."}, {"sha": "a36314448b170b82734ee9fb8ad58101598d2d43", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/036626f249eff9c7fcf2d1392182ec59e5460b57/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/036626f249eff9c7fcf2d1392182ec59e5460b57/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=036626f249eff9c7fcf2d1392182ec59e5460b57", "patch": "@@ -78,7 +78,7 @@ pub fn get_fn(cx: &CodegenCx<'ll, 'tcx>, instance: Instance<'tcx>) -> &'ll Value\n         let llfn = cx.declare_fn(&sym, &fn_abi);\n         debug!(\"get_fn: not casting pointer!\");\n \n-        attributes::from_fn_attrs(cx, llfn, instance, &fn_abi);\n+        attributes::from_fn_attrs(cx, llfn, instance);\n \n         let instance_def_id = instance.def_id();\n "}, {"sha": "a7a9d0c8a075994c496a963f312c7ab8036e3422", "filename": "src/librustc_codegen_llvm/mono_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/036626f249eff9c7fcf2d1392182ec59e5460b57/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/036626f249eff9c7fcf2d1392182ec59e5460b57/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmono_item.rs?ref=036626f249eff9c7fcf2d1392182ec59e5460b57", "patch": "@@ -77,7 +77,7 @@ impl PreDefineMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n \n         debug!(\"predefine_fn: instance = {:?}\", instance);\n \n-        attributes::from_fn_attrs(self, lldecl, instance, &fn_abi);\n+        attributes::from_fn_attrs(self, lldecl, instance);\n \n         self.instances.borrow_mut().insert(instance, lldecl);\n     }"}]}