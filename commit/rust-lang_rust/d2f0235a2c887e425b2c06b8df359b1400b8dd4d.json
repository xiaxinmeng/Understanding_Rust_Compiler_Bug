{"sha": "d2f0235a2c887e425b2c06b8df359b1400b8dd4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyZjAyMzVhMmM4ODdlNDI1YjJjMDZiOGRmMzU5YjE0MDBiOGRkNGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-07T03:12:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-07T03:12:37Z"}, "message": "auto merge of #6228 : brson/rust/run-destroy, r=brson\n\nThese cause valgrind errors in subprocesses. I don't *think* these errors\r\nlead to actual test failures but they are very confusing.", "tree": {"sha": "5781e7cd43a381a03eddd91c11b0e78037513acd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5781e7cd43a381a03eddd91c11b0e78037513acd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2f0235a2c887e425b2c06b8df359b1400b8dd4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2f0235a2c887e425b2c06b8df359b1400b8dd4d", "html_url": "https://github.com/rust-lang/rust/commit/d2f0235a2c887e425b2c06b8df359b1400b8dd4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2f0235a2c887e425b2c06b8df359b1400b8dd4d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b6864f2195250d34cbedf92ffaf23a400c71b9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b6864f2195250d34cbedf92ffaf23a400c71b9e", "html_url": "https://github.com/rust-lang/rust/commit/4b6864f2195250d34cbedf92ffaf23a400c71b9e"}, {"sha": "de8071234f66b984bf5a2ce33ec9100cb3204ea2", "url": "https://api.github.com/repos/rust-lang/rust/commits/de8071234f66b984bf5a2ce33ec9100cb3204ea2", "html_url": "https://github.com/rust-lang/rust/commit/de8071234f66b984bf5a2ce33ec9100cb3204ea2"}], "stats": {"total": 159, "additions": 89, "deletions": 70}, "files": [{"sha": "55b6c5100dd4f3efc629b219fc16b39f1df5dab1", "filename": "src/libcore/run.rs", "status": "modified", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/d2f0235a2c887e425b2c06b8df359b1400b8dd4d/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2f0235a2c887e425b2c06b8df359b1400b8dd4d/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=d2f0235a2c887e425b2c06b8df359b1400b8dd4d", "patch": "@@ -855,74 +855,4 @@ mod tests {\n     fn waitpid_non_existant_pid() {\n         run::waitpid(123456789); // assume that this pid doesn't exist\n     }\n-\n-    #[test]\n-    fn test_destroy_once() {\n-        let mut p = run::start_program(\"echo\", []);\n-        p.destroy(); // this shouldn't crash (and nor should the destructor)\n-    }\n-\n-    #[test]\n-    fn test_destroy_twice() {\n-        let mut p = run::start_program(\"echo\", []);\n-        p.destroy(); // this shouldnt crash...\n-        p.destroy(); // ...and nor should this (and nor should the destructor)\n-    }\n-\n-    fn test_destroy_actually_kills(force: bool) {\n-\n-        #[cfg(unix)]\n-        static BLOCK_COMMAND: &'static str = \"cat\";\n-\n-        #[cfg(windows)]\n-        static BLOCK_COMMAND: &'static str = \"cmd\";\n-\n-        #[cfg(unix)]\n-        fn process_exists(pid: libc::pid_t) -> bool {\n-            run::program_output(\"ps\", [~\"-p\", pid.to_str()]).out.contains(pid.to_str())\n-        }\n-\n-        #[cfg(windows)]\n-        fn process_exists(pid: libc::pid_t) -> bool {\n-\n-            use libc::types::os::arch::extra::DWORD;\n-            use libc::funcs::extra::kernel32::{CloseHandle, GetExitCodeProcess, OpenProcess};\n-            use libc::consts::os::extra::{FALSE, PROCESS_QUERY_INFORMATION, STILL_ACTIVE };\n-\n-            unsafe {\n-                let proc = OpenProcess(PROCESS_QUERY_INFORMATION, FALSE, pid as DWORD);\n-                if proc.is_null() {\n-                    return false;\n-                }\n-                // proc will be non-null if the process is alive, or if it died recently\n-                let mut status = 0;\n-                GetExitCodeProcess(proc, &mut status);\n-                CloseHandle(proc);\n-                return status == STILL_ACTIVE;\n-            }\n-        }\n-\n-        // this program will stay alive indefinitely trying to read from stdin\n-        let mut p = run::start_program(BLOCK_COMMAND, []);\n-\n-        assert!(process_exists(p.get_id()));\n-\n-        if force {\n-            p.force_destroy();\n-        } else {\n-            p.destroy();\n-        }\n-\n-        assert!(!process_exists(p.get_id()));\n-    }\n-\n-    #[test]\n-    fn test_unforced_destroy_actually_kills() {\n-        test_destroy_actually_kills(false);\n-    }\n-\n-    #[test]\n-    fn test_forced_destroy_actually_kills() {\n-        test_destroy_actually_kills(true);\n-    }\n }"}, {"sha": "a4f3f59f46baa90f5b3b6877027a0b23f0c0cfec", "filename": "src/test/run-pass/core-run-destroy.rs", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/d2f0235a2c887e425b2c06b8df359b1400b8dd4d/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2f0235a2c887e425b2c06b8df359b1400b8dd4d/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs?ref=d2f0235a2c887e425b2c06b8df359b1400b8dd4d", "patch": "@@ -0,0 +1,89 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-fast\n+// compile-flags:--test\n+\n+// NB: These tests kill child processes. Valgrind sees these children as leaking\n+// memory, which makes for some *confusing* logs. That's why these are here\n+// instead of in core.\n+\n+use core::run;\n+use core::run::*;\n+\n+#[test]\n+fn test_destroy_once() {\n+    let mut p = run::start_program(\"echo\", []);\n+    p.destroy(); // this shouldn't crash (and nor should the destructor)\n+}\n+\n+#[test]\n+fn test_destroy_twice() {\n+    let mut p = run::start_program(\"echo\", []);\n+    p.destroy(); // this shouldnt crash...\n+    p.destroy(); // ...and nor should this (and nor should the destructor)\n+}\n+\n+fn test_destroy_actually_kills(force: bool) {\n+\n+    #[cfg(unix)]\n+    static BLOCK_COMMAND: &'static str = \"cat\";\n+\n+    #[cfg(windows)]\n+    static BLOCK_COMMAND: &'static str = \"cmd\";\n+\n+    #[cfg(unix)]\n+    fn process_exists(pid: libc::pid_t) -> bool {\n+        run::program_output(\"ps\", [~\"-p\", pid.to_str()]).out.contains(pid.to_str())\n+    }\n+\n+    #[cfg(windows)]\n+    fn process_exists(pid: libc::pid_t) -> bool {\n+\n+        use core::libc::types::os::arch::extra::DWORD;\n+        use core::libc::funcs::extra::kernel32::{CloseHandle, GetExitCodeProcess, OpenProcess};\n+        use core::libc::consts::os::extra::{FALSE, PROCESS_QUERY_INFORMATION, STILL_ACTIVE };\n+\n+        unsafe {\n+            let proc = OpenProcess(PROCESS_QUERY_INFORMATION, FALSE, pid as DWORD);\n+            if proc.is_null() {\n+                return false;\n+            }\n+            // proc will be non-null if the process is alive, or if it died recently\n+            let mut status = 0;\n+            GetExitCodeProcess(proc, &mut status);\n+            CloseHandle(proc);\n+            return status == STILL_ACTIVE;\n+        }\n+    }\n+\n+    // this program will stay alive indefinitely trying to read from stdin\n+    let mut p = run::start_program(BLOCK_COMMAND, []);\n+\n+    assert!(process_exists(p.get_id()));\n+\n+    if force {\n+        p.force_destroy();\n+    } else {\n+        p.destroy();\n+    }\n+\n+    assert!(!process_exists(p.get_id()));\n+}\n+\n+#[test]\n+fn test_unforced_destroy_actually_kills() {\n+    test_destroy_actually_kills(false);\n+}\n+\n+#[test]\n+fn test_forced_destroy_actually_kills() {\n+    test_destroy_actually_kills(true);\n+}"}]}