{"sha": "a69eb952336bb3d483dd046373daa8e3948390a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2OWViOTUyMzM2YmIzZDQ4M2RkMDQ2MzczZGFhOGUzOTQ4MzkwYTc=", "commit": {"author": {"name": "James Miller", "email": "james@aatch.net", "date": "2013-07-05T08:28:53Z"}, "committer": {"name": "James Miller", "email": "bladeon@gmail.com", "date": "2013-07-07T10:51:09Z"}, "message": "Stop allocating view_items with @", "tree": {"sha": "ca2a127ac83f72ffe49afd760cf6ae44b5efb5e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca2a127ac83f72ffe49afd760cf6ae44b5efb5e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a69eb952336bb3d483dd046373daa8e3948390a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a69eb952336bb3d483dd046373daa8e3948390a7", "html_url": "https://github.com/rust-lang/rust/commit/a69eb952336bb3d483dd046373daa8e3948390a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a69eb952336bb3d483dd046373daa8e3948390a7/comments", "author": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "63f785769740b3e61e1c4d908c7a97f836c3cdc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/63f785769740b3e61e1c4d908c7a97f836c3cdc4", "html_url": "https://github.com/rust-lang/rust/commit/63f785769740b3e61e1c4d908c7a97f836c3cdc4"}], "stats": {"total": 107, "additions": 52, "deletions": 55}, "files": [{"sha": "12c7a0843ce431498937f48e1e9a97ab8a5a1c59", "filename": "src/librustc/front/config.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a69eb952336bb3d483dd046373daa8e3948390a7/src%2Flibrustc%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69eb952336bb3d483dd046373daa8e3948390a7/src%2Flibrustc%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fconfig.rs?ref=a69eb952336bb3d483dd046373daa8e3948390a7", "patch": "@@ -12,7 +12,7 @@\n use std::option;\n use syntax::{ast, fold, attr};\n \n-type in_cfg_pred = @fn(attrs: ~[ast::attribute]) -> bool;\n+type in_cfg_pred = @fn(attrs: &[ast::attribute]) -> bool;\n \n struct Context {\n     in_cfg: in_cfg_pred\n@@ -50,8 +50,7 @@ fn filter_item(cx: @Context, item: @ast::item) ->\n     if item_in_cfg(cx, item) { option::Some(item) } else { option::None }\n }\n \n-fn filter_view_item(cx: @Context, view_item: @ast::view_item\n-                   )-> Option<@ast::view_item> {\n+fn filter_view_item<'r>(cx: @Context, view_item: &'r ast::view_item)-> Option<&'r ast::view_item> {\n     if view_item_in_cfg(cx, view_item) {\n         option::Some(view_item)\n     } else {\n@@ -64,7 +63,7 @@ fn fold_mod(cx: @Context, m: &ast::_mod, fld: @fold::ast_fold) -> ast::_mod {\n         filter_item(cx, *a).chain(|x| fld.fold_item(x))\n     }.collect();\n     let filtered_view_items = do m.view_items.iter().filter_map |a| {\n-        filter_view_item(cx, *a).map(|x| fld.fold_view_item(*x))\n+        filter_view_item(cx, a).map(|&x| fld.fold_view_item(x))\n     }.collect();\n     ast::_mod {\n         view_items: filtered_view_items,\n@@ -86,7 +85,7 @@ fn fold_foreign_mod(\n ) -> ast::foreign_mod {\n     let filtered_items = nm.items.iter().filter_map(|a| filter_foreign_item(cx, *a)).collect();\n     let filtered_view_items = do nm.view_items.iter().filter_map |a| {\n-        filter_view_item(cx, *a).map(|x| fld.fold_view_item(*x))\n+        filter_view_item(cx, a).map(|&x| fld.fold_view_item(x))\n     }.collect();\n     ast::foreign_mod {\n         sort: nm.sort,\n@@ -141,7 +140,7 @@ fn fold_block(\n         filter_stmt(cx, *a).chain(|stmt| fld.fold_stmt(stmt))\n     }.collect();\n     let filtered_view_items = do b.view_items.iter().filter_map |a| {\n-        filter_view_item(cx, *a).map(|x| fld.fold_view_item(*x))\n+        filter_view_item(cx, a).map(|&x| fld.fold_view_item(x))\n     }.collect();\n     ast::blk_ {\n         view_items: filtered_view_items,\n@@ -160,8 +159,8 @@ fn foreign_item_in_cfg(cx: @Context, item: @ast::foreign_item) -> bool {\n     return (cx.in_cfg)(/*bad*/copy item.attrs);\n }\n \n-fn view_item_in_cfg(cx: @Context, item: @ast::view_item) -> bool {\n-    return (cx.in_cfg)(/*bad*/copy item.attrs);\n+fn view_item_in_cfg(cx: @Context, item: &ast::view_item) -> bool {\n+    return (cx.in_cfg)(item.attrs);\n }\n \n fn method_in_cfg(cx: @Context, meth: @ast::method) -> bool {"}, {"sha": "16a5c00b132db56ba66660df7ecdf1bfee569132", "filename": "src/librustc/front/std_inject.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a69eb952336bb3d483dd046373daa8e3948390a7/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69eb952336bb3d483dd046373daa8e3948390a7/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fstd_inject.rs?ref=a69eb952336bb3d483dd046373daa8e3948390a7", "patch": "@@ -41,7 +41,7 @@ fn inject_libstd_ref(sess: Session, crate: &ast::crate) -> @ast::crate {\n     let precursor = @fold::AstFoldFns {\n         fold_crate: |crate, span, fld| {\n             let n1 = sess.next_node_id();\n-            let vi1 = @ast::view_item {\n+            let vi1 = ast::view_item {\n                 node: ast::view_item_extern_mod(\n                         sess.ident_of(\"std\"), ~[], n1),\n                 attrs: ~[\n@@ -87,7 +87,7 @@ fn inject_libstd_ref(sess: Session, crate: &ast::crate) -> @ast::crate {\n             };\n \n             let vp = @spanned(ast::view_path_glob(prelude_path, n2));\n-            let vi2 = @ast::view_item { node: ast::view_item_use(~[vp]),\n+            let vi2 = ast::view_item { node: ast::view_item_use(~[vp]),\n                                         attrs: ~[],\n                                         vis: ast::private,\n                                         span: dummy_sp() };"}, {"sha": "ea48d194993eb491d98a22533ca3090c8773415d", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a69eb952336bb3d483dd046373daa8e3948390a7/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69eb952336bb3d483dd046373daa8e3948390a7/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=a69eb952336bb3d483dd046373daa8e3948390a7", "patch": "@@ -272,7 +272,7 @@ mod __test {\n \n */\n \n-fn mk_std(cx: &TestCtxt) -> @ast::view_item {\n+fn mk_std(cx: &TestCtxt) -> ast::view_item {\n     let vers = ast::lit_str(@\"0.7\");\n     let vers = nospan(vers);\n     let mi = ast::meta_name_value(@\"vers\", vers);\n@@ -287,13 +287,12 @@ fn mk_std(cx: &TestCtxt) -> @ast::view_item {\n         ast::view_item_extern_mod(id_std, ~[@mi],\n                            cx.sess.next_node_id())\n     };\n-    let vi = ast::view_item {\n+    ast::view_item {\n         node: vi,\n         attrs: ~[],\n         vis: ast::public,\n         span: dummy_sp()\n-    };\n-    return @vi;\n+    }\n }\n \n fn mk_test_module(cx: &TestCtxt) -> @ast::item {"}, {"sha": "8c62f4dbbe357eb2851d6e43a94735fdeff9f465", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a69eb952336bb3d483dd046373daa8e3948390a7/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69eb952336bb3d483dd046373daa8e3948390a7/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=a69eb952336bb3d483dd046373daa8e3948390a7", "patch": "@@ -136,7 +136,7 @@ fn visit_crate(e: &Env, c: &ast::crate) {\n     }\n }\n \n-fn visit_view_item(e: @mut Env, i: @ast::view_item) {\n+fn visit_view_item(e: @mut Env, i: &ast::view_item) {\n     match i.node {\n       ast::view_item_extern_mod(ident, ref meta_items, id) => {\n         debug!(\"resolving extern mod stmt. ident: %?, meta: %?\","}, {"sha": "fb9159d26bfc778c9bd83cc10617fad1f0929bcd", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a69eb952336bb3d483dd046373daa8e3948390a7/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69eb952336bb3d483dd046373daa8e3948390a7/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=a69eb952336bb3d483dd046373daa8e3948390a7", "patch": "@@ -1432,7 +1432,7 @@ impl Resolver {\n     /// Constructs the reduced graph for one 'view item'. View items consist\n     /// of imports and use directives.\n     pub fn build_reduced_graph_for_view_item(@mut self,\n-                                             view_item: @view_item,\n+                                             view_item: &view_item,\n                                              (parent, _):\n                                              (ReducedGraphParent,\n                                               vt<ReducedGraphParent>)) {\n@@ -5295,7 +5295,7 @@ impl Resolver {\n         visit_crate(self.crate, ((), vt));\n     }\n \n-    pub fn check_for_item_unused_imports(&mut self, vi: @view_item) {\n+    pub fn check_for_item_unused_imports(&mut self, vi: &view_item) {\n         // Ignore public import statements because there's no way to be sure\n         // whether they're used or not. Also ignore imports with a dummy span\n         // because this means that they were generated in some fashion by the"}, {"sha": "ffbd61b15eddf09f3a155cd9fb4e0533b158e7fe", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a69eb952336bb3d483dd046373daa8e3948390a7/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69eb952336bb3d483dd046373daa8e3948390a7/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=a69eb952336bb3d483dd046373daa8e3948390a7", "patch": "@@ -219,7 +219,7 @@ pub type blk = spanned<blk_>;\n \n #[deriving(Eq, Encodable, Decodable,IterBytes)]\n pub struct blk_ {\n-    view_items: ~[@view_item],\n+    view_items: ~[view_item],\n     stmts: ~[@stmt],\n     expr: Option<@expr>,\n     id: node_id,\n@@ -827,7 +827,7 @@ pub struct method {\n \n #[deriving(Eq, Encodable, Decodable,IterBytes)]\n pub struct _mod {\n-    view_items: ~[@view_item],\n+    view_items: ~[view_item],\n     items: ~[@item],\n }\n \n@@ -839,7 +839,7 @@ pub enum foreign_mod_sort { named, anonymous }\n pub struct foreign_mod {\n     sort: foreign_mod_sort,\n     abis: AbiSet,\n-    view_items: ~[@view_item],\n+    view_items: ~[view_item],\n     items: ~[@foreign_item],\n }\n "}, {"sha": "e2b8ff3c030209c8b7e8592c9fee8a7aa0cf5cab", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a69eb952336bb3d483dd046373daa8e3948390a7/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69eb952336bb3d483dd046373daa8e3948390a7/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=a69eb952336bb3d483dd046373daa8e3948390a7", "patch": "@@ -80,7 +80,7 @@ pub trait AstBuilder {\n     fn blk(&self, span: span, stmts: ~[@ast::stmt], expr: Option<@ast::expr>) -> ast::blk;\n     fn blk_expr(&self, expr: @ast::expr) -> ast::blk;\n     fn blk_all(&self, span: span,\n-               view_items: ~[@ast::view_item],\n+               view_items: ~[ast::view_item],\n                stmts: ~[@ast::stmt],\n                expr: Option<@ast::expr>) -> ast::blk;\n \n@@ -202,7 +202,7 @@ pub trait AstBuilder {\n \n     fn item_mod(&self, span: span,\n                 name: ident, attrs: ~[ast::attribute],\n-                vi: ~[@ast::view_item], items: ~[@ast::item]) -> @ast::item;\n+                vi: ~[ast::view_item], items: ~[@ast::item]) -> @ast::item;\n \n     fn item_ty_poly(&self,\n                     span: span,\n@@ -218,11 +218,11 @@ pub trait AstBuilder {\n     fn meta_name_value(&self, sp: span, name: @str, value: ast::lit_) -> @ast::meta_item;\n \n     fn view_use(&self, sp: span,\n-                vis: ast::visibility, vp: ~[@ast::view_path]) -> @ast::view_item;\n+                vis: ast::visibility, vp: ~[@ast::view_path]) -> ast::view_item;\n     fn view_use_list(&self, sp: span, vis: ast::visibility,\n-                     path: ~[ast::ident], imports: &[ast::ident]) -> @ast::view_item;\n+                     path: ~[ast::ident], imports: &[ast::ident]) -> ast::view_item;\n     fn view_use_glob(&self, sp: span,\n-                     vis: ast::visibility, path: ~[ast::ident]) -> @ast::view_item;\n+                     vis: ast::visibility, path: ~[ast::ident]) -> ast::view_item;\n }\n \n impl AstBuilder for @ExtCtxt {\n@@ -400,7 +400,7 @@ impl AstBuilder for @ExtCtxt {\n     }\n     fn blk_all(&self,\n                span: span,\n-               view_items: ~[@ast::view_item],\n+               view_items: ~[ast::view_item],\n                stmts: ~[@ast::stmt],\n                expr: Option<@ast::expr>) -> ast::blk {\n         respan(span,\n@@ -762,7 +762,7 @@ impl AstBuilder for @ExtCtxt {\n \n     fn item_mod(&self, span: span, name: ident,\n                 attrs: ~[ast::attribute],\n-                vi: ~[@ast::view_item],\n+                vi: ~[ast::view_item],\n                 items: ~[@ast::item]) -> @ast::item {\n         self.item(\n             span,\n@@ -804,8 +804,8 @@ impl AstBuilder for @ExtCtxt {\n     }\n \n     fn view_use(&self, sp: span,\n-                vis: ast::visibility, vp: ~[@ast::view_path]) -> @ast::view_item {\n-        @ast::view_item {\n+                vis: ast::visibility, vp: ~[@ast::view_path]) -> ast::view_item {\n+        ast::view_item {\n             node: ast::view_item_use(vp),\n             attrs: ~[],\n             vis: vis,\n@@ -814,7 +814,7 @@ impl AstBuilder for @ExtCtxt {\n     }\n \n     fn view_use_list(&self, sp: span, vis: ast::visibility,\n-                     path: ~[ast::ident], imports: &[ast::ident]) -> @ast::view_item {\n+                     path: ~[ast::ident], imports: &[ast::ident]) -> ast::view_item {\n         let imports = do imports.map |id| {\n             respan(sp, ast::path_list_ident_ { name: *id, id: self.next_id() })\n         };\n@@ -827,7 +827,7 @@ impl AstBuilder for @ExtCtxt {\n     }\n \n     fn view_use_glob(&self, sp: span,\n-                     vis: ast::visibility, path: ~[ast::ident]) -> @ast::view_item {\n+                     vis: ast::visibility, path: ~[ast::ident]) -> ast::view_item {\n         self.view_use(sp, vis,\n                       ~[@respan(sp,\n                                 ast::view_path_glob(self.path(sp, path), self.next_id()))])"}, {"sha": "b4d64ba3e2dc2ce65e2a3932f76e9ecaf48330ad", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a69eb952336bb3d483dd046373daa8e3948390a7/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69eb952336bb3d483dd046373daa8e3948390a7/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=a69eb952336bb3d483dd046373daa8e3948390a7", "patch": "@@ -16,7 +16,7 @@ use opt_vec::OptVec;\n \n pub trait ast_fold {\n     fn fold_crate(@self, &crate) -> crate;\n-    fn fold_view_item(@self, @view_item) -> @view_item;\n+    fn fold_view_item(@self, &view_item) -> view_item;\n     fn fold_foreign_item(@self, @foreign_item) -> @foreign_item;\n     fn fold_item(@self, @item) -> Option<@item>;\n     fn fold_struct_field(@self, @struct_field) -> @struct_field;\n@@ -372,7 +372,7 @@ fn noop_fold_method(m: @method, fld: @ast_fold) -> @method {\n \n \n pub fn noop_fold_block(b: &blk_, fld: @ast_fold) -> blk_ {\n-    let view_items = b.view_items.map(|x| fld.fold_view_item(*x));\n+    let view_items = b.view_items.map(|x| fld.fold_view_item(x));\n     let mut stmts = ~[];\n     for b.stmts.iter().advance |stmt| {\n         match fld.fold_stmt(*stmt) {\n@@ -697,7 +697,7 @@ pub fn noop_fold_ty(t: &ty_, fld: @ast_fold) -> ty_ {\n // ...nor do modules\n pub fn noop_fold_mod(m: &_mod, fld: @ast_fold) -> _mod {\n     ast::_mod {\n-        view_items: m.view_items.iter().transform(|x| fld.fold_view_item(*x)).collect(),\n+        view_items: m.view_items.iter().transform(|x| fld.fold_view_item(x)).collect(),\n         items: m.items.iter().filter_map(|x| fld.fold_item(*x)).collect(),\n     }\n }\n@@ -706,7 +706,7 @@ fn noop_fold_foreign_mod(nm: &foreign_mod, fld: @ast_fold) -> foreign_mod {\n     ast::foreign_mod {\n         sort: nm.sort,\n         abis: nm.abis,\n-        view_items: nm.view_items.iter().transform(|x| fld.fold_view_item(*x)).collect(),\n+        view_items: nm.view_items.iter().transform(|x| fld.fold_view_item(x)).collect(),\n         items: nm.items.iter().transform(|x| fld.fold_foreign_item(*x)).collect(),\n     }\n }\n@@ -818,9 +818,8 @@ impl ast_fold for AstFoldFns {\n         let (n, s) = (self.fold_crate)(&c.node, c.span, self as @ast_fold);\n         spanned { node: n, span: (self.new_span)(s) }\n     }\n-    fn fold_view_item(@self, x: @view_item) ->\n-       @view_item {\n-        @ast::view_item {\n+    fn fold_view_item(@self, x: &view_item) -> view_item {\n+        ast::view_item {\n             node: (self.fold_view_item)(&x.node, self as @ast_fold),\n             attrs: x.attrs.iter().transform(|a| fold_attribute_(*a, self as @ast_fold)).collect(),\n             vis: x.vis,"}, {"sha": "35c558c529626a9837bd2e8ccf842d9db50ec6df", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a69eb952336bb3d483dd046373daa8e3948390a7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69eb952336bb3d483dd046373daa8e3948390a7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a69eb952336bb3d483dd046373daa8e3948390a7", "patch": "@@ -115,7 +115,7 @@ pub enum item_or_view_item {\n     iovi_none,\n     iovi_item(@item),\n     iovi_foreign_item(@foreign_item),\n-    iovi_view_item(@view_item)\n+    iovi_view_item(view_item)\n }\n \n #[deriving(Eq)]\n@@ -208,7 +208,7 @@ fn maybe_append(lhs: ~[attribute], rhs: Option<~[attribute]>)\n \n struct ParsedItemsAndViewItems {\n     attrs_remaining: ~[attribute],\n-    view_items: ~[@view_item],\n+    view_items: ~[view_item],\n     items: ~[@item],\n     foreign_items: ~[@foreign_item]\n }\n@@ -4074,7 +4074,7 @@ impl Parser {\n         // extern mod foo;\n         let metadata = self.parse_optional_meta();\n         self.expect(&token::SEMI);\n-        iovi_view_item(@ast::view_item {\n+        iovi_view_item(ast::view_item {\n             node: view_item_extern_mod(ident, metadata, self.get_id()),\n             attrs: copy attrs,\n             vis: visibility,\n@@ -4308,7 +4308,7 @@ impl Parser {\n             // USE ITEM (iovi_view_item)\n             let view_item = self.parse_use();\n             self.expect(&token::SEMI);\n-            return iovi_view_item(@ast::view_item {\n+            return iovi_view_item(ast::view_item {\n                 node: view_item,\n                 attrs: attrs,\n                 vis: visibility,\n@@ -4656,7 +4656,7 @@ impl Parser {\n         &self,\n         attrs: ~[attribute],\n         vis: visibility\n-    ) -> @view_item {\n+    ) -> view_item {\n         let lo = self.span.lo;\n         let node = if self.eat_keyword(keywords::Use) {\n             self.parse_use()\n@@ -4669,7 +4669,7 @@ impl Parser {\n             self.bug(\"expected view item\");\n         };\n         self.expect(&token::SEMI);\n-        @ast::view_item { node: node,\n+        ast::view_item { node: node,\n                           attrs: attrs,\n                           vis: vis,\n                           span: mk_sp(lo, self.last_span.hi) }\n@@ -4687,7 +4687,7 @@ impl Parser {\n         let mut attrs = vec::append(first_item_attrs,\n                                     self.parse_outer_attributes());\n         // First, parse view items.\n-        let mut view_items = ~[];\n+        let mut view_items : ~[ast::view_item] = ~[];\n         let mut items = ~[];\n         let mut done = false;\n         // I think this code would probably read better as a single"}, {"sha": "f6d62e476108df86371986e4bff0087b1fe45770", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a69eb952336bb3d483dd046373daa8e3948390a7/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69eb952336bb3d483dd046373daa8e3948390a7/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=a69eb952336bb3d483dd046373daa8e3948390a7", "patch": "@@ -352,7 +352,7 @@ pub fn commasep_exprs(s: @ps, b: breaks, exprs: &[@ast::expr]) {\n pub fn print_mod(s: @ps, _mod: &ast::_mod, attrs: &[ast::attribute]) {\n     print_inner_attributes(s, attrs);\n     for _mod.view_items.iter().advance |vitem| {\n-        print_view_item(s, *vitem);\n+        print_view_item(s, vitem);\n     }\n     for _mod.items.iter().advance |item| { print_item(s, *item); }\n }\n@@ -361,7 +361,7 @@ pub fn print_foreign_mod(s: @ps, nmod: &ast::foreign_mod,\n                          attrs: &[ast::attribute]) {\n     print_inner_attributes(s, attrs);\n     for nmod.view_items.iter().advance |vitem| {\n-        print_view_item(s, *vitem);\n+        print_view_item(s, vitem);\n     }\n     for nmod.items.iter().advance |item| { print_foreign_item(s, *item); }\n }\n@@ -947,7 +947,7 @@ pub fn print_possibly_embedded_block_(s: @ps,\n \n     print_inner_attributes(s, attrs);\n \n-    for blk.node.view_items.iter().advance |vi| { print_view_item(s, *vi); }\n+    for blk.node.view_items.iter().advance |vi| { print_view_item(s, vi); }\n     for blk.node.stmts.iter().advance |st| {\n         print_stmt(s, *st);\n     }\n@@ -1844,7 +1844,7 @@ pub fn print_view_paths(s: @ps, vps: &[@ast::view_path]) {\n     commasep(s, inconsistent, vps, print_view_path);\n }\n \n-pub fn print_view_item(s: @ps, item: @ast::view_item) {\n+pub fn print_view_item(s: @ps, item: &ast::view_item) {\n     hardbreak_if_not_bol(s);\n     maybe_print_comment(s, item.span.lo);\n     print_outer_attributes(s, item.attrs);"}, {"sha": "944e94ddc0a5728c74730474042b9a62ea034e66", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a69eb952336bb3d483dd046373daa8e3948390a7/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69eb952336bb3d483dd046373daa8e3948390a7/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=a69eb952336bb3d483dd046373daa8e3948390a7", "patch": "@@ -72,7 +72,7 @@ pub fn generics_of_fn(fk: &fn_kind) -> Generics {\n \n pub struct Visitor<E> {\n     visit_mod: @fn(&_mod, span, node_id, (E, vt<E>)),\n-    visit_view_item: @fn(@view_item, (E, vt<E>)),\n+    visit_view_item: @fn(&view_item, (E, vt<E>)),\n     visit_foreign_item: @fn(@foreign_item, (E, vt<E>)),\n     visit_item: @fn(@item, (E, vt<E>)),\n     visit_local: @fn(@local, (E, vt<E>)),\n@@ -123,7 +123,7 @@ pub fn visit_crate<E: Copy>(c: &crate, (e, v): (E, vt<E>)) {\n }\n \n pub fn visit_mod<E: Copy>(m: &_mod, _sp: span, _id: node_id, (e, v): (E, vt<E>)) {\n-    for m.view_items.iter().advance |vi| { (v.visit_view_item)(*vi, (copy e, v)); }\n+    for m.view_items.iter().advance |vi| { (v.visit_view_item)(vi, (copy e, v)); }\n     for m.items.iter().advance |i| { (v.visit_item)(*i, (copy e, v)); }\n }\n \n@@ -166,7 +166,7 @@ pub fn visit_item<E: Copy>(i: &item, (e, v): (E, vt<E>)) {\n         }\n         item_mod(ref m) => (v.visit_mod)(m, i.span, i.id, (e, v)),\n         item_foreign_mod(ref nm) => {\n-            for nm.view_items.iter().advance |vi| { (v.visit_view_item)(*vi, (copy e, v)); }\n+            for nm.view_items.iter().advance |vi| { (v.visit_view_item)(vi, (copy e, v)); }\n             for nm.items.iter().advance |ni| { (v.visit_foreign_item)(*ni, (copy e, v)); }\n         }\n         item_ty(t, ref tps) => {\n@@ -414,7 +414,7 @@ pub fn visit_struct_field<E: Copy>(sf: &struct_field, (e, v): (E, vt<E>)) {\n \n pub fn visit_block<E: Copy>(b: &blk, (e, v): (E, vt<E>)) {\n     for b.node.view_items.iter().advance |vi| {\n-        (v.visit_view_item)(*vi, (copy e, v));\n+        (v.visit_view_item)(vi, (copy e, v));\n     }\n     for b.node.stmts.iter().advance |s| {\n         (v.visit_stmt)(*s, (copy e, v));\n@@ -568,7 +568,7 @@ pub fn visit_arm<E: Copy>(a: &arm, (e, v): (E, vt<E>)) {\n \n pub struct SimpleVisitor {\n     visit_mod: @fn(&_mod, span, node_id),\n-    visit_view_item: @fn(@view_item),\n+    visit_view_item: @fn(&view_item),\n     visit_foreign_item: @fn(@foreign_item),\n     visit_item: @fn(@item),\n     visit_local: @fn(@local),\n@@ -629,7 +629,7 @@ pub fn mk_simple_visitor(v: simple_visitor) -> vt<()> {\n         f(m, sp, id);\n         visit_mod(m, sp, id, (e, v));\n     }\n-    fn v_view_item(f: @fn(@view_item), vi: @view_item, (e, v): ((), vt<()>)) {\n+    fn v_view_item(f: @fn(&view_item), vi: &view_item, (e, v): ((), vt<()>)) {\n         f(vi);\n         visit_view_item(vi, (e, v));\n     }"}]}