{"sha": "89a370db0f6caef02b34cd42a151ef21613a8b44", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5YTM3MGRiMGY2Y2FlZjAyYjM0Y2Q0MmExNTFlZjIxNjEzYThiNDQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-03T18:36:05Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-03T18:36:05Z"}, "message": "add variant for experimental UB (like Stacked Borrows)", "tree": {"sha": "67b1d0dc6a0ce0c95bb9a82fc9ec0268dff22511", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67b1d0dc6a0ce0c95bb9a82fc9ec0268dff22511"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89a370db0f6caef02b34cd42a151ef21613a8b44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89a370db0f6caef02b34cd42a151ef21613a8b44", "html_url": "https://github.com/rust-lang/rust/commit/89a370db0f6caef02b34cd42a151ef21613a8b44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89a370db0f6caef02b34cd42a151ef21613a8b44/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe08d9e2d270d97be5a33a2d505d4a9ea56d258a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe08d9e2d270d97be5a33a2d505d4a9ea56d258a", "html_url": "https://github.com/rust-lang/rust/commit/fe08d9e2d270d97be5a33a2d505d4a9ea56d258a"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "5d60108f37c1d4b084f5089885930b810a35a46a", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/89a370db0f6caef02b34cd42a151ef21613a8b44/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a370db0f6caef02b34cd42a151ef21613a8b44/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=89a370db0f6caef02b34cd42a151ef21613a8b44", "patch": "@@ -342,8 +342,10 @@ impl fmt::Debug for InvalidProgramInfo<'tcx> {\n \n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n pub enum UndefinedBehaviorInfo {\n-    /// Handle cases which for which we do not have a fixed variant.\n+    /// Free-form case. Only for errors that are never caught!\n     Ub(String),\n+    /// Free-form case for experimental UB. Only for errors that are never caught!\n+    UbExperimental(String),\n     /// Unreachable code was executed.\n     Unreachable,\n }\n@@ -352,7 +354,7 @@ impl fmt::Debug for UndefinedBehaviorInfo {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use UndefinedBehaviorInfo::*;\n         match self {\n-            Ub(ref msg) =>\n+            Ub(msg) | UbExperimental(msg) =>\n                 write!(f, \"{}\", msg),\n             Unreachable =>\n                 write!(f, \"entered unreachable code\"),\n@@ -362,7 +364,7 @@ impl fmt::Debug for UndefinedBehaviorInfo {\n \n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n pub enum UnsupportedOpInfo<'tcx> {\n-    /// Handle cases which for which we do not have a fixed variant.\n+    /// Free-form case. Only for errors that are never caught!\n     Unsupported(String),\n \n     // -- Everything below is not classified yet --"}]}