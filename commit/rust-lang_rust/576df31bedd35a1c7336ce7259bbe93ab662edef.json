{"sha": "576df31bedd35a1c7336ce7259bbe93ab662edef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3NmRmMzFiZWRkMzVhMWM3MzM2Y2U3MjU5YmJlOTNhYjY2MmVkZWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-11T06:03:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-11T06:03:58Z"}, "message": "Auto merge of #58153 - ljedrz:HirIdify_typeck, r=Zoxc\n\nPartially Hiridify typeck\n\nAnother step towards https://github.com/rust-lang/rust/pull/57578.", "tree": {"sha": "f20c4fbe14bd60436ca7e5f834d85b43b5fc7e34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f20c4fbe14bd60436ca7e5f834d85b43b5fc7e34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/576df31bedd35a1c7336ce7259bbe93ab662edef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/576df31bedd35a1c7336ce7259bbe93ab662edef", "html_url": "https://github.com/rust-lang/rust/commit/576df31bedd35a1c7336ce7259bbe93ab662edef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/576df31bedd35a1c7336ce7259bbe93ab662edef/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4424a2c31a5c84dc4d47083113af6e916ff938c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4424a2c31a5c84dc4d47083113af6e916ff938c0", "html_url": "https://github.com/rust-lang/rust/commit/4424a2c31a5c84dc4d47083113af6e916ff938c0"}, {"sha": "6da9129b3676e88029e682faed5dbfaf4572758a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6da9129b3676e88029e682faed5dbfaf4572758a", "html_url": "https://github.com/rust-lang/rust/commit/6da9129b3676e88029e682faed5dbfaf4572758a"}], "stats": {"total": 96, "additions": 49, "deletions": 47}, "files": [{"sha": "2bf82180779d9dc3668ca841212c4a66a4237ae4", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/576df31bedd35a1c7336ce7259bbe93ab662edef/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576df31bedd35a1c7336ce7259bbe93ab662edef/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=576df31bedd35a1c7336ce7259bbe93ab662edef", "patch": "@@ -934,7 +934,9 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    pub fn expect_variant_data(&self, id: NodeId) -> &'hir VariantData {\n+    pub fn expect_variant_data(&self, id: HirId) -> &'hir VariantData {\n+        let id = self.hir_to_node_id(id); // FIXME(@ljedrz): remove when possible\n+\n         match self.find(id) {\n             Some(Node::Item(i)) => {\n                 match i.node {\n@@ -949,7 +951,9 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    pub fn expect_variant(&self, id: NodeId) -> &'hir Variant {\n+    pub fn expect_variant(&self, id: HirId) -> &'hir Variant {\n+        let id = self.hir_to_node_id(id); // FIXME(@ljedrz): remove when possible\n+\n         match self.find(id) {\n             Some(Node::Variant(variant)) => variant,\n             _ => bug!(\"expected variant, found {}\", self.node_to_string(id)),"}, {"sha": "4699f4cac165f1ed46e459c6bf9e01c0b8a597ad", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/576df31bedd35a1c7336ce7259bbe93ab662edef/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576df31bedd35a1c7336ce7259bbe93ab662edef/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=576df31bedd35a1c7336ce7259bbe93ab662edef", "patch": "@@ -674,7 +674,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         let def_id = field.did;\n         debug!(\"IsolatedEncoder::encode_field({:?})\", def_id);\n \n-        let variant_id = tcx.hir().as_local_node_id(variant.did).unwrap();\n+        let variant_id = tcx.hir().as_local_hir_id(variant.did).unwrap();\n         let variant_data = tcx.hir().expect_variant_data(variant_id);\n \n         Entry {"}, {"sha": "733b03df857046ce001a783ebcae46201d4ea563", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/576df31bedd35a1c7336ce7259bbe93ab662edef/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576df31bedd35a1c7336ce7259bbe93ab662edef/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=576df31bedd35a1c7336ce7259bbe93ab662edef", "patch": "@@ -111,7 +111,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n     {\n         let tcx = self.tcx();\n         let lifetime_name = |def_id| {\n-            tcx.hir().name(tcx.hir().as_local_node_id(def_id).unwrap()).as_interned_str()\n+            tcx.hir().name_by_hir_id(tcx.hir().as_local_hir_id(def_id).unwrap()).as_interned_str()\n         };\n \n         let r = match tcx.named_region(lifetime.hir_id) {\n@@ -1682,12 +1682,13 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                 assert_eq!(opt_self_ty, None);\n                 self.prohibit_generics(&path.segments);\n \n-                let node_id = tcx.hir().as_local_node_id(did).unwrap();\n-                let item_id = tcx.hir().get_parent_node(node_id);\n-                let item_def_id = tcx.hir().local_def_id(item_id);\n+                let hir_id = tcx.hir().as_local_hir_id(did).unwrap();\n+                let item_id = tcx.hir().get_parent_node_by_hir_id(hir_id);\n+                let item_def_id = tcx.hir().local_def_id_from_hir_id(item_id);\n                 let generics = tcx.generics_of(item_def_id);\n-                let index = generics.param_def_id_to_index[&tcx.hir().local_def_id(node_id)];\n-                tcx.mk_ty_param(index, tcx.hir().name(node_id).as_interned_str())\n+                let index = generics.param_def_id_to_index[\n+                    &tcx.hir().local_def_id_from_hir_id(hir_id)];\n+                tcx.mk_ty_param(index, tcx.hir().name_by_hir_id(hir_id).as_interned_str())\n             }\n             Def::SelfTy(_, Some(def_id)) => {\n                 // `Self` in impl (we know the concrete type)."}, {"sha": "0cc5071dbdd4fabdadccbb62f0cdec782bb8730d", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/576df31bedd35a1c7336ce7259bbe93ab662edef/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576df31bedd35a1c7336ce7259bbe93ab662edef/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=576df31bedd35a1c7336ce7259bbe93ab662edef", "patch": "@@ -736,8 +736,8 @@ fn compare_synthetic_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         in impl_m_type_params.zip(trait_m_type_params)\n     {\n         if impl_synthetic != trait_synthetic {\n-            let impl_node_id = tcx.hir().as_local_node_id(impl_def_id).unwrap();\n-            let impl_span = tcx.hir().span(impl_node_id);\n+            let impl_hir_id = tcx.hir().as_local_hir_id(impl_def_id).unwrap();\n+            let impl_span = tcx.hir().span_by_hir_id(impl_hir_id);\n             let trait_span = tcx.def_span(trait_def_id);\n             let mut err = struct_span_err!(tcx.sess,\n                                            impl_span,\n@@ -840,7 +840,7 @@ fn compare_synthetic_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                             match param.kind {\n                                 GenericParamKind::Lifetime { .. } => None,\n                                 GenericParamKind::Type { .. } => {\n-                                    if param.id == impl_node_id {\n+                                    if param.hir_id == impl_hir_id {\n                                         Some(&param.bounds)\n                                     } else {\n                                         None"}, {"sha": "e210909127b2a7427eb57da4cbd2fc060f3d94ec", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/576df31bedd35a1c7336ce7259bbe93ab662edef/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576df31bedd35a1c7336ce7259bbe93ab662edef/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=576df31bedd35a1c7336ce7259bbe93ab662edef", "patch": "@@ -184,7 +184,7 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'a, 'tcx>(\n     // absent. So we report an error that the Drop impl injected a\n     // predicate that is not present on the struct definition.\n \n-    let self_type_node_id = tcx.hir().as_local_node_id(self_type_did).unwrap();\n+    let self_type_hir_id = tcx.hir().as_local_hir_id(self_type_did).unwrap();\n \n     let drop_impl_span = tcx.def_span(drop_impl_did);\n \n@@ -216,7 +216,7 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'a, 'tcx>(\n         // repeated `contains` calls.\n \n         if !assumptions_in_impl_context.contains(&predicate) {\n-            let item_span = tcx.hir().span(self_type_node_id);\n+            let item_span = tcx.hir().span_by_hir_id(self_type_hir_id);\n             struct_span_err!(\n                 tcx.sess,\n                 drop_impl_span,"}, {"sha": "f82c07e4c4e0ae2bf72cff37a27afea6ca02dcd7", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/576df31bedd35a1c7336ce7259bbe93ab662edef/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576df31bedd35a1c7336ce7259bbe93ab662edef/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=576df31bedd35a1c7336ce7259bbe93ab662edef", "patch": "@@ -1883,14 +1883,14 @@ pub fn check_enum<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // Check for duplicate discriminant values\n         if let Some(i) = disr_vals.iter().position(|&x| x.val == discr.val) {\n             let variant_did = def.variants[VariantIdx::new(i)].did;\n-            let variant_i_node_id = tcx.hir().as_local_node_id(variant_did).unwrap();\n-            let variant_i = tcx.hir().expect_variant(variant_i_node_id);\n+            let variant_i_hir_id = tcx.hir().as_local_hir_id(variant_did).unwrap();\n+            let variant_i = tcx.hir().expect_variant(variant_i_hir_id);\n             let i_span = match variant_i.node.disr_expr {\n-                Some(ref expr) => tcx.hir().span(expr.id),\n-                None => tcx.hir().span(variant_i_node_id)\n+                Some(ref expr) => tcx.hir().span_by_hir_id(expr.hir_id),\n+                None => tcx.hir().span_by_hir_id(variant_i_hir_id)\n             };\n             let span = match v.node.disr_expr {\n-                Some(ref expr) => tcx.hir().span(expr.id),\n+                Some(ref expr) => tcx.hir().span_by_hir_id(expr.hir_id),\n                 None => v.span\n             };\n             struct_span_err!(tcx.sess, span, E0081,\n@@ -5703,8 +5703,8 @@ pub fn check_bounds_are_used<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     });\n     for (&used, param) in types_used.iter().zip(types) {\n         if !used {\n-            let id = tcx.hir().as_local_node_id(param.def_id).unwrap();\n-            let span = tcx.hir().span(id);\n+            let id = tcx.hir().as_local_hir_id(param.def_id).unwrap();\n+            let span = tcx.hir().span_by_hir_id(id);\n             struct_span_err!(tcx.sess, span, E0091, \"type parameter `{}` is unused\", param.name)\n                 .span_label(span, \"unused type parameter\")\n                 .emit();"}, {"sha": "15ae0166b93cb65d379d8962bfcfeaa111056142", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/576df31bedd35a1c7336ce7259bbe93ab662edef/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576df31bedd35a1c7336ce7259bbe93ab662edef/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=576df31bedd35a1c7336ce7259bbe93ab662edef", "patch": "@@ -650,6 +650,5 @@ impl<'a, 'gcx, 'tcx> euv::Delegate<'tcx> for InferBorrowKind<'a, 'gcx, 'tcx> {\n }\n \n fn var_name(tcx: TyCtxt, var_hir_id: hir::HirId) -> ast::Name {\n-    let var_node_id = tcx.hir().hir_to_node_id(var_hir_id);\n-    tcx.hir().name(var_node_id)\n+    tcx.hir().name_by_hir_id(var_hir_id)\n }"}, {"sha": "1206c8eb1eaa5051682daf92c9cec59ed835d382", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/576df31bedd35a1c7336ce7259bbe93ab662edef/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576df31bedd35a1c7336ce7259bbe93ab662edef/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=576df31bedd35a1c7336ce7259bbe93ab662edef", "patch": "@@ -62,11 +62,11 @@ impl<'a, 'gcx, 'tcx> CheckWfFcxBuilder<'a, 'gcx, 'tcx> {\n /// not included it frequently leads to confusing errors in fn bodies. So it's better to check\n /// the types first.\n pub fn check_item_well_formed<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n-    let node_id = tcx.hir().as_local_node_id(def_id).unwrap();\n-    let item = tcx.hir().expect_item(node_id);\n+    let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n+    let item = tcx.hir().expect_item_by_hir_id(hir_id);\n \n-    debug!(\"check_item_well_formed(it.id={}, it.name={})\",\n-           item.id,\n+    debug!(\"check_item_well_formed(it.hir_id={:?}, it.name={})\",\n+           item.hir_id,\n            tcx.item_path_str(def_id));\n \n     match item.node {\n@@ -88,7 +88,7 @@ pub fn check_item_well_formed<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: Def\n         // won't be allowed unless there's an *explicit* implementation of `Send`\n         // for `T`\n         hir::ItemKind::Impl(_, polarity, defaultness, _, ref trait_ref, ref self_ty, _) => {\n-            let is_auto = tcx.impl_trait_ref(tcx.hir().local_def_id(item.id))\n+            let is_auto = tcx.impl_trait_ref(tcx.hir().local_def_id_from_hir_id(item.hir_id))\n                                 .map_or(false, |trait_ref| tcx.trait_is_auto(trait_ref.def_id));\n             if let (hir::Defaultness::Default { .. }, true) = (defaultness, is_auto) {\n                 tcx.sess.span_err(item.span, \"impls of auto traits cannot be default\");"}, {"sha": "29f531201e4d815eacaea126838a4ad15f0137b5", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/576df31bedd35a1c7336ce7259bbe93ab662edef/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576df31bedd35a1c7336ce7259bbe93ab662edef/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=576df31bedd35a1c7336ce7259bbe93ab662edef", "patch": "@@ -407,8 +407,7 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n             if let ty::UserType::TypeOf(_, user_substs) = c_ty.value {\n                 if self.rustc_dump_user_substs {\n                     // This is a unit-testing mechanism.\n-                    let node_id = self.tcx().hir().hir_to_node_id(hir_id);\n-                    let span = self.tcx().hir().span(node_id);\n+                    let span = self.tcx().hir().span_by_hir_id(hir_id);\n                     // We need to buffer the errors in order to guarantee a consistent\n                     // order when emitting them.\n                     let err = self.tcx().sess.struct_span_err(\n@@ -739,15 +738,14 @@ impl Locatable for ast::NodeId {\n \n impl Locatable for DefIndex {\n     fn to_span(&self, tcx: &TyCtxt) -> Span {\n-        let node_id = tcx.hir().def_index_to_node_id(*self);\n-        tcx.hir().span(node_id)\n+        let hir_id = tcx.hir().def_index_to_hir_id(*self);\n+        tcx.hir().span_by_hir_id(hir_id)\n     }\n }\n \n impl Locatable for hir::HirId {\n     fn to_span(&self, tcx: &TyCtxt) -> Span {\n-        let node_id = tcx.hir().hir_to_node_id(*self);\n-        tcx.hir().span(node_id)\n+        tcx.hir().span_by_hir_id(*self)\n     }\n }\n "}, {"sha": "3ec08f221f576e98b13f30d84bf0bcf00cf810d6", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/576df31bedd35a1c7336ce7259bbe93ab662edef/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576df31bedd35a1c7336ce7259bbe93ab662edef/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=576df31bedd35a1c7336ce7259bbe93ab662edef", "patch": "@@ -76,7 +76,7 @@ fn visit_implementation_of_drop<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, impl_did:\n fn visit_implementation_of_copy<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, impl_did: DefId) {\n     debug!(\"visit_implementation_of_copy: impl_did={:?}\", impl_did);\n \n-    let impl_node_id = if let Some(n) = tcx.hir().as_local_node_id(impl_did) {\n+    let impl_hir_id = if let Some(n) = tcx.hir().as_local_hir_id(impl_did) {\n         n\n     } else {\n         debug!(\"visit_implementation_of_copy(): impl not in this crate\");\n@@ -87,7 +87,7 @@ fn visit_implementation_of_copy<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, impl_did:\n     debug!(\"visit_implementation_of_copy: self_type={:?} (bound)\",\n            self_type);\n \n-    let span = tcx.hir().span(impl_node_id);\n+    let span = tcx.hir().span_by_hir_id(impl_hir_id);\n     let param_env = tcx.param_env(impl_did);\n     assert!(!self_type.has_escaping_bound_vars());\n \n@@ -97,7 +97,7 @@ fn visit_implementation_of_copy<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, impl_did:\n     match param_env.can_type_implement_copy(tcx, self_type) {\n         Ok(()) => {}\n         Err(CopyImplementationError::InfrigingFields(fields)) => {\n-            let item = tcx.hir().expect_item(impl_node_id);\n+            let item = tcx.hir().expect_item_by_hir_id(impl_hir_id);\n             let span = if let ItemKind::Impl(.., Some(ref tr), _, _) = item.node {\n                 tr.path.span\n             } else {\n@@ -114,7 +114,7 @@ fn visit_implementation_of_copy<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, impl_did:\n             err.emit()\n         }\n         Err(CopyImplementationError::NotAnAdt) => {\n-            let item = tcx.hir().expect_item(impl_node_id);\n+            let item = tcx.hir().expect_item_by_hir_id(impl_hir_id);\n             let span = if let ItemKind::Impl(.., ref ty, _) = item.node {\n                 ty.span\n             } else {"}, {"sha": "f5e50678040f6fd7750c66461f15c69b5cd23675", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/576df31bedd35a1c7336ce7259bbe93ab662edef/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576df31bedd35a1c7336ce7259bbe93ab662edef/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=576df31bedd35a1c7336ce7259bbe93ab662edef", "patch": "@@ -737,8 +737,8 @@ fn super_predicates_of<'a, 'tcx>(\n }\n \n fn trait_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::TraitDef {\n-    let node_id = tcx.hir().as_local_node_id(def_id).unwrap();\n-    let item = tcx.hir().expect_item(node_id);\n+    let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n+    let item = tcx.hir().expect_item_by_hir_id(hir_id);\n \n     let (is_auto, unsafety) = match item.node {\n         hir::ItemKind::Trait(is_auto, unsafety, ..) => (is_auto == hir::IsAuto::Yes, unsafety),\n@@ -1509,8 +1509,8 @@ fn impl_trait_ref<'a, 'tcx>(\n ) -> Option<ty::TraitRef<'tcx>> {\n     let icx = ItemCtxt::new(tcx, def_id);\n \n-    let node_id = tcx.hir().as_local_node_id(def_id).unwrap();\n-    match tcx.hir().expect_item(node_id).node {\n+    let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n+    match tcx.hir().expect_item_by_hir_id(hir_id).node {\n         hir::ItemKind::Impl(.., ref opt_trait_ref, _, _) => {\n             opt_trait_ref.as_ref().map(|ast_trait_ref| {\n                 let selfty = tcx.type_of(def_id);\n@@ -1522,8 +1522,8 @@ fn impl_trait_ref<'a, 'tcx>(\n }\n \n fn impl_polarity<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> hir::ImplPolarity {\n-    let node_id = tcx.hir().as_local_node_id(def_id).unwrap();\n-    match tcx.hir().expect_item(node_id).node {\n+    let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n+    match tcx.hir().expect_item_by_hir_id(hir_id).node {\n         hir::ItemKind::Impl(_, polarity, ..) => polarity,\n         ref item => bug!(\"impl_polarity: {:?} not an impl\", item),\n     }"}, {"sha": "347422780d516cd5ba4e9c3de03686ba688020ea", "filename": "src/librustc_typeck/variance/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/576df31bedd35a1c7336ce7259bbe93ab662edef/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576df31bedd35a1c7336ce7259bbe93ab662edef/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs?ref=576df31bedd35a1c7336ce7259bbe93ab662edef", "patch": "@@ -46,12 +46,12 @@ fn crate_variances<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum)\n \n fn variances_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_def_id: DefId)\n                           -> Lrc<Vec<ty::Variance>> {\n-    let id = tcx.hir().as_local_node_id(item_def_id).expect(\"expected local def-id\");\n+    let id = tcx.hir().as_local_hir_id(item_def_id).expect(\"expected local def-id\");\n     let unsupported = || {\n         // Variance not relevant.\n-        span_bug!(tcx.hir().span(id), \"asked to compute variance for wrong kind of item\")\n+        span_bug!(tcx.hir().span_by_hir_id(id), \"asked to compute variance for wrong kind of item\")\n     };\n-    match tcx.hir().get(id) {\n+    match tcx.hir().get_by_hir_id(id) {\n         Node::Item(item) => match item.node {\n             hir::ItemKind::Enum(..) |\n             hir::ItemKind::Struct(..) |"}]}