{"sha": "9bbff50c14c34d7c0c02f8062747bfedf3d21cd3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliYmZmNTBjMTRjMzRkN2MwYzAyZjgwNjI3NDdiZmVkZjNkMjFjZDM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-12T01:18:37Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-12T01:18:53Z"}, "message": "manual: fix various examples.", "tree": {"sha": "e29f17946ea7094f8ab407e5b42413184c5e2a08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e29f17946ea7094f8ab407e5b42413184c5e2a08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bbff50c14c34d7c0c02f8062747bfedf3d21cd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bbff50c14c34d7c0c02f8062747bfedf3d21cd3", "html_url": "https://github.com/rust-lang/rust/commit/9bbff50c14c34d7c0c02f8062747bfedf3d21cd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bbff50c14c34d7c0c02f8062747bfedf3d21cd3/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "089e257769a3f46fe8cc0668bebe602a9209d334", "url": "https://api.github.com/repos/rust-lang/rust/commits/089e257769a3f46fe8cc0668bebe602a9209d334", "html_url": "https://github.com/rust-lang/rust/commit/089e257769a3f46fe8cc0668bebe602a9209d334"}], "stats": {"total": 40, "additions": 17, "deletions": 23}, "files": [{"sha": "83b78b3988387d574477ba5e4454e6d8e2a8a0ea", "filename": "doc/rust.md", "status": "modified", "additions": 17, "deletions": 23, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9bbff50c14c34d7c0c02f8062747bfedf3d21cd3/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/9bbff50c14c34d7c0c02f8062747bfedf3d21cd3/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=9bbff50c14c34d7c0c02f8062747bfedf3d21cd3", "patch": "@@ -2089,30 +2089,16 @@ in the `expr` following `do`.\n If the `expr` is a [path expression](#path-expressions), it is parsed as though it is a call expression.\n If the `expr` is a [field expression](#field-expressions), it is parsed as though it is a method call expression.\n \n-Additionally, any occurrence of a [return expression](#return-expressions)\n-inside the `block` of a `do` expression is rewritten\n-as a reference to an (anonymous) flag set in the caller's environment,\n-which is checked on return from the `expr` and, if set,\n-causes a corresponding return from the caller.\n-In this way, the meaning of `return` statements in language built-in control blocks is preserved,\n-if they are rewritten using lambda functions and `do` expressions as abstractions.\n-\n-Therefore the two calls to `f` in this example are equivalent.\n-Both cause an early return from the caller's frame:\n+In this example, both calls to `f` are equivalent:\n \n ~~~~\n # fn f(f: fn(int)) { }\n # fn g(i: int) { }\n \n-{\n-  let mut _early_ret = false;\n-  f(|j| { g(j); _early_ret = true; });\n-  if _early_ret { return; }\n-}\n+f(|j| g(j));\n \n do f |j| {\n     g(j);\n-    return;\n }\n ~~~~\n \n@@ -2130,7 +2116,15 @@ suited to passing the `block` function to a higher-order function implementing a\n Like a `do` expression, a `return` expression inside a `for` expresison is rewritten,\n to access a local flag that causes an early return in the caller.\n \n-Additionally, [`break`](#break-expressions) and [`loop`](#loop-expressions) expressions\n+Additionally, any occurrence of a [return expression](#return-expressions)\n+inside the `block` of a `for` expression is rewritten\n+as a reference to an (anonymous) flag set in the caller's environment,\n+which is checked on return from the `expr` and, if set,\n+causes a corresponding return from the caller.\n+In this way, the meaning of `return` statements in language built-in control blocks is preserved,\n+if they are rewritten using lambda functions and `do` expressions as abstractions.\n+\n+Like `return` expressions, any [`break`](#break-expressions) and [`loop`](#loop-expressions) expressions\n are rewritten inside `for` expressions, with a combination of local flag variables,\n and early boolean-valued returns from the `block` function,\n such that the meaning of `break` and `loop` is preserved in a primitive loop\n@@ -2143,7 +2137,7 @@ An example a for loop:\n # fn bar(f: foo) { }\n # let a = 0, b = 0, c = 0;\n \n-let v: [foo] = [a, b, c];\n+let v: &[foo] = &[a, b, c];\n \n for v.each |e| {\n     bar(*e);\n@@ -2530,7 +2524,7 @@ The kind of a vector type depends on the kind of its member type, as with other\n An example of a vector type and its use:\n \n ~~~~\n-let v: &[int] = [7, 5, 3];\n+let v: &[int] = &[7, 5, 3];\n let i: int = v[2];\n assert (i == 3);\n ~~~~\n@@ -2701,16 +2695,16 @@ trait Printable {\n   fn to_str() -> ~str;\n }\n \n-impl ~str: Printable {\n-  fn to_str() -> ~str { self }\n+impl int: Printable {\n+  fn to_str() -> ~str { int::to_str(self, 10) }\n }\n \n-fn print(a: Printable) {\n+fn print(a: @Printable) {\n    io::println(a.to_str());\n }\n \n fn main() {\n-   print(~\"meow\" as ~Printable);\n+   print(@10 as @Printable);\n }\n ~~~~~~~~\n "}]}