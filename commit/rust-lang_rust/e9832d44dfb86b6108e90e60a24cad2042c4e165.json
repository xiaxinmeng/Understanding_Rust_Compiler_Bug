{"sha": "e9832d44dfb86b6108e90e60a24cad2042c4e165", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5ODMyZDQ0ZGZiODZiNjEwOGU5MGU2MGEyNGNhZDIwNDJjNGUxNjU=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-09-11T23:21:03Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-09-12T05:18:45Z"}, "message": "ident->name cleanup", "tree": {"sha": "1f3204fc85feb9f0384b8f616e67ac67b3aef305", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f3204fc85feb9f0384b8f616e67ac67b3aef305"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9832d44dfb86b6108e90e60a24cad2042c4e165", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9832d44dfb86b6108e90e60a24cad2042c4e165", "html_url": "https://github.com/rust-lang/rust/commit/e9832d44dfb86b6108e90e60a24cad2042c4e165", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9832d44dfb86b6108e90e60a24cad2042c4e165/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f576ed0c762c03a03f5cf576e3ab868fd1fae957", "url": "https://api.github.com/repos/rust-lang/rust/commits/f576ed0c762c03a03f5cf576e3ab868fd1fae957", "html_url": "https://github.com/rust-lang/rust/commit/f576ed0c762c03a03f5cf576e3ab868fd1fae957"}], "stats": {"total": 39, "additions": 22, "deletions": 17}, "files": [{"sha": "87108530c757e2a74a348693cc6107477a8a9439", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9832d44dfb86b6108e90e60a24cad2042c4e165/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9832d44dfb86b6108e90e60a24cad2042c4e165/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=e9832d44dfb86b6108e90e60a24cad2042c4e165", "patch": "@@ -1202,10 +1202,11 @@ pub fn get_struct_fields(intr: @ident_interner, cdata: Cmd, id: ast::NodeId)\n     do reader::tagged_docs(item, tag_item_field) |an_item| {\n         let f = item_family(an_item);\n         if f == PublicField || f == PrivateField || f == InheritedField {\n+            // FIXME #6993: name should be of type Name, not Ident\n             let name = item_name(intr, an_item);\n             let did = item_def_id(an_item, cdata);\n             result.push(ty::field_ty {\n-                ident: name,\n+                name: name.name,\n                 id: did, vis:\n                 struct_field_family_to_visibility(f),\n             });\n@@ -1215,7 +1216,7 @@ pub fn get_struct_fields(intr: @ident_interner, cdata: Cmd, id: ast::NodeId)\n     do reader::tagged_docs(item, tag_item_unnamed_field) |an_item| {\n         let did = item_def_id(an_item, cdata);\n         result.push(ty::field_ty {\n-            ident: special_idents::unnamed_field,\n+            name: special_idents::unnamed_field.name,\n             id: did,\n             vis: ast::inherited,\n         });"}, {"sha": "2a38492a6e58626800a41bd765f0e380c509aa68", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9832d44dfb86b6108e90e60a24cad2042c4e165/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9832d44dfb86b6108e90e60a24cad2042c4e165/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=e9832d44dfb86b6108e90e60a24cad2042c4e165", "patch": "@@ -700,7 +700,7 @@ pub fn specialize(cx: &MatchCheckCtxt,\n                         }\n                         let args = class_fields.iter().map(|class_field| {\n                             match flds.iter().find(|f|\n-                                            f.ident == class_field.ident) {\n+                                            f.ident.name == class_field.name) {\n                                 Some(f) => f.pat,\n                                 _ => wild()\n                             }"}, {"sha": "0e3c10ef21471c00fd990b6cb22aa2165c760e39", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9832d44dfb86b6108e90e60a24cad2042c4e165/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9832d44dfb86b6108e90e60a24cad2042c4e165/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=e9832d44dfb86b6108e90e60a24cad2042c4e165", "patch": "@@ -1059,6 +1059,7 @@ impl mem_categorization_ctxt {\n /// an enum to determine which variant is in use.\n pub fn field_mutbl(tcx: ty::ctxt,\n                    base_ty: ty::t,\n+                   // FIXME #6993: change type to Name\n                    f_name: ast::Ident,\n                    node_id: ast::NodeId)\n                 -> Option<ast::Mutability> {\n@@ -1067,7 +1068,7 @@ pub fn field_mutbl(tcx: ty::ctxt,\n       ty::ty_struct(did, _) => {\n         let r = ty::lookup_struct_fields(tcx, did);\n         for fld in r.iter() {\n-            if fld.ident == f_name {\n+            if fld.name == f_name.name {\n                 return Some(ast::MutImmutable);\n             }\n         }\n@@ -1077,7 +1078,7 @@ pub fn field_mutbl(tcx: ty::ctxt,\n           ast::DefVariant(_, variant_id, _) => {\n             let r = ty::lookup_struct_fields(tcx, variant_id);\n             for fld in r.iter() {\n-                if fld.ident == f_name {\n+                if fld.name == f_name.name {\n                     return Some(ast::MutImmutable);\n                 }\n             }"}, {"sha": "b6b03d8369a44528d60c4c62888437272729a016", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9832d44dfb86b6108e90e60a24cad2042c4e165/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9832d44dfb86b6108e90e60a24cad2042c4e165/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=e9832d44dfb86b6108e90e60a24cad2042c4e165", "patch": "@@ -203,10 +203,11 @@ impl PrivacyVisitor {\n     }\n \n     // Checks that a private field is in scope.\n+    // FIXME #6993: change type (and name) from Ident to Name\n     fn check_field(&mut self, span: Span, id: ast::DefId, ident: ast::Ident) {\n         let fields = ty::lookup_struct_fields(self.tcx, id);\n         for field in fields.iter() {\n-            if field.ident.name != ident.name { loop; }\n+            if field.name != ident.name { loop; }\n             if field.vis == private {\n                 self.tcx.sess.span_err(span, fmt!(\"field `%s` is private\",\n                                              token::ident_to_str(&ident)));"}, {"sha": "62fbdc41b0e7046f34187a15e71b725ce7fd1d2d", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9832d44dfb86b6108e90e60a24cad2042c4e165/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9832d44dfb86b6108e90e60a24cad2042c4e165/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=e9832d44dfb86b6108e90e60a24cad2042c4e165", "patch": "@@ -672,7 +672,7 @@ fn enter_opt<'r>(bcx: @mut Block,\n                     let r = ty::lookup_struct_fields(tcx, struct_id);\n                     for field in r.iter() {\n                             match field_pats.iter().find(|p| p.ident.name\n-                                                         == field.ident.name) {\n+                                                         == field.name) {\n                                 None => reordered_patterns.push(dummy),\n                                 Some(fp) => reordered_patterns.push(fp.pat)\n                             }"}, {"sha": "33870ed6acb06597e41ff094aa949db0b8816ab2", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e9832d44dfb86b6108e90e60a24cad2042c4e165/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9832d44dfb86b6108e90e60a24cad2042c4e165/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=e9832d44dfb86b6108e90e60a24cad2042c4e165", "patch": "@@ -156,7 +156,7 @@ pub enum SelfMode {\n }\n \n pub struct field_ty {\n-    ident: Ident,\n+    name: Name,\n     id: DefId,\n     vis: ast::visibility,\n }\n@@ -4227,15 +4227,15 @@ fn struct_field_tys(fields: &[@struct_field]) -> ~[field_ty] {\n         match field.node.kind {\n             named_field(ident, visibility) => {\n                 field_ty {\n-                    ident: ident,\n+                    name: ident.name,\n                     id: ast_util::local_def(field.node.id),\n                     vis: visibility,\n                 }\n             }\n             unnamed_field => {\n                 field_ty {\n-                    ident:\n-                        syntax::parse::token::special_idents::unnamed_field,\n+                    name:\n+                        syntax::parse::token::special_idents::unnamed_field.name,\n                     id: ast_util::local_def(field.node.id),\n                     vis: ast::public,\n                 }\n@@ -4250,7 +4250,8 @@ pub fn struct_fields(cx: ctxt, did: ast::DefId, substs: &substs)\n                      -> ~[field] {\n     do lookup_struct_fields(cx, did).map |f| {\n        field {\n-            ident: f.ident,\n+            // FIXME #6993: change type of field to Name and get rid of new()\n+            ident: ast::Ident::new(f.name),\n             mt: mt {\n                 ty: lookup_field_type(cx, did, f.id, substs),\n                 mutbl: MutImmutable"}, {"sha": "196057e09f762d84fc7f26f15e6a19dad971500c", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9832d44dfb86b6108e90e60a24cad2042c4e165/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9832d44dfb86b6108e90e60a24cad2042c4e165/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=e9832d44dfb86b6108e90e60a24cad2042c4e165", "patch": "@@ -21,6 +21,7 @@ use middle::typeck::require_same_types;\n use std::hashmap::{HashMap, HashSet};\n use syntax::ast;\n use syntax::ast_util;\n+use syntax::parse::token;\n use syntax::codemap::Span;\n use syntax::print::pprust;\n \n@@ -296,7 +297,7 @@ pub fn check_struct_pat_fields(pcx: &pat_ctxt,\n     // Index the class fields.\n     let mut field_map = HashMap::new();\n     for (i, class_field) in class_fields.iter().enumerate() {\n-        field_map.insert(class_field.ident.name, i);\n+        field_map.insert(class_field.name, i);\n     }\n \n     // Typecheck each field.\n@@ -333,7 +334,7 @@ pub fn check_struct_pat_fields(pcx: &pat_ctxt,\n             }\n             tcx.sess.span_err(span,\n                               fmt!(\"pattern does not mention field `%s`\",\n-                                   tcx.sess.str_of(field.ident)));\n+                                   token::interner_get(field.name)));\n         }\n     }\n }"}, {"sha": "b689090d3fd3e659a44ee8bd7fffa8d166a65db9", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9832d44dfb86b6108e90e60a24cad2042c4e165/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9832d44dfb86b6108e90e60a24cad2042c4e165/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=e9832d44dfb86b6108e90e60a24cad2042c4e165", "patch": "@@ -1120,7 +1120,7 @@ pub fn lookup_field_ty(tcx: ty::ctxt,\n                        fieldname: ast::Name,\n                        substs: &ty::substs) -> Option<ty::t> {\n \n-    let o_field = items.iter().find(|f| f.ident.name == fieldname);\n+    let o_field = items.iter().find(|f| f.name == fieldname);\n     do o_field.map() |f| {\n         ty::lookup_field_type(tcx, class_id, f.id, substs)\n     }\n@@ -2018,7 +2018,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         let mut class_field_map = HashMap::new();\n         let mut fields_found = 0;\n         for field in field_types.iter() {\n-            class_field_map.insert(field.ident.name, (field.id, false));\n+            class_field_map.insert(field.name, (field.id, false));\n         }\n \n         let mut error_happened = false;\n@@ -2070,7 +2070,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n             if fields_found < field_types.len() {\n                 let mut missing_fields = ~[];\n                 for class_field in field_types.iter() {\n-                    let name = class_field.ident.name;\n+                    let name = class_field.name;\n                     let (_, seen) = *class_field_map.get(&name);\n                     if !seen {\n                         missing_fields.push("}]}