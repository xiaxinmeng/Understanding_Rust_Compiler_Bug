{"sha": "d8d60215dacc3eeddeda4d6af7007e2129fdb00e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ZDYwMjE1ZGFjYzNlZWRkZWRhNGQ2YWY3MDA3ZTIxMjlmZGIwMGU=", "commit": {"author": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2018-12-21T22:29:59Z"}, "committer": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2018-12-21T22:29:59Z"}, "message": "Fix handling of nested self in paths", "tree": {"sha": "4caab03638e2a66c06f91d21762b09bab5cdca4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4caab03638e2a66c06f91d21762b09bab5cdca4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8d60215dacc3eeddeda4d6af7007e2129fdb00e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8d60215dacc3eeddeda4d6af7007e2129fdb00e", "html_url": "https://github.com/rust-lang/rust/commit/d8d60215dacc3eeddeda4d6af7007e2129fdb00e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8d60215dacc3eeddeda4d6af7007e2129fdb00e/comments", "author": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67ac0a423f767ce8973348d5188e8baa6979d380", "url": "https://api.github.com/repos/rust-lang/rust/commits/67ac0a423f767ce8973348d5188e8baa6979d380", "html_url": "https://github.com/rust-lang/rust/commit/67ac0a423f767ce8973348d5188e8baa6979d380"}], "stats": {"total": 43, "additions": 40, "deletions": 3}, "files": [{"sha": "3e29c39541ab489423786d8fb978f566b6aff8ce", "filename": "crates/ra_hir/src/module/nameres/tests.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d8d60215dacc3eeddeda4d6af7007e2129fdb00e/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d60215dacc3eeddeda4d6af7007e2129fdb00e/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres%2Ftests.rs?ref=d8d60215dacc3eeddeda4d6af7007e2129fdb00e", "patch": "@@ -43,6 +43,25 @@ fn item_map_smoke_test() {\n     assert!(resolution.def_id.is_some());\n }\n \n+#[test]\n+fn test_self() {\n+    let (item_map, module_id) = item_map(\n+        \"\n+            //- /lib.rs\n+            mod foo;\n+            use crate::foo::bar::Baz::{self};\n+            <|>\n+            //- /foo/mod.rs\n+            pub mod bar;\n+            //- /foo/bar.rs\n+            pub struct Baz;\n+        \",\n+    );\n+    let name = SmolStr::from(\"Baz\");\n+    let resolution = &item_map.per_module[&module_id].items[&name];\n+    assert!(resolution.def_id.is_some());\n+}\n+\n #[test]\n fn item_map_across_crates() {\n     let (mut db, sr) = MockDatabase::with_files("}, {"sha": "1b3fb430688fe3361829c7a7781031e633d6c3a4", "filename": "crates/ra_hir/src/path.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d8d60215dacc3eeddeda4d6af7007e2129fdb00e/crates%2Fra_hir%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d60215dacc3eeddeda4d6af7007e2129fdb00e/crates%2Fra_hir%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fpath.rs?ref=d8d60215dacc3eeddeda4d6af7007e2129fdb00e", "patch": "@@ -76,14 +76,32 @@ fn expand_use_tree(\n ) {\n     if let Some(use_tree_list) = tree.use_tree_list() {\n         let prefix = match tree.path() {\n+            // E.g. use something::{{{inner}}};\n             None => prefix,\n+            // E.g. `use something::{inner}` (prefix is `None`, path is `something`)\n+            // or `use something::{path::{inner::{innerer}}}` (prefix is `something::path`, path is `inner`)\n             Some(path) => match convert_path(prefix, path) {\n                 Some(it) => Some(it),\n                 None => return, // TODO: report errors somewhere\n             },\n         };\n-        for tree in use_tree_list.use_trees() {\n-            expand_use_tree(prefix.clone(), tree, cb);\n+        for child_tree in use_tree_list.use_trees() {\n+            // Handle self in a path.\n+            // E.g. `use something::{self, <...>}`\n+            if let Some(path) = child_tree.path() {\n+                if path.qualifier().is_none() {\n+                    if let Some(segment) = path.segment() {\n+                        if segment.kind() == Some(ast::PathSegmentKind::SelfKw) {\n+                            /* TODO: Work out what on earth range means in this callback */\n+                            if let Some(prefix) = prefix.clone() {\n+                                cb(prefix, Some(segment.syntax().range()));\n+                                continue;\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            expand_use_tree(prefix.clone(), child_tree, cb);\n         }\n     } else {\n         if let Some(ast_path) = tree.path() {"}, {"sha": "f12479fb46e19658d96ad6984e1df2fae0dbc574", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8d60215dacc3eeddeda4d6af7007e2129fdb00e/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d60215dacc3eeddeda4d6af7007e2129fdb00e/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=d8d60215dacc3eeddeda4d6af7007e2129fdb00e", "patch": "@@ -284,7 +284,7 @@ impl<'a> IfExpr<'a> {\n     }\n }\n \n-#[derive(Debug, Clone, Copy)]\n+#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n pub enum PathSegmentKind<'a> {\n     Name(NameRef<'a>),\n     SelfKw,"}]}