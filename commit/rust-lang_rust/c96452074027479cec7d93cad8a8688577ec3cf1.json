{"sha": "c96452074027479cec7d93cad8a8688577ec3cf1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5NjQ1MjA3NDAyNzQ3OWNlYzdkOTNjYWQ4YTg2ODg1NzdlYzNjZjE=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2019-09-15T14:52:02Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-02-21T18:41:22Z"}, "message": "Update tests after compiletest changes", "tree": {"sha": "d356f06a770109553952dd43ef30010539e9235a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d356f06a770109553952dd43ef30010539e9235a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c96452074027479cec7d93cad8a8688577ec3cf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c96452074027479cec7d93cad8a8688577ec3cf1", "html_url": "https://github.com/rust-lang/rust/commit/c96452074027479cec7d93cad8a8688577ec3cf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c96452074027479cec7d93cad8a8688577ec3cf1/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd28614cb799b762880b25b976760ddd0c530e92", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd28614cb799b762880b25b976760ddd0c530e92", "html_url": "https://github.com/rust-lang/rust/commit/fd28614cb799b762880b25b976760ddd0c530e92"}], "stats": {"total": 187, "additions": 63, "deletions": 124}, "files": [{"sha": "dd45c9e4436680b01142b28106dcc6f92c3de095", "filename": "src/test/ui/associated-types/defaults-suitability.stderr", "status": "modified", "additions": 29, "deletions": 64, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/c96452074027479cec7d93cad8a8688577ec3cf1/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c96452074027479cec7d93cad8a8688577ec3cf1/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr?ref=c96452074027479cec7d93cad8a8688577ec3cf1", "patch": "@@ -1,154 +1,119 @@\n error[E0277]: the trait bound `NotClone: std::clone::Clone` is not satisfied\n   --> $DIR/defaults-suitability.rs:17:14\n    |\n+LL | trait Tr {\n+   | -------- required by `Tr`\n LL |     type Ty: Clone = NotClone;\n    |              ^^^^^ the trait `std::clone::Clone` is not implemented for `NotClone`\n-   |\n-note: required by `Tr`\n-  --> $DIR/defaults-suitability.rs:16:1\n-   |\n-LL | trait Tr {\n-   | ^^^^^^^^\n \n error[E0277]: the trait bound `NotClone: std::clone::Clone` is not satisfied\n   --> $DIR/defaults-suitability.rs:22:27\n    |\n LL | trait Tr2 where Self::Ty: Clone {\n-   |                           ^^^^^ the trait `std::clone::Clone` is not implemented for `NotClone`\n-   |\n-note: required by `Tr2`\n-  --> $DIR/defaults-suitability.rs:22:1\n-   |\n-LL | trait Tr2 where Self::Ty: Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | --------------------------^^^^^\n+   | |                         |\n+   | |                         the trait `std::clone::Clone` is not implemented for `NotClone`\n+   | required by `Tr2`\n \n error[E0277]: the trait bound `T: std::clone::Clone` is not satisfied\n   --> $DIR/defaults-suitability.rs:35:15\n    |\n+LL | trait Foo<T> {\n+   | ------------ required by `Foo`\n LL |     type Bar: Clone = Vec<T>;\n    |               ^^^^^ the trait `std::clone::Clone` is not implemented for `T`\n    |\n    = help: consider adding a `where T: std::clone::Clone` bound\n    = note: required because of the requirements on the impl of `std::clone::Clone` for `std::vec::Vec<T>`\n-note: required by `Foo`\n-  --> $DIR/defaults-suitability.rs:34:1\n-   |\n-LL | trait Foo<T> {\n-   | ^^^^^^^^^^^^\n \n error[E0277]: the trait bound `(): Foo<Self>` is not satisfied\n   --> $DIR/defaults-suitability.rs:41:17\n    |\n+LL | trait Bar: Sized {\n+   | ---------------- required by `Bar`\n+LL |     // `(): Foo<Self>` might hold for some possible impls but not all.\n LL |     type Assoc: Foo<Self> = ();\n    |                 ^^^^^^^^^ the trait `Foo<Self>` is not implemented for `()`\n-   |\n-note: required by `Bar`\n-  --> $DIR/defaults-suitability.rs:39:1\n-   |\n-LL | trait Bar: Sized {\n-   | ^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `NotClone: IsU8<NotClone>` is not satisfied\n   --> $DIR/defaults-suitability.rs:61:18\n    |\n-LL |     Self::Assoc: IsU8<Self::Assoc>,\n-   |                  ^^^^^^^^^^^^^^^^^ the trait `IsU8<NotClone>` is not implemented for `NotClone`\n-   |\n-note: required by `D`\n-  --> $DIR/defaults-suitability.rs:58:1\n-   |\n LL | / trait D where\n LL | |     Vec<Self::Assoc>: Clone,\n LL | |\n LL | |     Self::Assoc: IsU8<Self::Assoc>,\n+   | |                  ^^^^^^^^^^^^^^^^^ the trait `IsU8<NotClone>` is not implemented for `NotClone`\n ...  |\n LL | |     type Assoc = NotClone;\n LL | | }\n-   | |_^\n+   | |_- required by `D`\n \n error[E0277]: the trait bound `bool: IsU8<NotClone>` is not satisfied\n   --> $DIR/defaults-suitability.rs:63:11\n    |\n-LL |     bool: IsU8<Self::Assoc>,\n-   |           ^^^^^^^^^^^^^^^^^ the trait `IsU8<NotClone>` is not implemented for `bool`\n-   |\n-note: required by `D`\n-  --> $DIR/defaults-suitability.rs:58:1\n-   |\n LL | / trait D where\n LL | |     Vec<Self::Assoc>: Clone,\n LL | |\n LL | |     Self::Assoc: IsU8<Self::Assoc>,\n+LL | |\n+LL | |     bool: IsU8<Self::Assoc>,\n+   | |           ^^^^^^^^^^^^^^^^^ the trait `IsU8<NotClone>` is not implemented for `bool`\n ...  |\n LL | |     type Assoc = NotClone;\n LL | | }\n-   | |_^\n+   | |_- required by `D`\n \n error[E0277]: the trait bound `NotClone: std::clone::Clone` is not satisfied\n   --> $DIR/defaults-suitability.rs:59:23\n    |\n-LL |     Vec<Self::Assoc>: Clone,\n-   |                       ^^^^^ the trait `std::clone::Clone` is not implemented for `NotClone`\n-   |\n-   = note: required because of the requirements on the impl of `std::clone::Clone` for `std::vec::Vec<NotClone>`\n-note: required by `D`\n-  --> $DIR/defaults-suitability.rs:58:1\n-   |\n LL | / trait D where\n LL | |     Vec<Self::Assoc>: Clone,\n+   | |                       ^^^^^ the trait `std::clone::Clone` is not implemented for `NotClone`\n LL | |\n LL | |     Self::Assoc: IsU8<Self::Assoc>,\n ...  |\n LL | |     type Assoc = NotClone;\n LL | | }\n-   | |_^\n+   | |_- required by `D`\n+   |\n+   = note: required because of the requirements on the impl of `std::clone::Clone` for `std::vec::Vec<NotClone>`\n \n error[E0277]: the trait bound `<Self as Foo2<T>>::Baz: std::clone::Clone` is not satisfied\n   --> $DIR/defaults-suitability.rs:74:15\n    |\n+LL | trait Foo2<T> {\n+   | ------------- required by `Foo2`\n LL |     type Bar: Clone = Vec<Self::Baz>;\n    |               ^^^^^ the trait `std::clone::Clone` is not implemented for `<Self as Foo2<T>>::Baz`\n    |\n    = help: consider adding a `where <Self as Foo2<T>>::Baz: std::clone::Clone` bound\n    = note: required because of the requirements on the impl of `std::clone::Clone` for `std::vec::Vec<<Self as Foo2<T>>::Baz>`\n-note: required by `Foo2`\n-  --> $DIR/defaults-suitability.rs:73:1\n-   |\n-LL | trait Foo2<T> {\n-   | ^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `<Self as Foo25<T>>::Baz: std::clone::Clone` is not satisfied\n   --> $DIR/defaults-suitability.rs:83:15\n    |\n+LL | trait Foo25<T: Clone> {\n+   | --------------------- required by `Foo25`\n LL |     type Bar: Clone = Vec<Self::Baz>;\n    |               ^^^^^ the trait `std::clone::Clone` is not implemented for `<Self as Foo25<T>>::Baz`\n    |\n    = help: consider adding a `where <Self as Foo25<T>>::Baz: std::clone::Clone` bound\n    = note: required because of the requirements on the impl of `std::clone::Clone` for `std::vec::Vec<<Self as Foo25<T>>::Baz>`\n-note: required by `Foo25`\n-  --> $DIR/defaults-suitability.rs:82:1\n-   |\n-LL | trait Foo25<T: Clone> {\n-   | ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `T: std::clone::Clone` is not satisfied\n   --> $DIR/defaults-suitability.rs:92:16\n    |\n-LL |     Self::Baz: Clone,\n-   |                ^^^^^ the trait `std::clone::Clone` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: std::clone::Clone` bound\n-note: required by `Foo3`\n-  --> $DIR/defaults-suitability.rs:90:1\n-   |\n LL | / trait Foo3<T> where\n LL | |     Self::Bar: Clone,\n LL | |     Self::Baz: Clone,\n+   | |                ^^^^^ the trait `std::clone::Clone` is not implemented for `T`\n LL | |\n ...  |\n LL | |     type Baz = T;\n LL | | }\n-   | |_^\n+   | |_- required by `Foo3`\n+   |\n+   = help: consider adding a `where T: std::clone::Clone` bound\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n   --> $DIR/defaults-suitability.rs:29:5"}, {"sha": "e8eb085b791463548e44a90913fc3d60332fb01f", "filename": "src/test/ui/associated-types/defaults-unsound-62211-1.stderr", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c96452074027479cec7d93cad8a8688577ec3cf1/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c96452074027479cec7d93cad8a8688577ec3cf1/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr?ref=c96452074027479cec7d93cad8a8688577ec3cf1", "patch": "@@ -1,57 +1,49 @@\n error[E0277]: the trait bound `Self: std::marker::Copy` is not satisfied\n   --> $DIR/defaults-unsound-62211-1.rs:23:18\n    |\n+LL | trait UncheckedCopy: Sized {\n+   | -------------------------- required by `UncheckedCopy`\n+...\n LL |     type Output: Copy\n    |                  ^^^^ the trait `std::marker::Copy` is not implemented for `Self`\n    |\n    = help: consider adding a `where Self: std::marker::Copy` bound\n-note: required by `UncheckedCopy`\n-  --> $DIR/defaults-unsound-62211-1.rs:20:1\n-   |\n-LL | trait UncheckedCopy: Sized {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: cannot add-assign `&'static str` to `Self`\n   --> $DIR/defaults-unsound-62211-1.rs:27:7\n    |\n+LL | trait UncheckedCopy: Sized {\n+   | -------------------------- required by `UncheckedCopy`\n+...\n LL |     + AddAssign<&'static str>\n    |       ^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `Self += &'static str`\n    |\n    = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `Self`\n    = help: consider adding a `where Self: std::ops::AddAssign<&'static str>` bound\n-note: required by `UncheckedCopy`\n-  --> $DIR/defaults-unsound-62211-1.rs:20:1\n-   |\n-LL | trait UncheckedCopy: Sized {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `Self: std::ops::Deref` is not satisfied\n   --> $DIR/defaults-unsound-62211-1.rs:25:7\n    |\n+LL | trait UncheckedCopy: Sized {\n+   | -------------------------- required by `UncheckedCopy`\n+...\n LL |     + Deref<Target = str>\n    |       ^^^^^^^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `Self`\n    |\n    = help: consider adding a `where Self: std::ops::Deref` bound\n-note: required by `UncheckedCopy`\n-  --> $DIR/defaults-unsound-62211-1.rs:20:1\n-   |\n-LL | trait UncheckedCopy: Sized {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `Self` doesn't implement `std::fmt::Display`\n   --> $DIR/defaults-unsound-62211-1.rs:30:7\n    |\n+LL | trait UncheckedCopy: Sized {\n+   | -------------------------- required by `UncheckedCopy`\n+...\n LL |     + Display = Self;\n    |       ^^^^^^^ `Self` cannot be formatted with the default formatter\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `Self`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n    = help: consider adding a `where Self: std::fmt::Display` bound\n-note: required by `UncheckedCopy`\n-  --> $DIR/defaults-unsound-62211-1.rs:20:1\n-   |\n-LL | trait UncheckedCopy: Sized {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `T` doesn't implement `std::fmt::Display`\n   --> $DIR/defaults-unsound-62211-1.rs:43:9"}, {"sha": "a0b5d6b9cbb46e774ee2c45ceda743368a94bc8b", "filename": "src/test/ui/associated-types/defaults-unsound-62211-2.stderr", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c96452074027479cec7d93cad8a8688577ec3cf1/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c96452074027479cec7d93cad8a8688577ec3cf1/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr?ref=c96452074027479cec7d93cad8a8688577ec3cf1", "patch": "@@ -1,57 +1,49 @@\n error[E0277]: the trait bound `Self: std::marker::Copy` is not satisfied\n   --> $DIR/defaults-unsound-62211-2.rs:23:18\n    |\n+LL | trait UncheckedCopy: Sized {\n+   | -------------------------- required by `UncheckedCopy`\n+...\n LL |     type Output: Copy\n    |                  ^^^^ the trait `std::marker::Copy` is not implemented for `Self`\n    |\n    = help: consider adding a `where Self: std::marker::Copy` bound\n-note: required by `UncheckedCopy`\n-  --> $DIR/defaults-unsound-62211-2.rs:20:1\n-   |\n-LL | trait UncheckedCopy: Sized {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: cannot add-assign `&'static str` to `Self`\n   --> $DIR/defaults-unsound-62211-2.rs:27:7\n    |\n+LL | trait UncheckedCopy: Sized {\n+   | -------------------------- required by `UncheckedCopy`\n+...\n LL |     + AddAssign<&'static str>\n    |       ^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `Self += &'static str`\n    |\n    = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `Self`\n    = help: consider adding a `where Self: std::ops::AddAssign<&'static str>` bound\n-note: required by `UncheckedCopy`\n-  --> $DIR/defaults-unsound-62211-2.rs:20:1\n-   |\n-LL | trait UncheckedCopy: Sized {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `Self: std::ops::Deref` is not satisfied\n   --> $DIR/defaults-unsound-62211-2.rs:25:7\n    |\n+LL | trait UncheckedCopy: Sized {\n+   | -------------------------- required by `UncheckedCopy`\n+...\n LL |     + Deref<Target = str>\n    |       ^^^^^^^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `Self`\n    |\n    = help: consider adding a `where Self: std::ops::Deref` bound\n-note: required by `UncheckedCopy`\n-  --> $DIR/defaults-unsound-62211-2.rs:20:1\n-   |\n-LL | trait UncheckedCopy: Sized {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `Self` doesn't implement `std::fmt::Display`\n   --> $DIR/defaults-unsound-62211-2.rs:30:7\n    |\n+LL | trait UncheckedCopy: Sized {\n+   | -------------------------- required by `UncheckedCopy`\n+...\n LL |     + Display = Self;\n    |       ^^^^^^^ `Self` cannot be formatted with the default formatter\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `Self`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n    = help: consider adding a `where Self: std::fmt::Display` bound\n-note: required by `UncheckedCopy`\n-  --> $DIR/defaults-unsound-62211-2.rs:20:1\n-   |\n-LL | trait UncheckedCopy: Sized {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `T` doesn't implement `std::fmt::Display`\n   --> $DIR/defaults-unsound-62211-2.rs:43:9"}, {"sha": "75a5b3f3551cb8d292a8045a8e0e721c76789949", "filename": "src/test/ui/associated-types/issue-43924.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c96452074027479cec7d93cad8a8688577ec3cf1/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c96452074027479cec7d93cad8a8688577ec3cf1/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.stderr?ref=c96452074027479cec7d93cad8a8688577ec3cf1", "patch": "@@ -1,14 +1,10 @@\n error[E0277]: the trait bound `(dyn std::string::ToString + 'static): std::default::Default` is not satisfied\n   --> $DIR/issue-43924.rs:7:15\n    |\n+LL | trait Foo<T: Default + ToString> {\n+   | -------------------------------- required by `Foo`\n LL |     type Out: Default + ToString + ?Sized = dyn ToString;\n    |               ^^^^^^^ the trait `std::default::Default` is not implemented for `(dyn std::string::ToString + 'static)`\n-   |\n-note: required by `Foo`\n-  --> $DIR/issue-43924.rs:6:1\n-   |\n-LL | trait Foo<T: Default + ToString> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `(dyn std::string::ToString + 'static): std::default::Default` is not satisfied\n   --> $DIR/issue-43924.rs:10:6"}, {"sha": "1a1e98cbac27f4a74c9aa520a94abcf49aaa9ed9", "filename": "src/test/ui/associated-types/issue-54182-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c96452074027479cec7d93cad8a8688577ec3cf1/src%2Ftest%2Fui%2Fassociated-types%2Fissue-54182-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c96452074027479cec7d93cad8a8688577ec3cf1/src%2Ftest%2Fui%2Fassociated-types%2Fissue-54182-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-54182-1.rs?ref=c96452074027479cec7d93cad8a8688577ec3cf1", "patch": "@@ -21,12 +21,12 @@ macro_rules! overload {\n }\n \n fn main() {\n-    let r: () = overload!(42, true);\n+    let () = overload!(42, true);\n \n     let r: f32 = overload!(\"Hello world\", 13.0);\n     assert_eq!(r, 13.0);\n \n-    let r: () = overload!(42, true, 42.5);\n+    let () = overload!(42, true, 42.5);\n \n     let r: i32 = overload!(\"Hello world\", 13.0, 42);\n     assert_eq!(r, 42);"}, {"sha": "8dbc24c0673209949fa223d73e73bcb2d9a5d83d", "filename": "src/test/ui/associated-types/issue-63593.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c96452074027479cec7d93cad8a8688577ec3cf1/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c96452074027479cec7d93cad8a8688577ec3cf1/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.rs?ref=c96452074027479cec7d93cad8a8688577ec3cf1", "patch": "@@ -9,3 +9,5 @@ trait MyTrait {\n     type This = Self;  //~ error: size for values of type `Self` cannot be known\n     fn something<I: Inner<Self::This>>(i: I);\n }\n+\n+fn main() {}"}, {"sha": "37dd52980d996efbe98d0d7c541a9e0e96ee4d0f", "filename": "src/test/ui/associated-types/issue-63593.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c96452074027479cec7d93cad8a8688577ec3cf1/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c96452074027479cec7d93cad8a8688577ec3cf1/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr?ref=c96452074027479cec7d93cad8a8688577ec3cf1", "patch": "@@ -1,23 +1,15 @@\n-error[E0601]: `main` function not found in crate `issue_63593`\n-   |\n-   = note: consider adding a `main` function to `$DIR/issue-63593.rs`\n-\n error[E0277]: the size for values of type `Self` cannot be known at compilation time\n   --> $DIR/issue-63593.rs:9:5\n    |\n+LL | trait MyTrait {\n+   | ------------- required by `MyTrait`\n LL |     type This = Self;\n    |     ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Self`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where Self: std::marker::Sized` bound\n-note: required by `MyTrait`\n-  --> $DIR/issue-63593.rs:8:1\n-   |\n-LL | trait MyTrait {\n-   | ^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0277, E0601.\n-For more information about an error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0277`."}]}