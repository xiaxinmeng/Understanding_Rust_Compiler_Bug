{"sha": "3eb5c4581a386b13c414e8c8bd73846ef37236d1", "node_id": "C_kwDOAAsO6NoAKDNlYjVjNDU4MWEzODZiMTNjNDE0ZThjOGJkNzM4NDZlZjM3MjM2ZDE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-18T12:53:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-18T12:53:09Z"}, "message": "Auto merge of #108211 - matthiaskrgr:rollup-e59onmm, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #108031 (Don't recover lifetimes/labels containing emojis as character literals)\n - #108046 (Don't allow evaluating queries that were fed in a previous compiler run)\n - #108162 (Don't eagerly convert principal to string)\n - #108186 (Deny non-lifetime bound vars in `for<..> ||` closure binders)\n - #108197 (Update cargo)\n - #108205 (link to llvm changes that prompted the special cases)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "5f3a983c91d8db87950f03bf08adbdc4050cd720", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f3a983c91d8db87950f03bf08adbdc4050cd720"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3eb5c4581a386b13c414e8c8bd73846ef37236d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3eb5c4581a386b13c414e8c8bd73846ef37236d1", "html_url": "https://github.com/rust-lang/rust/commit/3eb5c4581a386b13c414e8c8bd73846ef37236d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3eb5c4581a386b13c414e8c8bd73846ef37236d1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3701bdc6333145410f009c83bd03f424eca05009", "url": "https://api.github.com/repos/rust-lang/rust/commits/3701bdc6333145410f009c83bd03f424eca05009", "html_url": "https://github.com/rust-lang/rust/commit/3701bdc6333145410f009c83bd03f424eca05009"}, {"sha": "6c91efd6d7806082f646d22eb3fd6736df82f9be", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c91efd6d7806082f646d22eb3fd6736df82f9be", "html_url": "https://github.com/rust-lang/rust/commit/6c91efd6d7806082f646d22eb3fd6736df82f9be"}], "stats": {"total": 586, "additions": 428, "deletions": 158}, "files": [{"sha": "d02cab38ae8f33d87872bc8f39f153919335237a", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -782,7 +782,7 @@ dependencies = [\n  \"declare_clippy_lint\",\n  \"if_chain\",\n  \"itertools\",\n- \"pulldown-cmark 0.9.2\",\n+ \"pulldown-cmark\",\n  \"quine-mc_cluskey\",\n  \"regex-syntax\",\n  \"rustc-semver\",\n@@ -2555,7 +2555,7 @@ dependencies = [\n  \"memchr\",\n  \"once_cell\",\n  \"opener\",\n- \"pulldown-cmark 0.9.2\",\n+ \"pulldown-cmark\",\n  \"regex\",\n  \"serde\",\n  \"serde_json\",\n@@ -2572,7 +2572,7 @@ dependencies = [\n  \"anyhow\",\n  \"handlebars 3.5.5\",\n  \"pretty_assertions\",\n- \"pulldown-cmark 0.7.2\",\n+ \"pulldown-cmark\",\n  \"same-file\",\n  \"serde_json\",\n  \"url\",\n@@ -3269,17 +3269,6 @@ dependencies = [\n  \"cc\",\n ]\n \n-[[package]]\n-name = \"pulldown-cmark\"\n-version = \"0.7.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ca36dea94d187597e104a5c8e4b07576a8a45aa5db48a65e12940d3eb7461f55\"\n-dependencies = [\n- \"bitflags\",\n- \"memchr\",\n- \"unicase\",\n-]\n-\n [[package]]\n name = \"pulldown-cmark\"\n version = \"0.9.2\"\n@@ -4583,7 +4572,7 @@ name = \"rustc_resolve\"\n version = \"0.0.0\"\n dependencies = [\n  \"bitflags\",\n- \"pulldown-cmark 0.9.2\",\n+ \"pulldown-cmark\",\n  \"rustc_arena\",\n  \"rustc_ast\",\n  \"rustc_ast_pretty\","}, {"sha": "37ee0e14020c3a3ad8878be0212b4c466531a2c0", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -145,8 +145,13 @@ pub unsafe fn create_module<'ll>(\n     let llvm_version = llvm_util::get_version();\n     if llvm_version < (16, 0, 0) {\n         if sess.target.arch == \"s390x\" {\n+            // LLVM 16 data layout changed to always set 64-bit vector alignment,\n+            // which is conditional in earlier LLVM versions.\n+            // https://reviews.llvm.org/D131158 for the discussion.\n             target_data_layout = target_data_layout.replace(\"-v128:64\", \"\");\n         } else if sess.target.arch == \"riscv64\" {\n+            // LLVM 16 introduced this change so as to produce more efficient code.\n+            // See https://reviews.llvm.org/D116735 for the discussion.\n             target_data_layout = target_data_layout.replace(\"-n32:64-\", \"-n64-\");\n         }\n     }"}, {"sha": "8c39feca88a0e62f28e7c25e84c374a86fdcc549", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -471,6 +471,8 @@ pub enum StashKey {\n     /// When an invalid lifetime e.g. `'2` should be reinterpreted\n     /// as a char literal in the parser\n     LifetimeIsChar,\n+    /// When an invalid lifetime e.g. `'\ud83d\udc31` contains emoji.\n+    LifetimeContainsEmoji,\n     /// Maybe there was a typo where a comma was forgotten before\n     /// FRU syntax\n     MaybeFruTypo,"}, {"sha": "6d8f7e4a0f68161ffdadcceaf5e72fdab4e9c218", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -474,7 +474,7 @@ declare_features! (\n     /// Allows using the `non_exhaustive_omitted_patterns` lint.\n     (active, non_exhaustive_omitted_patterns_lint, \"1.57.0\", Some(89554), None),\n     /// Allows `for<T>` binders in where-clauses\n-    (incomplete, non_lifetime_binders, \"CURRENT_RUSTC_VERSION\", Some(1), None),\n+    (incomplete, non_lifetime_binders, \"CURRENT_RUSTC_VERSION\", Some(108185), None),\n     /// Allows making `dyn Trait` well-formed even if `Trait` is not object safe.\n     /// In that case, `dyn Trait: Trait` does not hold. Moreover, coercions and\n     /// casts in safe Rust to `dyn Trait` for such a `Trait` is also forbidden."}, {"sha": "2ff47237b1bf437630700df9fc036dc14af48bbc", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 8, "deletions": 46, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -252,6 +252,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 // (*) -- not late-bound, won't change\n             }\n \n+            Some(rbv::ResolvedArg::Error(_)) => {\n+                bug!(\"only ty/ct should resolve as ResolvedArg::Error\")\n+            }\n+\n             None => {\n                 self.re_infer(def, lifetime.ident.span).unwrap_or_else(|| {\n                     debug!(?lifetime, \"unelided lifetime in signature\");\n@@ -2689,6 +2693,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         let index = generics.param_def_id_to_index[&def_id.to_def_id()];\n                         tcx.mk_ty_param(index, tcx.hir().ty_param_name(def_id))\n                     }\n+                    Some(rbv::ResolvedArg::Error(guar)) => tcx.ty_error_with_guaranteed(guar),\n                     arg => bug!(\"unexpected bound var resolution for {hir_id:?}: {arg:?}\"),\n                 }\n             }\n@@ -2893,22 +2898,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             hir::TyKind::BareFn(bf) => {\n                 require_c_abi_if_c_variadic(tcx, bf.decl, bf.abi, ast_ty.span);\n \n-                let fn_ptr_ty = tcx.mk_fn_ptr(self.ty_of_fn(\n+                tcx.mk_fn_ptr(self.ty_of_fn(\n                     ast_ty.hir_id,\n                     bf.unsafety,\n                     bf.abi,\n                     bf.decl,\n                     None,\n                     Some(ast_ty),\n-                ));\n-\n-                if let Some(guar) =\n-                    deny_non_region_late_bound(tcx, bf.generic_params, \"function pointer\")\n-                {\n-                    tcx.ty_error_with_guaranteed(guar)\n-                } else {\n-                    fn_ptr_ty\n-                }\n+                ))\n             }\n             hir::TyKind::TraitObject(bounds, lifetime, repr) => {\n                 self.maybe_lint_bare_trait(ast_ty, in_path);\n@@ -2917,21 +2914,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     TraitObjectSyntax::DynStar => ty::DynStar,\n                 };\n \n-                let object_ty = self.conv_object_ty_poly_trait_ref(\n-                    ast_ty.span,\n-                    bounds,\n-                    lifetime,\n-                    borrowed,\n-                    repr,\n-                );\n-\n-                if let Some(guar) = bounds.iter().find_map(|trait_ref| {\n-                    deny_non_region_late_bound(tcx, trait_ref.bound_generic_params, \"trait object\")\n-                }) {\n-                    tcx.ty_error_with_guaranteed(guar)\n-                } else {\n-                    object_ty\n-                }\n+                self.conv_object_ty_poly_trait_ref(ast_ty.span, bounds, lifetime, borrowed, repr)\n             }\n             hir::TyKind::Path(hir::QPath::Resolved(maybe_qself, path)) => {\n                 debug!(?maybe_qself, ?path);\n@@ -3392,24 +3375,3 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         }\n     }\n }\n-\n-fn deny_non_region_late_bound(\n-    tcx: TyCtxt<'_>,\n-    params: &[hir::GenericParam<'_>],\n-    where_: &str,\n-) -> Option<ErrorGuaranteed> {\n-    params.iter().find_map(|bad_param| {\n-        let what = match bad_param.kind {\n-            hir::GenericParamKind::Type { .. } => \"type\",\n-            hir::GenericParamKind::Const { .. } => \"const\",\n-            hir::GenericParamKind::Lifetime { .. } => return None,\n-        };\n-\n-        let mut diag = tcx.sess.struct_span_err(\n-            bad_param.span,\n-            format!(\"late-bound {what} parameter not allowed on {where_} types\"),\n-        );\n-\n-        Some(if tcx.features().non_lifetime_binders { diag.emit() } else { diag.delay_as_bug() })\n-    })\n-}"}, {"sha": "127d4fa908bb959411d8bc4c8f72c773c9674358", "filename": "compiler/rustc_hir_analysis/src/collect/generics_of.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -398,7 +398,12 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n                 Some(rbv::ResolvedArg::StaticLifetime | rbv::ResolvedArg::EarlyBound(..)) => {}\n                 Some(rbv::ResolvedArg::LateBound(debruijn, _, _))\n                     if debruijn < self.outer_index => {}\n-                Some(rbv::ResolvedArg::LateBound(..) | rbv::ResolvedArg::Free(..)) | None => {\n+                Some(\n+                    rbv::ResolvedArg::LateBound(..)\n+                    | rbv::ResolvedArg::Free(..)\n+                    | rbv::ResolvedArg::Error(_),\n+                )\n+                | None => {\n                     self.has_late_bound_regions = Some(lt.ident.span);\n                 }\n             }"}, {"sha": "c0c90e47a7539bdc043e2accac5b30ffb4227f00", "filename": "compiler/rustc_hir_analysis/src/collect/resolve_bound_vars.rs", "status": "modified", "additions": 100, "deletions": 38, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -50,7 +50,7 @@ impl RegionExt for ResolvedArg {\n \n     fn id(&self) -> Option<DefId> {\n         match *self {\n-            ResolvedArg::StaticLifetime => None,\n+            ResolvedArg::StaticLifetime | ResolvedArg::Error(_) => None,\n \n             ResolvedArg::EarlyBound(id)\n             | ResolvedArg::LateBound(_, _, id)\n@@ -336,7 +336,57 @@ impl<'a, 'tcx> BoundVarContext<'a, 'tcx> {\n             }\n         }\n     }\n+\n+    fn visit_poly_trait_ref_inner(\n+        &mut self,\n+        trait_ref: &'tcx hir::PolyTraitRef<'tcx>,\n+        non_lifetime_binder_allowed: NonLifetimeBinderAllowed,\n+    ) {\n+        debug!(\"visit_poly_trait_ref(trait_ref={:?})\", trait_ref);\n+\n+        let (mut binders, scope_type) = self.poly_trait_ref_binder_info();\n+\n+        let initial_bound_vars = binders.len() as u32;\n+        let mut bound_vars: FxIndexMap<LocalDefId, ResolvedArg> = FxIndexMap::default();\n+        let binders_iter =\n+            trait_ref.bound_generic_params.iter().enumerate().map(|(late_bound_idx, param)| {\n+                let pair = ResolvedArg::late(initial_bound_vars + late_bound_idx as u32, param);\n+                let r = late_arg_as_bound_arg(self.tcx, &pair.1, param);\n+                bound_vars.insert(pair.0, pair.1);\n+                r\n+            });\n+        binders.extend(binders_iter);\n+\n+        if let NonLifetimeBinderAllowed::Deny(where_) = non_lifetime_binder_allowed {\n+            deny_non_region_late_bound(self.tcx, &mut bound_vars, where_);\n+        }\n+\n+        debug!(?binders);\n+        self.record_late_bound_vars(trait_ref.trait_ref.hir_ref_id, binders);\n+\n+        // Always introduce a scope here, even if this is in a where clause and\n+        // we introduced the binders around the bounded Ty. In that case, we\n+        // just reuse the concatenation functionality also present in nested trait\n+        // refs.\n+        let scope = Scope::Binder {\n+            hir_id: trait_ref.trait_ref.hir_ref_id,\n+            bound_vars,\n+            s: self.scope,\n+            scope_type,\n+            where_bound_origin: None,\n+        };\n+        self.with(scope, |this| {\n+            walk_list!(this, visit_generic_param, trait_ref.bound_generic_params);\n+            this.visit_trait_ref(&trait_ref.trait_ref);\n+        });\n+    }\n+}\n+\n+enum NonLifetimeBinderAllowed {\n+    Deny(&'static str),\n+    Allow,\n }\n+\n impl<'a, 'tcx> Visitor<'tcx> for BoundVarContext<'a, 'tcx> {\n     type NestedFilter = nested_filter::OnlyBodies;\n \n@@ -400,7 +450,7 @@ impl<'a, 'tcx> Visitor<'tcx> for BoundVarContext<'a, 'tcx> {\n                 }\n             }\n \n-            let (bound_vars, binders): (FxIndexMap<LocalDefId, ResolvedArg>, Vec<_>) =\n+            let (mut bound_vars, binders): (FxIndexMap<LocalDefId, ResolvedArg>, Vec<_>) =\n                 bound_generic_params\n                     .iter()\n                     .enumerate()\n@@ -411,6 +461,8 @@ impl<'a, 'tcx> Visitor<'tcx> for BoundVarContext<'a, 'tcx> {\n                     })\n                     .unzip();\n \n+            deny_non_region_late_bound(self.tcx, &mut bound_vars, \"closures\");\n+\n             self.record_late_bound_vars(e.hir_id, binders);\n             let scope = Scope::Binder {\n                 hir_id: e.hir_id,\n@@ -567,7 +619,7 @@ impl<'a, 'tcx> Visitor<'tcx> for BoundVarContext<'a, 'tcx> {\n     fn visit_ty(&mut self, ty: &'tcx hir::Ty<'tcx>) {\n         match ty.kind {\n             hir::TyKind::BareFn(c) => {\n-                let (bound_vars, binders): (FxIndexMap<LocalDefId, ResolvedArg>, Vec<_>) = c\n+                let (mut bound_vars, binders): (FxIndexMap<LocalDefId, ResolvedArg>, Vec<_>) = c\n                     .generic_params\n                     .iter()\n                     .enumerate()\n@@ -577,6 +629,9 @@ impl<'a, 'tcx> Visitor<'tcx> for BoundVarContext<'a, 'tcx> {\n                         (pair, r)\n                     })\n                     .unzip();\n+\n+                deny_non_region_late_bound(self.tcx, &mut bound_vars, \"function pointer types\");\n+\n                 self.record_late_bound_vars(ty.hir_id, binders);\n                 let scope = Scope::Binder {\n                     hir_id: ty.hir_id,\n@@ -596,7 +651,10 @@ impl<'a, 'tcx> Visitor<'tcx> for BoundVarContext<'a, 'tcx> {\n                 let scope = Scope::TraitRefBoundary { s: self.scope };\n                 self.with(scope, |this| {\n                     for bound in bounds {\n-                        this.visit_poly_trait_ref(bound);\n+                        this.visit_poly_trait_ref_inner(\n+                            bound,\n+                            NonLifetimeBinderAllowed::Deny(\"trait object types\"),\n+                        );\n                     }\n                 });\n                 match lifetime.res {\n@@ -967,39 +1025,7 @@ impl<'a, 'tcx> Visitor<'tcx> for BoundVarContext<'a, 'tcx> {\n     }\n \n     fn visit_poly_trait_ref(&mut self, trait_ref: &'tcx hir::PolyTraitRef<'tcx>) {\n-        debug!(\"visit_poly_trait_ref(trait_ref={:?})\", trait_ref);\n-\n-        let (mut binders, scope_type) = self.poly_trait_ref_binder_info();\n-\n-        let initial_bound_vars = binders.len() as u32;\n-        let mut bound_vars: FxIndexMap<LocalDefId, ResolvedArg> = FxIndexMap::default();\n-        let binders_iter =\n-            trait_ref.bound_generic_params.iter().enumerate().map(|(late_bound_idx, param)| {\n-                let pair = ResolvedArg::late(initial_bound_vars + late_bound_idx as u32, param);\n-                let r = late_arg_as_bound_arg(self.tcx, &pair.1, param);\n-                bound_vars.insert(pair.0, pair.1);\n-                r\n-            });\n-        binders.extend(binders_iter);\n-\n-        debug!(?binders);\n-        self.record_late_bound_vars(trait_ref.trait_ref.hir_ref_id, binders);\n-\n-        // Always introduce a scope here, even if this is in a where clause and\n-        // we introduced the binders around the bounded Ty. In that case, we\n-        // just reuse the concatenation functionality also present in nested trait\n-        // refs.\n-        let scope = Scope::Binder {\n-            hir_id: trait_ref.trait_ref.hir_ref_id,\n-            bound_vars,\n-            s: self.scope,\n-            scope_type,\n-            where_bound_origin: None,\n-        };\n-        self.with(scope, |this| {\n-            walk_list!(this, visit_generic_param, trait_ref.bound_generic_params);\n-            this.visit_trait_ref(&trait_ref.trait_ref);\n-        });\n+        self.visit_poly_trait_ref_inner(trait_ref, NonLifetimeBinderAllowed::Allow);\n     }\n }\n \n@@ -1364,7 +1390,9 @@ impl<'a, 'tcx> BoundVarContext<'a, 'tcx> {\n             return;\n         }\n \n-        span_bug!(self.tcx.hir().span(hir_id), \"could not resolve {param_def_id:?}\",);\n+        self.tcx\n+            .sess\n+            .delay_span_bug(self.tcx.hir().span(hir_id), \"could not resolve {param_def_id:?}\");\n     }\n \n     #[instrument(level = \"debug\", skip(self))]\n@@ -1915,3 +1943,37 @@ fn is_late_bound_map(\n         }\n     }\n }\n+\n+pub fn deny_non_region_late_bound(\n+    tcx: TyCtxt<'_>,\n+    bound_vars: &mut FxIndexMap<LocalDefId, ResolvedArg>,\n+    where_: &str,\n+) {\n+    let mut first = true;\n+\n+    for (var, arg) in bound_vars {\n+        let Node::GenericParam(param) = tcx.hir().get_by_def_id(*var) else {\n+            bug!();\n+        };\n+\n+        let what = match param.kind {\n+            hir::GenericParamKind::Type { .. } => \"type\",\n+            hir::GenericParamKind::Const { .. } => \"const\",\n+            hir::GenericParamKind::Lifetime { .. } => continue,\n+        };\n+\n+        let mut diag = tcx.sess.struct_span_err(\n+            param.span,\n+            format!(\"late-bound {what} parameter not allowed on {where_}\"),\n+        );\n+\n+        let guar = if tcx.features().non_lifetime_binders && first {\n+            diag.emit()\n+        } else {\n+            diag.delay_as_bug()\n+        };\n+\n+        first = false;\n+        *arg = ResolvedArg::Error(guar);\n+    }\n+}"}, {"sha": "fec04af231393bb84508ce9046ef7b26f034633d", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -134,7 +134,8 @@ impl<'tcx> Visitor<'tcx> for FindNestedTypeVisitor<'tcx> {\n                             rbv::ResolvedArg::StaticLifetime\n                             | rbv::ResolvedArg::Free(_, _)\n                             | rbv::ResolvedArg::EarlyBound(_)\n-                            | rbv::ResolvedArg::LateBound(_, _, _),\n+                            | rbv::ResolvedArg::LateBound(_, _, _)\n+                            | rbv::ResolvedArg::Error(_),\n                         )\n                         | None,\n                         _,\n@@ -211,7 +212,8 @@ impl<'tcx> Visitor<'tcx> for TyPathVisitor<'tcx> {\n                     rbv::ResolvedArg::StaticLifetime\n                     | rbv::ResolvedArg::EarlyBound(_)\n                     | rbv::ResolvedArg::LateBound(_, _, _)\n-                    | rbv::ResolvedArg::Free(_, _),\n+                    | rbv::ResolvedArg::Free(_, _)\n+                    | rbv::ResolvedArg::Error(_),\n                 )\n                 | None,\n                 _,"}, {"sha": "e6f04fe0aaa634c8405aa8cad9330e70d892d561", "filename": "compiler/rustc_lexer/src/lib.rs", "status": "modified", "additions": 33, "deletions": 10, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Flib.rs?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -95,7 +95,7 @@ pub enum TokenKind {\n     Literal { kind: LiteralKind, suffix_start: u32 },\n \n     /// \"'a\"\n-    Lifetime { starts_with_number: bool },\n+    Lifetime { starts_with_number: bool, contains_emoji: bool },\n \n     // One-char tokens:\n     /// \";\"\n@@ -630,7 +630,13 @@ impl Cursor<'_> {\n             // If the first symbol is valid for identifier, it can be a lifetime.\n             // Also check if it's a number for a better error reporting (so '0 will\n             // be reported as invalid lifetime and not as unterminated char literal).\n-            is_id_start(self.first()) || self.first().is_digit(10)\n+            // We also have to account for potential `'\ud83d\udc31` emojis to avoid reporting\n+            // it as an unterminated char literal.\n+            is_id_start(self.first())\n+                || self.first().is_digit(10)\n+                // FIXME(#108019): `unic-emoji-char` seems to have data tables only up to Unicode\n+                // 5.0, but Unicode is already newer than this.\n+                || unic_emoji_char::is_emoji(self.first())\n         };\n \n         if !can_be_a_lifetime {\n@@ -643,16 +649,33 @@ impl Cursor<'_> {\n             return Literal { kind, suffix_start };\n         }\n \n-        // Either a lifetime or a character literal with\n-        // length greater than 1.\n+        // Either a lifetime or a character literal.\n \n         let starts_with_number = self.first().is_digit(10);\n+        let mut contains_emoji = false;\n \n-        // Skip the literal contents.\n-        // First symbol can be a number (which isn't a valid identifier start),\n-        // so skip it without any checks.\n-        self.bump();\n-        self.eat_while(is_id_continue);\n+        // FIXME(#108019): `unic-emoji-char` seems to have data tables only up to Unicode\n+        // 5.0, but Unicode is already newer than this.\n+        if unic_emoji_char::is_emoji(self.first()) {\n+            contains_emoji = true;\n+        } else {\n+            // Skip the literal contents.\n+            // First symbol can be a number (which isn't a valid identifier start),\n+            // so skip it without any checks.\n+            self.bump();\n+        }\n+        self.eat_while(|c| {\n+            if is_id_continue(c) {\n+                true\n+            // FIXME(#108019): `unic-emoji-char` seems to have data tables only up to Unicode\n+            // 5.0, but Unicode is already newer than this.\n+            } else if unic_emoji_char::is_emoji(c) {\n+                contains_emoji = true;\n+                true\n+            } else {\n+                false\n+            }\n+        });\n \n         // Check if after skipping literal contents we've met a closing\n         // single quote (which means that user attempted to create a\n@@ -662,7 +685,7 @@ impl Cursor<'_> {\n             let kind = Char { terminated: true };\n             Literal { kind, suffix_start: self.pos_within_token() }\n         } else {\n-            Lifetime { starts_with_number }\n+            Lifetime { starts_with_number, contains_emoji }\n         }\n     }\n "}, {"sha": "670d64fb983f574932abcb5f515a61548c4215b5", "filename": "compiler/rustc_lexer/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/compiler%2Frustc_lexer%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/compiler%2Frustc_lexer%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Ftests.rs?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -235,7 +235,7 @@ fn lifetime() {\n     check_lexing(\n         \"'abc\",\n         expect![[r#\"\n-            Token { kind: Lifetime { starts_with_number: false }, len: 4 }\n+            Token { kind: Lifetime { starts_with_number: false, contains_emoji: false }, len: 4 }\n         \"#]],\n     );\n }"}, {"sha": "ccf95992a6e6e63c44345c44b3172d0a69e06bce", "filename": "compiler/rustc_lint/src/deref_into_dyn_supertrait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/compiler%2Frustc_lint%2Fsrc%2Fderef_into_dyn_supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/compiler%2Frustc_lint%2Fsrc%2Fderef_into_dyn_supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fderef_into_dyn_supertrait.rs?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -78,7 +78,7 @@ impl<'tcx> LateLintPass<'tcx> for DerefIntoDynSupertrait {\n             });\n             cx.emit_spanned_lint(DEREF_INTO_DYN_SUPERTRAIT, cx.tcx.def_span(item.owner_id.def_id), SupertraitAsDerefTarget {\n                 t,\n-                target_principal: target_principal.to_string(),\n+                target_principal,\n                 label,\n             });\n         }"}, {"sha": "94a43ab0c4674b11b510d2106a9cc2fcbb38c501", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -8,7 +8,7 @@ use rustc_errors::{\n };\n use rustc_hir::def_id::DefId;\n use rustc_macros::{LintDiagnostic, Subdiagnostic};\n-use rustc_middle::ty::{Predicate, Ty, TyCtxt};\n+use rustc_middle::ty::{PolyExistentialTraitRef, Predicate, Ty, TyCtxt};\n use rustc_session::parse::ParseSess;\n use rustc_span::{edition::Edition, sym, symbol::Ident, Span, Symbol};\n \n@@ -556,8 +556,7 @@ pub struct BuiltinUnexpectedCliConfigValue {\n #[diag(lint_supertrait_as_deref_target)]\n pub struct SupertraitAsDerefTarget<'a> {\n     pub t: Ty<'a>,\n-    pub target_principal: String,\n-    // pub target_principal: Binder<'a, ExistentialTraitRef<'b>>,\n+    pub target_principal: PolyExistentialTraitRef<'a>,\n     #[subdiagnostic]\n     pub label: Option<SupertraitAsDerefTargetLabel>,\n }"}, {"sha": "c59704fc0238f4afacff8107306c6d59b08544e5", "filename": "compiler/rustc_middle/src/middle/resolve_bound_vars.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_bound_vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_bound_vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_bound_vars.rs?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -3,6 +3,7 @@\n use crate::ty;\n \n use rustc_data_structures::fx::FxHashMap;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def_id::DefId;\n use rustc_hir::{ItemLocalId, OwnerId};\n use rustc_macros::HashStable;\n@@ -13,6 +14,7 @@ pub enum ResolvedArg {\n     EarlyBound(/* decl */ DefId),\n     LateBound(ty::DebruijnIndex, /* late-bound index */ u32, /* decl */ DefId),\n     Free(DefId, /* lifetime decl */ DefId),\n+    Error(ErrorGuaranteed),\n }\n \n /// A set containing, at most, one known element."}, {"sha": "884ae7f5da2841260cf931f7886f5e384c06a139", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -149,6 +149,9 @@ impl<'tcx> Const<'tcx> {\n                         ty::ConstKind::Bound(debruijn, ty::BoundVar::from_u32(index)),\n                         ty,\n                     )),\n+                    Some(rbv::ResolvedArg::Error(guar)) => {\n+                        Some(tcx.const_error_with_guaranteed(ty, guar))\n+                    }\n                     arg => bug!(\"unexpected bound var resolution for {:?}: {arg:?}\", expr.hir_id),\n                 }\n             }"}, {"sha": "f8d17433cf7701e1f7da8c3bb736a9dac7cbf529", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -933,6 +933,12 @@ impl<'tcx> PolyExistentialTraitRef<'tcx> {\n     }\n }\n \n+impl rustc_errors::IntoDiagnosticArg for PolyExistentialTraitRef<'_> {\n+    fn into_diagnostic_arg(self) -> rustc_errors::DiagnosticArgValue<'static> {\n+        self.to_string().into_diagnostic_arg()\n+    }\n+}\n+\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]\n #[derive(HashStable)]\n pub enum BoundVariableKind {"}, {"sha": "37449aaabed8ba4e677ff09a12a62a2637ae2849", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -200,16 +200,21 @@ impl<'a> StringReader<'a> {\n                     };\n                     token::Literal(token::Lit { kind, symbol, suffix })\n                 }\n-                rustc_lexer::TokenKind::Lifetime { starts_with_number } => {\n+                rustc_lexer::TokenKind::Lifetime { starts_with_number, contains_emoji } => {\n                     // Include the leading `'` in the real identifier, for macro\n                     // expansion purposes. See #12512 for the gory details of why\n                     // this is necessary.\n                     let lifetime_name = self.str_from(start);\n                     if starts_with_number {\n                         let span = self.mk_sp(start, self.pos);\n-                        let mut diag = self.sess.struct_err(\"lifetimes cannot start with a number\");\n+                        let mut diag = self.sess.struct_err(\"lifetimes or labels cannot start with a number\");\n                         diag.set_span(span);\n                         diag.stash(span, StashKey::LifetimeIsChar);\n+                    } else if contains_emoji {\n+                        let span = self.mk_sp(start, self.pos);\n+                        let mut diag = self.sess.struct_err(\"lifetimes or labels cannot contain emojis\");\n+                        diag.set_span(span);\n+                        diag.stash(span, StashKey::LifetimeContainsEmoji);\n                     }\n                     let ident = Symbol::intern(lifetime_name);\n                     token::Lifetime(ident)"}, {"sha": "53e04bcc132a07214f2d5403a5199598c476571a", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -19,7 +19,6 @@ use rustc_data_structures::sync::Lock;\n use rustc_errors::{DiagnosticBuilder, ErrorGuaranteed, FatalError};\n use rustc_session::Session;\n use rustc_span::{Span, DUMMY_SP};\n-use std::borrow::Borrow;\n use std::cell::Cell;\n use std::collections::hash_map::Entry;\n use std::fmt::Debug;\n@@ -364,25 +363,13 @@ where\n             let (result, dep_node_index) =\n                 execute_job::<Q, Qcx>(qcx, key.clone(), dep_node, job.id);\n             if Q::FEEDABLE {\n-                // We may have put a value inside the cache from inside the execution.\n-                // Verify that it has the same hash as what we have now, to ensure consistency.\n+                // We should not compute queries that also got a value via feeding.\n+                // This can't happen, as query feeding adds the very dependencies to the fed query\n+                // as its feeding query had. So if the fed query is red, so is its feeder, which will\n+                // get evaluated first, and re-feed the query.\n                 if let Some((cached_result, _)) = cache.lookup(&key) {\n-                    let hasher = Q::HASH_RESULT.expect(\"feedable forbids no_hash\");\n-\n-                    let old_hash = qcx.dep_context().with_stable_hashing_context(|mut hcx| {\n-                        hasher(&mut hcx, cached_result.borrow())\n-                    });\n-                    let new_hash = qcx\n-                        .dep_context()\n-                        .with_stable_hashing_context(|mut hcx| hasher(&mut hcx, &result));\n-                    debug_assert_eq!(\n-                        old_hash,\n-                        new_hash,\n-                        \"Computed query value for {:?}({:?}) is inconsistent with fed value,\\ncomputed={:#?}\\nfed={:#?}\",\n-                        Q::DEP_KIND,\n-                        key,\n-                        result,\n-                        cached_result,\n+                    panic!(\n+                        \"fed query later has its value computed. The already cached value: {cached_result:?}\"\n                     );\n                 }\n             }"}, {"sha": "17b3d0de0897e1c6b8ca347bd39f850bb0a5b9f6", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -1 +1 @@\n-Subproject commit 39c13e67a5962466cc7253d41bc1099bbcb224c3\n+Subproject commit 17b3d0de0897e1c6b8ca347bd39f850bb0a5b9f6"}, {"sha": "f0bfe784cccc95d571185673597a5ed3cd3ac5e8", "filename": "tests/ui/bounds-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Fbounds-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Fbounds-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbounds-lifetime.stderr?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -22,7 +22,7 @@ error[E0658]: only lifetime parameters can be used in this context\n LL | type D = for<'a, T> fn();\n    |                  ^\n    |\n-   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = note: see issue #108185 <https://github.com/rust-lang/rust/issues/108185> for more information\n    = help: add `#![feature(non_lifetime_binders)]` to the crate attributes to enable\n \n error[E0658]: only lifetime parameters can be used in this context\n@@ -31,7 +31,7 @@ error[E0658]: only lifetime parameters can be used in this context\n LL | type E = dyn for<T> Fn();\n    |                  ^\n    |\n-   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = note: see issue #108185 <https://github.com/rust-lang/rust/issues/108185> for more information\n    = help: add `#![feature(non_lifetime_binders)]` to the crate attributes to enable\n \n error: aborting due to 5 previous errors"}, {"sha": "b1c79db137510d419dd83217df6e03c8e5bbb28a", "filename": "tests/ui/closures/binder/const-bound.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Fclosures%2Fbinder%2Fconst-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Fclosures%2Fbinder%2Fconst-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2Fbinder%2Fconst-bound.rs?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -0,0 +1,7 @@\n+#![feature(closure_lifetime_binder, non_lifetime_binders)]\n+//~^ WARN  is incomplete and may not be safe to use\n+\n+fn main()  {\n+    for<const N: i32> || -> () {};\n+    //~^ ERROR late-bound const parameter not allowed on closures\n+}"}, {"sha": "c016465c101ce8bfdf4f89e3fb9e9c07598c5e1d", "filename": "tests/ui/closures/binder/const-bound.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Fclosures%2Fbinder%2Fconst-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Fclosures%2Fbinder%2Fconst-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2Fbinder%2Fconst-bound.stderr?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/const-bound.rs:1:37\n+   |\n+LL | #![feature(closure_lifetime_binder, non_lifetime_binders)]\n+   |                                     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #108185 <https://github.com/rust-lang/rust/issues/108185> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: late-bound const parameter not allowed on closures\n+  --> $DIR/const-bound.rs:5:9\n+   |\n+LL |     for<const N: i32> || -> () {};\n+   |         ^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "59f299315f856ebe58defa11ad2b868817da412d", "filename": "tests/ui/closures/binder/disallow-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Fclosures%2Fbinder%2Fdisallow-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Fclosures%2Fbinder%2Fdisallow-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2Fbinder%2Fdisallow-const.stderr?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -4,7 +4,7 @@ error[E0658]: only lifetime parameters can be used in this context\n LL |     for<const N: i32> || -> () {};\n    |               ^\n    |\n-   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = note: see issue #108185 <https://github.com/rust-lang/rust/issues/108185> for more information\n    = help: add `#![feature(non_lifetime_binders)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "3370e21bd711a4bdd73dd08ac8542db6a7478926", "filename": "tests/ui/closures/binder/disallow-ty.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Fclosures%2Fbinder%2Fdisallow-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Fclosures%2Fbinder%2Fdisallow-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2Fbinder%2Fdisallow-ty.stderr?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -4,7 +4,7 @@ error[E0658]: only lifetime parameters can be used in this context\n LL |     for<T> || -> () {};\n    |         ^\n    |\n-   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = note: see issue #108185 <https://github.com/rust-lang/rust/issues/108185> for more information\n    = help: add `#![feature(non_lifetime_binders)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "f4edcdaa9ca9fc0cc28fbef819a41d77a54541b0", "filename": "tests/ui/closures/binder/type-bound-2.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Fclosures%2Fbinder%2Ftype-bound-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Fclosures%2Fbinder%2Ftype-bound-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2Fbinder%2Ftype-bound-2.rs?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -0,0 +1,7 @@\n+#![feature(closure_lifetime_binder, non_lifetime_binders)]\n+//~^ WARN  is incomplete and may not be safe to use\n+\n+fn main() {\n+    for<T> || -> () {};\n+    //~^ ERROR late-bound type parameter not allowed on closures\n+}"}, {"sha": "14b2dbf03957f3ef3e3d7b8247c288f02a3e19a1", "filename": "tests/ui/closures/binder/type-bound-2.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Fclosures%2Fbinder%2Ftype-bound-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Fclosures%2Fbinder%2Ftype-bound-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2Fbinder%2Ftype-bound-2.stderr?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/type-bound-2.rs:1:37\n+   |\n+LL | #![feature(closure_lifetime_binder, non_lifetime_binders)]\n+   |                                     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #108185 <https://github.com/rust-lang/rust/issues/108185> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: late-bound type parameter not allowed on closures\n+  --> $DIR/type-bound-2.rs:5:9\n+   |\n+LL |     for<T> || -> () {};\n+   |         ^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "59a3353f4965eb3986135a0fecbc7561671a72f8", "filename": "tests/ui/closures/binder/type-bound.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Fclosures%2Fbinder%2Ftype-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Fclosures%2Fbinder%2Ftype-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2Fbinder%2Ftype-bound.rs?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -0,0 +1,7 @@\n+#![feature(closure_lifetime_binder, non_lifetime_binders)]\n+//~^ WARN  is incomplete and may not be safe to use\n+\n+fn main()  {\n+    for<T> || -> T {};\n+    //~^ ERROR late-bound type parameter not allowed on closures\n+}"}, {"sha": "ef00a2dffceae97a9b669b4890bffd1fc41a0534", "filename": "tests/ui/closures/binder/type-bound.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Fclosures%2Fbinder%2Ftype-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Fclosures%2Fbinder%2Ftype-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2Fbinder%2Ftype-bound.stderr?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/type-bound.rs:1:37\n+   |\n+LL | #![feature(closure_lifetime_binder, non_lifetime_binders)]\n+   |                                     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #108185 <https://github.com/rust-lang/rust/issues/108185> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: late-bound type parameter not allowed on closures\n+  --> $DIR/type-bound.rs:5:9\n+   |\n+LL |     for<T> || -> T {};\n+   |         ^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "f733c09c22e6b7a3bc1dfb10ce1390ee4c35cace", "filename": "tests/ui/conditional-compilation/cfg-generic-params.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Fconditional-compilation%2Fcfg-generic-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Fconditional-compilation%2Fcfg-generic-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconditional-compilation%2Fcfg-generic-params.stderr?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -34,7 +34,7 @@ error[E0658]: only lifetime parameters can be used in this context\n LL | type FnBad = for<#[cfg(no)] 'a, #[cfg(yes)] T> fn();\n    |                                             ^\n    |\n-   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = note: see issue #108185 <https://github.com/rust-lang/rust/issues/108185> for more information\n    = help: add `#![feature(non_lifetime_binders)]` to the crate attributes to enable\n \n error[E0658]: only lifetime parameters can be used in this context\n@@ -43,7 +43,7 @@ error[E0658]: only lifetime parameters can be used in this context\n LL | type PolyBad = dyn for<#[cfg(no)] 'a, #[cfg(yes)] T> Copy;\n    |                                                   ^\n    |\n-   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = note: see issue #108185 <https://github.com/rust-lang/rust/issues/108185> for more information\n    = help: add `#![feature(non_lifetime_binders)]` to the crate attributes to enable\n \n error[E0658]: only lifetime parameters can be used in this context\n@@ -52,7 +52,7 @@ error[E0658]: only lifetime parameters can be used in this context\n LL | struct WhereBad where for<#[cfg(no)] 'a, #[cfg(yes)] T> u8: Copy;\n    |                                                      ^\n    |\n-   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = note: see issue #108185 <https://github.com/rust-lang/rust/issues/108185> for more information\n    = help: add `#![feature(non_lifetime_binders)]` to the crate attributes to enable\n \n error: aborting due to 8 previous errors"}, {"sha": "01c8ee30c5f5658d55c89cf543f74a86e88ae47e", "filename": "tests/ui/feature-gates/feature-gate-non_lifetime_binders.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Ffeature-gates%2Ffeature-gate-non_lifetime_binders.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Ffeature-gates%2Ffeature-gate-non_lifetime_binders.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-non_lifetime_binders.stderr?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -4,7 +4,7 @@ error[E0658]: only lifetime parameters can be used in this context\n LL | fn foo() where for<T> T:, {}\n    |                    ^\n    |\n-   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = note: see issue #108185 <https://github.com/rust-lang/rust/issues/108185> for more information\n    = help: add `#![feature(non_lifetime_binders)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "765ea9f7854036087c38357513ca26a7c663942c", "filename": "tests/ui/higher-rank-trait-bounds/hrtb-wrong-kind.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-wrong-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-wrong-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-wrong-kind.stderr?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -4,7 +4,7 @@ error[E0658]: only lifetime parameters can be used in this context\n LL | fn a() where for<T> T: Copy {}\n    |                  ^\n    |\n-   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = note: see issue #108185 <https://github.com/rust-lang/rust/issues/108185> for more information\n    = help: add `#![feature(non_lifetime_binders)]` to the crate attributes to enable\n \n error[E0658]: only lifetime parameters can be used in this context\n@@ -13,7 +13,7 @@ error[E0658]: only lifetime parameters can be used in this context\n LL | fn b() where for<const C: usize> [(); C]: Copy {}\n    |                        ^\n    |\n-   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = note: see issue #108185 <https://github.com/rust-lang/rust/issues/108185> for more information\n    = help: add `#![feature(non_lifetime_binders)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "f0f86224560100121aad9e2e19551fd0e61bad4b", "filename": "tests/ui/lexer/issue-108019-bad-emoji-recovery.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Flexer%2Fissue-108019-bad-emoji-recovery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Flexer%2Fissue-108019-bad-emoji-recovery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flexer%2Fissue-108019-bad-emoji-recovery.rs?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -0,0 +1,45 @@\n+#![allow(unused_labels)]\n+\n+// FIXME(#108019): outdated Unicode table\n+// fn foo() {\n+//     '\ud83e\udd7a loop {\n+//         break\n+//     }\n+// }\n+\n+fn bar() {\n+    '\ud83d\udc31 loop {\n+    //~^ ERROR labeled expression must be followed by `:`\n+    //~| ERROR lifetimes or labels cannot contain emojis\n+        break\n+    }\n+}\n+\n+fn qux() {\n+    'a\ud83d\udc31 loop {\n+    //~^ ERROR labeled expression must be followed by `:`\n+    //~| ERROR lifetimes or labels cannot contain emojis\n+        break\n+    }\n+}\n+\n+fn quux() {\n+    '1\ud83d\udc31 loop {\n+    //~^ ERROR labeled expression must be followed by `:`\n+    //~| ERROR lifetimes or labels cannot start with a number\n+        break\n+    }\n+}\n+\n+fn x<'\ud83d\udc31>() -> &'\ud83d\udc31 () {\n+    //~^ ERROR lifetimes or labels cannot contain emojis\n+    //~| ERROR lifetimes or labels cannot contain emojis\n+    &()\n+}\n+\n+fn y() {\n+    'a\ud83d\udc31: loop {}\n+    //~^ ERROR lifetimes or labels cannot contain emojis\n+}\n+\n+fn main() {}"}, {"sha": "be77ffdea349f4296042f760e99923935573e7d8", "filename": "tests/ui/lexer/issue-108019-bad-emoji-recovery.stderr", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Flexer%2Fissue-108019-bad-emoji-recovery.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Flexer%2Fissue-108019-bad-emoji-recovery.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flexer%2Fissue-108019-bad-emoji-recovery.stderr?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -0,0 +1,86 @@\n+error: labeled expression must be followed by `:`\n+  --> $DIR/issue-108019-bad-emoji-recovery.rs:11:5\n+   |\n+LL |       '\ud83d\udc31 loop {\n+   |       ^--- help: add `:` after the label\n+   |       |\n+   |  _____the label\n+   | |\n+LL | |\n+LL | |\n+LL | |         break\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: labels are used before loops and blocks, allowing e.g., `break 'label` to them\n+\n+error: labeled expression must be followed by `:`\n+  --> $DIR/issue-108019-bad-emoji-recovery.rs:19:5\n+   |\n+LL |       'a\ud83d\udc31 loop {\n+   |       ^---- help: add `:` after the label\n+   |       |\n+   |  _____the label\n+   | |\n+LL | |\n+LL | |\n+LL | |         break\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: labels are used before loops and blocks, allowing e.g., `break 'label` to them\n+\n+error: labeled expression must be followed by `:`\n+  --> $DIR/issue-108019-bad-emoji-recovery.rs:27:5\n+   |\n+LL |       '1\ud83d\udc31 loop {\n+   |       ^---- help: add `:` after the label\n+   |       |\n+   |  _____the label\n+   | |\n+LL | |\n+LL | |\n+LL | |         break\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: labels are used before loops and blocks, allowing e.g., `break 'label` to them\n+\n+error: lifetimes or labels cannot contain emojis\n+  --> $DIR/issue-108019-bad-emoji-recovery.rs:11:5\n+   |\n+LL |     '\ud83d\udc31 loop {\n+   |     ^^^\n+\n+error: lifetimes or labels cannot contain emojis\n+  --> $DIR/issue-108019-bad-emoji-recovery.rs:19:5\n+   |\n+LL |     'a\ud83d\udc31 loop {\n+   |     ^^^^\n+\n+error: lifetimes or labels cannot start with a number\n+  --> $DIR/issue-108019-bad-emoji-recovery.rs:27:5\n+   |\n+LL |     '1\ud83d\udc31 loop {\n+   |     ^^^^\n+\n+error: lifetimes or labels cannot contain emojis\n+  --> $DIR/issue-108019-bad-emoji-recovery.rs:34:6\n+   |\n+LL | fn x<'\ud83d\udc31>() -> &'\ud83d\udc31 () {\n+   |      ^^^\n+\n+error: lifetimes or labels cannot contain emojis\n+  --> $DIR/issue-108019-bad-emoji-recovery.rs:34:16\n+   |\n+LL | fn x<'\ud83d\udc31>() -> &'\ud83d\udc31 () {\n+   |                 ^^^\n+\n+error: lifetimes or labels cannot contain emojis\n+  --> $DIR/issue-108019-bad-emoji-recovery.rs:41:5\n+   |\n+LL |     'a\ud83d\udc31: loop {}\n+   |     ^^^^\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "4ae0cbd92ff162e724540806057ff930d3f0b9ab", "filename": "tests/ui/lint/issue-108155.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Flint%2Fissue-108155.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Flint%2Fissue-108155.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fissue-108155.rs?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+// check that `deref_into_dyn_supertrait` doesn't cause ICE by eagerly converting\n+// a cancelled lint\n+\n+#![allow(deref_into_dyn_supertrait)]\n+\n+trait Trait {}\n+impl std::ops::Deref for dyn Trait + Send + Sync {\n+    type Target = dyn Trait;\n+    fn deref(&self) -> &Self::Target {\n+        self\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "a082a8a44df2ae29d6ecac46e6cbe7efe66560e4", "filename": "tests/ui/parser/numeric-lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Fparser%2Fnumeric-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Fparser%2Fnumeric-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fnumeric-lifetime.rs?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -1,6 +1,6 @@\n struct S<'1> { s: &'1 usize }\n-//~^ ERROR lifetimes cannot start with a number\n-//~| ERROR lifetimes cannot start with a number\n+//~^ ERROR lifetimes or labels cannot start with a number\n+//~| ERROR lifetimes or labels cannot start with a number\n fn main() {\n     // verify that the parse error doesn't stop type checking\n     let x: usize = \"\";"}, {"sha": "66e35dca923199d02d7467ff18d27f65a0bedb58", "filename": "tests/ui/parser/numeric-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Fparser%2Fnumeric-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Fparser%2Fnumeric-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fnumeric-lifetime.stderr?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -6,13 +6,13 @@ LL |     let x: usize = \"\";\n    |            |\n    |            expected due to this\n \n-error: lifetimes cannot start with a number\n+error: lifetimes or labels cannot start with a number\n   --> $DIR/numeric-lifetime.rs:1:10\n    |\n LL | struct S<'1> { s: &'1 usize }\n    |          ^^\n \n-error: lifetimes cannot start with a number\n+error: lifetimes or labels cannot start with a number\n   --> $DIR/numeric-lifetime.rs:1:20\n    |\n LL | struct S<'1> { s: &'1 usize }"}, {"sha": "0fd16c5d0ee04e75c4e48055d5ce85953285397d", "filename": "tests/ui/traits/non_lifetime_binders/basic.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbasic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbasic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbasic.stderr?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -4,7 +4,7 @@ warning: the feature `non_lifetime_binders` is incomplete and may not be safe to\n LL | #![feature(non_lifetime_binders)]\n    |            ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = note: see issue #108185 <https://github.com/rust-lang/rust/issues/108185> for more information\n    = note: `#[warn(incomplete_features)]` on by default\n \n warning: 1 warning emitted"}, {"sha": "c3f4fd6a88e4d0d35547ae0b90e1021e5e5d33fe", "filename": "tests/ui/traits/non_lifetime_binders/fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Ffail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Ffail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Ffail.stderr?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -4,7 +4,7 @@ warning: the feature `non_lifetime_binders` is incomplete and may not be safe to\n LL | #![feature(non_lifetime_binders)]\n    |            ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = note: see issue #108185 <https://github.com/rust-lang/rust/issues/108185> for more information\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0277]: the trait bound `T: Trait` is not satisfied"}, {"sha": "95656f99976ff16604cc710d3ba1edf9e4b46e31", "filename": "tests/ui/traits/non_lifetime_binders/on-dyn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fon-dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fon-dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fon-dyn.stderr?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -4,7 +4,7 @@ warning: the feature `non_lifetime_binders` is incomplete and may not be safe to\n LL | #![feature(non_lifetime_binders)]\n    |            ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = note: see issue #108185 <https://github.com/rust-lang/rust/issues/108185> for more information\n    = note: `#[warn(incomplete_features)]` on by default\n \n error: late-bound type parameter not allowed on trait object types"}, {"sha": "3b17f7697b2be06318fad829c500d4b11f72835c", "filename": "tests/ui/traits/non_lifetime_binders/on-ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fon-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5c4581a386b13c414e8c8bd73846ef37236d1/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fon-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fon-ptr.stderr?ref=3eb5c4581a386b13c414e8c8bd73846ef37236d1", "patch": "@@ -4,7 +4,7 @@ warning: the feature `non_lifetime_binders` is incomplete and may not be safe to\n LL | #![feature(non_lifetime_binders)]\n    |            ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = note: see issue #108185 <https://github.com/rust-lang/rust/issues/108185> for more information\n    = note: `#[warn(incomplete_features)]` on by default\n \n error: late-bound type parameter not allowed on function pointer types"}]}