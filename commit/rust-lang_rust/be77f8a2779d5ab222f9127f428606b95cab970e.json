{"sha": "be77f8a2779d5ab222f9127f428606b95cab970e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlNzdmOGEyNzc5ZDVhYjIyMmY5MTI3ZjQyODYwNmI5NWNhYjk3MGU=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-10-22T21:51:19Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-10-24T14:24:51Z"}, "message": "Add a brief overview of rustfmt tests", "tree": {"sha": "1026863257b8a4c0af76d0184dfc215a5a4307a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1026863257b8a4c0af76d0184dfc215a5a4307a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be77f8a2779d5ab222f9127f428606b95cab970e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be77f8a2779d5ab222f9127f428606b95cab970e", "html_url": "https://github.com/rust-lang/rust/commit/be77f8a2779d5ab222f9127f428606b95cab970e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be77f8a2779d5ab222f9127f428606b95cab970e/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58ff0d8730806332e05b34189d91c8504f71eccc", "url": "https://api.github.com/repos/rust-lang/rust/commits/58ff0d8730806332e05b34189d91c8504f71eccc", "html_url": "https://github.com/rust-lang/rust/commit/58ff0d8730806332e05b34189d91c8504f71eccc"}], "stats": {"total": 57, "additions": 45, "deletions": 12}, "files": [{"sha": "06a119733717f108e48dd4b852b739ca040b8be4", "filename": "Contributing.md", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/be77f8a2779d5ab222f9127f428606b95cab970e/Contributing.md", "raw_url": "https://github.com/rust-lang/rust/raw/be77f8a2779d5ab222f9127f428606b95cab970e/Contributing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Contributing.md?ref=be77f8a2779d5ab222f9127f428606b95cab970e", "patch": "@@ -6,14 +6,45 @@ It would be really useful to have people use rustfmt on their projects and file\n issues where it does something you don't expect.\n \n A really useful thing to do that on a crate from the Rust repo. If it does\n-something unexpected, file an issue; if not, make a PR to the Rust repo with the reformatted code. I hope to get the whole repo consistently rustfmt'ed and to\n+something unexpected, file an issue; if not, make a PR to the Rust repo with the\n+reformatted code. We hope to get the whole repo consistently rustfmt'ed and to\n replace `make tidy` with rustfmt as a medium-term goal.\n \n ### Create test cases\n \n Having a strong test suite for a tool like this is essential. It is very easy\n to create regressions. Any tests you can add are very much appreciated.\n \n+The tests can be run with `cargo test`. This does a number of things:\n+* runs the unit tests for a number of internal functions;\n+* makes sure that rustfmt run on every file in `./tests/source/` is equal to its\n+  associated file in `./tests/target/`;\n+* runs idempotence tests on the files in `./tests/target/`. These files should\n+  not be changed by rustfmt;\n+* checks that rustfmt's code is not changed by running on itself. This ensures\n+  that the project bootstraps.\n+\n+Creating a test is as easy as creating a new file in `./tests/source/` and an\n+equally named one in `./tests/target/`. If it is only required that rustfmt\n+leaves a piece of code unformatted, it may suffice to only create a target file.\n+\n+Whenever there's a discrepancy between the expected output when running tests, a\n+colourised diff will be printed so that the offending line(s) can quickly be\n+identified.\n+\n+Without explicit settings, the tests will be run using rustfmt's default\n+configuration. It is possible to run a test using non-default settings by\n+including configuration parameters in comments at the top of the file. For\n+example: to use 3 spaces per tab, start your test with\n+`// rustfmt-tab_spaces: 3`. Just remember that the comment is part of the input,\n+so include in both the source and target files! It is also possible to\n+explicitly specify the name of the expected output file in the target directory.\n+Use `// rustfmt-target: filename.rs` for this. Finally, you can use a custom\n+configuration by using the `rustfmt-config` directive. Rustfmt will then use\n+that toml file located in `./tests/config/` for its configuration. Including\n+`// rustfmt-config: small_tabs.toml` will run your test with the configuration\n+file found at `./tests/config/small_tabs.toml`.\n+\n ### Hack!\n \n Here are some [good starting issues](https://github.com/nrc/rustfmt/issues?q=is%3Aopen+is%3Aissue+label%3Aeasy)."}, {"sha": "ecba517554fff9499c3978039008926e9cd19870", "filename": "README.md", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/be77f8a2779d5ab222f9127f428606b95cab970e/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/be77f8a2779d5ab222f9127f428606b95cab970e/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=be77f8a2779d5ab222f9127f428606b95cab970e", "patch": "@@ -9,9 +9,10 @@ A tool for formatting Rust code according to style guidelines.\n    #[rustfmt_skip]\n    #[cfg_attr(rustfmt, rustfmt_skip)]\n     ```\n-* When you run rustfmt use a file called rustfmt.toml to override the default\n-  settings of rustfmt.\n-* We create a functioning executable called `rustfmt` in the target directory\n+* When you run rustfmt, place a file named rustfmt.toml in target file\n+  directory or its parents to override the default settings of rustfmt.\n+* After successful compilation, a `rustfmt` executable can be found in the\n+  target directory.\n \n ## Installation\n \n@@ -36,15 +37,16 @@ First make sure you've got Rust **1.3.0** or greater available, then:\n \n `cargo test` to run all tests.\n \n-`cargo run -- filename` to run on a file, if the file includes out of line modules,\n-then we reformat those too. So to run on a whole module or crate, you just need\n-to run on the top file.\n+`cargo run -- filename` to run on a file, if the file includes out of line\n+modules, then we reformat those too. So to run on a whole module or crate, you\n+just need to run on the top file.\n \n-You'll probably want to specify the write mode. Currently, there are the replace,\n-overwrite and display mode. The replace mode is the default and overwrites the\n-original files after renaming them. In overwrite mode, rustfmt does not backup\n-the source files. To print the output to stdout, use the display mode. The write\n-mode can be set by passing the `--write-mode` flag on the command line.\n+You'll probably want to specify the write mode. Currently, there are the\n+replace, overwrite, display and coverage modes. The replace mode is the default\n+and overwrites the original files after renaming them. In overwrite mode,\n+rustfmt does not backup the source files. To print the output to stdout, use the\n+display mode. The write mode can be set by passing the `--write-mode` flag on\n+the command line.\n \n `cargo run -- filename --write-mode=display` prints the output of rustfmt to the\n screen, for example."}]}