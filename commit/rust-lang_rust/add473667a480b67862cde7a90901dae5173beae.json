{"sha": "add473667a480b67862cde7a90901dae5173beae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkZDQ3MzY2N2E0ODBiNjc4NjJjZGU3YTkwOTAxZGFlNTE3M2JlYWU=", "commit": {"author": {"name": "Ruben Schmidmeister", "email": "ruben.schmidmeister@icloud.com", "date": "2019-04-24T17:47:05Z"}, "committer": {"name": "Ruben Schmidmeister", "email": "ruben.schmidmeister@icloud.com", "date": "2019-04-24T19:01:09Z"}, "message": "Introduce effective newline style", "tree": {"sha": "f4a622ba434d4f4328bc407b777fee568f747b60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4a622ba434d4f4328bc407b777fee568f747b60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/add473667a480b67862cde7a90901dae5173beae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEU0FXzFYkrmfOhhqxKTh7Wnqvhj8FAlzAsnUACgkQKTh7Wnqv\nhj//Agf8CQWoz0PsTYVydkoQmSaCSYFp5b/QyTMWgV2aJdVqnrfJ9OWzoYaD0fu6\nn8fT/Kr1XgxnO1aT/LfyohS9Acm7rnuy1CPocPtSZpUEz7SKGCFzLsM2jEZNd15e\nn2yGZx18w4R4bqrQqfG+0GaMWF0UM2Mf06mSaYoI6AkeLdtkJgyvE2L5kJmd2Oc2\nFrrXhKhX3oQbl8C8UYa7zUkodrotiEj9YuCE4501pc4DlUnpzgey7PmcFouX/JHL\nbR9n4zcQjPqb2jZSFwWviDQAKVDZ9azRG4mKRVKDOJ5scZ4wOeshcneljeCWFlc1\nKZ9lXQ0om86oM6zLqPyL08l3ZAoiVw==\n=TJ+v\n-----END PGP SIGNATURE-----", "payload": "tree f4a622ba434d4f4328bc407b777fee568f747b60\nparent 8849273efb890e767d7bfa610f6e5040583a6545\nauthor Ruben Schmidmeister <ruben.schmidmeister@icloud.com> 1556128025 +0200\ncommitter Ruben Schmidmeister <ruben.schmidmeister@icloud.com> 1556132469 +0200\n\nIntroduce effective newline style\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/add473667a480b67862cde7a90901dae5173beae", "html_url": "https://github.com/rust-lang/rust/commit/add473667a480b67862cde7a90901dae5173beae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/add473667a480b67862cde7a90901dae5173beae/comments", "author": {"login": "bash", "id": 4602612, "node_id": "MDQ6VXNlcjQ2MDI2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/4602612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bash", "html_url": "https://github.com/bash", "followers_url": "https://api.github.com/users/bash/followers", "following_url": "https://api.github.com/users/bash/following{/other_user}", "gists_url": "https://api.github.com/users/bash/gists{/gist_id}", "starred_url": "https://api.github.com/users/bash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bash/subscriptions", "organizations_url": "https://api.github.com/users/bash/orgs", "repos_url": "https://api.github.com/users/bash/repos", "events_url": "https://api.github.com/users/bash/events{/privacy}", "received_events_url": "https://api.github.com/users/bash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bash", "id": 4602612, "node_id": "MDQ6VXNlcjQ2MDI2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/4602612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bash", "html_url": "https://github.com/bash", "followers_url": "https://api.github.com/users/bash/followers", "following_url": "https://api.github.com/users/bash/following{/other_user}", "gists_url": "https://api.github.com/users/bash/gists{/gist_id}", "starred_url": "https://api.github.com/users/bash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bash/subscriptions", "organizations_url": "https://api.github.com/users/bash/orgs", "repos_url": "https://api.github.com/users/bash/repos", "events_url": "https://api.github.com/users/bash/events{/privacy}", "received_events_url": "https://api.github.com/users/bash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8849273efb890e767d7bfa610f6e5040583a6545", "url": "https://api.github.com/repos/rust-lang/rust/commits/8849273efb890e767d7bfa610f6e5040583a6545", "html_url": "https://github.com/rust-lang/rust/commit/8849273efb890e767d7bfa610f6e5040583a6545"}], "stats": {"total": 65, "additions": 42, "deletions": 23}, "files": [{"sha": "354d6d31ee62bee6d34b6a87f352393572dd2a59", "filename": "src/formatting/newline_style.rs", "status": "modified", "additions": 42, "deletions": 23, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/add473667a480b67862cde7a90901dae5173beae/src%2Fformatting%2Fnewline_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/add473667a480b67862cde7a90901dae5173beae/src%2Fformatting%2Fnewline_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting%2Fnewline_style.rs?ref=add473667a480b67862cde7a90901dae5173beae", "patch": "@@ -11,16 +11,8 @@ pub(crate) fn apply_newline_style(\n     formatted_text: &mut String,\n     raw_input_text: &str,\n ) {\n-    use crate::NewlineStyle::*;\n-    let mut style = newline_style;\n-    if style == Auto {\n-        style = auto_detect_newline_style(raw_input_text);\n-    }\n-    if style == Native {\n-        style = native();\n-    }\n-    match style {\n-        Windows => {\n+    match effective_newline_style(newline_style, raw_input_text) {\n+        EffectiveNewlineStyle::Windows => {\n             let mut transformed = String::with_capacity(2 * formatted_text.capacity());\n             for c in formatted_text.chars() {\n                 match c {\n@@ -31,30 +23,46 @@ pub(crate) fn apply_newline_style(\n             }\n             *formatted_text = transformed;\n         }\n-        Unix => return,\n-        Native => unreachable!(\"NewlineStyle::Native\"),\n-        Auto => unreachable!(\"NewlineStyle::Auto\"),\n+        EffectiveNewlineStyle::Unix => {}\n+    }\n+}\n+\n+#[derive(Debug, Copy, Clone, PartialEq, Eq)]\n+enum EffectiveNewlineStyle {\n+    Windows,\n+    Unix,\n+}\n+\n+fn effective_newline_style(\n+    newline_style: NewlineStyle,\n+    raw_input_text: &str,\n+) -> EffectiveNewlineStyle {\n+    match newline_style {\n+        NewlineStyle::Auto => auto_detect_newline_style(raw_input_text),\n+        NewlineStyle::Native => native_newline_style(),\n+        NewlineStyle::Windows => EffectiveNewlineStyle::Windows,\n+        NewlineStyle::Unix => EffectiveNewlineStyle::Unix,\n     }\n }\n \n-fn auto_detect_newline_style(raw_input_text: &str) -> NewlineStyle {\n+fn auto_detect_newline_style(raw_input_text: &str) -> EffectiveNewlineStyle {\n     if let Some(pos) = raw_input_text.find('\\n') {\n         let pos = pos.saturating_sub(1);\n         if let Some('\\r') = raw_input_text.chars().nth(pos) {\n-            NewlineStyle::Windows\n+            EffectiveNewlineStyle::Windows\n         } else {\n-            NewlineStyle::Unix\n+            EffectiveNewlineStyle::Unix\n         }\n     } else {\n-        NewlineStyle::Native\n+        native_newline_style()\n     }\n }\n \n-fn native() -> NewlineStyle {\n+fn native_newline_style() -> EffectiveNewlineStyle {\n     if cfg!(windows) {\n-        NewlineStyle::Windows\n+        EffectiveNewlineStyle::Windows\n     } else {\n-        NewlineStyle::Unix\n+        EffectiveNewlineStyle::Unix\n     }\n }\n \n@@ -68,9 +76,20 @@ mod tests {\n         let crlf = \"One\\r\\nTwo\\r\\nThree\";\n         let none = \"One Two Three\";\n \n-        assert_eq!(NewlineStyle::Unix, auto_detect_newline_style(lf));\n-        assert_eq!(NewlineStyle::Windows, auto_detect_newline_style(crlf));\n-        assert_eq!(NewlineStyle::Native, auto_detect_newline_style(none));\n+        assert_eq!(EffectiveNewlineStyle::Unix, auto_detect_newline_style(lf));\n+        assert_eq!(\n+            EffectiveNewlineStyle::Windows,\n+            auto_detect_newline_style(crlf)\n+        );\n+\n+        if cfg!(windows) {\n+            assert_eq!(\n+                EffectiveNewlineStyle::Windows,\n+                auto_detect_newline_style(none)\n+            );\n+        } else {\n+            assert_eq!(EffectiveNewlineStyle::Unix, auto_detect_newline_style(none));\n+        }\n     }\n \n     #[test]"}]}