{"sha": "ce06a6b4225d7ea5777da11166ad618389df3573", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlMDZhNmI0MjI1ZDdlYTU3NzdkYTExMTY2YWQ2MTgzODlkZjM1NzM=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-04-21T19:56:11Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-04-21T19:56:40Z"}, "message": "Do not add default and closure types in 'add explicit type' assist", "tree": {"sha": "58d4bcad28bcd6df819ee00a3d7c12d16fe31078", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58d4bcad28bcd6df819ee00a3d7c12d16fe31078"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce06a6b4225d7ea5777da11166ad618389df3573", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce06a6b4225d7ea5777da11166ad618389df3573", "html_url": "https://github.com/rust-lang/rust/commit/ce06a6b4225d7ea5777da11166ad618389df3573", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce06a6b4225d7ea5777da11166ad618389df3573/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ab28cacbb50d78e4e6f12293351683625cab607", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ab28cacbb50d78e4e6f12293351683625cab607", "html_url": "https://github.com/rust-lang/rust/commit/7ab28cacbb50d78e4e6f12293351683625cab607"}], "stats": {"total": 52, "additions": 47, "deletions": 5}, "files": [{"sha": "6c56d93d878d4cbff8fa21f3a567150efce20224", "filename": "crates/ra_assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 43, "deletions": 5, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ce06a6b4225d7ea5777da11166ad618389df3573/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce06a6b4225d7ea5777da11166ad618389df3573/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=ce06a6b4225d7ea5777da11166ad618389df3573", "patch": "@@ -52,21 +52,22 @@ pub(crate) fn add_explicit_type(ctx: AssistCtx) -> Option<Assist> {\n     }\n     // Infer type\n     let ty = ctx.sema.type_of_expr(&expr)?;\n-    // Assist not applicable if the type is unknown\n-    if ty.contains_unknown() {\n+\n+    if ty.contains_unknown() || ty.is_closure() {\n         return None;\n     }\n \n     let db = ctx.db;\n+    let new_type_string = ty.display_truncated(db, None).to_string();\n     ctx.add_assist(\n         AssistId(\"add_explicit_type\"),\n-        format!(\"Insert explicit type '{}'\", ty.display(db)),\n+        format!(\"Insert explicit type '{}'\", new_type_string),\n         |edit| {\n             edit.target(pat_range);\n             if let Some(ascribed_ty) = ascribed_ty {\n-                edit.replace(ascribed_ty.syntax().text_range(), format!(\"{}\", ty.display(db)));\n+                edit.replace(ascribed_ty.syntax().text_range(), new_type_string);\n             } else {\n-                edit.insert(name_range.end(), format!(\": {}\", ty.display(db)));\n+                edit.insert(name_range.end(), format!(\": {}\", new_type_string));\n             }\n         },\n     )\n@@ -174,4 +175,41 @@ mod tests {\n             \"fn f() <|>{let a = match 1 {2 => 3, 3 => 5};}\",\n         )\n     }\n+\n+    #[test]\n+    fn closure_parameters_are_not_added() {\n+        check_assist_not_applicable(\n+            add_explicit_type,\n+            r#\"\n+fn main() {\n+    let multiply_by_two<|> = |i| i * 3;\n+    let six = multiply_by_two(2);\n+}\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn default_generics_should_not_be_added() {\n+        check_assist(\n+            add_explicit_type,\n+            r#\"\n+struct Test<K, T = u8> {\n+    k: K,\n+    t: T,\n+}\n+\n+fn main() {\n+    let test<|> = Test { t: 23, k: 33 };\n+}\"#,\n+            r#\"\n+struct Test<K, T = u8> {\n+    k: K,\n+    t: T,\n+}\n+\n+fn main() {\n+    let test<|>: Test<i32> = Test { t: 23, k: 33 };\n+}\"#,\n+        );\n+    }\n }"}, {"sha": "43f932e20cc8e189ed0c22eacb3ed79aaf898eb9", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce06a6b4225d7ea5777da11166ad618389df3573/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce06a6b4225d7ea5777da11166ad618389df3573/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=ce06a6b4225d7ea5777da11166ad618389df3573", "patch": "@@ -1132,6 +1132,10 @@ impl Type {\n         Some(self.ty.value.as_callable()?.0)\n     }\n \n+    pub fn is_closure(&self) -> bool {\n+        matches!(&self.ty.value, Ty::Apply(ApplicationTy { ctor: TypeCtor::Closure { .. }, .. }))\n+    }\n+\n     pub fn contains_unknown(&self) -> bool {\n         return go(&self.ty.value);\n "}]}