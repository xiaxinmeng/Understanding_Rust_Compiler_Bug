{"sha": "be5537e95fbe80d4564982a44d73c4053ee29ee9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlNTUzN2U5NWZiZTgwZDQ1NjQ5ODJhNDRkNzNjNDA1M2VlMjllZTk=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-13T13:50:03Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-13T13:50:03Z"}, "message": "Be more strict about what constitutes a block expression\n\nBlocks (or statements involving blocks) that end in a semicolon are no\nlonger considered the block-expression of their outer block. This used\nto be an expression block, but now is a statement block:\n\n    { if foo { ret 1; } else { ret 10; } }\n\nThis helps clear up some ambiguities in our grammar.", "tree": {"sha": "d1b1ecf1db70af167cded484703ddba4097f9b39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1b1ecf1db70af167cded484703ddba4097f9b39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be5537e95fbe80d4564982a44d73c4053ee29ee9", "comment_count": 2, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be5537e95fbe80d4564982a44d73c4053ee29ee9", "html_url": "https://github.com/rust-lang/rust/commit/be5537e95fbe80d4564982a44d73c4053ee29ee9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be5537e95fbe80d4564982a44d73c4053ee29ee9/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9451648798dc85a5971e98046cf62dca7a2cb23", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9451648798dc85a5971e98046cf62dca7a2cb23", "html_url": "https://github.com/rust-lang/rust/commit/e9451648798dc85a5971e98046cf62dca7a2cb23"}], "stats": {"total": 46, "additions": 37, "deletions": 9}, "files": [{"sha": "5006277ec6be37e297fc249f5bdd7d0a1081383c", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/be5537e95fbe80d4564982a44d73c4053ee29ee9/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5537e95fbe80d4564982a44d73c4053ee29ee9/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=be5537e95fbe80d4564982a44d73c4053ee29ee9", "patch": "@@ -1571,8 +1571,42 @@ fn parse_source_stmt(p: parser) -> @ast::stmt {\n     }\n }\n \n+fn stmt_is_expr(stmt: @ast::stmt) -> bool {\n+    fn expr_is_expr(e: @ast::expr) -> bool {\n+        alt e.node {\n+          ast::expr_if(_, th, els) | ast::expr_if_check(_, th, els) {\n+            if option::is_none(els) { false }\n+            else { !option::is_none(th.node.expr) ||\n+                       expr_is_expr(option::get(els)) }\n+          }\n+          ast::expr_alt(_, arms) {\n+            let found_expr = false;\n+            for arm in arms {\n+                if !option::is_none(arm.body.node.expr) { found_expr = true; }\n+            }\n+            found_expr\n+          }\n+          ast::expr_block(blk) | ast::expr_while(_, blk) |\n+          ast::expr_for(_, _, blk) | ast::expr_for_each(_, _, blk) |\n+          ast::expr_do_while(blk, _) {\n+            !option::is_none(blk.node.expr)\n+          }\n+          _ { true }\n+        }\n+    }\n+\n+    ret alt stmt.node {\n+      ast::stmt_expr(e, _) { expr_is_expr(e) }\n+      _ { false }\n+    };\n+}\n+\n fn stmt_to_expr(stmt: @ast::stmt) -> option::t<@ast::expr> {\n-    ret alt stmt.node { ast::stmt_expr(e, _) { some(e) } _ { none } };\n+    ret if stmt_is_expr(stmt) {\n+        alt stmt.node {\n+          ast::stmt_expr(e, _) { some(e) }\n+        }\n+    } else { none };\n }\n \n fn stmt_ends_with_semi(stmt: ast::stmt) -> bool {\n@@ -1627,10 +1661,6 @@ fn stmt_ends_with_semi(stmt: ast::stmt) -> bool {\n             }\n       }\n \n-\n-\n-\n-\n       // We should not be calling this on a cdir.\n       ast::stmt_crate_directive(cdir) {\n         fail;\n@@ -1681,7 +1711,6 @@ fn parse_block_tail(p: parser, lo: uint, s: ast::check_mode) -> ast::blk {\n                 // Not an expression statement.\n                 stmts += [stmt];\n \n-\n                 if p.get_file_type() == SOURCE_FILE &&\n                        stmt_ends_with_semi(*stmt) {\n                     expect(p, token::SEMI);"}, {"sha": "0f780f1b335872dfa5237c75d9b963b9aa3d2fb3", "filename": "src/test/compile-fail/forgot-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5537e95fbe80d4564982a44d73c4053ee29ee9/src%2Ftest%2Fcompile-fail%2Fforgot-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5537e95fbe80d4564982a44d73c4053ee29ee9/src%2Ftest%2Fcompile-fail%2Fforgot-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fforgot-ret.rs?ref=be5537e95fbe80d4564982a44d73c4053ee29ee9", "patch": "@@ -1,5 +1,5 @@\n // -*- rust -*-\n-// error-pattern: mismatched types\n+// error-pattern: not all control paths return a value\n \n fn god_exists(a: int) -> bool { be god_exists(a); }\n "}, {"sha": "a73db075196c4711b6ae09e2da1e8a8ec8abad30", "filename": "src/test/compile-fail/missing-return2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be5537e95fbe80d4564982a44d73c4053ee29ee9/src%2Ftest%2Fcompile-fail%2Fmissing-return2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5537e95fbe80d4564982a44d73c4053ee29ee9/src%2Ftest%2Fcompile-fail%2Fmissing-return2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmissing-return2.rs?ref=be5537e95fbe80d4564982a44d73c4053ee29ee9", "patch": "@@ -1,7 +1,6 @@\n-// error-pattern: mismatched types\n+// error-pattern: not all control paths return a value\n \n fn f() -> int {\n-\n     // Make sure typestate doesn't interpret this alt expression\n     // as the function result\n     alt true { true { } }"}]}