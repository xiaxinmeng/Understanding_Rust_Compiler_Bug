{"sha": "f5ac3130001ab7fe64dd542fd866a18012ee9971", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1YWMzMTMwMDAxYWI3ZmU2NGRkNTQyZmQ4NjZhMTgwMTJlZTk5NzE=", "commit": {"author": {"name": "Timo Freiberg", "email": "timo.freiberg@gmail.com", "date": "2020-06-09T21:11:16Z"}, "committer": {"name": "Timo Freiberg", "email": "timo.freiberg@gmail.com", "date": "2020-06-12T16:52:44Z"}, "message": "Add quickfix to add a struct field", "tree": {"sha": "fb084408f5cce4addbb44806301f0526c5277356", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb084408f5cce4addbb44806301f0526c5277356"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5ac3130001ab7fe64dd542fd866a18012ee9971", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5ac3130001ab7fe64dd542fd866a18012ee9971", "html_url": "https://github.com/rust-lang/rust/commit/f5ac3130001ab7fe64dd542fd866a18012ee9971", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5ac3130001ab7fe64dd542fd866a18012ee9971/comments", "author": {"login": "TimoFreiberg", "id": 5281645, "node_id": "MDQ6VXNlcjUyODE2NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5281645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimoFreiberg", "html_url": "https://github.com/TimoFreiberg", "followers_url": "https://api.github.com/users/TimoFreiberg/followers", "following_url": "https://api.github.com/users/TimoFreiberg/following{/other_user}", "gists_url": "https://api.github.com/users/TimoFreiberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimoFreiberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimoFreiberg/subscriptions", "organizations_url": "https://api.github.com/users/TimoFreiberg/orgs", "repos_url": "https://api.github.com/users/TimoFreiberg/repos", "events_url": "https://api.github.com/users/TimoFreiberg/events{/privacy}", "received_events_url": "https://api.github.com/users/TimoFreiberg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimoFreiberg", "id": 5281645, "node_id": "MDQ6VXNlcjUyODE2NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5281645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimoFreiberg", "html_url": "https://github.com/TimoFreiberg", "followers_url": "https://api.github.com/users/TimoFreiberg/followers", "following_url": "https://api.github.com/users/TimoFreiberg/following{/other_user}", "gists_url": "https://api.github.com/users/TimoFreiberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimoFreiberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimoFreiberg/subscriptions", "organizations_url": "https://api.github.com/users/TimoFreiberg/orgs", "repos_url": "https://api.github.com/users/TimoFreiberg/repos", "events_url": "https://api.github.com/users/TimoFreiberg/events{/privacy}", "received_events_url": "https://api.github.com/users/TimoFreiberg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b56ad148db0c69eb279c225f45d324b4e80e7367", "url": "https://api.github.com/repos/rust-lang/rust/commits/b56ad148db0c69eb279c225f45d324b4e80e7367", "html_url": "https://github.com/rust-lang/rust/commit/b56ad148db0c69eb279c225f45d324b4e80e7367"}], "stats": {"total": 139, "additions": 134, "deletions": 5}, "files": [{"sha": "6a49c424a083ca7c2cec040cf0c9456a6786f789", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f5ac3130001ab7fe64dd542fd866a18012ee9971/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5ac3130001ab7fe64dd542fd866a18012ee9971/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=f5ac3130001ab7fe64dd542fd866a18012ee9971", "patch": "@@ -6,9 +6,9 @@ use std::{cell::RefCell, fmt, iter::successors};\n \n use hir_def::{\n     resolver::{self, HasResolver, Resolver},\n-    AsMacroCall, TraitId,\n+    AsMacroCall, TraitId, VariantId,\n };\n-use hir_expand::{hygiene::Hygiene, ExpansionInfo};\n+use hir_expand::{diagnostics::AstDiagnostic, hygiene::Hygiene, ExpansionInfo};\n use hir_ty::associated_type_shorthand_candidates;\n use itertools::Itertools;\n use ra_db::{FileId, FileRange};\n@@ -104,6 +104,13 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         tree\n     }\n \n+    pub fn ast<T: AstDiagnostic + Diagnostic>(&self, d: &T) -> <T as AstDiagnostic>::AST {\n+        let file_id = d.source().file_id;\n+        let root = self.db.parse_or_expand(file_id).unwrap();\n+        self.cache(root, file_id);\n+        d.ast(self.db)\n+    }\n+\n     pub fn expand(&self, macro_call: &ast::MacroCall) -> Option<SyntaxNode> {\n         let macro_call = self.find_file(macro_call.syntax().clone()).with_value(macro_call);\n         let sa = self.analyze2(macro_call.map(|it| it.syntax()), None);\n@@ -247,6 +254,10 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.analyze(path.syntax()).resolve_path(self.db, path)\n     }\n \n+    pub fn resolve_variant(&self, record_lit: ast::RecordLit) -> Option<VariantId> {\n+        self.analyze(record_lit.syntax()).resolve_variant(self.db, record_lit)\n+    }\n+\n     pub fn lower_path(&self, path: &ast::Path) -> Option<Path> {\n         let src = self.find_file(path.syntax().clone());\n         Path::from_src(path.clone(), &Hygiene::new(self.db.upcast(), src.file_id.into()))"}, {"sha": "757d1e397f5f2c8ee9ae2b51e07c543ee397b525", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f5ac3130001ab7fe64dd542fd866a18012ee9971/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5ac3130001ab7fe64dd542fd866a18012ee9971/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=f5ac3130001ab7fe64dd542fd866a18012ee9971", "patch": "@@ -313,6 +313,16 @@ impl SourceAnalyzer {\n         })?;\n         Some(macro_call_id.as_file())\n     }\n+\n+    pub(crate) fn resolve_variant(\n+        &self,\n+        db: &dyn HirDatabase,\n+        record_lit: ast::RecordLit,\n+    ) -> Option<VariantId> {\n+        let infer = self.infer.as_ref()?;\n+        let expr_id = self.expr_id(db, &record_lit.into())?;\n+        infer.variant_resolution_for_expr(expr_id)\n+    }\n }\n \n fn scope_for("}, {"sha": "ebd9cb08f91ae00e70ff6e3f88d20b79f2e0cdaf", "filename": "crates/ra_hir_ty/src/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f5ac3130001ab7fe64dd542fd866a18012ee9971/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5ac3130001ab7fe64dd542fd866a18012ee9971/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs?ref=f5ac3130001ab7fe64dd542fd866a18012ee9971", "patch": "@@ -6,7 +6,7 @@ use hir_expand::{db::AstDatabase, name::Name, HirFileId, InFile};\n use ra_syntax::{ast, AstNode, AstPtr, SyntaxNodePtr};\n use stdx::format_to;\n \n-pub use hir_def::{diagnostics::UnresolvedModule, expr::MatchArm};\n+pub use hir_def::{diagnostics::UnresolvedModule, expr::MatchArm, path::Path};\n pub use hir_expand::diagnostics::{AstDiagnostic, Diagnostic, DiagnosticSink};\n \n #[derive(Debug)]\n@@ -29,6 +29,16 @@ impl Diagnostic for NoSuchField {\n     }\n }\n \n+impl AstDiagnostic for NoSuchField {\n+    type AST = ast::RecordField;\n+\n+    fn ast(&self, db: &impl AstDatabase) -> Self::AST {\n+        let root = db.parse_or_expand(self.source().file_id).unwrap();\n+        let node = self.source().value.to_node(&root);\n+        ast::RecordField::cast(node).unwrap()\n+    }\n+}\n+\n #[derive(Debug)]\n pub struct MissingFields {\n     pub file: HirFileId,"}, {"sha": "365d52168f7e574ae3eb13372e0be37f389ebea7", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 96, "deletions": 2, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/f5ac3130001ab7fe64dd542fd866a18012ee9971/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5ac3130001ab7fe64dd542fd866a18012ee9971/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=f5ac3130001ab7fe64dd542fd866a18012ee9971", "patch": "@@ -8,15 +8,15 @@ use std::cell::RefCell;\n \n use hir::{\n     diagnostics::{AstDiagnostic, Diagnostic as _, DiagnosticSink},\n-    Semantics,\n+    HasSource, HirDisplay, Semantics, VariantDef,\n };\n use itertools::Itertools;\n use ra_db::{RelativePath, SourceDatabase, SourceDatabaseExt};\n use ra_ide_db::RootDatabase;\n use ra_prof::profile;\n use ra_syntax::{\n     algo,\n-    ast::{self, make, AstNode},\n+    ast::{self, edit::IndentLevel, make, AstNode},\n     SyntaxNode, TextRange, T,\n };\n use ra_text_edit::{TextEdit, TextEditBuilder};\n@@ -123,14 +123,85 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n             severity: Severity::Error,\n             fix: Some(fix),\n         })\n+    })\n+    .on::<hir::diagnostics::NoSuchField, _>(|d| {\n+        res.borrow_mut().push(Diagnostic {\n+            range: sema.diagnostics_range(d).range,\n+            message: d.message(),\n+            severity: Severity::Error,\n+            fix: missing_struct_field_fix(&sema, file_id, d),\n+        })\n     });\n+\n     if let Some(m) = sema.to_module_def(file_id) {\n         m.diagnostics(db, &mut sink);\n     };\n     drop(sink);\n     res.into_inner()\n }\n \n+fn missing_struct_field_fix(\n+    sema: &Semantics<RootDatabase>,\n+    file_id: FileId,\n+    d: &hir::diagnostics::NoSuchField,\n+) -> Option<Fix> {\n+    let record_expr = sema.ast(d);\n+\n+    let record_lit = ast::RecordLit::cast(record_expr.syntax().parent()?.parent()?)?;\n+    let def_id = sema.resolve_variant(record_lit)?;\n+    let module;\n+    let record_fields = match VariantDef::from(def_id) {\n+        VariantDef::Struct(s) => {\n+            module = s.module(sema.db);\n+            let source = s.source(sema.db);\n+            let fields = source.value.field_def_list()?;\n+            record_field_def_list(fields)?\n+        }\n+        VariantDef::Union(u) => {\n+            module = u.module(sema.db);\n+            let source = u.source(sema.db);\n+            source.value.record_field_def_list()?\n+        }\n+        VariantDef::EnumVariant(e) => {\n+            module = e.module(sema.db);\n+            let source = e.source(sema.db);\n+            let fields = source.value.field_def_list()?;\n+            record_field_def_list(fields)?\n+        }\n+    };\n+\n+    let new_field_type = sema.type_of_expr(&record_expr.expr()?)?;\n+    let new_field = make::record_field_def(\n+        record_expr.field_name()?,\n+        make::type_ref(&new_field_type.display_source_code(sema.db, module.into()).ok()?),\n+    );\n+\n+    let last_field = record_fields.fields().last()?;\n+    let last_field_syntax = last_field.syntax();\n+    let indent = IndentLevel::from_node(last_field_syntax);\n+\n+    let mut new_field = format!(\"\\n{}{}\", indent, new_field);\n+\n+    let needs_comma = !last_field_syntax.to_string().ends_with(\",\");\n+    if needs_comma {\n+        new_field = format!(\",{}\", new_field);\n+    }\n+\n+    let source_change = SourceFileEdit {\n+        file_id,\n+        edit: TextEdit::insert(last_field_syntax.text_range().end(), new_field),\n+    };\n+    let fix = Fix::new(\"Create field\", source_change.into());\n+    return Some(fix);\n+\n+    fn record_field_def_list(field_def_list: ast::FieldDefList) -> Option<ast::RecordFieldDefList> {\n+        match field_def_list {\n+            ast::FieldDefList::RecordFieldDefList(it) => Some(it),\n+            ast::FieldDefList::TupleFieldDefList(_) => None,\n+        }\n+    }\n+}\n+\n fn check_unnecessary_braces_in_use_statement(\n     acc: &mut Vec<Diagnostic>,\n     file_id: FileId,\n@@ -795,4 +866,27 @@ fn main() {\n             check_struct_shorthand_initialization,\n         );\n     }\n+\n+    #[test]\n+    fn test_add_field_from_usage() {\n+        check_apply_diagnostic_fix(\n+            r\"\n+            fn main() {\n+                Foo { bar: 3, baz: false};\n+            }\n+            struct Foo {\n+                bar: i32\n+            }\n+            \",\n+            r\"\n+            fn main() {\n+                Foo { bar: 3, baz: false};\n+            }\n+            struct Foo {\n+                bar: i32,\n+                baz: bool\n+            }\n+            \",\n+        )\n+    }\n }"}, {"sha": "192c610f1c592473d3fdf29da9268df9cd8a6131", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5ac3130001ab7fe64dd542fd866a18012ee9971/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5ac3130001ab7fe64dd542fd866a18012ee9971/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=f5ac3130001ab7fe64dd542fd866a18012ee9971", "patch": "@@ -75,6 +75,10 @@ pub fn record_field(name: ast::NameRef, expr: Option<ast::Expr>) -> ast::RecordF\n     }\n }\n \n+pub fn record_field_def(name: ast::NameRef, ty: ast::TypeRef) -> ast::RecordFieldDef {\n+    ast_from_text(&format!(\"struct S {{ {}: {}, }}\", name, ty))\n+}\n+\n pub fn block_expr(\n     stmts: impl IntoIterator<Item = ast::Stmt>,\n     tail_expr: Option<ast::Expr>,"}]}