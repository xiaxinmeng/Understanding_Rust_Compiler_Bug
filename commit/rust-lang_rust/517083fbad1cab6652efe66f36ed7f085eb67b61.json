{"sha": "517083fbad1cab6652efe66f36ed7f085eb67b61", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxNzA4M2ZiYWQxY2FiNjY1MmVmZTY2ZjM2ZWQ3ZjA4NWViNjdiNjE=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-03-07T07:13:15Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-03-07T08:22:58Z"}, "message": "Make `assert` macro a built-in procedural macro", "tree": {"sha": "fbc9ff99babdeeb60c5ac9a4850b975a3817490d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbc9ff99babdeeb60c5ac9a4850b975a3817490d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/517083fbad1cab6652efe66f36ed7f085eb67b61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/517083fbad1cab6652efe66f36ed7f085eb67b61", "html_url": "https://github.com/rust-lang/rust/commit/517083fbad1cab6652efe66f36ed7f085eb67b61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/517083fbad1cab6652efe66f36ed7f085eb67b61/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f2100b92cb14fbea2102701af6a3ac5814bd06c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f2100b92cb14fbea2102701af6a3ac5814bd06c", "html_url": "https://github.com/rust-lang/rust/commit/6f2100b92cb14fbea2102701af6a3ac5814bd06c"}], "stats": {"total": 138, "additions": 137, "deletions": 1}, "files": [{"sha": "8a87bea71e2530cf9562698aa6650955a854cc33", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/517083fbad1cab6652efe66f36ed7f085eb67b61/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517083fbad1cab6652efe66f36ed7f085eb67b61/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=517083fbad1cab6652efe66f36ed7f085eb67b61", "patch": "@@ -76,6 +76,7 @@ macro_rules! panic {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg(stage0)]\n macro_rules! assert {\n     ($cond:expr) => (\n         if !$cond {\n@@ -784,4 +785,18 @@ mod builtin {\n         ($file:expr) => ({ /* compiler built-in */ });\n         ($file:expr,) => ({ /* compiler built-in */ });\n     }\n+\n+    /// Ensure that a boolean expression is `true` at runtime.\n+    ///\n+    /// For more information, see the documentation for [`std::assert!`].\n+    ///\n+    /// [`std::assert!`]: ../std/macro.assert.html\n+    #[macro_export]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg(dox)]\n+    macro_rules! assert {\n+        ($cond:expr) => ({ /* compiler built-in */ });\n+        ($cond:expr,) => ({ /* compiler built-in */ });\n+        ($cond:expr, $($arg:tt)+) => ({ /* compiler built-in */ });\n+    }\n }"}, {"sha": "b2e45f0f4379be0ee69ce54561129df941b5a432", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/517083fbad1cab6652efe66f36ed7f085eb67b61/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517083fbad1cab6652efe66f36ed7f085eb67b61/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=517083fbad1cab6652efe66f36ed7f085eb67b61", "patch": "@@ -355,8 +355,9 @@ use prelude::v1::*;\n // We want to re-export a few macros from core but libcore has already been\n // imported by the compiler (via our #[no_std] attribute) In this case we just\n // add a new crate name so we can attach the re-exports to it.\n-#[macro_reexport(assert, assert_eq, assert_ne, debug_assert, debug_assert_eq,\n+#[macro_reexport(assert_eq, assert_ne, debug_assert, debug_assert_eq,\n                  debug_assert_ne, unreachable, unimplemented, write, writeln, try)]\n+#[cfg_attr(stage0, macro_reexport(assert))]\n extern crate core as __core;\n \n #[macro_use]"}, {"sha": "da982af498bc0d0d21c40d24bafdab0785dbbd34", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/517083fbad1cab6652efe66f36ed7f085eb67b61/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517083fbad1cab6652efe66f36ed7f085eb67b61/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=517083fbad1cab6652efe66f36ed7f085eb67b61", "patch": "@@ -719,6 +719,60 @@ pub mod builtin {\n         ($file:expr) => ({ /* compiler built-in */ });\n         ($file:expr,) => ({ /* compiler built-in */ });\n     }\n+\n+    /// Ensure that a boolean expression is `true` at runtime.\n+    ///\n+    /// This will invoke the [`panic!`] macro if the provided expression cannot be\n+    /// evaluated to `true` at runtime.\n+    ///\n+    /// # Uses\n+    ///\n+    /// Assertions are always checked in both debug and release builds, and cannot\n+    /// be disabled. See [`debug_assert!`] for assertions that are not enabled in\n+    /// release builds by default.\n+    ///\n+    /// Unsafe code relies on `assert!` to enforce run-time invariants that, if\n+    /// violated could lead to unsafety.\n+    ///\n+    /// Other use-cases of `assert!` include [testing] and enforcing run-time\n+    /// invariants in safe code (whose violation cannot result in unsafety).\n+    ///\n+    /// # Custom Messages\n+    ///\n+    /// This macro has a second form, where a custom panic message can\n+    /// be provided with or without arguments for formatting.  See [`std::fmt`]\n+    /// for syntax for this form.\n+    ///\n+    /// [`panic!`]: macro.panic.html\n+    /// [`debug_assert!`]: macro.debug_assert.html\n+    /// [testing]: ../book/second-edition/ch11-01-writing-tests.html#checking-results-with-the-assert-macro\n+    /// [`std::fmt`]: ../std/fmt/index.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// // the panic message for these assertions is the stringified value of the\n+    /// // expression given.\n+    /// assert!(true);\n+    ///\n+    /// fn some_computation() -> bool { true } // a very simple function\n+    ///\n+    /// assert!(some_computation());\n+    ///\n+    /// // assert with a custom message\n+    /// let x = true;\n+    /// assert!(x, \"x wasn't true!\");\n+    ///\n+    /// let a = 3; let b = 27;\n+    /// assert!(a + b == 30, \"a = {}, b = {}\", a, b);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[macro_export]\n+    macro_rules! assert {\n+        ($cond:expr) => ({ /* compiler built-in */ });\n+        ($cond:expr,) => ({ /* compiler built-in */ });\n+        ($cond:expr, $($arg:tt)+) => ({ /* compiler built-in */ });\n+    }\n }\n \n /// A macro for defining #[cfg] if-else statements."}, {"sha": "7962ec26c37ad363d7023b7f5047f1ea5d524d4f", "filename": "src/libsyntax_ext/assert.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/517083fbad1cab6652efe66f36ed7f085eb67b61/src%2Flibsyntax_ext%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517083fbad1cab6652efe66f36ed7f085eb67b61/src%2Flibsyntax_ext%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fassert.rs?ref=517083fbad1cab6652efe66f36ed7f085eb67b61", "patch": "@@ -0,0 +1,64 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use syntax::ast::*;\n+use syntax::codemap::Spanned;\n+use syntax::ext::base::*;\n+use syntax::ext::build::AstBuilder;\n+use syntax::parse::token;\n+use syntax::print::pprust;\n+use syntax::tokenstream::{TokenStream, TokenTree};\n+use syntax_pos::Span;\n+\n+pub fn expand_assert<'cx>(\n+    cx: &'cx mut ExtCtxt,\n+    sp: Span,\n+    tts: &[TokenTree],\n+) -> Box<MacResult + 'cx> {\n+    let mut parser = cx.new_parser_from_tts(tts);\n+    let cond_expr = panictry!(parser.parse_expr());\n+    let custom_msg_args = if parser.eat(&token::Comma) {\n+        let ts = parser.parse_tokens();\n+        if !ts.is_empty() {\n+            Some(ts)\n+        } else {\n+            None\n+        }\n+    } else {\n+        None\n+    };\n+\n+    let sp = sp.with_ctxt(sp.ctxt().apply_mark(cx.current_expansion.mark));\n+    let panic_call = Mac_ {\n+        path: Path::from_ident(sp, Ident::from_str(\"panic\")),\n+        tts: if let Some(ts) = custom_msg_args {\n+            ts.into()\n+        } else {\n+            let panic_str = format!(\"assertion failed: {}\", pprust::expr_to_string(&cond_expr));\n+            TokenStream::from(token::Literal(\n+                token::Lit::Str_(Name::intern(&panic_str)),\n+                None,\n+            )).into()\n+        },\n+    };\n+    let if_expr = cx.expr_if(\n+        sp,\n+        cx.expr(sp, ExprKind::Unary(UnOp::Not, cond_expr)),\n+        cx.expr(\n+            sp,\n+            ExprKind::Mac(Spanned {\n+                span: sp,\n+                node: panic_call,\n+            }),\n+        ),\n+        None,\n+    );\n+    MacEager::expr(if_expr)\n+}"}, {"sha": "a01878530b2ac98c46433060cfbe0edfc4ac5cc2", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/517083fbad1cab6652efe66f36ed7f085eb67b61/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517083fbad1cab6652efe66f36ed7f085eb67b61/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=517083fbad1cab6652efe66f36ed7f085eb67b61", "patch": "@@ -26,6 +26,7 @@ extern crate proc_macro;\n extern crate rustc_data_structures;\n extern crate rustc_errors as errors;\n \n+mod assert;\n mod asm;\n mod cfg;\n mod compile_error;\n@@ -111,6 +112,7 @@ pub fn register_builtins(resolver: &mut syntax::ext::base::Resolver,\n         log_syntax: log_syntax::expand_syntax_ext,\n         trace_macros: trace_macros::expand_trace_macros,\n         compile_error: compile_error::expand_compile_error,\n+        assert: assert::expand_assert,\n     }\n \n     // format_args uses `unstable` things internally."}]}