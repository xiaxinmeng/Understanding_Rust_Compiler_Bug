{"sha": "8e0c3f5c462acc7da61c59e81510765da1919e80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMGMzZjVjNDYyYWNjN2RhNjFjNTllODE1MTA3NjVkYTE5MTllODA=", "commit": {"author": {"name": "bobtwinkles", "email": "srkoser+GitHub@gmail.com", "date": "2018-02-07T19:25:08Z"}, "committer": {"name": "bobtwinkles", "email": "srkoser+GitHub@gmail.com", "date": "2018-02-07T19:25:08Z"}, "message": "[ci skip] Generate false edges from loop_block\n\nAs opposed to using weirdness involving pretending the body block\nis the loop block. This does not pass tests\n\nThis commit is [ci skip] because I know it doesn't pass tests yet.\nSomehow this commit introduces nondeterminism into the handling of\nloops.", "tree": {"sha": "8addb84c88dc5088e3ead12ff8a64d6a56462e74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8addb84c88dc5088e3ead12ff8a64d6a56462e74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e0c3f5c462acc7da61c59e81510765da1919e80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e0c3f5c462acc7da61c59e81510765da1919e80", "html_url": "https://github.com/rust-lang/rust/commit/8e0c3f5c462acc7da61c59e81510765da1919e80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e0c3f5c462acc7da61c59e81510765da1919e80/comments", "author": {"login": "bobtwinkles", "id": 1514748, "node_id": "MDQ6VXNlcjE1MTQ3NDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1514748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobtwinkles", "html_url": "https://github.com/bobtwinkles", "followers_url": "https://api.github.com/users/bobtwinkles/followers", "following_url": "https://api.github.com/users/bobtwinkles/following{/other_user}", "gists_url": "https://api.github.com/users/bobtwinkles/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobtwinkles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobtwinkles/subscriptions", "organizations_url": "https://api.github.com/users/bobtwinkles/orgs", "repos_url": "https://api.github.com/users/bobtwinkles/repos", "events_url": "https://api.github.com/users/bobtwinkles/events{/privacy}", "received_events_url": "https://api.github.com/users/bobtwinkles/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bobtwinkles", "id": 1514748, "node_id": "MDQ6VXNlcjE1MTQ3NDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1514748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobtwinkles", "html_url": "https://github.com/bobtwinkles", "followers_url": "https://api.github.com/users/bobtwinkles/followers", "following_url": "https://api.github.com/users/bobtwinkles/following{/other_user}", "gists_url": "https://api.github.com/users/bobtwinkles/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobtwinkles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobtwinkles/subscriptions", "organizations_url": "https://api.github.com/users/bobtwinkles/orgs", "repos_url": "https://api.github.com/users/bobtwinkles/repos", "events_url": "https://api.github.com/users/bobtwinkles/events{/privacy}", "received_events_url": "https://api.github.com/users/bobtwinkles/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eae1a35f554aa8149a71181354481b8b7a9b71bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/eae1a35f554aa8149a71181354481b8b7a9b71bb", "html_url": "https://github.com/rust-lang/rust/commit/eae1a35f554aa8149a71181354481b8b7a9b71bb"}], "stats": {"total": 148, "additions": 81, "deletions": 67}, "files": [{"sha": "28dc329e4fe7cd48ab8b77a906fbb49ef0e3a1c7", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8e0c3f5c462acc7da61c59e81510765da1919e80/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e0c3f5c462acc7da61c59e81510765da1919e80/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=8e0c3f5c462acc7da61c59e81510765da1919e80", "patch": "@@ -147,24 +147,24 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 join_block.unit()\n             }\n             ExprKind::Loop { condition: opt_cond_expr, body } => {\n-                // [block] --> [loop_block] ~~> [loop_block_end] -1-> [exit_block]\n-                //                  ^                  |\n-                //                  |                  0\n-                //                  |                  |\n-                //                  |                  v\n-                //           [body_block_end] <~~~ [body_block]\n+                // [block] --> [loop_block] -/eval. cond./-> [loop_block_end] -1-> [exit_block]\n+                //                  ^                               |\n+                //                  |                               0\n+                //                  |                               |\n+                //                  |                               v\n+                //           [body_block_end] <-/eval. body/-- [body_block]\n                 //\n                 // If `opt_cond_expr` is `None`, then the graph is somewhat simplified:\n                 //\n-                // [block] --> [loop_block] ~~> [loop_block_end]\n-                //               |  ^                   |\n-                //      false link  |                   |\n-                //               |  +-------------------+\n-                //               v\n-                //        [cleanup_block]\n-                //\n-                // The false link is required in case something results in\n-                // unwinding through the body.\n+                // [block]\n+                //    |\n+                //   [loop_block] -> [body_block] -/eval. body/-> [body_block_end]\n+                //    |        ^                                         |\n+                // false link  |                                         |\n+                //    |        +-----------------------------------------+\n+                //    +-> [diverge_cleanup]\n+                // The false link is required to make sure borrowck considers unwinds through the\n+                // body, even when the exact code in the body cannot unwind\n \n                 let loop_block = this.cfg.start_new_block();\n                 let exit_block = this.cfg.start_new_block();\n@@ -178,7 +178,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     move |this| {\n                         // conduct the test, if necessary\n                         let body_block;\n-                        let out_terminator;\n                         if let Some(cond_expr) = opt_cond_expr {\n                             let loop_block_end;\n                             let cond = unpack!(\n@@ -192,15 +191,14 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             // we have to do it; this overwrites any `break`-assigned value but it's\n                             // always `()` anyway\n                             this.cfg.push_assign_unit(exit_block, source_info, destination);\n-\n-                            out_terminator = TerminatorKind::Goto { target: loop_block };\n                         } else {\n-                            body_block = loop_block;\n+                            body_block = this.cfg.start_new_block();\n                             let diverge_cleanup = this.diverge_cleanup();\n-                            out_terminator = TerminatorKind::FalseUnwind {\n-                                real_target: loop_block,\n-                                unwind: Some(diverge_cleanup)\n-                            }\n+                            this.cfg.terminate(loop_block, source_info,\n+                                               TerminatorKind::FalseUnwind {\n+                                                   real_target: body_block,\n+                                                   unwind: Some(diverge_cleanup)\n+                                               })\n                         }\n \n                         // The \u201creturn\u201d value of the loop body must always be an unit. We therefore\n@@ -209,7 +207,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         // Execute the body, branching back to the test.\n                         let body_block_end = unpack!(this.into(&tmp, body_block, body));\n                         this.cfg.terminate(body_block_end, source_info,\n-                                           out_terminator);\n+                                           TerminatorKind::Goto { target: loop_block });\n                     }\n                 );\n                 exit_block.unit()"}, {"sha": "d6084d5a6da9237878cddb9d955f7d86736fbad7", "filename": "src/test/mir-opt/end_region_2.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8e0c3f5c462acc7da61c59e81510765da1919e80/src%2Ftest%2Fmir-opt%2Fend_region_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e0c3f5c462acc7da61c59e81510765da1919e80/src%2Ftest%2Fmir-opt%2Fend_region_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_2.rs?ref=8e0c3f5c462acc7da61c59e81510765da1919e80", "patch": "@@ -40,26 +40,29 @@ fn main() {\n //         goto -> bb1;\n //     }\n //     bb1: {\n+//          falseUnwind -> [real: bb2, cleanup: bb3];\n+//     }\n+//     bb2: {\n //         StorageLive(_2);\n //         _2 = const true;\n //         StorageLive(_3);\n //         _3 = &'23_1rs _2;\n //         StorageLive(_5);\n //         _5 = _2;\n-//         switchInt(move _5) -> [0u8: bb4, otherwise: bb3];\n+//         switchInt(move _5) -> [0u8: bb5, otherwise: bb4];\n //     }\n-//     bb2: {\n+//     bb3: {\n //         ...\n //     }\n-//     bb3: {\n+//     bb4: {\n //         _0 = ();\n //         StorageDead(_5);\n //         EndRegion('23_1rs);\n //         StorageDead(_3);\n //         StorageDead(_2);\n //         return;\n //     }\n-//     bb4: {\n+//     bb5: {\n //         _4 = ();\n //         StorageDead(_5);\n //         StorageLive(_7);\n@@ -70,6 +73,6 @@ fn main() {\n //         EndRegion('23_1rs);\n //         StorageDead(_3);\n //         StorageDead(_2);\n-//         falseUnwind -> [real: bb1, cleanup: bb2];\n+//         goto -> bb1;\n //     }\n // END rustc.main.SimplifyCfg-qualify-consts.after.mir"}, {"sha": "46548f1cce97868213d29f08a931a696dc33289a", "filename": "src/test/mir-opt/end_region_3.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8e0c3f5c462acc7da61c59e81510765da1919e80/src%2Ftest%2Fmir-opt%2Fend_region_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e0c3f5c462acc7da61c59e81510765da1919e80/src%2Ftest%2Fmir-opt%2Fend_region_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_3.rs?ref=8e0c3f5c462acc7da61c59e81510765da1919e80", "patch": "@@ -43,25 +43,28 @@ fn main() {\n //         goto -> bb1;\n //     }\n //     bb1: {\n+//         falseUnwind -> [real: bb2, cleanup: bb3];\n+//     }\n+//     bb2: {\n //         _1 = const true;\n //         StorageLive(_3);\n //         _3 = &'26_1rs _1;\n //         StorageLive(_5);\n //         _5 = _1;\n-//         switchInt(move _5) -> [0u8: bb4, otherwise: bb3];\n+//         switchInt(move _5) -> [0u8: bb5, otherwise: bb4];\n //     }\n-//     bb2: {\n+//     bb3: {\n //         ...\n //     }\n-//     bb3: {\n+//     bb4: {\n //         _0 = ();\n //         StorageDead(_5);\n //         EndRegion('26_1rs);\n //         StorageDead(_3);\n //         StorageDead(_1);\n //         return;\n //     }\n-//     bb4: {\n+//     bb5: {\n //         _4 = ();\n //         StorageDead(_5);\n //         StorageLive(_7);\n@@ -71,6 +74,6 @@ fn main() {\n //         StorageDead(_7);\n //         EndRegion('26_1rs);\n //         StorageDead(_3);\n-//         falseUnwind -> [real: bb1, cleanup: bb2];\n+//         goto -> bb1;\n //     }\n // END rustc.main.SimplifyCfg-qualify-consts.after.mir"}, {"sha": "0f1d714cc6fd2ec68758f34ed0edba7da810d13f", "filename": "src/test/mir-opt/end_region_9.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8e0c3f5c462acc7da61c59e81510765da1919e80/src%2Ftest%2Fmir-opt%2Fend_region_9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e0c3f5c462acc7da61c59e81510765da1919e80/src%2Ftest%2Fmir-opt%2Fend_region_9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_9.rs?ref=8e0c3f5c462acc7da61c59e81510765da1919e80", "patch": "@@ -57,18 +57,24 @@ fn main() {\n //        _1 = const false;\n //        StorageLive(_2);\n //        _2 = const 3i32;\n-//        StorageLive(_4);\n-//        goto -> bb2;\n+//        falseUnwind -> [real: bb2, cleanup: bb1];\n //    }\n //    bb1: {\n //        ...\n //    }\n //    bb2: {\n+//        StorageLive(_4);\n+//        goto -> bb3;\n+//    }\n+//    bb3: {\n+//        falseUnwind -> [real: bb4, cleanup: bb1];\n+//    }\n+//    bb4: {\n //        StorageLive(_7);\n //        _7 = _1;\n-//        switchInt(move _7) -> [0u8: bb4, otherwise: bb3];\n+//        switchInt(move _7) -> [0u8: bb6, otherwise: bb5];\n //    }\n-//    bb3: {\n+//    bb5: {\n //        _0 = ();\n //        StorageDead(_7);\n //        EndRegion('33_0rs);\n@@ -77,13 +83,13 @@ fn main() {\n //        StorageDead(_1);\n //        return;\n //    }\n-//    bb4: {\n+//    bb6: {\n //        _4 = &'33_0rs _2;\n //        _6 = ();\n //        StorageDead(_7);\n //        _1 = const true;\n //        _3 = ();\n-//        falseUnwind -> [real: bb2, cleanup: bb1];\n+//        goto -> bb3;\n //    }\n // }\n // END rustc.main.SimplifyCfg-qualify-consts.after.mir"}, {"sha": "2a82e2675b67dafe59c8e1dfb0f28631826f85dd", "filename": "src/test/mir-opt/end_region_cyclic.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8e0c3f5c462acc7da61c59e81510765da1919e80/src%2Ftest%2Fmir-opt%2Fend_region_cyclic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e0c3f5c462acc7da61c59e81510765da1919e80/src%2Ftest%2Fmir-opt%2Fend_region_cyclic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_cyclic.rs?ref=8e0c3f5c462acc7da61c59e81510765da1919e80", "patch": "@@ -67,16 +67,19 @@ fn query() -> bool { true }\n //         goto -> bb1;\n //     }\n //     bb1: {\n+//         falseUnwind -> [real: bb2, cleanup: bb3];\n+//     }\n+//     bb2: {\n //         StorageLive(_2);\n //         StorageLive(_3);\n //         StorageLive(_4);\n //         _4 = std::option::Option<&'35_0rs S<'35_0rs>>::None;\n-//         _3 = const <std::cell::Cell<T>>::new(move _4) -> [return: bb3, unwind: bb2];\n+//         _3 = const <std::cell::Cell<T>>::new(move _4) -> [return: bb4, unwind: bb3];\n //     }\n-//     bb2: {\n+//     bb3: {\n //         resume;\n //     }\n-//     bb3: {\n+//     bb4: {\n //         StorageDead(_4);\n //         _2 = S<'35_0rs> { r: move _3 };\n //         StorageDead(_3);\n@@ -89,27 +92,27 @@ fn query() -> bool { true }\n //         _8 = &'35_0rs (*_9);\n //         _7 = std::option::Option<&'35_0rs S<'35_0rs>>::Some(move _8,);\n //         StorageDead(_8);\n-//         _5 = const <std::cell::Cell<T>>::set(move _6, move _7) -> [return: bb4, unwind: bb2];\n+//         _5 = const <std::cell::Cell<T>>::set(move _6, move _7) -> [return: bb5, unwind: bb3];\n //     }\n-//     bb4: {\n+//     bb5: {\n //         EndRegion('16s);\n //         StorageDead(_7);\n //         StorageDead(_6);\n //         StorageDead(_9);\n //         StorageLive(_11);\n-//         _11 = const query() -> [return: bb5, unwind: bb2];\n-//     }\n-//     bb5: {\n-//         switchInt(move _11) -> [0u8: bb7, otherwise: bb6];\n+//         _11 = const query() -> [return: bb6, unwind: bb3];\n //     }\n //     bb6: {\n+//         switchInt(move _11) -> [0u8: bb8, otherwise: bb7];\n+//     }\n+//     bb7: {\n //         _0 = ();\n //         StorageDead(_11);\n //         EndRegion('35_0rs);\n //         StorageDead(_2);\n //         return;\n //     }\n-//     bb7: {\n+//     bb8: {\n //         _10 = ();\n //         StorageDead(_11);\n //         StorageLive(_14);\n@@ -121,17 +124,17 @@ fn query() -> bool { true }\n //         _16 = &'35_0rs (*_17);\n //         _15 = std::option::Option<&'35_0rs S<'35_0rs>>::Some(move _16,);\n //         StorageDead(_16);\n-//         _13 = const <std::cell::Cell<T>>::set(move _14, move _15) -> [return: bb8, unwind: bb2];\n+//         _13 = const <std::cell::Cell<T>>::set(move _14, move _15) -> [return: bb9, unwind: bb3];\n //     }\n-//     bb8: {\n+//     bb9: {\n //         EndRegion('33s);\n //         StorageDead(_15);\n //         StorageDead(_14);\n //         StorageDead(_17);\n //         _1 = ();\n //         EndRegion('35_0rs);\n //         StorageDead(_2);\n-//         falseUnwind -> [real: bb1, cleanup: bb2];\n+//         goto -> bb1;\n //     }\n // }\n // END rustc.main.SimplifyCfg-qualify-consts.after.mir"}, {"sha": "3151c0643079c175bc4c4744760bb201cdc63f27", "filename": "src/test/mir-opt/issue-38669.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8e0c3f5c462acc7da61c59e81510765da1919e80/src%2Ftest%2Fmir-opt%2Fissue-38669.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e0c3f5c462acc7da61c59e81510765da1919e80/src%2Ftest%2Fmir-opt%2Fissue-38669.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-38669.rs?ref=8e0c3f5c462acc7da61c59e81510765da1919e80", "patch": "@@ -27,27 +27,28 @@ fn main() {\n //         _1 = const false;\n //         goto -> bb2;\n //     }\n-//\n //     bb1: {\n //         resume;\n //     }\n //     bb2: {\n+//         falseUnwind -> [real: bb3, cleanup: bb1];\n+//     }\n+//     bb3: {\n //         StorageLive(_4);\n //         _4 = _1;\n-//         switchInt(move _4) -> [0u8: bb4, otherwise: bb3];\n+//         switchInt(move _4) -> [0u8: bb5, otherwise: bb4];\n //     }\n-//     bb3: {\n+//     bb4: {\n //         _0 = ();\n //         StorageDead(_4);\n //         StorageDead(_1);\n //         return;\n //     }\n-//\n-//     bb4: {\n+//     bb5: {\n //         _3 = ();\n //         StorageDead(_4);\n //         _1 = const true;\n //         _2 = ();\n-//         falseUnwind -> [real: bb2, cleanup: bb1];\n+//         goto -> bb2;\n //     }\n // END rustc.main.SimplifyCfg-initial.after.mir"}, {"sha": "64ffc7446062cb171b7ced9ca4e792e0e16ce304", "filename": "src/test/mir-opt/nll/liveness-drop-intra-block.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8e0c3f5c462acc7da61c59e81510765da1919e80/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-drop-intra-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e0c3f5c462acc7da61c59e81510765da1919e80/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-drop-intra-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-drop-intra-block.rs?ref=8e0c3f5c462acc7da61c59e81510765da1919e80", "patch": "@@ -25,17 +25,17 @@ fn main() {\n \n // END RUST SOURCE\n // START rustc.main.nll.0.mir\n-//    | Live variables on entry to bb2: []\n-//    bb2: {\n-//            | Live variables on entry to bb2[0]: []\n+//    | Live variables on entry to bb3: []\n+//    bb3: {\n+//            | Live variables on entry to bb3[0]: []\n //        _1 = const 55usize;\n-//            | Live variables on entry to bb2[1]: [_1]\n+//            | Live variables on entry to bb3[1]: [_1]\n //        StorageLive(_3);\n-//            | Live variables on entry to bb2[2]: [_1]\n+//            | Live variables on entry to bb3[2]: [_1]\n //        StorageLive(_4);\n-//            | Live variables on entry to bb2[3]: [_1]\n+//            | Live variables on entry to bb3[3]: [_1]\n //        _4 = _1;\n-//            | Live variables on entry to bb2[4]: [_4]\n-//        _3 = const use_x(move _4) -> [return: bb3, unwind: bb1];\n+//            | Live variables on entry to bb3[4]: [_4]\n+//        _3 = const use_x(move _4) -> [return: bb4, unwind: bb1];\n //    }\n // END rustc.main.nll.0.mir"}]}