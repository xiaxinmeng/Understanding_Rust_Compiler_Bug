{"sha": "5803f99bd4c53c3f469df26513ffa2e058094c53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MDNmOTliZDRjNTNjM2Y0NjlkZjI2NTEzZmZhMmUwNTgwOTRjNTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-17T10:58:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-17T10:58:08Z"}, "message": "Auto merge of #42033 - oli-obk:suggestions, r=petrochenkov\n\nChange some notes into suggestions\n\nr? @petrochenkov since you commented on the same edits in #39458", "tree": {"sha": "c0da5b7929cb5c5a01adf0d4369ef64c881bc012", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0da5b7929cb5c5a01adf0d4369ef64c881bc012"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5803f99bd4c53c3f469df26513ffa2e058094c53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5803f99bd4c53c3f469df26513ffa2e058094c53", "html_url": "https://github.com/rust-lang/rust/commit/5803f99bd4c53c3f469df26513ffa2e058094c53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5803f99bd4c53c3f469df26513ffa2e058094c53/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88cf76a64e1f8d68ce366d0cea340564b26631a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/88cf76a64e1f8d68ce366d0cea340564b26631a7", "html_url": "https://github.com/rust-lang/rust/commit/88cf76a64e1f8d68ce366d0cea340564b26631a7"}, {"sha": "eb7f429ea54db7111b9c1570ce08c3851727d2e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb7f429ea54db7111b9c1570ce08c3851727d2e5", "html_url": "https://github.com/rust-lang/rust/commit/eb7f429ea54db7111b9c1570ce08c3851727d2e5"}], "stats": {"total": 528, "additions": 438, "deletions": 90}, "files": [{"sha": "1bfc5805bc8fdad418988515f884257c6a7d11a2", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -991,7 +991,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             .span_suggestion(err.span,\n                              &format!(\"to force the closure to take ownership of {} \\\n                                        (and any other referenced variables), \\\n-                                       use the `move` keyword, as shown:\",\n+                                       use the `move` keyword\",\n                                        cmt_path_or_string),\n                              suggestion)\n             .emit();"}, {"sha": "ee07b6e909f7d3437daf1ff10de1c1bbee360d3e", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -211,6 +211,18 @@ impl Diagnostic {\n \n     /// Prints out a message with a suggested edit of the code.\n     ///\n+    /// In case of short messages and a simple suggestion,\n+    /// rustc displays it as a label like\n+    ///\n+    /// \"try adding parentheses: `(tup.0).1`\"\n+    ///\n+    /// The message\n+    /// * should not end in any punctuation (a `:` is added automatically)\n+    /// * should not be a question\n+    /// * should not contain any parts like \"the following\", \"as shown\"\n+    /// * may look like \"to do xyz, use\" or \"to do xyz, use abc\"\n+    /// * may contain a name of a function, variable or type, but not whole expressions\n+    ///\n     /// See `diagnostic::CodeSuggestion` for more information.\n     pub fn span_suggestion(&mut self, sp: Span, msg: &str, suggestion: String) -> &mut Self {\n         self.suggestions.push(CodeSuggestion {"}, {"sha": "3e8bd093f4f93f0a19ba063ae30d8179bb7c7c8c", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -51,7 +51,7 @@ impl Emitter for EmitterWriter {\n                     // This substitution is only removal, don't show it\n                     format!(\"help: {}\", sugg.msg)\n                 } else {\n-                    format!(\"help: {} `{}`\", sugg.msg, substitution)\n+                    format!(\"help: {}: `{}`\", sugg.msg, substitution)\n                 };\n                 primary_span.push_span_label(sugg.substitution_spans().next().unwrap(), msg);\n             } else {"}, {"sha": "49e6929aeef1d2e966cdd272b35c47922221f256", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -2409,13 +2409,15 @@ impl<'a> Resolver<'a> {\n                     .map(|suggestion| import_candidate_to_paths(&suggestion)).collect::<Vec<_>>();\n                 enum_candidates.sort();\n                 for (sp, variant_path, enum_path) in enum_candidates {\n-                    let msg = format!(\"there is an enum variant `{}`, did you mean to use `{}`?\",\n-                                      variant_path,\n-                                      enum_path);\n                     if sp == DUMMY_SP {\n+                        let msg = format!(\"there is an enum variant `{}`, \\\n+                                        try using `{}`?\",\n+                                        variant_path,\n+                                        enum_path);\n                         err.help(&msg);\n                     } else {\n-                        err.span_help(sp, &msg);\n+                        err.span_suggestion(span, \"you can try using the variant's enum\",\n+                                            enum_path);\n                     }\n                 }\n             }\n@@ -2424,18 +2426,20 @@ impl<'a> Resolver<'a> {\n                     let self_is_available = this.self_value_is_available(path[0].ctxt, span);\n                     match candidate {\n                         AssocSuggestion::Field => {\n-                            err.span_label(span, format!(\"did you mean `self.{}`?\", path_str));\n+                            err.span_suggestion(span, \"try\",\n+                                                format!(\"self.{}\", path_str));\n                             if !self_is_available {\n                                 err.span_label(span, format!(\"`self` value is only available in \\\n                                                                methods with `self` parameter\"));\n                             }\n                         }\n                         AssocSuggestion::MethodWithSelf if self_is_available => {\n-                            err.span_label(span, format!(\"did you mean `self.{}(...)`?\",\n-                                                           path_str));\n+                            err.span_suggestion(span, \"try\",\n+                                                format!(\"self.{}\", path_str));\n                         }\n                         AssocSuggestion::MethodWithSelf | AssocSuggestion::AssocItem => {\n-                            err.span_label(span, format!(\"did you mean `Self::{}`?\", path_str));\n+                            err.span_suggestion(span, \"try\",\n+                                                format!(\"Self::{}\", path_str));\n                         }\n                     }\n                     return err;"}, {"sha": "a993aca92dd1280bf9464739144601dc73b69e87", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -658,9 +658,10 @@ impl<'a> Resolver<'a> {\n         if let Some(suggestion) = suggestion {\n             if suggestion != name {\n                 if let MacroKind::Bang = kind {\n-                    err.help(&format!(\"did you mean `{}!`?\", suggestion));\n+                    err.span_suggestion(span, \"you could try the macro\",\n+                                        format!(\"{}!\", suggestion));\n                 } else {\n-                    err.help(&format!(\"did you mean `{}`?\", suggestion));\n+                    err.span_suggestion(span, \"try\", suggestion.to_string());\n                 }\n             } else {\n                 err.help(\"have you added the `#[macro_use]` on the module/import?\");"}, {"sha": "b3f62de5b570ba3e31b12d0a4cce12f676431727", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -253,7 +253,7 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n                     match fcx.tcx.sess.codemap().span_to_snippet(self.cast_span) {\n                         Ok(s) => {\n                             err.span_suggestion(self.cast_span,\n-                                                \"try casting to a reference instead:\",\n+                                                \"try casting to a reference instead\",\n                                                 format!(\"&{}{}\", mtstr, s));\n                         }\n                         Err(_) => {\n@@ -272,7 +272,7 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n                 match fcx.tcx.sess.codemap().span_to_snippet(self.cast_span) {\n                     Ok(s) => {\n                         err.span_suggestion(self.cast_span,\n-                                            \"try casting to a `Box` instead:\",\n+                                            \"try casting to a `Box` instead\",\n                                             format!(\"Box<{}>\", s));\n                     }\n                     Err(_) => span_help!(err, self.cast_span, \"did you mean `Box<{}>`?\", tstr),"}, {"sha": "032e37a34a887f7acbfa478029100309b4d4ffc3", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -320,7 +320,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                   from a string reference. String concatenation \\\n                                   appends the string on the right to the string \\\n                                   on the left and may require reallocation. This \\\n-                                  requires ownership of the string on the left.\"), suggestion);\n+                                  requires ownership of the string on the left\"), suggestion);\n                     is_string_addition = true;\n                 }\n "}, {"sha": "90d9ae383a4914adbb6dffcf24412d1a13b0636e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -1490,7 +1490,7 @@ impl<'a> Parser<'a> {\n                     s.print_bounds(\" +\", &bounds)?;\n                     s.pclose()\n                 });\n-                err.span_suggestion(sum_span, \"try adding parentheses:\", sum_with_parens);\n+                err.span_suggestion(sum_span, \"try adding parentheses\", sum_with_parens);\n             }\n             TyKind::Ptr(..) | TyKind::BareFn(..) => {\n                 err.span_label(sum_span, \"perhaps you forgot parentheses?\");\n@@ -5280,7 +5280,7 @@ impl<'a> Parser<'a> {\n `pub(in path::to::module)`: visible only on the specified path\"##;\n                 let path = self.parse_path(PathStyle::Mod)?;\n                 let path_span = self.prev_span;\n-                let help_msg = format!(\"make this visible only to module `{}` with `in`:\", path);\n+                let help_msg = format!(\"make this visible only to module `{}` with `in`\", path);\n                 self.expect(&token::CloseDelim(token::Paren))?;  // `)`\n                 let mut err = self.span_fatal_help(path_span, msg, suggestion);\n                 err.span_suggestion(path_span, &help_msg, format!(\"in {}\", path));"}, {"sha": "c09e56cbc5bcaeeaf15e7238b45e82bc8cd55e33", "filename": "src/test/compile-fail/issue-35675.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fcompile-fail%2Fissue-35675.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fcompile-fail%2Fissue-35675.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-35675.rs?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -12,21 +12,21 @@\n enum Fruit { //~ HELP possible candidate is found in another module, you can import it into scope\n     //~^ HELP possible candidate is found in another module, you can import it into scope\n     Apple(i64),\n-    //~^ HELP there is an enum variant `Fruit::Apple`, did you mean to use `Fruit`?\n-    //~| HELP there is an enum variant `Fruit::Apple`, did you mean to use `Fruit`?\n     Orange(i64),\n }\n \n fn should_return_fruit() -> Apple {\n     //~^ ERROR cannot find type `Apple` in this scope\n     //~| NOTE not found in this scope\n+    //~| HELP you can try using the variant's enum\n     Apple(5)\n     //~^ ERROR cannot find function `Apple` in this scope\n     //~| NOTE not found in this scope\n }\n \n fn should_return_fruit_too() -> Fruit::Apple {\n     //~^ ERROR expected type, found variant `Fruit::Apple`\n+    //~| HELP you can try using the variant's enum\n     //~| NOTE not a type\n     Apple(5)\n     //~^ ERROR cannot find function `Apple` in this scope\n@@ -43,6 +43,7 @@ fn foo() -> Ok {\n \n fn bar() -> Variant3 {\n     //~^ ERROR cannot find type `Variant3` in this scope\n+    //~| HELP you can try using the variant's enum\n     //~| NOTE not found in this scope\n }\n \n@@ -61,7 +62,6 @@ mod x {\n         Variant1,\n         Variant2(),\n         Variant3(usize),\n-        //~^ HELP there is an enum variant `x::Enum::Variant3`, did you mean to use `x::Enum`?\n         Variant4 {},\n     }\n }"}, {"sha": "db0c19e96f8211a2996bb6df3e21b8e21b52e0db", "filename": "src/test/ui-fulldeps/auxiliary/attr_proc_macro.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fattr_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fattr_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fattr_proc_macro.rs?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// force-host\n+// no-prefer-dynamic\n+#![feature(proc_macro)]\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_attribute]\n+pub fn attr_proc_macro(_: TokenStream, input: TokenStream) -> TokenStream {\n+    input\n+}"}, {"sha": "89ac11b309d751bc13d46f10996895ff8abe75da", "filename": "src/test/ui-fulldeps/auxiliary/bang_proc_macro.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fbang_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fbang_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fbang_proc_macro.rs?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// force-host\n+// no-prefer-dynamic\n+#![feature(proc_macro)]\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro]\n+pub fn bang_proc_macro(input: TokenStream) -> TokenStream {\n+    input\n+}"}, {"sha": "719fbdb15ef2a7f852a2f9056d7661ea12ade038", "filename": "src/test/ui-fulldeps/auxiliary/derive-clona.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fderive-clona.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fderive-clona.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fderive-clona.rs?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_derive(Clona)]\n+pub fn derive_clonea(input: TokenStream) -> TokenStream {\n+    \"\".parse().unwrap()\n+}"}, {"sha": "64dcf72ba2029b5165dbf06c32f669c2783ba024", "filename": "src/test/ui-fulldeps/auxiliary/derive-foo.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fderive-foo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fderive-foo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fderive-foo.rs?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_derive(FooWithLongName)]\n+pub fn derive_foo(input: TokenStream) -> TokenStream {\n+    \"\".parse().unwrap()\n+}"}, {"sha": "dfaa1d7a32e5779ece83982958a052d5475a4c9c", "filename": "src/test/ui-fulldeps/resolve-error.rs", "status": "renamed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui-fulldeps%2Fresolve-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui-fulldeps%2Fresolve-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fresolve-error.rs?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -35,46 +35,29 @@ macro_rules! attr_proc_mac {\n }\n \n #[derive(FooWithLongNan)]\n-//~^ ERROR cannot find derive macro `FooWithLongNan` in this scope\n-//~^^ HELP did you mean `FooWithLongName`?\n struct Foo;\n \n #[attr_proc_macra]\n-//~^ ERROR cannot find attribute macro `attr_proc_macra` in this scope\n-//~^^ HELP did you mean `attr_proc_macro`?\n struct Bar;\n \n #[FooWithLongNan]\n-//~^ ERROR cannot find attribute macro `FooWithLongNan` in this scope\n struct Asdf;\n \n #[derive(Dlone)]\n-//~^ ERROR cannot find derive macro `Dlone` in this scope\n-//~^^ HELP did you mean `Clone`?\n struct A;\n \n #[derive(Dlona)]\n-//~^ ERROR cannot find derive macro `Dlona` in this scope\n-//~^^ HELP did you mean `Clona`?\n struct B;\n \n #[derive(attr_proc_macra)]\n-//~^ ERROR cannot find derive macro `attr_proc_macra` in this scope\n struct C;\n \n fn main() {\n     FooWithLongNama!();\n-    //~^ ERROR cannot find macro `FooWithLongNama!` in this scope\n-    //~^^ HELP did you mean `FooWithLongNam!`?\n \n     attr_proc_macra!();\n-    //~^ ERROR cannot find macro `attr_proc_macra!` in this scope\n-    //~^^ HELP did you mean `attr_proc_mac!`?\n \n     Dlona!();\n-    //~^ ERROR cannot find macro `Dlona!` in this scope\n \n     bang_proc_macrp!();\n-    //~^ ERROR cannot find macro `bang_proc_macrp!` in this scope\n-    //~^^ HELP did you mean `bang_proc_macro!`?\n }", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/resolve-error.rs"}, {"sha": "754f6bc4f1c1c0ef7c3c0eb46ec30c663fcf763f", "filename": "src/test/ui-fulldeps/resolve-error.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui-fulldeps%2Fresolve-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui-fulldeps%2Fresolve-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fresolve-error.stderr?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -0,0 +1,62 @@\n+error: cannot find derive macro `FooWithLongNan` in this scope\n+  --> $DIR/resolve-error.rs:37:10\n+   |\n+37 | #[derive(FooWithLongNan)]\n+   |          ^^^^^^^^^^^^^^ help: try: `FooWithLongName`\n+\n+error: cannot find attribute macro `attr_proc_macra` in this scope\n+  --> $DIR/resolve-error.rs:40:3\n+   |\n+40 | #[attr_proc_macra]\n+   |   ^^^^^^^^^^^^^^^ help: try: `attr_proc_macro`\n+\n+error: cannot find attribute macro `FooWithLongNan` in this scope\n+  --> $DIR/resolve-error.rs:43:3\n+   |\n+43 | #[FooWithLongNan]\n+   |   ^^^^^^^^^^^^^^\n+\n+error: cannot find derive macro `Dlone` in this scope\n+  --> $DIR/resolve-error.rs:46:10\n+   |\n+46 | #[derive(Dlone)]\n+   |          ^^^^^ help: try: `Clone`\n+\n+error: cannot find derive macro `Dlona` in this scope\n+  --> $DIR/resolve-error.rs:49:10\n+   |\n+49 | #[derive(Dlona)]\n+   |          ^^^^^ help: try: `Clona`\n+\n+error: cannot find derive macro `attr_proc_macra` in this scope\n+  --> $DIR/resolve-error.rs:52:10\n+   |\n+52 | #[derive(attr_proc_macra)]\n+   |          ^^^^^^^^^^^^^^^\n+\n+error: cannot find macro `FooWithLongNama!` in this scope\n+  --> $DIR/resolve-error.rs:56:5\n+   |\n+56 |     FooWithLongNama!();\n+   |     ^^^^^^^^^^^^^^^ help: you could try the macro: `FooWithLongNam!`\n+\n+error: cannot find macro `attr_proc_macra!` in this scope\n+  --> $DIR/resolve-error.rs:58:5\n+   |\n+58 |     attr_proc_macra!();\n+   |     ^^^^^^^^^^^^^^^ help: you could try the macro: `attr_proc_mac!`\n+\n+error: cannot find macro `Dlona!` in this scope\n+  --> $DIR/resolve-error.rs:60:5\n+   |\n+60 |     Dlona!();\n+   |     ^^^^^\n+\n+error: cannot find macro `bang_proc_macrp!` in this scope\n+  --> $DIR/resolve-error.rs:62:5\n+   |\n+62 |     bang_proc_macrp!();\n+   |     ^^^^^^^^^^^^^^^ help: you could try the macro: `bang_proc_macro!`\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "c79345479827537127380be2c0f0a22e8e24d9c3", "filename": "src/test/ui/cast-to-unsized-trait-object-suggestion.rs", "status": "renamed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fcast-to-unsized-trait-object-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fcast-to-unsized-trait-object-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast-to-unsized-trait-object-suggestion.rs?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -10,11 +10,5 @@\n \n fn main() {\n     &1 as Send;\n-    //~^ ERROR cast to unsized type\n-    //~| HELP try casting to a reference instead:\n-    //~| SUGGESTION &1 as &Send;\n     Box::new(1) as Send;\n-    //~^ ERROR cast to unsized type\n-    //~| HELP try casting to a `Box` instead:\n-    //~| SUGGESTION Box::new(1) as Box<Send>;\n }", "previous_filename": "src/test/compile-fail/cast-to-unsized-trait-object-suggestion.rs"}, {"sha": "4d4eb7b4ecfdbe680747d1b09c0e943807f6d0fc", "filename": "src/test/ui/cast-to-unsized-trait-object-suggestion.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fcast-to-unsized-trait-object-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fcast-to-unsized-trait-object-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast-to-unsized-trait-object-suggestion.stderr?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -0,0 +1,18 @@\n+error[E0620]: cast to unsized type: `&{integer}` as `std::marker::Send`\n+  --> $DIR/cast-to-unsized-trait-object-suggestion.rs:12:5\n+   |\n+12 |     &1 as Send;\n+   |     ^^^^^^----\n+   |           |\n+   |           help: try casting to a reference instead: `&Send`\n+\n+error[E0620]: cast to unsized type: `std::boxed::Box<{integer}>` as `std::marker::Send`\n+  --> $DIR/cast-to-unsized-trait-object-suggestion.rs:13:5\n+   |\n+13 |     Box::new(1) as Send;\n+   |     ^^^^^^^^^^^^^^^----\n+   |                    |\n+   |                    help: try casting to a `Box` instead: `Box<Send>`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "391e1f2db5c021d293c5cb77578020abc4066e86", "filename": "src/test/ui/issue-35675.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fissue-35675.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fissue-35675.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-35675.rs?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// these two HELPs are actually in a new line between this line and the `enum Fruit` line\n+enum Fruit { //~ HELP possible candidate is found in another module, you can import it into scope\n+    //~^ HELP possible candidate is found in another module, you can import it into scope\n+    Apple(i64),\n+    //~^ HELP there is an enum variant `Fruit::Apple`, did you mean to use `Fruit`?\n+    //~| HELP there is an enum variant `Fruit::Apple`, did you mean to use `Fruit`?\n+    Orange(i64),\n+}\n+\n+fn should_return_fruit() -> Apple {\n+    //~^ ERROR cannot find type `Apple` in this scope\n+    //~| NOTE not found in this scope\n+    Apple(5)\n+    //~^ ERROR cannot find function `Apple` in this scope\n+    //~| NOTE not found in this scope\n+}\n+\n+fn should_return_fruit_too() -> Fruit::Apple {\n+    //~^ ERROR expected type, found variant `Fruit::Apple`\n+    //~| NOTE not a type\n+    Apple(5)\n+    //~^ ERROR cannot find function `Apple` in this scope\n+    //~| NOTE not found in this scope\n+}\n+\n+fn bar() -> Variant3 {\n+    //~^ ERROR cannot find type `Variant3` in this scope\n+    //~| NOTE not found in this scope\n+}\n+\n+fn main() {}\n+\n+mod x {\n+    enum Enum {\n+        Variant1,\n+        Variant2(),\n+        Variant3(usize),\n+        //~^ HELP there is an enum variant `x::Enum::Variant3`, did you mean to use `x::Enum`?\n+        Variant4 {},\n+    }\n+}"}, {"sha": "c2c10724646efdbb9de0a4702f6848e7c54c9b76", "filename": "src/test/ui/issue-35675.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fissue-35675.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fissue-35675.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-35675.stderr?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -0,0 +1,51 @@\n+error[E0412]: cannot find type `Apple` in this scope\n+  --> $DIR/issue-35675.rs:20:29\n+   |\n+20 | fn should_return_fruit() -> Apple {\n+   |                             ^^^^^\n+   |                             |\n+   |                             not found in this scope\n+   |                             help: you can try using the variant's enum: `Fruit`\n+\n+error[E0425]: cannot find function `Apple` in this scope\n+  --> $DIR/issue-35675.rs:23:5\n+   |\n+23 |     Apple(5)\n+   |     ^^^^^ not found in this scope\n+   |\n+help: possible candidate is found in another module, you can import it into scope\n+   |\n+12 | use Fruit::Apple;\n+   |\n+\n+error[E0573]: expected type, found variant `Fruit::Apple`\n+  --> $DIR/issue-35675.rs:28:33\n+   |\n+28 | fn should_return_fruit_too() -> Fruit::Apple {\n+   |                                 ^^^^^^^^^^^^\n+   |                                 |\n+   |                                 not a type\n+   |                                 help: you can try using the variant's enum: `Fruit`\n+\n+error[E0425]: cannot find function `Apple` in this scope\n+  --> $DIR/issue-35675.rs:31:5\n+   |\n+31 |     Apple(5)\n+   |     ^^^^^ not found in this scope\n+   |\n+help: possible candidate is found in another module, you can import it into scope\n+   |\n+12 | use Fruit::Apple;\n+   |\n+\n+error[E0412]: cannot find type `Variant3` in this scope\n+  --> $DIR/issue-35675.rs:36:13\n+   |\n+36 | fn bar() -> Variant3 {\n+   |             ^^^^^^^^\n+   |             |\n+   |             not found in this scope\n+   |             help: you can try using the variant's enum: `x::Enum`\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "26f150811b7db29b9c56a9d4c7f46f35a10abf48", "filename": "src/test/ui/issue-40402-ref-hints/issue-40402-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-1.stderr?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -4,7 +4,7 @@ error[E0507]: cannot move out of indexed content\n 19 |     let e = f.v[0];\n    |             ^^^^^^\n    |             |\n-   |             help: consider using a reference instead `&f.v[0]`\n+   |             help: consider using a reference instead: `&f.v[0]`\n    |             cannot move out of indexed content\n \n error: aborting due to previous error"}, {"sha": "ec8d27f9138f7dcfccf8c580cc7d85f93a0f45f3", "filename": "src/test/ui/macros/macro-name-typo.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fmacros%2Fmacro-name-typo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fmacros%2Fmacro-name-typo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-name-typo.rs?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -10,6 +10,4 @@\n \n fn main() {\n     printlx!(\"oh noes!\");\n-    //~^ ERROR cannot find macro\n-    //~^^ HELP did you mean `println!`?\n }", "previous_filename": "src/test/compile-fail/macro-name-typo.rs"}, {"sha": "7c83250fe8ada41bbadbd2877fa0a056d178f0bb", "filename": "src/test/ui/macros/macro-name-typo.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fmacros%2Fmacro-name-typo.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fmacros%2Fmacro-name-typo.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-name-typo.stderr?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -0,0 +1,8 @@\n+error: cannot find macro `printlx!` in this scope\n+  --> $DIR/macro-name-typo.rs:12:5\n+   |\n+12 |     printlx!(\"oh noes!\");\n+   |     ^^^^^^^ help: you could try the macro: `println!`\n+\n+error: aborting due to previous error\n+"}, {"sha": "db93ba5e2c41dd3f2e3a304c1837230b885622a1", "filename": "src/test/ui/macros/macro_undefined.rs", "status": "renamed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fmacros%2Fmacro_undefined.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fmacros%2Fmacro_undefined.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro_undefined.rs?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -19,9 +19,5 @@ mod m {\n \n fn main() {\n     k!();\n-    //~^ ERROR cannot find macro `k!` in this scope\n-    //~^^ HELP did you mean `kl!`?\n     kl!();\n-    //~^ ERROR cannot find macro `kl!` in this scope\n-    //~^^ HELP have you added the `#[macro_use]` on the module/import?\n }", "previous_filename": "src/test/compile-fail/macro_undefined.rs"}, {"sha": "5c33ae99734e827ada9d56ac7e18a173ae597812", "filename": "src/test/ui/macros/macro_undefined.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fmacros%2Fmacro_undefined.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fmacros%2Fmacro_undefined.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro_undefined.stderr?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -0,0 +1,16 @@\n+error: cannot find macro `kl!` in this scope\n+  --> $DIR/macro_undefined.rs:22:5\n+   |\n+22 |     kl!();\n+   |     ^^\n+   |\n+   = help: have you added the `#[macro_use]` on the module/import?\n+\n+error: cannot find macro `k!` in this scope\n+  --> $DIR/macro_undefined.rs:21:5\n+   |\n+21 |     k!();\n+   |     ^ help: you could try the macro: `kl!`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "2d8d557d9f35f78dc116753b06a5524f9d7563cb", "filename": "src/test/ui/mismatched_types/issue-19109.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.stderr?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-19109.rs:14:5\n    |\n 13 | fn function(t: &mut Trait) {\n-   |                            - help: possibly return type missing here? `-> *mut Trait `\n+   |                            - help: possibly return type missing here?: `-> *mut Trait `\n 14 |     t as *mut Trait\n    |     ^^^^^^^^^^^^^^^ expected (), found *-ptr\n    |"}, {"sha": "27f93939246c0abb95246b9174cfb9022f68b318", "filename": "src/test/ui/resolve-error.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fresolve-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fresolve-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve-error.stderr?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -0,0 +1,62 @@\n+error: cannot find derive macro `FooWithLongNan` in this scope\n+  --> $DIR/resolve-error.rs:37:10\n+   |\n+37 | #[derive(FooWithLongNan)]\n+   |          ^^^^^^^^^^^^^^ help: try: `FooWithLongName`\n+\n+error: cannot find attribute macro `attr_proc_macra` in this scope\n+  --> $DIR/resolve-error.rs:40:3\n+   |\n+40 | #[attr_proc_macra]\n+   |   ^^^^^^^^^^^^^^^ help: try: `attr_proc_macro`\n+\n+error: cannot find attribute macro `FooWithLongNan` in this scope\n+  --> $DIR/resolve-error.rs:43:3\n+   |\n+43 | #[FooWithLongNan]\n+   |   ^^^^^^^^^^^^^^\n+\n+error: cannot find derive macro `Dlone` in this scope\n+  --> $DIR/resolve-error.rs:46:10\n+   |\n+46 | #[derive(Dlone)]\n+   |          ^^^^^ help: try: `Clone`\n+\n+error: cannot find derive macro `Dlona` in this scope\n+  --> $DIR/resolve-error.rs:49:10\n+   |\n+49 | #[derive(Dlona)]\n+   |          ^^^^^ help: try: `Clona`\n+\n+error: cannot find derive macro `attr_proc_macra` in this scope\n+  --> $DIR/resolve-error.rs:52:10\n+   |\n+52 | #[derive(attr_proc_macra)]\n+   |          ^^^^^^^^^^^^^^^\n+\n+error: cannot find macro `FooWithLongNama!` in this scope\n+  --> $DIR/resolve-error.rs:56:5\n+   |\n+56 |     FooWithLongNama!();\n+   |     ^^^^^^^^^^^^^^^ help: you could try the macro: `FooWithLongNam!`\n+\n+error: cannot find macro `attr_proc_macra!` in this scope\n+  --> $DIR/resolve-error.rs:58:5\n+   |\n+58 |     attr_proc_macra!();\n+   |     ^^^^^^^^^^^^^^^ help: you could try the macro: `attr_proc_mac!`\n+\n+error: cannot find macro `Dlona!` in this scope\n+  --> $DIR/resolve-error.rs:60:5\n+   |\n+60 |     Dlona!();\n+   |     ^^^^^\n+\n+error: cannot find macro `bang_proc_macrp!` in this scope\n+  --> $DIR/resolve-error.rs:62:5\n+   |\n+62 |     bang_proc_macrp!();\n+   |     ^^^^^^^^^^^^^^^ help: you could try the macro: `bang_proc_macro!`\n+\n+error: aborting due to previous error(s)\n+"}, {"sha": "7aa0c2707b56fb1b9393901f10b0ee583b089d8c", "filename": "src/test/ui/resolve/issue-14254.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.stderr?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -2,7 +2,7 @@ error[E0425]: cannot find function `baz` in this scope\n   --> $DIR/issue-14254.rs:29:9\n    |\n 29 |         baz();\n-   |         ^^^ did you mean `self.baz(...)`?\n+   |         ^^^ help: try: `self.baz`\n \n error[E0425]: cannot find value `a` in this scope\n   --> $DIR/issue-14254.rs:32:9\n@@ -14,19 +14,19 @@ error[E0425]: cannot find function `baz` in this scope\n   --> $DIR/issue-14254.rs:40:9\n    |\n 40 |         baz();\n-   |         ^^^ did you mean `self.baz(...)`?\n+   |         ^^^ help: try: `self.baz`\n \n error[E0425]: cannot find value `x` in this scope\n   --> $DIR/issue-14254.rs:43:9\n    |\n 43 |         x;\n-   |         ^ did you mean `self.x`?\n+   |         ^ help: try: `self.x`\n \n error[E0425]: cannot find value `y` in this scope\n   --> $DIR/issue-14254.rs:46:9\n    |\n 46 |         y;\n-   |         ^ did you mean `self.y`?\n+   |         ^ help: try: `self.y`\n \n error[E0425]: cannot find value `a` in this scope\n   --> $DIR/issue-14254.rs:49:9\n@@ -38,7 +38,7 @@ error[E0425]: cannot find value `bah` in this scope\n   --> $DIR/issue-14254.rs:52:9\n    |\n 52 |         bah;\n-   |         ^^^ did you mean `Self::bah`?\n+   |         ^^^ help: try: `Self::bah`\n \n error[E0425]: cannot find value `b` in this scope\n   --> $DIR/issue-14254.rs:55:9\n@@ -50,19 +50,19 @@ error[E0425]: cannot find function `baz` in this scope\n   --> $DIR/issue-14254.rs:63:9\n    |\n 63 |         baz();\n-   |         ^^^ did you mean `self.baz(...)`?\n+   |         ^^^ help: try: `self.baz`\n \n error[E0425]: cannot find value `x` in this scope\n   --> $DIR/issue-14254.rs:66:9\n    |\n 66 |         x;\n-   |         ^ did you mean `self.x`?\n+   |         ^ help: try: `self.x`\n \n error[E0425]: cannot find value `y` in this scope\n   --> $DIR/issue-14254.rs:69:9\n    |\n 69 |         y;\n-   |         ^ did you mean `self.y`?\n+   |         ^ help: try: `self.y`\n \n error[E0425]: cannot find value `a` in this scope\n   --> $DIR/issue-14254.rs:72:9\n@@ -74,7 +74,7 @@ error[E0425]: cannot find value `bah` in this scope\n   --> $DIR/issue-14254.rs:75:9\n    |\n 75 |         bah;\n-   |         ^^^ did you mean `Self::bah`?\n+   |         ^^^ help: try: `Self::bah`\n \n error[E0425]: cannot find value `b` in this scope\n   --> $DIR/issue-14254.rs:78:9\n@@ -86,61 +86,61 @@ error[E0425]: cannot find function `baz` in this scope\n   --> $DIR/issue-14254.rs:86:9\n    |\n 86 |         baz();\n-   |         ^^^ did you mean `self.baz(...)`?\n+   |         ^^^ help: try: `self.baz`\n \n error[E0425]: cannot find value `bah` in this scope\n   --> $DIR/issue-14254.rs:89:9\n    |\n 89 |         bah;\n-   |         ^^^ did you mean `Self::bah`?\n+   |         ^^^ help: try: `Self::bah`\n \n error[E0425]: cannot find function `baz` in this scope\n   --> $DIR/issue-14254.rs:97:9\n    |\n 97 |         baz();\n-   |         ^^^ did you mean `self.baz(...)`?\n+   |         ^^^ help: try: `self.baz`\n \n error[E0425]: cannot find value `bah` in this scope\n    --> $DIR/issue-14254.rs:100:9\n     |\n 100 |         bah;\n-    |         ^^^ did you mean `Self::bah`?\n+    |         ^^^ help: try: `Self::bah`\n \n error[E0425]: cannot find function `baz` in this scope\n    --> $DIR/issue-14254.rs:108:9\n     |\n 108 |         baz();\n-    |         ^^^ did you mean `self.baz(...)`?\n+    |         ^^^ help: try: `self.baz`\n \n error[E0425]: cannot find value `bah` in this scope\n    --> $DIR/issue-14254.rs:111:9\n     |\n 111 |         bah;\n-    |         ^^^ did you mean `Self::bah`?\n+    |         ^^^ help: try: `Self::bah`\n \n error[E0425]: cannot find function `baz` in this scope\n    --> $DIR/issue-14254.rs:119:9\n     |\n 119 |         baz();\n-    |         ^^^ did you mean `self.baz(...)`?\n+    |         ^^^ help: try: `self.baz`\n \n error[E0425]: cannot find value `bah` in this scope\n    --> $DIR/issue-14254.rs:122:9\n     |\n 122 |         bah;\n-    |         ^^^ did you mean `Self::bah`?\n+    |         ^^^ help: try: `Self::bah`\n \n error[E0425]: cannot find function `baz` in this scope\n    --> $DIR/issue-14254.rs:130:9\n     |\n 130 |         baz();\n-    |         ^^^ did you mean `self.baz(...)`?\n+    |         ^^^ help: try: `self.baz`\n \n error[E0425]: cannot find value `bah` in this scope\n    --> $DIR/issue-14254.rs:133:9\n     |\n 133 |         bah;\n-    |         ^^^ did you mean `Self::bah`?\n+    |         ^^^ help: try: `Self::bah`\n \n error[E0601]: main function not found\n "}, {"sha": "9c683f4418972918b47e6e936dd02ce43c5b89a9", "filename": "src/test/ui/resolve/issue-2356.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -8,28 +8,28 @@ error[E0425]: cannot find function `clone` in this scope\n   --> $DIR/issue-2356.rs:35:5\n    |\n 35 |     clone();\n-   |     ^^^^^ did you mean `self.clone(...)`?\n+   |     ^^^^^ help: try: `self.clone`\n \n error[E0425]: cannot find function `default` in this scope\n   --> $DIR/issue-2356.rs:43:5\n    |\n 43 |     default();\n-   |     ^^^^^^^ did you mean `Self::default`?\n+   |     ^^^^^^^ help: try: `Self::default`\n \n error[E0425]: cannot find value `whiskers` in this scope\n   --> $DIR/issue-2356.rs:52:5\n    |\n 52 |     whiskers -= other;\n    |     ^^^^^^^^\n    |     |\n-   |     did you mean `self.whiskers`?\n+   |     help: try: `self.whiskers`\n    |     `self` value is only available in methods with `self` parameter\n \n error[E0425]: cannot find function `shave` in this scope\n   --> $DIR/issue-2356.rs:57:5\n    |\n 57 |     shave(4);\n-   |     ^^^^^ did you mean `Self::shave`?\n+   |     ^^^^^ help: try: `Self::shave`\n \n error[E0425]: cannot find function `purr` in this scope\n   --> $DIR/issue-2356.rs:60:5\n@@ -83,15 +83,15 @@ error[E0425]: cannot find value `whiskers` in this scope\n    --> $DIR/issue-2356.rs:104:5\n     |\n 104 |     whiskers = 0;\n-    |     ^^^^^^^^ did you mean `self.whiskers`?\n+    |     ^^^^^^^^ help: try: `self.whiskers`\n \n error[E0425]: cannot find value `whiskers` in this scope\n    --> $DIR/issue-2356.rs:110:5\n     |\n 110 |     whiskers = 4;\n     |     ^^^^^^^^\n     |     |\n-    |     did you mean `self.whiskers`?\n+    |     help: try: `self.whiskers`\n     |     `self` value is only available in methods with `self` parameter\n \n error[E0425]: cannot find function `purr_louder` in this scope"}, {"sha": "77aa545e2ad6b4f1611c25725d2be61451dab2ee", "filename": "src/test/ui/resolve/resolve-assoc-suggestions.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fresolve%2Fresolve-assoc-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fresolve%2Fresolve-assoc-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-assoc-suggestions.stderr?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -14,13 +14,13 @@ error[E0425]: cannot find value `field` in this scope\n   --> $DIR/resolve-assoc-suggestions.rs:32:9\n    |\n 32 |         field;\n-   |         ^^^^^ did you mean `self.field`?\n+   |         ^^^^^ help: try: `self.field`\n \n error[E0412]: cannot find type `Type` in this scope\n   --> $DIR/resolve-assoc-suggestions.rs:36:16\n    |\n 36 |         let _: Type;\n-   |                ^^^^ did you mean `Self::Type`?\n+   |                ^^^^ help: try: `Self::Type`\n \n error[E0531]: cannot find tuple struct/variant `Type` in this scope\n   --> $DIR/resolve-assoc-suggestions.rs:39:13\n@@ -50,7 +50,7 @@ error[E0425]: cannot find value `method` in this scope\n   --> $DIR/resolve-assoc-suggestions.rs:52:9\n    |\n 52 |         method;\n-   |         ^^^^^^ did you mean `self.method(...)`?\n+   |         ^^^^^^ help: try: `self.method`\n \n error: aborting due to 9 previous errors\n "}, {"sha": "3e1b075679a50feedb8415b0bb4dd62a7f3356c0", "filename": "src/test/ui/resolve/resolve-speculative-adjustment.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fresolve%2Fresolve-speculative-adjustment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fresolve%2Fresolve-speculative-adjustment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-speculative-adjustment.stderr?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -14,13 +14,13 @@ error[E0425]: cannot find value `field` in this scope\n   --> $DIR/resolve-speculative-adjustment.rs:35:9\n    |\n 35 |         field;\n-   |         ^^^^^ did you mean `self.field`?\n+   |         ^^^^^ help: try: `self.field`\n \n error[E0425]: cannot find function `method` in this scope\n   --> $DIR/resolve-speculative-adjustment.rs:38:9\n    |\n 38 |         method();\n-   |         ^^^^^^ did you mean `self.method(...)`?\n+   |         ^^^^^^ help: try: `self.method`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "2e8cc40dc5175dd73b38d09c9b55ca9b90dc866f", "filename": "src/test/ui/resolve/token-error-correct-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -35,7 +35,7 @@ error[E0308]: mismatched types\n   --> $DIR/token-error-correct-3.rs:25:13\n    |\n 25 |             fs::create_dir_all(path.as_ref()).map(|()| true) //~ ERROR: mismatched types\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: did you mean to add a semicolon here? `;`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: did you mean to add a semicolon here?: `;`\n    |             |\n    |             expected (), found enum `std::result::Result`\n    |"}, {"sha": "e598851e3628ea0201df2a8251d6aec3eb189c8f", "filename": "src/test/ui/resolve/unresolved_static_type_field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fresolve%2Funresolved_static_type_field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fresolve%2Funresolved_static_type_field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Funresolved_static_type_field.stderr?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -4,7 +4,7 @@ error[E0425]: cannot find value `cx` in this scope\n 19 |         f(cx);\n    |           ^^\n    |           |\n-   |           did you mean `self.cx`?\n+   |           help: try: `self.cx`\n    |           `self` value is only available in methods with `self` parameter\n \n error: aborting due to previous error"}, {"sha": "d87fc122d8ee2edda68ecdcf2bf6ad34b8f63e08", "filename": "src/test/ui/span/issue-39018.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -4,7 +4,7 @@ error[E0369]: binary operation `+` cannot be applied to type `&'static str`\n 12 |     let x = \"Hello \" + \"World!\";\n    |             ^^^^^^^^^^^^^^^^^^^ `+` can't be used to concatenate two `&str` strings\n    |\n-help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left.\n+help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n 12 |     let x = \"Hello \".to_owned() + \"World!\";\n    |             ^^^^^^^^^^^^^^^^^^^"}, {"sha": "c67a8fe32b9ddd8faed450a7e570a13d1d4471ad", "filename": "src/test/ui/span/suggestion-non-ascii.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fspan%2Fsuggestion-non-ascii.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fspan%2Fsuggestion-non-ascii.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsuggestion-non-ascii.stderr?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -2,7 +2,7 @@ error[E0608]: cannot index into a value of type `({integer},)`\n   --> $DIR/suggestion-non-ascii.rs:14:21\n    |\n 14 |     println!(\"\u2603{}\", tup[0]);\n-   |                     ^^^^^^ help: to access tuple elements, use `tup.0`\n+   |                     ^^^^^^ help: to access tuple elements, use: `tup.0`\n \n error: aborting due to previous error\n "}, {"sha": "4b1be26c86b0e7c1c434286790f56083a4527cfd", "filename": "src/test/ui/suggestions/tuple-float-index.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fsuggestions%2Ftuple-float-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Fsuggestions%2Ftuple-float-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftuple-float-index.stderr?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -5,7 +5,7 @@ error: unexpected token: `1.1`\n    |     ------------^^^\n    |     |           |\n    |     |           unexpected token\n-   |     help: try parenthesizing the first index `((1, (2, 3)).1).1`\n+   |     help: try parenthesizing the first index: `((1, (2, 3)).1).1`\n \n error: aborting due to previous error\n "}, {"sha": "b740a1b776f752834a0d2096280aa4cdab2292b8", "filename": "src/test/ui/type-check/assignment-in-if.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Ftype-check%2Fassignment-in-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5803f99bd4c53c3f469df26513ffa2e058094c53/src%2Ftest%2Fui%2Ftype-check%2Fassignment-in-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check%2Fassignment-in-if.stderr?ref=5803f99bd4c53c3f469df26513ffa2e058094c53", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n 25 |     if x = x {\n    |        ^^^^^\n    |        |\n-   |        help: did you mean to compare equality? `x == x`\n+   |        help: did you mean to compare equality?: `x == x`\n    |        expected bool, found ()\n    |\n    = note: expected type `bool`\n@@ -16,7 +16,7 @@ error[E0308]: mismatched types\n 31 |     if (x = x) {\n    |        ^^^^^^^\n    |        |\n-   |        help: did you mean to compare equality? `x == x`\n+   |        help: did you mean to compare equality?: `x == x`\n    |        expected bool, found ()\n    |\n    = note: expected type `bool`\n@@ -28,7 +28,7 @@ error[E0308]: mismatched types\n 37 |     if y = (Foo { foo: x }) {\n    |        ^^^^^^^^^^^^^^^^^^^^\n    |        |\n-   |        help: did you mean to compare equality? `y == (Foo { foo: x })`\n+   |        help: did you mean to compare equality?: `y == (Foo { foo: x })`\n    |        expected bool, found ()\n    |\n    = note: expected type `bool`\n@@ -40,7 +40,7 @@ error[E0308]: mismatched types\n 43 |     if 3 = x {\n    |        ^^^^^\n    |        |\n-   |        help: did you mean to compare equality? `3 == x`\n+   |        help: did you mean to compare equality?: `3 == x`\n    |        expected bool, found ()\n    |\n    = note: expected type `bool`"}]}