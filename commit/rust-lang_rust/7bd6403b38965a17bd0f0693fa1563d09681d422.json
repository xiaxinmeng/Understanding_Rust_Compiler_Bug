{"sha": "7bd6403b38965a17bd0f0693fa1563d09681d422", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZDY0MDNiMzg5NjVhMTdiZDBmMDY5M2ZhMTU2M2QwOTY4MWQ0MjI=", "commit": {"author": {"name": "Waffle", "email": "waffle.lapkin@gmail.com", "date": "2020-10-15T22:11:39Z"}, "committer": {"name": "Waffle", "email": "waffle.lapkin@gmail.com", "date": "2020-10-15T22:11:39Z"}, "message": "fill in the tracking issue", "tree": {"sha": "1c845f1dbc10f3356ff583986004ad9df5ac2ca0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c845f1dbc10f3356ff583986004ad9df5ac2ca0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bd6403b38965a17bd0f0693fa1563d09681d422", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bd6403b38965a17bd0f0693fa1563d09681d422", "html_url": "https://github.com/rust-lang/rust/commit/7bd6403b38965a17bd0f0693fa1563d09681d422", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bd6403b38965a17bd0f0693fa1563d09681d422/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "076514c8a82591547116a7a2212c4de4bdc56f76", "url": "https://api.github.com/repos/rust-lang/rust/commits/076514c8a82591547116a7a2212c4de4bdc56f76", "html_url": "https://github.com/rust-lang/rust/commit/076514c8a82591547116a7a2212c4de4bdc56f76"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "bee86df520c80a04aa8c9c9b5f842dcd30cb5843", "filename": "library/core/src/str/iter.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7bd6403b38965a17bd0f0693fa1563d09681d422/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bd6403b38965a17bd0f0693fa1563d09681d422/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs?ref=7bd6403b38965a17bd0f0693fa1563d09681d422", "patch": "@@ -736,7 +736,7 @@ impl<'a, P: Pattern<'a>> Split<'a, P> {\n     /// assert_eq!(split.as_str(), \"\");\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"str_split_as_str\", issue = \"none\")]\n+    #[unstable(feature = \"str_split_as_str\", issue = \"77998\")]\n     pub fn as_str(&self) -> &'a str {\n         self.0.as_str()\n     }\n@@ -757,7 +757,7 @@ impl<'a, P: Pattern<'a>> RSplit<'a, P> {\n     /// assert_eq!(split.as_str(), \"\");\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"str_split_as_str\", issue = \"none\")]\n+    #[unstable(feature = \"str_split_as_str\", issue = \"77998\")]\n     pub fn as_str(&self) -> &'a str {\n         self.0.as_str()\n     }\n@@ -796,7 +796,7 @@ impl<'a, P: Pattern<'a>> SplitTerminator<'a, P> {\n     /// assert_eq!(split.as_str(), \"\");\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"str_split_as_str\", issue = \"none\")]\n+    #[unstable(feature = \"str_split_as_str\", issue = \"77998\")]\n     pub fn as_str(&self) -> &'a str {\n         self.0.as_str()\n     }\n@@ -817,7 +817,7 @@ impl<'a, P: Pattern<'a>> RSplitTerminator<'a, P> {\n     /// assert_eq!(split.as_str(), \"\");\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"str_split_as_str\", issue = \"none\")]\n+    #[unstable(feature = \"str_split_as_str\", issue = \"77998\")]\n     pub fn as_str(&self) -> &'a str {\n         self.0.as_str()\n     }\n@@ -919,7 +919,7 @@ impl<'a, P: Pattern<'a>> SplitN<'a, P> {\n     /// assert_eq!(split.as_str(), \"\");\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"str_split_as_str\", issue = \"none\")]\n+    #[unstable(feature = \"str_split_as_str\", issue = \"77998\")]\n     pub fn as_str(&self) -> &'a str {\n         self.0.as_str()\n     }\n@@ -940,7 +940,7 @@ impl<'a, P: Pattern<'a>> RSplitN<'a, P> {\n     /// assert_eq!(split.as_str(), \"\");\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"str_split_as_str\", issue = \"none\")]\n+    #[unstable(feature = \"str_split_as_str\", issue = \"77998\")]\n     pub fn as_str(&self) -> &'a str {\n         self.0.as_str()\n     }\n@@ -1292,7 +1292,7 @@ impl<'a, P: Pattern<'a>> SplitInclusive<'a, P> {\n     /// assert_eq!(split.as_str(), \"\");\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"str_split_inclusive_as_str\", issue = \"none\")]\n+    #[unstable(feature = \"str_split_inclusive_as_str\", issue = \"77998\")]\n     pub fn as_str(&self) -> &'a str {\n         self.0.as_str()\n     }"}]}