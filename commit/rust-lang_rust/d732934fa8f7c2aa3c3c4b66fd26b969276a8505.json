{"sha": "d732934fa8f7c2aa3c3c4b66fd26b969276a8505", "node_id": "C_kwDOAAsO6NoAKGQ3MzI5MzRmYThmN2MyYWEzYzNjNGI2NmZkMjZiOTY5Mjc2YTg1MDU", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2023-03-31T20:32:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-31T20:32:50Z"}, "message": "Rollup merge of #109805 - nnethercote:source_map-cleanups, r=bjorn3\n\nSource map cleanups\n\nr? `@bjorn3`", "tree": {"sha": "7cccec4ef655b5006e7554e66a9fcebddb9332f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cccec4ef655b5006e7554e66a9fcebddb9332f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d732934fa8f7c2aa3c3c4b66fd26b969276a8505", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkJ0NyCRBK7hj4Ov3rIwAA3RgIAFpcQa7gbCBF8uiI35ei2yM6\nnEWBQDgAXa3tf6rlqtlEOfY25dRk2li1092WJnIu64XccAMHSIWM9iu3RyFLT4zw\nJLNWkJgXketbilZc0ymp+AErleydj7f4xGqJghVTxcaMfZWogjbt50RXIxzqqChE\nBl8Dx5LIxNSD6X2vjvs7ajITWUiONkpVQqejko2RRZm3rlKd8r1wDECrgEJG1xMw\nPnA8+hjV8wFEGQU1ZstDVDtwXB5wDsiK/VHpYAy0RHzpxdTOtKK5YVAIWM2rz3RH\nanJObvE/YNhYJoxBIz5jbGiSCQ8dHzd6iQehVJs/ga3OeT14+xTUqd10ylfdjCY=\n=KVaP\n-----END PGP SIGNATURE-----\n", "payload": "tree 7cccec4ef655b5006e7554e66a9fcebddb9332f9\nparent bd4e3f37dac1689941b5e70250ad2792bd6fcc6f\nparent 4e63ab6fc11ab942052c485ed121a606f0a7d319\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1680294770 +0200\ncommitter GitHub <noreply@github.com> 1680294770 +0200\n\nRollup merge of #109805 - nnethercote:source_map-cleanups, r=bjorn3\n\nSource map cleanups\n\nr? `@bjorn3`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d732934fa8f7c2aa3c3c4b66fd26b969276a8505", "html_url": "https://github.com/rust-lang/rust/commit/d732934fa8f7c2aa3c3c4b66fd26b969276a8505", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d732934fa8f7c2aa3c3c4b66fd26b969276a8505/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd4e3f37dac1689941b5e70250ad2792bd6fcc6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd4e3f37dac1689941b5e70250ad2792bd6fcc6f", "html_url": "https://github.com/rust-lang/rust/commit/bd4e3f37dac1689941b5e70250ad2792bd6fcc6f"}, {"sha": "4e63ab6fc11ab942052c485ed121a606f0a7d319", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e63ab6fc11ab942052c485ed121a606f0a7d319", "html_url": "https://github.com/rust-lang/rust/commit/4e63ab6fc11ab942052c485ed121a606f0a7d319"}], "stats": {"total": 51, "additions": 26, "deletions": 25}, "files": [{"sha": "26bc216f678cfb5be2f18d5e2facfef20c668037", "filename": "compiler/rustc_expand/src/proc_macro.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d732934fa8f7c2aa3c3c4b66fd26b969276a8505/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d732934fa8f7c2aa3c3c4b66fd26b969276a8505/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs?ref=d732934fa8f7c2aa3c3c4b66fd26b969276a8505", "patch": "@@ -54,7 +54,7 @@ impl base::BangProcMacro for BangProcMacro {\n     ) -> Result<TokenStream, ErrorGuaranteed> {\n         let _timer =\n             ecx.sess.prof.generic_activity_with_arg_recorder(\"expand_proc_macro\", |recorder| {\n-                recorder.record_arg_with_span(ecx.expansion_descr(), span);\n+                recorder.record_arg_with_span(ecx.sess.source_map(), ecx.expansion_descr(), span);\n             });\n \n         let proc_macro_backtrace = ecx.ecfg.proc_macro_backtrace;\n@@ -85,7 +85,7 @@ impl base::AttrProcMacro for AttrProcMacro {\n     ) -> Result<TokenStream, ErrorGuaranteed> {\n         let _timer =\n             ecx.sess.prof.generic_activity_with_arg_recorder(\"expand_proc_macro\", |recorder| {\n-                recorder.record_arg_with_span(ecx.expansion_descr(), span);\n+                recorder.record_arg_with_span(ecx.sess.source_map(), ecx.expansion_descr(), span);\n             });\n \n         let proc_macro_backtrace = ecx.ecfg.proc_macro_backtrace;\n@@ -134,7 +134,11 @@ impl MultiItemModifier for DeriveProcMacro {\n         let stream = {\n             let _timer =\n                 ecx.sess.prof.generic_activity_with_arg_recorder(\"expand_proc_macro\", |recorder| {\n-                    recorder.record_arg_with_span(ecx.expansion_descr(), span);\n+                    recorder.record_arg_with_span(\n+                        ecx.sess.source_map(),\n+                        ecx.expansion_descr(),\n+                        span,\n+                    );\n                 });\n             let proc_macro_backtrace = ecx.ecfg.proc_macro_backtrace;\n             let strategy = exec_strategy(ecx);"}, {"sha": "be7fa9378ca66262fb20559c24836813b7b0e6f2", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d732934fa8f7c2aa3c3c4b66fd26b969276a8505/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d732934fa8f7c2aa3c3c4b66fd26b969276a8505/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=d732934fa8f7c2aa3c3c4b66fd26b969276a8505", "patch": "@@ -292,7 +292,7 @@ pub fn run_compiler<R: Send>(config: Config, f: impl FnOnce(&Compiler) -> R + Se\n                 override_queries: config.override_queries,\n             };\n \n-            rustc_span::with_source_map(compiler.sess.parse_sess.clone_source_map(), move || {\n+            rustc_span::set_source_map(compiler.sess.parse_sess.clone_source_map(), move || {\n                 let r = {\n                     let _sess_abort_error = OnDrop(|| {\n                         compiler.sess.finish_diagnostics(registry);"}, {"sha": "e14760aa01885207faa7a3bfd4fbc3a7fcf7ec54", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d732934fa8f7c2aa3c3c4b66fd26b969276a8505/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d732934fa8f7c2aa3c3c4b66fd26b969276a8505/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=d732934fa8f7c2aa3c3c4b66fd26b969276a8505", "patch": "@@ -87,6 +87,14 @@ pub struct SessionGlobals {\n     symbol_interner: symbol::Interner,\n     span_interner: Lock<span_encoding::SpanInterner>,\n     hygiene_data: Lock<hygiene::HygieneData>,\n+\n+    /// A reference to the source map in the `Session`. It's an `Option`\n+    /// because it can't be initialized until `Session` is created, which\n+    /// happens after `SessionGlobals`. `set_source_map` does the\n+    /// initialization.\n+    ///\n+    /// This field should only be used in places where the `Session` is truly\n+    /// not available, such as `<Span as Debug>::fmt`.\n     source_map: Lock<Option<Lrc<SourceMap>>>,\n }\n \n@@ -1013,16 +1021,9 @@ impl<D: Decoder> Decodable<D> for Span {\n     }\n }\n \n-/// Calls the provided closure, using the provided `SourceMap` to format\n-/// any spans that are debug-printed during the closure's execution.\n-///\n-/// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`\n-/// (see `rustc_interface::callbacks::span_debug1`). However, some parts\n-/// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before\n-/// a `TyCtxt` is available. In this case, we fall back to\n-/// the `SourceMap` provided to this function. If that is not available,\n-/// we fall back to printing the raw `Span` field values.\n-pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {\n+/// Insert `source_map` into the session globals for the duration of the\n+/// closure's execution.\n+pub fn set_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {\n     with_session_globals(|session_globals| {\n         *session_globals.source_map.borrow_mut() = Some(source_map);\n     });\n@@ -1041,6 +1042,8 @@ pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) ->\n \n impl fmt::Debug for Span {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        // Use the global `SourceMap` to print the span. If that's not\n+        // available, fall back to printing the raw values.\n         with_session_globals(|session_globals| {\n             if let Some(source_map) = &*session_globals.source_map.borrow() {\n                 write!(f, \"{} ({:?})\", source_map.span_to_diagnostic_string(*self), self.ctxt())"}, {"sha": "66e5369da3ae1a8da287a3f2f5b15f743551b7cc", "filename": "compiler/rustc_span/src/profiling.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d732934fa8f7c2aa3c3c4b66fd26b969276a8505/compiler%2Frustc_span%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d732934fa8f7c2aa3c3c4b66fd26b969276a8505/compiler%2Frustc_span%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fprofiling.rs?ref=d732934fa8f7c2aa3c3c4b66fd26b969276a8505", "patch": "@@ -1,3 +1,5 @@\n+use crate::source_map::SourceMap;\n+\n use std::borrow::Borrow;\n \n use rustc_data_structures::profiling::EventArgRecorder;\n@@ -11,25 +13,17 @@ pub trait SpannedEventArgRecorder {\n     ///\n     /// Note: when self-profiling with costly event arguments, at least one argument\n     /// needs to be recorded. A panic will be triggered if that doesn't happen.\n-    fn record_arg_with_span<A>(&mut self, event_arg: A, span: crate::Span)\n+    fn record_arg_with_span<A>(&mut self, source_map: &SourceMap, event_arg: A, span: crate::Span)\n     where\n         A: Borrow<str> + Into<String>;\n }\n \n impl SpannedEventArgRecorder for EventArgRecorder<'_> {\n-    fn record_arg_with_span<A>(&mut self, event_arg: A, span: crate::Span)\n+    fn record_arg_with_span<A>(&mut self, source_map: &SourceMap, event_arg: A, span: crate::Span)\n     where\n         A: Borrow<str> + Into<String>,\n     {\n         self.record_arg(event_arg);\n-\n-        let span_arg = crate::with_session_globals(|session_globals| {\n-            if let Some(source_map) = &*session_globals.source_map.borrow() {\n-                source_map.span_to_embeddable_string(span)\n-            } else {\n-                format!(\"{span:?}\")\n-            }\n-        });\n-        self.record_arg(span_arg);\n+        self.record_arg(source_map.span_to_embeddable_string(span));\n     }\n }"}]}