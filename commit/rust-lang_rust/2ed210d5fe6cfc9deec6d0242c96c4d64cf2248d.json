{"sha": "2ed210d5fe6cfc9deec6d0242c96c4d64cf2248d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlZDIxMGQ1ZmU2Y2ZjOWRlZWM2ZDAyNDJjOTZjNGQ2NGNmMjI0OGQ=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-01-16T12:09:13Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-02-03T23:39:12Z"}, "message": "Refactor more functionality into record_import_use", "tree": {"sha": "79ef6799245e1ba1465978192a484ef9270dff02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79ef6799245e1ba1465978192a484ef9270dff02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ed210d5fe6cfc9deec6d0242c96c4d64cf2248d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ed210d5fe6cfc9deec6d0242c96c4d64cf2248d", "html_url": "https://github.com/rust-lang/rust/commit/2ed210d5fe6cfc9deec6d0242c96c4d64cf2248d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ed210d5fe6cfc9deec6d0242c96c4d64cf2248d/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e61ca4acc5aa4089847d220921da529882f5807", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e61ca4acc5aa4089847d220921da529882f5807", "html_url": "https://github.com/rust-lang/rust/commit/8e61ca4acc5aa4089847d220921da529882f5807"}], "stats": {"total": 45, "additions": 15, "deletions": 30}, "files": [{"sha": "3198c31da8102df5b5503e0f61563fbb9da8d7d7", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 14, "deletions": 24, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2ed210d5fe6cfc9deec6d0242c96c4d64cf2248d/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed210d5fe6cfc9deec6d0242c96c4d64cf2248d/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=2ed210d5fe6cfc9deec6d0242c96c4d64cf2248d", "patch": "@@ -1197,7 +1197,14 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     }\n \n     #[inline]\n-    fn record_import_use(&mut self, import_id: NodeId, name: Name) {\n+    fn record_import_use(&mut self, name: Name, ns: Namespace, resolution: &ImportResolution<'a>) {\n+        let import_id = resolution.id;\n+        self.used_imports.insert((import_id, ns));\n+        match resolution.target.as_ref().and_then(|target| target.target_module.def_id()) {\n+            Some(DefId { krate, .. }) => { self.used_crates.insert(krate); }\n+            _ => {}\n+        };\n+\n         if !self.make_glob_map {\n             return;\n         }\n@@ -1596,24 +1603,12 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     debug!(\"(resolving name in module) import unresolved; bailing out\");\n                     return Indeterminate;\n                 }\n-                match import_resolution.target.clone() {\n-                    None => {\n-                        debug!(\"(resolving name in module) name found, but not in namespace {:?}\",\n-                               namespace);\n-                    }\n-                    Some(target) => {\n-                        debug!(\"(resolving name in module) resolved to import\");\n-                        // track used imports and extern crates as well\n-                        if record_used {\n-                            let id = import_resolution.id;\n-                            self.used_imports.insert((id, namespace));\n-                            self.record_import_use(id, name);\n-                            if let Some(DefId{krate: kid, ..}) = target.target_module.def_id() {\n-                                self.used_crates.insert(kid);\n-                            }\n-                        }\n-                        return Success((target, true));\n+                if let Some(target) = import_resolution.target.clone() {\n+                    debug!(\"(resolving name in module) resolved to import\");\n+                    if record_used {\n+                        self.record_import_use(name, namespace, &import_resolution);\n                     }\n+                    return Success((target, true));\n                 }\n             }\n             Some(..) | None => {} // Continue.\n@@ -3531,13 +3526,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 };\n                 if self.trait_item_map.contains_key(&(name, did)) {\n                     add_trait_info(&mut found_traits, did, name);\n-                    let id = import.id;\n-                    self.used_imports.insert((id, TypeNS));\n                     let trait_name = self.get_trait_name(did);\n-                    self.record_import_use(id, trait_name);\n-                    if let Some(DefId{krate: kid, ..}) = target.target_module.def_id() {\n-                        self.used_crates.insert(kid);\n-                    }\n+                    self.record_import_use(trait_name, TypeNS, &import);\n                 }\n             }\n "}, {"sha": "0fa08e33aacff8c31485d4f1d5155e209303a0dc", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2ed210d5fe6cfc9deec6d0242c96c4d64cf2248d/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed210d5fe6cfc9deec6d0242c96c4d64cf2248d/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=2ed210d5fe6cfc9deec6d0242c96c4d64cf2248d", "patch": "@@ -460,12 +460,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n \n                 let target = resolution.target.clone();\n                 if let Some(Target { target_module, binding, shadowable: _ }) = target {\n-                    // track used imports and extern crates as well\n-                    self.resolver.used_imports.insert((resolution.id, ns));\n-                    self.resolver.record_import_use(resolution.id, name);\n-                    if let Some(DefId { krate, .. }) = target_module.def_id() {\n-                        self.resolver.used_crates.insert(krate);\n-                    }\n+                    self.resolver.record_import_use(name, ns, &resolution);\n                     (Success((target_module, binding)), true)\n                 } else {\n                     (Failed(None), false)"}]}