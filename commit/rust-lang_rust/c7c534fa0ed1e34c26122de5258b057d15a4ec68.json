{"sha": "c7c534fa0ed1e34c26122de5258b057d15a4ec68", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3YzUzNGZhMGVkMWUzNGMyNjEyMmRlNTI1OGIwNTdkMTVhNGVjNjg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-06-23T15:22:35Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-07T08:55:47Z"}, "message": "Move llvm_target_features back to llvm_util", "tree": {"sha": "fa2d3dffb61d831ecc3c81c973e7491f3c6a8fcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa2d3dffb61d831ecc3c81c973e7491f3c6a8fcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7c534fa0ed1e34c26122de5258b057d15a4ec68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7c534fa0ed1e34c26122de5258b057d15a4ec68", "html_url": "https://github.com/rust-lang/rust/commit/c7c534fa0ed1e34c26122de5258b057d15a4ec68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7c534fa0ed1e34c26122de5258b057d15a4ec68/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "679743646e7008c2c0c6972cf766914387c4bb52", "url": "https://api.github.com/repos/rust-lang/rust/commits/679743646e7008c2c0c6972cf766914387c4bb52", "html_url": "https://github.com/rust-lang/rust/commit/679743646e7008c2c0c6972cf766914387c4bb52"}], "stats": {"total": 251, "additions": 118, "deletions": 133}, "files": [{"sha": "87ee9ef5adb23aad019ecafd85a8c1571d24e198", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 116, "deletions": 2, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/c7c534fa0ed1e34c26122de5258b057d15a4ec68/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7c534fa0ed1e34c26122de5258b057d15a4ec68/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=c7c534fa0ed1e34c26122de5258b057d15a4ec68", "patch": "@@ -20,8 +20,6 @@ use syntax::feature_gate::UnstableFeatures;\n use std::sync::atomic::{AtomicBool, Ordering};\n use std::sync::Once;\n \n-pub use rustc_codegen_utils::llvm_target_features::*;\n-\n static POISONED: AtomicBool = AtomicBool::new(false);\n static INIT: Once = Once::new();\n \n@@ -81,6 +79,108 @@ unsafe fn configure_llvm(sess: &Session) {\n                                  llvm_args.as_ptr());\n }\n \n+// WARNING: the features after applying `to_llvm_feature` must be known\n+// to LLVM or the feature detection code will walk past the end of the feature\n+// array, leading to crashes.\n+\n+const ARM_WHITELIST: &[(&str, Option<&str>)] = &[\n+    (\"mclass\", Some(\"arm_target_feature\")),\n+    (\"neon\", Some(\"arm_target_feature\")),\n+    (\"v7\", Some(\"arm_target_feature\")),\n+    (\"vfp2\", Some(\"arm_target_feature\")),\n+    (\"vfp3\", Some(\"arm_target_feature\")),\n+    (\"vfp4\", Some(\"arm_target_feature\")),\n+];\n+\n+const AARCH64_WHITELIST: &[(&str, Option<&str>)] = &[\n+    (\"fp\", Some(\"aarch64_target_feature\")),\n+    (\"neon\", Some(\"aarch64_target_feature\")),\n+    (\"sve\", Some(\"aarch64_target_feature\")),\n+    (\"crc\", Some(\"aarch64_target_feature\")),\n+    (\"crypto\", Some(\"aarch64_target_feature\")),\n+    (\"ras\", Some(\"aarch64_target_feature\")),\n+    (\"lse\", Some(\"aarch64_target_feature\")),\n+    (\"rdm\", Some(\"aarch64_target_feature\")),\n+    (\"fp16\", Some(\"aarch64_target_feature\")),\n+    (\"rcpc\", Some(\"aarch64_target_feature\")),\n+    (\"dotprod\", Some(\"aarch64_target_feature\")),\n+    (\"v8.1a\", Some(\"aarch64_target_feature\")),\n+    (\"v8.2a\", Some(\"aarch64_target_feature\")),\n+    (\"v8.3a\", Some(\"aarch64_target_feature\")),\n+];\n+\n+const X86_WHITELIST: &[(&str, Option<&str>)] = &[\n+    (\"aes\", None),\n+    (\"avx\", None),\n+    (\"avx2\", None),\n+    (\"avx512bw\", Some(\"avx512_target_feature\")),\n+    (\"avx512cd\", Some(\"avx512_target_feature\")),\n+    (\"avx512dq\", Some(\"avx512_target_feature\")),\n+    (\"avx512er\", Some(\"avx512_target_feature\")),\n+    (\"avx512f\", Some(\"avx512_target_feature\")),\n+    (\"avx512ifma\", Some(\"avx512_target_feature\")),\n+    (\"avx512pf\", Some(\"avx512_target_feature\")),\n+    (\"avx512vbmi\", Some(\"avx512_target_feature\")),\n+    (\"avx512vl\", Some(\"avx512_target_feature\")),\n+    (\"avx512vpopcntdq\", Some(\"avx512_target_feature\")),\n+    (\"bmi1\", None),\n+    (\"bmi2\", None),\n+    (\"fma\", None),\n+    (\"fxsr\", None),\n+    (\"lzcnt\", None),\n+    (\"mmx\", Some(\"mmx_target_feature\")),\n+    (\"pclmulqdq\", None),\n+    (\"popcnt\", None),\n+    (\"rdrand\", None),\n+    (\"rdseed\", None),\n+    (\"sha\", None),\n+    (\"sse\", None),\n+    (\"sse2\", None),\n+    (\"sse3\", None),\n+    (\"sse4.1\", None),\n+    (\"sse4.2\", None),\n+    (\"sse4a\", Some(\"sse4a_target_feature\")),\n+    (\"ssse3\", None),\n+    (\"tbm\", Some(\"tbm_target_feature\")),\n+    (\"xsave\", None),\n+    (\"xsavec\", None),\n+    (\"xsaveopt\", None),\n+    (\"xsaves\", None),\n+];\n+\n+const HEXAGON_WHITELIST: &[(&str, Option<&str>)] = &[\n+    (\"hvx\", Some(\"hexagon_target_feature\")),\n+    (\"hvx-double\", Some(\"hexagon_target_feature\")),\n+];\n+\n+const POWERPC_WHITELIST: &[(&str, Option<&str>)] = &[\n+    (\"altivec\", Some(\"powerpc_target_feature\")),\n+    (\"power8-altivec\", Some(\"powerpc_target_feature\")),\n+    (\"power9-altivec\", Some(\"powerpc_target_feature\")),\n+    (\"power8-vector\", Some(\"powerpc_target_feature\")),\n+    (\"power9-vector\", Some(\"powerpc_target_feature\")),\n+    (\"vsx\", Some(\"powerpc_target_feature\")),\n+];\n+\n+const MIPS_WHITELIST: &[(&str, Option<&str>)] = &[\n+    (\"fp64\", Some(\"mips_target_feature\")),\n+    (\"msa\", Some(\"mips_target_feature\")),\n+];\n+\n+/// When rustdoc is running, provide a list of all known features so that all their respective\n+/// primtives may be documented.\n+///\n+/// IMPORTANT: If you're adding another whitelist to the above lists, make sure to add it to this\n+/// iterator!\n+pub fn all_known_features() -> impl Iterator<Item=(&'static str, Option<&'static str>)> {\n+    ARM_WHITELIST.iter().cloned()\n+        .chain(AARCH64_WHITELIST.iter().cloned())\n+        .chain(X86_WHITELIST.iter().cloned())\n+        .chain(HEXAGON_WHITELIST.iter().cloned())\n+        .chain(POWERPC_WHITELIST.iter().cloned())\n+        .chain(MIPS_WHITELIST.iter().cloned())\n+}\n+\n pub fn to_llvm_feature<'a>(sess: &Session, s: &'a str) -> &'a str {\n     let arch = if sess.target.target.arch == \"x86_64\" {\n         \"x86\"\n@@ -116,6 +216,20 @@ pub fn target_features(sess: &Session) -> Vec<Symbol> {\n         .map(|feature| Symbol::intern(feature)).collect()\n }\n \n+pub fn target_feature_whitelist(sess: &Session)\n+    -> &'static [(&'static str, Option<&'static str>)]\n+{\n+    match &*sess.target.target.arch {\n+        \"arm\" => ARM_WHITELIST,\n+        \"aarch64\" => AARCH64_WHITELIST,\n+        \"x86\" | \"x86_64\" => X86_WHITELIST,\n+        \"hexagon\" => HEXAGON_WHITELIST,\n+        \"mips\" | \"mips64\" => MIPS_WHITELIST,\n+        \"powerpc\" | \"powerpc64\" => POWERPC_WHITELIST,\n+        _ => &[],\n+    }\n+}\n+\n pub fn print_version() {\n     // Can be called without initializing LLVM\n     unsafe {"}, {"sha": "3cbf176d98bc9d38b331dbfae48feefc30025929", "filename": "src/librustc_codegen_utils/codegen_backend.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c7c534fa0ed1e34c26122de5258b057d15a4ec68/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7c534fa0ed1e34c26122de5258b057d15a4ec68/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs?ref=c7c534fa0ed1e34c26122de5258b057d15a4ec68", "patch": "@@ -42,6 +42,7 @@ use rustc::middle::cstore::EncodedMetadata;\n use rustc::middle::cstore::MetadataLoader;\n use rustc::dep_graph::DepGraph;\n use rustc_target::spec::Target;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_mir::monomorphize::collector;\n use link::{build_link_meta, out_filename};\n \n@@ -132,9 +133,7 @@ impl CodegenBackend for MetadataOnlyCodegenBackend {\n         ::symbol_names::provide(providers);\n \n         providers.target_features_whitelist = |_tcx, _cnum| {\n-            Lrc::new(::llvm_target_features::all_known_features()\n-                .map(|(a, b)| (a.to_string(), b.map(|s| s.to_string())))\n-                .collect())\n+            Lrc::new(FxHashMap()) // Just a dummy\n         };\n         providers.is_reachable_non_generic = |_tcx, _defid| true;\n         providers.exported_symbols = |_tcx, _crate| Arc::new(Vec::new());"}, {"sha": "f59cf5832fcb4eb7a423364ca8d9059626332c0e", "filename": "src/librustc_codegen_utils/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7c534fa0ed1e34c26122de5258b057d15a4ec68/src%2Flibrustc_codegen_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7c534fa0ed1e34c26122de5258b057d15a4ec68/src%2Flibrustc_codegen_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flib.rs?ref=c7c534fa0ed1e34c26122de5258b057d15a4ec68", "patch": "@@ -44,7 +44,6 @@ pub mod link;\n pub mod codegen_backend;\n pub mod symbol_names;\n pub mod symbol_names_test;\n-pub mod llvm_target_features;\n \n /// check for the #[rustc_error] annotation, which forces an\n /// error in codegen. This is used to write compile-fail tests"}, {"sha": "8e11363cead8c35c47eb0e1c4b0cab2e341850c0", "filename": "src/librustc_codegen_utils/llvm_target_features.rs", "status": "removed", "additions": 0, "deletions": 127, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/679743646e7008c2c0c6972cf766914387c4bb52/src%2Flibrustc_codegen_utils%2Fllvm_target_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/679743646e7008c2c0c6972cf766914387c4bb52/src%2Flibrustc_codegen_utils%2Fllvm_target_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fllvm_target_features.rs?ref=679743646e7008c2c0c6972cf766914387c4bb52", "patch": "@@ -1,127 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use rustc::session::Session;\n-\n-// WARNING: the features after applying `to_llvm_feature` must be known\n-// to LLVM or the feature detection code will walk past the end of the feature\n-// array, leading to crashes.\n-\n-const ARM_WHITELIST: &[(&str, Option<&str>)] = &[\n-    (\"mclass\", Some(\"arm_target_feature\")),\n-    (\"neon\", Some(\"arm_target_feature\")),\n-    (\"v7\", Some(\"arm_target_feature\")),\n-    (\"vfp2\", Some(\"arm_target_feature\")),\n-    (\"vfp3\", Some(\"arm_target_feature\")),\n-    (\"vfp4\", Some(\"arm_target_feature\")),\n-];\n-\n-const AARCH64_WHITELIST: &[(&str, Option<&str>)] = &[\n-    (\"fp\", Some(\"aarch64_target_feature\")),\n-    (\"neon\", Some(\"aarch64_target_feature\")),\n-    (\"sve\", Some(\"aarch64_target_feature\")),\n-    (\"crc\", Some(\"aarch64_target_feature\")),\n-    (\"crypto\", Some(\"aarch64_target_feature\")),\n-    (\"ras\", Some(\"aarch64_target_feature\")),\n-    (\"lse\", Some(\"aarch64_target_feature\")),\n-    (\"rdm\", Some(\"aarch64_target_feature\")),\n-    (\"fp16\", Some(\"aarch64_target_feature\")),\n-    (\"rcpc\", Some(\"aarch64_target_feature\")),\n-    (\"dotprod\", Some(\"aarch64_target_feature\")),\n-    (\"v8.1a\", Some(\"aarch64_target_feature\")),\n-    (\"v8.2a\", Some(\"aarch64_target_feature\")),\n-    (\"v8.3a\", Some(\"aarch64_target_feature\")),\n-];\n-\n-const X86_WHITELIST: &[(&str, Option<&str>)] = &[\n-    (\"aes\", None),\n-    (\"avx\", None),\n-    (\"avx2\", None),\n-    (\"avx512bw\", Some(\"avx512_target_feature\")),\n-    (\"avx512cd\", Some(\"avx512_target_feature\")),\n-    (\"avx512dq\", Some(\"avx512_target_feature\")),\n-    (\"avx512er\", Some(\"avx512_target_feature\")),\n-    (\"avx512f\", Some(\"avx512_target_feature\")),\n-    (\"avx512ifma\", Some(\"avx512_target_feature\")),\n-    (\"avx512pf\", Some(\"avx512_target_feature\")),\n-    (\"avx512vbmi\", Some(\"avx512_target_feature\")),\n-    (\"avx512vl\", Some(\"avx512_target_feature\")),\n-    (\"avx512vpopcntdq\", Some(\"avx512_target_feature\")),\n-    (\"bmi1\", None),\n-    (\"bmi2\", None),\n-    (\"fma\", None),\n-    (\"fxsr\", None),\n-    (\"lzcnt\", None),\n-    (\"mmx\", Some(\"mmx_target_feature\")),\n-    (\"pclmulqdq\", None),\n-    (\"popcnt\", None),\n-    (\"rdrand\", None),\n-    (\"rdseed\", None),\n-    (\"sha\", None),\n-    (\"sse\", None),\n-    (\"sse2\", None),\n-    (\"sse3\", None),\n-    (\"sse4.1\", None),\n-    (\"sse4.2\", None),\n-    (\"sse4a\", Some(\"sse4a_target_feature\")),\n-    (\"ssse3\", None),\n-    (\"tbm\", Some(\"tbm_target_feature\")),\n-    (\"xsave\", None),\n-    (\"xsavec\", None),\n-    (\"xsaveopt\", None),\n-    (\"xsaves\", None),\n-];\n-\n-const HEXAGON_WHITELIST: &[(&str, Option<&str>)] = &[\n-    (\"hvx\", Some(\"hexagon_target_feature\")),\n-    (\"hvx-double\", Some(\"hexagon_target_feature\")),\n-];\n-\n-const POWERPC_WHITELIST: &[(&str, Option<&str>)] = &[\n-    (\"altivec\", Some(\"powerpc_target_feature\")),\n-    (\"power8-altivec\", Some(\"powerpc_target_feature\")),\n-    (\"power9-altivec\", Some(\"powerpc_target_feature\")),\n-    (\"power8-vector\", Some(\"powerpc_target_feature\")),\n-    (\"power9-vector\", Some(\"powerpc_target_feature\")),\n-    (\"vsx\", Some(\"powerpc_target_feature\")),\n-];\n-\n-const MIPS_WHITELIST: &[(&str, Option<&str>)] = &[\n-    (\"fp64\", Some(\"mips_target_feature\")),\n-    (\"msa\", Some(\"mips_target_feature\")),\n-];\n-\n-/// When rustdoc is running, provide a list of all known features so that all their respective\n-/// primtives may be documented.\n-///\n-/// IMPORTANT: If you're adding another whitelist to the above lists, make sure to add it to this\n-/// iterator!\n-pub fn all_known_features() -> impl Iterator<Item=(&'static str, Option<&'static str>)> {\n-    ARM_WHITELIST.iter().cloned()\n-        .chain(AARCH64_WHITELIST.iter().cloned())\n-        .chain(X86_WHITELIST.iter().cloned())\n-        .chain(HEXAGON_WHITELIST.iter().cloned())\n-        .chain(POWERPC_WHITELIST.iter().cloned())\n-        .chain(MIPS_WHITELIST.iter().cloned())\n-}\n-\n-pub fn target_feature_whitelist(sess: &Session)\n-    -> &'static [(&'static str, Option<&'static str>)]\n-{\n-    match &*sess.target.target.arch {\n-        \"arm\" => ARM_WHITELIST,\n-        \"aarch64\" => AARCH64_WHITELIST,\n-        \"x86\" | \"x86_64\" => X86_WHITELIST,\n-        \"hexagon\" => HEXAGON_WHITELIST,\n-        \"mips\" | \"mips64\" => MIPS_WHITELIST,\n-        \"powerpc\" | \"powerpc64\" => POWERPC_WHITELIST,\n-        _ => &[],\n-    }\n-}"}]}