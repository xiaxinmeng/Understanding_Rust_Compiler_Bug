{"sha": "94dc2f567ab7cd84a1d200749ca376eb7a5d96ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0ZGMyZjU2N2FiN2NkODRhMWQyMDA3NDljYTM3NmViN2E1ZDk2ZWM=", "commit": {"author": {"name": "Florian Hartwig", "email": "florian.j.hartwig@gmail.com", "date": "2015-11-25T23:09:01Z"}, "committer": {"name": "Florian Hartwig", "email": "florian.j.hartwig@gmail.com", "date": "2015-11-25T23:09:01Z"}, "message": "Suppress explicit_counter_loop lint if loop variable is used after the loop", "tree": {"sha": "2e35e9dd380ca72dfd4e172f3bc4d67c8e672e49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e35e9dd380ca72dfd4e172f3bc4d67c8e672e49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94dc2f567ab7cd84a1d200749ca376eb7a5d96ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94dc2f567ab7cd84a1d200749ca376eb7a5d96ec", "html_url": "https://github.com/rust-lang/rust/commit/94dc2f567ab7cd84a1d200749ca376eb7a5d96ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94dc2f567ab7cd84a1d200749ca376eb7a5d96ec/comments", "author": {"login": "fhartwig", "id": 83271, "node_id": "MDQ6VXNlcjgzMjcx", "avatar_url": "https://avatars.githubusercontent.com/u/83271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhartwig", "html_url": "https://github.com/fhartwig", "followers_url": "https://api.github.com/users/fhartwig/followers", "following_url": "https://api.github.com/users/fhartwig/following{/other_user}", "gists_url": "https://api.github.com/users/fhartwig/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhartwig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhartwig/subscriptions", "organizations_url": "https://api.github.com/users/fhartwig/orgs", "repos_url": "https://api.github.com/users/fhartwig/repos", "events_url": "https://api.github.com/users/fhartwig/events{/privacy}", "received_events_url": "https://api.github.com/users/fhartwig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhartwig", "id": 83271, "node_id": "MDQ6VXNlcjgzMjcx", "avatar_url": "https://avatars.githubusercontent.com/u/83271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhartwig", "html_url": "https://github.com/fhartwig", "followers_url": "https://api.github.com/users/fhartwig/followers", "following_url": "https://api.github.com/users/fhartwig/following{/other_user}", "gists_url": "https://api.github.com/users/fhartwig/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhartwig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhartwig/subscriptions", "organizations_url": "https://api.github.com/users/fhartwig/orgs", "repos_url": "https://api.github.com/users/fhartwig/repos", "events_url": "https://api.github.com/users/fhartwig/events{/privacy}", "received_events_url": "https://api.github.com/users/fhartwig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d130858326e3e47683617229c35e9b9260287cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d130858326e3e47683617229c35e9b9260287cb", "html_url": "https://github.com/rust-lang/rust/commit/4d130858326e3e47683617229c35e9b9260287cb"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "cfde17417159552da075e1db2ff00aa28e3c9fe2", "filename": "src/loops.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/94dc2f567ab7cd84a1d200749ca376eb7a5d96ec/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94dc2f567ab7cd84a1d200749ca376eb7a5d96ec/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=94dc2f567ab7cd84a1d200749ca376eb7a5d96ec", "patch": "@@ -150,7 +150,8 @@ impl LateLintPass for LoopsPass {\n                     for (id, _) in visitor.states.iter().filter( |&(_,v)| *v == VarState::IncrOnce) {\n                         let mut visitor2 = InitializeVisitor { cx: cx, end_expr: expr, var_id: id.clone(),\n                                                                state: VarState::IncrOnce, name: None,\n-                                                               depth: 0, done: false };\n+                                                               depth: 0,\n+                                                               past_loop: false };\n                         walk_block(&mut visitor2, block);\n \n                         if visitor2.state == VarState::Warn {\n@@ -502,7 +503,7 @@ struct InitializeVisitor<'v, 't: 'v> {\n     state: VarState,\n     name: Option<Name>,\n     depth: u32,              // depth of conditional expressions\n-    done: bool\n+    past_loop: bool\n }\n \n impl<'v, 't> Visitor<'v> for InitializeVisitor<'v, 't> {\n@@ -530,12 +531,16 @@ impl<'v, 't> Visitor<'v> for InitializeVisitor<'v, 't> {\n     }\n \n     fn visit_expr(&mut self, expr: &'v Expr) {\n-        if self.state == VarState::DontWarn || expr == self.end_expr {\n-            self.done = true;\n+        if self.state == VarState::DontWarn {\n+            return;\n+        }\n+        if expr == self.end_expr {\n+            self.past_loop = true;\n+            return;\n         }\n         // No need to visit expressions before the variable is\n-        // declared or after we've rejected it.\n-        if self.state == VarState::IncrOnce || self.done {\n+        // declared\n+        if self.state == VarState::IncrOnce {\n             return;\n         }\n \n@@ -556,11 +561,15 @@ impl<'v, 't> Visitor<'v> for InitializeVisitor<'v, 't> {\n                     _ => ()\n                 }\n             }\n+\n+            if self.past_loop {\n+                self.state = VarState::DontWarn;\n+                return;\n+            }\n         }\n         // If there are other loops between the declaration and the target loop, give up\n-        else if is_loop(expr) {\n+        else if !self.past_loop && is_loop(expr) {\n             self.state = VarState::DontWarn;\n-            self.done = true;\n             return;\n         }\n         // Keep track of whether we're inside a conditional expression"}, {"sha": "3d19bd66094a79ef312313f494190ff3f8c869d5", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/94dc2f567ab7cd84a1d200749ca376eb7a5d96ec/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94dc2f567ab7cd84a1d200749ca376eb7a5d96ec/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=94dc2f567ab7cd84a1d200749ca376eb7a5d96ec", "patch": "@@ -132,11 +132,6 @@ fn main() {\n     _index = 0;\n     for _v in &vec { _index += 1 } //~ERROR the variable `_index` is used as a loop counter\n \n-    let mut _index;\n-    _index = 0;\n-    for _v in &vec { _index += 1 } //~ERROR the variable `_index` is used as a loop counter\n-    for _v in &vec { _index += 1 } // But this does not warn\n-\n     // Potential false positives\n     let mut _index = 0;\n     _index = 1;\n@@ -187,4 +182,8 @@ fn main() {\n     let mut _index = 0;\n     { let mut _x = &mut _index; }\n     for _v in &vec { _index += 1 }\n+\n+    let mut index = 0;\n+    for _v in &vec { index += 1 }\n+    println!(\"index: {}\", index);\n }"}]}