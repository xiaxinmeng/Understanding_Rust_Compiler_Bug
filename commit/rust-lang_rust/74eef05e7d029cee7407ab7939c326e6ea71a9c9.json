{"sha": "74eef05e7d029cee7407ab7939c326e6ea71a9c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZWVmMDVlN2QwMjljZWU3NDA3YWI3OTM5YzMyNmU2ZWE3MWE5Yzk=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-09-07T20:58:41Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2015-02-07T18:49:57Z"}, "message": "Use path helper macros in deriving", "tree": {"sha": "10a5049ae6181c054c369f57691552b0040fc1d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10a5049ae6181c054c369f57691552b0040fc1d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74eef05e7d029cee7407ab7939c326e6ea71a9c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74eef05e7d029cee7407ab7939c326e6ea71a9c9", "html_url": "https://github.com/rust-lang/rust/commit/74eef05e7d029cee7407ab7939c326e6ea71a9c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74eef05e7d029cee7407ab7939c326e6ea71a9c9/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce5aad2f107e79c5f1baab40aff35b7899322d94", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce5aad2f107e79c5f1baab40aff35b7899322d94", "html_url": "https://github.com/rust-lang/rust/commit/ce5aad2f107e79c5f1baab40aff35b7899322d94"}], "stats": {"total": 66, "additions": 38, "deletions": 28}, "files": [{"sha": "847af6427ef3551787040146ecbe394241fe490f", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74eef05e7d029cee7407ab7939c326e6ea71a9c9/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74eef05e7d029cee7407ab7939c326e6ea71a9c9/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=74eef05e7d029cee7407ab7939c326e6ea71a9c9", "patch": "@@ -29,7 +29,7 @@ pub fn expand_deriving_clone<F>(cx: &mut ExtCtxt,\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n-        path: Path::new(vec!(\"std\", \"clone\", \"Clone\")),\n+        path: path!(std::clone::Clone),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         methods: vec!("}, {"sha": "65c164fc9a1594c1f35eec962fa61909bb1eba65", "filename": "src/libsyntax/ext/deriving/cmp/eq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74eef05e7d029cee7407ab7939c326e6ea71a9c9/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74eef05e7d029cee7407ab7939c326e6ea71a9c9/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs?ref=74eef05e7d029cee7407ab7939c326e6ea71a9c9", "patch": "@@ -70,7 +70,7 @@ pub fn expand_deriving_eq<F>(cx: &mut ExtCtxt,\n                 generics: LifetimeBounds::empty(),\n                 explicit_self: borrowed_explicit_self(),\n                 args: vec!(borrowed_self()),\n-                ret_ty: Literal(Path::new(vec!(\"bool\"))),\n+                ret_ty: Literal(path!(bool)),\n                 attributes: attrs,\n                 combine_substructure: combine_substructure(box |a, b, c| {\n                     $f(a, b, c)\n@@ -82,7 +82,7 @@ pub fn expand_deriving_eq<F>(cx: &mut ExtCtxt,\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n-        path: Path::new(vec!(\"std\", \"cmp\", \"PartialEq\")),\n+        path: path!(std::cmp::PartialEq),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         methods: vec!("}, {"sha": "8a706e5c46d649f3e625f06701077367df4345be", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74eef05e7d029cee7407ab7939c326e6ea71a9c9/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74eef05e7d029cee7407ab7939c326e6ea71a9c9/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=74eef05e7d029cee7407ab7939c326e6ea71a9c9", "patch": "@@ -36,7 +36,7 @@ pub fn expand_deriving_ord<F>(cx: &mut ExtCtxt,\n                 generics: LifetimeBounds::empty(),\n                 explicit_self: borrowed_explicit_self(),\n                 args: vec!(borrowed_self()),\n-                ret_ty: Literal(Path::new(vec!(\"bool\"))),\n+                ret_ty: Literal(path!(bool)),\n                 attributes: attrs,\n                 combine_substructure: combine_substructure(box |cx, span, substr| {\n                     cs_op($op, $equal, cx, span, substr)\n@@ -45,8 +45,8 @@ pub fn expand_deriving_ord<F>(cx: &mut ExtCtxt,\n         } }\n     }\n \n-    let ordering_ty = Literal(Path::new(vec![\"std\", \"cmp\", \"Ordering\"]));\n-    let ret_ty = Literal(Path::new_(vec![\"std\", \"option\", \"Option\"],\n+    let ordering_ty = Literal(path!(std::cmp::Ordering));\n+    let ret_ty = Literal(Path::new_(pathvec!(std::option::Option),\n                                     None,\n                                     vec![box ordering_ty],\n                                     true));\n@@ -69,7 +69,7 @@ pub fn expand_deriving_ord<F>(cx: &mut ExtCtxt,\n     let trait_def = TraitDef {\n         span: span,\n         attributes: vec![],\n-        path: Path::new(vec![\"std\", \"cmp\", \"PartialOrd\"]),\n+        path: path!(std::cmp::PartialOrd),\n         additional_bounds: vec![],\n         generics: LifetimeBounds::empty(),\n         methods: vec!["}, {"sha": "9efae379e1f0f635df23318b3375e8ff969440c3", "filename": "src/libsyntax/ext/deriving/cmp/totaleq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74eef05e7d029cee7407ab7939c326e6ea71a9c9/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74eef05e7d029cee7407ab7939c326e6ea71a9c9/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs?ref=74eef05e7d029cee7407ab7939c326e6ea71a9c9", "patch": "@@ -46,7 +46,7 @@ pub fn expand_deriving_totaleq<F>(cx: &mut ExtCtxt,\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n-        path: Path::new(vec!(\"std\", \"cmp\", \"Eq\")),\n+        path: path!(std::cmp::Eq),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         methods: vec!("}, {"sha": "7a4b717e817fc2d9fd36145b922b49a4862f31ee", "filename": "src/libsyntax/ext/deriving/cmp/totalord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74eef05e7d029cee7407ab7939c326e6ea71a9c9/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74eef05e7d029cee7407ab7939c326e6ea71a9c9/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs?ref=74eef05e7d029cee7407ab7939c326e6ea71a9c9", "patch": "@@ -30,7 +30,7 @@ pub fn expand_deriving_totalord<F>(cx: &mut ExtCtxt,\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n-        path: Path::new(vec!(\"std\", \"cmp\", \"Ord\")),\n+        path: path!(std::cmp::Ord),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         methods: vec!(\n@@ -39,7 +39,7 @@ pub fn expand_deriving_totalord<F>(cx: &mut ExtCtxt,\n                 generics: LifetimeBounds::empty(),\n                 explicit_self: borrowed_explicit_self(),\n                 args: vec!(borrowed_self()),\n-                ret_ty: Literal(Path::new(vec!(\"std\", \"cmp\", \"Ordering\"))),\n+                ret_ty: Literal(path!(std::cmp::Ordering)),\n                 attributes: attrs,\n                 combine_substructure: combine_substructure(box |a, b, c| {\n                     cs_cmp(a, b, c)"}, {"sha": "e7ef2ff060641c62680f272300ff289ce62059dd", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74eef05e7d029cee7407ab7939c326e6ea71a9c9/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74eef05e7d029cee7407ab7939c326e6ea71a9c9/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=74eef05e7d029cee7407ab7939c326e6ea71a9c9", "patch": "@@ -68,7 +68,7 @@ fn expand_deriving_decodable_imp<F>(cx: &mut ExtCtxt,\n                 args: vec!(Ptr(box Literal(Path::new_local(\"__D\")),\n                             Borrowed(None, MutMutable))),\n                 ret_ty: Literal(Path::new_(\n-                    vec!(\"std\", \"result\", \"Result\"),\n+                    pathvec!(std::result::Result),\n                     None,\n                     vec!(box Self, box Literal(Path::new_(\n                         vec![\"__D\", \"Error\"], None, vec![], false"}, {"sha": "8f210779d3d13ff060a026aa122800056fd2a442", "filename": "src/libsyntax/ext/deriving/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74eef05e7d029cee7407ab7939c326e6ea71a9c9/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74eef05e7d029cee7407ab7939c326e6ea71a9c9/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs?ref=74eef05e7d029cee7407ab7939c326e6ea71a9c9", "patch": "@@ -29,7 +29,7 @@ pub fn expand_deriving_default<F>(cx: &mut ExtCtxt,\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n-        path: Path::new(vec!(\"std\", \"default\", \"Default\")),\n+        path: path!(std::default::Default),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         methods: vec!("}, {"sha": "c3d42b6a4f7a73f34574977876b6772975dd8353", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74eef05e7d029cee7407ab7939c326e6ea71a9c9/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74eef05e7d029cee7407ab7939c326e6ea71a9c9/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=74eef05e7d029cee7407ab7939c326e6ea71a9c9", "patch": "@@ -144,7 +144,7 @@ fn expand_deriving_encodable_imp<F>(cx: &mut ExtCtxt,\n                 args: vec!(Ptr(box Literal(Path::new_local(\"__S\")),\n                             Borrowed(None, MutMutable))),\n                 ret_ty: Literal(Path::new_(\n-                    vec!(\"std\", \"result\", \"Result\"),\n+                    pathvec!(std::result::Result),\n                     None,\n                     vec!(box Tuple(Vec::new()), box Literal(Path::new_(\n                         vec![\"__S\", \"Error\"], None, vec![], false"}, {"sha": "2482ea4b7d40d105cc03738a95e75ec97099f7a5", "filename": "src/libsyntax/ext/deriving/hash.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74eef05e7d029cee7407ab7939c326e6ea71a9c9/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74eef05e7d029cee7407ab7939c326e6ea71a9c9/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs?ref=74eef05e7d029cee7407ab7939c326e6ea71a9c9", "patch": "@@ -25,13 +25,13 @@ pub fn expand_deriving_hash<F>(cx: &mut ExtCtxt,\n     F: FnOnce(P<Item>),\n {\n \n-    let path = Path::new_(vec!(\"std\", \"hash\", \"Hash\"), None,\n+    let path = Path::new_(pathvec!(std::hash::Hash), None,\n                           vec!(box Literal(Path::new_local(\"__S\"))), true);\n     let generics = LifetimeBounds {\n         lifetimes: Vec::new(),\n         bounds: vec!((\"__S\",\n-                      vec!(Path::new(vec!(\"std\", \"hash\", \"Writer\")),\n-                           Path::new(vec!(\"std\", \"hash\", \"Hasher\"))))),\n+                      vec!(path!(std::hash::Writer),\n+                           path!(std::hash::Hasher)))),\n     };\n     let args = Path::new_local(\"__S\");\n     let inline = cx.meta_word(span, InternedString::new(\"inline\"));"}, {"sha": "657ecc63a38dd83846cfca4bbd47db4348ccb142", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74eef05e7d029cee7407ab7939c326e6ea71a9c9/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74eef05e7d029cee7407ab7939c326e6ea71a9c9/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=74eef05e7d029cee7407ab7939c326e6ea71a9c9", "patch": "@@ -18,6 +18,18 @@ use ext::base::ExtCtxt;\n use codemap::Span;\n use ptr::P;\n \n+macro_rules! pathvec {\n+    ($($x:ident)::+) => (\n+        vec![ $( stringify!($x) ),+ ]\n+    )\n+}\n+\n+macro_rules! path {\n+    ($($x:tt)*) => (\n+        ::ext::deriving::generic::ty::Path::new( pathvec!( $($x)* ) )\n+    )\n+}\n+\n pub mod bounds;\n pub mod clone;\n pub mod encodable;"}, {"sha": "3b5d483017f9494231377e0c8909e90f83328b7c", "filename": "src/libsyntax/ext/deriving/primitive.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74eef05e7d029cee7407ab7939c326e6ea71a9c9/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74eef05e7d029cee7407ab7939c326e6ea71a9c9/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs?ref=74eef05e7d029cee7407ab7939c326e6ea71a9c9", "patch": "@@ -30,17 +30,16 @@ pub fn expand_deriving_from_primitive<F>(cx: &mut ExtCtxt,\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n-        path: Path::new(vec!(\"std\", \"num\", \"FromPrimitive\")),\n+        path: path!(std::num::FromPrimitive),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         methods: vec!(\n             MethodDef {\n                 name: \"from_i64\",\n                 generics: LifetimeBounds::empty(),\n                 explicit_self: None,\n-                args: vec!(\n-                    Literal(Path::new(vec!(\"i64\")))),\n-                ret_ty: Literal(Path::new_(vec!(\"std\", \"option\", \"Option\"),\n+                args: vec!(Literal(path!(i64))),\n+                ret_ty: Literal(Path::new_(pathvec!(std::option::Option),\n                                            None,\n                                            vec!(box Self),\n                                            true)),\n@@ -54,9 +53,8 @@ pub fn expand_deriving_from_primitive<F>(cx: &mut ExtCtxt,\n                 name: \"from_u64\",\n                 generics: LifetimeBounds::empty(),\n                 explicit_self: None,\n-                args: vec!(\n-                    Literal(Path::new(vec!(\"u64\")))),\n-                ret_ty: Literal(Path::new_(vec!(\"std\", \"option\", \"Option\"),\n+                args: vec!(Literal(path!(u64))),\n+                ret_ty: Literal(Path::new_(pathvec!(std::option::Option),\n                                            None,\n                                            vec!(box Self),\n                                            true)),"}, {"sha": "84486f770fa17123a856f6b592e30ab0bfe82e57", "filename": "src/libsyntax/ext/deriving/rand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74eef05e7d029cee7407ab7939c326e6ea71a9c9/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74eef05e7d029cee7407ab7939c326e6ea71a9c9/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs?ref=74eef05e7d029cee7407ab7939c326e6ea71a9c9", "patch": "@@ -31,7 +31,7 @@ pub fn expand_deriving_rand<F>(cx: &mut ExtCtxt,\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n-        path: Path::new(vec!(\"std\", \"rand\", \"Rand\")),\n+        path: path!(std::rand::Rand),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         methods: vec!(\n@@ -40,7 +40,7 @@ pub fn expand_deriving_rand<F>(cx: &mut ExtCtxt,\n                 generics: LifetimeBounds {\n                     lifetimes: Vec::new(),\n                     bounds: vec!((\"R\",\n-                                  vec!( Path::new(vec!(\"std\", \"rand\", \"Rng\")) )))\n+                                  vec!( path!(std::rand::Rng) ))),\n                 },\n                 explicit_self: None,\n                 args: vec!("}, {"sha": "d12035193f83942f4c26b1c0161e63ca66a3394e", "filename": "src/libsyntax/ext/deriving/show.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74eef05e7d029cee7407ab7939c326e6ea71a9c9/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74eef05e7d029cee7407ab7939c326e6ea71a9c9/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs?ref=74eef05e7d029cee7407ab7939c326e6ea71a9c9", "patch": "@@ -29,13 +29,13 @@ pub fn expand_deriving_show<F>(cx: &mut ExtCtxt,\n     F: FnOnce(P<Item>),\n {\n     // &mut ::std::fmt::Formatter\n-    let fmtr = Ptr(box Literal(Path::new(vec!(\"std\", \"fmt\", \"Formatter\"))),\n+    let fmtr = Ptr(box Literal(path!(std::fmt::Formatter)),\n                    Borrowed(None, ast::MutMutable));\n \n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n-        path: Path::new(vec![\"std\", \"fmt\", \"Debug\"]),\n+        path: path!(std::fmt::Debug),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         methods: vec![\n@@ -44,7 +44,7 @@ pub fn expand_deriving_show<F>(cx: &mut ExtCtxt,\n                 generics: LifetimeBounds::empty(),\n                 explicit_self: borrowed_explicit_self(),\n                 args: vec!(fmtr),\n-                ret_ty: Literal(Path::new(vec!(\"std\", \"fmt\", \"Result\"))),\n+                ret_ty: Literal(path!(std::fmt::Result)),\n                 attributes: Vec::new(),\n                 combine_substructure: combine_substructure(box |a, b, c| {\n                     show_substructure(a, b, c)"}]}