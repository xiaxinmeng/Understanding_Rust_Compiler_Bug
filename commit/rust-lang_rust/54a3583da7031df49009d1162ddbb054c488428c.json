{"sha": "54a3583da7031df49009d1162ddbb054c488428c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0YTM1ODNkYTcwMzFkZjQ5MDA5ZDExNjJkZGJiMDU0YzQ4ODQyOGM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-08T15:44:33Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-08T15:44:33Z"}, "message": "it's auto traits that make for automatic implementations", "tree": {"sha": "40fb37627a5ace471c0ff15965c69a797fc85ada", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40fb37627a5ace471c0ff15965c69a797fc85ada"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54a3583da7031df49009d1162ddbb054c488428c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54a3583da7031df49009d1162ddbb054c488428c", "html_url": "https://github.com/rust-lang/rust/commit/54a3583da7031df49009d1162ddbb054c488428c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54a3583da7031df49009d1162ddbb054c488428c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25a75a4d8633b9a71b47dbc1cd3c84248725425b", "url": "https://api.github.com/repos/rust-lang/rust/commits/25a75a4d8633b9a71b47dbc1cd3c84248725425b", "html_url": "https://github.com/rust-lang/rust/commit/25a75a4d8633b9a71b47dbc1cd3c84248725425b"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "5c87035d8e929214e11ced115b76469307e2923a", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54a3583da7031df49009d1162ddbb054c488428c/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54a3583da7031df49009d1162ddbb054c488428c/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=54a3583da7031df49009d1162ddbb054c488428c", "patch": "@@ -79,7 +79,7 @@ pub use core::panic::{PanicInfo, Location};\n ///\n /// Simply put, a type `T` implements `UnwindSafe` if it cannot easily allow\n /// witnessing a broken invariant through the use of `catch_unwind` (catching a\n-/// panic). This trait is a marker trait, so it is automatically implemented for\n+/// panic). This trait is an auto trait, so it is automatically implemented for\n /// many types, and it is also structurally composed (e.g. a struct is unwind\n /// safe if all of its components are unwind safe).\n ///"}]}