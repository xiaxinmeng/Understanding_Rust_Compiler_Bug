{"sha": "3ac1a9b50d95fd2665069c512d2b09b6edfc554f", "node_id": "C_kwDOAAsO6NoAKDNhYzFhOWI1MGQ5NWZkMjY2NTA2OWM1MTJkMmIwOWI2ZWRmYzU1NGY", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-07-05T05:19:53Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-07-05T05:21:38Z"}, "message": "rustdoc: filter '_ lifetimes from ty::Generics\n\nFixes a weirdly-rendered section of the std::string::String docs.", "tree": {"sha": "1397a513dc5909ba671b43d6a636b715404eebdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1397a513dc5909ba671b43d6a636b715404eebdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ac1a9b50d95fd2665069c512d2b09b6edfc554f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ac1a9b50d95fd2665069c512d2b09b6edfc554f", "html_url": "https://github.com/rust-lang/rust/commit/3ac1a9b50d95fd2665069c512d2b09b6edfc554f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ac1a9b50d95fd2665069c512d2b09b6edfc554f/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b9775fe17893cba641a071de7e0a7c8f478c41b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b9775fe17893cba641a071de7e0a7c8f478c41b", "html_url": "https://github.com/rust-lang/rust/commit/5b9775fe17893cba641a071de7e0a7c8f478c41b"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "4d33b7a376a2310f57d82d018b6cab756957060b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ac1a9b50d95fd2665069c512d2b09b6edfc554f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ac1a9b50d95fd2665069c512d2b09b6edfc554f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3ac1a9b50d95fd2665069c512d2b09b6edfc554f", "patch": "@@ -629,6 +629,7 @@ fn clean_ty_generics<'tcx>(\n         .params\n         .iter()\n         .filter_map(|param| match param.kind {\n+            ty::GenericParamDefKind::Lifetime if param.name == kw::UnderscoreLifetime => None,\n             ty::GenericParamDefKind::Lifetime => Some(param.clean(cx)),\n             ty::GenericParamDefKind::Type { synthetic, .. } => {\n                 if param.name == kw::SelfUpper {"}, {"sha": "4e55e7ed576302c31bb28948d43d36d7be17cba6", "filename": "src/test/rustdoc/auxiliary/issue-98697-reexport-with-anonymous-lifetime.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ac1a9b50d95fd2665069c512d2b09b6edfc554f/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-98697-reexport-with-anonymous-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ac1a9b50d95fd2665069c512d2b09b6edfc554f/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-98697-reexport-with-anonymous-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-98697-reexport-with-anonymous-lifetime.rs?ref=3ac1a9b50d95fd2665069c512d2b09b6edfc554f", "patch": "@@ -7,3 +7,11 @@ where\n {\n     unimplemented!()\n }\n+\n+pub struct Extra;\n+\n+pub trait MyTrait<T> {\n+    fn run() {}\n+}\n+\n+impl MyTrait<&Extra> for Extra {}"}, {"sha": "83e08094c09534abf9da016c5c95fd7c42c8e9e9", "filename": "src/test/rustdoc/issue-98697.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ac1a9b50d95fd2665069c512d2b09b6edfc554f/src%2Ftest%2Frustdoc%2Fissue-98697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ac1a9b50d95fd2665069c512d2b09b6edfc554f/src%2Ftest%2Frustdoc%2Fissue-98697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-98697.rs?ref=3ac1a9b50d95fd2665069c512d2b09b6edfc554f", "patch": "@@ -11,3 +11,7 @@ extern crate issue_98697_reexport_with_anonymous_lifetime;\n // @has issue_98697/fn.repro.html '//pre[@class=\"rust fn\"]/code' 'fn repro<F>() where F: Fn(&str)'\n // @!has issue_98697/fn.repro.html '//pre[@class=\"rust fn\"]/code' 'for<'\n pub use issue_98697_reexport_with_anonymous_lifetime::repro;\n+\n+// @has issue_98697/struct.Extra.html '//div[@id=\"trait-implementations-list\"]//h3[@class=\"code-header in-band\"]' 'impl MyTrait<&Extra> for Extra'\n+// @!has issue_98697/struct.Extra.html '//div[@id=\"trait-implementations-list\"]//h3[@class=\"code-header in-band\"]' 'impl<'\n+pub use issue_98697_reexport_with_anonymous_lifetime::Extra;"}]}