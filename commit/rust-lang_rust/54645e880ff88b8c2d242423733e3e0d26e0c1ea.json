{"sha": "54645e880ff88b8c2d242423733e3e0d26e0c1ea", "node_id": "C_kwDOAAsO6NoAKDU0NjQ1ZTg4MGZmODhiOGMyZDI0MjQyMzczM2UzZTBkMjZlMGMxZWE", "commit": {"author": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-08-23T19:25:03Z"}, "committer": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-08-31T16:56:38Z"}, "message": "set up rustc_metadata for SessionDiagnostics, port dependency_format.rs", "tree": {"sha": "063f8e236910b2d0779c597a6d0d872d7f74be25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/063f8e236910b2d0779c597a6d0d872d7f74be25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54645e880ff88b8c2d242423733e3e0d26e0c1ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54645e880ff88b8c2d242423733e3e0d26e0c1ea", "html_url": "https://github.com/rust-lang/rust/commit/54645e880ff88b8c2d242423733e3e0d26e0c1ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54645e880ff88b8c2d242423733e3e0d26e0c1ea/comments", "author": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "committer": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "parents": [{"sha": "4fd4de7ea358ad6fc28c5780533ea8ccc09e1006", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fd4de7ea358ad6fc28c5780533ea8ccc09e1006", "html_url": "https://github.com/rust-lang/rust/commit/4fd4de7ea358ad6fc28c5780533ea8ccc09e1006"}], "stats": {"total": 156, "additions": 103, "deletions": 53}, "files": [{"sha": "a27e7654464273fc8d63b12a24d5ffd0c9cc798b", "filename": "compiler/rustc_error_messages/locales/en-US/metadata.ftl", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/54645e880ff88b8c2d242423733e3e0d26e0c1ea/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmetadata.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/54645e880ff88b8c2d242423733e3e0d26e0c1ea/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmetadata.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmetadata.ftl?ref=54645e880ff88b8c2d242423733e3e0d26e0c1ea", "patch": "@@ -0,0 +1,21 @@\n+metadata_rlib_required =\n+    crate `{$crate_name}` required to be available in rlib format, but was not found in this form\n+\n+metadata_lib_required =\n+    crate `{$crate_name}` required to be available in {$kind} format, but was not found in this form\n+\n+metadata_crate_dep_multiple =\n+    cannot satisfy dependencies so `{$crate_name}` only shows up once\n+    .help = having upstream crates all available in one format will likely make this go away\n+\n+metadata_two_panic_runtimes =\n+    cannot link together two panic runtimes: {$prev_name} and {$cur_name}\n+\n+metadata_bad_panic_strategy =\n+    the linked panic runtime `{$runtime}` is not compiled with this crate's panic strategy `{$strategy}`\n+\n+metadata_required_panic_strategy =\n+    the crate `{$crate_name}` requires panic strategy `{$found_strategy}` which is incompatible with this crate's strategy of `{$desired_strategy}`\n+\n+metadata_incompatible_panic_in_drop_strategy =\n+    the crate `{$crate_name}` is compiled with the panic-in-drop strategy `{$found_strategy}` which is incompatible with this crate's strategy of `{$desired_strategy}`"}, {"sha": "72174d1f75d12ba2232fb63f9e53147074032c9b", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/54645e880ff88b8c2d242423733e3e0d26e0c1ea/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54645e880ff88b8c2d242423733e3e0d26e0c1ea/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=54645e880ff88b8c2d242423733e3e0d26e0c1ea", "patch": "@@ -46,6 +46,7 @@ fluent_messages! {\n     infer => \"../locales/en-US/infer.ftl\",\n     lint => \"../locales/en-US/lint.ftl\",\n     monomorphize => \"../locales/en-US/monomorphize.ftl\",\n+    metadata => \"../locales/en-US/metadata.ftl\",\n     parser => \"../locales/en-US/parser.ftl\",\n     passes => \"../locales/en-US/passes.ftl\",\n     plugin_impl => \"../locales/en-US/plugin_impl.ftl\","}, {"sha": "5d1082acc0beb99e8579fad4a2d4529fe4c1602b", "filename": "compiler/rustc_metadata/src/dependency_format.rs", "status": "modified", "additions": 26, "deletions": 53, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/54645e880ff88b8c2d242423733e3e0d26e0c1ea/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54645e880ff88b8c2d242423733e3e0d26e0c1ea/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs?ref=54645e880ff88b8c2d242423733e3e0d26e0c1ea", "patch": "@@ -52,6 +52,10 @@\n //! than finding a number of solutions (there are normally quite a few).\n \n use crate::creader::CStore;\n+use crate::errors::{\n+    BadPanicStrategy, CrateDepMultiple, IncompatiblePanicInDropStrategy, LibRequired,\n+    RequiredPanicStrategy, RlibRequired, TwoPanicRuntimes,\n+};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::CrateNum;\n@@ -136,11 +140,7 @@ fn calculate_type(tcx: TyCtxt<'_>, ty: CrateType) -> DependencyList {\n                 if src.rlib.is_some() {\n                     continue;\n                 }\n-                sess.err(&format!(\n-                    \"crate `{}` required to be available in rlib format, \\\n-                                   but was not found in this form\",\n-                    tcx.crate_name(cnum)\n-                ));\n+                sess.emit_err(RlibRequired { crate_name: tcx.crate_name(cnum).to_string() });\n             }\n             return Vec::new();\n         }\n@@ -224,12 +224,10 @@ fn calculate_type(tcx: TyCtxt<'_>, ty: CrateType) -> DependencyList {\n                     Linkage::Static => \"rlib\",\n                     _ => \"dylib\",\n                 };\n-                sess.err(&format!(\n-                    \"crate `{}` required to be available in {} format, \\\n-                                   but was not found in this form\",\n-                    tcx.crate_name(cnum),\n-                    kind\n-                ));\n+                sess.emit_err(LibRequired {\n+                    crate_name: tcx.crate_name(cnum).to_string(),\n+                    kind: kind.to_string(),\n+                });\n             }\n         }\n     }\n@@ -254,16 +252,7 @@ fn add_library(\n             // can be refined over time.\n             if link2 != link || link == RequireStatic {\n                 tcx.sess\n-                    .struct_err(&format!(\n-                        \"cannot satisfy dependencies so `{}` only \\\n-                                              shows up once\",\n-                        tcx.crate_name(cnum)\n-                    ))\n-                    .help(\n-                        \"having upstream crates all available in one format \\\n-                           will likely make this go away\",\n-                    )\n-                    .emit();\n+                    .emit_err(CrateDepMultiple { crate_name: tcx.crate_name(cnum).to_string() });\n             }\n         }\n         None => {\n@@ -358,13 +347,9 @@ fn verify_ok(tcx: TyCtxt<'_>, list: &[Linkage]) {\n \n         if tcx.is_panic_runtime(cnum) {\n             if let Some((prev, _)) = panic_runtime {\n-                let prev_name = tcx.crate_name(prev);\n-                let cur_name = tcx.crate_name(cnum);\n-                sess.err(&format!(\n-                    \"cannot link together two \\\n-                                   panic runtimes: {} and {}\",\n-                    prev_name, cur_name\n-                ));\n+                let prev_name = tcx.crate_name(prev).to_string();\n+                let cur_name = tcx.crate_name(cnum).to_string();\n+                sess.emit_err(TwoPanicRuntimes { prev_name, cur_name });\n             }\n             panic_runtime = Some((\n                 cnum,\n@@ -384,13 +369,10 @@ fn verify_ok(tcx: TyCtxt<'_>, list: &[Linkage]) {\n         // First up, validate that our selected panic runtime is indeed exactly\n         // our same strategy.\n         if found_strategy != desired_strategy {\n-            sess.err(&format!(\n-                \"the linked panic runtime `{}` is \\\n-                               not compiled with this crate's \\\n-                               panic strategy `{}`\",\n-                tcx.crate_name(runtime_cnum),\n-                desired_strategy.desc()\n-            ));\n+            sess.emit_err(BadPanicStrategy {\n+                runtime: tcx.crate_name(runtime_cnum).to_string(),\n+                strategy: desired_strategy.desc().to_string(),\n+            });\n         }\n \n         // Next up, verify that all other crates are compatible with this panic\n@@ -407,28 +389,19 @@ fn verify_ok(tcx: TyCtxt<'_>, list: &[Linkage]) {\n             }\n \n             if let Some(found_strategy) = tcx.required_panic_strategy(cnum) && desired_strategy != found_strategy {\n-                sess.err(&format!(\n-                    \"the crate `{}` requires \\\n-                               panic strategy `{}` which is \\\n-                               incompatible with this crate's \\\n-                               strategy of `{}`\",\n-                    tcx.crate_name(cnum),\n-                    found_strategy.desc(),\n-                    desired_strategy.desc()\n-                ));\n+                sess.emit_err(RequiredPanicStrategy {\n+                    crate_name: tcx.crate_name(cnum).to_string(),\n+                    found_strategy: found_strategy.desc().to_string(),\n+                    desired_strategy: desired_strategy.desc().to_string() });\n             }\n \n             let found_drop_strategy = tcx.panic_in_drop_strategy(cnum);\n             if tcx.sess.opts.unstable_opts.panic_in_drop != found_drop_strategy {\n-                sess.err(&format!(\n-                    \"the crate `{}` is compiled with the \\\n-                               panic-in-drop strategy `{}` which is \\\n-                               incompatible with this crate's \\\n-                               strategy of `{}`\",\n-                    tcx.crate_name(cnum),\n-                    found_drop_strategy.desc(),\n-                    tcx.sess.opts.unstable_opts.panic_in_drop.desc()\n-                ));\n+                sess.emit_err(IncompatiblePanicInDropStrategy {\n+                    crate_name: tcx.crate_name(cnum).to_string(),\n+                    found_strategy: found_drop_strategy.desc().to_string(),\n+                    desired_strategy: tcx.sess.opts.unstable_opts.panic_in_drop.desc().to_string(),\n+                });\n             }\n         }\n     }"}, {"sha": "702863c376b931268b10af8f52f1262e727b3fad", "filename": "compiler/rustc_metadata/src/errors.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/54645e880ff88b8c2d242423733e3e0d26e0c1ea/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54645e880ff88b8c2d242423733e3e0d26e0c1ea/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs?ref=54645e880ff88b8c2d242423733e3e0d26e0c1ea", "patch": "@@ -0,0 +1,52 @@\n+// use rustc_errors::ErrorGuaranteed;\n+use rustc_macros::SessionDiagnostic;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(metadata::rlib_required)]\n+pub struct RlibRequired {\n+    pub crate_name: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(metadata::lib_required)]\n+pub struct LibRequired {\n+    pub crate_name: String,\n+    pub kind: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(metadata::crate_dep_multiple)]\n+#[help]\n+pub struct CrateDepMultiple {\n+    pub crate_name: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(metadata::two_panic_runtimes)]\n+pub struct TwoPanicRuntimes {\n+    pub prev_name: String,\n+    pub cur_name: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(metadata::bad_panic_strategy)]\n+pub struct BadPanicStrategy {\n+    pub runtime: String,\n+    pub strategy: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(metadata::required_panic_strategy)]\n+pub struct RequiredPanicStrategy {\n+    pub crate_name: String,\n+    pub found_strategy: String,\n+    pub desired_strategy: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(metadata::incompatible_panic_in_drop_strategy)]\n+pub struct IncompatiblePanicInDropStrategy {\n+    pub crate_name: String,\n+    pub found_strategy: String,\n+    pub desired_strategy: String,\n+}"}, {"sha": "fae5b664f4e431d0583d0ea4fd59830ae618423d", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54645e880ff88b8c2d242423733e3e0d26e0c1ea/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54645e880ff88b8c2d242423733e3e0d26e0c1ea/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=54645e880ff88b8c2d242423733e3e0d26e0c1ea", "patch": "@@ -16,6 +16,8 @@\n #![feature(never_type)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n \n extern crate proc_macro;\n \n@@ -34,6 +36,7 @@ mod native_libs;\n mod rmeta;\n \n pub mod creader;\n+pub mod errors;\n pub mod fs;\n pub mod locator;\n "}]}