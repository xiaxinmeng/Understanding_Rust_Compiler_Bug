{"sha": "01fbc5ae789fc0c7a2da71d3cd908451f175e4eb", "node_id": "C_kwDOAAsO6NoAKDAxZmJjNWFlNzg5ZmMwYzdhMmRhNzFkM2NkOTA4NDUxZjE3NWU0ZWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-07T13:52:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-07T13:52:52Z"}, "message": "Auto merge of #103459 - ChrisDenton:propagate-nulls, r=thomcc\n\nPass on null handle values to child process\n\nFixes #101645\n\nIn Windows, stdio handles are (semantically speaking) `Option<Handle>` where `Handle` is a non-zero value. When spawning a process with `Stdio::Inherit`, Rust currently turns zero values into `-1` values. This has the unfortunate effect of breaking console subprocesses (which typically need stdio) that are spawned from gui applications (that lack stdio by default) because the console process won't be assigned handles from the newly created console (as they usually would in that situation). Worse, `-1` is actually [a valid handle](https://doc.rust-lang.org/std/os/windows/io/struct.OwnedHandle.html) which means \"the current process\". So if a console process, for example, waits on stdin and it has a `-1` value then the process will end up waiting on itself.\n\nThis PR fixes it by propagating the nulls instead of converting them to `-1`.\n\nWhile I think the current behaviour is a mistake, changing it (however justified) is an API change so I think this PR should at least have some input from t-libs-api. So choosing at random...\n\nr? `@joshtriplett`", "tree": {"sha": "b5b7cc6674469e94e328d494e162d34fb5b49ddd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5b7cc6674469e94e328d494e162d34fb5b49ddd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01fbc5ae789fc0c7a2da71d3cd908451f175e4eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01fbc5ae789fc0c7a2da71d3cd908451f175e4eb", "html_url": "https://github.com/rust-lang/rust/commit/01fbc5ae789fc0c7a2da71d3cd908451f175e4eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01fbc5ae789fc0c7a2da71d3cd908451f175e4eb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91b8f34ac2272e3c94a97bebc033abe8e2f17101", "url": "https://api.github.com/repos/rust-lang/rust/commits/91b8f34ac2272e3c94a97bebc033abe8e2f17101", "html_url": "https://github.com/rust-lang/rust/commit/91b8f34ac2272e3c94a97bebc033abe8e2f17101"}, {"sha": "93b774a2a47e813fd01481dab480d4be785c4427", "url": "https://api.github.com/repos/rust-lang/rust/commits/93b774a2a47e813fd01481dab480d4be785c4427", "html_url": "https://github.com/rust-lang/rust/commit/93b774a2a47e813fd01481dab480d4be785c4427"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "31e9b34fb9efdf1739cebdd4b100977fb5269af8", "filename": "library/std/src/sys/windows/process.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/01fbc5ae789fc0c7a2da71d3cd908451f175e4eb/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fbc5ae789fc0c7a2da71d3cd908451f175e4eb/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs?ref=01fbc5ae789fc0c7a2da71d3cd908451f175e4eb", "patch": "@@ -252,10 +252,6 @@ impl Command {\n     ) -> io::Result<(Process, StdioPipes)> {\n         let maybe_env = self.env.capture_if_changed();\n \n-        let mut si = zeroed_startupinfo();\n-        si.cb = mem::size_of::<c::STARTUPINFO>() as c::DWORD;\n-        si.dwFlags = c::STARTF_USESTDHANDLES;\n-\n         let child_paths = if let Some(env) = maybe_env.as_ref() {\n             env.get(&EnvKey::new(\"PATH\")).map(|s| s.as_os_str())\n         } else {\n@@ -314,9 +310,21 @@ impl Command {\n         let stdin = stdin.to_handle(c::STD_INPUT_HANDLE, &mut pipes.stdin)?;\n         let stdout = stdout.to_handle(c::STD_OUTPUT_HANDLE, &mut pipes.stdout)?;\n         let stderr = stderr.to_handle(c::STD_ERROR_HANDLE, &mut pipes.stderr)?;\n-        si.hStdInput = stdin.as_raw_handle();\n-        si.hStdOutput = stdout.as_raw_handle();\n-        si.hStdError = stderr.as_raw_handle();\n+\n+        let mut si = zeroed_startupinfo();\n+        si.cb = mem::size_of::<c::STARTUPINFO>() as c::DWORD;\n+\n+        // If at least one of stdin, stdout or stderr are set (i.e. are non null)\n+        // then set the `hStd` fields in `STARTUPINFO`.\n+        // Otherwise skip this and allow the OS to apply its default behaviour.\n+        // This provides more consistent behaviour between Win7 and Win8+.\n+        let is_set = |stdio: &Handle| !stdio.as_raw_handle().is_null();\n+        if is_set(&stderr) || is_set(&stdout) || is_set(&stdin) {\n+            si.dwFlags |= c::STARTF_USESTDHANDLES;\n+            si.hStdInput = stdin.as_raw_handle();\n+            si.hStdOutput = stdout.as_raw_handle();\n+            si.hStdError = stderr.as_raw_handle();\n+        }\n \n         unsafe {\n             cvt(c::CreateProcessW(\n@@ -513,17 +521,15 @@ fn program_exists(path: &Path) -> Option<Vec<u16>> {\n impl Stdio {\n     fn to_handle(&self, stdio_id: c::DWORD, pipe: &mut Option<AnonPipe>) -> io::Result<Handle> {\n         match *self {\n-            // If no stdio handle is available, then inherit means that it\n-            // should still be unavailable so propagate the\n-            // INVALID_HANDLE_VALUE.\n             Stdio::Inherit => match stdio::get_handle(stdio_id) {\n                 Ok(io) => unsafe {\n                     let io = Handle::from_raw_handle(io);\n                     let ret = io.duplicate(0, true, c::DUPLICATE_SAME_ACCESS);\n                     io.into_raw_handle();\n                     ret\n                 },\n-                Err(..) => unsafe { Ok(Handle::from_raw_handle(c::INVALID_HANDLE_VALUE)) },\n+                // If no stdio handle is available, then propagate the null value.\n+                Err(..) => unsafe { Ok(Handle::from_raw_handle(ptr::null_mut())) },\n             },\n \n             Stdio::MakePipe => {\n@@ -730,9 +736,9 @@ fn zeroed_startupinfo() -> c::STARTUPINFO {\n         wShowWindow: 0,\n         cbReserved2: 0,\n         lpReserved2: ptr::null_mut(),\n-        hStdInput: c::INVALID_HANDLE_VALUE,\n-        hStdOutput: c::INVALID_HANDLE_VALUE,\n-        hStdError: c::INVALID_HANDLE_VALUE,\n+        hStdInput: ptr::null_mut(),\n+        hStdOutput: ptr::null_mut(),\n+        hStdError: ptr::null_mut(),\n     }\n }\n "}]}