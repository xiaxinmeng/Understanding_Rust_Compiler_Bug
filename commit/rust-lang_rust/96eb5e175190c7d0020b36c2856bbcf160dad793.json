{"sha": "96eb5e175190c7d0020b36c2856bbcf160dad793", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2ZWI1ZTE3NTE5MGM3ZDAwMjBiMzZjMjg1NmJiY2YxNjBkYWQ3OTM=", "commit": {"author": {"name": "Leonora Tindall", "email": "nora@nora.codes", "date": "2020-09-02T19:12:21Z"}, "committer": {"name": "Leonora Tindall", "email": "nora@nora.codes", "date": "2020-09-02T19:12:21Z"}, "message": "Format ControlFlow changes with rustfmt", "tree": {"sha": "31c7f6827834924ea3e33119e94fc387582f0b4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31c7f6827834924ea3e33119e94fc387582f0b4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96eb5e175190c7d0020b36c2856bbcf160dad793", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96eb5e175190c7d0020b36c2856bbcf160dad793", "html_url": "https://github.com/rust-lang/rust/commit/96eb5e175190c7d0020b36c2856bbcf160dad793", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96eb5e175190c7d0020b36c2856bbcf160dad793/comments", "author": {"login": "NoraCodes", "id": 3290365, "node_id": "MDQ6VXNlcjMyOTAzNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/3290365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NoraCodes", "html_url": "https://github.com/NoraCodes", "followers_url": "https://api.github.com/users/NoraCodes/followers", "following_url": "https://api.github.com/users/NoraCodes/following{/other_user}", "gists_url": "https://api.github.com/users/NoraCodes/gists{/gist_id}", "starred_url": "https://api.github.com/users/NoraCodes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NoraCodes/subscriptions", "organizations_url": "https://api.github.com/users/NoraCodes/orgs", "repos_url": "https://api.github.com/users/NoraCodes/repos", "events_url": "https://api.github.com/users/NoraCodes/events{/privacy}", "received_events_url": "https://api.github.com/users/NoraCodes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "NoraCodes", "id": 3290365, "node_id": "MDQ6VXNlcjMyOTAzNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/3290365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NoraCodes", "html_url": "https://github.com/NoraCodes", "followers_url": "https://api.github.com/users/NoraCodes/followers", "following_url": "https://api.github.com/users/NoraCodes/following{/other_user}", "gists_url": "https://api.github.com/users/NoraCodes/gists{/gist_id}", "starred_url": "https://api.github.com/users/NoraCodes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NoraCodes/subscriptions", "organizations_url": "https://api.github.com/users/NoraCodes/orgs", "repos_url": "https://api.github.com/users/NoraCodes/repos", "events_url": "https://api.github.com/users/NoraCodes/events{/privacy}", "received_events_url": "https://api.github.com/users/NoraCodes/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0af12560c9672546a6434e2e1e9ec72ad8f8e70", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0af12560c9672546a6434e2e1e9ec72ad8f8e70", "html_url": "https://github.com/rust-lang/rust/commit/d0af12560c9672546a6434e2e1e9ec72ad8f8e70"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "f32c3963abea2e369da8dfae3230a93e7baafb73", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96eb5e175190c7d0020b36c2856bbcf160dad793/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96eb5e175190c7d0020b36c2856bbcf160dad793/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=96eb5e175190c7d0020b36c2856bbcf160dad793", "patch": "@@ -1,7 +1,7 @@\n use crate::cmp;\n use crate::fmt;\n use crate::intrinsics;\n-use crate::ops::{Add, AddAssign, Try, ControlFlow};\n+use crate::ops::{Add, AddAssign, ControlFlow, Try};\n \n use super::from_fn;\n use super::{DoubleEndedIterator, ExactSizeIterator, FusedIterator, Iterator, TrustedLen};"}, {"sha": "fac6693aff07961a5db86f93b3090ae7b515f2c5", "filename": "library/core/src/iter/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/96eb5e175190c7d0020b36c2856bbcf160dad793/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96eb5e175190c7d0020b36c2856bbcf160dad793/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs?ref=96eb5e175190c7d0020b36c2856bbcf160dad793", "patch": "@@ -365,4 +365,3 @@ mod adapters;\n mod range;\n mod sources;\n mod traits;\n-"}, {"sha": "25230519f3744f1b18d5cf7978417faeee8d6733", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96eb5e175190c7d0020b36c2856bbcf160dad793/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96eb5e175190c7d0020b36c2856bbcf160dad793/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=96eb5e175190c7d0020b36c2856bbcf160dad793", "patch": "@@ -1,4 +1,4 @@\n-use crate::ops::{Try, ControlFlow};\n+use crate::ops::{ControlFlow, Try};\n \n /// An iterator able to yield elements from both ends.\n ///"}, {"sha": "657d04a4d6288a5192c86756d2cfa0c2cb7e122d", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/96eb5e175190c7d0020b36c2856bbcf160dad793/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96eb5e175190c7d0020b36c2856bbcf160dad793/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=96eb5e175190c7d0020b36c2856bbcf160dad793", "patch": "@@ -3,7 +3,7 @@\n // can't split that into multiple files.\n \n use crate::cmp::{self, Ordering};\n-use crate::ops::{Add, Try, ControlFlow};\n+use crate::ops::{Add, ControlFlow, Try};\n \n use super::super::TrustedRandomAccess;\n use super::super::{Chain, Cloned, Copied, Cycle, Enumerate, Filter, FilterMap, Fuse};\n@@ -2234,7 +2234,9 @@ pub trait Iterator {\n         F: FnMut(Self::Item) -> Option<B>,\n     {\n         #[inline]\n-        fn check<T, B>(mut f: impl FnMut(T) -> Option<B>) -> impl FnMut((), T) -> ControlFlow<(), B> {\n+        fn check<T, B>(\n+            mut f: impl FnMut(T) -> Option<B>,\n+        ) -> impl FnMut((), T) -> ControlFlow<(), B> {\n             move |(), x| match f(x) {\n                 Some(x) => ControlFlow::Break(x),\n                 None => ControlFlow::Continue(()),\n@@ -2354,7 +2356,11 @@ pub trait Iterator {\n         ) -> impl FnMut(usize, T) -> ControlFlow<usize, usize> {\n             // The addition might panic on overflow\n             move |i, x| {\n-                if predicate(x) { ControlFlow::Break(i) } else { ControlFlow::Continue(Add::add(i, 1)) }\n+                if predicate(x) {\n+                    ControlFlow::Break(i)\n+                } else {\n+                    ControlFlow::Continue(Add::add(i, 1))\n+                }\n             }\n         }\n "}, {"sha": "687d423dcb6350f2fda54c4baba4f2e6389c2ae9", "filename": "library/core/src/ops/control_flow.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/96eb5e175190c7d0020b36c2856bbcf160dad793/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96eb5e175190c7d0020b36c2856bbcf160dad793/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs?ref=96eb5e175190c7d0020b36c2856bbcf160dad793", "patch": "@@ -1,7 +1,7 @@\n use crate::ops::Try;\n \n /// Used to make try_fold closures more like normal loops\n-#[unstable(feature=\"control_flow_enum\", reason=\"new API\", issue=\"75744\")]\n+#[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n #[derive(Debug, Clone, Copy, PartialEq)]\n pub enum ControlFlow<C, B> {\n     /// Continue in the loop, using the given value for the next iteration\n@@ -10,7 +10,7 @@ pub enum ControlFlow<C, B> {\n     Break(B),\n }\n \n-#[unstable(feature=\"control_flow_enum\", reason=\"new API\", issue=\"75744\")]\n+#[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n impl<C, B> Try for ControlFlow<C, B> {\n     type Ok = C;\n     type Error = B;\n@@ -35,7 +35,7 @@ impl<C, B> ControlFlow<C, B> {\n     /// Converts the `ControlFlow` into an `Option` which is `Some` if the\n     /// `ControlFlow` was `Break` and `None` otherwise.\n     #[inline]\n-    #[unstable(feature=\"control_flow_enum\", reason=\"new API\", issue=\"75744\")]\n+    #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n     pub fn break_value(self) -> Option<B> {\n         match self {\n             ControlFlow::Continue(..) => None,\n@@ -46,7 +46,7 @@ impl<C, B> ControlFlow<C, B> {\n \n impl<R: Try> ControlFlow<R::Ok, R> {\n     /// Create a `ControlFlow` from any type implementing `Try`.\n-    #[unstable(feature=\"control_flow_enum\", reason=\"new API\", issue=\"75744\")]\n+    #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n     #[inline]\n     pub fn from_try(r: R) -> Self {\n         match Try::into_result(r) {\n@@ -56,7 +56,7 @@ impl<R: Try> ControlFlow<R::Ok, R> {\n     }\n \n     /// Convert a `ControlFlow` into any type implementing `Try`;\n-    #[unstable(feature=\"control_flow_enum\", reason=\"new API\", issue=\"75744\")]\n+    #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n     #[inline]\n     pub fn into_try(self) -> R {\n         match self {"}, {"sha": "2a4186f9d5db9cdb63f6c84e42f4206fddcaa6b7", "filename": "library/core/src/ops/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96eb5e175190c7d0020b36c2856bbcf160dad793/library%2Fcore%2Fsrc%2Fops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96eb5e175190c7d0020b36c2856bbcf160dad793/library%2Fcore%2Fsrc%2Fops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fmod.rs?ref=96eb5e175190c7d0020b36c2856bbcf160dad793", "patch": "@@ -140,6 +140,7 @@\n \n mod arith;\n mod bit;\n+mod control_flow;\n mod deref;\n mod drop;\n mod function;\n@@ -148,7 +149,6 @@ mod index;\n mod range;\n mod r#try;\n mod unsize;\n-mod control_flow;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::arith::{Add, Div, Mul, Neg, Rem, Sub};\n@@ -193,5 +193,5 @@ pub use self::unsize::CoerceUnsized;\n #[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]\n pub use self::unsize::DispatchFromDyn;\n \n-#[unstable(feature=\"control_flow_enum\", reason=\"new API\", issue=\"75744\")]\n+#[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n pub use self::control_flow::ControlFlow;"}]}