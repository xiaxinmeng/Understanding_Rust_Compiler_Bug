{"sha": "d313e1579bd8a78a15cde9b17819aa7cfbf6f8c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMTNlMTU3OWJkOGE3OGExNWNkZTliMTc4MTlhYTdjZmJmNmY4YzE=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-01-19T20:02:56Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-01-19T20:02:56Z"}, "message": "Fold function output and argument types. With this change we fail to compile\n\ntype lteq[T] = fn(&T a) -> bool;\n\nwith \"unresolved name: T\". Before we would silently get to the type checker\nand assert in a unresolved ty_path.", "tree": {"sha": "0a05cb036f8f2a78d877f95b6d49ddebf19f58ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a05cb036f8f2a78d877f95b6d49ddebf19f58ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d313e1579bd8a78a15cde9b17819aa7cfbf6f8c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d313e1579bd8a78a15cde9b17819aa7cfbf6f8c1", "html_url": "https://github.com/rust-lang/rust/commit/d313e1579bd8a78a15cde9b17819aa7cfbf6f8c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d313e1579bd8a78a15cde9b17819aa7cfbf6f8c1/comments", "author": null, "committer": null, "parents": [{"sha": "e8d266c6140434a491f046cee62346cfd7cb4d98", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8d266c6140434a491f046cee62346cfd7cb4d98", "html_url": "https://github.com/rust-lang/rust/commit/e8d266c6140434a491f046cee62346cfd7cb4d98"}], "stats": {"total": 18, "additions": 15, "deletions": 3}, "files": [{"sha": "618790ee14ea90ae598a448037324fa179c50474", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d313e1579bd8a78a15cde9b17819aa7cfbf6f8c1/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d313e1579bd8a78a15cde9b17819aa7cfbf6f8c1/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=d313e1579bd8a78a15cde9b17819aa7cfbf6f8c1", "patch": "@@ -307,8 +307,7 @@ fn fold_ty[ENV](&ENV env, ast_fold[ENV] fld, @ty t) -> @ty {\n         case (ast.ty_obj(?meths)) {\n             let vec[ast.ty_method] meths_ = vec();\n             for (ast.ty_method m in meths) {\n-                auto tfn = fld.fold_ty_fn(env_, t.span,\n-                                          m.inputs, m.output);\n+                auto tfn = fold_ty_fn(env_, fld, t.span, m.inputs, m.output);\n                 alt (tfn.node) {\n                     case (ast.ty_fn(?ins, ?out)) {\n                         append[ast.ty_method]\n@@ -330,11 +329,24 @@ fn fold_ty[ENV](&ENV env, ast_fold[ENV] fld, @ty t) -> @ty {\n         }\n \n         case (ast.ty_fn(?inputs, ?output)) {\n-            ret fld.fold_ty_fn(env_, t.span, inputs, output);\n+            ret fold_ty_fn(env_, fld, t.span, inputs, output);\n         }\n     }\n }\n \n+fn fold_ty_fn[ENV](&ENV env, ast_fold[ENV] fld, &span sp,\n+                   vec[rec(ast.mode mode, @ty ty)] inputs,\n+                   @ty output) -> @ty {\n+    auto output_ = fold_ty(env, fld, output);\n+    let vec[rec(ast.mode mode, @ty ty)] inputs_ = vec();\n+    for (rec(ast.mode mode, @ty ty) input in inputs) {\n+        auto ty_ = fold_ty(env, fld, input.ty);\n+        auto input_ = rec(ty=ty_ with input);\n+        inputs_ += vec(input_);\n+    }\n+    ret fld.fold_ty_fn(env, sp, inputs_, output_);\n+}\n+\n fn fold_decl[ENV](&ENV env, ast_fold[ENV] fld, @decl d) -> @decl {\n     let ENV env_ = fld.update_env_for_decl(env, d);\n "}]}