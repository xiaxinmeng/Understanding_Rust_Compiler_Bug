{"sha": "03c9510525c986715af1f1f98c2bc06248c747e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzYzk1MTA1MjVjOTg2NzE1YWYxZjFmOThjMmJjMDYyNDhjNzQ3ZTg=", "commit": {"author": {"name": "Felix Raimundo", "email": "felix.raimundo@tweag.io", "date": "2017-05-07T19:43:46Z"}, "committer": {"name": "Felix Raimundo", "email": "felix.raimundo@tweag.io", "date": "2017-05-07T19:50:44Z"}, "message": "Fix typos in `thread::park` documentation.", "tree": {"sha": "569d27de5bb676c5075907da26785325fe25d503", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/569d27de5bb676c5075907da26785325fe25d503"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03c9510525c986715af1f1f98c2bc06248c747e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03c9510525c986715af1f1f98c2bc06248c747e8", "html_url": "https://github.com/rust-lang/rust/commit/03c9510525c986715af1f1f98c2bc06248c747e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03c9510525c986715af1f1f98c2bc06248c747e8/comments", "author": null, "committer": null, "parents": [{"sha": "fa0cdaa63f575c81c7cc87239f7dfcc677362c78", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa0cdaa63f575c81c7cc87239f7dfcc677362c78", "html_url": "https://github.com/rust-lang/rust/commit/fa0cdaa63f575c81c7cc87239f7dfcc677362c78"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "4d931682676e197bd4c60b3c15732cc02a3fcf87", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/03c9510525c986715af1f1f98c2bc06248c747e8/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03c9510525c986715af1f1f98c2bc06248c747e8/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=03c9510525c986715af1f1f98c2bc06248c747e8", "patch": "@@ -518,7 +518,7 @@ pub fn sleep(dur: Duration) {\n /// # park and unpark\n ///\n /// Every thread is equipped with some basic low-level blocking support, via the\n-/// [`thread::park`][`park`] function and [`thread::Thread::unpark()`][`unpark`]\n+/// [`thread::park`][`park`] function and [`thread::Thread::unpark`][`unpark`]\n /// method. [`park`] blocks the current thread, which can then be resumed from\n /// another thread by calling the [`unpark`] method on the blocked thread's\n /// handle.\n@@ -555,6 +555,7 @@ pub fn sleep(dur: Duration) {\n ///\n /// ```\n /// use std::thread;\n+/// use std::time::Duration;\n ///\n /// let parked_thread = thread::Builder::new()\n ///     .spawn(|| {\n@@ -598,7 +599,7 @@ pub fn park() {\n /// Blocks unless or until the current thread's token is made available or\n /// the specified duration has been reached (may wake spuriously).\n ///\n-/// The semantics of this function are equivalent to [`park()`][park] except\n+/// The semantics of this function are equivalent to [`park`][park] except\n /// that the thread will be blocked for roughly no longer than `dur`. This\n /// method should not be used for precise timing due to anomalies such as\n /// preemption or platform differences that may not cause the maximum\n@@ -617,7 +618,7 @@ pub fn park_timeout_ms(ms: u32) {\n /// Blocks unless or until the current thread's token is made available or\n /// the specified duration has been reached (may wake spuriously).\n ///\n-/// The semantics of this function are equivalent to [`park()`][park] except\n+/// The semantics of this function are equivalent to [`park`][park] except\n /// that the thread will be blocked for roughly no longer than `dur`. This\n /// method should not be used for precise timing due to anomalies such as\n /// preemption or platform differences that may not cause the maximum\n@@ -780,7 +781,7 @@ impl Thread {\n     /// Atomically makes the handle's token available if it is not already.\n     ///\n     /// Every thread is equipped with some basic low-level blocking support, via\n-    /// the [`park()`][park] function and the `unpark()` method. These can be\n+    /// the [`park`][park] function and the `unpark()` method. These can be\n     /// used as a more CPU-efficient implementation of a spinlock.\n     ///\n     /// See the [park documentation][park] for more details.\n@@ -789,6 +790,7 @@ impl Thread {\n     ///\n     /// ```\n     /// use std::thread;\n+    /// use std::time::Duration;\n     ///\n     /// let parked_thread = thread::Builder::new()\n     ///     .spawn(|| {"}]}