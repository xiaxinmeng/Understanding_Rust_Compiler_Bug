{"sha": "a2fe9935ea6b2cef2cc9b3aca6d1fee3ae15524b", "node_id": "C_kwDOAAsO6NoAKGEyZmU5OTM1ZWE2YjJjZWYyY2M5YjNhY2E2ZDFmZWUzYWUxNTUyNGI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-10T19:46:40Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-10T19:49:02Z"}, "message": "Only warn single-use lifetime when the binders match.", "tree": {"sha": "d1135a074d4fd2fb514e3e371a314328dfbc2bc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1135a074d4fd2fb514e3e371a314328dfbc2bc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2fe9935ea6b2cef2cc9b3aca6d1fee3ae15524b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2fe9935ea6b2cef2cc9b3aca6d1fee3ae15524b", "html_url": "https://github.com/rust-lang/rust/commit/a2fe9935ea6b2cef2cc9b3aca6d1fee3ae15524b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2fe9935ea6b2cef2cc9b3aca6d1fee3ae15524b/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cba14074bb4cc12bfe918eabd0d52a3999b2a461", "url": "https://api.github.com/repos/rust-lang/rust/commits/cba14074bb4cc12bfe918eabd0d52a3999b2a461", "html_url": "https://github.com/rust-lang/rust/commit/cba14074bb4cc12bfe918eabd0d52a3999b2a461"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "d7509cbf10e331da66a5b1def64261b4a4ab0a98", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a2fe9935ea6b2cef2cc9b3aca6d1fee3ae15524b/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2fe9935ea6b2cef2cc9b3aca6d1fee3ae15524b/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=a2fe9935ea6b2cef2cc9b3aca6d1fee3ae15524b", "patch": "@@ -1482,7 +1482,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n             if let Some(&(_, res)) = rib.bindings.get(&normalized_ident) {\n                 self.record_lifetime_res(lifetime.id, res, LifetimeElisionCandidate::Named);\n \n-                if let LifetimeRes::Param { param, .. } = res {\n+                if let LifetimeRes::Param { param, binder } = res {\n                     match self.lifetime_uses.entry(param) {\n                         Entry::Vacant(v) => {\n                             debug!(\"First use of {:?} at {:?}\", res, ident.span);\n@@ -1496,10 +1496,16 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                                     LifetimeRibKind::Item\n                                     | LifetimeRibKind::AnonymousReportError\n                                     | LifetimeRibKind::ElisionFailure => Some(LifetimeUseSet::Many),\n-                                    // An anonymous lifetime is legal here, go ahead.\n-                                    LifetimeRibKind::AnonymousCreateParameter { .. } => {\n-                                        Some(LifetimeUseSet::One { use_span: ident.span, use_ctxt })\n-                                    }\n+                                    // An anonymous lifetime is legal here, and bound to the right\n+                                    // place, go ahead.\n+                                    LifetimeRibKind::AnonymousCreateParameter {\n+                                        binder: anon_binder,\n+                                        ..\n+                                    } => Some(if binder == anon_binder {\n+                                        LifetimeUseSet::One { use_span: ident.span, use_ctxt }\n+                                    } else {\n+                                        LifetimeUseSet::Many\n+                                    }),\n                                     // Only report if eliding the lifetime would have the same\n                                     // semantics.\n                                     LifetimeRibKind::Elided(r) => Some(if res == r {"}, {"sha": "88327f864237ac2a9ad4849bbbc033059051de1b", "filename": "tests/ui/associated-inherent-types/issue-109790.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a2fe9935ea6b2cef2cc9b3aca6d1fee3ae15524b/tests%2Fui%2Fassociated-inherent-types%2Fissue-109790.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2fe9935ea6b2cef2cc9b3aca6d1fee3ae15524b/tests%2Fui%2Fassociated-inherent-types%2Fissue-109790.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fissue-109790.rs?ref=a2fe9935ea6b2cef2cc9b3aca6d1fee3ae15524b", "patch": "@@ -2,6 +2,7 @@\n \n #![feature(inherent_associated_types)]\n #![allow(incomplete_features)]\n+#![deny(single_use_lifetimes)]\n \n struct Foo<T>(T);\n "}]}