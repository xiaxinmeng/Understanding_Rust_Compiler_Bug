{"sha": "7e4d8718cb5f8be51d60fa0f889d504e01b7fce4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNGQ4NzE4Y2I1ZjhiZTUxZDYwZmEwZjg4OWQ1MDRlMDFiN2ZjZTQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-05-16T07:43:24Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-05-21T09:13:19Z"}, "message": "rustc: use intern_* instead of mk_* where possible.", "tree": {"sha": "d0d6d873f57a003f171a549edf085856adfdb4d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0d6d873f57a003f171a549edf085856adfdb4d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e4d8718cb5f8be51d60fa0f889d504e01b7fce4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e4d8718cb5f8be51d60fa0f889d504e01b7fce4", "html_url": "https://github.com/rust-lang/rust/commit/7e4d8718cb5f8be51d60fa0f889d504e01b7fce4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e4d8718cb5f8be51d60fa0f889d504e01b7fce4/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "196b2e0d82d6d687e0b61ebd4db100951c908556", "url": "https://api.github.com/repos/rust-lang/rust/commits/196b2e0d82d6d687e0b61ebd4db100951c908556", "html_url": "https://github.com/rust-lang/rust/commit/196b2e0d82d6d687e0b61ebd4db100951c908556"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "32c693812d67cb019d9b61a7e89ff133ba2c26d0", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e4d8718cb5f8be51d60fa0f889d504e01b7fce4/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e4d8718cb5f8be51d60fa0f889d504e01b7fce4/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=7e4d8718cb5f8be51d60fa0f889d504e01b7fce4", "patch": "@@ -2600,7 +2600,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn mk_goal(self, goal: Goal<'tcx>) -> &'tcx Goal {\n-        &self.mk_goals(iter::once(goal))[0]\n+        &self.intern_goals(&[goal])[0]\n     }\n \n     pub fn lint_node<S: Into<MultiSpan>>(self,"}, {"sha": "6a4b87ced152f4bfbaa270ee2783c1b784fc3d92", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e4d8718cb5f8be51d60fa0f889d504e01b7fce4/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e4d8718cb5f8be51d60fa0f889d504e01b7fce4/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=7e4d8718cb5f8be51d60fa0f889d504e01b7fce4", "patch": "@@ -431,8 +431,10 @@ pub fn ty_fn_sig<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n             sig.map_bound(|sig| {\n                 let state_did = tcx.lang_items().gen_state().unwrap();\n                 let state_adt_ref = tcx.adt_def(state_did);\n-                let state_substs = tcx.mk_substs([sig.yield_ty.into(),\n-                    sig.return_ty.into()].iter());\n+                let state_substs = tcx.intern_substs(&[\n+                    sig.yield_ty.into(),\n+                    sig.return_ty.into(),\n+                ]);\n                 let ret_ty = tcx.mk_adt(state_adt_ref, state_substs);\n \n                 tcx.mk_fn_sig(iter::once(env_ty),"}, {"sha": "2bb96a856ce6d5a692c28aac5b0c32dc510c9a4e", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e4d8718cb5f8be51d60fa0f889d504e01b7fce4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e4d8718cb5f8be51d60fa0f889d504e01b7fce4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=7e4d8718cb5f8be51d60fa0f889d504e01b7fce4", "patch": "@@ -669,7 +669,7 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n                 assert_eq!(self.mir_def_id, def_id);\n                 let ty = tcx.type_of(def_id);\n                 let ty = indices.fold_to_region_vids(tcx, &ty);\n-                ty::Binder::dummy(tcx.mk_type_list(iter::once(ty)))\n+                ty::Binder::dummy(tcx.intern_type_list(&[ty]))\n             }\n         }\n     }"}, {"sha": "fa4d1fa209eba5b742cfab06b5cde270c2bd1d27", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e4d8718cb5f8be51d60fa0f889d504e01b7fce4/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e4d8718cb5f8be51d60fa0f889d504e01b7fce4/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=7e4d8718cb5f8be51d60fa0f889d504e01b7fce4", "patch": "@@ -170,7 +170,7 @@ fn build_drop_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n \n     let substs = if let Some(ty) = ty {\n-        tcx.mk_substs(iter::once(ty.into()))\n+        tcx.intern_substs(&[ty.into()])\n     } else {\n         Substs::identity_for_item(tcx, def_id)\n     };"}, {"sha": "c9727f55d2020f77957fbfd1444db70b7393cd69", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e4d8718cb5f8be51d60fa0f889d504e01b7fce4/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e4d8718cb5f8be51d60fa0f889d504e01b7fce4/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=7e4d8718cb5f8be51d60fa0f889d504e01b7fce4", "patch": "@@ -861,8 +861,10 @@ impl MirPass for StateTransform {\n         // Compute GeneratorState<yield_ty, return_ty>\n         let state_did = tcx.lang_items().gen_state().unwrap();\n         let state_adt_ref = tcx.adt_def(state_did);\n-        let state_substs = tcx.mk_substs([yield_ty.into(),\n-            mir.return_ty().into()].iter());\n+        let state_substs = tcx.intern_substs(&[\n+            yield_ty.into(),\n+            mir.return_ty().into(),\n+        ]);\n         let ret_ty = tcx.mk_adt(state_adt_ref, state_substs);\n \n         // We rename RETURN_PLACE which has type mir.return_ty to new_ret_local"}, {"sha": "6e4c4a3ade3b6842ec21ac224bf7f299f6149e11", "filename": "src/librustc_traits/lowering.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e4d8718cb5f8be51d60fa0f889d504e01b7fce4/src%2Flibrustc_traits%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e4d8718cb5f8be51d60fa0f889d504e01b7fce4/src%2Flibrustc_traits%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering.rs?ref=7e4d8718cb5f8be51d60fa0f889d504e01b7fce4", "patch": "@@ -220,7 +220,7 @@ fn program_clauses_for_trait<'a, 'tcx>(\n     // `Implemented(Self: Trait<P1..Pn>) :- FromEnv(Self: Trait<P1..Pn>)`\n     let implemented_from_env = ProgramClause {\n         goal: impl_trait,\n-        hypotheses: tcx.mk_goals(iter::once(from_env)),\n+        hypotheses: tcx.intern_goals(&[from_env]),\n     };\n     let clauses = iter::once(Clause::ForAll(ty::Binder::dummy(implemented_from_env)));\n \n@@ -256,7 +256,7 @@ fn implied_bound_from_trait<'a, 'tcx>(\n     // `FromEnv(WC) :- FromEnv(Self: Trait<P1..Pn>)`\n     Clause::ForAll(where_clause.lower().map_bound(|goal| ProgramClause {\n         goal: goal.into_from_env_goal(),\n-        hypotheses: tcx.mk_goals(iter::once(Goal::from(impl_trait))),\n+        hypotheses: tcx.intern_goals(&[Goal::from(impl_trait)]),\n     }))\n }\n \n@@ -290,7 +290,7 @@ fn program_clauses_for_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId\n                 .map(|wc| Goal::from_poly_domain_goal(wc, tcx)),\n         ),\n     };\n-    tcx.mk_clauses(iter::once(Clause::ForAll(ty::Binder::dummy(clause))))\n+    tcx.intern_clauses(&[Clause::ForAll(ty::Binder::dummy(clause))])\n }\n \n pub fn program_clauses_for_associated_type_value<'a, 'tcx>(\n@@ -344,7 +344,7 @@ pub fn program_clauses_for_associated_type_value<'a, 'tcx>(\n                 .map(|wc| Goal::from_poly_domain_goal(wc, tcx)),\n         ),\n     };\n-    tcx.mk_clauses(iter::once(Clause::ForAll(ty::Binder::dummy(clause))))\n+    tcx.intern_clauses(&[Clause::ForAll(ty::Binder::dummy(clause))])\n }\n \n pub fn dump_program_clauses<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {"}]}