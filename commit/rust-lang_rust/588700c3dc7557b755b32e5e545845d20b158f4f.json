{"sha": "588700c3dc7557b755b32e5e545845d20b158f4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ODcwMGMzZGM3NTU3Yjc1NWIzMmU1ZTU0NTg0NWQyMGIxNThmNGY=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-07-09T17:22:59Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-07-09T17:22:59Z"}, "message": "Refactor rewrite_assign_rhs\n\n1. Stop using mut var\n2. Use block indent when breaking lines", "tree": {"sha": "8ac657c19788ed8b2caabe5848988d12b0b56aac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ac657c19788ed8b2caabe5848988d12b0b56aac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/588700c3dc7557b755b32e5e545845d20b158f4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/588700c3dc7557b755b32e5e545845d20b158f4f", "html_url": "https://github.com/rust-lang/rust/commit/588700c3dc7557b755b32e5e545845d20b158f4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/588700c3dc7557b755b32e5e545845d20b158f4f/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e355c85b424c906cf2e3d3ecda361a2c7d99aad6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e355c85b424c906cf2e3d3ecda361a2c7d99aad6", "html_url": "https://github.com/rust-lang/rust/commit/e355c85b424c906cf2e3d3ecda361a2c7d99aad6"}], "stats": {"total": 63, "additions": 34, "deletions": 29}, "files": [{"sha": "3b75f6c93dbeaf60010c005ef429cd5f38545a87", "filename": "src/expr.rs", "status": "modified", "additions": 34, "deletions": 29, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/588700c3dc7557b755b32e5e545845d20b158f4f/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/588700c3dc7557b755b32e5e545845d20b158f4f/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=588700c3dc7557b755b32e5e545845d20b158f4f", "patch": "@@ -2914,49 +2914,54 @@ pub fn rewrite_assign_rhs<S: Into<String>>(\n     ex: &ast::Expr,\n     shape: Shape,\n ) -> Option<String> {\n-    let mut result = lhs.into();\n-    let last_line_width = last_line_width(&result) -\n-        if result.contains('\\n') {\n+    let lhs = lhs.into();\n+    let last_line_width = last_line_width(&lhs) -\n+        if lhs.contains('\\n') {\n             shape.indent.width()\n         } else {\n             0\n         };\n     // 1 = space between operator and rhs.\n     let orig_shape = try_opt!(shape.offset_left(last_line_width + 1));\n-    let rhs = ex.rewrite(context, orig_shape);\n+    let rhs = try_opt!(choose_rhs(\n+        context,\n+        ex,\n+        shape,\n+        ex.rewrite(context, orig_shape)\n+    ));\n+    Some(lhs + &rhs)\n+}\n \n-    match rhs {\n-        Some(ref new_str) if !new_str.contains('\\n') => {\n-            result.push(' ');\n-            result.push_str(new_str);\n-        }\n+fn choose_rhs(\n+    context: &RewriteContext,\n+    expr: &ast::Expr,\n+    shape: Shape,\n+    orig_rhs: Option<String>,\n+) -> Option<String> {\n+    match orig_rhs {\n+        Some(ref new_str) if !new_str.contains('\\n') => Some(format!(\" {}\", new_str)),\n         _ => {\n             // Expression did not fit on the same line as the identifier.\n             // Try splitting the line and see if that works better.\n-            let new_shape = try_opt!(shape.block_left(context.config.tab_spaces()));\n-            let new_rhs = ex.rewrite(context, new_shape);\n-\n-            // FIXME: DRY!\n-            match (rhs, new_rhs) {\n-                (Some(ref orig_rhs), Some(ref replacement_rhs))\n-                    if prefer_next_line(orig_rhs, replacement_rhs) => {\n-                    result.push_str(&format!(\"\\n{}\", new_shape.indent.to_string(context.config)));\n-                    result.push_str(replacement_rhs);\n-                }\n-                (None, Some(ref final_rhs)) => {\n-                    result.push_str(&format!(\"\\n{}\", new_shape.indent.to_string(context.config)));\n-                    result.push_str(final_rhs);\n-                }\n-                (None, None) => return None,\n-                (Some(ref orig_rhs), _) => {\n-                    result.push(' ');\n-                    result.push_str(orig_rhs);\n+            let new_shape = try_opt!(\n+                Shape::indented(\n+                    shape.block().indent.block_indent(context.config),\n+                    context.config,\n+                ).sub_width(shape.rhs_overhead(context.config))\n+            );\n+            let new_rhs = expr.rewrite(context, new_shape);\n+            let new_indent_str = &new_shape.indent.to_string(context.config);\n+\n+            match (orig_rhs, new_rhs) {\n+                (Some(ref orig_rhs), Some(ref new_rhs)) if prefer_next_line(orig_rhs, new_rhs) => {\n+                    Some(format!(\"\\n{}{}\", new_indent_str, new_rhs))\n                 }\n+                (None, Some(ref new_rhs)) => Some(format!(\"\\n{}{}\", new_indent_str, new_rhs)),\n+                (None, None) => None,\n+                (Some(ref orig_rhs), _) => Some(format!(\" {}\", orig_rhs)),\n             }\n         }\n     }\n-\n-    Some(result)\n }\n \n fn prefer_next_line(orig_rhs: &str, next_line_rhs: &str) -> bool {"}]}