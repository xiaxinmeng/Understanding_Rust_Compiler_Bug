{"sha": "4fc8de196977a0e5bb4f733f7aaeb1162e880eaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYzhkZTE5Njk3N2EwZTViYjRmNzMzZjdhYWViMTE2MmU4ODBlYWE=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-04-05T23:17:47Z"}, "committer": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-04-05T23:26:31Z"}, "message": "Last pieces of self-call support.\n\nThe last few pieces of the hack that lets us use trans.trans_call() to\ntranslate self-calls, plus a fix for the parser buy that was\npreventing self-call expressions from getting past parsing.\ntest/run-pass/obj-self.rs works now (as in it actually prints \"hi!\"\ntwice!).", "tree": {"sha": "9888cdb1305dd85a237df2271c93b849b241eec9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9888cdb1305dd85a237df2271c93b849b241eec9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fc8de196977a0e5bb4f733f7aaeb1162e880eaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fc8de196977a0e5bb4f733f7aaeb1162e880eaa", "html_url": "https://github.com/rust-lang/rust/commit/4fc8de196977a0e5bb4f733f7aaeb1162e880eaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fc8de196977a0e5bb4f733f7aaeb1162e880eaa/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8bb2e118e9815316320f946ef3fc7e6909ed7c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8bb2e118e9815316320f946ef3fc7e6909ed7c9", "html_url": "https://github.com/rust-lang/rust/commit/b8bb2e118e9815316320f946ef3fc7e6909ed7c9"}], "stats": {"total": 43, "additions": 37, "deletions": 6}, "files": [{"sha": "27fdc7feb2d2f7320deaf1e0c79a1cc10074cb8f", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc8de196977a0e5bb4f733f7aaeb1162e880eaa/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc8de196977a0e5bb4f733f7aaeb1162e880eaa/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=4fc8de196977a0e5bb4f733f7aaeb1162e880eaa", "patch": "@@ -899,7 +899,7 @@ impure fn parse_bottom_expr(parser p) -> @ast.expr {\n                                            some(token.COMMA),\n                                            pf, p);\n             hi = es.span;\n-            auto ex = ast.expr_call_self(e, es.node, ast.ann_none);\n+            ex = ast.expr_call_self(e, es.node, ast.ann_none);\n         }\n \n         case (_) {"}, {"sha": "6fcd7b376ba0f07813c5933aa61b1b667d674527", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4fc8de196977a0e5bb4f733f7aaeb1162e880eaa/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc8de196977a0e5bb4f733f7aaeb1162e880eaa/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=4fc8de196977a0e5bb4f733f7aaeb1162e880eaa", "patch": "@@ -3605,20 +3605,23 @@ type generic_info = rec(@ty.t item_type,\n type lval_result = rec(result res,\n                        bool is_mem,\n                        option.t[generic_info] generic,\n-                       option.t[ValueRef] llobj);\n+                       option.t[ValueRef] llobj,\n+                       option.t[@ty.t] method_ty);\n \n fn lval_mem(@block_ctxt cx, ValueRef val) -> lval_result {\n     ret rec(res=res(cx, val),\n             is_mem=true,\n             generic=none[generic_info],\n-            llobj=none[ValueRef]);\n+            llobj=none[ValueRef],\n+            method_ty=none[@ty.t]);\n }\n \n fn lval_val(@block_ctxt cx, ValueRef val) -> lval_result {\n     ret rec(res=res(cx, val),\n             is_mem=false,\n             generic=none[generic_info],\n-            llobj=none[ValueRef]);\n+            llobj=none[ValueRef],\n+            method_ty=none[@ty.t]);\n }\n \n fn trans_external_path(@block_ctxt cx, ast.def_id did,\n@@ -3813,7 +3816,10 @@ fn trans_field(@block_ctxt cx, &ast.span sp, ValueRef v, @ty.t t0,\n                                                 C_int(ix as int)));\n \n             auto lvo = lval_mem(r.bcx, v);\n-            ret rec(llobj = some[ValueRef](r.val) with lvo);\n+            let @ty.t fn_ty = ty.method_ty_to_fn_ty(methods.(ix));\n+            ret rec(llobj = some[ValueRef](r.val),\n+                    method_ty = some[@ty.t](fn_ty)\n+                    with lvo);\n         }\n         case (_) { cx.fcx.ccx.sess.unimpl(\"field variant in trans_field\"); }\n     }\n@@ -4426,6 +4432,11 @@ fn trans_call(@block_ctxt cx, @ast.expr f,\n               option.t[ValueRef] lliterbody,\n               vec[@ast.expr] args,\n               &ast.ann ann) -> result {\n+\n+    // NB: 'f' isn't necessarily a function; it might be an entire self-call\n+    // expression because of the hack that allows us to process self-calls\n+    // with trans_call.\n+\n     auto f_res = trans_lval(cx, f);\n     auto faddr = f_res.res.val;\n     auto llenv = C_null(T_opaque_closure_ptr(cx.fcx.ccx.tn));\n@@ -4449,7 +4460,21 @@ fn trans_call(@block_ctxt cx, @ast.expr f,\n             llenv = bcx.build.Load(llclosure);\n         }\n     }\n-    auto fn_ty = ty.expr_ty(f);\n+\n+    let @ty.t fn_ty;\n+    alt (f_res.method_ty) {\n+        case (some[@ty.t](?meth)) {\n+            // self-call\n+            fn_ty = meth;\n+        }\n+        \n+        case (_) {\n+            fn_ty = ty.expr_ty(f);\n+\n+        }\n+\n+    }\n+\n     auto ret_ty = ty.ann_to_type(ann);\n     auto args_res = trans_args(f_res.res.bcx,\n                                llenv, f_res.llobj,"}, {"sha": "f83bece7f20abce8deecbd0629971e94c58f1027", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fc8de196977a0e5bb4f733f7aaeb1162e880eaa/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc8de196977a0e5bb4f733f7aaeb1162e880eaa/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=4fc8de196977a0e5bb4f733f7aaeb1162e880eaa", "patch": "@@ -26,6 +26,12 @@ type method = rec(ast.proto proto,\n \n type mt = rec(@t ty, ast.mutability mut);\n \n+// Convert from method type to function type.  Pretty easy; we just drop\n+// 'ident'.\n+fn method_ty_to_fn_ty(method m) -> @ty.t {\n+    ret plain_ty(ty_fn(m.proto, m.inputs, m.output));\n+}\n+\n // NB: If you change this, you'll probably want to change the corresponding\n // AST structure in front/ast.rs as well.\n type t = rec(sty struct, option.t[str] cname);"}]}