{"sha": "a14433347945af2c514074c1d66066ee9f5e8a72", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNDQzMzM0Nzk0NWFmMmM1MTQwNzRjMWQ2NjA2NmVlOWY1ZThhNzI=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-11-05T02:18:39Z"}, "committer": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2021-08-02T17:09:38Z"}, "message": "Added tests.", "tree": {"sha": "8f2a7b7eb225d11f213a0c19ef1d28c15bf62298", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f2a7b7eb225d11f213a0c19ef1d28c15bf62298"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a14433347945af2c514074c1d66066ee9f5e8a72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a14433347945af2c514074c1d66066ee9f5e8a72", "html_url": "https://github.com/rust-lang/rust/commit/a14433347945af2c514074c1d66066ee9f5e8a72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a14433347945af2c514074c1d66066ee9f5e8a72/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b867376cb3fb601c5d3ca8cce75445b5dec2a806", "url": "https://api.github.com/repos/rust-lang/rust/commits/b867376cb3fb601c5d3ca8cce75445b5dec2a806", "html_url": "https://github.com/rust-lang/rust/commit/b867376cb3fb601c5d3ca8cce75445b5dec2a806"}], "stats": {"total": 764, "additions": 764, "deletions": 0}, "files": [{"sha": "78ddbe088887aa7a8ed0b2c633b8531e97091959", "filename": "src/test/ui/traits/trait-upcasting/basic.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/a14433347945af2c514074c1d66066ee9f5e8a72/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a14433347945af2c514074c1d66066ee9f5e8a72/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fbasic.rs?ref=a14433347945af2c514074c1d66066ee9f5e8a72", "patch": "@@ -0,0 +1,80 @@\n+// run-pass\n+\n+#![feature(trait_upcasting)]\n+\n+trait Foo: PartialEq<i32> + std::fmt::Debug + Send + Sync {\n+    fn a(&self) -> i32 { 10 }\n+\n+    fn z(&self) -> i32 { 11 }\n+\n+    fn y(&self) -> i32 { 12 }\n+}\n+\n+trait Bar: Foo {\n+    fn b(&self) -> i32 { 20 }\n+\n+    fn w(&self) -> i32 { 21 }\n+}\n+\n+trait Baz: Bar {\n+    fn c(&self) -> i32 { 30 }\n+}\n+\n+impl Foo for i32 {\n+    fn a(&self) -> i32 { 100 }\n+}\n+\n+impl Bar for i32 {\n+    fn b(&self) -> i32 { 200 }\n+}\n+\n+impl Baz for i32 {\n+    fn c(&self) -> i32 { 300 }\n+}\n+\n+fn main() {\n+    let baz: &dyn Baz = &1;\n+    let _: &dyn std::fmt::Debug = baz;\n+    let _: &(dyn Send + Sync) = baz;\n+    let _: &dyn Send = baz;\n+    let _: &dyn Sync = baz;\n+    assert_eq!(*baz, 1);\n+    assert_eq!(baz.a(), 100);\n+    assert_eq!(baz.b(), 200);\n+    assert_eq!(baz.c(), 300);\n+    assert_eq!(baz.z(), 11);\n+    assert_eq!(baz.y(), 12);\n+    assert_eq!(baz.w(), 21);\n+\n+    let bar: &dyn Bar = baz;\n+    let _: &dyn std::fmt::Debug = bar;\n+    let _: &(dyn Send + Sync) = bar;\n+    let _: &dyn Send = bar;\n+    let _: &dyn Sync = bar;\n+    assert_eq!(*bar, 1);\n+    assert_eq!(bar.a(), 100);\n+    assert_eq!(bar.b(), 200);\n+    assert_eq!(bar.z(), 11);\n+    assert_eq!(bar.y(), 12);\n+    assert_eq!(bar.w(), 21);\n+\n+    let foo: &dyn Foo = baz;\n+    let _: &dyn std::fmt::Debug = foo;\n+    let _: &(dyn Send + Sync) = foo;\n+    let _: &dyn Send = foo;\n+    let _: &dyn Sync = foo;\n+    assert_eq!(*foo, 1);\n+    assert_eq!(foo.a(), 100);\n+    assert_eq!(foo.z(), 11);\n+    assert_eq!(foo.y(), 12);\n+\n+    let foo: &dyn Foo = bar;\n+    let _: &dyn std::fmt::Debug = foo;\n+    let _: &(dyn Send + Sync) = foo;\n+    let _: &dyn Send = foo;\n+    let _: &dyn Sync = foo;\n+    assert_eq!(*foo, 1);\n+    assert_eq!(foo.a(), 100);\n+    assert_eq!(foo.z(), 11);\n+    assert_eq!(foo.y(), 12);\n+}"}, {"sha": "1666b7ba292b2d0d1bfc7a515be33d6b36b7a9e0", "filename": "src/test/ui/traits/trait-upcasting/cyclic-trait-resolution.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a14433347945af2c514074c1d66066ee9f5e8a72/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fcyclic-trait-resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a14433347945af2c514074c1d66066ee9f5e8a72/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fcyclic-trait-resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fcyclic-trait-resolution.rs?ref=a14433347945af2c514074c1d66066ee9f5e8a72", "patch": "@@ -0,0 +1,13 @@\n+trait A: B + A {}\n+//~^ ERROR cycle detected when computing the supertraits of `A` [E0391]\n+\n+trait B {}\n+\n+impl A for () {}\n+\n+impl B for () {}\n+\n+fn main() {\n+    let a: Box<dyn A> = Box::new(());\n+    let _b: Box<dyn B> = a;\n+}"}, {"sha": "7a04c5d0dbbe594ae60cde44f897d584d6637ef7", "filename": "src/test/ui/traits/trait-upcasting/cyclic-trait-resolution.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a14433347945af2c514074c1d66066ee9f5e8a72/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fcyclic-trait-resolution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a14433347945af2c514074c1d66066ee9f5e8a72/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fcyclic-trait-resolution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fcyclic-trait-resolution.stderr?ref=a14433347945af2c514074c1d66066ee9f5e8a72", "patch": "@@ -0,0 +1,16 @@\n+error[E0391]: cycle detected when computing the supertraits of `A`\n+  --> $DIR/cyclic-trait-resolution.rs:1:14\n+   |\n+LL | trait A: B + A {}\n+   |              ^\n+   |\n+   = note: ...which again requires computing the supertraits of `A`, completing the cycle\n+note: cycle used when collecting item types in top-level module\n+  --> $DIR/cyclic-trait-resolution.rs:1:1\n+   |\n+LL | trait A: B + A {}\n+   | ^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0391`."}, {"sha": "531b40d83f9f769bf49e8618e8f536153370d45b", "filename": "src/test/ui/traits/trait-upcasting/diamond.rs", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/a14433347945af2c514074c1d66066ee9f5e8a72/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fdiamond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a14433347945af2c514074c1d66066ee9f5e8a72/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fdiamond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fdiamond.rs?ref=a14433347945af2c514074c1d66066ee9f5e8a72", "patch": "@@ -0,0 +1,108 @@\n+// run-pass\n+\n+#![feature(trait_upcasting)]\n+\n+trait Foo: PartialEq<i32> + std::fmt::Debug + Send + Sync {\n+    fn a(&self) -> i32 { 10 }\n+\n+    fn z(&self) -> i32 { 11 }\n+\n+    fn y(&self) -> i32 { 12 }\n+}\n+\n+trait Bar1: Foo {\n+    fn b(&self) -> i32 { 20 }\n+\n+    fn w(&self) -> i32 { 21 }\n+}\n+\n+trait Bar2: Foo {\n+    fn c(&self) -> i32 { 30 }\n+\n+    fn v(&self) -> i32 { 31 }\n+}\n+\n+trait Baz: Bar1 + Bar2 {\n+    fn d(&self) -> i32 { 40 }\n+}\n+\n+impl Foo for i32 {\n+    fn a(&self) -> i32 { 100 }\n+}\n+\n+impl Bar1 for i32 {\n+    fn b(&self) -> i32 { 200 }\n+}\n+\n+impl Bar2 for i32 {\n+    fn c(&self) -> i32 { 300 }\n+}\n+\n+impl Baz for i32 {\n+    fn d(&self) -> i32 { 400 }\n+}\n+\n+fn main() {\n+    let baz: &dyn Baz = &1;\n+    let _: &dyn std::fmt::Debug = baz;\n+    let _: &(dyn Send + Sync) = baz;\n+    let _: &dyn Send = baz;\n+    let _: &dyn Sync = baz;\n+    assert_eq!(*baz, 1);\n+    assert_eq!(baz.a(), 100);\n+    assert_eq!(baz.b(), 200);\n+    assert_eq!(baz.c(), 300);\n+    assert_eq!(baz.d(), 400);\n+    assert_eq!(baz.z(), 11);\n+    assert_eq!(baz.y(), 12);\n+    assert_eq!(baz.w(), 21);\n+    assert_eq!(baz.v(), 31);\n+\n+    let bar1: &dyn Bar1 = baz;\n+    let _: &dyn std::fmt::Debug = bar1;\n+    let _: &(dyn Send + Sync) = bar1;\n+    let _: &dyn Send = bar1;\n+    let _: &dyn Sync = bar1;\n+    assert_eq!(*bar1, 1);\n+    assert_eq!(bar1.a(), 100);\n+    assert_eq!(bar1.b(), 200);\n+    assert_eq!(bar1.z(), 11);\n+    assert_eq!(bar1.y(), 12);\n+    assert_eq!(bar1.w(), 21);\n+\n+    let bar2: &dyn Bar2 = baz;\n+    let _: &dyn std::fmt::Debug = bar2;\n+    let _: &(dyn Send + Sync) = bar2;\n+    let _: &dyn Send = bar2;\n+    let _: &dyn Sync = bar2;\n+    assert_eq!(*bar2, 1);\n+    assert_eq!(bar2.a(), 100);\n+    assert_eq!(bar2.c(), 300);\n+    assert_eq!(bar2.z(), 11);\n+    assert_eq!(bar2.y(), 12);\n+    assert_eq!(bar2.v(), 31);\n+\n+    let foo: &dyn Foo = baz;\n+    let _: &dyn std::fmt::Debug = foo;\n+    let _: &(dyn Send + Sync) = foo;\n+    let _: &dyn Send = foo;\n+    let _: &dyn Sync = foo;\n+    assert_eq!(*foo, 1);\n+    assert_eq!(foo.a(), 100);\n+\n+    let foo: &dyn Foo = bar1;\n+    let _: &dyn std::fmt::Debug = foo;\n+    let _: &(dyn Send + Sync) = foo;\n+    let _: &dyn Send = foo;\n+    let _: &dyn Sync = foo;\n+    assert_eq!(*foo, 1);\n+    assert_eq!(foo.a(), 100);\n+\n+    let foo: &dyn Foo = bar2;\n+    let _: &dyn std::fmt::Debug = foo;\n+    let _: &(dyn Send + Sync) = foo;\n+    let _: &dyn Send = foo;\n+    let _: &dyn Sync = foo;\n+    assert_eq!(*foo, 1);\n+    assert_eq!(foo.a(), 100);\n+}"}, {"sha": "ac1ef6313fc2da8802c2087647666d2454c88a1b", "filename": "src/test/ui/traits/trait-upcasting/invalid-upcast.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/a14433347945af2c514074c1d66066ee9f5e8a72/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Finvalid-upcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a14433347945af2c514074c1d66066ee9f5e8a72/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Finvalid-upcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Finvalid-upcast.rs?ref=a14433347945af2c514074c1d66066ee9f5e8a72", "patch": "@@ -0,0 +1,68 @@\n+#![feature(trait_upcasting)]\n+\n+trait Foo {\n+    fn a(&self) -> i32 { 10 }\n+\n+    fn z(&self) -> i32 { 11 }\n+\n+    fn y(&self) -> i32 { 12 }\n+}\n+\n+trait Bar {\n+    fn b(&self) -> i32 { 20 }\n+\n+    fn w(&self) -> i32 { 21 }\n+}\n+\n+trait Baz {\n+    fn c(&self) -> i32 { 30 }\n+}\n+\n+impl Foo for i32 {\n+    fn a(&self) -> i32 { 100 }\n+}\n+\n+impl Bar for i32 {\n+    fn b(&self) -> i32 { 200 }\n+}\n+\n+impl Baz for i32 {\n+    fn c(&self) -> i32 { 300 }\n+}\n+\n+fn main() {\n+    let baz: &dyn Baz = &1;\n+    let _: &dyn std::fmt::Debug = baz;\n+    //~^ ERROR `dyn Baz` doesn't implement `std::fmt::Debug` [E0277]\n+    let _: &dyn Send = baz;\n+    //~^ ERROR `dyn Baz` cannot be sent between threads safely [E0277]\n+    let _: &dyn Sync = baz;\n+    //~^ ERROR `dyn Baz` cannot be shared between threads safely [E0277]\n+\n+    let bar: &dyn Bar = baz;\n+    //~^ ERROR the trait bound `dyn Baz: Bar` is not satisfied [E0277]\n+    let _: &dyn std::fmt::Debug = bar;\n+    //~^ ERROR `dyn Bar` doesn't implement `std::fmt::Debug` [E0277]\n+    let _: &dyn Send = bar;\n+    //~^ ERROR `dyn Bar` cannot be sent between threads safely [E0277]\n+    let _: &dyn Sync = bar;\n+    //~^ ERROR `dyn Bar` cannot be shared between threads safely [E0277]\n+\n+    let foo: &dyn Foo = baz;\n+    //~^ ERROR the trait bound `dyn Baz: Foo` is not satisfied [E0277]\n+    let _: &dyn std::fmt::Debug = foo;\n+    //~^ ERROR `dyn Foo` doesn't implement `std::fmt::Debug` [E0277]\n+    let _: &dyn Send = foo;\n+    //~^ ERROR `dyn Foo` cannot be sent between threads safely [E0277]\n+    let _: &dyn Sync = foo;\n+    //~^ ERROR `dyn Foo` cannot be shared between threads safely [E0277]\n+\n+    let foo: &dyn Foo = bar;\n+    //~^ ERROR the trait bound `dyn Bar: Foo` is not satisfied [E0277]\n+    let _: &dyn std::fmt::Debug = foo;\n+    //~^ ERROR `dyn Foo` doesn't implement `std::fmt::Debug` [E0277]\n+    let _: &dyn Send = foo;\n+    //~^ ERROR `dyn Foo` cannot be sent between threads safely [E0277]\n+    let _: &dyn Sync = foo;\n+    //~^ ERROR `dyn Foo` cannot be shared between threads safely [E0277]\n+}"}, {"sha": "731394d480aaa41255dc31a62dcb409e0a77c1c3", "filename": "src/test/ui/traits/trait-upcasting/invalid-upcast.stderr", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/a14433347945af2c514074c1d66066ee9f5e8a72/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Finvalid-upcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a14433347945af2c514074c1d66066ee9f5e8a72/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Finvalid-upcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Finvalid-upcast.stderr?ref=a14433347945af2c514074c1d66066ee9f5e8a72", "patch": "@@ -0,0 +1,135 @@\n+error[E0277]: `dyn Baz` doesn't implement `std::fmt::Debug`\n+  --> $DIR/invalid-upcast.rs:35:35\n+   |\n+LL |     let _: &dyn std::fmt::Debug = baz;\n+   |                                   ^^^ `dyn Baz` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+   |\n+   = help: the trait `std::fmt::Debug` is not implemented for `dyn Baz`\n+   = note: required for the cast to the object type `dyn std::fmt::Debug`\n+\n+error[E0277]: `dyn Baz` cannot be sent between threads safely\n+  --> $DIR/invalid-upcast.rs:37:24\n+   |\n+LL |     let _: &dyn Send = baz;\n+   |                        ^^^ `dyn Baz` cannot be sent between threads safely\n+   |\n+   = help: the trait `std::marker::Send` is not implemented for `dyn Baz`\n+   = note: required for the cast to the object type `dyn std::marker::Send`\n+\n+error[E0277]: `dyn Baz` cannot be shared between threads safely\n+  --> $DIR/invalid-upcast.rs:39:24\n+   |\n+LL |     let _: &dyn Sync = baz;\n+   |                        ^^^ `dyn Baz` cannot be shared between threads safely\n+   |\n+   = help: the trait `std::marker::Sync` is not implemented for `dyn Baz`\n+   = note: required for the cast to the object type `dyn std::marker::Sync`\n+\n+error[E0277]: the trait bound `dyn Baz: Bar` is not satisfied\n+  --> $DIR/invalid-upcast.rs:42:25\n+   |\n+LL |     let bar: &dyn Bar = baz;\n+   |                         ^^^ the trait `Bar` is not implemented for `dyn Baz`\n+   |\n+   = note: required for the cast to the object type `dyn Bar`\n+\n+error[E0277]: `dyn Bar` doesn't implement `std::fmt::Debug`\n+  --> $DIR/invalid-upcast.rs:44:35\n+   |\n+LL |     let _: &dyn std::fmt::Debug = bar;\n+   |                                   ^^^ `dyn Bar` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+   |\n+   = help: the trait `std::fmt::Debug` is not implemented for `dyn Bar`\n+   = note: required for the cast to the object type `dyn std::fmt::Debug`\n+\n+error[E0277]: `dyn Bar` cannot be sent between threads safely\n+  --> $DIR/invalid-upcast.rs:46:24\n+   |\n+LL |     let _: &dyn Send = bar;\n+   |                        ^^^ `dyn Bar` cannot be sent between threads safely\n+   |\n+   = help: the trait `std::marker::Send` is not implemented for `dyn Bar`\n+   = note: required for the cast to the object type `dyn std::marker::Send`\n+\n+error[E0277]: `dyn Bar` cannot be shared between threads safely\n+  --> $DIR/invalid-upcast.rs:48:24\n+   |\n+LL |     let _: &dyn Sync = bar;\n+   |                        ^^^ `dyn Bar` cannot be shared between threads safely\n+   |\n+   = help: the trait `std::marker::Sync` is not implemented for `dyn Bar`\n+   = note: required for the cast to the object type `dyn std::marker::Sync`\n+\n+error[E0277]: the trait bound `dyn Baz: Foo` is not satisfied\n+  --> $DIR/invalid-upcast.rs:51:25\n+   |\n+LL |     let foo: &dyn Foo = baz;\n+   |                         ^^^ the trait `Foo` is not implemented for `dyn Baz`\n+   |\n+   = note: required for the cast to the object type `dyn Foo`\n+\n+error[E0277]: `dyn Foo` doesn't implement `std::fmt::Debug`\n+  --> $DIR/invalid-upcast.rs:53:35\n+   |\n+LL |     let _: &dyn std::fmt::Debug = foo;\n+   |                                   ^^^ `dyn Foo` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+   |\n+   = help: the trait `std::fmt::Debug` is not implemented for `dyn Foo`\n+   = note: required for the cast to the object type `dyn std::fmt::Debug`\n+\n+error[E0277]: `dyn Foo` cannot be sent between threads safely\n+  --> $DIR/invalid-upcast.rs:55:24\n+   |\n+LL |     let _: &dyn Send = foo;\n+   |                        ^^^ `dyn Foo` cannot be sent between threads safely\n+   |\n+   = help: the trait `std::marker::Send` is not implemented for `dyn Foo`\n+   = note: required for the cast to the object type `dyn std::marker::Send`\n+\n+error[E0277]: `dyn Foo` cannot be shared between threads safely\n+  --> $DIR/invalid-upcast.rs:57:24\n+   |\n+LL |     let _: &dyn Sync = foo;\n+   |                        ^^^ `dyn Foo` cannot be shared between threads safely\n+   |\n+   = help: the trait `std::marker::Sync` is not implemented for `dyn Foo`\n+   = note: required for the cast to the object type `dyn std::marker::Sync`\n+\n+error[E0277]: the trait bound `dyn Bar: Foo` is not satisfied\n+  --> $DIR/invalid-upcast.rs:60:25\n+   |\n+LL |     let foo: &dyn Foo = bar;\n+   |                         ^^^ the trait `Foo` is not implemented for `dyn Bar`\n+   |\n+   = note: required for the cast to the object type `dyn Foo`\n+\n+error[E0277]: `dyn Foo` doesn't implement `std::fmt::Debug`\n+  --> $DIR/invalid-upcast.rs:62:35\n+   |\n+LL |     let _: &dyn std::fmt::Debug = foo;\n+   |                                   ^^^ `dyn Foo` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+   |\n+   = help: the trait `std::fmt::Debug` is not implemented for `dyn Foo`\n+   = note: required for the cast to the object type `dyn std::fmt::Debug`\n+\n+error[E0277]: `dyn Foo` cannot be sent between threads safely\n+  --> $DIR/invalid-upcast.rs:64:24\n+   |\n+LL |     let _: &dyn Send = foo;\n+   |                        ^^^ `dyn Foo` cannot be sent between threads safely\n+   |\n+   = help: the trait `std::marker::Send` is not implemented for `dyn Foo`\n+   = note: required for the cast to the object type `dyn std::marker::Send`\n+\n+error[E0277]: `dyn Foo` cannot be shared between threads safely\n+  --> $DIR/invalid-upcast.rs:66:24\n+   |\n+LL |     let _: &dyn Sync = foo;\n+   |                        ^^^ `dyn Foo` cannot be shared between threads safely\n+   |\n+   = help: the trait `std::marker::Sync` is not implemented for `dyn Foo`\n+   = note: required for the cast to the object type `dyn std::marker::Sync`\n+\n+error: aborting due to 15 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "46b461583db481a342b8781a1e6fcb252f472b75", "filename": "src/test/ui/traits/trait-upcasting/lifetime.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/a14433347945af2c514074c1d66066ee9f5e8a72/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a14433347945af2c514074c1d66066ee9f5e8a72/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Flifetime.rs?ref=a14433347945af2c514074c1d66066ee9f5e8a72", "patch": "@@ -0,0 +1,70 @@\n+// run-pass\n+\n+#![feature(trait_upcasting)]\n+\n+trait Foo: PartialEq<i32> + std::fmt::Debug + Send + Sync {\n+    fn a(&self) -> i32 { 10 }\n+\n+    fn z(&self) -> i32 { 11 }\n+\n+    fn y(&self) -> i32 { 12 }\n+}\n+\n+trait Bar: Foo {\n+    fn b(&self) -> i32 { 20 }\n+\n+    fn w(&self) -> i32 { 21 }\n+}\n+\n+trait Baz: Bar {\n+    fn c(&self) -> i32 { 30 }\n+}\n+\n+impl Foo for i32 {\n+    fn a(&self) -> i32 { 100 }\n+}\n+\n+impl Bar for i32 {\n+    fn b(&self) -> i32 { 200 }\n+}\n+\n+impl Baz for i32 {\n+    fn c(&self) -> i32 { 300 }\n+}\n+\n+// Note: upcast lifetime means a shorter lifetime.\n+fn upcast_baz<'a: 'b, 'b, T>(v: Box<dyn Baz + 'a>, _l: &'b T) -> Box<dyn Baz + 'b> { v }\n+fn upcast_bar<'a: 'b, 'b, T>(v: Box<dyn Bar + 'a>, _l: &'b T) -> Box<dyn Bar + 'b> { v }\n+fn upcast_foo<'a: 'b, 'b, T>(v: Box<dyn Foo + 'a>, _l: &'b T) -> Box<dyn Foo + 'b> { v }\n+\n+fn main() {\n+    let v = Box::new(1);\n+    let l = &(); // dummy lifetime (shorter than `baz`)\n+\n+    let baz: Box<dyn Baz> = v.clone();\n+    let u = upcast_baz(baz, &l);\n+    assert_eq!(*u, 1);\n+    assert_eq!(u.a(), 100);\n+    assert_eq!(u.b(), 200);\n+    assert_eq!(u.c(), 300);\n+\n+    let baz: Box<dyn Baz> = v.clone();\n+    let bar: Box<dyn Bar> = baz;\n+    let u = upcast_bar(bar, &l);\n+    assert_eq!(*u, 1);\n+    assert_eq!(u.a(), 100);\n+    assert_eq!(u.b(), 200);\n+\n+    let baz: Box<dyn Baz> = v.clone();\n+    let foo: Box<dyn Foo> = baz;\n+    let u = upcast_foo(foo, &l);\n+    assert_eq!(*u, 1);\n+    assert_eq!(u.a(), 100);\n+\n+    let baz: Box<dyn Baz> = v.clone();\n+    let bar: Box<dyn Bar> = baz;\n+    let foo: Box<dyn Foo> = bar;\n+    let u = upcast_foo(foo, &l);\n+    assert_eq!(*u, 1);\n+    assert_eq!(u.a(), 100);\n+}"}, {"sha": "cf71ed4955137bbecf93caf567ef934c9ec9c5e2", "filename": "src/test/ui/traits/trait-upcasting/struct.rs", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/a14433347945af2c514074c1d66066ee9f5e8a72/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a14433347945af2c514074c1d66066ee9f5e8a72/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fstruct.rs?ref=a14433347945af2c514074c1d66066ee9f5e8a72", "patch": "@@ -0,0 +1,155 @@\n+// run-pass\n+\n+#![feature(trait_upcasting)]\n+\n+use std::rc::Rc;\n+use std::sync::Arc;\n+\n+trait Foo: PartialEq<i32> + std::fmt::Debug + Send + Sync {\n+    fn a(&self) -> i32 { 10 }\n+\n+    fn z(&self) -> i32 { 11 }\n+\n+    fn y(&self) -> i32 { 12 }\n+}\n+\n+trait Bar: Foo {\n+    fn b(&self) -> i32 { 20 }\n+\n+    fn w(&self) -> i32 { 21 }\n+}\n+\n+trait Baz: Bar {\n+    fn c(&self) -> i32 { 30 }\n+}\n+\n+impl Foo for i32 {\n+    fn a(&self) -> i32 { 100 }\n+}\n+\n+impl Bar for i32 {\n+    fn b(&self) -> i32 { 200 }\n+}\n+\n+impl Baz for i32 {\n+    fn c(&self) -> i32 { 300 }\n+}\n+\n+fn test_box() {\n+    let v = Box::new(1);\n+\n+    let baz: Box<dyn Baz> = v.clone();\n+    assert_eq!(*baz, 1);\n+    assert_eq!(baz.a(), 100);\n+    assert_eq!(baz.b(), 200);\n+    assert_eq!(baz.c(), 300);\n+    assert_eq!(baz.z(), 11);\n+    assert_eq!(baz.y(), 12);\n+    assert_eq!(baz.w(), 21);\n+\n+    let baz: Box<dyn Baz> = v.clone();\n+    let bar: Box<dyn Bar> = baz;\n+    assert_eq!(*bar, 1);\n+    assert_eq!(bar.a(), 100);\n+    assert_eq!(bar.b(), 200);\n+    assert_eq!(bar.z(), 11);\n+    assert_eq!(bar.y(), 12);\n+    assert_eq!(bar.w(), 21);\n+\n+    let baz: Box<dyn Baz> = v.clone();\n+    let foo: Box<dyn Foo> = baz;\n+    assert_eq!(*foo, 1);\n+    assert_eq!(foo.a(), 100);\n+    assert_eq!(foo.z(), 11);\n+    assert_eq!(foo.y(), 12);\n+\n+    let baz: Box<dyn Baz> = v.clone();\n+    let bar: Box<dyn Bar> = baz;\n+    let foo: Box<dyn Foo> = bar;\n+    assert_eq!(*foo, 1);\n+    assert_eq!(foo.a(), 100);\n+    assert_eq!(foo.z(), 11);\n+    assert_eq!(foo.y(), 12);\n+}\n+\n+fn test_rc() {\n+    let v = Rc::new(1);\n+\n+    let baz: Rc<dyn Baz> = v.clone();\n+    assert_eq!(*baz, 1);\n+    assert_eq!(baz.a(), 100);\n+    assert_eq!(baz.b(), 200);\n+    assert_eq!(baz.c(), 300);\n+    assert_eq!(baz.z(), 11);\n+    assert_eq!(baz.y(), 12);\n+    assert_eq!(baz.w(), 21);\n+\n+    let baz: Rc<dyn Baz> = v.clone();\n+    let bar: Rc<dyn Bar> = baz;\n+    assert_eq!(*bar, 1);\n+    assert_eq!(bar.a(), 100);\n+    assert_eq!(bar.b(), 200);\n+    assert_eq!(bar.z(), 11);\n+    assert_eq!(bar.y(), 12);\n+    assert_eq!(bar.w(), 21);\n+\n+    let baz: Rc<dyn Baz> = v.clone();\n+    let foo: Rc<dyn Foo> = baz;\n+    assert_eq!(*foo, 1);\n+    assert_eq!(foo.a(), 100);\n+    assert_eq!(foo.z(), 11);\n+    assert_eq!(foo.y(), 12);\n+\n+    let baz: Rc<dyn Baz> = v.clone();\n+    let bar: Rc<dyn Bar> = baz;\n+    let foo: Rc<dyn Foo> = bar;\n+    assert_eq!(*foo, 1);\n+    assert_eq!(foo.a(), 100);\n+    assert_eq!(foo.z(), 11);\n+    assert_eq!(foo.y(), 12);\n+    assert_eq!(foo.z(), 11);\n+    assert_eq!(foo.y(), 12);\n+}\n+\n+fn test_arc() {\n+    let v = Arc::new(1);\n+\n+    let baz: Arc<dyn Baz> = v.clone();\n+    assert_eq!(*baz, 1);\n+    assert_eq!(baz.a(), 100);\n+    assert_eq!(baz.b(), 200);\n+    assert_eq!(baz.c(), 300);\n+    assert_eq!(baz.z(), 11);\n+    assert_eq!(baz.y(), 12);\n+    assert_eq!(baz.w(), 21);\n+\n+    let baz: Arc<dyn Baz> = v.clone();\n+    let bar: Arc<dyn Bar> = baz;\n+    assert_eq!(*bar, 1);\n+    assert_eq!(bar.a(), 100);\n+    assert_eq!(bar.b(), 200);\n+    assert_eq!(bar.z(), 11);\n+    assert_eq!(bar.y(), 12);\n+    assert_eq!(bar.w(), 21);\n+\n+    let baz: Arc<dyn Baz> = v.clone();\n+    let foo: Arc<dyn Foo> = baz;\n+    assert_eq!(*foo, 1);\n+    assert_eq!(foo.a(), 100);\n+    assert_eq!(foo.z(), 11);\n+    assert_eq!(foo.y(), 12);\n+\n+    let baz: Arc<dyn Baz> = v.clone();\n+    let bar: Arc<dyn Bar> = baz;\n+    let foo: Arc<dyn Foo> = bar;\n+    assert_eq!(*foo, 1);\n+    assert_eq!(foo.a(), 100);\n+    assert_eq!(foo.z(), 11);\n+    assert_eq!(foo.y(), 12);\n+}\n+\n+fn main() {\n+    test_box();\n+    test_rc();\n+    test_arc();\n+}"}, {"sha": "0c3af54fe2b04d3a5360c5eb20805ac2e6c08c0a", "filename": "src/test/ui/traits/trait-upcasting/subtrait-method.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a14433347945af2c514074c1d66066ee9f5e8a72/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fsubtrait-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a14433347945af2c514074c1d66066ee9f5e8a72/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fsubtrait-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fsubtrait-method.rs?ref=a14433347945af2c514074c1d66066ee9f5e8a72", "patch": "@@ -0,0 +1,51 @@\n+#![feature(trait_upcasting)]\n+\n+trait Foo: PartialEq<i32> + std::fmt::Debug + Send + Sync {\n+    fn a(&self) -> i32 { 10 }\n+\n+    fn z(&self) -> i32 { 11 }\n+\n+    fn y(&self) -> i32 { 12 }\n+}\n+\n+trait Bar: Foo {\n+    fn b(&self) -> i32 { 20 }\n+\n+    fn w(&self) -> i32 { 21 }\n+}\n+\n+trait Baz: Bar {\n+    fn c(&self) -> i32 { 30 }\n+}\n+\n+impl Foo for i32 {\n+    fn a(&self) -> i32 { 100 }\n+}\n+\n+impl Bar for i32 {\n+    fn b(&self) -> i32 { 200 }\n+}\n+\n+impl Baz for i32 {\n+    fn c(&self) -> i32 { 300 }\n+}\n+\n+fn main() {\n+    let baz: &dyn Baz = &1;\n+\n+    let bar: &dyn Bar = baz;\n+    bar.c();\n+    //~^ ERROR no method named `c` found for reference `&dyn Bar` in the current scope [E0599]\n+\n+    let foo: &dyn Foo = baz;\n+    foo.b();\n+    //~^ ERROR no method named `b` found for reference `&dyn Foo` in the current scope [E0599]\n+    foo.c();\n+    //~^ ERROR no method named `c` found for reference `&dyn Foo` in the current scope [E0599]\n+\n+    let foo: &dyn Foo = bar;\n+    foo.b();\n+    //~^ ERROR no method named `b` found for reference `&dyn Foo` in the current scope [E0599]\n+    foo.c();\n+    //~^ ERROR no method named `c` found for reference `&dyn Foo` in the current scope [E0599]\n+}"}, {"sha": "4b0765cdb82354c70a85f32ee001dfdc955aa839", "filename": "src/test/ui/traits/trait-upcasting/subtrait-method.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/a14433347945af2c514074c1d66066ee9f5e8a72/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fsubtrait-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a14433347945af2c514074c1d66066ee9f5e8a72/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fsubtrait-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fsubtrait-method.stderr?ref=a14433347945af2c514074c1d66066ee9f5e8a72", "patch": "@@ -0,0 +1,68 @@\n+error[E0599]: no method named `c` found for reference `&dyn Bar` in the current scope\n+  --> $DIR/subtrait-method.rs:37:9\n+   |\n+LL |     bar.c();\n+   |         ^ help: there is an associated function with a similar name: `a`\n+   |\n+   = help: items from traits can only be used if the trait is implemented and in scope\n+note: `Baz` defines an item `c`, perhaps you need to implement it\n+  --> $DIR/subtrait-method.rs:17:1\n+   |\n+LL | trait Baz: Bar {\n+   | ^^^^^^^^^^^^^^\n+\n+error[E0599]: no method named `b` found for reference `&dyn Foo` in the current scope\n+  --> $DIR/subtrait-method.rs:41:9\n+   |\n+LL |     foo.b();\n+   |         ^ help: there is an associated function with a similar name: `a`\n+   |\n+   = help: items from traits can only be used if the trait is implemented and in scope\n+note: `Bar` defines an item `b`, perhaps you need to implement it\n+  --> $DIR/subtrait-method.rs:11:1\n+   |\n+LL | trait Bar: Foo {\n+   | ^^^^^^^^^^^^^^\n+\n+error[E0599]: no method named `c` found for reference `&dyn Foo` in the current scope\n+  --> $DIR/subtrait-method.rs:43:9\n+   |\n+LL |     foo.c();\n+   |         ^ help: there is an associated function with a similar name: `a`\n+   |\n+   = help: items from traits can only be used if the trait is implemented and in scope\n+note: `Baz` defines an item `c`, perhaps you need to implement it\n+  --> $DIR/subtrait-method.rs:17:1\n+   |\n+LL | trait Baz: Bar {\n+   | ^^^^^^^^^^^^^^\n+\n+error[E0599]: no method named `b` found for reference `&dyn Foo` in the current scope\n+  --> $DIR/subtrait-method.rs:47:9\n+   |\n+LL |     foo.b();\n+   |         ^ help: there is an associated function with a similar name: `a`\n+   |\n+   = help: items from traits can only be used if the trait is implemented and in scope\n+note: `Bar` defines an item `b`, perhaps you need to implement it\n+  --> $DIR/subtrait-method.rs:11:1\n+   |\n+LL | trait Bar: Foo {\n+   | ^^^^^^^^^^^^^^\n+\n+error[E0599]: no method named `c` found for reference `&dyn Foo` in the current scope\n+  --> $DIR/subtrait-method.rs:49:9\n+   |\n+LL |     foo.c();\n+   |         ^ help: there is an associated function with a similar name: `a`\n+   |\n+   = help: items from traits can only be used if the trait is implemented and in scope\n+note: `Baz` defines an item `c`, perhaps you need to implement it\n+  --> $DIR/subtrait-method.rs:17:1\n+   |\n+LL | trait Baz: Bar {\n+   | ^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0599`."}]}