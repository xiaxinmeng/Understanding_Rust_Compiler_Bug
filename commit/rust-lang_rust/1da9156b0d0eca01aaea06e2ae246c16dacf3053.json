{"sha": "1da9156b0d0eca01aaea06e2ae246c16dacf3053", "node_id": "C_kwDOAAsO6NoAKDFkYTkxNTZiMGQwZWNhMDFhYWVhMDZlMmFlMjQ2YzE2ZGFjZjMwNTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-18T07:37:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-18T07:37:47Z"}, "message": "Auto merge of #12982 - jridgewell:into_future, r=Veykril\n\nImplement IntoFuture type inference\n\nOne of my projects is using [IntoFuture](https://doc.rust-lang.org/std/future/trait.IntoFuture.html) to make our async code a little less verbose. However, rust-analyzer can't infer the output type of an await expression if the value uses `IntoFuture` to convert into another type. So we're getting `{unknown}` types everywhere since switching.\n\n`foo.await` itself [desugars](https://github.com/rust-lang/rust/blob/e4417cf020fbcd6182c11637bc6b8694434bd81a/compiler/rustc_ast_lowering/src/expr.rs#L644-L658) into a `match into_future(foo) {}`, with every `Future` impl getting a [default](https://github.com/rust-lang/rust/blob/e4417cf020fbcd6182c11637bc6b8694434bd81a/library/core/src/future/into_future.rs#L131-L139) `IntoFuture` implementation. I'm not sure if we want to disable the old `future_trait` paths, since this only recently [stabilize](https://github.com/rust-lang/rust/pull/98718).", "tree": {"sha": "d951431938d32111b1f9d3bae6a4e2cfa0a2072b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d951431938d32111b1f9d3bae6a4e2cfa0a2072b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1da9156b0d0eca01aaea06e2ae246c16dacf3053", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1da9156b0d0eca01aaea06e2ae246c16dacf3053", "html_url": "https://github.com/rust-lang/rust/commit/1da9156b0d0eca01aaea06e2ae246c16dacf3053", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1da9156b0d0eca01aaea06e2ae246c16dacf3053/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae57b697e2d78a0eecd9d6609891b4cfd5853007", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae57b697e2d78a0eecd9d6609891b4cfd5853007", "html_url": "https://github.com/rust-lang/rust/commit/ae57b697e2d78a0eecd9d6609891b4cfd5853007"}, {"sha": "cebf95718c32b1024a6845992bee96c50f830f3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cebf95718c32b1024a6845992bee96c50f830f3a", "html_url": "https://github.com/rust-lang/rust/commit/cebf95718c32b1024a6845992bee96c50f830f3a"}], "stats": {"total": 213, "additions": 178, "deletions": 35}, "files": [{"sha": "d7586d129b768b1e639b915df81f51aa4a5c89b5", "filename": "crates/hir-expand/src/mod_path.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1da9156b0d0eca01aaea06e2ae246c16dacf3053/crates%2Fhir-expand%2Fsrc%2Fmod_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1da9156b0d0eca01aaea06e2ae246c16dacf3053/crates%2Fhir-expand%2Fsrc%2Fmod_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fmod_path.rs?ref=1da9156b0d0eca01aaea06e2ae246c16dacf3053", "patch": "@@ -257,6 +257,7 @@ macro_rules! __known_path {\n     (core::ops::RangeToInclusive) => {};\n     (core::ops::RangeInclusive) => {};\n     (core::future::Future) => {};\n+    (core::future::IntoFuture) => {};\n     (core::ops::Try) => {};\n     ($path:path) => {\n         compile_error!(\"Please register your known path in the path module\")"}, {"sha": "2b859f775095beb0e005fb1657e59d001e933408", "filename": "crates/hir-expand/src/name.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1da9156b0d0eca01aaea06e2ae246c16dacf3053/crates%2Fhir-expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1da9156b0d0eca01aaea06e2ae246c16dacf3053/crates%2Fhir-expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fname.rs?ref=1da9156b0d0eca01aaea06e2ae246c16dacf3053", "patch": "@@ -266,6 +266,7 @@ pub mod known {\n         Try,\n         Ok,\n         Future,\n+        IntoFuture,\n         Result,\n         Option,\n         Output,\n@@ -399,6 +400,7 @@ pub mod known {\n         future_trait,\n         index,\n         index_mut,\n+        into_future,\n         mul_assign,\n         mul,\n         neg,"}, {"sha": "95a7229e8795a3bb7aa58fd72c6b9b6ef9d748d6", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1da9156b0d0eca01aaea06e2ae246c16dacf3053/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1da9156b0d0eca01aaea06e2ae246c16dacf3053/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=1da9156b0d0eca01aaea06e2ae246c16dacf3053", "patch": "@@ -875,7 +875,10 @@ impl<'a> InferenceContext<'a> {\n     }\n \n     fn resolve_future_future_output(&self) -> Option<TypeAliasId> {\n-        let trait_ = self.resolve_lang_item(name![future_trait])?.as_trait()?;\n+        let trait_ = self\n+            .resolver\n+            .resolve_known_trait(self.db.upcast(), &path![core::future::IntoFuture])\n+            .or_else(|| self.resolve_lang_item(name![future_trait])?.as_trait())?;\n         self.db.trait_data(trait_).associated_type_by_name(&name![Output])\n     }\n "}, {"sha": "0f37970e2b38d7fe678e101b19873789b2fbdd7e", "filename": "crates/hir-ty/src/tests/traits.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1da9156b0d0eca01aaea06e2ae246c16dacf3053/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1da9156b0d0eca01aaea06e2ae246c16dacf3053/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs?ref=1da9156b0d0eca01aaea06e2ae246c16dacf3053", "patch": "@@ -137,6 +137,31 @@ fn not_send() -> Box<dyn Future<Output = ()> + 'static> {\n     );\n }\n \n+#[test]\n+fn into_future_trait() {\n+    check_types(\n+        r#\"\n+//- minicore: future\n+struct Futurable;\n+impl core::future::IntoFuture for Futurable {\n+    type Output = u64;\n+    type IntoFuture = IntFuture;\n+}\n+\n+struct IntFuture;\n+impl core::future::Future for IntFuture {\n+    type Output = u64;\n+}\n+\n+fn test() {\n+    let r = Futurable;\n+    let v = r.await;\n+    v;\n+} //^ u64\n+\"#,\n+    );\n+}\n+\n #[test]\n fn infer_try() {\n     check_types("}, {"sha": "aa019ca48381adc9230359094bdf6e69f23701f9", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1da9156b0d0eca01aaea06e2ae246c16dacf3053/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1da9156b0d0eca01aaea06e2ae246c16dacf3053/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=1da9156b0d0eca01aaea06e2ae246c16dacf3053", "patch": "@@ -2778,20 +2778,32 @@ impl Type {\n         self.ty.is_unknown()\n     }\n \n-    /// Checks that particular type `ty` implements `std::future::Future`.\n+    /// Checks that particular type `ty` implements `std::future::IntoFuture` or\n+    /// `std::future::Future`.\n     /// This function is used in `.await` syntax completion.\n-    pub fn impls_future(&self, db: &dyn HirDatabase) -> bool {\n-        let std_future_trait = db\n-            .lang_item(self.env.krate, SmolStr::new_inline(\"future_trait\"))\n-            .and_then(|it| it.as_trait());\n-        let std_future_trait = match std_future_trait {\n+    pub fn impls_into_future(&self, db: &dyn HirDatabase) -> bool {\n+        let trait_ = db\n+            .lang_item(self.env.krate, SmolStr::new_inline(\"into_future\"))\n+            .and_then(|it| {\n+                let into_future_fn = it.as_function()?;\n+                let assoc_item = as_assoc_item(db, AssocItem::Function, into_future_fn)?;\n+                let into_future_trait = assoc_item.containing_trait_or_trait_impl(db)?;\n+                Some(into_future_trait.id)\n+            })\n+            .or_else(|| {\n+                let future_trait =\n+                    db.lang_item(self.env.krate, SmolStr::new_inline(\"future_trait\"))?;\n+                future_trait.as_trait()\n+            });\n+\n+        let trait_ = match trait_ {\n             Some(it) => it,\n             None => return false,\n         };\n \n         let canonical_ty =\n             Canonical { value: self.ty.clone(), binders: CanonicalVarKinds::empty(Interner) };\n-        method_resolution::implements_trait(&canonical_ty, db, self.env.clone(), std_future_trait)\n+        method_resolution::implements_trait(&canonical_ty, db, self.env.clone(), trait_)\n     }\n \n     /// Checks that particular type `ty` implements `std::ops::FnOnce`."}, {"sha": "bd35af06e23eb0ccbbd29146b61ca99394db1bfa", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1da9156b0d0eca01aaea06e2ae246c16dacf3053/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1da9156b0d0eca01aaea06e2ae246c16dacf3053/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=1da9156b0d0eca01aaea06e2ae246c16dacf3053", "patch": "@@ -27,6 +27,7 @@ use hir_def::{\n use hir_expand::{\n     builtin_fn_macro::BuiltinFnLikeExpander,\n     hygiene::Hygiene,\n+    mod_path::path,\n     name,\n     name::{AsName, Name},\n     HirFileId, InFile,\n@@ -269,14 +270,35 @@ impl SourceAnalyzer {\n         db: &dyn HirDatabase,\n         await_expr: &ast::AwaitExpr,\n     ) -> Option<FunctionId> {\n-        let ty = self.ty_of_expr(db, &await_expr.expr()?.into())?;\n+        let mut ty = self.ty_of_expr(db, &await_expr.expr()?.into())?.clone();\n+\n+        let into_future_trait = self\n+            .resolver\n+            .resolve_known_trait(db.upcast(), &path![core::future::IntoFuture])\n+            .map(Trait::from);\n+\n+        if let Some(into_future_trait) = into_future_trait {\n+            let type_ = Type::new_with_resolver(db, &self.resolver, ty.clone());\n+            if type_.impls_trait(db, into_future_trait, &[]) {\n+                let items = into_future_trait.items(db);\n+                let into_future_type = items.into_iter().find_map(|item| match item {\n+                    AssocItem::TypeAlias(alias)\n+                        if alias.name(db) == hir_expand::name![IntoFuture] =>\n+                    {\n+                        Some(alias)\n+                    }\n+                    _ => None,\n+                })?;\n+                let future_trait = type_.normalize_trait_assoc_type(db, &[], into_future_type)?;\n+                ty = future_trait.ty;\n+            }\n+        }\n \n-        let op_fn = db\n+        let poll_fn = db\n             .lang_item(self.resolver.krate(), hir_expand::name![poll].to_smol_str())?\n             .as_function()?;\n-        let substs = hir_ty::TyBuilder::subst_for_def(db, op_fn).push(ty.clone()).build();\n-\n-        Some(self.resolve_impl_method_or_trait_def(db, op_fn, &substs))\n+        let substs = hir_ty::TyBuilder::subst_for_def(db, poll_fn).push(ty.clone()).build();\n+        Some(self.resolve_impl_method_or_trait_def(db, poll_fn, &substs))\n     }\n \n     pub(crate) fn resolve_prefix_expr("}, {"sha": "c521a10fccfc314942ce4baf642be6eecf6c36f8", "filename": "crates/ide-assists/src/utils/suggest_name.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1da9156b0d0eca01aaea06e2ae246c16dacf3053/crates%2Fide-assists%2Fsrc%2Futils%2Fsuggest_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1da9156b0d0eca01aaea06e2ae246c16dacf3053/crates%2Fide-assists%2Fsrc%2Futils%2Fsuggest_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Futils%2Fsuggest_name.rs?ref=1da9156b0d0eca01aaea06e2ae246c16dacf3053", "patch": "@@ -55,6 +55,7 @@ const USELESS_METHODS: &[&str] = &[\n     \"iter\",\n     \"into_iter\",\n     \"iter_mut\",\n+    \"into_future\",\n ];\n \n pub(crate) fn for_generic_parameter(ty: &ast::ImplTraitType) -> SmolStr {"}, {"sha": "02004ff7b686876e2a699cb51f0c61ca90a3b06a", "filename": "crates/ide-completion/src/completions/dot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1da9156b0d0eca01aaea06e2ae246c16dacf3053/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1da9156b0d0eca01aaea06e2ae246c16dacf3053/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=1da9156b0d0eca01aaea06e2ae246c16dacf3053", "patch": "@@ -19,7 +19,7 @@ pub(crate) fn complete_dot(\n     };\n \n     // Suggest .await syntax for types that implement Future trait\n-    if receiver_ty.impls_future(ctx.db) {\n+    if receiver_ty.impls_into_future(ctx.db) {\n         let mut item =\n             CompletionItem::new(CompletionItemKind::Keyword, ctx.source_range(), \"await\");\n         item.detail(\"expr.await\");"}, {"sha": "1d03c8cc5ca6d4f9b630b08ee2dc99d622dc9aec", "filename": "crates/ide-completion/src/completions/keyword.rs", "status": "modified", "additions": 49, "deletions": 21, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/1da9156b0d0eca01aaea06e2ae246c16dacf3053/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1da9156b0d0eca01aaea06e2ae246c16dacf3053/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=1da9156b0d0eca01aaea06e2ae246c16dacf3053", "patch": "@@ -75,16 +75,17 @@ impl Future for A {}\n fn foo(a: A) { a.$0 }\n \"#,\n             expect![[r#\"\n-                kw await expr.await\n-                sn box   Box::new(expr)\n-                sn call  function(expr)\n-                sn dbg   dbg!(expr)\n-                sn dbgr  dbg!(&expr)\n-                sn let   let\n-                sn letm  let mut\n-                sn match match expr {}\n-                sn ref   &expr\n-                sn refm  &mut expr\n+                kw await                  expr.await\n+                me into_future() (as IntoFuture) fn(self) -> <Self as IntoFuture>::IntoFuture\n+                sn box                    Box::new(expr)\n+                sn call                   function(expr)\n+                sn dbg                    dbg!(expr)\n+                sn dbgr                   dbg!(&expr)\n+                sn let                    let\n+                sn letm                   let mut\n+                sn match                  match expr {}\n+                sn ref                    &expr\n+                sn refm                   &mut expr\n             \"#]],\n         );\n \n@@ -98,18 +99,45 @@ fn foo() {\n }\n \"#,\n             expect![[r#\"\n-                kw await expr.await\n-                sn box   Box::new(expr)\n-                sn call  function(expr)\n-                sn dbg   dbg!(expr)\n-                sn dbgr  dbg!(&expr)\n-                sn let   let\n-                sn letm  let mut\n-                sn match match expr {}\n-                sn ref   &expr\n-                sn refm  &mut expr\n+                kw await                  expr.await\n+                me into_future() (use core::future::IntoFuture) fn(self) -> <Self as IntoFuture>::IntoFuture\n+                sn box                    Box::new(expr)\n+                sn call                   function(expr)\n+                sn dbg                    dbg!(expr)\n+                sn dbgr                   dbg!(&expr)\n+                sn let                    let\n+                sn letm                   let mut\n+                sn match                  match expr {}\n+                sn ref                    &expr\n+                sn refm                   &mut expr\n             \"#]],\n-        )\n+        );\n+    }\n+\n+    #[test]\n+    fn test_completion_await_impls_into_future() {\n+        check(\n+            r#\"\n+//- minicore: future\n+use core::future::*;\n+struct A {}\n+impl IntoFuture for A {}\n+fn foo(a: A) { a.$0 }\n+\"#,\n+            expect![[r#\"\n+                kw await                  expr.await\n+                me into_future() (as IntoFuture) fn(self) -> <Self as IntoFuture>::IntoFuture\n+                sn box                    Box::new(expr)\n+                sn call                   function(expr)\n+                sn dbg                    dbg!(expr)\n+                sn dbgr                   dbg!(&expr)\n+                sn let                    let\n+                sn letm                   let mut\n+                sn match                  match expr {}\n+                sn ref                    &expr\n+                sn refm                   &mut expr\n+            \"#]],\n+        );\n     }\n \n     #[test]"}, {"sha": "36a648fe4a8ea3eb8a3519f9ae189c0b30c26e18", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1da9156b0d0eca01aaea06e2ae246c16dacf3053/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1da9156b0d0eca01aaea06e2ae246c16dacf3053/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=1da9156b0d0eca01aaea06e2ae246c16dacf3053", "patch": "@@ -1664,6 +1664,40 @@ fn f() {\n         );\n     }\n \n+    #[test]\n+    fn goto_await_into_future_poll() {\n+        check(\n+            r#\"\n+//- minicore: future\n+\n+struct Futurable;\n+\n+impl core::future::IntoFuture for Futurable {\n+    type IntoFuture = MyFut;\n+}\n+\n+struct MyFut;\n+\n+impl core::future::Future for MyFut {\n+    type Output = ();\n+\n+    fn poll(\n+     //^^^^\n+        self: std::pin::Pin<&mut Self>,\n+        cx: &mut std::task::Context<'_>\n+    ) -> std::task::Poll<Self::Output>\n+    {\n+        ()\n+    }\n+}\n+\n+fn f() {\n+    Futurable.await$0;\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn goto_try_op() {\n         check("}, {"sha": "6df29db4745d37840acc569b2e934b15fd06155f", "filename": "crates/test-utils/src/minicore.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1da9156b0d0eca01aaea06e2ae246c16dacf3053/crates%2Ftest-utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1da9156b0d0eca01aaea06e2ae246c16dacf3053/crates%2Ftest-utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Fminicore.rs?ref=1da9156b0d0eca01aaea06e2ae246c16dacf3053", "patch": "@@ -471,6 +471,21 @@ pub mod future {\n         #[lang = \"poll\"]\n         fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output>;\n     }\n+\n+    pub trait IntoFuture {\n+        type Output;\n+        type IntoFuture: Future<Output = Self::Output>;\n+        #[lang = \"into_future\"]\n+        fn into_future(self) -> Self::IntoFuture;\n+    }\n+\n+    impl<F: Future> IntoFuture for F {\n+        type Output = F::Output;\n+        type IntoFuture = F;\n+        fn into_future(self) -> F {\n+            self\n+        }\n+    }\n }\n pub mod task {\n     pub enum Poll<T> {"}]}