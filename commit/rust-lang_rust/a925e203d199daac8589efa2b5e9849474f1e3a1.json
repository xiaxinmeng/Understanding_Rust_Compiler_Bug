{"sha": "a925e203d199daac8589efa2b5e9849474f1e3a1", "node_id": "C_kwDOAAsO6NoAKGE5MjVlMjAzZDE5OWRhYWM4NTg5ZWZhMmI1ZTk4NDk0NzRmMWUzYTE", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-09-27T18:23:00Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-09-27T18:23:00Z"}, "message": "Add GUI regression test for search results colors", "tree": {"sha": "4d1ea5c61130007e641f33af028734360cfb11e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d1ea5c61130007e641f33af028734360cfb11e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a925e203d199daac8589efa2b5e9849474f1e3a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a925e203d199daac8589efa2b5e9849474f1e3a1", "html_url": "https://github.com/rust-lang/rust/commit/a925e203d199daac8589efa2b5e9849474f1e3a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a925e203d199daac8589efa2b5e9849474f1e3a1/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef410f1b01f1f3e54975b6142062c737875d6c22", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef410f1b01f1f3e54975b6142062c737875d6c22", "html_url": "https://github.com/rust-lang/rust/commit/ef410f1b01f1f3e54975b6142062c737875d6c22"}], "stats": {"total": 156, "additions": 152, "deletions": 4}, "files": [{"sha": "c4b5fdf53dd6bd4863c497a6d590b56cfca2f6b2", "filename": "src/test/rustdoc-gui/search-result-color.goml", "status": "modified", "additions": 149, "deletions": 4, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/a925e203d199daac8589efa2b5e9849474f1e3a1/src%2Ftest%2Frustdoc-gui%2Fsearch-result-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/a925e203d199daac8589efa2b5e9849474f1e3a1/src%2Ftest%2Frustdoc-gui%2Fsearch-result-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-result-color.goml?ref=a925e203d199daac8589efa2b5e9849474f1e3a1", "patch": "@@ -7,7 +7,6 @@ show-text: true\n // Ayu theme\n local-storage: {\n     \"rustdoc-theme\": \"ayu\",\n-    \"rustdoc-preferred-dark-theme\": \"ayu\",\n     \"rustdoc-use-system-theme\": \"false\",\n }\n reload:\n@@ -23,16 +22,66 @@ assert-css: (\n     {\"color\": \"rgb(0, 150, 207)\"},\n )\n \n-// Checking the color for \"keyword\".\n+// Checking the color of \"keyword\" text.\n assert-css: (\n     \"//*[@class='result-name']//*[text()='(keyword)']\",\n     {\"color\": \"rgb(120, 135, 151)\"},\n )\n \n+// Checking the color of \"keyword\".\n+assert-css: (\n+    \".result-name .keyword\",\n+    {\"color\": \"rgb(57, 175, 215)\"},\n+    ALL,\n+)\n+// Check the color of \"struct\".\n+assert-css: (\n+    \".result-name .struct\",\n+    {\"color\": \"rgb(255, 160, 165)\"},\n+    ALL,\n+)\n+// Check the color of \"associated type\".\n+assert-css: (\n+    \".result-name .associatedtype\",\n+    {\"color\": \"rgb(57, 175, 215)\"},\n+    ALL,\n+)\n+// Check the color of \"type method\".\n+assert-css: (\n+    \".result-name .tymethod\",\n+    {\"color\": \"rgb(253, 214, 135)\"},\n+    ALL,\n+)\n+// Check the color of \"method\".\n+assert-css: (\n+    \".result-name .method\",\n+    {\"color\": \"rgb(253, 214, 135)\"},\n+    ALL,\n+)\n+// Check the color of \"struct field\".\n+assert-css: (\n+    \".result-name .structfield\",\n+    {\"color\": \"rgb(0, 150, 207)\"},\n+    ALL,\n+)\n+// Check the color of \"macro\".\n+assert-css: (\n+    \".result-name .macro\",\n+    {\"color\": \"rgb(163, 122, 204)\"},\n+    ALL,\n+)\n+// Check the color of \"fn\".\n+assert-css: (\n+    \".result-name .fn\",\n+    {\"color\": \"rgb(253, 214, 135)\"},\n+    ALL,\n+)\n+\n // Checking the `<a>` container.\n assert-css: (\n     \"//*[@class='result-name']/*[text()='test_docs::']/ancestor::a\",\n     {\"color\": \"rgb(0, 150, 207)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+    ALL,\n )\n \n // Checking color and background on hover.\n@@ -49,7 +98,6 @@ assert-css: (\n // Dark theme\n local-storage: {\n     \"rustdoc-theme\": \"dark\",\n-    \"rustdoc-preferred-dark-theme\": \"dark\",\n     \"rustdoc-use-system-theme\": \"false\",\n }\n reload:\n@@ -71,6 +119,55 @@ assert-css: (\n     {\"color\": \"rgb(221, 221, 221)\"},\n )\n \n+// Checking the color of \"keyword\".\n+assert-css: (\n+    \".result-name .keyword\",\n+    {\"color\": \"rgb(210, 153, 29)\"},\n+    ALL,\n+)\n+// Check the color of \"struct\".\n+assert-css: (\n+    \".result-name .struct\",\n+    {\"color\": \"rgb(45, 191, 184)\"},\n+    ALL,\n+)\n+// Check the color of \"associated type\".\n+assert-css: (\n+    \".result-name .associatedtype\",\n+    {\"color\": \"rgb(210, 153, 29)\"},\n+    ALL,\n+)\n+// Check the color of \"type method\".\n+assert-css: (\n+    \".result-name .tymethod\",\n+    {\"color\": \"rgb(43, 171, 99)\"},\n+    ALL,\n+)\n+// Check the color of \"method\".\n+assert-css: (\n+    \".result-name .method\",\n+    {\"color\": \"rgb(43, 171, 99)\"},\n+    ALL,\n+)\n+// Check the color of \"struct field\".\n+assert-css: (\n+    \".result-name .structfield\",\n+    {\"color\": \"rgb(221, 221, 221)\"},\n+    ALL,\n+)\n+// Check the color of \"macro\".\n+assert-css: (\n+    \".result-name .macro\",\n+    {\"color\": \"rgb(9, 189, 0)\"},\n+    ALL,\n+)\n+// Check the color of \"fn\".\n+assert-css: (\n+    \".result-name .fn\",\n+    {\"color\": \"rgb(43, 171, 99)\"},\n+    ALL,\n+)\n+\n // Checking the `<a>` container.\n assert-css: (\n     \"//*[@class='result-name']/*[text()='test_docs::']/ancestor::a\",\n@@ -109,6 +206,55 @@ assert-css: (\n     {\"color\": \"rgb(0, 0, 0)\"},\n )\n \n+// Checking the color of \"keyword\".\n+assert-css: (\n+    \".result-name .keyword\",\n+    {\"color\": \"rgb(56, 115, 173)\"},\n+    ALL,\n+)\n+// Check the color of \"struct\".\n+assert-css: (\n+    \".result-name .struct\",\n+    {\"color\": \"rgb(173, 55, 138)\"},\n+    ALL,\n+)\n+// Check the color of \"associated type\".\n+assert-css: (\n+    \".result-name .associatedtype\",\n+    {\"color\": \"rgb(56, 115, 173)\"},\n+    ALL,\n+)\n+// Check the color of \"type method\".\n+assert-css: (\n+    \".result-name .tymethod\",\n+    {\"color\": \"rgb(173, 124, 55)\"},\n+    ALL,\n+)\n+// Check the color of \"method\".\n+assert-css: (\n+    \".result-name .method\",\n+    {\"color\": \"rgb(173, 124, 55)\"},\n+    ALL,\n+)\n+// Check the color of \"struct field\".\n+assert-css: (\n+    \".result-name .structfield\",\n+    {\"color\": \"rgb(0, 0, 0)\"},\n+    ALL,\n+)\n+// Check the color of \"macro\".\n+assert-css: (\n+    \".result-name .macro\",\n+    {\"color\": \"rgb(6, 128, 0)\"},\n+    ALL,\n+)\n+// Check the color of \"fn\".\n+assert-css: (\n+    \".result-name .fn\",\n+    {\"color\": \"rgb(173, 124, 55)\"},\n+    ALL,\n+)\n+\n // Checking the `<a>` container.\n assert-css: (\n     \"//*[@class='result-name']/*[text()='test_docs::']/ancestor::a\",\n@@ -132,7 +278,6 @@ goto: file://|DOC_PATH|/test_docs/index.html\n // this test is running on.\n local-storage: {\n     \"rustdoc-theme\": \"dark\",\n-    \"rustdoc-preferred-dark-theme\": \"dark\",\n     \"rustdoc-use-system-theme\": \"false\",\n }\n // If the text isn't displayed, the browser doesn't compute color style correctly..."}, {"sha": "24aecc70d65e0b1694450160cf022738f776b608", "filename": "src/test/rustdoc-gui/src/lib2/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a925e203d199daac8589efa2b5e9849474f1e3a1/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a925e203d199daac8589efa2b5e9849474f1e3a1/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs?ref=a925e203d199daac8589efa2b5e9849474f1e3a1", "patch": "@@ -38,11 +38,14 @@ pub trait Trait {\n \n     #[deprecated = \"Whatever [`Foo`](#tadam)\"]\n     fn foo() {}\n+    fn fooo();\n }\n \n impl Trait for Foo {\n     type X = u32;\n     const Y: u32 = 0;\n+\n+    fn fooo() {}\n }\n \n impl implementors::Whatever for Foo {"}]}