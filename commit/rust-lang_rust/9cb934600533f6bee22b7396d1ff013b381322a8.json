{"sha": "9cb934600533f6bee22b7396d1ff013b381322a8", "node_id": "C_kwDOAAsO6NoAKDljYjkzNDYwMDUzM2Y2YmVlMjJiNzM5NmQxZmYwMTNiMzgxMzIyYTg", "commit": {"author": {"name": "Josh Soref", "email": "2119212+jsoref@users.noreply.github.com", "date": "2023-04-11T04:49:38Z"}, "committer": {"name": "Josh Soref", "email": "2119212+jsoref@users.noreply.github.com", "date": "2023-04-26T06:10:22Z"}, "message": "Spelling library/\n\n* advance\n* aligned\n* borrowed\n* calculate\n* debugable\n* debuggable\n* declarations\n* desugaring\n* documentation\n* enclave\n* ignorable\n* initialized\n* iterator\n* kaboom\n* monomorphization\n* nonexistent\n* optimizer\n* panicking\n* process\n* reentrant\n* rustonomicon\n* the\n* uninitialized\n\nSigned-off-by: Josh Soref <2119212+jsoref@users.noreply.github.com>", "tree": {"sha": "0f13a10b5ef3ad8e37f892ecfd088e67e6e255e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f13a10b5ef3ad8e37f892ecfd088e67e6e255e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cb934600533f6bee22b7396d1ff013b381322a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cb934600533f6bee22b7396d1ff013b381322a8", "html_url": "https://github.com/rust-lang/rust/commit/9cb934600533f6bee22b7396d1ff013b381322a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cb934600533f6bee22b7396d1ff013b381322a8/comments", "author": {"login": "jsoref", "id": 2119212, "node_id": "MDQ6VXNlcjIxMTkyMTI=", "avatar_url": "https://avatars.githubusercontent.com/u/2119212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsoref", "html_url": "https://github.com/jsoref", "followers_url": "https://api.github.com/users/jsoref/followers", "following_url": "https://api.github.com/users/jsoref/following{/other_user}", "gists_url": "https://api.github.com/users/jsoref/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsoref/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsoref/subscriptions", "organizations_url": "https://api.github.com/users/jsoref/orgs", "repos_url": "https://api.github.com/users/jsoref/repos", "events_url": "https://api.github.com/users/jsoref/events{/privacy}", "received_events_url": "https://api.github.com/users/jsoref/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsoref", "id": 2119212, "node_id": "MDQ6VXNlcjIxMTkyMTI=", "avatar_url": "https://avatars.githubusercontent.com/u/2119212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsoref", "html_url": "https://github.com/jsoref", "followers_url": "https://api.github.com/users/jsoref/followers", "following_url": "https://api.github.com/users/jsoref/following{/other_user}", "gists_url": "https://api.github.com/users/jsoref/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsoref/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsoref/subscriptions", "organizations_url": "https://api.github.com/users/jsoref/orgs", "repos_url": "https://api.github.com/users/jsoref/repos", "events_url": "https://api.github.com/users/jsoref/events{/privacy}", "received_events_url": "https://api.github.com/users/jsoref/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6fb7b9815aea87fb5ced1c683212871699c907c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6fb7b9815aea87fb5ced1c683212871699c907c", "html_url": "https://github.com/rust-lang/rust/commit/c6fb7b9815aea87fb5ced1c683212871699c907c"}], "stats": {"total": 108, "additions": 54, "deletions": 54}, "files": [{"sha": "2708c7fe10259d83f5aa22db095d7a3dc250efbe", "filename": "library/alloc/src/collections/vec_deque/spec_from_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fspec_from_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fspec_from_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fspec_from_iter.rs?ref=9cb934600533f6bee22b7396d1ff013b381322a8", "patch": "@@ -12,7 +12,7 @@ where\n     default fn spec_from_iter(iterator: I) -> Self {\n         // Since converting is O(1) now, just re-use the `Vec` logic for\n         // anything where we can't do something extra-special for `VecDeque`,\n-        // especially as that could save us some monomorphiziation work\n+        // especially as that could save us some monomorphization work\n         // if one uses the same iterators (like slice ones) with both.\n         crate::vec::Vec::from_iter(iterator).into()\n     }"}, {"sha": "8497740990443b1d5d1ee029c031fef6f31f91c3", "filename": "library/alloc/src/str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Falloc%2Fsrc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Falloc%2Fsrc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstr.rs?ref=9cb934600533f6bee22b7396d1ff013b381322a8", "patch": "@@ -404,12 +404,12 @@ impl str {\n             // See https://www.unicode.org/versions/Unicode7.0.0/ch03.pdf#G33992\n             // for the definition of `Final_Sigma`.\n             debug_assert!('\u03a3'.len_utf8() == 2);\n-            let is_word_final = case_ignoreable_then_cased(from[..i].chars().rev())\n-                && !case_ignoreable_then_cased(from[i + 2..].chars());\n+            let is_word_final = case_ignorable_then_cased(from[..i].chars().rev())\n+                && !case_ignorable_then_cased(from[i + 2..].chars());\n             to.push_str(if is_word_final { \"\u03c2\" } else { \"\u03c3\" });\n         }\n \n-        fn case_ignoreable_then_cased<I: Iterator<Item = char>>(iter: I) -> bool {\n+        fn case_ignorable_then_cased<I: Iterator<Item = char>>(iter: I) -> bool {\n             use core::unicode::{Case_Ignorable, Cased};\n             match iter.skip_while(|&c| Case_Ignorable(c)).next() {\n                 Some(c) => Cased(c),"}, {"sha": "2f1ee8b03533da7dddd4d092efc74d9d38d66e63", "filename": "library/alloc/src/vec/in_place_collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Falloc%2Fsrc%2Fvec%2Fin_place_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Falloc%2Fsrc%2Fvec%2Fin_place_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fin_place_collect.rs?ref=9cb934600533f6bee22b7396d1ff013b381322a8", "patch": "@@ -201,7 +201,7 @@ where\n         //\n         // Note: This access to the source wouldn't be allowed by the TrustedRandomIteratorNoCoerce\n         // contract (used by SpecInPlaceCollect below). But see the \"O(1) collect\" section in the\n-        // module documenttation why this is ok anyway.\n+        // module documentation why this is ok anyway.\n         let dst_guard = InPlaceDstBufDrop { ptr: dst_buf, len, cap };\n         src.forget_allocation_drop_remaining();\n         mem::forget(dst_guard);"}, {"sha": "9aa5575ca938b83cdb00c154538ac17b646529c1", "filename": "library/alloc/tests/slice.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Falloc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Falloc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fslice.rs?ref=9cb934600533f6bee22b7396d1ff013b381322a8", "patch": "@@ -705,7 +705,7 @@ fn test_move_rev_iterator() {\n }\n \n #[test]\n-fn test_splitator() {\n+fn test_split_iterator() {\n     let xs = &[1, 2, 3, 4, 5];\n \n     let splits: &[&[_]] = &[&[1], &[3], &[5]];\n@@ -725,7 +725,7 @@ fn test_splitator() {\n }\n \n #[test]\n-fn test_splitator_inclusive() {\n+fn test_split_iterator_inclusive() {\n     let xs = &[1, 2, 3, 4, 5];\n \n     let splits: &[&[_]] = &[&[1, 2], &[3, 4], &[5]];\n@@ -745,7 +745,7 @@ fn test_splitator_inclusive() {\n }\n \n #[test]\n-fn test_splitator_inclusive_reverse() {\n+fn test_split_iterator_inclusive_reverse() {\n     let xs = &[1, 2, 3, 4, 5];\n \n     let splits: &[&[_]] = &[&[5], &[3, 4], &[1, 2]];\n@@ -765,7 +765,7 @@ fn test_splitator_inclusive_reverse() {\n }\n \n #[test]\n-fn test_splitator_mut_inclusive() {\n+fn test_split_iterator_mut_inclusive() {\n     let xs = &mut [1, 2, 3, 4, 5];\n \n     let splits: &[&[_]] = &[&[1, 2], &[3, 4], &[5]];\n@@ -785,7 +785,7 @@ fn test_splitator_mut_inclusive() {\n }\n \n #[test]\n-fn test_splitator_mut_inclusive_reverse() {\n+fn test_split_iterator_mut_inclusive_reverse() {\n     let xs = &mut [1, 2, 3, 4, 5];\n \n     let splits: &[&[_]] = &[&[5], &[3, 4], &[1, 2]];\n@@ -805,7 +805,7 @@ fn test_splitator_mut_inclusive_reverse() {\n }\n \n #[test]\n-fn test_splitnator() {\n+fn test_splitn_iterator() {\n     let xs = &[1, 2, 3, 4, 5];\n \n     let splits: &[&[_]] = &[&[1, 2, 3, 4, 5]];\n@@ -821,7 +821,7 @@ fn test_splitnator() {\n }\n \n #[test]\n-fn test_splitnator_mut() {\n+fn test_splitn_iterator_mut() {\n     let xs = &mut [1, 2, 3, 4, 5];\n \n     let splits: &[&mut [_]] = &[&mut [1, 2, 3, 4, 5]];\n@@ -837,7 +837,7 @@ fn test_splitnator_mut() {\n }\n \n #[test]\n-fn test_rsplitator() {\n+fn test_rsplit_iterator() {\n     let xs = &[1, 2, 3, 4, 5];\n \n     let splits: &[&[_]] = &[&[5], &[3], &[1]];\n@@ -855,7 +855,7 @@ fn test_rsplitator() {\n }\n \n #[test]\n-fn test_rsplitnator() {\n+fn test_rsplitn_iterator() {\n     let xs = &[1, 2, 3, 4, 5];\n \n     let splits: &[&[_]] = &[&[1, 2, 3, 4, 5]];\n@@ -932,7 +932,7 @@ fn test_split_iterators_size_hint() {\n }\n \n #[test]\n-fn test_windowsator() {\n+fn test_windows_iterator() {\n     let v = &[1, 2, 3, 4];\n \n     let wins: &[&[_]] = &[&[1, 2], &[2, 3], &[3, 4]];\n@@ -948,13 +948,13 @@ fn test_windowsator() {\n \n #[test]\n #[should_panic]\n-fn test_windowsator_0() {\n+fn test_windows_iterator_0() {\n     let v = &[1, 2, 3, 4];\n     let _it = v.windows(0);\n }\n \n #[test]\n-fn test_chunksator() {\n+fn test_chunks_iterator() {\n     let v = &[1, 2, 3, 4, 5];\n \n     assert_eq!(v.chunks(2).len(), 3);\n@@ -972,13 +972,13 @@ fn test_chunksator() {\n \n #[test]\n #[should_panic]\n-fn test_chunksator_0() {\n+fn test_chunks_iterator_0() {\n     let v = &[1, 2, 3, 4];\n     let _it = v.chunks(0);\n }\n \n #[test]\n-fn test_chunks_exactator() {\n+fn test_chunks_exact_iterator() {\n     let v = &[1, 2, 3, 4, 5];\n \n     assert_eq!(v.chunks_exact(2).len(), 2);\n@@ -996,13 +996,13 @@ fn test_chunks_exactator() {\n \n #[test]\n #[should_panic]\n-fn test_chunks_exactator_0() {\n+fn test_chunks_exact_iterator_0() {\n     let v = &[1, 2, 3, 4];\n     let _it = v.chunks_exact(0);\n }\n \n #[test]\n-fn test_rchunksator() {\n+fn test_rchunks_iterator() {\n     let v = &[1, 2, 3, 4, 5];\n \n     assert_eq!(v.rchunks(2).len(), 3);\n@@ -1020,13 +1020,13 @@ fn test_rchunksator() {\n \n #[test]\n #[should_panic]\n-fn test_rchunksator_0() {\n+fn test_rchunks_iterator_0() {\n     let v = &[1, 2, 3, 4];\n     let _it = v.rchunks(0);\n }\n \n #[test]\n-fn test_rchunks_exactator() {\n+fn test_rchunks_exact_iterator() {\n     let v = &[1, 2, 3, 4, 5];\n \n     assert_eq!(v.rchunks_exact(2).len(), 2);\n@@ -1044,7 +1044,7 @@ fn test_rchunks_exactator() {\n \n #[test]\n #[should_panic]\n-fn test_rchunks_exactator_0() {\n+fn test_rchunks_exact_iterator_0() {\n     let v = &[1, 2, 3, 4];\n     let _it = v.rchunks_exact(0);\n }\n@@ -1219,7 +1219,7 @@ fn test_ends_with() {\n }\n \n #[test]\n-fn test_mut_splitator() {\n+fn test_mut_split_iterator() {\n     let mut xs = [0, 1, 0, 2, 3, 0, 0, 4, 5, 0];\n     assert_eq!(xs.split_mut(|x| *x == 0).count(), 6);\n     for slice in xs.split_mut(|x| *x == 0) {\n@@ -1235,7 +1235,7 @@ fn test_mut_splitator() {\n }\n \n #[test]\n-fn test_mut_splitator_rev() {\n+fn test_mut_split_iterator_rev() {\n     let mut xs = [1, 2, 0, 3, 4, 0, 0, 5, 6, 0];\n     for slice in xs.split_mut(|x| *x == 0).rev().take(4) {\n         slice.reverse();"}, {"sha": "cc4c1f12728659941a5d8ded067bbd763d5cd8e6", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=9cb934600533f6bee22b7396d1ff013b381322a8", "patch": "@@ -2470,7 +2470,7 @@ fn test_vec_dedup_panicking() {\n \n // Regression test for issue #82533\n #[test]\n-fn test_extend_from_within_panicing_clone() {\n+fn test_extend_from_within_panicking_clone() {\n     struct Panic<'dc> {\n         drop_count: &'dc AtomicU32,\n         aaaaa: bool,"}, {"sha": "d1c6b67b2788138ff9c6854aaf7922ddfc10d2a0", "filename": "library/core/src/fmt/builders.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fcore%2Fsrc%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fcore%2Fsrc%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fbuilders.rs?ref=9cb934600533f6bee22b7396d1ff013b381322a8", "patch": "@@ -109,14 +109,14 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n     ///            .field(\"bar\", &self.bar) // We add `bar` field.\n     ///            .field(\"another\", &self.another) // We add `another` field.\n     ///            // We even add a field which doesn't exist (because why not?).\n-    ///            .field(\"not_existing_field\", &1)\n+    ///            .field(\"nonexistent_field\", &1)\n     ///            .finish() // We're good to go!\n     ///     }\n     /// }\n     ///\n     /// assert_eq!(\n     ///     format!(\"{:?}\", Bar { bar: 10, another: \"Hello World\".to_string() }),\n-    ///     \"Bar { bar: 10, another: \\\"Hello World\\\", not_existing_field: 1 }\",\n+    ///     \"Bar { bar: 10, another: \\\"Hello World\\\", nonexistent_field: 1 }\",\n     /// );\n     /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]"}, {"sha": "70c637e14f1d03d0cbd6adfd78b73c92c3d18309", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=9cb934600533f6bee22b7396d1ff013b381322a8", "patch": "@@ -2460,7 +2460,7 @@ extern \"rust-intrinsic\" {\n /// This macro should be called as `assert_unsafe_precondition!([Generics](name: Type) => Expression)`\n /// where the names specified will be moved into the macro as captured variables, and defines an item\n /// to call `const_eval_select` on. The tokens inside the square brackets are used to denote generics\n-/// for the function declaractions and can be omitted if there is no generics.\n+/// for the function declarations and can be omitted if there is no generics.\n ///\n /// # Safety\n ///\n@@ -2717,7 +2717,7 @@ pub const unsafe fn copy<T>(src: *const T, dst: *mut T, count: usize) {\n     // SAFETY: the safety contract for `copy` must be upheld by the caller.\n     unsafe {\n         assert_unsafe_precondition!(\n-            \"ptr::copy requires that both pointer arguments are aligned aligned and non-null\",\n+            \"ptr::copy requires that both pointer arguments are aligned and non-null\",\n             [T](src: *const T, dst: *mut T) =>\n             is_aligned_and_not_null(src) && is_aligned_and_not_null(dst)\n         );"}, {"sha": "8b549e187ba81e3711e8cb0360cb1ebe4b08eaa5", "filename": "library/core/src/macros/panic.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md", "raw_url": "https://github.com/rust-lang/rust/raw/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md?ref=9cb934600533f6bee22b7396d1ff013b381322a8", "patch": "@@ -42,7 +42,7 @@ the successful result of some computation, `Ok(T)`, or error types that\n represent an anticipated runtime failure mode of that computation, `Err(E)`.\n `Result` is used alongside user defined types which represent the various\n anticipated runtime failure modes that the associated computation could\n-encounter. `Result` must be propagated manually, often with the the help of the\n+encounter. `Result` must be propagated manually, often with the help of the\n `?` operator and `Try` trait, and they must be reported manually, often with\n the help of the `Error` trait.\n "}, {"sha": "ae366f04645312be597a1e9b85479b105bd7646a", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=9cb934600533f6bee22b7396d1ff013b381322a8", "patch": "@@ -264,7 +264,7 @@ impl<T: ?Sized> *const T {\n         let dest_addr = addr as isize;\n         let offset = dest_addr.wrapping_sub(self_addr);\n \n-        // This is the canonical desugarring of this operation\n+        // This is the canonical desugaring of this operation\n         self.wrapping_byte_offset(offset)\n     }\n "}, {"sha": "5e5151c7395a1b5adcbc30c6e9c901e16d5e746e", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=9cb934600533f6bee22b7396d1ff013b381322a8", "patch": "@@ -2121,7 +2121,7 @@ mod new_fn_ptr_impl {\n /// assert_eq!(unsafe { raw_f2.read_unaligned() }, 2);\n /// ```\n ///\n-/// See [`addr_of_mut`] for how to create a pointer to unininitialized data.\n+/// See [`addr_of_mut`] for how to create a pointer to uninitialized data.\n /// Doing that with `addr_of` would not make much sense since one could only\n /// read the data, and that would be Undefined Behavior.\n #[stable(feature = \"raw_ref_macros\", since = \"1.51.0\")]"}, {"sha": "9a53b3c01c37add9bc6b7388ba4a1d4aa74e5227", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=9cb934600533f6bee22b7396d1ff013b381322a8", "patch": "@@ -270,7 +270,7 @@ impl<T: ?Sized> *mut T {\n         let dest_addr = addr as isize;\n         let offset = dest_addr.wrapping_sub(self_addr);\n \n-        // This is the canonical desugarring of this operation\n+        // This is the canonical desugaring of this operation\n         self.wrapping_byte_offset(offset)\n     }\n "}, {"sha": "238889762826c0c0c4e5b969a87263a0a6c3dae9", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=9cb934600533f6bee22b7396d1ff013b381322a8", "patch": "@@ -4458,7 +4458,7 @@ impl<T, const N: usize> SlicePattern for [T; N] {\n /// This will do `binomial(N + 1, 2) = N * (N + 1) / 2 = 0, 1, 3, 6, 10, ..`\n /// comparison operations.\n fn get_many_check_valid<const N: usize>(indices: &[usize; N], len: usize) -> bool {\n-    // NB: The optimzer should inline the loops into a sequence\n+    // NB: The optimizer should inline the loops into a sequence\n     // of instructions without additional branching.\n     let mut valid = true;\n     for (i, &idx) in indices.iter().enumerate() {"}, {"sha": "1d9670886eb3dce766b0fa3bda9c1ecf67b3d5af", "filename": "library/core/tests/asserting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fcore%2Ftests%2Fasserting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fcore%2Ftests%2Fasserting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fasserting.rs?ref=9cb934600533f6bee22b7396d1ff013b381322a8", "patch": "@@ -24,14 +24,14 @@ struct NoCopyNoDebug;\n struct NoDebug;\n \n test!(\n-    capture_with_non_copyable_and_non_debugabble_elem_has_correct_params,\n+    capture_with_non_copyable_and_non_debuggable_elem_has_correct_params,\n     NoCopyNoDebug,\n     None,\n     \"N/A\"\n );\n \n test!(capture_with_non_copyable_elem_has_correct_params, NoCopy, None, \"N/A\");\n \n-test!(capture_with_non_debugabble_elem_has_correct_params, NoDebug, None, \"N/A\");\n+test!(capture_with_non_debuggable_elem_has_correct_params, NoDebug, None, \"N/A\");\n \n-test!(capture_with_copyable_and_debugabble_elem_has_correct_params, 1i32, Some(1i32), \"1\");\n+test!(capture_with_copyable_and_debuggable_elem_has_correct_params, 1i32, Some(1i32), \"1\");"}, {"sha": "ea8fac03538438c11f4a92f60894805a8a7bb1f6", "filename": "library/core/tests/lazy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fcore%2Ftests%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fcore%2Ftests%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flazy.rs?ref=9cb934600533f6bee22b7396d1ff013b381322a8", "patch": "@@ -10,7 +10,7 @@ fn once_cell() {\n     c.get_or_init(|| 92);\n     assert_eq!(c.get(), Some(&92));\n \n-    c.get_or_init(|| panic!(\"Kabom!\"));\n+    c.get_or_init(|| panic!(\"Kaboom!\"));\n     assert_eq!(c.get(), Some(&92));\n }\n "}, {"sha": "3e1f848ccfec2c4d8764751c61deca41abf3de9b", "filename": "library/core/tests/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fcore%2Ftests%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fcore%2Ftests%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fmod.rs?ref=9cb934600533f6bee22b7396d1ff013b381322a8", "patch": "@@ -170,7 +170,7 @@ fn test_can_not_overflow() {\n         for base in 2..=36 {\n             let num = (<$t>::MAX as u128) + 1;\n \n-           // Calcutate the string length for the smallest overflowing number:\n+           // Calculate the string length for the smallest overflowing number:\n            let max_len_string = format_radix(num, base as u128);\n            // Ensure that string length is deemed to potentially overflow:\n            assert!(can_overflow::<$t>(base, &max_len_string));"}, {"sha": "89a2f6b2271bda64410cfc8510e5b63cf5891d13", "filename": "library/std/src/io/readbuf/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fstd%2Fsrc%2Fio%2Freadbuf%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fstd%2Fsrc%2Fio%2Freadbuf%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Freadbuf%2Ftests.rs?ref=9cb934600533f6bee22b7396d1ff013b381322a8", "patch": "@@ -36,7 +36,7 @@ fn initialize_unfilled() {\n }\n \n #[test]\n-fn addvance_filled() {\n+fn advance_filled() {\n     let buf: &mut [_] = &mut [0; 16];\n     let mut rbuf: BorrowedBuf<'_> = buf.into();\n "}, {"sha": "be6dc7768af944b38ec47d5a3e4faba1549cb302", "filename": "library/std/src/keyword_docs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fkeyword_docs.rs?ref=9cb934600533f6bee22b7396d1ff013b381322a8", "patch": "@@ -1925,7 +1925,7 @@ mod type_keyword {}\n /// `unsafe_op_in_unsafe_fn` lint can be enabled to warn against that and require explicit unsafe\n /// blocks even inside `unsafe fn`.\n ///\n-/// See the [Rustnomicon] and the [Reference] for more information.\n+/// See the [Rustonomicon] and the [Reference] for more information.\n ///\n /// # Examples\n ///\n@@ -2129,7 +2129,7 @@ mod type_keyword {}\n /// [`impl`]: keyword.impl.html\n /// [raw pointers]: ../reference/types/pointer.html\n /// [memory safety]: ../book/ch19-01-unsafe-rust.html\n-/// [Rustnomicon]: ../nomicon/index.html\n+/// [Rustonomicon]: ../nomicon/index.html\n /// [nomicon-soundness]: ../nomicon/safe-unsafe-meaning.html\n /// [soundness]: https://rust-lang.github.io/unsafe-code-guidelines/glossary.html#soundness-of-code--of-a-library\n /// [Reference]: ../reference/unsafety.html"}, {"sha": "11948cecad853a985a46fffc2ec5f6a45b5ccab3", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=9cb934600533f6bee22b7396d1ff013b381322a8", "patch": "@@ -450,7 +450,7 @@ impl AsHandle for OwnedHandle {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n         // Safety: `OwnedHandle` and `BorrowedHandle` have the same validity\n-        // invariants, and the `BorrowdHandle` is bounded by the lifetime\n+        // invariants, and the `BorrowedHandle` is bounded by the lifetime\n         // of `&self`.\n         unsafe { BorrowedHandle::borrow_raw(self.as_raw_handle()) }\n     }"}, {"sha": "b6bd0f9e12bd4f2a1cd9c6d944c0c012c5bf1e9a", "filename": "library/std/src/os/windows/io/socket.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs?ref=9cb934600533f6bee22b7396d1ff013b381322a8", "patch": "@@ -260,7 +260,7 @@ impl AsSocket for OwnedSocket {\n     #[inline]\n     fn as_socket(&self) -> BorrowedSocket<'_> {\n         // Safety: `OwnedSocket` and `BorrowedSocket` have the same validity\n-        // invariants, and the `BorrowdSocket` is bounded by the lifetime\n+        // invariants, and the `BorrowedSocket` is bounded by the lifetime\n         // of `&self`.\n         unsafe { BorrowedSocket::borrow_raw(self.as_raw_socket()) }\n     }"}, {"sha": "d5d32e73d8880f7874a6dc3f6e06c7ceb04d0b59", "filename": "library/std/src/sync/once_lock/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fstd%2Fsrc%2Fsync%2Fonce_lock%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fstd%2Fsrc%2Fsync%2Fonce_lock%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fonce_lock%2Ftests.rs?ref=9cb934600533f6bee22b7396d1ff013b381322a8", "patch": "@@ -24,7 +24,7 @@ fn sync_once_cell() {\n         assert_eq!(ONCE_CELL.get(), Some(&92));\n     });\n \n-    ONCE_CELL.get_or_init(|| panic!(\"Kabom!\"));\n+    ONCE_CELL.get_or_init(|| panic!(\"Kaboom!\"));\n     assert_eq!(ONCE_CELL.get(), Some(&92));\n }\n "}, {"sha": "0ced48d10b7c627f1f392911fff27f2bc74c739a", "filename": "library/std/src/sync/remutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fstd%2Fsrc%2Fsync%2Fremutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fstd%2Fsrc%2Fsync%2Fremutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fremutex.rs?ref=9cb934600533f6bee22b7396d1ff013b381322a8", "patch": "@@ -7,7 +7,7 @@ use crate::panic::{RefUnwindSafe, UnwindSafe};\n use crate::sync::atomic::{AtomicUsize, Ordering::Relaxed};\n use crate::sys::locks as sys;\n \n-/// A re-entrant mutual exclusion\n+/// A reentrant mutual exclusion\n ///\n /// This mutex will block *other* threads waiting for the lock to become\n /// available. The thread which has already locked the mutex can lock it"}, {"sha": "ca79d1d796e9aee798ea9ada0fc3192edf442293", "filename": "library/std/src/sys/sgx/abi/entry.S", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fentry.S", "raw_url": "https://github.com/rust-lang/rust/raw/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fentry.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fentry.S?ref=9cb934600533f6bee22b7396d1ff013b381322a8", "patch": "@@ -58,15 +58,15 @@ IMAGE_BASE:\n     globvar DEBUG 1\n     /*  The base address (relative to enclave start) of the enclave text section */\n     globvar TEXT_BASE 8\n-    /*  The size in bytes of enclacve text section */\n+    /*  The size in bytes of enclave text section */\n     globvar TEXT_SIZE 8\n     /*  The base address (relative to enclave start) of the enclave .eh_frame_hdr section */\n     globvar EH_FRM_HDR_OFFSET 8\n     /*  The size in bytes of enclave .eh_frame_hdr section */\n     globvar EH_FRM_HDR_LEN 8\n     /*  The base address (relative to enclave start) of the enclave .eh_frame section */\n     globvar EH_FRM_OFFSET 8\n-    /*  The size in bytes of enclacve .eh_frame section */\n+    /*  The size in bytes of enclave .eh_frame section */\n     globvar EH_FRM_LEN 8\n \n .org .Lxsave_clear+512"}, {"sha": "612d43fe20414a1a1420275c0a40abe804214c2d", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=9cb934600533f6bee22b7396d1ff013b381322a8", "patch": "@@ -735,7 +735,7 @@ impl ExitStatus {\n         // true on all actual versions of Unix, is widely assumed, and is specified in SuS\n         // https://pubs.opengroup.org/onlinepubs/9699919799/functions/wait.html. If it is not\n         // true for a platform pretending to be Unix, the tests (our doctests, and also\n-        // procsss_unix/tests.rs) will spot it. `ExitStatusError::code` assumes this too.\n+        // process_unix/tests.rs) will spot it. `ExitStatusError::code` assumes this too.\n         match NonZero_c_int::try_from(self.0) {\n             /* was nonzero */ Ok(failure) => Err(ExitStatusError(failure)),\n             /* was zero, couldn't convert */ Err(_) => Ok(()),"}, {"sha": "c40e7ada03cbde7d8ecc8603765c75a60b19f668", "filename": "library/std/src/sys/unix/process/process_vxworks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_vxworks.rs?ref=9cb934600533f6bee22b7396d1ff013b381322a8", "patch": "@@ -199,7 +199,7 @@ impl ExitStatus {\n         // true on all actual versions of Unix, is widely assumed, and is specified in SuS\n         // https://pubs.opengroup.org/onlinepubs/9699919799/functions/wait.html. If it is not\n         // true for a platform pretending to be Unix, the tests (our doctests, and also\n-        // procsss_unix/tests.rs) will spot it. `ExitStatusError::code` assumes this too.\n+        // process_unix/tests.rs) will spot it. `ExitStatusError::code` assumes this too.\n         match NonZero_c_int::try_from(self.0) {\n             Ok(failure) => Err(ExitStatusError(failure)),\n             Err(_) => Ok(()),"}, {"sha": "40e8e5a629e19c38fa81e05c0ff5ba97f5d70d10", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb934600533f6bee22b7396d1ff013b381322a8/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=9cb934600533f6bee22b7396d1ff013b381322a8", "patch": "@@ -494,7 +494,7 @@ impl Builder {\n                 MaybeDangling(mem::MaybeUninit::new(x))\n             }\n             fn into_inner(self) -> T {\n-                // SAFETY: we are always initiailized.\n+                // SAFETY: we are always initialized.\n                 let ret = unsafe { self.0.assume_init_read() };\n                 // Make sure we don't drop.\n                 mem::forget(self);\n@@ -503,7 +503,7 @@ impl Builder {\n         }\n         impl<T> Drop for MaybeDangling<T> {\n             fn drop(&mut self) {\n-                // SAFETY: we are always initiailized.\n+                // SAFETY: we are always initialized.\n                 unsafe { self.0.assume_init_drop() };\n             }\n         }"}]}