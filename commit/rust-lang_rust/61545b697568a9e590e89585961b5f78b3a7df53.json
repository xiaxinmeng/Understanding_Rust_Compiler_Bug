{"sha": "61545b697568a9e590e89585961b5f78b3a7df53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNTQ1YjY5NzU2OGE5ZTU5MGU4OTU4NTk2MWI1Zjc4YjNhN2RmNTM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-29T06:15:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-29T06:15:49Z"}, "message": "Rollup merge of #60542 - timvermeulen:step_sub_usize, r=scottmcm\n\nAdd Step::sub_usize\n\nRequired for #54054.\n\nI'm aware that the `Step` trait needs a rework, but this still seems like a reasonable addition?\n\nThis currently doesn't compile because Chalk contains a type that implement this trait, and this is a breaking change. How can that be fixed?", "tree": {"sha": "6949de6d7e39aa591863f21de1281c0f14379508", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6949de6d7e39aa591863f21de1281c0f14379508"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61545b697568a9e590e89585961b5f78b3a7df53", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc7iOWCRBK7hj4Ov3rIwAAdHIIAAEXu1xWFpfc7GYVICA/OSAD\ngaZkIceAO6sEuqGTADY2HYkQR7s1fL8Z+AYKhqoioFqYDYwT+Zh76Q69LvVeoEjq\nnuEknpn/oozhGkE4e0X65vHwlr4rRcPeM8QMpLR3Q8Vfyk75GAQtSmxys7Ca9Eem\n/+sN3JWqkjN8ynIMTBWBFj1zgBhbrlDemWP0EorvI65LjMPE851AN2YN6nJT6mXH\nUH4pJy+Ci6xuN1rGZS2IMdILh4QIXbnMWR5ksoK2+DFdbHSGRIKJfooHrdlxDc9Y\n/EHg1VJnl/XlN2eg97T+HZksu5nwSBXZriUeKJ9QNTRr7361CjIu3gGnyEJfSyo=\n=37sW\n-----END PGP SIGNATURE-----\n", "payload": "tree 6949de6d7e39aa591863f21de1281c0f14379508\nparent d67d1f24dc8b7ba8c00dacde3ee86c75aa85e91e\nparent f1d0829e20e3ff3ff78a09136968612887544af2\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1559110549 +0200\ncommitter GitHub <noreply@github.com> 1559110549 +0200\n\nRollup merge of #60542 - timvermeulen:step_sub_usize, r=scottmcm\n\nAdd Step::sub_usize\n\nRequired for #54054.\n\nI'm aware that the `Step` trait needs a rework, but this still seems like a reasonable addition?\n\nThis currently doesn't compile because Chalk contains a type that implement this trait, and this is a breaking change. How can that be fixed?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61545b697568a9e590e89585961b5f78b3a7df53", "html_url": "https://github.com/rust-lang/rust/commit/61545b697568a9e590e89585961b5f78b3a7df53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61545b697568a9e590e89585961b5f78b3a7df53/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d67d1f24dc8b7ba8c00dacde3ee86c75aa85e91e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d67d1f24dc8b7ba8c00dacde3ee86c75aa85e91e", "html_url": "https://github.com/rust-lang/rust/commit/d67d1f24dc8b7ba8c00dacde3ee86c75aa85e91e"}, {"sha": "f1d0829e20e3ff3ff78a09136968612887544af2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1d0829e20e3ff3ff78a09136968612887544af2", "html_url": "https://github.com/rust-lang/rust/commit/f1d0829e20e3ff3ff78a09136968612887544af2"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "6bbf776fb8f17bb7d6f14266e398ad3fc9e029bc", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/61545b697568a9e590e89585961b5f78b3a7df53/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61545b697568a9e590e89585961b5f78b3a7df53/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=61545b697568a9e590e89585961b5f78b3a7df53", "patch": "@@ -34,6 +34,13 @@ pub trait Step: Clone + PartialOrd + Sized {\n \n     /// Adds a `usize`, returning `None` on overflow.\n     fn add_usize(&self, n: usize) -> Option<Self>;\n+\n+    /// Subtracts a `usize`, returning `None` on underflow.\n+    fn sub_usize(&self, n: usize) -> Option<Self> {\n+        // this default implementation makes the addition of `sub_usize` a non-breaking change\n+        let _ = n;\n+        unimplemented!()\n+    }\n }\n \n // These are still macro-generated because the integer literals resolve to different types.\n@@ -85,6 +92,15 @@ macro_rules! step_impl_unsigned {\n                 }\n             }\n \n+            #[inline]\n+            #[allow(unreachable_patterns)]\n+            fn sub_usize(&self, n: usize) -> Option<Self> {\n+                match <$t>::try_from(n) {\n+                    Ok(n_as_t) => self.checked_sub(n_as_t),\n+                    Err(_) => None,\n+                }\n+            }\n+\n             step_identical_methods!();\n         }\n     )*)\n@@ -125,6 +141,25 @@ macro_rules! step_impl_signed {\n                 }\n             }\n \n+            #[inline]\n+            #[allow(unreachable_patterns)]\n+            fn sub_usize(&self, n: usize) -> Option<Self> {\n+                match <$unsigned>::try_from(n) {\n+                    Ok(n_as_unsigned) => {\n+                        // Wrapping in unsigned space handles cases like\n+                        // `80_i8.sub_usize(200) == Some(-120_i8)`,\n+                        // even though 200_usize is out of range for i8.\n+                        let wrapped = (*self as $unsigned).wrapping_sub(n_as_unsigned) as $t;\n+                        if wrapped <= *self {\n+                            Some(wrapped)\n+                        } else {\n+                            None  // Subtraction underflowed\n+                        }\n+                    }\n+                    Err(_) => None,\n+                }\n+            }\n+\n             step_identical_methods!();\n         }\n     )*)"}, {"sha": "c7f6e54c3d56b1dd713af054614859256a7721bb", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/61545b697568a9e590e89585961b5f78b3a7df53/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61545b697568a9e590e89585961b5f78b3a7df53/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=61545b697568a9e590e89585961b5f78b3a7df53", "patch": "@@ -212,6 +212,11 @@ macro_rules! newtype_index {\n             fn add_usize(&self, u: usize) -> Option<Self> {\n                 Idx::index(*self).checked_add(u).map(Self::new)\n             }\n+\n+            #[inline]\n+            fn sub_usize(&self, u: usize) -> Option<Self> {\n+                Idx::index(*self).checked_sub(u).map(Self::new)\n+            }\n         }\n \n         impl From<$type> for u32 {"}, {"sha": "f1b1656745e7c487b8ba1c75c69a3487e34a16db", "filename": "src/test/run-pass/impl-trait/example-calendar.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61545b697568a9e590e89585961b5f78b3a7df53/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61545b697568a9e590e89585961b5f78b3a7df53/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs?ref=61545b697568a9e590e89585961b5f78b3a7df53", "patch": "@@ -180,6 +180,10 @@ impl std::iter::Step for NaiveDate {\n     fn add_usize(&self, _: usize) -> Option<Self> {\n         unimplemented!()\n     }\n+\n+    fn sub_usize(&self, _: usize) -> Option<Self> {\n+        unimplemented!()\n+    }\n }\n \n #[derive(Copy, Clone, Debug, Eq, Ord, PartialEq, PartialOrd)]"}]}