{"sha": "9809f5d21990d9e24b3e9876ea7da756fd4e9def", "node_id": "C_kwDOAAsO6NoAKDk4MDlmNWQyMTk5MGQ5ZTI0YjNlOTg3NmVhN2RhNzU2ZmQ0ZTlkZWY", "commit": {"author": {"name": "antoyo", "email": "antoyo@users.noreply.github.com", "date": "2021-09-28T13:18:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-28T13:18:27Z"}, "message": "Update to nightly-2021-09-28 (#97)", "tree": {"sha": "dc8fba697583988b3f2ff88cc4701be02e7d5e6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc8fba697583988b3f2ff88cc4701be02e7d5e6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9809f5d21990d9e24b3e9876ea7da756fd4e9def", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhUxYjCRBK7hj4Ov3rIwAAPZgIAGIe8lufcpLwzUKo6c1i3hIr\n5cyWWjFnuPXhGmGAYhhYxij3AZh/4EWPsYph3TD36B0+PZIQwujxvVxIeTXVtd2o\nD2Yo+W9+N+IEv6fkBWR8MrotO2YOGFsGgTtTMRHrgS/WPa6RqNILROkHbjYxdAPP\nO8Qhbg8J0C4UEIeIhvfgny7pkcKzZu5KhrexGM/L51nxnF/we6tpdKOfhOhQT0tD\nhaOOxOzp23j5j46Wj7bIvgmo42gRdihr0D3Au9hlrjJLkiUnF6gtbecOG5dWk5mH\nSmIX48dmohhyXQPoOBLBC+0DS/TxdDJUcICErWuxhxP05TxZq1EwCmVv+RfJPew=\n=JqdW\n-----END PGP SIGNATURE-----\n", "payload": "tree dc8fba697583988b3f2ff88cc4701be02e7d5e6e\nparent 11c2023ef534f037ba492a0725bfff9b1c315cdb\nauthor antoyo <antoyo@users.noreply.github.com> 1632835107 -0400\ncommitter GitHub <noreply@github.com> 1632835107 -0400\n\nUpdate to nightly-2021-09-28 (#97)\n\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9809f5d21990d9e24b3e9876ea7da756fd4e9def", "html_url": "https://github.com/rust-lang/rust/commit/9809f5d21990d9e24b3e9876ea7da756fd4e9def", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9809f5d21990d9e24b3e9876ea7da756fd4e9def/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11c2023ef534f037ba492a0725bfff9b1c315cdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/11c2023ef534f037ba492a0725bfff9b1c315cdb", "html_url": "https://github.com/rust-lang/rust/commit/11c2023ef534f037ba492a0725bfff9b1c315cdb"}], "stats": {"total": 76, "additions": 63, "deletions": 13}, "files": [{"sha": "d311a33f807b7e238422d21f43fdc22e2998c7df", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9809f5d21990d9e24b3e9876ea7da756fd4e9def/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/9809f5d21990d9e24b3e9876ea7da756fd4e9def/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=9809f5d21990d9e24b3e9876ea7da756fd4e9def", "patch": "@@ -1 +1 @@\n-nightly-2021-09-17\n+nightly-2021-09-28"}, {"sha": "ac908418ee4bf6fcf160a070090705e157c5793c", "filename": "src/builder.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9809f5d21990d9e24b3e9876ea7da756fd4e9def/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9809f5d21990d9e24b3e9876ea7da756fd4e9def/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=9809f5d21990d9e24b3e9876ea7da756fd4e9def", "patch": "@@ -31,11 +31,12 @@ use rustc_codegen_ssa::traits::{\n     StaticBuilderMethods,\n };\n use rustc_middle::ty::{ParamEnv, Ty, TyCtxt};\n-use rustc_middle::ty::layout::{HasParamEnv, HasTyCtxt, LayoutError, LayoutOfHelpers, TyAndLayout};\n+use rustc_middle::ty::layout::{FnAbiError, FnAbiOfHelpers, FnAbiRequest, HasParamEnv, HasTyCtxt, LayoutError, LayoutOfHelpers, TyAndLayout};\n use rustc_span::Span;\n use rustc_span::def_id::DefId;\n use rustc_target::abi::{\n     self,\n+    call::FnAbi,\n     Align,\n     HasDataLayout,\n     Size,\n@@ -347,6 +348,20 @@ impl<'tcx> LayoutOfHelpers<'tcx> for Builder<'_, '_, 'tcx> {\n     }\n }\n \n+impl<'tcx> FnAbiOfHelpers<'tcx> for Builder<'_, '_, 'tcx> {\n+    type FnAbiOfResult = &'tcx FnAbi<'tcx, Ty<'tcx>>;\n+\n+    #[inline]\n+    fn handle_fn_abi_err(\n+        &self,\n+        err: FnAbiError<'tcx>,\n+        span: Span,\n+        fn_abi_request: FnAbiRequest<'tcx>,\n+    ) -> ! {\n+        self.cx.handle_fn_abi_err(err, span, fn_abi_request)\n+    }\n+}\n+\n impl<'gcc, 'tcx> Deref for Builder<'_, 'gcc, 'tcx> {\n     type Target = CodegenCx<'gcc, 'tcx>;\n "}, {"sha": "76419b103d049e3c2b50c0831b3c1e4c3ff28959", "filename": "src/callee.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9809f5d21990d9e24b3e9876ea7da756fd4e9def/src%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9809f5d21990d9e24b3e9876ea7da756fd4e9def/src%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcallee.rs?ref=9809f5d21990d9e24b3e9876ea7da756fd4e9def", "patch": "@@ -1,8 +1,7 @@\n use gccjit::{FunctionType, RValue};\n use rustc_codegen_ssa::traits::BaseTypeMethods;\n-use rustc_middle::ty::{Instance, TypeFoldable};\n-use rustc_middle::ty::layout::{FnAbiExt, HasTyCtxt};\n-use rustc_target::abi::call::FnAbi;\n+use rustc_middle::ty::{self, Instance, TypeFoldable};\n+use rustc_middle::ty::layout::{FnAbiOf, HasTyCtxt};\n \n use crate::abi::FnAbiGccExt;\n use crate::context::CodegenCx;\n@@ -26,7 +25,7 @@ pub fn get_fn<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, instance: Instance<'tcx>)\n \n     let sym = tcx.symbol_name(instance).name;\n \n-    let fn_abi = FnAbi::of_instance(cx, instance, &[]);\n+    let fn_abi = cx.fn_abi_of_instance(instance, ty::List::empty());\n \n     let func =\n         if let Some(func) = cx.get_declared_value(&sym) {"}, {"sha": "7677ade7314e52d1ce8af86ad1fbc54d3b45c39b", "filename": "src/context.rs", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9809f5d21990d9e24b3e9876ea7da756fd4e9def/src%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9809f5d21990d9e24b3e9876ea7da756fd4e9def/src%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcontext.rs?ref=9809f5d21990d9e24b3e9876ea7da756fd4e9def", "patch": "@@ -21,10 +21,10 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_middle::span_bug;\n use rustc_middle::mir::mono::CodegenUnit;\n use rustc_middle::ty::{self, Instance, ParamEnv, PolyExistentialTraitRef, Ty, TyCtxt};\n-use rustc_middle::ty::layout::{HasParamEnv, HasTyCtxt, LayoutError, TyAndLayout, LayoutOfHelpers};\n+use rustc_middle::ty::layout::{FnAbiError, FnAbiOfHelpers, FnAbiRequest, HasParamEnv, HasTyCtxt, LayoutError, TyAndLayout, LayoutOfHelpers};\n use rustc_session::Session;\n use rustc_span::{Span, Symbol};\n-use rustc_target::abi::{HasDataLayout, PointeeInfo, Size, TargetDataLayout, VariantIdx};\n+use rustc_target::abi::{call::FnAbi, HasDataLayout, PointeeInfo, Size, TargetDataLayout, VariantIdx};\n use rustc_target::spec::{HasTargetSpec, Target, TlsModel};\n \n use crate::callee::get_fn;\n@@ -401,6 +401,43 @@ impl<'gcc, 'tcx> LayoutOfHelpers<'tcx> for CodegenCx<'gcc, 'tcx> {\n     }\n }\n \n+impl<'gcc, 'tcx> FnAbiOfHelpers<'tcx> for CodegenCx<'gcc, 'tcx> {\n+    type FnAbiOfResult = &'tcx FnAbi<'tcx, Ty<'tcx>>;\n+\n+    #[inline]\n+    fn handle_fn_abi_err(\n+        &self,\n+        err: FnAbiError<'tcx>,\n+        span: Span,\n+        fn_abi_request: FnAbiRequest<'tcx>,\n+    ) -> ! {\n+        if let FnAbiError::Layout(LayoutError::SizeOverflow(_)) = err {\n+            self.sess().span_fatal(span, &err.to_string())\n+        } else {\n+            match fn_abi_request {\n+                FnAbiRequest::OfFnPtr { sig, extra_args } => {\n+                    span_bug!(\n+                        span,\n+                        \"`fn_abi_of_fn_ptr({}, {:?})` failed: {}\",\n+                        sig,\n+                        extra_args,\n+                        err\n+                    );\n+                }\n+                FnAbiRequest::OfInstance { instance, extra_args } => {\n+                    span_bug!(\n+                        span,\n+                        \"`fn_abi_of_instance({}, {:?})` failed: {}\",\n+                        instance,\n+                        extra_args,\n+                        err\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}\n+\n impl<'tcx, 'gcc> HasParamEnv<'tcx> for CodegenCx<'gcc, 'tcx> {\n     fn param_env(&self) -> ParamEnv<'tcx> {\n         ParamEnv::reveal_all()"}, {"sha": "e21d40b6c37e37f67bf4644b78aefcd7c13fe2cd", "filename": "src/mono_item.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9809f5d21990d9e24b3e9876ea7da756fd4e9def/src%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9809f5d21990d9e24b3e9876ea7da756fd4e9def/src%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmono_item.rs?ref=9809f5d21990d9e24b3e9876ea7da756fd4e9def", "patch": "@@ -2,9 +2,8 @@ use rustc_codegen_ssa::traits::PreDefineMethods;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::mono::{Linkage, Visibility};\n use rustc_middle::ty::{self, Instance, TypeFoldable};\n-use rustc_middle::ty::layout::{FnAbiExt, LayoutOf};\n+use rustc_middle::ty::layout::{FnAbiOf, LayoutOf};\n use rustc_span::def_id::DefId;\n-use rustc_target::abi::call::FnAbi;\n \n use crate::base;\n use crate::context::CodegenCx;\n@@ -27,7 +26,7 @@ impl<'gcc, 'tcx> PreDefineMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n     fn predefine_fn(&self, instance: Instance<'tcx>, linkage: Linkage, _visibility: Visibility, symbol_name: &str) {\n         assert!(!instance.substs.needs_infer());\n \n-        let fn_abi = FnAbi::of_instance(self, instance, &[]);\n+        let fn_abi = self.fn_abi_of_instance(instance, ty::List::empty());\n         self.linkage.set(base::linkage_to_gcc(linkage));\n         let _decl = self.declare_fn(symbol_name, &fn_abi);\n         //let attrs = self.tcx.codegen_fn_attrs(instance.def_id());"}, {"sha": "9c39c8f91a1ff54ece1fdccfd27b92adef4602eb", "filename": "src/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9809f5d21990d9e24b3e9876ea7da756fd4e9def/src%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9809f5d21990d9e24b3e9876ea7da756fd4e9def/src%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftype_of.rs?ref=9809f5d21990d9e24b3e9876ea7da756fd4e9def", "patch": "@@ -4,7 +4,7 @@ use gccjit::{Struct, Type};\n use crate::rustc_codegen_ssa::traits::{BaseTypeMethods, DerivedTypeMethods, LayoutTypeMethods};\n use rustc_middle::bug;\n use rustc_middle::ty::{self, Ty, TypeFoldable};\n-use rustc_middle::ty::layout::{FnAbiExt, LayoutOf, TyAndLayout};\n+use rustc_middle::ty::layout::{FnAbiOf, LayoutOf, TyAndLayout};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_target::abi::{self, Abi, F32, F64, FieldsShape, Int, Integer, Pointer, PointeeInfo, Size, TyAbiInterface, Variants};\n use rustc_target::abi::call::{CastTarget, FnAbi, Reg};\n@@ -160,7 +160,7 @@ impl<'tcx> LayoutGccExt<'tcx> for TyAndLayout<'tcx> {\n                     ty::Adt(def, _) if def.is_box() => {\n                         cx.type_ptr_to(cx.layout_of(self.ty.boxed_ty()).gcc_type(cx, true))\n                     }\n-                    ty::FnPtr(sig) => cx.fn_ptr_backend_type(&FnAbi::of_fn_ptr(cx, sig, &[])),\n+                    ty::FnPtr(sig) => cx.fn_ptr_backend_type(&cx.fn_abi_of_fn_ptr(sig, ty::List::empty())),\n                     _ => self.scalar_gcc_type_at(cx, scalar, Size::ZERO),\n                 };\n             cx.scalar_types.borrow_mut().insert(self.ty, ty);"}]}