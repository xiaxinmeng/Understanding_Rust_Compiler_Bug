{"sha": "4fe1cb1aff79ecf66a7962374c5e048110f8d782", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmZTFjYjFhZmY3OWVjZjY2YTc5NjIzNzRjNWUwNDgxMTBmOGQ3ODI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-20T04:10:37Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:28Z"}, "message": "librustc: De-`@mut` the vtable map", "tree": {"sha": "bf784ff60365ccf55ddec9fcd8002f1f29e98c0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf784ff60365ccf55ddec9fcd8002f1f29e98c0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fe1cb1aff79ecf66a7962374c5e048110f8d782", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fe1cb1aff79ecf66a7962374c5e048110f8d782", "html_url": "https://github.com/rust-lang/rust/commit/4fe1cb1aff79ecf66a7962374c5e048110f8d782", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fe1cb1aff79ecf66a7962374c5e048110f8d782/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd745b388dad16973baf798a86b7141f96b76af4", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd745b388dad16973baf798a86b7141f96b76af4", "html_url": "https://github.com/rust-lang/rust/commit/dd745b388dad16973baf798a86b7141f96b76af4"}], "stats": {"total": 63, "additions": 40, "deletions": 23}, "files": [{"sha": "6ce30fbe01b39e148ac648f3759507847fe292f6", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4fe1cb1aff79ecf66a7962374c5e048110f8d782/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe1cb1aff79ecf66a7962374c5e048110f8d782/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=4fe1cb1aff79ecf66a7962374c5e048110f8d782", "patch": "@@ -992,7 +992,8 @@ fn encode_side_tables_for_id(ecx: &e::EncodeContext,\n     }\n \n     {\n-        let r = maps.vtable_map.find(&id);\n+        let vtable_map = maps.vtable_map.borrow();\n+        let r = vtable_map.get().find(&id);\n         for &dr in r.iter() {\n             ebml_w.tag(c::tag_table_vtable_map, |ebml_w| {\n                 ebml_w.id(id);\n@@ -1267,9 +1268,11 @@ fn decode_side_tables(xcx: @ExtendedDecodeContext,\n                             val_dsr.read_method_map_entry(xcx));\n                     }\n                     c::tag_table_vtable_map => {\n-                        dcx.maps.vtable_map.insert(\n-                            id,\n-                            val_dsr.read_vtable_res(xcx.dcx.tcx, xcx.dcx.cdata));\n+                        let vtable_res =\n+                            val_dsr.read_vtable_res(xcx.dcx.tcx,\n+                                                    xcx.dcx.cdata);\n+                        let mut vtable_map = dcx.maps.vtable_map.borrow_mut();\n+                        vtable_map.get().insert(id, vtable_res);\n                     }\n                     c::tag_table_adjustments => {\n                         let adj: @ty::AutoAdjustment = @Decodable::decode(val_dsr);"}, {"sha": "43bbd3881f96f5613665b21489ace5f6a4415a0c", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fe1cb1aff79ecf66a7962374c5e048110f8d782/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe1cb1aff79ecf66a7962374c5e048110f8d782/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=4fe1cb1aff79ecf66a7962374c5e048110f8d782", "patch": "@@ -122,7 +122,7 @@ pub fn lookup_variant_by_id(tcx: ty::ctxt,\n         let maps = astencode::Maps {\n             root_map: @RefCell::new(HashMap::new()),\n             method_map: @mut HashMap::new(),\n-            vtable_map: @mut HashMap::new(),\n+            vtable_map: @RefCell::new(HashMap::new()),\n             write_guard_map: @mut HashSet::new(),\n             capture_map: @RefCell::new(HashMap::new())\n         };\n@@ -172,7 +172,7 @@ pub fn lookup_const_by_id(tcx: ty::ctxt,\n         let maps = astencode::Maps {\n             root_map: @RefCell::new(HashMap::new()),\n             method_map: @mut HashMap::new(),\n-            vtable_map: @mut HashMap::new(),\n+            vtable_map: @RefCell::new(HashMap::new()),\n             write_guard_map: @mut HashSet::new(),\n             capture_map: @RefCell::new(HashMap::new())\n         };"}, {"sha": "4a2ea244e009181ea780327fe08739b36183c975", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4fe1cb1aff79ecf66a7962374c5e048110f8d782/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe1cb1aff79ecf66a7962374c5e048110f8d782/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=4fe1cb1aff79ecf66a7962374c5e048110f8d782", "patch": "@@ -1160,7 +1160,8 @@ pub fn node_id_type_params(bcx: &Block, id: ast::NodeId) -> ~[ty::t] {\n \n pub fn node_vtables(bcx: @Block, id: ast::NodeId)\n                  -> Option<typeck::vtable_res> {\n-    let raw_vtables = bcx.ccx().maps.vtable_map.find(&id);\n+    let vtable_map = bcx.ccx().maps.vtable_map.borrow();\n+    let raw_vtables = vtable_map.get().find(&id);\n     raw_vtables.map(|vts| resolve_vtables_in_fn_ctxt(bcx.fcx, *vts))\n }\n "}, {"sha": "f4df98870bbdfa8133e96e1d8ad9b05f8fcbfa60", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4fe1cb1aff79ecf66a7962374c5e048110f8d782/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe1cb1aff79ecf66a7962374c5e048110f8d782/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=4fe1cb1aff79ecf66a7962374c5e048110f8d782", "patch": "@@ -262,8 +262,11 @@ pub fn trans_static_method_callee(bcx: @Block,\n     debug!(\"trans_static_method_callee: method_id={:?}, callee_id={:?}, \\\n             name={}\", method_id, callee_id, ccx.sess.str_of(mname));\n \n-    let vtbls = resolve_vtables_in_fn_ctxt(\n-        bcx.fcx, ccx.maps.vtable_map.get_copy(&callee_id));\n+    let vtbls = {\n+        let vtable_map = ccx.maps.vtable_map.borrow();\n+        vtable_map.get().get_copy(&callee_id)\n+    };\n+    let vtbls = resolve_vtables_in_fn_ctxt(bcx.fcx, vtbls);\n \n     match vtbls[bound_index][0] {\n         typeck::vtable_static(impl_did, ref rcvr_substs, rcvr_origins) => {\n@@ -670,8 +673,11 @@ pub fn trans_trait_cast(bcx: @Block,\n     // Store the vtable into the pair or triple.\n     // This is structured a bit funny because of dynamic borrow failures.\n     let origins = {\n-        let res = ccx.maps.vtable_map.get(&id);\n-        let res = resolve_vtables_in_fn_ctxt(bcx.fcx, *res);\n+        let res = {\n+            let vtable_map = ccx.maps.vtable_map.borrow();\n+            *vtable_map.get().get(&id)\n+        };\n+        let res = resolve_vtables_in_fn_ctxt(bcx.fcx, res);\n         res[0]\n     };\n     let vtable = get_vtable(bcx, v_ty, origins);"}, {"sha": "82f7ba2e88bffdc31263ddd094e8a75a482fb934", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fe1cb1aff79ecf66a7962374c5e048110f8d782/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe1cb1aff79ecf66a7962374c5e048110f8d782/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=4fe1cb1aff79ecf66a7962374c5e048110f8d782", "patch": "@@ -266,7 +266,7 @@ impl Inherited {\n             node_type_substs: RefCell::new(HashMap::new()),\n             adjustments: RefCell::new(HashMap::new()),\n             method_map: @mut HashMap::new(),\n-            vtable_map: @mut HashMap::new(),\n+            vtable_map: @RefCell::new(HashMap::new()),\n         }\n     }\n }"}, {"sha": "c6636db8393913fd9a8866162bfa8a9dc1d8663a", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4fe1cb1aff79ecf66a7962374c5e048110f8d782/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe1cb1aff79ecf66a7962374c5e048110f8d782/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=4fe1cb1aff79ecf66a7962374c5e048110f8d782", "patch": "@@ -538,7 +538,8 @@ fn insert_vtables(fcx: @FnCtxt,\n                   vtables: vtable_res) {\n     debug!(\"insert_vtables(callee_id={}, vtables={:?})\",\n            callee_id, vtables.repr(fcx.tcx()));\n-    fcx.inh.vtable_map.insert(callee_id, vtables);\n+    let mut vtable_map = fcx.inh.vtable_map.borrow_mut();\n+    vtable_map.get().insert(callee_id, vtables);\n }\n \n pub fn location_info_for_expr(expr: @ast::Expr) -> LocationInfo {"}, {"sha": "802f6781d3bb61e8916516005466954c25a11c5b", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4fe1cb1aff79ecf66a7962374c5e048110f8d782/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe1cb1aff79ecf66a7962374c5e048110f8d782/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=4fe1cb1aff79ecf66a7962374c5e048110f8d782", "patch": "@@ -82,14 +82,20 @@ fn resolve_method_map_entry(fcx: @FnCtxt, sp: Span, id: ast::NodeId) {\n \n fn resolve_vtable_map_entry(fcx: @FnCtxt, sp: Span, id: ast::NodeId) {\n     // Resolve any method map entry\n-    match fcx.inh.vtable_map.find(&id) {\n-        None => {}\n-        Some(origins) => {\n-            let r_origins = resolve_origins(fcx, sp, *origins);\n-            let vtable_map = fcx.ccx.vtable_map;\n-            vtable_map.insert(id, r_origins);\n-            debug!(\"writeback::resolve_vtable_map_entry(id={}, vtables={:?})\",\n-                   id, r_origins.repr(fcx.tcx()));\n+    {\n+        let origins_opt = {\n+            let vtable_map = fcx.inh.vtable_map.borrow();\n+            vtable_map.get().find_copy(&id)\n+        };\n+        match origins_opt {\n+            None => {}\n+            Some(origins) => {\n+                let r_origins = resolve_origins(fcx, sp, origins);\n+                let mut vtable_map = fcx.ccx.vtable_map.borrow_mut();\n+                vtable_map.get().insert(id, r_origins);\n+                debug!(\"writeback::resolve_vtable_map_entry(id={}, vtables={:?})\",\n+                       id, r_origins.repr(fcx.tcx()));\n+            }\n         }\n     }\n "}, {"sha": "2da5c09e0022e51a9437c83e320e9199dcc09224", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fe1cb1aff79ecf66a7962374c5e048110f8d782/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe1cb1aff79ecf66a7962374c5e048110f8d782/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=4fe1cb1aff79ecf66a7962374c5e048110f8d782", "patch": "@@ -204,7 +204,7 @@ impl Repr for vtable_origin {\n     }\n }\n \n-pub type vtable_map = @mut HashMap<ast::NodeId, vtable_res>;\n+pub type vtable_map = @RefCell<HashMap<ast::NodeId, vtable_res>>;\n \n \n // Information about the vtable resolutions for for a trait impl.\n@@ -459,7 +459,7 @@ pub fn check_crate(tcx: ty::ctxt,\n     let ccx = @mut CrateCtxt {\n         trait_map: trait_map,\n         method_map: @mut HashMap::new(),\n-        vtable_map: @mut HashMap::new(),\n+        vtable_map: @RefCell::new(HashMap::new()),\n         tcx: tcx\n     };\n "}]}