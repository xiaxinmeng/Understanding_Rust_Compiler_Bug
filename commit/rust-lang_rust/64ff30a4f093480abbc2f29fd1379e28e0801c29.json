{"sha": "64ff30a4f093480abbc2f29fd1379e28e0801c29", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZmYzMGE0ZjA5MzQ4MGFiYmMyZjI5ZmQxMzc5ZTI4ZTA4MDFjMjk=", "commit": {"author": {"name": "Kevin Murphy", "email": "kemurphy.cmu@gmail.com", "date": "2013-07-23T02:34:04Z"}, "committer": {"name": "Kevin Murphy", "email": "kemurphy.cmu@gmail.com", "date": "2013-07-23T02:34:04Z"}, "message": "Add link_section attribute for static and fn items\n\nThis allows for control over the section placement of static, static\nmut, and fn items.  One caveat is that if a static and a static mut are\nplaced in the same section, the static is declared first, and the static\nmut is assigned to, the generated program crashes.  For example:\n\n#[link_section=\".boot\"]\nstatic foo : uint = 0xdeadbeef;\n\n#[link_section=\".boot\"]\nstatic mut bar : uint = 0xcafebabe;\n\nDeclaring bar first would mark .bootdata as writable, preventing the\ncrash when bar is written to.", "tree": {"sha": "9a920795391ad842f0c36b2b2897bbdcd0ab0d0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a920795391ad842f0c36b2b2897bbdcd0ab0d0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64ff30a4f093480abbc2f29fd1379e28e0801c29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64ff30a4f093480abbc2f29fd1379e28e0801c29", "html_url": "https://github.com/rust-lang/rust/commit/64ff30a4f093480abbc2f29fd1379e28e0801c29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64ff30a4f093480abbc2f29fd1379e28e0801c29/comments", "author": {"login": "kemurphy", "id": 1501435, "node_id": "MDQ6VXNlcjE1MDE0MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1501435?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kemurphy", "html_url": "https://github.com/kemurphy", "followers_url": "https://api.github.com/users/kemurphy/followers", "following_url": "https://api.github.com/users/kemurphy/following{/other_user}", "gists_url": "https://api.github.com/users/kemurphy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kemurphy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kemurphy/subscriptions", "organizations_url": "https://api.github.com/users/kemurphy/orgs", "repos_url": "https://api.github.com/users/kemurphy/repos", "events_url": "https://api.github.com/users/kemurphy/events{/privacy}", "received_events_url": "https://api.github.com/users/kemurphy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kemurphy", "id": 1501435, "node_id": "MDQ6VXNlcjE1MDE0MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1501435?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kemurphy", "html_url": "https://github.com/kemurphy", "followers_url": "https://api.github.com/users/kemurphy/followers", "following_url": "https://api.github.com/users/kemurphy/following{/other_user}", "gists_url": "https://api.github.com/users/kemurphy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kemurphy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kemurphy/subscriptions", "organizations_url": "https://api.github.com/users/kemurphy/orgs", "repos_url": "https://api.github.com/users/kemurphy/repos", "events_url": "https://api.github.com/users/kemurphy/events{/privacy}", "received_events_url": "https://api.github.com/users/kemurphy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74f4badcab30c91b018f308d2c44641abed7d732", "url": "https://api.github.com/repos/rust-lang/rust/commits/74f4badcab30c91b018f308d2c44641abed7d732", "html_url": "https://github.com/rust-lang/rust/commit/74f4badcab30c91b018f308d2c44641abed7d732"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "7e8806aa58b9b214a5cf9ac172d5eabd6c102c27", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/64ff30a4f093480abbc2f29fd1379e28e0801c29/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ff30a4f093480abbc2f29fd1379e28e0801c29/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=64ff30a4f093480abbc2f29fd1379e28e0801c29", "patch": "@@ -2456,7 +2456,7 @@ pub fn get_item_val(ccx: @mut CrateContext, id: ast::node_id) -> ValueRef {\n         let val = match item {\n           ast_map::node_item(i, pth) => {\n             let my_path = vec::append((*pth).clone(), [path_name(i.ident)]);\n-            match i.node {\n+            let v = match i.node {\n               ast::item_static(_, m, expr) => {\n                 let typ = ty::node_id_to_type(ccx.tcx, i.id);\n                 let s = mangle_exported_name(ccx, my_path, typ);\n@@ -2488,7 +2488,16 @@ pub fn get_item_val(ccx: @mut CrateContext, id: ast::node_id) -> ValueRef {\n                 llfn\n               }\n               _ => fail!(\"get_item_val: weird result in table\")\n+            };\n+            match (attr::first_attr_value_str_by_name(i.attrs, \"link_section\")) {\n+                Some(sect) => unsafe {\n+                    do sect.as_c_str |buf| {\n+                        llvm::LLVMSetSection(v, buf);\n+                    }\n+                },\n+                None => ()\n             }\n+            v\n           }\n           ast_map::node_trait_method(trait_method, _, pth) => {\n             debug!(\"get_item_val(): processing a node_trait_method\");"}]}