{"sha": "8e35c4f74ccc8e5cd537f50dd02ffb25edfd5ba6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMzVjNGY3NGNjYzhlNWNkNTM3ZjUwZGQwMmZmYjI1ZWRmZDViYTY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-01-08T17:27:06Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-01-11T08:55:09Z"}, "message": "feature_gate: Remove `GateStrength`", "tree": {"sha": "ff91f68ff513006f5a41ee243942df3523956261", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff91f68ff513006f5a41ee243942df3523956261"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e35c4f74ccc8e5cd537f50dd02ffb25edfd5ba6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e35c4f74ccc8e5cd537f50dd02ffb25edfd5ba6", "html_url": "https://github.com/rust-lang/rust/commit/8e35c4f74ccc8e5cd537f50dd02ffb25edfd5ba6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e35c4f74ccc8e5cd537f50dd02ffb25edfd5ba6/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88d1109600660d1acb471e85631e1ea349843fd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/88d1109600660d1acb471e85631e1ea349843fd9", "html_url": "https://github.com/rust-lang/rust/commit/88d1109600660d1acb471e85631e1ea349843fd9"}], "stats": {"total": 85, "additions": 11, "deletions": 74}, "files": [{"sha": "e6f4535a38dbaa51485404aacf676e994d767b92", "filename": "src/librustc_ast_passes/feature_gate.rs", "status": "modified", "additions": 10, "deletions": 37, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/8e35c4f74ccc8e5cd537f50dd02ffb25edfd5ba6/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e35c4f74ccc8e5cd537f50dd02ffb25edfd5ba6/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Ffeature_gate.rs?ref=8e35c4f74ccc8e5cd537f50dd02ffb25edfd5ba6", "patch": "@@ -8,37 +8,25 @@ use rustc_span::Span;\n use syntax::ast::{self, AssocTyConstraint, AssocTyConstraintKind, NodeId};\n use syntax::ast::{GenericParam, GenericParamKind, PatKind, RangeEnd, VariantData};\n use syntax::attr;\n-use syntax::sess::{feature_err, leveled_feature_err, GateStrength, ParseSess};\n+use syntax::sess::{feature_err, feature_err_issue, ParseSess};\n use syntax::visit::{self, FnKind, Visitor};\n \n use log::debug;\n \n macro_rules! gate_feature_fn {\n-    ($cx: expr, $has_feature: expr, $span: expr, $name: expr, $explain: expr, $level: expr) => {{\n-        let (cx, has_feature, span, name, explain, level) =\n-            (&*$cx, $has_feature, $span, $name, $explain, $level);\n+    ($cx: expr, $has_feature: expr, $span: expr, $name: expr, $explain: expr) => {{\n+        let (cx, has_feature, span, name, explain) = (&*$cx, $has_feature, $span, $name, $explain);\n         let has_feature: bool = has_feature(&$cx.features);\n         debug!(\"gate_feature(feature = {:?}, span = {:?}); has? {}\", name, span, has_feature);\n         if !has_feature && !span.allows_unstable($name) {\n-            leveled_feature_err(cx.parse_sess, name, span, GateIssue::Language, explain, level)\n-                .emit();\n+            feature_err_issue(cx.parse_sess, name, span, GateIssue::Language, explain).emit();\n         }\n     }};\n }\n \n-macro_rules! gate_feature {\n+macro_rules! gate_feature_post {\n     ($cx: expr, $feature: ident, $span: expr, $explain: expr) => {\n-        gate_feature_fn!(\n-            $cx,\n-            |x: &Features| x.$feature,\n-            $span,\n-            sym::$feature,\n-            $explain,\n-            GateStrength::Hard\n-        )\n-    };\n-    ($cx: expr, $feature: ident, $span: expr, $explain: expr, $level: expr) => {\n-        gate_feature_fn!($cx, |x: &Features| x.$feature, $span, sym::$feature, $explain, $level)\n+        gate_feature_fn!($cx, |x: &Features| x.$feature, $span, sym::$feature, $explain)\n     };\n }\n \n@@ -51,21 +39,6 @@ struct PostExpansionVisitor<'a> {\n     features: &'a Features,\n }\n \n-macro_rules! gate_feature_post {\n-    ($cx: expr, $feature: ident, $span: expr, $explain: expr) => {{\n-        let (cx, span) = ($cx, $span);\n-        if !span.allows_unstable(sym::$feature) {\n-            gate_feature!(cx, $feature, span, $explain)\n-        }\n-    }};\n-    ($cx: expr, $feature: ident, $span: expr, $explain: expr, $level: expr) => {{\n-        let (cx, span) = ($cx, $span);\n-        if !span.allows_unstable(sym::$feature) {\n-            gate_feature!(cx, $feature, span, $explain, $level)\n-        }\n-    }};\n-}\n-\n impl<'a> PostExpansionVisitor<'a> {\n     fn check_abi(&self, abi: ast::StrLit) {\n         let ast::StrLit { symbol_unescaped, span, .. } = abi;\n@@ -257,15 +230,15 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             attr.ident().and_then(|ident| BUILTIN_ATTRIBUTE_MAP.get(&ident.name)).map(|a| **a);\n         // Check feature gates for built-in attributes.\n         if let Some((.., AttributeGate::Gated(_, name, descr, has_feature))) = attr_info {\n-            gate_feature_fn!(self, has_feature, attr.span, name, descr, GateStrength::Hard);\n+            gate_feature_fn!(self, has_feature, attr.span, name, descr);\n         }\n         // Check unstable flavors of the `#[doc]` attribute.\n         if attr.check_name(sym::doc) {\n             for nested_meta in attr.meta_item_list().unwrap_or_default() {\n                 macro_rules! gate_doc { ($($name:ident => $feature:ident)*) => {\n                     $(if nested_meta.check_name(sym::$name) {\n                         let msg = concat!(\"`#[doc(\", stringify!($name), \")]` is experimental\");\n-                        gate_feature!(self, $feature, attr.span, msg);\n+                        gate_feature_post!(self, $feature, attr.span, msg);\n                     })*\n                 }}\n \n@@ -666,7 +639,7 @@ pub fn check_crate(\n     macro_rules! gate_all {\n         ($gate:ident, $msg:literal) => {\n             for span in spans.get(&sym::$gate).unwrap_or(&vec![]) {\n-                gate_feature!(&visitor, $gate, *span, $msg);\n+                gate_feature_post!(&visitor, $gate, *span, $msg);\n             }\n         };\n     }\n@@ -688,7 +661,7 @@ pub fn check_crate(\n             // disabling these uses of early feature-gatings.\n             if false {\n                 for span in spans.get(&sym::$gate).unwrap_or(&vec![]) {\n-                    gate_feature!(&visitor, $gate, *span, $msg);\n+                    gate_feature_post!(&visitor, $gate, *span, $msg);\n                 }\n             }\n         };"}, {"sha": "a98cf929095ead3aa73ea261caace287291f0e14", "filename": "src/librustc_session/parse.rs", "status": "modified", "additions": 1, "deletions": 37, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8e35c4f74ccc8e5cd537f50dd02ffb25edfd5ba6/src%2Flibrustc_session%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e35c4f74ccc8e5cd537f50dd02ffb25edfd5ba6/src%2Flibrustc_session%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fparse.rs?ref=8e35c4f74ccc8e5cd537f50dd02ffb25edfd5ba6", "patch": "@@ -62,16 +62,6 @@ impl GatedSpans {\n     }\n }\n \n-/// The strenght of a feature gate.\n-/// Either it is a `Hard` error, or only a `Soft` warning.\n-#[derive(Debug, Copy, Clone, PartialEq)]\n-pub enum GateStrength {\n-    /// A hard error. (Most feature gates should use this.)\n-    Hard,\n-    /// Only a warning. (Use this only as backwards-compatibility demands.)\n-    Soft,\n-}\n-\n /// Construct a diagnostic for a language feature error due to the given `span`.\n /// The `feature`'s `Symbol` is the one you used in `active.rs` and `rustc_span::symbols`.\n pub fn feature_err<'a>(\n@@ -94,26 +84,7 @@ pub fn feature_err_issue<'a>(\n     issue: GateIssue,\n     explain: &str,\n ) -> DiagnosticBuilder<'a> {\n-    leveled_feature_err(sess, feature, span, issue, explain, GateStrength::Hard)\n-}\n-\n-/// Construct a diagnostic for a feature gate error / warning.\n-///\n-/// You should typically just use `feature_err` instead.\n-pub fn leveled_feature_err<'a>(\n-    sess: &'a ParseSess,\n-    feature: Symbol,\n-    span: impl Into<MultiSpan>,\n-    issue: GateIssue,\n-    explain: &str,\n-    level: GateStrength,\n-) -> DiagnosticBuilder<'a> {\n-    let diag = &sess.span_diagnostic;\n-\n-    let mut err = match level {\n-        GateStrength::Hard => diag.struct_span_err_with_code(span, explain, error_code!(E0658)),\n-        GateStrength::Soft => diag.struct_span_warn(span, explain),\n-    };\n+    let mut err = sess.span_diagnostic.struct_span_err_with_code(span, explain, error_code!(E0658));\n \n     if let Some(n) = find_feature_issue(feature, issue) {\n         err.note(&format!(\n@@ -127,13 +98,6 @@ pub fn leveled_feature_err<'a>(\n         err.help(&format!(\"add `#![feature({})]` to the crate attributes to enable\", feature));\n     }\n \n-    // If we're on stable and only emitting a \"soft\" warning, add a note to\n-    // clarify that the feature isn't \"on\" (rather than being on but\n-    // warning-worthy).\n-    if !sess.unstable_features.is_nightly_build() && level == GateStrength::Soft {\n-        err.help(\"a nightly build of the compiler is required to enable this feature\");\n-    }\n-\n     err\n }\n "}]}