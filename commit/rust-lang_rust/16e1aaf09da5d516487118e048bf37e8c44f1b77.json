{"sha": "16e1aaf09da5d516487118e048bf37e8c44f1b77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZTFhYWYwOWRhNWQ1MTY0ODcxMThlMDQ4YmYzN2U4YzQ0ZjFiNzc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-02T18:05:23Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-08T23:20:37Z"}, "message": "document `create_substs_for_generic_args`", "tree": {"sha": "3761916b286902c8a2d4d89adca43d0f7d15ec32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3761916b286902c8a2d4d89adca43d0f7d15ec32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16e1aaf09da5d516487118e048bf37e8c44f1b77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16e1aaf09da5d516487118e048bf37e8c44f1b77", "html_url": "https://github.com/rust-lang/rust/commit/16e1aaf09da5d516487118e048bf37e8c44f1b77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16e1aaf09da5d516487118e048bf37e8c44f1b77/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40ab41fd1898e44328108295df3f17074a253dcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/40ab41fd1898e44328108295df3f17074a253dcf", "html_url": "https://github.com/rust-lang/rust/commit/40ab41fd1898e44328108295df3f17074a253dcf"}], "stats": {"total": 43, "additions": 33, "deletions": 10}, "files": [{"sha": "e4ad02595d107df0f8f0499283db6f0dfa3ca042", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 33, "deletions": 10, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/16e1aaf09da5d516487118e048bf37e8c44f1b77/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16e1aaf09da5d516487118e048bf37e8c44f1b77/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=16e1aaf09da5d516487118e048bf37e8c44f1b77", "patch": "@@ -402,21 +402,44 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n     }\n \n     /// Creates the relevant generic argument substitutions\n-    /// corresponding to a set of generic parameters.\n-    pub fn create_substs_for_generic_args<'a, 'b, A, P, I>(\n+    /// corresponding to a set of generic parameters. This is a\n+    /// rather complex little function. Let me try to explain the\n+    /// role of each of its parameters:\n+    ///\n+    /// To start, we are given the `def_id` of the thing we are\n+    /// creating the substitutions for, and a partial set of\n+    /// substitutions `parent_substs`. In general, the substitutions\n+    /// for an item begin with substitutions for all the \"parents\" of\n+    /// that item -- so e.g. for a method it might include the\n+    /// parameters from the impl.\n+    ///\n+    /// Therefore, the method begins by walking down these parents,\n+    /// starting with the outermost parent and proceed inwards until\n+    /// it reaches `def_id`. For each parent P, it will check `parent_substs`\n+    /// first to see if the parent's substitutions are listed in there. If so,\n+    /// we can append those and move on. Otherwise, it invokes the\n+    /// three callback functions:\n+    ///\n+    /// - `args_for_def_id`: given the def-id P, supplies back the\n+    ///   generic arguments that were given to that parent from within\n+    ///   the path; so e.g. if you have `<T as Foo>::Bar`, the def-id\n+    ///   might refer to the trait `Foo`, and the arguments might be\n+    ///   `[T]`. The boolean value indicates whether to infer values\n+    ///   for arguments whose values were not explicitly provided.\n+    /// - `provided_kind`: given the generic parameter and the value from `args_for_def_id`,\n+    ///   instantiate a `Kind`\n+    /// - `inferred_kind`: if no parameter was provided, and inference is enabled, then\n+    ///   creates a suitable inference variable.\n+    pub fn create_substs_for_generic_args<'a, 'b>(\n         tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         def_id: DefId,\n         parent_substs: &[Kind<'tcx>],\n         has_self: bool,\n         self_ty: Option<Ty<'tcx>>,\n-        args_for_def_id: A,\n-        provided_kind: P,\n-        inferred_kind: I,\n-    ) -> &'tcx Substs<'tcx> where\n-        A: Fn(DefId) -> (Option<&'b GenericArgs>, bool),\n-        P: Fn(&GenericParamDef, &GenericArg) -> Kind<'tcx>,\n-        I: Fn(Option<&[Kind<'tcx>]>, &GenericParamDef, bool) -> Kind<'tcx>\n-    {\n+        args_for_def_id: impl Fn(DefId) -> (Option<&'b GenericArgs>, bool),\n+        provided_kind: impl Fn(&GenericParamDef, &GenericArg) -> Kind<'tcx>,\n+        inferred_kind: impl Fn(Option<&[Kind<'tcx>]>, &GenericParamDef, bool) -> Kind<'tcx>,\n+    ) -> &'tcx Substs<'tcx> {\n         // Collect the segments of the path: we need to substitute arguments\n         // for parameters throughout the entire path (wherever there are\n         // generic parameters)."}]}