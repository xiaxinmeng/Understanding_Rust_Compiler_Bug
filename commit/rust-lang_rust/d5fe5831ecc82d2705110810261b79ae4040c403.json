{"sha": "d5fe5831ecc82d2705110810261b79ae4040c403", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1ZmU1ODMxZWNjODJkMjcwNTExMDgxMDI2MWI3OWFlNDA0MGM0MDM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-29T09:32:38Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-16T14:45:16Z"}, "message": "Const-stabilize `Vec::new`.", "tree": {"sha": "a8e0fa2044d0f23bd9df242f98e8e33c8f793502", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8e0fa2044d0f23bd9df242f98e8e33c8f793502"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5fe5831ecc82d2705110810261b79ae4040c403", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5fe5831ecc82d2705110810261b79ae4040c403", "html_url": "https://github.com/rust-lang/rust/commit/d5fe5831ecc82d2705110810261b79ae4040c403", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5fe5831ecc82d2705110810261b79ae4040c403/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6269f27d99d7da9e95f0b3fdc53193dc8c42fbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6269f27d99d7da9e95f0b3fdc53193dc8c42fbe", "html_url": "https://github.com/rust-lang/rust/commit/b6269f27d99d7da9e95f0b3fdc53193dc8c42fbe"}], "stats": {"total": 50, "additions": 33, "deletions": 17}, "files": [{"sha": "9e6ed92ffb567295d9a312f174838ddbcb11c48b", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5fe5831ecc82d2705110810261b79ae4040c403/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5fe5831ecc82d2705110810261b79ae4040c403/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=d5fe5831ecc82d2705110810261b79ae4040c403", "patch": "@@ -117,7 +117,7 @@\n #![feature(allocator_internals)]\n #![feature(on_unimplemented)]\n #![feature(rustc_const_unstable)]\n-#![feature(const_vec_new)]\n+#![cfg_attr(bootstrap, feature(const_vec_new))]\n #![feature(slice_partition_dedup)]\n #![feature(maybe_uninit_extra, maybe_uninit_slice)]\n #![feature(alloc_layout_extra)]"}, {"sha": "ee75fc288fee5b7a380b071944c6affc2825103a", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d5fe5831ecc82d2705110810261b79ae4040c403/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5fe5831ecc82d2705110810261b79ae4040c403/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=d5fe5831ecc82d2705110810261b79ae4040c403", "patch": "@@ -113,13 +113,38 @@ impl<T, A: Alloc> RawVec<T, A> {\n }\n \n impl<T> RawVec<T, Global> {\n+    /// HACK(Centril): This exists because `#[unstable]` `const fn`s needn't conform\n+    /// to `min_const_fn` and so they cannot be called in `min_const_fn`s either.\n+    ///\n+    /// If you change `RawVec<T>::new` or dependencies, please take care to not\n+    /// introduce anything that would truly violate `min_const_fn`.\n+    ///\n+    /// NOTE: We could avoid this hack and check conformance with some\n+    /// `#[rustc_force_min_const_fn]` attribute which requires conformance\n+    /// with `min_const_fn` but does not necessarily allow calling it in\n+    /// `stable(...) const fn` / user code not enabling `foo` when\n+    /// `#[rustc_const_unstable(feature = \"foo\", ..)]` is present.\n+    pub const NEW: Self = Self::new();\n+\n     /// Creates the biggest possible `RawVec` (on the system heap)\n     /// without allocating. If `T` has positive size, then this makes a\n     /// `RawVec` with capacity `0`. If `T` is zero-sized, then it makes a\n     /// `RawVec` with capacity `usize::MAX`. Useful for implementing\n     /// delayed allocation.\n     pub const fn new() -> Self {\n-        Self::new_in(Global)\n+        // FIXME(Centril): Reintegrate this with `fn new_in` when we can.\n+\n+        // `!0` is `usize::MAX`. This branch should be stripped at compile time.\n+        // FIXME(mark-i-m): use this line when `if`s are allowed in `const`:\n+        //let cap = if mem::size_of::<T>() == 0 { !0 } else { 0 };\n+\n+        // `Unique::empty()` doubles as \"unallocated\" and \"zero-sized allocation\".\n+        RawVec {\n+            ptr: Unique::empty(),\n+            // FIXME(mark-i-m): use `cap` when ifs are allowed in const\n+            cap: [0, !0][(mem::size_of::<T>() == 0) as usize],\n+            a: Global,\n+        }\n     }\n \n     /// Creates a `RawVec` (on the system heap) with exactly the"}, {"sha": "405969a550b88121395350ff4d70d9e4a570bfd8", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5fe5831ecc82d2705110810261b79ae4040c403/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5fe5831ecc82d2705110810261b79ae4040c403/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=d5fe5831ecc82d2705110810261b79ae4040c403", "patch": "@@ -314,10 +314,10 @@ impl<T> Vec<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_vec_new\")]\n+    #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_vec_new\"))]\n     pub const fn new() -> Vec<T> {\n         Vec {\n-            buf: RawVec::new(),\n+            buf: RawVec::NEW,\n             len: 0,\n         }\n     }"}, {"sha": "15c5c65ff81f33c52e3e26bb6038c73e56248b90", "filename": "src/test/ui/collections-const-new.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5fe5831ecc82d2705110810261b79ae4040c403/src%2Ftest%2Fui%2Fcollections-const-new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5fe5831ecc82d2705110810261b79ae4040c403/src%2Ftest%2Fui%2Fcollections-const-new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcollections-const-new.rs?ref=d5fe5831ecc82d2705110810261b79ae4040c403", "patch": "@@ -1,15 +1,13 @@\n // run-pass\n \n-#![allow(dead_code)]\n // Test several functions can be used for constants\n // 1. Vec::new()\n // 2. String::new()\n \n-#![feature(const_vec_new)]\n #![feature(const_string_new)]\n \n const MY_VEC: Vec<usize> = Vec::new();\n \n const MY_STRING: String = String::new();\n \n-pub fn main() {}\n+fn main() {}"}, {"sha": "8b17f6885ad3ee7e99ff26b1763f05817b839d8a", "filename": "src/test/ui/consts/miri_unleashed/feature-gate-unleash_the_miri_inside_of_you.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d5fe5831ecc82d2705110810261b79ae4040c403/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ffeature-gate-unleash_the_miri_inside_of_you.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5fe5831ecc82d2705110810261b79ae4040c403/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ffeature-gate-unleash_the_miri_inside_of_you.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ffeature-gate-unleash_the_miri_inside_of_you.rs?ref=d5fe5831ecc82d2705110810261b79ae4040c403", "patch": "@@ -14,8 +14,9 @@ trait Bar<T, U: Foo<T>> {\n impl Foo<u32> for () {\n     const X: u32 = 42;\n }\n+\n impl Foo<Vec<u32>> for String {\n-    const X: Vec<u32> = Vec::new(); //~ ERROR not yet stable as a const fn\n+    const X: Vec<u32> = Vec::new();\n }\n \n impl Bar<u32, ()> for () {}"}, {"sha": "5bc7b70638c80f372c9160de20d3a292dba8a269", "filename": "src/test/ui/consts/miri_unleashed/feature-gate-unleash_the_miri_inside_of_you.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5fe5831ecc82d2705110810261b79ae4040c403/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ffeature-gate-unleash_the_miri_inside_of_you.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5fe5831ecc82d2705110810261b79ae4040c403/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ffeature-gate-unleash_the_miri_inside_of_you.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ffeature-gate-unleash_the_miri_inside_of_you.stderr?ref=d5fe5831ecc82d2705110810261b79ae4040c403", "patch": "@@ -4,13 +4,5 @@ error[E0493]: destructors cannot be evaluated at compile-time\n LL |     const F: u32 = (U::X, 42).1;\n    |                    ^^^^^^^^^^ constants cannot evaluate destructors\n \n-error: `std::vec::Vec::<T>::new` is not yet stable as a const fn\n-  --> $DIR/feature-gate-unleash_the_miri_inside_of_you.rs:18:25\n-   |\n-LL |     const X: Vec<u32> = Vec::new();\n-   |                         ^^^^^^^^^^\n-   |\n-   = help: add `#![feature(const_vec_new)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}]}