{"sha": "1fec2927c5cf02de85c08a63dbc8909077661d1b", "node_id": "C_kwDOAAsO6NoAKDFmZWMyOTI3YzVjZjAyZGU4NWMwOGE2M2RiYzg5MDkwNzc2NjFkMWI", "commit": {"author": {"name": "Samuel Tardieu", "email": "sam@rfc1149.net", "date": "2023-02-13T19:36:41Z"}, "committer": {"name": "Samuel Tardieu", "email": "sam@rfc1149.net", "date": "2023-02-13T21:34:05Z"}, "message": "Replace combine_both by combine_seq\n\nAll evaluations now happen in order.", "tree": {"sha": "03ecb5c5a71733fcac85fcac1446a6d16a90a1f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03ecb5c5a71733fcac85fcac1446a6d16a90a1f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fec2927c5cf02de85c08a63dbc8909077661d1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fec2927c5cf02de85c08a63dbc8909077661d1b", "html_url": "https://github.com/rust-lang/rust/commit/1fec2927c5cf02de85c08a63dbc8909077661d1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fec2927c5cf02de85c08a63dbc8909077661d1b/comments", "author": {"login": "samueltardieu", "id": 44656, "node_id": "MDQ6VXNlcjQ0NjU2", "avatar_url": "https://avatars.githubusercontent.com/u/44656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samueltardieu", "html_url": "https://github.com/samueltardieu", "followers_url": "https://api.github.com/users/samueltardieu/followers", "following_url": "https://api.github.com/users/samueltardieu/following{/other_user}", "gists_url": "https://api.github.com/users/samueltardieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/samueltardieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samueltardieu/subscriptions", "organizations_url": "https://api.github.com/users/samueltardieu/orgs", "repos_url": "https://api.github.com/users/samueltardieu/repos", "events_url": "https://api.github.com/users/samueltardieu/events{/privacy}", "received_events_url": "https://api.github.com/users/samueltardieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "samueltardieu", "id": 44656, "node_id": "MDQ6VXNlcjQ0NjU2", "avatar_url": "https://avatars.githubusercontent.com/u/44656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samueltardieu", "html_url": "https://github.com/samueltardieu", "followers_url": "https://api.github.com/users/samueltardieu/followers", "following_url": "https://api.github.com/users/samueltardieu/following{/other_user}", "gists_url": "https://api.github.com/users/samueltardieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/samueltardieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samueltardieu/subscriptions", "organizations_url": "https://api.github.com/users/samueltardieu/orgs", "repos_url": "https://api.github.com/users/samueltardieu/repos", "events_url": "https://api.github.com/users/samueltardieu/events{/privacy}", "received_events_url": "https://api.github.com/users/samueltardieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c231b4188782c249428a66d70b3f705757390ce5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c231b4188782c249428a66d70b3f705757390ce5", "html_url": "https://github.com/rust-lang/rust/commit/c231b4188782c249428a66d70b3f705757390ce5"}], "stats": {"total": 18, "additions": 3, "deletions": 15}, "files": [{"sha": "9d16949c81f43000f8650f2f30b00f875b80ca25", "filename": "clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1fec2927c5cf02de85c08a63dbc8909077661d1b/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fec2927c5cf02de85c08a63dbc8909077661d1b/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=1fec2927c5cf02de85c08a63dbc8909077661d1b", "patch": "@@ -68,18 +68,6 @@ fn combine_seq(first: NeverLoopResult, second: NeverLoopResult) -> NeverLoopResu\n     }\n }\n \n-// Combine two results where both parts are called but not necessarily in order.\n-#[must_use]\n-fn combine_both(left: NeverLoopResult, right: NeverLoopResult) -> NeverLoopResult {\n-    match (left, right) {\n-        (NeverLoopResult::MayContinueMainLoop, _) | (_, NeverLoopResult::MayContinueMainLoop) => {\n-            NeverLoopResult::MayContinueMainLoop\n-        },\n-        (NeverLoopResult::AlwaysBreak, _) | (_, NeverLoopResult::AlwaysBreak) => NeverLoopResult::AlwaysBreak,\n-        (NeverLoopResult::Otherwise, NeverLoopResult::Otherwise) => NeverLoopResult::Otherwise,\n-    }\n-}\n-\n // Combine two results where only one of the part may have been executed.\n #[must_use]\n fn combine_branches(b1: NeverLoopResult, b2: NeverLoopResult) -> NeverLoopResult {\n@@ -139,7 +127,7 @@ fn never_loop_expr(expr: &Expr<'_>, ignore_ids: &mut Vec<HirId>, main_loop_id: H\n         ExprKind::Struct(_, fields, base) => {\n             let fields = never_loop_expr_all(&mut fields.iter().map(|f| f.expr), ignore_ids, main_loop_id);\n             if let Some(base) = base {\n-                combine_both(fields, never_loop_expr(base, ignore_ids, main_loop_id))\n+                combine_seq(fields, never_loop_expr(base, ignore_ids, main_loop_id))\n             } else {\n                 fields\n             }\n@@ -218,7 +206,7 @@ fn never_loop_expr(expr: &Expr<'_>, ignore_ids: &mut Vec<HirId>, main_loop_id: H\n                 | InlineAsmOperand::SymFn { .. }\n                 | InlineAsmOperand::SymStatic { .. } => NeverLoopResult::Otherwise,\n             })\n-            .fold(NeverLoopResult::Otherwise, combine_both),\n+            .fold(NeverLoopResult::Otherwise, combine_seq),\n         ExprKind::Yield(_, _)\n         | ExprKind::Closure { .. }\n         | ExprKind::Path(_)\n@@ -234,7 +222,7 @@ fn never_loop_expr_all<'a, T: Iterator<Item = &'a Expr<'a>>>(\n     main_loop_id: HirId,\n ) -> NeverLoopResult {\n     es.map(|e| never_loop_expr(e, ignore_ids, main_loop_id))\n-        .fold(NeverLoopResult::Otherwise, combine_both)\n+        .fold(NeverLoopResult::Otherwise, combine_seq)\n }\n \n fn never_loop_expr_branch<'a, T: Iterator<Item = &'a Expr<'a>>>("}]}