{"sha": "3f34ff82297a4f1d5f4052fff5ff44bd28504a3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmMzRmZjgyMjk3YTRmMWQ1ZjQwNTJmZmY1ZmY0NGJkMjg1MDRhM2U=", "commit": {"author": {"name": "Michael Killough", "email": "michaeljkillough@gmail.com", "date": "2017-05-18T05:09:14Z"}, "committer": {"name": "Michael Killough", "email": "michaeljkillough@gmail.com", "date": "2017-05-18T05:10:25Z"}, "message": "Return `PartialConfig` from `Config` methods.\n\nLeave serialization to the caller, but provide a\n`PartialConfig.to_toml()` method, to deal with the fact that\n`file_lines` can't be serialized.\n\nAdd a simple test.", "tree": {"sha": "ac560164bb9e0f57cadceaf12a05726a3ec5cdaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac560164bb9e0f57cadceaf12a05726a3ec5cdaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f34ff82297a4f1d5f4052fff5ff44bd28504a3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f34ff82297a4f1d5f4052fff5ff44bd28504a3e", "html_url": "https://github.com/rust-lang/rust/commit/3f34ff82297a4f1d5f4052fff5ff44bd28504a3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f34ff82297a4f1d5f4052fff5ff44bd28504a3e/comments", "author": {"login": "mjkillough", "id": 532855, "node_id": "MDQ6VXNlcjUzMjg1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/532855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjkillough", "html_url": "https://github.com/mjkillough", "followers_url": "https://api.github.com/users/mjkillough/followers", "following_url": "https://api.github.com/users/mjkillough/following{/other_user}", "gists_url": "https://api.github.com/users/mjkillough/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjkillough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjkillough/subscriptions", "organizations_url": "https://api.github.com/users/mjkillough/orgs", "repos_url": "https://api.github.com/users/mjkillough/repos", "events_url": "https://api.github.com/users/mjkillough/events{/privacy}", "received_events_url": "https://api.github.com/users/mjkillough/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mjkillough", "id": 532855, "node_id": "MDQ6VXNlcjUzMjg1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/532855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjkillough", "html_url": "https://github.com/mjkillough", "followers_url": "https://api.github.com/users/mjkillough/followers", "following_url": "https://api.github.com/users/mjkillough/following{/other_user}", "gists_url": "https://api.github.com/users/mjkillough/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjkillough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjkillough/subscriptions", "organizations_url": "https://api.github.com/users/mjkillough/orgs", "repos_url": "https://api.github.com/users/mjkillough/repos", "events_url": "https://api.github.com/users/mjkillough/events{/privacy}", "received_events_url": "https://api.github.com/users/mjkillough/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "222bac139743d63a653a198de287ec6b102270cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/222bac139743d63a653a198de287ec6b102270cd", "html_url": "https://github.com/rust-lang/rust/commit/222bac139743d63a653a198de287ec6b102270cd"}], "stats": {"total": 61, "additions": 31, "deletions": 30}, "files": [{"sha": "2d3077ed43d9d2a9e0aa713b102d90e9b92ed3ef", "filename": "src/config.rs", "status": "modified", "additions": 31, "deletions": 30, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/3f34ff82297a4f1d5f4052fff5ff44bd28504a3e/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f34ff82297a4f1d5f4052fff5ff44bd28504a3e/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=3f34ff82297a4f1d5f4052fff5ff44bd28504a3e", "patch": "@@ -225,10 +225,21 @@ macro_rules! create_config {\n         // We first parse into `PartialConfig`, then create a default `Config`\n         // and overwrite the properties with corresponding values from `PartialConfig`.\n         #[derive(Deserialize, Serialize, Clone)]\n-        struct PartialConfig {\n+        pub struct PartialConfig {\n             $(pub $i: Option<$ty>),+\n         }\n \n+        impl PartialConfig {\n+            pub fn to_toml(&self) -> Result<String, String> {\n+                // file_lines can't be specified in TOML\n+                let mut cloned = self.clone();\n+                cloned.file_lines = None;\n+\n+                toml::to_string(&cloned)\n+                    .map_err(|e| format!(\"Could not output config: {}\", e.to_string()))\n+            }\n+        }\n+\n         // Macro hygiene won't allow us to make `set_$i()` methods on Config\n         // for each item, so this struct is used to give the API to set values:\n         // `config.get().option(false)`. It's pretty ugly. Consider replacing\n@@ -300,36 +311,24 @@ macro_rules! create_config {\n                 }\n             }\n \n-            pub fn used_to_toml(&self) -> Result<String, String> {\n-                let mut partial = PartialConfig {\n+            pub fn used_options(&self) -> PartialConfig {\n+                PartialConfig {\n                     $(\n                         $i: if self.$i.0.get() {\n                                 Some(self.$i.1.clone())\n                             } else {\n                                 None\n                             },\n                     )+\n-                };\n-\n-                // file_lines is special and can't be specified in toml.\n-                partial.file_lines = None;\n-\n-                toml::to_string(&partial)\n-                    .map_err(|e| format!(\"Could not output config: {}\", e.to_string()))\n+                }\n             }\n \n-            pub fn to_toml(&self) -> Result<String, String> {\n-                let mut partial = PartialConfig {\n+            pub fn all_options(&self) -> PartialConfig {\n+                PartialConfig {\n                     $(\n                         $i: Some(self.$i.1.clone()),\n                     )+\n-                };\n-\n-                // file_lines is special and can't be specified in toml.\n-                partial.file_lines = None;\n-\n-                toml::to_string(&partial)\n-                    .map_err(|e| format!(\"Could not output config: {}\", e.to_string()))\n+                }\n             }\n \n             pub fn override_value(&mut self, key: &str, val: &str)\n@@ -491,17 +490,6 @@ create_config! {\n mod test {\n     use super::Config;\n \n-    #[test]\n-    fn test_config_tracking() {\n-        let config = Config::default();\n-        assert!(!config.verbose.0.get());\n-        config.verbose();\n-        config.skip_children();\n-        assert!(config.verbose.0.get());\n-        assert!(config.skip_children.0.get());\n-        assert!(!config.disable_all_formatting.0.get());\n-    }\n-\n     #[test]\n     fn test_config_set() {\n         let mut config = Config::default();\n@@ -510,4 +498,17 @@ mod test {\n         config.set().verbose(true);\n         assert_eq!(config.verbose(), true);\n     }\n+\n+    #[test]\n+    fn test_config_used_to_toml() {\n+        let config = Config::default();\n+\n+        let verbose = config.verbose();\n+        let skip_children = config.skip_children();\n+\n+        let used_options = config.used_options();\n+        let toml = used_options.to_toml().unwrap();\n+        assert_eq!(toml,\n+                   format!(\"verbose = {}\\nskip_children = {}\\n\", verbose, skip_children));\n+    }\n }"}]}