{"sha": "f7dcdcc0b96d4906288dadc459692ef80fd872a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ZGNkY2MwYjk2ZDQ5MDYyODhkYWRjNDU5NjkyZWY4MGZkODcyYTk=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-01-26T13:17:22Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-01-27T00:18:18Z"}, "message": "make matches exhaustive", "tree": {"sha": "8019d6d2bf6ed7056d0776ad664f35a178079d46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8019d6d2bf6ed7056d0776ad664f35a178079d46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7dcdcc0b96d4906288dadc459692ef80fd872a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7dcdcc0b96d4906288dadc459692ef80fd872a9", "html_url": "https://github.com/rust-lang/rust/commit/f7dcdcc0b96d4906288dadc459692ef80fd872a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7dcdcc0b96d4906288dadc459692ef80fd872a9/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec61761e465a61869d13e89274afa02257aba6d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec61761e465a61869d13e89274afa02257aba6d7", "html_url": "https://github.com/rust-lang/rust/commit/ec61761e465a61869d13e89274afa02257aba6d7"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "c9a89aae86fd8234b30e077b8f08b1217b61df26", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f7dcdcc0b96d4906288dadc459692ef80fd872a9/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7dcdcc0b96d4906288dadc459692ef80fd872a9/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=f7dcdcc0b96d4906288dadc459692ef80fd872a9", "patch": "@@ -2462,11 +2462,15 @@ impl<'tcx> TypeFoldable<'tcx> for UserTypeProjection {\n         let projs: Vec<_> = self\n             .projs\n             .iter()\n-            .map(|elem| match elem {\n+            .map(|&elem| match elem {\n                 Deref => Deref,\n-                Field(f, ()) => Field(*f, ()),\n+                Field(f, ()) => Field(f, ()),\n                 Index(()) => Index(()),\n-                elem => *elem,\n+                Downcast(symbol, variantidx) => Downcast(symbol, variantidx),\n+                ConstantIndex { offset, min_length, from_end } => {\n+                    ConstantIndex { offset, min_length, from_end }\n+                }\n+                Subslice { from, to, from_end } => Subslice { from, to, from_end },\n             })\n             .collect();\n \n@@ -2862,11 +2866,15 @@ impl<'tcx> TypeFoldable<'tcx> for PlaceElem<'tcx> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         use crate::mir::ProjectionElem::*;\n \n-        match self {\n+        match *self {\n             Deref => Deref,\n-            Field(f, ty) => Field(*f, ty.fold_with(folder)),\n+            Field(f, ty) => Field(f, ty.fold_with(folder)),\n             Index(v) => Index(v.fold_with(folder)),\n-            elem => *elem,\n+            Downcast(symbol, variantidx) => Downcast(symbol, variantidx),\n+            ConstantIndex { offset, min_length, from_end } => {\n+                ConstantIndex { offset, min_length, from_end }\n+            }\n+            Subslice { from, to, from_end } => Subslice { from, to, from_end },\n         }\n     }\n "}]}