{"sha": "8747c0ebea5dd04311cb56310a5b2f0d32258d2f", "node_id": "C_kwDOAAsO6NoAKDg3NDdjMGViZWE1ZGQwNDMxMWNiNTYzMTBhNWIyZjBkMzIyNThkMmY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-06-08T10:36:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-08T10:36:17Z"}, "message": "Rollup merge of #109953 - thomcc:thomcc/typeid128, r=WaffleLapkin\n\nUse 128 bits for TypeId hash\n\nPreliminary/Draft impl of https://github.com/rust-lang/compiler-team/issues/608\n\nPrior art (probably incomplete list)\n- https://github.com/rust-lang/rust/pull/75923\n- https://github.com/rust-lang/rust/pull/95845", "tree": {"sha": "4a299e2fca2543eb767492033e28a8cb9183da95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a299e2fca2543eb767492033e28a8cb9183da95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8747c0ebea5dd04311cb56310a5b2f0d32258d2f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkga8hCRBK7hj4Ov3rIwAAftcIACPIJ/TQGh2LLQyaoPiEm6Mw\nRQ1Tnz2PPck/V4KmN7zt36GgWDWNokoaErfgvsyv5ScxR2oQa4b+ZgI1yhBntKUS\np7cti1RziqxiLhvqNlyEOLW0m1a/LfhzO1p6PISrLNMxCkTq5nyUtrTvIzkX+UDf\nxv2bIylXtCZqQfl2gu07I1MNhh20G/6mWWgoDXH2ngYUOaUB1GeLu3so0RCslQGF\nHhQm31FNwyKE5b0bFVXqHiggnZ5IAbSXn3tJKrmdhlRmJHTAK3+Bz+deRd1uAB6N\nIqLF9/aaWqcv1seIxX+pVkxp+eLUMhp4M1Xj2w1T7zaTA6pE0SSQ4w8l/naqSKw=\n=06uJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 4a299e2fca2543eb767492033e28a8cb9183da95\nparent a0df04c0f2b9c0415c53e3cee8c4f9fa394a37b2\nparent b512004a4a04f80c650cde6b2239cd41c5509fc6\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1686220577 +0200\ncommitter GitHub <noreply@github.com> 1686220577 +0200\n\nRollup merge of #109953 - thomcc:thomcc/typeid128, r=WaffleLapkin\n\nUse 128 bits for TypeId hash\n\nPreliminary/Draft impl of https://github.com/rust-lang/compiler-team/issues/608\n\nPrior art (probably incomplete list)\n- https://github.com/rust-lang/rust/pull/75923\n- https://github.com/rust-lang/rust/pull/95845\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8747c0ebea5dd04311cb56310a5b2f0d32258d2f", "html_url": "https://github.com/rust-lang/rust/commit/8747c0ebea5dd04311cb56310a5b2f0d32258d2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8747c0ebea5dd04311cb56310a5b2f0d32258d2f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0df04c0f2b9c0415c53e3cee8c4f9fa394a37b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0df04c0f2b9c0415c53e3cee8c4f9fa394a37b2", "html_url": "https://github.com/rust-lang/rust/commit/a0df04c0f2b9c0415c53e3cee8c4f9fa394a37b2"}, {"sha": "b512004a4a04f80c650cde6b2239cd41c5509fc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b512004a4a04f80c650cde6b2239cd41c5509fc6", "html_url": "https://github.com/rust-lang/rust/commit/b512004a4a04f80c650cde6b2239cd41c5509fc6"}], "stats": {"total": 67, "additions": 59, "deletions": 8}, "files": [{"sha": "7192bbc00d55616720ff055ba37b7868373f3830", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8747c0ebea5dd04311cb56310a5b2f0d32258d2f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8747c0ebea5dd04311cb56310a5b2f0d32258d2f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=8747c0ebea5dd04311cb56310a5b2f0d32258d2f", "patch": "@@ -77,7 +77,7 @@ pub(crate) fn eval_nullary_intrinsic<'tcx>(\n         }\n         sym::type_id => {\n             ensure_monomorphic_enough(tcx, tp_ty)?;\n-            ConstValue::from_u64(tcx.type_id_hash(tp_ty).as_u64())\n+            ConstValue::from_u128(tcx.type_id_hash(tp_ty).as_u128())\n         }\n         sym::variant_count => match tp_ty.kind() {\n             // Correctly handles non-monomorphic calls, so there is no need for ensure_monomorphic_enough.\n@@ -169,7 +169,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let ty = match intrinsic_name {\n                     sym::pref_align_of | sym::variant_count => self.tcx.types.usize,\n                     sym::needs_drop => self.tcx.types.bool,\n-                    sym::type_id => self.tcx.types.u64,\n+                    sym::type_id => self.tcx.types.u128,\n                     sym::type_name => self.tcx.mk_static_str(),\n                     _ => bug!(),\n                 };"}, {"sha": "36c468e77898692ea39b8d9940afc826de1dd8f3", "filename": "compiler/rustc_hir_analysis/src/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8747c0ebea5dd04311cb56310a5b2f0d32258d2f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8747c0ebea5dd04311cb56310a5b2f0d32258d2f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=8747c0ebea5dd04311cb56310a5b2f0d32258d2f", "patch": "@@ -217,7 +217,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n             sym::needs_drop => (1, Vec::new(), tcx.types.bool),\n \n             sym::type_name => (1, Vec::new(), tcx.mk_static_str()),\n-            sym::type_id => (1, Vec::new(), tcx.types.u64),\n+            sym::type_id => (1, Vec::new(), tcx.types.u128),\n             sym::offset => (2, vec![param(0), param(1)], param(0)),\n             sym::arith_offset => (\n                 1,"}, {"sha": "0416411dfe14a6108258138cfa5b72dc9a036d34", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8747c0ebea5dd04311cb56310a5b2f0d32258d2f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8747c0ebea5dd04311cb56310a5b2f0d32258d2f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=8747c0ebea5dd04311cb56310a5b2f0d32258d2f", "patch": "@@ -97,6 +97,10 @@ impl<'tcx> ConstValue<'tcx> {\n         ConstValue::Scalar(Scalar::from_u64(i))\n     }\n \n+    pub fn from_u128(i: u128) -> Self {\n+        ConstValue::Scalar(Scalar::from_u128(i))\n+    }\n+\n     pub fn from_target_usize(i: u64, cx: &impl HasDataLayout) -> Self {\n         ConstValue::Scalar(Scalar::from_target_usize(i, cx))\n     }\n@@ -240,6 +244,11 @@ impl<Prov> Scalar<Prov> {\n         Scalar::Int(i.into())\n     }\n \n+    #[inline]\n+    pub fn from_u128(i: u128) -> Self {\n+        Scalar::Int(i.into())\n+    }\n+\n     #[inline]\n     pub fn from_target_usize(i: u64, cx: &impl HasDataLayout) -> Self {\n         Self::from_uint(i, cx.data_layout().pointer_size)"}, {"sha": "c9f69c37782e343db8b7bcf61ebf319fb5f28b88", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8747c0ebea5dd04311cb56310a5b2f0d32258d2f/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8747c0ebea5dd04311cb56310a5b2f0d32258d2f/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=8747c0ebea5dd04311cb56310a5b2f0d32258d2f", "patch": "@@ -11,7 +11,7 @@ use crate::ty::{\n use crate::ty::{GenericArgKind, SubstsRef};\n use rustc_apfloat::Float as _;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_data_structures::stable_hasher::{Hash64, HashStable, StableHasher};\n+use rustc_data_structures::stable_hasher::{Hash128, HashStable, StableHasher};\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n@@ -129,7 +129,7 @@ impl IntTypeExt for IntegerType {\n impl<'tcx> TyCtxt<'tcx> {\n     /// Creates a hash of the type `Ty` which will be the same no matter what crate\n     /// context it's calculated within. This is used by the `type_id` intrinsic.\n-    pub fn type_id_hash(self, ty: Ty<'tcx>) -> Hash64 {\n+    pub fn type_id_hash(self, ty: Ty<'tcx>) -> Hash128 {\n         // We want the type_id be independent of the types free regions, so we\n         // erase them. The erase_regions() call will also anonymize bound\n         // regions, which is desirable too."}, {"sha": "09f52d692d0aa78ba2a6dbe30ccc645a6a3d81dd", "filename": "library/core/src/any.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8747c0ebea5dd04311cb56310a5b2f0d32258d2f/library%2Fcore%2Fsrc%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8747c0ebea5dd04311cb56310a5b2f0d32258d2f/library%2Fcore%2Fsrc%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fany.rs?ref=8747c0ebea5dd04311cb56310a5b2f0d32258d2f", "patch": "@@ -153,6 +153,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::fmt;\n+use crate::hash;\n use crate::intrinsics;\n \n ///////////////////////////////////////////////////////////////////////////////\n@@ -662,10 +663,10 @@ impl dyn Any + Send + Sync {\n /// While `TypeId` implements `Hash`, `PartialOrd`, and `Ord`, it is worth\n /// noting that the hashes and ordering will vary between Rust releases. Beware\n /// of relying on them inside of your code!\n-#[derive(Clone, Copy, Debug, Hash, Eq, PartialOrd, Ord)]\n+#[derive(Clone, Copy, Debug, Eq, PartialOrd, Ord)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct TypeId {\n-    t: u64,\n+    t: u128,\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -696,7 +697,31 @@ impl TypeId {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_type_id\", issue = \"77125\")]\n     pub const fn of<T: ?Sized + 'static>() -> TypeId {\n-        TypeId { t: intrinsics::type_id::<T>() }\n+        #[cfg(bootstrap)]\n+        let t = intrinsics::type_id::<T>() as u128;\n+        #[cfg(not(bootstrap))]\n+        let t: u128 = intrinsics::type_id::<T>();\n+        TypeId { t }\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl hash::Hash for TypeId {\n+    #[inline]\n+    fn hash<H: hash::Hasher>(&self, state: &mut H) {\n+        // We only hash the lower 64 bits of our (128 bit) internal numeric ID,\n+        // because:\n+        // - The hashing algorithm which backs `TypeId` is expected to be\n+        //   unbiased and high quality, meaning further mixing would be somewhat\n+        //   redundant compared to choosing (the lower) 64 bits arbitrarily.\n+        // - `Hasher::finish` returns a u64 anyway, so the extra entropy we'd\n+        //   get from hashing the full value would probably not be useful\n+        //   (especially given the previous point about the lower 64 bits being\n+        //   high quality on their own).\n+        // - It is correct to do so -- only hashing a subset of `self` is still\n+        //   with an `Eq` implementation that considers the entire value, as\n+        //   ours does.\n+        (self.t as u64).hash(state);\n     }\n }\n "}, {"sha": "9b8612485ac1ee58e87861e2809950b964466bc2", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8747c0ebea5dd04311cb56310a5b2f0d32258d2f/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8747c0ebea5dd04311cb56310a5b2f0d32258d2f/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=8747c0ebea5dd04311cb56310a5b2f0d32258d2f", "patch": "@@ -1057,8 +1057,25 @@ extern \"rust-intrinsic\" {\n     #[rustc_const_unstable(feature = \"const_type_id\", issue = \"77125\")]\n     #[rustc_safe_intrinsic]\n     #[rustc_nounwind]\n+    #[cfg(bootstrap)]\n     pub fn type_id<T: ?Sized + 'static>() -> u64;\n \n+    /// Gets an identifier which is globally unique to the specified type. This\n+    /// function will return the same value for a type regardless of whichever\n+    /// crate it is invoked in.\n+    ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n+    ///\n+    /// The stabilized version of this intrinsic is [`core::any::TypeId::of`].\n+    #[rustc_const_unstable(feature = \"const_type_id\", issue = \"77125\")]\n+    #[rustc_safe_intrinsic]\n+    #[rustc_nounwind]\n+    #[cfg(not(bootstrap))]\n+    pub fn type_id<T: ?Sized + 'static>() -> u128;\n+\n     /// A guard for unsafe functions that cannot ever be executed if `T` is uninhabited:\n     /// This will statically either panic, or do nothing.\n     ///"}]}