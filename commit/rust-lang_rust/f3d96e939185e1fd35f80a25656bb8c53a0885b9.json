{"sha": "f3d96e939185e1fd35f80a25656bb8c53a0885b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzZDk2ZTkzOTE4NWUxZmQzNWY4MGEyNTY1NmJiOGM1M2EwODg1Yjk=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-08-27T08:09:00Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-08-27T08:09:00Z"}, "message": "fmt", "tree": {"sha": "beec0abc66fb020dd864b4e25407a12ed031cc16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/beec0abc66fb020dd864b4e25407a12ed031cc16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3d96e939185e1fd35f80a25656bb8c53a0885b9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEQ7Fl7qPq2YcWF1dqAn35M4hird0FAmEonZwACgkQAn35M4hi\nrd3eVg/+LkWp9AYP3Jbp6cMbloO+bhZ177bhgkdjcE8UGqMltPNTTvdvHB/5c6q8\nzwzqeletC29clYCYnN27Y3Q8ihqLW00bk3h8CooW22GYQN2Crg/DxlI2J0P9yBsr\nJ+wx98yX2TqWmgCBPyV+0tsrd8vMJP3lI02J36j0H8ElknTmXA3n9xvDpum4Q8iA\npGecTSZ36/iyPszQVkZxr4VsKTS1ZDAQ/+yrBxSScx/46IFS99elP143dwdxN/kj\n45BBro+Ev4vDMt3G5894KylBgqLOYpMqEaE3niIgu+FILxHA4TJoqOla2qVO2vsj\n+5ygUXGQVig55uXOpOvhLnXjoMPmrnIIW1Ukc/kEI58oPI6OEjsl2lKvm/IWq15T\n4mrsiOySeKa9tfebzNyoo+mMQVrpK9t50IrmuO6VwwEKSGZteQmdpRgO2swdL+e3\n8H49hcZLjT+Atnhrwi6be0lKkIJWqRbqvRhw+BCmtmhXAsLKmZdOsJtLw8M/cJ1B\nSiV1qlt6rTuISC2VUXbvZyZbc7yeTRBYWHekHWD2K2jykbNzUy/GYA9ccPGWKEI7\n4N72iwE9Uh3EAgQhp1QFpVOEFeqPCzN7CZUe+nfgicaJvqsa0LvEJIPvP9jAesIR\n2LYDYTFuW+EhqfrAhtbYopiwAKWvjv7s9do6YIVNyXE/LtOuIuE=\n=0QIQ\n-----END PGP SIGNATURE-----", "payload": "tree beec0abc66fb020dd864b4e25407a12ed031cc16\nparent 580ca930ac6423dd1dc6a1d90f9d899c8fb5e562\nauthor Deadbeef <ent3rm4n@gmail.com> 1630051740 +0000\ncommitter Deadbeef <ent3rm4n@gmail.com> 1630051740 +0000\n\nfmt\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3d96e939185e1fd35f80a25656bb8c53a0885b9", "html_url": "https://github.com/rust-lang/rust/commit/f3d96e939185e1fd35f80a25656bb8c53a0885b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3d96e939185e1fd35f80a25656bb8c53a0885b9/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "580ca930ac6423dd1dc6a1d90f9d899c8fb5e562", "url": "https://api.github.com/repos/rust-lang/rust/commits/580ca930ac6423dd1dc6a1d90f9d899c8fb5e562", "html_url": "https://github.com/rust-lang/rust/commit/580ca930ac6423dd1dc6a1d90f9d899c8fb5e562"}], "stats": {"total": 72, "additions": 42, "deletions": 30}, "files": [{"sha": "2b748062cdf2319d3476a176fcd647e00f293f60", "filename": "compiler/rustc_mir/src/transform/check_consts/check.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f3d96e939185e1fd35f80a25656bb8c53a0885b9/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3d96e939185e1fd35f80a25656bb8c53a0885b9/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=f3d96e939185e1fd35f80a25656bb8c53a0885b9", "patch": "@@ -826,21 +826,26 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                     );\n \n                     let implsrc = tcx.infer_ctxt().enter(|infcx| {\n-                        let mut selcx = SelectionContext::with_constness(&infcx, hir::Constness::Const);\n+                        let mut selcx =\n+                            SelectionContext::with_constness(&infcx, hir::Constness::Const);\n                         selcx.select(&obligation)\n                     });\n \n                     match implsrc {\n                         Ok(Some(ImplSource::Param(_, ty::BoundConstness::ConstIfConst))) => {\n                             debug!(\n                                 \"const_trait_impl: provided {:?} via where-clause in {:?}\",\n-                                 trait_ref, param_env\n+                                trait_ref, param_env\n                             );\n                             return;\n                         }\n                         Ok(Some(ImplSource::UserDefined(data))) => {\n                             let callee_name = tcx.item_name(callee);\n-                            if let Some(&did) = tcx.associated_item_def_ids(data.impl_def_id).iter().find(|did| tcx.item_name(**did) == callee_name) {\n+                            if let Some(&did) = tcx\n+                                .associated_item_def_ids(data.impl_def_id)\n+                                .iter()\n+                                .find(|did| tcx.item_name(**did) == callee_name)\n+                            {\n                                 callee = did;\n                             }\n                         }\n@@ -909,7 +914,7 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                             // trait, but for it to still be non-const can be that the impl is\n                             // using default method bodies.\n                             nonconst_call_permission = true;\n-                        }    \n+                        }\n                     }\n \n                     if !nonconst_call_permission {"}, {"sha": "17a4184c3c9ef92d734ce676477ad4e747a3340a", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f3d96e939185e1fd35f80a25656bb8c53a0885b9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3d96e939185e1fd35f80a25656bb8c53a0885b9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=f3d96e939185e1fd35f80a25656bb8c53a0885b9", "patch": "@@ -778,7 +778,10 @@ pub fn vtable_trait_upcasting_coercion_new_vptr_slot(\n     let obligation = Obligation::new(\n         ObligationCause::dummy(),\n         ty::ParamEnv::reveal_all(),\n-        ty::Binder::dummy(ty::TraitPredicate { trait_ref, constness: ty::BoundConstness::NotConst }),\n+        ty::Binder::dummy(ty::TraitPredicate {\n+            trait_ref,\n+            constness: ty::BoundConstness::NotConst,\n+        }),\n     );\n \n     let implsrc = tcx.infer_ctxt().enter(|infcx| {"}, {"sha": "6cf1dabad8592316b4b99928035b290b4ffe3c17", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 26, "deletions": 24, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f3d96e939185e1fd35f80a25656bb8c53a0885b9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3d96e939185e1fd35f80a25656bb8c53a0885b9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=f3d96e939185e1fd35f80a25656bb8c53a0885b9", "patch": "@@ -319,7 +319,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     pub fn is_trait_predicate_const(&self, pred: ty::TraitPredicate<'_>) -> bool {\n         match pred.constness {\n             ty::BoundConstness::ConstIfConst if self.is_in_const_context => true,\n-            _ => false\n+            _ => false,\n         }\n     }\n \n@@ -1079,30 +1079,30 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let tcx = self.tcx();\n         // Respect const trait obligations\n         if self.is_trait_predicate_const(obligation.predicate.skip_binder()) {\n-                if Some(obligation.predicate.skip_binder().trait_ref.def_id)\n-                    != tcx.lang_items().sized_trait()\n-                // const Sized bounds are skipped\n-                {\n-                    match candidate {\n-                        // const impl\n-                        ImplCandidate(def_id)\n-                            if tcx.impl_constness(def_id) == hir::Constness::Const => {}\n-                        // const param\n-                        ParamCandidate(ty::ConstnessAnd {\n-                            constness: ty::BoundConstness::ConstIfConst,\n-                            ..\n-                        }) => {}\n-                        // auto trait impl\n-                        AutoImplCandidate(..) => {}\n-                        // generator, this will raise error in other places\n-                        // or ignore error with const_async_blocks feature\n-                        GeneratorCandidate => {}\n-                        _ => {\n-                            // reject all other types of candidates\n-                            return Err(Unimplemented);\n-                        }\n+            if Some(obligation.predicate.skip_binder().trait_ref.def_id)\n+                != tcx.lang_items().sized_trait()\n+            // const Sized bounds are skipped\n+            {\n+                match candidate {\n+                    // const impl\n+                    ImplCandidate(def_id)\n+                        if tcx.impl_constness(def_id) == hir::Constness::Const => {}\n+                    // const param\n+                    ParamCandidate(ty::ConstnessAnd {\n+                        constness: ty::BoundConstness::ConstIfConst,\n+                        ..\n+                    }) => {}\n+                    // auto trait impl\n+                    AutoImplCandidate(..) => {}\n+                    // generator, this will raise error in other places\n+                    // or ignore error with const_async_blocks feature\n+                    GeneratorCandidate => {}\n+                    _ => {\n+                        // reject all other types of candidates\n+                        return Err(Unimplemented);\n                     }\n                 }\n+            }\n         }\n         // Treat negative impls as unimplemented, and reservation impls as ambiguity.\n         if let ImplCandidate(def_id) = candidate {\n@@ -1497,7 +1497,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     // probably best characterized as a \"hack\", since we might prefer to just do our\n                     // best to *not* create essentially duplicate candidates in the first place.\n                     other.value.bound_vars().len() <= victim.value.bound_vars().len()\n-                } else if other.value == victim.value && victim.constness == ty::BoundConstness::NotConst {\n+                } else if other.value == victim.value\n+                    && victim.constness == ty::BoundConstness::NotConst\n+                {\n                     // Drop otherwise equivalent non-const candidates in favor of const candidates.\n                     true\n                 } else {"}, {"sha": "b514176ad529d439556c1645bd0ac56d754d76e3", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3d96e939185e1fd35f80a25656bb8c53a0885b9/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3d96e939185e1fd35f80a25656bb8c53a0885b9/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=f3d96e939185e1fd35f80a25656bb8c53a0885b9", "patch": "@@ -2222,7 +2222,9 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                         hir::GenericBound::Trait(poly_trait_ref, modifier) => {\n                             let constness = match modifier {\n                                 hir::TraitBoundModifier::None => ty::BoundConstness::NotConst,\n-                                hir::TraitBoundModifier::MaybeConst => ty::BoundConstness::ConstIfConst,\n+                                hir::TraitBoundModifier::MaybeConst => {\n+                                    ty::BoundConstness::ConstIfConst\n+                                }\n                                 // We ignore `where T: ?Sized`, it is already part of\n                                 // type parameter `T`.\n                                 hir::TraitBoundModifier::Maybe => continue,"}]}