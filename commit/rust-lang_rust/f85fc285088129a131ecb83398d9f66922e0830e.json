{"sha": "f85fc285088129a131ecb83398d9f66922e0830e", "node_id": "C_kwDOAAsO6NoAKGY4NWZjMjg1MDg4MTI5YTEzMWVjYjgzMzk4ZDlmNjY5MjJlMDgzMGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-26T07:34:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-26T07:34:23Z"}, "message": "Auto merge of #14412 - Veykril:proc-macro-op-queue, r=Veykril\n\ninternal: Handle proc macro fetching via OpQueue", "tree": {"sha": "31ea6d4215d51ffe5b70ddb3166b8aabb87b2976", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31ea6d4215d51ffe5b70ddb3166b8aabb87b2976"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f85fc285088129a131ecb83398d9f66922e0830e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f85fc285088129a131ecb83398d9f66922e0830e", "html_url": "https://github.com/rust-lang/rust/commit/f85fc285088129a131ecb83398d9f66922e0830e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f85fc285088129a131ecb83398d9f66922e0830e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27c076a36744f7f8be3b950891cbc0350dc29f6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/27c076a36744f7f8be3b950891cbc0350dc29f6e", "html_url": "https://github.com/rust-lang/rust/commit/27c076a36744f7f8be3b950891cbc0350dc29f6e"}, {"sha": "ee02213e65b1fd9c5e331ffe4a1ebd1e2ebab9c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee02213e65b1fd9c5e331ffe4a1ebd1e2ebab9c8", "html_url": "https://github.com/rust-lang/rust/commit/ee02213e65b1fd9c5e331ffe4a1ebd1e2ebab9c8"}], "stats": {"total": 213, "additions": 121, "deletions": 92}, "files": [{"sha": "c43941d6ac197ec1dc8a4d52076a8e10cc141666", "filename": "crates/base-db/src/input.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f85fc285088129a131ecb83398d9f66922e0830e/crates%2Fbase-db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85fc285088129a131ecb83398d9f66922e0830e/crates%2Fbase-db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Finput.rs?ref=f85fc285088129a131ecb83398d9f66922e0830e", "patch": "@@ -15,7 +15,9 @@ use syntax::SmolStr;\n use tt::token_id::Subtree;\n use vfs::{file_set::FileSet, AbsPathBuf, AnchoredPath, FileId, VfsPath};\n \n-pub type ProcMacroPaths = FxHashMap<CrateId, Result<(Option<String>, AbsPathBuf), String>>;\n+// Map from crate id to the name of the crate and path of the proc-macro. If the value is `None`,\n+// then the crate for the proc-macro hasn't been build yet as the build data is missing.\n+pub type ProcMacroPaths = FxHashMap<CrateId, Option<(Option<String>, AbsPathBuf)>>;\n pub type ProcMacros = FxHashMap<CrateId, ProcMacroLoadResult>;\n \n /// Files are grouped into source roots. A source root is a directory on the"}, {"sha": "ae5cf135839f181beb2dcd49dfe6e86b60eef5c2", "filename": "crates/ide-diagnostics/src/handlers/unresolved_proc_macro.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f85fc285088129a131ecb83398d9f66922e0830e/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85fc285088129a131ecb83398d9f66922e0830e/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs?ref=f85fc285088129a131ecb83398d9f66922e0830e", "patch": "@@ -25,25 +25,21 @@ pub(crate) fn unresolved_proc_macro(\n         _ => proc_macros_enabled,\n     };\n \n-    let message = match &d.macro_name {\n+    let not_expanded_message = match &d.macro_name {\n         Some(name) => format!(\"proc macro `{name}` not expanded\"),\n         None => \"proc macro not expanded\".to_string(),\n     };\n     let severity = if config_enabled { Severity::Error } else { Severity::WeakWarning };\n     let def_map = ctx.sema.db.crate_def_map(d.krate);\n-    let message = format!(\n-        \"{message}: {}\",\n-        if config_enabled {\n-            def_map.proc_macro_loading_error().unwrap_or(\"proc macro not found in the built dylib\")\n-        } else {\n-            match d.kind {\n-                hir::MacroKind::Attr if proc_macros_enabled => {\n-                    \"attribute macro expansion is disabled\"\n-                }\n-                _ => \"proc-macro expansion is disabled\",\n-            }\n-        },\n-    );\n+    let message = if config_enabled {\n+        def_map.proc_macro_loading_error().unwrap_or(\"proc macro not found in the built dylib\")\n+    } else {\n+        match d.kind {\n+            hir::MacroKind::Attr if proc_macros_enabled => \"attribute macro expansion is disabled\",\n+            _ => \"proc-macro expansion is disabled\",\n+        }\n+    };\n+    let message = format!(\"{not_expanded_message}: {message}\");\n \n     Diagnostic::new(\"unresolved-proc-macro\", message, display_range).severity(severity)\n }"}, {"sha": "fa966f70aa4a2fe16a89027305ca22aa7877e53b", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f85fc285088129a131ecb83398d9f66922e0830e/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85fc285088129a131ecb83398d9f66922e0830e/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=f85fc285088129a131ecb83398d9f66922e0830e", "patch": "@@ -707,7 +707,7 @@ fn project_json_to_crate_graph(\n             if let Some(path) = krate.proc_macro_dylib_path.clone() {\n                 proc_macros.insert(\n                     crate_id,\n-                    Ok((\n+                    Some((\n                         krate.display_name.as_ref().map(|it| it.canonical_name().to_owned()),\n                         path,\n                     )),\n@@ -1185,12 +1185,14 @@ fn add_target_crate_root(\n         CrateOrigin::CratesIo { repo: pkg.repository.clone(), name: Some(pkg.name.clone()) },\n         target_layout,\n     );\n-    let proc_macro = match build_data.as_ref().map(|it| &it.proc_macro_dylib_path) {\n-        Some(it) => it.clone().map(Ok),\n-        None => Some(Err(\"crate has not (yet) been built\".into())),\n-    };\n-    if let Some(proc_macro) = proc_macro {\n-        proc_macros.insert(crate_id, proc_macro.map(|path| (Some(cargo_name.to_owned()), path)));\n+    if is_proc_macro {\n+        let proc_macro = match build_data.as_ref().map(|it| it.proc_macro_dylib_path.as_ref()) {\n+            Some(it) => it.cloned().map(|path| Some((Some(cargo_name.to_owned()), path))),\n+            None => Some(None),\n+        };\n+        if let Some(proc_macro) = proc_macro {\n+            proc_macros.insert(crate_id, proc_macro);\n+        }\n     }\n \n     crate_id"}, {"sha": "268f59e7e4bad50d8b558b0cd29ef8187c409954", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f85fc285088129a131ecb83398d9f66922e0830e/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85fc285088129a131ecb83398d9f66922e0830e/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=f85fc285088129a131ecb83398d9f66922e0830e", "patch": "@@ -101,7 +101,10 @@ pub fn load_workspace(\n             .map(|(crate_id, path)| {\n                 (\n                     crate_id,\n-                    path.and_then(|(_, path)| load_proc_macro(proc_macro_server, &path, &[])),\n+                    path.map_or_else(\n+                        || Err(\"proc macro crate is missing dylib\".to_owned()),\n+                        |(_, path)| load_proc_macro(proc_macro_server, &path, &[]),\n+                    ),\n                 )\n             })\n             .collect()"}, {"sha": "e917f107f3bf091ccd1e9631bdd1cb4dc7828669", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f85fc285088129a131ecb83398d9f66922e0830e/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85fc285088129a131ecb83398d9f66922e0830e/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=f85fc285088129a131ecb83398d9f66922e0830e", "patch": "@@ -1106,6 +1106,10 @@ impl Config {\n         &self.data.procMacro_ignored\n     }\n \n+    pub fn expand_proc_macros(&self) -> bool {\n+        self.data.procMacro_enable\n+    }\n+\n     pub fn expand_proc_attr_macros(&self) -> bool {\n         self.data.procMacro_enable && self.data.procMacro_attributes_enable\n     }"}, {"sha": "e0c143310d87df55dbc2dd17513543594455486d", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f85fc285088129a131ecb83398d9f66922e0830e/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85fc285088129a131ecb83398d9f66922e0830e/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=f85fc285088129a131ecb83398d9f66922e0830e", "patch": "@@ -8,7 +8,7 @@ use std::{sync::Arc, time::Instant};\n use crossbeam_channel::{unbounded, Receiver, Sender};\n use flycheck::FlycheckHandle;\n use ide::{Analysis, AnalysisHost, Cancellable, Change, FileId};\n-use ide_db::base_db::{CrateId, FileLoader, SourceDatabase};\n+use ide_db::base_db::{CrateId, FileLoader, ProcMacroPaths, SourceDatabase};\n use lsp_types::{SemanticTokens, Url};\n use parking_lot::{Mutex, RwLock};\n use proc_macro_api::ProcMacroServer;\n@@ -101,11 +101,12 @@ pub(crate) struct GlobalState {\n     /// the user just adds comments or whitespace to Cargo.toml, we do not want\n     /// to invalidate any salsa caches.\n     pub(crate) workspaces: Arc<Vec<ProjectWorkspace>>,\n-    pub(crate) fetch_workspaces_queue: OpQueue<Option<Vec<anyhow::Result<ProjectWorkspace>>>>,\n+    pub(crate) fetch_workspaces_queue: OpQueue<(), Option<Vec<anyhow::Result<ProjectWorkspace>>>>,\n     pub(crate) fetch_build_data_queue:\n-        OpQueue<(Arc<Vec<ProjectWorkspace>>, Vec<anyhow::Result<WorkspaceBuildScripts>>)>,\n+        OpQueue<(), (Arc<Vec<ProjectWorkspace>>, Vec<anyhow::Result<WorkspaceBuildScripts>>)>,\n+    pub(crate) fetch_proc_macros_queue: OpQueue<Vec<ProcMacroPaths>, bool>,\n \n-    pub(crate) prime_caches_queue: OpQueue<()>,\n+    pub(crate) prime_caches_queue: OpQueue,\n }\n \n /// An immutable snapshot of the world's state at a point in time.\n@@ -117,6 +118,7 @@ pub(crate) struct GlobalStateSnapshot {\n     pub(crate) semantic_tokens_cache: Arc<Mutex<FxHashMap<Url, SemanticTokens>>>,\n     vfs: Arc<RwLock<(vfs::Vfs, NoHashHashMap<FileId, LineEndings>)>>,\n     pub(crate) workspaces: Arc<Vec<ProjectWorkspace>>,\n+    // used to signal semantic highlighting to fall back to syntax based highlighting until proc-macros have been loaded\n     pub(crate) proc_macros_loaded: bool,\n     pub(crate) flycheck: Arc<[FlycheckHandle]>,\n }\n@@ -170,9 +172,10 @@ impl GlobalState {\n \n             workspaces: Arc::new(Vec::new()),\n             fetch_workspaces_queue: OpQueue::default(),\n-            prime_caches_queue: OpQueue::default(),\n-\n             fetch_build_data_queue: OpQueue::default(),\n+            fetch_proc_macros_queue: OpQueue::default(),\n+\n+            prime_caches_queue: OpQueue::default(),\n         };\n         // Apply any required database inputs from the config.\n         this.update_configuration(config);\n@@ -286,7 +289,7 @@ impl GlobalState {\n             // crate see https://github.com/rust-lang/rust-analyzer/issues/13029\n             if let Some(path) = workspace_structure_change {\n                 self.fetch_workspaces_queue\n-                    .request_op(format!(\"workspace vfs file change: {}\", path.display()));\n+                    .request_op(format!(\"workspace vfs file change: {}\", path.display()), ());\n             }\n             self.proc_macro_changed =\n                 changed_files.iter().filter(|file| !file.is_created_or_deleted()).any(|file| {\n@@ -309,7 +312,8 @@ impl GlobalState {\n             check_fixes: Arc::clone(&self.diagnostics.check_fixes),\n             mem_docs: self.mem_docs.clone(),\n             semantic_tokens_cache: Arc::clone(&self.semantic_tokens_cache),\n-            proc_macros_loaded: !self.fetch_build_data_queue.last_op_result().0.is_empty(),\n+            proc_macros_loaded: !self.config.expand_proc_macros()\n+                || *self.fetch_proc_macros_queue.last_op_result(),\n             flycheck: self.flycheck.clone(),\n         }\n     }"}, {"sha": "2dae2c82b93996733f82953af2392a90d2433d2d", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f85fc285088129a131ecb83398d9f66922e0830e/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85fc285088129a131ecb83398d9f66922e0830e/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=f85fc285088129a131ecb83398d9f66922e0830e", "patch": "@@ -48,16 +48,15 @@ pub(crate) fn handle_workspace_reload(state: &mut GlobalState, _: ()) -> Result<\n     state.proc_macro_clients = Arc::new([]);\n     state.proc_macro_changed = false;\n \n-    state.fetch_workspaces_queue.request_op(\"reload workspace request\".to_string());\n-    state.fetch_build_data_queue.request_op(\"reload workspace request\".to_string());\n+    state.fetch_workspaces_queue.request_op(\"reload workspace request\".to_string(), ());\n     Ok(())\n }\n \n-pub(crate) fn handle_proc_macros_reload(state: &mut GlobalState, _: ()) -> Result<()> {\n+pub(crate) fn handle_proc_macros_rebuild(state: &mut GlobalState, _: ()) -> Result<()> {\n     state.proc_macro_clients = Arc::new([]);\n     state.proc_macro_changed = false;\n \n-    state.fetch_build_data_queue.request_op(\"reload proc macros request\".to_string());\n+    state.fetch_build_data_queue.request_op(\"rebuild proc macros request\".to_string(), ());\n     Ok(())\n }\n "}, {"sha": "2adefcc5e836d809de8a92a6b8792c2ab3b4db86", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f85fc285088129a131ecb83398d9f66922e0830e/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85fc285088129a131ecb83398d9f66922e0830e/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=f85fc285088129a131ecb83398d9f66922e0830e", "patch": "@@ -51,12 +51,12 @@ impl Request for ReloadWorkspace {\n     const METHOD: &'static str = \"rust-analyzer/reloadWorkspace\";\n }\n \n-pub enum ReloadProcMacros {}\n+pub enum RebuildProcMacros {}\n \n-impl Request for ReloadProcMacros {\n+impl Request for RebuildProcMacros {\n     type Params = ();\n     type Result = ();\n-    const METHOD: &'static str = \"rust-analyzer/reloadProcMacros\";\n+    const METHOD: &'static str = \"rust-analyzer/rebuildProcMacros\";\n }\n \n pub enum SyntaxTree {}"}, {"sha": "f9930fb259903a4c80117e4da140382e1fbb9a33", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f85fc285088129a131ecb83398d9f66922e0830e/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85fc285088129a131ecb83398d9f66922e0830e/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=f85fc285088129a131ecb83398d9f66922e0830e", "patch": "@@ -149,8 +149,8 @@ impl GlobalState {\n             );\n         }\n \n-        self.fetch_workspaces_queue.request_op(\"startup\".to_string());\n-        if let Some(cause) = self.fetch_workspaces_queue.should_start_op() {\n+        self.fetch_workspaces_queue.request_op(\"startup\".to_string(), ());\n+        if let Some((cause, ())) = self.fetch_workspaces_queue.should_start_op() {\n             self.fetch_workspaces(cause);\n         }\n \n@@ -248,7 +248,7 @@ impl GlobalState {\n                             self.prime_caches_queue.op_completed(());\n                             if cancelled {\n                                 self.prime_caches_queue\n-                                    .request_op(\"restart after cancellation\".to_string());\n+                                    .request_op(\"restart after cancellation\".to_string(), ());\n                             }\n                         }\n                     };\n@@ -280,15 +280,16 @@ impl GlobalState {\n         if self.is_quiescent() {\n             let became_quiescent = !(was_quiescent\n                 || self.fetch_workspaces_queue.op_requested()\n-                || self.fetch_build_data_queue.op_requested());\n+                || self.fetch_build_data_queue.op_requested()\n+                || self.fetch_proc_macros_queue.op_requested());\n \n             if became_quiescent {\n                 if self.config.check_on_save() {\n                     // Project has loaded properly, kick off initial flycheck\n                     self.flycheck.iter().for_each(FlycheckHandle::restart);\n                 }\n                 if self.config.prefill_caches() {\n-                    self.prime_caches_queue.request_op(\"became quiescent\".to_string());\n+                    self.prime_caches_queue.request_op(\"became quiescent\".to_string(), ());\n                 }\n             }\n \n@@ -358,18 +359,20 @@ impl GlobalState {\n         }\n \n         if self.config.cargo_autoreload() {\n-            if let Some(cause) = self.fetch_workspaces_queue.should_start_op() {\n+            if let Some((cause, ())) = self.fetch_workspaces_queue.should_start_op() {\n                 self.fetch_workspaces(cause);\n             }\n         }\n \n         if !self.fetch_workspaces_queue.op_in_progress() {\n-            if let Some(cause) = self.fetch_build_data_queue.should_start_op() {\n+            if let Some((cause, ())) = self.fetch_build_data_queue.should_start_op() {\n                 self.fetch_build_data(cause);\n+            } else if let Some((cause, paths)) = self.fetch_proc_macros_queue.should_start_op() {\n+                self.fetch_proc_macros(cause, paths);\n             }\n         }\n \n-        if let Some(cause) = self.prime_caches_queue.should_start_op() {\n+        if let Some((cause, ())) = self.prime_caches_queue.should_start_op() {\n             tracing::debug!(%cause, \"will prime caches\");\n             let num_worker_threads = self.config.prime_caches_num_threads();\n \n@@ -463,7 +466,8 @@ impl GlobalState {\n                         let workspaces_updated = !Arc::ptr_eq(&old, &self.workspaces);\n \n                         if self.config.run_build_scripts() && workspaces_updated {\n-                            self.fetch_build_data_queue.request_op(format!(\"workspace updated\"));\n+                            self.fetch_build_data_queue\n+                                .request_op(format!(\"workspace updated\"), ());\n                         }\n \n                         (Progress::End, None)\n@@ -497,6 +501,7 @@ impl GlobalState {\n                     ProcMacroProgress::Begin => (Some(Progress::Begin), None),\n                     ProcMacroProgress::Report(msg) => (Some(Progress::Report), Some(msg)),\n                     ProcMacroProgress::End(proc_macro_load_result) => {\n+                        self.fetch_proc_macros_queue.op_completed(true);\n                         self.set_proc_macros(proc_macro_load_result);\n \n                         (Some(Progress::End), None)\n@@ -649,7 +654,7 @@ impl GlobalState {\n \n         dispatcher\n             .on_sync_mut::<lsp_ext::ReloadWorkspace>(handlers::handle_workspace_reload)\n-            .on_sync_mut::<lsp_ext::ReloadProcMacros>(handlers::handle_proc_macros_reload)\n+            .on_sync_mut::<lsp_ext::RebuildProcMacros>(handlers::handle_proc_macros_rebuild)\n             .on_sync_mut::<lsp_ext::MemoryUsage>(handlers::handle_memory_usage)\n             .on_sync_mut::<lsp_ext::ShuffleCrateGraph>(handlers::handle_shuffle_crate_graph)\n             .on_sync::<lsp_ext::JoinLines>(handlers::handle_join_lines)\n@@ -904,7 +909,7 @@ impl GlobalState {\n                     if let Some(abs_path) = vfs_path.as_path() {\n                         if reload::should_refresh_for_change(abs_path, ChangeKind::Modify) {\n                             this.fetch_workspaces_queue\n-                                .request_op(format!(\"DidSaveTextDocument {}\", abs_path.display()));\n+                                .request_op(format!(\"DidSaveTextDocument {}\", abs_path.display()), ());\n                         }\n                     }\n \n@@ -980,7 +985,7 @@ impl GlobalState {\n                 config.workspace_roots.extend(added);\n                     if !config.has_linked_projects() && config.detached_files().is_empty() {\n                         config.rediscover_workspaces();\n-                        this.fetch_workspaces_queue.request_op(\"client workspaces changed\".to_string())\n+                        this.fetch_workspaces_queue.request_op(\"client workspaces changed\".to_string(), ())\n                     }\n \n                 Ok(())"}, {"sha": "932730fc234b469f52635e5c36fce3a5182e7f46", "filename": "crates/rust-analyzer/src/op_queue.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f85fc285088129a131ecb83398d9f66922e0830e/crates%2Frust-analyzer%2Fsrc%2Fop_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85fc285088129a131ecb83398d9f66922e0830e/crates%2Frust-analyzer%2Fsrc%2Fop_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fop_queue.rs?ref=f85fc285088129a131ecb83398d9f66922e0830e", "patch": "@@ -3,23 +3,23 @@\n \n pub(crate) type Cause = String;\n \n-pub(crate) struct OpQueue<Output> {\n-    op_requested: Option<Cause>,\n+pub(crate) struct OpQueue<Args = (), Output = ()> {\n+    op_requested: Option<(Cause, Args)>,\n     op_in_progress: bool,\n     last_op_result: Output,\n }\n \n-impl<Output: Default> Default for OpQueue<Output> {\n+impl<Args, Output: Default> Default for OpQueue<Args, Output> {\n     fn default() -> Self {\n         Self { op_requested: None, op_in_progress: false, last_op_result: Default::default() }\n     }\n }\n \n-impl<Output> OpQueue<Output> {\n-    pub(crate) fn request_op(&mut self, reason: Cause) {\n-        self.op_requested = Some(reason);\n+impl<Args, Output> OpQueue<Args, Output> {\n+    pub(crate) fn request_op(&mut self, reason: Cause, args: Args) {\n+        self.op_requested = Some((reason, args));\n     }\n-    pub(crate) fn should_start_op(&mut self) -> Option<Cause> {\n+    pub(crate) fn should_start_op(&mut self) -> Option<(Cause, Args)> {\n         if self.op_in_progress {\n             return None;\n         }"}, {"sha": "987eb8aad6da6ab2425755cc8fdc94ba3f976e84", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 39, "deletions": 25, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/f85fc285088129a131ecb83398d9f66922e0830e/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85fc285088129a131ecb83398d9f66922e0830e/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=f85fc285088129a131ecb83398d9f66922e0830e", "patch": "@@ -66,6 +66,7 @@ impl GlobalState {\n         !(self.last_reported_status.is_none()\n             || self.fetch_workspaces_queue.op_in_progress()\n             || self.fetch_build_data_queue.op_in_progress()\n+            || self.fetch_proc_macros_queue.op_in_progress()\n             || self.vfs_progress_config_version < self.vfs_config_version\n             || self.vfs_progress_n_done < self.vfs_progress_n_total)\n     }\n@@ -77,7 +78,7 @@ impl GlobalState {\n             self.analysis_host.update_lru_capacity(self.config.lru_capacity());\n         }\n         if self.config.linked_projects() != old_config.linked_projects() {\n-            self.fetch_workspaces_queue.request_op(\"linked projects changed\".to_string())\n+            self.fetch_workspaces_queue.request_op(\"linked projects changed\".to_string(), ())\n         } else if self.config.flycheck() != old_config.flycheck() {\n             self.reload_flycheck();\n         }\n@@ -101,7 +102,7 @@ impl GlobalState {\n \n         if self.proc_macro_changed {\n             status.health = lsp_ext::Health::Warning;\n-            message.push_str(\"Reload required due to source changes of a procedural macro.\\n\\n\");\n+            message.push_str(\"Proc-macros have changed and need to be rebuild.\\n\\n\");\n         }\n         if let Err(_) = self.fetch_build_data_error() {\n             status.health = lsp_ext::Health::Warning;\n@@ -223,8 +224,8 @@ impl GlobalState {\n         });\n     }\n \n-    pub(crate) fn load_proc_macros(&mut self, paths: Vec<ProcMacroPaths>) {\n-        tracing::info!(\"will load proc macros\");\n+    pub(crate) fn fetch_proc_macros(&mut self, cause: Cause, paths: Vec<ProcMacroPaths>) {\n+        tracing::info!(%cause, \"will load proc macros\");\n         let dummy_replacements = self.config.dummy_replacements().clone();\n         let proc_macro_clients = self.proc_macro_clients.clone();\n \n@@ -240,28 +241,30 @@ impl GlobalState {\n             };\n \n             let mut res = FxHashMap::default();\n-            for (client, paths) in proc_macro_clients\n+            let chain = proc_macro_clients\n                 .iter()\n                 .map(|res| res.as_ref().map_err(|e| &**e))\n-                .chain(iter::repeat_with(|| Err(\"Proc macros are disabled\")))\n-                .zip(paths)\n-            {\n+                .chain(iter::repeat_with(|| Err(\"Proc macros servers are not running\")));\n+            for (client, paths) in chain.zip(paths) {\n                 res.extend(paths.into_iter().map(move |(crate_id, res)| {\n                     (\n                         crate_id,\n-                        res.and_then(|(crate_name, path)| {\n-                            progress(path.display().to_string());\n-                            load_proc_macro(\n-                                client,\n-                                &path,\n-                                crate_name\n-                                    .as_deref()\n-                                    .and_then(|crate_name| {\n-                                        dummy_replacements.get(crate_name).map(|v| &**v)\n-                                    })\n-                                    .unwrap_or_default(),\n-                            )\n-                        }),\n+                        res.map_or_else(\n+                            || Err(\"proc macro crate is missing dylib\".to_owned()),\n+                            |(crate_name, path)| {\n+                                progress(path.display().to_string());\n+                                load_proc_macro(\n+                                    client,\n+                                    &path,\n+                                    crate_name\n+                                        .as_deref()\n+                                        .and_then(|crate_name| {\n+                                            dummy_replacements.get(crate_name).map(|v| &**v)\n+                                        })\n+                                        .unwrap_or_default(),\n+                                )\n+                            },\n+                        ),\n                     )\n                 }));\n             }\n@@ -443,14 +446,25 @@ impl GlobalState {\n             (crate_graph, proc_macros)\n         };\n         let mut change = Change::new();\n+\n+        if same_workspaces {\n+            if self.config.expand_proc_macros() {\n+                self.fetch_proc_macros_queue.request_op(cause, proc_macro_paths);\n+            }\n+        } else {\n+            // Set up errors for proc-macros upfront that we haven't run build scripts yet\n+            let mut proc_macros = FxHashMap::default();\n+            for paths in proc_macro_paths {\n+                proc_macros.extend(paths.into_iter().map(move |(crate_id, _)| {\n+                    (crate_id, Err(\"crate has not yet been build\".to_owned()))\n+                }));\n+            }\n+            change.set_proc_macros(proc_macros);\n+        }\n         change.set_crate_graph(crate_graph);\n         self.analysis_host.apply_change(change);\n         self.process_changes();\n \n-        if same_workspaces && !self.fetch_workspaces_queue.op_requested() {\n-            self.load_proc_macros(proc_macro_paths);\n-        }\n-\n         self.reload_flycheck();\n \n         tracing::info!(\"did switch workspaces\");"}, {"sha": "bb5c6589489220f4b1d85664cee1e2df3e81c0b0", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f85fc285088129a131ecb83398d9f66922e0830e/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/f85fc285088129a131ecb83398d9f66922e0830e/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=f85fc285088129a131ecb83398d9f66922e0830e", "patch": "@@ -1,5 +1,5 @@\n <!---\n-lsp_ext.rs hash: 92fe1037312754df\n+lsp_ext.rs hash: 7269e4cfab906e10\n \n If you need to change the above hash to make the test pass, please check if you\n need to adjust this doc as well and ping this issue:\n@@ -422,9 +422,9 @@ Returns internal status message, mostly for debugging purposes.\n \n Reloads project information (that is, re-executes `cargo metadata`).\n \n-## Reload proc-macros\n+## Rebuild proc-macros\n \n-**Method:** `rust-analyzer/reloadProcMacros`\n+**Method:** `rust-analyzer/rebuildProcMacros`\n \n **Request:** `null`\n "}, {"sha": "4e57bf0e29b16af0e42a8d93b66990276bd5f855", "filename": "editors/code/package.json", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f85fc285088129a131ecb83398d9f66922e0830e/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/f85fc285088129a131ecb83398d9f66922e0830e/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=f85fc285088129a131ecb83398d9f66922e0830e", "patch": "@@ -200,8 +200,8 @@\n                 \"category\": \"rust-analyzer\"\n             },\n             {\n-                \"command\": \"rust-analyzer.reloadProcMacros\",\n-                \"title\": \"Reload proc macros and build scripts\",\n+                \"command\": \"rust-analyzer.rebuildProcMacros\",\n+                \"title\": \"Rebuild proc macros and build scripts\",\n                 \"category\": \"rust-analyzer\"\n             },\n             {"}, {"sha": "486127d005ab8aa9ca1fda419de5ff5f89baf215", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f85fc285088129a131ecb83398d9f66922e0830e/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f85fc285088129a131ecb83398d9f66922e0830e/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=f85fc285088129a131ecb83398d9f66922e0830e", "patch": "@@ -749,8 +749,8 @@ export function reloadWorkspace(ctx: CtxInit): Cmd {\n     return async () => ctx.client.sendRequest(ra.reloadWorkspace);\n }\n \n-export function reloadProcMacros(ctx: CtxInit): Cmd {\n-    return async () => ctx.client.sendRequest(ra.reloadProcMacros);\n+export function rebuildProcMacros(ctx: CtxInit): Cmd {\n+    return async () => ctx.client.sendRequest(ra.rebuildProcMacros);\n }\n \n export function addProject(ctx: CtxInit): Cmd {"}, {"sha": "89264ebe4694c44de602c8cfafaec76240f6c7a6", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f85fc285088129a131ecb83398d9f66922e0830e/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f85fc285088129a131ecb83398d9f66922e0830e/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=f85fc285088129a131ecb83398d9f66922e0830e", "patch": "@@ -383,7 +383,7 @@ export class Ctx {\n             \"\\n\\n[Reload Workspace](command:rust-analyzer.reloadWorkspace)\"\n         );\n         statusBar.tooltip.appendMarkdown(\n-            \"\\n\\n[Rebuild Proc Macros](command:rust-analyzer.reloadProcMacros)\"\n+            \"\\n\\n[Rebuild Proc Macros](command:rust-analyzer.rebuildProcMacros)\"\n         );\n         statusBar.tooltip.appendMarkdown(\"\\n\\n[Restart server](command:rust-analyzer.startServer)\");\n         statusBar.tooltip.appendMarkdown(\"\\n\\n[Stop server](command:rust-analyzer.stopServer)\");"}, {"sha": "857f0ed3f60d5465cab45965ffccd59e93ce4afb", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f85fc285088129a131ecb83398d9f66922e0830e/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f85fc285088129a131ecb83398d9f66922e0830e/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=f85fc285088129a131ecb83398d9f66922e0830e", "patch": "@@ -43,7 +43,7 @@ export const relatedTests = new lc.RequestType<lc.TextDocumentPositionParams, Te\n     \"rust-analyzer/relatedTests\"\n );\n export const reloadWorkspace = new lc.RequestType0<null, void>(\"rust-analyzer/reloadWorkspace\");\n-export const reloadProcMacros = new lc.RequestType0<null, void>(\"rust-analyzer/reloadProcMacros\");\n+export const rebuildProcMacros = new lc.RequestType0<null, void>(\"rust-analyzer/reloadProcMacros\");\n \n export const runFlycheck = new lc.NotificationType<{\n     textDocument: lc.TextDocumentIdentifier | null;"}, {"sha": "de40f99e003e9c364befc860fa67086bcebe1242", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f85fc285088129a131ecb83398d9f66922e0830e/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f85fc285088129a131ecb83398d9f66922e0830e/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=f85fc285088129a131ecb83398d9f66922e0830e", "patch": "@@ -153,7 +153,7 @@ function createCommands(): Record<string, CommandFactory> {\n         memoryUsage: { enabled: commands.memoryUsage },\n         shuffleCrateGraph: { enabled: commands.shuffleCrateGraph },\n         reloadWorkspace: { enabled: commands.reloadWorkspace },\n-        reloadProcMacros: { enabled: commands.reloadProcMacros },\n+        rebuildProcMacros: { enabled: commands.rebuildProcMacros },\n         addProject: { enabled: commands.addProject },\n         matchingBrace: { enabled: commands.matchingBrace },\n         joinLines: { enabled: commands.joinLines },"}]}