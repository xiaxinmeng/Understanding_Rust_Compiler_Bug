{"sha": "f55d20ff46ac73154b33a1e543e250fa32c32789", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NWQyMGZmNDZhYzczMTU0YjMzYTFlNTQzZTI1MGZhMzJjMzI3ODk=", "commit": {"author": {"name": "Theemathas Chirananthavat", "email": "theemathas@gmail.com", "date": "2016-12-30T03:22:24Z"}, "committer": {"name": "Theemathas Chirananthavat", "email": "theemathas@gmail.com", "date": "2017-01-06T01:41:01Z"}, "message": "Refactor drop_ref.rs to use the if_let_chain macro.", "tree": {"sha": "219157a36112de7e0f1b44214c97f26cac9de218", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/219157a36112de7e0f1b44214c97f26cac9de218"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f55d20ff46ac73154b33a1e543e250fa32c32789", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f55d20ff46ac73154b33a1e543e250fa32c32789", "html_url": "https://github.com/rust-lang/rust/commit/f55d20ff46ac73154b33a1e543e250fa32c32789", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f55d20ff46ac73154b33a1e543e250fa32c32789/comments", "author": {"login": "theemathas", "id": 6120103, "node_id": "MDQ6VXNlcjYxMjAxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/6120103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theemathas", "html_url": "https://github.com/theemathas", "followers_url": "https://api.github.com/users/theemathas/followers", "following_url": "https://api.github.com/users/theemathas/following{/other_user}", "gists_url": "https://api.github.com/users/theemathas/gists{/gist_id}", "starred_url": "https://api.github.com/users/theemathas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theemathas/subscriptions", "organizations_url": "https://api.github.com/users/theemathas/orgs", "repos_url": "https://api.github.com/users/theemathas/repos", "events_url": "https://api.github.com/users/theemathas/events{/privacy}", "received_events_url": "https://api.github.com/users/theemathas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "theemathas", "id": 6120103, "node_id": "MDQ6VXNlcjYxMjAxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/6120103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theemathas", "html_url": "https://github.com/theemathas", "followers_url": "https://api.github.com/users/theemathas/followers", "following_url": "https://api.github.com/users/theemathas/following{/other_user}", "gists_url": "https://api.github.com/users/theemathas/gists{/gist_id}", "starred_url": "https://api.github.com/users/theemathas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theemathas/subscriptions", "organizations_url": "https://api.github.com/users/theemathas/orgs", "repos_url": "https://api.github.com/users/theemathas/repos", "events_url": "https://api.github.com/users/theemathas/events{/privacy}", "received_events_url": "https://api.github.com/users/theemathas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3050d90930c54e4552f286807751356514f997ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/3050d90930c54e4552f286807751356514f997ba", "html_url": "https://github.com/rust-lang/rust/commit/3050d90930c54e4552f286807751356514f997ba"}], "stats": {"total": 41, "additions": 17, "deletions": 24}, "files": [{"sha": "bddf47d3f45a72125499a079167ad3b5b9e8b903", "filename": "clippy_lints/src/drop_ref.rs", "status": "modified", "additions": 17, "deletions": 24, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f55d20ff46ac73154b33a1e543e250fa32c32789/clippy_lints%2Fsrc%2Fdrop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55d20ff46ac73154b33a1e543e250fa32c32789/clippy_lints%2Fsrc%2Fdrop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_ref.rs?ref=f55d20ff46ac73154b33a1e543e250fa32c32789", "patch": "@@ -1,7 +1,6 @@\n use rustc::lint::*;\n use rustc::ty;\n use rustc::hir::*;\n-use syntax::codemap::Span;\n use utils::{match_def_path, paths, span_note_and_lint};\n \n /// **What it does:** Checks for calls to `std::mem::drop` with a reference\n@@ -37,29 +36,23 @@ impl LintPass for Pass {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        if let ExprCall(ref path, ref args) = expr.node {\n-            if let ExprPath(ref qpath) = path.node {\n-                let def_id = cx.tcx.tables().qpath_def(qpath, path.id).def_id();\n-                if match_def_path(cx, def_id, &paths::DROP) {\n-                    if args.len() != 1 {\n-                        return;\n-                    }\n-                    check_drop_arg(cx, expr.span, &args[0]);\n-                }\n+        if_let_chain!{[\n+            let ExprCall(ref path, ref args) = expr.node,\n+            let ExprPath(ref qpath) = path.node,\n+            match_def_path(cx, cx.tcx.tables().qpath_def(qpath, path.id).def_id(), &paths::DROP),\n+            args.len() == 1,\n+        ], {\n+            let arg = &args[0];\n+            let arg_ty = cx.tcx.tables().expr_ty(arg);\n+            if let ty::TyRef(..) = arg_ty.sty {\n+                span_note_and_lint(cx,\n+                                   DROP_REF,\n+                                   expr.span,\n+                                   \"call to `std::mem::drop` with a reference argument. \\\n+                                   Dropping a reference does nothing\",\n+                                   arg.span,\n+                                   &format!(\"argument has type {}\", arg_ty.sty));\n             }\n-        }\n-    }\n-}\n-\n-fn check_drop_arg(cx: &LateContext, call_span: Span, arg: &Expr) {\n-    let arg_ty = cx.tcx.tables().expr_ty(arg);\n-    if let ty::TyRef(..) = arg_ty.sty {\n-        span_note_and_lint(cx,\n-                           DROP_REF,\n-                           call_span,\n-                           \"call to `std::mem::drop` with a reference argument. \\\n-                           Dropping a reference does nothing\",\n-                           arg.span,\n-                           &format!(\"argument has type {}\", arg_ty.sty));\n+        }}\n     }\n }"}]}