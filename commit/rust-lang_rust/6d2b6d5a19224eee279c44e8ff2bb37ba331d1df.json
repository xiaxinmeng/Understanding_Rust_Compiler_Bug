{"sha": "6d2b6d5a19224eee279c44e8ff2bb37ba331d1df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMmI2ZDVhMTkyMjRlZWUyNzljNDRlOGZmMmJiMzdiYTMzMWQxZGY=", "commit": {"author": {"name": "Michael Sproul", "email": "micsproul@gmail.com", "date": "2015-04-15T11:54:01Z"}, "committer": {"name": "Michael Sproul", "email": "micsproul@gmail.com", "date": "2015-04-17T11:35:24Z"}, "message": "Enforce 80 char lines in extended errors.", "tree": {"sha": "0106105e8f7bd7aadb15454bd247f205258c4899", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0106105e8f7bd7aadb15454bd247f205258c4899"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d2b6d5a19224eee279c44e8ff2bb37ba331d1df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d2b6d5a19224eee279c44e8ff2bb37ba331d1df", "html_url": "https://github.com/rust-lang/rust/commit/6d2b6d5a19224eee279c44e8ff2bb37ba331d1df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d2b6d5a19224eee279c44e8ff2bb37ba331d1df/comments", "author": {"login": "michaelsproul", "id": 4452260, "node_id": "MDQ6VXNlcjQ0NTIyNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelsproul", "html_url": "https://github.com/michaelsproul", "followers_url": "https://api.github.com/users/michaelsproul/followers", "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}", "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions", "organizations_url": "https://api.github.com/users/michaelsproul/orgs", "repos_url": "https://api.github.com/users/michaelsproul/repos", "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelsproul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelsproul", "id": 4452260, "node_id": "MDQ6VXNlcjQ0NTIyNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelsproul", "html_url": "https://github.com/michaelsproul", "followers_url": "https://api.github.com/users/michaelsproul/followers", "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}", "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions", "organizations_url": "https://api.github.com/users/michaelsproul/orgs", "repos_url": "https://api.github.com/users/michaelsproul/repos", "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelsproul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c54f43a5d18c89f65f22a179e8e6d05ce9c1d36c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c54f43a5d18c89f65f22a179e8e6d05ce9c1d36c", "html_url": "https://github.com/rust-lang/rust/commit/c54f43a5d18c89f65f22a179e8e6d05ce9c1d36c"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "092d0cc4424024d4ea058d07a9ab3552ab0b448b", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6d2b6d5a19224eee279c44e8ff2bb37ba331d1df/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2b6d5a19224eee279c44e8ff2bb37ba331d1df/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=6d2b6d5a19224eee279c44e8ff2bb37ba331d1df", "patch": "@@ -55,15 +55,17 @@ underscore `_` wildcard pattern can be added after all other patterns to match\n \n // FIXME: Remove duplication here?\n E0005: r##\"\n-Patterns used to bind names must be irrefutable, that is, they must guarantee that a\n-name will be extracted in all cases. If you encounter this error you probably need\n-to use a `match` or `if let` to deal with the possibility of failure.\n+Patterns used to bind names must be irrefutable, that is, they must guarantee\n+that a name will be extracted in all cases. If you encounter this error you\n+probably need to use a `match` or `if let` to deal with the possibility of\n+failure.\n \"##,\n \n E0006: r##\"\n-Patterns used to bind names must be irrefutable, that is, they must guarantee that a\n-name will be extracted in all cases. If you encounter this error you probably need\n-to use a `match` or `if let` to deal with the possibility of failure.\n+Patterns used to bind names must be irrefutable, that is, they must guarantee\n+that a name will be extracted in all cases. If you encounter this error you\n+probably need to use a `match` or `if let` to deal with the possibility of\n+failure.\n \"##,\n \n E0007: r##\""}, {"sha": "6fcf39f0b174bf5ec4b57626740b707fc4fe9029", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6d2b6d5a19224eee279c44e8ff2bb37ba331d1df/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2b6d5a19224eee279c44e8ff2bb37ba331d1df/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=6d2b6d5a19224eee279c44e8ff2bb37ba331d1df", "patch": "@@ -20,6 +20,9 @@ use parse::token;\n use ptr::P;\n use util::small_vector::SmallVector;\n \n+// Maximum width of any line in an extended error description (inclusive).\n+const MAX_DESCRIPTION_WIDTH: usize = 80;\n+\n thread_local! {\n     static REGISTERED_DIAGNOSTICS: RefCell<BTreeMap<Name, Option<Name>>> = {\n         RefCell::new(BTreeMap::new())\n@@ -92,16 +95,22 @@ pub fn expand_register_diagnostic<'cx>(ecx: &'cx mut ExtCtxt,\n         }\n         _ => unreachable!()\n     };\n-    // Check that the description starts and ends with a newline.\n+    // Check that the description starts and ends with a newline and doesn't\n+    // overflow the maximum line width.\n     description.map(|raw_msg| {\n         let msg = raw_msg.as_str();\n-        let last = msg.len() - 1;\n-        if &msg[0..1] != \"\\n\" || &msg[last..] != \"\\n\" {\n+        if !msg.starts_with(\"\\n\") || !msg.ends_with(\"\\n\") {\n             ecx.span_err(span, &format!(\n                 \"description for error code {} doesn't start and end with a newline\",\n                 token::get_ident(*code)\n             ));\n         }\n+        if msg.lines().any(|line| line.len() > MAX_DESCRIPTION_WIDTH) {\n+            ecx.span_err(span, &format!(\n+                \"description for error code {} contains a line longer than {} characters\",\n+                token::get_ident(*code), MAX_DESCRIPTION_WIDTH\n+            ));\n+        }\n         raw_msg\n     });\n     with_registered_diagnostics(|diagnostics| {"}]}