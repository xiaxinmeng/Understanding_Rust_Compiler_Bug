{"sha": "317a253b22a512fad46c3749ea86d9674ff18453", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxN2EyNTNiMjJhNTEyZmFkNDZjMzc0OWVhODZkOTY3NGZmMTg0NTM=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-02-14T04:23:01Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-02-24T00:24:57Z"}, "message": "All uses of `extern fn` should mean `extern \"C\" fn`. Closes #9309.", "tree": {"sha": "857ae7890c4f56e61bcc6595bafddd108150ccd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/857ae7890c4f56e61bcc6595bafddd108150ccd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/317a253b22a512fad46c3749ea86d9674ff18453", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/317a253b22a512fad46c3749ea86d9674ff18453", "html_url": "https://github.com/rust-lang/rust/commit/317a253b22a512fad46c3749ea86d9674ff18453", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/317a253b22a512fad46c3749ea86d9674ff18453/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbed3321f5bbe4375819dd82193bd4299fabafb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbed3321f5bbe4375819dd82193bd4299fabafb9", "html_url": "https://github.com/rust-lang/rust/commit/cbed3321f5bbe4375819dd82193bd4299fabafb9"}], "stats": {"total": 83, "additions": 53, "deletions": 30}, "files": [{"sha": "95d605823da3e450d83051f30f17d27dc4c4b41a", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/317a253b22a512fad46c3749ea86d9674ff18453/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317a253b22a512fad46c3749ea86d9674ff18453/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=317a253b22a512fad46c3749ea86d9674ff18453", "patch": "@@ -500,6 +500,7 @@ pub fn super_tys<C:Combine>(this: &C, a: ty::t, b: ty::t) -> cres<ty::t> {\n       (&ty::ty_trait(a_id, ref a_substs, a_store, a_mutbl, a_bounds),\n        &ty::ty_trait(b_id, ref b_substs, b_store, b_mutbl, b_bounds))\n       if a_id == b_id && a_mutbl == b_mutbl => {\n+          debug!(\"Trying to match traits {:?} and {:?}\", a, b);\n           let substs = if_ok!(this.substs(a_id, a_substs, b_substs));\n           let s = if_ok!(this.trait_stores(ty::terr_trait, a_store, b_store));\n           let bounds = if_ok!(this.bounds(a_bounds, b_bounds));"}, {"sha": "51edf4fdff43c78c3883a6b4472fa7db208613e0", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/317a253b22a512fad46c3749ea86d9674ff18453/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317a253b22a512fad46c3749ea86d9674ff18453/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=317a253b22a512fad46c3749ea86d9674ff18453", "patch": "@@ -53,7 +53,7 @@ pub mod test;\n pub static SCHEMA_VERSION: &'static str = \"0.8.1\";\n \n type Pass = (&'static str,                                      // name\n-             extern fn(clean::Crate) -> plugins::PluginResult,  // fn\n+             fn(clean::Crate) -> plugins::PluginResult,         // fn\n              &'static str);                                     // description\n \n static PASSES: &'static [Pass] = &["}, {"sha": "db714376646b51704014738c79d6e2dc421e297d", "filename": "src/librustdoc/plugins.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/317a253b22a512fad46c3749ea86d9674ff18453/src%2Flibrustdoc%2Fplugins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317a253b22a512fad46c3749ea86d9674ff18453/src%2Flibrustdoc%2Fplugins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fplugins.rs?ref=317a253b22a512fad46c3749ea86d9674ff18453", "patch": "@@ -15,7 +15,7 @@ use dl = std::unstable::dynamic_lib;\n \n pub type PluginJson = Option<(~str, json::Json)>;\n pub type PluginResult = (clean::Crate, PluginJson);\n-pub type PluginCallback = extern fn (clean::Crate) -> PluginResult;\n+pub type PluginCallback = fn (clean::Crate) -> PluginResult;\n \n /// Manages loading and running of plugins\n pub struct PluginManager {"}, {"sha": "60c43632ba04640df49ba7eeaa14a439768a16b7", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/317a253b22a512fad46c3749ea86d9674ff18453/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317a253b22a512fad46c3749ea86d9674ff18453/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=317a253b22a512fad46c3749ea86d9674ff18453", "patch": "@@ -862,11 +862,12 @@ impl Parser {\n \n         */\n \n-        let opt_abis = if self.eat_keyword(keywords::Extern) {\n-            self.parse_opt_abis()\n-        } else { None };\n+        let abis = if self.eat_keyword(keywords::Extern) {\n+            self.parse_opt_abis().unwrap_or(AbiSet::C())\n+        } else {\n+            AbiSet::Rust()\n+        };\n \n-        let abis = opt_abis.unwrap_or(AbiSet::Rust());\n         let purity = self.parse_unsafety();\n         self.expect_keyword(keywords::Fn);\n         let (decl, lifetimes) = self.parse_ty_fn_decl(true);"}, {"sha": "8e39230a36a6207e2547e30a4c059628dca32ee7", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/317a253b22a512fad46c3749ea86d9674ff18453/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317a253b22a512fad46c3749ea86d9674ff18453/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=317a253b22a512fad46c3749ea86d9674ff18453", "patch": "@@ -106,8 +106,8 @@ pub trait TDynBenchFn {\n // may need to come up with a more clever definition of test in order\n // to support isolation of tests into tasks.\n pub enum TestFn {\n-    StaticTestFn(extern fn()),\n-    StaticBenchFn(extern fn(&mut BenchHarness)),\n+    StaticTestFn(fn()),\n+    StaticBenchFn(fn(&mut BenchHarness)),\n     StaticMetricFn(proc(&mut MetricMap)),\n     DynTestFn(proc()),\n     DynMetricFn(proc(&mut MetricMap)),"}, {"sha": "b2e6548890da53351d249465ba341cf2c72ff60c", "filename": "src/test/auxiliary/static-function-pointer-aux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/317a253b22a512fad46c3749ea86d9674ff18453/src%2Ftest%2Fauxiliary%2Fstatic-function-pointer-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317a253b22a512fad46c3749ea86d9674ff18453/src%2Ftest%2Fauxiliary%2Fstatic-function-pointer-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstatic-function-pointer-aux.rs?ref=317a253b22a512fad46c3749ea86d9674ff18453", "patch": "@@ -12,5 +12,5 @@\n \n pub fn f(x: int) -> int { -x }\n \n-pub static F: extern fn(int) -> int = f;\n-pub static mut MutF: extern fn(int) -> int = f;\n+pub static F: fn(int) -> int = f;\n+pub static mut MutF: fn(int) -> int = f;"}, {"sha": "e268b0e93fdad4e9aac45a114c0adeb738d51b28", "filename": "src/test/compile-fail/block-coerce-no-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/317a253b22a512fad46c3749ea86d9674ff18453/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317a253b22a512fad46c3749ea86d9674ff18453/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no-2.rs?ref=317a253b22a512fad46c3749ea86d9674ff18453", "patch": "@@ -12,10 +12,10 @@\n // other tycons.\n \n fn main() {\n-    fn f(f: extern fn(extern fn(extern fn()))) {\n+    fn f(f: fn(fn(fn()))) {\n     }\n \n-    fn g(f: extern fn(||)) {\n+    fn g(f: fn(||)) {\n     }\n \n     f(g);"}, {"sha": "2a2a3dee1dfa6724cb9462dfc9807c3ebc0788ce", "filename": "src/test/compile-fail/borrowck-autoref-3261.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/317a253b22a512fad46c3749ea86d9674ff18453/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317a253b22a512fad46c3749ea86d9674ff18453/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs?ref=317a253b22a512fad46c3749ea86d9674ff18453", "patch": "@@ -10,10 +10,10 @@\n \n enum Either<T, U> { Left(T), Right(U) }\n \n-struct X(Either<(uint,uint),extern fn()>);\n+struct X(Either<(uint,uint), fn()>);\n \n impl X {\n-    pub fn with(&self, blk: |x: &Either<(uint,uint),extern fn()>|) {\n+    pub fn with(&self, blk: |x: &Either<(uint,uint), fn()>|) {\n         let X(ref e) = *self;\n         blk(e)\n     }"}, {"sha": "6d193ec400ba73925862bc3867481e080662d8fc", "filename": "src/test/run-pass/const-vec-of-fns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/317a253b22a512fad46c3749ea86d9674ff18453/src%2Ftest%2Frun-pass%2Fconst-vec-of-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317a253b22a512fad46c3749ea86d9674ff18453/src%2Ftest%2Frun-pass%2Fconst-vec-of-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-vec-of-fns.rs?ref=317a253b22a512fad46c3749ea86d9674ff18453", "patch": "@@ -16,7 +16,7 @@\n  */\n \n fn f() { }\n-static bare_fns: &'static [extern fn()] = &[f, f];\n+static bare_fns: &'static [fn()] = &[f, f];\n struct S<'a>('a ||);\n static closures: &'static [S<'static>] = &[S(f), S(f)];\n "}, {"sha": "7d7c1a56030c8f5a9ccb646db7d06f15bbf80d95", "filename": "src/test/run-pass/fn-abi.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/317a253b22a512fad46c3749ea86d9674ff18453/src%2Ftest%2Frun-pass%2Ffn-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317a253b22a512fad46c3749ea86d9674ff18453/src%2Ftest%2Frun-pass%2Ffn-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-abi.rs?ref=317a253b22a512fad46c3749ea86d9674ff18453", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Ensure that declarations and types which use `extern fn` both have the same\n+// ABI (#9309).\n+\n+extern {\n+    fn printf();\n+}\n+\n+pub fn main() {\n+    // Will only type check if the type of _p and the decl of printf use the same ABI\n+    let _p: extern unsafe fn() = printf;\n+}"}, {"sha": "fd8721e29e9b83767d605418f13ef14837af601e", "filename": "src/test/run-pass/fn-bare-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/317a253b22a512fad46c3749ea86d9674ff18453/src%2Ftest%2Frun-pass%2Ffn-bare-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317a253b22a512fad46c3749ea86d9674ff18453/src%2Ftest%2Frun-pass%2Ffn-bare-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-assign.rs?ref=317a253b22a512fad46c3749ea86d9674ff18453", "patch": "@@ -13,7 +13,7 @@ fn f(i: int, called: &mut bool) {\n     *called = true;\n }\n \n-fn g(f: extern fn(int, v: &mut bool), called: &mut bool) {\n+fn g(f: fn(int, v: &mut bool), called: &mut bool) {\n     f(10, called);\n }\n "}, {"sha": "4fc2c69ceb34f3dfaa37ae78999f08d09a279935", "filename": "src/test/run-pass/fn-bare-spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/317a253b22a512fad46c3749ea86d9674ff18453/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317a253b22a512fad46c3749ea86d9674ff18453/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs?ref=317a253b22a512fad46c3749ea86d9674ff18453", "patch": "@@ -10,7 +10,7 @@\n \n // This is what the signature to spawn should look like with bare functions\n \n-fn spawn<T:Send>(val: T, f: extern fn(T)) {\n+fn spawn<T:Send>(val: T, f: fn(T)) {\n     f(val);\n }\n "}, {"sha": "f21dbc6f987d21818962c88cce30d9680f37ed00", "filename": "src/test/run-pass/fn-lval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/317a253b22a512fad46c3749ea86d9674ff18453/src%2Ftest%2Frun-pass%2Ffn-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317a253b22a512fad46c3749ea86d9674ff18453/src%2Ftest%2Frun-pass%2Ffn-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-lval.rs?ref=317a253b22a512fad46c3749ea86d9674ff18453", "patch": "@@ -11,7 +11,7 @@\n \n \n \n-fn foo(_f: extern fn(int) -> int) { }\n+fn foo(_f: fn(int) -> int) { }\n \n fn id(x: int) -> int { return x; }\n "}, {"sha": "4bff06f2a03825f5f87bf8981930f8c1af736c0b", "filename": "src/test/run-pass/fun-indirect-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/317a253b22a512fad46c3749ea86d9674ff18453/src%2Ftest%2Frun-pass%2Ffun-indirect-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317a253b22a512fad46c3749ea86d9674ff18453/src%2Ftest%2Frun-pass%2Ffun-indirect-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffun-indirect-call.rs?ref=317a253b22a512fad46c3749ea86d9674ff18453", "patch": "@@ -14,7 +14,7 @@\n fn f() -> int { return 42; }\n \n pub fn main() {\n-    let g: extern fn() -> int = f;\n+    let g: fn() -> int = f;\n     let i: int = g();\n     assert_eq!(i, 42);\n }"}, {"sha": "f2dbc5a0d319a5a679302df43a0fada2436014be", "filename": "src/test/run-pass/generic-temporary.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/317a253b22a512fad46c3749ea86d9674ff18453/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317a253b22a512fad46c3749ea86d9674ff18453/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs?ref=317a253b22a512fad46c3749ea86d9674ff18453", "patch": "@@ -14,13 +14,13 @@ fn mk() -> int { return 1; }\n \n fn chk(a: int) { info!(\"{}\", a); assert!((a == 1)); }\n \n-fn apply<T>(produce: extern fn() -> T,\n-            consume: extern fn(T)) {\n+fn apply<T>(produce: fn() -> T,\n+            consume: fn(T)) {\n     consume(produce());\n }\n \n pub fn main() {\n-    let produce: extern fn() -> int = mk;\n-    let consume: extern fn(v: int) = chk;\n+    let produce: fn() -> int = mk;\n+    let consume: fn(v: int) = chk;\n     apply::<int>(produce, consume);\n }"}, {"sha": "0d1103086ae790729bc45caba8d8d678b1b8c7c2", "filename": "src/test/run-pass/newtype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/317a253b22a512fad46c3749ea86d9674ff18453/src%2Ftest%2Frun-pass%2Fnewtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317a253b22a512fad46c3749ea86d9674ff18453/src%2Ftest%2Frun-pass%2Fnewtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype.rs?ref=317a253b22a512fad46c3749ea86d9674ff18453", "patch": "@@ -10,7 +10,7 @@\n \n struct mytype(Mytype);\n \n-struct Mytype {compute: extern fn(mytype) -> int, val: int}\n+struct Mytype {compute: fn(mytype) -> int, val: int}\n \n fn compute(i: mytype) -> int {\n     let mytype(m) = i;"}, {"sha": "ff1091e07ef169ebcdb1d19363e3fbfdaf06be6c", "filename": "src/test/run-pass/static-function-pointer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/317a253b22a512fad46c3749ea86d9674ff18453/src%2Ftest%2Frun-pass%2Fstatic-function-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317a253b22a512fad46c3749ea86d9674ff18453/src%2Ftest%2Frun-pass%2Fstatic-function-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-function-pointer.rs?ref=317a253b22a512fad46c3749ea86d9674ff18453", "patch": "@@ -11,8 +11,8 @@\n fn f(x: int) -> int { x }\n fn g(x: int) -> int { 2 * x }\n \n-static F: extern fn(int) -> int = f;\n-static mut G: extern fn(int) -> int = f;\n+static F: fn(int) -> int = f;\n+static mut G: fn(int) -> int = f;\n \n pub fn main() {\n     assert_eq!(F(42), 42);"}, {"sha": "05b3f98ea08cd27244c325a18ea4dc3f8abcae82", "filename": "src/test/run-pass/tail-cps.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/317a253b22a512fad46c3749ea86d9674ff18453/src%2Ftest%2Frun-pass%2Ftail-cps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317a253b22a512fad46c3749ea86d9674ff18453/src%2Ftest%2Frun-pass%2Ftail-cps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftail-cps.rs?ref=317a253b22a512fad46c3749ea86d9674ff18453", "patch": "@@ -15,13 +15,13 @@ fn checktrue(rs: bool) -> bool { assert!((rs)); return true; }\n \n pub fn main() { let k = checktrue; evenk(42, k); oddk(45, k); }\n \n-fn evenk(n: int, k: extern fn(bool) -> bool) -> bool {\n+fn evenk(n: int, k: fn(bool) -> bool) -> bool {\n     info!(\"evenk\");\n     info!(\"{:?}\", n);\n     if n == 0 { return k(true); } else { return oddk(n - 1, k); }\n }\n \n-fn oddk(n: int, k: extern fn(bool) -> bool) -> bool {\n+fn oddk(n: int, k: fn(bool) -> bool) -> bool {\n     info!(\"oddk\");\n     info!(\"{:?}\", n);\n     if n == 0 { return k(false); } else { return evenk(n - 1, k); }"}, {"sha": "097fdbf699bfa2753f8570a5ae00a982670dea3a", "filename": "src/test/run-pass/tuple-struct-constructor-pointer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/317a253b22a512fad46c3749ea86d9674ff18453/src%2Ftest%2Frun-pass%2Ftuple-struct-constructor-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317a253b22a512fad46c3749ea86d9674ff18453/src%2Ftest%2Frun-pass%2Ftuple-struct-constructor-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftuple-struct-constructor-pointer.rs?ref=317a253b22a512fad46c3749ea86d9674ff18453", "patch": "@@ -14,8 +14,8 @@ struct Foo(int);\n struct Bar(int, int);\n \n pub fn main() {\n-    let f: extern fn(int) -> Foo = Foo;\n-    let g: extern fn(int, int) -> Bar = Bar;\n+    let f: fn(int) -> Foo = Foo;\n+    let g: fn(int, int) -> Bar = Bar;\n     assert_eq!(f(42), Foo(42));\n     assert_eq!(g(4, 7), Bar(4, 7));\n }"}]}