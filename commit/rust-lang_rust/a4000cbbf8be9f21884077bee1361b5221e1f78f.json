{"sha": "a4000cbbf8be9f21884077bee1361b5221e1f78f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MDAwY2JiZjhiZTlmMjE4ODQwNzdiZWUxMzYxYjUyMjFlMWY3OGY=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-04-19T23:48:52Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-05-02T22:48:22Z"}, "message": "Make pretty printer take Session by ref", "tree": {"sha": "ba30a6cf81a8162a5ccf2a839ac209f523ae2cbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba30a6cf81a8162a5ccf2a839ac209f523ae2cbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4000cbbf8be9f21884077bee1361b5221e1f78f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4000cbbf8be9f21884077bee1361b5221e1f78f", "html_url": "https://github.com/rust-lang/rust/commit/a4000cbbf8be9f21884077bee1361b5221e1f78f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4000cbbf8be9f21884077bee1361b5221e1f78f/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d80497e628945c3f11ff351030b4c62a8533e01e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d80497e628945c3f11ff351030b4c62a8533e01e", "html_url": "https://github.com/rust-lang/rust/commit/d80497e628945c3f11ff351030b4c62a8533e01e"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "dc96884e47bbffcf082a6523c7f1519b4cfafdfb", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a4000cbbf8be9f21884077bee1361b5221e1f78f/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4000cbbf8be9f21884077bee1361b5221e1f78f/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=a4000cbbf8be9f21884077bee1361b5221e1f78f", "patch": "@@ -208,11 +208,10 @@ pub fn run_compiler_with_file_loader<'a, L>(args: &[String],\n \n     do_or_return!(callbacks.late_callback(&matches, &sess, &input, &odir, &ofile), Some(sess));\n \n-    // It is somewhat unfortunate that this is hardwired in - this is forced by\n-    // the fact that pretty_print_input requires the session by value.\n+    // It is somewhat unfortunate that this is hardwired in.\n     let pretty = callbacks.parse_pretty(&sess, &matches);\n     if let Some((ppm, opt_uii)) = pretty {\n-        pretty::pretty_print_input(sess, &cstore, cfg, &input, ppm, opt_uii, ofile);\n+        pretty::pretty_print_input(&sess, &cstore, cfg, &input, ppm, opt_uii, ofile);\n         return (Ok(()), None);\n     }\n "}, {"sha": "0591b0493cfb6d28d45b9cbe29537e1b9f75e413", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a4000cbbf8be9f21884077bee1361b5221e1f78f/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4000cbbf8be9f21884077bee1361b5221e1f78f/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=a4000cbbf8be9f21884077bee1361b5221e1f78f", "patch": "@@ -700,14 +700,14 @@ impl fold::Folder for ReplaceBodyWithLoop {\n     }\n }\n \n-pub fn pretty_print_input(sess: Session,\n+pub fn pretty_print_input(sess: &Session,\n                           cstore: &CStore,\n                           cfg: ast::CrateConfig,\n                           input: &Input,\n                           ppm: PpMode,\n                           opt_uii: Option<UserIdentifiedItem>,\n                           ofile: Option<PathBuf>) {\n-    let krate = panictry!(driver::phase_1_parse_input(&sess, cfg, input));\n+    let krate = panictry!(driver::phase_1_parse_input(sess, cfg, input));\n \n     let krate = if let PpmSource(PpmEveryBodyLoops) = ppm {\n         let mut fold = ReplaceBodyWithLoop::new();\n@@ -716,14 +716,14 @@ pub fn pretty_print_input(sess: Session,\n         krate\n     };\n \n-    let id = link::find_crate_name(Some(&sess), &krate.attrs, input);\n+    let id = link::find_crate_name(Some(sess), &krate.attrs, input);\n \n     let is_expanded = needs_expansion(&ppm);\n     let compute_ast_map = needs_ast_map(&ppm, &opt_uii);\n     let krate = if compute_ast_map {\n-        match driver::phase_2_configure_and_expand(&sess, &cstore, krate, &id, None) {\n+        match driver::phase_2_configure_and_expand(sess, &cstore, krate, &id, None) {\n             Err(_) => return,\n-            Ok(k) => driver::assign_node_ids(&sess, k),\n+            Ok(k) => driver::assign_node_ids(sess, k),\n         }\n     } else {\n         krate\n@@ -739,11 +739,12 @@ pub fn pretty_print_input(sess: Session,\n     let ast_map = if compute_ast_map {\n         _defs = Some(RefCell::new(hir_map::collect_definitions(&krate)));\n         let defs = _defs.as_ref().unwrap();\n-        LocalCrateReader::new(&sess, &cstore, defs, &krate, &id).read_crates(&dep_graph);\n-        let lcx = LoweringContext::new(&sess, Some(&krate), defs);\n+        LocalCrateReader::new(sess, &cstore, defs, &krate, &id).read_crates(&dep_graph);\n+        let lcx = LoweringContext::new(sess, Some(&krate), defs);\n \n         hir_forest = hir_map::Forest::new(lower_crate(&lcx, &krate), dep_graph.clone());\n-        Some(hir_map::map_crate(&mut hir_forest, defs))\n+        let map = hir_map::map_crate(&mut hir_forest, defs);\n+        Some(map)\n     } else {\n         None\n     };\n@@ -764,7 +765,7 @@ pub fn pretty_print_input(sess: Session,\n         (PpmSource(s), _) => {\n             // Silently ignores an identified node.\n             let out: &mut Write = &mut out;\n-            s.call_with_pp_support(&sess, ast_map, box out, |annotation, out| {\n+            s.call_with_pp_support(sess, ast_map, box out, |annotation, out| {\n                 debug!(\"pretty printing source code {:?}\", s);\n                 let sess = annotation.sess();\n                 pprust::print_crate(sess.codemap(),\n@@ -780,7 +781,7 @@ pub fn pretty_print_input(sess: Session,\n \n         (PpmHir(s), None) => {\n             let out: &mut Write = &mut out;\n-            s.call_with_pp_support_hir(&sess,\n+            s.call_with_pp_support_hir(sess,\n                                        &ast_map.unwrap(),\n                                        &arenas,\n                                        &id,\n@@ -801,7 +802,7 @@ pub fn pretty_print_input(sess: Session,\n \n         (PpmHir(s), Some(uii)) => {\n             let out: &mut Write = &mut out;\n-            s.call_with_pp_support_hir(&sess,\n+            s.call_with_pp_support_hir(sess,\n                                        &ast_map.unwrap(),\n                                        &arenas,\n                                        &id,\n@@ -836,12 +837,12 @@ pub fn pretty_print_input(sess: Session,\n             let ast_map = ast_map.expect(\"--unpretty missing ast_map\");\n             let nodeid = if let Some(uii) = uii {\n                 debug!(\"pretty printing MIR for {:?}\", uii);\n-                Some(uii.to_one_node_id(\"--unpretty\", &sess, &ast_map))\n+                Some(uii.to_one_node_id(\"--unpretty\", sess, &ast_map))\n             } else {\n                 debug!(\"pretty printing MIR for whole crate\");\n                 None\n             };\n-            abort_on_err(driver::phase_3_run_analysis_passes(&sess,\n+            abort_on_err(driver::phase_3_run_analysis_passes(sess,\n                                                              ast_map,\n                                                              &arenas,\n                                                              &id,\n@@ -864,7 +865,7 @@ pub fn pretty_print_input(sess: Session,\n                     }\n                 }\n                 Ok(())\n-            }), &sess)\n+            }), sess)\n         }\n \n         (PpmFlowGraph(mode), opt_uii) => {\n@@ -876,7 +877,7 @@ pub fn pretty_print_input(sess: Session,\n \n             });\n             let ast_map = ast_map.expect(\"--pretty flowgraph missing ast_map\");\n-            let nodeid = uii.to_one_node_id(\"--pretty\", &sess, &ast_map);\n+            let nodeid = uii.to_one_node_id(\"--pretty\", sess, &ast_map);\n \n             let node = ast_map.find(nodeid).unwrap_or_else(|| {\n                 sess.fatal(&format!(\"--pretty flowgraph couldn't find id: {}\", nodeid))\n@@ -886,8 +887,8 @@ pub fn pretty_print_input(sess: Session,\n             let out: &mut Write = &mut out;\n             match code {\n                 Some(code) => {\n-                    let variants = gather_flowgraph_variants(&sess);\n-                    abort_on_err(driver::phase_3_run_analysis_passes(&sess,\n+                    let variants = gather_flowgraph_variants(sess);\n+                    abort_on_err(driver::phase_3_run_analysis_passes(sess,\n                                                                      ast_map,\n                                                                      &arenas,\n                                                                      &id,\n@@ -899,7 +900,7 @@ pub fn pretty_print_input(sess: Session,\n                                         code,\n                                         mode,\n                                         out)\n-                    }), &sess)\n+                    }), sess)\n                 }\n                 None => {\n                     let message = format!(\"--pretty=flowgraph needs block, fn, or method; got \\"}]}