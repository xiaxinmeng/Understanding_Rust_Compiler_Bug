{"sha": "b96186b8a7250727c35ece5e46bd683f2276129f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5NjE4NmI4YTcyNTA3MjdjMzVlY2U1ZTQ2YmQ2ODNmMjI3NjEyOWY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-12-11T22:54:41Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-12-11T22:54:41Z"}, "message": "Add missing urls in ffi module docs", "tree": {"sha": "2e1e50e2b3e22bab0a6e23890eac560760f2d594", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e1e50e2b3e22bab0a6e23890eac560760f2d594"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b96186b8a7250727c35ece5e46bd683f2276129f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b96186b8a7250727c35ece5e46bd683f2276129f", "html_url": "https://github.com/rust-lang/rust/commit/b96186b8a7250727c35ece5e46bd683f2276129f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b96186b8a7250727c35ece5e46bd683f2276129f/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "118e052d84157a675649fe640e3d56f264475a3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/118e052d84157a675649fe640e3d56f264475a3a", "html_url": "https://github.com/rust-lang/rust/commit/118e052d84157a675649fe640e3d56f264475a3a"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "76bdb8be523f7708b024e325f3a3a5411d25e11e", "filename": "src/libstd/ffi/mod.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b96186b8a7250727c35ece5e46bd683f2276129f/src%2Flibstd%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96186b8a7250727c35ece5e46bd683f2276129f/src%2Flibstd%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fmod.rs?ref=b96186b8a7250727c35ece5e46bd683f2276129f", "patch": "@@ -72,40 +72,40 @@\n //!\n //! * **From Rust to C:** [`CString`] represents an owned, C-friendly\n //! string: it is nul-terminated, and has no internal nul characters.\n-//! Rust code can create a `CString` out of a normal string (provided\n+//! Rust code can create a [`CString`] out of a normal string (provided\n //! that the string doesn't have nul characters in the middle), and\n-//! then use a variety of methods to obtain a raw `*mut u8` that can\n+//! then use a variety of methods to obtain a raw `*mut `[`u8`] that can\n //! then be passed as an argument to functions which use the C\n //! conventions for strings.\n //!\n //! * **From C to Rust:** [`CStr`] represents a borrowed C string; it\n-//! is what you would use to wrap a raw `*const u8` that you got from\n-//! a C function. A `CStr` is guaranteed to be a nul-terminated array\n-//! of bytes. Once you have a `CStr`, you can convert it to a Rust\n-//! `&str` if it's valid UTF-8, or lossily convert it by adding\n+//! is what you would use to wrap a raw `*const `[`u8`] that you got from\n+//! a C function. A [`CStr`] is guaranteed to be a nul-terminated array\n+//! of bytes. Once you have a [`CStr`], you can convert it to a Rust\n+//! [`&str`][`str`] if it's valid UTF-8, or lossily convert it by adding\n //! replacement characters.\n //!\n //! [`OsString`] and [`OsStr`] are useful when you need to transfer\n //! strings to and from the operating system itself, or when capturing\n-//! the output of external commands. Conversions between `OsString`,\n-//! `OsStr` and Rust strings work similarly to those for [`CString`]\n+//! the output of external commands. Conversions between [`OsString`],\n+//! [`OsStr`] and Rust strings work similarly to those for [`CString`]\n //! and [`CStr`].\n //!\n //! * [`OsString`] represents an owned string in whatever\n //! representation the operating system prefers. In the Rust standard\n //! library, various APIs that transfer strings to/from the operating\n-//! system use `OsString` instead of plain strings. For example,\n+//! system use [`OsString`] instead of plain strings. For example,\n //! [`env::var_os()`] is used to query environment variables; it\n-//! returns an `Option<OsString>`. If the environment variable exists\n-//! you will get a `Some(os_string)`, which you can *then* try to\n+//! returns an [`Option`]`<`[`OsString`]`>`. If the environment variable\n+//! exists you will get a [`Some`]`(os_string)`, which you can *then* try to\n //! convert to a Rust string. This yields a [`Result<>`], so that\n //! your code can detect errors in case the environment variable did\n //! not in fact contain valid Unicode data.\n //!\n //! * [`OsStr`] represents a borrowed reference to a string in a\n //! format that can be passed to the operating system. It can be\n //! converted into an UTF-8 Rust string slice in a similar way to\n-//! `OsString`.\n+//! [`OsString`].\n //!\n //! # Conversions\n //!\n@@ -131,7 +131,7 @@\n //! Additionally, on Windows [`OsString`] implements the\n //! `std::os::windows:ffi::`[`OsStringExt`][windows.OsStringExt]\n //! trait, which provides a [`from_wide`] method. The result of this\n-//! method is an `OsString` which can be round-tripped to a Windows\n+//! method is an [`OsString`] which can be round-tripped to a Windows\n //! string losslessly.\n //!\n //! [`String`]: ../string/struct.String.html\n@@ -160,6 +160,8 @@\n //! [`collect`]: ../iter/trait.Iterator.html#method.collect\n //! [windows.OsStringExt]: ../os/windows/ffi/trait.OsStringExt.html\n //! [`from_wide`]: ../os/windows/ffi/trait.OsStringExt.html#tymethod.from_wide\n+//! [`Option`]: ../option/enum.Option.html\n+//! [`Some`]: ../option/enum.Option.html#variant.Some\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}]}