{"sha": "86cdd1909b9727e0874233a3876a2228c3c4c6e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2Y2RkMTkwOWI5NzI3ZTA4NzQyMzNhMzg3NmEyMjI4YzNjNGM2ZTE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-17T16:49:12Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-17T16:49:12Z"}, "message": "[OPT] Use IndexVec instead of HashMap in ssa analysis", "tree": {"sha": "4a1045f701e609b0d5b4c5118858b77302338d94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a1045f701e609b0d5b4c5118858b77302338d94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86cdd1909b9727e0874233a3876a2228c3c4c6e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86cdd1909b9727e0874233a3876a2228c3c4c6e1", "html_url": "https://github.com/rust-lang/rust/commit/86cdd1909b9727e0874233a3876a2228c3c4c6e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86cdd1909b9727e0874233a3876a2228c3c4c6e1/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "172522c2e7f4e84b0e618241b8c14aa8a8b3c08d", "url": "https://api.github.com/repos/rust-lang/rust/commits/172522c2e7f4e84b0e618241b8c14aa8a8b3c08d", "html_url": "https://github.com/rust-lang/rust/commit/172522c2e7f4e84b0e618241b8c14aa8a8b3c08d"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "44a1d25a31259c30d6f927ae7d79c7493bde5fcd", "filename": "src/abi/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86cdd1909b9727e0874233a3876a2228c3c4c6e1/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86cdd1909b9727e0874233a3876a2228c3c4c6e1/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=86cdd1909b9727e0874233a3876a2228c3c4c6e1", "patch": "@@ -347,7 +347,7 @@ pub fn codegen_fn_prelude(fx: &mut FunctionCx<'_, '_, impl Backend>, start_ebb:\n     for (local, arg_kind, ty) in func_params {\n         let layout = fx.layout_of(ty);\n \n-        let is_ssa = *ssa_analyzed.get(&local).unwrap() == crate::analyze::SsaKind::Ssa;\n+        let is_ssa = ssa_analyzed[local] == crate::analyze::SsaKind::Ssa;\n \n         match arg_kind {\n             ArgKind::Normal(Some(val)) => {\n@@ -401,7 +401,7 @@ pub fn codegen_fn_prelude(fx: &mut FunctionCx<'_, '_, impl Backend>, start_ebb:\n         let ty = fx.monomorphize(&fx.mir.local_decls[local].ty);\n         let layout = fx.layout_of(ty);\n \n-        let is_ssa = *ssa_analyzed.get(&local).unwrap() == crate::analyze::SsaKind::Ssa;\n+        let is_ssa = ssa_analyzed[local] == crate::analyze::SsaKind::Ssa;\n \n         local_place(fx, local, layout, is_ssa);\n     }"}, {"sha": "b2f39bef13c6af081b19c102e6e63cadccfc6022", "filename": "src/abi/returning.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/86cdd1909b9727e0874233a3876a2228c3c4c6e1/src%2Fabi%2Freturning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86cdd1909b9727e0874233a3876a2228c3c4c6e1/src%2Fabi%2Freturning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Freturning.rs?ref=86cdd1909b9727e0874233a3876a2228c3c4c6e1", "patch": "@@ -3,7 +3,7 @@ use crate::prelude::*;\n \n pub fn codegen_return_param(\n     fx: &mut FunctionCx<impl Backend>,\n-    ssa_analyzed: &HashMap<Local, crate::analyze::SsaKind>,\n+    ssa_analyzed: &rustc_index::vec::IndexVec<Local, crate::analyze::SsaKind>,\n     start_ebb: Ebb,\n ) {\n     let ret_layout = fx.return_layout();\n@@ -16,8 +16,7 @@ pub fn codegen_return_param(\n             Empty\n         }\n         PassMode::ByVal(_) | PassMode::ByValPair(_, _) => {\n-            let is_ssa =\n-                *ssa_analyzed.get(&RETURN_PLACE).unwrap() == crate::analyze::SsaKind::Ssa;\n+            let is_ssa = ssa_analyzed[RETURN_PLACE] == crate::analyze::SsaKind::Ssa;\n \n             super::local_place(fx, RETURN_PLACE, ret_layout, is_ssa);\n "}, {"sha": "4d7d637eaa8e564e9dd2d141f0e205a08728bf7f", "filename": "src/analyze.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/86cdd1909b9727e0874233a3876a2228c3c4c6e1/src%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86cdd1909b9727e0874233a3876a2228c3c4c6e1/src%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fanalyze.rs?ref=86cdd1909b9727e0874233a3876a2228c3c4c6e1", "patch": "@@ -1,23 +1,22 @@\n use crate::prelude::*;\n \n use rustc::mir::StatementKind::*;\n+use rustc_index::vec::IndexVec;\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub enum SsaKind {\n     NotSsa,\n     Ssa,\n }\n \n-pub fn analyze(fx: &FunctionCx<'_, '_, impl Backend>) -> HashMap<Local, SsaKind> {\n-    let mut flag_map = HashMap::new();\n-\n-    for (local, local_decl) in fx.mir.local_decls.iter_enumerated() {\n+pub fn analyze(fx: &FunctionCx<'_, '_, impl Backend>) -> IndexVec<Local, SsaKind> {\n+    let mut flag_map = fx.mir.local_decls.iter().map(|local_decl| {\n         if fx.clif_type(local_decl.ty).is_some() {\n-            flag_map.insert(local, SsaKind::Ssa);\n+            SsaKind::Ssa\n         } else {\n-            flag_map.insert(local, SsaKind::NotSsa);\n+            SsaKind::NotSsa\n         }\n-    }\n+    }).collect::<IndexVec<Local, SsaKind>>();\n \n     for bb in fx.mir.basic_blocks().iter() {\n         for stmt in bb.statements.iter() {\n@@ -44,13 +43,13 @@ pub fn analyze(fx: &FunctionCx<'_, '_, impl Backend>) -> HashMap<Local, SsaKind>\n     flag_map\n }\n \n-fn analyze_non_ssa_place(flag_map: &mut HashMap<Local, SsaKind>, place: &Place) {\n+fn analyze_non_ssa_place(flag_map: &mut IndexVec<Local, SsaKind>, place: &Place) {\n     match place.base {\n         PlaceBase::Local(local) => not_ssa(flag_map, local),\n         _ => {}\n     }\n }\n \n-fn not_ssa<L: ::std::borrow::Borrow<Local>>(flag_map: &mut HashMap<Local, SsaKind>, local: L) {\n-    *flag_map.get_mut(local.borrow()).unwrap() = SsaKind::NotSsa;\n+fn not_ssa(flag_map: &mut IndexVec<Local, SsaKind>, local: Local) {\n+    flag_map[local] = SsaKind::NotSsa;\n }"}]}