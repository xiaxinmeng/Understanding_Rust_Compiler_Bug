{"sha": "c9f55ea689e7e582cd146dc1b06850843530a8af", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZjU1ZWE2ODllN2U1ODJjZDE0NmRjMWIwNjg1MDg0MzUzMGE4YWY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-05T23:34:16Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-06T00:03:15Z"}, "message": "review comments: use `partition_map`", "tree": {"sha": "3ec72c46ac443602ff419667d511adb2041a7a85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ec72c46ac443602ff419667d511adb2041a7a85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9f55ea689e7e582cd146dc1b06850843530a8af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9f55ea689e7e582cd146dc1b06850843530a8af", "html_url": "https://github.com/rust-lang/rust/commit/c9f55ea689e7e582cd146dc1b06850843530a8af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9f55ea689e7e582cd146dc1b06850843530a8af/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e84cb65fe1f883a017b91fcb1eda64215fd08626", "url": "https://api.github.com/repos/rust-lang/rust/commits/e84cb65fe1f883a017b91fcb1eda64215fd08626", "html_url": "https://github.com/rust-lang/rust/commit/e84cb65fe1f883a017b91fcb1eda64215fd08626"}], "stats": {"total": 35, "additions": 14, "deletions": 21}, "files": [{"sha": "14c2630180785f731db426e513143aa126553587", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9f55ea689e7e582cd146dc1b06850843530a8af/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c9f55ea689e7e582cd146dc1b06850843530a8af/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c9f55ea689e7e582cd146dc1b06850843530a8af", "patch": "@@ -3537,6 +3537,7 @@ dependencies = [\n name = \"rustc_ast_passes\"\n version = \"0.0.0\"\n dependencies = [\n+ \"itertools 0.8.0\",\n  \"log\",\n  \"rustc_ast\",\n  \"rustc_ast_pretty\","}, {"sha": "e4d1d79abb2d6aecaa7834c1b19850db4417226e", "filename": "src/librustc_ast_passes/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9f55ea689e7e582cd146dc1b06850843530a8af/src%2Flibrustc_ast_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c9f55ea689e7e582cd146dc1b06850843530a8af/src%2Flibrustc_ast_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2FCargo.toml?ref=c9f55ea689e7e582cd146dc1b06850843530a8af", "patch": "@@ -9,6 +9,7 @@ name = \"rustc_ast_passes\"\n path = \"lib.rs\"\n \n [dependencies]\n+itertools = \"0.8\"\n log = \"0.4\"\n rustc_ast_pretty = { path = \"../librustc_ast_pretty\" }\n rustc_attr = { path = \"../librustc_attr\" }"}, {"sha": "82ba52a3f14666c405a1eca7c925f3cc1fe3892f", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c9f55ea689e7e582cd146dc1b06850843530a8af/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f55ea689e7e582cd146dc1b06850843530a8af/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=c9f55ea689e7e582cd146dc1b06850843530a8af", "patch": "@@ -6,6 +6,7 @@\n // This pass is supposed to perform only simple checks not requiring name resolution\n // or type checking or some other kind of complex analysis.\n \n+use itertools::{Either, Itertools};\n use rustc_ast::ast::*;\n use rustc_ast::attr;\n use rustc_ast::expand::is_proc_macro_attr;\n@@ -640,7 +641,7 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    fn suggest_correct_generic_order(&self, data: &AngleBracketedArgs) -> String {\n+    fn correct_generic_order_suggestion(&self, data: &AngleBracketedArgs) -> String {\n         // Lifetimes always come first.\n         let lt_sugg = data.args.iter().filter_map(|arg| match arg {\n             AngleBracketedArg::Arg(lt @ GenericArg::Lifetime(_)) => {\n@@ -649,11 +650,12 @@ impl<'a> AstValidator<'a> {\n             _ => None,\n         });\n         let args_sugg = data.args.iter().filter_map(|a| match a {\n-            AngleBracketedArg::Arg(GenericArg::Lifetime(_)) => None,\n+            AngleBracketedArg::Arg(GenericArg::Lifetime(_)) | AngleBracketedArg::Constraint(_) => {\n+                None\n+            }\n             AngleBracketedArg::Arg(arg) => Some(pprust::to_string(|s| s.print_generic_arg(arg))),\n-            AngleBracketedArg::Constraint(_) => None,\n         });\n-        // Cosntraints always come last.\n+        // Constraints always come last.\n         let constraint_sugg = data.args.iter().filter_map(|a| match a {\n             AngleBracketedArg::Arg(_) => None,\n             AngleBracketedArg::Constraint(c) => {\n@@ -673,22 +675,11 @@ impl<'a> AstValidator<'a> {\n             return;\n         }\n         // Find all generic argument coming after the first constraint...\n-        let constraint_spans = data\n-            .args\n-            .iter()\n-            .filter_map(|arg| match arg {\n-                AngleBracketedArg::Constraint(c) => Some(c.span),\n-                _ => None,\n-            })\n-            .collect::<Vec<_>>();\n-        let arg_spans = data\n-            .args\n-            .iter()\n-            .filter_map(|arg| match arg {\n-                AngleBracketedArg::Arg(a) => Some(a.span()),\n-                _ => None,\n-            })\n-            .collect::<Vec<_>>();\n+        let (constraint_spans, arg_spans): (Vec<Span>, Vec<Span>) =\n+            data.args.iter().partition_map(|arg| match arg {\n+                AngleBracketedArg::Constraint(c) => Either::Left(c.span),\n+                AngleBracketedArg::Arg(a) => Either::Right(a.span()),\n+            });\n         let args_len = arg_spans.len();\n         let constraint_len = constraint_spans.len();\n         // ...and then error:\n@@ -706,7 +697,7 @@ impl<'a> AstValidator<'a> {\n                     pluralize!(constraint_len),\n                     pluralize!(args_len)\n                 ),\n-                self.suggest_correct_generic_order(&data),\n+                self.correct_generic_order_suggestion(&data),\n                 Applicability::MachineApplicable,\n             )\n             .emit();"}]}