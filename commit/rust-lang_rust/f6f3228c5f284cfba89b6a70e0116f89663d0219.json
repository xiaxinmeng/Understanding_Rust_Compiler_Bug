{"sha": "f6f3228c5f284cfba89b6a70e0116f89663d0219", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ZjMyMjhjNWYyODRjZmJhODliNmE3MGUwMTE2Zjg5NjYzZDAyMTk=", "commit": {"author": {"name": "Emerentius", "email": "emerentius@arcor.de", "date": "2018-09-05T13:00:17Z"}, "committer": {"name": "Emerentius", "email": "emerentius@arcor.de", "date": "2018-09-05T16:36:20Z"}, "message": "rename option to run all tests and make it unstable\n\nnew name: --include-ignored\nrequires -Zunstable-options", "tree": {"sha": "487b27318a0a3296ae9bcec904b47f33a80dbd98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/487b27318a0a3296ae9bcec904b47f33a80dbd98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6f3228c5f284cfba89b6a70e0116f89663d0219", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6f3228c5f284cfba89b6a70e0116f89663d0219", "html_url": "https://github.com/rust-lang/rust/commit/f6f3228c5f284cfba89b6a70e0116f89663d0219", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6f3228c5f284cfba89b6a70e0116f89663d0219/comments", "author": {"login": "Emerentius", "id": 9992929, "node_id": "MDQ6VXNlcjk5OTI5Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/9992929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Emerentius", "html_url": "https://github.com/Emerentius", "followers_url": "https://api.github.com/users/Emerentius/followers", "following_url": "https://api.github.com/users/Emerentius/following{/other_user}", "gists_url": "https://api.github.com/users/Emerentius/gists{/gist_id}", "starred_url": "https://api.github.com/users/Emerentius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Emerentius/subscriptions", "organizations_url": "https://api.github.com/users/Emerentius/orgs", "repos_url": "https://api.github.com/users/Emerentius/repos", "events_url": "https://api.github.com/users/Emerentius/events{/privacy}", "received_events_url": "https://api.github.com/users/Emerentius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Emerentius", "id": 9992929, "node_id": "MDQ6VXNlcjk5OTI5Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/9992929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Emerentius", "html_url": "https://github.com/Emerentius", "followers_url": "https://api.github.com/users/Emerentius/followers", "following_url": "https://api.github.com/users/Emerentius/following{/other_user}", "gists_url": "https://api.github.com/users/Emerentius/gists{/gist_id}", "starred_url": "https://api.github.com/users/Emerentius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Emerentius/subscriptions", "organizations_url": "https://api.github.com/users/Emerentius/orgs", "repos_url": "https://api.github.com/users/Emerentius/repos", "events_url": "https://api.github.com/users/Emerentius/events{/privacy}", "received_events_url": "https://api.github.com/users/Emerentius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9adf26a5d09fcdbc423c2134fc0ef20dc3375f2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9adf26a5d09fcdbc423c2134fc0ef20dc3375f2e", "html_url": "https://github.com/rust-lang/rust/commit/9adf26a5d09fcdbc423c2134fc0ef20dc3375f2e"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "b18a7f4de31ee9508e00d63dbdead0fb8252a63b", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f6f3228c5f284cfba89b6a70e0116f89663d0219/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6f3228c5f284cfba89b6a70e0116f89663d0219/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=f6f3228c5f284cfba89b6a70e0116f89663d0219", "patch": "@@ -398,7 +398,7 @@ pub type OptRes = Result<TestOpts, String>;\n \n fn optgroups() -> getopts::Options {\n     let mut opts = getopts::Options::new();\n-    opts.optflag(\"\", \"all\", \"Run ignored and not ignored tests\")\n+    opts.optflag(\"\", \"include-ignored\", \"Run ignored and not ignored tests\")\n         .optflag(\"\", \"ignored\", \"Run only ignored tests\")\n         .optflag(\"\", \"test\", \"Run tests and not benchmarks\")\n         .optflag(\"\", \"bench\", \"Run benchmarks instead of tests\")\n@@ -498,7 +498,7 @@ Test Attributes:\n                      contain: #[should_panic(expected = \"foo\")].\n     #[ignore]      - When applied to a function which is already attributed as a\n                      test, then the test runner will ignore these tests during\n-                     normal test runs. Running with --ignored or --all will run\n+                     normal test runs. Running with --ignored or --include-ignored will run\n                      these tests.\"#,\n         usage = options.usage(&message)\n     );\n@@ -552,9 +552,16 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n         None\n     };\n \n-    let run_ignored = match (matches.opt_present(\"all\"), matches.opt_present(\"ignored\")) {\n+    let include_ignored = matches.opt_present(\"include-ignored\");\n+    if !allow_unstable && include_ignored {\n+        return Some(Err(\n+            \"The \\\"include-ignored\\\" flag is only accepted on the nightly compiler\".into()\n+        ));\n+    }\n+\n+    let run_ignored = match (include_ignored, matches.opt_present(\"ignored\")) {\n         (true, true) => return Some(Err(\n-            \"the options --all and --ignored are mutually exclusive\".into()\n+            \"the options --include-ignored and --ignored are mutually exclusive\".into()\n         )),\n         (true, false) => RunIgnored::Yes,\n         (false, true) => RunIgnored::Only,\n@@ -1890,11 +1897,12 @@ mod tests {\n     }\n \n     #[test]\n-    fn parse_all_flag() {\n+    fn parse_include_ignored_flag() {\n         let args = vec![\n             \"progname\".to_string(),\n             \"filter\".to_string(),\n-            \"--all\".to_string(),\n+            \"-Zunstable-options\".to_string(),\n+            \"--include-ignored\".to_string(),\n         ];\n         let opts = parse_opts(&args).unwrap().unwrap();\n         assert_eq!(opts.run_ignored, RunIgnored::Yes);\n@@ -1918,8 +1926,8 @@ mod tests {\n     }\n \n     #[test]\n-    pub fn run_all_option() {\n-        // When we run \"--all\" tests, the ignore flag should be set to false on\n+    pub fn run_include_ignored_option() {\n+        // When we \"--include-ignored\" tests, the ignore flag should be set to false on\n         // all tests and no test filtered out\n \n         let mut opts = TestOpts::new();\n@@ -2041,9 +2049,9 @@ mod tests {\n             \"test::ignored_tests_result_in_ignored\".to_string(),\n             \"test::first_free_arg_should_be_a_filter\".to_string(),\n             \"test::parse_ignored_flag\".to_string(),\n-            \"test::parse_all_flag\".to_string(),\n+            \"test::parse_include_ignored_flag\".to_string(),\n             \"test::filter_for_ignored_option\".to_string(),\n-            \"test::run_all_option\".to_string(),\n+            \"test::run_include_ignored_option\".to_string(),\n             \"test::sort_tests\".to_string(),\n         ];\n         let tests = {\n@@ -2073,9 +2081,9 @@ mod tests {\n             \"test::filter_for_ignored_option\".to_string(),\n             \"test::first_free_arg_should_be_a_filter\".to_string(),\n             \"test::ignored_tests_result_in_ignored\".to_string(),\n-            \"test::parse_all_flag\".to_string(),\n             \"test::parse_ignored_flag\".to_string(),\n-            \"test::run_all_option\".to_string(),\n+            \"test::parse_include_ignored_flag\".to_string(),\n+            \"test::run_include_ignored_option\".to_string(),\n             \"test::sort_tests\".to_string(),\n         ];\n "}]}