{"sha": "127a7d643d70dea605ca479c12a32f450d985b09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyN2E3ZDY0M2Q3MGRlYTYwNWNhNDc5YzEyYTMyZjQ1MGQ5ODViMDk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-03-24T15:51:02Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-03-30T11:56:58Z"}, "message": "rename `only_has_type_or_fresh_var` to `coercion_target_type`", "tree": {"sha": "31fab63fab774f163f61cfa453f3f021d12e097b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31fab63fab774f163f61cfa453f3f021d12e097b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/127a7d643d70dea605ca479c12a32f450d985b09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/127a7d643d70dea605ca479c12a32f450d985b09", "html_url": "https://github.com/rust-lang/rust/commit/127a7d643d70dea605ca479c12a32f450d985b09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/127a7d643d70dea605ca479c12a32f450d985b09/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d448329849bb2cef355cabfdc6cb4d8b5b76b80e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d448329849bb2cef355cabfdc6cb4d8b5b76b80e", "html_url": "https://github.com/rust-lang/rust/commit/d448329849bb2cef355cabfdc6cb4d8b5b76b80e"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "0a2cb94c591d747958f24e580e4c7981a72f0e96", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/127a7d643d70dea605ca479c12a32f450d985b09/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127a7d643d70dea605ca479c12a32f450d985b09/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=127a7d643d70dea605ca479c12a32f450d985b09", "patch": "@@ -314,7 +314,7 @@ impl<'a, 'gcx, 'tcx> Expectation<'tcx> {\n \n     /// Like `only_has_type`, but instead of returning `None` if no\n     /// hard constraint exists, creates a fresh type variable.\n-    fn only_has_type_or_fresh_var(self, fcx: &FnCtxt<'a, 'gcx, 'tcx>, span: Span) -> Ty<'tcx> {\n+    fn coercion_target_type(self, fcx: &FnCtxt<'a, 'gcx, 'tcx>, span: Span) -> Ty<'tcx> {\n         self.only_has_type(fcx)\n             .unwrap_or_else(|| fcx.next_ty_var(TypeVariableOrigin::MiscVariable(span)))\n     }\n@@ -2862,7 +2862,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // `expected` if it represents a *hard* constraint\n         // (`only_has_type`); otherwise, we just go with a\n         // fresh type variable.\n-        let coerce_to_ty = expected.only_has_type_or_fresh_var(self, sp);\n+        let coerce_to_ty = expected.coercion_target_type(self, sp);\n         let mut coerce: DynamicCoerceMany = CoerceMany::new(coerce_to_ty);\n \n         let if_cause = self.cause(sp, ObligationCauseCode::IfExpression);\n@@ -3683,7 +3683,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n               let coerce = match source {\n                   // you can only use break with a value from a normal `loop { }`\n                   hir::LoopSource::Loop => {\n-                      let coerce_to = expected.only_has_type_or_fresh_var(self, body.span);\n+                      let coerce_to = expected.coercion_target_type(self, body.span);\n                       Some(CoerceMany::new(coerce_to))\n                   }\n "}]}