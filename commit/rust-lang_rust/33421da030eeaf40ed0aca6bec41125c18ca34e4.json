{"sha": "33421da030eeaf40ed0aca6bec41125c18ca34e4", "node_id": "C_kwDOAAsO6NoAKDMzNDIxZGEwMzBlZWFmNDBlZDBhY2E2YmVjNDExMjVjMThjYTM0ZTQ", "commit": {"author": {"name": "Trevor Spiteri", "email": "tspiteri@ieee.org", "date": "2022-09-27T15:31:31Z"}, "committer": {"name": "Trevor Spiteri", "email": "tspiteri@ieee.org", "date": "2022-09-27T15:31:31Z"}, "message": "doc: rewrite doc for uint::{carrying_add,borrowing_sub}", "tree": {"sha": "953ad513b20bb95f160b1b40164ccda31e738f59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/953ad513b20bb95f160b1b40164ccda31e738f59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33421da030eeaf40ed0aca6bec41125c18ca34e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33421da030eeaf40ed0aca6bec41125c18ca34e4", "html_url": "https://github.com/rust-lang/rust/commit/33421da030eeaf40ed0aca6bec41125c18ca34e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33421da030eeaf40ed0aca6bec41125c18ca34e4/comments", "author": {"login": "tspiteri", "id": 18604588, "node_id": "MDQ6VXNlcjE4NjA0NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/18604588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tspiteri", "html_url": "https://github.com/tspiteri", "followers_url": "https://api.github.com/users/tspiteri/followers", "following_url": "https://api.github.com/users/tspiteri/following{/other_user}", "gists_url": "https://api.github.com/users/tspiteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tspiteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tspiteri/subscriptions", "organizations_url": "https://api.github.com/users/tspiteri/orgs", "repos_url": "https://api.github.com/users/tspiteri/repos", "events_url": "https://api.github.com/users/tspiteri/events{/privacy}", "received_events_url": "https://api.github.com/users/tspiteri/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tspiteri", "id": 18604588, "node_id": "MDQ6VXNlcjE4NjA0NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/18604588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tspiteri", "html_url": "https://github.com/tspiteri", "followers_url": "https://api.github.com/users/tspiteri/followers", "following_url": "https://api.github.com/users/tspiteri/following{/other_user}", "gists_url": "https://api.github.com/users/tspiteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tspiteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tspiteri/subscriptions", "organizations_url": "https://api.github.com/users/tspiteri/orgs", "repos_url": "https://api.github.com/users/tspiteri/repos", "events_url": "https://api.github.com/users/tspiteri/events{/privacy}", "received_events_url": "https://api.github.com/users/tspiteri/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ee5a1ac19133ecce34665c90257d4133e260fdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ee5a1ac19133ecce34665c90257d4133e260fdc", "html_url": "https://github.com/rust-lang/rust/commit/0ee5a1ac19133ecce34665c90257d4133e260fdc"}], "stats": {"total": 80, "additions": 49, "deletions": 31}, "files": [{"sha": "337d6bdaeab1b3a8b25b7b2ea08ed85c7d01e673", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 49, "deletions": 31, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/33421da030eeaf40ed0aca6bec41125c18ca34e4/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33421da030eeaf40ed0aca6bec41125c18ca34e4/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=33421da030eeaf40ed0aca6bec41125c18ca34e4", "patch": "@@ -1508,37 +1508,42 @@ macro_rules! uint_impl {\n             (a as Self, b)\n         }\n \n-        /// Calculates `self + rhs + carry` without the ability to overflow.\n+        /// Calculates `self` + `rhs` + `carry` and returns a tuple containing\n+        /// the sum and the output carry.\n         ///\n-        /// Performs \"ternary addition\" which takes in an extra bit to add, and may return an\n-        /// additional bit of overflow. This allows for chaining together multiple additions\n-        /// to create \"big integers\" which represent larger values.\n+        /// Performs \"ternary addition\" of two integer operands and a carry-in\n+        /// bit, and returns an output integer and a carry-out bit. This allows\n+        /// chaining together multiple additions to create a wider addition, and\n+        /// can be useful for bignum addition.\n         ///\n         #[doc = concat!(\"This can be thought of as a \", stringify!($BITS), \"-bit \\\"full adder\\\", in the electronics sense.\")]\n         ///\n-        /// # Examples\n+        /// If the input carry is false, this method is equivalent to\n+        /// [`overflowing_add`](Self::overflowing_add), and the output carry is\n+        /// equal to the overflow flag. Note that although carry and overflow\n+        /// flags are similar for unsigned integers, they are different for\n+        /// signed integers.\n         ///\n-        /// Basic usage\n+        /// # Examples\n         ///\n         /// ```\n         /// #![feature(bigint_helper_methods)]\n-        #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".carrying_add(2, false), (7, false));\")]\n-        #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".carrying_add(2, true), (8, false));\")]\n-        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.carrying_add(1, false), (0, true));\")]\n-        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.carrying_add(0, true), (0, true));\")]\n-        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.carrying_add(1, true), (1, true));\")]\n-        #[doc = concat!(\"assert_eq!(\",\n-            stringify!($SelfT), \"::MAX.carrying_add(\", stringify!($SelfT), \"::MAX, true), \",\n-            \"(\", stringify!($SelfT), \"::MAX, true));\"\n-        )]\n-        /// ```\n         ///\n-        /// If `carry` is false, this method is equivalent to [`overflowing_add`](Self::overflowing_add):\n+        #[doc = concat!(\"//    3  MAX    (a = 3 \u00d7 2^\", stringify!($BITS), \" + 2^\", stringify!($BITS), \" - 1)\")]\n+        #[doc = concat!(\"// +  5    7    (b = 5 \u00d7 2^\", stringify!($BITS), \" + 7)\")]\n+        /// // ---------\n+        #[doc = concat!(\"//    9    6    (sum = 9 \u00d7 2^\", stringify!($BITS), \" + 6)\")]\n         ///\n-        /// ```\n-        /// #![feature(bigint_helper_methods)]\n-        #[doc = concat!(\"assert_eq!(5_\", stringify!($SelfT), \".carrying_add(2, false), 5_\", stringify!($SelfT), \".overflowing_add(2));\")]\n-        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.carrying_add(1, false), \", stringify!($SelfT), \"::MAX.overflowing_add(1));\")]\n+        #[doc = concat!(\"let (a1, a0): (\", stringify!($SelfT), \", \", stringify!($SelfT), \") = (3, \", stringify!($SelfT), \"::MAX);\")]\n+        #[doc = concat!(\"let (b1, b0): (\", stringify!($SelfT), \", \", stringify!($SelfT), \") = (5, 7);\")]\n+        /// let carry0 = false;\n+        ///\n+        /// let (sum0, carry1) = a0.carrying_add(b0, carry0);\n+        /// assert_eq!(carry1, true);\n+        /// let (sum1, carry2) = a1.carrying_add(b1, carry1);\n+        /// assert_eq!(carry2, false);\n+        ///\n+        /// assert_eq!((sum1, sum0), (9, 6));\n         /// ```\n         #[unstable(feature = \"bigint_helper_methods\", issue = \"85532\")]\n         #[rustc_const_unstable(feature = \"const_bigint_helper_methods\", issue = \"85532\")]\n@@ -1604,22 +1609,35 @@ macro_rules! uint_impl {\n             (a as Self, b)\n         }\n \n-        /// Calculates `self - rhs - borrow` without the ability to overflow.\n+        /// Calculates `self` &minus; `rhs` &minus; `borrow` and returns a tuple\n+        /// containing the difference and the output borrow.\n         ///\n-        /// Performs \"ternary subtraction\" which takes in an extra bit to subtract, and may return\n-        /// an additional bit of overflow. This allows for chaining together multiple subtractions\n-        /// to create \"big integers\" which represent larger values.\n+        /// Performs \"ternary subtraction\" by subtracting both an integer\n+        /// operand and a borrow-in bit from `self`, and returns an output\n+        /// integer and a borrow-out bit. This allows chaining together multiple\n+        /// subtractions to create a wider subtraction, and can be useful for\n+        /// bignum subtraction.\n         ///\n         /// # Examples\n         ///\n-        /// Basic usage\n-        ///\n         /// ```\n         /// #![feature(bigint_helper_methods)]\n-        #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".borrowing_sub(2, false), (3, false));\")]\n-        #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".borrowing_sub(2, true), (2, false));\")]\n-        #[doc = concat!(\"assert_eq!(0\", stringify!($SelfT), \".borrowing_sub(1, false), (\", stringify!($SelfT), \"::MAX, true));\")]\n-        #[doc = concat!(\"assert_eq!(0\", stringify!($SelfT), \".borrowing_sub(1, true), (\", stringify!($SelfT), \"::MAX - 1, true));\")]\n+        ///\n+        #[doc = concat!(\"//    9    6    (a = 9 \u00d7 2^\", stringify!($BITS), \" + 6)\")]\n+        #[doc = concat!(\"// -  5    7    (b = 5 \u00d7 2^\", stringify!($BITS), \" + 7)\")]\n+        /// // ---------\n+        #[doc = concat!(\"//    3  MAX    (diff = 3 \u00d7 2^\", stringify!($BITS), \" + 2^\", stringify!($BITS), \" - 1)\")]\n+        ///\n+        #[doc = concat!(\"let (a1, a0): (\", stringify!($SelfT), \", \", stringify!($SelfT), \") = (9, 6);\")]\n+        #[doc = concat!(\"let (b1, b0): (\", stringify!($SelfT), \", \", stringify!($SelfT), \") = (5, 7);\")]\n+        /// let borrow0 = false;\n+        ///\n+        /// let (diff0, borrow1) = a0.borrowing_sub(b0, borrow0);\n+        /// assert_eq!(borrow1, true);\n+        /// let (diff1, borrow2) = a1.borrowing_sub(b1, borrow1);\n+        /// assert_eq!(borrow2, false);\n+        ///\n+        #[doc = concat!(\"assert_eq!((diff1, diff0), (3, \", stringify!($SelfT), \"::MAX));\")]\n         /// ```\n         #[unstable(feature = \"bigint_helper_methods\", issue = \"85532\")]\n         #[rustc_const_unstable(feature = \"const_bigint_helper_methods\", issue = \"85532\")]"}]}