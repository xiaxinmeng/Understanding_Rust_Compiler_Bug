{"sha": "340955b3a55c0707e72d64b2ce4cdcf21529fafb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MDk1NWIzYTU1YzA3MDdlNzJkNjRiMmNlNGNkY2YyMTUyOWZhZmI=", "commit": {"author": {"name": "Jesse Jones", "email": "jesse9jones@gmail.com", "date": "2012-11-18T03:43:39Z"}, "committer": {"name": "Jesse Jones", "email": "jesse9jones@gmail.com", "date": "2012-11-18T03:43:39Z"}, "message": "Added support for options that take no arguments and may be repeated.\n\nCloses #3568.", "tree": {"sha": "7db80b5cbe8b5a419e023ce12bd97d42e29bbc02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7db80b5cbe8b5a419e023ce12bd97d42e29bbc02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/340955b3a55c0707e72d64b2ce4cdcf21529fafb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/340955b3a55c0707e72d64b2ce4cdcf21529fafb", "html_url": "https://github.com/rust-lang/rust/commit/340955b3a55c0707e72d64b2ce4cdcf21529fafb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/340955b3a55c0707e72d64b2ce4cdcf21529fafb/comments", "author": {"login": "jesse99", "id": 425055, "node_id": "MDQ6VXNlcjQyNTA1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/425055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jesse99", "html_url": "https://github.com/jesse99", "followers_url": "https://api.github.com/users/jesse99/followers", "following_url": "https://api.github.com/users/jesse99/following{/other_user}", "gists_url": "https://api.github.com/users/jesse99/gists{/gist_id}", "starred_url": "https://api.github.com/users/jesse99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jesse99/subscriptions", "organizations_url": "https://api.github.com/users/jesse99/orgs", "repos_url": "https://api.github.com/users/jesse99/repos", "events_url": "https://api.github.com/users/jesse99/events{/privacy}", "received_events_url": "https://api.github.com/users/jesse99/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jesse99", "id": 425055, "node_id": "MDQ6VXNlcjQyNTA1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/425055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jesse99", "html_url": "https://github.com/jesse99", "followers_url": "https://api.github.com/users/jesse99/followers", "following_url": "https://api.github.com/users/jesse99/following{/other_user}", "gists_url": "https://api.github.com/users/jesse99/gists{/gist_id}", "starred_url": "https://api.github.com/users/jesse99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jesse99/subscriptions", "organizations_url": "https://api.github.com/users/jesse99/orgs", "repos_url": "https://api.github.com/users/jesse99/repos", "events_url": "https://api.github.com/users/jesse99/events{/privacy}", "received_events_url": "https://api.github.com/users/jesse99/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "428c58b9f983d31f9c7df2d48d45f6a22996692e", "url": "https://api.github.com/repos/rust-lang/rust/commits/428c58b9f983d31f9c7df2d48d45f6a22996692e", "html_url": "https://github.com/rust-lang/rust/commit/428c58b9f983d31f9c7df2d48d45f6a22996692e"}], "stats": {"total": 75, "additions": 75, "deletions": 0}, "files": [{"sha": "b7d6dc697762fbbc56090edbcec4d9dfc84a1ffc", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/340955b3a55c0707e72d64b2ce4cdcf21529fafb/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/340955b3a55c0707e72d64b2ce4cdcf21529fafb/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=340955b3a55c0707e72d64b2ce4cdcf21529fafb", "patch": "@@ -145,6 +145,11 @@ pub fn optflag(name: &str) -> Opt {\n     return {name: mkname(name), hasarg: No, occur: Optional};\n }\n \n+/// Create an option that is optional and does not take an argument\n+pub fn optflagmulti(name: &str) -> Opt {\n+    return {name: mkname(name), hasarg: No, occur: Multi};\n+}\n+\n /// Create an option that is optional and takes an optional argument\n pub fn optflagopt(name: &str) -> Opt {\n     return {name: mkname(name), hasarg: Maybe, occur: Optional};\n@@ -417,6 +422,11 @@ pub fn opt_present(mm: Matches, nm: &str) -> bool {\n     return vec::len::<Optval>(opt_vals(mm, nm)) > 0u;\n }\n \n+/// Returns the number of times an option was matched\n+pub fn opt_count(mm: Matches, nm: &str) -> uint {\n+    return vec::len::<Optval>(opt_vals(mm, nm));\n+}\n+\n /// Returns true if any of several options were matched\n pub fn opts_present(mm: Matches, names: &[~str]) -> bool {\n     for vec::each(names) |nm| {\n@@ -1003,6 +1013,71 @@ mod tests {\n         }\n     }\n \n+    // Tests for optflagmulti\n+    #[test]\n+    fn test_optflagmulti_short1() {\n+        let args = ~[~\"-v\"];\n+        let opts = ~[optflagmulti(~\"v\")];\n+        let rs = getopts(args, opts);\n+        match rs {\n+          Ok(copy m) => {\n+            assert (opt_count(m, ~\"v\") == 1);\n+          }\n+          _ => fail\n+        }\n+    }\n+\n+    #[test]\n+    fn test_optflagmulti_short2a() { \n+        let args = ~[~\"-v\", ~\"-v\"];\n+        let opts = ~[optflagmulti(~\"v\")];\n+        let rs = getopts(args, opts);\n+        match rs {\n+          Ok(copy m) => {\n+            assert (opt_count(m, ~\"v\") == 2);\n+          }\n+          _ => fail\n+        }\n+    }\n+\n+    #[test]\n+    fn test_optflagmulti_short2b() {\n+        let args = ~[~\"-vv\"];\n+        let opts = ~[optflagmulti(~\"v\")];\n+        let rs = getopts(args, opts);\n+        match rs {\n+          Ok(copy m) => {\n+            assert (opt_count(m, ~\"v\") == 2);\n+          }\n+          _ => fail\n+        }\n+    }\n+\n+    #[test]\n+    fn test_optflagmulti_long1() {\n+        let args = ~[~\"--verbose\"];\n+        let opts = ~[optflagmulti(~\"verbose\")];\n+        let rs = getopts(args, opts);\n+        match rs {\n+          Ok(copy m) => {\n+            assert (opt_count(m, ~\"verbose\") == 1);\n+          }\n+          _ => fail\n+        }\n+    }\n+\n+    #[test]\n+    fn test_optflagmulti_long2() {\n+        let args = ~[~\"--verbose\", ~\"--verbose\"];\n+        let opts = ~[optflagmulti(~\"verbose\")];\n+        let rs = getopts(args, opts);\n+        match rs {\n+          Ok(copy m) => {\n+            assert (opt_count(m, ~\"verbose\") == 2);\n+          }\n+          _ => fail\n+        }\n+    }\n \n     // Tests for optmulti\n     #[test]"}]}