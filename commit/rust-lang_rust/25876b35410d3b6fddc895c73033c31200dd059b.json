{"sha": "25876b35410d3b6fddc895c73033c31200dd059b", "node_id": "C_kwDOAAsO6NoAKDI1ODc2YjM1NDEwZDNiNmZkZGM4OTVjNzMwMzNjMzEyMDBkZDA1OWI", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-04-07T13:39:38Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-04-07T13:39:52Z"}, "message": "Report opaque type mismatches directly during borrowck of the function instead of within the `type_of` query.\n\nThis allows us to only store a single hidden type per opaque type instead of having to store one per set of substitutions.", "tree": {"sha": "c6d7a0151e866d028466b51ac2878a1b2188e77d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6d7a0151e866d028466b51ac2878a1b2188e77d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25876b35410d3b6fddc895c73033c31200dd059b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25876b35410d3b6fddc895c73033c31200dd059b", "html_url": "https://github.com/rust-lang/rust/commit/25876b35410d3b6fddc895c73033c31200dd059b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25876b35410d3b6fddc895c73033c31200dd059b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed6c958ee4bf081deec951996ace9c508360c1d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed6c958ee4bf081deec951996ace9c508360c1d9", "html_url": "https://github.com/rust-lang/rust/commit/ed6c958ee4bf081deec951996ace9c508360c1d9"}], "stats": {"total": 49, "additions": 30, "deletions": 19}, "files": [{"sha": "927eb080b2008a687cbcc15143c694b2e0d78b57", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/25876b35410d3b6fddc895c73033c31200dd059b/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25876b35410d3b6fddc895c73033c31200dd059b/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=25876b35410d3b6fddc895c73033c31200dd059b", "patch": "@@ -1,14 +1,15 @@\n //! The entry point of the NLL borrow checker.\n \n use rustc_data_structures::vec_map::VecMap;\n+use rustc_hir::def_id::DefId;\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::mir::{create_dump_file, dump_enabled, dump_mir, PassWhere};\n use rustc_middle::mir::{\n     BasicBlock, Body, ClosureOutlivesSubject, ClosureRegionRequirements, LocalKind, Location,\n     Promoted,\n };\n-use rustc_middle::ty::{self, OpaqueHiddenType, OpaqueTypeKey, Region, RegionVid};\n+use rustc_middle::ty::{self, OpaqueHiddenType, Region, RegionVid};\n use rustc_span::symbol::sym;\n use std::env;\n use std::fmt::Debug;\n@@ -43,7 +44,7 @@ pub type PoloniusOutput = Output<RustcFacts>;\n /// closure requirements to propagate, and any generated errors.\n crate struct NllOutput<'tcx> {\n     pub regioncx: RegionInferenceContext<'tcx>,\n-    pub opaque_type_values: VecMap<OpaqueTypeKey<'tcx>, OpaqueHiddenType<'tcx>>,\n+    pub opaque_type_values: VecMap<DefId, OpaqueHiddenType<'tcx>>,\n     pub polonius_input: Option<Box<AllFacts>>,\n     pub polonius_output: Option<Rc<PoloniusOutput>>,\n     pub opt_closure_req: Option<ClosureRegionRequirements<'tcx>>,\n@@ -372,7 +373,7 @@ pub(super) fn dump_annotation<'a, 'tcx>(\n     body: &Body<'tcx>,\n     regioncx: &RegionInferenceContext<'tcx>,\n     closure_region_requirements: &Option<ClosureRegionRequirements<'_>>,\n-    opaque_type_values: &VecMap<OpaqueTypeKey<'tcx>, OpaqueHiddenType<'tcx>>,\n+    opaque_type_values: &VecMap<DefId, OpaqueHiddenType<'tcx>>,\n     errors: &mut crate::error::BorrowckErrors<'tcx>,\n ) {\n     let tcx = infcx.tcx;"}, {"sha": "980b2657829d962013eb063fc5265637ebfc26a1", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/25876b35410d3b6fddc895c73033c31200dd059b/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25876b35410d3b6fddc895c73033c31200dd059b/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=25876b35410d3b6fddc895c73033c31200dd059b", "patch": "@@ -1,5 +1,6 @@\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::vec_map::VecMap;\n+use rustc_hir::def_id::DefId;\n use rustc_hir::OpaqueTyOrigin;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::ty::subst::GenericArgKind;\n@@ -54,8 +55,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         &self,\n         infcx: &InferCtxt<'_, 'tcx>,\n         opaque_ty_decls: VecMap<OpaqueTypeKey<'tcx>, (OpaqueHiddenType<'tcx>, OpaqueTyOrigin)>,\n-    ) -> VecMap<OpaqueTypeKey<'tcx>, OpaqueHiddenType<'tcx>> {\n-        let mut result: VecMap<OpaqueTypeKey<'tcx>, OpaqueHiddenType<'tcx>> = VecMap::new();\n+    ) -> VecMap<DefId, OpaqueHiddenType<'tcx>> {\n+        let mut result: VecMap<DefId, OpaqueHiddenType<'tcx>> = VecMap::new();\n         for (opaque_type_key, (concrete_type, origin)) in opaque_ty_decls {\n             let substs = opaque_type_key.substs;\n             debug!(?concrete_type, ?substs);\n@@ -124,21 +125,31 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             // back to the opaque type definition. E.g. we may have `OpaqueType<X, Y>` mapped to `(X, Y)`\n             // and `OpaqueType<Y, X>` mapped to `(Y, X)`, and those are the same, but we only know that\n             // once we convert the generic parameters to those of the opaque type.\n-            if let Some(prev) = result.get_mut(&opaque_type_key) {\n+            if let Some(prev) = result.get_mut(&opaque_type_key.def_id) {\n                 if prev.ty != ty {\n-                    let mut err = infcx.tcx.sess.struct_span_err(\n-                        concrete_type.span,\n-                        &format!(\"hidden type `{}` differed from previous `{}`\", ty, prev.ty),\n-                    );\n-                    err.span_note(prev.span, \"previous hidden type bound here\");\n-                    err.emit();\n+                    if !ty.references_error() {\n+                        let mut err = infcx.tcx.sess.struct_span_err(\n+                            concrete_type.span,\n+                            \"concrete type differs from previous defining opaque type use\",\n+                        );\n+                        err.span_label(prev.span, format!(\"expected `{}`, got `{}`\", prev.ty, ty));\n+                        if prev.span == concrete_type.span {\n+                            err.span_label(prev.span, \"this expression supplies two conflicting concrete types for the same opaque type\");\n+                        } else {\n+                            err.span_note(prev.span, \"previous use here\");\n+                        }\n+                        err.emit();\n+                    }\n                     prev.ty = infcx.tcx.ty_error();\n                 }\n                 // Pick a better span if there is one.\n                 // FIXME(oli-obk): collect multiple spans for better diagnostics down the road.\n                 prev.span = prev.span.substitute_dummy(concrete_type.span);\n             } else {\n-                result.insert(opaque_type_key, OpaqueHiddenType { ty, span: concrete_type.span });\n+                result.insert(\n+                    opaque_type_key.def_id,\n+                    OpaqueHiddenType { ty, span: concrete_type.span },\n+                );\n             }\n         }\n         result"}, {"sha": "4d4eed179ca9decda55a9e01beaab400cffa4f26", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25876b35410d3b6fddc895c73033c31200dd059b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25876b35410d3b6fddc895c73033c31200dd059b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=25876b35410d3b6fddc895c73033c31200dd059b", "patch": "@@ -9,7 +9,6 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_index::bit_set::BitMatrix;\n use rustc_index::vec::IndexVec;\n-use rustc_middle::ty::OpaqueTypeKey;\n use rustc_span::Span;\n use rustc_target::abi::VariantIdx;\n use smallvec::SmallVec;\n@@ -242,7 +241,7 @@ pub struct BorrowCheckResult<'tcx> {\n     /// All the opaque types that are restricted to concrete types\n     /// by this function. Unlike the value in `TypeckResults`, this has\n     /// unerased regions.\n-    pub concrete_opaque_types: VecMap<OpaqueTypeKey<'tcx>, OpaqueHiddenType<'tcx>>,\n+    pub concrete_opaque_types: VecMap<DefId, OpaqueHiddenType<'tcx>>,\n     pub closure_requirements: Option<ClosureRegionRequirements<'tcx>>,\n     pub used_mut_upvars: SmallVec<[Field; 8]>,\n     pub tainted_by_errors: Option<ErrorGuaranteed>,"}, {"sha": "737f9e7b9e12c87e8af559364a01a2846e22c209", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/25876b35410d3b6fddc895c73033c31200dd059b/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25876b35410d3b6fddc895c73033c31200dd059b/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=25876b35410d3b6fddc895c73033c31200dd059b", "patch": "@@ -356,7 +356,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     let concrete_ty = tcx\n                         .mir_borrowck(owner)\n                         .concrete_opaque_types\n-                        .get_value_matching(|(key, _)| key.def_id == def_id.to_def_id())\n+                        .get(&def_id.to_def_id())\n                         .copied()\n                         .map(|concrete| concrete.ty)\n                         .unwrap_or_else(|| {\n@@ -591,13 +591,13 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n             // Use borrowck to get the type with unerased regions.\n             let concrete_opaque_types = &self.tcx.mir_borrowck(def_id).concrete_opaque_types;\n             debug!(?concrete_opaque_types);\n-            for &(opaque_type_key, concrete_type) in concrete_opaque_types {\n-                if opaque_type_key.def_id != self.def_id {\n+            for &(def_id, concrete_type) in concrete_opaque_types {\n+                if def_id != self.def_id {\n                     // Ignore constraints for other opaque types.\n                     continue;\n                 }\n \n-                debug!(?concrete_type, ?opaque_type_key.substs, \"found constraint\");\n+                debug!(?concrete_type, \"found constraint\");\n \n                 if let Some(prev) = self.found {\n                     if concrete_type.ty != prev.ty && !(concrete_type, prev).references_error() {"}]}