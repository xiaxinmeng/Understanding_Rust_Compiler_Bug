{"sha": "1404a864a4f70a5865f2daac7e285c5dbc448e89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0MDRhODY0YTRmNzBhNTg2NWYyZGFhYzdlMjg1YzVkYmM0NDhlODk=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-02-29T18:48:57Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-03-03T03:15:34Z"}, "message": "std: add a io::with_str_reader fn to remove a str copy", "tree": {"sha": "0199f3bc4bc875a8ebf5ae5e283dc4daa2633f95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0199f3bc4bc875a8ebf5ae5e283dc4daa2633f95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1404a864a4f70a5865f2daac7e285c5dbc448e89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1404a864a4f70a5865f2daac7e285c5dbc448e89", "html_url": "https://github.com/rust-lang/rust/commit/1404a864a4f70a5865f2daac7e285c5dbc448e89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1404a864a4f70a5865f2daac7e285c5dbc448e89/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5812bebf87c536e4106c68802ee1571bbb49fa18", "url": "https://api.github.com/repos/rust-lang/rust/commits/5812bebf87c536e4106c68802ee1571bbb49fa18", "html_url": "https://github.com/rust-lang/rust/commit/5812bebf87c536e4106c68802ee1571bbb49fa18"}], "stats": {"total": 33, "additions": 25, "deletions": 8}, "files": [{"sha": "290d791f711d952291523415fc2c9e28f6de89e1", "filename": "src/libstd/io.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1404a864a4f70a5865f2daac7e285c5dbc448e89/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1404a864a4f70a5865f2daac7e285c5dbc448e89/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=1404a864a4f70a5865f2daac7e285c5dbc448e89", "patch": "@@ -227,41 +227,58 @@ fn file_reader(path: str) -> result::t<reader, str> {\n // Byte buffer readers\n \n // TODO: const u8, but this fails with rustboot.\n-type byte_buf = {buf: [u8], mutable pos: uint};\n+type byte_buf = {buf: [u8], mutable pos: uint, len: uint};\n \n impl of reader for byte_buf {\n     fn read_bytes(len: uint) -> [u8] {\n-        let rest = vec::len(self.buf) - self.pos;\n+        let rest = self.len - self.pos;\n         let to_read = len;\n         if rest < to_read { to_read = rest; }\n         let range = vec::slice(self.buf, self.pos, self.pos + to_read);\n         self.pos += to_read;\n         ret range;\n     }\n     fn read_byte() -> int {\n-        if self.pos == vec::len(self.buf) { ret -1; }\n+        if self.pos == self.len { ret -1; }\n         let b = self.buf[self.pos];\n         self.pos += 1u;\n         ret b as int;\n     }\n     fn unread_byte(_byte: int) { #error(\"TODO: unread_byte\"); fail; }\n-    fn eof() -> bool { self.pos == vec::len(self.buf) }\n+    fn eof() -> bool { self.pos == self.len }\n     fn seek(offset: int, whence: seek_style) {\n         let pos = self.pos;\n-        let len = vec::len(self.buf);\n-        self.pos = seek_in_buf(offset, pos, len, whence);\n+        self.pos = seek_in_buf(offset, pos, self.len, whence);\n     }\n     fn tell() -> uint { self.pos }\n }\n \n fn bytes_reader(bytes: [u8]) -> reader {\n-    {buf: bytes, mutable pos: 0u} as reader\n+    bytes_reader_between(bytes, 0u, vec::len(bytes))\n+}\n+\n+fn bytes_reader_between(bytes: [u8], start: uint, end: uint) -> reader {\n+    {buf: bytes, mutable pos: start, len: end} as reader\n+}\n+\n+fn with_bytes_reader<t>(bytes: [u8], f: fn(reader) -> t) -> t {\n+    f(bytes_reader(bytes))\n+}\n+\n+fn with_bytes_reader_between<t>(bytes: [u8], start: uint, end: uint,\n+                                f: fn(reader) -> t) -> t {\n+    f(bytes_reader_between(bytes, start, end))\n }\n \n fn string_reader(s: str) -> reader {\n     bytes_reader(str::bytes(s))\n }\n \n+fn with_str_reader<T>(s: str, f: fn(reader) -> T) -> T {\n+    str::as_bytes(s) { |bytes|\n+        with_bytes_reader_between(bytes, 0u, str::len(s), f)\n+    }\n+}\n \n // Writing\n enum fileflag { append, create, truncate, no_flag, }"}, {"sha": "8bb6fb2fb9d5df5738dda346fcae2546e8d15016", "filename": "src/libstd/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1404a864a4f70a5865f2daac7e285c5dbc448e89/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1404a864a4f70a5865f2daac7e285c5dbc448e89/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=1404a864a4f70a5865f2daac7e285c5dbc448e89", "patch": "@@ -490,7 +490,7 @@ Function: from_str\n Deserializes a json value from a string.\n */\n fn from_str(s: str) -> result::t<json, error> {\n-    from_reader(io::string_reader(s))\n+    io::with_str_reader(s, from_reader)\n }\n \n /*"}]}