{"sha": "3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNDljNjBhYjcxNTQ3ZTZkYmFlZjA4NmViNGNkMmJiN2ZlOWZmOTQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-09-28T20:55:26Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-09-28T23:17:56Z"}, "message": "Remove stage0 hacks", "tree": {"sha": "4b8a28dc91249b515d9b243d1edb9656550b1967", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b8a28dc91249b515d9b243d1edb9656550b1967"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94", "html_url": "https://github.com/rust-lang/rust/commit/3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ffb39bd08068c5b81706e122a09857e94ad6d84", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ffb39bd08068c5b81706e122a09857e94ad6d84", "html_url": "https://github.com/rust-lang/rust/commit/6ffb39bd08068c5b81706e122a09857e94ad6d84"}], "stats": {"total": 42, "additions": 4, "deletions": 38}, "files": [{"sha": "cdbbc229bc84e091e22a7c35f2261af9d262848c", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94", "patch": "@@ -104,8 +104,7 @@ fn main() {\n         let is_panic_abort = args.windows(2).any(|a| {\n             &*a[0] == \"--crate-name\" && &*a[1] == \"panic_abort\"\n         });\n-        // FIXME(stage0): remove this `stage != \"0\"` condition\n-        if is_panic_abort && stage != \"0\" {\n+        if is_panic_abort {\n             cmd.arg(\"-C\").arg(\"panic=abort\");\n         }\n "}, {"sha": "16dbcae99fa1df2da3b816d8af5590496f37f9ba", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94", "patch": "@@ -25,7 +25,7 @@ use std::process::Command;\n use build_helper::output;\n use filetime::FileTime;\n \n-use util::{exe, staticlib, libdir, mtime, is_dylib, copy};\n+use util::{exe, libdir, mtime, is_dylib, copy};\n use {Build, Compiler, Mode};\n \n /// Build the standard library.\n@@ -40,20 +40,6 @@ pub fn std<'a>(build: &'a Build, target: &str, compiler: &Compiler<'a>) {\n     let libdir = build.sysroot_libdir(compiler, target);\n     let _ = fs::remove_dir_all(&libdir);\n     t!(fs::create_dir_all(&libdir));\n-    // FIXME(stage0) remove this `if` after the next snapshot\n-    // The stage0 compiler still passes the `-lcompiler-rt` flag to the linker but now `bootstrap`\n-    // never builds a `libcopmiler-rt.a`! We'll fill the hole by simply copying stage0's\n-    // `libcompiler-rt.a` to where the stage1's one is expected (though we could as well just use\n-    // an empty `.a` archive). Note that the symbols of that stage0 `libcompiler-rt.a` won't make\n-    // it to the final binary because now `libcore.rlib` also contains the symbols that\n-    // `libcompiler-rt.a` provides. Since that rlib appears first in the linker arguments, its\n-    // symbols are used instead of `libcompiler-rt.a`'s.\n-    if compiler.stage == 0 {\n-        let rtlib = &staticlib(\"compiler-rt\", target);\n-        let src = build.rustc.parent().unwrap().parent().unwrap().join(\"lib\").join(\"rustlib\")\n-            .join(target).join(\"lib\").join(rtlib);\n-        copy(&src, &libdir.join(rtlib));\n-    }\n \n     // Some platforms have startup objects that may be required to produce the\n     // libstd dynamic library, for example."}, {"sha": "e3c92fc1aa8301950e1f107d758050e0093ed60d", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94", "patch": "@@ -127,7 +127,6 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n /// }\n /// ```\n \n-#[cfg_attr(stage0, unsafe_no_drop_flag)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Arc<T: ?Sized> {\n     ptr: Shared<ArcInner<T>>,\n@@ -153,7 +152,6 @@ impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Arc<U>> for Arc<T> {}\n /// nodes behind strong `Arc<T>` pointers, and then storing the parent pointers\n /// as `Weak<T>` pointers.\n \n-#[cfg_attr(stage0, unsafe_no_drop_flag)]\n #[stable(feature = \"arc_weak\", since = \"1.4.0\")]\n pub struct Weak<T: ?Sized> {\n     ptr: Shared<ArcInner<T>>,"}, {"sha": "31491106d97ee1b22a88d9f1184adc6322c56926", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94", "patch": "@@ -88,7 +88,6 @@\n #![feature(staged_api)]\n #![feature(unboxed_closures)]\n #![feature(unique)]\n-#![cfg_attr(stage0, feature(unsafe_no_drop_flag))]\n #![feature(unsize)]\n \n #![cfg_attr(not(test), feature(fused, fn_traits, placement_new_protocol))]"}, {"sha": "e153507956b9f9907452d56170a223260e26ee4a", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94", "patch": "@@ -44,7 +44,6 @@ use core::cmp;\n /// `shrink_to_fit`, and `from_box` will actually set RawVec's private capacity\n /// field. This allows zero-sized types to not be special-cased by consumers of\n /// this type.\n-#[cfg_attr(stage0, unsafe_no_drop_flag)]\n pub struct RawVec<T> {\n     ptr: Unique<T>,\n     cap: usize,"}, {"sha": "4a4de419f2ede5bf9ce5dc8e4e8b04f46f8348d5", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94", "patch": "@@ -252,7 +252,6 @@ struct RcBox<T: ?Sized> {\n /// that you have to call them as e.g. `Rc::get_mut(&value)` instead of\n /// `value.get_mut()`.  This avoids conflicts with methods of the inner\n /// type `T`.\n-#[cfg_attr(stage0, unsafe_no_drop_flag)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Rc<T: ?Sized> {\n     ptr: Shared<RcBox<T>>,\n@@ -873,7 +872,6 @@ impl<T> From<T> for Rc<T> {\n ///\n /// [rc]: struct.Rc.html\n /// [downgrade]: struct.Rc.html#method.downgrade\n-#[cfg_attr(stage0, unsafe_no_drop_flag)]\n #[stable(feature = \"rc_weak\", since = \"1.4.0\")]\n pub struct Weak<T: ?Sized> {\n     ptr: Shared<RcBox<T>>,"}, {"sha": "990de541b6783db047df209c0c013f7c5502bca7", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94", "patch": "@@ -52,7 +52,6 @@\n #![feature(step_by)]\n #![feature(unicode)]\n #![feature(unique)]\n-#![cfg_attr(stage0, feature(unsafe_no_drop_flag))]\n #![cfg_attr(test, feature(rand, test))]\n \n #![no_std]"}, {"sha": "e868a542d55fde2c8c05c8c6bb3d5b5601c1d56f", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94", "patch": "@@ -268,7 +268,6 @@ use super::range::RangeArgument;\n /// Vec does not currently guarantee the order in which elements are dropped\n /// (the order has changed in the past, and may change again).\n ///\n-#[cfg_attr(stage0, unsafe_no_drop_flag)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Vec<T> {\n     buf: RawVec<T>,"}, {"sha": "4a703b3da68f64c1b34e48f16075ac4ef2a213dd", "filename": "src/libcompiler_builtins/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94/src%2Flibcompiler_builtins%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94/src%2Flibcompiler_builtins%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcompiler_builtins%2Flib.rs?ref=3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![cfg_attr(not(stage0), feature(compiler_builtins))]\n+#![feature(compiler_builtins)]\n #![no_std]\n-#![cfg_attr(not(stage0), compiler_builtins)]\n+#![compiler_builtins]\n #![unstable(feature = \"compiler_builtins_lib\",\n             reason = \"internal implementation detail of rustc right now\",\n             issue = \"0\")]"}, {"sha": "d72b18ae345ce144018d56722403516f99727bdd", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94", "patch": "@@ -129,13 +129,6 @@ pub struct AssertParamIsClone<T: Clone + ?Sized> { _field: ::marker::PhantomData\n            reason = \"deriving hack, should not be public\",\n            issue = \"0\")]\n pub struct AssertParamIsCopy<T: Copy + ?Sized> { _field: ::marker::PhantomData<T> }\n-#[cfg(stage0)]\n-#[doc(hidden)]\n-#[inline(always)]\n-#[unstable(feature = \"derive_clone_copy\",\n-           reason = \"deriving hack, should not be public\",\n-           issue = \"0\")]\n-pub fn assert_receiver_is_clone<T: Clone + ?Sized>(_: &T) {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T: ?Sized> Clone for &'a T {"}, {"sha": "35fcfdf114e47e2144775b84afc8f71595200ece", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94", "patch": "@@ -194,14 +194,12 @@ extern \"rust-intrinsic\" {\n     /// own, or if it does not enable any significant optimizations.\n     pub fn assume(b: bool);\n \n-    #[cfg(not(stage0))]\n     /// Hints to the compiler that branch condition is likely to be true.\n     /// Returns the value passed to it.\n     ///\n     /// Any use other than with `if` statements will probably not have an effect.\n     pub fn likely(b: bool) -> bool;\n \n-    #[cfg(not(stage0))]\n     /// Hints to the compiler that branch condition is likely to be false.\n     /// Returns the value passed to it.\n     ///"}, {"sha": "afd833d8bdd81dfbebf49c4c1f5a9a8322dba0c4", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94", "patch": "@@ -59,7 +59,6 @@ const EMPTY_BUCKET: u64 = 0;\n /// around just the \"table\" part of the hashtable. It enforces some\n /// invariants at the type level and employs some performance trickery,\n /// but in general is just a tricked out `Vec<Option<u64, K, V>>`.\n-#[cfg_attr(stage0, unsafe_no_drop_flag)]\n pub struct RawTable<K, V> {\n     capacity: usize,\n     size: usize,"}, {"sha": "b3e4351e9b20006ce4efe118d2b7d3635d19e2b3", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=3b49c60ab71547e6dbaef086eb4cd2bb7fe9ff94", "patch": "@@ -278,7 +278,6 @@\n #![feature(unboxed_closures)]\n #![feature(unicode)]\n #![feature(unique)]\n-#![cfg_attr(stage0, feature(unsafe_no_drop_flag))]\n #![feature(unwind_attributes)]\n #![feature(vec_push_all)]\n #![feature(zero_one)]"}]}