{"sha": "5316fe6bb51963c809b690c8db89ecf6ac08209f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMTZmZTZiYjUxOTYzYzgwOWI2OTBjOGRiODllY2Y2YWMwODIwOWY=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-06-20T19:46:38Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-06-20T19:46:38Z"}, "message": "Add comments explaining integral type variables; fix typos", "tree": {"sha": "5236018b033cc0d632cefc37a7fd5d8ec9aa251d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5236018b033cc0d632cefc37a7fd5d8ec9aa251d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5316fe6bb51963c809b690c8db89ecf6ac08209f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5316fe6bb51963c809b690c8db89ecf6ac08209f", "html_url": "https://github.com/rust-lang/rust/commit/5316fe6bb51963c809b690c8db89ecf6ac08209f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5316fe6bb51963c809b690c8db89ecf6ac08209f/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a01bdbe207610fc46bf8202e67203902e2bdacac", "url": "https://api.github.com/repos/rust-lang/rust/commits/a01bdbe207610fc46bf8202e67203902e2bdacac", "html_url": "https://github.com/rust-lang/rust/commit/a01bdbe207610fc46bf8202e67203902e2bdacac"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "b188f990a6818309a4f43e91e2bc5296db76264f", "filename": "src/rustc/middle/typeck/infer.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5316fe6bb51963c809b690c8db89ecf6ac08209f/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5316fe6bb51963c809b690c8db89ecf6ac08209f/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs?ref=5316fe6bb51963c809b690c8db89ecf6ac08209f", "patch": "@@ -119,6 +119,28 @@ is valid.  This basically corresponds to the block nesting structure:\n the regions for outer block scopes are superregions of those for inner\n block scopes.\n \n+## Integral type variables\n+\n+There is a third variety of type variable that we use only for\n+inferring the types of unsuffixed integer literals.  Integral type\n+variables differ from general-purpose type variables in that there's\n+no subtyping relationship among the various integral types, so instead\n+of associating each variable with an upper and lower bound, we\n+represent the set of possible integral types it can take on with an\n+`int_ty_set`, which is a bitvector with one bit for each integral\n+type.  Because intersecting these sets with each other is simpler than\n+merging bounds, we don't need to do so transactionally as we do for\n+general-purpose type variables.\n+\n+We could conceivably define a subtyping relationship among integral\n+types based on their ranges, but we choose not to open that particular\n+can of worms.  Our strategy is to treat integral type variables as\n+unknown until the typing context constrains them to a unique integral\n+type, at which point they take on that type.  If the typing context\n+overconstrains the type, it's a type error; if we reach the point at\n+which type variables must be resolved and an integral type variable is\n+still underconstrained, it defaults to `int` as a last resort.\n+\n ## GLB/LUB\n \n Computing the greatest-lower-bound and least-upper-bound of two\n@@ -829,7 +851,7 @@ impl unify_methods for infer_ctxt {\n             }\n         } else if nde_a.rank < nde_b.rank {\n             #debug[\"vars(): b has smaller rank\"];\n-            // b has geater rank, so a should redirect to b.\n+            // b has greater rank, so a should redirect to b.\n             self.set(vb, a_id, redirect(b_id));\n             self.set_var_to_merged_bounds(\n                 vb, b_id, a_bounds, b_bounds, nde_b.rank).then {||"}]}