{"sha": "23c47f1e7758121bd0cb31305d74128eeb4857f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzYzQ3ZjFlNzc1ODEyMWJkMGNiMzEzMDVkNzQxMjhlZWI0ODU3Zjg=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2017-02-07T09:03:40Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2017-02-07T09:03:40Z"}, "message": "Dump instrinsic and C ABI return values.", "tree": {"sha": "bf8cbf11a10fb09dad4ac42afe3f9ca03bee353b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf8cbf11a10fb09dad4ac42afe3f9ca03bee353b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23c47f1e7758121bd0cb31305d74128eeb4857f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23c47f1e7758121bd0cb31305d74128eeb4857f8", "html_url": "https://github.com/rust-lang/rust/commit/23c47f1e7758121bd0cb31305d74128eeb4857f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23c47f1e7758121bd0cb31305d74128eeb4857f8/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5b9a0cb787b69204a2861f7c49f711ddfafafea", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5b9a0cb787b69204a2861f7c49f711ddfafafea", "html_url": "https://github.com/rust-lang/rust/commit/a5b9a0cb787b69204a2861f7c49f711ddfafafea"}], "stats": {"total": 2, "additions": 2, "deletions": 0}, "files": [{"sha": "ee75f03d8f5ce95a3b096a7accc047c8937ffbc6", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23c47f1e7758121bd0cb31305d74128eeb4857f8/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c47f1e7758121bd0cb31305d74128eeb4857f8/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=23c47f1e7758121bd0cb31305d74128eeb4857f8", "patch": "@@ -205,13 +205,15 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     _ => return Err(EvalError::Unreachable),\n                 };\n                 self.call_intrinsic(def_id, substs, arg_operands, ret, ty, layout, target)?;\n+                self.dump_local(ret);\n                 Ok(())\n             }\n \n             Abi::C => {\n                 let ty = fn_ty.sig.0.output();\n                 let (ret, target) = destination.unwrap();\n                 self.call_c_abi(def_id, arg_operands, ret, ty)?;\n+                self.dump_local(ret);\n                 self.goto_block(target);\n                 Ok(())\n             }"}]}