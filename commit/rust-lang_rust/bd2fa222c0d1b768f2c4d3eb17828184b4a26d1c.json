{"sha": "bd2fa222c0d1b768f2c4d3eb17828184b4a26d1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMmZhMjIyYzBkMWI3NjhmMmM0ZDNlYjE3ODI4MTg0YjRhMjZkMWM=", "commit": {"author": {"name": "Gabriel Smith", "email": "ga29smith@gmail.com", "date": "2019-03-01T04:02:32Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-05-01T22:10:57Z"}, "message": "Rename mk_infer to mk_ty_infer\n\nSigned-off-by: Gabriel Smith <ga29smith@gmail.com>", "tree": {"sha": "1f89e649d757872fbfb7f27d0a8906990371538c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f89e649d757872fbfb7f27d0a8906990371538c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd2fa222c0d1b768f2c4d3eb17828184b4a26d1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd2fa222c0d1b768f2c4d3eb17828184b4a26d1c", "html_url": "https://github.com/rust-lang/rust/commit/bd2fa222c0d1b768f2c4d3eb17828184b4a26d1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd2fa222c0d1b768f2c4d3eb17828184b4a26d1c/comments", "author": {"login": "yodaldevoid", "id": 1204409, "node_id": "MDQ6VXNlcjEyMDQ0MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1204409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yodaldevoid", "html_url": "https://github.com/yodaldevoid", "followers_url": "https://api.github.com/users/yodaldevoid/followers", "following_url": "https://api.github.com/users/yodaldevoid/following{/other_user}", "gists_url": "https://api.github.com/users/yodaldevoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/yodaldevoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yodaldevoid/subscriptions", "organizations_url": "https://api.github.com/users/yodaldevoid/orgs", "repos_url": "https://api.github.com/users/yodaldevoid/repos", "events_url": "https://api.github.com/users/yodaldevoid/events{/privacy}", "received_events_url": "https://api.github.com/users/yodaldevoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bf175f30cd605f9be6d45b1d9f8f90d6f91ceb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bf175f30cd605f9be6d45b1d9f8f90d6f91ceb1", "html_url": "https://github.com/rust-lang/rust/commit/7bf175f30cd605f9be6d45b1d9f8f90d6f91ceb1"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "a45f01043f339db2d4b852bb62373ef2934b709e", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd2fa222c0d1b768f2c4d3eb17828184b4a26d1c/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd2fa222c0d1b768f2c4d3eb17828184b4a26d1c/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=bd2fa222c0d1b768f2c4d3eb17828184b4a26d1c", "patch": "@@ -72,7 +72,7 @@ impl<'a, 'gcx, 'tcx> TypeFreshener<'a, 'gcx, 'tcx> {\n             Entry::Vacant(entry) => {\n                 let index = self.freshen_count;\n                 self.freshen_count += 1;\n-                let t = self.infcx.tcx.mk_infer(freshener(index));\n+                let t = self.infcx.tcx.mk_ty_infer(freshener(index));\n                 entry.insert(t);\n                 t\n             }"}, {"sha": "007ff32f32776a1229a2c34e94d815173441df95", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd2fa222c0d1b768f2c4d3eb17828184b4a26d1c/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd2fa222c0d1b768f2c4d3eb17828184b4a26d1c/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=bd2fa222c0d1b768f2c4d3eb17828184b4a26d1c", "patch": "@@ -1248,15 +1248,15 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             let sig = if let ty::Tuple(inputs) = inputs.sty {\n                 tcx.mk_fn_sig(\n                     inputs.iter().map(|k| k.expect_ty()),\n-                    tcx.mk_infer(ty::TyVar(ty::TyVid { index: 0 })),\n+                    tcx.mk_ty_infer(ty::TyVar(ty::TyVid { index: 0 })),\n                     false,\n                     hir::Unsafety::Normal,\n                     ::rustc_target::spec::abi::Abi::Rust\n                 )\n             } else {\n                 tcx.mk_fn_sig(\n                     ::std::iter::once(inputs),\n-                    tcx.mk_infer(ty::TyVar(ty::TyVid { index: 0 })),\n+                    tcx.mk_ty_infer(ty::TyVar(ty::TyVid { index: 0 })),\n                     false,\n                     hir::Unsafety::Normal,\n                     ::rustc_target::spec::abi::Abi::Rust"}, {"sha": "150138ae0b9dc7db472feb3842f5dac37f72f554", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bd2fa222c0d1b768f2c4d3eb17828184b4a26d1c/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd2fa222c0d1b768f2c4d3eb17828184b4a26d1c/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=bd2fa222c0d1b768f2c4d3eb17828184b4a26d1c", "patch": "@@ -2652,7 +2652,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     #[inline]\n     pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {\n-        self.mk_infer(TyVar(v))\n+        self.mk_ty_infer(TyVar(v))\n     }\n \n     #[inline]\n@@ -2665,16 +2665,16 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     #[inline]\n     pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {\n-        self.mk_infer(IntVar(v))\n+        self.mk_ty_infer(IntVar(v))\n     }\n \n     #[inline]\n     pub fn mk_float_var(self, v: FloatVid) -> Ty<'tcx> {\n-        self.mk_infer(FloatVar(v))\n+        self.mk_ty_infer(FloatVar(v))\n     }\n \n     #[inline]\n-    pub fn mk_infer(self, it: InferTy) -> Ty<'tcx> {\n+    pub fn mk_ty_infer(self, it: InferTy) -> Ty<'tcx> {\n         self.mk_ty(Infer(it))\n     }\n "}, {"sha": "fc8fcff7475c4ae86498386ede8fb870d45f7dea", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd2fa222c0d1b768f2c4d3eb17828184b4a26d1c/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd2fa222c0d1b768f2c4d3eb17828184b4a26d1c/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=bd2fa222c0d1b768f2c4d3eb17828184b4a26d1c", "patch": "@@ -516,7 +516,7 @@ pub fn object_region_bounds<'a, 'gcx, 'tcx>(\n     // Since we don't actually *know* the self type for an object,\n     // this \"open(err)\" serves as a kind of dummy standin -- basically\n     // a placeholder type.\n-    let open_ty = tcx.mk_infer(ty::FreshTy(0));\n+    let open_ty = tcx.mk_ty_infer(ty::FreshTy(0));\n \n     let predicates = existential_predicates.iter().filter_map(|predicate| {\n         if let ty::ExistentialPredicate::Projection(_) = *predicate.skip_binder() {"}]}