{"sha": "a77159341e12e02d7f738c709b9798e68bc4af04", "node_id": "C_kwDOAAsO6NoAKGE3NzE1OTM0MWUxMmUwMmQ3ZjczOGM3MDliOTc5OGU2OGJjNGFmMDQ", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-04-20T16:03:47Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-04-20T16:03:47Z"}, "message": "Use fmt::Alignment instead of fmt::rt::v1::Alignment.", "tree": {"sha": "fc197d87e47cce92f1ff5732363d9944208cc767", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc197d87e47cce92f1ff5732363d9944208cc767"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a77159341e12e02d7f738c709b9798e68bc4af04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a77159341e12e02d7f738c709b9798e68bc4af04", "html_url": "https://github.com/rust-lang/rust/commit/a77159341e12e02d7f738c709b9798e68bc4af04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a77159341e12e02d7f738c709b9798e68bc4af04/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "debf305d9e0a21244339820923bbbc1f8589a39d", "url": "https://api.github.com/repos/rust-lang/rust/commits/debf305d9e0a21244339820923bbbc1f8589a39d", "html_url": "https://github.com/rust-lang/rust/commit/debf305d9e0a21244339820923bbbc1f8589a39d"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "af40dcdc5f0de26b273b79c61586c38c87f9972a", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a77159341e12e02d7f738c709b9798e68bc4af04/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77159341e12e02d7f738c709b9798e68bc4af04/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=a77159341e12e02d7f738c709b9798e68bc4af04", "patch": "@@ -1451,7 +1451,7 @@ impl<'a> Formatter<'a> {\n                 let old_fill = crate::mem::replace(&mut self.fill, '0');\n                 let old_align = crate::mem::replace(&mut self.align, rt::v1::Alignment::Right);\n                 write_prefix(self, sign, prefix)?;\n-                let post_padding = self.padding(min - width, rt::v1::Alignment::Right)?;\n+                let post_padding = self.padding(min - width, Alignment::Right)?;\n                 self.buf.write_str(buf)?;\n                 post_padding.write(self)?;\n                 self.fill = old_fill;\n@@ -1460,7 +1460,7 @@ impl<'a> Formatter<'a> {\n             }\n             // Otherwise, the sign and prefix goes after the padding\n             Some(min) => {\n-                let post_padding = self.padding(min - width, rt::v1::Alignment::Right)?;\n+                let post_padding = self.padding(min - width, Alignment::Right)?;\n                 write_prefix(self, sign, prefix)?;\n                 self.buf.write_str(buf)?;\n                 post_padding.write(self)\n@@ -1535,7 +1535,7 @@ impl<'a> Formatter<'a> {\n                 // If we're under both the maximum and the minimum width, then fill\n                 // up the minimum width with the specified string + some alignment.\n                 else {\n-                    let align = rt::v1::Alignment::Left;\n+                    let align = Alignment::Left;\n                     let post_padding = self.padding(width - chars_count, align)?;\n                     self.buf.write_str(s)?;\n                     post_padding.write(self)\n@@ -1550,17 +1550,19 @@ impl<'a> Formatter<'a> {\n     pub(crate) fn padding(\n         &mut self,\n         padding: usize,\n-        default: rt::v1::Alignment,\n+        default: Alignment,\n     ) -> result::Result<PostPadding, Error> {\n         let align = match self.align {\n             rt::v1::Alignment::Unknown => default,\n-            _ => self.align,\n+            rt::v1::Alignment::Left => Alignment::Left,\n+            rt::v1::Alignment::Right => Alignment::Right,\n+            rt::v1::Alignment::Center => Alignment::Center,\n         };\n \n         let (pre_pad, post_pad) = match align {\n-            rt::v1::Alignment::Left => (0, padding),\n-            rt::v1::Alignment::Right | rt::v1::Alignment::Unknown => (padding, 0),\n-            rt::v1::Alignment::Center => (padding / 2, (padding + 1) / 2),\n+            Alignment::Left => (0, padding),\n+            Alignment::Right => (padding, 0),\n+            Alignment::Center => (padding / 2, (padding + 1) / 2),\n         };\n \n         for _ in 0..pre_pad {\n@@ -1580,7 +1582,6 @@ impl<'a> Formatter<'a> {\n             let mut formatted = formatted.clone();\n             let old_fill = self.fill;\n             let old_align = self.align;\n-            let mut align = old_align;\n             if self.sign_aware_zero_pad() {\n                 // a sign always goes first\n                 let sign = formatted.sign;\n@@ -1589,9 +1590,8 @@ impl<'a> Formatter<'a> {\n                 // remove the sign from the formatted parts\n                 formatted.sign = \"\";\n                 width = width.saturating_sub(sign.len());\n-                align = rt::v1::Alignment::Right;\n                 self.fill = '0';\n-                self.align = rt::v1::Alignment::Right;\n+                self.align = rt::Alignment::Right;\n             }\n \n             // remaining parts go through the ordinary padding process.\n@@ -1600,7 +1600,7 @@ impl<'a> Formatter<'a> {\n                 // no padding\n                 self.write_formatted_parts(&formatted)\n             } else {\n-                let post_padding = self.padding(width - len, align)?;\n+                let post_padding = self.padding(width - len, Alignment::Right)?;\n                 self.write_formatted_parts(&formatted)?;\n                 post_padding.write(self)\n             };"}, {"sha": "b08d5782ab6f45f27557d9be00ae0abba197beec", "filename": "library/core/src/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a77159341e12e02d7f738c709b9798e68bc4af04/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77159341e12e02d7f738c709b9798e68bc4af04/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=a77159341e12e02d7f738c709b9798e68bc4af04", "patch": "@@ -1172,7 +1172,7 @@ impl fmt::Debug for Duration {\n                         emit_without_padding(f)\n                     } else {\n                         // We need to add padding. Use the `Formatter::padding` helper function.\n-                        let default_align = crate::fmt::rt::v1::Alignment::Left;\n+                        let default_align = fmt::Alignment::Left;\n                         let post_padding = f.padding(requested_w - actual_w, default_align)?;\n                         emit_without_padding(f)?;\n                         post_padding.write(f)"}]}