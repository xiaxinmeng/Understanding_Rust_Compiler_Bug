{"sha": "9074d9b5813c43cb1d4920dbc9de7dfde032577a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNzRkOWI1ODEzYzQzY2IxZDQ5MjBkYmM5ZGU3ZGZkZTAzMjU3N2E=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-08-27T04:21:59Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-08-31T03:40:52Z"}, "message": "libcore: rewrite io::MemBuffer.write to use memcpy (#2004)", "tree": {"sha": "5675d936f903598f362365daafb5f67ce6c5fb68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5675d936f903598f362365daafb5f67ce6c5fb68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9074d9b5813c43cb1d4920dbc9de7dfde032577a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9074d9b5813c43cb1d4920dbc9de7dfde032577a", "html_url": "https://github.com/rust-lang/rust/commit/9074d9b5813c43cb1d4920dbc9de7dfde032577a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9074d9b5813c43cb1d4920dbc9de7dfde032577a/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bb65848a15c2970f1b7a52e870bfc98c9c981a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bb65848a15c2970f1b7a52e870bfc98c9c981a9", "html_url": "https://github.com/rust-lang/rust/commit/7bb65848a15c2970f1b7a52e870bfc98c9c981a9"}], "stats": {"total": 29, "additions": 13, "deletions": 16}, "files": [{"sha": "9ba942cb0b76e36c24014fa529252846aef1ec9e", "filename": "src/libcore/io.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9074d9b5813c43cb1d4920dbc9de7dfde032577a/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9074d9b5813c43cb1d4920dbc9de7dfde032577a/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=9074d9b5813c43cb1d4920dbc9de7dfde032577a", "patch": "@@ -663,24 +663,21 @@ type MemBuffer = @{buf: DVec<u8>, mut pos: uint};\n \n impl MemBuffer: Writer {\n     fn write(v: &[const u8]) {\n-        // Fast path.\n-        let vlen = vec::len(v);\n-        let buf_len = self.buf.len();\n-        if self.pos == buf_len {\n-            self.buf.push_all(v);\n-            self.pos += vlen;\n-            return;\n-        }\n+        do self.buf.swap |buf| {\n+            let mut buf <- buf;\n+            let v_len = v.len();\n+            let buf_len = buf.len();\n+\n+            let count = uint::max(&buf_len, &(self.pos + v_len));\n+            vec::reserve(buf, count);\n+            unsafe { vec::unsafe::set_len(buf, count); }\n+\n+            vec::u8::memcpy(vec::mut_view(buf, self.pos, count), v, v_len);\n+\n+            self.pos += v_len;\n \n-        // FIXME #2004--use memcpy here?\n-        let mut pos = self.pos, vpos = 0u;\n-        while vpos < vlen && pos < buf_len {\n-            self.buf.set_elt(pos, copy v[vpos]);\n-            pos += 1u;\n-            vpos += 1u;\n+            buf\n         }\n-        self.buf.push_slice(v, vpos, vlen);\n-        self.pos += vlen;\n     }\n     fn seek(offset: int, whence: SeekStyle) {\n         let pos = self.pos;"}]}