{"sha": "c6086a8fd7489fa6cf18b7dd0baf73cf21386c77", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MDg2YThmZDc0ODlmYTZjZjE4YjdkZDBiYWY3M2NmMjEzODZjNzc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-05T20:00:57Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-05T20:00:57Z"}, "message": "Rustup to rustc 1.41.0-nightly (6d77e45f0 2019-12-04)", "tree": {"sha": "c288444224f71063fd78d41eabcfdcd57474d2fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c288444224f71063fd78d41eabcfdcd57474d2fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6086a8fd7489fa6cf18b7dd0baf73cf21386c77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6086a8fd7489fa6cf18b7dd0baf73cf21386c77", "html_url": "https://github.com/rust-lang/rust/commit/c6086a8fd7489fa6cf18b7dd0baf73cf21386c77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6086a8fd7489fa6cf18b7dd0baf73cf21386c77/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0bb30f8a1ac6107555dfc8fe830d42f469af7f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0bb30f8a1ac6107555dfc8fe830d42f469af7f8", "html_url": "https://github.com/rust-lang/rust/commit/f0bb30f8a1ac6107555dfc8fe830d42f469af7f8"}], "stats": {"total": 114, "additions": 98, "deletions": 16}, "files": [{"sha": "b6e55b35720da6bc10de704a0773af9c9d07ab12", "filename": "Cargo.toml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6086a8fd7489fa6cf18b7dd0baf73cf21386c77/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c6086a8fd7489fa6cf18b7dd0baf73cf21386c77/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=c6086a8fd7489fa6cf18b7dd0baf73cf21386c77", "patch": "@@ -1,5 +1,3 @@\n-cargo-features = [\"profile-overrides\"]\n-\n [package]\n name = \"rustc_codegen_cranelift\"\n version = \"0.1.0\""}, {"sha": "1912cc50a218ed080547337c0b2b89d18e6e96de", "filename": "example/mini_core.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c6086a8fd7489fa6cf18b7dd0baf73cf21386c77/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6086a8fd7489fa6cf18b7dd0baf73cf21386c77/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=c6086a8fd7489fa6cf18b7dd0baf73cf21386c77", "patch": "@@ -1,6 +1,6 @@\n #![feature(\n     no_core, lang_items, intrinsics, unboxed_closures, type_ascription, extern_types,\n-    untagged_unions, decl_macro, rustc_attrs, transparent_unions\n+    untagged_unions, decl_macro, rustc_attrs, transparent_unions, optin_builtin_traits\n )]\n #![no_core]\n #![allow(dead_code)]\n@@ -76,7 +76,13 @@ unsafe impl<'a, T: ?Sized> Sync for &'a T {}\n unsafe impl Sync for [u8; 16] {}\n \n #[lang = \"freeze\"]\n-trait Freeze {}\n+unsafe auto trait Freeze {}\n+\n+unsafe impl<T: ?Sized> Freeze for PhantomData<T> {}\n+unsafe impl<T: ?Sized> Freeze for *const T {}\n+unsafe impl<T: ?Sized> Freeze for *mut T {}\n+unsafe impl<T: ?Sized> Freeze for &T {}\n+unsafe impl<T: ?Sized> Freeze for &mut T {}\n \n #[lang = \"not\"]\n pub trait Not {\n@@ -538,3 +544,10 @@ pub macro line() { /* compiler built-in */ }\n pub macro cfg() { /* compiler built-in */ }\n \n pub static A_STATIC: u8 = 42;\n+\n+#[lang = \"panic_location\"]\n+struct PanicLocation {\n+    file: &'static str,\n+    line: u32,\n+    column: u32,\n+}"}, {"sha": "02ecaa7a994510a2692aecbdc2c9faea86407e3a", "filename": "patches/0015-Remove-usage-of-unsized-locals.patch", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c6086a8fd7489fa6cf18b7dd0baf73cf21386c77/patches%2F0015-Remove-usage-of-unsized-locals.patch", "raw_url": "https://github.com/rust-lang/rust/raw/c6086a8fd7489fa6cf18b7dd0baf73cf21386c77/patches%2F0015-Remove-usage-of-unsized-locals.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0015-Remove-usage-of-unsized-locals.patch?ref=c6086a8fd7489fa6cf18b7dd0baf73cf21386c77", "patch": "@@ -98,10 +98,9 @@ diff --git a/src/libstd/sys/unix/thread.rs b/src/libstd/sys/unix/thread.rs\n index f4a1783..362b537 100644\n --- a/src/libstd/sys/unix/thread.rs\n +++ b/src/libstd/sys/unix/thread.rs\n-@@ -40,6 +40,8 @@ impl Thread {\n+@@ -40,5 +40,7 @@ impl Thread {\n      // unsafe: see thread::Builder::spawn_unchecked for safety requirements\n-     pub unsafe fn new(stack: usize, p: Box<dyn FnOnce()>)\n-                           -> io::Result<Thread> {\n+     pub unsafe fn new(stack: usize, p: Box<dyn FnOnce()>) -> io::Result<Thread> {\n +        panic!(\"Threads are not yet supported, because cranelift doesn't support atomics.\");\n +\n          let p = box p;"}, {"sha": "31e667095fa65c49570eac4e477f40635d809e70", "filename": "src/abi/mod.rs", "status": "modified", "additions": 65, "deletions": 2, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/c6086a8fd7489fa6cf18b7dd0baf73cf21386c77/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6086a8fd7489fa6cf18b7dd0baf73cf21386c77/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=c6086a8fd7489fa6cf18b7dd0baf73cf21386c77", "patch": "@@ -10,6 +10,69 @@ use crate::prelude::*;\n \n pub use self::returning::codegen_return;\n \n+// Copied from https://github.com/rust-lang/rust/blob/c2f4c57296f0d929618baed0b0d6eb594abf01eb/src/librustc/ty/layout.rs#L2349\n+pub fn fn_sig_for_fn_abi<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> ty::PolyFnSig<'tcx> {\n+    let ty = instance.ty(tcx);\n+    match ty.kind {\n+        ty::FnDef(..) |\n+        // Shims currently have type FnPtr. Not sure this should remain.\n+        ty::FnPtr(_) => {\n+            let mut sig = ty.fn_sig(tcx);\n+            if let ty::InstanceDef::VtableShim(..) = instance.def {\n+                // Modify `fn(self, ...)` to `fn(self: *mut Self, ...)`.\n+                sig = sig.map_bound(|mut sig| {\n+                    let mut inputs_and_output = sig.inputs_and_output.to_vec();\n+                    inputs_and_output[0] = tcx.mk_mut_ptr(inputs_and_output[0]);\n+                    sig.inputs_and_output = tcx.intern_type_list(&inputs_and_output);\n+                    sig\n+                });\n+            }\n+            sig\n+        }\n+        ty::Closure(def_id, substs) => {\n+            let sig = substs.as_closure().sig(def_id, tcx);\n+\n+            let env_ty = tcx.closure_env_ty(def_id, substs).unwrap();\n+            sig.map_bound(|sig| tcx.mk_fn_sig(\n+                std::iter::once(*env_ty.skip_binder()).chain(sig.inputs().iter().cloned()),\n+                sig.output(),\n+                sig.c_variadic,\n+                sig.unsafety,\n+                sig.abi\n+            ))\n+        }\n+        ty::Generator(def_id, substs, _) => {\n+            let sig = substs.as_generator().poly_sig(def_id, tcx);\n+\n+            let env_region = ty::ReLateBound(ty::INNERMOST, ty::BrEnv);\n+            let env_ty = tcx.mk_mut_ref(tcx.mk_region(env_region), ty);\n+\n+            let pin_did = tcx.lang_items().pin_type().unwrap();\n+            let pin_adt_ref = tcx.adt_def(pin_did);\n+            let pin_substs = tcx.intern_substs(&[env_ty.into()]);\n+            let env_ty = tcx.mk_adt(pin_adt_ref, pin_substs);\n+\n+            sig.map_bound(|sig| {\n+                let state_did = tcx.lang_items().gen_state().unwrap();\n+                let state_adt_ref = tcx.adt_def(state_did);\n+                let state_substs = tcx.intern_substs(&[\n+                    sig.yield_ty.into(),\n+                    sig.return_ty.into(),\n+                ]);\n+                let ret_ty = tcx.mk_adt(state_adt_ref, state_substs);\n+\n+                tcx.mk_fn_sig(std::iter::once(env_ty),\n+                    ret_ty,\n+                    false,\n+                    rustc::hir::Unsafety::Normal,\n+                    rustc_target::spec::abi::Abi::Rust\n+                )\n+            })\n+        }\n+        _ => bug!(\"unexpected type {:?} in Instance::fn_sig\", ty)\n+    }\n+}\n+\n fn clif_sig_from_fn_sig<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     sig: FnSig<'tcx>,\n@@ -98,7 +161,7 @@ pub fn get_function_name_and_sig<'tcx>(\n ) -> (String, Signature) {\n     assert!(!inst.substs.needs_infer() && !inst.substs.has_param_types());\n     let fn_sig =\n-        tcx.normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), &inst.fn_sig(tcx));\n+        tcx.normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), &fn_sig_for_fn_abi(tcx, inst));\n     if fn_sig.c_variadic && !support_vararg {\n         unimpl!(\"Variadic function definitions are not yet supported\");\n     }\n@@ -199,7 +262,7 @@ impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n     fn self_sig(&self) -> FnSig<'tcx> {\n         self.tcx.normalize_erasing_late_bound_regions(\n             ParamEnv::reveal_all(),\n-            &self.instance.fn_sig(self.tcx),\n+            &fn_sig_for_fn_abi(self.tcx, self.instance),\n         )\n     }\n "}, {"sha": "7c7dd2412635804838d290ccc54be137eda6de5a", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6086a8fd7489fa6cf18b7dd0baf73cf21386c77/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6086a8fd7489fa6cf18b7dd0baf73cf21386c77/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=c6086a8fd7489fa6cf18b7dd0baf73cf21386c77", "patch": "@@ -9,7 +9,7 @@ pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n ) {\n     let tcx = cx.tcx;\n \n-    let mir = tcx.instance_mir(instance.def);\n+    let mir = *tcx.instance_mir(instance.def);\n \n     // Declare function\n     let (name, sig) = get_function_name_and_sig(tcx, instance, false);"}, {"sha": "dade64b348a2950e3022b21221453ca26afe10e5", "filename": "src/constant.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c6086a8fd7489fa6cf18b7dd0baf73cf21386c77/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6086a8fd7489fa6cf18b7dd0baf73cf21386c77/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=c6086a8fd7489fa6cf18b7dd0baf73cf21386c77", "patch": "@@ -5,8 +5,8 @@ use rustc::mir::interpret::{\n };\n use rustc::ty::{layout::Align, Const, ConstKind};\n use rustc_mir::interpret::{\n-    ImmTy, InterpCx, Machine, Memory, MemoryKind, OpTy, PlaceTy, Pointer, StackPopCleanup,\n-    StackPopInfo,\n+    ImmTy, InterpCx, Machine, Memory, MemoryKind, OpTy, PanicInfo, PlaceTy, Pointer,\n+    StackPopCleanup, StackPopInfo,\n };\n \n use cranelift_module::*;\n@@ -407,7 +407,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for TransPlaceInterpreter {\n         panic!();\n     }\n \n-    fn find_fn(\n+    fn find_mir_or_eval_fn(\n         _: &mut InterpCx<'mir, 'tcx, Self>,\n         _: Instance<'tcx>,\n         _: &[OpTy<'tcx>],\n@@ -449,7 +449,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for TransPlaceInterpreter {\n         panic!();\n     }\n \n-    fn tag_allocation<'b>(\n+    fn init_allocation_extra<'b>(\n         _: &(),\n         _: AllocId,\n         alloc: Cow<'b, Allocation>,\n@@ -479,6 +479,15 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for TransPlaceInterpreter {\n     fn stack_pop(_: &mut InterpCx<'mir, 'tcx, Self>, _: (), _: bool) -> InterpResult<'tcx, StackPopInfo> {\n         Ok(StackPopInfo::Normal)\n     }\n+\n+    fn assert_panic(\n+        _: &mut InterpCx<'mir, 'tcx, Self>,\n+        _: Span,\n+        _: &PanicInfo<Operand<'tcx>>,\n+        _: Option<BasicBlock>,\n+    ) -> InterpResult<'tcx> {\n+        unreachable!()\n+    }\n }\n \n pub fn mir_operand_get_const_val<'tcx>("}, {"sha": "f595d384f4f2cc681db77c3c100167ff40d20c0e", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6086a8fd7489fa6cf18b7dd0baf73cf21386c77/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6086a8fd7489fa6cf18b7dd0baf73cf21386c77/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=c6086a8fd7489fa6cf18b7dd0baf73cf21386c77", "patch": "@@ -82,7 +82,7 @@ impl CommentWriter {\n                     \"sig {:?}\",\n                     tcx.normalize_erasing_late_bound_regions(\n                         ParamEnv::reveal_all(),\n-                        &instance.fn_sig(tcx)\n+                        &crate::abi::fn_sig_for_fn_abi(tcx, instance)\n                     )\n                 ),\n                 String::new(),"}, {"sha": "05ba16ea31cb07519d3ff85677adf6b513cef620", "filename": "test.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6086a8fd7489fa6cf18b7dd0baf73cf21386c77/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c6086a8fd7489fa6cf18b7dd0baf73cf21386c77/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=c6086a8fd7489fa6cf18b7dd0baf73cf21386c77", "patch": "@@ -67,7 +67,7 @@ $RUSTC example/mod_bench.rs --crate-type bin\n \n pushd simple-raytracer\n echo \"[BENCH COMPILE] ebobby/simple-raytracer\"\n-hyperfine --runs ${RUN_RUNS:-10} --warmup 1 --prepare \"rm -r target/*/debug\" \\\n+hyperfine --runs ${RUN_RUNS:-10} --warmup 1 --prepare \"rm -r target/*/debug || true\" \\\n     \"RUSTFLAGS='' cargo build --target $TARGET_TRIPLE\" \\\n     \"../cargo.sh build\"\n "}]}