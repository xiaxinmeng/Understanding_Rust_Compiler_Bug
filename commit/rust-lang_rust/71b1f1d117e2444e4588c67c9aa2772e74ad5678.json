{"sha": "71b1f1d117e2444e4588c67c9aa2772e74ad5678", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxYjFmMWQxMTdlMjQ0NGU0NTg4YzY3YzlhYTI3NzJlNzRhZDU2Nzg=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-19T23:33:11Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-19T23:33:11Z"}, "message": "Parse and translate assignments.", "tree": {"sha": "5ccb7e687c571aa53b5c333e041585daf433912f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ccb7e687c571aa53b5c333e041585daf433912f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71b1f1d117e2444e4588c67c9aa2772e74ad5678", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71b1f1d117e2444e4588c67c9aa2772e74ad5678", "html_url": "https://github.com/rust-lang/rust/commit/71b1f1d117e2444e4588c67c9aa2772e74ad5678", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71b1f1d117e2444e4588c67c9aa2772e74ad5678/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8cca0971fc2dcd5f4bf4ac2ce82c1c635da0279", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8cca0971fc2dcd5f4bf4ac2ce82c1c635da0279", "html_url": "https://github.com/rust-lang/rust/commit/b8cca0971fc2dcd5f4bf4ac2ce82c1c635da0279"}], "stats": {"total": 68, "additions": 50, "deletions": 18}, "files": [{"sha": "bf8ca6cae11c2fc1f253f6b17bf1d1de2d9e425b", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/71b1f1d117e2444e4588c67c9aa2772e74ad5678/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b1f1d117e2444e4588c67c9aa2772e74ad5678/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=71b1f1d117e2444e4588c67c9aa2772e74ad5678", "patch": "@@ -564,6 +564,20 @@ io fn parse_or_expr(parser p) -> @ast.expr {\n     ret parse_binary_exprs(p, sub, vec(tup(token.OROR, ast.or)));\n }\n \n+io fn parse_assign_expr(parser p) -> @ast.expr {\n+    auto lo = p.get_span();\n+    auto lhs = parse_or_expr(p);\n+    alt (p.peek()) {\n+        case (token.EQ) {\n+            p.bump();\n+            auto rhs = parse_expr(p);\n+            ret @spanned(lo, rhs.span,\n+                         ast.expr_assign(lhs, rhs, none[@ast.ty]));\n+        }\n+    }\n+    ret lhs;\n+}\n+\n io fn parse_if_expr(parser p) -> @ast.expr {\n     auto lo = p.get_span();\n     auto hi = lo;\n@@ -597,7 +611,7 @@ io fn parse_expr(parser p) -> @ast.expr {\n             ret parse_if_expr(p);\n         }\n         case (_) {\n-            ret parse_or_expr(p);\n+            ret parse_assign_expr(p);\n         }\n \n     }"}, {"sha": "2948f63a29636154378dfb923fd4fead399e59d3", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 35, "deletions": 17, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/71b1f1d117e2444e4588c67c9aa2772e74ad5678/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b1f1d117e2444e4588c67c9aa2772e74ad5678/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=71b1f1d117e2444e4588c67c9aa2772e74ad5678", "patch": "@@ -606,6 +606,30 @@ fn trans_if(@block_ctxt cx, &ast.expr cond,\n     ret res(next_cx, phi);\n }\n \n+fn trans_lval(@block_ctxt cx, &ast.expr e) -> result {\n+    alt (e.node) {\n+        case (ast.expr_name(?n, ?dopt, _)) {\n+            alt (dopt) {\n+                case (some[ast.def](?def)) {\n+                    alt (def) {\n+                        case (ast.def_local(?did)) {\n+                            ret res(cx, cx.fcx.lllocals.get(did));\n+                        }\n+                        case (_) {\n+                            cx.fcx.tcx.sess.unimpl(\"def variant in trans\");\n+                        }\n+                    }\n+                }\n+                case (none[ast.def]) {\n+                    cx.fcx.tcx.sess.err(\"unresolved expr_name in trans\");\n+                }\n+            }\n+        }\n+    }\n+    cx.fcx.tcx.sess.unimpl(\"expr variant in trans_lval\");\n+    fail;\n+}\n+\n fn trans_expr(@block_ctxt cx, &ast.expr e) -> result {\n     alt (e.node) {\n         case (ast.expr_lit(?lit, _)) {\n@@ -635,24 +659,18 @@ fn trans_expr(@block_ctxt cx, &ast.expr e) -> result {\n             ret res(next_cx, sub.val);\n         }\n \n-        case (ast.expr_name(?n, ?dopt, _)) {\n-            alt (dopt) {\n-                case (some[ast.def](?def)) {\n-                    alt (def) {\n-                        case (ast.def_local(?did)) {\n-                            auto llptr = cx.fcx.lllocals.get(did);\n-                            ret res(cx, cx.build.Load(llptr));\n-                        }\n-                        case (_) {\n-                            cx.fcx.tcx.sess.unimpl(\"def variant in trans\");\n-                        }\n-                    }\n-                }\n-                case (none[ast.def]) {\n-                    cx.fcx.tcx.sess.err(\"unresolved expr_name in trans\");\n-                }\n-            }\n+        case (ast.expr_name(_,_,_)) {\n+            auto sub = trans_lval(cx, e);\n+            ret res(sub.bcx, cx.build.Load(sub.val));\n+        }\n+\n+        case (ast.expr_assign(?dst, ?src, _)) {\n+            auto lhs_res = trans_lval(cx, *dst);\n+            auto rhs_res = trans_expr(lhs_res.bcx, *src);\n+            ret res(rhs_res.bcx,\n+                    cx.build.Store(rhs_res.val, lhs_res.val));\n         }\n+\n     }\n     cx.fcx.tcx.sess.unimpl(\"expr variant in trans_expr\");\n     fail;"}]}