{"sha": "ba82a76db986589c1db38f6a256324dc2d1ad92c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhODJhNzZkYjk4NjU4OWMxZGIzOGY2YTI1NjMyNGRjMmQxYWQ5MmM=", "commit": {"author": {"name": "Jethro Beekman", "email": "jethro@jbeekman.nl", "date": "2017-02-09T22:16:16Z"}, "committer": {"name": "Jethro Beekman", "email": "jethro@jbeekman.nl", "date": "2017-02-09T22:16:16Z"}, "message": "Update set operations documentation\n\nReminding people of set terminology.", "tree": {"sha": "ac6ec64233a060af885d53894963691c8c46acf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac6ec64233a060af885d53894963691c8c46acf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba82a76db986589c1db38f6a256324dc2d1ad92c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba82a76db986589c1db38f6a256324dc2d1ad92c", "html_url": "https://github.com/rust-lang/rust/commit/ba82a76db986589c1db38f6a256324dc2d1ad92c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba82a76db986589c1db38f6a256324dc2d1ad92c/comments", "author": null, "committer": null, "parents": [{"sha": "405327635419e22a956dfe8f7caf4817c8ae5e93", "url": "https://api.github.com/repos/rust-lang/rust/commits/405327635419e22a956dfe8f7caf4817c8ae5e93", "html_url": "https://github.com/rust-lang/rust/commit/405327635419e22a956dfe8f7caf4817c8ae5e93"}], "stats": {"total": 44, "additions": 30, "deletions": 14}, "files": [{"sha": "e3c990c80decfc9ce7a075a0d4305a2b241454f6", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ba82a76db986589c1db38f6a256324dc2d1ad92c/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba82a76db986589c1db38f6a256324dc2d1ad92c/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=ba82a76db986589c1db38f6a256324dc2d1ad92c", "patch": "@@ -289,7 +289,9 @@ impl<T: Ord> BTreeSet<T> {\n }\n \n impl<T: Ord> BTreeSet<T> {\n-    /// Visits the values representing the difference, in ascending order.\n+    /// Visits the values representing the difference,\n+    /// i.e. the values that are in `self` but not in `other`,\n+    /// in ascending order.\n     ///\n     /// # Examples\n     ///\n@@ -315,7 +317,9 @@ impl<T: Ord> BTreeSet<T> {\n         }\n     }\n \n-    /// Visits the values representing the symmetric difference, in ascending order.\n+    /// Visits the values representing the symmetric difference,\n+    /// i.e. the values that are in `self` or in `other` but not in both,\n+    /// in ascending order.\n     ///\n     /// # Examples\n     ///\n@@ -343,7 +347,9 @@ impl<T: Ord> BTreeSet<T> {\n         }\n     }\n \n-    /// Visits the values representing the intersection, in ascending order.\n+    /// Visits the values representing the intersection,\n+    /// i.e. the values that are both in `self` and `other`,\n+    /// in ascending order.\n     ///\n     /// # Examples\n     ///\n@@ -369,7 +375,9 @@ impl<T: Ord> BTreeSet<T> {\n         }\n     }\n \n-    /// Visits the values representing the union, in ascending order.\n+    /// Visits the values representing the union,\n+    /// i.e. all the values in `self` or `other`, without duplicates,\n+    /// in ascending order.\n     ///\n     /// # Examples\n     ///\n@@ -480,7 +488,7 @@ impl<T: Ord> BTreeSet<T> {\n         Recover::get(&self.map, value)\n     }\n \n-    /// Returns `true` if the set has no elements in common with `other`.\n+    /// Returns `true` if `self` has no elements in common with `other`.\n     /// This is equivalent to checking for an empty intersection.\n     ///\n     /// # Examples\n@@ -502,7 +510,8 @@ impl<T: Ord> BTreeSet<T> {\n         self.intersection(other).next().is_none()\n     }\n \n-    /// Returns `true` if the set is a subset of another.\n+    /// Returns `true` if the set is a subset of another,\n+    /// i.e. `other` contains at least all the values in `self`.\n     ///\n     /// # Examples\n     ///\n@@ -544,7 +553,8 @@ impl<T: Ord> BTreeSet<T> {\n         true\n     }\n \n-    /// Returns `true` if the set is a superset of another.\n+    /// Returns `true` if the set is a superset of another,\n+    /// i.e. `self` contains at least all the values in `other`.\n     ///\n     /// # Examples\n     ///"}, {"sha": "d438aa8b3ac9cf53b2c9278f839eaa14d221296c", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ba82a76db986589c1db38f6a256324dc2d1ad92c/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba82a76db986589c1db38f6a256324dc2d1ad92c/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=ba82a76db986589c1db38f6a256324dc2d1ad92c", "patch": "@@ -291,7 +291,8 @@ impl<T, S> HashSet<T, S>\n         Iter { iter: self.map.keys() }\n     }\n \n-    /// Visit the values representing the difference.\n+    /// Visit the values representing the difference,\n+    /// i.e. the values that are in `self` but not in `other`.\n     ///\n     /// # Examples\n     ///\n@@ -321,7 +322,8 @@ impl<T, S> HashSet<T, S>\n         }\n     }\n \n-    /// Visit the values representing the symmetric difference.\n+    /// Visit the values representing the symmetric difference,\n+    /// i.e. the values that are in `self` or in `other` but not in both.\n     ///\n     /// # Examples\n     ///\n@@ -348,7 +350,8 @@ impl<T, S> HashSet<T, S>\n         SymmetricDifference { iter: self.difference(other).chain(other.difference(self)) }\n     }\n \n-    /// Visit the values representing the intersection.\n+    /// Visit the values representing the intersection,\n+    /// i.e. the values that are both in `self` and `other`.\n     ///\n     /// # Examples\n     ///\n@@ -373,7 +376,8 @@ impl<T, S> HashSet<T, S>\n         }\n     }\n \n-    /// Visit the values representing the union.\n+    /// Visit the values representing the union,\n+    /// i.e. all the values in `self` or `other`, without duplicates.\n     ///\n     /// # Examples\n     ///\n@@ -489,7 +493,7 @@ impl<T, S> HashSet<T, S>\n         Recover::get(&self.map, value)\n     }\n \n-    /// Returns `true` if the set has no elements in common with `other`.\n+    /// Returns `true` if `self` has no elements in common with `other`.\n     /// This is equivalent to checking for an empty intersection.\n     ///\n     /// # Examples\n@@ -511,7 +515,8 @@ impl<T, S> HashSet<T, S>\n         self.iter().all(|v| !other.contains(v))\n     }\n \n-    /// Returns `true` if the set is a subset of another.\n+    /// Returns `true` if the set is a subset of another,\n+    /// i.e. `other` contains at least all the values in `self`.\n     ///\n     /// # Examples\n     ///\n@@ -532,7 +537,8 @@ impl<T, S> HashSet<T, S>\n         self.iter().all(|v| other.contains(v))\n     }\n \n-    /// Returns `true` if the set is a superset of another.\n+    /// Returns `true` if the set is a superset of another,\n+    /// i.e. `self` contains at least all the values in `other`.\n     ///\n     /// # Examples\n     ///"}]}