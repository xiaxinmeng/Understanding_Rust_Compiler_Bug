{"sha": "11e92f37c13194ad5c1f82a980e7f7ee02345801", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZTkyZjM3YzEzMTk0YWQ1YzFmODJhOTgwZTdmN2VlMDIzNDU4MDE=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-23T18:11:23Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-23T19:10:03Z"}, "message": "Remove uses of binary move - <- - from tests and libraries", "tree": {"sha": "a9fbae3cf8682a6f7cdd92e2b6aba65856be82b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9fbae3cf8682a6f7cdd92e2b6aba65856be82b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11e92f37c13194ad5c1f82a980e7f7ee02345801", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11e92f37c13194ad5c1f82a980e7f7ee02345801", "html_url": "https://github.com/rust-lang/rust/commit/11e92f37c13194ad5c1f82a980e7f7ee02345801", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11e92f37c13194ad5c1f82a980e7f7ee02345801/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "804c608f0166c90dcf04e5d00b48cc4d5c9e9d3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/804c608f0166c90dcf04e5d00b48cc4d5c9e9d3c", "html_url": "https://github.com/rust-lang/rust/commit/804c608f0166c90dcf04e5d00b48cc4d5c9e9d3c"}], "stats": {"total": 287, "additions": 151, "deletions": 136}, "files": [{"sha": "f6133b8f954988c5bf2cf284f01851b3e508f30a", "filename": "src/fuzzer/ivec_fuzz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ffuzzer%2Fivec_fuzz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ffuzzer%2Fivec_fuzz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Fivec_fuzz.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -2,7 +2,7 @@\n \n Idea: provide functions for 'exhaustive' and 'random' modification of vecs.\n \n-  two functions, \"return all edits\" and \"return a random edit\" <--\n+  two functions, \"return all edits\" and \"return a random edit\" = move-\n     leaning toward this model or two functions, \"return the number of\n     possible edits\" and \"return edit #n\"\n "}, {"sha": "e01e3fea3e175852046df2a0ac5b9e83ab14a7b3", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -72,7 +72,7 @@ pub fn from_vec<A>(v: ~[A]) -> DVec<A> {\n \n /// Consumes the vector and returns its contents\n pub fn unwrap<A>(d: DVec<A>) -> ~[A] {\n-    let DVec_({data: v}) <- d;\n+    let DVec_({data: v}) = move d;\n     move v\n }\n \n@@ -150,13 +150,13 @@ impl<A> DVec<A> {\n     /// Overwrite the current contents\n     fn set(w: ~[A]) {\n         self.check_not_borrowed();\n-        self.data <- w;\n+        self.data = move w;\n     }\n \n     /// Remove and return the last element\n     fn pop() -> A {\n         do self.check_out |v| {\n-            let mut v <- v;\n+            let mut v = move v;\n             let result = v.pop();\n             self.give_back(move v);\n             move result\n@@ -171,7 +171,7 @@ impl<A> DVec<A> {\n             let data_ptr: *() = cast::reinterpret_cast(&data);\n             if data_ptr.is_null() { fail ~\"Recursive use of dvec\"; }\n             log(error, ~\"a\");\n-            self.data <- ~[move t];\n+            self.data = move ~[move t];\n             self.data.push_all_move(move data);\n             log(error, ~\"b\");\n         }\n@@ -235,7 +235,7 @@ impl<A: Copy> DVec<A> {\n     /// Appends elements from `from_idx` to `to_idx` (exclusive)\n     fn push_slice(ts: &[const A], from_idx: uint, to_idx: uint) {\n         do self.swap |v| {\n-            let mut v <- v;\n+            let mut v = move v;\n             let new_len = vec::len(v) + to_idx - from_idx;\n             vec::reserve(&mut v, new_len);\n             let mut i = from_idx;\n@@ -260,7 +260,7 @@ impl<A: Copy> DVec<A> {\n              none { v }\n              Some(h) {\n                let len = v.len() + h;\n-               let mut v <- v;\n+               let mut v = move v;\n                vec::reserve(v, len);\n                v\n             }"}, {"sha": "77074a473e260dbf8ee17fbf3045e74b9df42ccf", "filename": "src/libcore/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -698,7 +698,7 @@ pub struct BytesWriter {\n impl BytesWriter: Writer {\n     fn write(v: &[const u8]) {\n         do self.bytes.swap |bytes| {\n-            let mut bytes <- bytes;\n+            let mut bytes = move bytes;\n             let v_len = v.len();\n             let bytes_len = bytes.len();\n "}, {"sha": "f79a2e8f17b4b29354d425a9eed1ddc2daab8ae6", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -128,7 +128,7 @@ pub pure fn flat_map_to_vec<A:Copy,B:Copy,IA:BaseIter<A>,IB:BaseIter<B>>(\n pub pure fn foldl<A,B,IA:BaseIter<A>>(self: &IA, b0: B,\n                                       blk: fn(&B, &A) -> B)\n     -> B {\n-    let mut b <- b0;\n+    let mut b = move b0;\n     for self.each |a| {\n         b = blk(&b, a);\n     }"}, {"sha": "3b1d2079800bf36991c5fc2a861d994727497453", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -149,7 +149,7 @@ pub pure fn or<T>(opta: Option<T>, optb: Option<T>) -> Option<T> {\n pub pure fn while_some<T>(x: Option<T>, blk: fn(v: T) -> Option<T>) {\n     //! Applies a function zero or more times until the result is none.\n \n-    let mut opt <- x;\n+    let mut opt = move x;\n     while opt.is_some() {\n         opt = blk(unwrap(move opt));\n     }"}, {"sha": "2c2cd6a528aae130fe6c6e63b8dd00e693ff8334", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -86,7 +86,7 @@ use option::unwrap;\n const SPIN_COUNT: uint = 0;\n \n macro_rules! move_it (\n-    { $x:expr } => { unsafe { let y <- *ptr::addr_of(&($x)); move y } }\n+    { $x:expr } => { unsafe { let y = move *ptr::addr_of(&($x)); move y } }\n )\n \n #[doc(hidden)]\n@@ -363,7 +363,7 @@ pub fn send<T: Send, Tbuffer: Send>(p: SendPacketBuffered<T, Tbuffer>,\n     let p = unsafe { &*p_ };\n     assert ptr::addr_of(&(p.header)) == header;\n     assert p.payload.is_none();\n-    p.payload <- Some(move payload);\n+    p.payload = move Some(move payload);\n     let old_state = swap_state_rel(&mut p.header.state, Full);\n     match old_state {\n         Empty => {\n@@ -708,7 +708,7 @@ pub fn select<T: Send, Tb: Send>(endpoints: ~[RecvPacketBuffered<T, Tb>])\n     -> (uint, Option<T>, ~[RecvPacketBuffered<T, Tb>])\n {\n     let ready = wait_many(endpoints.map(|p| p.header()));\n-    let mut remaining <- endpoints;\n+    let mut remaining = move endpoints;\n     let port = remaining.swap_remove(ready);\n     let result = try_recv(move port);\n     (ready, move result, move remaining)"}, {"sha": "c4298d572b6fd029274ede87596413d826bccafe", "filename": "src/libcore/private.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Flibcore%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Flibcore%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -562,9 +562,9 @@ impl<T: Send> Exclusive<T> {\n \n // FIXME(#3724) make this a by-move method on the exclusive\n pub fn unwrap_exclusive<T: Send>(arc: Exclusive<T>) -> T {\n-    let Exclusive { x: x } <- arc;\n+    let Exclusive { x: x } = move arc;\n     let inner = unsafe { unwrap_shared_mutable_state(move x) };\n-    let ExData { data: data, _ } <- inner;\n+    let ExData { data: data, _ } = move inner;\n     move data\n }\n "}, {"sha": "8031a46431562eb0aa114cd929746dcbefb5ae2b", "filename": "src/libcore/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -176,7 +176,7 @@ pub fn push_str(lhs: &mut ~str, rhs: &str) {\n /// Concatenate two strings together\n #[inline(always)]\n pub pure fn append(lhs: ~str, rhs: &str) -> ~str {\n-    let mut v <- lhs;\n+    let mut v = move lhs;\n     unsafe {\n         push_str_no_overallocate(&mut v, rhs);\n     }"}, {"sha": "6fbb572df41e1126f1331a48951aaa25ddb3f93d", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -67,7 +67,7 @@ use rt::rust_task;\n use rt::rust_closure;\n \n macro_rules! move_it (\n-    { $x:expr } => { unsafe { let y <- *ptr::addr_of(&($x)); move y } }\n+    { $x:expr } => { unsafe { let y = move *ptr::addr_of(&($x)); move y } }\n )\n \n type TaskSet = send_map::linear::LinearMap<*rust_task,()>;\n@@ -168,10 +168,10 @@ fn each_ancestor(list:        &mut AncestorList,\n         if coalesce_this.is_some() {\n             // Needed coalesce. Our next ancestor becomes our old\n             // ancestor's next ancestor. (\"next = old_next->next;\")\n-            *list <- option::unwrap(move coalesce_this);\n+            *list = move option::unwrap(move coalesce_this);\n         } else {\n             // No coalesce; restore from tmp. (\"next = old_next;\")\n-            *list <- tmp_list;\n+            *list = move tmp_list;\n         }\n         return early_break;\n     }\n@@ -265,7 +265,7 @@ fn each_ancestor(list:        &mut AncestorList,\n             // If this trips, more likely the problem is 'blk' failed inside.\n             let tmp_arc = option::swap_unwrap(parent_group);\n             let result = do access_group(&tmp_arc) |tg_opt| { blk(tg_opt) };\n-            *parent_group <- Some(move tmp_arc);\n+            *parent_group = move Some(move tmp_arc);\n             move result\n         }\n     }\n@@ -480,7 +480,7 @@ fn gen_child_taskgroup(linked: bool, supervised: bool)\n         if tmp.is_some() {\n             let ancestor_arc = option::unwrap(move tmp);\n             let result = ancestor_arc.clone();\n-            **ancestors <- Some(move ancestor_arc);\n+            **ancestors = move Some(move ancestor_arc);\n             AncestorList(Some(move result))\n         } else {\n             AncestorList(None)"}, {"sha": "9e20653f4daf6d6c4ddf008865610c0d7e2689bf", "filename": "src/libcore/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Flibcore%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Flibcore%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Futil.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -51,7 +51,7 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n  */\n #[inline(always)]\n pub fn replace<T>(dest: &mut T, src: T) -> T {\n-    let mut tmp <- src;\n+    let mut tmp = move src;\n     swap(dest, &mut tmp);\n     move tmp\n }"}, {"sha": "efed497651e878dd3edc5e409ea4a1ddc7447cc4", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -399,10 +399,10 @@ pub fn shift<T>(v: &mut ~[T]) -> T {\n         let mut rr;\n         {\n             let vv = raw::to_ptr(vv);\n-            rr <- *vv;\n+            rr = move *vv;\n \n             for uint::range(1, ln) |i| {\n-                let r <- *ptr::offset(vv, i);\n+                let r = move *ptr::offset(vv, i);\n                 v.push(move r);\n             }\n         }\n@@ -424,7 +424,7 @@ pub fn consume<T>(v: ~[T], f: fn(uint, v: T)) unsafe {\n \n     do as_imm_buf(v) |p, ln| {\n         for uint::range(0, ln) |i| {\n-            let x <- *ptr::offset(p, i);\n+            let x = move *ptr::offset(p, i);\n             f(i, move x);\n         }\n     }\n@@ -515,7 +515,7 @@ pub fn push_all_move<T>(v: &mut ~[T], rhs: ~[T]) {\n     unsafe {\n         do as_imm_buf(rhs) |p, len| {\n             for uint::range(0, len) |i| {\n-                let x <- *ptr::offset(p, i);\n+                let x = move *ptr::offset(p, i);\n                 push(v, move x);\n             }\n         }\n@@ -530,7 +530,7 @@ pub fn truncate<T>(v: &mut ~[T], newlen: uint) {\n         unsafe {\n             // This loop is optimized out for non-drop types.\n             for uint::range(newlen, oldlen) |i| {\n-                let _dropped <- *ptr::offset(p, i);\n+                let _dropped = move *ptr::offset(p, i);\n             }\n             raw::set_len(v, newlen);\n         }\n@@ -553,12 +553,12 @@ pub fn dedup<T: Eq>(v: &mut ~[T]) unsafe {\n             // last_written < next_to_read < ln\n             if *ptr::mut_offset(p, next_to_read) ==\n                 *ptr::mut_offset(p, last_written) {\n-                let _dropped <- *ptr::mut_offset(p, next_to_read);\n+                let _dropped = move *ptr::mut_offset(p, next_to_read);\n             } else {\n                 last_written += 1;\n                 // last_written <= next_to_read < ln\n                 if next_to_read != last_written {\n-                    *ptr::mut_offset(p, last_written) <-\n+                    *ptr::mut_offset(p, last_written) = move\n                         *ptr::mut_offset(p, next_to_read);\n                 }\n             }\n@@ -575,7 +575,7 @@ pub fn dedup<T: Eq>(v: &mut ~[T]) unsafe {\n // Appending\n #[inline(always)]\n pub pure fn append<T: Copy>(lhs: ~[T], rhs: &[const T]) -> ~[T] {\n-    let mut v <- lhs;\n+    let mut v = move lhs;\n     unsafe {\n         v.push_all(rhs);\n     }\n@@ -584,7 +584,7 @@ pub pure fn append<T: Copy>(lhs: ~[T], rhs: &[const T]) -> ~[T] {\n \n #[inline(always)]\n pub pure fn append_one<T>(lhs: ~[T], x: T) -> ~[T] {\n-    let mut v <- lhs;\n+    let mut v = move lhs;\n     unsafe { v.push(move x); }\n     move v\n }\n@@ -1052,9 +1052,9 @@ pub fn swap<T>(v: &[mut T], a: uint, b: uint) {\n \n /// Reverse the order of elements in a vector, in place\n pub fn reverse<T>(v: &[mut T]) {\n-    let mut i: uint = 0u;\n+    let mut i: uint = 0;\n     let ln = len::<T>(v);\n-    while i < ln / 2u { v[i] <-> v[ln - i - 1u]; i += 1u; }\n+    while i < ln / 2 { v[i] <-> v[ln - i - 1]; i += 1; }\n }\n \n /// Returns a vector with the order of elements reversed"}, {"sha": "2f4c9a4eb06f415b838b0b32802f60e0a5beb491", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -99,7 +99,7 @@ pub fn clone<T: Const Send>(rc: &ARC<T>) -> ARC<T> {\n  * guaranteed to deadlock.\n  */\n fn unwrap<T: Const Send>(rc: ARC<T>) -> T {\n-    let ARC { x: x } <- rc;\n+    let ARC { x: x } = move rc;\n     unsafe { unwrap_shared_mutable_state(move x) }\n }\n \n@@ -192,9 +192,9 @@ impl<T: Send> &MutexARC<T> {\n  */\n // FIXME(#3724) make this a by-move method on the arc\n pub fn unwrap_mutex_arc<T: Send>(arc: MutexARC<T>) -> T {\n-    let MutexARC { x: x } <- arc;\n+    let MutexARC { x: x } = move arc;\n     let inner = unsafe { unwrap_shared_mutable_state(move x) };\n-    let MutexARCInner { failed: failed, data: data, _ } <- inner;\n+    let MutexARCInner { failed: failed, data: data, _ } = move inner;\n     if failed {\n         fail ~\"Can't unwrap poisoned MutexARC - another task failed inside!\"\n     }\n@@ -347,7 +347,7 @@ impl<T: Const Send> &RWARC<T> {\n     fn downgrade(token: RWWriteMode/&a<T>) -> RWReadMode/&a<T> {\n         // The rwlock should assert that the token belongs to us for us.\n         let state = unsafe { get_shared_immutable_state(&self.x) };\n-        let RWWriteMode((data, t, _poison)) <- token;\n+        let RWWriteMode((data, t, _poison)) = move token;\n         // Let readers in\n         let new_token = (&state.lock).downgrade(move t);\n         // Whatever region the input reference had, it will be safe to use\n@@ -370,9 +370,9 @@ impl<T: Const Send> &RWARC<T> {\n  */\n // FIXME(#3724) make this a by-move method on the arc\n pub fn unwrap_rw_arc<T: Const Send>(arc: RWARC<T>) -> T {\n-    let RWARC { x: x, _ } <- arc;\n+    let RWARC { x: x, _ } = move arc;\n     let inner = unsafe { unwrap_shared_mutable_state(move x) };\n-    let RWARCInner { failed: failed, data: data, _ } <- inner;\n+    let RWARCInner { failed: failed, data: data, _ } = move inner;\n     if failed {\n         fail ~\"Can't unwrap poisoned RWARC - another task failed inside!\"\n     }"}, {"sha": "0ee7cb6fcf967c769c8e243913a17ab6fb7e143d", "filename": "src/libstd/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -173,7 +173,7 @@ pub mod chained {\n                 entry.next = new_chains[idx];\n                 new_chains[idx] = Some(entry);\n             }\n-            self.chains <- new_chains;\n+            self.chains = move new_chains;\n         }\n \n         pure fn each_entry(blk: fn(@Entry<K,V>) -> bool) {"}, {"sha": "8c8971b7eb75bd603d6b9251a4a353b088793299", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -15,18 +15,18 @@ type Le<T> = pure fn(v1: &T, v2: &T) -> bool;\n pub fn merge_sort<T: Copy>(le: Le<T>, v: &[const T]) -> ~[T] {\n     type Slice = (uint, uint);\n \n-    return merge_sort_(le, v, (0u, len(v)));\n+    return merge_sort_(le, v, (0, len(v)));\n \n     fn merge_sort_<T: Copy>(le: Le<T>, v: &[const T], slice: Slice)\n         -> ~[T] {\n         let begin = slice.first();\n         let end = slice.second();\n \n         let v_len = end - begin;\n-        if v_len == 0u { return ~[]; }\n-        if v_len == 1u { return ~[v[begin]]; }\n+        if v_len == 0 { return ~[]; }\n+        if v_len == 1 { return ~[v[begin]]; }\n \n-        let mid = v_len / 2u + begin;\n+        let mid = v_len / 2 + begin;\n         let a = (begin, mid);\n         let b = (mid, end);\n         return merge(le, merge_sort_(le, v, a), merge_sort_(le, v, b));\n@@ -35,14 +35,14 @@ pub fn merge_sort<T: Copy>(le: Le<T>, v: &[const T]) -> ~[T] {\n     fn merge<T: Copy>(le: Le<T>, a: &[T], b: &[T]) -> ~[T] {\n         let mut rs = vec::with_capacity(len(a) + len(b));\n         let a_len = len(a);\n-        let mut a_ix = 0u;\n+        let mut a_ix = 0;\n         let b_len = len(b);\n-        let mut b_ix = 0u;\n+        let mut b_ix = 0;\n         while a_ix < a_len && b_ix < b_len {\n             if le(&a[a_ix], &b[b_ix]) {\n                 rs.push(a[a_ix]);\n-                a_ix += 1u;\n-            } else { rs.push(b[b_ix]); b_ix += 1u; }\n+                a_ix += 1;\n+            } else { rs.push(b[b_ix]); b_ix += 1; }\n         }\n         rs = vec::append(rs, vec::slice(a, a_ix, a_len));\n         rs = vec::append(rs, vec::slice(b, b_ix, b_len));\n@@ -59,9 +59,9 @@ fn part<T: Copy>(compare_func: Le<T>, arr: &[mut T], left: uint,\n     while i < right {\n         if compare_func(&arr[i], &pivot_value) {\n             arr[i] <-> arr[storage_index];\n-            storage_index += 1u;\n+            storage_index += 1;\n         }\n-        i += 1u;\n+        i += 1;\n     }\n     arr[storage_index] <-> arr[right];\n     return storage_index;\n@@ -70,13 +70,13 @@ fn part<T: Copy>(compare_func: Le<T>, arr: &[mut T], left: uint,\n fn qsort<T: Copy>(compare_func: Le<T>, arr: &[mut T], left: uint,\n              right: uint) {\n     if right > left {\n-        let pivot = (left + right) / 2u;\n+        let pivot = (left + right) / 2;\n         let new_pivot = part::<T>(compare_func, arr, left, right, pivot);\n-        if new_pivot != 0u {\n+        if new_pivot != 0 {\n             // Need to do this check before recursing due to overflow\n-            qsort::<T>(compare_func, arr, left, new_pivot - 1u);\n+            qsort::<T>(compare_func, arr, left, new_pivot - 1);\n         }\n-        qsort::<T>(compare_func, arr, new_pivot + 1u, right);\n+        qsort::<T>(compare_func, arr, new_pivot + 1, right);\n     }\n }\n \n@@ -87,8 +87,8 @@ fn qsort<T: Copy>(compare_func: Le<T>, arr: &[mut T], left: uint,\n  * This is an unstable sort.\n  */\n pub fn quick_sort<T: Copy>(compare_func: Le<T>, arr: &[mut T]) {\n-    if len::<T>(arr) == 0u { return; }\n-    qsort::<T>(compare_func, arr, 0u, len::<T>(arr) - 1u);\n+    if len::<T>(arr) == 0 { return; }\n+    qsort::<T>(compare_func, arr, 0, len::<T>(arr) - 1);\n }\n \n fn qsort3<T: Copy Ord Eq>(arr: &[mut T], left: int, right: int) {\n@@ -167,11 +167,11 @@ mod test_qsort3 {\n     fn check_sort(v1: &[mut int], v2: &[mut int]) {\n         let len = vec::len::<int>(v1);\n         quick_sort3::<int>(v1);\n-        let mut i = 0u;\n+        let mut i = 0;\n         while i < len {\n             log(debug, v2[i]);\n             assert (v2[i] == v1[i]);\n-            i += 1u;\n+            i += 1;\n         }\n     }\n \n@@ -208,11 +208,11 @@ mod test_qsort {\n         let len = vec::len::<int>(v1);\n         pure fn leual(a: &int, b: &int) -> bool { *a <= *b }\n         quick_sort::<int>(leual, v1);\n-        let mut i = 0u;\n+        let mut i = 0;\n         while i < len {\n             log(debug, v2[i]);\n             assert (v2[i] == v1[i]);\n-            i += 1u;\n+            i += 1;\n         }\n     }\n \n@@ -270,11 +270,11 @@ mod tests {\n         pub pure fn le(a: &int, b: &int) -> bool { *a <= *b }\n         let f = le;\n         let v3 = merge_sort::<int>(f, v1);\n-        let mut i = 0u;\n+        let mut i = 0;\n         while i < len {\n             log(debug, v3[i]);\n             assert (v3[i] == v2[i]);\n-            i += 1u;\n+            i += 1;\n         }\n     }\n "}, {"sha": "43d1c9664a51f652c36b40db5a3ad9b697f4e064", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -768,7 +768,7 @@ mod tests {\n     #[test]\n     fn test_mutex_lock() {\n         // Unsafely achieve shared state, and do the textbook\n-        // \"load tmp <- ptr; inc tmp; store ptr <- tmp\" dance.\n+        // \"load tmp = move ptr; inc tmp; store ptr <- tmp\" dance.\n         let (c,p) = pipes::stream();\n         let m = ~Mutex();\n         let m2 = ~m.clone();"}, {"sha": "550da39cb11eab8927943d3f30768d3d8ff70abf", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -1,3 +1,4 @@\n+// xfail-pretty\n // Microbenchmarks for various functions in core and std\n \n extern mod std;"}, {"sha": "da891b376e3020b4ad260959944d0fa9af2cecc5", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -19,7 +19,7 @@ use io::WriterUtil;\n use pipes::{Port, Chan, SharedChan};\n \n macro_rules! move_out (\n-    { $x:expr } => { unsafe { let y <- *ptr::addr_of(&($x)); move y } }\n+    { $x:expr } => { unsafe { let y = move *ptr::addr_of(&($x)); move y } }\n )\n \n enum request {"}, {"sha": "041094adcd50db7b9f61d936e61a77896b2d5797", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -15,7 +15,7 @@ use io::WriterUtil;\n use pipes::{Port, PortSet, Chan};\n \n macro_rules! move_out (\n-    { $x:expr } => { unsafe { let y <- *ptr::addr_of(&($x)); move y } }\n+    { $x:expr } => { unsafe { let y = move *ptr::addr_of(&($x)); move y } }\n )\n \n enum request {"}, {"sha": "ac0043b7309f54d83795385c66ee975150e80b6e", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -41,8 +41,8 @@ fn thread_ring(i: uint,\n                count: uint,\n                +num_chan: pipe,\n                +num_port: pipe) {\n-    let mut num_chan <- Some(move num_chan);\n-    let mut num_port <- Some(move num_port);\n+    let mut num_chan = move Some(move num_chan);\n+    let mut num_port = move Some(move num_port);\n     // Send/Receive lots of messages.\n     for uint::range(0u, count) |j| {\n         //error!(\"task %?, iter %?\", i, j);"}, {"sha": "85e46bfcaec269938434fe8bc33df6e33e22d2bc", "filename": "src/test/bench/msgsend-ring-pipes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -24,16 +24,16 @@ proto! ring (\n fn macros() {\n     #macro[\n         [#move_out[x],\n-         unsafe { let y <- *ptr::addr_of(&x); move y }]\n+         unsafe { let y = move *ptr::addr_of(&x); move y }]\n     ];\n }\n \n fn thread_ring(i: uint,\n                count: uint,\n                +num_chan: ring::client::num,\n                +num_port: ring::server::num) {\n-    let mut num_chan <- Some(move num_chan);\n-    let mut num_port <- Some(move num_port);\n+    let mut num_chan = move Some(move num_chan);\n+    let mut num_port = move Some(move num_port);\n     // Send/Receive lots of messages.\n     for uint::range(0, count) |j| {\n         //error!(\"task %?, iter %?\", i, j);"}, {"sha": "f5c6a49a3646f36d34c1191257bae792cf030416", "filename": "src/test/bench/msgsend-ring-rw-arcs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -41,8 +41,8 @@ fn thread_ring(i: uint,\n                count: uint,\n                +num_chan: pipe,\n                +num_port: pipe) {\n-    let mut num_chan <- Some(move num_chan);\n-    let mut num_port <- Some(move num_port);\n+    let mut num_chan = move Some(move num_chan);\n+    let mut num_port = move Some(move num_port);\n     // Send/Receive lots of messages.\n     for uint::range(0u, count) |j| {\n         //error!(\"task %?, iter %?\", i, j);"}, {"sha": "fc2025511947bc0a59886f41d6ed4e3413a545c4", "filename": "src/test/bench/pingpong.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fbench%2Fpingpong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fbench%2Fpingpong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fpingpong.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -33,7 +33,7 @@ proto! pingpong_unbounded (\n \n // This stuff should go in libcore::pipes\n macro_rules! move_it (\n-    { $x:expr } => { let t <- *ptr::addr_of(&($x)); move t }\n+    { $x:expr } => { let t = move *ptr::addr_of(&($x)); move t }\n )\n \n macro_rules! follow ("}, {"sha": "383bc9bd79bf3973d4dfd7503e0a7252982e8a8d", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -30,7 +30,7 @@ use cmp::Eq;\n use to_bytes::IterBytes;\n \n macro_rules! move_out (\n-    { $x:expr } => { unsafe { let y <- *ptr::addr_of(&($x)); move y } }\n+    { $x:expr } => { unsafe { let y = move *ptr::addr_of(&($x)); move y } }\n )\n \n trait word_reader {"}, {"sha": "5d0ee52e64ab893fa8100ec7d4ddcb6730da11d4", "filename": "src/test/compile-fail/block-deinitializes-upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fcompile-fail%2Fblock-deinitializes-upvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fcompile-fail%2Fblock-deinitializes-upvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-deinitializes-upvar.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -4,5 +4,5 @@ fn main() {\n     let mut x = @{x: 17, y: 2};\n     let y = @{x: 5, y: 5};\n \n-    force(|| x <- y );\n+    force(|| x = move y );\n }"}, {"sha": "a7b78317e44732bd4b526ccbede4a7217b071d57", "filename": "src/test/compile-fail/borrowck-issue-2657-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-1.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -2,7 +2,7 @@ fn main() {\n let x = Some(~1);\n match x { //~ NOTE loan of immutable local variable granted here\n   Some(ref _y) => {\n-    let _a <- x; //~ ERROR moving out of immutable local variable prohibited due to outstanding loan\n+    let _a = move x; //~ ERROR moving out of immutable local variable prohibited due to outstanding loan\n   }\n   _ => {}\n }"}, {"sha": "019ae31609888b3cf4b8683a7624cf804b0d0cf0", "filename": "src/test/compile-fail/borrowck-issue-2657-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-2.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -2,7 +2,7 @@ fn main() {\n let x = Some(~1);\n match x {\n   Some(ref y) => {\n-    let _b <- *y; //~ ERROR moving out of dereference of immutable & pointer\n+    let _b = move *y; //~ ERROR moving out of dereference of immutable & pointer\n   }\n   _ => {}\n }"}, {"sha": "ce500492aea9435995763b5b23faf3a5134bccc5", "filename": "src/test/compile-fail/borrowck-move-from-unsafe-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-unsafe-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-unsafe-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-unsafe-ptr.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -1,5 +1,5 @@\n fn foo(x: *~int) -> ~int {\n-    let y <- *x; //~ ERROR dereference of unsafe pointer requires unsafe function or block\n+    let y = move *x; //~ ERROR dereference of unsafe pointer requires unsafe function or block\n     return y;\n }\n "}, {"sha": "c91c4819661ebf1cef8c95015ee543a797121cad", "filename": "src/test/compile-fail/borrowck-no-cycle-in-exchange-heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fcompile-fail%2Fborrowck-no-cycle-in-exchange-heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fcompile-fail%2Fborrowck-no-cycle-in-exchange-heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-no-cycle-in-exchange-heap.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -7,7 +7,7 @@ fn main() {\n     // Create a cycle!\n     match *x { //~ NOTE loan of immutable local variable granted here\n       node(ref y) => {\n-        y.a <- x; //~ ERROR moving out of immutable local variable prohibited due to outstanding loan\n+        y.a = move x; //~ ERROR moving out of immutable local variable prohibited due to outstanding loan\n       }\n       empty => {}\n     };"}, {"sha": "dc9237e6318003fbbccc2ca6ce8b7223ac865939", "filename": "src/test/compile-fail/copy-a-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -11,4 +11,4 @@ fn foo(i:int) -> foo {\n     }\n }\n \n-fn main() { let x <- foo(10); let y = x; log(error, x); }\n+fn main() { let x = move foo(10); let y = x; log(error, x); }"}, {"sha": "33886b289347f404738869bd8734afc1b07cdc27", "filename": "src/test/compile-fail/issue-2548.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -21,7 +21,7 @@ fn main() {\n         let mut res = foo(x);\n         \n         let mut v = ~[mut];\n-        v <- ~[mut (move res)] + v; //~ ERROR instantiating a type parameter with an incompatible type (needs `copy`, got `owned`, missing `copy`)\n+        v = move ~[mut (move res)] + v; //~ ERROR instantiating a type parameter with an incompatible type (needs `copy`, got `owned`, missing `copy`)\n         assert (v.len() == 2);\n     }\n "}, {"sha": "091112a3150ead9f9e306a24a0e68ff5beef6dd9", "filename": "src/test/compile-fail/liveness-move-in-loop.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-loop.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -7,8 +7,11 @@ fn main() {\n         loop {\n             loop {\n                 loop {\n-                    x <- y; //~ ERROR use of moved variable\n+// tjc: Not sure why it prints the same error twice\n+                    x = move y; //~ ERROR use of moved variable\n                     //~^ NOTE move of variable occurred here\n+                    //~^^ ERROR use of moved variable\n+                    //~^^^ NOTE move of variable occurred here\n \n                     copy x;\n                 }"}, {"sha": "66ca21534b3ea8dda3693911ce75b6c81f7edbf4", "filename": "src/test/compile-fail/liveness-move-in-while.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-while.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -4,8 +4,11 @@ fn main() {\n     let mut x: int;\n     loop {\n         log(debug, y);\n-        while true { while true { while true { x <- y; copy x; } } }\n+// tjc: not sure why it prints the same error twice\n+        while true { while true { while true { x = move y; copy x; } } }\n         //~^ ERROR use of moved variable: `y`\n         //~^^ NOTE move of variable occurred here\n+        //~^^^ ERROR use of moved variable: `y`\n+        //~^^^^ NOTE move of variable occurred here\n     }\n }"}, {"sha": "39068635a06f4e93dfd1d4e5740ea2db56ba0c7f", "filename": "src/test/compile-fail/liveness-use-after-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let x = @5;\n-    let y <- x; //~ NOTE move of variable occurred here\n+    let y = move x; //~ NOTE move of variable occurred here\n     log(debug, *x); //~ ERROR use of moved variable: `x`\n     copy y;\n }"}, {"sha": "af43fe66b4b30468315827143042ae69ed76eace", "filename": "src/test/compile-fail/noncopyable-class.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -25,4 +25,4 @@ fn foo(i:int) -> foo {\n     }\n }\n \n-fn main() { let x <- foo(10); let y = x; log(error, x); }\n+fn main() { let x = move foo(10); let y = x; log(error, x); }"}, {"sha": "4be54708428788af3a5683bae0c6621d8a3265d7", "filename": "src/test/compile-fail/obsolete-syntax.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fcompile-fail%2Fobsolete-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fcompile-fail%2Fobsolete-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobsolete-syntax.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -67,4 +67,12 @@ fn obsolete_fixed_length_vec() {\n     //~^ ERROR obsolete syntax: fixed-length vector\n }\n \n+fn obsolete_moves() {\n+    let mut x = 0;\n+    let y <- x;\n+    //~^ ERROR obsolete syntax: initializer-by-move\n+    y <- x; \n+    //~^ ERROR obsolete syntax: binary move\n+}\n+\n fn main() { }"}, {"sha": "83d1b8393e8546f7da167e8ce076116ced84df98", "filename": "src/test/compile-fail/unique-pinned-nocopy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -6,7 +6,7 @@ struct r {\n }\n \n fn main() {\n-    let i <- ~r { b: true };\n+    let i = move ~r { b: true };\n     let j = i;\n     log(debug, i);\n }\n\\ No newline at end of file"}, {"sha": "c89a61f12205cea9952d9aa986f57b83cd9cbaca", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -12,8 +12,8 @@ fn f<T>(+i: ~[T], +j: ~[T]) {\n fn main() {\n     let i1 = @mut 0;\n     let i2 = @mut 1;\n-    let r1 <- ~[~r { i: i1 }];\n-    let r2 <- ~[~r { i: i2 }];\n+    let r1 = move ~[~r { i: i1 }];\n+    let r2 = move ~[~r { i: i2 }];\n     f(r1, r2);\n     log(debug, (r2, *i1));\n     log(debug, (r1, *i2));"}, {"sha": "737f0382b6260c556bc09e7c8eda45827716752f", "filename": "src/test/compile-fail/vec-res-add.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -9,8 +9,8 @@ struct r {\n \n fn main() {\n     // This can't make sense as it would copy the classes\n-    let i <- ~[r(0)];\n-    let j <- ~[r(1)];\n+    let i = move ~[r(0)];\n+    let j = move ~[r(1)];\n     let k = i + j;\n     log(debug, j);\n }"}, {"sha": "076f1280f9669f5e14362e3ad34fc033523c8bb1", "filename": "src/test/run-fail/unwind-resource-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -8,5 +8,5 @@ class r {\n \n fn main() {\n     @0;\n-    let r <- r(0);\n+    let r = move r(0);\n }\n\\ No newline at end of file"}, {"sha": "5f89f4cd9850f8922584abd70554ff6a4ec73e0c", "filename": "src/test/run-fail/unwind-resource-fail2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-fail%2Funwind-resource-fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-fail%2Funwind-resource-fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-resource-fail2.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -8,6 +8,6 @@ class r {\n \n fn main() {\n     @0;\n-    let r <- r(0);\n+    let r = move r(0);\n     fail;\n }\n\\ No newline at end of file"}, {"sha": "0bcfba6c4a841bfa3014bf5a87dbcdc4a2c4c31f", "filename": "src/test/run-pass/borrowck-move-from-unsafe-ptr-ok.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fborrowck-move-from-unsafe-ptr-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fborrowck-move-from-unsafe-ptr-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-move-from-unsafe-ptr-ok.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -2,7 +2,7 @@\n \n fn bar(x: *~int) -> ~int {\n     unsafe {\n-        let y <- *x;\n+        let y = move *x;\n         return y;\n     }\n }"}, {"sha": "2fb9afceb3d5875b4e86bc6a9121b0ba73c5640a", "filename": "src/test/run-pass/borrowck-mut-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -5,7 +5,7 @@ fn add_int(x: &mut ints, v: int) {\n     let mut values = ~[];\n     x.values <-> values;\n     values.push(v);\n-    x.values <- values;\n+    x.values <-> values;\n }\n \n fn iter_ints(x: &ints, f: fn(x: &int) -> bool) {"}, {"sha": "f881ed61671f93a8ea761ed59dc6337b8520ab12", "filename": "src/test/run-pass/import-glob-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fimport-glob-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fimport-glob-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-1.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -7,15 +7,15 @@ mod a1 {\n         #[legacy_exports];\n         //\n         use a2::b1::*;\n-        //         <-\\\n+        //         = move\\\n         export word_traveler; //           |\n     }\n     //           |\n     mod b2 {\n         #[legacy_exports];\n         //           |\n         use a2::b2::*;\n-        // <-\\  -\\   |\n+        // = move\\  -\\   |\n         export word_traveler; //   |   |   |\n     } //   |   |   |\n }\n@@ -30,7 +30,7 @@ mod a2 {\n         #[legacy_exports];\n         //   |   |   |\n         use a1::b2::*;\n-        //   | <-/  -/\n+        //   | = move/  -/\n         export word_traveler; //   |\n     }\n     //   |"}, {"sha": "ca03c0736a2d0e1fbb68531ca9adf3c0b1e9f305", "filename": "src/test/run-pass/init-res-into-things.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -15,15 +15,15 @@ fn r(i: @mut int) -> r {\n fn test_box() {\n     let i = @mut 0;\n     {\n-        let a <- @r(i);\n+        let a = move @r(i);\n     }\n     assert *i == 1;\n }\n \n fn test_rec() {\n     let i = @mut 0;\n     {\n-        let a <- {x: r(i)};\n+        let a = move {x: r(i)};\n     }\n     assert *i == 1;\n }\n@@ -35,31 +35,31 @@ fn test_tag() {\n \n     let i = @mut 0;\n     {\n-        let a <- t0(r(i));\n+        let a = move t0(r(i));\n     }\n     assert *i == 1;\n }\n \n fn test_tup() {\n     let i = @mut 0;\n     {\n-        let a <- (r(i), 0);\n+        let a = move (r(i), 0);\n     }\n     assert *i == 1;\n }\n \n fn test_unique() {\n     let i = @mut 0;\n     {\n-        let a <- ~r(i);\n+        let a = move ~r(i);\n     }\n     assert *i == 1;\n }\n \n fn test_box_rec() {\n     let i = @mut 0;\n     {\n-        let a <- @{\n+        let a = move @{\n             x: r(i)\n         };\n     }"}, {"sha": "8913ac3d304934ce642ce7e6d5089e135cf3f2eb", "filename": "src/test/run-pass/issue-2185.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2185.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -24,9 +24,9 @@ fn filter<A,IA:iterable<A>>(self: IA, prd: fn@(A) -> bool, blk: fn(A)) {\n }\n \n fn foldl<A,B,IA:iterable<A>>(self: IA, +b0: B, blk: fn(B, A) -> B) -> B {\n-    let mut b <- b0;\n+    let mut b = move b0;\n     do self.iter |a| {\n-        b <- blk(b, a);\n+        b = move blk(b, a);\n     }\n     move b\n }"}, {"sha": "7b8ff9b86b028de752ad17b24c4fdf3c1ebf784a", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -63,7 +63,7 @@ mod pipes {\n         let p = p.unwrap();\n         let p = unsafe { uniquify(p) };\n         assert (*p).payload.is_none();\n-        (*p).payload <- Some(move payload);\n+        (*p).payload = move Some(move payload);\n         let old_state = swap_state_rel(&mut (*p).state, full);\n         match old_state {\n           empty => {\n@@ -205,7 +205,7 @@ mod pingpong {\n         let addr : *pipes::send_packet<pong> = match p {\n           ping(x) => { cast::transmute(ptr::addr_of(&x)) }\n         };\n-        let liberated_value <- *addr;\n+        let liberated_value = move *addr;\n         cast::forget(move p);\n         move liberated_value\n     }\n@@ -214,7 +214,7 @@ mod pingpong {\n         let addr : *pipes::send_packet<ping> = match p {\n           pong(x) => { cast::transmute(ptr::addr_of(&x)) }\n         };\n-        let liberated_value <- *addr;\n+        let liberated_value = move *addr;\n         cast::forget(move p);\n         move liberated_value\n     }"}, {"sha": "f485a8c6ec2ad49fedfbb1af9143d4b928e66b51", "filename": "src/test/run-pass/move-1-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fmove-1-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fmove-1-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-1-unique.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -2,7 +2,7 @@\n fn test(x: bool, foo: ~{x: int, y: int, z: int}) -> int {\n     let bar = foo;\n     let mut y: ~{x: int, y: int, z: int};\n-    if x { y <- bar; } else { y = ~{x: 4, y: 5, z: 6}; }\n+    if x { y = move bar; } else { y = ~{x: 4, y: 5, z: 6}; }\n     return y.y;\n }\n "}, {"sha": "6a1576dd878a9140fa4cb95a4e831dca87a06cfd", "filename": "src/test/run-pass/move-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fmove-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fmove-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-1.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -1,7 +1,7 @@\n fn test(x: bool, foo: @{x: int, y: int, z: int}) -> int {\n     let bar = foo;\n     let mut y: @{x: int, y: int, z: int};\n-    if x { y <- bar; } else { y = @{x: 4, y: 5, z: 6}; }\n+    if x { y = move bar; } else { y = @{x: 4, y: 5, z: 6}; }\n     return y.y;\n }\n "}, {"sha": "30e47677c948a3cbfc29fb3f52e28054b6886a30", "filename": "src/test/run-pass/move-2-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fmove-2-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fmove-2-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-2-unique.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -1,3 +1,3 @@\n \n \n-fn main() { let x = ~{x: 1, y: 2, z: 3}; let y <- x; assert (y.y == 2); }\n+fn main() { let x = ~{x: 1, y: 2, z: 3}; let y = move x; assert (y.y == 2); }"}, {"sha": "58cd2e66612fbe015309e370bc4cedf0cb93a156", "filename": "src/test/run-pass/move-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fmove-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fmove-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-2.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -1,3 +1,3 @@\n \n \n-fn main() { let x = @{x: 1, y: 2, z: 3}; let y <- x; assert (y.y == 2); }\n+fn main() { let x = @{x: 1, y: 2, z: 3}; let y = move x; assert (y.y == 2); }"}, {"sha": "08dbee5363704c21b4e73678d44e9d93657d2af6", "filename": "src/test/run-pass/move-3-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -3,7 +3,7 @@ extern mod std;\n fn test(x: bool, foo: ~{x: int, y: int, z: int}) -> int {\n     let bar = foo;\n     let mut y: ~{x: int, y: int, z: int};\n-    if x { y <- bar; } else { y = ~{x: 4, y: 5, z: 6}; }\n+    if x { y = move bar; } else { y = ~{x: 4, y: 5, z: 6}; }\n     return y.y;\n }\n "}, {"sha": "26fd010b549b4fa33946fb6944901c44a890cee3", "filename": "src/test/run-pass/move-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fmove-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fmove-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-3.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -3,7 +3,7 @@ extern mod std;\n fn test(x: bool, foo: @{x: int, y: int, z: int}) -> int {\n     let bar = foo;\n     let mut y: @{x: int, y: int, z: int};\n-    if x { y <- bar; } else { y = @{x: 4, y: 5, z: 6}; }\n+    if x { y = move bar; } else { y = @{x: 4, y: 5, z: 6}; }\n     return y.y;\n }\n "}, {"sha": "c4c84c8e10ca7e0bc2132a0711b2aa1146d9bff2", "filename": "src/test/run-pass/move-4-unique.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fmove-4-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fmove-4-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-4-unique.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -2,9 +2,9 @@ extern mod std;\n \n fn test(foo: ~{a: int, b: int, c: int}) -> ~{a: int, b: int, c: int} {\n     let foo = foo;\n-    let bar <- foo;\n-    let baz <- bar;\n-    let quux <- baz;\n+    let bar = move foo;\n+    let baz = move bar;\n+    let quux = move baz;\n     return quux;\n }\n "}, {"sha": "6eaa2bf2a44f100a5a70aa46edddc44b6016bdcc", "filename": "src/test/run-pass/move-4.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fmove-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fmove-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-4.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -3,9 +3,9 @@ extern mod std;\n \n fn test(foo: @{a: int, b: int, c: int}) -> @{a: int, b: int, c: int} {\n     let foo = foo;\n-    let bar <- foo;\n-    let baz <- bar;\n-    let quux <- baz;\n+    let bar = move foo;\n+    let baz = move bar;\n+    let quux = move baz;\n     return quux;\n }\n "}, {"sha": "eef51c81cf4e62dcae63200501341ffc5c2a0737", "filename": "src/test/run-pass/move-scalar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fmove-scalar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fmove-scalar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-scalar.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -2,6 +2,6 @@ fn main() {\n \n     let y: int = 42;\n     let mut x: int;\n-    x <- y;\n+    x = move y;\n     assert (x == 42);\n }"}, {"sha": "7d7de6d120dce29bbe969c5c34ff9e5888776a64", "filename": "src/test/run-pass/pipe-bank-proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -33,7 +33,7 @@ proto! bank (\n )\n \n macro_rules! move_it (\n-    { $x:expr } => { unsafe { let y <- *ptr::addr_of(&($x)); move y } }\n+    { $x:expr } => { unsafe { let y = move *ptr::addr_of(&($x)); move y } }\n )\n \n fn switch<T: Send, U>(+endp: pipes::RecvPacket<T>,"}, {"sha": "2d3110c4518579fcf81533c6693bbfe39fcb8a3b", "filename": "src/test/run-pass/resource-destruct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-destruct.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -15,7 +15,7 @@ fn shrinky_pointer(i: @@mut int) -> shrinky_pointer {\n \n fn main() {\n     let my_total = @@mut 10;\n-    { let pt <- shrinky_pointer(my_total); assert (pt.look_at() == 10); }\n+    { let pt = move shrinky_pointer(my_total); assert (pt.look_at() == 10); }\n     log(error, fmt!(\"my_total = %d\", **my_total));\n     assert (**my_total == 9);\n }"}, {"sha": "f109775dd7b50faa1871368dba3e777bf4928526", "filename": "src/test/run-pass/resource-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fresource-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fresource-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-generic.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -16,6 +16,6 @@ fn main() {\n     let box = @mut 10;\n     fn dec_box(&&i: @mut int) { *i -= 1; }\n \n-    { let _i <- finish({val: box, fin: dec_box}); }\n+    { let _i = move finish({val: box, fin: dec_box}); }\n     assert (*box == 9);\n }"}, {"sha": "cde412a11436e77e28a9a6a91a9a3a55d2448e27", "filename": "src/test/run-pass/unique-decl-move-temp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Funique-decl-move-temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Funique-decl-move-temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-decl-move-temp.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n-    let i <- ~100;\n+    let i = move ~100;\n     assert *i == 100;\n }\n\\ No newline at end of file"}, {"sha": "e4a46fb06afb23810864c2d937743d5ce3ba5e3d", "filename": "src/test/run-pass/unique-decl-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Funique-decl-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Funique-decl-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-decl-move.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let i = ~100;\n-    let j <- i;\n+    let j = move i;\n     assert *j == 100;\n }\n\\ No newline at end of file"}, {"sha": "8ef1af7bb10f81216904b8b8ae90d0edbdd5a80c", "filename": "src/test/run-pass/unique-move-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Funique-move-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Funique-move-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-move-drop.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let i = ~100;\n     let j = ~200;\n-    let j <- i;\n+    let j = move i;\n     assert *j == 100;\n }\n\\ No newline at end of file"}, {"sha": "ca4409ac2aba0a3fd2182e1388130b66c0e72abb", "filename": "src/test/run-pass/unique-move-temp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Funique-move-temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Funique-move-temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-move-temp.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let mut i;\n-    i <- ~100;\n+    i = move ~100;\n     assert *i == 100;\n }\n\\ No newline at end of file"}, {"sha": "b81338a4d2560b5e9cfee78107d9fe65fbeb7125", "filename": "src/test/run-pass/unique-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Funique-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Funique-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-move.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let i = ~100;\n     let mut j;\n-    j <- i;\n+    j = move i;\n     assert *j == 100;\n }\n\\ No newline at end of file"}, {"sha": "11cf1fe85f9de48cbdfab96063bd67e17ccb28f9", "filename": "src/test/run-pass/unreachable-code-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Funreachable-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Funreachable-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funreachable-code-1.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -3,7 +3,7 @@\n fn id(x: bool) -> bool { x }\n \n fn call_id() {\n-    let c <- fail;\n+    let c = move fail;\n     id(c); //~ WARNING unreachable statement\n }\n "}, {"sha": "9d34e7a8dc68a524791a041e90d7d469cd0fe734", "filename": "src/test/run-pass/unreachable-code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Funreachable-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Funreachable-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funreachable-code.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -3,7 +3,7 @@\n fn id(x: bool) -> bool { x }\n \n fn call_id() {\n-    let c <- fail;\n+    let c = move fail;\n     id(c);\n }\n "}, {"sha": "a03564d0801ca02f7afbc1a83226800626eecb40", "filename": "src/test/run-pass/unwind-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -16,7 +16,7 @@ fn complainer(c: comm::Chan<bool>) -> complainer {\n }\n \n fn f(c: comm::Chan<bool>) {\n-    let _c <- complainer(c);\n+    let _c = move complainer(c);\n     fail;\n }\n "}, {"sha": "1470d7d7169dcb68c69c3d3f89541f4fcccba04c", "filename": "src/test/run-pass/unwind-resource2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource2.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -13,7 +13,7 @@ fn complainer(c: @int) -> complainer {\n }\n \n fn f() {\n-    let c <- complainer(@0);\n+    let c = move complainer(@0);\n     fail;\n }\n "}, {"sha": "679ed99d1629c37a3a62e85355ed5a93ae356ed7", "filename": "src/test/run-pass/weird-exprs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fweird-exprs.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -40,7 +40,7 @@ fn zombiejesus() {\n fn notsure() {\n     let mut _x;\n     let mut _y = (_x = 0) == (_x = 0);\n-    let mut _z = (_x <- 0) < (_x = 0);\n+    let mut _z = (_x = move 0) < (_x = 0);\n     let _a = (_x += 0) == (_x = 0);\n     let _b = (_y <-> _z) == (_y <-> _z);\n }\n@@ -63,7 +63,7 @@ fn angrydome() {\n       break; }\n }\n \n-fn evil_lincoln() { let evil <- debug!(\"lincoln\"); }\n+fn evil_lincoln() { let evil = move debug!(\"lincoln\"); }\n \n fn main() {\n     strange();"}, {"sha": "83f49b960c0bccd6e38ae64a4d16554d1a9b3c6a", "filename": "src/test/run-pass/while-loop-constraints-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fwhile-loop-constraints-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e92f37c13194ad5c1f82a980e7f7ee02345801/src%2Ftest%2Frun-pass%2Fwhile-loop-constraints-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-loop-constraints-2.rs?ref=11e92f37c13194ad5c1f82a980e7f7ee02345801", "patch": "@@ -5,7 +5,7 @@ fn main() {\n     let mut x: int;\n     while z < 50 {\n         z += 1;\n-        while false { x <- y; y = z; }\n+        while false { x = move y; y = z; }\n         log(debug, y);\n     }\n     assert (y == 42 && z == 50);"}]}