{"sha": "1b7ec76c16b18b01acd07f987db488a642492049", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiN2VjNzZjMTZiMThiMDFhY2QwN2Y5ODdkYjQ4OGE2NDI0OTIwNDk=", "commit": {"author": {"name": "Tom Eccles", "email": "tom.eccles@codethink.co.uk", "date": "2020-05-28T15:27:56Z"}, "committer": {"name": "Tom Eccles", "email": "tom.eccles@codethink.co.uk", "date": "2020-06-02T13:00:18Z"}, "message": "tools/remote-test-{server,client}: support RUST_TEST_TMPDIR\n\nSome tests (e.g. ui-fulldeps/create-dir-all-bare.rs) assume that\nRUST_TEST_TMPDIR exists on the system running the test. Expand\nremote-test-{server,client} such that a tmp directory is created on the\nremote runner and this environment variable will point at it.", "tree": {"sha": "ed4961c72107e0178397328e865d4c291d79d8e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed4961c72107e0178397328e865d4c291d79d8e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b7ec76c16b18b01acd07f987db488a642492049", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b7ec76c16b18b01acd07f987db488a642492049", "html_url": "https://github.com/rust-lang/rust/commit/1b7ec76c16b18b01acd07f987db488a642492049", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b7ec76c16b18b01acd07f987db488a642492049/comments", "author": {"login": "tblah", "id": 3716681, "node_id": "MDQ6VXNlcjM3MTY2ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/3716681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tblah", "html_url": "https://github.com/tblah", "followers_url": "https://api.github.com/users/tblah/followers", "following_url": "https://api.github.com/users/tblah/following{/other_user}", "gists_url": "https://api.github.com/users/tblah/gists{/gist_id}", "starred_url": "https://api.github.com/users/tblah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tblah/subscriptions", "organizations_url": "https://api.github.com/users/tblah/orgs", "repos_url": "https://api.github.com/users/tblah/repos", "events_url": "https://api.github.com/users/tblah/events{/privacy}", "received_events_url": "https://api.github.com/users/tblah/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tblah", "id": 3716681, "node_id": "MDQ6VXNlcjM3MTY2ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/3716681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tblah", "html_url": "https://github.com/tblah", "followers_url": "https://api.github.com/users/tblah/followers", "following_url": "https://api.github.com/users/tblah/following{/other_user}", "gists_url": "https://api.github.com/users/tblah/gists{/gist_id}", "starred_url": "https://api.github.com/users/tblah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tblah/subscriptions", "organizations_url": "https://api.github.com/users/tblah/orgs", "repos_url": "https://api.github.com/users/tblah/repos", "events_url": "https://api.github.com/users/tblah/events{/privacy}", "received_events_url": "https://api.github.com/users/tblah/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eeaf497b2a6bc065874e3d3367b1f3023c5bb3d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/eeaf497b2a6bc065874e3d3367b1f3023c5bb3d3", "html_url": "https://github.com/rust-lang/rust/commit/eeaf497b2a6bc065874e3d3367b1f3023c5bb3d3"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "efc29163455be29467a89c111a16cc3fbc5af31b", "filename": "src/tools/remote-test-client/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b7ec76c16b18b01acd07f987db488a642492049/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7ec76c16b18b01acd07f987db488a642492049/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs?ref=1b7ec76c16b18b01acd07f987db488a642492049", "patch": "@@ -224,7 +224,7 @@ fn run(support_lib_count: usize, exe: String, all_args: Vec<String>) {\n     // by the client.\n     for (k, v) in env::vars() {\n         match &k[..] {\n-            \"PATH\" | \"LD_LIBRARY_PATH\" | \"PWD\" => continue,\n+            \"PATH\" | \"LD_LIBRARY_PATH\" | \"PWD\" | \"RUST_TEST_TMPDIR\" => continue,\n             _ => {}\n         }\n         t!(client.write_all(k.as_bytes()));"}, {"sha": "ce8e52a42f3c3bc6f8e4bbd3a342bc81392e394b", "filename": "src/tools/remote-test-server/src/main.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1b7ec76c16b18b01acd07f987db488a642492049/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7ec76c16b18b01acd07f987db488a642492049/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs?ref=1b7ec76c16b18b01acd07f987db488a642492049", "patch": "@@ -83,16 +83,19 @@ fn main() {\n     };\n \n     let listener = t!(TcpListener::bind(bind_addr));\n-    let work: PathBuf = if cfg!(target_os = \"android\") {\n-        \"/data/tmp/work\".into()\n+    let (work, tmp): (PathBuf, PathBuf) = if cfg!(target_os = \"android\") {\n+        (\"/data/tmp/work\".into(), \"/data/tmp/work/tmp\".into())\n     } else {\n-        let mut temp_dir = env::temp_dir();\n-        temp_dir.push(\"work\");\n-        temp_dir\n+        let mut work_dir = env::temp_dir();\n+        work_dir.push(\"work\");\n+        let mut tmp_dir = work_dir.clone();\n+        tmp_dir.push(\"tmp\");\n+        (work_dir, tmp_dir)\n     };\n     println!(\"listening!\");\n \n     t!(fs::create_dir_all(&work));\n+    t!(fs::create_dir_all(&tmp));\n \n     let lock = Arc::new(Mutex::new(()));\n \n@@ -109,7 +112,8 @@ fn main() {\n         } else if &buf[..] == b\"run \" {\n             let lock = lock.clone();\n             let work = work.clone();\n-            thread::spawn(move || handle_run(socket, &work, &lock));\n+            let tmp = tmp.clone();\n+            thread::spawn(move || handle_run(socket, &work, &tmp, &lock));\n         } else {\n             panic!(\"unknown command {:?}\", buf);\n         }\n@@ -134,7 +138,7 @@ impl Drop for RemoveOnDrop<'_> {\n     }\n }\n \n-fn handle_run(socket: TcpStream, work: &Path, lock: &Mutex<()>) {\n+fn handle_run(socket: TcpStream, work: &Path, tmp: &Path, lock: &Mutex<()>) {\n     let mut arg = Vec::new();\n     let mut reader = BufReader::new(socket);\n \n@@ -226,6 +230,9 @@ fn handle_run(socket: TcpStream, work: &Path, lock: &Mutex<()>) {\n         cmd.env(\"LD_LIBRARY_PATH\", format!(\"{}:{}\", work.display(), path.display()));\n     }\n \n+    // Some tests assume RUST_TEST_TMPDIR exists\n+    cmd.env(\"RUST_TEST_TMPDIR\", tmp.to_owned());\n+\n     // Spawn the child and ferry over stdout/stderr to the socket in a framed\n     // fashion (poor man's style)\n     let mut child ="}]}