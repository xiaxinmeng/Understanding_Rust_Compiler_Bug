{"sha": "dddc2fd6de3db11eeeb244e0ac5754c49f9ad11b", "node_id": "C_kwDOAAsO6NoAKGRkZGMyZmQ2ZGUzZGIxMWVlZWIyNDRlMGFjNTc1NGM0OWY5YWQxMWI", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-08-05T15:56:09Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-08-05T15:56:09Z"}, "message": "rustdoc: reduce the number of intermediate Strings allocated", "tree": {"sha": "5c9ae2109fa07fa526ab6a1625a5a01b2225e002", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c9ae2109fa07fa526ab6a1625a5a01b2225e002"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dddc2fd6de3db11eeeb244e0ac5754c49f9ad11b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dddc2fd6de3db11eeeb244e0ac5754c49f9ad11b", "html_url": "https://github.com/rust-lang/rust/commit/dddc2fd6de3db11eeeb244e0ac5754c49f9ad11b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dddc2fd6de3db11eeeb244e0ac5754c49f9ad11b/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "513cf8664ab074d0fa540f1e1661193aeff0d358", "url": "https://api.github.com/repos/rust-lang/rust/commits/513cf8664ab074d0fa540f1e1661193aeff0d358", "html_url": "https://github.com/rust-lang/rust/commit/513cf8664ab074d0fa540f1e1661193aeff0d358"}], "stats": {"total": 35, "additions": 22, "deletions": 13}, "files": [{"sha": "3dee4d1acc819f4a5ac7fcbdfda502cffe64e1d2", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dddc2fd6de3db11eeeb244e0ac5754c49f9ad11b/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dddc2fd6de3db11eeeb244e0ac5754c49f9ad11b/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=dddc2fd6de3db11eeeb244e0ac5754c49f9ad11b", "patch": "@@ -152,7 +152,7 @@ impl Buffer {\n     }\n }\n \n-fn comma_sep<T: fmt::Display>(\n+pub(crate) fn comma_sep<T: fmt::Display>(\n     items: impl Iterator<Item = T>,\n     space_after_comma: bool,\n ) -> impl fmt::Display {"}, {"sha": "0b0f5056019bdc4c89ccd2aebddc9ffa5b3601a0", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/dddc2fd6de3db11eeeb244e0ac5754c49f9ad11b/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dddc2fd6de3db11eeeb244e0ac5754c49f9ad11b/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=dddc2fd6de3db11eeeb244e0ac5754c49f9ad11b", "patch": "@@ -1,4 +1,5 @@\n use std::ffi::OsStr;\n+use std::fmt;\n use std::fs::{self, File};\n use std::io::prelude::*;\n use std::io::{self, BufReader};\n@@ -563,7 +564,7 @@ if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};\n         }\n \n         impl Implementor {\n-            fn to_js_string(&self) -> String {\n+            fn to_js_string(&self) -> impl fmt::Display + '_ {\n                 fn single_quote_string(s: &str) -> String {\n                     let mut result = String::with_capacity(s.len() + 2);\n                     result.push_str(\"'\");\n@@ -577,16 +578,21 @@ if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};\n                     result.push_str(\"'\");\n                     result\n                 }\n-                let text_esc = single_quote_string(&self.text);\n-                if self.synthetic {\n-                    let types = self.types.iter().map(|type_| single_quote_string(type_)).join(\",\");\n-                    // use `1` to represent a synthetic, because it's fewer bytes than `true`\n-                    format!(\"[{text_esc},1,[{types}]]\")\n-                } else {\n-                    // The types list is only used for synthetic impls.\n-                    // If this changes, `main.js` and `write_shared.rs` both need changed.\n-                    format!(\"[{text_esc}]\")\n-                }\n+                crate::html::format::display_fn(|f| {\n+                    let text_esc = single_quote_string(&self.text);\n+                    if self.synthetic {\n+                        let types = crate::html::format::comma_sep(\n+                            self.types.iter().map(|type_| single_quote_string(type_)),\n+                            false,\n+                        );\n+                        // use `1` to represent a synthetic, because it's fewer bytes than `true`\n+                        write!(f, \"[{text_esc},1,[{types}]]\")\n+                    } else {\n+                        // The types list is only used for synthetic impls.\n+                        // If this changes, `main.js` and `write_shared.rs` both need changed.\n+                        write!(f, \"[{text_esc}]\")\n+                    }\n+                })\n             }\n         }\n \n@@ -622,7 +628,10 @@ if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};\n         let implementors = format!(\n             r#\"\"{}\":[{}]\"#,\n             krate.name(cx.tcx()),\n-            implementors.iter().map(Implementor::to_js_string).join(\",\")\n+            crate::html::format::comma_sep(\n+                implementors.iter().map(Implementor::to_js_string),\n+                false\n+            )\n         );\n \n         let mut mydst = dst.clone();"}]}