{"sha": "e0ca6b1a314f949827fda499ee29dcbf6ef18acd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwY2E2YjFhMzE0Zjk0OTgyN2ZkYTQ5OWVlMjlkY2JmNmVmMThhY2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-04T21:48:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-04T21:48:58Z"}, "message": "Auto merge of #25975 - arielb1:remove-param-space, r=nikomatsakis\n\nr? @nikomatsakis", "tree": {"sha": "3232681c7d93e3d696a69450d8beca571f40a465", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3232681c7d93e3d696a69450d8beca571f40a465"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0ca6b1a314f949827fda499ee29dcbf6ef18acd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0ca6b1a314f949827fda499ee29dcbf6ef18acd", "html_url": "https://github.com/rust-lang/rust/commit/e0ca6b1a314f949827fda499ee29dcbf6ef18acd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0ca6b1a314f949827fda499ee29dcbf6ef18acd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20cf4cf62c72c67fdd89609f9098b259335ba1ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/20cf4cf62c72c67fdd89609f9098b259335ba1ae", "html_url": "https://github.com/rust-lang/rust/commit/20cf4cf62c72c67fdd89609f9098b259335ba1ae"}, {"sha": "4b116fe38c88384627a8b32095e842a523c53d03", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b116fe38c88384627a8b32095e842a523c53d03", "html_url": "https://github.com/rust-lang/rust/commit/4b116fe38c88384627a8b32095e842a523c53d03"}], "stats": {"total": 216, "additions": 62, "deletions": 154}, "files": [{"sha": "bea9bbad1ac0119a71749986183b594964d967b3", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e0ca6b1a314f949827fda499ee29dcbf6ef18acd/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ca6b1a314f949827fda499ee29dcbf6ef18acd/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=e0ca6b1a314f949827fda499ee29dcbf6ef18acd", "patch": "@@ -448,20 +448,6 @@ impl<T> VecPerParamSpace<T> {\n                                        self.self_limit)\n     }\n \n-    pub fn map_move<U, F>(self, mut pred: F) -> VecPerParamSpace<U> where\n-        F: FnMut(T) -> U,\n-    {\n-        let SeparateVecsPerParamSpace {\n-            types: t,\n-            selfs: s,\n-            fns: f\n-        } = self.split();\n-\n-        VecPerParamSpace::new(t.into_iter().map(|p| pred(p)).collect(),\n-                              s.into_iter().map(|p| pred(p)).collect(),\n-                              f.into_iter().map(|p| pred(p)).collect())\n-    }\n-\n     pub fn split(self) -> SeparateVecsPerParamSpace<T> {\n         let VecPerParamSpace { type_limit, self_limit, content } = self;\n "}, {"sha": "b51fc90acf27caef1841b85ea87fa8bc39fcc380", "filename": "src/librustc/middle/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ca6b1a314f949827fda499ee29dcbf6ef18acd/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ca6b1a314f949827fda499ee29dcbf6ef18acd/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs?ref=e0ca6b1a314f949827fda499ee29dcbf6ef18acd", "patch": "@@ -329,7 +329,7 @@ fn process_predicate<'a,'tcx>(selcx: &mut SelectionContext<'a,'tcx>,\n                     false\n                 }\n                 Ok(Some(s)) => {\n-                    s.map_move_nested(|p| new_obligations.push(p));\n+                    new_obligations.append(&mut s.nested_obligations());\n                     true\n                 }\n                 Err(selection_err) => {"}, {"sha": "b371ede0397e275cdb688a05dad32b20ec37a99b", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 29, "deletions": 109, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/e0ca6b1a314f949827fda499ee29dcbf6ef18acd/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ca6b1a314f949827fda499ee29dcbf6ef18acd/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=e0ca6b1a314f949827fda499ee29dcbf6ef18acd", "patch": "@@ -20,7 +20,6 @@ use middle::subst;\n use middle::ty::{self, HasProjectionTypes, Ty};\n use middle::ty_fold::TypeFoldable;\n use middle::infer::{self, fixup_err_to_string, InferCtxt};\n-use std::slice::Iter;\n use std::rc::Rc;\n use syntax::ast;\n use syntax::codemap::{Span, DUMMY_SP};\n@@ -146,9 +145,9 @@ pub struct DerivedObligationCause<'tcx> {\n     parent_code: Rc<ObligationCauseCode<'tcx>>\n }\n \n-pub type Obligations<'tcx, O> = subst::VecPerParamSpace<Obligation<'tcx, O>>;\n-pub type PredicateObligations<'tcx> = subst::VecPerParamSpace<PredicateObligation<'tcx>>;\n-pub type TraitObligations<'tcx> = subst::VecPerParamSpace<TraitObligation<'tcx>>;\n+pub type Obligations<'tcx, O> = Vec<Obligation<'tcx, O>>;\n+pub type PredicateObligations<'tcx> = Vec<PredicateObligation<'tcx>>;\n+pub type TraitObligations<'tcx> = Vec<TraitObligation<'tcx>>;\n \n pub type Selection<'tcx> = Vtable<'tcx, PredicateObligation<'tcx>>;\n \n@@ -266,7 +265,7 @@ pub enum Vtable<'tcx, N> {\n pub struct VtableImplData<'tcx, N> {\n     pub impl_def_id: ast::DefId,\n     pub substs: subst::Substs<'tcx>,\n-    pub nested: subst::VecPerParamSpace<N>\n+    pub nested: Vec<N>\n }\n \n #[derive(Debug,Clone)]\n@@ -277,7 +276,7 @@ pub struct VtableDefaultImplData<N> {\n \n #[derive(Debug,Clone)]\n pub struct VtableBuiltinData<N> {\n-    pub nested: subst::VecPerParamSpace<N>\n+    pub nested: Vec<N>\n }\n \n /// A vtable for some object-safe trait `Foo` automatically derived\n@@ -525,114 +524,35 @@ impl<'tcx> ObligationCause<'tcx> {\n }\n \n impl<'tcx, N> Vtable<'tcx, N> {\n-    pub fn iter_nested(&self) -> Iter<N> {\n-        match *self {\n-            VtableImpl(ref i) => i.iter_nested(),\n-            VtableParam(ref n) => n.iter(),\n-            VtableBuiltin(ref i) => i.iter_nested(),\n-            VtableObject(_) |\n-            VtableDefaultImpl(..) | VtableFnPointer(..) |\n-            VtableClosure(..) => (&[]).iter(),\n-        }\n-    }\n-\n-    pub fn map_nested<M, F>(&self, op: F) -> Vtable<'tcx, M> where\n-        F: FnMut(&N) -> M,\n-    {\n-        match *self {\n-            VtableImpl(ref i) => VtableImpl(i.map_nested(op)),\n-            VtableDefaultImpl(ref t) => VtableDefaultImpl(t.map_nested(op)),\n-            VtableFnPointer(ref sig) => VtableFnPointer((*sig).clone()),\n-            VtableClosure(d, ref s) => VtableClosure(d, s.clone()),\n-            VtableParam(ref n) => VtableParam(n.iter().map(op).collect()),\n-            VtableObject(ref p) => VtableObject(p.clone()),\n-            VtableBuiltin(ref b) => VtableBuiltin(b.map_nested(op)),\n+    pub fn nested_obligations(self) -> Vec<N> {\n+        match self {\n+            VtableImpl(i) => i.nested,\n+            VtableParam(n) => n,\n+            VtableBuiltin(i) => i.nested,\n+            VtableDefaultImpl(d) => d.nested,\n+            VtableObject(_) | VtableFnPointer(..) |\n+            VtableClosure(..) => vec![]\n         }\n     }\n \n-    pub fn map_move_nested<M, F>(self, op: F) -> Vtable<'tcx, M> where\n-        F: FnMut(N) -> M,\n-    {\n+    pub fn map<M, F>(self, f: F) -> Vtable<'tcx, M> where F: FnMut(N) -> M {\n         match self {\n-            VtableImpl(i) => VtableImpl(i.map_move_nested(op)),\n-            VtableFnPointer(sig) => VtableFnPointer(sig),\n+            VtableImpl(i) => VtableImpl(VtableImplData {\n+                impl_def_id: i.impl_def_id,\n+                substs: i.substs,\n+                nested: i.nested.into_iter().map(f).collect()\n+            }),\n+            VtableParam(n) => VtableParam(n.into_iter().map(f).collect()),\n+            VtableBuiltin(i) => VtableBuiltin(VtableBuiltinData {\n+                nested: i.nested.into_iter().map(f).collect()\n+            }),\n+            VtableObject(o) => VtableObject(o),\n+            VtableDefaultImpl(d) => VtableDefaultImpl(VtableDefaultImplData {\n+                trait_def_id: d.trait_def_id,\n+                nested: d.nested.into_iter().map(f).collect()\n+            }),\n+            VtableFnPointer(f) => VtableFnPointer(f),\n             VtableClosure(d, s) => VtableClosure(d, s),\n-            VtableDefaultImpl(t) => VtableDefaultImpl(t.map_move_nested(op)),\n-            VtableParam(n) => VtableParam(n.into_iter().map(op).collect()),\n-            VtableObject(p) => VtableObject(p),\n-            VtableBuiltin(no) => VtableBuiltin(no.map_move_nested(op)),\n-        }\n-    }\n-}\n-\n-impl<'tcx, N> VtableImplData<'tcx, N> {\n-    pub fn iter_nested(&self) -> Iter<N> {\n-        self.nested.iter()\n-    }\n-\n-    pub fn map_nested<M, F>(&self, op: F) -> VtableImplData<'tcx, M> where\n-        F: FnMut(&N) -> M,\n-    {\n-        VtableImplData {\n-            impl_def_id: self.impl_def_id,\n-            substs: self.substs.clone(),\n-            nested: self.nested.map(op)\n-        }\n-    }\n-\n-    pub fn map_move_nested<M, F>(self, op: F) -> VtableImplData<'tcx, M> where\n-        F: FnMut(N) -> M,\n-    {\n-        let VtableImplData { impl_def_id, substs, nested } = self;\n-        VtableImplData {\n-            impl_def_id: impl_def_id,\n-            substs: substs,\n-            nested: nested.map_move(op)\n-        }\n-    }\n-}\n-\n-impl<N> VtableDefaultImplData<N> {\n-    pub fn iter_nested(&self) -> Iter<N> {\n-        self.nested.iter()\n-    }\n-\n-    pub fn map_nested<M, F>(&self, op: F) -> VtableDefaultImplData<M> where\n-        F: FnMut(&N) -> M,\n-    {\n-        VtableDefaultImplData {\n-            trait_def_id: self.trait_def_id,\n-            nested: self.nested.iter().map(op).collect()\n-        }\n-    }\n-\n-    pub fn map_move_nested<M, F>(self, op: F) -> VtableDefaultImplData<M> where\n-        F: FnMut(N) -> M,\n-    {\n-        let VtableDefaultImplData { trait_def_id, nested } = self;\n-        VtableDefaultImplData {\n-            trait_def_id: trait_def_id,\n-            nested: nested.into_iter().map(op).collect()\n-        }\n-    }\n-}\n-\n-impl<N> VtableBuiltinData<N> {\n-    pub fn iter_nested(&self) -> Iter<N> {\n-        self.nested.iter()\n-    }\n-\n-    pub fn map_nested<M, F>(&self, op: F) -> VtableBuiltinData<M> where F: FnMut(&N) -> M {\n-        VtableBuiltinData {\n-            nested: self.nested.map(op)\n-        }\n-    }\n-\n-    pub fn map_move_nested<M, F>(self, op: F) -> VtableBuiltinData<M> where\n-        F: FnMut(N) -> M,\n-    {\n-        VtableBuiltinData {\n-            nested: self.nested.map_move(op)\n         }\n     }\n }"}, {"sha": "cf641403ddc5021197cf39ade6f505a7311297bf", "filename": "src/librustc/middle/traits/project.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e0ca6b1a314f949827fda499ee29dcbf6ef18acd/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ca6b1a314f949827fda499ee29dcbf6ef18acd/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs?ref=e0ca6b1a314f949827fda499ee29dcbf6ef18acd", "patch": "@@ -203,6 +203,7 @@ pub fn normalize_with_depth<'a,'b,'tcx,T>(selcx: &'a mut SelectionContext<'b,'tc\n {\n     let mut normalizer = AssociatedTypeNormalizer::new(selcx, cause, depth);\n     let result = normalizer.fold(value);\n+\n     Normalized {\n         value: result,\n         obligations: normalizer.obligations,\n@@ -864,7 +865,7 @@ fn confirm_impl_candidate<'cx,'tcx>(\n         if let ty::TypeTraitItem(ref assoc_ty) = impl_or_trait_items_map[&impl_item.def_id()] {\n             if assoc_ty.name == obligation.predicate.item_name {\n                 return (assoc_ty.ty.unwrap().subst(selcx.tcx(), &impl_vtable.substs),\n-                        impl_vtable.nested.into_vec());\n+                        impl_vtable.nested);\n             }\n         }\n     }\n@@ -876,7 +877,7 @@ fn confirm_impl_candidate<'cx,'tcx>(\n             if assoc_ty.name == obligation.predicate.item_name {\n                 if let Some(ty) = assoc_ty.ty {\n                     return (ty.subst(selcx.tcx(), trait_ref.substs),\n-                            impl_vtable.nested.into_vec());\n+                            impl_vtable.nested);\n                 } else {\n                     // This means that the impl is missing a\n                     // definition for the associated type. This error"}, {"sha": "b568d40ba1c99d5890422affcae0861cce228054", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e0ca6b1a314f949827fda499ee29dcbf6ef18acd/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ca6b1a314f949827fda499ee29dcbf6ef18acd/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=e0ca6b1a314f949827fda499ee29dcbf6ef18acd", "patch": "@@ -36,7 +36,7 @@ use super::object_safety;\n use super::util;\n \n use middle::fast_reject;\n-use middle::subst::{Subst, Substs, TypeSpace, VecPerParamSpace};\n+use middle::subst::{Subst, Substs, TypeSpace};\n use middle::ty::{self, AsPredicate, RegionEscape, ToPolyTraitRef, Ty};\n use middle::infer;\n use middle::infer::{InferCtxt, TypeFreshener};\n@@ -1134,7 +1134,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // type/region parameters\n         let self_ty = self.infcx.shallow_resolve(*obligation.self_ty().skip_binder());\n         let (closure_def_id, substs) = match self_ty.sty {\n-            ty::ty_closure(id, ref substs) => (id, substs.clone()),\n+            ty::ty_closure(id, substs) => (id, substs),\n             ty::ty_infer(ty::TyVar(_)) => {\n                 debug!(\"assemble_unboxed_closure_candidates: ambiguous self-type\");\n                 candidates.ambiguous = true;\n@@ -1152,7 +1152,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             Some(closure_kind) => {\n                 debug!(\"assemble_unboxed_candidates: closure_kind = {:?}\", closure_kind);\n                 if closure_kind.extends(kind) {\n-                    candidates.vec.push(ClosureCandidate(closure_def_id, substs.clone()));\n+                    candidates.vec.push(ClosureCandidate(closure_def_id,\n+                                                         substs.clone()));\n                 }\n             }\n             None => {\n@@ -1479,7 +1480,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             selection: Selection<'tcx>)\n                             -> EvaluationResult<'tcx>\n     {\n-        self.evaluate_predicates_recursively(stack, selection.iter_nested())\n+        self.evaluate_predicates_recursively(stack,\n+                                             selection.nested_obligations().iter())\n     }\n \n     /// Returns true if `candidate_i` should be dropped in favor of\n@@ -1987,7 +1989,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n             PhantomFnCandidate |\n             ErrorCandidate => {\n-                Ok(VtableBuiltin(VtableBuiltinData { nested: VecPerParamSpace::empty() }))\n+                Ok(VtableBuiltin(VtableBuiltinData { nested: vec![] }))\n             }\n \n             ParamCandidate(param) => {\n@@ -2120,8 +2122,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         let obligations = self.collect_predicates_for_types(obligation, trait_def, nested);\n \n-        let obligations = VecPerParamSpace::new(obligations, Vec::new(), Vec::new());\n-\n         debug!(\"vtable_builtin_data: obligations={}\",\n                obligations.repr(self.tcx()));\n \n@@ -2207,7 +2207,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                                                 trait_def_id,\n                                                                 nested);\n \n-        let trait_obligations: Result<VecPerParamSpace<_>,()> = self.infcx.commit_if_ok(|snapshot| {\n+        let trait_obligations: Result<Vec<_>,()> = self.infcx.commit_if_ok(|snapshot| {\n             let poly_trait_ref = obligation.predicate.to_poly_trait_ref();\n             let (trait_ref, skol_map) =\n                 self.infcx().skolemize_late_bound_regions(&poly_trait_ref, snapshot);\n@@ -2219,7 +2219,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                               snapshot))\n         });\n \n-        obligations.extend(trait_obligations.unwrap().into_iter()); // no Errors in that code above\n+        // no Errors in that code above\n+        obligations.append(&mut trait_obligations.unwrap());\n \n         debug!(\"vtable_default_impl_data: obligations={}\", obligations.repr(self.tcx()));\n \n@@ -2253,7 +2254,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n     fn vtable_impl(&mut self,\n                    impl_def_id: ast::DefId,\n-                   substs: Normalized<'tcx, Substs<'tcx>>,\n+                   mut substs: Normalized<'tcx, Substs<'tcx>>,\n                    cause: ObligationCause<'tcx>,\n                    recursion_depth: usize,\n                    skol_map: infer::SkolemizationMap,\n@@ -2278,7 +2279,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                impl_def_id.repr(self.tcx()),\n                impl_obligations.repr(self.tcx()));\n \n-        impl_obligations.extend(TypeSpace, substs.obligations.into_iter());\n+        impl_obligations.append(&mut substs.obligations);\n \n         VtableImplData { impl_def_id: impl_def_id,\n                          substs: substs.value,\n@@ -2568,9 +2569,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             _ => unreachable!()\n         };\n \n-        Ok(VtableBuiltinData {\n-            nested: VecPerParamSpace::new(nested, vec![], vec![])\n-        })\n+        Ok(VtableBuiltinData { nested: nested })\n     }\n \n     ///////////////////////////////////////////////////////////////////////////\n@@ -2851,20 +2850,20 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                  substs: &Substs<'tcx>, // for impl or trait\n                                  skol_map: infer::SkolemizationMap,\n                                  snapshot: &infer::CombinedSnapshot)\n-                                 -> VecPerParamSpace<PredicateObligation<'tcx>>\n+                                 -> Vec<PredicateObligation<'tcx>>\n     {\n         debug!(\"impl_or_trait_obligations(def_id={})\", def_id.repr(self.tcx()));\n \n         let predicates = ty::lookup_predicates(self.tcx(), def_id);\n         let predicates = predicates.instantiate(self.tcx(), substs);\n         let predicates = normalize_with_depth(self, cause.clone(), recursion_depth, &predicates);\n-        let predicates = self.infcx().plug_leaks(skol_map, snapshot, &predicates);\n+        let mut predicates = self.infcx().plug_leaks(skol_map, snapshot, &predicates);\n         let mut obligations =\n             util::predicates_for_generics(self.tcx(),\n                                           cause,\n                                           recursion_depth,\n                                           &predicates.value);\n-        obligations.extend(TypeSpace, predicates.obligations.into_iter());\n+        obligations.append(&mut predicates.obligations);\n         obligations\n     }\n "}, {"sha": "ffa14feee47fb7d6e40fb3e74bb16dfea00224a7", "filename": "src/librustc/middle/traits/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0ca6b1a314f949827fda499ee29dcbf6ef18acd/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ca6b1a314f949827fda499ee29dcbf6ef18acd/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs?ref=e0ca6b1a314f949827fda499ee29dcbf6ef18acd", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use middle::subst::{Substs, VecPerParamSpace};\n+use middle::subst::Substs;\n use middle::infer::InferCtxt;\n use middle::ty::{self, Ty, AsPredicate, ToPolyTraitRef};\n use std::fmt;\n@@ -319,16 +319,16 @@ pub fn predicates_for_generics<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                      cause: ObligationCause<'tcx>,\n                                      recursion_depth: usize,\n                                      generic_bounds: &ty::InstantiatedPredicates<'tcx>)\n-                                     -> VecPerParamSpace<PredicateObligation<'tcx>>\n+                                     -> Vec<PredicateObligation<'tcx>>\n {\n     debug!(\"predicates_for_generics(generic_bounds={})\",\n            generic_bounds.repr(tcx));\n \n-    generic_bounds.predicates.map(|predicate| {\n+    generic_bounds.predicates.iter().map(|predicate| {\n         Obligation { cause: cause.clone(),\n                      recursion_depth: recursion_depth,\n                      predicate: predicate.clone() }\n-    })\n+    }).collect()\n }\n \n pub fn trait_ref_for_builtin_bound<'tcx>("}, {"sha": "579199aba08ca150b2a53ed0cc2c0e957424116c", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ca6b1a314f949827fda499ee29dcbf6ef18acd/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ca6b1a314f949827fda499ee29dcbf6ef18acd/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=e0ca6b1a314f949827fda499ee29dcbf6ef18acd", "patch": "@@ -1051,7 +1051,7 @@ pub fn fulfill_obligation<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     // all nested obligations. This is because they can inform the\n     // inference of the impl's type parameters.\n     let mut fulfill_cx = traits::FulfillmentContext::new();\n-    let vtable = selection.map_move_nested(|predicate| {\n+    let vtable = selection.map(|predicate| {\n         fulfill_cx.register_predicate_obligation(&infcx, predicate);\n     });\n     let vtable = drain_fulfillment_cx_or_panic(span, &infcx, &mut fulfill_cx, &vtable);"}, {"sha": "92317aae08967d18510f21a471476bd38547a888", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0ca6b1a314f949827fda499ee29dcbf6ef18acd/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ca6b1a314f949827fda499ee29dcbf6ef18acd/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=e0ca6b1a314f949827fda499ee29dcbf6ef18acd", "patch": "@@ -323,7 +323,9 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                 }\n \n                 Ok(Some(vtable)) => {\n-                    vtable.map_move_nested(|o| queue.push_back(o));\n+                    for obligation in vtable.nested_obligations() {\n+                        queue.push_back(obligation);\n+                    }\n                 }\n             }\n         }"}, {"sha": "1bef5cb19db16cb8d97d7f394497d29f0f5c9efa", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ca6b1a314f949827fda499ee29dcbf6ef18acd/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ca6b1a314f949827fda499ee29dcbf6ef18acd/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=e0ca6b1a314f949827fda499ee29dcbf6ef18acd", "patch": "@@ -1046,7 +1046,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n                     debug!(\"impl_obligations={}\", obligations.repr(self.tcx()));\n \n                     // Evaluate those obligations to see if they might possibly hold.\n-                    obligations.all(|o| selcx.evaluate_obligation(o)) &&\n+                    obligations.iter().all(|o| selcx.evaluate_obligation(o)) &&\n                         norm_obligations.iter().all(|o| selcx.evaluate_obligation(o))\n                 }\n "}, {"sha": "e37856bbb2ea2c6dcc89b855e578df222b1886cd", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0ca6b1a314f949827fda499ee29dcbf6ef18acd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ca6b1a314f949827fda499ee29dcbf6ef18acd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e0ca6b1a314f949827fda499ee29dcbf6ef18acd", "patch": "@@ -1788,11 +1788,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         debug!(\"add_obligations_for_parameters(predicates={})\",\n                predicates.repr(self.tcx()));\n \n-        let obligations = traits::predicates_for_generics(self.tcx(),\n+        for obligation in traits::predicates_for_generics(self.tcx(),\n                                                           cause,\n-                                                          predicates);\n-\n-        obligations.map_move(|o| self.register_predicate(o));\n+                                                          predicates) {\n+            self.register_predicate(obligation);\n+        }\n     }\n \n     // Only for fields! Returns <none> for methods>"}]}