{"sha": "16362c737fe740f630ada06349fa9004e2a51bb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2MzYyYzczN2ZlNzQwZjYzMGFkYTA2MzQ5ZmE5MDA0ZTJhNTFiYjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-12T09:38:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-12T09:38:40Z"}, "message": "Auto merge of #47843 - estebank:teach, r=nikomatsakis\n\nAdd `-Zteach` documentation\n\nAdd extra inline documentation to E0019, E0016, E0013, E0396, E0017,\nE0018, E0010, E0022, E0030, E0029, E0033, E0026 and E0027.\n\nFollow up to #47652.", "tree": {"sha": "169201879170366d1d594dc0acc3241099ca3fef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/169201879170366d1d594dc0acc3241099ca3fef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16362c737fe740f630ada06349fa9004e2a51bb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16362c737fe740f630ada06349fa9004e2a51bb7", "html_url": "https://github.com/rust-lang/rust/commit/16362c737fe740f630ada06349fa9004e2a51bb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16362c737fe740f630ada06349fa9004e2a51bb7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b54f27ba365623808a0377951dbfd5b445c18a06", "url": "https://api.github.com/repos/rust-lang/rust/commits/b54f27ba365623808a0377951dbfd5b445c18a06", "html_url": "https://github.com/rust-lang/rust/commit/b54f27ba365623808a0377951dbfd5b445c18a06"}, {"sha": "51f0c0dc4c0ce47f4019c78f4b865718bf278a8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/51f0c0dc4c0ce47f4019c78f4b865718bf278a8d", "html_url": "https://github.com/rust-lang/rust/commit/51f0c0dc4c0ce47f4019c78f4b865718bf278a8d"}], "stats": {"total": 3310, "additions": 3255, "deletions": 55}, "files": [{"sha": "8b4b9aaeac848b98c85c1eb3c2aa5b84422314b6", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -175,6 +175,10 @@ fn configure_main(this: &mut EntryContext) {\n             err.emit();\n             this.session.abort_if_errors();\n         } else {\n+            if this.session.teach(&err.get_code().unwrap()) {\n+                err.note(\"If you don't know the basics of Rust, you can go look to the Rust Book \\\n+                          to get started: https://doc.rust-lang.org/book/\");\n+            }\n             err.emit();\n         }\n     }"}, {"sha": "2b9ee223b01a478295f2c38c9a41f8151d195b3b", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 138, "deletions": 30, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -170,18 +170,40 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n     fn not_const(&mut self) {\n         self.add(Qualif::NOT_CONST);\n         if self.mode != Mode::Fn {\n-            span_err!(self.tcx.sess, self.span, E0019,\n-                      \"{} contains unimplemented expression type\", self.mode);\n+            let mut err = struct_span_err!(\n+                self.tcx.sess,\n+                self.span,\n+                E0019,\n+                \"{} contains unimplemented expression type\",\n+                self.mode\n+            );\n+            if self.tcx.sess.teach(&err.get_code().unwrap()) {\n+                err.note(\"A function call isn't allowed in the const's initialization expression \\\n+                          because the expression's value must be known at compile-time.\");\n+                err.note(\"Remember: you can't use a function call inside a const's initialization \\\n+                          expression! However, you can use it anywhere else.\");\n+            }\n+            err.emit();\n         }\n     }\n \n     /// Error about extra statements in a constant.\n     fn statement_like(&mut self) {\n         self.add(Qualif::NOT_CONST);\n         if self.mode != Mode::Fn {\n-            span_err!(self.tcx.sess, self.span, E0016,\n-                      \"blocks in {}s are limited to items and tail expressions\",\n-                      self.mode);\n+            let mut err = struct_span_err!(\n+                self.tcx.sess,\n+                self.span,\n+                E0016,\n+                \"blocks in {}s are limited to items and tail expressions\",\n+                self.mode\n+            );\n+            if self.tcx.sess.teach(&err.get_code().unwrap()) {\n+                err.note(\"Blocks in constants may only contain items (such as constant, function \\\n+                          definition, etc...) and a tail expression.\");\n+                err.help(\"To avoid it, you have to replace the non-item object.\");\n+            }\n+            err.emit();\n         }\n     }\n \n@@ -475,9 +497,19 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 }\n \n                 if self.mode == Mode::Const || self.mode == Mode::ConstFn {\n-                    span_err!(self.tcx.sess, self.span, E0013,\n-                              \"{}s cannot refer to statics, use \\\n-                               a constant instead\", self.mode);\n+                    let mut err = struct_span_err!(self.tcx.sess, self.span, E0013,\n+                                                   \"{}s cannot refer to statics, use \\\n+                                                    a constant instead\", self.mode);\n+                    if self.tcx.sess.teach(&err.get_code().unwrap()) {\n+                        err.note(\n+                            \"Static and const variables can refer to other const variables. But a \\\n+                             const variable cannot refer to a static variable.\"\n+                        );\n+                        err.help(\n+                            \"To fix this, the value can be extracted as a const and then used.\"\n+                        );\n+                    }\n+                    err.emit()\n                 }\n             }\n             Place::Projection(ref proj) => {\n@@ -498,13 +530,25 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                             if let ty::TyRawPtr(_) = base_ty.sty {\n                                 this.add(Qualif::NOT_CONST);\n                                 if this.mode != Mode::Fn {\n-                                    struct_span_err!(this.tcx.sess,\n-                                        this.span, E0396,\n+                                    let mut err = struct_span_err!(\n+                                        this.tcx.sess,\n+                                        this.span,\n+                                        E0396,\n                                         \"raw pointers cannot be dereferenced in {}s\",\n-                                        this.mode)\n-                                    .span_label(this.span,\n-                                        \"dereference of raw pointer in constant\")\n-                                    .emit();\n+                                        this.mode\n+                                    );\n+                                    err.span_label(this.span,\n+                                                   \"dereference of raw pointer in constant\");\n+                                    if this.tcx.sess.teach(&err.get_code().unwrap()) {\n+                                        err.note(\n+                                            \"The value behind a raw pointer can't be determined \\\n+                                             at compile-time (or even link-time), which means it \\\n+                                             can't be used in a constant expression.\"\n+                                        );\n+                                        err.help(\"A possible fix is to dereference your pointer \\\n+                                                  at some point in run-time.\");\n+                                    }\n+                                    err.emit();\n                                 }\n                             }\n                         }\n@@ -623,12 +667,22 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     if !allow {\n                         self.add(Qualif::NOT_CONST);\n                         if self.mode != Mode::Fn {\n-                            struct_span_err!(self.tcx.sess,  self.span, E0017,\n-                                             \"references in {}s may only refer \\\n-                                              to immutable values\", self.mode)\n-                                .span_label(self.span, format!(\"{}s require immutable values\",\n-                                                                self.mode))\n-                                .emit();\n+                            let mut err = struct_span_err!(self.tcx.sess,  self.span, E0017,\n+                                                           \"references in {}s may only refer \\\n+                                                            to immutable values\", self.mode);\n+                            err.span_label(self.span, format!(\"{}s require immutable values\",\n+                                                                self.mode));\n+                            if self.tcx.sess.teach(&err.get_code().unwrap()) {\n+                                err.note(\"References in statics and constants may only refer to \\\n+                                          immutable values.\\n\\n\\\n+                                          Statics are shared everywhere, and if they refer to \\\n+                                          mutable data one might violate memory safety since \\\n+                                          holding multiple mutable references to shared data is \\\n+                                          not allowed.\\n\\n\\\n+                                          If you really want global mutable state, try using \\\n+                                          static mut or a global UnsafeCell.\");\n+                            }\n+                            err.emit();\n                         }\n                     }\n                 } else {\n@@ -669,9 +723,42 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     (CastTy::FnPtr, CastTy::Int(_)) => {\n                         self.add(Qualif::NOT_CONST);\n                         if self.mode != Mode::Fn {\n-                            span_err!(self.tcx.sess, self.span, E0018,\n-                                      \"raw pointers cannot be cast to integers in {}s\",\n-                                      self.mode);\n+                            let mut err = struct_span_err!(\n+                                self.tcx.sess,\n+                                self.span,\n+                                E0018,\n+                                \"raw pointers cannot be cast to integers in {}s\",\n+                                self.mode\n+                            );\n+                            if self.tcx.sess.teach(&err.get_code().unwrap()) {\n+                                err.note(\"\\\n+The value of static and constant integers must be known at compile time. You can't cast a pointer \\\n+to an integer because the address of a pointer can vary.\n+\n+For example, if you write:\n+\n+```\n+static MY_STATIC: u32 = 42;\n+static MY_STATIC_ADDR: usize = &MY_STATIC as *const _ as usize;\n+static WHAT: usize = (MY_STATIC_ADDR^17) + MY_STATIC_ADDR;\n+```\n+\n+Then `MY_STATIC_ADDR` would contain the address of `MY_STATIC`. However, the address can change \\\n+when the program is linked, as well as change between different executions due to ASLR, and many \\\n+linkers would not be able to calculate the value of `WHAT`.\n+\n+On the other hand, static and constant pointers can point either to a known numeric address or to \\\n+the address of a symbol.\n+\n+```\n+static MY_STATIC: u32 = 42;\n+static MY_STATIC_ADDR: &'static u32 = &MY_STATIC;\n+const CONST_ADDR: *const u8 = 0x5f3759df as *const u8;\n+```\n+\n+This does not pose a problem by itself because they can't be accessed directly.\");\n+                            }\n+                            err.emit();\n                         }\n                     }\n                     _ => {}\n@@ -702,10 +789,18 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n             Rvalue::NullaryOp(NullOp::Box, _) => {\n                 self.add(Qualif::NOT_CONST);\n                 if self.mode != Mode::Fn {\n-                    struct_span_err!(self.tcx.sess, self.span, E0010,\n-                                     \"allocations are not allowed in {}s\", self.mode)\n-                        .span_label(self.span, format!(\"allocation not allowed in {}s\", self.mode))\n-                        .emit();\n+                    let mut err = struct_span_err!(self.tcx.sess, self.span, E0010,\n+                                                   \"allocations are not allowed in {}s\", self.mode);\n+                    err.span_label(self.span, format!(\"allocation not allowed in {}s\", self.mode));\n+                    if self.tcx.sess.teach(&err.get_code().unwrap()) {\n+                        err.note(\n+                            \"The value of statics and constants must be known at compile time, \\\n+                             and they live for the entire lifetime of a program. Creating a boxed \\\n+                             value allocates memory on the heap at runtime, and therefore cannot \\\n+                             be done at compile time.\"\n+                        );\n+                    }\n+                    err.emit();\n                 }\n             }\n \n@@ -931,9 +1026,22 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 // Avoid a generic error for other uses of arguments.\n                 if self.qualif.intersects(Qualif::FN_ARGUMENT) {\n                     let decl = &self.mir.local_decls[index];\n-                    span_err!(self.tcx.sess, decl.source_info.span, E0022,\n-                              \"arguments of constant functions can only \\\n-                               be immutable by-value bindings\");\n+                    let mut err = struct_span_err!(\n+                        self.tcx.sess,\n+                        decl.source_info.span,\n+                        E0022,\n+                        \"arguments of constant functions can only be immutable by-value bindings\"\n+                    );\n+                    if self.tcx.sess.teach(&err.get_code().unwrap()) {\n+                        err.note(\"Constant functions are not allowed to mutate anything. Thus, \\\n+                                  binding to an argument with a mutable pattern is not allowed.\");\n+                        err.note(\"Remove any mutable bindings from the argument list to fix this \\\n+                                  error. In case you need to mutate the argument, try lazily \\\n+                                  initializing a global variable instead of using a const fn, or \\\n+                                  refactoring the code to a functional style to avoid mutation if \\\n+                                  possible.\");\n+                    }\n+                    err.emit();\n                     return;\n                 }\n             }"}, {"sha": "59864182a7e406fb0d60bdf300909f9989620317", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -237,10 +237,20 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckCrateVisitor<'a, 'tcx> {\n                     Ok(Ordering::Less) |\n                     Ok(Ordering::Equal) => {}\n                     Ok(Ordering::Greater) => {\n-                        struct_span_err!(self.tcx.sess, start.span, E0030,\n-                            \"lower range bound must be less than or equal to upper\")\n-                            .span_label(start.span, \"lower bound larger than upper bound\")\n-                            .emit();\n+                        let mut err = struct_span_err!(\n+                            self.tcx.sess,\n+                            start.span,\n+                            E0030,\n+                            \"lower range bound must be less than or equal to upper\"\n+                        );\n+                        err.span_label(start.span, \"lower bound larger than upper bound\");\n+                        if self.tcx.sess.teach(&err.get_code().unwrap()) {\n+                            err.note(\"When matching against a range, the compiler verifies that \\\n+                                      the range is non-empty. Range patterns include both \\\n+                                      end-points, so this is equivalent to requiring the start of \\\n+                                      the range to be less than or equal to the end of the range.\");\n+                        }\n+                        err.emit();\n                     }\n                     Err(ErrorReported) => {}\n                 }"}, {"sha": "bf253a88d27c2e270f5da4f44f29e7e605ef817f", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 73, "deletions": 21, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -214,12 +214,25 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         end.span\n                     };\n \n-                    struct_span_err!(tcx.sess, span, E0029,\n-                        \"only char and numeric types are allowed in range patterns\")\n-                        .span_label(span, \"ranges require char or numeric types\")\n-                        .note(&format!(\"start type: {}\", self.ty_to_string(lhs_ty)))\n-                        .note(&format!(\"end type: {}\", self.ty_to_string(rhs_ty)))\n-                        .emit();\n+                    let mut err = struct_span_err!(\n+                        tcx.sess,\n+                        span,\n+                        E0029,\n+                        \"only char and numeric types are allowed in range patterns\"\n+                    );\n+                    err.span_label(span, \"ranges require char or numeric types\");\n+                    err.note(&format!(\"start type: {}\", self.ty_to_string(lhs_ty)));\n+                    err.note(&format!(\"end type: {}\", self.ty_to_string(rhs_ty)));\n+                    if tcx.sess.teach(&err.get_code().unwrap()) {\n+                        err.note(\n+                            \"In a match expression, only numbers and characters can be matched \\\n+                             against a range. This is because the compiler checks that the range \\\n+                             is non-empty at compile-time, and is unable to evaluate arbitrary \\\n+                             comparison functions. If you want to capture values of an orderable \\\n+                             type between two end-points, you can use a guard.\"\n+                         );\n+                    }\n+                    err.emit();\n                     return;\n                 }\n \n@@ -505,10 +518,25 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     // This is \"x = SomeTrait\" being reduced from\n                     // \"let &x = &SomeTrait\" or \"let box x = Box<SomeTrait>\", an error.\n                     let type_str = self.ty_to_string(expected);\n-                    struct_span_err!(self.tcx.sess, span, E0033,\n-                              \"type `{}` cannot be dereferenced\", type_str)\n-                        .span_label(span, format!(\"type `{}` cannot be dereferenced\", type_str))\n-                        .emit();\n+                    let mut err = struct_span_err!(\n+                        self.tcx.sess,\n+                        span,\n+                        E0033,\n+                        \"type `{}` cannot be dereferenced\",\n+                        type_str\n+                    );\n+                    err.span_label(span, format!(\"type `{}` cannot be dereferenced\", type_str));\n+                    if self.tcx.sess.teach(&err.get_code().unwrap()) {\n+                        err.note(\"\\\n+This error indicates that a pointer to a trait type cannot be implicitly dereferenced by a \\\n+pattern. Every trait defines a type, but because the size of trait implementors isn't fixed, \\\n+this type has no compile-time size. Therefore, all accesses to trait types must be through \\\n+pointers. If you encounter this error you should try to avoid dereferencing the pointer.\n+\n+You can read more about trait objects in the Trait Objects section of the Reference: \\\n+https://doc.rust-lang.org/reference/types.html#trait-objects\");\n+                    }\n+                    err.emit();\n                     return false\n                 }\n             }\n@@ -881,17 +909,33 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             self.field_ty(span, f, substs)\n                         })\n                         .unwrap_or_else(|| {\n-                            struct_span_err!(tcx.sess, span, E0026,\n-                                             \"{} `{}` does not have a field named `{}`\",\n-                                             kind_name,\n-                                             tcx.item_path_str(variant.did),\n-                                             field.name)\n-                                .span_label(span,\n-                                            format!(\"{} `{}` does not have field `{}`\",\n-                                                     kind_name,\n-                                                     tcx.item_path_str(variant.did),\n-                                                     field.name))\n-                                .emit();\n+                            let mut err = struct_span_err!(\n+                                tcx.sess,\n+                                span,\n+                                E0026,\n+                                \"{} `{}` does not have a field named `{}`\",\n+                                kind_name,\n+                                tcx.item_path_str(variant.did),\n+                                field.name\n+                            );\n+                            err.span_label(span,\n+                                           format!(\"{} `{}` does not have field `{}`\",\n+                                                   kind_name,\n+                                                   tcx.item_path_str(variant.did),\n+                                                   field.name));\n+                            if tcx.sess.teach(&err.get_code().unwrap()) {\n+                                err.note(\n+                                    \"This error indicates that a struct pattern attempted to \\\n+                                     extract a non-existent field from a struct. Struct fields \\\n+                                     are identified by the name used before the colon : so struct \\\n+                                     patterns should resemble the declaration of the struct type \\\n+                                     being matched.\\n\\n\\\n+                                     If you are using shorthand field patterns but want to refer \\\n+                                     to the struct field by a different name, you should rename \\\n+                                     it explicitly.\"\n+                                );\n+                            }\n+                            err.emit();\n \n                             tcx.types.err\n                         })\n@@ -927,6 +971,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 if variant.ctor_kind == CtorKind::Fn {\n                     diag.note(\"trying to match a tuple variant with a struct variant pattern\");\n                 }\n+                if tcx.sess.teach(&diag.get_code().unwrap()) {\n+                    diag.note(\n+                        \"This error indicates that a pattern for a struct fails to specify a \\\n+                         sub-pattern for every one of the struct's fields. Ensure that each field \\\n+                         from the struct's definition is mentioned in the pattern, or use `..` to \\\n+                         ignore unwanted fields.\"\n+                    );\n+                }\n                 diag.emit();\n             }\n         }"}, {"sha": "b72b0d661901fbf0d9b3a8bbc215628067e49919", "filename": "src/test/ui/error-codes/E0001.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0001.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0001.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0001.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0001.rs"}, {"sha": "d7d67af1492c60c2db3a8a54721f7d533de95480", "filename": "src/test/ui/error-codes/E0001.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0001.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0001.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0001.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,14 @@\n+error: unreachable pattern\n+  --> $DIR/E0001.rs:18:9\n+   |\n+18 |         _ => {/* ... */} //~ ERROR unreachable pattern\n+   |         ^\n+   |\n+note: lint level defined here\n+  --> $DIR/E0001.rs:11:9\n+   |\n+11 | #![deny(unreachable_patterns)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "824b86cfa83120755de6f06f93e39c93178b27ed", "filename": "src/test/ui/error-codes/E0004-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0004-2.rs"}, {"sha": "2f4d26e2f327c5584aee24d6baa95b5f28f6232e", "filename": "src/test/ui/error-codes/E0004-2.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,14 @@\n+error[E0004]: non-exhaustive patterns: type std::option::Option<i32> is non-empty\n+  --> $DIR/E0004-2.rs:14:11\n+   |\n+14 |     match x { } //~ ERROR E0004\n+   |           ^\n+   |\n+help: Please ensure that all possible cases are being handled; possibly adding wildcards or more match arms.\n+  --> $DIR/E0004-2.rs:14:11\n+   |\n+14 |     match x { } //~ ERROR E0004\n+   |           ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "8df07a0c1c5b26de75a2e963982bc93a62d8d4f1", "filename": "src/test/ui/error-codes/E0004.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0004.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0004.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0004.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0004.rs"}, {"sha": "836afaf05ba9f76eea7c8cc89dd2cf03867276ea", "filename": "src/test/ui/error-codes/E0004.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0004.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0004.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0004.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0004]: non-exhaustive patterns: `HastaLaVistaBaby` not covered\n+  --> $DIR/E0004.rs:19:11\n+   |\n+19 |     match x { //~ ERROR E0004\n+   |           ^ pattern `HastaLaVistaBaby` not covered\n+\n+error: aborting due to previous error\n+"}, {"sha": "0405bba81b585d81a7a2d0ac63c3827210b46964", "filename": "src/test/ui/error-codes/E0005.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0005.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0005.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0005.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0005.rs"}, {"sha": "d052c12e9fe9df3848dc3ec9fdcacb6c47272d4c", "filename": "src/test/ui/error-codes/E0005.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0005]: refutable pattern in local binding: `None` not covered\n+  --> $DIR/E0005.rs:13:9\n+   |\n+13 |     let Some(y) = x; //~ ERROR E0005\n+   |         ^^^^^^^ pattern `None` not covered\n+\n+error: aborting due to previous error\n+"}, {"sha": "d5acbdebbe9b9276564c49088b2b1e82eadac96b", "filename": "src/test/ui/error-codes/E0007.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0007.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0007.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0007.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0007.rs"}, {"sha": "1370cacd7cbfaec674623525e98d432ff18d5c74", "filename": "src/test/ui/error-codes/E0007.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0007.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0007.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0007.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,14 @@\n+error[E0007]: cannot bind by-move with sub-bindings\n+  --> $DIR/E0007.rs:14:9\n+   |\n+14 |         op_string @ Some(s) => {},\n+   |         ^^^^^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n+\n+error[E0303]: pattern bindings are not allowed after an `@`\n+  --> $DIR/E0007.rs:14:26\n+   |\n+14 |         op_string @ Some(s) => {},\n+   |                          ^ not allowed after `@`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "ba5720e6f0abdd998c5b8e341d7ac1c8c7dcd133", "filename": "src/test/ui/error-codes/E0008.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0008.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0008.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0008.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0008.rs"}, {"sha": "6ae4506a6e390a31850e69ebf3f9d4ba8e863106", "filename": "src/test/ui/error-codes/E0008.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0008.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0008.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0008.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0008]: cannot bind by-move into a pattern guard\n+  --> $DIR/E0008.rs:13:14\n+   |\n+13 |         Some(s) if s.len() == 0 => {},\n+   |              ^ moves value into pattern guard\n+\n+error: aborting due to previous error\n+"}, {"sha": "02e2e80e7eab151d5ef7c04bb6b07ce7d2c348ad", "filename": "src/test/ui/error-codes/E0009.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0009.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0009.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0009.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0009.rs"}, {"sha": "31db957621d21903ec1cce2ecf34b0f1c3d7a1f1", "filename": "src/test/ui/error-codes/E0009.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0009.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0009.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0009.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,10 @@\n+error[E0009]: cannot bind by-move and by-ref in the same pattern\n+  --> $DIR/E0009.rs:15:15\n+   |\n+15 |         Some((y, ref z)) => {},\n+   |               ^  ----- both by-ref and by-move used\n+   |               |\n+   |               by-move pattern here\n+\n+error: aborting due to previous error\n+"}, {"sha": "e5ccf32af1473e44693414e08e0220636fbccfd5", "filename": "src/test/ui/error-codes/E0010-teach.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z teach\n+\n+#![feature(box_syntax)]\n+#![allow(warnings)]\n+\n+const CON : Box<i32> = box 0; //~ ERROR E0010\n+\n+fn main() {}"}, {"sha": "46f8101ca65ada4fc4f28380af5dc07724cb085e", "filename": "src/test/ui/error-codes/E0010-teach.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,10 @@\n+error[E0010]: allocations are not allowed in constants\n+  --> $DIR/E0010-teach.rs:16:24\n+   |\n+16 | const CON : Box<i32> = box 0; //~ ERROR E0010\n+   |                        ^^^^^ allocation not allowed in constants\n+   |\n+   = note: The value of statics and constants must be known at compile time, and they live for the entire lifetime of a program. Creating a boxed value allocates memory on the heap at runtime, and therefore cannot be done at compile time.\n+\n+error: aborting due to previous error\n+"}, {"sha": "66a9319a7df4345c03a622818760910fb8adc696", "filename": "src/test/ui/error-codes/E0010.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0010.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0010.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0010.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0010.rs"}, {"sha": "5cef631e05ed6476322088c6ba51dbbc83961c55", "filename": "src/test/ui/error-codes/E0010.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0010.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0010.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0010.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0010]: allocations are not allowed in constants\n+  --> $DIR/E0010.rs:14:24\n+   |\n+14 | const CON : Box<i32> = box 0; //~ ERROR E0010\n+   |                        ^^^^^ allocation not allowed in constants\n+\n+error: aborting due to previous error\n+"}, {"sha": "c98c35a1442add7ec66fd110eeef3d6da2fbf593", "filename": "src/test/ui/error-codes/E0017.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0017.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0017.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0017.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0017.rs"}, {"sha": "f1fe1e58b34d74bfa58a713d12e7851f2336f1f8", "filename": "src/test/ui/error-codes/E0017.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,26 @@\n+error[E0017]: references in constants may only refer to immutable values\n+  --> $DIR/E0017.rs:14:30\n+   |\n+14 | const CR: &'static mut i32 = &mut C; //~ ERROR E0017\n+   |                              ^^^^^^ constants require immutable values\n+\n+error[E0017]: references in statics may only refer to immutable values\n+  --> $DIR/E0017.rs:15:39\n+   |\n+15 | static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n+   |                                       ^^^^^^ statics require immutable values\n+\n+error[E0596]: cannot borrow immutable static item as mutable\n+  --> $DIR/E0017.rs:15:44\n+   |\n+15 | static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n+   |                                            ^\n+\n+error[E0017]: references in statics may only refer to immutable values\n+  --> $DIR/E0017.rs:17:38\n+   |\n+17 | static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0017\n+   |                                      ^^^^^^ statics require immutable values\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "24032c59844dcf491881384a510ad52b193e6ee7", "filename": "src/test/ui/error-codes/E0023.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0023.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0023.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0023.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0023.rs"}, {"sha": "582dffeb19ce20da7dc1ee2bb090a10380fdac50", "filename": "src/test/ui/error-codes/E0023.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,20 @@\n+error[E0023]: this pattern has 1 field, but the corresponding tuple variant has 2 fields\n+  --> $DIR/E0023.rs:20:9\n+   |\n+20 |         Fruit::Apple(a) => {}, //~ ERROR E0023\n+   |         ^^^^^^^^^^^^^^^ expected 2 fields, found 1\n+\n+error[E0023]: this pattern has 3 fields, but the corresponding tuple variant has 2 fields\n+  --> $DIR/E0023.rs:21:9\n+   |\n+21 |         Fruit::Apple(a, b, c) => {}, //~ ERROR E0023\n+   |         ^^^^^^^^^^^^^^^^^^^^^ expected 2 fields, found 3\n+\n+error[E0023]: this pattern has 2 fields, but the corresponding tuple variant has 1 field\n+  --> $DIR/E0023.rs:22:9\n+   |\n+22 |         Fruit::Pear(1, 2) => {}, //~ ERROR E0023\n+   |         ^^^^^^^^^^^^^^^^^ expected 1 field, found 2\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "81d0ea8a5e21d1f5e16c68a49c2ee2daf68d5a17", "filename": "src/test/ui/error-codes/E0025.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0025.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0025.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0025.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0025.rs"}, {"sha": "480cd2a5cc8a9f2016830f2a0d2fbd5945a46a26", "filename": "src/test/ui/error-codes/E0025.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0025.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0025.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0025.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,10 @@\n+error[E0025]: field `a` bound multiple times in the pattern\n+  --> $DIR/E0025.rs:18:21\n+   |\n+18 |     let Foo { a: x, a: y, b: 0 } = x;\n+   |               ----  ^^^^ multiple uses of `a` in pattern\n+   |               |\n+   |               first use of `a`\n+\n+error: aborting due to previous error\n+"}, {"sha": "e0ce44a8b6f5f0dc221b284ca7cb89f4964d1c2b", "filename": "src/test/ui/error-codes/E0026-teach.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0026-teach.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0026-teach.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0026-teach.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z teach\n+\n+struct Thing {\n+    x: u32,\n+    y: u32\n+}\n+\n+fn main() {\n+    let thing = Thing { x: 0, y: 0 };\n+    match thing {\n+        Thing { x, y, z } => {}\n+        //~^ ERROR struct `Thing` does not have a field named `z` [E0026]\n+    }\n+}"}, {"sha": "ee83cfb353515e371f5ce4c27c760c2df1e26e15", "filename": "src/test/ui/error-codes/E0026-teach.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0026-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0026-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0026-teach.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,12 @@\n+error[E0026]: struct `Thing` does not have a field named `z`\n+  --> $DIR/E0026-teach.rs:21:23\n+   |\n+21 |         Thing { x, y, z } => {}\n+   |                       ^ struct `Thing` does not have field `z`\n+   |\n+   = note: This error indicates that a struct pattern attempted to extract a non-existent field from a struct. Struct fields are identified by the name used before the colon : so struct patterns should resemble the declaration of the struct type being matched.\n+           \n+           If you are using shorthand field patterns but want to refer to the struct field by a different name, you should rename it explicitly.\n+\n+error: aborting due to previous error\n+"}, {"sha": "f8ad7b5a30e1c0f88ff23aa46a30309e0f2bef2b", "filename": "src/test/ui/error-codes/E0026.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0026.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0026.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0026.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0026.rs"}, {"sha": "c9819df3f9fbd8be7d4296b8154bf5c271318479", "filename": "src/test/ui/error-codes/E0026.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0026.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0026.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0026.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0026]: struct `Thing` does not have a field named `z`\n+  --> $DIR/E0026.rs:19:23\n+   |\n+19 |         Thing { x, y, z } => {}\n+   |                       ^ struct `Thing` does not have field `z`\n+\n+error: aborting due to previous error\n+"}, {"sha": "17e045bb8b08624a41abab17db2243fc6680433d", "filename": "src/test/ui/error-codes/E0027-teach.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0027-teach.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0027-teach.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0027-teach.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z teach\n+\n+struct Dog {\n+    name: String,\n+    age: u32,\n+}\n+\n+fn main() {\n+    let d = Dog { name: \"Rusty\".to_string(), age: 8 };\n+\n+    match d {\n+        Dog { age: x } => {}\n+        //~^ ERROR pattern does not mention field `name`\n+    }\n+}"}, {"sha": "e9f9e4ba766f2b7f280a880ede653f7ae31125ec", "filename": "src/test/ui/error-codes/E0027-teach.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0027-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0027-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0027-teach.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,10 @@\n+error[E0027]: pattern does not mention field `name`\n+  --> $DIR/E0027-teach.rs:22:9\n+   |\n+22 |         Dog { age: x } => {}\n+   |         ^^^^^^^^^^^^^^ missing field `name`\n+   |\n+   = note: This error indicates that a pattern for a struct fails to specify a sub-pattern for every one of the struct's fields. Ensure that each field from the struct's definition is mentioned in the pattern, or use `..` to ignore unwanted fields.\n+\n+error: aborting due to previous error\n+"}, {"sha": "b63b0ab5dfdef5fe45356e93d9ccf1efaf821f48", "filename": "src/test/ui/error-codes/E0027.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0027.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0027.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0027.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0027.rs"}, {"sha": "0f93a776b9ef15dcc36285bf83f9e1418559b174", "filename": "src/test/ui/error-codes/E0027.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0027.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0027.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0027.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0027]: pattern does not mention field `name`\n+  --> $DIR/E0027.rs:20:9\n+   |\n+20 |         Dog { age: x } => {}\n+   |         ^^^^^^^^^^^^^^ missing field `name`\n+\n+error: aborting due to previous error\n+"}, {"sha": "ca85f58133ccdf5efb32a34183a5fad7016bc1a6", "filename": "src/test/ui/error-codes/E0029-teach.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z teach\n+\n+fn main() {\n+    let s = \"hoho\";\n+\n+    match s {\n+        \"hello\" ... \"world\" => {}\n+        //~^ ERROR only char and numeric types are allowed in range patterns\n+        //~| ERROR non-reference pattern used to match a reference\n+        _ => {}\n+    }\n+}"}, {"sha": "dbb8d972f5c22a4b19196f784757f065baefc83a", "filename": "src/test/ui/error-codes/E0029-teach.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,20 @@\n+error[E0658]: non-reference pattern used to match a reference (see issue #42640)\n+  --> $DIR/E0029-teach.rs:17:9\n+   |\n+17 |         \"hello\" ... \"world\" => {}\n+   |         ^^^^^^^^^^^^^^^^^^^ help: consider using a reference: `&\"hello\" ... \"world\"`\n+   |\n+   = help: add #![feature(match_default_bindings)] to the crate attributes to enable\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/E0029-teach.rs:17:9\n+   |\n+17 |         \"hello\" ... \"world\" => {}\n+   |         ^^^^^^^^^^^^^^^^^^^ ranges require char or numeric types\n+   |\n+   = note: start type: &'static str\n+   = note: end type: &'static str\n+   = note: In a match expression, only numbers and characters can be matched against a range. This is because the compiler checks that the range is non-empty at compile-time, and is unable to evaluate arbitrary comparison functions. If you want to capture values of an orderable type between two end-points, you can use a guard.\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "80d215bd327c9f04757dc241e565795ea9893008", "filename": "src/test/ui/error-codes/E0029.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0029.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0029.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0029.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0029.rs"}, {"sha": "02fbd20386f2d91053bd2bb55da48042ac5ccbc0", "filename": "src/test/ui/error-codes/E0029.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0029.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0029.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0029.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,19 @@\n+error[E0658]: non-reference pattern used to match a reference (see issue #42640)\n+  --> $DIR/E0029.rs:15:9\n+   |\n+15 |         \"hello\" ... \"world\" => {}\n+   |         ^^^^^^^^^^^^^^^^^^^ help: consider using a reference: `&\"hello\" ... \"world\"`\n+   |\n+   = help: add #![feature(match_default_bindings)] to the crate attributes to enable\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/E0029.rs:15:9\n+   |\n+15 |         \"hello\" ... \"world\" => {}\n+   |         ^^^^^^^^^^^^^^^^^^^ ranges require char or numeric types\n+   |\n+   = note: start type: &'static str\n+   = note: end type: &'static str\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "2af32eda62be9043f47149c046768e301618d042", "filename": "src/test/ui/error-codes/E0030-teach.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0030-teach.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0030-teach.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0030-teach.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z teach\n+\n+fn main() {\n+    match 5u32 {\n+        1000 ... 5 => {}\n+        //~^ ERROR lower range bound must be less than or equal to upper\n+    }\n+}"}, {"sha": "40b3d790e1245dda139bac1e0aabf1c9bed1c2ba", "filename": "src/test/ui/error-codes/E0030-teach.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0030-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0030-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0030-teach.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,10 @@\n+error[E0030]: lower range bound must be less than or equal to upper\n+  --> $DIR/E0030-teach.rs:15:9\n+   |\n+15 |         1000 ... 5 => {}\n+   |         ^^^^ lower bound larger than upper bound\n+   |\n+   = note: When matching against a range, the compiler verifies that the range is non-empty. Range patterns include both end-points, so this is equivalent to requiring the start of the range to be less than or equal to the end of the range.\n+\n+error: aborting due to previous error\n+"}, {"sha": "ef3bded4beffbfb8dd9badf22ca7691c997b6e8c", "filename": "src/test/ui/error-codes/E0030.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0030.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0030.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0030.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0030.rs"}, {"sha": "7bdecd0028e74fda3e87b5a68ccc25d3d9f3bfec", "filename": "src/test/ui/error-codes/E0030.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0030.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0030.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0030.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0030]: lower range bound must be less than or equal to upper\n+  --> $DIR/E0030.rs:14:9\n+   |\n+14 |         1000 ... 5 => {}\n+   |         ^^^^ lower bound larger than upper bound\n+\n+error: aborting due to previous error\n+"}, {"sha": "51a1390bf79d15a51485ca76e5a77f217241c72f", "filename": "src/test/ui/error-codes/E0033-teach.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z teach\n+\n+trait SomeTrait {\n+    fn foo();\n+}\n+\n+fn main() {\n+    let trait_obj: &SomeTrait = SomeTrait;\n+    //~^ ERROR expected value, found trait `SomeTrait`\n+    //~| ERROR E0038\n+    //~| method `foo` has no receiver\n+\n+    let &invalid = trait_obj;\n+    //~^ ERROR E0033\n+}"}, {"sha": "ea60fcb6ccf1cc351a550c49888dc18e153dbefa", "filename": "src/test/ui/error-codes/E0033-teach.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,26 @@\n+error[E0423]: expected value, found trait `SomeTrait`\n+  --> $DIR/E0033-teach.rs:18:33\n+   |\n+18 |     let trait_obj: &SomeTrait = SomeTrait;\n+   |                                 ^^^^^^^^^ not a value\n+\n+error[E0038]: the trait `SomeTrait` cannot be made into an object\n+  --> $DIR/E0033-teach.rs:18:20\n+   |\n+18 |     let trait_obj: &SomeTrait = SomeTrait;\n+   |                    ^^^^^^^^^^ the trait `SomeTrait` cannot be made into an object\n+   |\n+   = note: method `foo` has no receiver\n+\n+error[E0033]: type `&SomeTrait` cannot be dereferenced\n+  --> $DIR/E0033-teach.rs:23:9\n+   |\n+23 |     let &invalid = trait_obj;\n+   |         ^^^^^^^^ type `&SomeTrait` cannot be dereferenced\n+   |\n+   = note: This error indicates that a pointer to a trait type cannot be implicitly dereferenced by a pattern. Every trait defines a type, but because the size of trait implementors isn't fixed, this type has no compile-time size. Therefore, all accesses to trait types must be through pointers. If you encounter this error you should try to avoid dereferencing the pointer.\n+           \n+           You can read more about trait objects in the Trait Objects section of the Reference: https://doc.rust-lang.org/reference/types.html#trait-objects\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "3cdbb55f6deafb1e8c60198f8d86edb0caf709a4", "filename": "src/test/ui/error-codes/E0033.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0033.rs"}, {"sha": "abc535ee2a64755e8fa535c10d62c157d61737fe", "filename": "src/test/ui/error-codes/E0033.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,22 @@\n+error[E0423]: expected value, found trait `SomeTrait`\n+  --> $DIR/E0033.rs:16:33\n+   |\n+16 |     let trait_obj: &SomeTrait = SomeTrait;\n+   |                                 ^^^^^^^^^ not a value\n+\n+error[E0038]: the trait `SomeTrait` cannot be made into an object\n+  --> $DIR/E0033.rs:16:20\n+   |\n+16 |     let trait_obj: &SomeTrait = SomeTrait;\n+   |                    ^^^^^^^^^^ the trait `SomeTrait` cannot be made into an object\n+   |\n+   = note: method `foo` has no receiver\n+\n+error[E0033]: type `&SomeTrait` cannot be dereferenced\n+  --> $DIR/E0033.rs:21:9\n+   |\n+21 |     let &invalid = trait_obj;\n+   |         ^^^^^^^^ type `&SomeTrait` cannot be dereferenced\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "6eebd4d4d53606fc2279c2395f591e9676f20d66", "filename": "src/test/ui/error-codes/E0034.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0034.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0034.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0034.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0034.rs"}, {"sha": "238fd0d67a080a25ab4598751aca03b8ac7a59a5", "filename": "src/test/ui/error-codes/E0034.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0034.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0034.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0034.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,19 @@\n+error[E0034]: multiple applicable items in scope\n+  --> $DIR/E0034.rs:30:5\n+   |\n+30 |     Test::foo() //~ ERROR multiple applicable items in scope\n+   |     ^^^^^^^^^ multiple `foo` found\n+   |\n+note: candidate #1 is defined in an impl of the trait `Trait1` for the type `Test`\n+  --> $DIR/E0034.rs:22:5\n+   |\n+22 |     fn foo() {}\n+   |     ^^^^^^^^\n+note: candidate #2 is defined in an impl of the trait `Trait2` for the type `Test`\n+  --> $DIR/E0034.rs:26:5\n+   |\n+26 |     fn foo() {}\n+   |     ^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "8087928c051bb1055b3c0490b9aefabead0f1ffa", "filename": "src/test/ui/error-codes/E0038.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0038.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0038.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0038.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0038.rs"}, {"sha": "e9423561f37750301bf54923ff55ec2affbeb45f", "filename": "src/test/ui/error-codes/E0038.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,10 @@\n+error[E0038]: the trait `Trait` cannot be made into an object\n+  --> $DIR/E0038.rs:15:1\n+   |\n+15 | fn call_foo(x: Box<Trait>) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n+   |\n+   = note: method `foo` references the `Self` type in its arguments or return type\n+\n+error: aborting due to previous error\n+"}, {"sha": "8385d68c540dd372cac0a2c253e2b149c6bb2f0f", "filename": "src/test/ui/error-codes/E0040.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0040.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0040.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0040.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0040.rs"}, {"sha": "73cb49fbf9878ef7b0e51d71f5a83aff498436a3", "filename": "src/test/ui/error-codes/E0040.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0040.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0040.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0040.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0040]: explicit use of destructor method\n+  --> $DIR/E0040.rs:23:7\n+   |\n+23 |     x.drop();\n+   |       ^^^^ explicit destructor calls not allowed\n+\n+error: aborting due to previous error\n+"}, {"sha": "48fe230003129f5614f77c60d92435424110ecbe", "filename": "src/test/ui/error-codes/E0044.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0044.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0044.rs"}, {"sha": "65a429c1fcacd5aa99c1296e43f3ea1bcd30d854", "filename": "src/test/ui/error-codes/E0044.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0044.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0044.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0044.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,14 @@\n+error[E0044]: foreign items may not have type parameters\n+  --> $DIR/E0044.rs:11:10\n+   |\n+11 | extern { fn some_func<T>(x: T); } //~ ERROR E0044\n+   |          ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider using specialization instead of type parameters\n+  --> $DIR/E0044.rs:11:10\n+   |\n+11 | extern { fn some_func<T>(x: T); } //~ ERROR E0044\n+   |          ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "57c639dd143a2c1137378606962858615275e4c5", "filename": "src/test/ui/error-codes/E0045.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0045.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0045.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0045.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0045.rs"}, {"sha": "cd400564669f526da842631605572f527655594b", "filename": "src/test/ui/error-codes/E0045.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0045.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0045.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0045.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0045]: variadic function must have C or cdecl calling convention\n+  --> $DIR/E0045.rs:11:17\n+   |\n+11 | extern \"Rust\" { fn foo(x: u8, ...); }   //~ ERROR E0045\n+   |                 ^^^^^^^^^^^^^^^^^^^ variadics require C or cdecl calling convention\n+\n+error: aborting due to previous error\n+"}, {"sha": "5867e11e9acc606e890b16c7964c74fa2865ff7e", "filename": "src/test/ui/error-codes/E0049.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0049.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0049.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0049.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0049.rs"}, {"sha": "e6f72bab50ad4da53922d546154cd75708a47669", "filename": "src/test/ui/error-codes/E0049.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0049.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0049.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0049.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,11 @@\n+error[E0049]: method `foo` has 0 type parameters but its trait declaration has 1 type parameter\n+  --> $DIR/E0049.rs:18:5\n+   |\n+12 |     fn foo<T: Default>(x: T) -> Self;\n+   |     --------------------------------- expected 1 type parameter\n+...\n+18 |     fn foo(x: bool) -> Self { Bar } //~ ERROR E0049\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ found 0 type parameters\n+\n+error: aborting due to previous error\n+"}, {"sha": "2ccc380c540d264cbe7c14e268ac6a1862eaed35", "filename": "src/test/ui/error-codes/E0050.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0050.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0050.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0050.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0050.rs"}, {"sha": "d95a2005b1876e77b74c41b5313ca9ba5f22c68c", "filename": "src/test/ui/error-codes/E0050.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0050.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0050.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0050.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,29 @@\n+error[E0050]: method `foo` has 1 parameter but the declaration in trait `Foo::foo` has 2\n+  --> $DIR/E0050.rs:20:12\n+   |\n+12 |     fn foo(&self, x: u8) -> bool;\n+   |                      -- trait requires 2 parameters\n+...\n+20 |     fn foo(&self) -> bool { true } //~ ERROR E0050\n+   |            ^^^^^ expected 2 parameters, found 1\n+\n+error[E0050]: method `bar` has 1 parameter but the declaration in trait `Foo::bar` has 4\n+  --> $DIR/E0050.rs:21:12\n+   |\n+13 |     fn bar(&self, x: u8, y: u8, z: u8);\n+   |                                    -- trait requires 4 parameters\n+...\n+21 |     fn bar(&self) { } //~ ERROR E0050\n+   |            ^^^^^ expected 4 parameters, found 1\n+\n+error[E0050]: method `less` has 4 parameters but the declaration in trait `Foo::less` has 1\n+  --> $DIR/E0050.rs:22:37\n+   |\n+14 |     fn less(&self);\n+   |             ----- trait requires 1 parameter\n+...\n+22 |     fn less(&self, x: u8, y: u8, z: u8) { } //~ ERROR E0050\n+   |                                     ^^ expected 1 parameter, found 4\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "158cd6ff9bbc41678eacc6063b0849e2f1617228", "filename": "src/test/ui/error-codes/E0054.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0054.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0054.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0054.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0054.rs"}, {"sha": "fc331579ef5f5476b10d992b8e9d976035697025", "filename": "src/test/ui/error-codes/E0054.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0054.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0054.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0054.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,10 @@\n+error[E0054]: cannot cast as `bool`\n+  --> $DIR/E0054.rs:13:24\n+   |\n+13 |     let x_is_nonzero = x as bool; //~ ERROR E0054\n+   |                        ^^^^^^^^^ unsupported cast\n+   |\n+   = help: compare with zero instead\n+\n+error: aborting due to previous error\n+"}, {"sha": "6e186b81cad8db791595c6012f324ab8cc6439f4", "filename": "src/test/ui/error-codes/E0055.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0055.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0055.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0055.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0055.rs"}, {"sha": "001178e97c065312e0b2b67bddd4537d1e06f3e0", "filename": "src/test/ui/error-codes/E0055.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0055.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0055.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0055.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,10 @@\n+error[E0055]: reached the recursion limit while auto-dereferencing Foo\n+  --> $DIR/E0055.rs:21:13\n+   |\n+21 |     ref_foo.foo();\n+   |             ^^^ deref recursion limit reached\n+   |\n+   = help: consider adding a `#![recursion_limit=\"4\"]` attribute to your crate\n+\n+error: aborting due to previous error\n+"}, {"sha": "1fb5498b099c932632e2dee59c15c78c3f67561f", "filename": "src/test/ui/error-codes/E0057.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0057.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0057.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0057.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0057.rs"}, {"sha": "450c87ca0322bacd8150491781eed5cbb0112dae", "filename": "src/test/ui/error-codes/E0057.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0057.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0057.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0057.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,14 @@\n+error[E0057]: this function takes 1 parameter but 0 parameters were supplied\n+  --> $DIR/E0057.rs:13:13\n+   |\n+13 |     let a = f(); //~ ERROR E0057\n+   |             ^^^ expected 1 parameter\n+\n+error[E0057]: this function takes 1 parameter but 2 parameters were supplied\n+  --> $DIR/E0057.rs:15:13\n+   |\n+15 |     let c = f(2, 3); //~ ERROR E0057\n+   |             ^^^^^^^ expected 1 parameter\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "4ae9b2f91d25f55f7c77f931a1253528a1d69bd8", "filename": "src/test/ui/error-codes/E0059.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0059.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0059.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0059.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0059.rs"}, {"sha": "aca4b8881e28f8e14e975a9cd4e51ef732c5fe0e", "filename": "src/test/ui/error-codes/E0059.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0059.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0059.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0059.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0059]: cannot use call notation; the first type parameter for the function trait is neither a tuple nor unit\n+  --> $DIR/E0059.rs:13:41\n+   |\n+13 | fn foo<F: Fn<i32>>(f: F) -> F::Output { f(3) } //~ ERROR E0059\n+   |                                         ^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "f4505209b66894c6623af12be11d08016561b46f", "filename": "src/test/ui/error-codes/E0060.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0060.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0060.rs"}, {"sha": "8207220ba72c572b3e6898fa95dd2bd0bb6f2f9f", "filename": "src/test/ui/error-codes/E0060.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0060.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,11 @@\n+error[E0060]: this function takes at least 1 parameter but 0 parameters were supplied\n+  --> $DIR/E0060.rs:16:14\n+   |\n+12 |     fn printf(_: *const u8, ...) -> u32;\n+   |     ------------------------------------ defined here\n+...\n+16 |     unsafe { printf(); }\n+   |              ^^^^^^^^ expected at least 1 parameter\n+\n+error: aborting due to previous error\n+"}, {"sha": "221e18cf89dd56a3d49325a6f285c355b93d77f5", "filename": "src/test/ui/error-codes/E0061.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0061.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0061.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0061.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0061.rs"}, {"sha": "89d81b5acd76cb8bc86c0aaa23a1ec049ff255eb", "filename": "src/test/ui/error-codes/E0061.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0061.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0061.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0061.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,20 @@\n+error[E0061]: this function takes 2 parameters but 1 parameter was supplied\n+  --> $DIR/E0061.rs:16:5\n+   |\n+11 | fn f(a: u16, b: &str) {}\n+   | --------------------- defined here\n+...\n+16 |     f(0);\n+   |     ^^^^ expected 2 parameters\n+\n+error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n+  --> $DIR/E0061.rs:20:5\n+   |\n+13 | fn f2(a: u16) {}\n+   | ------------- defined here\n+...\n+20 |     f2();\n+   |     ^^^^ expected 1 parameter\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "684c9464ff824a86da0a3413c8f0d985b77b500f", "filename": "src/test/ui/error-codes/E0062.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0062.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0062.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0062.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0062.rs"}, {"sha": "6c5ecf48045b1890fa6aba97e17c5a8ff682f916", "filename": "src/test/ui/error-codes/E0062.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0062.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0062.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0062.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,10 @@\n+error[E0062]: field `x` specified more than once\n+  --> $DIR/E0062.rs:18:9\n+   |\n+17 |         x: 0,\n+   |         ---- first use of `x`\n+18 |         x: 0,\n+   |         ^^ used more than once\n+\n+error: aborting due to previous error\n+"}, {"sha": "0208aff066b4d3ad4a36cd55dcd542b538d76bc4", "filename": "src/test/ui/error-codes/E0063.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0063.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0063.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0063.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0063.rs"}, {"sha": "023819cc778d000c1abf648229993f0fef632bf1", "filename": "src/test/ui/error-codes/E0063.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0063.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0063.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0063.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,26 @@\n+error[E0063]: missing field `x` in initializer of `SingleFoo`\n+  --> $DIR/E0063.rs:42:13\n+   |\n+42 |     let w = SingleFoo { };\n+   |             ^^^^^^^^^ missing `x`\n+\n+error[E0063]: missing fields `y`, `z` in initializer of `PluralFoo`\n+  --> $DIR/E0063.rs:44:13\n+   |\n+44 |     let x = PluralFoo {x: 1};\n+   |             ^^^^^^^^^ missing `y`, `z`\n+\n+error[E0063]: missing fields `a`, `b`, `y` and 1 other field in initializer of `TruncatedFoo`\n+  --> $DIR/E0063.rs:46:13\n+   |\n+46 |     let y = TruncatedFoo{x:1};\n+   |             ^^^^^^^^^^^^ missing `a`, `b`, `y` and 1 other field\n+\n+error[E0063]: missing fields `a`, `b`, `c` and 2 other fields in initializer of `TruncatedPluralFoo`\n+  --> $DIR/E0063.rs:48:13\n+   |\n+48 |     let z = TruncatedPluralFoo{x:1};\n+   |             ^^^^^^^^^^^^^^^^^^ missing `a`, `b`, `c` and 2 other fields\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "a3fc30ee1c71ab8813637c84e880cf154117934f", "filename": "src/test/ui/error-codes/E0067.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0067.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0067.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0067.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0067.rs"}, {"sha": "a4e15619e8ba8acc8e936593fa87abac2fe4169b", "filename": "src/test/ui/error-codes/E0067.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0067.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0067.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0067.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,16 @@\n+error[E0368]: binary assignment operation `+=` cannot be applied to type `std::collections::LinkedList<_>`\n+  --> $DIR/E0067.rs:14:5\n+   |\n+14 |     LinkedList::new() += 1; //~ ERROR E0368\n+   |     -----------------^^^^^\n+   |     |\n+   |     cannot use `+=` on type `std::collections::LinkedList<_>`\n+\n+error[E0067]: invalid left-hand side expression\n+  --> $DIR/E0067.rs:14:5\n+   |\n+14 |     LinkedList::new() += 1; //~ ERROR E0368\n+   |     ^^^^^^^^^^^^^^^^^ invalid expression for left-hand side\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "a6a7898ed4e8950ee64f8200370c30bd675dca61", "filename": "src/test/ui/error-codes/E0069.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0069.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0069.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0069.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0069.rs"}, {"sha": "8424531889f0fca16988f175fb7eaa9b1b4dc752", "filename": "src/test/ui/error-codes/E0069.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0069.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0069.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0069.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0069]: `return;` in a function whose return type is not `()`\n+  --> $DIR/E0069.rs:12:5\n+   |\n+12 |     return;\n+   |     ^^^^^^ return type is not ()\n+\n+error: aborting due to previous error\n+"}, {"sha": "ba66bd03aef9db9a3d3bb533fac67473e6fb6c03", "filename": "src/test/ui/error-codes/E0070.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0070.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0070.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0070.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0070.rs"}, {"sha": "e1316e2e1306cbae6874c2e23a80143a9fbc9695", "filename": "src/test/ui/error-codes/E0070.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0070.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0070.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0070.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,29 @@\n+error[E0070]: invalid left-hand side expression\n+  --> $DIR/E0070.rs:16:5\n+   |\n+16 |     SOME_CONST = 14; //~ ERROR E0070\n+   |     ^^^^^^^^^^^^^^^ left-hand of expression not valid\n+\n+error[E0070]: invalid left-hand side expression\n+  --> $DIR/E0070.rs:17:5\n+   |\n+17 |     1 = 3; //~ ERROR E0070\n+   |     ^^^^^ left-hand of expression not valid\n+\n+error[E0308]: mismatched types\n+  --> $DIR/E0070.rs:18:25\n+   |\n+18 |     some_other_func() = 4; //~ ERROR E0070\n+   |                         ^ expected (), found integral variable\n+   |\n+   = note: expected type `()`\n+              found type `{integer}`\n+\n+error[E0070]: invalid left-hand side expression\n+  --> $DIR/E0070.rs:18:5\n+   |\n+18 |     some_other_func() = 4; //~ ERROR E0070\n+   |     ^^^^^^^^^^^^^^^^^^^^^ left-hand of expression not valid\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "d71dc7966fa91b501f4b3048c125df81576264af", "filename": "src/test/ui/error-codes/E0071.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0071.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0071.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0071.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0071.rs"}, {"sha": "020dad3ac9f8e5faece5521c2cc3e2af546e619b", "filename": "src/test/ui/error-codes/E0071.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0071.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0071.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0071.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0071]: expected struct, variant or union type, found enum `Foo`\n+  --> $DIR/E0071.rs:15:13\n+   |\n+15 |     let u = FooAlias { value: 0 };\n+   |             ^^^^^^^^ not a struct\n+\n+error: aborting due to previous error\n+"}, {"sha": "d7783904e2e98fd9d2c271c92ca1f51f10d867b0", "filename": "src/test/ui/error-codes/E0075.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0075.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0075.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0075.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0075.rs"}, {"sha": "39d27d6f7e46240ffcb1466fa4828822c463dc2a", "filename": "src/test/ui/error-codes/E0075.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0075.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0075.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0075.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0075]: SIMD vector cannot be empty\n+  --> $DIR/E0075.rs:14:1\n+   |\n+14 | struct Bad; //~ ERROR E0075\n+   | ^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "b159cf107cefb0cc5b99bd623099ea7126ea1131", "filename": "src/test/ui/error-codes/E0076.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0076.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0076.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0076.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0076.rs"}, {"sha": "02ce47977c8a2e221a750541555bb07abf1ddf9f", "filename": "src/test/ui/error-codes/E0076.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0076.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0076]: SIMD vector should be homogeneous\n+  --> $DIR/E0076.rs:14:1\n+   |\n+14 | struct Bad(u16, u32, u32);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ SIMD elements must have the same type\n+\n+error: aborting due to previous error\n+"}, {"sha": "b074e90b2c01fdb95c99b87aa4c604510d59f12d", "filename": "src/test/ui/error-codes/E0077.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0077.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0077.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0077.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0077.rs"}, {"sha": "7e7b55f9b7e772771f0045a165dac74acaeff367", "filename": "src/test/ui/error-codes/E0077.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0077.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0077.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0077.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0077]: SIMD vector element type should be machine type\n+  --> $DIR/E0077.rs:14:1\n+   |\n+14 | struct Bad(String); //~ ERROR E0077\n+   | ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "2f199c48e46e780d642fd48dae266af9e9c1dc80", "filename": "src/test/ui/error-codes/E0080.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0080.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0080.rs"}, {"sha": "2ec2ad31b53bb8ddb19316006715ced21db8c494", "filename": "src/test/ui/error-codes/E0080.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0080.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0080.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0080.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,28 @@\n+warning: constant evaluation error: attempt to shift left with overflow\n+  --> $DIR/E0080.rs:12:9\n+   |\n+12 |     X = (1 << 500), //~ ERROR E0080\n+   |         ^^^^^^^^^^\n+   |\n+   = note: #[warn(const_err)] on by default\n+\n+error[E0080]: constant evaluation error\n+  --> $DIR/E0080.rs:12:9\n+   |\n+12 |     X = (1 << 500), //~ ERROR E0080\n+   |         ^^^^^^^^^^ attempt to shift left with overflow\n+\n+warning: constant evaluation error: attempt to divide by zero\n+  --> $DIR/E0080.rs:14:9\n+   |\n+14 |     Y = (1 / 0) //~ ERROR E0080\n+   |         ^^^^^^^\n+\n+error[E0080]: constant evaluation error\n+  --> $DIR/E0080.rs:14:9\n+   |\n+14 |     Y = (1 / 0) //~ ERROR E0080\n+   |         ^^^^^^^ attempt to divide by zero\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "3b571667336ac9956baf27ed188d00a2e0355d63", "filename": "src/test/ui/error-codes/E0081.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0081.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0081.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0081.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0081.rs"}, {"sha": "035638b2f31df7857e37c0f7e3d3aa86fbbcf79e", "filename": "src/test/ui/error-codes/E0081.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0081.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0081.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0081.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,10 @@\n+error[E0081]: discriminant value `3isize` already exists\n+  --> $DIR/E0081.rs:13:9\n+   |\n+12 |     P = 3,\n+   |         - first use of `3isize`\n+13 |     X = 3,\n+   |         ^ enum already has `3isize`\n+\n+error: aborting due to previous error\n+"}, {"sha": "2be206c9702bf4b40151da6d568905d1fb638b0e", "filename": "src/test/ui/error-codes/E0084.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0084.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0084.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0084.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0084.rs"}, {"sha": "b39a129ba162e050e3b1608fbda50fb89d75c1b6", "filename": "src/test/ui/error-codes/E0084.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0084.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0084.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0084.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,10 @@\n+error[E0084]: unsupported representation for zero-variant enum\n+  --> $DIR/E0084.rs:11:1\n+   |\n+11 | #[repr(i32)] //~ ERROR: E0084\n+   | ^^^^^^^^^^^^\n+12 | enum Foo {}\n+   | ----------- zero-variant enum\n+\n+error: aborting due to previous error\n+"}, {"sha": "6dc08860614d7af836f1984c0dad5564d8a9f67b", "filename": "src/test/ui/error-codes/E0087.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0087.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0087.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0087.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0087.rs"}, {"sha": "20c8cd45dfada8287ede1dd9900dd954ac434beb", "filename": "src/test/ui/error-codes/E0087.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0087.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0087.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0087.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,14 @@\n+error[E0087]: too many type parameters provided: expected at most 0 type parameters, found 1 type parameter\n+  --> $DIR/E0087.rs:15:11\n+   |\n+15 |     foo::<f64>(); //~ ERROR expected at most 0 type parameters, found 1 type parameter [E0087]\n+   |           ^^^ expected 0 type parameters\n+\n+error[E0087]: too many type parameters provided: expected at most 1 type parameter, found 2 type parameters\n+  --> $DIR/E0087.rs:17:16\n+   |\n+17 |     bar::<f64, u64>(); //~ ERROR expected at most 1 type parameter, found 2 type parameters [E0087]\n+   |                ^^^ expected 1 type parameter\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "db84a4edc487c98914f839dd8e9f92415f2d8a65", "filename": "src/test/ui/error-codes/E0088.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0088.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0088.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0088.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0088.rs"}, {"sha": "615df88f1bb2ec0466e1d107daaf2f6f214a599a", "filename": "src/test/ui/error-codes/E0088.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0088.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0088.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0088.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,14 @@\n+error[E0088]: too many lifetime parameters provided: expected at most 0 lifetime parameters, found 1 lifetime parameter\n+  --> $DIR/E0088.rs:15:9\n+   |\n+15 |     f::<'static>(); //~ ERROR E0088\n+   |         ^^^^^^^ expected 0 lifetime parameters\n+\n+error[E0088]: too many lifetime parameters provided: expected at most 1 lifetime parameter, found 2 lifetime parameters\n+  --> $DIR/E0088.rs:16:18\n+   |\n+16 |     g::<'static, 'static>(); //~ ERROR E0088\n+   |                  ^^^^^^^ expected 1 lifetime parameter\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "21df9abd0932e2e3cda269020d3eef3d54415d30", "filename": "src/test/ui/error-codes/E0089.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0089.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0089.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0089.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0089.rs"}, {"sha": "38b45e27fa79663770ff055b2c55ab1e5ff5a02b", "filename": "src/test/ui/error-codes/E0089.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0089.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0089.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0089.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0089]: too few type parameters provided: expected 2 type parameters, found 1 type parameter\n+  --> $DIR/E0089.rs:14:5\n+   |\n+14 |     foo::<f64>(); //~ ERROR expected 2 type parameters, found 1 type parameter [E0089]\n+   |     ^^^^^^^^^^ expected 2 type parameters\n+\n+error: aborting due to previous error\n+"}, {"sha": "13b2131cc8be0d2aedb7df4a33841fe5aa26516e", "filename": "src/test/ui/error-codes/E0090.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0090.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0090.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0090.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0090.rs"}, {"sha": "050082d84df583e0b6a90887e1d1b5f9a7ffced4", "filename": "src/test/ui/error-codes/E0090.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0090.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0090.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0090.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0090]: too few lifetime parameters provided: expected 2 lifetime parameters, found 1 lifetime parameter\n+  --> $DIR/E0090.rs:14:5\n+   |\n+14 |     foo::<'static>(); //~ ERROR expected 2 lifetime parameters, found 1 lifetime parameter [E0090]\n+   |     ^^^^^^^^^^^^^^ expected 2 lifetime parameters\n+\n+error: aborting due to previous error\n+"}, {"sha": "da988dbf819ac8c681a28d3bd4341c112c8e7d34", "filename": "src/test/ui/error-codes/E0091.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0091.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0091.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0091.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0091.rs"}, {"sha": "7d951dd6dfd19067c11c2e5763c8238ab87bb064", "filename": "src/test/ui/error-codes/E0091.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0091.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0091.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0091.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,14 @@\n+error[E0091]: type parameter `T` is unused\n+  --> $DIR/E0091.rs:11:10\n+   |\n+11 | type Foo<T> = u32; //~ ERROR E0091\n+   |          ^ unused type parameter\n+\n+error[E0091]: type parameter `B` is unused\n+  --> $DIR/E0091.rs:12:14\n+   |\n+12 | type Foo2<A, B> = Box<A>; //~ ERROR E0091\n+   |              ^ unused type parameter\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "b08164ac06d4235c0e95907f583406db6118efe9", "filename": "src/test/ui/error-codes/E0092.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0092.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0092.rs"}, {"sha": "788f89944110a9b5e1eb1d6c3e9c376a8687a24a", "filename": "src/test/ui/error-codes/E0092.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0092.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0092.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0092.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0092]: unrecognized atomic operation function: `foo`\n+  --> $DIR/E0092.rs:13:5\n+   |\n+13 |     fn atomic_foo(); //~ ERROR E0092\n+   |     ^^^^^^^^^^^^^^^^ unrecognized atomic operation\n+\n+error: aborting due to previous error\n+"}, {"sha": "d84f9f649113c1c2d282f40e02c1f1a0a29a8541", "filename": "src/test/ui/error-codes/E0093.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0093.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0093.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0093.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0093.rs"}, {"sha": "959d64af433f577a708e42178e7300a447b00d7d", "filename": "src/test/ui/error-codes/E0093.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0093.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0093.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0093.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0093]: unrecognized intrinsic function: `foo`\n+  --> $DIR/E0093.rs:13:5\n+   |\n+13 |     fn foo();\n+   |     ^^^^^^^^^ unrecognized intrinsic\n+\n+error: aborting due to previous error\n+"}, {"sha": "3a31874b244229c272515034a16247a2da7efcdf", "filename": "src/test/ui/error-codes/E0094.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0094.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0094.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0094.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0094.rs"}, {"sha": "fdef3d8877bcf9495c2a0e20c5c15eed52744e54", "filename": "src/test/ui/error-codes/E0094.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0094.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0094.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0094.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0094]: intrinsic has wrong number of type parameters: found 2, expected 1\n+  --> $DIR/E0094.rs:13:15\n+   |\n+13 |     fn size_of<T, U>() -> usize; //~ ERROR E0094\n+   |               ^^^^^^ expected 1 type parameter\n+\n+error: aborting due to previous error\n+"}, {"sha": "0674930a11cca8e5d2ae1c830c82d99d6efdabcc", "filename": "src/test/ui/error-codes/E0106.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0106.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0106.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0106.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0106.rs"}, {"sha": "98442804708eab302af6caf9d12f2b68877ac877", "filename": "src/test/ui/error-codes/E0106.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0106.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0106.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0106.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,32 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/E0106.rs:12:8\n+   |\n+12 |     x: &bool,\n+   |        ^ expected lifetime parameter\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/E0106.rs:17:7\n+   |\n+17 |     B(&bool),\n+   |       ^ expected lifetime parameter\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/E0106.rs:20:14\n+   |\n+20 | type MyStr = &str;\n+   |              ^ expected lifetime parameter\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/E0106.rs:27:10\n+   |\n+27 |     baz: Baz,\n+   |          ^^^ expected lifetime parameter\n+\n+error[E0106]: missing lifetime specifiers\n+  --> $DIR/E0106.rs:30:11\n+   |\n+30 |     buzz: Buzz,\n+   |           ^^^^ expected 2 lifetime parameters\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "16ebd3e9ca5f2abfa3d3b4f92a0a28a2e058479d", "filename": "src/test/ui/error-codes/E0107.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0107.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0107.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0107.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0107.rs"}, {"sha": "6283486039c8d70c3531f4480d001b684dc7e77a", "filename": "src/test/ui/error-codes/E0107.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0107.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0107.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0107.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,20 @@\n+error[E0107]: wrong number of lifetime parameters: expected 2, found 1\n+  --> $DIR/E0107.rs:21:11\n+   |\n+21 |     buzz: Buzz<'a>,\n+   |           ^^^^^^^^ expected 2 lifetime parameters\n+\n+error[E0107]: wrong number of lifetime parameters: expected 0, found 1\n+  --> $DIR/E0107.rs:24:10\n+   |\n+24 |     bar: Bar<'a>,\n+   |          ^^^^^^^ unexpected lifetime parameter\n+\n+error[E0107]: wrong number of lifetime parameters: expected 1, found 3\n+  --> $DIR/E0107.rs:27:11\n+   |\n+27 |     foo2: Foo<'a, 'b, 'c>,\n+   |           ^^^^^^^^^^^^^^^ 2 unexpected lifetime parameters\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "9fc478422504bbe750c2f3b230f022bdb56c61cc", "filename": "src/test/ui/error-codes/E0109.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0109.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0109.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0109.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0109.rs"}, {"sha": "59da11140b1e7eb8164aad8cdbac82185d892f70", "filename": "src/test/ui/error-codes/E0109.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0109.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0109.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0109.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0109]: type parameters are not allowed on this type\n+  --> $DIR/E0109.rs:11:14\n+   |\n+11 | type X = u32<i32>; //~ ERROR E0109\n+   |              ^^^ type parameter not allowed\n+\n+error: aborting due to previous error\n+"}, {"sha": "fd169f4acc5eb0250ad5fae39283d51883764ee0", "filename": "src/test/ui/error-codes/E0110.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0110.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0110.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0110.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0110.rs"}, {"sha": "7417351c16d2c48a39d8eef08850de7967563f90", "filename": "src/test/ui/error-codes/E0110.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0110]: lifetime parameters are not allowed on this type\n+  --> $DIR/E0110.rs:11:14\n+   |\n+11 | type X = u32<'static>; //~ ERROR E0110\n+   |              ^^^^^^^ lifetime parameter not allowed on this type\n+\n+error: aborting due to previous error\n+"}, {"sha": "cd7d8dc3efb986e9118da5707b93dc47caa08aba", "filename": "src/test/ui/error-codes/E0116.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0116.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0116.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0116.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0116.rs"}, {"sha": "c090060e7d67d67ea9c0d16fffa0878dd7f4b128", "filename": "src/test/ui/error-codes/E0116.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0116.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0116.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0116.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,10 @@\n+error[E0116]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n+  --> $DIR/E0116.rs:11:1\n+   |\n+11 | impl Vec<u8> {}\n+   | ^^^^^^^^^^^^^^^ impl for type defined outside of crate.\n+   |\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to previous error\n+"}, {"sha": "982f875c7b0a85108e75d4b315f392124780a083", "filename": "src/test/ui/error-codes/E0117.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0117.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0117.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0117.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0117.rs"}, {"sha": "9856692659a5051f13a59659d41285a7f016d9b7", "filename": "src/test/ui/error-codes/E0117.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0117.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0117.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0117.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,17 @@\n+error[E0120]: the Drop trait may only be implemented on structures\n+  --> $DIR/E0117.rs:11:15\n+   |\n+11 | impl Drop for u32 {} //~ ERROR E0117\n+   |               ^^^ implementing Drop requires a struct\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/E0117.rs:11:1\n+   |\n+11 | impl Drop for u32 {} //~ ERROR E0117\n+   | ^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "d37ff34b861f41d272970920bf135f222773d5ff", "filename": "src/test/ui/error-codes/E0118.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0118.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0118.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0118.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0118.rs"}, {"sha": "8c78890b88accc5d67299be4e3def8d75f31912e", "filename": "src/test/ui/error-codes/E0118.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0118.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0118.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0118.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,10 @@\n+error[E0118]: no base type found for inherent implementation\n+  --> $DIR/E0118.rs:11:6\n+   |\n+11 | impl (u8, u8) { //~ ERROR E0118\n+   |      ^^^^^^^^ impl requires a base type\n+   |\n+   = note: either implement a trait on it or create a newtype to wrap it instead\n+\n+error: aborting due to previous error\n+"}, {"sha": "9528631b3047b6bd749b3aad2db3a7f1ea5cd4a0", "filename": "src/test/ui/error-codes/E0119.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0119.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0119.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0119.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0119.rs"}, {"sha": "91bb74a10d67de19773acea9e4e370b4629a19c6", "filename": "src/test/ui/error-codes/E0119.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0119.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0119.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0119.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,11 @@\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `Foo`:\n+  --> $DIR/E0119.rs:23:1\n+   |\n+15 | impl<T> MyTrait for T {\n+   | --------------------- first implementation here\n+...\n+23 | impl MyTrait for Foo { //~ ERROR E0119\n+   | ^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `Foo`\n+\n+error: aborting due to previous error\n+"}, {"sha": "8d09b877f002b7ee4a72d5d7592251ccec60492b", "filename": "src/test/ui/error-codes/E0120.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0120.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0120.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0120.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0120.rs"}, {"sha": "7c666d9fd0a6de4013e00add004f46df48362f7e", "filename": "src/test/ui/error-codes/E0120.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0120.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0120.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0120.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0120]: the Drop trait may only be implemented on structures\n+  --> $DIR/E0120.rs:13:15\n+   |\n+13 | impl Drop for MyTrait {\n+   |               ^^^^^^^ implementing Drop requires a struct\n+\n+error: aborting due to previous error\n+"}, {"sha": "b26b5f41bfe4772fe185303640be9c3e445ebbc1", "filename": "src/test/ui/error-codes/E0121.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0121.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0121.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0121.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0121.rs"}, {"sha": "fa54d6785631878481485f05d75089e5fe69c253", "filename": "src/test/ui/error-codes/E0121.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,14 @@\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/E0121.rs:11:13\n+   |\n+11 | fn foo() -> _ { 5 } //~ ERROR E0121\n+   |             ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/E0121.rs:13:13\n+   |\n+13 | static BAR: _ = \"test\"; //~ ERROR E0121\n+   |             ^ not allowed in type signatures\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "3ef20c6dd4084ce66e49b00fe71e88817a904ead", "filename": "src/test/ui/error-codes/E0124.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0124.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0124.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0124.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0124.rs"}, {"sha": "8e1ec51ea1cb7f3e35487c9556a6a9237cbf4856", "filename": "src/test/ui/error-codes/E0124.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0124.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0124.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0124.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,10 @@\n+error[E0124]: field `field1` is already declared\n+  --> $DIR/E0124.rs:13:5\n+   |\n+12 |     field1: i32,\n+   |     ----------- `field1` first declared here\n+13 |     field1: i32,\n+   |     ^^^^^^^^^^^ field already declared\n+\n+error: aborting due to previous error\n+"}, {"sha": "37071012825ec9b67f9984e7f202300f80eee315", "filename": "src/test/ui/error-codes/E0128.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0128.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0128.rs"}, {"sha": "fad2d0db8abdf4af56312938a7e9f5617f7b525f", "filename": "src/test/ui/error-codes/E0128.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0128.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0128.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0128.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0128]: type parameters with a default cannot use forward declared identifiers\n+  --> $DIR/E0128.rs:11:14\n+   |\n+11 | struct Foo<T=U, U=()> { //~ ERROR E0128\n+   |              ^ defaulted type parameters cannot be forward declared\n+\n+error: aborting due to previous error\n+"}, {"sha": "d11b59cdf334d336439497c47174669f0e3577a0", "filename": "src/test/ui/error-codes/E0130.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0130.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0130.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0130.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0130.rs"}, {"sha": "02aebe0362a13529f7fe7cf3a0e4ebcc505cb9fc", "filename": "src/test/ui/error-codes/E0130.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0130.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0130.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0130.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0130]: patterns aren't allowed in foreign function declarations\n+  --> $DIR/E0130.rs:12:12\n+   |\n+12 |     fn foo((a, b): (u32, u32));\n+   |            ^^^^^^ pattern not allowed in foreign function\n+\n+error: aborting due to previous error\n+"}, {"sha": "c7e31edd301d454e9be032b518fef3946b2e3365", "filename": "src/test/ui/error-codes/E0131.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0131.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0131.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0131.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0131.rs"}, {"sha": "d97e00fb82df1d727d3308f2de8e1ac21135f490", "filename": "src/test/ui/error-codes/E0131.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0131.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0131.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0131.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0131]: main function is not allowed to have type parameters\n+  --> $DIR/E0131.rs:11:8\n+   |\n+11 | fn main<T>() {\n+   |        ^^^ main cannot have type parameters\n+\n+error: aborting due to previous error\n+"}, {"sha": "25ccb344aba34805c55161cbb90c273cce12c298", "filename": "src/test/ui/error-codes/E0132.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0132.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0132.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0132.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0132.rs"}, {"sha": "5c66d67b907b37aa530bc458a08d084c56cb6d80", "filename": "src/test/ui/error-codes/E0132.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0132.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0132.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0132.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0132]: start function is not allowed to have type parameters\n+  --> $DIR/E0132.rs:14:5\n+   |\n+14 | fn f< T >() {} //~ ERROR E0132\n+   |     ^^^^^ start function cannot have type parameters\n+\n+error: aborting due to previous error\n+"}, {"sha": "2e54f65e7bff49400970f5febb7486c262b89bc6", "filename": "src/test/ui/error-codes/E0133.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0133.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0133.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0133.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0133.rs"}, {"sha": "4d2ebd111ddf639d267b2ff3c59423a5009e437b", "filename": "src/test/ui/error-codes/E0133.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0133.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0133.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0133.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0133]: call to unsafe function requires unsafe function or block\n+  --> $DIR/E0133.rs:14:5\n+   |\n+14 |     f();\n+   |     ^^^ call to unsafe function\n+\n+error: aborting due to previous error\n+"}, {"sha": "067ebcc727cea79d074d3039fa9a7d6158eac53c", "filename": "src/test/ui/error-codes/E0137.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0137.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0137.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0137.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0137.rs"}, {"sha": "bc6bbffb18e72a6638f9ff3aea58c641b5486651", "filename": "src/test/ui/error-codes/E0137.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0137.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0137.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0137.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,11 @@\n+error[E0137]: multiple functions with a #[main] attribute\n+  --> $DIR/E0137.rs:17:1\n+   |\n+14 | fn foo() {}\n+   | ----------- first #[main] function\n+...\n+17 | fn f() {}\n+   | ^^^^^^^^^ additional #[main] function\n+\n+error: aborting due to previous error\n+"}, {"sha": "856616c857085501bd341bf109575d65a9eee582", "filename": "src/test/ui/error-codes/E0138.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0138.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0138.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0138.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0138.rs"}, {"sha": "cee7cc5d906293905cef924670cf2c73edfceb30", "filename": "src/test/ui/error-codes/E0138.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0138.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0138.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0138.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,11 @@\n+error[E0138]: multiple 'start' functions\n+  --> $DIR/E0138.rs:17:1\n+   |\n+14 | fn foo(argc: isize, argv: *const *const u8) -> isize { 0 }\n+   | ---------------------------------------------------------- previous `start` function here\n+...\n+17 | fn f(argc: isize, argv: *const *const u8) -> isize { 0 }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ multiple `start` functions\n+\n+error: aborting due to previous error\n+"}, {"sha": "ae501b94e3f057ac919d5587066592689a09a5cf", "filename": "src/test/ui/error-codes/E0152.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0152.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0152.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0152.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0152.rs"}, {"sha": "a1d5597f031f64ee37b94671710b5e9dec8144ee", "filename": "src/test/ui/error-codes/E0152.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,10 @@\n+error[E0152]: duplicate lang item found: `panic_fmt`.\n+  --> $DIR/E0152.rs:14:1\n+   |\n+14 | struct Foo; //~ ERROR E0152\n+   | ^^^^^^^^^^^\n+   |\n+   = note: first defined in crate `std`.\n+\n+error: aborting due to previous error\n+"}, {"sha": "81adf9083024d62d4d1f41be911dfc1365ee178e", "filename": "src/test/ui/error-codes/E0161.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0161.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0161.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0161.rs"}, {"sha": "9914fdd2d61558904e04b13940d6a4181d1e6225", "filename": "src/test/ui/error-codes/E0161.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0161.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0161.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,14 @@\n+error[E0161]: cannot move a value of type str: the size of str cannot be statically determined\n+  --> $DIR/E0161.rs:14:28\n+   |\n+14 |     let _x: Box<str> = box *\"hello\"; //~ ERROR E0161\n+   |                            ^^^^^^^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/E0161.rs:14:28\n+   |\n+14 |     let _x: Box<str> = box *\"hello\"; //~ ERROR E0161\n+   |                            ^^^^^^^^ cannot move out of borrowed content\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "e13b0af6f7977436c43684f1ee62b89eb1582cea", "filename": "src/test/ui/error-codes/E0162.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0162.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0162.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0162.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0162.rs"}, {"sha": "318a023d30213fbd5781b9c7f7c5378b4940afba", "filename": "src/test/ui/error-codes/E0162.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0162.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0162.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0162.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0162]: irrefutable if-let pattern\n+  --> $DIR/E0162.rs:15:12\n+   |\n+15 |     if let Irrefutable(x) = irr { //~ ERROR E0162\n+   |            ^^^^^^^^^^^^^^ irrefutable pattern\n+\n+error: aborting due to previous error\n+"}, {"sha": "a7f10ddb5a7f83cefc2f8e70aabfa361228bbcf7", "filename": "src/test/ui/error-codes/E0164.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0164.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0164.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0164.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0164.rs"}, {"sha": "a515c83d14b2d4cf2ac7b49dd7393308c0a05d95", "filename": "src/test/ui/error-codes/E0164.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0164.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0164.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0164.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0164]: expected tuple struct/variant, found associated constant `<Foo>::B`\n+  --> $DIR/E0164.rs:20:9\n+   |\n+20 |         Foo::B(i) => i, //~ ERROR E0164\n+   |         ^^^^^^^^^ not a tuple variant or struct\n+\n+error: aborting due to previous error\n+"}, {"sha": "142635fc6ee4543adc577f8e4aacd2d410991dcc", "filename": "src/test/ui/error-codes/E0165.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0165.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0165.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0165.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0165.rs"}, {"sha": "3c90f19a0dc7ca308dfa302a608089179d4dc5d2", "filename": "src/test/ui/error-codes/E0165.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0165.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0165.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0165.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0165]: irrefutable while-let pattern\n+  --> $DIR/E0165.rs:15:15\n+   |\n+15 |     while let Irrefutable(x) = irr { //~ ERROR E0165\n+   |               ^^^^^^^^^^^^^^ irrefutable pattern\n+\n+error: aborting due to previous error\n+"}, {"sha": "5d72d00ffe8765bb7ade9cda1f14eb4afa4ccd2d", "filename": "src/test/ui/error-codes/E0184.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0184.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0184.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0184.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0184.rs"}, {"sha": "53bda3bb57591daf93e98417ea32d7561251c3c2", "filename": "src/test/ui/error-codes/E0184.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0184.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0184.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0184.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0184]: the trait `Copy` may not be implemented for this type; the type has a destructor\n+  --> $DIR/E0184.rs:11:10\n+   |\n+11 | #[derive(Copy)] //~ ERROR E0184\n+   |          ^^^^ Copy not allowed on types with destructors\n+\n+error: aborting due to previous error\n+"}, {"sha": "0cd3d00a735767608e015f85205229c0e85c8669", "filename": "src/test/ui/error-codes/E0185.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0185.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0185.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0185.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0185.rs"}, {"sha": "0d24a3712d558e93491e160df4655bd24863032c", "filename": "src/test/ui/error-codes/E0185.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0185.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0185.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0185.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,11 @@\n+error[E0185]: method `foo` has a `&self` declaration in the impl, but not in the trait\n+  --> $DIR/E0185.rs:19:5\n+   |\n+12 |     fn foo();\n+   |     --------- trait method declared without `&self`\n+...\n+19 |     fn foo(&self) {}\n+   |     ^^^^^^^^^^^^^ `&self` used in impl\n+\n+error: aborting due to previous error\n+"}, {"sha": "55a3490cac4a620b9206e243cd81687e084edb8d", "filename": "src/test/ui/error-codes/E0186.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0186.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0186.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0186.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0186.rs"}, {"sha": "598057db3a66262c0da296455580c96bdf2333c8", "filename": "src/test/ui/error-codes/E0186.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0186.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0186.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0186.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,11 @@\n+error[E0186]: method `foo` has a `&self` declaration in the trait, but not in the impl\n+  --> $DIR/E0186.rs:18:5\n+   |\n+12 |     fn foo(&self); //~ `&self` used in trait\n+   |     -------------- `&self` used in trait\n+...\n+18 |     fn foo() {} //~ ERROR E0186\n+   |     ^^^^^^^^ expected `&self` in impl\n+\n+error: aborting due to previous error\n+"}, {"sha": "489ebb033f84e8133c98961750ff7530ba4878dc", "filename": "src/test/ui/error-codes/E0191.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0191.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0191.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0191.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0191.rs"}, {"sha": "8f99a6ecffb99ffdd10de4fd590cc97d2459e03f", "filename": "src/test/ui/error-codes/E0191.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0191.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0191.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0191.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0191]: the value of the associated type `Bar` (from the trait `Trait`) must be specified\n+  --> $DIR/E0191.rs:15:12\n+   |\n+15 | type Foo = Trait; //~ ERROR E0191\n+   |            ^^^^^ missing associated type `Bar` value\n+\n+error: aborting due to previous error\n+"}, {"sha": "92f5876ee04d5879fc2521b1ab65cfe9aa9a34f1", "filename": "src/test/ui/error-codes/E0192.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0192.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0192.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0192.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0192.rs"}, {"sha": "b592c87efa7a0ae75924bb501817bb90e97d4b6f", "filename": "src/test/ui/error-codes/E0192.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0192.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0192.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0192.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0192]: negative impls are only allowed for auto traits (e.g., `Send` and `Sync`)\n+  --> $DIR/E0192.rs:19:1\n+   |\n+19 | impl !Trait for Foo { } //~ ERROR E0192\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "17e0751859d9ffd0425186212c3090ce805f76ee", "filename": "src/test/ui/error-codes/E0194.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0194.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0194.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0194.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0194.rs"}, {"sha": "360e8c08a3c97a88f0681c33784663d439b7c02c", "filename": "src/test/ui/error-codes/E0194.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0194.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0194.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0194.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,11 @@\n+error[E0194]: type parameter `T` shadows another type parameter of the same name\n+  --> $DIR/E0194.rs:13:26\n+   |\n+11 | trait Foo<T> {\n+   |           - first `T` declared here\n+12 |     fn do_something(&self) -> T;\n+13 |     fn do_something_else<T: Clone>(&self, bar: T);\n+   |                          ^ shadows another type parameter\n+\n+error: aborting due to previous error\n+"}, {"sha": "4f4d7ce0dba839126787a7c1f798a5a6d8c51bff", "filename": "src/test/ui/error-codes/E0195.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0195.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0195.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0195.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0195.rs"}, {"sha": "3cce3d07994166c546f9bc916a6db8fd8ea3f584", "filename": "src/test/ui/error-codes/E0195.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0195.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0195.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0195.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,11 @@\n+error[E0195]: lifetime parameters or bounds on method `bar` do not match the trait declaration\n+  --> $DIR/E0195.rs:19:5\n+   |\n+12 |     fn bar<'a,'b:'a>(x: &'a str, y: &'b str);\n+   |     ----------------------------------------- lifetimes in impl do not match this method in trait\n+...\n+19 |     fn bar<'a,'b>(x: &'a str, y: &'b str) { //~ ERROR E0195\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetimes do not match method in trait\n+\n+error: aborting due to previous error\n+"}, {"sha": "f25fa9b92b9a0a7da1b4192d1e3d97254197d4a8", "filename": "src/test/ui/error-codes/E0197.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0197.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0197.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0197.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0197.rs"}, {"sha": "277f523e497aae171afcaad923b1d6193619191b", "filename": "src/test/ui/error-codes/E0197.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0197.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0197]: inherent impls cannot be unsafe\n+  --> $DIR/E0197.rs:13:1\n+   |\n+13 | unsafe impl Foo { } //~ ERROR E0197\n+   | ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "1a779a41e66604615838974c937c5641b3205102", "filename": "src/test/ui/error-codes/E0198.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0198.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0198.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0198.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0198.rs"}, {"sha": "a85419e9a1397b6ba7a7ce06752a4fc89bb23792", "filename": "src/test/ui/error-codes/E0198.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0198.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0198.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0198.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0198]: negative impls cannot be unsafe\n+  --> $DIR/E0198.rs:15:1\n+   |\n+15 | unsafe impl !Send for Foo { } //~ ERROR E0198\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "1a5cd1941a9d12f5576f3ca616addc59feecd064", "filename": "src/test/ui/error-codes/E0199.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0199.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0199.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0199.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0199.rs"}, {"sha": "efbe066e52e7e33dc809c514f30bab156855b0fc", "filename": "src/test/ui/error-codes/E0199.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0199.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0199.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0199.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0199]: implementing the trait `Bar` is not unsafe\n+  --> $DIR/E0199.rs:16:1\n+   |\n+16 | unsafe impl Bar for Foo { } //~ ERROR implementing the trait `Bar` is not unsafe [E0199]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "6bfea0e59d76ea215107c184a63288c262c4924d", "filename": "src/test/ui/error-codes/E0200.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0200.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0200.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0200.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0200.rs"}, {"sha": "fb71da23677bd7c3a416972b3c04d7a4ba02173a", "filename": "src/test/ui/error-codes/E0200.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0200.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0200.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0200.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0200]: the trait `Bar` requires an `unsafe impl` declaration\n+  --> $DIR/E0200.rs:15:1\n+   |\n+15 | impl Bar for Foo { } //~ ERROR E0200\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "ff6cb55f388c337ef5836be6a80f36d4a217bd8f", "filename": "src/test/ui/error-codes/E0201.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0201.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0201.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0201.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0201.rs"}, {"sha": "01dbee6e0923692ed644b7b052f4696fca70b427", "filename": "src/test/ui/error-codes/E0201.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0201.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0201.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0201.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,27 @@\n+error[E0201]: duplicate definitions with name `bar`:\n+  --> $DIR/E0201.rs:15:5\n+   |\n+14 |     fn bar(&self) -> bool { self.0 > 5 }\n+   |     ------------------------------------ previous definition of `bar` here\n+15 |     fn bar() {} //~ ERROR E0201\n+   |     ^^^^^^^^^^^ duplicate definition\n+\n+error[E0201]: duplicate definitions with name `baz`:\n+  --> $DIR/E0201.rs:27:5\n+   |\n+26 |     fn baz(&self) -> bool { true }\n+   |     ------------------------------ previous definition of `baz` here\n+27 |     fn baz(&self) -> bool { self.0 > 5 } //~ ERROR E0201\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definition\n+\n+error[E0201]: duplicate definitions with name `Quux`:\n+  --> $DIR/E0201.rs:28:5\n+   |\n+24 |     type Quux = u32;\n+   |     ---------------- previous definition of `Quux` here\n+...\n+28 |     type Quux = u32; //~ ERROR E0201\n+   |     ^^^^^^^^^^^^^^^^ duplicate definition\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "da0370b301b5b51d4054053c5d18fe8525785895", "filename": "src/test/ui/error-codes/E0206.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0206.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0206.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0206.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0206.rs"}, {"sha": "8eeb94a42f4b8847a751974539b710d618c06195", "filename": "src/test/ui/error-codes/E0206.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0206.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0206.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0206.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,23 @@\n+error[E0206]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/E0206.rs:13:15\n+   |\n+13 | impl Copy for Foo { }\n+   |               ^^^ type is not a structure or enumeration\n+\n+error[E0206]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/E0206.rs:20:15\n+   |\n+20 | impl Copy for &'static Bar { }\n+   |               ^^^^^^^^^^^^ type is not a structure or enumeration\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/E0206.rs:13:1\n+   |\n+13 | impl Copy for Foo { }\n+   | ^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "bd87dbaf786a518407bc28a07c8e5c8528e5ef8f", "filename": "src/test/ui/error-codes/E0207.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0207.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0207.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0207.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0207.rs"}, {"sha": "35f9109fe99ed6d6cd8c02dfb44c027d26407447", "filename": "src/test/ui/error-codes/E0207.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0207.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0207.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0207.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/E0207.rs:13:6\n+   |\n+13 | impl<T: Default> Foo { //~ ERROR E0207\n+   |      ^ unconstrained type parameter\n+\n+error: aborting due to previous error\n+"}, {"sha": "2b090391c743b02dcd22b13fae3bb4f41daf4ee8", "filename": "src/test/ui/error-codes/E0214.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0214.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0214.rs"}, {"sha": "30f5b960a364e5e46c5614f299167d50f22b55c0", "filename": "src/test/ui/error-codes/E0214.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0214.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0214.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0214.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0214]: parenthesized parameters may only be used with a trait\n+  --> $DIR/E0214.rs:12:15\n+   |\n+12 |     let v: Vec(&str) = vec![\"foo\"];\n+   |               ^^^^^^ only traits may use parentheses\n+\n+error: aborting due to previous error\n+"}, {"sha": "2866ffcd637921301f86c128bdabe3996441b8cb", "filename": "src/test/ui/error-codes/E0220.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0220.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0220.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0220.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0220.rs"}, {"sha": "70b017b782f2d5d019db3cb5eafaf81f826d5434", "filename": "src/test/ui/error-codes/E0220.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0220.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0220.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0220.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,14 @@\n+error[E0220]: associated type `F` not found for `Trait`\n+  --> $DIR/E0220.rs:15:18\n+   |\n+15 | type Foo = Trait<F=i32>; //~ ERROR E0220\n+   |                  ^^^^^ associated type `F` not found\n+\n+error[E0191]: the value of the associated type `Bar` (from the trait `Trait`) must be specified\n+  --> $DIR/E0220.rs:15:12\n+   |\n+15 | type Foo = Trait<F=i32>; //~ ERROR E0220\n+   |            ^^^^^^^^^^^^ missing associated type `Bar` value\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "99092465b0ae75e3dc9331bc020bd94dc81dfe98", "filename": "src/test/ui/error-codes/E0221.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0221.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0221.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0221.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0221.rs"}, {"sha": "3dd9393d6b32a3ea256730a0e066a69c72c225a9", "filename": "src/test/ui/error-codes/E0221.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0221.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0221.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0221.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,29 @@\n+error[E0221]: ambiguous associated type `A` in bounds of `Self`\n+  --> $DIR/E0221.rs:21:16\n+   |\n+15 |     type A: T1;\n+   |     ----------- ambiguous `A` from `Foo`\n+...\n+19 |     type A: T2;\n+   |     ----------- ambiguous `A` from `Bar`\n+20 |     fn do_something() {\n+21 |         let _: Self::A;\n+   |                ^^^^^^^ ambiguous associated type `A`\n+\n+error[E0221]: ambiguous associated type `Err` in bounds of `Self`\n+  --> $DIR/E0221.rs:31:16\n+   |\n+29 |     type Err: T3;\n+   |     ------------- ambiguous `Err` from `My`\n+30 |     fn test() {\n+31 |         let _: Self::Err;\n+   |                ^^^^^^^^^ ambiguous associated type `Err`\n+   |\n+note: associated type `Self` could derive from `std::str::FromStr`\n+  --> $DIR/E0221.rs:31:16\n+   |\n+31 |         let _: Self::Err;\n+   |                ^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "0683197b2b67084702f9f3ea15404e85c177105d", "filename": "src/test/ui/error-codes/E0223.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0223.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0223.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0223.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0223.rs"}, {"sha": "efd0d7806581c06ee44c23bfee9f08aed72010f5", "filename": "src/test/ui/error-codes/E0223.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0223.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0223.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0223.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,10 @@\n+error[E0223]: ambiguous associated type\n+  --> $DIR/E0223.rs:14:14\n+   |\n+14 |     let foo: MyTrait::X;\n+   |              ^^^^^^^^^^ ambiguous associated type\n+   |\n+   = note: specify the type using the syntax `<Type as MyTrait>::X`\n+\n+error: aborting due to previous error\n+"}, {"sha": "6c77443c5ede9bfdd928e08aeebbc26824576c09", "filename": "src/test/ui/error-codes/E0225.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0225.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0225.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0225.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0225.rs"}, {"sha": "35d40cb1017d1f2e7ba69953da24306a13edfacc", "filename": "src/test/ui/error-codes/E0225.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0225.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0225.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0225.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/E0225.rs:12:32\n+   |\n+12 |     let _: Box<std::io::Read + std::io::Write>;\n+   |                                ^^^^^^^^^^^^^^ non-auto additional trait\n+\n+error: aborting due to previous error\n+"}, {"sha": "b70fb092a54103af875f9665c98c258783f8ed76", "filename": "src/test/ui/error-codes/E0229.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0229.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0229.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0229.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0229.rs"}, {"sha": "6d88ef88bffc3b4bda9ac5baa8a6cce957d3e55e", "filename": "src/test/ui/error-codes/E0229.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0229.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0229.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0229.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0229]: associated type bindings are not allowed here\n+  --> $DIR/E0229.rs:23:25\n+   |\n+23 | fn baz<I>(x: &<I as Foo<A=Bar>>::A) {}\n+   |                         ^^^^^ associated type not allowed here\n+\n+error: aborting due to previous error\n+"}, {"sha": "04657c65c8e450280f94d612b5f782b88a19634d", "filename": "src/test/ui/error-codes/E0232.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0232.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0232.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0232.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0232.rs"}, {"sha": "e13ba62b073ce5b57b024aa36b0f00619ba54b17", "filename": "src/test/ui/error-codes/E0232.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0232.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0232.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0232.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,10 @@\n+error[E0232]: `#[rustc_on_unimplemented]` requires a value\n+  --> $DIR/E0232.rs:13:1\n+   |\n+13 | #[rustc_on_unimplemented]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ value required here\n+   |\n+   = note: eg `#[rustc_on_unimplemented = \"foo\"]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "615ce0b5d4265028f1f0212c1f17fcd530d2c5a5", "filename": "src/test/ui/error-codes/E0243.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0243.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0243.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0243.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0243.rs"}, {"sha": "82a90fff342089da7387788d83806707c1ba3ced", "filename": "src/test/ui/error-codes/E0243.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0243.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0243.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0243.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0243]: wrong number of type arguments: expected 1, found 0\n+  --> $DIR/E0243.rs:12:17\n+   |\n+12 | struct Bar { x: Foo }\n+   |                 ^^^ expected 1 type argument\n+\n+error: aborting due to previous error\n+"}, {"sha": "9a78b3139d0643c2a798f90f57da23e368bb0d3b", "filename": "src/test/ui/error-codes/E0244.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0244.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0244.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0244.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0244.rs"}, {"sha": "d873fbe9819f8e72252a66842ac2250fbef61385", "filename": "src/test/ui/error-codes/E0244.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0244.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0244.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0244.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0244]: wrong number of type arguments: expected 0, found 2\n+  --> $DIR/E0244.rs:12:23\n+   |\n+12 | struct Bar<S, T> { x: Foo<S, T> }\n+   |                       ^^^^^^^^^ expected no type arguments\n+\n+error: aborting due to previous error\n+"}, {"sha": "6b353c8cd1a62a90c86fb4d3a303ce4466338e52", "filename": "src/test/ui/error-codes/E0252.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0252.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0252.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0252.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0252.rs"}, {"sha": "f63597d697086d3456e391a36fc8c7e5d038b101", "filename": "src/test/ui/error-codes/E0252.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0252.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,16 @@\n+error[E0252]: the name `baz` is defined multiple times\n+  --> $DIR/E0252.rs:12:5\n+   |\n+11 | use foo::baz;\n+   |     -------- previous import of the type `baz` here\n+12 | use bar::baz; //~ ERROR E0252\n+   |     ^^^^^^^^ `baz` reimported here\n+   |\n+   = note: `baz` must be defined only once in the type namespace of this module\n+help: You can use `as` to change the binding name of the import\n+   |\n+12 | use bar::baz as other_baz; //~ ERROR E0252\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "186d9019aaeba73b5c1672b56909b7a4079e5458", "filename": "src/test/ui/error-codes/E0253.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0253.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0253.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0253.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0253.rs"}, {"sha": "e5a311537810dcd723d9b278920be065b56b2b69", "filename": "src/test/ui/error-codes/E0253.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0253.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0253.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0253.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0253]: `do_something` is not directly importable\n+  --> $DIR/E0253.rs:17:5\n+   |\n+17 | use foo::MyTrait::do_something;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot be imported directly\n+\n+error: aborting due to previous error\n+"}, {"sha": "46c74fe3735a36f0b1d6e79c0571a7c8e7e7a7c5", "filename": "src/test/ui/error-codes/E0254.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0254.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0254.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0254.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0254.rs"}, {"sha": "4181c7b1f7fb07997d9d85b64ef99c65c6d5e9ec", "filename": "src/test/ui/error-codes/E0254.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0254.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0254.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0254.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,17 @@\n+error[E0254]: the name `alloc` is defined multiple times\n+  --> $DIR/E0254.rs:22:5\n+   |\n+14 | extern crate alloc;\n+   | ------------------- previous import of the extern crate `alloc` here\n+...\n+22 | use foo::alloc;\n+   |     ^^^^^^^^^^ `alloc` reimported here\n+   |\n+   = note: `alloc` must be defined only once in the type namespace of this module\n+help: You can use `as` to change the binding name of the import\n+   |\n+22 | use foo::alloc as other_alloc;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "e05c6bede7e046943c1e4682251cc5126ee6977c", "filename": "src/test/ui/error-codes/E0255.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0255.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0255.rs"}, {"sha": "924ac49695c6337838da0bcae06d745fac3e4e61", "filename": "src/test/ui/error-codes/E0255.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0255.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,17 @@\n+error[E0255]: the name `foo` is defined multiple times\n+  --> $DIR/E0255.rs:13:1\n+   |\n+11 | use bar::foo;\n+   |     -------- previous import of the value `foo` here\n+12 | \n+13 | fn foo() {} //~ ERROR E0255\n+   | ^^^^^^^^ `foo` redefined here\n+   |\n+   = note: `foo` must be defined only once in the value namespace of this module\n+help: You can use `as` to change the binding name of the import\n+   |\n+11 | use bar::foo as other_foo;\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "5a47541c708bec187ee40a29793867aec21166f8", "filename": "src/test/ui/error-codes/E0259.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0259.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0259.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0259.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0259.rs"}, {"sha": "e05e4e1cac74e85aa64544cd5c289b88d1b9ed94", "filename": "src/test/ui/error-codes/E0259.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0259.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0259.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0259.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,16 @@\n+error[E0259]: the name `alloc` is defined multiple times\n+  --> $DIR/E0259.rs:16:1\n+   |\n+14 | extern crate alloc;\n+   | ------------------- previous import of the extern crate `alloc` here\n+15 | \n+16 | extern crate libc as alloc;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | |\n+   | `alloc` reimported here\n+   | You can use `as` to change the binding name of the import\n+   |\n+   = note: `alloc` must be defined only once in the type namespace of this module\n+\n+error: aborting due to previous error\n+"}, {"sha": "1b01bb12203d3949a5a85d6be3951bfbf8cd97fc", "filename": "src/test/ui/error-codes/E0260.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0260.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0260.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0260.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0260.rs"}, {"sha": "3d899e636ee38760f7c0323863e06784a45f6ab7", "filename": "src/test/ui/error-codes/E0260.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0260.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0260.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0260.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,17 @@\n+error[E0260]: the name `alloc` is defined multiple times\n+  --> $DIR/E0260.rs:16:1\n+   |\n+14 | extern crate alloc;\n+   | ------------------- previous import of the extern crate `alloc` here\n+15 | \n+16 | mod alloc {\n+   | ^^^^^^^^^ `alloc` redefined here\n+   |\n+   = note: `alloc` must be defined only once in the type namespace of this module\n+help: You can use `as` to change the binding name of the import\n+   |\n+14 | extern crate alloc as other_alloc;\n+   |\n+\n+error: aborting due to previous error\n+"}, {"sha": "558c1c381447e1199d96daa7b370134675ab8163", "filename": "src/test/ui/error-codes/E0261.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0261.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0261.rs"}, {"sha": "c8dd08211ecb0c07e9624e95a640ba8078da9b48", "filename": "src/test/ui/error-codes/E0261.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0261.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0261.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0261.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,14 @@\n+error[E0261]: use of undeclared lifetime name `'a`\n+  --> $DIR/E0261.rs:11:12\n+   |\n+11 | fn foo(x: &'a str) { } //~ ERROR E0261\n+   |            ^^ undeclared lifetime\n+\n+error[E0261]: use of undeclared lifetime name `'a`\n+  --> $DIR/E0261.rs:15:9\n+   |\n+15 |     x: &'a str, //~ ERROR E0261\n+   |         ^^ undeclared lifetime\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "41b6acaee4a1e09aba982c354e5b7b3c39e5f512", "filename": "src/test/ui/error-codes/E0262.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0262.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0262.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0262.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0262.rs"}, {"sha": "0910009d2c0dc7c781a1247f730fd1e78dda64e5", "filename": "src/test/ui/error-codes/E0262.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0262.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0262.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0262.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0262]: invalid lifetime parameter name: `'static`\n+  --> $DIR/E0262.rs:11:8\n+   |\n+11 | fn foo<'static>(x: &'static str) { } //~ ERROR E0262\n+   |        ^^^^^^^ 'static is a reserved lifetime name\n+\n+error: aborting due to previous error\n+"}, {"sha": "722f1c25e07d17365674d2fff578e2f9b5dcdd2e", "filename": "src/test/ui/error-codes/E0263.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0263.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0263.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0263.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0263.rs"}, {"sha": "942718d50f727b528f91ef9d3f2d0831130b6320", "filename": "src/test/ui/error-codes/E0263.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0263.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0263.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0263.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,10 @@\n+error[E0263]: lifetime name `'a` declared twice in the same scope\n+  --> $DIR/E0263.rs:11:16\n+   |\n+11 | fn foo<'a, 'b, 'a>(x: &'a str, y: &'b str) {\n+   |        --      ^^ declared twice\n+   |        |\n+   |        previous declaration here\n+\n+error: aborting due to previous error\n+"}, {"sha": "92332977e767609b37e6729823fb4de06c3b2005", "filename": "src/test/ui/error-codes/E0264.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0264.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0264.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0264.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0264.rs"}, {"sha": "b10494633edf3837cbc144c0d231e6512f3c037d", "filename": "src/test/ui/error-codes/E0264.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0264.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0264.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0264.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0264]: unknown external lang item: `cake`\n+  --> $DIR/E0264.rs:15:5\n+   |\n+15 |     fn cake(); //~ ERROR E0264\n+   |     ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "6287256e866c9e948cc79d1291188979c932f372", "filename": "src/test/ui/error-codes/E0267.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0267.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0267.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0267.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0267.rs"}, {"sha": "2f6d9c72eeb1a22f31e1c1b659f92223771261e7", "filename": "src/test/ui/error-codes/E0267.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0267.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0267.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0267.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0267]: `break` inside of a closure\n+  --> $DIR/E0267.rs:12:18\n+   |\n+12 |     let w = || { break; }; //~ ERROR E0267\n+   |                  ^^^^^ cannot break inside of a closure\n+\n+error: aborting due to previous error\n+"}, {"sha": "41e88e2f492a9c77a8441ddcaaa368dc07c1faff", "filename": "src/test/ui/error-codes/E0268.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0268.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0268.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0268.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0268.rs"}, {"sha": "cf89e46af047ecab926ceec03864fa604992f03b", "filename": "src/test/ui/error-codes/E0268.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0268.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0268.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0268.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0268]: `break` outside of loop\n+  --> $DIR/E0268.rs:12:5\n+   |\n+12 |     break; //~ ERROR E0268\n+   |     ^^^^^ cannot break outside of a loop\n+\n+error: aborting due to previous error\n+"}, {"sha": "d322c8b1caf56068a6a9d969239540c2a52f8234", "filename": "src/test/ui/error-codes/E0271.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0271.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0271.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0271.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0271.rs"}, {"sha": "c596b560ea7f84018c3d3e00708e01d0dc854648", "filename": "src/test/ui/error-codes/E0271.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,16 @@\n+error[E0271]: type mismatch resolving `<i8 as Trait>::AssociatedType == u32`\n+  --> $DIR/E0271.rs:20:5\n+   |\n+20 |     foo(3_i8); //~ ERROR E0271\n+   |     ^^^ expected reference, found u32\n+   |\n+   = note: expected type `&'static str`\n+              found type `u32`\n+note: required by `foo`\n+  --> $DIR/E0271.rs:13:1\n+   |\n+13 | fn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "8dfd1d9b4afc95a4f14054b4b0a859e1bf1e52c9", "filename": "src/test/ui/error-codes/E0275.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0275.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0275.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0275.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0275.rs"}, {"sha": "2dbe5be21554670d5fdce78fc8d3cc85a4570fdf", "filename": "src/test/ui/error-codes/E0275.stderr", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,79 @@\n+error[E0275]: overflow evaluating the requirement `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: std::marker::Sized`\n+  --> $DIR/E0275.rs:15:1\n+   |\n+15 | impl<T> Foo for T where Bar<T>: Foo {} //~ ERROR E0275\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding a `#![recursion_limit=\"128\"]` attribute to your crate\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<T>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<T>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<T>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<T>>`\n+   = note: required because of the requirements on the impl of `Foo` for `Bar<T>`\n+note: required by `Foo`\n+  --> $DIR/E0275.rs:11:1\n+   |\n+11 | trait Foo {}\n+   | ^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "62e43b02ca85f1df60821e828032167a3d77612b", "filename": "src/test/ui/error-codes/E0276.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0276.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0276.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0276.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0276.rs"}, {"sha": "bcbe81ac11a05e6b5a42b5e8dc3a95b9858c8c7e", "filename": "src/test/ui/error-codes/E0276.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0276.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0276.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0276.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,11 @@\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/E0276.rs:16:5\n+   |\n+12 |     fn foo<T>(x: T);\n+   |     ---------------- definition of `foo` from trait\n+...\n+16 |     fn foo<T>(x: T) where T: Copy {} //~ ERROR E0276\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: std::marker::Copy`\n+\n+error: aborting due to previous error\n+"}, {"sha": "4d1c50002a39c1f6e6b53dbdcd10d1a03fb00329", "filename": "src/test/ui/error-codes/E0277-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0277-2.rs"}, {"sha": "6a0f21ef144387f8cd02582a9319ffc89ee311cd", "filename": "src/test/ui/error-codes/E0277-2.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,18 @@\n+error[E0277]: the trait bound `*const u8: std::marker::Send` is not satisfied in `Foo`\n+  --> $DIR/E0277-2.rs:26:5\n+   |\n+26 |     is_send::<Foo>();\n+   |     ^^^^^^^^^^^^^^ `*const u8` cannot be sent between threads safely\n+   |\n+   = help: within `Foo`, the trait `std::marker::Send` is not implemented for `*const u8`\n+   = note: required because it appears within the type `Baz`\n+   = note: required because it appears within the type `Bar`\n+   = note: required because it appears within the type `Foo`\n+note: required by `is_send`\n+  --> $DIR/E0277-2.rs:23:1\n+   |\n+23 | fn is_send<T: Send>() { }\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "b29e435701507c931552e16e8145f3094e6bbcc4", "filename": "src/test/ui/error-codes/E0277.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0277.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0277.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0277.rs"}, {"sha": "38d14ed7bce25ae563f84376002c738bc9c8c2af", "filename": "src/test/ui/error-codes/E0277.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,24 @@\n+error[E0277]: the trait bound `[u8]: std::marker::Sized` is not satisfied in `std::path::Path`\n+  --> $DIR/E0277.rs:23:6\n+   |\n+23 | fn f(p: Path) { }\n+   |      ^ `[u8]` does not have a constant size known at compile-time\n+   |\n+   = help: within `std::path::Path`, the trait `std::marker::Sized` is not implemented for `[u8]`\n+   = note: required because it appears within the type `std::path::Path`\n+   = note: all local variables must have a statically known size\n+\n+error[E0277]: the trait bound `i32: Foo` is not satisfied\n+  --> $DIR/E0277.rs:27:5\n+   |\n+27 |     some_func(5i32);\n+   |     ^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n+   |\n+note: required by `some_func`\n+  --> $DIR/E0277.rs:19:1\n+   |\n+19 | fn some_func<T: Foo>(foo: T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "dfc702670ce460d31e165e9317e88af1a8b5d206", "filename": "src/test/ui/error-codes/E0282.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0282.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0282.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0282.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0282.rs"}, {"sha": "835162740da90f219bbca9503ab8a1dff50d6e48", "filename": "src/test/ui/error-codes/E0282.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0282.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0282.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0282.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,11 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/E0282.rs:12:9\n+   |\n+12 |     let x = \"hello\".chars().rev().collect(); //~ ERROR E0282\n+   |         ^\n+   |         |\n+   |         cannot infer type for `_`\n+   |         consider giving `x` a type\n+\n+error: aborting due to previous error\n+"}, {"sha": "844c47f41b81a2c9035b923962fdee9b6578b275", "filename": "src/test/ui/error-codes/E0283.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0283.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0283.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0283.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0283.rs"}, {"sha": "9fdb6b178c4d7ea4fef749c2fe7ea71c048f01f3", "filename": "src/test/ui/error-codes/E0283.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,14 @@\n+error[E0283]: type annotations required: cannot resolve `_: Generator`\n+  --> $DIR/E0283.rs:28:21\n+   |\n+28 |     let cont: u32 = Generator::create(); //~ ERROR E0283\n+   |                     ^^^^^^^^^^^^^^^^^\n+   |\n+note: required by `Generator::create`\n+  --> $DIR/E0283.rs:12:5\n+   |\n+12 |     fn create() -> u32;\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "562fd00a18aa655687cbbfaaf17790b4d514b2b1", "filename": "src/test/ui/error-codes/E0296.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0296.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0296.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0296.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0296.rs"}, {"sha": "f6a2adc0ad3f71fb3dc17c10aaf1a6b0b03b8a01", "filename": "src/test/ui/error-codes/E0296.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0296.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0296.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0296.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0296]: malformed recursion limit attribute, expected #![recursion_limit=\"N\"]\n+  --> $DIR/E0296.rs:11:1\n+   |\n+11 | #![recursion_limit] //~ ERROR E0296\n+   | ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "afe4444c7afdfa4c265623269b4edb48a923c985", "filename": "src/test/ui/error-codes/E0297.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0297.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0297.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0297.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0297.rs"}, {"sha": "2dfed66ecaca6963a6ddf69bafb3732198dd7579", "filename": "src/test/ui/error-codes/E0297.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0297.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0297.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0297.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0005]: refutable pattern in `for` loop binding: `None` not covered\n+  --> $DIR/E0297.rs:14:9\n+   |\n+14 |     for Some(x) in xs {}\n+   |         ^^^^^^^ pattern `None` not covered\n+\n+error: aborting due to previous error\n+"}, {"sha": "06e98289b0d57ab20c9b9aa481b16713fd00479d", "filename": "src/test/ui/error-codes/E0301.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0301.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0301.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0301.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0301.rs"}, {"sha": "ff4ee32d47b09c3729424b9449687b83335fefc8", "filename": "src/test/ui/error-codes/E0301.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0301.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0301.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0301.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0301]: cannot mutably borrow in a pattern guard\n+  --> $DIR/E0301.rs:14:19\n+   |\n+14 |         option if option.take().is_none() => {}, //~ ERROR E0301\n+   |                   ^^^^^^ borrowed mutably in pattern guard\n+\n+error: aborting due to previous error\n+"}, {"sha": "6a5ad40b10907222bad96a92c9b4096b46d019d4", "filename": "src/test/ui/error-codes/E0302.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0302.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0302.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0302.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0302.rs"}, {"sha": "c7b33a490d1c95fae32c2a9fe443139fe661d1e2", "filename": "src/test/ui/error-codes/E0302.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0302.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0302]: cannot assign in a pattern guard\n+  --> $DIR/E0302.rs:14:21\n+   |\n+14 |         option if { option = None; false } => { }, //~ ERROR E0302\n+   |                     ^^^^^^^^^^^^^ assignment in pattern guard\n+\n+error: aborting due to previous error\n+"}, {"sha": "6027414fdbd4b197ca7fea0d9fc3b4736284814e", "filename": "src/test/ui/error-codes/E0303.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0303.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0303.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0303.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0303.rs"}, {"sha": "6528c97a560dfadef343a1cefbce395b5332bd42", "filename": "src/test/ui/error-codes/E0303.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0303.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0303.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0303.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,17 @@\n+error[E0009]: cannot bind by-move and by-ref in the same pattern\n+  --> $DIR/E0303.rs:13:34\n+   |\n+13 |         ref op_string_ref @ Some(s) => {},\n+   |         -------------------------^-\n+   |         |                        |\n+   |         |                        by-move pattern here\n+   |         both by-ref and by-move used\n+\n+error[E0303]: pattern bindings are not allowed after an `@`\n+  --> $DIR/E0303.rs:13:34\n+   |\n+13 |         ref op_string_ref @ Some(s) => {},\n+   |                                  ^ not allowed after `@`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "bb4cd1434167b56b617e4b3c9fc0aca3339a3d7e", "filename": "src/test/ui/error-codes/E0308-4.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0308-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0308-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0308-4.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0308-4.rs"}, {"sha": "1e4beeae176912009841ff3376ae0788c0d3301f", "filename": "src/test/ui/error-codes/E0308-4.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0308-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0308-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0308-4.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0308]: mismatched types\n+  --> $DIR/E0308-4.rs:14:9\n+   |\n+14 |         0u8...3i8 => (), //~ ERROR E0308\n+   |         ^^^^^^^^^ expected u8, found i8\n+\n+error: aborting due to previous error\n+"}, {"sha": "078f1d3a9a1ab78c2eca64e2faeb3328a6c73313", "filename": "src/test/ui/error-codes/E0308.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0308.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0308.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0308.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0308.rs"}, {"sha": "905b0210abfbf0ed3da78e1cb0845ef216abb9c8", "filename": "src/test/ui/error-codes/E0308.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0308.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0308.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0308.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,11 @@\n+error[E0308]: intrinsic has wrong type\n+  --> $DIR/E0308.rs:14:5\n+   |\n+14 |     fn size_of<T>(); //~ ERROR E0308\n+   |     ^^^^^^^^^^^^^^^^ expected (), found usize\n+   |\n+   = note: expected type `unsafe extern \"rust-intrinsic\" fn()`\n+              found type `unsafe extern \"rust-intrinsic\" fn() -> usize`\n+\n+error: aborting due to previous error\n+"}, {"sha": "18a72b0ff9a55a70361236962013d25030088914", "filename": "src/test/ui/error-codes/E0365.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0365.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0365.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0365.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0365.rs"}, {"sha": "ccb13856df9e165936fec1f1af052e9eb30b8c39", "filename": "src/test/ui/error-codes/E0365.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0365.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0365.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0365.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,10 @@\n+error[E0365]: `foo` is private, and cannot be re-exported\n+  --> $DIR/E0365.rs:15:9\n+   |\n+15 | pub use foo as foo2;\n+   |         ^^^^^^^^^^^ re-export of private `foo`\n+   |\n+   = note: consider declaring type or module `foo` with `pub`\n+\n+error: aborting due to previous error\n+"}, {"sha": "cafe26c65adab8416b93869bcb6981ce447f8c42", "filename": "src/test/ui/error-codes/E0370.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0370.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0370.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0370.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0370.rs"}, {"sha": "1f248f4ed2c211b14fe07fd01a9b399c2f540216", "filename": "src/test/ui/error-codes/E0370.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0370.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0370.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0370.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,10 @@\n+error[E0370]: enum discriminant overflowed\n+  --> $DIR/E0370.rs:17:5\n+   |\n+17 |     Y, //~ ERROR E0370\n+   |     ^ overflowed on value after 9223372036854775807i64\n+   |\n+   = note: explicitly set `Y = -9223372036854775808i64` if that is desired outcome\n+\n+error: aborting due to previous error\n+"}, {"sha": "6c4782d230ddcc9b892c9faa4f7ebc8437392d14", "filename": "src/test/ui/error-codes/E0374.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0374.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0374.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0374.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0374.rs"}, {"sha": "edd463d705c19d2e7250b805bdde5ed34c41b9a6", "filename": "src/test/ui/error-codes/E0374.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0374.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0374.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0374.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,9 @@\n+error[E0374]: the trait `CoerceUnsized` may only be implemented for a coercion between structures with one field being coerced, none found\n+  --> $DIR/E0374.rs:18:1\n+   |\n+18 | / impl<T, U> CoerceUnsized<Foo<U>> for Foo<T> //~ ERROR E0374\n+19 | |     where T: CoerceUnsized<U> {}\n+   | |________________________________^\n+\n+error: aborting due to previous error\n+"}, {"sha": "094ed35cc2d6dfd078a1b81bf08f7bfc05a45f2b", "filename": "src/test/ui/error-codes/E0375.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0375.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0375.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0375.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0375.rs"}, {"sha": "a37591521c8ca6efc251f9510de4cd55b9740f85", "filename": "src/test/ui/error-codes/E0375.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0375.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0375.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0375.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,11 @@\n+error[E0375]: implementing the trait `CoerceUnsized` requires multiple coercions\n+  --> $DIR/E0375.rs:22:12\n+   |\n+22 | impl<T, U> CoerceUnsized<Foo<U, T>> for Foo<T, U> {}\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^ requires multiple coercions\n+   |\n+   = note: `CoerceUnsized` may only be implemented for a coercion between structures with one field being coerced\n+   = note: currently, 2 fields need coercions: b (T to U), c (U to T)\n+\n+error: aborting due to previous error\n+"}, {"sha": "65be358cc5fe35d893b2145fbdcb32cce137a79a", "filename": "src/test/ui/error-codes/E0376.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0376.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0376.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0376.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0376.rs"}, {"sha": "d036adb4e29500f5f6a5302e9571d9328d0fdfdb", "filename": "src/test/ui/error-codes/E0376.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0376.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0376.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0376.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0376]: the trait `CoerceUnsized` may only be implemented for a coercion between structures\n+  --> $DIR/E0376.rs:18:1\n+   |\n+18 | impl<T, U> CoerceUnsized<U> for Foo<T> {} //~ ERROR E0376\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "c002badfef64c34d4fc15e9902d08c65ddd6d526", "filename": "src/test/ui/error-codes/E0388.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0388.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0388.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0388.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0388.rs"}, {"sha": "ec210294cdbd4c6996d2575f6951bc995f361c12", "filename": "src/test/ui/error-codes/E0388.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,26 @@\n+error[E0017]: references in constants may only refer to immutable values\n+  --> $DIR/E0388.rs:14:30\n+   |\n+14 | const CR: &'static mut i32 = &mut C; //~ ERROR E0017\n+   |                              ^^^^^^ constants require immutable values\n+\n+error[E0017]: references in statics may only refer to immutable values\n+  --> $DIR/E0388.rs:15:39\n+   |\n+15 | static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n+   |                                       ^^^^^^ statics require immutable values\n+\n+error[E0596]: cannot borrow immutable static item as mutable\n+  --> $DIR/E0388.rs:15:44\n+   |\n+15 | static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n+   |                                            ^\n+\n+error[E0017]: references in statics may only refer to immutable values\n+  --> $DIR/E0388.rs:17:38\n+   |\n+17 | static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0017\n+   |                                      ^^^^^^ statics require immutable values\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "445831bf8d7f7d4ba885c791d534d8cab90f6191", "filename": "src/test/ui/error-codes/E0389.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0389.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0389.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0389.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0389.rs"}, {"sha": "e085329bac508cc0fd8142b09d9977e3348c2340", "filename": "src/test/ui/error-codes/E0389.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0389.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0389.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0389.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0389]: cannot assign to data in a `&` reference\n+  --> $DIR/E0389.rs:18:5\n+   |\n+18 |     fancy_ref.num = 6; //~ ERROR E0389\n+   |     ^^^^^^^^^^^^^^^^^ assignment into an immutable reference\n+\n+error: aborting due to previous error\n+"}, {"sha": "cd530dbd6b46a923e8a20e58f5bf3f0b6977fefd", "filename": "src/test/ui/error-codes/E0390.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0390.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0390.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0390.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0390.rs"}, {"sha": "a10b0b87f37bdb199ba53f8700578b2c37381f06", "filename": "src/test/ui/error-codes/E0390.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0390.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0390.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0390.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,14 @@\n+error[E0390]: only a single inherent implementation marked with `#[lang = \"mut_ptr\"]` is allowed for the `*mut T` primitive\n+  --> $DIR/E0390.rs:15:1\n+   |\n+15 | impl *mut Foo {} //~ ERROR E0390\n+   | ^^^^^^^^^^^^^^^^\n+   |\n+help: consider using a trait to implement these methods\n+  --> $DIR/E0390.rs:15:1\n+   |\n+15 | impl *mut Foo {} //~ ERROR E0390\n+   | ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "4c3efcf4e8d75637c03b00e46dfdc6c9a562d577", "filename": "src/test/ui/error-codes/E0392.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0392.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0392.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0392.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0392.rs"}, {"sha": "6c466cbb52e38fb38951dd002fb033d4c20e247e", "filename": "src/test/ui/error-codes/E0392.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0392.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0392.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0392.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,10 @@\n+error[E0392]: parameter `T` is never used\n+  --> $DIR/E0392.rs:11:10\n+   |\n+11 | enum Foo<T> { Bar } //~ ERROR E0392\n+   |          ^ unused type parameter\n+   |\n+   = help: consider removing `T` or using a marker such as `std::marker::PhantomData`\n+\n+error: aborting due to previous error\n+"}, {"sha": "9165bc2837b517968d34c3921a97c16aed798569", "filename": "src/test/ui/error-codes/E0393.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0393.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0393.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0393.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0393.rs"}, {"sha": "10728e21901cd05e2213c668dce9b1f8e030f158", "filename": "src/test/ui/error-codes/E0393.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0393.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0393.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0393.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,10 @@\n+error[E0393]: the type parameter `T` must be explicitly specified\n+  --> $DIR/E0393.rs:13:43\n+   |\n+13 | fn together_we_will_rule_the_galaxy(son: &A) {}\n+   |                                           ^ missing reference to `T`\n+   |\n+   = note: because of the default `Self` reference, type parameters must be specified on object types\n+\n+error: aborting due to previous error\n+"}, {"sha": "dae8e14c5ef181e5a70fdf0a0aa080310c5aadfb", "filename": "src/test/ui/error-codes/E0394.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0394.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0394.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0394.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0394.rs"}, {"sha": "728cec103255861509c1610c31f7b750db4bbd07", "filename": "src/test/ui/error-codes/E0394.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0394.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,10 @@\n+error[E0394]: cannot refer to other statics by value, use the address-of operator or a constant instead\n+  --> $DIR/E0394.rs:14:17\n+   |\n+14 | static B: u32 = A;\n+   |                 ^ referring to another static by value\n+   |\n+   = note: use the address-of operator or a constant instead\n+\n+error: aborting due to previous error\n+"}, {"sha": "00008ea6b6f376a08a4460e2a8e1b2d10befb2e7", "filename": "src/test/ui/error-codes/E0395.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0395.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0395.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0395.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0395.rs"}, {"sha": "e6d76a696d3cfcdb7ca5595b2398c824f60c630b", "filename": "src/test/ui/error-codes/E0395.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0395]: raw pointers cannot be compared in statics\n+  --> $DIR/E0395.rs:14:22\n+   |\n+14 | static BAZ: bool = { (&FOO as *const i32) == (&BAR as *const i32) }; //~ ERROR E0395\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ comparing raw pointers in static\n+\n+error: aborting due to previous error\n+"}, {"sha": "7f34acdfb90075f32480553b877b6573c223ab06", "filename": "src/test/ui/error-codes/E0396.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0396.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0396.rs"}, {"sha": "5c5c01cb9885406a08e2877fe06d4b91533ea6c9", "filename": "src/test/ui/error-codes/E0396.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0396.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0396.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0396.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0396]: raw pointers cannot be dereferenced in constants\n+  --> $DIR/E0396.rs:13:28\n+   |\n+13 | const VALUE: u8 = unsafe { *REG_ADDR }; //~ ERROR E0396\n+   |                            ^^^^^^^^^ dereference of raw pointer in constant\n+\n+error: aborting due to previous error\n+"}, {"sha": "09bc950efd2d6bb1e41694a272a93183c280722d", "filename": "src/test/ui/error-codes/E0401.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0401.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0401.rs"}, {"sha": "d63aa378eee7dbc82155e522e5e8c979d6d84bab", "filename": "src/test/ui/error-codes/E0401.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0401]: can't use type parameters from outer function; try using a local type parameter instead\n+  --> $DIR/E0401.rs:12:15\n+   |\n+12 |     fn bar(y: T) { //~ ERROR E0401\n+   |               ^ use of type variable from outer function\n+\n+error: aborting due to previous error\n+"}, {"sha": "6a68013dc6ffe3c675751599d2b55c8625370d06", "filename": "src/test/ui/error-codes/E0403.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0403.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0403.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0403.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0403.rs"}, {"sha": "125af35cb5798d52ba7e0716d2f9cfedb540163e", "filename": "src/test/ui/error-codes/E0403.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0403.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0403.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0403.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,10 @@\n+error[E0403]: the name `T` is already used for a type parameter in this type parameter list\n+  --> $DIR/E0403.rs:11:11\n+   |\n+11 | fn foo<T, T>(s: T, u: T) {} //~ ERROR E0403\n+   |        -  ^ already used\n+   |        |\n+   |        first use of `T`\n+\n+error: aborting due to previous error\n+"}, {"sha": "1c088a71d7d4b1c9681b682c1994df06153e0418", "filename": "src/test/ui/error-codes/E0404.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0404.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0404.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0404.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0404.rs"}, {"sha": "c30d8c00b80e23eaa81641d94745babee9fab265", "filename": "src/test/ui/error-codes/E0404.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0404.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0404.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0404.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0404]: expected trait, found struct `Foo`\n+  --> $DIR/E0404.rs:14:6\n+   |\n+14 | impl Foo for Bar {} //~ ERROR E0404\n+   |      ^^^ not a trait\n+\n+error: cannot continue compilation due to previous error\n+"}, {"sha": "45d4b219ba81850b77f7fb1e18c9c68c500d132c", "filename": "src/test/ui/error-codes/E0405.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0405.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0405.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0405.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0405.rs"}, {"sha": "29bab3f6dd99ad0abb7ddec35f686f37017db96a", "filename": "src/test/ui/error-codes/E0405.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0405.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0405.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0405.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0405]: cannot find trait `SomeTrait` in this scope\n+  --> $DIR/E0405.rs:13:6\n+   |\n+13 | impl SomeTrait for Foo {} //~ ERROR E0405\n+   |      ^^^^^^^^^ not found in this scope\n+\n+error: cannot continue compilation due to previous error\n+"}, {"sha": "41d8b4513ce53ce2c8cf4e85d3bd2153639548e7", "filename": "src/test/ui/error-codes/E0407.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0407.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0407.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0407.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0407.rs"}, {"sha": "f71437cd6b07c49f9cce2470c1cda465ea5be5e5", "filename": "src/test/ui/error-codes/E0407.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0407.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0407.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0407.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0407]: method `b` is not a member of trait `Foo`\n+  --> $DIR/E0407.rs:19:5\n+   |\n+19 |     fn b() {}\n+   |     ^^^^^^^^^ not a member of trait `Foo`\n+\n+error: aborting due to previous error\n+"}, {"sha": "8ddeb20afdc1e1497b372edcc4683ccd18942c49", "filename": "src/test/ui/error-codes/E0408.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0408.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0408.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0408.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0408.rs"}, {"sha": "1c66bb0e5f07b329f61634734116e4fa8b17901f", "filename": "src/test/ui/error-codes/E0408.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0408.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0408.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0408.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,10 @@\n+error[E0408]: variable `y` is not bound in all patterns\n+  --> $DIR/E0408.rs:15:19\n+   |\n+15 |         Some(y) | None => {} //~  ERROR variable `y` is not bound in all patterns\n+   |              -    ^^^^ pattern doesn't bind `y`\n+   |              |\n+   |              variable not in all patterns\n+\n+error: aborting due to previous error\n+"}, {"sha": "187986fbadbe08b1e24b6c30f24e87ea7f9d4b62", "filename": "src/test/ui/error-codes/E0411.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0411.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0411.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0411.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0411.rs"}, {"sha": "dda922b5b6891546e89d19c0ab1ffc3999e63ca3", "filename": "src/test/ui/error-codes/E0411.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0411.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0411.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0411.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0411]: cannot find type `Self` in this scope\n+  --> $DIR/E0411.rs:12:6\n+   |\n+12 |     <Self>::foo; //~ ERROR E0411\n+   |      ^^^^ `Self` is only available in traits and impls\n+\n+error: aborting due to previous error\n+"}, {"sha": "f62901cac31c1bf4515fdec4defd9beb123be2d9", "filename": "src/test/ui/error-codes/E0412.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0412.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0412.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0412.rs?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "previous_filename": "src/test/compile-fail/E0412.rs"}, {"sha": "6ee2125af04e8c690c2901f10505878213e26e3e", "filename": "src/test/ui/error-codes/E0412.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0412.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16362c737fe740f630ada06349fa9004e2a51bb7/src%2Ftest%2Fui%2Ferror-codes%2FE0412.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0412.stderr?ref=16362c737fe740f630ada06349fa9004e2a51bb7", "patch": "@@ -0,0 +1,8 @@\n+error[E0412]: cannot find type `Something` in this scope\n+  --> $DIR/E0412.rs:11:6\n+   |\n+11 | impl Something {} //~ ERROR E0412\n+   |      ^^^^^^^^^ not found in this scope\n+\n+error: aborting due to previous error\n+"}]}