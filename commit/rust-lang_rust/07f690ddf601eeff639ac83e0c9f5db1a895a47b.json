{"sha": "07f690ddf601eeff639ac83e0c9f5db1a895a47b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ZjY5MGRkZjYwMWVlZmY2MzlhYzgzZTBjOWY1ZGIxYTg5NWE0N2I=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-28T20:12:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-28T20:12:44Z"}, "message": "Merge #4161\n\n4161: lsp-types 0.74 r=kjeremy a=kjeremy\n\n* Fixes a bunch of param types to take partial progress into account.\r\n* Will allow us to support insert/replace text in completions\n\nCo-authored-by: kjeremy <kjeremy@gmail.com>", "tree": {"sha": "a9d15523d01dbc0123d6393a83a29ae321b01a5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9d15523d01dbc0123d6393a83a29ae321b01a5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07f690ddf601eeff639ac83e0c9f5db1a895a47b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeqI48CRBK7hj4Ov3rIwAAdHIIAErvRsnhQ3QmqkY+qdeINvEm\nNFzq0nmsC0dLFvzvAxXZ0M/y2tWFwDy90gDjMS+zrB/vK9ib+EfLrcGnEWZbHd8o\ncaHxLOuo5r7EaNknv88HgtsHU83F73ER1L+SzGRqaBNhIlOQRcrdwc28KEm1fi9B\ndZf7jFN4tnf5NMm4B1rYGoYjjJHBljWxbHWSo6lYBUQxthIFB5Q3HxHDRvuekutt\n58wxzj3PaRYm7nKECQ7aZZ6Ptmu4EBjFyxudvGoBenUm/cYjruwR9LB/3qL27DiY\nD5WEKvTEdeGsInIuVt6d1s91lqHITTWw8FzXeDMtxKKcE4wRLYic+TZuGu75u8o=\n=LEiv\n-----END PGP SIGNATURE-----\n", "payload": "tree a9d15523d01dbc0123d6393a83a29ae321b01a5b\nparent db441de0a8dfbac2ae9e10d8ff73e5eaf5e48a56\nparent 61f1c0a99007e2f2e04715437239069736134e52\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1588104764 +0000\ncommitter GitHub <noreply@github.com> 1588104764 +0000\n\nMerge #4161\n\n4161: lsp-types 0.74 r=kjeremy a=kjeremy\n\n* Fixes a bunch of param types to take partial progress into account.\r\n* Will allow us to support insert/replace text in completions\n\nCo-authored-by: kjeremy <kjeremy@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07f690ddf601eeff639ac83e0c9f5db1a895a47b", "html_url": "https://github.com/rust-lang/rust/commit/07f690ddf601eeff639ac83e0c9f5db1a895a47b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07f690ddf601eeff639ac83e0c9f5db1a895a47b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db441de0a8dfbac2ae9e10d8ff73e5eaf5e48a56", "url": "https://api.github.com/repos/rust-lang/rust/commits/db441de0a8dfbac2ae9e10d8ff73e5eaf5e48a56", "html_url": "https://github.com/rust-lang/rust/commit/db441de0a8dfbac2ae9e10d8ff73e5eaf5e48a56"}, {"sha": "61f1c0a99007e2f2e04715437239069736134e52", "url": "https://api.github.com/repos/rust-lang/rust/commits/61f1c0a99007e2f2e04715437239069736134e52", "html_url": "https://github.com/rust-lang/rust/commit/61f1c0a99007e2f2e04715437239069736134e52"}], "stats": {"total": 105, "additions": 58, "deletions": 47}, "files": [{"sha": "e933598fb92c5eba7b2369035e2b4818254637b3", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07f690ddf601eeff639ac83e0c9f5db1a895a47b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/07f690ddf601eeff639ac83e0c9f5db1a895a47b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=07f690ddf601eeff639ac83e0c9f5db1a895a47b", "patch": "@@ -68,9 +68,9 @@ dependencies = [\n \n [[package]]\n name = \"base64\"\n-version = \"0.11.0\"\n+version = \"0.12.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b41b7ea54a0c9d92199de89e20e58d49f02f8e699814ef3fdf266f6f748d15c7\"\n+checksum = \"7d5ca2cd0adc3f48f9e9ea5a6bbdf9ccc0bfade884847e484d452414c7ccffb3\"\n \n [[package]]\n name = \"bitflags\"\n@@ -645,9 +645,9 @@ dependencies = [\n \n [[package]]\n name = \"lsp-types\"\n-version = \"0.73.0\"\n+version = \"0.74.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"93d0cf64ea141b43d9e055f6b9df13f0bce32b103d84237509ce0a571ab9b159\"\n+checksum = \"820f746e5716ab9a2d664794636188bd003023b72e55404ee27105dc22869922\"\n dependencies = [\n  \"base64\",\n  \"bitflags\","}, {"sha": "324c33d9dd28dd554e23af4c5b8c6521a1b5f0d5", "filename": "crates/ra_flycheck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07f690ddf601eeff639ac83e0c9f5db1a895a47b/crates%2Fra_flycheck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/07f690ddf601eeff639ac83e0c9f5db1a895a47b/crates%2Fra_flycheck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_flycheck%2FCargo.toml?ref=07f690ddf601eeff639ac83e0c9f5db1a895a47b", "patch": "@@ -6,7 +6,7 @@ authors = [\"rust-analyzer developers\"]\n \n [dependencies]\n crossbeam-channel = \"0.4.0\"\n-lsp-types = { version = \"0.73.0\", features = [\"proposed\"] }\n+lsp-types = { version = \"0.74.0\", features = [\"proposed\"] }\n log = \"0.4.8\"\n cargo_metadata = \"0.9.1\"\n serde_json = \"1.0.48\""}, {"sha": "514d6d1a940e07d9db5f4039d04708c9f74d158f", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07f690ddf601eeff639ac83e0c9f5db1a895a47b/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/07f690ddf601eeff639ac83e0c9f5db1a895a47b/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=07f690ddf601eeff639ac83e0c9f5db1a895a47b", "patch": "@@ -20,7 +20,7 @@ globset = \"0.4.4\"\n itertools = \"0.9.0\"\n jod-thread = \"0.1.0\"\n log = \"0.4.8\"\n-lsp-types = { version = \"0.73.0\", features = [\"proposed\"] }\n+lsp-types = { version = \"0.74.0\", features = [\"proposed\"] }\n parking_lot = \"0.10.0\"\n pico-args = \"0.3.1\"\n rand = { version = \"0.7.3\", features = [\"small_rng\"] }"}, {"sha": "7be5ebcdb5a0d13599cc5a8d628c48186cc46936", "filename": "crates/rust-analyzer/src/conv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07f690ddf601eeff639ac83e0c9f5db1a895a47b/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07f690ddf601eeff639ac83e0c9f5db1a895a47b/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconv.rs?ref=07f690ddf601eeff639ac83e0c9f5db1a895a47b", "patch": "@@ -150,7 +150,7 @@ impl ConvWith<(&LineIndex, LineEndings)> for CompletionItem {\n             detail: self.detail().map(|it| it.to_string()),\n             filter_text: Some(self.lookup().to_string()),\n             kind: self.kind().map(|it| it.conv()),\n-            text_edit: Some(text_edit),\n+            text_edit: Some(text_edit.into()),\n             additional_text_edits: Some(additional_text_edits),\n             documentation: self.documentation().map(|it| it.conv()),\n             deprecated: Some(self.deprecated()),"}, {"sha": "8db2dfa0c861f7a0fb9591967c15ccdb86a2ba9c", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/07f690ddf601eeff639ac83e0c9f5db1a895a47b/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07f690ddf601eeff639ac83e0c9f5db1a895a47b/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=07f690ddf601eeff639ac83e0c9f5db1a895a47b", "patch": "@@ -326,10 +326,10 @@ pub fn handle_workspace_symbol(\n \n pub fn handle_goto_definition(\n     world: WorldSnapshot,\n-    params: req::TextDocumentPositionParams,\n+    params: req::GotoDefinitionParams,\n ) -> Result<Option<req::GotoDefinitionResponse>> {\n     let _p = profile(\"handle_goto_definition\");\n-    let position = params.try_conv_with(&world)?;\n+    let position = params.text_document_position_params.try_conv_with(&world)?;\n     let nav_info = match world.analysis().goto_definition(position)? {\n         None => return Ok(None),\n         Some(it) => it,\n@@ -340,10 +340,10 @@ pub fn handle_goto_definition(\n \n pub fn handle_goto_implementation(\n     world: WorldSnapshot,\n-    params: req::TextDocumentPositionParams,\n+    params: req::GotoImplementationParams,\n ) -> Result<Option<req::GotoImplementationResponse>> {\n     let _p = profile(\"handle_goto_implementation\");\n-    let position = params.try_conv_with(&world)?;\n+    let position = params.text_document_position_params.try_conv_with(&world)?;\n     let nav_info = match world.analysis().goto_implementation(position)? {\n         None => return Ok(None),\n         Some(it) => it,\n@@ -354,10 +354,10 @@ pub fn handle_goto_implementation(\n \n pub fn handle_goto_type_definition(\n     world: WorldSnapshot,\n-    params: req::TextDocumentPositionParams,\n+    params: req::GotoTypeDefinitionParams,\n ) -> Result<Option<req::GotoTypeDefinitionResponse>> {\n     let _p = profile(\"handle_goto_type_definition\");\n-    let position = params.try_conv_with(&world)?;\n+    let position = params.text_document_position_params.try_conv_with(&world)?;\n     let nav_info = match world.analysis().goto_type_definition(position)? {\n         None => return Ok(None),\n         Some(it) => it,\n@@ -487,10 +487,10 @@ pub fn handle_folding_range(\n \n pub fn handle_signature_help(\n     world: WorldSnapshot,\n-    params: req::TextDocumentPositionParams,\n+    params: req::SignatureHelpParams,\n ) -> Result<Option<req::SignatureHelp>> {\n     let _p = profile(\"handle_signature_help\");\n-    let position = params.try_conv_with(&world)?;\n+    let position = params.text_document_position_params.try_conv_with(&world)?;\n     if let Some(call_info) = world.analysis().call_info(position)? {\n         let concise = !world.config.call_info_full;\n         let mut active_parameter = call_info.active_parameter.map(|it| it as i64);\n@@ -509,12 +509,9 @@ pub fn handle_signature_help(\n     }\n }\n \n-pub fn handle_hover(\n-    world: WorldSnapshot,\n-    params: req::TextDocumentPositionParams,\n-) -> Result<Option<Hover>> {\n+pub fn handle_hover(world: WorldSnapshot, params: req::HoverParams) -> Result<Option<Hover>> {\n     let _p = profile(\"handle_hover\");\n-    let position = params.try_conv_with(&world)?;\n+    let position = params.text_document_position_params.try_conv_with(&world)?;\n     let info = match world.analysis().hover(position)? {\n         None => return Ok(None),\n         Some(info) => info,\n@@ -878,8 +875,14 @@ pub fn handle_code_lens(\n             .map(|it| {\n                 let range = it.node_range.conv_with(&line_index);\n                 let pos = range.start;\n-                let lens_params =\n-                    req::TextDocumentPositionParams::new(params.text_document.clone(), pos);\n+                let lens_params = req::GotoImplementationParams {\n+                    text_document_position_params: req::TextDocumentPositionParams::new(\n+                        params.text_document.clone(),\n+                        pos,\n+                    ),\n+                    work_done_progress_params: Default::default(),\n+                    partial_result_params: Default::default(),\n+                };\n                 CodeLens {\n                     range,\n                     command: None,\n@@ -894,7 +897,7 @@ pub fn handle_code_lens(\n #[derive(Debug, Serialize, Deserialize)]\n #[serde(rename_all = \"camelCase\")]\n enum CodeLensResolveData {\n-    Impls(req::TextDocumentPositionParams),\n+    Impls(req::GotoImplementationParams),\n }\n \n pub fn handle_code_lens_resolve(world: WorldSnapshot, code_lens: CodeLens) -> Result<CodeLens> {\n@@ -927,7 +930,7 @@ pub fn handle_code_lens_resolve(world: WorldSnapshot, code_lens: CodeLens) -> Re\n                 title,\n                 command: \"rust-analyzer.showReferences\".into(),\n                 arguments: Some(vec![\n-                    to_value(&lens_params.text_document.uri).unwrap(),\n+                    to_value(&lens_params.text_document_position_params.text_document.uri).unwrap(),\n                     to_value(code_lens.range.start).unwrap(),\n                     to_value(locations).unwrap(),\n                 ]),\n@@ -944,16 +947,16 @@ pub fn handle_code_lens_resolve(world: WorldSnapshot, code_lens: CodeLens) -> Re\n \n pub fn handle_document_highlight(\n     world: WorldSnapshot,\n-    params: req::TextDocumentPositionParams,\n+    params: req::DocumentHighlightParams,\n ) -> Result<Option<Vec<DocumentHighlight>>> {\n     let _p = profile(\"handle_document_highlight\");\n-    let file_id = params.text_document.try_conv_with(&world)?;\n+    let file_id = params.text_document_position_params.text_document.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(file_id)?;\n \n-    let refs = match world\n-        .analysis()\n-        .find_all_refs(params.try_conv_with(&world)?, Some(SearchScope::single_file(file_id)))?\n-    {\n+    let refs = match world.analysis().find_all_refs(\n+        params.text_document_position_params.try_conv_with(&world)?,\n+        Some(SearchScope::single_file(file_id)),\n+    )? {\n         None => return Ok(None),\n         Some(refs) => refs,\n     };"}, {"sha": "0dae6bad4ff2333d0d82aea3a62df8bd70dcaa4e", "filename": "crates/rust-analyzer/src/req.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/07f690ddf601eeff639ac83e0c9f5db1a895a47b/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07f690ddf601eeff639ac83e0c9f5db1a895a47b/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freq.rs?ref=07f690ddf601eeff639ac83e0c9f5db1a895a47b", "patch": "@@ -8,14 +8,15 @@ pub use lsp_types::{\n     notification::*, request::*, ApplyWorkspaceEditParams, CodeActionParams, CodeLens,\n     CodeLensParams, CompletionParams, CompletionResponse, ConfigurationItem, ConfigurationParams,\n     DiagnosticTag, DidChangeConfigurationParams, DidChangeWatchedFilesParams,\n-    DidChangeWatchedFilesRegistrationOptions, DocumentOnTypeFormattingParams, DocumentSymbolParams,\n-    DocumentSymbolResponse, FileSystemWatcher, Hover, InitializeResult, MessageType,\n-    PartialResultParams, ProgressParams, ProgressParamsValue, ProgressToken,\n-    PublishDiagnosticsParams, ReferenceParams, Registration, RegistrationParams, SelectionRange,\n-    SelectionRangeParams, SemanticTokensParams, SemanticTokensRangeParams,\n+    DidChangeWatchedFilesRegistrationOptions, DocumentHighlightParams,\n+    DocumentOnTypeFormattingParams, DocumentSymbolParams, DocumentSymbolResponse,\n+    FileSystemWatcher, GotoDefinitionParams, GotoDefinitionResponse, Hover, HoverParams,\n+    InitializeResult, MessageType, PartialResultParams, ProgressParams, ProgressParamsValue,\n+    ProgressToken, PublishDiagnosticsParams, ReferenceParams, Registration, RegistrationParams,\n+    SelectionRange, SelectionRangeParams, SemanticTokensParams, SemanticTokensRangeParams,\n     SemanticTokensRangeResult, SemanticTokensResult, ServerCapabilities, ShowMessageParams,\n-    SignatureHelp, SymbolKind, TextDocumentEdit, TextDocumentPositionParams, TextEdit,\n-    WorkDoneProgressParams, WorkspaceEdit, WorkspaceSymbolParams,\n+    SignatureHelp, SignatureHelpParams, SymbolKind, TextDocumentEdit, TextDocumentPositionParams,\n+    TextEdit, WorkDoneProgressParams, WorkspaceEdit, WorkspaceSymbolParams,\n };\n use std::path::PathBuf;\n "}, {"sha": "07b8114c613996d15b47ccaf92c4c23ef49f80bc", "filename": "crates/rust-analyzer/tests/heavy_tests/main.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/07f690ddf601eeff639ac83e0c9f5db1a895a47b/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07f690ddf601eeff639ac83e0c9f5db1a895a47b/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs?ref=07f690ddf601eeff639ac83e0c9f5db1a895a47b", "patch": "@@ -4,8 +4,8 @@ use std::{collections::HashMap, path::PathBuf, time::Instant};\n \n use lsp_types::{\n     CodeActionContext, DidOpenTextDocumentParams, DocumentFormattingParams, FormattingOptions,\n-    PartialResultParams, Position, Range, TextDocumentItem, TextDocumentPositionParams,\n-    WorkDoneProgressParams,\n+    GotoDefinitionParams, HoverParams, PartialResultParams, Position, Range, TextDocumentItem,\n+    TextDocumentPositionParams, WorkDoneProgressParams,\n };\n use rust_analyzer::req::{\n     CodeActionParams, CodeActionRequest, Completion, CompletionParams, DidOpenTextDocument,\n@@ -610,10 +610,14 @@ fn main() { message(); }\n     })\n     .server();\n     server.wait_until_workspace_is_loaded();\n-    let res = server.send_request::<GotoDefinition>(TextDocumentPositionParams::new(\n-        server.doc_id(\"src/main.rs\"),\n-        Position::new(2, 15),\n-    ));\n+    let res = server.send_request::<GotoDefinition>(GotoDefinitionParams {\n+        text_document_position_params: TextDocumentPositionParams::new(\n+            server.doc_id(\"src/main.rs\"),\n+            Position::new(2, 15),\n+        ),\n+        work_done_progress_params: Default::default(),\n+        partial_result_params: Default::default(),\n+    });\n     assert!(format!(\"{}\", res).contains(\"hello.rs\"));\n }\n \n@@ -692,10 +696,13 @@ pub fn foo(_input: TokenStream) -> TokenStream {\n     .root(\"bar\")\n     .server();\n     server.wait_until_workspace_is_loaded();\n-    let res = server.send_request::<HoverRequest>(TextDocumentPositionParams::new(\n-        server.doc_id(\"foo/src/main.rs\"),\n-        Position::new(7, 9),\n-    ));\n+    let res = server.send_request::<HoverRequest>(HoverParams {\n+        text_document_position_params: TextDocumentPositionParams::new(\n+            server.doc_id(\"foo/src/main.rs\"),\n+            Position::new(7, 9),\n+        ),\n+        work_done_progress_params: Default::default(),\n+    });\n \n     let value = res.get(\"contents\").unwrap().get(\"value\").unwrap().to_string();\n     assert_eq!(value, r#\"\"```rust\\nfoo::Bar\\nfn bar()\\n```\"\"#)"}]}