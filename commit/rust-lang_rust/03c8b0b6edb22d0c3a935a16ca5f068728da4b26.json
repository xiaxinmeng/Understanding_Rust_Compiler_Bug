{"sha": "03c8b0b6edb22d0c3a935a16ca5f068728da4b26", "node_id": "C_kwDOAAsO6NoAKDAzYzhiMGI2ZWRiMjJkMGMzYTkzNWExNmNhNWYwNjg3MjhkYTRiMjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-23T05:32:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-23T05:32:04Z"}, "message": "Auto merge of #96100 - Raekye:master, r=dtolnay\n\nChange `NonNull::as_uninit_*` to take self by value (as opposed to reference), matching primitive pointers.\n\nCopied from my comment on [#75402](https://github.com/rust-lang/rust/issues/75402#issuecomment-1100496823):\n\n> I noticed that `as_uninit_*` on pointers take `self` by value (and pointers are `Copy`), e.g. see [`as_uninit_mut`](https://doc.rust-lang.org/core/primitive.pointer.html#method.as_uninit_mut).\n>\n> However, on `NonNull`, these functions take `self` by reference, e.g. see the function with the same name by for `NonNull`: [`as_uninit_mut`](https://doc.rust-lang.org/std/ptr/struct.NonNull.html#method.as_uninit_mut) takes `self` by mutable reference. Even more inconsistent, [`as_uninit_slice_mut`](https://doc.rust-lang.org/std/ptr/struct.NonNull.html#method.as_uninit_slice_mut) returns a mutable reference, but takes `self` by immutable reference.\n>\n> I think these methods should take `self` by value for consistency. The returned lifetime is unbounded anyways and not tied to the pointer/NonNull value anyways\n\nI realized the change is trivial (if desired) so here I am creating my first PR. I think it's not a breaking change since (it's on nightly and) `NonNull` is `Copy`; all previous usages of these methods taking `self` by reference should continue to compile. However, it might cause warnings to appear on usages of `NonNull::as_uninit_mut`, which used to require the the `NonNull` variable be declared `mut`, but now it's not necessary.", "tree": {"sha": "d307d98d353d8d82fd33733f53f7186bfcd8713d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d307d98d353d8d82fd33733f53f7186bfcd8713d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03c8b0b6edb22d0c3a935a16ca5f068728da4b26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03c8b0b6edb22d0c3a935a16ca5f068728da4b26", "html_url": "https://github.com/rust-lang/rust/commit/03c8b0b6edb22d0c3a935a16ca5f068728da4b26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03c8b0b6edb22d0c3a935a16ca5f068728da4b26/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c186f7c07912064c352f12d8b0aa9d5e5975450e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c186f7c07912064c352f12d8b0aa9d5e5975450e", "html_url": "https://github.com/rust-lang/rust/commit/c186f7c07912064c352f12d8b0aa9d5e5975450e"}, {"sha": "d5f96e6adea2532f3eba674b366cd2d71835b70b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5f96e6adea2532f3eba674b366cd2d71835b70b", "html_url": "https://github.com/rust-lang/rust/commit/d5f96e6adea2532f3eba674b366cd2d71835b70b"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "f045531717513fccf831a5987b263c59780b1650", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/03c8b0b6edb22d0c3a935a16ca5f068728da4b26/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03c8b0b6edb22d0c3a935a16ca5f068728da4b26/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=03c8b0b6edb22d0c3a935a16ca5f068728da4b26", "patch": "@@ -125,7 +125,7 @@ impl<T: Sized> NonNull<T> {\n     #[must_use]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n     #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n-    pub const unsafe fn as_uninit_ref<'a>(&self) -> &'a MaybeUninit<T> {\n+    pub const unsafe fn as_uninit_ref<'a>(self) -> &'a MaybeUninit<T> {\n         // SAFETY: the caller must guarantee that `self` meets all the\n         // requirements for a reference.\n         unsafe { &*self.cast().as_ptr() }\n@@ -159,7 +159,7 @@ impl<T: Sized> NonNull<T> {\n     #[must_use]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n     #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n-    pub const unsafe fn as_uninit_mut<'a>(&mut self) -> &'a mut MaybeUninit<T> {\n+    pub const unsafe fn as_uninit_mut<'a>(self) -> &'a mut MaybeUninit<T> {\n         // SAFETY: the caller must guarantee that `self` meets all the\n         // requirements for a reference.\n         unsafe { &mut *self.cast().as_ptr() }\n@@ -593,7 +593,7 @@ impl<T> NonNull<[T]> {\n     #[must_use]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n     #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n-    pub const unsafe fn as_uninit_slice<'a>(&self) -> &'a [MaybeUninit<T>] {\n+    pub const unsafe fn as_uninit_slice<'a>(self) -> &'a [MaybeUninit<T>] {\n         // SAFETY: the caller must uphold the safety contract for `as_uninit_slice`.\n         unsafe { slice::from_raw_parts(self.cast().as_ptr(), self.len()) }\n     }\n@@ -656,7 +656,7 @@ impl<T> NonNull<[T]> {\n     #[must_use]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n     #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n-    pub const unsafe fn as_uninit_slice_mut<'a>(&self) -> &'a mut [MaybeUninit<T>] {\n+    pub const unsafe fn as_uninit_slice_mut<'a>(self) -> &'a mut [MaybeUninit<T>] {\n         // SAFETY: the caller must uphold the safety contract for `as_uninit_slice_mut`.\n         unsafe { slice::from_raw_parts_mut(self.cast().as_ptr(), self.len()) }\n     }"}]}