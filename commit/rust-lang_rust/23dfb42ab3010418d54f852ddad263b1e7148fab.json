{"sha": "23dfb42ab3010418d54f852ddad263b1e7148fab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzZGZiNDJhYjMwMTA0MThkNTRmODUyZGRhZDI2M2IxZTcxNDhmYWI=", "commit": {"author": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2018-07-09T09:29:13Z"}, "committer": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2018-07-09T09:35:53Z"}, "message": "still support LLVM4 for emscripten", "tree": {"sha": "34270409bf97294377caa8c46b7990145994361b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34270409bf97294377caa8c46b7990145994361b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23dfb42ab3010418d54f852ddad263b1e7148fab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23dfb42ab3010418d54f852ddad263b1e7148fab", "html_url": "https://github.com/rust-lang/rust/commit/23dfb42ab3010418d54f852ddad263b1e7148fab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23dfb42ab3010418d54f852ddad263b1e7148fab/comments", "author": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52d774027793bdad2122b6cc34cec68a8b6a9626", "url": "https://api.github.com/repos/rust-lang/rust/commits/52d774027793bdad2122b6cc34cec68a8b6a9626", "html_url": "https://github.com/rust-lang/rust/commit/52d774027793bdad2122b6cc34cec68a8b6a9626"}], "stats": {"total": 168, "additions": 167, "deletions": 1}, "files": [{"sha": "d82410618d04ba6253744b67ee7a0cd54af59ec3", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 167, "deletions": 1, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/23dfb42ab3010418d54f852ddad263b1e7148fab/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/23dfb42ab3010418d54f852ddad263b1e7148fab/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=23dfb42ab3010418d54f852ddad263b1e7148fab", "patch": "@@ -16,8 +16,14 @@\n #include \"llvm/Object/Archive.h\"\n #include \"llvm/Object/ObjectFile.h\"\n #include \"llvm/Bitcode/BitcodeWriterPass.h\"\n+\n #include \"llvm/IR/CallSite.h\"\n+\n+#if LLVM_VERSION_GE(5, 0)\n #include \"llvm/ADT/Optional.h\"\n+#else\n+#include <cstdlib>\n+#endif\n \n //===----------------------------------------------------------------------===\n //\n@@ -170,7 +176,14 @@ extern \"C\" void LLVMRustAddCallSiteAttribute(LLVMValueRef Instr, unsigned Index,\n                                              LLVMRustAttribute RustAttr) {\n   CallSite Call = CallSite(unwrap<Instruction>(Instr));\n   Attribute Attr = Attribute::get(Call->getContext(), fromRust(RustAttr));\n+#if LLVM_VERSION_GE(5, 0)\n   Call.addAttribute(Index, Attr);\n+#else\n+  AttrBuilder B(Attr);\n+  Call.setAttributes(Call.getAttributes().addAttributes(\n+      Call->getContext(), Index,\n+      AttributeSet::get(Call->getContext(), Index, B)));\n+#endif\n }\n \n extern \"C\" void LLVMRustAddAlignmentCallSiteAttr(LLVMValueRef Instr,\n@@ -179,8 +192,14 @@ extern \"C\" void LLVMRustAddAlignmentCallSiteAttr(LLVMValueRef Instr,\n   CallSite Call = CallSite(unwrap<Instruction>(Instr));\n   AttrBuilder B;\n   B.addAlignmentAttr(Bytes);\n+#if LLVM_VERSION_GE(5, 0)\n   Call.setAttributes(Call.getAttributes().addAttributes(\n       Call->getContext(), Index, B));\n+#else\n+  Call.setAttributes(Call.getAttributes().addAttributes(\n+      Call->getContext(), Index,\n+      AttributeSet::get(Call->getContext(), Index, B)));\n+#endif\n }\n \n extern \"C\" void LLVMRustAddDereferenceableCallSiteAttr(LLVMValueRef Instr,\n@@ -189,8 +208,14 @@ extern \"C\" void LLVMRustAddDereferenceableCallSiteAttr(LLVMValueRef Instr,\n   CallSite Call = CallSite(unwrap<Instruction>(Instr));\n   AttrBuilder B;\n   B.addDereferenceableAttr(Bytes);\n+#if LLVM_VERSION_GE(5, 0)\n   Call.setAttributes(Call.getAttributes().addAttributes(\n       Call->getContext(), Index, B));\n+#else\n+  Call.setAttributes(Call.getAttributes().addAttributes(\n+      Call->getContext(), Index,\n+      AttributeSet::get(Call->getContext(), Index, B)));\n+#endif\n }\n \n extern \"C\" void LLVMRustAddDereferenceableOrNullCallSiteAttr(LLVMValueRef Instr,\n@@ -199,16 +224,26 @@ extern \"C\" void LLVMRustAddDereferenceableOrNullCallSiteAttr(LLVMValueRef Instr,\n   CallSite Call = CallSite(unwrap<Instruction>(Instr));\n   AttrBuilder B;\n   B.addDereferenceableOrNullAttr(Bytes);\n+#if LLVM_VERSION_GE(5, 0)\n   Call.setAttributes(Call.getAttributes().addAttributes(\n       Call->getContext(), Index, B));\n+#else\n+  Call.setAttributes(Call.getAttributes().addAttributes(\n+      Call->getContext(), Index,\n+      AttributeSet::get(Call->getContext(), Index, B)));\n+#endif\n }\n \n extern \"C\" void LLVMRustAddFunctionAttribute(LLVMValueRef Fn, unsigned Index,\n                                              LLVMRustAttribute RustAttr) {\n   Function *A = unwrap<Function>(Fn);\n   Attribute Attr = Attribute::get(A->getContext(), fromRust(RustAttr));\n   AttrBuilder B(Attr);\n+#if LLVM_VERSION_GE(5, 0)\n   A->addAttributes(Index, B);\n+#else\n+  A->addAttributes(Index, AttributeSet::get(A->getContext(), Index, B));\n+#endif\n }\n \n extern \"C\" void LLVMRustAddAlignmentAttr(LLVMValueRef Fn,\n@@ -217,15 +252,23 @@ extern \"C\" void LLVMRustAddAlignmentAttr(LLVMValueRef Fn,\n   Function *A = unwrap<Function>(Fn);\n   AttrBuilder B;\n   B.addAlignmentAttr(Bytes);\n+#if LLVM_VERSION_GE(5, 0)\n   A->addAttributes(Index, B);\n+#else\n+  A->addAttributes(Index, AttributeSet::get(A->getContext(), Index, B));\n+#endif\n }\n \n extern \"C\" void LLVMRustAddDereferenceableAttr(LLVMValueRef Fn, unsigned Index,\n                                                uint64_t Bytes) {\n   Function *A = unwrap<Function>(Fn);\n   AttrBuilder B;\n   B.addDereferenceableAttr(Bytes);\n+#if LLVM_VERSION_GE(5, 0)\n   A->addAttributes(Index, B);\n+#else\n+  A->addAttributes(Index, AttributeSet::get(A->getContext(), Index, B));\n+#endif\n }\n \n extern \"C\" void LLVMRustAddDereferenceableOrNullAttr(LLVMValueRef Fn,\n@@ -234,7 +277,11 @@ extern \"C\" void LLVMRustAddDereferenceableOrNullAttr(LLVMValueRef Fn,\n   Function *A = unwrap<Function>(Fn);\n   AttrBuilder B;\n   B.addDereferenceableOrNullAttr(Bytes);\n+#if LLVM_VERSION_GE(5, 0)\n   A->addAttributes(Index, B);\n+#else\n+  A->addAttributes(Index, AttributeSet::get(A->getContext(), Index, B));\n+#endif\n }\n \n extern \"C\" void LLVMRustAddFunctionAttrStringValue(LLVMValueRef Fn,\n@@ -244,7 +291,11 @@ extern \"C\" void LLVMRustAddFunctionAttrStringValue(LLVMValueRef Fn,\n   Function *F = unwrap<Function>(Fn);\n   AttrBuilder B;\n   B.addAttribute(Name, Value);\n+#if LLVM_VERSION_GE(5, 0)\n   F->addAttributes(Index, B);\n+#else\n+  F->addAttributes(Index, AttributeSet::get(F->getContext(), Index, B));\n+#endif\n }\n \n extern \"C\" void LLVMRustRemoveFunctionAttributes(LLVMValueRef Fn,\n@@ -254,7 +305,12 @@ extern \"C\" void LLVMRustRemoveFunctionAttributes(LLVMValueRef Fn,\n   Attribute Attr = Attribute::get(F->getContext(), fromRust(RustAttr));\n   AttrBuilder B(Attr);\n   auto PAL = F->getAttributes();\n+#if LLVM_VERSION_GE(5, 0)\n   auto PALNew = PAL.removeAttributes(F->getContext(), Index, B);\n+#else\n+  const AttributeSet PALNew = PAL.removeAttributes(\n+      F->getContext(), Index, AttributeSet::get(F->getContext(), Index, B));\n+#endif\n   F->setAttributes(PALNew);\n }\n \n@@ -304,6 +360,7 @@ enum class LLVMRustSynchronizationScope {\n   CrossThread,\n };\n \n+#if LLVM_VERSION_GE(5, 0)\n static SyncScope::ID fromRust(LLVMRustSynchronizationScope Scope) {\n   switch (Scope) {\n   case LLVMRustSynchronizationScope::SingleThread:\n@@ -314,6 +371,18 @@ static SyncScope::ID fromRust(LLVMRustSynchronizationScope Scope) {\n     report_fatal_error(\"bad SynchronizationScope.\");\n   }\n }\n+#else\n+static SynchronizationScope fromRust(LLVMRustSynchronizationScope Scope) {\n+  switch (Scope) {\n+  case LLVMRustSynchronizationScope::SingleThread:\n+    return SingleThread;\n+  case LLVMRustSynchronizationScope::CrossThread:\n+    return CrossThread;\n+  default:\n+    report_fatal_error(\"bad SynchronizationScope.\");\n+  }\n+}\n+#endif\n \n extern \"C\" LLVMValueRef\n LLVMRustBuildAtomicFence(LLVMBuilderRef B, LLVMAtomicOrdering Order,\n@@ -353,6 +422,18 @@ extern \"C\" void LLVMRustAppendModuleInlineAsm(LLVMModuleRef M, const char *Asm)\n \n typedef DIBuilder *LLVMRustDIBuilderRef;\n \n+#if LLVM_VERSION_LT(5, 0)\n+typedef struct LLVMOpaqueMetadata *LLVMMetadataRef;\n+\n+namespace llvm {\n+DEFINE_ISA_CONVERSION_FUNCTIONS(Metadata, LLVMMetadataRef)\n+\n+inline Metadata **unwrap(LLVMMetadataRef *Vals) {\n+  return reinterpret_cast<Metadata **>(Vals);\n+}\n+}\n+#endif\n+\n template <typename DIT> DIT *unwrapDIPtr(LLVMMetadataRef Ref) {\n   return (DIT *)(Ref ? unwrap<MDNode>(Ref) : nullptr);\n }\n@@ -468,6 +549,11 @@ static DINode::DIFlags fromRust(LLVMRustDIFlags Flags) {\n   if (isSet(Flags & LLVMRustDIFlags::FlagRValueReference)) {\n     Result |= DINode::DIFlags::FlagRValueReference;\n   }\n+#if LLVM_VERSION_LE(4, 0)\n+  if (isSet(Flags & LLVMRustDIFlags::FlagExternalTypeRef)) {\n+    Result |= DINode::DIFlags::FlagExternalTypeRef;\n+  }\n+#endif\n   if (isSet(Flags & LLVMRustDIFlags::FlagIntroducedVirtual)) {\n     Result |= DINode::DIFlags::FlagIntroducedVirtual;\n   }\n@@ -566,7 +652,9 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreatePointerType(\n     uint64_t SizeInBits, uint32_t AlignInBits, const char *Name) {\n   return wrap(Builder->createPointerType(unwrapDI<DIType>(PointeeTy),\n                                          SizeInBits, AlignInBits,\n+#if LLVM_VERSION_GE(5, 0)\n                                          /* DWARFAddressSpace */ None,\n+#endif\n                                          Name));\n }\n \n@@ -737,8 +825,15 @@ LLVMRustDIBuilderCreateNameSpace(LLVMRustDIBuilderRef Builder,\n                                  LLVMMetadataRef Scope, const char *Name,\n                                  LLVMMetadataRef File, unsigned LineNo) {\n   return wrap(Builder->createNameSpace(\n-      unwrapDI<DIDescriptor>(Scope), Name,\n+      unwrapDI<DIDescriptor>(Scope), Name\n+#if LLVM_VERSION_LT(5, 0)\n+      ,\n+      unwrapDI<DIFile>(File), LineNo\n+#endif\n+#if LLVM_VERSION_GE(4, 0)\n+      ,\n       false // ExportSymbols (only relevant for C++ anonymous namespaces)\n+#endif\n       ));\n }\n \n@@ -767,7 +862,12 @@ extern \"C\" int64_t LLVMRustDIBuilderCreateOpDeref() {\n }\n \n extern \"C\" int64_t LLVMRustDIBuilderCreateOpPlusUconst() {\n+#if LLVM_VERSION_GE(5, 0)\n   return dwarf::DW_OP_plus_uconst;\n+#else\n+  // older LLVM used `plus` to behave like `plus_uconst`.\n+  return dwarf::DW_OP_plus;\n+#endif\n }\n \n extern \"C\" void LLVMRustWriteTypeToString(LLVMTypeRef Ty, RustStringRef Str) {\n@@ -839,12 +939,21 @@ extern \"C\" void LLVMRustUnpackOptimizationDiagnostic(\n   *FunctionOut = wrap(&Opt->getFunction());\n \n   RawRustStringOstream FilenameOS(FilenameOut);\n+#if LLVM_VERSION_GE(5,0)\n   DiagnosticLocation loc = Opt->getLocation();\n   if (loc.isValid()) {\n     *Line = loc.getLine();\n     *Column = loc.getColumn();\n     FilenameOS << loc.getFilename();\n   }\n+#else\n+  const DebugLoc &loc = Opt->getDebugLoc();\n+  if (loc) {\n+    *Line = loc.getLine();\n+    *Column = loc.getCol();\n+    FilenameOS << cast<DIScope>(loc.getScope())->getFilename();\n+  }\n+#endif\n \n   RawRustStringOstream MessageOS(MessageOut);\n   MessageOS << Opt->getMsg();\n@@ -1264,6 +1373,7 @@ LLVMRustModuleCost(LLVMModuleRef M) {\n }\n \n // Vector reductions:\n+#if LLVM_VERSION_GE(5, 0)\n extern \"C\" LLVMValueRef\n LLVMRustBuildVectorReduceFAdd(LLVMBuilderRef B, LLVMValueRef Acc, LLVMValueRef Src) {\n     return wrap(unwrap(B)->CreateFAddReduce(unwrap(Acc),unwrap(Src)));\n@@ -1309,6 +1419,62 @@ LLVMRustBuildVectorReduceFMax(LLVMBuilderRef B, LLVMValueRef Src, bool NoNaN) {\n   return wrap(unwrap(B)->CreateFPMaxReduce(unwrap(Src), NoNaN));\n }\n \n+#else\n+\n+extern \"C\" LLVMValueRef\n+LLVMRustBuildVectorReduceFAdd(LLVMBuilderRef, LLVMValueRef, LLVMValueRef) {\n+  return nullptr;\n+}\n+extern \"C\" LLVMValueRef\n+LLVMRustBuildVectorReduceFMul(LLVMBuilderRef, LLVMValueRef, LLVMValueRef) {\n+  return nullptr;\n+}\n+extern \"C\" LLVMValueRef\n+LLVMRustBuildVectorReduceAdd(LLVMBuilderRef, LLVMValueRef) {\n+  return nullptr;\n+}\n+extern \"C\" LLVMValueRef\n+LLVMRustBuildVectorReduceMul(LLVMBuilderRef, LLVMValueRef) {\n+  return nullptr;\n+}\n+extern \"C\" LLVMValueRef\n+LLVMRustBuildVectorReduceAnd(LLVMBuilderRef, LLVMValueRef) {\n+  return nullptr;\n+}\n+extern \"C\" LLVMValueRef\n+LLVMRustBuildVectorReduceOr(LLVMBuilderRef, LLVMValueRef) {\n+  return nullptr;\n+}\n+extern \"C\" LLVMValueRef\n+LLVMRustBuildVectorReduceXor(LLVMBuilderRef, LLVMValueRef) {\n+  return nullptr;\n+}\n+extern \"C\" LLVMValueRef\n+LLVMRustBuildVectorReduceMin(LLVMBuilderRef, LLVMValueRef, bool) {\n+  return nullptr;\n+}\n+extern \"C\" LLVMValueRef\n+LLVMRustBuildVectorReduceMax(LLVMBuilderRef, LLVMValueRef, bool) {\n+  return nullptr;\n+}\n+extern \"C\" LLVMValueRef\n+LLVMRustBuildVectorReduceFMin(LLVMBuilderRef, LLVMValueRef, bool) {\n+  return nullptr;\n+}\n+extern \"C\" LLVMValueRef\n+LLVMRustBuildVectorReduceFMax(LLVMBuilderRef, LLVMValueRef, bool) {\n+  return nullptr;\n+}\n+#endif\n+\n+#if LLVM_VERSION_LT(4, 0)\n+extern \"C\" LLVMValueRef\n+LLVMBuildExactUDiv(LLVMBuilderRef B, LLVMValueRef LHS,\n+                   LLVMValueRef RHS, const char *Name) {\n+  return wrap(unwrap(B)->CreateExactUDiv(unwrap(LHS), unwrap(RHS), Name));\n+}\n+#endif\n+\n #if LLVM_VERSION_GE(6, 0)\n extern \"C\" LLVMValueRef\n LLVMRustBuildMinNum(LLVMBuilderRef B, LLVMValueRef LHS, LLVMValueRef RHS) {"}]}