{"sha": "8e3df865cc02a1a968a82dbc80295ac566eb6be8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlM2RmODY1Y2MwMmExYTk2OGE4MmRiYzgwMjk1YWM1NjZlYjZiZTg=", "commit": {"author": {"name": "Potpourri", "email": "pot_pourri@mail.ru", "date": "2015-02-05T20:28:17Z"}, "committer": {"name": "Potpourri", "email": "pot_pourri@mail.ru", "date": "2015-02-06T01:41:49Z"}, "message": "Improve error message, when found staticlib instead crate", "tree": {"sha": "4246dc23f3f1f4c9c6b0c20f79a73fdb8ed5c39b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4246dc23f3f1f4c9c6b0c20f79a73fdb8ed5c39b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e3df865cc02a1a968a82dbc80295ac566eb6be8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e3df865cc02a1a968a82dbc80295ac566eb6be8", "html_url": "https://github.com/rust-lang/rust/commit/8e3df865cc02a1a968a82dbc80295ac566eb6be8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e3df865cc02a1a968a82dbc80295ac566eb6be8/comments", "author": {"login": "Potpourri", "id": 1174908, "node_id": "MDQ6VXNlcjExNzQ5MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1174908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Potpourri", "html_url": "https://github.com/Potpourri", "followers_url": "https://api.github.com/users/Potpourri/followers", "following_url": "https://api.github.com/users/Potpourri/following{/other_user}", "gists_url": "https://api.github.com/users/Potpourri/gists{/gist_id}", "starred_url": "https://api.github.com/users/Potpourri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Potpourri/subscriptions", "organizations_url": "https://api.github.com/users/Potpourri/orgs", "repos_url": "https://api.github.com/users/Potpourri/repos", "events_url": "https://api.github.com/users/Potpourri/events{/privacy}", "received_events_url": "https://api.github.com/users/Potpourri/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Potpourri", "id": 1174908, "node_id": "MDQ6VXNlcjExNzQ5MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1174908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Potpourri", "html_url": "https://github.com/Potpourri", "followers_url": "https://api.github.com/users/Potpourri/followers", "following_url": "https://api.github.com/users/Potpourri/following{/other_user}", "gists_url": "https://api.github.com/users/Potpourri/gists{/gist_id}", "starred_url": "https://api.github.com/users/Potpourri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Potpourri/subscriptions", "organizations_url": "https://api.github.com/users/Potpourri/orgs", "repos_url": "https://api.github.com/users/Potpourri/repos", "events_url": "https://api.github.com/users/Potpourri/events{/privacy}", "received_events_url": "https://api.github.com/users/Potpourri/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "706be5ba1f65ede0ffe095df8fa79706cbb562c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/706be5ba1f65ede0ffe095df8fa79706cbb562c8", "html_url": "https://github.com/rust-lang/rust/commit/706be5ba1f65ede0ffe095df8fa79706cbb562c8"}], "stats": {"total": 66, "additions": 61, "deletions": 5}, "files": [{"sha": "e3859f6de488af038e530f000cc4bd21ca3de743", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e3df865cc02a1a968a82dbc80295ac566eb6be8/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e3df865cc02a1a968a82dbc80295ac566eb6be8/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=8e3df865cc02a1a968a82dbc80295ac566eb6be8", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -419,6 +419,7 @@ impl<'a> CrateReader<'a> {\n                     root: root,\n                     rejected_via_hash: vec!(),\n                     rejected_via_triple: vec!(),\n+                    rejected_via_kind: vec!(),\n                     should_match_name: true,\n                 };\n                 let library = load_ctxt.load_library_crate();\n@@ -483,6 +484,7 @@ impl<'a> CrateReader<'a> {\n             root: &None,\n             rejected_via_hash: vec!(),\n             rejected_via_triple: vec!(),\n+            rejected_via_kind: vec!(),\n             should_match_name: true,\n         };\n         let library = match load_ctxt.maybe_load_library_crate() {"}, {"sha": "c7e40c6c7768776fc908d86a4f65ef3ae1df2f28", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8e3df865cc02a1a968a82dbc80295ac566eb6be8/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e3df865cc02a1a968a82dbc80295ac566eb6be8/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=8e3df865cc02a1a968a82dbc80295ac566eb6be8", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -257,6 +257,7 @@ pub struct Context<'a> {\n     pub root: &'a Option<CratePaths>,\n     pub rejected_via_hash: Vec<CrateMismatch>,\n     pub rejected_via_triple: Vec<CrateMismatch>,\n+    pub rejected_via_kind: Vec<CrateMismatch>,\n     pub should_match_name: bool,\n }\n \n@@ -311,6 +312,8 @@ impl<'a> Context<'a> {\n         } else if self.rejected_via_triple.len() > 0 {\n             format!(\"couldn't find crate `{}` with expected target triple {}\",\n                     self.ident, self.triple)\n+        } else if self.rejected_via_kind.len() > 0 {\n+            format!(\"found staticlib `{}` instead of rlib or dylib\", self.ident)\n         } else {\n             format!(\"can't find crate for `{}`\", self.ident)\n         };\n@@ -335,8 +338,8 @@ impl<'a> Context<'a> {\n             let mismatches = self.rejected_via_hash.iter();\n             for (i, &CrateMismatch{ ref path, .. }) in mismatches.enumerate() {\n                 self.sess.fileline_note(self.span,\n-                    &format!(\"crate `{}` path {}{}: {}\",\n-                            self.ident, \"#\", i+1, path.display())[]);\n+                    &format!(\"crate `{}` path #{}: {}\",\n+                            self.ident, i+1, path.display())[]);\n             }\n             match self.root {\n                 &None => {}\n@@ -349,6 +352,16 @@ impl<'a> Context<'a> {\n                 }\n             }\n         }\n+        if self.rejected_via_kind.len() > 0 {\n+            self.sess.span_help(self.span, \"please recompile this crate using \\\n+                                            --crate-type lib\");\n+            let mismatches = self.rejected_via_kind.iter();\n+            for (i, &CrateMismatch { ref path, .. }) in mismatches.enumerate() {\n+                self.sess.fileline_note(self.span,\n+                                        &format!(\"crate `{}` path #{}: {}\",\n+                                                 self.ident, i+1, path.display())[]);\n+            }\n+        }\n         self.sess.abort_if_errors();\n     }\n \n@@ -369,8 +382,10 @@ impl<'a> Context<'a> {\n         // want: crate_name.dir_part() + prefix + crate_name.file_part + \"-\"\n         let dylib_prefix = format!(\"{}{}\", dypair.0, self.crate_name);\n         let rlib_prefix = format!(\"lib{}\", self.crate_name);\n+        let staticlib_prefix = format!(\"lib{}\", self.crate_name);\n \n         let mut candidates = HashMap::new();\n+        let mut staticlibs = vec!();\n \n         // First, find all possible candidate rlibs and dylibs purely based on\n         // the name of the files themselves. We're trying to match against an\n@@ -391,14 +406,21 @@ impl<'a> Context<'a> {\n                 Some(file) => file,\n             };\n             let (hash, rlib) = if file.starts_with(&rlib_prefix[]) &&\n-                    file.ends_with(\".rlib\") {\n+                                  file.ends_with(\".rlib\") {\n                 (&file[(rlib_prefix.len()) .. (file.len() - \".rlib\".len())],\n                  true)\n             } else if file.starts_with(&dylib_prefix) &&\n                       file.ends_with(&dypair.1) {\n                 (&file[(dylib_prefix.len()) .. (file.len() - dypair.1.len())],\n                  false)\n             } else {\n+                if file.starts_with(&staticlib_prefix[]) &&\n+                   file.ends_with(\".a\") {\n+                    staticlibs.push(CrateMismatch {\n+                        path: path.clone(),\n+                        got: \"static\".to_string()\n+                    });\n+                }\n                 return FileDoesntMatch\n             };\n             info!(\"lib candidate: {}\", path.display());\n@@ -415,6 +437,7 @@ impl<'a> Context<'a> {\n \n             FileMatches\n         });\n+        self.rejected_via_kind.extend(staticlibs.into_iter());\n \n         // We have now collected all known libraries into a set of candidates\n         // keyed of the filename hash listed. For each filename, we also have a"}, {"sha": "46be2385636952ef58cff581a3ef23a08286cae3", "filename": "src/test/run-make/error-found-staticlib-instead-crate/Makefile", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8e3df865cc02a1a968a82dbc80295ac566eb6be8/src%2Ftest%2Frun-make%2Ferror-found-staticlib-instead-crate%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8e3df865cc02a1a968a82dbc80295ac566eb6be8/src%2Ftest%2Frun-make%2Ferror-found-staticlib-instead-crate%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ferror-found-staticlib-instead-crate%2FMakefile?ref=8e3df865cc02a1a968a82dbc80295ac566eb6be8", "patch": "@@ -0,0 +1,5 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) foo.rs --crate-type staticlib\n+\t$(RUSTC) bar.rs 2>&1 | grep \"error: found staticlib\""}, {"sha": "5ab3e5ee99dd8ca949035eaa7b52313a2ad7e648", "filename": "src/test/run-make/error-found-staticlib-instead-crate/bar.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8e3df865cc02a1a968a82dbc80295ac566eb6be8/src%2Ftest%2Frun-make%2Ferror-found-staticlib-instead-crate%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e3df865cc02a1a968a82dbc80295ac566eb6be8/src%2Ftest%2Frun-make%2Ferror-found-staticlib-instead-crate%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ferror-found-staticlib-instead-crate%2Fbar.rs?ref=8e3df865cc02a1a968a82dbc80295ac566eb6be8", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate foo;\n+\n+fn main() {\n+    foo::foo();\n+}"}, {"sha": "222d98a12de9dddaf1c6294b21ed029713f978c6", "filename": "src/test/run-make/error-found-staticlib-instead-crate/foo.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8e3df865cc02a1a968a82dbc80295ac566eb6be8/src%2Ftest%2Frun-make%2Ferror-found-staticlib-instead-crate%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e3df865cc02a1a968a82dbc80295ac566eb6be8/src%2Ftest%2Frun-make%2Ferror-found-staticlib-instead-crate%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ferror-found-staticlib-instead-crate%2Ffoo.rs?ref=8e3df865cc02a1a968a82dbc80295ac566eb6be8", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn foo() {}"}]}