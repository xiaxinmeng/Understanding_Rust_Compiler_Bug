{"sha": "371c5aec1c4ad18f37e96b4bf85c49563fc4a01d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MWM1YWVjMWM0YWQxOGYzN2U5NmI0YmY4NWM0OTU2M2ZjNGEwMWQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-17T08:57:49Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-17T10:04:10Z"}, "message": "call_info works with closures", "tree": {"sha": "99f9d4757248115f7e5f30a53395f1cb99c089b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99f9d4757248115f7e5f30a53395f1cb99c089b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/371c5aec1c4ad18f37e96b4bf85c49563fc4a01d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/371c5aec1c4ad18f37e96b4bf85c49563fc4a01d", "html_url": "https://github.com/rust-lang/rust/commit/371c5aec1c4ad18f37e96b4bf85c49563fc4a01d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/371c5aec1c4ad18f37e96b4bf85c49563fc4a01d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f88a737a439f7801b7521c66c124ea5a44736e13", "url": "https://api.github.com/repos/rust-lang/rust/commits/f88a737a439f7801b7521c66c124ea5a44736e13", "html_url": "https://github.com/rust-lang/rust/commit/f88a737a439f7801b7521c66c124ea5a44736e13"}], "stats": {"total": 68, "additions": 42, "deletions": 26}, "files": [{"sha": "859bdfb3bc1c039d2b3bfa688b2634aef016e250", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/371c5aec1c4ad18f37e96b4bf85c49563fc4a01d/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371c5aec1c4ad18f37e96b4bf85c49563fc4a01d/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=371c5aec1c4ad18f37e96b4bf85c49563fc4a01d", "patch": "@@ -1233,9 +1233,13 @@ impl Type {\n     }\n \n     pub fn as_callable(&self, db: &dyn HirDatabase) -> Option<Callable> {\n-        let (id, substs) = self.ty.value.as_callable()?;\n-        let sig = db.callable_item_signature(id).subst(substs);\n-        Some(Callable { ty: self.clone(), sig, id, is_bound_method: false })\n+        let def = match self.ty.value {\n+            Ty::Apply(ApplicationTy { ctor: TypeCtor::FnDef(def), parameters: _ }) => Some(def),\n+            _ => None,\n+        };\n+\n+        let sig = self.ty.value.callable_sig(db)?;\n+        Some(Callable { ty: self.clone(), sig, def, is_bound_method: false })\n     }\n \n     pub fn is_closure(&self) -> bool {\n@@ -1525,27 +1529,29 @@ impl HirDisplay for Type {\n pub struct Callable {\n     ty: Type,\n     sig: FnSig,\n-    id: CallableDefId,\n+    def: Option<CallableDefId>,\n     pub(crate) is_bound_method: bool,\n }\n \n pub enum CallableKind {\n     Function(Function),\n     TupleStruct(Struct),\n     TupleEnumVariant(EnumVariant),\n+    Closure,\n }\n \n impl Callable {\n     pub fn kind(&self) -> CallableKind {\n-        match self.id {\n-            CallableDefId::FunctionId(it) => CallableKind::Function(it.into()),\n-            CallableDefId::StructId(it) => CallableKind::TupleStruct(it.into()),\n-            CallableDefId::EnumVariantId(it) => CallableKind::TupleEnumVariant(it.into()),\n+        match self.def {\n+            Some(CallableDefId::FunctionId(it)) => CallableKind::Function(it.into()),\n+            Some(CallableDefId::StructId(it)) => CallableKind::TupleStruct(it.into()),\n+            Some(CallableDefId::EnumVariantId(it)) => CallableKind::TupleEnumVariant(it.into()),\n+            None => CallableKind::Closure,\n         }\n     }\n     pub fn receiver_param(&self, db: &dyn HirDatabase) -> Option<ast::SelfParam> {\n-        let func = match self.id {\n-            CallableDefId::FunctionId(it) if self.is_bound_method => it,\n+        let func = match self.def {\n+            Some(CallableDefId::FunctionId(it)) if self.is_bound_method => it,\n             _ => return None,\n         };\n         let src = func.lookup(db.upcast()).source(db.upcast());\n@@ -1565,8 +1571,8 @@ impl Callable {\n             .iter()\n             .skip(if self.is_bound_method { 1 } else { 0 })\n             .map(|ty| self.ty.derived(ty.clone()));\n-        let patterns = match self.id {\n-            CallableDefId::FunctionId(func) => {\n+        let patterns = match self.def {\n+            Some(CallableDefId::FunctionId(func)) => {\n                 let src = func.lookup(db.upcast()).source(db.upcast());\n                 src.value.param_list().map(|param_list| {\n                     param_list\n@@ -1577,8 +1583,7 @@ impl Callable {\n                         .chain(param_list.params().map(|it| it.pat().map(Either::Right)))\n                 })\n             }\n-            CallableDefId::StructId(_) => None,\n-            CallableDefId::EnumVariantId(_) => None,\n+            _ => None,\n         };\n         patterns.into_iter().flatten().chain(iter::repeat(None)).zip(types).collect()\n     }"}, {"sha": "7698cb0d4bb1b0ee3b505caa9809ac8194caa49b", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/371c5aec1c4ad18f37e96b4bf85c49563fc4a01d/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371c5aec1c4ad18f37e96b4bf85c49563fc4a01d/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=371c5aec1c4ad18f37e96b4bf85c49563fc4a01d", "patch": "@@ -767,15 +767,6 @@ impl Ty {\n         }\n     }\n \n-    pub fn as_callable(&self) -> Option<(CallableDefId, &Substs)> {\n-        match self {\n-            Ty::Apply(ApplicationTy { ctor: TypeCtor::FnDef(callable_def), parameters }) => {\n-                Some((*callable_def, parameters))\n-            }\n-            _ => None,\n-        }\n-    }\n-\n     pub fn is_never(&self) -> bool {\n         matches!(self, Ty::Apply(ApplicationTy { ctor: TypeCtor::Never, .. }))\n     }\n@@ -807,7 +798,7 @@ impl Ty {\n         }\n     }\n \n-    pub(crate) fn callable_sig(&self, db: &dyn HirDatabase) -> Option<FnSig> {\n+    pub fn callable_sig(&self, db: &dyn HirDatabase) -> Option<FnSig> {\n         match self {\n             Ty::Apply(a_ty) => match a_ty.ctor {\n                 TypeCtor::FnPtr { is_varargs, .. } => {"}, {"sha": "53d56a0a4a72e16cb62bf5c1bc3ef3fd736437af", "filename": "crates/ra_ide/src/call_info.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/371c5aec1c4ad18f37e96b4bf85c49563fc4a01d/crates%2Fra_ide%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371c5aec1c4ad18f37e96b4bf85c49563fc4a01d/crates%2Fra_ide%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcall_info.rs?ref=371c5aec1c4ad18f37e96b4bf85c49563fc4a01d", "patch": "@@ -70,6 +70,7 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n                 variant.name(db)\n             );\n         }\n+        hir::CallableKind::Closure => (),\n     }\n \n     res.signature.push('(');\n@@ -93,7 +94,7 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n     res.signature.push(')');\n \n     match callable.kind() {\n-        hir::CallableKind::Function(_) => {\n+        hir::CallableKind::Function(_) | hir::CallableKind::Closure => {\n             let ret_type = callable.return_type();\n             if !ret_type.is_unit() {\n                 format_to!(res.signature, \" -> {}\", ret_type.display(db));\n@@ -702,4 +703,21 @@ id! {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn call_info_for_lambdas() {\n+        check(\n+            r#\"\n+struct S;\n+fn foo(s: S) -> i32 { 92 }\n+fn main() {\n+    (|s| foo(s))(<|>)\n+}\n+        \"#,\n+            expect![[r#\"\n+                (S) -> i32\n+                (<S>)\n+            \"#]],\n+        )\n+    }\n }"}, {"sha": "43a5e29b5d8036d2a4e9ac829e230ef2e36d3f7b", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/371c5aec1c4ad18f37e96b4bf85c49563fc4a01d/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371c5aec1c4ad18f37e96b4bf85c49563fc4a01d/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=371c5aec1c4ad18f37e96b4bf85c49563fc4a01d", "patch": "@@ -262,7 +262,9 @@ fn should_show_param_name_hint(\n     let param_name = param_name.trim_start_matches('_');\n     let fn_name = match callable.kind() {\n         hir::CallableKind::Function(it) => Some(it.name(sema.db).to_string()),\n-        hir::CallableKind::TupleStruct(_) | hir::CallableKind::TupleEnumVariant(_) => None,\n+        hir::CallableKind::TupleStruct(_)\n+        | hir::CallableKind::TupleEnumVariant(_)\n+        | hir::CallableKind::Closure => None,\n     };\n     if param_name.is_empty()\n         || Some(param_name) == fn_name.as_ref().map(|s| s.trim_start_matches('_'))"}]}