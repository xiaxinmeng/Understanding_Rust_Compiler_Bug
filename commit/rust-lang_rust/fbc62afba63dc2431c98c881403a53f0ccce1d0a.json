{"sha": "fbc62afba63dc2431c98c881403a53f0ccce1d0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiYzYyYWZiYTYzZGMyNDMxYzk4Yzg4MTQwM2E1M2YwY2NjZTFkMGE=", "commit": {"author": {"name": "Jonathan Turner", "email": "jonathandturner@users.noreply.github.com", "date": "2016-08-17T13:25:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-17T13:25:28Z"}, "message": "Rollup merge of #35726 - mikhail-m1:master2, r=jonathandturner\n\nupdate E0409 to new error format\n\nfixes #35699 as part of #35233.\n\nr? @jonathandturner", "tree": {"sha": "24d42f211b90c567de6805e6f62191a61c2f8e2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24d42f211b90c567de6805e6f62191a61c2f8e2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbc62afba63dc2431c98c881403a53f0ccce1d0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbc62afba63dc2431c98c881403a53f0ccce1d0a", "html_url": "https://github.com/rust-lang/rust/commit/fbc62afba63dc2431c98c881403a53f0ccce1d0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbc62afba63dc2431c98c881403a53f0ccce1d0a/comments", "author": {"login": "jonathandturner", "id": 111457284, "node_id": "O_kgDOBqS0BA", "avatar_url": "https://avatars.githubusercontent.com/u/111457284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathandturner", "html_url": "https://github.com/jonathandturner", "followers_url": "https://api.github.com/users/jonathandturner/followers", "following_url": "https://api.github.com/users/jonathandturner/following{/other_user}", "gists_url": "https://api.github.com/users/jonathandturner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathandturner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathandturner/subscriptions", "organizations_url": "https://api.github.com/users/jonathandturner/orgs", "repos_url": "https://api.github.com/users/jonathandturner/repos", "events_url": "https://api.github.com/users/jonathandturner/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathandturner/received_events", "type": "Organization", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e20a7e34183d7bed79b58d0cb4e330917d96e48d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e20a7e34183d7bed79b58d0cb4e330917d96e48d", "html_url": "https://github.com/rust-lang/rust/commit/e20a7e34183d7bed79b58d0cb4e330917d96e48d"}, {"sha": "193b9ae86b7ba498430866fb6090617194ba5ed7", "url": "https://api.github.com/repos/rust-lang/rust/commits/193b9ae86b7ba498430866fb6090617194ba5ed7", "html_url": "https://github.com/rust-lang/rust/commit/193b9ae86b7ba498430866fb6090617194ba5ed7"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "d90a932a63d86081ae540569329326eb1ffe9902", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fbc62afba63dc2431c98c881403a53f0ccce1d0a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc62afba63dc2431c98c881403a53f0ccce1d0a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=fbc62afba63dc2431c98c881403a53f0ccce1d0a", "patch": "@@ -116,7 +116,7 @@ enum ResolutionError<'a> {\n     /// error E0408: variable `{}` from pattern #{} is not bound in pattern #{}\n     VariableNotBoundInPattern(Name, usize, usize),\n     /// error E0409: variable is bound with different mode in pattern #{} than in pattern #1\n-    VariableBoundWithDifferentMode(Name, usize),\n+    VariableBoundWithDifferentMode(Name, usize, Span),\n     /// error E0411: use of `Self` outside of an impl or trait\n     SelfUsedOutsideImplOrTrait,\n     /// error E0412: use of undeclared\n@@ -269,14 +269,19 @@ fn resolve_struct_error<'b, 'a: 'b, 'c>(resolver: &'b Resolver<'a>,\n                              from,\n                              to)\n         }\n-        ResolutionError::VariableBoundWithDifferentMode(variable_name, pattern_number) => {\n-            struct_span_err!(resolver.session,\n+        ResolutionError::VariableBoundWithDifferentMode(variable_name,\n+                                                        pattern_number,\n+                                                        first_binding_span) => {\n+            let mut err = struct_span_err!(resolver.session,\n                              span,\n                              E0409,\n                              \"variable `{}` is bound with different mode in pattern #{} than in \\\n                               pattern #1\",\n                              variable_name,\n-                             pattern_number)\n+                             pattern_number);\n+            err.span_label(span, &format!(\"bound in different ways\"));\n+            err.span_label(first_binding_span, &format!(\"first binding\"));\n+            err\n         }\n         ResolutionError::SelfUsedOutsideImplOrTrait => {\n             let mut err = struct_span_err!(resolver.session,\n@@ -2030,8 +2035,10 @@ impl<'a> Resolver<'a> {\n                         if binding_0.binding_mode != binding_i.binding_mode {\n                             resolve_error(self,\n                                           binding_i.span,\n-                                          ResolutionError::VariableBoundWithDifferentMode(key.name,\n-                                                                                          i + 1));\n+                                          ResolutionError::VariableBoundWithDifferentMode(\n+                                              key.name,\n+                                              i + 1,\n+                                              binding_0.span));\n                         }\n                     }\n                 }"}, {"sha": "e89cc9ea5cbf26b19a7df4503d1a9f318ced1980", "filename": "src/test/compile-fail/E0409.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fbc62afba63dc2431c98c881403a53f0ccce1d0a/src%2Ftest%2Fcompile-fail%2FE0409.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc62afba63dc2431c98c881403a53f0ccce1d0a/src%2Ftest%2Fcompile-fail%2FE0409.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0409.rs?ref=fbc62afba63dc2431c98c881403a53f0ccce1d0a", "patch": "@@ -13,7 +13,12 @@ fn main() {\n \n     match x {\n         (0, ref y) | (y, 0) => {} //~ ERROR E0409\n-                                  //~^ ERROR E0308\n+                                  //~^ NOTE bound in different ways\n+                                  //~| NOTE first binding\n+                                  //~| ERROR E0308\n+                                  //~| NOTE expected &{integer}, found integral variable\n+                                  //~| NOTE expected type `&{integer}`\n+                                  //~| NOTE    found type `{integer}`\n         _ => ()\n     }\n }"}]}