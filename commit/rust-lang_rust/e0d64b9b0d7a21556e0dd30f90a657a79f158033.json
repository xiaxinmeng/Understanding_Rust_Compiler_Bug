{"sha": "e0d64b9b0d7a21556e0dd30f90a657a79f158033", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwZDY0YjliMGQ3YTIxNTU2ZTBkZDMwZjkwYTY1N2E3OWYxNTgwMzM=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-12-12T14:32:45Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-01-18T20:10:36Z"}, "message": "Use ty::{IntTy,UintTy,FloatTy} in rustdoc and clippy", "tree": {"sha": "2dcd9d61335a56c55168dbf15b3793833f585f94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2dcd9d61335a56c55168dbf15b3793833f585f94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0d64b9b0d7a21556e0dd30f90a657a79f158033", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0d64b9b0d7a21556e0dd30f90a657a79f158033", "html_url": "https://github.com/rust-lang/rust/commit/e0d64b9b0d7a21556e0dd30f90a657a79f158033", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0d64b9b0d7a21556e0dd30f90a657a79f158033/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50e1ae15e9f3035b06bae00e1b1dc7a358546d3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e", "html_url": "https://github.com/rust-lang/rust/commit/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e"}], "stats": {"total": 93, "additions": 61, "deletions": 32}, "files": [{"sha": "48ac5255a32c1d56dab0122a8908269da0db730d", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e0d64b9b0d7a21556e0dd30f90a657a79f158033/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0d64b9b0d7a21556e0dd30f90a657a79f158033/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=e0d64b9b0d7a21556e0dd30f90a657a79f158033", "patch": "@@ -11,7 +11,6 @@ use std::{slice, vec};\n use rustc_ast::attr;\n use rustc_ast::util::comments::beautify_doc_string;\n use rustc_ast::{self as ast, AttrStyle};\n-use rustc_ast::{FloatTy, IntTy, UintTy};\n use rustc_attr::{ConstStability, Deprecation, Stability, StabilityLevel};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_feature::UnstableFeatures;\n@@ -21,7 +20,7 @@ use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::Mutability;\n use rustc_index::vec::IndexVec;\n-use rustc_middle::ty::TyCtxt;\n+use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::Session;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::DUMMY_SP;\n@@ -1423,6 +1422,7 @@ impl GetDefId for Type {\n \n impl PrimitiveType {\n     crate fn from_hir(prim: hir::PrimTy) -> PrimitiveType {\n+        use ast::{FloatTy, IntTy, UintTy};\n         match prim {\n             hir::PrimTy::Int(IntTy::Isize) => PrimitiveType::Isize,\n             hir::PrimTy::Int(IntTy::I8) => PrimitiveType::I8,\n@@ -1657,6 +1657,41 @@ impl From<ast::FloatTy> for PrimitiveType {\n     }\n }\n \n+impl From<ty::IntTy> for PrimitiveType {\n+    fn from(int_ty: ty::IntTy) -> PrimitiveType {\n+        match int_ty {\n+            ty::IntTy::Isize => PrimitiveType::Isize,\n+            ty::IntTy::I8 => PrimitiveType::I8,\n+            ty::IntTy::I16 => PrimitiveType::I16,\n+            ty::IntTy::I32 => PrimitiveType::I32,\n+            ty::IntTy::I64 => PrimitiveType::I64,\n+            ty::IntTy::I128 => PrimitiveType::I128,\n+        }\n+    }\n+}\n+\n+impl From<ty::UintTy> for PrimitiveType {\n+    fn from(uint_ty: ty::UintTy) -> PrimitiveType {\n+        match uint_ty {\n+            ty::UintTy::Usize => PrimitiveType::Usize,\n+            ty::UintTy::U8 => PrimitiveType::U8,\n+            ty::UintTy::U16 => PrimitiveType::U16,\n+            ty::UintTy::U32 => PrimitiveType::U32,\n+            ty::UintTy::U64 => PrimitiveType::U64,\n+            ty::UintTy::U128 => PrimitiveType::U128,\n+        }\n+    }\n+}\n+\n+impl From<ty::FloatTy> for PrimitiveType {\n+    fn from(float_ty: ty::FloatTy) -> PrimitiveType {\n+        match float_ty {\n+            ty::FloatTy::F32 => PrimitiveType::F32,\n+            ty::FloatTy::F64 => PrimitiveType::F64,\n+        }\n+    }\n+}\n+\n impl From<hir::PrimTy> for PrimitiveType {\n     fn from(prim_ty: hir::PrimTy) -> PrimitiveType {\n         match prim_ty {"}, {"sha": "ac9098a7584d6d6985a02d9d2f7c931e27d5185e", "filename": "src/tools/clippy/clippy_lints/src/bytecount.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e0d64b9b0d7a21556e0dd30f90a657a79f158033/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0d64b9b0d7a21556e0dd30f90a657a79f158033/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbytecount.rs?ref=e0d64b9b0d7a21556e0dd30f90a657a79f158033", "patch": "@@ -2,11 +2,10 @@ use crate::utils::{\n     contains_name, get_pat_name, match_type, paths, single_segment_path, snippet_with_applicability, span_lint_and_sugg,\n };\n use if_chain::if_chain;\n-use rustc_ast::ast::UintTy;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty;\n+use rustc_middle::ty::{self, UintTy};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n use rustc_span::Symbol;"}, {"sha": "640cffd24a701d52a006f088726459a07358d3c1", "filename": "src/tools/clippy/clippy_lints/src/consts.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0d64b9b0d7a21556e0dd30f90a657a79f158033/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0d64b9b0d7a21556e0dd30f90a657a79f158033/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fconsts.rs?ref=e0d64b9b0d7a21556e0dd30f90a657a79f158033", "patch": "@@ -2,14 +2,14 @@\n \n use crate::utils::{clip, sext, unsext};\n use if_chain::if_chain;\n-use rustc_ast::ast::{FloatTy, LitFloatType, LitKind};\n+use rustc_ast::ast::{self, LitFloatType, LitKind};\n use rustc_data_structures::sync::Lrc;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::{BinOp, BinOpKind, Block, Expr, ExprKind, HirId, QPath, UnOp};\n use rustc_lint::LateContext;\n use rustc_middle::mir::interpret::Scalar;\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n-use rustc_middle::ty::{self, ScalarInt, Ty, TyCtxt};\n+use rustc_middle::ty::{self, FloatTy, ScalarInt, Ty, TyCtxt};\n use rustc_middle::{bug, span_bug};\n use rustc_span::symbol::Symbol;\n use std::cmp::Ordering::{self, Equal};\n@@ -167,8 +167,8 @@ pub fn lit_to_constant(lit: &LitKind, ty: Option<Ty<'_>>) -> Constant {\n         LitKind::Char(c) => Constant::Char(c),\n         LitKind::Int(n, _) => Constant::Int(n),\n         LitKind::Float(ref is, LitFloatType::Suffixed(fty)) => match fty {\n-            FloatTy::F32 => Constant::F32(is.as_str().parse().unwrap()),\n-            FloatTy::F64 => Constant::F64(is.as_str().parse().unwrap()),\n+            ast::FloatTy::F32 => Constant::F32(is.as_str().parse().unwrap()),\n+            ast::FloatTy::F64 => Constant::F64(is.as_str().parse().unwrap()),\n         },\n         LitKind::Float(ref is, LitFloatType::Unsuffixed) => match ty.expect(\"type of float is known\").kind() {\n             ty::Float(FloatTy::F32) => Constant::F32(is.as_str().parse().unwrap()),"}, {"sha": "ae56a8ba5ab4b4056a6a2dd9f8764e952a7fa54a", "filename": "src/tools/clippy/clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e0d64b9b0d7a21556e0dd30f90a657a79f158033/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0d64b9b0d7a21556e0dd30f90a657a79f158033/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_clike.rs?ref=e0d64b9b0d7a21556e0dd30f90a657a79f158033", "patch": "@@ -3,10 +3,9 @@\n \n use crate::consts::{miri_to_const, Constant};\n use crate::utils::span_lint;\n-use rustc_ast::ast::{IntTy, UintTy};\n use rustc_hir::{Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty;\n+use rustc_middle::ty::{self, IntTy, UintTy};\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use std::convert::TryFrom;"}, {"sha": "be646cbe4d043659bed1a879e8e3f07836090feb", "filename": "src/tools/clippy/clippy_lints/src/float_literal.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0d64b9b0d7a21556e0dd30f90a657a79f158033/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloat_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0d64b9b0d7a21556e0dd30f90a657a79f158033/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloat_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloat_literal.rs?ref=e0d64b9b0d7a21556e0dd30f90a657a79f158033", "patch": "@@ -1,10 +1,10 @@\n use crate::utils::{numeric_literal, span_lint_and_sugg};\n use if_chain::if_chain;\n-use rustc_ast::ast::{FloatTy, LitFloatType, LitKind};\n+use rustc_ast::ast::{self, LitFloatType, LitKind};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty;\n+use rustc_middle::ty::{self, FloatTy};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use std::fmt;\n \n@@ -75,8 +75,8 @@ impl<'tcx> LateLintPass<'tcx> for FloatLiteral {\n                 let digits = count_digits(&sym_str);\n                 let max = max_digits(fty);\n                 let type_suffix = match lit_float_ty {\n-                    LitFloatType::Suffixed(FloatTy::F32) => Some(\"f32\"),\n-                    LitFloatType::Suffixed(FloatTy::F64) => Some(\"f64\"),\n+                    LitFloatType::Suffixed(ast::FloatTy::F32) => Some(\"f32\"),\n+                    LitFloatType::Suffixed(ast::FloatTy::F64) => Some(\"f64\"),\n                     LitFloatType::Unsuffixed => None\n                 };\n                 let (is_whole, mut float_str) = match fty {"}, {"sha": "40b236493a3135722fe1ded68054f20ca462a7d9", "filename": "src/tools/clippy/clippy_lints/src/mutex_atomic.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e0d64b9b0d7a21556e0dd30f90a657a79f158033/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0d64b9b0d7a21556e0dd30f90a657a79f158033/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmutex_atomic.rs?ref=e0d64b9b0d7a21556e0dd30f90a657a79f158033", "patch": "@@ -3,7 +3,6 @@\n //! This lint is **warn** by default\n \n use crate::utils::{is_type_diagnostic_item, span_lint};\n-use rustc_ast::ast;\n use rustc_hir::Expr;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, Ty};\n@@ -77,8 +76,8 @@ impl<'tcx> LateLintPass<'tcx> for Mutex {\n                         atomic_name\n                     );\n                     match *mutex_param.kind() {\n-                        ty::Uint(t) if t != ast::UintTy::Usize => span_lint(cx, MUTEX_INTEGER, expr.span, &msg),\n-                        ty::Int(t) if t != ast::IntTy::Isize => span_lint(cx, MUTEX_INTEGER, expr.span, &msg),\n+                        ty::Uint(t) if t != ty::UintTy::Usize => span_lint(cx, MUTEX_INTEGER, expr.span, &msg),\n+                        ty::Int(t) if t != ty::IntTy::Isize => span_lint(cx, MUTEX_INTEGER, expr.span, &msg),\n                         _ => span_lint(cx, MUTEX_ATOMIC, expr.span, &msg),\n                     };\n                 }"}, {"sha": "d977cea4da50b6427653d07a59af1ade1686b46e", "filename": "src/tools/clippy/clippy_lints/src/transmute.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e0d64b9b0d7a21556e0dd30f90a657a79f158033/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0d64b9b0d7a21556e0dd30f90a657a79f158033/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute.rs?ref=e0d64b9b0d7a21556e0dd30f90a657a79f158033", "patch": "@@ -443,7 +443,7 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                             );\n                         },\n                     ),\n-                    (ty::Int(ast::IntTy::I32) | ty::Uint(ast::UintTy::U32), &ty::Char) => {\n+                    (ty::Int(ty::IntTy::I32) | ty::Uint(ty::UintTy::U32), &ty::Char) => {\n                         span_lint_and_then(\n                             cx,\n                             TRANSMUTE_INT_TO_CHAR,\n@@ -468,7 +468,7 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                     (ty::Ref(_, ty_from, from_mutbl), ty::Ref(_, ty_to, to_mutbl)) => {\n                         if_chain! {\n                             if let (&ty::Slice(slice_ty), &ty::Str) = (&ty_from.kind(), &ty_to.kind());\n-                            if let ty::Uint(ast::UintTy::U8) = slice_ty.kind();\n+                            if let ty::Uint(ty::UintTy::U8) = slice_ty.kind();\n                             if from_mutbl == to_mutbl;\n                             then {\n                                 let postfix = if *from_mutbl == Mutability::Mut {\n@@ -536,7 +536,7 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                             }\n                         },\n                     ),\n-                    (ty::Int(ast::IntTy::I8) | ty::Uint(ast::UintTy::U8), ty::Bool) => {\n+                    (ty::Int(ty::IntTy::I8) | ty::Uint(ty::UintTy::U8), ty::Bool) => {\n                         span_lint_and_then(\n                             cx,\n                             TRANSMUTE_INT_TO_BOOL,"}, {"sha": "17cef0af3e9c9e257f0b6cde1852d41cf7c7957f", "filename": "src/tools/clippy/clippy_lints/src/types.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0d64b9b0d7a21556e0dd30f90a657a79f158033/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0d64b9b0d7a21556e0dd30f90a657a79f158033/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes.rs?ref=e0d64b9b0d7a21556e0dd30f90a657a79f158033", "patch": "@@ -5,7 +5,7 @@ use std::cmp::Ordering;\n use std::collections::BTreeMap;\n \n use if_chain::if_chain;\n-use rustc_ast::{FloatTy, IntTy, LitFloatType, LitIntType, LitKind, UintTy};\n+use rustc_ast::{LitFloatType, LitIntType, LitKind};\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::intravisit::{walk_body, walk_expr, walk_ty, FnKind, NestedVisitorMap, Visitor};\n@@ -18,7 +18,7 @@ use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::TypeFoldable;\n-use rustc_middle::ty::{self, InferTy, Ty, TyCtxt, TyS, TypeAndMut, TypeckResults};\n+use rustc_middle::ty::{self, FloatTy, InferTy, IntTy, Ty, TyCtxt, TyS, TypeAndMut, TypeckResults, UintTy};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n@@ -1106,9 +1106,7 @@ fn is_empty_block(expr: &Expr<'_>) -> bool {\n         expr.kind,\n         ExprKind::Block(\n             Block {\n-                stmts: &[],\n-                expr: None,\n-                ..\n+                stmts: &[], expr: None, ..\n             },\n             _,\n         )"}, {"sha": "46b2b06d1a280d151f639fd9d21cd326ee634de2", "filename": "src/tools/clippy/clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e0d64b9b0d7a21556e0dd30f90a657a79f158033/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0d64b9b0d7a21556e0dd30f90a657a79f158033/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=e0d64b9b0d7a21556e0dd30f90a657a79f158033", "patch": "@@ -35,7 +35,6 @@ use std::mem;\n \n use if_chain::if_chain;\n use rustc_ast::ast::{self, Attribute, LitKind};\n-use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -1224,27 +1223,27 @@ pub fn get_arg_name(pat: &Pat<'_>) -> Option<Symbol> {\n     }\n }\n \n-pub fn int_bits(tcx: TyCtxt<'_>, ity: ast::IntTy) -> u64 {\n-    Integer::from_attr(&tcx, attr::IntType::SignedInt(ity)).size().bits()\n+pub fn int_bits(tcx: TyCtxt<'_>, ity: ty::IntTy) -> u64 {\n+    Integer::from_int_ty(&tcx, ity).size().bits()\n }\n \n #[allow(clippy::cast_possible_wrap)]\n /// Turn a constant int byte representation into an i128\n-pub fn sext(tcx: TyCtxt<'_>, u: u128, ity: ast::IntTy) -> i128 {\n+pub fn sext(tcx: TyCtxt<'_>, u: u128, ity: ty::IntTy) -> i128 {\n     let amt = 128 - int_bits(tcx, ity);\n     ((u as i128) << amt) >> amt\n }\n \n #[allow(clippy::cast_sign_loss)]\n /// clip unused bytes\n-pub fn unsext(tcx: TyCtxt<'_>, u: i128, ity: ast::IntTy) -> u128 {\n+pub fn unsext(tcx: TyCtxt<'_>, u: i128, ity: ty::IntTy) -> u128 {\n     let amt = 128 - int_bits(tcx, ity);\n     ((u as u128) << amt) >> amt\n }\n \n /// clip unused bytes\n-pub fn clip(tcx: TyCtxt<'_>, u: u128, ity: ast::UintTy) -> u128 {\n-    let bits = Integer::from_attr(&tcx, attr::IntType::UnsignedInt(ity)).size().bits();\n+pub fn clip(tcx: TyCtxt<'_>, u: u128, ity: ty::UintTy) -> u128 {\n+    let bits = Integer::from_uint_ty(&tcx, ity).size().bits();\n     let amt = 128 - bits;\n     (u << amt) >> amt\n }"}]}