{"sha": "750568d49c75441374a4862cf590cd5bb9547456", "node_id": "C_kwDOAAsO6NoAKDc1MDU2OGQ0OWM3NTQ0MTM3NGE0ODYyY2Y1OTBjZDViYjk1NDc0NTY", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-07T17:06:50Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-07T17:06:50Z"}, "message": "Remove Clean impl for `Option<T>`", "tree": {"sha": "26d05e1a7d7d11c6a9f3a4b4d114447000ce3b5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26d05e1a7d7d11c6a9f3a4b4d114447000ce3b5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/750568d49c75441374a4862cf590cd5bb9547456", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/750568d49c75441374a4862cf590cd5bb9547456", "html_url": "https://github.com/rust-lang/rust/commit/750568d49c75441374a4862cf590cd5bb9547456", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/750568d49c75441374a4862cf590cd5bb9547456/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "120ef3630751e0329f0f0a41a36b17958b720b6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/120ef3630751e0329f0f0a41a36b17958b720b6e", "html_url": "https://github.com/rust-lang/rust/commit/120ef3630751e0329f0f0a41a36b17958b720b6e"}], "stats": {"total": 16, "additions": 5, "deletions": 11}, "files": [{"sha": "89335821dd61acd22dbb2217379182b1b134bb09", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/750568d49c75441374a4862cf590cd5bb9547456/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750568d49c75441374a4862cf590cd5bb9547456/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=750568d49c75441374a4862cf590cd5bb9547456", "patch": "@@ -448,7 +448,7 @@ crate fn build_impl(\n         ),\n     };\n     let polarity = tcx.impl_polarity(did);\n-    let trait_ = associated_trait.clean(cx);\n+    let trait_ = associated_trait.map(|t| t.clean(cx));\n     if trait_.as_ref().map(|t| t.def_id()) == tcx.lang_items().deref_trait() {\n         super::build_deref_target_impls(cx, &trait_items, ret);\n     }"}, {"sha": "756c8d37ab84d9904096eea61ccf6ec02cae9dab", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/750568d49c75441374a4862cf590cd5bb9547456/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750568d49c75441374a4862cf590cd5bb9547456/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=750568d49c75441374a4862cf590cd5bb9547456", "patch": "@@ -80,12 +80,6 @@ impl<T: Clean<U>, U> Clean<U> for Rc<T> {\n     }\n }\n \n-impl<T: Clean<U>, U> Clean<Option<U>> for Option<T> {\n-    fn clean(&self, cx: &mut DocContext<'_>) -> Option<U> {\n-        self.as_ref().map(|v| v.clean(cx))\n-    }\n-}\n-\n impl Clean<Item> for doctree::Module<'_> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Item {\n         let mut items: Vec<Item> = vec![];\n@@ -460,7 +454,7 @@ impl Clean<GenericParamDef> for hir::GenericParam<'_> {\n                 GenericParamDefKind::Type {\n                     did: cx.tcx.hir().local_def_id(self.hir_id).to_def_id(),\n                     bounds: self.bounds.clean(cx),\n-                    default: default.clean(cx).map(Box::new),\n+                    default: default.map(|t| t.clean(cx)).map(Box::new),\n                     synthetic,\n                 },\n             ),\n@@ -935,7 +929,7 @@ impl Clean<Item> for hir::TraitItem<'_> {\n                     TyMethodItem(t)\n                 }\n                 hir::TraitItemKind::Type(bounds, ref default) => {\n-                    AssocTypeItem(bounds.clean(cx), default.clean(cx))\n+                    AssocTypeItem(bounds.clean(cx), default.map(|t| t.clean(cx)))\n                 }\n             };\n             let what_rustc_thinks =\n@@ -1127,7 +1121,7 @@ impl Clean<Item> for ty::AssocItem {\n                         None\n                     };\n \n-                    AssocTypeItem(bounds, ty.clean(cx))\n+                    AssocTypeItem(bounds, ty.map(|t| t.clean(cx)))\n                 } else {\n                     // FIXME: when could this happen? Associated items in inherent impls?\n                     let type_ = tcx.type_of(self.def_id).clean(cx);\n@@ -1859,7 +1853,7 @@ impl Clean<Item> for hir::Variant<'_> {\n fn clean_impl(impl_: &hir::Impl<'_>, hir_id: hir::HirId, cx: &mut DocContext<'_>) -> Vec<Item> {\n     let tcx = cx.tcx;\n     let mut ret = Vec::new();\n-    let trait_ = impl_.of_trait.clean(cx);\n+    let trait_ = impl_.of_trait.as_ref().map(|t| t.clean(cx));\n     let items =\n         impl_.items.iter().map(|ii| tcx.hir().impl_item(ii.id).clean(cx)).collect::<Vec<_>>();\n     let def_id = tcx.hir().local_def_id(hir_id);"}]}