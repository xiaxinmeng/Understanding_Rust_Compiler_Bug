{"sha": "1a43a0f63e0008787225abb6fb2baef97b6a39e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhNDNhMGY2M2UwMDA4Nzg3MjI1YWJiNmZiMmJhZWY5N2I2YTM5ZTA=", "commit": {"author": {"name": "Dmitry", "email": "mamhigtt@gmail.com", "date": "2020-08-09T13:33:47Z"}, "committer": {"name": "Dmitry", "email": "mamhigtt@gmail.com", "date": "2020-08-09T13:33:47Z"}, "message": "Added competition for unstable features\n\nAdded xtask for download unstable book from rust repository and codegene for it. Also small changes from lint", "tree": {"sha": "c5ee106cf8dd15f6df0bca041f36ec387d6b3214", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5ee106cf8dd15f6df0bca041f36ec387d6b3214"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a43a0f63e0008787225abb6fb2baef97b6a39e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a43a0f63e0008787225abb6fb2baef97b6a39e0", "html_url": "https://github.com/rust-lang/rust/commit/1a43a0f63e0008787225abb6fb2baef97b6a39e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a43a0f63e0008787225abb6fb2baef97b6a39e0/comments", "author": {"login": "godcodehunter", "id": 22272886, "node_id": "MDQ6VXNlcjIyMjcyODg2", "avatar_url": "https://avatars.githubusercontent.com/u/22272886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/godcodehunter", "html_url": "https://github.com/godcodehunter", "followers_url": "https://api.github.com/users/godcodehunter/followers", "following_url": "https://api.github.com/users/godcodehunter/following{/other_user}", "gists_url": "https://api.github.com/users/godcodehunter/gists{/gist_id}", "starred_url": "https://api.github.com/users/godcodehunter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/godcodehunter/subscriptions", "organizations_url": "https://api.github.com/users/godcodehunter/orgs", "repos_url": "https://api.github.com/users/godcodehunter/repos", "events_url": "https://api.github.com/users/godcodehunter/events{/privacy}", "received_events_url": "https://api.github.com/users/godcodehunter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "godcodehunter", "id": 22272886, "node_id": "MDQ6VXNlcjIyMjcyODg2", "avatar_url": "https://avatars.githubusercontent.com/u/22272886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/godcodehunter", "html_url": "https://github.com/godcodehunter", "followers_url": "https://api.github.com/users/godcodehunter/followers", "following_url": "https://api.github.com/users/godcodehunter/following{/other_user}", "gists_url": "https://api.github.com/users/godcodehunter/gists{/gist_id}", "starred_url": "https://api.github.com/users/godcodehunter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/godcodehunter/subscriptions", "organizations_url": "https://api.github.com/users/godcodehunter/orgs", "repos_url": "https://api.github.com/users/godcodehunter/repos", "events_url": "https://api.github.com/users/godcodehunter/events{/privacy}", "received_events_url": "https://api.github.com/users/godcodehunter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "020a40335bb2d45245d1164e4075e7f622084705", "url": "https://api.github.com/repos/rust-lang/rust/commits/020a40335bb2d45245d1164e4075e7f622084705", "html_url": "https://github.com/rust-lang/rust/commit/020a40335bb2d45245d1164e4075e7f622084705"}], "stats": {"total": 100, "additions": 90, "deletions": 10}, "files": [{"sha": "82b8440732fb9051c38019cf6207cd770f75c58d", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a43a0f63e0008787225abb6fb2baef97b6a39e0/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1a43a0f63e0008787225abb6fb2baef97b6a39e0/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=1a43a0f63e0008787225abb6fb2baef97b6a39e0", "patch": "@@ -4,7 +4,7 @@ members = [ \"crates/*\", \"xtask/\" ]\n [profile.dev]\n # disabling debug info speeds up builds a bunch,\n # and we don't rely on it for debugging that much.\n-debug = 0\n+debug = 2\n \n [profile.release]\n incremental = true"}, {"sha": "4fd6750399ced5270d7e58f7e86ea47859bd1bf4", "filename": "crates/ra_hir/src/has_source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a43a0f63e0008787225abb6fb2baef97b6a39e0/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a43a0f63e0008787225abb6fb2baef97b6a39e0/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fhas_source.rs?ref=1a43a0f63e0008787225abb6fb2baef97b6a39e0", "patch": "@@ -1,4 +1,4 @@\n-//! FIXME: write short doc here\n+//! Provides set of implementation for hir's objects that allows get back location in file. \n \n use either::Either;\n use hir_def::{"}, {"sha": "7b96902fbb878a80c936b1d2eaac8bb2dd52b3ce", "filename": "crates/ra_ide/src/completion.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a43a0f63e0008787225abb6fb2baef97b6a39e0/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a43a0f63e0008787225abb6fb2baef97b6a39e0/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion.rs?ref=1a43a0f63e0008787225abb6fb2baef97b6a39e0", "patch": "@@ -18,13 +18,17 @@ mod complete_unqualified_path;\n mod complete_postfix;\n mod complete_macro_in_item_position;\n mod complete_trait_impl;\n-\n+mod unstable_feature_descriptor;\n use ra_ide_db::RootDatabase;\n \n use crate::{\n     completion::{\n         completion_context::CompletionContext,\n         completion_item::{CompletionKind, Completions},\n+\n+        //TODO: rework \n+        unstable_feature_descriptor::UNSTABLE_FEATURE_DESCRIPTOR,\n+        complete_attribute::LintCompletion,\n     },\n     FilePosition,\n };"}, {"sha": "7a4274645187c50094fffa8f4aca49555fc12740", "filename": "crates/ra_ide/src/completion/complete_attribute.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1a43a0f63e0008787225abb6fb2baef97b6a39e0/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a43a0f63e0008787225abb6fb2baef97b6a39e0/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs?ref=1a43a0f63e0008787225abb6fb2baef97b6a39e0", "patch": "@@ -9,8 +9,11 @@ use rustc_hash::FxHashSet;\n use crate::completion::{\n     completion_context::CompletionContext,\n     completion_item::{CompletionItem, CompletionItemKind, CompletionKind, Completions},\n+    unstable_feature_descriptor\n };\n \n+use crate::completion::UNSTABLE_FEATURE_DESCRIPTOR;\n+\n pub(super) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n     let attribute = ctx.attribute_under_caret.as_ref()?;\n     match (attribute.path(), attribute.input()) {\n@@ -19,12 +22,17 @@ pub(super) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext)\n         {\n             complete_derive(acc, ctx, token_tree)\n         }\n+        (Some(path), Some(ast::AttrInput::TokenTree(token_tree)))\n+            if path.to_string() == \"feature\" =>\n+        {\n+            complete_lint(acc, ctx, token_tree, UNSTABLE_FEATURE_DESCRIPTOR);\n+        }\n         (Some(path), Some(ast::AttrInput::TokenTree(token_tree)))\n             if [\"allow\", \"warn\", \"deny\", \"forbid\"]\n                 .iter()\n                 .any(|lint_level| lint_level == &path.to_string()) =>\n         {\n-            complete_lint(acc, ctx, token_tree)\n+            complete_lint(acc, ctx, token_tree, DEFAULT_LINT_COMPLETIONS)\n         }\n         (_, Some(ast::AttrInput::TokenTree(_token_tree))) => {}\n         _ => complete_attribute_start(acc, ctx, attribute),\n@@ -87,7 +95,7 @@ const ATTRIBUTES: &[AttrCompletion] = &[\n     attr(r#\"deprecated = \"\u2026\"\"#, Some(\"deprecated\"), Some(r#\"deprecated = \"${0:reason}\"\"#)),\n     attr(\"derive(\u2026)\", Some(\"derive\"), Some(r#\"derive(${0:Debug})\"#)),\n     attr(r#\"doc = \"\u2026\"\"#, Some(\"doc\"), Some(r#\"doc = \"${0:docs}\"\"#)),\n-    attr(\"feature(\u2026)\", Some(\"feature\"), Some(\"feature(${0:flag})\")).prefer_inner(),\n+    attr(\"feature(\u2026)\", Some(\"feature\"), Some(\"feature(${0:lint})\")).prefer_inner(),\n     attr(\"forbid(\u2026)\", Some(\"forbid\"), Some(\"forbid(${0:lint})\")),\n     // FIXME: resolve through macro resolution?\n     attr(\"global_allocator\", None, None).prefer_inner(),\n@@ -164,9 +172,9 @@ fn complete_derive(acc: &mut Completions, ctx: &CompletionContext, derive_input:\n     }\n }\n \n-fn complete_lint(acc: &mut Completions, ctx: &CompletionContext, derive_input: ast::TokenTree) {\n+fn complete_lint(acc: &mut Completions, ctx: &CompletionContext, derive_input: ast::TokenTree, lints_completions: &[LintCompletion]) {\n     if let Ok(existing_lints) = parse_comma_sep_input(derive_input) {\n-        for lint_completion in DEFAULT_LINT_COMPLETIONS\n+        for lint_completion in lints_completions\n             .into_iter()\n             .filter(|completion| !existing_lints.contains(completion.label))\n         {\n@@ -250,9 +258,9 @@ const DEFAULT_DERIVE_COMPLETIONS: &[DeriveCompletion] = &[\n     DeriveCompletion { label: \"Ord\", dependencies: &[\"PartialOrd\", \"Eq\", \"PartialEq\"] },\n ];\n \n-struct LintCompletion {\n-    label: &'static str,\n-    description: &'static str,\n+pub struct LintCompletion {\n+    pub label: &'static str,\n+    pub description: &'static str,\n }\n \n #[rustfmt::skip]"}, {"sha": "ae7fc1cfb46dfb732fd83e293dfedfdf857f09da", "filename": "crates/ra_ide/src/completion/unstable_feature_descriptor.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a43a0f63e0008787225abb6fb2baef97b6a39e0/crates%2Fra_ide%2Fsrc%2Fcompletion%2Funstable_feature_descriptor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a43a0f63e0008787225abb6fb2baef97b6a39e0/crates%2Fra_ide%2Fsrc%2Fcompletion%2Funstable_feature_descriptor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Funstable_feature_descriptor.rs?ref=1a43a0f63e0008787225abb6fb2baef97b6a39e0"}, {"sha": "209caacc3d7381aeb8c041bf3798b5a7c69efae7", "filename": "xtask/src/codegen.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a43a0f63e0008787225abb6fb2baef97b6a39e0/xtask%2Fsrc%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a43a0f63e0008787225abb6fb2baef97b6a39e0/xtask%2Fsrc%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen.rs?ref=1a43a0f63e0008787225abb6fb2baef97b6a39e0", "patch": "@@ -9,6 +9,7 @@ mod gen_syntax;\n mod gen_parser_tests;\n mod gen_assists_docs;\n mod gen_feature_docs;\n+mod gen_unstable_future_descriptor;\n \n use std::{\n     fmt, mem,\n@@ -22,8 +23,12 @@ pub use self::{\n     gen_feature_docs::generate_feature_docs,\n     gen_parser_tests::generate_parser_tests,\n     gen_syntax::generate_syntax,\n+    gen_unstable_future_descriptor::generate_unstable_future_descriptor,\n };\n \n+// Directory used by xtask \n+const STORAGE: &str = \".xtask\";\n+\n const GRAMMAR_DIR: &str = \"crates/ra_parser/src/grammar\";\n const OK_INLINE_TESTS_DIR: &str = \"crates/ra_syntax/test_data/parser/inline/ok\";\n const ERR_INLINE_TESTS_DIR: &str = \"crates/ra_syntax/test_data/parser/inline/err\";\n@@ -35,6 +40,9 @@ const AST_TOKENS: &str = \"crates/ra_syntax/src/ast/generated/tokens.rs\";\n const ASSISTS_DIR: &str = \"crates/ra_assists/src/handlers\";\n const ASSISTS_TESTS: &str = \"crates/ra_assists/src/tests/generated.rs\";\n \n+const REPOSITORY_URL: &str = \"https://github.com/rust-lang/rust\";\n+const UNSTABLE_FEATURE: &str = \"crates/ra_ide/src/completion/unstable_feature_descriptor.rs\";\n+\n #[derive(Debug, PartialEq, Eq, Clone, Copy)]\n pub enum Mode {\n     Overwrite,"}, {"sha": "09c4f61f2ed8749a8afe105ff497e948e0ad5725", "filename": "xtask/src/codegen/gen_unstable_future_descriptor.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/1a43a0f63e0008787225abb6fb2baef97b6a39e0/xtask%2Fsrc%2Fcodegen%2Fgen_unstable_future_descriptor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a43a0f63e0008787225abb6fb2baef97b6a39e0/xtask%2Fsrc%2Fcodegen%2Fgen_unstable_future_descriptor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_unstable_future_descriptor.rs?ref=1a43a0f63e0008787225abb6fb2baef97b6a39e0", "patch": "@@ -0,0 +1,55 @@\n+//! Generates descriptors structure for unstable feature from Unstable Book\n+\n+use crate::{\n+    codegen::{self, project_root, Mode, Result},\n+};\n+use std::process::Command;\n+use std::fs;\n+use std::path::{Path, PathBuf};\n+use walkdir::{DirEntry, WalkDir};\n+use quote::{format_ident, quote};\n+use crate::codegen::update;\n+\n+pub fn generate_unstable_future_descriptor(mode: Mode) -> Result<()> {\n+    let path = project_root().join(codegen::STORAGE);\n+    fs::create_dir_all(path.clone())?;\n+\n+    Command::new(\"git\").current_dir(path.clone()).arg(\"init\").output()?;\n+    Command::new(\"git\").current_dir(path.clone()).args(&[\"remote\", \"add\", \"-f\", \"origin\", codegen::REPOSITORY_URL]).output()?;\n+    Command::new(\"git\").current_dir(path.clone()).args(&[\"sparse-checkout\", \"set\", \"/src/doc/unstable-book/src/\"]).output()?;\n+    Command::new(\"git\").current_dir(path.clone()).args(&[\"pull\", \"origin\", \"master\"]).output()?;\n+    //TODO: check git, and do pull \n+\n+    let src_dir = path.join(\"src/doc/unstable-book/src\");\n+    let files = WalkDir::new(src_dir.join(\"language-features\"))\n+        .into_iter()\n+        .chain(WalkDir::new(src_dir.join(\"library-features\")))\n+        .filter_map(|e| e.ok())\n+        .filter(|entry| {\n+            // Get all `.md ` files\n+            entry.file_type().is_file() && entry.path().extension().map(|ext| ext == \"md\").unwrap_or(false)\n+        })\n+        .collect::<Vec<_>>();\n+\n+    let definitions = files.iter().map(|entry| {\n+        let path = entry.path();\n+        let feature_ident = format!(\"{}\", path.file_stem().unwrap().to_str().unwrap().replace(\"-\", \"_\"));\n+        let doc = format!(\"{}\", std::fs::read_to_string(path).unwrap() );\n+       \n+        quote!{ LintCompletion { label: #feature_ident, description: #doc } }\n+    }).collect::<Vec<_>>();\n+    \n+    let ts = quote! {\n+        use crate::completion::LintCompletion;\n+\n+        const UNSTABLE_FEATURE_DESCRIPTOR:  &[LintCompletion] = &[\n+            #(#definitions),*\n+        ];\n+    };\n+    \n+    let destination = project_root().join(codegen::UNSTABLE_FEATURE);\n+    let contents = crate::reformat(ts.to_string())?;\n+    update(destination.as_path(), &contents, mode)?;\n+\n+    Ok(())\n+}\n\\ No newline at end of file"}, {"sha": "71caff2484c333203e0da689762096e066d21af1", "filename": "xtask/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a43a0f63e0008787225abb6fb2baef97b6a39e0/xtask%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a43a0f63e0008787225abb6fb2baef97b6a39e0/xtask%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmain.rs?ref=1a43a0f63e0008787225abb6fb2baef97b6a39e0", "patch": "@@ -76,6 +76,7 @@ FLAGS:\n         \"codegen\" => {\n             args.finish()?;\n             codegen::generate_syntax(Mode::Overwrite)?;\n+            codegen::generate_unstable_future_descriptor(Mode::Overwrite)?;\n             codegen::generate_parser_tests(Mode::Overwrite)?;\n             codegen::generate_assists_tests(Mode::Overwrite)?;\n             codegen::generate_assists_docs(Mode::Overwrite)?;"}]}