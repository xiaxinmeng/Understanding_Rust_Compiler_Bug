{"sha": "05eb2eeb61985f481982285ae7714d5cc0d7bdb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ZWIyZWViNjE5ODVmNDgxOTgyMjg1YWU3NzE0ZDVjYzBkN2JkYjc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-29T16:22:16Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-30T14:36:23Z"}, "message": "Adjust tests for inferenceGet more conservative about inference for now. Seems better to err on the side of being more correct rather than less. Fix a bug in typing index expressions that was exposed as a result, and add one type annotation that is not required. Delete some random tests that were relying on old behavior and don't seem to add anything anymore.", "tree": {"sha": "1b77cdd4a3331cc22f92d34c0f37d53c6cac2893", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b77cdd4a3331cc22f92d34c0f37d53c6cac2893"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05eb2eeb61985f481982285ae7714d5cc0d7bdb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05eb2eeb61985f481982285ae7714d5cc0d7bdb7", "html_url": "https://github.com/rust-lang/rust/commit/05eb2eeb61985f481982285ae7714d5cc0d7bdb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05eb2eeb61985f481982285ae7714d5cc0d7bdb7/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c197911c60ce7eaea53ecb357d0409d3e38ff914", "url": "https://api.github.com/repos/rust-lang/rust/commits/c197911c60ce7eaea53ecb357d0409d3e38ff914", "html_url": "https://github.com/rust-lang/rust/commit/c197911c60ce7eaea53ecb357d0409d3e38ff914"}], "stats": {"total": 123, "additions": 100, "deletions": 23}, "files": [{"sha": "0a001d475046a2e6b24383baf1413ffcf2938ea2", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05eb2eeb61985f481982285ae7714d5cc0d7bdb7/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eb2eeb61985f481982285ae7714d5cc0d7bdb7/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=05eb2eeb61985f481982285ae7714d5cc0d7bdb7", "patch": "@@ -1366,7 +1366,7 @@ pub fn get_dylib_dependency_formats(cdata: Cmd)\n         if spec.len() == 0 { continue }\n         let cnum = spec.split(':').nth(0).unwrap();\n         let link = spec.split(':').nth(1).unwrap();\n-        let cnum = cnum.parse().unwrap();\n+        let cnum: ast::CrateNum = cnum.parse().unwrap();\n         let cnum = match cdata.cnum_map.get(&cnum) {\n             Some(&n) => n,\n             None => panic!(\"didn't find a crate in the cnum_map\")"}, {"sha": "9670ebdb03c79a59c0ff3e820786d94af40d1593", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/05eb2eeb61985f481982285ae7714d5cc0d7bdb7/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eb2eeb61985f481982285ae7714d5cc0d7bdb7/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=05eb2eeb61985f481982285ae7714d5cc0d7bdb7", "patch": "@@ -736,10 +736,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let trait_def_id = match poly_trait_predicate.0.trait_ref.self_ty().sty {\n             ty::ty_projection(ref data) => data.trait_ref.def_id,\n             ty::ty_infer(ty::TyVar(_)) => {\n-                // TODO ignore potential ambiguity so that we can do\n-                // better inference, need to get our story\n-                // straight(er) here, I think.\n-                // candidates.ambiguous = true;\n+                // If the self-type is an inference variable, then it MAY wind up\n+                // being a projected type, so induce an ambiguity.\n+                //\n+                // FIXME(#20297) -- being strict about this can cause\n+                // inference failures with BorrowFrom, which is\n+                // unfortunate. Can we do better here?\n+                candidates.ambiguous = true;\n                 return;\n             }\n             _ => { return; }"}, {"sha": "9704439c468b2cf542702c59174326f94f0b2e3c", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/05eb2eeb61985f481982285ae7714d5cc0d7bdb7/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eb2eeb61985f481982285ae7714d5cc0d7bdb7/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=05eb2eeb61985f481982285ae7714d5cc0d7bdb7", "patch": "@@ -10,7 +10,8 @@\n \n use super::probe;\n \n-use check::{mod, FnCtxt, NoPreference, PreferMutLvalue, callee};\n+use check::{mod, FnCtxt, NoPreference, PreferMutLvalue, callee, demand};\n+use middle::mem_categorization::Typer;\n use middle::subst::{mod};\n use middle::traits;\n use middle::ty::{mod, Ty};\n@@ -540,7 +541,7 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n             // Don't retry the first one or we might infinite loop!\n             if i != 0 {\n                 match expr.node {\n-                    ast::ExprIndex(ref base_expr, _) => {\n+                    ast::ExprIndex(ref base_expr, ref index_expr) => {\n                         let mut base_adjustment =\n                             match self.fcx.inh.adjustments.borrow().get(&base_expr.id) {\n                                 Some(&ty::AdjustDerefRef(ref adr)) => (*adr).clone(),\n@@ -576,14 +577,22 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n                                 &**base_expr,\n                                 Some(&ty::AdjustDerefRef(base_adjustment.clone())));\n \n-                        check::try_index_step(\n+                        let result = check::try_index_step(\n                             self.fcx,\n                             MethodCall::expr(expr.id),\n                             *expr,\n                             &**base_expr,\n                             adjusted_base_ty,\n                             base_adjustment,\n                             PreferMutLvalue);\n+\n+                        if let Some((input_ty, return_ty)) = result {\n+                            let index_expr_ty = self.fcx.expr_ty(&**index_expr);\n+                            demand::suptype(self.fcx, index_expr.span, input_ty, index_expr_ty);\n+\n+                            let expr_ty = self.fcx.expr_ty(&**expr);\n+                            demand::suptype(self.fcx, expr.span, expr_ty, return_ty);\n+                        }\n                     }\n                     ast::ExprUnary(ast::UnDeref, ref base_expr) => {\n                         // if this is an overloaded deref, then re-evaluate with"}, {"sha": "7981fe3182712609fc01df0e8dabbd5b7e3516af", "filename": "src/test/compile-fail/associated-types-bound-failure.rs", "status": "renamed", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/05eb2eeb61985f481982285ae7714d5cc0d7bdb7/src%2Ftest%2Fcompile-fail%2Fassociated-types-bound-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eb2eeb61985f481982285ae7714d5cc0d7bdb7/src%2Ftest%2Fcompile-fail%2Fassociated-types-bound-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-bound-failure.rs?ref=05eb2eeb61985f481982285ae7714d5cc0d7bdb7", "patch": "@@ -8,25 +8,32 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test that we correctly infer that `E` must be `()` here.  This is\n-// known because there is just one impl that could apply where\n-// `Self=()`.\n+// Test equality constraints on associated types in a where clause.\n \n-pub trait FromError<E> {\n-    fn from_error(err: E) -> Self;\n+#![feature(associated_types)]\n+\n+pub trait ToInt {\n+    fn to_int(&self) -> int;\n+}\n+\n+pub trait GetToInt\n+{\n+    type R;\n+\n+    fn get(&self) -> <Self as GetToInt>::R;\n }\n \n-impl<E> FromError<E> for E {\n-    fn from_error(err: E) -> E {\n-        err\n-    }\n+fn foo<G>(g: G) -> int\n+    where G : GetToInt\n+{\n+    ToInt::to_int(&g.get()) //~ ERROR not implemented\n }\n \n-fn test() -> Result<(), ()> {\n-    Err(FromError::from_error(()))\n+fn bar<G : GetToInt>(g: G) -> int\n+    where G::R : ToInt\n+{\n+    ToInt::to_int(&g.get()) // OK\n }\n \n-fn main() {\n-    let result = (|| Err(FromError::from_error(())))();\n-    let foo: () = result.unwrap_or(());\n+pub fn main() {\n }", "previous_filename": "src/test/run-pass/multidispatch-infer-from-single-impl.rs"}, {"sha": "78502efdec520f17d762af200a251fa09e36e0ee", "filename": "src/test/compile-fail/issue-12028.rs", "status": "renamed", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/05eb2eeb61985f481982285ae7714d5cc0d7bdb7/src%2Ftest%2Fcompile-fail%2Fissue-12028.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eb2eeb61985f481982285ae7714d5cc0d7bdb7/src%2Ftest%2Fcompile-fail%2Fissue-12028.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12028.rs?ref=05eb2eeb61985f481982285ae7714d5cc0d7bdb7", "patch": "@@ -8,6 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Test an example where we fail to infer the type parameter H. This\n+// is because there is really nothing constraining it. At one time, we\n+// would infer based on the where clauses in scope, but that no longer\n+// works.\n+\n trait Hash<H> {\n     fn hash2(&self, hasher: &H) -> u64;\n }\n@@ -30,7 +35,7 @@ trait StreamHash<S: Stream, H: StreamHasher<S>>: Hash<H> {\n impl<S: Stream, H: StreamHasher<S>> Hash<H> for u8 {\n     fn hash2(&self, hasher: &H) -> u64 {\n         let mut stream = hasher.stream();\n-        self.input_stream(&mut stream);\n+        self.input_stream(&mut stream); //~ ERROR type annotations required\n         stream.result()\n     }\n }", "previous_filename": "src/test/run-pass/issue-12028.rs"}, {"sha": "db5119132cc3fe1574edbf82b44a0cdc3124c22c", "filename": "src/test/run-pass/associated-types-bound.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/05eb2eeb61985f481982285ae7714d5cc0d7bdb7/src%2Ftest%2Frun-pass%2Fassociated-types-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eb2eeb61985f481982285ae7714d5cc0d7bdb7/src%2Ftest%2Frun-pass%2Fassociated-types-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-bound.rs?ref=05eb2eeb61985f481982285ae7714d5cc0d7bdb7", "patch": "@@ -0,0 +1,53 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test equality constraints on associated types in a where clause.\n+\n+#![feature(associated_types)]\n+\n+pub trait ToInt {\n+    fn to_int(&self) -> int;\n+}\n+\n+impl ToInt for int {\n+    fn to_int(&self) -> int { *self }\n+}\n+\n+impl ToInt for uint {\n+    fn to_int(&self) -> int { *self as int }\n+}\n+\n+pub trait GetToInt\n+{\n+    type R : ToInt;\n+\n+    fn get(&self) -> <Self as GetToInt>::R;\n+}\n+\n+impl GetToInt for int {\n+    type R = int;\n+    fn get(&self) -> int { *self }\n+}\n+\n+impl GetToInt for uint {\n+    type R = uint;\n+    fn get(&self) -> uint { *self }\n+}\n+\n+fn foo<G>(g: G) -> int\n+    where G : GetToInt\n+{\n+    ToInt::to_int(&g.get())\n+}\n+\n+pub fn main() {\n+    assert_eq!(foo(22i), 22i);\n+    assert_eq!(foo(22u), 22i);\n+}"}]}