{"sha": "d403d82b0a0b1e95e2bd001c38a99edf95178a7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0MDNkODJiMGEwYjFlOTVlMmJkMDAxYzM4YTk5ZWRmOTUxNzhhN2I=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-27T06:16:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-27T06:16:42Z"}, "message": "Rollup merge of #49707 - steveklabnik:rustc-book, r=QuietMisdreavus\n\nAdd \"the Rustc book\"\n\nThis PR introduces a new book into the documentation, \"The rustc book\". We already have books for Cargo, and for Rustdoc, rustc should have some too. This book is focused on *users* of rustc, and provides a nice place to write documentation for users.\n\nI haven't put content here, but plan on scaffolding it out very soon, and wanted this PR open for a few discussions first. One of those is \"what exactly should said TOC be?\" I plan on having a proposed one up tomorrow, but figured I'd let people know to start thinking about it now.\n\nThe big one is that we also will want to put https://github.com/rust-lang-nursery/rustc-guide in-tree as well, and the naming is... tough. I'm proposing:\n\n* doc.rust-lang.org/rustc is \"The Rustc book\", to mirror the other tools' books.\n* doc.rust-lang.org/rustc-contribution is \"The Rustc contribution guide\", and contains that book\n\n@nikomatsakis et al, any thoughts on this? I'm not attached to it in particular, but had to put something together to get this discussion going. I think mirroring the other tools is a good idea for this work, but am not sure where exactly that leaves yours.\n\nFixes https://github.com/rust-docs/team/issues/11", "tree": {"sha": "9b376eb24cbe003512bf0947e896ae97522e2f17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b376eb24cbe003512bf0947e896ae97522e2f17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d403d82b0a0b1e95e2bd001c38a99edf95178a7b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa4sBKCRBK7hj4Ov3rIwAAdHIIAEKtHYVkak+A+XACEJ57jEu0\nuWfgoJcOUkPNiE/DD4SK9wCyve1f2Q6p0xEXSNLEjwHxI3qY2CqrSZKiKSirzTKK\nGVwKfKQQkG1FrvuU0GOOv4a53P3BH9gf2syjrZsbCJjrZZCfNIop2lYzzbo1xrzs\n4JrFdgYOf5CTYFm2ye6kYpWCuItD7mFKPw8jqwYVuVY6PVJZgXkviGPkFAdgWdif\nRhuUcECUrjJeg8JmAYSoB9u3dwS7W74tCwZDFyF/0mholaCD0VsRPBE+gS5zzEXF\nk4xpMvFHvw5ciVP7uaQQG2LtPsNyungBEbufjwkfq4LGd7yoyB4h0Qzh2D8C2gM=\n=ATSn\n-----END PGP SIGNATURE-----\n", "payload": "tree 9b376eb24cbe003512bf0947e896ae97522e2f17\nparent e05b78daa628ad88952d856c68cb5708434fa934\nparent 36475d947b4c39ec9dcaad137d51019c8b861918\nauthor kennytm <kennytm@gmail.com> 1524809802 +0800\ncommitter GitHub <noreply@github.com> 1524809802 +0800\n\nRollup merge of #49707 - steveklabnik:rustc-book, r=QuietMisdreavus\n\nAdd \"the Rustc book\"\n\nThis PR introduces a new book into the documentation, \"The rustc book\". We already have books for Cargo, and for Rustdoc, rustc should have some too. This book is focused on *users* of rustc, and provides a nice place to write documentation for users.\n\nI haven't put content here, but plan on scaffolding it out very soon, and wanted this PR open for a few discussions first. One of those is \"what exactly should said TOC be?\" I plan on having a proposed one up tomorrow, but figured I'd let people know to start thinking about it now.\n\nThe big one is that we also will want to put https://github.com/rust-lang-nursery/rustc-guide in-tree as well, and the naming is... tough. I'm proposing:\n\n* doc.rust-lang.org/rustc is \"The Rustc book\", to mirror the other tools' books.\n* doc.rust-lang.org/rustc-contribution is \"The Rustc contribution guide\", and contains that book\n\n@nikomatsakis et al, any thoughts on this? I'm not attached to it in particular, but had to put something together to get this discussion going. I think mirroring the other tools is a good idea for this work, but am not sure where exactly that leaves yours.\n\nFixes https://github.com/rust-docs/team/issues/11\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d403d82b0a0b1e95e2bd001c38a99edf95178a7b", "html_url": "https://github.com/rust-lang/rust/commit/d403d82b0a0b1e95e2bd001c38a99edf95178a7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e05b78daa628ad88952d856c68cb5708434fa934", "url": "https://api.github.com/repos/rust-lang/rust/commits/e05b78daa628ad88952d856c68cb5708434fa934", "html_url": "https://github.com/rust-lang/rust/commit/e05b78daa628ad88952d856c68cb5708434fa934"}, {"sha": "36475d947b4c39ec9dcaad137d51019c8b861918", "url": "https://api.github.com/repos/rust-lang/rust/commits/36475d947b4c39ec9dcaad137d51019c8b861918", "html_url": "https://github.com/rust-lang/rust/commit/36475d947b4c39ec9dcaad137d51019c8b861918"}], "stats": {"total": 2518, "additions": 2516, "deletions": 2}, "files": [{"sha": "08bb8ab481513bbf803f3a657442cef390c0907f", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=d403d82b0a0b1e95e2bd001c38a99edf95178a7b", "patch": "@@ -323,15 +323,15 @@ impl<'a> Builder<'a> {\n                 test::Cargotest, test::Cargo, test::Rls, test::ErrorIndex, test::Distcheck,\n                 test::RunMakeFullDeps,\n                 test::Nomicon, test::Reference, test::RustdocBook, test::RustByExample,\n-                test::TheBook, test::UnstableBook,\n+                test::TheBook, test::UnstableBook, test::RustcBook,\n                 test::Rustfmt, test::Miri, test::Clippy, test::RustdocJS, test::RustdocTheme,\n                 // Run run-make last, since these won't pass without make on Windows\n                 test::RunMake, test::RustdocUi),\n             Kind::Bench => describe!(test::Crate, test::CrateLibrustc),\n             Kind::Doc => describe!(doc::UnstableBook, doc::UnstableBookGen, doc::TheBook,\n                 doc::Standalone, doc::Std, doc::Test, doc::WhitelistedRustc, doc::Rustc,\n                 doc::ErrorIndex, doc::Nomicon, doc::Reference, doc::Rustdoc, doc::RustByExample,\n-                doc::CargoBook),\n+                doc::RustcBook, doc::CargoBook),\n             Kind::Dist => describe!(dist::Docs, dist::RustcDocs, dist::Mingw, dist::Rustc,\n                 dist::DebuggerScripts, dist::Std, dist::Analysis, dist::Src,\n                 dist::PlainSourceTarball, dist::Cargo, dist::Rls, dist::Rustfmt, dist::Extended,"}, {"sha": "16f4b29dcceefbeefc643e889246654c7a89464c", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=d403d82b0a0b1e95e2bd001c38a99edf95178a7b", "patch": "@@ -71,6 +71,7 @@ book!(\n     Nomicon, \"src/doc/nomicon\", \"nomicon\";\n     Reference, \"src/doc/reference\", \"reference\";\n     Rustdoc, \"src/doc/rustdoc\", \"rustdoc\";\n+    RustcBook, \"src/doc/rustc\", \"rustc\";\n     RustByExample, \"src/doc/rust-by-example\", \"rust-by-example\";\n );\n "}, {"sha": "e8c40dfdb0ad2bcfdc877b9a269f26f6aca760e6", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=d403d82b0a0b1e95e2bd001c38a99edf95178a7b", "patch": "@@ -1212,6 +1212,7 @@ test_book!(\n     Nomicon, \"src/doc/nomicon\", \"nomicon\", default=false;\n     Reference, \"src/doc/reference\", \"reference\", default=false;\n     RustdocBook, \"src/doc/rustdoc\", \"rustdoc\", default=true;\n+    RustcBook, \"src/doc/rustc\", \"rustc\", default=true;\n     RustByExample, \"src/doc/rust-by-example\", \"rust-by-example\", default=false;\n     TheBook, \"src/doc/book\", \"book\", default=false;\n     UnstableBook, \"src/doc/unstable-book\", \"unstable-book\", default=true;"}, {"sha": "3a4f51069fc3b7f1534b7a5505633f5cfc04f90f", "filename": "src/doc/index.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=d403d82b0a0b1e95e2bd001c38a99edf95178a7b", "patch": "@@ -43,6 +43,10 @@ Rust's standard library has [extensive API documentation](std/index.html),\n with explanations of how to use various things, as well as example code for\n accomplishing various tasks.\n \n+## The Rustc Book\n+\n+[The Rustc Book](rustc/index.html) describes the Rust compiler, `rustc`.\n+\n ## The Cargo Book\n \n [The Cargo Book](cargo/index.html) is a guide to Cargo, Rust's build tool and dependency manager."}, {"sha": "7585238efedfc33acdd9494b0269951aaf3909ec", "filename": "src/doc/rustc/.gitignore", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Frustc%2F.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Frustc%2F.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2F.gitignore?ref=d403d82b0a0b1e95e2bd001c38a99edf95178a7b", "patch": "@@ -0,0 +1 @@\n+book"}, {"sha": "8adc05c5137206ddefc284b601d47d8b85ab0dcb", "filename": "src/doc/rustc/book.toml", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Frustc%2Fbook.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Frustc%2Fbook.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fbook.toml?ref=d403d82b0a0b1e95e2bd001c38a99edf95178a7b", "patch": "@@ -0,0 +1,5 @@\n+[book]\n+authors = [\"The Rust Project Developers\"]\n+multilingual = false\n+src = \"src\"\n+title = \"The rustc book\""}, {"sha": "e4c0939fd46369d4ad9102b58dcdb4e59a4d9a02", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=d403d82b0a0b1e95e2bd001c38a99edf95178a7b", "patch": "@@ -0,0 +1,16 @@\n+# The Rustc Book\n+\n+- [What is rustc?](what-is-rustc.md)\n+- [Command-line arguments](command-line-arguments.md)\n+- [Lints](lints/index.md)\n+    - [Lint levels](lints/levels.md)\n+    - [Lint Groups](lints/groups.md)\n+    - [Lint listing](lints/listing/index.md)\n+        - [Allowed-by-default lints](lints/listing/allowed-by-default.md)\n+        - [Warn-by-default lints](lints/listing/warn-by-default.md)\n+        - [Deny-by-default lints](lints/listing/deny-by-default.md)\n+- [Codegen options](codegen-options/index.md)\n+- [Targets](targets/index.md)\n+    - [Built-in Targets](targets/built-in.md)\n+    - [Custom Targets](targets/custom.md)\n+- [Contributing to `rustc`](contributing.md)\n\\ No newline at end of file"}, {"sha": "eff09428902e8012669b88ddc87266e06894f238", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "added", "additions": 209, "deletions": 0, "changes": 209, "blob_url": "https://github.com/rust-lang/rust/blob/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=d403d82b0a0b1e95e2bd001c38a99edf95178a7b", "patch": "@@ -0,0 +1,209 @@\n+# Codegen options\n+\n+All of these options are passed to `rustc` via the `-C` flag, short for \"codegen.\" You can see\n+a version of this list for your exact compiler by running `rustc -C help`.\n+\n+## ar\n+\n+This option is deprecated and does nothing.\n+\n+## linker\n+\n+This flag lets you control which linker `rustc` invokes to link your code.\n+\n+## link-arg=val\n+\n+This flag lets you append a single extra argument to the linker invocation.\n+\n+\"Append\" is significant; you can pass this flag multiple times to add multiple arguments.\n+\n+## link-args\n+\n+This flag lets you append multiple extra arguments to the linker invocation. The\n+options should be separated by spaces.\n+\n+## link-dead-code\n+\n+Normally, the linker will remove dead code. This flag disables this behavior.\n+\n+An example of when this flag might be useful is when trying to construct code coverage\n+metrics.\n+\n+## lto\n+\n+This flag instructs LLVM to use [link time\n+optimizations](https://llvm.org/docs/LinkTimeOptimization.html).\n+\n+It takes one of two values, `thin` and `fat`. 'thin' LTO [is a new feature of\n+LLVM](http://blog.llvm.org/2016/06/thinlto-scalable-and-incremental-lto.html),\n+'fat' referring to the classic version of LTO.\n+\n+## target-cpu\n+\n+This instructs `rustc` to generate code specifically for a particular processor.\n+\n+You can run `rustc --print target-cpus` to see the valid options to pass\n+here. Additionally, `native` can be passed to use the processor of the host\n+machine.\n+\n+## target-feature\n+\n+Individual targets will support different features; this flag lets you control\n+enabling or disabling a feature.\n+\n+To see the valid options and an example of use, run `rustc --print\n+target-features`.\n+\n+## passes\n+\n+This flag can be used to add extra LLVM passes to the compilation.\n+\n+The list must be separated by spaces.\n+\n+## llvm-args\n+\n+This flag can be used to pass a list of arguments directly to LLVM.\n+\n+The list must be separated by spaces.\n+\n+## save-temps\n+\n+`rustc` will generate temporary files during compilation; normally it will\n+delete them after it's done with its work. This option will cause them to be\n+preserved instead of removed.\n+\n+## rpath\n+\n+This option allows you to set the value of\n+[`rpath`](https://en.wikipedia.org/wiki/Rpath).\n+\n+## overflow-checks\n+\n+This flag allows you to control the behavior of integer overflow. This flag\n+can be passed many options:\n+\n+* To turn overflow checks on: `y`, `yes`, or `on`.\n+* To turn overflow checks off: `n`, `no`, or `off`.\n+\n+## no-prepopulate-passes\n+\n+The pass manager comes pre-populated with a list of passes; this flag\n+ensures that list is empty.\n+\n+## no-vectorize-loops\n+\n+By default, `rustc` will attempt to [vectorize\n+loops](https://llvm.org/docs/Vectorizers.html#the-loop-vectorizer). This\n+flag will turn that behavior off.\n+\n+## no-vectorize-slp\n+\n+By default, `rustc` will attempt to vectorize loops using [superword-level\n+parallelism](https://llvm.org/docs/Vectorizers.html#the-slp-vectorizer). This\n+flag will turn that behavior off.\n+\n+## soft-float\n+\n+This option will make `rustc` generate code using \"soft floats.\" By default,\n+a lot of hardware supports floating point instructions, and so the code generated\n+will take advantage of this. \"soft floats\" emulate floating point instructions\n+in software.\n+\n+## prefer-dynamic\n+\n+By default, `rustc` prefers to statically link dependencies. This option will\n+make it use dynamic linking instead.\n+\n+## no-integrated-as\n+\n+LLVM comes with an internal assembler; this option will let you use an\n+external assembler instead.\n+\n+## no-redzone\n+\n+This flag allows you to disable [the\n+red zone](https://en.wikipedia.org/wiki/Red_zone_\\(computing\\)). This flag can\n+be passed many options:\n+\n+* To enable the red zone: `y`, `yes`, or `on`.\n+* To disable it: `n`, `no`, or `off`.\n+\n+## relocation-model\n+\n+This option lets you choose which relocation model to use.\n+\n+To find the valid options for this flag, run `rustc --print relocation-models`.\n+\n+## code-model=val\n+\n+This option lets you choose which code model to use.\n+\n+To find the valid options for this flag, run `rustc --print code-models`.\n+\n+## metadata\n+\n+This option allows you to control the metadata used for symbol mangling.\n+\n+## extra-filename\n+\n+This option allows you to put extra data in each output filename.\n+\n+## codegen-units\n+\n+This flag lets you control how many threads are used when doing\n+code generation.\n+\n+Increasing paralellism may speed up compile times, but may also\n+produce slower code.\n+\n+## remark\n+\n+This flag lets you print remarks for these optimization passes.\n+\n+The list of passes should be separated by spaces.\n+\n+`all` will remark on every pass.\n+\n+## no-stack-check\n+\n+This option is deprecated and does nothing.\n+\n+## debuginfo\n+\n+This flag lets you control debug information:\n+\n+* `0`: no debug info at all\n+* `1`: line tables only\n+* `2`: full debug info\n+\n+## opt-level\n+\n+This flag lets you control the optimization level.\n+\n+* `0`: no optimizations\n+* `1`: basic optimizations\n+* `2`: some optimizations\n+* `3`: all optimizations\n+* `s`: optimize for binary size\n+* `z`: optimize for binary size, but also turn off loop vectorization.\n+\n+## debug-assertions\n+\n+This flag lets you turn `cfg(debug_assertions)` on or off.\n+\n+## inline-threshold\n+\n+This option lets you set the threshold for inlining a function.\n+\n+The default is 225.\n+\n+## panic\n+\n+This option lets you control what happens when the code panics.\n+\n+* `abort`: terminate the process upon panic\n+* `unwind`: unwind the stack upon panic\n+\n+## incremental\n+\n+This flag allows you to enable incremental compilation."}, {"sha": "e2b001832fe31f5e6872e18961168123e5890a74", "filename": "src/doc/rustc/src/command-line-arguments.md", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md?ref=d403d82b0a0b1e95e2bd001c38a99edf95178a7b", "patch": "@@ -0,0 +1,116 @@\n+# Command-line arguments\n+\n+Here's a list of command-line arguments to `rustc` and what they do.\n+\n+## `-h`/`--help`: get help\n+\n+This flag will print out help information for `rustc`.\n+\n+## `--cfg`: configure the compilation environment\n+\n+This flag can turn on or off various `#[cfg]` settings.\n+\n+## `-L`: add a directory to the library search path\n+\n+When looking for external crates, a directory passed to this flag will be searched.\n+\n+## `-l`: link the generated crate to a native library\n+\n+This flag allows you to specify linking to a specific native library when building\n+a crate.\n+\n+## `--crate-type`: a list of types of crates for the compiler to emit\n+\n+This instructs `rustc` on which crate type to build.\n+\n+## `--crate-name`: specify the name of the crate being built\n+\n+This informs `rustc` of the name of your crate.\n+\n+## `--emit`: emit output other than a crate\n+\n+Instead of producing a crate, this flag can print out things like the assembly or LLVM-IR.\n+\n+## `--print`: print compiler information\n+\n+This flag prints out various information about the compiler.\n+\n+## `-g`: include debug information\n+\n+A synonym for `-C debug-level=2`.\n+\n+## `-O`: optimize your code\n+\n+A synonym for `-C opt-level=2`.\n+\n+## `-o`: filename of the output\n+\n+This flag controls the output filename.\n+\n+## `--out-dir`: directory to write the output in\n+\n+The outputted crate will be written to this directory.\n+\n+## `--explain`: provide a detailed explanation of an error message\n+\n+Each error of `rustc`'s comes with an error code; this will print\n+out a longer explanation of a given error.\n+\n+## `--test`: build a test harness\n+\n+When compiling this crate, `rustc` will ignore your `main` function\n+and instead produce a test harness.\n+\n+## `--target`: select a target triple to build\n+\n+This controls which [target](targets/index.html) to produce.\n+\n+## `-W`: set lint warnings\n+\n+This flag will set which lints should be set to the [warn level](lints/levels.html#warn).\n+\n+## `-A`: set lint allowed\n+\n+This flag will set which lints should be set to the [allow level](lints/levels.html#allow).\n+\n+## `-D`: set lint denied\n+\n+This flag will set which lints should be set to the [deny level](lints/levels.html#deny).\n+\n+## `-F`: set lint forbidden\n+\n+This flag will set which lints should be set to the [forbid level](lints/levels.html#forbid).\n+\n+## `--cap-lints`: set the most restrictive lint level\n+\n+This flag lets you 'cap' lints, for more, [see here](lints/levels.html#capping-lints).\n+\n+## `-C`/`--codegen`: code generation options\n+\n+This flag will allow you to set [codegen options](codegen-options/index.html).\n+\n+## `-V`/`--version`: print a version\n+\n+This flag will print out `rustc`'s version.\n+\n+## `-v`/`--verbose`: use verbose output\n+\n+This flag, when combined with other flags, makes them produce extra output.\n+\n+## `--extern`: specify where an external library is located\n+\n+This flag allows you to pass the name and location of an external crate that will\n+be linked into the crate you're buildling.\n+\n+## `--sysroot`: Override the system root\n+\n+The \"sysroot\" is where `rustc` looks for the crates that come with the Rust\n+distribution; this flag allows that to be overridden.\n+\n+## `--error-format`: control how errors are produced\n+\n+This flag lets you control the format of errors.\n+\n+## `--color`: configure coloring of output\n+\n+This flag lets you control color settings of the output."}, {"sha": "fcb8e6b27dbf0d9d56522df277ee0b20778eb42d", "filename": "src/doc/rustc/src/contributing.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Frustc%2Fsrc%2Fcontributing.md", "raw_url": "https://github.com/rust-lang/rust/raw/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Frustc%2Fsrc%2Fcontributing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcontributing.md?ref=d403d82b0a0b1e95e2bd001c38a99edf95178a7b", "patch": "@@ -0,0 +1,6 @@\n+# Contributing to rustc\n+\n+We'd love to have your help improving `rustc`! To that end, we've written [a\n+whole book](https://rust-lang-nursery.github.io/rustc-guide/) on its\n+internals, how it works, and how to get started working on it. To learn\n+more, you'll want to check that out.\n\\ No newline at end of file"}, {"sha": "46b717f3387d2ce95cb4c0d4d7f25ed0c1deac78", "filename": "src/doc/rustc/src/lints/groups.md", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Fgroups.md", "raw_url": "https://github.com/rust-lang/rust/raw/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Fgroups.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Fgroups.md?ref=d403d82b0a0b1e95e2bd001c38a99edf95178a7b", "patch": "@@ -0,0 +1,29 @@\n+# Lint Groups\n+\n+`rustc` has the concept of a \"lint group\", where you can toggle several warnings\n+through one name.\n+\n+For example, the `nonstandard-style` lint sets `non-camel-case-types`,\n+`non-snake-case`, and `non-upper-case-globals` all at once. So these are\n+equivalent:\n+\n+```bash\n+$ rustc -D nonstandard-style\n+$ rustc -D non-camel-case-types -D non-snake-case -D non-upper-case-globals\n+```\n+\n+Here's a list of each lint group, and the lints that they are made up of:\n+\n+| group               | description                                                   | lints                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |\n+|---------------------|---------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n+| nonstandard-style   | Violation of standard naming conventions                      | non-camel-case-types, non-snake-case, non-upper-case-globals                                                                                                                                                                                                                                                                                                                                                                                                                           |\n+| warnings            | all lints that would be issuing warnings                      | all lints that would be issuing warnings                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n+| edition-2018        | Lints that will be turned into errors in Rust 2018            | tyvar-behind-raw-pointer                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n+| rust-2018-idioms    | Lints to nudge you toward idiomatic features of Rust 2018     | bare-trait-object, unreachable-pub                                                                                                                                                                                                                                                                                                                                                                                                                                                     |\n+| unused              | These lints detect things being declared but not used         | unused-imports, unused-variables, unused-assignments, dead-code, unused-mut, unreachable-code, unreachable-patterns, unused-must-use, unused-unsafe, path-statements, unused-attributes, unused-macros, unused-allocation, unused-doc-comment, unused-extern-crates, unused-features, unused-parens                                                                                                                                                                                    |\n+| future-incompatible | Lints that detect code that has future-compatibility problems | private-in-public, pub-use-of-private-extern-crate, patterns-in-fns-without-body, safe-extern-statics, invalid-type-param-default, legacy-directory-ownership, legacy-imports, legacy-constructor-visibility, missing-fragment-specifier, illegal-floating-point-literal-pattern, anonymous-parameters, parenthesized-params-in-types-and-modules, late-bound-lifetime-arguments, safe-packed-borrows, incoherent-fundamental-impls, tyvar-behind-raw-pointer, unstable-name-collision |\n+\n+Additionally, there's a `bad-style` lint group that's a deprecated alias for `nonstandard-style`.\n+\n+Finally, you can also see the table above by invoking `rustc -W help`. This will give you the exact values for the specific\n+compiler you have installed.\n\\ No newline at end of file"}, {"sha": "bf345a24389d2bebc9d62b6777e64cf53a231e01", "filename": "src/doc/rustc/src/lints/index.md", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Findex.md?ref=d403d82b0a0b1e95e2bd001c38a99edf95178a7b", "patch": "@@ -0,0 +1,28 @@\n+# Lints\n+\n+In software, a \"lint\" is a tool used to help improve your source code. The\n+Rust compiler contains a number of lints, and when it compiles your code, it will\n+also run the lints. These lints may produce a warning, an error, or nothing at all,\n+depending on how you've configured things.\n+\n+Here's a small example:\n+\n+```bash\n+$ cat main.rs\n+fn main() {\n+    let x = 5;\n+}\n+> rustc main.rs\n+warning: unused variable: `x`\n+ --> main.rs:2:9\n+  |\n+2 |     let x = 5;\n+  |         ^\n+  |\n+  = note: #[warn(unused_variables)] on by default\n+  = note: to avoid this warning, consider using `_x` instead\n+```\n+\n+This is the `unused_variables` lint, and it tells you that you've introduced\n+a variable that you don't use in your code. That's not *wrong*, so it's not\n+an error, but it might be a bug, so you get a warning."}, {"sha": "19bb6707d2285ffe357011e4a6f4796d6703a60b", "filename": "src/doc/rustc/src/lints/levels.md", "status": "added", "additions": 252, "deletions": 0, "changes": 252, "blob_url": "https://github.com/rust-lang/rust/blob/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md", "raw_url": "https://github.com/rust-lang/rust/raw/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md?ref=d403d82b0a0b1e95e2bd001c38a99edf95178a7b", "patch": "@@ -0,0 +1,252 @@\n+# Lint levels\n+\n+In `rustc`, lints are divided into four *levels*:\n+\n+1. allow\n+2. warn\n+3. deny\n+4. forbid\n+\n+Each lint has a default level (explained in the lint listing later in this\n+chapter), and the compiler has a default warning level. First, let's explain\n+what these levels mean, and then we'll talk about configuration.\n+\n+## allow\n+\n+These lints exist, but by default, do nothing. For example, consider this\n+source:\n+\n+```rust\n+pub fn foo() {}\n+```\n+\n+Compiling this file produces no warnings:\n+\n+```bash\n+$ rustc lib.rs --crate-type=lib\n+$\n+```\n+\n+But this code violates the `missing_docs` lint.\n+\n+These lints exist mostly to be manually turned on via configuration, as we'll\n+talk about later in this section.\n+\n+## warn\n+\n+The 'warn' lint level will produce a warning if you violate the lint. For example,\n+this code runs afoul of the `unused_variable` lint:\n+\n+```rust\n+pub fn foo() {\n+    let x = 5;\n+}\n+```\n+\n+This will produce this warning:\n+\n+```console\n+$ rustc lib.rs --crate-type=lib\n+warning: unused variable: `x`\n+ --> lib.rs:2:9\n+  |\n+2 |     let x = 5;\n+  |         ^\n+  |\n+  = note: #[warn(unused_variables)] on by default\n+  = note: to avoid this warning, consider using `_x` instead\n+```\n+\n+## deny\n+\n+A 'deny' lint produces an error if you violate it. For example, this code\n+runs into the `exceeding_bitshifts` lint.\n+\n+```rust,ignore\n+fn main() {\n+    100u8 << 10;\n+}\n+```\n+\n+```bash\n+> rustc main.rs\n+error: bitshift exceeds the type's number of bits\n+ --> main.rs:2:13\n+  |\n+2 |     100u8 << 10;\n+  |     ^^^^^^^^^^^\n+  |\n+  = note: #[deny(exceeding_bitshifts)] on by default\n+```\n+\n+What's the difference between an error from a lint and a regular old error?\n+Lints are configurable via levels, so in a similar way to 'allow' lints,\n+warnings that are 'deny' by default let you allow them. Similarly, you may\n+wish to set up a lint that is `warn` by default to produce an error instead.\n+This lint level gives you that.\n+\n+## forbid\n+\n+'forbid' is a special lint level that's stronger than 'deny'. It's the same\n+as 'deny' in that a lint at this level will produce an error, but unlike the\n+'deny' level, the 'forbid' level can not be overridden to be anything lower\n+than an error.\n+\n+## Configuring warning levels\n+\n+Remember our `missing_docs` example from the 'allow' lint level?\n+\n+```bash\n+$ cat lib.rs\n+pub fn foo() {}\n+$ rustc lib.rs --crate-type=lib\n+$\n+```\n+\n+We can configure this lint to operate at a higher level, both with\n+compiler flags, as well as with an attribute in the source code.\n+\n+You can also \"cap\" lints so that the compiler can choose to ignore\n+certain lint levels. We'll talk about that last.\n+\n+### Via compiler flag\n+\n+The `-A`, `-W`, `-D`, and `-F` flags let you turn one or more lints\n+into allowed, warning, deny, or forbid levels, like this:\n+\n+```bash\n+$ rustc lib.rs --crate-type=lib -W missing-docs\n+warning: missing documentation for crate\n+ --> lib.rs:1:1\n+  |\n+1 | pub fn foo() {}\n+  | ^^^^^^^^^^^^\n+  |\n+  = note: requested on the command line with `-W missing-docs`\n+\n+warning: missing documentation for a function\n+ --> lib.rs:1:1\n+  |\n+1 | pub fn foo() {}\n+  | ^^^^^^^^^^^^\n+> rustc lib.rs --crate-type=lib -D missing-docs\n+error: missing documentation for crate\n+ --> lib.rs:1:1\n+  |\n+1 | pub fn foo() {}\n+  | ^^^^^^^^^^^^\n+  |\n+  = note: requested on the command line with `-D missing-docs`\n+\n+error: missing documentation for a function\n+ --> lib.rs:1:1\n+  |\n+1 | pub fn foo() {}\n+  | ^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+```\n+\n+You can also pass each flag more than once for changing multiple lints:\n+\n+```bash\n+rustc lib.rs --crate-type=lib -D missing-docs -D unused-variables\n+```\n+\n+And of course, you can mix these four flags together:\n+\n+```bash\n+rustc lib.rs --crate-type=lib -D missing-docs -A unused-variables\n+```\n+\n+### Via an attribute\n+\n+You can also modify the lint level with a crate-wide attribute:\n+\n+```bash\n+> cat lib.rs\n+#![warn(missing_docs)]\n+\n+pub fn foo() {}\n+$ rustc lib.rs --crate-type=lib\n+warning: missing documentation for crate\n+ --> lib.rs:1:1\n+  |\n+1 | / #![warn(missing_docs)]\n+2 | |\n+3 | | pub fn foo() {}\n+  | |_______________^\n+  |\n+note: lint level defined here\n+ --> lib.rs:1:9\n+  |\n+1 | #![warn(missing_docs)]\n+  |         ^^^^^^^^^^^^\n+\n+warning: missing documentation for a function\n+ --> lib.rs:3:1\n+  |\n+3 | pub fn foo() {}\n+  | ^^^^^^^^^^^^\n+```\n+\n+All four, `warn`, `allow`, `deny`, and `forbid` all work this way.\n+\n+You can also pass in multiple lints per attribute:\n+\n+```rust\n+#![warn(missing_docs, unused_variables)]\n+\n+pub fn foo() {}\n+```\n+\n+And use multiple attributes together:\n+\n+```rust\n+#![warn(missing_docs)]\n+#![deny(unused_variables)]\n+\n+pub fn foo() {}\n+```\n+\n+### Capping lints\n+\n+`rustc` supports a flag, `--cap-lints LEVEL` that sets the \"lint cap level.\"\n+This is the maximum level for all lints. So for example, if we take our\n+code sample from the \"deny\" lint level above:\n+\n+```rust,ignore\n+fn main() {\n+    100u8 << 10;\n+}\n+```\n+\n+And we compile it, capping lints to warn:\n+\n+```bash\n+$ rustc lib.rs --cap-lints warn\n+warning: bitshift exceeds the type's number of bits\n+ --> lib.rs:2:5\n+  |\n+2 |     100u8 << 10;\n+  |     ^^^^^^^^^^^\n+  |\n+  = note: #[warn(exceeding_bitshifts)] on by default\n+\n+warning: this expression will panic at run-time\n+ --> lib.rs:2:5\n+  |\n+2 |     100u8 << 10;\n+  |     ^^^^^^^^^^^ attempt to shift left with overflow\n+```\n+\n+It now only warns, rather than errors. We can go further and allow all lints:\n+\n+```bash\n+$ rustc lib.rs --cap-lints allow\n+$\n+```\n+\n+This feature is used heavily by Cargo; it will pass `--cap-lints allow` when\n+compiling your dependencies, so that if they have any warnings, they do not\n+pollute the output of your build."}, {"sha": "e1a3f96a6fe6e320c3001a12b8a9d579f45a8d14", "filename": "src/doc/rustc/src/lints/listing/allowed-by-default.md", "status": "added", "additions": 453, "deletions": 0, "changes": 453, "blob_url": "https://github.com/rust-lang/rust/blob/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fallowed-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fallowed-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fallowed-by-default.md?ref=d403d82b0a0b1e95e2bd001c38a99edf95178a7b", "patch": "@@ -0,0 +1,453 @@\n+# Allowed-by-default lints\n+\n+These lints are all set to the 'allow' level by default. As such, they won't show up\n+unless you set them to a higher lint level with a flag or attribute.\n+\n+## anonymous-parameters\n+\n+This lint detects anonymous parameters. Some example code that triggers this lint:\n+\n+```rust\n+trait Foo {\n+    fn foo(usize);\n+}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: use of deprecated anonymous parameter\n+ --> src/lib.rs:5:11\n+  |\n+5 |     fn foo(usize);\n+  |           ^\n+  |\n+  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+  = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n+```\n+\n+This syntax is mostly a historical accident, and can be worked around quite\n+easily:\n+\n+```rust\n+trait Foo {\n+    fn foo(_: usize);\n+}\n+```\n+\n+## bare-trait-object\n+\n+This lint suggests using `dyn Trait` for trait objects. Some example code\n+that triggers this lint:\n+\n+```rust\n+#![feature(dyn_trait)]\n+\n+trait Trait { }\n+\n+fn takes_trait_object(_: Box<Trait>) {\n+}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: trait objects without an explicit `dyn` are deprecated\n+ --> src/lib.rs:7:30\n+  |\n+7 | fn takes_trait_object(_: Box<Trait>) {\n+  |                              ^^^^^ help: use `dyn`: `dyn Trait`\n+  |\n+```\n+\n+To fix it, do as the help message suggests:\n+\n+```rust\n+#![feature(dyn_trait)]\n+#![deny(bare_trait_object)]\n+\n+trait Trait { }\n+\n+fn takes_trait_object(_: Box<dyn Trait>) {\n+}\n+```\n+\n+## box-pointers\n+\n+This lints use of the Box type. Some example code that triggers this lint:\n+\n+```rust\n+struct Foo {\n+    x: Box<isize>,\n+}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: type uses owned (Box type) pointers: std::boxed::Box<isize>\n+ --> src/lib.rs:6:5\n+  |\n+6 |     x: Box<isize> //~ ERROR type uses owned\n+  |     ^^^^^^^^^^^^^\n+  |\n+```\n+\n+This lint is mostly historical, and not particularly useful. `Box<T>` used to\n+be built into the language, and the only way to do heap allocation. Today's\n+Rust can call into other allocators, etc.\n+\n+## elided-lifetime-in-path\n+\n+This lint detects the use of hidden lifetime parameters. Some example code\n+that triggers this lint:\n+\n+```rust\n+struct Foo<'a> {\n+    x: &'a u32\n+}\n+\n+fn foo(x: &Foo) {\n+}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: hidden lifetime parameters are deprecated, try `Foo<'_>`\n+ --> src/lib.rs:5:12\n+  |\n+5 | fn foo(x: &Foo) {\n+  |            ^^^\n+  |\n+```\n+\n+Lifetime elision elides this lifetime, but that is being deprecated.\n+\n+## missing-copy-implementations\n+\n+This lint detects potentially-forgotten implementations of `Copy`. Some\n+example code that triggers this lint:\n+\n+```rust\n+pub struct Foo {\n+    pub field: i32\n+}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: type could implement `Copy`; consider adding `impl Copy`\n+ --> src/main.rs:3:1\n+  |\n+3 | / pub struct Foo { //~ ERROR type could implement `Copy`; consider adding `impl Copy`\n+4 | |     pub field: i32\n+5 | | }\n+  | |_^\n+  |\n+```\n+\n+You can fix the lint by deriving `Copy`.\n+\n+This lint is set to 'allow' because this code isn't bad; it's common to write\n+newtypes like this specifically so that a `Copy` type is no longer `Copy`.\n+\n+## missing-debug-implementations\n+\n+This lint detects missing implementations of `fmt::Debug`. Some example code\n+that triggers this lint:\n+\n+```rust\n+pub struct Foo;\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: type does not implement `fmt::Debug`; consider adding #[derive(Debug)] or a manual implementation\n+ --> src/main.rs:3:1\n+  |\n+3 | pub struct Foo;\n+  | ^^^^^^^^^^^^^^^\n+  |\n+```\n+\n+You can fix the lint by deriving `Debug`.\n+\n+## missing-docs\n+\n+This lint detects missing documentation for public items. Some example code\n+that triggers this lint:\n+\n+```rust\n+pub fn foo() {}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: missing documentation for crate\n+ --> src/main.rs:1:1\n+  |\n+1 | / #![deny(missing_docs)]\n+2 | |\n+3 | | pub fn foo() {}\n+4 | |\n+5 | | fn main() {}\n+  | |____________^\n+  |\n+\n+error: missing documentation for a function\n+ --> src/main.rs:3:1\n+  |\n+3 | pub fn foo() {}\n+  | ^^^^^^^^^^^^\n+\n+```\n+\n+To fix the lint, add documentation to all items.\n+\n+## single-use-lifetime\n+\n+This lint detects lifetimes that are only used once. Some example code that\n+triggers this lint:\n+\n+```rust\n+struct Foo<'x> {\n+    x: &'x u32\n+}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: lifetime name `'x` only used once\n+ --> src/main.rs:3:12\n+  |\n+3 | struct Foo<'x> {\n+  |            ^^\n+  |\n+```\n+\n+## trivial-casts\n+\n+This lint detects trivial casts which could be removed. Some example code\n+that triggers this lint:\n+\n+```rust\n+let x: &u32 = &42;\n+let _ = x as *const u32;\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: trivial cast: `&u32` as `*const u32`. Cast can be replaced by coercion, this might require type ascription or a temporary variable\n+ --> src/main.rs:5:13\n+  |\n+5 |     let _ = x as *const u32;\n+  |             ^^^^^^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> src/main.rs:1:9\n+  |\n+1 | #![deny(trivial_casts)]\n+  |         ^^^^^^^^^^^^^\n+```\n+\n+## trivial-numeric-casts\n+\n+This lint detects trivial casts of numeric types which could be removed. Some\n+example code that triggers this lint:\n+\n+```rust\n+let x = 42i32 as i32;\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: trivial numeric cast: `i32` as `i32`. Cast can be replaced by coercion, this might require type ascription or a temporary variable\n+ --> src/main.rs:4:13\n+  |\n+4 |     let x = 42i32 as i32;\n+  |             ^^^^^^^^^^^^\n+  |\n+```\n+\n+## unreachable-pub\n+\n+This lint triggers for `pub` items not reachable from the crate root. Some\n+example code that triggers this lint:\n+\n+```rust\n+mod foo {\n+    pub mod bar {\n+        \n+    }\n+}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: unreachable `pub` item\n+ --> src/main.rs:4:5\n+  |\n+4 |     pub mod bar {\n+  |     ---^^^^^^^^\n+  |     |\n+  |     help: consider restricting its visibility: `pub(crate)`\n+  |\n+```\n+\n+## unsafe-code\n+\n+This lint catches usage of `unsafe` code. Some example code that triggers this lint:\n+\n+```rust\n+fn main() {\n+    unsafe {\n+\n+    }\n+}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: usage of an `unsafe` block\n+ --> src/main.rs:4:5\n+  |\n+4 | /     unsafe {\n+5 | |         \n+6 | |     }\n+  | |_____^\n+  |\n+```\n+\n+## unstable-features\n+\n+This lint is deprecated and no longer used.\n+\n+## unused-extern-crates\n+\n+This lint guards against `extern crate` items that are never used. Some\n+example code that triggers this lint:\n+\n+```rust,ignore\n+extern crate semver;\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: unused extern crate\n+ --> src/main.rs:3:1\n+  |\n+3 | extern crate semver;\n+  | ^^^^^^^^^^^^^^^^^^^^\n+  |\n+```\n+\n+## unused-import-braces\n+\n+This lint catches unnecessary braces around an imported item. Some example\n+code that triggers this lint:\n+\n+```rust\n+use test::{A};\n+\n+pub mod test {\n+    pub struct A;\n+}\n+# fn main() {}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: braces around A is unnecessary\n+ --> src/main.rs:3:1\n+  |\n+3 | use test::{A};\n+  | ^^^^^^^^^^^^^^\n+  |\n+```\n+\n+To fix it, `use test::A;`\n+\n+## unused-qualifications\n+\n+This lint detects unnecessarily qualified names. Some example code that triggers this lint:\n+\n+```rust\n+mod foo {\n+    pub fn bar() {}\n+}\n+\n+fn main() {\n+    use foo::bar;\n+    foo::bar();\n+}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: unnecessary qualification\n+ --> src/main.rs:9:5\n+  |\n+9 |     foo::bar();\n+  |     ^^^^^^^^\n+  |\n+```\n+\n+You can call `bar()` directly, without the `foo::`.\n+\n+## unused-results\n+\n+This lint checks for the unused result of an expression in a statement. Some\n+example code that triggers this lint:\n+\n+```rust,no_run\n+fn foo<T>() -> T { panic!() }\n+\n+fn main() {\n+    foo::<usize>();\n+}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: unused result\n+ --> src/main.rs:6:5\n+  |\n+6 |     foo::<usize>();\n+  |     ^^^^^^^^^^^^^^^\n+  |\n+```\n+\n+## variant-size-differences\n+\n+This lint detects enums with widely varying variant sizes. Some example code that triggers this lint:\n+\n+```rust\n+enum En {\n+    V0(u8),\n+    VBig([u8; 1024]),\n+}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: enum variant is more than three times larger (1024 bytes) than the next largest\n+ --> src/main.rs:5:5\n+  |\n+5 |     VBig([u8; 1024]),   //~ ERROR variant is more than three times larger\n+  |     ^^^^^^^^^^^^^^^^\n+  |\n+```"}, {"sha": "e7ec6af8be1e3752a89a2a1e5bc0eb8f2e05151f", "filename": "src/doc/rustc/src/lints/listing/deny-by-default.md", "status": "added", "additions": 241, "deletions": 0, "changes": 241, "blob_url": "https://github.com/rust-lang/rust/blob/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md?ref=d403d82b0a0b1e95e2bd001c38a99edf95178a7b", "patch": "@@ -0,0 +1,241 @@\n+# Deny-by-default lints\n+\n+These lints are all set to the 'deny' level by default.\n+\n+## exceeding-bitshifts\n+\n+This lint detects that a shift exceeds the type's number of bits. Some\n+example code that triggers this lint:\n+\n+```rust,ignore\n+1_i32 << 32;\n+```\n+\n+This will produce:\n+\n+```text\n+error: bitshift exceeds the type's number of bits\n+ --> src/main.rs:2:5\n+  |\n+2 |     1_i32 << 32;\n+  |     ^^^^^^^^^^^\n+  |\n+```\n+\n+## invalid-type-param-default\n+\n+This lint detects type parameter default erroneously allowed in invalid location. Some\n+example code that triggers this lint:\n+\n+```rust,ignore\n+fn foo<T=i32>(t: T) {}\n+```\n+\n+This will produce:\n+\n+```text\n+error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions.\n+ --> src/main.rs:4:8\n+  |\n+4 | fn foo<T=i32>(t: T) {}\n+  |        ^\n+  |\n+  = note: #[deny(invalid_type_param_default)] on by default\n+  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+  = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>\n+```\n+\n+## legacy-constructor-visibility\n+\n+[RFC 1506](https://github.com/rust-lang/rfcs/blob/master/text/1506-adt-kinds.md) modified some\n+visibility rules, and changed the visibility of struct constructors. Some\n+example code that triggers this lint:\n+\n+```rust,ignore\n+mod m {\n+    pub struct S(u8);\n+    \n+    fn f() {\n+        // this is trying to use S from the 'use' line, but becuase the `u8` is\n+        // not pub, it is private\n+        ::S;\n+    }\n+}\n+\n+use m::S;\n+```\n+\n+This will produce:\n+\n+```text\n+error: private struct constructors are not usable through re-exports in outer modules\n+ --> src/main.rs:5:9\n+  |\n+5 |         ::S;\n+  |         ^^^\n+  |\n+  = note: #[deny(legacy_constructor_visibility)] on by default\n+  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+  = note: for more information, see issue #39207 <https://github.com/rust-lang/rust/issues/39207>\n+```\n+\n+\n+## legacy-directory-ownership\n+\n+The legacy_directory_ownership warning is issued when\n+\n+* There is a non-inline module with a #[path] attribute (e.g. #[path = \"foo.rs\"] mod bar;),\n+* The module's file (\"foo.rs\" in the above example) is not named \"mod.rs\", and\n+* The module's file contains a non-inline child module without a #[path] attribute.\n+\n+The warning can be fixed by renaming the parent module to \"mod.rs\" and moving\n+it into its own directory if appropriate.\n+\n+## legacy-imports\n+\n+This lint detects names that resolve to ambiguous glob imports. Some example\n+code that triggers this lint:\n+\n+```rust,ignore\n+pub struct Foo;\n+\n+mod bar {\n+    struct Foo;\n+\n+    mod baz {\n+        use *;\n+        use bar::*;\n+        fn f(_: Foo) {}\n+    }\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+error: `Foo` is ambiguous\n+ --> src/main.rs:9:17\n+  |\n+7 |         use *;\n+  |             - `Foo` could refer to the name imported here\n+8 |         use bar::*;\n+  |             ------ `Foo` could also refer to the name imported here\n+9 |         fn f(_: Foo) {}\n+  |                 ^^^\n+  |\n+  = note: #[deny(legacy_imports)] on by default\n+  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+  = note: for more information, see issue #38260 <https://github.com/rust-lang/rust/issues/38260>\n+```\n+\n+\n+## missing-fragment-specifier\n+\n+The missing_fragment_specifier warning is issued when an unused pattern in a\n+`macro_rules!` macro definition has a meta-variable (e.g. `$e`) that is not\n+followed by a fragment specifier (e.g. `:expr`).\n+\n+This warning can always be fixed by removing the unused pattern in the\n+`macro_rules!` macro definition.\n+\n+## mutable-transmutes\n+\n+This lint catches transmuting from `&T` to `&mut T` becuase it is undefined\n+behavior. Some example code that triggers this lint:\n+\n+```rust,ignore\n+unsafe {\n+    let y = std::mem::transmute::<&i32, &mut i32>(&5);\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+error: mutating transmuted &mut T from &T may cause undefined behavior, consider instead using an UnsafeCell\n+ --> src/main.rs:3:17\n+  |\n+3 |         let y = std::mem::transmute::<&i32, &mut i32>(&5);\n+  |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  |\n+```\n+\n+\n+## no-mangle-const-items\n+\n+This lint detects any `const` items with the `#[no_mangle]` attribute.\n+Constants do not have their symbols exported, and therefore, this probably\n+means you meant to use a `static`, not a `const`. Some example code that\n+triggers this lint:\n+\n+```rust,ignore\n+#[no_mangle]\n+const FOO: i32 = 5;\n+```\n+\n+This will produce:\n+\n+```text\n+error: const items should never be #[no_mangle]\n+ --> src/main.rs:3:1\n+  |\n+3 | const FOO: i32 = 5;\n+  | -----^^^^^^^^^^^^^^\n+  | |\n+  | help: try a static value: `pub static`\n+  |\n+```\n+\n+## parenthesized-params-in-types-and-modules\n+\n+This lint detects incorrect parentheses. Some example code that triggers this\n+lint:\n+\n+```rust,ignore\n+let x = 5 as usize();\n+```\n+\n+This will produce:\n+\n+```text\n+error: parenthesized parameters may only be used with a trait\n+ --> src/main.rs:2:21\n+  |\n+2 |   let x = 5 as usize();\n+  |                     ^^\n+  |\n+  = note: #[deny(parenthesized_params_in_types_and_modules)] on by default\n+  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+  = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+```\n+\n+To fix it, remove the `()`s.\n+\n+## pub-use-of-private-extern-crate\n+\n+This lint detects a specific situation of re-exporting a private `extern crate`;\n+\n+## safe-extern-statics\n+\n+In older versions of Rust, there was a soundness issue where `extern static`s were allowed\n+to be accessed in safe code. This lint now catches and denies this kind of code.\n+\n+## unknown-crate-types\n+\n+This lint detects an unknown crate type found in a `#[crate_type]` directive. Some\n+example code that triggers this lint:\n+\n+```rust,ignore\n+#![crate_type=\"lol\"]\n+```\n+\n+This will produce:\n+\n+```text\n+error: invalid `crate_type` value\n+ --> src/lib.rs:1:1\n+  |\n+1 | #![crate_type=\"lol\"]\n+  | ^^^^^^^^^^^^^^^^^^^^\n+  |\n+```"}, {"sha": "18cd2fe32a3cc75707effe23e285c4d187d5373f", "filename": "src/doc/rustc/src/lints/listing/index.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Findex.md?ref=d403d82b0a0b1e95e2bd001c38a99edf95178a7b", "patch": "@@ -0,0 +1,5 @@\n+# Lint listing\n+\n+This section lists out all of the lints, grouped by their default lint levels.\n+\n+You can also see this list by running `rustc -W help`.\n\\ No newline at end of file"}, {"sha": "1171f75caa1fdf69ac32e2c02ee562a85df2f7a4", "filename": "src/doc/rustc/src/lints/listing/warn-by-default.md", "status": "added", "additions": 1039, "deletions": 0, "changes": 1039, "blob_url": "https://github.com/rust-lang/rust/blob/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md?ref=d403d82b0a0b1e95e2bd001c38a99edf95178a7b", "patch": "@@ -0,0 +1,1039 @@\n+# Warn-by-default lints\n+\n+These lints are all set to the 'warn' level by default.\n+\n+## const-err\n+\n+This lint detects an erroneous expression while doing constant evaluation. Some\n+example code that triggers this lint:\n+\n+```rust,ignore\n+let b = 200u8 + 200u8;\n+```\n+\n+This will produce:\n+\n+```text\n+warning: attempt to add with overflow\n+ --> src/main.rs:2:9\n+  |\n+2 | let b = 200u8 + 200u8;\n+  |         ^^^^^^^^^^^^^\n+  |\n+```\n+\n+## dead-code\n+\n+This lint detects detect unused, unexported items. Some\n+example code that triggers this lint:\n+\n+```rust\n+fn foo() {}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: function is never used: `foo`\n+ --> src/lib.rs:2:1\n+  |\n+2 | fn foo() {}\n+  | ^^^^^^^^\n+  |\n+```\n+\n+## deprecated\n+\n+This lint detects detects use of deprecated items. Some\n+example code that triggers this lint:\n+\n+```rust\n+#[deprecated]\n+fn foo() {}\n+\n+fn bar() {\n+    foo();\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: use of deprecated item 'foo'\n+ --> src/lib.rs:7:5\n+  |\n+7 |     foo();\n+  |     ^^^\n+  |\n+```\n+\n+## illegal-floating-point-literal-pattern\n+\n+This lint detects floating-point literals used in patterns. Some example code\n+that triggers this lint:\n+\n+```rust\n+let x = 42.0;\n+\n+match x {\n+    5.0 => {},\n+    _ => {},\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: floating-point literals cannot be used in patterns\n+ --> src/main.rs:4:9\n+  |\n+4 |         5.0 => {},\n+  |         ^^^\n+  |\n+  = note: #[warn(illegal_floating_point_literal_pattern)] on by default\n+  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+  = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n+```\n+\n+## improper-ctypes\n+\n+This lint detects proper use of libc types in foreign modules. Some\n+example code that triggers this lint:\n+\n+```rust\n+extern \"C\" {\n+    static STATIC: String;\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: found struct without foreign-function-safe representation annotation in foreign module, consider adding a #[repr(C)] attribute to the type\n+ --> src/main.rs:2:20\n+  |\n+2 |     static STATIC: String;\n+  |                    ^^^^^^\n+  |\n+```\n+\n+## incoherent-fundamental-impls\n+\n+This lint detects potentially-conflicting impls that were erroneously allowed. Some\n+example code that triggers this lint:\n+\n+```rust\n+pub trait Trait1<X> {\n+    type Output;\n+}\n+\n+pub trait Trait2<X> {}\n+\n+pub struct A;\n+\n+impl<X, T> Trait1<X> for T where T: Trait2<X> {\n+    type Output = ();\n+}\n+\n+impl<X> Trait1<Box<X>> for A {\n+    type Output = i32;\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: conflicting implementations of trait `Trait1<std::boxed::Box<_>>` for type `A`: (E0119)\n+  --> src/main.rs:13:1\n+   |\n+9  | impl<X, T> Trait1<X> for T where T: Trait2<X> {\n+   | --------------------------------------------- first implementation here\n+...\n+13 | impl<X> Trait1<Box<X>> for A {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `A`\n+   |\n+   = note: #[warn(incoherent_fundamental_impls)] on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #46205 <https://github.com/rust-lang/rust/issues/46205>\n+   = note: downstream crates may implement trait `Trait2<std::boxed::Box<_>>` for type `A`\n+```\n+\n+## late-bound-lifetime-arguments\n+\n+This lint detects detects generic lifetime arguments in path segments with\n+late bound lifetime parameters. Some example code that triggers this lint:\n+\n+```rust\n+struct S;\n+\n+impl S {\n+    fn late<'a, 'b>(self, _: &'a u8, _: &'b u8) {}\n+}\n+\n+fn main() {\n+    S.late::<'static>(&0, &0);\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+ --> src/main.rs:8:14\n+  |\n+4 |     fn late<'a, 'b>(self, _: &'a u8, _: &'b u8) {}\n+  |             -- the late bound lifetime parameter is introduced here\n+...\n+8 |     S.late::<'static>(&0, &0);\n+  |              ^^^^^^^\n+  |\n+  = note: #[warn(late_bound_lifetime_arguments)] on by default\n+  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+  = note: for more information, see issue #42868 <https://github.com/rust-lang/rust/issues/42868>\n+```\n+\n+## non-camel-case-types\n+\n+This lint detects types, variants, traits and type parameters that don't have\n+camel case names. Some example code that triggers this lint:\n+\n+```rust\n+struct s;\n+```\n+\n+This will produce:\n+\n+```text\n+warning: type `s` should have a camel case name such as `S`\n+ --> src/main.rs:1:1\n+  |\n+1 | struct s;\n+  | ^^^^^^^^^\n+  |\n+```\n+\n+## non-shorthand-field-patterns\n+\n+This lint detects using `Struct { x: x }` instead of `Struct { x }` in a pattern. Some\n+example code that triggers this lint:\n+\n+```rust\n+struct Point {\n+    x: i32,\n+    y: i32,\n+}\n+\n+\n+fn main() {\n+    let p = Point {\n+        x: 5,\n+        y: 5,\n+    };\n+\n+    match p {\n+        Point { x: x, y: y } => (),\n+    }\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: the `x:` in this pattern is redundant\n+  --> src/main.rs:14:17\n+   |\n+14 |         Point { x: x, y: y } => (),\n+   |                 --^^\n+   |                 |\n+   |                 help: remove this\n+   |\n+\n+warning: the `y:` in this pattern is redundant\n+  --> src/main.rs:14:23\n+   |\n+14 |         Point { x: x, y: y } => (),\n+   |                       --^^\n+   |                       |\n+   |                       help: remove this\n+\n+```\n+\n+## non-snake-case\n+\n+This lint detects variables, methods, functions, lifetime parameters and\n+modules that don't have snake case names. Some example code that triggers\n+this lint:\n+\n+```rust\n+let X = 5;\n+```\n+\n+This will produce:\n+\n+```text\n+warning: variable `X` should have a snake case name such as `x`\n+ --> src/main.rs:2:9\n+  |\n+2 |     let X = 5;\n+  |         ^\n+  |\n+```\n+\n+## non-upper-case-globals\n+\n+This lint detects static constants that don't have uppercase identifiers.\n+Some example code that triggers this lint:\n+\n+```rust\n+static x: i32 = 5;\n+```\n+\n+This will produce:\n+\n+```text\n+warning: static variable `x` should have an upper case name such as `X`\n+ --> src/main.rs:1:1\n+  |\n+1 | static x: i32 = 5;\n+  | ^^^^^^^^^^^^^^^^^^\n+  |\n+```\n+\n+## no-mangle-generic-items\n+\n+This lint detects generic items must be mangled. Some\n+example code that triggers this lint:\n+\n+```rust\n+#[no_mangle]\n+fn foo<T>(t: T) {\n+\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: functions generic over types must be mangled\n+ --> src/main.rs:2:1\n+  |\n+1 |   #[no_mangle]\n+  |   ------------ help: remove this attribute\n+2 | / fn foo<T>(t: T) {\n+3 | |     \n+4 | | }\n+  | |_^\n+  |\n+```\n+\n+## overflowing-literals\n+\n+This lint detects literal out of range for its type. Some\n+example code that triggers this lint:\n+\n+```rust\n+let x: u8 = 1000;\n+```\n+\n+This will produce:\n+\n+```text\n+warning: literal out of range for u8\n+ --> src/main.rs:2:17\n+  |\n+2 |     let x: u8 = 1000;\n+  |                 ^^^^\n+  |\n+```\n+\n+## path-statements\n+\n+This lint detects path statements with no effect. Some example code that\n+triggers this lint:\n+\n+```rust\n+let x = 42;\n+\n+x;\n+```\n+\n+This will produce:\n+\n+```text\n+warning: path statement with no effect\n+ --> src/main.rs:3:5\n+  |\n+3 |     x;\n+  |     ^^\n+  |\n+```\n+\n+## patterns-in-fns-without-body\n+\n+This lint detects patterns in functions without body were that were\n+previously erroneously allowed. Some example code that triggers this lint:\n+\n+```rust\n+trait Trait {\n+    fn foo(mut arg: u8);\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: patterns aren't allowed in methods without bodies\n+ --> src/main.rs:2:12\n+  |\n+2 |     fn foo(mut arg: u8);\n+  |            ^^^^^^^\n+  |\n+  = note: #[warn(patterns_in_fns_without_body)] on by default\n+  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+  = note: for more information, see issue #35203 <https://github.com/rust-lang/rust/issues/35203>\n+```\n+\n+To fix this, remove the pattern; it can be used in the implementation without\n+being used in the definition. That is:\n+\n+```rust\n+trait Trait {\n+    fn foo(arg: u8);\n+}\n+\n+impl Trait for i32 {\n+    fn foo(mut arg: u8) {\n+\n+    }\n+}\n+```\n+\n+## plugin-as-library\n+\n+This lint detects when compiler plugins are used as ordinary library in\n+non-plugin crate. Some example code that triggers this lint:\n+\n+```rust,ignore\n+#![feature(plugin)]\n+#![plugin(macro_crate_test)]\n+\n+extern crate macro_crate_test;\n+```\n+\n+## private-in-public\n+\n+This lint detects detect private items in public interfaces not caught by the old implementation. Some\n+example code that triggers this lint:\n+\n+```rust,ignore\n+pub trait Trait {\n+    type A;\n+}\n+\n+pub struct S;\n+\n+mod foo {\n+    struct Z;\n+\n+    impl ::Trait for ::S {\n+        type A = Z;\n+    }\n+}\n+# fn main() {}\n+```\n+\n+This will produce:\n+\n+```text\n+error[E0446]: private type `foo::Z` in public interface\n+  --> src/main.rs:11:9\n+   |\n+11 |         type A = Z;\n+   |         ^^^^^^^^^^^ can't leak private type\n+```\n+\n+## private-no-mangle-fns\n+\n+This lint detects functions marked `#[no_mangle]` that are also private.\n+Given that private functions aren't exposed publicly, and `#[no_mangle]`\n+controls the public symbol, this combination is erroneous. Some example code\n+that triggers this lint:\n+\n+```rust\n+#[no_mangle]\n+fn foo() {}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: function is marked #[no_mangle], but not exported\n+ --> src/main.rs:2:1\n+  |\n+2 | fn foo() {}\n+  | -^^^^^^^^^^\n+  | |\n+  | help: try making it public: `pub`\n+  |\n+```\n+\n+To fix this, either make it public or remove the `#[no_mangle]`.\n+\n+## private-no-mangle-statics\n+\n+This lint detects any statics marked `#[no_mangle]` that are private.\n+Given that private statics aren't exposed publicly, and `#[no_mangle]`\n+controls the public symbol, this combination is erroneous. Some example code\n+that triggers this lint:\n+\n+```rust\n+#[no_mangle]\n+static X: i32 = 4;\n+```\n+\n+This will produce:\n+\n+```text\n+warning: static is marked #[no_mangle], but not exported\n+ --> src/main.rs:2:1\n+  |\n+2 | static X: i32 = 4;\n+  | -^^^^^^^^^^^^^^^^^\n+  | |\n+  | help: try making it public: `pub`\n+  |\n+```\n+\n+To fix this, either make it public or remove the `#[no_mangle]`.\n+\n+## renamed-and-removed-lints\n+\n+This lint detects lints that have been renamed or removed. Some\n+example code that triggers this lint:\n+\n+```rust\n+#![deny(raw_pointer_derive)]\n+```\n+\n+This will produce:\n+\n+```text\n+warning: lint raw_pointer_derive has been removed: using derive with raw pointers is ok\n+ --> src/main.rs:1:9\n+  |\n+1 | #![deny(raw_pointer_derive)]\n+  |         ^^^^^^^^^^^^^^^^^^\n+  |\n+```\n+\n+To fix this, either remove the lint or use the new name.\n+\n+## safe-packed-borrows\n+\n+This lint detects borrowing a field in the interior of a packed structure\n+with alignment other than 1. Some example code that triggers this lint:\n+\n+```rust\n+#[repr(packed)]\n+pub struct Unaligned<T>(pub T);\n+\n+pub struct Foo {\n+    start: u8,\n+    data: Unaligned<u32>,\n+}\n+\n+fn main() {\n+    let x = Foo { start: 0, data: Unaligned(1) };\n+    let y = &x.data.0;\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: borrow of packed field requires unsafe function or block (error E0133)\n+  --> src/main.rs:11:13\n+   |\n+11 |     let y = &x.data.0; \n+   |             ^^^^^^^^^\n+   |\n+   = note: #[warn(safe_packed_borrows)] on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n+```\n+\n+## stable-features\n+\n+This lint detects a `#[feature]` attribute that's since been made stable. Some\n+example code that triggers this lint:\n+\n+```rust\n+#![feature(test_accepted_feature)]\n+```\n+\n+This will produce:\n+\n+```text\n+warning: this feature has been stable since 1.0.0. Attribute no longer needed\n+ --> src/main.rs:1:12\n+  |\n+1 | #![feature(test_accepted_feature)]\n+  |            ^^^^^^^^^^^^^^^^^^^^^\n+  |\n+```\n+\n+To fix, simply remove the `#![feature]` attribute, as it's no longer needed.\n+\n+## type-alias-bounds\n+\n+This lint detects bounds in type aliases. These are not currently enforced.\n+Some example code that triggers this lint:\n+\n+```rust\n+type SendVec<T: Send> = Vec<T>;\n+```\n+\n+This will produce:\n+\n+```text\n+warning: type alias is never used: `SendVec`\n+ --> src/main.rs:1:1\n+  |\n+1 | type SendVec<T: Send> = Vec<T>;\n+  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  |\n+```\n+\n+## tyvar-behind-raw-pointer\n+\n+This lint detects raw pointer to an inference variable. Some\n+example code that triggers this lint:\n+\n+```rust\n+let data = std::ptr::null();\n+let _ = &data as *const *const ();\n+\n+if data.is_null() {}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: type annotations needed\n+ --> src/main.rs:4:13\n+  |\n+4 |     if data.is_null() {}\n+  |             ^^^^^^^\n+  |\n+  = note: #[warn(tyvar_behind_raw_pointer)] on by default\n+  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+  = note: for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n+```\n+\n+## unconditional-recursion\n+\n+This lint detects functions that cannot return without calling themselves.\n+Some example code that triggers this lint:\n+\n+```rust\n+fn foo() {\n+    foo();\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: function cannot return without recurring\n+ --> src/main.rs:1:1\n+  |\n+1 | fn foo() {\n+  | ^^^^^^^^ cannot return without recurring\n+2 |     foo();\n+  |     ----- recursive call site\n+  |\n+```\n+\n+## unions-with-drop-fields\n+\n+This lint detects use of unions that contain fields with possibly non-trivial drop code. Some\n+example code that triggers this lint:\n+\n+```rust\n+#![feature(untagged_unions)]\n+\n+union U {\n+    s: String,\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: union contains a field with possibly non-trivial drop code, drop code of union fields is ignored when dropping the union\n+ --> src/main.rs:4:5\n+  |\n+4 |     s: String,\n+  |     ^^^^^^^^^\n+  |\n+```\n+\n+## unknown-lints\n+\n+This lint detects unrecognized lint attribute. Some\n+example code that triggers this lint:\n+\n+```rust,ignore\n+#[allow(not_a_real_lint)]\n+```\n+\n+This will produce:\n+\n+```text\n+warning: unknown lint: `not_a_real_lint`\n+ --> src/main.rs:1:10\n+  |\n+1 | #![allow(not_a_real_lint)]\n+  |          ^^^^^^^^^^^^^^^\n+  |\n+```\n+\n+## unreachable-code\n+\n+This lint detects detects unreachable code paths. Some example code that\n+triggers this lint:\n+\n+```rust,no_run\n+panic!(\"we never go past here!\");\n+\n+let x = 5;\n+```\n+\n+This will produce:\n+\n+```text\n+warning: unreachable statement\n+ --> src/main.rs:4:5\n+  |\n+4 |     let x = 5;\n+  |     ^^^^^^^^^^\n+  |\n+```\n+\n+## unreachable-patterns\n+\n+This lint detects detects unreachable patterns. Some\n+example code that triggers this lint:\n+\n+```rust\n+let x = 5;\n+match x {\n+    y => (),\n+    5 => (),\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: unreachable pattern\n+ --> src/main.rs:5:5\n+  |\n+5 |     5 => (),\n+  |     ^\n+  |\n+```\n+\n+The `y` pattern will always match, so the five is impossible to reach.\n+Remember, match arms match in order, you probably wanted to put the `5` case\n+above the `y` case.\n+\n+## unstable-name-collision\n+\n+This lint detects that you've used a name that the standard library plans to\n+add in the future, which means that your code may fail to compile without\n+additional type annotations in the future. Either rename, or add those\n+annotations now.\n+\n+## unused-allocation\n+\n+This lint detects detects unnecessary allocations that can be eliminated.\n+\n+## unused-assignments\n+\n+This lint detects detect assignments that will never be read. Some\n+example code that triggers this lint:\n+\n+```rust\n+let mut x = 5;\n+x = 6;\n+```\n+\n+This will produce:\n+\n+```text\n+warning: value assigned to `x` is never read\n+ --> src/main.rs:4:5\n+  |\n+4 |     x = 6;\n+  |     ^\n+  |\n+```\n+\n+## unused-attributes\n+\n+This lint detects detects attributes that were not used by the compiler. Some\n+example code that triggers this lint:\n+\n+```rust\n+#![feature(custom_attribute)]\n+\n+#![mutable_doc]\n+```\n+\n+This will produce:\n+\n+```text\n+warning: unused attribute\n+ --> src/main.rs:4:1\n+  |\n+4 | #![mutable_doc]\n+  | ^^^^^^^^^^^^^^^\n+  |\n+```\n+\n+## unused-comparisons\n+\n+This lint detects comparisons made useless by limits of the types involved. Some\n+example code that triggers this lint:\n+\n+```rust\n+fn foo(x: u8) {\n+    x >= 0;\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: comparison is useless due to type limits\n+ --> src/main.rs:6:5\n+  |\n+6 |     x >= 0;\n+  |     ^^^^^^\n+  |\n+```\n+\n+## unused-doc-comment\n+\n+This lint detects detects doc comments that aren't used by rustdoc. Some\n+example code that triggers this lint:\n+\n+```rust\n+/// docs for x\n+let x = 12;\n+```\n+\n+This will produce:\n+\n+```text\n+warning: doc comment not used by rustdoc\n+ --> src/main.rs:2:5\n+  |\n+2 |     /// docs for x\n+  |     ^^^^^^^^^^^^^^\n+  |\n+```\n+\n+## unused-features\n+\n+This lint detects unused or unknown features found in crate-level #[feature] directives.\n+To fix this, simply remove the feature flag.\n+\n+## unused-imports\n+\n+This lint detects imports that are never used. Some\n+example code that triggers this lint:\n+\n+```rust\n+use std::collections::HashMap;\n+```\n+\n+This will produce:\n+\n+```text\n+warning: unused import: `std::collections::HashMap`\n+ --> src/main.rs:1:5\n+  |\n+1 | use std::collections::HashMap;\n+  |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+  |\n+```\n+\n+## unused-macros\n+\n+This lint detects detects macros that were not used. Some example code that\n+triggers this lint:\n+\n+```rust\n+macro_rules! unused {\n+    () => {};\n+}\n+\n+fn main() {\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: unused macro definition\n+ --> src/main.rs:1:1\n+  |\n+1 | / macro_rules! unused {\n+2 | |     () => {};\n+3 | | }\n+  | |_^\n+  |\n+```\n+\n+## unused-must-use\n+\n+This lint detects unused result of a type flagged as #[must_use]. Some\n+example code that triggers this lint:\n+\n+```rust\n+fn returns_result() -> Result<(), ()> {\n+    Ok(())\n+}\n+\n+fn main() {\n+    returns_result();\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: unused `std::result::Result` which must be used\n+ --> src/main.rs:6:5\n+  |\n+6 |     returns_result();\n+  |     ^^^^^^^^^^^^^^^^^\n+  |\n+```\n+\n+## unused-mut\n+\n+This lint detects detect mut variables which don't need to be mutable. Some\n+example code that triggers this lint:\n+\n+```rust\n+let mut x = 5;\n+```\n+\n+This will produce:\n+\n+```text\n+warning: variable does not need to be mutable\n+ --> src/main.rs:2:9\n+  |\n+2 |     let mut x = 5;\n+  |         ----^\n+  |         |\n+  |         help: remove this `mut`\n+  |\n+```\n+\n+## unused-parens\n+\n+This lint detects `if`, `match`, `while` and `return` with parentheses; they\n+do not need them. Some example code that triggers this lint:\n+\n+```rust\n+if(true) {}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: unnecessary parentheses around `if` condition\n+ --> src/main.rs:2:7\n+  |\n+2 |     if(true) {}\n+  |       ^^^^^^ help: remove these parentheses\n+  |\n+```\n+\n+## unused-unsafe\n+\n+This lint detects unnecessary use of an `unsafe` block. Some\n+example code that triggers this lint:\n+\n+```rust\n+unsafe {}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: unnecessary `unsafe` block\n+ --> src/main.rs:2:5\n+  |\n+2 |     unsafe {}\n+  |     ^^^^^^ unnecessary `unsafe` block\n+  |\n+```\n+\n+## unused-variables\n+\n+This lint detects detect variables which are not used in any way. Some\n+example code that triggers this lint:\n+\n+```rust\n+let x = 5;\n+```\n+\n+This will produce:\n+\n+```text\n+warning: unused variable: `x`\n+ --> src/main.rs:2:9\n+  |\n+2 |     let x = 5;\n+  |         ^ help: consider using `_x` instead\n+  |\n+```\n+\n+## warnings\n+\n+This lint is a bit special; by changing its level, you change every other warning\n+that would produce a warning to whatever value you'd like:\n+\n+```rust\n+#![deny(warnings)]\n+```\n+\n+As such, you won't ever trigger this lint in your code directly.\n+\n+## while-true\n+\n+This lint detects `while true { }`. Some example code that triggers this\n+lint:\n+\n+```rust,no_run\n+while true {\n+\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: denote infinite loops with `loop { ... }`\n+ --> src/main.rs:2:5\n+  |\n+2 |     while true {\n+  |     ^^^^^^^^^^ help: use `loop`\n+  |\n+```"}, {"sha": "8620346e5b7480fcb5eb5240fdfc9ee6c9c42a17", "filename": "src/doc/rustc/src/targets/built-in.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fbuilt-in.md", "raw_url": "https://github.com/rust-lang/rust/raw/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fbuilt-in.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fbuilt-in.md?ref=d403d82b0a0b1e95e2bd001c38a99edf95178a7b", "patch": "@@ -0,0 +1,10 @@\n+# Built-in Targets\n+\n+`rustc` ships with the ability to compile to many targets automatically, we\n+call these \"built-in\" targets, and they generally correspond to targets that\n+the team is supporting directly.\n+\n+To see the list of built-in targets, you can run `rustc --print target-list`,\n+or look at [the API\n+docs](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_back/target/#modules).\n+Each module there defines a builder for a particular target.\n\\ No newline at end of file"}, {"sha": "0691afc60eae12c5b4dcb860aa586b2be92cd2ca", "filename": "src/doc/rustc/src/targets/custom.md", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fcustom.md", "raw_url": "https://github.com/rust-lang/rust/raw/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fcustom.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fcustom.md?ref=d403d82b0a0b1e95e2bd001c38a99edf95178a7b", "patch": "@@ -0,0 +1,17 @@\n+# Custom Targets\n+\n+If you'd like to build for a target that is not yet supported by `rustc`, you can use a\n+\"custom target specification\" to define a target. These target specification files\n+are JSON. To see the JSON for the host target, you can run:\n+\n+```bash\n+$ rustc +nightly -Z unstable-options --print target-spec-json\n+```\n+\n+To see it for a different target, add the `--target` flag:\n+\n+```bash\n+$ rustc +nightly -Z unstable-options --target=wasm32-unknown-unknown --print target-spec-json\n+```\n+\n+To use a custom target, see [`xargo`](https://github.com/japaric/xargo).\n\\ No newline at end of file"}, {"sha": "07e3a79471f5b5f4d877ed2129ef782df76fbdc9", "filename": "src/doc/rustc/src/targets/index.md", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Findex.md?ref=d403d82b0a0b1e95e2bd001c38a99edf95178a7b", "patch": "@@ -0,0 +1,13 @@\n+# Targets\n+\n+`rustc` is a cross-compiler by default. This means that you can use any compiler to build for any\n+architecture. The list of *targets* are the possible architectures that you can build for.\n+\n+To see all the options that you can set with a target, see the docs\n+[here](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_back/target/struct.Target.html).\n+\n+To compile to a particular target, use the `--target` flag:\n+\n+```bash\n+$ rustc src/main.rs --target=wasm32-unknown-unknown\n+```"}, {"sha": "bed1b71c24e00132f7211802645949d8a2e081c2", "filename": "src/doc/rustc/src/what-is-rustc.md", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Frustc%2Fsrc%2Fwhat-is-rustc.md", "raw_url": "https://github.com/rust-lang/rust/raw/d403d82b0a0b1e95e2bd001c38a99edf95178a7b/src%2Fdoc%2Frustc%2Fsrc%2Fwhat-is-rustc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fwhat-is-rustc.md?ref=d403d82b0a0b1e95e2bd001c38a99edf95178a7b", "patch": "@@ -0,0 +1,68 @@\n+# What is rustc?\n+\n+Welcome to \"The rustc book\"! `rustc` is the compiler for the Rust programming\n+language, provided by the project itself. Compilers take your source code and\n+produce binary code, either as a library or executable.\n+\n+Most Rust programmers don't invoke `rustc` directly, but instead do it through\n+[Cargo](../cargo/index.html). It's all in service of `rustc` though! If you\n+want to see how Cargo calls `rustc`, you can\n+\n+```bash\n+$ cargo build --verbose\n+```\n+\n+And it will print out each `rustc` invocation. This book can help you\n+understand what each of these options does. Additionally, while most\n+Rustaceans use Cargo, not all do: sometimes they integrate `rustc` into other\n+build systems. This book should provide a guide to all of the options you'd\n+need to do so.\n+\n+## Basic usage\n+\n+Let's say you've got a little hello world program in a file `hello.rs`:\n+\n+```rust\n+fn main() {\n+    println!(\"Hello, world!\");\n+}\n+```\n+\n+To turn this source code into an executable, you can use `rustc`:\n+\n+```bash\n+$ rustc hello.rs\n+$ ./hello # on a *NIX\n+$ .\\hello.exe # on Windows\n+```\n+\n+Note that we only ever pass `rustc` the *crate root*, not every file we wish\n+to compile. For example, if we had a `main.rs` that looked like this:\n+\n+```rust,ignore\n+mod foo;\n+\n+fn main() {\n+    foo::hello();\n+}\n+```\n+\n+And a `foo.rs` that had this:\n+\n+```rust,ignore\n+fn hello() {\n+    println!(\"Hello, world!\");\n+}\n+```\n+\n+To compile this, we'd run this command:\n+\n+```bash\n+$ rustc main.rs\n+```\n+\n+No need to tell `rustc` about `foo.rs`; the `mod` statements give it\n+everything that it needs. This is different than how you would use a C\n+compiler, where you invoke the compiler on each file, and then link\n+everything together. In other words, the *crate* is a translation unit, not a\n+particular module.\n\\ No newline at end of file"}]}