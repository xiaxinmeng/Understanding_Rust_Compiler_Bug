{"sha": "9b98dd774ed0a6ddbe914da0157aced6f076b9da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliOThkZDc3NGVkMGE2ZGRiZTkxNGRhMDE1N2FjZWQ2ZjA3NmI5ZGE=", "commit": {"author": {"name": "Ruben Schmidmeister", "email": "ruben.schmidmeister@icloud.com", "date": "2019-05-18T09:26:03Z"}, "committer": {"name": "Ruben Schmidmeister", "email": "ruben.schmidmeister@icloud.com", "date": "2019-05-18T09:27:35Z"}, "message": "Merge branch 'master' into normalize-multiline-doc-attributes", "tree": {"sha": "0223fdc3cd2228bb9d8d89b20a26b548cb596777", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0223fdc3cd2228bb9d8d89b20a26b548cb596777"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b98dd774ed0a6ddbe914da0157aced6f076b9da", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEU0FXzFYkrmfOhhqxKTh7Wnqvhj8FAlzf0AgACgkQKTh7Wnqv\nhj/sHAf/UMCWTbFL2fciIUGwmPJCPodh8mrwrCJnA1FisubqFMQz77IHnoRNzcyV\n/YdtPept6jp1NRdcMhFbG/17hmqu2hfheGMJqaj7MNAdc5NxzeQxw9wq7ZAOALWB\ni6a5z1oVIMkjXpfxzpIrVS7PLPrVyBJlyGR3rgb7DbbqCx6sT/udaISN/sF9etHG\n+IU1liBw0TLkZ9uHYXE4L+rta9Y78Vogu4aLqJXO10Tno5o2lDZz2+B8NmtHDh58\nVVJW2wtE6hhOADS1+mjUCFmcoJ7OUNCZDjV0oJClBW4/4QpP2/j8Oi/0lzydP9zb\nalgmEnd/EufU6FDhR5n3FcNlWvhhTQ==\n=ANA0\n-----END PGP SIGNATURE-----", "payload": "tree 0223fdc3cd2228bb9d8d89b20a26b548cb596777\nparent 3eb8e4d33c84a552ec107182dc0fbed08763f823\nparent 421ed946bfc52738dd13931cddb12c87b34e34b9\nauthor Ruben Schmidmeister <ruben.schmidmeister@icloud.com> 1558171563 +0200\ncommitter Ruben Schmidmeister <ruben.schmidmeister@icloud.com> 1558171655 +0200\n\nMerge branch 'master' into normalize-multiline-doc-attributes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b98dd774ed0a6ddbe914da0157aced6f076b9da", "html_url": "https://github.com/rust-lang/rust/commit/9b98dd774ed0a6ddbe914da0157aced6f076b9da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b98dd774ed0a6ddbe914da0157aced6f076b9da/comments", "author": {"login": "bash", "id": 4602612, "node_id": "MDQ6VXNlcjQ2MDI2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/4602612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bash", "html_url": "https://github.com/bash", "followers_url": "https://api.github.com/users/bash/followers", "following_url": "https://api.github.com/users/bash/following{/other_user}", "gists_url": "https://api.github.com/users/bash/gists{/gist_id}", "starred_url": "https://api.github.com/users/bash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bash/subscriptions", "organizations_url": "https://api.github.com/users/bash/orgs", "repos_url": "https://api.github.com/users/bash/repos", "events_url": "https://api.github.com/users/bash/events{/privacy}", "received_events_url": "https://api.github.com/users/bash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bash", "id": 4602612, "node_id": "MDQ6VXNlcjQ2MDI2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/4602612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bash", "html_url": "https://github.com/bash", "followers_url": "https://api.github.com/users/bash/followers", "following_url": "https://api.github.com/users/bash/following{/other_user}", "gists_url": "https://api.github.com/users/bash/gists{/gist_id}", "starred_url": "https://api.github.com/users/bash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bash/subscriptions", "organizations_url": "https://api.github.com/users/bash/orgs", "repos_url": "https://api.github.com/users/bash/repos", "events_url": "https://api.github.com/users/bash/events{/privacy}", "received_events_url": "https://api.github.com/users/bash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3eb8e4d33c84a552ec107182dc0fbed08763f823", "url": "https://api.github.com/repos/rust-lang/rust/commits/3eb8e4d33c84a552ec107182dc0fbed08763f823", "html_url": "https://github.com/rust-lang/rust/commit/3eb8e4d33c84a552ec107182dc0fbed08763f823"}, {"sha": "421ed946bfc52738dd13931cddb12c87b34e34b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/421ed946bfc52738dd13931cddb12c87b34e34b9", "html_url": "https://github.com/rust-lang/rust/commit/421ed946bfc52738dd13931cddb12c87b34e34b9"}], "stats": {"total": 285, "additions": 200, "deletions": 85}, "files": [{"sha": "abf565453dead3e128d78457007df32ead669c4c", "filename": ".travis.yml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b98dd774ed0a6ddbe914da0157aced6f076b9da/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/9b98dd774ed0a6ddbe914da0157aced6f076b9da/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=9b98dd774ed0a6ddbe914da0157aced6f076b9da", "patch": "@@ -26,12 +26,13 @@ matrix:\n     - env: INTEGRATION=log\n     - env: INTEGRATION=mdbook\n     - env: INTEGRATION=packed_simd\n-    - env: INTEGRATION=rand\n     - env: INTEGRATION=rust-semverver\n     - env: INTEGRATION=stdsimd TARGET=x86_64-unknown-linux-gnu\n     - env: INTEGRATION=tempdir\n     - env: INTEGRATION=futures-rs\n   allow_failures:\n+    # Using old configuration option\n+    - env: INTEGRATION=rand\n     # Doesn't build - keep this in allow_failures as it's fragile to breaking changes of rustc.\n     - env: INTEGRATION=rust-clippy\n     # Doesn't build - seems to be because of an option"}, {"sha": "39372bcb12929e7d964df8ca9fb2f2171cecedb8", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b98dd774ed0a6ddbe914da0157aced6f076b9da/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/9b98dd774ed0a6ddbe914da0157aced6f076b9da/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=9b98dd774ed0a6ddbe914da0157aced6f076b9da", "patch": "@@ -2,6 +2,7 @@\n \n ## [Unreleased]\n \n+- Change option `format_doc_comment` to `format_code_in_doc_comment`.\n - `use_small_heuristics` changed to be an enum and stabilised. Configuration\n   options are now ready for 1.0.\n "}, {"sha": "dc91a3d255a7b8899322f40e82534f806b07d500", "filename": "Configurations.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b98dd774ed0a6ddbe914da0157aced6f076b9da/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/9b98dd774ed0a6ddbe914da0157aced6f076b9da/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=9b98dd774ed0a6ddbe914da0157aced6f076b9da", "patch": "@@ -1978,9 +1978,9 @@ fn main() {\n }\n ```\n \n-## `format_doc_comments`\n+## `format_code_in_doc_comments`\n \n-Format doc comments.\n+Format code snippet included in doc comments.\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`"}, {"sha": "961b6031c935a2dc2558b2f1719f388940b8bae1", "filename": "src/attr.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9b98dd774ed0a6ddbe914da0157aced6f076b9da/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98dd774ed0a6ddbe914da0157aced6f076b9da/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=9b98dd774ed0a6ddbe914da0157aced6f076b9da", "patch": "@@ -56,12 +56,11 @@ fn is_derive(attr: &ast::Attribute) -> bool {\n }\n \n /// Returns the arguments of `#[derive(...)]`.\n-fn get_derive_spans(attr: &ast::Attribute) -> Option<Vec<Span>> {\n+fn get_derive_spans<'a>(attr: &'a ast::Attribute) -> Option<impl Iterator<Item = Span> + 'a> {\n     attr.meta_item_list().map(|meta_item_list| {\n         meta_item_list\n-            .iter()\n+            .into_iter()\n             .map(|nested_meta_item| nested_meta_item.span)\n-            .collect()\n     })\n }\n \n@@ -412,10 +411,11 @@ impl<'a> Rewrite for [ast::Attribute] {\n             // Handle derives if we will merge them.\n             if context.config.merge_derives() && is_derive(&attrs[0]) {\n                 let derives = take_while_with_pred(context, attrs, is_derive);\n-                let mut derive_spans = vec![];\n-                for derive in derives {\n-                    derive_spans.append(&mut get_derive_spans(derive)?);\n-                }\n+                let derive_spans: Vec<_> = derives\n+                    .iter()\n+                    .filter_map(get_derive_spans)\n+                    .flatten()\n+                    .collect();\n                 let derive_str =\n                     format_derive(&derive_spans, attr_prefix(&attrs[0]), shape, context)?;\n                 result.push_str(&derive_str);"}, {"sha": "5c2b46583b43efa2137b4ab1637d2a4ac8888322", "filename": "src/checkstyle.rs", "status": "modified", "additions": 55, "deletions": 21, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/9b98dd774ed0a6ddbe914da0157aced6f076b9da/src%2Fcheckstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98dd774ed0a6ddbe914da0157aced6f076b9da/src%2Fcheckstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcheckstyle.rs?ref=9b98dd774ed0a6ddbe914da0157aced6f076b9da", "patch": "@@ -1,3 +1,4 @@\n+use std::fmt::{self, Display};\n use std::io::{self, Write};\n use std::path::Path;\n \n@@ -9,9 +10,9 @@ use crate::rustfmt_diff::{DiffLine, Mismatch};\n /// future version of Rustfmt.\n pub(crate) fn header() -> String {\n     let mut xml_heading = String::new();\n-    xml_heading.push_str(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\");\n+    xml_heading.push_str(r#\"<?xml version=\"1.0\" encoding=\"utf-8\"?>\"#);\n     xml_heading.push_str(\"\\n\");\n-    xml_heading.push_str(\"<checkstyle version=\\\"4.3\\\">\");\n+    xml_heading.push_str(r#\"<checkstyle version=\"4.3\">\"#);\n     xml_heading\n }\n \n@@ -31,17 +32,16 @@ pub(crate) fn output_checkstyle_file<T>(\n where\n     T: Write,\n {\n-    write!(writer, \"<file name=\\\"{}\\\">\", filename.display())?;\n+    write!(writer, r#\"<file name=\"{}\">\"#, filename.display())?;\n     for mismatch in diff {\n         for line in mismatch.lines {\n             // Do nothing with `DiffLine::Context` and `DiffLine::Resulting`.\n-            if let DiffLine::Expected(ref str) = line {\n-                let message = xml_escape_str(str);\n+            if let DiffLine::Expected(message) = line {\n                 write!(\n                     writer,\n-                    \"<error line=\\\"{}\\\" severity=\\\"warning\\\" message=\\\"Should be `{}`\\\" \\\n-                     />\",\n-                    mismatch.line_number, message\n+                    r#\"<error line=\"{}\" severity=\"warning\" message=\"Should be `{}`\" />\"#,\n+                    mismatch.line_number,\n+                    XmlEscaped(&message)\n                 )?;\n             }\n         }\n@@ -50,19 +50,53 @@ where\n     Ok(())\n }\n \n-// Convert special characters into XML entities.\n-// This is needed for checkstyle output.\n-fn xml_escape_str(string: &str) -> String {\n-    let mut out = String::new();\n-    for c in string.chars() {\n-        match c {\n-            '<' => out.push_str(\"&lt;\"),\n-            '>' => out.push_str(\"&gt;\"),\n-            '\"' => out.push_str(\"&quot;\"),\n-            '\\'' => out.push_str(\"&apos;\"),\n-            '&' => out.push_str(\"&amp;\"),\n-            _ => out.push(c),\n+/// Convert special characters into XML entities.\n+/// This is needed for checkstyle output.\n+struct XmlEscaped<'a>(&'a str);\n+\n+impl<'a> Display for XmlEscaped<'a> {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        for char in self.0.chars() {\n+            match char {\n+                '<' => write!(formatter, \"&lt;\"),\n+                '>' => write!(formatter, \"&gt;\"),\n+                '\"' => write!(formatter, \"&quot;\"),\n+                '\\'' => write!(formatter, \"&apos;\"),\n+                '&' => write!(formatter, \"&amp;\"),\n+                _ => write!(formatter, \"{}\", char),\n+            }?;\n         }\n+\n+        Ok(())\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn special_characters_are_escaped() {\n+        assert_eq!(\n+            \"&lt;&gt;&quot;&apos;&amp;\",\n+            format!(\"{}\", XmlEscaped(r#\"<>\"'&\"#)),\n+        );\n+    }\n+\n+    #[test]\n+    fn special_characters_are_escaped_in_string_with_other_characters() {\n+        assert_eq!(\n+            \"The quick brown &quot;\ud83e\udd8a&quot; jumps &lt;over&gt; the lazy \ud83d\udc36\",\n+            format!(\n+                \"{}\",\n+                XmlEscaped(r#\"The quick brown \"\ud83e\udd8a\" jumps <over> the lazy \ud83d\udc36\"#)\n+            ),\n+        );\n+    }\n+\n+    #[test]\n+    fn other_characters_are_not_escaped() {\n+        let string = \"The quick brown \ud83e\udd8a jumps over the lazy \ud83d\udc36\";\n+        assert_eq!(string, format!(\"{}\", XmlEscaped(string)));\n     }\n-    out\n }"}, {"sha": "232d3745e59c074dd6a360b272e2d5d509676894", "filename": "src/comment.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9b98dd774ed0a6ddbe914da0157aced6f076b9da/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98dd774ed0a6ddbe914da0157aced6f076b9da/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=9b98dd774ed0a6ddbe914da0157aced6f076b9da", "patch": "@@ -353,7 +353,7 @@ fn identify_comment(\n             trim_left_preserve_layout(first_group, shape.indent, config)?\n         } else if !config.normalize_comments()\n             && !config.wrap_comments()\n-            && !config.format_doc_comments()\n+            && !config.format_code_in_doc_comments()\n         {\n             light_rewrite_comment(first_group, shape.indent, config, is_doc_comment)\n         } else {\n@@ -656,9 +656,16 @@ impl<'a> CommentRewrite<'a> {\n                     _ => {\n                         let mut config = self.fmt.config.clone();\n                         config.set().wrap_comments(false);\n-                        match crate::format_code_block(&self.code_block_buffer, &config) {\n-                            Some(ref s) => trim_custom_comment_prefix(&s.snippet),\n-                            None => trim_custom_comment_prefix(&self.code_block_buffer),\n+                        if config.format_code_in_doc_comments() {\n+                            if let Some(s) =\n+                                crate::format_code_block(&self.code_block_buffer, &config)\n+                            {\n+                                trim_custom_comment_prefix(&s.snippet)\n+                            } else {\n+                                trim_custom_comment_prefix(&self.code_block_buffer)\n+                            }\n+                        } else {\n+                            trim_custom_comment_prefix(&self.code_block_buffer)\n                         }\n                     }\n                 };"}, {"sha": "326d81b2113b4b07b6ce14058fb5740e91628b1e", "filename": "src/config/config_type.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9b98dd774ed0a6ddbe914da0157aced6f076b9da/src%2Fconfig%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98dd774ed0a6ddbe914da0157aced6f076b9da/src%2Fconfig%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fconfig_type.rs?ref=9b98dd774ed0a6ddbe914da0157aced6f076b9da", "patch": "@@ -50,22 +50,6 @@ impl ConfigType for IgnoreList {\n     }\n }\n \n-/// Checks if we're in a nightly build.\n-///\n-/// The environment variable `CFG_RELEASE_CHANNEL` is set during the rustc bootstrap\n-/// to \"stable\", \"beta\", or \"nightly\" depending on what toolchain is being built.\n-/// If we are being built as part of the stable or beta toolchains, we want\n-/// to disable unstable configuration options.\n-///\n-/// If we're being built by cargo (e.g., `cargo +nightly install rustfmt-nightly`),\n-/// `CFG_RELEASE_CHANNEL` is not set. As we only support being built against the\n-/// nightly compiler when installed from crates.io, default to nightly mode.\n-macro_rules! is_nightly_channel {\n-    () => {\n-        option_env!(\"CFG_RELEASE_CHANNEL\").map_or(true, |c| c == \"nightly\" || c == \"dev\")\n-    };\n-}\n-\n macro_rules! create_config {\n     ($($i:ident: $ty:ty, $def:expr, $stb:expr, $( $dstring:expr ),+ );+ $(;)*) => (\n         #[cfg(test)]\n@@ -159,7 +143,7 @@ macro_rules! create_config {\n                         self.$i.1 = true;\n                         self.$i.2 = val;\n                     } else {\n-                        if is_nightly_channel!() {\n+                        if crate::is_nightly_channel!() {\n                             self.$i.1 = true;\n                             self.$i.2 = val;\n                         } else {"}, {"sha": "d2189904965839c701a82c1b64c9d1154f47ac84", "filename": "src/config/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b98dd774ed0a6ddbe914da0157aced6f076b9da/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98dd774ed0a6ddbe914da0157aced6f076b9da/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=9b98dd774ed0a6ddbe914da0157aced6f076b9da", "patch": "@@ -40,7 +40,7 @@ create_config! {\n \n     // Comments. macros, and strings\n     wrap_comments: bool, false, false, \"Break comments to fit on the line\";\n-    format_doc_comments: bool, false, false, \"Format doc comments.\";\n+    format_code_in_doc_comments: bool, false, false, \"Format the code snippet in doc comments.\";\n     comment_width: usize, 80, false,\n         \"Maximum length of comments. No effect unless wrap_comments = true\";\n     normalize_comments: bool, false, false, \"Convert /* */ comments to // comments where possible\";"}, {"sha": "47d885ef2e34741d34f8f697eaf24d986dd7ad89", "filename": "src/formatting.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9b98dd774ed0a6ddbe914da0157aced6f076b9da/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98dd774ed0a6ddbe914da0157aced6f076b9da/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=9b98dd774ed0a6ddbe914da0157aced6f076b9da", "patch": "@@ -458,8 +458,7 @@ struct FormatLines<'a> {\n     errors: Vec<FormattingError>,\n     issue_seeker: BadIssueSeeker,\n     line_buffer: String,\n-    // `true` if the current line contains a string literal.\n-    is_string: bool,\n+    current_line_contains_string_literal: bool,\n     format_line: bool,\n     allow_issue_seek: bool,\n     config: &'a Config,\n@@ -483,7 +482,7 @@ impl<'a> FormatLines<'a> {\n             allow_issue_seek: !issue_seeker.is_disabled(),\n             issue_seeker,\n             line_buffer: String::with_capacity(config.max_width() * 2),\n-            is_string: false,\n+            current_line_contains_string_literal: false,\n             format_line: config.file_lines().contains_line(name, 1),\n             config,\n         }\n@@ -547,7 +546,7 @@ impl<'a> FormatLines<'a> {\n                 && !self.is_skipped_line()\n                 && self.should_report_error(kind, &error_kind)\n             {\n-                let is_string = self.is_string;\n+                let is_string = self.current_line_contains_string_literal;\n                 self.push_err(error_kind, kind.is_comment(), is_string);\n             }\n         }\n@@ -561,7 +560,7 @@ impl<'a> FormatLines<'a> {\n         self.newline_count += 1;\n         self.last_was_space = false;\n         self.line_buffer.clear();\n-        self.is_string = false;\n+        self.current_line_contains_string_literal = false;\n     }\n \n     fn char(&mut self, c: char, kind: FullCodeCharKind) {\n@@ -574,7 +573,7 @@ impl<'a> FormatLines<'a> {\n         self.last_was_space = c.is_whitespace();\n         self.line_buffer.push(c);\n         if kind.is_string() {\n-            self.is_string = true;\n+            self.current_line_contains_string_literal = true;\n         }\n     }\n \n@@ -589,12 +588,14 @@ impl<'a> FormatLines<'a> {\n     }\n \n     fn should_report_error(&self, char_kind: FullCodeCharKind, error_kind: &ErrorKind) -> bool {\n-        let allow_error_report =\n-            if char_kind.is_comment() || self.is_string || error_kind.is_comment() {\n-                self.config.error_on_unformatted()\n-            } else {\n-                true\n-            };\n+        let allow_error_report = if char_kind.is_comment()\n+            || self.current_line_contains_string_literal\n+            || error_kind.is_comment()\n+        {\n+            self.config.error_on_unformatted()\n+        } else {\n+            true\n+        };\n \n         match error_kind {\n             ErrorKind::LineOverflow(..) => {"}, {"sha": "202eb2cf1179fb73ed8e65446bcde538a37cfd87", "filename": "src/items.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b98dd774ed0a6ddbe914da0157aced6f076b9da/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98dd774ed0a6ddbe914da0157aced6f076b9da/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=9b98dd774ed0a6ddbe914da0157aced6f076b9da", "patch": "@@ -664,7 +664,6 @@ pub(crate) fn format_impl(\n     context: &RewriteContext<'_>,\n     item: &ast::Item,\n     offset: Indent,\n-    where_span_end: Option<BytePos>,\n ) -> Option<String> {\n     if let ast::ItemKind::Impl(_, _, _, ref generics, _, ref self_ty, ref items) = item.node {\n         let mut result = String::with_capacity(128);\n@@ -691,6 +690,8 @@ pub(crate) fn format_impl(\n             option.compress_where();\n         }\n \n+        let misssing_span = mk_sp(self_ty.span.hi(), item.span.hi());\n+        let where_span_end = context.snippet_provider.opt_span_before(misssing_span, \"{\");\n         let where_clause_str = rewrite_where_clause(\n             context,\n             &generics.where_clause,"}, {"sha": "88605079b7eec24f282a2143463a9db6e6d5efc5", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b98dd774ed0a6ddbe914da0157aced6f076b9da/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98dd774ed0a6ddbe914da0157aced6f076b9da/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=9b98dd774ed0a6ddbe914da0157aced6f076b9da", "patch": "@@ -40,6 +40,9 @@ pub use crate::rustfmt_diff::{ModifiedChunk, ModifiedLines};\n #[macro_use]\n mod utils;\n \n+#[macro_use]\n+mod release_channel;\n+\n mod attr;\n mod chains;\n pub(crate) mod checkstyle;"}, {"sha": "948247b3c9700e7732408be7d8f8ba367c1c53c0", "filename": "src/release_channel.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9b98dd774ed0a6ddbe914da0157aced6f076b9da/src%2Frelease_channel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98dd774ed0a6ddbe914da0157aced6f076b9da/src%2Frelease_channel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frelease_channel.rs?ref=9b98dd774ed0a6ddbe914da0157aced6f076b9da", "patch": "@@ -0,0 +1,16 @@\n+/// Checks if we're in a nightly build.\n+///\n+/// The environment variable `CFG_RELEASE_CHANNEL` is set during the rustc bootstrap\n+/// to \"stable\", \"beta\", or \"nightly\" depending on what toolchain is being built.\n+/// If we are being built as part of the stable or beta toolchains, we want\n+/// to disable unstable configuration options.\n+///\n+/// If we're being built by cargo (e.g., `cargo +nightly install rustfmt-nightly`),\n+/// `CFG_RELEASE_CHANNEL` is not set. As we only support being built against the\n+/// nightly compiler when installed from crates.io, default to nightly mode.\n+#[macro_export]\n+macro_rules! is_nightly_channel {\n+    () => {\n+        option_env!(\"CFG_RELEASE_CHANNEL\").map_or(true, |c| c == \"nightly\" || c == \"dev\")\n+    };\n+}"}, {"sha": "68fd90a01cfd33804bcc98e1c786d2a48d33e04f", "filename": "src/test/mod.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b98dd774ed0a6ddbe914da0157aced6f076b9da/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98dd774ed0a6ddbe914da0157aced6f076b9da/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=9b98dd774ed0a6ddbe914da0157aced6f076b9da", "patch": "@@ -11,6 +11,7 @@ use std::thread;\n \n use crate::config::{Color, Config, EmitMode, FileName, NewlineStyle, ReportTactic};\n use crate::formatting::{ReportedErrors, SourceFile};\n+use crate::is_nightly_channel;\n use crate::rustfmt_diff::{make_diff, print_diff, DiffLine, Mismatch, ModifiedChunk, OutputWriter};\n use crate::source_file;\n use crate::{FormatReport, FormatReportFormatterBuilder, Input, Session};\n@@ -260,7 +261,7 @@ fn assert_output(source: &Path, expected_filename: &Path) {\n fn idempotence_tests() {\n     run_test_with(&TestSetting::default(), || {\n         // these tests require nightly\n-        if !is_nightly() {\n+        if !is_nightly_channel!() {\n             return;\n         }\n         // Get all files in the tests/target directory.\n@@ -278,7 +279,7 @@ fn idempotence_tests() {\n #[test]\n fn self_tests() {\n     // Issue-3443: these tests require nightly\n-    if !is_nightly() {\n+    if !is_nightly_channel!() {\n         return;\n     }\n     let mut files = get_test_files(Path::new(\"tests\"), false);\n@@ -313,11 +314,6 @@ fn self_tests() {\n     );\n }\n \n-fn is_nightly() -> bool {\n-    let release_channel = option_env!(\"CFG_RELEASE_CHANNEL\");\n-    release_channel.is_none() || release_channel == Some(\"nightly\")\n-}\n-\n #[test]\n fn stdin_formatting_smoke_test() {\n     let input = Input::Text(\"fn main () {}\".to_owned());\n@@ -432,7 +428,7 @@ fn check_files(files: Vec<PathBuf>, opt_config: &Option<PathBuf>) -> (Vec<Format\n \n     for file_name in files {\n         let sig_comments = read_significant_comments(&file_name);\n-        if sig_comments.contains_key(\"unstable\") && !is_nightly() {\n+        if sig_comments.contains_key(\"unstable\") && !is_nightly_channel!() {\n             debug!(\n                 \"Skipping '{}' because it requires unstable \\\n                  features which are only available on nightly...\","}, {"sha": "5fdd0625dff8ee352985a4cce2f5d87180b4541d", "filename": "src/visitor.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b98dd774ed0a6ddbe914da0157aced6f076b9da/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98dd774ed0a6ddbe914da0157aced6f076b9da/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=9b98dd774ed0a6ddbe914da0157aced6f076b9da", "patch": "@@ -5,7 +5,7 @@ use syntax::source_map::{self, BytePos, Pos, SourceMap, Span};\n use syntax::{ast, visit};\n \n use crate::attr::*;\n-use crate::comment::{CodeCharKind, CommentCodeSlices, FindUncommented};\n+use crate::comment::{CodeCharKind, CommentCodeSlices};\n use crate::config::file_lines::FileName;\n use crate::config::{BraceStyle, Config, Version};\n use crate::expr::{format_expr, ExprType};\n@@ -359,13 +359,8 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             match item.node {\n                 ast::ItemKind::Use(ref tree) => self.format_import(item, tree),\n                 ast::ItemKind::Impl(..) => {\n-                    let snippet = self.snippet(item.span);\n-                    let where_span_end = snippet\n-                        .find_uncommented(\"{\")\n-                        .map(|x| BytePos(x as u32) + source!(self, item.span).lo());\n                     let block_indent = self.block_indent;\n-                    let rw = self\n-                        .with_context(|ctx| format_impl(&ctx, item, block_indent, where_span_end));\n+                    let rw = self.with_context(|ctx| format_impl(&ctx, item, block_indent));\n                     self.push_rewrite(item.span, rw);\n                 }\n                 ast::ItemKind::Trait(..) => {"}, {"sha": "e74ceefd195888fb0c7cebd8185d90bab051d329", "filename": "tests/source/doc-comment-with-example.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Fsource%2Fdoc-comment-with-example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Fsource%2Fdoc-comment-with-example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fdoc-comment-with-example.rs?ref=9b98dd774ed0a6ddbe914da0157aced6f076b9da", "patch": "@@ -1,4 +1,4 @@\n-// rustfmt-format_doc_comments: true\n+// rustfmt-format_code_in_doc_comments: true\n \n /// Foo\n ///"}, {"sha": "835b0261b760b0ae8175c3d8481a0d251fb7cb3a", "filename": "tests/source/invalid-rust-code-in-doc-comment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Fsource%2Finvalid-rust-code-in-doc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Fsource%2Finvalid-rust-code-in-doc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Finvalid-rust-code-in-doc-comment.rs?ref=9b98dd774ed0a6ddbe914da0157aced6f076b9da", "patch": "@@ -1,4 +1,4 @@\n-// rustfmt-format_doc_comments: true\n+// rustfmt-format_code_in_doc_comments: true\n \n /// ```rust\n /// if (true) { \u2026 }"}, {"sha": "5a23f10430d1a6bdc935efbc794ed5bb2e92b4fd", "filename": "tests/source/issue-2520.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Fsource%2Fissue-2520.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Fsource%2Fissue-2520.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-2520.rs?ref=9b98dd774ed0a6ddbe914da0157aced6f076b9da", "patch": "@@ -1,4 +1,5 @@\n // rustfmt-normalize_comments: true\n+// rustfmt-format_code_in_doc_comments: true\n \n //! ```rust\n //! println!( \"hello, world\" );"}, {"sha": "491d5c38fc22a62dfeccf35f29d07746d01453d1", "filename": "tests/source/issue-2523.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Fsource%2Fissue-2523.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Fsource%2Fissue-2523.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-2523.rs?ref=9b98dd774ed0a6ddbe914da0157aced6f076b9da", "patch": "@@ -1,4 +1,5 @@\n // rustfmt-normalize_comments: true\n+// rustfmt-format_code_in_doc_comments: true\n \n // Do not unindent macro calls in comment with unformattable syntax.\n //! ```rust"}, {"sha": "ad505547ac022d62916614e422f6da118ba3a9d4", "filename": "tests/source/issue-3055/original.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Fsource%2Fissue-3055%2Foriginal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Fsource%2Fissue-3055%2Foriginal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3055%2Foriginal.rs?ref=9b98dd774ed0a6ddbe914da0157aced6f076b9da", "patch": "@@ -1,4 +1,5 @@\n // rustfmt-wrap_comments: true\n+// rustfmt-format_code_in_doc_comments: true\n \n /// Vestibulum elit nibh, rhoncus non, euismod sit amet, pretium eu, enim. Nunc commodo ultricies dui.\n ///"}, {"sha": "a7b6a10a01050987eadd3f675862142afe2bf267", "filename": "tests/source/itemized-blocks/no_wrap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Fsource%2Fitemized-blocks%2Fno_wrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Fsource%2Fitemized-blocks%2Fno_wrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fitemized-blocks%2Fno_wrap.rs?ref=9b98dd774ed0a6ddbe914da0157aced6f076b9da", "patch": "@@ -1,4 +1,5 @@\n // rustfmt-normalize_comments: true\n+// rustfmt-format_code_in_doc_comments: true\n \n //! This is a list:\n //!  * Outer"}, {"sha": "955cc698b79f29d444c9adbc8ae16b506211fd10", "filename": "tests/source/itemized-blocks/wrap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Fsource%2Fitemized-blocks%2Fwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Fsource%2Fitemized-blocks%2Fwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fitemized-blocks%2Fwrap.rs?ref=9b98dd774ed0a6ddbe914da0157aced6f076b9da", "patch": "@@ -1,4 +1,5 @@\n // rustfmt-wrap_comments: true\n+// rustfmt-format_code_in_doc_comments: true\n // rustfmt-max_width: 50\n \n //! This is a list:"}, {"sha": "a97705bfb3bf1d0020be128197b3fe72efe2e83e", "filename": "tests/source/normalize_doc_attributes_should_not_imply_format_doc_comments.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Fsource%2Fnormalize_doc_attributes_should_not_imply_format_doc_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Fsource%2Fnormalize_doc_attributes_should_not_imply_format_doc_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fnormalize_doc_attributes_should_not_imply_format_doc_comments.rs?ref=9b98dd774ed0a6ddbe914da0157aced6f076b9da", "patch": "@@ -0,0 +1,15 @@\n+// rustfmt-normalize_doc_attributes: true\n+\n+/// Foo\n+///\n+/// # Example\n+/// ```\n+/// # #![cfg_attr(not(dox), feature(cfg_target_feature, target_feature, stdsimd))]\n+/// # #![cfg_attr(not(dox), no_std)]\n+/// fn foo() {  }\n+/// ```\n+///\n+fn foo() {}\n+\n+#[doc = \"Bar documents\"]\n+fn bar() {}"}, {"sha": "78b3ce146f2895a5e3a1fc4d0e9891e2aa530e90", "filename": "tests/source/wrap_comments_should_not_imply_format_doc_comments.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Fsource%2Fwrap_comments_should_not_imply_format_doc_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Fsource%2Fwrap_comments_should_not_imply_format_doc_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fwrap_comments_should_not_imply_format_doc_comments.rs?ref=9b98dd774ed0a6ddbe914da0157aced6f076b9da", "patch": "@@ -0,0 +1,16 @@\n+// rustfmt-wrap_comments: true\n+\n+/// Foo\n+///\n+/// # Example\n+/// ```\n+/// # #![cfg_attr(not(dox), feature(cfg_target_feature, target_feature, stdsimd))]\n+/// # #![cfg_attr(not(dox), no_std)]\n+/// fn foo() {  }\n+/// ```\n+///\n+fn foo() {}\n+\n+/// A long commment for wrapping\n+/// This is a long long long long long long long long long long long long long long long long long long long long sentence.\n+fn bar() {}"}, {"sha": "c5a4e779ea224c9b2e9932100f8d1d0713356a19", "filename": "tests/target/doc-comment-with-example.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Ftarget%2Fdoc-comment-with-example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Ftarget%2Fdoc-comment-with-example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fdoc-comment-with-example.rs?ref=9b98dd774ed0a6ddbe914da0157aced6f076b9da", "patch": "@@ -1,4 +1,4 @@\n-// rustfmt-format_doc_comments: true\n+// rustfmt-format_code_in_doc_comments: true\n \n /// Foo\n ///"}, {"sha": "f8479d4e34514b1fb34895b31d487077fcff1764", "filename": "tests/target/invalid-rust-code-in-doc-comment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Ftarget%2Finvalid-rust-code-in-doc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Ftarget%2Finvalid-rust-code-in-doc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Finvalid-rust-code-in-doc-comment.rs?ref=9b98dd774ed0a6ddbe914da0157aced6f076b9da", "patch": "@@ -1,4 +1,4 @@\n-// rustfmt-format_doc_comments: true\n+// rustfmt-format_code_in_doc_comments: true\n \n /// ```rust\n /// if (true) { \u2026 }"}, {"sha": "7c134d3972ba7a928b788033fd98ce54810881b1", "filename": "tests/target/issue-2520.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Ftarget%2Fissue-2520.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Ftarget%2Fissue-2520.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2520.rs?ref=9b98dd774ed0a6ddbe914da0157aced6f076b9da", "patch": "@@ -1,4 +1,5 @@\n // rustfmt-normalize_comments: true\n+// rustfmt-format_code_in_doc_comments: true\n \n //! ```rust\n //! println!(\"hello, world\");"}, {"sha": "612f93249acf5728ba665f9aee401d328e380858", "filename": "tests/target/issue-2523.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Ftarget%2Fissue-2523.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Ftarget%2Fissue-2523.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2523.rs?ref=9b98dd774ed0a6ddbe914da0157aced6f076b9da", "patch": "@@ -1,4 +1,5 @@\n // rustfmt-normalize_comments: true\n+// rustfmt-format_code_in_doc_comments: true\n \n // Do not unindent macro calls in comment with unformattable syntax.\n //! ```rust"}, {"sha": "de27ccfb344e5c796231cd287b378be19ef4e80a", "filename": "tests/target/issue-3055/original.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Ftarget%2Fissue-3055%2Foriginal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Ftarget%2Fissue-3055%2Foriginal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3055%2Foriginal.rs?ref=9b98dd774ed0a6ddbe914da0157aced6f076b9da", "patch": "@@ -1,4 +1,5 @@\n // rustfmt-wrap_comments: true\n+// rustfmt-format_code_in_doc_comments: true\n \n /// Vestibulum elit nibh, rhoncus non, euismod sit amet, pretium eu, enim. Nunc\n /// commodo ultricies dui."}, {"sha": "4ece90403e1f281de52409d2681c25d2d30add51", "filename": "tests/target/issue-3554.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Ftarget%2Fissue-3554.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Ftarget%2Fissue-3554.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3554.rs?ref=9b98dd774ed0a6ddbe914da0157aced6f076b9da", "patch": "@@ -0,0 +1,4 @@\n+#![feature(const_generics)]\n+\n+pub struct S<const N: usize>;\n+impl S<{ 0 }> {}"}, {"sha": "de885638272638d14ca369456a69b153d0c9a70b", "filename": "tests/target/itemized-blocks/no_wrap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Ftarget%2Fitemized-blocks%2Fno_wrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Ftarget%2Fitemized-blocks%2Fno_wrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fitemized-blocks%2Fno_wrap.rs?ref=9b98dd774ed0a6ddbe914da0157aced6f076b9da", "patch": "@@ -1,4 +1,5 @@\n // rustfmt-normalize_comments: true\n+// rustfmt-format_code_in_doc_comments: true\n \n //! This is a list:\n //!  * Outer"}, {"sha": "a4907303c9e1bf159e507ff6c80af3bacd51877a", "filename": "tests/target/itemized-blocks/wrap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Ftarget%2Fitemized-blocks%2Fwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Ftarget%2Fitemized-blocks%2Fwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fitemized-blocks%2Fwrap.rs?ref=9b98dd774ed0a6ddbe914da0157aced6f076b9da", "patch": "@@ -1,4 +1,5 @@\n // rustfmt-wrap_comments: true\n+// rustfmt-format_code_in_doc_comments: true\n // rustfmt-max_width: 50\n \n //! This is a list:"}, {"sha": "562d9565e9a9606aa27a7df5d553f2d47ea2decb", "filename": "tests/target/normalize_doc_attributes_should_not_imply_format_doc_comments.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Ftarget%2Fnormalize_doc_attributes_should_not_imply_format_doc_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Ftarget%2Fnormalize_doc_attributes_should_not_imply_format_doc_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fnormalize_doc_attributes_should_not_imply_format_doc_comments.rs?ref=9b98dd774ed0a6ddbe914da0157aced6f076b9da", "patch": "@@ -0,0 +1,15 @@\n+// rustfmt-normalize_doc_attributes: true\n+\n+/// Foo\n+///\n+/// # Example\n+/// ```\n+/// # #![cfg_attr(not(dox), feature(cfg_target_feature, target_feature, stdsimd))]\n+/// # #![cfg_attr(not(dox), no_std)]\n+/// fn foo() {  }\n+/// ```\n+///\n+fn foo() {}\n+\n+///Bar documents\n+fn bar() {}"}, {"sha": "d61d4d7c216a309406c9a13a3898766ff151ae6d", "filename": "tests/target/wrap_comments_should_not_imply_format_doc_comments.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Ftarget%2Fwrap_comments_should_not_imply_format_doc_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98dd774ed0a6ddbe914da0157aced6f076b9da/tests%2Ftarget%2Fwrap_comments_should_not_imply_format_doc_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fwrap_comments_should_not_imply_format_doc_comments.rs?ref=9b98dd774ed0a6ddbe914da0157aced6f076b9da", "patch": "@@ -0,0 +1,16 @@\n+// rustfmt-wrap_comments: true\n+\n+/// Foo\n+///\n+/// # Example\n+/// ```\n+/// # #![cfg_attr(not(dox), feature(cfg_target_feature, target_feature, stdsimd))]\n+/// # #![cfg_attr(not(dox), no_std)]\n+/// fn foo() {  }\n+/// ```\n+fn foo() {}\n+\n+/// A long commment for wrapping\n+/// This is a long long long long long long long long long long long long long\n+/// long long long long long long long sentence.\n+fn bar() {}"}]}