{"sha": "0c1ffc1d1fdfd73bf326d1e7a886f59367374dc3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMWZmYzFkMWZkZmQ3M2JmMzI2ZDFlN2E4ODZmNTkzNjczNzRkYzM=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-11-04T08:02:49Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-11-04T08:02:49Z"}, "message": "Fix `possible_missing_comma` false positives\n\n`possible_missing_comma` should only trigger when the binary operator has\nunary equivalent. Otherwise, it's not possible to insert a comma without\nbreaking compilation. The operators identified were `+`, `&`, `*` and `-`.\n\nThis fixes the specific examples given in issues #3244 and #3396\nbut doesn't address the conflict this lint has with the style of starting\na line with a binary operator.", "tree": {"sha": "719526c69e0e02c9b2b19adf7098efd71cd6bd07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/719526c69e0e02c9b2b19adf7098efd71cd6bd07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c1ffc1d1fdfd73bf326d1e7a886f59367374dc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c1ffc1d1fdfd73bf326d1e7a886f59367374dc3", "html_url": "https://github.com/rust-lang/rust/commit/0c1ffc1d1fdfd73bf326d1e7a886f59367374dc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c1ffc1d1fdfd73bf326d1e7a886f59367374dc3/comments", "author": null, "committer": null, "parents": [{"sha": "a07c2715594b17fca900c6c4a497c8fb6abde609", "url": "https://api.github.com/repos/rust-lang/rust/commits/a07c2715594b17fca900c6c4a497c8fb6abde609", "html_url": "https://github.com/rust-lang/rust/commit/a07c2715594b17fca900c6c4a497c8fb6abde609"}], "stats": {"total": 48, "additions": 35, "deletions": 13}, "files": [{"sha": "8649834e267eebb8846be4b581f7b909b89528f5", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0c1ffc1d1fdfd73bf326d1e7a886f59367374dc3/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1ffc1d1fdfd73bf326d1e7a886f59367374dc3/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=0c1ffc1d1fdfd73bf326d1e7a886f59367374dc3", "patch": "@@ -173,24 +173,34 @@ fn check_else_if(cx: &EarlyContext<'_>, expr: &ast::Expr) {\n     }\n }\n \n+fn has_unary_equivalent(bin_op: ast::BinOpKind) -> bool {\n+    //+, &, *, -\n+    bin_op == ast::BinOpKind::Add\n+    || bin_op == ast::BinOpKind::And\n+    || bin_op == ast::BinOpKind::Mul\n+    || bin_op == ast::BinOpKind::Sub\n+}\n+\n /// Implementation of the `POSSIBLE_MISSING_COMMA` lint for array\n fn check_array(cx: &EarlyContext<'_>, expr: &ast::Expr) {\n     if let ast::ExprKind::Array(ref array) = expr.node {\n         for element in array {\n             if let ast::ExprKind::Binary(ref op, ref lhs, _) = element.node {\n-                if !differing_macro_contexts(lhs.span, op.span) {\n-                    let space_span = lhs.span.between(op.span);\n-                    if let Some(space_snippet) = snippet_opt(cx, space_span) {\n-                        let lint_span = lhs.span.with_lo(lhs.span.hi());\n-                        if space_snippet.contains('\\n') {\n-                            span_note_and_lint(\n-                                cx,\n-                                POSSIBLE_MISSING_COMMA,\n-                                lint_span,\n-                                \"possibly missing a comma here\",\n-                                lint_span,\n-                                \"to remove this lint, add a comma or write the expr in a single line\",\n-                            );\n+                if has_unary_equivalent(op.node) {\n+                    if !differing_macro_contexts(lhs.span, op.span) {\n+                        let space_span = lhs.span.between(op.span);\n+                        if let Some(space_snippet) = snippet_opt(cx, space_span) {\n+                            let lint_span = lhs.span.with_lo(lhs.span.hi());\n+                            if space_snippet.contains('\\n') {\n+                                span_note_and_lint(\n+                                    cx,\n+                                    POSSIBLE_MISSING_COMMA,\n+                                    lint_span,\n+                                    \"possibly missing a comma here\",\n+                                    lint_span,\n+                                    \"to remove this lint, add a comma or write the expr in a single line\",\n+                                );\n+                            }\n                         }\n                     }\n                 }"}, {"sha": "88f6e497d12e741a3d6609702cbdf3c401f5a8fc", "filename": "tests/ui/formatting.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0c1ffc1d1fdfd73bf326d1e7a886f59367374dc3/tests%2Fui%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1ffc1d1fdfd73bf326d1e7a886f59367374dc3/tests%2Fui%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformatting.rs?ref=0c1ffc1d1fdfd73bf326d1e7a886f59367374dc3", "patch": "@@ -112,4 +112,16 @@ fn main() {\n         1 + 2, 3 +\n         4, 5 + 6,\n     ];\n+\n+    // don't lint for bin op without unary equiv\n+    // issue 3244\n+    vec![\n+        1\n+        / 2,\n+    ];\n+    // issue 3396\n+    vec![\n+        true\n+        | false,\n+    ];\n }"}]}