{"sha": "f2826d9e9bcba3c161812fca893f98b3dc010f19", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyODI2ZDllOWJjYmEzYzE2MTgxMmZjYTg5M2Y5OGIzZGMwMTBmMTk=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-25T22:45:57Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-09-05T17:48:19Z"}, "message": "Show the first path segment which failed to resolve.\n\nBefore, it would arbitrarily pick the third-to-last if the last three or\nmore did not resolve.", "tree": {"sha": "cfabaf8eca4dd27995477a48ab1ce8dcc711ae4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfabaf8eca4dd27995477a48ab1ce8dcc711ae4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2826d9e9bcba3c161812fca893f98b3dc010f19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2826d9e9bcba3c161812fca893f98b3dc010f19", "html_url": "https://github.com/rust-lang/rust/commit/f2826d9e9bcba3c161812fca893f98b3dc010f19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2826d9e9bcba3c161812fca893f98b3dc010f19/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb9d1576044020851ff2f528879a41e1ca0b7b5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb9d1576044020851ff2f528879a41e1ca0b7b5d", "html_url": "https://github.com/rust-lang/rust/commit/bb9d1576044020851ff2f528879a41e1ca0b7b5d"}], "stats": {"total": 49, "additions": 36, "deletions": 13}, "files": [{"sha": "098ac13ffe2380b40737c2142174fdfc2760cc9b", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f2826d9e9bcba3c161812fca893f98b3dc010f19/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2826d9e9bcba3c161812fca893f98b3dc010f19/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=f2826d9e9bcba3c161812fca893f98b3dc010f19", "patch": "@@ -156,15 +156,35 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n             .ok_or(ErrorKind::Resolve(ResolutionFailure::NotInScope(\n                 variant_name.to_string().into(),\n             )))?;\n-        let (_, ty_res) = cx\n+        let ty_res = cx\n             .enter_resolver(|resolver| {\n                 resolver.resolve_str_path_error(DUMMY_SP, &path, TypeNS, module_id)\n             })\n-            .map_err(|_| {\n-                ErrorKind::Resolve(ResolutionFailure::NotInScope(path.to_string().into()))\n-            })?;\n+            .map(|(_, res)| res)\n+            .unwrap_or(Res::Err);\n+        // This code only gets hit if three path segments in a row don't get resolved.\n+        // It's a good time to check if _any_ parent of the path gets resolved.\n+        // If so, report it and say the first which failed; if not, say the first path segment didn't resolve.\n         if let Res::Err = ty_res {\n-            return Err(ErrorKind::Resolve(ResolutionFailure::NotInScope(path.to_string().into())));\n+            let mut current = path.as_str();\n+            while let Some(parent) = current.rsplitn(2, \"::\").nth(1) {\n+                current = parent;\n+                if let Some(res) = self.check_full_res(\n+                    TypeNS,\n+                    &current,\n+                    Some(module_id),\n+                    current_item,\n+                    extra_fragment,\n+                ) {\n+                    return Err(ErrorKind::Resolve(ResolutionFailure::NoAssocItem(\n+                        res,\n+                        Symbol::intern(&path),\n+                    )));\n+                }\n+            }\n+            return Err(ErrorKind::Resolve(ResolutionFailure::NotInScope(\n+                current.to_string().into(),\n+            )));\n         }\n         let ty_res = ty_res.map_id(|_| panic!(\"unexpected node_id\"));\n         match ty_res {"}, {"sha": "d8d4ebeb60bdbc02b9167299b6a40f7b277c54c2", "filename": "src/test/rustdoc-ui/intra-link-errors.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f2826d9e9bcba3c161812fca893f98b3dc010f19/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2826d9e9bcba3c161812fca893f98b3dc010f19/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.rs?ref=f2826d9e9bcba3c161812fca893f98b3dc010f19", "patch": "@@ -4,10 +4,9 @@\n // FIXME: this should say that it was skipped (maybe an allowed by default lint?)\n /// [<invalid syntax>]\n \n-// FIXME: this could say which path was the first to not be found (in this case, `path`)\n /// [path::to::nonexistent::module]\n //~^ ERROR unresolved link\n-//~| NOTE no item named `path::to` is in scope\n+//~| NOTE no item named `path` is in scope\n //~| HELP to escape\n \n /// [std::io::not::here]\n@@ -44,7 +43,7 @@\n \n /// [S!]\n //~^ ERROR unresolved link\n-//~| HELP to link to the struct, use its disambiguator\n+//~| HELP to link to the struct, prefix with the item kind\n //~| NOTE this link resolves to the struct `S`\n pub fn f() {}\n #[derive(Debug)]"}, {"sha": "0275fd692feb4343b9e242eda78337f0d9f21d76", "filename": "src/test/rustdoc-ui/intra-link-errors.stderr", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f2826d9e9bcba3c161812fca893f98b3dc010f19/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2826d9e9bcba3c161812fca893f98b3dc010f19/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.stderr?ref=f2826d9e9bcba3c161812fca893f98b3dc010f19", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n-   = note: no item named `path::to` is in scope\n+   = note: no item named `path` is in scope\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n error: unresolved link to `std::io::not::here`\n@@ -80,15 +80,19 @@ error: unresolved link to `S`\n   --> $DIR/intra-link-errors.rs:45:6\n    |\n LL | /// [S!]\n-   |      ^^ help: to link to the struct, use its disambiguator: `struct@S`\n+   |      ^^\n    |\n    = note: this link resolves to the struct `S`, which is not in the macro namespace\n+help: to link to the struct, prefix with the item kind\n+   |\n+LL | /// [struct@S]\n+   |      ^^^^^^^^\n \n error: unresolved link to `T::g`\n   --> $DIR/intra-link-errors.rs:63:6\n    |\n LL | /// [type@T::g]\n-   |      ^^^^^^^^^ help: to link to the associated function, use its disambiguator: `T::g()`\n+   |      ^^^^^^^^^ help: to link to the associated function, add parentheses: `T::g()`\n    |\n    = note: this link resolves to the associated function `g`, which is not in the type namespace\n \n@@ -105,15 +109,15 @@ error: unresolved link to `S::h`\n   --> $DIR/intra-link-errors.rs:55:6\n    |\n LL | /// [type@S::h]\n-   |      ^^^^^^^^^ help: to link to the associated function, use its disambiguator: `S::h()`\n+   |      ^^^^^^^^^ help: to link to the associated function, add parentheses: `S::h()`\n    |\n    = note: this link resolves to the associated function `h`, which is not in the type namespace\n \n error: unresolved link to `m`\n   --> $DIR/intra-link-errors.rs:76:6\n    |\n LL | /// [m()]\n-   |      ^^^ help: to link to the macro, use its disambiguator: `m!`\n+   |      ^^^ help: to link to the macro, add an exclamation mark: `m!`\n    |\n    = note: this link resolves to the macro `m`, which is not in the value namespace\n "}]}