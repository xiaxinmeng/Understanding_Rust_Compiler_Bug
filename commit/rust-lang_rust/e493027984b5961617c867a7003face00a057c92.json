{"sha": "e493027984b5961617c867a7003face00a057c92", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0OTMwMjc5ODRiNTk2MTYxN2M4NjdhNzAwM2ZhY2UwMGEwNTdjOTI=", "commit": {"author": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2015-08-01T23:07:38Z"}, "committer": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2015-08-02T05:00:46Z"}, "message": "When a `nounwind` function has a personality routine, LLVM messes up .seh directives (happens to `rust_try` in optimized builds).  A workaround is to give `rust_try` the `uwtable` attribute.\nAlso, make sure that the dummy \"load from null\" instruction inserted by init_function() gets cleaned up.", "tree": {"sha": "a8c9cda54b4311b0f74432aaab293a98afc6c428", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8c9cda54b4311b0f74432aaab293a98afc6c428"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e493027984b5961617c867a7003face00a057c92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e493027984b5961617c867a7003face00a057c92", "html_url": "https://github.com/rust-lang/rust/commit/e493027984b5961617c867a7003face00a057c92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e493027984b5961617c867a7003face00a057c92/comments", "author": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6112b220782134c70516301f7dab2e05e3283f54", "url": "https://api.github.com/repos/rust-lang/rust/commits/6112b220782134c70516301f7dab2e05e3283f54", "html_url": "https://github.com/rust-lang/rust/commit/6112b220782134c70516301f7dab2e05e3283f54"}], "stats": {"total": 3, "additions": 3, "deletions": 0}, "files": [{"sha": "0400771dff15c0cebe0f1b967447b2af19b95d34", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e493027984b5961617c867a7003face00a057c92/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e493027984b5961617c867a7003face00a057c92/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=e493027984b5961617c867a7003face00a057c92", "patch": "@@ -16,6 +16,7 @@ use llvm::{SequentiallyConsistent, Acquire, Release, AtomicXchg, ValueRef, TypeK\n use middle::subst;\n use middle::subst::FnSpace;\n use trans::adt;\n+use trans::attributes;\n use trans::base::*;\n use trans::build::*;\n use trans::callee;\n@@ -1189,6 +1190,7 @@ fn trans_gnu_try<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         //      ret ptr\n \n         let rust_try = declare::define_internal_rust_fn(ccx, \"__rust_try\", try_fn_ty);\n+        attributes::emit_uwtable(rust_try, true);\n         let catch_pers = match bcx.tcx().lang_items.eh_personality_catch() {\n             Some(did) => callee::trans_fn_ref(ccx, did, ExprId(0),\n                                               bcx.fcx.param_substs).val,\n@@ -1219,6 +1221,7 @@ fn trans_gnu_try<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         AddClause(catch, vals, C_null(Type::i8p(ccx)));\n         let ptr = ExtractValue(catch, vals, 0);\n         Ret(catch, ptr, dloc);\n+        fcx.cleanup();\n \n         return rust_try\n     });"}]}