{"sha": "476d0438749e3a5b2669811f9429da79a6628e8a", "node_id": "C_kwDOAAsO6NoAKDQ3NmQwNDM4NzQ5ZTNhNWIyNjY5ODExZjk0MjlkYTc5YTY2MjhlOGE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-04T18:26:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-04T18:26:43Z"}, "message": "Auto merge of #13344 - lowr:patch/change-generic-param-order, r=Veykril\n\nfix: use `BoundVar`s from current generic scope\n\nFixup for #13335, addresses https://github.com/rust-lang/rust-analyzer/pull/13339#issuecomment-1266654607\n\nBefore the change in generic parameter order, `BoundVar`s for trait reference didn't change whether you are in an impl's scope or in an associated item's scope. Now that item's generic params come before its parent's, we need to shift their indices when we are in an associated item's scope.", "tree": {"sha": "ced79f86e6d8016d2e22dbe5043ba6e71422899b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ced79f86e6d8016d2e22dbe5043ba6e71422899b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/476d0438749e3a5b2669811f9429da79a6628e8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/476d0438749e3a5b2669811f9429da79a6628e8a", "html_url": "https://github.com/rust-lang/rust/commit/476d0438749e3a5b2669811f9429da79a6628e8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/476d0438749e3a5b2669811f9429da79a6628e8a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b429df2653bd209e27619cebe1f6ce6a5477142a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b429df2653bd209e27619cebe1f6ce6a5477142a", "html_url": "https://github.com/rust-lang/rust/commit/b429df2653bd209e27619cebe1f6ce6a5477142a"}, {"sha": "ded3326a64c2ef220f3cec9af863f738749d6ce2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ded3326a64c2ef220f3cec9af863f738749d6ce2", "html_url": "https://github.com/rust-lang/rust/commit/ded3326a64c2ef220f3cec9af863f738749d6ce2"}], "stats": {"total": 36, "additions": 33, "deletions": 3}, "files": [{"sha": "223d705b157b32c03755a65e416ae380c1d22916", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/476d0438749e3a5b2669811f9429da79a6628e8a/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/476d0438749e3a5b2669811f9429da79a6628e8a/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=476d0438749e3a5b2669811f9429da79a6628e8a", "patch": "@@ -1158,11 +1158,28 @@ fn named_associated_type_shorthand_candidates<R>(\n     };\n \n     match res {\n-        TypeNs::SelfType(impl_id) => search(\n+        TypeNs::SelfType(impl_id) => {\n             // we're _in_ the impl -- the binders get added back later. Correct,\n             // but it would be nice to make this more explicit\n-            db.impl_trait(impl_id)?.into_value_and_skipped_binders().0,\n-        ),\n+            let trait_ref = db.impl_trait(impl_id)?.into_value_and_skipped_binders().0;\n+\n+            let impl_id_as_generic_def: GenericDefId = impl_id.into();\n+            if impl_id_as_generic_def != def {\n+                // `trait_ref` contains `BoundVar`s bound by impl's `Binders`, but here we need\n+                // `BoundVar`s from `def`'s point of view.\n+                // FIXME: A `HirDatabase` query may be handy if this process is needed in more\n+                // places. It'd be almost identical as `impl_trait_query` where `resolver` would be\n+                // of `def` instead of `impl_id`.\n+                let starting_idx = generics(db.upcast(), def).len_self();\n+                let subst = TyBuilder::subst_for_def(db, impl_id, None)\n+                    .fill_with_bound_vars(DebruijnIndex::INNERMOST, starting_idx)\n+                    .build();\n+                let trait_ref = subst.apply(trait_ref, Interner);\n+                search(trait_ref)\n+            } else {\n+                search(trait_ref)\n+            }\n+        }\n         TypeNs::GenericParam(param_id) => {\n             let predicates = db.generic_predicates_for_param(def, param_id.into(), assoc_name);\n             let res = predicates.iter().find_map(|pred| match pred.skip_binders().skip_binders() {"}, {"sha": "a155adcec6c33b43335dbcaff4ae864cfb88f8a6", "filename": "crates/hir-ty/src/tests/regression.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/476d0438749e3a5b2669811f9429da79a6628e8a/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/476d0438749e3a5b2669811f9429da79a6628e8a/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs?ref=476d0438749e3a5b2669811f9429da79a6628e8a", "patch": "@@ -1694,3 +1694,16 @@ fn foo(a: &dyn DoesNotExist) {\n         \"#,\n     );\n }\n+\n+#[test]\n+fn self_assoc_with_const_generics_crash() {\n+    check_no_mismatches(\n+        r#\"\n+trait Trait { type Item; }\n+impl<T, const N: usize> Trait for [T; N] {\n+    type Item = ();\n+    fn f<U>(_: Self::Item) {}\n+}\n+        \"#,\n+    );\n+}"}]}