{"sha": "5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMTNkMTljYzA3YTFlOGZiZjQ3OGQyMWNhYmJkN2I5ZjgwZTNiNTQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-23T22:59:00Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-24T03:06:33Z"}, "message": "s/block()/fn()/g", "tree": {"sha": "c1fc2dd89c651efa1daa4e7d63c5b82b2a5f4bd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1fc2dd89c651efa1daa4e7d63c5b82b2a5f4bd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "html_url": "https://github.com/rust-lang/rust/commit/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04351a84ca342f4580e40b9c195b5403b864090b", "url": "https://api.github.com/repos/rust-lang/rust/commits/04351a84ca342f4580e40b9c195b5403b864090b", "html_url": "https://github.com/rust-lang/rust/commit/04351a84ca342f4580e40b9c195b5403b864090b"}], "stats": {"total": 307, "additions": 152, "deletions": 155}, "files": [{"sha": "ec527ab0173d1d6b5f880e32802f68ca1265611b", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -349,7 +349,7 @@ fn configure() -> cargo {\n     c\n }\n \n-fn for_each_package(c: cargo, b: block(source, package)) {\n+fn for_each_package(c: cargo, b: fn(source, package)) {\n     c.sources.values({ |v|\n         for p in copy v.packages {\n             b(v, p);"}, {"sha": "e3201834a3d7ff14203968f7540dc23220e65841", "filename": "src/comp/metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcstore.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -93,7 +93,7 @@ fn have_crate_data(cstore: cstore, cnum: ast::crate_num) -> bool {\n     ret p(cstore).metas.contains_key(cnum);\n }\n \n-fn iter_crate_data(cstore: cstore, i: block(ast::crate_num, crate_metadata)) {\n+fn iter_crate_data(cstore: cstore, i: fn(ast::crate_num, crate_metadata)) {\n     p(cstore).metas.items {|k,v| i(k, v);};\n }\n "}, {"sha": "bdd4623bbeaa440e22b2c94ef39f0f69bcd05486", "filename": "src/comp/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fdecoder.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -460,7 +460,7 @@ fn list_crate_items(bytes: @[u8], md: ebml::doc, out: io::writer) {\n     out.write_str(\"\\n\");\n }\n \n-fn iter_crate_items(bytes: @[u8], proc: block(str, ast::def_id)) {\n+fn iter_crate_items(bytes: @[u8], proc: fn(str, ast::def_id)) {\n     let md = ebml::new_doc(bytes);\n     let paths = ebml::get_doc(md, tag_paths);\n     let index = ebml::get_doc(paths, tag_index);"}, {"sha": "cc79e6a2bf0bcd8a4071d52221cdfc81ed7f5e92", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -486,7 +486,7 @@ fn create_index<T: copy>(index: [entry<T>], hash_fn: fn@(T) -> uint) ->\n }\n \n fn encode_index<T>(ebml_w: ebml::writer, buckets: [@[entry<T>]],\n-                   write_fn: block(io::writer, T)) {\n+                   write_fn: fn(io::writer, T)) {\n     let writer = ebml_w.writer;\n     ebml::start_tag(ebml_w, tag_index);\n     let bucket_locs: [uint] = [];"}, {"sha": "2e4e5cdc66dba0dbb965dcc9c2821e705a5f5ec8", "filename": "src/comp/metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftydecode.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -16,7 +16,7 @@ export parse_bounds_data;\n // data buffer. Whatever format you choose should not contain pipe characters.\n \n // Callback to translate defs to strs or back:\n-type conv_did = block(ast::def_id) -> ast::def_id;\n+type conv_did = fn(ast::def_id) -> ast::def_id;\n \n type pstate = {data: @[u8], crate: int, mutable pos: uint, tcx: ty::ctxt};\n \n@@ -138,7 +138,7 @@ fn parse_ty_constr_arg(st: @pstate) -> ast::constr_arg_general_<@path> {\n }\n \n fn parse_constr<T: copy>(st: @pstate, conv: conv_did,\n-                         pser: block(@pstate) -> ast::constr_arg_general_<T>)\n+                         pser: fn(@pstate) -> ast::constr_arg_general_<T>)\n     -> @ty::constr_general<T> {\n     let sp = ast_util::dummy_sp(); // FIXME: use a real span\n     let args: [@sp_constr_arg<T>] = [];"}, {"sha": "ea301228db65e54ff969ab513304dc0bf951569c", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -436,7 +436,7 @@ fn check_if(c: @ast::expr, then: ast::blk, els: option::t<@ast::expr>,\n     *sc.invalid = append_invalid(*sc.invalid, then_invalid, orig_invalid);\n }\n \n-fn check_loop(cx: ctx, sc: scope, checker: block()) {\n+fn check_loop(cx: ctx, sc: scope, checker: fn()) {\n     let orig_invalid = filter_invalid(*sc.invalid, sc.bs);\n     checker();\n     let new_invalid = filter_invalid(*sc.invalid, sc.bs);"}, {"sha": "fdc1c51cbd6e0d3c067f2da88242c9ea2f37cd3f", "filename": "src/comp/middle/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -140,7 +140,7 @@ fn md_from_metadata<T>(val: debug_metadata) -> T unsafe {\n }\n \n fn cached_metadata<T: copy>(cache: metadata_cache, mdtag: int,\n-                           eq: block(md: T) -> bool) -> option::t<T> unsafe {\n+                           eq: fn(md: T) -> bool) -> option::t<T> unsafe {\n     if cache.contains_key(mdtag) {\n         let items = cache.get(mdtag);\n         for item in items {"}, {"sha": "db35362f3ea087181333b52f881ec318edc98330", "filename": "src/comp/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fkind.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -58,7 +58,7 @@ fn check_crate(tcx: ty::ctxt, method_map: typeck::method_map,\n // variables. `id` is the node_id for some expression that creates the\n // closure.\n fn with_appropriate_checker(cx: ctx, id: node_id,\n-                            b: block(fn@(ctx, ty::t, sp: span))) {\n+                            b: fn(fn@(ctx, ty::t, sp: span))) {\n     let fty = ty::node_id_to_monotype(cx.tcx, id);\n     alt ty::ty_fn_proto(cx.tcx, fty) {\n       proto_uniq { b(check_send); }"}, {"sha": "af078afe53f2080b71006bd322f9bad9c927c73e", "filename": "src/comp/middle/last_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fmiddle%2Flast_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fmiddle%2Flast_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Flast_use.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -203,7 +203,7 @@ fn visit_fn(fk: visit::fn_kind, decl: fn_decl, body: blk,\n     }\n }\n \n-fn visit_block(tp: block_type, cx: ctx, visit: block()) {\n+fn visit_block(tp: block_type, cx: ctx, visit: fn()) {\n     let local = @{type: tp, mutable second: false, mutable exits: []};\n     cx.blocks = cons(local, @cx.blocks);\n     visit();"}, {"sha": "838764171f0e1677b738286db3f57acc0076824b", "filename": "src/comp/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Flint.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -26,7 +26,7 @@ impl opt_ for option {\n }\n \n // FIXME: Copied from driver.rs, to work around a bug(#1566)\n-fn time(do_it: bool, what: str, thunk: block()) {\n+fn time(do_it: bool, what: str, thunk: fn()) {\n     if !do_it{ ret thunk(); }\n     let start = std::time::precise_time_s();\n     thunk();"}, {"sha": "9e50355f43ed9a48685a0d4e84e4c54fd3f4ce8b", "filename": "src/comp/middle/pat_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fpat_util.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -91,7 +91,7 @@ fn pat_id_map(tcx: ty::ctxt, pat: @pat) -> pat_id_map {\n // This does *not* normalize. The pattern should be already normalized\n // if you want to get a normalized pattern out of it.\n // Could return a constrained type in order to express that (future work)\n-fn pat_bindings(pat: @pat, it: block(@pat)) {\n+fn pat_bindings(pat: @pat, it: fn(@pat)) {\n   alt pat.node {\n       pat_ident(_, option::none) { it(pat); }\n       pat_ident(_, option::some(sub)) { it(pat); pat_bindings(sub, it); }"}, {"sha": "1d54ed2799774c4caa2dc1312c5f2f43b8349548", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -632,7 +632,7 @@ fn resolve_constr(e: @env, c: @ast::constr, sc: scopes, _v: vt<scopes>) {\n fn resolve_import(e: env, defid: ast::def_id, name: ast::ident,\n                   ids: [ast::ident], sp: codemap::span, sc: scopes) {\n     fn register(e: env, id: node_id, cx: ctxt, sp: codemap::span,\n-                name: ast::ident, lookup: block(namespace) -> option::t<def>,\n+                name: ast::ident, lookup: fn(namespace) -> option::t<def>,\n                 impls: [@_impl]) {\n         let val = lookup(ns_val(ns_any_value)), typ = lookup(ns_type),\n             md = lookup(ns_module);\n@@ -1712,7 +1712,7 @@ fn add_name(ch: checker, sp: span, name: ident) {\n \n fn ident_id(&&i: ident) -> ident { ret i; }\n \n-fn ensure_unique<T>(e: env, sp: span, elts: [T], id: block(T) -> ident,\n+fn ensure_unique<T>(e: env, sp: span, elts: [T], id: fn(T) -> ident,\n                     kind: str) {\n     let ch = checker(e, kind);\n     for elt: T in elts { add_name(ch, sp, id(elt)); }"}, {"sha": "8de5d7257e27b68bfcc2de677e4bb14ef411253a", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -3233,8 +3233,8 @@ fn invoke_full(bcx: @block_ctxt, llfn: ValueRef, llargs: [ValueRef],\n fn invoke_(bcx: @block_ctxt, llfn: ValueRef, llargs: [ValueRef],\n            to_zero: [{v: ValueRef, t: ty::t}],\n            to_revoke: [{v: ValueRef, t: ty::t}],\n-           invoker: block(@block_ctxt, ValueRef, [ValueRef],\n-                          BasicBlockRef, BasicBlockRef)) -> @block_ctxt {\n+           invoker: fn(@block_ctxt, ValueRef, [ValueRef],\n+                       BasicBlockRef, BasicBlockRef)) -> @block_ctxt {\n     // FIXME: May be worth turning this into a plain call when there are no\n     // cleanups to run\n     if bcx.unreachable { ret bcx; }\n@@ -4106,7 +4106,7 @@ fn trans_fn_cleanups(fcx: @fn_ctxt, cx: @block_ctxt) {\n     }\n }\n \n-fn block_locals(b: ast::blk, it: block(@ast::local)) {\n+fn block_locals(b: ast::blk, it: fn(@ast::local)) {\n     for s: @ast::stmt in b.node.stmts {\n         alt s.node {\n           ast::stmt_decl(d, _) {\n@@ -4423,7 +4423,7 @@ enum self_arg { impl_self(ty::t), no_self, }\n fn trans_closure(cx: @local_ctxt, sp: span, decl: ast::fn_decl,\n                  body: ast::blk, llfndecl: ValueRef,\n                  ty_self: self_arg, ty_params: [ast::ty_param],\n-                 id: ast::node_id, maybe_load_env: block(@fn_ctxt)) {\n+                 id: ast::node_id, maybe_load_env: fn(@fn_ctxt)) {\n     set_uwtable(llfndecl);\n \n     // Set up arguments to the function."}, {"sha": "3f7c8181ab538030e586f63061aceba6bd4ce114", "filename": "src/comp/middle/trans_closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -57,7 +57,7 @@ import shape::{size_of};\n // closure is allocated in the task heap and is reference counted.\n // For a block, the closure is allocated on the stack.  Note that in\n // all cases we allocate space for a ref count just to make our lives\n-// easier when upcasting to block(T)->U, in the shape code, and so\n+// easier when upcasting to fn(T)->U, in the shape code, and so\n // forth.\n //\n // ## Opaque Closures ##\n@@ -637,7 +637,7 @@ fn trans_bind_1(cx: @block_ctxt, outgoing_fty: ty::t,\n fn make_null_test(\n     in_bcx: @block_ctxt,\n     ptr: ValueRef,\n-    blk: block(@block_ctxt) -> @block_ctxt)\n+    blk: fn(@block_ctxt) -> @block_ctxt)\n     -> @block_ctxt {\n     let not_null_bcx = new_sub_block_ctxt(in_bcx, \"not null\");\n     let next_bcx = new_sub_block_ctxt(in_bcx, \"next\");"}, {"sha": "ff4a8db24a7c441e5946e1a2e3f1ff523281a693", "filename": "src/comp/middle/trans_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -157,7 +157,7 @@ fn trans_vtable(ccx: @crate_ctxt, id: ast::node_id, name: str,\n }\n \n fn trans_wrapper(ccx: @crate_ctxt, pt: [ast::ident], llfty: TypeRef,\n-                 fill: block(ValueRef, @block_ctxt) -> @block_ctxt)\n+                 fill: fn(ValueRef, @block_ctxt) -> @block_ctxt)\n     -> ValueRef {\n     let lcx = @{path: pt, module_path: [], ccx: ccx};\n     let name = link::mangle_internal_name_by_path(ccx, pt);"}, {"sha": "c31da3cfecd182a1d6856fadfcd3b950bb59258e", "filename": "src/comp/middle/trans_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fmiddle%2Ftrans_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fmiddle%2Ftrans_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_vec.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -258,7 +258,7 @@ fn trans_add(bcx: @block_ctxt, vec_ty: ty::t, lhs: ValueRef,\n \n type val_and_ty_fn = fn@(@block_ctxt, ValueRef, ty::t) -> result;\n \n-type iter_vec_block = block(@block_ctxt, ValueRef, ty::t) -> @block_ctxt;\n+type iter_vec_block = fn(@block_ctxt, ValueRef, ty::t) -> @block_ctxt;\n \n fn iter_vec_raw(bcx: @block_ctxt, vptr: ValueRef, vec_ty: ty::t,\n                 fill: ValueRef, f: iter_vec_block) -> @block_ctxt {"}, {"sha": "b367b5b6cb3f3252431e397cac8af3c714f6f6a3", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -968,7 +968,7 @@ fn non_init_constraint_mentions(_fcx: fn_ctxt, c: norm_constraint, v: node_id)\n }\n \n fn args_mention<T>(args: [@constr_arg_use],\n-                   q: block([T], node_id) -> bool,\n+                   q: fn([T], node_id) -> bool,\n                    s: [T]) -> bool {\n     /*\n       FIXME"}, {"sha": "2af258d120a9502a30423431987d8e6a1942833b", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -1083,7 +1083,7 @@ fn type_is_native(cx: ctxt, ty: t) -> bool {\n     alt struct(cx, ty) { ty_native(_) { ret true; } _ { ret false; } }\n }\n \n-fn type_structurally_contains(cx: ctxt, ty: t, test: block(sty) -> bool) ->\n+fn type_structurally_contains(cx: ctxt, ty: t, test: fn(sty) -> bool) ->\n    bool {\n     let sty = struct(cx, ty);\n     if test(sty) { ret true; }\n@@ -1420,7 +1420,7 @@ fn hash_type_structure(st: sty) -> uint {\n \n fn hash_raw_ty(&&rt: @raw_t) -> uint { ret rt.hash; }\n \n-fn arg_eq<T>(eq: block(T, T) -> bool,\n+fn arg_eq<T>(eq: fn(T, T) -> bool,\n              a: @sp_constr_arg<T>,\n              b: @sp_constr_arg<T>)\n    -> bool {\n@@ -1439,7 +1439,7 @@ fn arg_eq<T>(eq: block(T, T) -> bool,\n     }\n }\n \n-fn args_eq<T>(eq: block(T, T) -> bool,\n+fn args_eq<T>(eq: fn(T, T) -> bool,\n               a: [@sp_constr_arg<T>],\n               b: [@sp_constr_arg<T>]) -> bool {\n     let i: uint = 0u;\n@@ -1930,7 +1930,6 @@ mod unify {\n         fn sub_proto(p_sub: ast::proto, p_sup: ast::proto) -> bool {\n             ret alt (p_sub, p_sup) {\n               (_, ast::proto_any) { true }\n-              (_, ast::proto_block) { true } /* NDM temporary */\n               (ast::proto_bare, _) { true }\n \n               // Equal prototypes are always subprotos:\n@@ -2083,7 +2082,7 @@ mod unify {\n     }\n \n     fn unify_tps(cx: @ctxt, expected_tps: [t], actual_tps: [t],\n-                 variance: variance, finish: block([t]) -> result) -> result {\n+                 variance: variance, finish: fn([t]) -> result) -> result {\n         let result_tps = [], i = 0u;\n         for exp in expected_tps {\n             let act = actual_tps[i];"}, {"sha": "5477c49588348c9f596a0652a5528bb0fa292683", "filename": "src/comp/syntax/ext/simplext.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -241,7 +241,7 @@ fn follow_for_trans(cx: ext_ctxt, mmaybe: option::t<arb_depth<matchable>>,\n }\n \n /* helper for transcribe_exprs: what vars from `b` occur in `e`? */\n-fn free_vars(b: bindings, e: @expr, it: block(ident)) {\n+fn free_vars(b: bindings, e: @expr, it: fn(ident)) {\n     let idents: hashmap<ident, ()> = new_str_hash::<()>();\n     fn mark_ident(&&i: ident, _fld: ast_fold, b: bindings,\n                   idents: hashmap<ident, ()>) -> ident {\n@@ -536,7 +536,7 @@ fn block_to_ident(blk: blk_) -> option::t<ident> {\n \n fn p_t_s_r_mac(cx: ext_ctxt, mac: ast::mac, s: selector, b: binders) {\n     fn select_pt_1(cx: ext_ctxt, m: matchable,\n-                   fn_m: block(ast::mac) -> match_result) -> match_result {\n+                   fn_m: fn(ast::mac) -> match_result) -> match_result {\n         ret alt m {\n               match_expr(e) {\n                 alt e.node { expr_mac(mac) { fn_m(mac) } _ { none } }"}, {"sha": "5a4925486d91aba8a471ed732e5c057805201355", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -149,7 +149,7 @@ fn bad_expr_word_table() -> hashmap<str, ()> {\n     for word in [\"mod\", \"if\", \"else\", \"while\", \"do\", \"alt\", \"for\", \"break\",\n                  \"cont\", \"ret\", \"be\", \"fail\", \"type\", \"resource\", \"check\",\n                  \"assert\", \"claim\", \"native\", \"fn\", \"pure\",\n-                 \"unsafe\", \"block\", \"import\", \"export\", \"let\", \"const\",\n+                 \"unsafe\", \"import\", \"export\", \"let\", \"const\",\n                  \"log\", \"copy\", \"sendfn\", \"impl\", \"iface\", \"enum\"] {\n         words.insert(word, ());\n     }\n@@ -366,7 +366,7 @@ fn parse_constr_in_type(p: parser) -> @ast::ty_constr {\n }\n \n \n-fn parse_constrs<T: copy>(pser: block(parser) -> @ast::constr_general<T>,\n+fn parse_constrs<T: copy>(pser: fn(parser) -> @ast::constr_general<T>,\n                          p: parser) ->\n    [@ast::constr_general<T>] {\n     let constrs: [@ast::constr_general<T>] = [];\n@@ -504,9 +504,6 @@ fn parse_ty(p: parser, colons_before_params: bool) -> @ast::ty {\n           _ { /* fallthrough */ }\n         }\n         t = parse_ty_fn(proto, p);\n-    } else if eat_word(p, \"block\") {\n-        //p.warn(\"block is deprecated, use fn& or fn\");\n-        t = parse_ty_fn(ast::proto_block, p);\n     } else if eat_word(p, \"native\") {\n         expect_word(p, \"fn\");\n         t = parse_ty_fn(ast::proto_bare, p);\n@@ -545,7 +542,7 @@ fn parse_fn_block_arg(p: parser) -> ast::arg {\n }\n \n fn parse_seq_to_before_gt<T: copy>(sep: option::t<token::token>,\n-                                  f: block(parser) -> T,\n+                                  f: fn(parser) -> T,\n                                   p: parser) -> [T] {\n     let first = true;\n     let v = [];\n@@ -562,15 +559,15 @@ fn parse_seq_to_before_gt<T: copy>(sep: option::t<token::token>,\n }\n \n fn parse_seq_to_gt<T: copy>(sep: option::t<token::token>,\n-                           f: block(parser) -> T, p: parser) -> [T] {\n+                           f: fn(parser) -> T, p: parser) -> [T] {\n     let v = parse_seq_to_before_gt(sep, f, p);\n     expect_gt(p);\n \n     ret v;\n }\n \n fn parse_seq_lt_gt<T: copy>(sep: option::t<token::token>,\n-                           f: block(parser) -> T,\n+                           f: fn(parser) -> T,\n                            p: parser) -> spanned<[T]> {\n     let lo = p.span.lo;\n     expect(p, token::LT);\n@@ -581,7 +578,7 @@ fn parse_seq_lt_gt<T: copy>(sep: option::t<token::token>,\n }\n \n fn parse_seq_to_end<T: copy>(ket: token::token, sep: seq_sep,\n-                            f: block(parser) -> T, p: parser) -> [T] {\n+                            f: fn(parser) -> T, p: parser) -> [T] {\n     let val = parse_seq_to_before_end(ket, sep, f, p);\n     p.bump();\n     ret val;\n@@ -604,7 +601,7 @@ fn seq_sep_none() -> seq_sep {\n \n fn parse_seq_to_before_end<T: copy>(ket: token::token,\n                                    sep: seq_sep,\n-                                   f: block(parser) -> T, p: parser) -> [T] {\n+                                   f: fn(parser) -> T, p: parser) -> [T] {\n     let first: bool = true;\n     let v: [T] = [];\n     while p.token != ket {\n@@ -620,7 +617,7 @@ fn parse_seq_to_before_end<T: copy>(ket: token::token,\n \n \n fn parse_seq<T: copy>(bra: token::token, ket: token::token,\n-                     sep: seq_sep, f: block(parser) -> T,\n+                     sep: seq_sep, f: fn(parser) -> T,\n                      p: parser) -> spanned<[T]> {\n     let lo = p.span.lo;\n     expect(p, bra);\n@@ -813,9 +810,6 @@ fn parse_bottom_expr(p: parser) -> pexpr {\n           _ { /* fallthrough */ }\n         }\n         ret pexpr(parse_fn_expr(p, proto));\n-    } else if eat_word(p, \"block\") {\n-        p.warn(\"block is deprecated, use fn& or fn\");\n-        ret pexpr(parse_fn_expr(p, ast::proto_block));\n     } else if eat_word(p, \"unchecked\") {\n         ret pexpr(parse_block_expr(p, lo, ast::unchecked_blk));\n     } else if eat_word(p, \"unsafe\") {"}, {"sha": "4327ccf9ac0c859e495d0b33583272a8f944c505", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -210,7 +210,7 @@ fn synth_comment(s: ps, text: str) {\n     word(s.s, \"*/\");\n }\n \n-fn commasep<IN>(s: ps, b: breaks, elts: [IN], op: block(ps, IN)) {\n+fn commasep<IN>(s: ps, b: breaks, elts: [IN], op: fn(ps, IN)) {\n     box(s, 0u, b);\n     let first = true;\n     for elt: IN in elts {\n@@ -221,8 +221,8 @@ fn commasep<IN>(s: ps, b: breaks, elts: [IN], op: block(ps, IN)) {\n }\n \n \n-fn commasep_cmnt<IN>(s: ps, b: breaks, elts: [IN], op: block(ps, IN),\n-                     get_span: block(IN) -> codemap::span) {\n+fn commasep_cmnt<IN>(s: ps, b: breaks, elts: [IN], op: fn(ps, IN),\n+                     get_span: fn(IN) -> codemap::span) {\n     box(s, 0u, b);\n     let len = vec::len::<IN>(elts);\n     let i = 0u;"}, {"sha": "60df64a2a35135f166a0f2a84420bb81d8164263", "filename": "src/comp/util/filesearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Futil%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcomp%2Futil%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Ffilesearch.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -18,7 +18,7 @@ export relative_target_lib_path;\n export get_cargo_root;\n export libdir;\n \n-type pick<T> = block(path: fs::path) -> option::t<T>;\n+type pick<T> = fn(path: fs::path) -> option::t<T>;\n \n fn pick_file(file: fs::path, path: fs::path) -> option::t<fs::path> {\n     if fs::basename(path) == file { option::some(path) }"}, {"sha": "71968abdd6db15265d077e50d6181bea83dfb6f9", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -63,7 +63,7 @@ fn is_test_ignored(config: config, testfile: str) -> bool {\n     }\n }\n \n-fn iter_header(testfile: str, it: block(str)) {\n+fn iter_header(testfile: str, it: fn(str)) {\n     let rdr = result::get(io::file_reader(testfile));\n     while !rdr.eof() {\n         let ln = rdr.read_line();"}, {"sha": "c1b3ad5f341ce2d6684418d869efb041a7f6eabe", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -215,7 +215,7 @@ fn replace_ty_in_crate(crate: ast::crate, i: uint, newty: ast::ty, tm: test_mode\n     *crate2\n }\n \n-fn under(n: uint, it: block(uint)) {\n+fn under(n: uint, it: fn(uint)) {\n     let i: uint = 0u;\n     while i < n { it(i); i += 1u; }\n }"}, {"sha": "d027e3825e1a8c13a72f9c7078e3833ed47c7f7a", "filename": "src/libcore/bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibcore%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibcore%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbool.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -75,7 +75,7 @@ pure fn to_str(v: t) -> str { if v { \"true\" } else { \"false\" } }\n   brief = \"Iterates over all truth values by passing them to `blk` \\\n            in an unspecified order\"\n )]\n-fn all_values(blk: block(v: t)) {\n+fn all_values(blk: fn(v: t)) {\n     blk(true);\n     blk(false);\n }"}, {"sha": "e3dadaa7e38b3d085aa3935cf3422985fc0ec660", "filename": "src/libcore/either.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibcore%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibcore%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Feither.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -29,7 +29,7 @@ If `value` is left(T) then `f_left` is applied to its contents, if\n the result is returned.\n */\n fn either<T, U,\n-          V>(f_left: block(T) -> V, f_right: block(U) -> V, value: t<T, U>) ->\n+          V>(f_left: fn(T) -> V, f_right: fn(U) -> V, value: t<T, U>) ->\n    V {\n     alt value { left(l) { f_left(l) } right(r) { f_right(r) } }\n }"}, {"sha": "47a699b834e58349333e0994b382292ea8bd767f", "filename": "src/libcore/int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibcore%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibcore%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -84,7 +84,7 @@ Function: range\n \n Iterate over the range [`lo`..`hi`)\n */\n-fn range(lo: int, hi: int, it: block(int)) {\n+fn range(lo: int, hi: int, it: fn(int)) {\n     let i = lo;\n     while i < hi { it(i); i += 1; }\n }"}, {"sha": "c86127b46645379bbd36b3e3bbf383a62e54082c", "filename": "src/libcore/option.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -36,7 +36,7 @@ pure fn get<T: copy>(opt: t<T>) -> T {\n \n /*\n */\n-fn map<T, U: copy>(opt: t<T>, f: block(T) -> U) -> t<U> {\n+fn map<T, U: copy>(opt: t<T>, f: fn(T) -> U) -> t<U> {\n     alt opt { some(x) { some(f(x)) } none { none } }\n }\n \n@@ -70,7 +70,7 @@ Function: maybe\n \n Applies a function to the contained value or returns a default\n */\n-fn maybe<T, U: copy>(def: U, opt: t<T>, f: block(T) -> U) -> U {\n+fn maybe<T, U: copy>(def: U, opt: t<T>, f: fn(T) -> U) -> U {\n     alt opt { none { def } some(t) { f(t) } }\n }\n \n@@ -80,7 +80,7 @@ Function: may\n \n Performs an operation on the contained value or does nothing\n */\n-fn may<T>(opt: t<T>, f: block(T)) {\n+fn may<T>(opt: t<T>, f: fn(T)) {\n     alt opt { none {/* nothing */ } some(t) { f(t); } }\n }\n "}, {"sha": "52c3ff95d23cfdede52e293d46333e5e8d723e3c", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -110,7 +110,7 @@ Example:\n > })\n \n */\n-fn chain<T, U: copy, V: copy>(res: t<T, V>, op: block(T) -> t<U, V>)\n+fn chain<T, U: copy, V: copy>(res: t<T, V>, op: fn(T) -> t<U, V>)\n     -> t<U, V> {\n     alt res {\n       ok(t) { op(t) }"}, {"sha": "1cccaf0f6411cd08b58edea8730f6a40e865a010", "filename": "src/libcore/str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -347,7 +347,7 @@ Function: iter_chars\n Iterate over the characters in a string\n */\n \n-fn iter_chars(s: str, it: block(char)) {\n+fn iter_chars(s: str, it: fn(char)) {\n     let pos = 0u, len = byte_len(s);\n     while (pos < len) {\n         let {ch, next} = char_range_at(s, pos);\n@@ -371,7 +371,7 @@ Returns:\n `true` If execution proceeded correctly, `false` if it was interrupted,\n that is if `it` returned `false` at any point.\n  */\n-fn loop_chars(s: str, it: block(char) -> bool) -> bool{\n+fn loop_chars(s: str, it: fn(char) -> bool) -> bool{\n     ret loop_chars_sub(s, 0u, byte_len(s), it);\n }\n \n@@ -398,7 +398,7 @@ Safety note:\n  represent valid positions inside `s`\n  */\n fn loop_chars_sub(s: str, byte_offset: uint, byte_len: uint,\n-              it: block(char) -> bool) -> bool {\n+              it: fn(char) -> bool) -> bool {\n    let i = byte_offset;\n    let result = true;\n    while i < byte_len {\n@@ -1061,7 +1061,7 @@ Example:\n > let s = str::as_buf(\"PATH\", { |path_buf| libc::getenv(path_buf) });\n \n */\n-fn as_buf<T>(s: str, f: block(sbuf) -> T) -> T unsafe {\n+fn as_buf<T>(s: str, f: fn(sbuf) -> T) -> T unsafe {\n     let buf = buf(s); f(buf)\n }\n "}, {"sha": "45e54bb5069594303ad7b30f78a619aca279f267", "filename": "src/libcore/u32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibcore%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibcore%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fu32.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -54,7 +54,7 @@ Function: range\n \n Iterate over the range [`lo`..`hi`)\n */\n-fn range(lo: u32, hi: u32, it: block(u32)) {\n+fn range(lo: u32, hi: u32, it: fn(u32)) {\n     let i = lo;\n     while i < hi { it(i); i += 1u32; }\n }"}, {"sha": "472702c8eac67c955a973cecdeea4bbff05b3679", "filename": "src/libcore/u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibcore%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibcore%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fu64.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -54,7 +54,7 @@ Function: range\n \n Iterate over the range [`lo`..`hi`)\n */\n-fn range(lo: u64, hi: u64, it: block(u64)) {\n+fn range(lo: u64, hi: u64, it: fn(u64)) {\n     let i = lo;\n     while i < hi { it(i); i += 1u64; }\n }"}, {"sha": "b025751020bdc4adb0b6a9b222b0420124d20265", "filename": "src/libcore/u8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibcore%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibcore%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fu8.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -54,7 +54,7 @@ Function: range\n \n Iterate over the range [`lo`..`hi`)\n */\n-fn range(lo: u8, hi: u8, it: block(u8)) {\n+fn range(lo: u8, hi: u8, it: fn(u8)) {\n     let i = lo;\n     while i < hi { it(i); i += 1u8; }\n }"}, {"sha": "8d032610e179e15d6270ebfb86e2ae43bc66c0d6", "filename": "src/libcore/uint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibcore%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibcore%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -115,7 +115,7 @@ Function: range\n \n Iterate over the range [`lo`..`hi`)\n */\n-fn range(lo: uint, hi: uint, it: block(uint)) {\n+fn range(lo: uint, hi: uint, it: fn(uint)) {\n     let i = lo;\n     while i < hi { it(i); i += 1u; }\n }\n@@ -136,7 +136,7 @@ Returns:\n `true` If execution proceeded correctly, `false` if it was interrupted,\n that is if `it` returned `false` at any point.\n */\n-fn loop(lo: uint, hi: uint, it: block(uint) -> bool) -> bool {\n+fn loop(lo: uint, hi: uint, it: fn(uint) -> bool) -> bool {\n     let i = lo;\n     while i < hi {\n         if (!it(i)) { ret false; }"}, {"sha": "0a1a401242296f52e3162cd8059cbd6c62b1e6dd", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -26,7 +26,7 @@ Type: init_op\n \n A function used to initialize the elements of a vector.\n */\n-type init_op<T> = block(uint) -> T;\n+type init_op<T> = fn(uint) -> T;\n \n \n /*\n@@ -402,7 +402,7 @@ Function: map\n \n Apply a function to each element of a vector and return the results\n */\n-fn map<T, U>(v: [T], f: block(T) -> U) -> [U] {\n+fn map<T, U>(v: [T], f: fn(T) -> U) -> [U] {\n     let result = [];\n     reserve(result, len(v));\n     for elem: T in v { result += [f(elem)]; }\n@@ -414,7 +414,7 @@ Function: map_mut\n \n Apply a function to each element of a mutable vector and return the results\n */\n-fn map_mut<T: copy, U>(v: [const T], f: block(T) -> U) -> [U] {\n+fn map_mut<T: copy, U>(v: [const T], f: fn(T) -> U) -> [U] {\n     let result = [];\n     reserve(result, len(v));\n     for elem: T in v {\n@@ -429,7 +429,7 @@ Function: map2\n \n Apply a function to each pair of elements and return the results\n */\n-fn map2<T: copy, U: copy, V>(v0: [T], v1: [U], f: block(T, U) -> V) -> [V] {\n+fn map2<T: copy, U: copy, V>(v0: [T], v1: [U], f: fn(T, U) -> V) -> [V] {\n     let v0_len = len(v0);\n     if v0_len != len(v1) { fail; }\n     let u: [V] = [];\n@@ -446,7 +446,7 @@ Apply a function to each element of a vector and return the results\n If function `f` returns `none` then that element is excluded from\n the resulting vector.\n */\n-fn filter_map<T: copy, U: copy>(v: [const T], f: block(T) -> option::t<U>)\n+fn filter_map<T: copy, U: copy>(v: [const T], f: fn(T) -> option::t<U>)\n     -> [U] {\n     let result = [];\n     for elem: T in v {\n@@ -467,7 +467,7 @@ holds.\n Apply function `f` to each element of `v` and return a vector containing\n only those elements for which `f` returned true.\n */\n-fn filter<T: copy>(v: [T], f: block(T) -> bool) -> [T] {\n+fn filter<T: copy>(v: [T], f: fn(T) -> bool) -> [T] {\n     let result = [];\n     for elem: T in v {\n         if f(elem) { result += [elem]; }\n@@ -492,7 +492,7 @@ Function: foldl\n \n Reduce a vector from left to right\n */\n-fn foldl<T: copy, U>(z: T, v: [const U], p: block(T, U) -> T) -> T {\n+fn foldl<T: copy, U>(z: T, v: [const U], p: fn(T, U) -> T) -> T {\n     let accum = z;\n     iter(v) { |elt|\n         accum = p(accum, elt);\n@@ -505,7 +505,7 @@ Function: foldr\n \n Reduce a vector from right to left\n */\n-fn foldr<T, U: copy>(v: [const T], z: U, p: block(T, U) -> U) -> U {\n+fn foldr<T, U: copy>(v: [const T], z: U, p: fn(T, U) -> U) -> U {\n     let accum = z;\n     riter(v) { |elt|\n         accum = p(elt, accum);\n@@ -520,7 +520,7 @@ Return true if a predicate matches any elements\n \n If the vector contains no elements then false is returned.\n */\n-fn any<T>(v: [T], f: block(T) -> bool) -> bool {\n+fn any<T>(v: [T], f: fn(T) -> bool) -> bool {\n     for elem: T in v { if f(elem) { ret true; } }\n     ret false;\n }\n@@ -532,7 +532,7 @@ Return true if a predicate matches any elements in both vectors.\n \n If the vectors contains no elements then false is returned.\n */\n-fn any2<T, U>(v0: [T], v1: [U], f: block(T, U) -> bool) -> bool {\n+fn any2<T, U>(v0: [T], v1: [U], f: fn(T, U) -> bool) -> bool {\n     let v0_len = len(v0);\n     let v1_len = len(v1);\n     let i = 0u;\n@@ -550,7 +550,7 @@ Return true if a predicate matches all elements\n \n If the vector contains no elements then true is returned.\n */\n-fn all<T>(v: [T], f: block(T) -> bool) -> bool {\n+fn all<T>(v: [T], f: fn(T) -> bool) -> bool {\n     for elem: T in v { if !f(elem) { ret false; } }\n     ret true;\n }\n@@ -562,7 +562,7 @@ Return true if a predicate matches all elements in both vectors.\n \n If the vectors are not the same size then false is returned.\n */\n-fn all2<T, U>(v0: [T], v1: [U], f: block(T, U) -> bool) -> bool {\n+fn all2<T, U>(v0: [T], v1: [U], f: fn(T, U) -> bool) -> bool {\n     let v0_len = len(v0);\n     if v0_len != len(v1) { ret false; }\n     let i = 0u;\n@@ -600,7 +600,7 @@ Apply function `f` to each element of `v`, starting from the first.\n When function `f` returns true then an option containing the element\n is returned. If `f` matches no elements then none is returned.\n */\n-fn find<T: copy>(v: [T], f: block(T) -> bool) -> option::t<T> {\n+fn find<T: copy>(v: [T], f: fn(T) -> bool) -> option::t<T> {\n     for elt: T in v { if f(elt) { ret some(elt); } }\n     ret none;\n }\n@@ -626,7 +626,7 @@ Function: position_pred\n \n Find the first index for which the value matches some predicate\n */\n-fn position_pred<T>(v: [T], f: block(T) -> bool) -> option::t<uint> {\n+fn position_pred<T>(v: [T], f: fn(T) -> bool) -> option::t<uint> {\n     let i: uint = 0u;\n     while i < len(v) { if f(v[i]) { ret some::<uint>(i); } i += 1u; }\n     ret none;\n@@ -747,7 +747,7 @@ Iterates over vector `v` and, for each element, calls function `f` with the\n element's value.\n \n */\n-fn iter<T>(v: [const T], f: block(T)) {\n+fn iter<T>(v: [const T], f: fn(T)) {\n     iteri(v) { |_i, v| f(v) }\n }\n \n@@ -757,7 +757,7 @@ Function: iter2\n Iterates over two vectors in parallel\n \n */\n-fn iter2<U, T>(v: [U], v2: [T], f: block(U, T)) {\n+fn iter2<U, T>(v: [U], v2: [T], f: fn(U, T)) {\n     let i = 0;\n     for elt in v { f(elt, v2[i]); i += 1; }\n }\n@@ -770,7 +770,7 @@ Iterates over a vector's elements and indexes\n Iterates over vector `v` and, for each element, calls function `f` with the\n element's value and index.\n */\n-fn iteri<T>(v: [const T], f: block(uint, T)) {\n+fn iteri<T>(v: [const T], f: fn(uint, T)) {\n     let i = 0u, l = len(v);\n     while i < l { f(i, v[i]); i += 1u; }\n }\n@@ -784,7 +784,7 @@ Iterates over vector `v` and, for each element, calls function `f` with the\n element's value.\n \n */\n-fn riter<T>(v: [const T], f: block(T)) {\n+fn riter<T>(v: [const T], f: fn(T)) {\n     riteri(v) { |_i, v| f(v) }\n }\n \n@@ -796,7 +796,7 @@ Iterates over a vector's elements and indexes in reverse\n Iterates over vector `v` and, for each element, calls function `f` with the\n element's value and index.\n */\n-fn riteri<T>(v: [const T], f: block(uint, T)) {\n+fn riteri<T>(v: [const T], f: fn(uint, T)) {\n     let i = len(v);\n     while 0u < i {\n         i -= 1u;\n@@ -814,7 +814,7 @@ is sorted then the permutations are lexicographically sorted).\n The total number of permutations produced is `len(v)!`.  If `v` contains\n repeated elements, then some permutations are repeated.\n */\n-fn permute<T: copy>(v: [const T], put: block([T])) {\n+fn permute<T: copy>(v: [const T], put: fn([T])) {\n   let ln = len(v);\n   if ln == 0u {\n     put([]);"}, {"sha": "d02d78eaab84ddb954afd1ea8840b31505455ce2", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -53,7 +53,7 @@ fn create(nbits: uint, init: bool) -> t {\n     ret @{storage: storage, nbits: nbits};\n }\n \n-fn process(v0: t, v1: t, op: block(uint, uint) -> uint) -> bool {\n+fn process(v0: t, v1: t, op: fn(uint, uint) -> uint) -> bool {\n     let len = vec::len(v1.storage);\n     assert (vec::len(v0.storage) == len);\n     assert (v0.nbits == v1.nbits);"}, {"sha": "b76ba4ad9b822b459121001539800155804f3f7d", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -73,7 +73,7 @@ fn get_doc(d: doc, tg: uint) -> doc {\n     }\n }\n \n-fn docs(d: doc, it: block(uint, doc)) {\n+fn docs(d: doc, it: fn(uint, doc)) {\n     let pos = d.start;\n     while pos < d.end {\n         let elt_tag = vint_at(*d.data, pos);\n@@ -83,7 +83,7 @@ fn docs(d: doc, it: block(uint, doc)) {\n     }\n }\n \n-fn tagged_docs(d: doc, tg: uint, it: block(doc)) {\n+fn tagged_docs(d: doc, tg: uint, it: fn(doc)) {\n     let pos = d.start;\n     while pos < d.end {\n         let elt_tag = vint_at(*d.data, pos);"}, {"sha": "ad44f225f25bc00f5475b842c5ba069d0c403bc0", "filename": "src/libstd/four.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibstd%2Ffour.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibstd%2Ffour.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffour.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -195,7 +195,7 @@ Function: all_values\n Iterates over all truth values by passing them to `blk`\n in an unspecified order\n */\n-fn all_values(blk: block(v: t)) {\n+fn all_values(blk: fn(v: t)) {\n     blk(both);\n     blk(four::true);\n     blk(four::false);"}, {"sha": "a2f6b8c225f4285a252ab7287025d6e83ede3a0f", "filename": "src/libstd/fun_treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibstd%2Ffun_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibstd%2Ffun_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffun_treemap.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -84,7 +84,7 @@ Function: traverse\n \n Visit all pairs in the map in order.\n */\n-fn traverse<K, V: copy>(m: treemap<K, V>, f: block(K, V)) {\n+fn traverse<K, V: copy>(m: treemap<K, V>, f: fn(K, V)) {\n     alt *m {\n       empty { }\n       node(@k, @v, _, _) {"}, {"sha": "1db355dd385f9664a84c1ff209b70d36d0656fd0", "filename": "src/libstd/io.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -529,7 +529,7 @@ mod fsync {\n     // fsync file after executing blk\n     // FIXME find better way to create resources within lifetime of outer res\n     fn FILE_res_sync(&&file: FILE_res, opt_level: option::t<level>,\n-                  blk: block(&&res<os::libc::FILE>)) {\n+                  blk: fn(&&res<os::libc::FILE>)) {\n         blk(res({\n             val: *file, opt_level: opt_level,\n             fsync_fn: fn@(&&file: os::libc::FILE, l: level) -> int {\n@@ -540,7 +540,7 @@ mod fsync {\n \n     // fsync fd after executing blk\n     fn fd_res_sync(&&fd: fd_res, opt_level: option::t<level>,\n-                   blk: block(&&res<fd_t>)) {\n+                   blk: fn(&&res<fd_t>)) {\n         blk(res({\n             val: *fd, opt_level: opt_level,\n             fsync_fn: fn@(&&fd: fd_t, l: level) -> int {\n@@ -553,7 +553,7 @@ mod fsync {\n     iface t { fn fsync(l: level) -> int; }\n \n     // Call o.fsync after executing blk\n-    fn obj_sync(&&o: t, opt_level: option::t<level>, blk: block(&&res<t>)) {\n+    fn obj_sync(&&o: t, opt_level: option::t<level>, blk: fn(&&res<t>)) {\n         blk(res({\n             val: o, opt_level: opt_level,\n             fsync_fn: fn@(&&o: t, l: level) -> int { ret o.fsync(l); }"}, {"sha": "2081a21de23aed37c3f9efab097e29c398dc2f84", "filename": "src/libstd/list.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibstd%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibstd%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flist.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -46,7 +46,7 @@ ls - The list to fold\n z - The initial value\n f - The function to apply\n */\n-fn foldl<T: copy, U>(ls: list<U>, z: T, f: block(T, U) -> T) -> T {\n+fn foldl<T: copy, U>(ls: list<U>, z: T, f: fn(T, U) -> T) -> T {\n     let accum: T = z;\n     iter(ls) {|elt| accum = f(accum, elt);}\n     accum\n@@ -61,7 +61,7 @@ Apply function `f` to each element of `v`, starting from the first.\n When function `f` returns true then an option containing the element\n is returned. If `f` matches no elements then none is returned.\n */\n-fn find<T: copy, U: copy>(ls: list<T>, f: block(T) -> option::t<U>)\n+fn find<T: copy, U: copy>(ls: list<T>, f: fn(T) -> option::t<U>)\n     -> option::t<U> {\n     let ls = ls;\n     while true {\n@@ -164,7 +164,7 @@ Function: iter\n \n Iterate over a list\n */\n-fn iter<T>(l: list<T>, f: block(T)) {\n+fn iter<T>(l: list<T>, f: fn(T)) {\n     alt l {\n       cons(hd, tl) {\n         f(hd);"}, {"sha": "ed37318246b1336ad3a2ee569c5edc2e967ef1b9", "filename": "src/libstd/map.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -88,17 +88,17 @@ iface map<K: copy, V: copy> {\n \n     Iterate over all the key/value pairs in the map\n     */\n-    fn items(block(K, V));\n+    fn items(fn(K, V));\n     /*\n     Method: keys\n \n     Iterate over all the keys in the map\n     */\n-    fn keys(block(K));\n+    fn keys(fn(K));\n     /*\n     Iterate over all the values in the map\n     */\n-    fn values(block(V));\n+    fn values(fn(V));\n }\n \n // FIXME: package this up and export it as a datatype usable for\n@@ -246,7 +246,7 @@ mod chained {\n     }\n \n     fn foreach_entry<K: copy, V: copy>(chain0: chain<K,V>,\n-                                     blk: block(@entry<K,V>)) {\n+                                     blk: fn(@entry<K,V>)) {\n         let chain = chain0;\n         while true {\n             alt chain {\n@@ -261,7 +261,7 @@ mod chained {\n     }\n \n     fn foreach_chain<K: copy, V: copy>(chains: [const chain<K,V>],\n-                                     blk: block(@entry<K,V>)) {\n+                                     blk: fn(@entry<K,V>)) {\n         let i = 0u, n = vec::len(chains);\n         while i < n {\n             foreach_entry(chains[i], blk);\n@@ -281,7 +281,7 @@ mod chained {\n         }\n     }\n \n-    fn items<K: copy, V: copy>(tbl: t<K,V>, blk: block(K,V)) {\n+    fn items<K: copy, V: copy>(tbl: t<K,V>, blk: fn(K,V)) {\n         let tbl_chains = tbl.chains;  // Satisfy alias checker.\n         foreach_chain(tbl_chains) { |entry|\n             let key = entry.key;\n@@ -310,11 +310,11 @@ mod chained {\n \n         fn remove(k: K) -> option::t<V> { remove(self, k) }\n \n-        fn items(blk: block(K, V)) { items(self, blk); }\n+        fn items(blk: fn(K, V)) { items(self, blk); }\n \n-        fn keys(blk: block(K)) { items(self) { |k, _v| blk(k) } }\n+        fn keys(blk: fn(K)) { items(self) { |k, _v| blk(k) } }\n \n-        fn values(blk: block(V)) { items(self) { |_k, v| blk(v) } }\n+        fn values(blk: fn(V)) { items(self) { |_k, v| blk(v) } }\n     }\n \n     fn mk<K: copy, V: copy>(hasher: hashfn<K>, eqer: eqfn<K>) -> map<K,V> {"}, {"sha": "7b5320a5dfc29e87521d5710b86aa3264f3cd3ad", "filename": "src/libstd/md4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibstd%2Fmd4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibstd%2Fmd4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmd4.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -81,7 +81,7 @@ fn md4(msg: [u8]) -> {a: u32, b: u32, c: u32, d: u32} {\n \n fn md4_str(msg: [u8]) -> str {\n     let {a, b, c, d} = md4(msg);\n-    fn app(a: u32, b: u32, c: u32, d: u32, f: block(u32)) {\n+    fn app(a: u32, b: u32, c: u32, d: u32, f: fn(u32)) {\n         f(a); f(b); f(c); f(d);\n     }\n     let result = \"\";"}, {"sha": "5e856ff5e0e0b7e8ccc612e1b0e89aaac4763df9", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -419,7 +419,7 @@ Returns:\n `true` If execution proceeded correctly, `false` if it was interrupted,\n that is if `it` returned `false` at any point.\n  */\n-fn loop_chars(rope: rope, it: block(char) -> bool) -> bool {\n+fn loop_chars(rope: rope, it: fn(char) -> bool) -> bool {\n    alt(rope) {\n       node::empty { ret true }\n       node::content(x) { ret node::loop_chars(x, it) }\n@@ -435,7 +435,7 @@ Parameters:\n rope - A rope to traverse. It may be empty\n it - A block to execute with each consecutive character of the rope.\n  */\n-fn iter_chars(rope: rope, it: block(char)) {\n+fn iter_chars(rope: rope, it: fn(char)) {\n     loop_chars(rope) {|x|\n         it(x);\n         ret true\n@@ -466,7 +466,7 @@ Returns:\n `true` If execution proceeded correctly, `false` if it was interrupted,\n that is if `it` returned `false` at any point.\n  */\n-fn loop_leaves(rope: rope, it: block(node::leaf) -> bool) -> bool{\n+fn loop_leaves(rope: rope, it: fn(node::leaf) -> bool) -> bool{\n    alt(rope) {\n       node::empty { ret true }\n       node::content(x) {ret node::loop_leaves(x, it)}\n@@ -1135,7 +1135,7 @@ mod node {\n         ret result;\n     }\n \n-    fn loop_chars(node: @node, it: block(char) -> bool) -> bool {\n+    fn loop_chars(node: @node, it: fn(char) -> bool) -> bool {\n         ret loop_leaves(node, {|leaf|\n             ret str::loop_chars_sub(*leaf.content,\n                                     leaf.byte_offset,\n@@ -1159,7 +1159,7 @@ mod node {\n     `true` If execution proceeded correctly, `false` if it was interrupted,\n     that is if `it` returned `false` at any point.\n     */\n-    fn loop_leaves(node: @node, it: block(leaf) -> bool) -> bool{\n+    fn loop_leaves(node: @node, it: fn(leaf) -> bool) -> bool{\n         let current = node;\n         while true {\n             alt(*current) {"}, {"sha": "dada53f355bca1485b8f2ddec3b2e077b61a1558", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -110,7 +110,7 @@ impl <V: copy> of map::map<uint, V> for smallintmap<V> {\n     fn get(&&key: uint) -> V { get(self, key) }\n     fn find(&&key: uint) -> option::t<V> { find(self, key) }\n     fn rehash() { fail }\n-    fn items(it: block(&&uint, V)) {\n+    fn items(it: fn(&&uint, V)) {\n         let idx = 0u;\n         for item in self.v {\n             alt item {\n@@ -122,14 +122,14 @@ impl <V: copy> of map::map<uint, V> for smallintmap<V> {\n             idx += 1u;\n         }\n     }\n-    fn keys(it: block(&&uint)) {\n+    fn keys(it: fn(&&uint)) {\n         let idx = 0u;\n         for item in self.v {\n             if item != none { it(idx); }\n             idx += 1u;\n         }\n     }\n-    fn values(it: block(V)) {\n+    fn values(it: fn(V)) {\n         for item in self.v {\n             alt item { some(elt) { it(elt); } _ {} }\n         }"}, {"sha": "f7f6812d7defef6da20424cc98ef312a4e456a63", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -10,7 +10,7 @@ export quick_sort;\n export quick_sort3;\n \n /* Type: lteq */\n-type lteq<T> = block(T, T) -> bool;\n+type lteq<T> = fn(T, T) -> bool;\n \n /*\n Function: merge_sort"}, {"sha": "4771bc3196bd56394f6f76d8d98bbefab6ef77be", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -83,7 +83,7 @@ Function: traverse\n \n Visit all pairs in the map in order.\n */\n-fn traverse<K, V>(m: treemap<K, V>, f: block(K, V)) {\n+fn traverse<K, V>(m: treemap<K, V>, f: fn(K, V)) {\n     alt *m {\n       empty { }\n       node(k, v, _, _) {"}, {"sha": "7cc749429ce92a01cdc66b0c037d14615cd77730", "filename": "src/libstd/tri.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibstd%2Ftri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Flibstd%2Ftri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftri.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -164,7 +164,7 @@ Function: all_values\n Iterates over all truth values by passing them to `blk`\n in an unspecified order\n */\n-fn all_values(blk: block(v: t)) {\n+fn all_values(blk: fn(v: t)) {\n     blk(tri::false);\n     blk(unknown);\n     blk(tri::true);"}, {"sha": "02d55cf64d3708204eba22cc84662612ac3697ec", "filename": "src/test/bench/99bob-iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Fbench%2F99bob-iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Fbench%2F99bob-iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2F99bob-iter.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -40,7 +40,7 @@ fn sub(t: str, n: int) -> str {\n \n \n /* Using an interator */\n-fn ninetynine(it: block(int)) {\n+fn ninetynine(it: fn(int)) {\n     let n: int = 100;\n     while n > 1 { n -= 1; it(n); }\n }"}, {"sha": "2abaabc3ef85a6e7db1d381958c0f3500a2c0335", "filename": "src/test/compile-fail/block-arg-used-as-lambda-with-illegal-cap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Fcompile-fail%2Fblock-arg-used-as-lambda-with-illegal-cap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Fcompile-fail%2Fblock-arg-used-as-lambda-with-illegal-cap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-arg-used-as-lambda-with-illegal-cap.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -4,7 +4,7 @@ fn to_lambda1(f: fn@(uint) -> uint) -> fn@(uint) -> uint {\n     ret f;\n }\n \n-fn to_lambda2(b: block(uint) -> uint) -> fn@(uint) -> uint {\n+fn to_lambda2(b: fn(uint) -> uint) -> fn@(uint) -> uint {\n     ret to_lambda1({|x| b(x)});\n }\n "}, {"sha": "95d1bdf07876883fa03f2a9f4509a5fac5177a5a", "filename": "src/test/compile-fail/block-coerce-no.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -2,11 +2,11 @@\n // other tycons.\n \n fn coerce(b: fn()) -> native fn() {\n-    fn lol(f: native fn(block()) -> native fn(),\n+    fn lol(f: native fn(fn()) -> native fn(),\n            g: fn()) -> native fn() { ret f(g); }\n     fn fn_id(f: native fn()) -> native fn() { ret f }\n     ret lol(fn_id, b);\n-    //!^ ERROR mismatched types: expected `native fn(fn&()) -> native fn()`\n+    //!^ ERROR mismatched types: expected `native fn(fn()) -> native fn()`\n }\n \n fn main() {"}, {"sha": "e986330ee0ea16a33cdab7212885177166cd098e", "filename": "src/test/compile-fail/block-copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Fcompile-fail%2Fblock-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Fcompile-fail%2Fblock-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-copy.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -1,8 +1,8 @@\n // error-pattern: block type can only appear\n \n-fn lol(f: block()) -> block() { ret f; }\n+fn lol(f: fn()) -> fn() { ret f; }\n fn main() {\n     let i = 8;\n-    let f = lol(block () { log(error, i); });\n+    let f = lol(fn&() { log(error, i); });\n     f();\n }"}, {"sha": "6de84a2a163213c8968e9c4306a2e8faa199f809", "filename": "src/test/compile-fail/block-deinitializes-upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Fcompile-fail%2Fblock-deinitializes-upvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Fcompile-fail%2Fblock-deinitializes-upvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-deinitializes-upvar.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:Tried to deinitialize a variable declared in a different\n-fn force(f: block()) { f(); }\n+fn force(f: fn()) { f(); }\n fn main() {\n     let x = @{x: 17, y: 2};\n     let y = @{x: 5, y: 5};"}, {"sha": "6a05ccf0605eeb9c519ff55c600a8cc6a42ec032", "filename": "src/test/compile-fail/block-require-return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Fcompile-fail%2Fblock-require-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Fcompile-fail%2Fblock-require-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-require-return.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -1,3 +1,3 @@\n // error-pattern: not all control paths return\n-fn force(f: block() -> int) -> int { f() }\n+fn force(f: fn() -> int) -> int { f() }\n fn main() { log(error, force({|| })); }"}, {"sha": "94df3392bbbf5aa7f5ed68ed08d9990f7344cd26", "filename": "src/test/compile-fail/block-uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Fcompile-fail%2Fblock-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Fcompile-fail%2Fblock-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-uninit.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -1,4 +1,4 @@\n // error-pattern: Unsatisfied precondition constraint\n \n-fn force(f: block()) { f(); }\n-fn main() { let x: int; force(block () { log(error, x); }); }\n+fn force(f: fn()) { f(); }\n+fn main() { let x: int; force(fn&() { log(error, x); }); }"}, {"sha": "32b217979761c026c54775c62842f770702a0cb8", "filename": "src/test/compile-fail/cap-clause-illegal-cap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Fcompile-fail%2Fcap-clause-illegal-cap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Fcompile-fail%2Fcap-clause-illegal-cap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcap-clause-illegal-cap.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -1,6 +1,6 @@\n // error-pattern: copying a noncopyable value\n \n-fn to_lambda2(b: block(uint) -> uint) -> fn@(uint) -> uint {\n+fn to_lambda2(b: fn(uint) -> uint) -> fn@(uint) -> uint {\n     // test case where copy clause specifies a value that is not used\n     // in fn@ body, but value is illegal to copy:\n     ret fn@[copy b](u: uint) -> uint { 22u };"}, {"sha": "1f052679065eca32ce84d8c7b4c738f18cb2a9c1", "filename": "src/test/compile-fail/lambda-mutate-nested.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Fcompile-fail%2Flambda-mutate-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Fcompile-fail%2Flambda-mutate-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flambda-mutate-nested.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:assigning to upvar\n // Make sure that nesting a block within a fn@ doesn't let us\n // mutate upvars from a fn@.\n-fn f2(x: block()) { x(); }\n+fn f2(x: fn()) { x(); }\n \n fn main() {\n     let i = 0;"}, {"sha": "e57c7be48a9f922bb72c9858ab94c3a0d71d2b37", "filename": "src/test/pretty/block-arg-disambig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Fpretty%2Fblock-arg-disambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Fpretty%2Fblock-arg-disambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-arg-disambig.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -1,2 +1,2 @@\n-fn blk1(b: block()) -> fn@() { ret fn@() { }; }\n+fn blk1(b: fn()) -> fn@() { ret fn@() { }; }\n fn test1() { (blk1 {|| #debug[\"hi\"]; })(); }"}, {"sha": "bc272ab3b9707767add07ff2d1525fe6b7e04c63", "filename": "src/test/run-fail/unwind-iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-fail%2Funwind-iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-fail%2Funwind-iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-iter.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -1,6 +1,6 @@\n // error-pattern:fail\n \n-fn x(it: block(int)) {\n+fn x(it: fn(int)) {\n     fail;\n     it(0);\n }"}, {"sha": "e1e93ac94cd1986f75522dab3a74c555f9233c8a", "filename": "src/test/run-fail/unwind-iter2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-fail%2Funwind-iter2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-fail%2Funwind-iter2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-iter2.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -1,6 +1,6 @@\n // error-pattern:fail\n \n-fn x(it: block(int)) {\n+fn x(it: fn(int)) {\n     let a = @0;\n     it(1);\n }"}, {"sha": "72fd69ec675c1d17ff78db11368b7a857ddd778e", "filename": "src/test/run-fail/unwind-lambda.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-lambda.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -4,7 +4,7 @@ fn main() {\n     let cheese = \"roquefort\";\n     let carrots = @\"crunchy\";\n \n-    fn@(tasties: @str, macerate: block(str)) {\n+    fn@(tasties: @str, macerate: fn(str)) {\n         macerate(*tasties);\n     } (carrots, { |food|\n         let mush = food + cheese;"}, {"sha": "c63c622e2efef61b6db15e165acde10ec61325f5", "filename": "src/test/run-pass/alt-phi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Falt-phi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Falt-phi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-phi.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -2,7 +2,7 @@\n \n enum thing { a, b, c, }\n \n-fn foo(it: block(int)) { it(10); }\n+fn foo(it: fn(int)) { it(10); }\n \n fn main() {\n     let x = true;"}, {"sha": "24184cdc2d960e5d41336983bfaff5152310649f", "filename": "src/test/run-pass/argument-passing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fargument-passing.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -6,7 +6,7 @@ fn f1(a: {mutable x: int}, &b: int, -c: int) -> int {\n     ret r;\n }\n \n-fn f2(a: int, f: block(int)) -> int { f(1); ret a; }\n+fn f2(a: int, f: fn(int)) -> int { f(1); ret a; }\n \n fn main() {\n     let a = {mutable x: 1}, b = 2, c = 3;"}, {"sha": "bf65441e7fad3e3507e8c4c02014aaa9b37c0b74", "filename": "src/test/run-pass/block-arg-call-as.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -8,7 +8,11 @@ fn asLambda( f : fn@()->uint ) -> uint {\n    ret f();\n }\n \n-fn asBlock( f : block()->uint ) -> uint {\n+fn asBlock( f : fn&()->uint ) -> uint {\n+   ret f();\n+}\n+\n+fn asAny( f : fn()->uint ) -> uint {\n    ret f();\n }\n "}, {"sha": "71342eee6e81f6c05563f0b2ac126cf083b1889b", "filename": "src/test/run-pass/block-arg-can-be-followed-by-block-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-block-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-block-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-block-arg.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    fn f(i: block() -> uint) -> uint { i() }\n+    fn f(i: fn() -> uint) -> uint { i() }\n     let v = [-1f, 0f, 1f, 2f, 3f];\n     let z = vec::foldl(f, v) { |x, _y| x } { || 22u };\n     assert z == 22u;"}, {"sha": "230df12e621adb4a84ef12dd7bdd7d267ffb2918", "filename": "src/test/run-pass/block-explicit-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Fblock-explicit-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Fblock-explicit-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-explicit-types.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n-    fn as_buf<T>(s: str, f: block(str) -> T) -> T { f(s) }\n+    fn as_buf<T>(s: str, f: fn(str) -> T) -> T { f(s) }\n     as_buf(\"foo\", {|foo: str| -> () log(error, foo);});\n }"}, {"sha": "0b6413fc3ecf49d0e2c6a3534b032698429a7451", "filename": "src/test/run-pass/block-fn-coerce.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Fblock-fn-coerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Fblock-fn-coerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-fn-coerce.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -1,4 +1,4 @@\n-fn force(f: block() -> int) -> int { ret f(); }\n+fn force(f: fn() -> int) -> int { ret f(); }\n fn main() {\n     fn f() -> int { ret 7; }\n     assert (force(f) == 7);"}, {"sha": "8a01150e313c2d877de63f997b25c141bdeefc0e", "filename": "src/test/run-pass/block-iter-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -1,4 +1,4 @@\n-fn iter_vec<T>(v: [T], f: block(T)) { for x: T in v { f(x); } }\n+fn iter_vec<T>(v: [T], f: fn(T)) { for x: T in v { f(x); } }\n \n fn main() {\n     let v = [1, 2, 3, 4, 5, 6, 7];"}, {"sha": "085f468c60adc5780b5be426c392ae7620c368c7", "filename": "src/test/run-pass/block-iter-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -1,4 +1,4 @@\n-fn iter_vec<T>(v: [T], f: block(T)) { for x: T in v { f(x); } }\n+fn iter_vec<T>(v: [T], f: fn(T)) { for x: T in v { f(x); } }\n \n fn main() {\n     let v = [1, 2, 3, 4, 5];"}, {"sha": "67662525a1dbc0e0b3f5fc378444fc8ea6c990f3", "filename": "src/test/run-pass/fn-bare-coerce-to-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Ffn-bare-coerce-to-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Ffn-bare-coerce-to-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-coerce-to-block.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -1,6 +1,6 @@\n fn bare() {}\n \n-fn likes_block(f: block()) { f() }\n+fn likes_block(f: fn()) { f() }\n \n fn main() {\n     likes_block(bare);"}, {"sha": "c77a37cf27c2f5a4466cf7942868f5ed50e388da", "filename": "src/test/run-pass/foreach-nested.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Fforeach-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Fforeach-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-nested.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -2,7 +2,7 @@\n \n \n // -*- rust -*-\n-fn two(it: block(int)) { it(0); it(1); }\n+fn two(it: fn(int)) { it(0); it(1); }\n \n fn main() {\n     let a: [mutable int] = [mutable -1, -1, -1, -1];"}, {"sha": "d5ceb8202642b74c5331c0d0ec3fc0ac51d15892", "filename": "src/test/run-pass/foreach-put-structured.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -1,6 +1,6 @@\n \n \n-fn pairs(it: block((int, int))) {\n+fn pairs(it: fn((int, int))) {\n     let i: int = 0;\n     let j: int = 0;\n     while i < 10 { it((i, j)); i += 1; j += i; }"}, {"sha": "047819bfb75bd1edd4e50e0f78bc907e1541cab6", "filename": "src/test/run-pass/foreach-simple-outer-slot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -10,7 +10,7 @@ fn main() {\n     assert (sum == 45);\n }\n \n-fn first_ten(it: block(int)) {\n+fn first_ten(it: fn(int)) {\n     let i: int = 0;\n     while i < 10 { #debug(\"first_ten\"); it(i); i = i + 1; }\n }"}, {"sha": "c37dc989f389b8b057bcf931cf49752c0072e7cf", "filename": "src/test/run-pass/iface-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Fiface-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Fiface-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiface-generic.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -12,10 +12,10 @@ impl of to_str for () {\n }\n \n iface map<T> {\n-    fn map<U>(f: block(T) -> U) -> [U];\n+    fn map<U>(f: fn(T) -> U) -> [U];\n }\n impl <T> of map<T> for [T] {\n-    fn map<U>(f: block(T) -> U) -> [U] {\n+    fn map<U>(f: fn(T) -> U) -> [U] {\n         let r = [];\n         for x in self { r += [f(x)]; }\n         r"}, {"sha": "c82c1eb97e9e9f76ac126a9f2c20b6c0b18b6a06", "filename": "src/test/run-pass/iter-range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Fiter-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Fiter-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-range.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -1,6 +1,6 @@\n \n \n-fn range(a: int, b: int, it: block(int)) {\n+fn range(a: int, b: int, it: fn(int)) {\n     assert (a < b);\n     let i: int = a;\n     while i < b { it(i); i += 1; }"}, {"sha": "1476a0158284e2456f7b9c4abd8651d338633fd7", "filename": "src/test/run-pass/sendfn-is-a-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Fsendfn-is-a-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Fsendfn-is-a-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-is-a-block.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -1,4 +1,4 @@\n-fn test(f: block(uint) -> uint) -> uint {\n+fn test(f: fn(uint) -> uint) -> uint {\n     ret f(22u);\n }\n "}, {"sha": "fbc29c55a315d9582c3a5a355bf42b8ce7e23f76", "filename": "src/test/run-pass/static-impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-impl.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -11,16 +11,16 @@ mod b {\n \n impl util for uint {\n     fn str() -> str { uint::str(self) }\n-    fn times(f: block(uint)) {\n+    fn times(f: fn(uint)) {\n         let c = 0u;\n         while c < self { f(c); c += 1u; }\n     }\n }\n \n impl util<T> for [T] {\n     fn len() -> uint { vec::len(self) }\n-    fn iter(f: block(T)) { for x in self { f(x); } }\n-    fn map<U>(f: block(T) -> U) -> [U] {\n+    fn iter(f: fn(T)) { for x in self { f(x); } }\n+    fn map<U>(f: fn(T) -> U) -> [U] {\n         let r = [];\n         for elt in self { r += [f(elt)]; }\n         r"}, {"sha": "645f6407bfef8d14b92023cb020e14fcd5f69a6c", "filename": "src/test/run-pass/type-params-in-for-each.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -1,6 +1,6 @@\n \n \n-fn range(lo: uint, hi: uint, it: block(uint)) {\n+fn range(lo: uint, hi: uint, it: fn(uint)) {\n     let lo_ = lo;\n     while lo_ < hi { it(lo_); lo_ += 1u; }\n }"}, {"sha": "d54a7f5a5e018e677ea3b6dba747e709a26f06e0", "filename": "src/test/run-pass/unchecked-predicates.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Funchecked-predicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54/src%2Ftest%2Frun-pass%2Funchecked-predicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funchecked-predicates.rs?ref=5e13d19cc07a1e8fbf478d21cabbd7b9f80e3b54", "patch": "@@ -7,7 +7,7 @@ import std::list::*;\n \n // Can't easily be written as a \"pure fn\" because there's\n // no syntax for specifying that f is pure.\n-fn pure_foldl<T: copy, U: copy>(ls: list<T>, u: U, f: block(T, U) -> U) -> U {\n+fn pure_foldl<T: copy, U: copy>(ls: list<T>, u: U, f: fn(T, U) -> U) -> U {\n     alt ls {\n         nil { u }\n         cons(hd, tl) { f(hd, pure_foldl(*tl, f(hd, u), f)) }"}]}