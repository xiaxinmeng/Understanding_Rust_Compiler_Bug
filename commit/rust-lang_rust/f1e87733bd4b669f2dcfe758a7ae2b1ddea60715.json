{"sha": "f1e87733bd4b669f2dcfe758a7ae2b1ddea60715", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxZTg3NzMzYmQ0YjY2OWYyZGNmZTc1OGE3YWUyYjFkZGVhNjA3MTU=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2012-12-17T23:08:59Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-17T23:23:12Z"}, "message": "add an empty PriorityQueue constructor", "tree": {"sha": "add90449df756372b4c5acaf85634aedc603f135", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/add90449df756372b4c5acaf85634aedc603f135"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1e87733bd4b669f2dcfe758a7ae2b1ddea60715", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1e87733bd4b669f2dcfe758a7ae2b1ddea60715", "html_url": "https://github.com/rust-lang/rust/commit/f1e87733bd4b669f2dcfe758a7ae2b1ddea60715", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1e87733bd4b669f2dcfe758a7ae2b1ddea60715/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02e804bba8e2e82e6e2112ceb297ffb237b42ea6", "url": "https://api.github.com/repos/rust-lang/rust/commits/02e804bba8e2e82e6e2112ceb297ffb237b42ea6", "html_url": "https://github.com/rust-lang/rust/commit/02e804bba8e2e82e6e2112ceb297ffb237b42ea6"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "2f24b47883f134aba0b5ebd51fe615efd2ac313c", "filename": "src/libstd/priority_queue.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f1e87733bd4b669f2dcfe758a7ae2b1ddea60715/src%2Flibstd%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1e87733bd4b669f2dcfe758a7ae2b1ddea60715/src%2Flibstd%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpriority_queue.rs?ref=f1e87733bd4b669f2dcfe758a7ae2b1ddea60715", "patch": "@@ -105,8 +105,11 @@ impl <T: Ord> PriorityQueue<T> {\n         q.to_vec()\n     }\n \n+    /// Create an empty PriorityQueue\n+    static pure fn new() -> PriorityQueue<T> { PriorityQueue{data: ~[],} }\n+\n     /// Create a PriorityQueue from a vector (heapify)\n-    static pub pure fn from_vec(xs: ~[T]) -> PriorityQueue<T> {\n+    static pure fn from_vec(xs: ~[T]) -> PriorityQueue<T> {\n         let mut q = PriorityQueue{data: xs,};\n         let mut n = q.len() / 2;\n         while n > 0 {\n@@ -168,7 +171,7 @@ impl <T: Ord> PriorityQueue<T> {\n mod tests {\n     use sort::merge_sort;\n     use core::cmp::le;\n-    use priority_queue::PriorityQueue::from_vec;\n+    use priority_queue::PriorityQueue::{from_vec, new};\n \n     #[test]\n     fn test_top_and_pop() {\n@@ -279,30 +282,27 @@ mod tests {\n     #[test]\n     #[should_fail]\n     #[ignore(cfg(windows))]\n-    fn test_empty_pop() { let mut heap = from_vec::<int>(~[]); heap.pop(); }\n+    fn test_empty_pop() { let mut heap = new::<int>(); heap.pop(); }\n \n     #[test]\n     fn test_empty_maybe_pop() {\n-        let mut heap = from_vec::<int>(~[]);\n+        let mut heap = new::<int>();\n         assert heap.maybe_pop().is_none();\n     }\n \n     #[test]\n     #[should_fail]\n     #[ignore(cfg(windows))]\n-    fn test_empty_top() { let empty = from_vec::<int>(~[]); empty.top(); }\n+    fn test_empty_top() { let empty = new::<int>(); empty.top(); }\n \n     #[test]\n     fn test_empty_maybe_top() {\n-        let empty = from_vec::<int>(~[]);\n+        let empty = new::<int>();\n         assert empty.maybe_top().is_none();\n     }\n \n     #[test]\n     #[should_fail]\n     #[ignore(cfg(windows))]\n-    fn test_empty_replace() {\n-        let mut heap = from_vec::<int>(~[]);\n-        heap.replace(5);\n-    }\n+    fn test_empty_replace() { let mut heap = new(); heap.replace(5); }\n }"}]}