{"sha": "08c12e424d5d3fb4e11f081a07b9c265dc7a96b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4YzEyZTQyNGQ1ZDNmYjRlMTFmMDgxYTA3YjljMjY1ZGM3YTk2YjY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-25T12:25:01Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-25T12:25:01Z"}, "message": "use set methods", "tree": {"sha": "9ae3e23ac30d71f503673623f10b5eeaed1d9fef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ae3e23ac30d71f503673623f10b5eeaed1d9fef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08c12e424d5d3fb4e11f081a07b9c265dc7a96b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08c12e424d5d3fb4e11f081a07b9c265dc7a96b6", "html_url": "https://github.com/rust-lang/rust/commit/08c12e424d5d3fb4e11f081a07b9c265dc7a96b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08c12e424d5d3fb4e11f081a07b9c265dc7a96b6/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cf092d5de113fc218b84421a2db4449a370ccb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cf092d5de113fc218b84421a2db4449a370ccb6", "html_url": "https://github.com/rust-lang/rust/commit/8cf092d5de113fc218b84421a2db4449a370ccb6"}], "stats": {"total": 83, "additions": 29, "deletions": 54}, "files": [{"sha": "36b174cd61293aa1620416d8e8a117b22c840f78", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 10, "deletions": 23, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/08c12e424d5d3fb4e11f081a07b9c265dc7a96b6/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c12e424d5d3fb4e11f081a07b9c265dc7a96b6/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=08c12e424d5d3fb4e11f081a07b9c265dc7a96b6", "patch": "@@ -2,8 +2,7 @@ use std::{sync::Arc, panic};\n \n use parking_lot::Mutex;\n use ra_db::{\n-    BaseDatabase, FilePosition, FileId, CrateGraph, SourceRoot, SourceRootId,\n-    salsa::{self, Database},\n+    BaseDatabase, FilePosition, FileId, CrateGraph, SourceRoot, SourceRootId, FilesDatabase,\n };\n use relative_path::RelativePathBuf;\n use test_utils::{parse_fixture, CURSOR_MARKER, extract_offset};\n@@ -34,8 +33,7 @@ impl MockDatabase {\n         let mut db = MockDatabase::default();\n         let mut source_root = SourceRoot::default();\n         let file_id = db.add_file(WORKSPACE, &mut source_root, \"/main.rs\", text);\n-        db.query_mut(ra_db::SourceRootQuery)\n-            .set(WORKSPACE, Arc::new(source_root.clone()));\n+        db.set_source_root(WORKSPACE, Arc::new(source_root.clone()));\n         (db, source_root, file_id)\n     }\n \n@@ -45,11 +43,6 @@ impl MockDatabase {\n         (db, position)\n     }\n \n-    pub(crate) fn set_crate_graph(&mut self, crate_graph: CrateGraph) {\n-        self.query_mut(ra_db::CrateGraphQuery)\n-            .set((), Arc::new(crate_graph));\n-    }\n-\n     fn from_fixture(fixture: &str) -> (MockDatabase, SourceRoot, Option<FilePosition>) {\n         let mut db = MockDatabase::default();\n \n@@ -81,8 +74,7 @@ impl MockDatabase {\n                 self.add_file(source_root_id, &mut source_root, &entry.meta, &entry.text);\n             }\n         }\n-        self.query_mut(ra_db::SourceRootQuery)\n-            .set(source_root_id, Arc::new(source_root.clone()));\n+        self.set_source_root(source_root_id, Arc::new(source_root.clone()));\n         (source_root, position)\n     }\n \n@@ -100,17 +92,15 @@ impl MockDatabase {\n         let file_id = FileId(self.file_counter);\n         self.file_counter += 1;\n         let text = Arc::new(text.to_string());\n-        self.query_mut(ra_db::FileTextQuery).set(file_id, text);\n-        self.query_mut(ra_db::FileRelativePathQuery)\n-            .set(file_id, path.clone());\n-        self.query_mut(ra_db::FileSourceRootQuery)\n-            .set(file_id, source_root_id);\n+        self.set_file_text(file_id, text);\n+        self.set_file_relative_path(file_id, path.clone());\n+        self.set_file_source_root(file_id, source_root_id);\n         source_root.files.insert(path, file_id);\n \n         if is_crate_root {\n             let mut crate_graph = CrateGraph::default();\n             crate_graph.add_crate_root(file_id);\n-            self.set_crate_graph(crate_graph);\n+            self.set_crate_graph(Arc::new(crate_graph));\n         }\n         file_id\n     }\n@@ -149,12 +139,9 @@ impl Default for MockDatabase {\n             interner: Default::default(),\n             file_counter: 0,\n         };\n-        db.query_mut(ra_db::CrateGraphQuery)\n-            .set((), Default::default());\n-        db.query_mut(ra_db::LocalRootsQuery)\n-            .set((), Default::default());\n-        db.query_mut(ra_db::LibraryRootsQuery)\n-            .set((), Default::default());\n+        db.set_crate_graph(Default::default());\n+        db.set_local_roots(Default::default());\n+        db.set_library_roots(Default::default());\n         db\n     }\n }"}, {"sha": "24936976c22f181c588d933212235469a127ee02", "filename": "crates/ra_hir/src/nameres/tests.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/08c12e424d5d3fb4e11f081a07b9c265dc7a96b6/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c12e424d5d3fb4e11f081a07b9c265dc7a96b6/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs?ref=08c12e424d5d3fb4e11f081a07b9c265dc7a96b6", "patch": "@@ -1,6 +1,6 @@\n use std::sync::Arc;\n \n-use ra_db::{CrateGraph, SourceRootId, salsa::Database};\n+use ra_db::{CrateGraph, SourceRootId, FilesDatabase};\n use relative_path::RelativePath;\n use test_utils::{assert_eq_text, covers};\n \n@@ -257,7 +257,7 @@ fn item_map_across_crates() {\n         .add_dep(main_crate, \"test_crate\".into(), lib_crate)\n         .unwrap();\n \n-    db.set_crate_graph(crate_graph);\n+    db.set_crate_graph(Arc::new(crate_graph));\n \n     let module = crate::source_binder::module_from_file_id(&db, main_id).unwrap();\n     let krate = module.krate(&db).unwrap();\n@@ -309,7 +309,7 @@ fn import_across_source_roots() {\n         .add_dep(main_crate, \"test_crate\".into(), lib_crate)\n         .unwrap();\n \n-    db.set_crate_graph(crate_graph);\n+    db.set_crate_graph(Arc::new(crate_graph));\n \n     let module = crate::source_binder::module_from_file_id(&db, main_id).unwrap();\n     let krate = module.krate(&db).unwrap();\n@@ -351,7 +351,7 @@ fn reexport_across_crates() {\n         .add_dep(main_crate, \"test_crate\".into(), lib_crate)\n         .unwrap();\n \n-    db.set_crate_graph(crate_graph);\n+    db.set_crate_graph(Arc::new(crate_graph));\n \n     let module = crate::source_binder::module_from_file_id(&db, main_id).unwrap();\n     let krate = module.krate(&db).unwrap();\n@@ -377,8 +377,7 @@ fn check_item_map_is_not_recomputed(initial: &str, file_change: &str) {\n         });\n         assert!(format!(\"{:?}\", events).contains(\"item_map\"))\n     }\n-    db.query_mut(ra_db::FileTextQuery)\n-        .set(pos.file_id, Arc::new(file_change.to_string()));\n+    db.set_file_text(pos.file_id, Arc::new(file_change.to_string()));\n \n     {\n         let events = db.log_executed(|| {"}, {"sha": "8ecb8b17c8333d42d908a6b37d7ea0a3a09d5bca", "filename": "crates/ra_ide_api/src/imp.rs", "status": "modified", "additions": 14, "deletions": 25, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/08c12e424d5d3fb4e11f081a07b9c265dc7a96b6/crates%2Fra_ide_api%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c12e424d5d3fb4e11f081a07b9c265dc7a96b6/crates%2Fra_ide_api%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fimp.rs?ref=08c12e424d5d3fb4e11f081a07b9c265dc7a96b6", "patch": "@@ -5,7 +5,7 @@ use hir::{\n };\n use ra_db::{\n     FilesDatabase, SourceRoot, SourceRootId, SyntaxDatabase,\n-    salsa::{self, Database},\n+    salsa::Database,\n };\n use ra_ide_api_light::{self, assists, LocalEdit, Severity};\n use ra_syntax::{\n@@ -18,7 +18,7 @@ use crate::{\n     AnalysisChange,\n     CrateId, db, Diagnostic, FileId, FilePosition, FileRange, FileSystemEdit,\n     Query, RootChange, SourceChange, SourceFileEdit,\n-    symbol_index::{FileSymbol, LibrarySymbolsQuery},\n+    symbol_index::{FileSymbol, SymbolsDatabase},\n };\n \n impl db::RootDatabase {\n@@ -28,59 +28,48 @@ impl db::RootDatabase {\n         if !change.new_roots.is_empty() {\n             let mut local_roots = Vec::clone(&self.local_roots());\n             for (root_id, is_local) in change.new_roots {\n-                self.query_mut(ra_db::SourceRootQuery)\n-                    .set(root_id, Default::default());\n+                self.set_source_root(root_id, Default::default());\n                 if is_local {\n                     local_roots.push(root_id);\n                 }\n             }\n-            self.query_mut(ra_db::LocalRootsQuery)\n-                .set((), Arc::new(local_roots));\n+            self.set_local_roots(Arc::new(local_roots));\n         }\n \n         for (root_id, root_change) in change.roots_changed {\n             self.apply_root_change(root_id, root_change);\n         }\n         for (file_id, text) in change.files_changed {\n-            self.query_mut(ra_db::FileTextQuery).set(file_id, text)\n+            self.set_file_text(file_id, text)\n         }\n         if !change.libraries_added.is_empty() {\n             let mut libraries = Vec::clone(&self.library_roots());\n             for library in change.libraries_added {\n                 libraries.push(library.root_id);\n-                self.query_mut(ra_db::SourceRootQuery)\n-                    .set(library.root_id, Default::default());\n-                self.query_mut(LibrarySymbolsQuery)\n-                    .set_constant(library.root_id, Arc::new(library.symbol_index));\n+                self.set_source_root(library.root_id, Default::default());\n+                self.set_constant_library_symbols(library.root_id, Arc::new(library.symbol_index));\n                 self.apply_root_change(library.root_id, library.root_change);\n             }\n-            self.query_mut(ra_db::LibraryRootsQuery)\n-                .set((), Arc::new(libraries));\n+            self.set_library_roots(Arc::new(libraries));\n         }\n         if let Some(crate_graph) = change.crate_graph {\n-            self.query_mut(ra_db::CrateGraphQuery)\n-                .set((), Arc::new(crate_graph))\n+            self.set_crate_graph(Arc::new(crate_graph))\n         }\n     }\n \n     fn apply_root_change(&mut self, root_id: SourceRootId, root_change: RootChange) {\n         let mut source_root = SourceRoot::clone(&self.source_root(root_id));\n         for add_file in root_change.added {\n-            self.query_mut(ra_db::FileTextQuery)\n-                .set(add_file.file_id, add_file.text);\n-            self.query_mut(ra_db::FileRelativePathQuery)\n-                .set(add_file.file_id, add_file.path.clone());\n-            self.query_mut(ra_db::FileSourceRootQuery)\n-                .set(add_file.file_id, root_id);\n+            self.set_file_text(add_file.file_id, add_file.text);\n+            self.set_file_relative_path(add_file.file_id, add_file.path.clone());\n+            self.set_file_source_root(add_file.file_id, root_id);\n             source_root.files.insert(add_file.path, add_file.file_id);\n         }\n         for remove_file in root_change.removed {\n-            self.query_mut(ra_db::FileTextQuery)\n-                .set(remove_file.file_id, Default::default());\n+            self.set_file_text(remove_file.file_id, Default::default());\n             source_root.files.remove(&remove_file.path);\n         }\n-        self.query_mut(ra_db::SourceRootQuery)\n-            .set(root_id, Arc::new(source_root));\n+        self.set_source_root(root_id, Arc::new(source_root));\n     }\n \n     #[allow(unused)]"}]}