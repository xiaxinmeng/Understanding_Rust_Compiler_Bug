{"sha": "c9e601b31d6ad3961587d829db4472d314e7e606", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZTYwMWIzMWQ2YWQzOTYxNTg3ZDgyOWRiNDQ3MmQzMTRlN2U2MDY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-28T21:30:31Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-28T21:35:12Z"}, "message": "Drop args in native stubs too.", "tree": {"sha": "028573e92e1af5cdd2e55f42cf9bc01bd2a919b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/028573e92e1af5cdd2e55f42cf9bc01bd2a919b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9e601b31d6ad3961587d829db4472d314e7e606", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9e601b31d6ad3961587d829db4472d314e7e606", "html_url": "https://github.com/rust-lang/rust/commit/c9e601b31d6ad3961587d829db4472d314e7e606", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9e601b31d6ad3961587d829db4472d314e7e606/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f609373186aade10e9a9fe5070461d75ab86f41", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f609373186aade10e9a9fe5070461d75ab86f41", "html_url": "https://github.com/rust-lang/rust/commit/5f609373186aade10e9a9fe5070461d75ab86f41"}], "stats": {"total": 11, "additions": 11, "deletions": 0}, "files": [{"sha": "bf96da8b118f72c1142657b29fb4cd9a6fe8ea49", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c9e601b31d6ad3961587d829db4472d314e7e606/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e601b31d6ad3961587d829db4472d314e7e606/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=c9e601b31d6ad3961587d829db4472d314e7e606", "patch": "@@ -6622,6 +6622,7 @@ fn decl_native_fn_and_pair(@crate_ctxt ccx,\n             call_args += vec(lltaskptr);\n             for each (uint i in _uint.range(0u, num_ty_param)) {\n                 auto llarg = llvm.LLVMGetParam(fcx.llfn, arg_n);\n+                fcx.lltydescs += vec(llarg);\n                 check (llarg as int != 0);\n                 call_args += vec(vp2i(bcx, llarg));\n                 arg_n += 1u;\n@@ -6677,16 +6678,26 @@ fn decl_native_fn_and_pair(@crate_ctxt ccx,\n         r = bcx.build.Call(llnativefn, call_args);\n         rptr = fcx.llretptr;\n     } else {\n+\n+        let vec[tup(ValueRef, ty.t)] drop_args = vec();\n+\n         for (ty.arg arg in args) {\n             auto llarg = llvm.LLVMGetParam(fcx.llfn, arg_n);\n             check (llarg as int != 0);\n             push_arg(bcx, call_args, llarg, arg.ty);\n+            if (arg.mode == ast.val) {\n+                drop_args += vec(tup(llarg, arg.ty));\n+            }\n             arg_n += 1u;\n         }\n \n         r = trans_native_call(bcx.build, ccx.glues, lltaskptr, ccx.externs,\n                               ccx.tn, ccx.llmod, name, pass_task, call_args);\n         rptr = bcx.build.BitCast(fcx.llretptr, T_ptr(T_i32()));\n+\n+        for (tup(ValueRef, ty.t) d in drop_args) {\n+            bcx = drop_ty(bcx, d._0, d._1).bcx;\n+        }\n     }\n \n     // We don't store the return value if it's nil, to avoid stomping on a nil"}]}