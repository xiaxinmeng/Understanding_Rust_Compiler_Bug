{"sha": "a23e8a726c167cf806840d35c787240d4008d3d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyM2U4YTcyNmMxNjdjZjgwNjg0MGQzNWM3ODcyNDBkNDAwOGQzZDA=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-07-20T15:29:29Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-07-26T11:17:55Z"}, "message": "Add `-Z borrowck=migrate` flag, use it to link NLL up to AST-borrowck.", "tree": {"sha": "9ee441e69a5a2f575dfa48564fa024f80e5a1bbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ee441e69a5a2f575dfa48564fa024f80e5a1bbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a23e8a726c167cf806840d35c787240d4008d3d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a23e8a726c167cf806840d35c787240d4008d3d0", "html_url": "https://github.com/rust-lang/rust/commit/a23e8a726c167cf806840d35c787240d4008d3d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a23e8a726c167cf806840d35c787240d4008d3d0/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "655894baf96e02b4a7270447b8c636a52b357bdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/655894baf96e02b4a7270447b8c636a52b357bdf", "html_url": "https://github.com/rust-lang/rust/commit/655894baf96e02b4a7270447b8c636a52b357bdf"}], "stats": {"total": 89, "additions": 66, "deletions": 23}, "files": [{"sha": "1dadf07808f83e9b09af5ce90517ff9889901dfb", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a23e8a726c167cf806840d35c787240d4008d3d0/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a23e8a726c167cf806840d35c787240d4008d3d0/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=a23e8a726c167cf806840d35c787240d4008d3d0", "patch": "@@ -455,15 +455,28 @@ pub enum BorrowckMode {\n     Ast,\n     Mir,\n     Compare,\n+    Migrate,\n }\n \n impl BorrowckMode {\n+    /// Should we run the MIR-based borrow check, but also fall back\n+    /// on the AST borrow check if the MIR-based one errors.\n+    pub fn migrate(self) -> bool {\n+        match self {\n+            BorrowckMode::Ast => false,\n+            BorrowckMode::Compare => false,\n+            BorrowckMode::Mir => false,\n+            BorrowckMode::Migrate => true,\n+        }\n+    }\n+\n     /// Should we emit the AST-based borrow checker errors?\n     pub fn use_ast(self) -> bool {\n         match self {\n             BorrowckMode::Ast => true,\n             BorrowckMode::Compare => true,\n             BorrowckMode::Mir => false,\n+            BorrowckMode::Migrate => false,\n         }\n     }\n     /// Should we emit the MIR-based borrow checker errors?\n@@ -472,6 +485,7 @@ impl BorrowckMode {\n             BorrowckMode::Ast => false,\n             BorrowckMode::Compare => true,\n             BorrowckMode::Mir => true,\n+            BorrowckMode::Migrate => true,\n         }\n     }\n }\n@@ -2166,6 +2180,7 @@ pub fn build_session_options_and_crate_config(\n         None | Some(\"ast\") => BorrowckMode::Ast,\n         Some(\"mir\") => BorrowckMode::Mir,\n         Some(\"compare\") => BorrowckMode::Compare,\n+        Some(\"migrate\") => BorrowckMode::Migrate,\n         Some(m) => early_error(error_format, &format!(\"unknown borrowck mode `{}`\", m)),\n     };\n "}, {"sha": "d30f656098dc11b27c9db1083c4db426b5ac8359", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a23e8a726c167cf806840d35c787240d4008d3d0/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a23e8a726c167cf806840d35c787240d4008d3d0/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=a23e8a726c167cf806840d35c787240d4008d3d0", "patch": "@@ -1366,6 +1366,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.borrowck_mode().use_mir()\n     }\n \n+    /// If true, we should use the MIR-based borrow check, but also\n+    /// fall back on the AST borrow check if the MIR-based one errors.\n+    pub fn migrate_borrowck(self) -> bool {\n+        self.borrowck_mode().migrate()\n+    }\n+\n     /// If true, make MIR codegen for `match` emit a temp that holds a\n     /// borrow of the input to the match expression.\n     pub fn generate_borrow_of_any_match_input(&self) -> bool {\n@@ -1399,6 +1405,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn borrowck_mode(&self) -> BorrowckMode {\n         match self.sess.opts.borrowck_mode {\n             mode @ BorrowckMode::Mir |\n+            mode @ BorrowckMode::Migrate |\n             mode @ BorrowckMode::Compare => mode,\n \n             mode @ BorrowckMode::Ast => {"}, {"sha": "0cb4a766e807997d79b5cabfcd981c98fa29d874", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a23e8a726c167cf806840d35c787240d4008d3d0/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a23e8a726c167cf806840d35c787240d4008d3d0/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=a23e8a726c167cf806840d35c787240d4008d3d0", "patch": "@@ -90,7 +90,7 @@ pub struct AnalysisData<'a, 'tcx: 'a> {\n fn borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, owner_def_id: DefId)\n     -> Lrc<BorrowCheckResult>\n {\n-    assert!(tcx.use_ast_borrowck());\n+    assert!(tcx.use_ast_borrowck() || tcx.migrate_borrowck());\n \n     debug!(\"borrowck(body_owner_def_id={:?})\", owner_def_id);\n "}, {"sha": "825e31539c8bedfe511056858a3182fc10836e3c", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a23e8a726c167cf806840d35c787240d4008d3d0/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a23e8a726c167cf806840d35c787240d4008d3d0/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=a23e8a726c167cf806840d35c787240d4008d3d0", "patch": "@@ -99,6 +99,25 @@ impl Diagnostic {\n         }\n     }\n \n+    pub fn is_error(&self) -> bool {\n+        match self.level {\n+            Level::Bug |\n+            Level::Fatal |\n+            Level::PhaseFatal |\n+            Level::Error |\n+            Level::FailureNote => {\n+                true\n+            }\n+\n+            Level::Warning |\n+            Level::Note |\n+            Level::Help |\n+            Level::Cancelled => {\n+                false\n+            }\n+        }\n+    }\n+\n     /// Cancel the diagnostic (a structured diagnostic must either be emitted or\n     /// canceled or it will panic when dropped).\n     pub fn cancel(&mut self) {"}, {"sha": "a0f3abda077f94720015a1053c7b57a582788a1f", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a23e8a726c167cf806840d35c787240d4008d3d0/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a23e8a726c167cf806840d35c787240d4008d3d0/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=a23e8a726c167cf806840d35c787240d4008d3d0", "patch": "@@ -100,25 +100,6 @@ impl<'a> DiagnosticBuilder<'a> {\n         buffered_diagnostics.push(diagnostic);\n     }\n \n-    pub fn is_error(&self) -> bool {\n-        match self.level {\n-            Level::Bug |\n-            Level::Fatal |\n-            Level::PhaseFatal |\n-            Level::Error |\n-            Level::FailureNote => {\n-                true\n-            }\n-\n-            Level::Warning |\n-            Level::Note |\n-            Level::Help |\n-            Level::Cancelled => {\n-                false\n-            }\n-        }\n-    }\n-\n     /// Convenience function for internal use, clients should use one of the\n     /// span_* methods instead.\n     pub fn sub<S: Into<MultiSpan>>("}, {"sha": "ad663000f938b99793c006a41f060441111a21b3", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a23e8a726c167cf806840d35c787240d4008d3d0/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a23e8a726c167cf806840d35c787240d4008d3d0/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=a23e8a726c167cf806840d35c787240d4008d3d0", "patch": "@@ -16,14 +16,15 @@ use rustc::hir::def_id::DefId;\n use rustc::hir::map::definitions::DefPathData;\n use rustc::infer::InferCtxt;\n use rustc::lint::builtin::UNUSED_MUT;\n+use rustc::middle::borrowck::SignalledError;\n use rustc::mir::{AggregateKind, BasicBlock, BorrowCheckResult, BorrowKind};\n use rustc::mir::{ClearCrossCrate, Local, Location, Mir, Mutability, Operand, Place};\n use rustc::mir::{Field, Projection, ProjectionElem, Rvalue, Statement, StatementKind};\n use rustc::mir::{Terminator, TerminatorKind};\n use rustc::ty::query::Providers;\n use rustc::ty::{self, ParamEnv, TyCtxt};\n \n-use rustc_errors::{Diagnostic, DiagnosticBuilder};\n+use rustc_errors::{Diagnostic, DiagnosticBuilder, Level};\n use rustc_data_structures::graph::dominators::Dominators;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::indexed_set::IdxSetBuf;\n@@ -329,8 +330,28 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         }\n     }\n \n-    for diag in mbcx.errors_buffer.drain(..) {\n-        DiagnosticBuilder::new_diagnostic(mbcx.tcx.sess.diagnostic(), diag).emit();\n+    if mbcx.errors_buffer.len() > 0 {\n+        if tcx.migrate_borrowck() {\n+            match tcx.borrowck(def_id).signalled_any_error {\n+                SignalledError::NoErrorsSeen => {\n+                    // if AST-borrowck signalled no errors, then\n+                    // downgrade all the buffered MIR-borrowck errors\n+                    // to warnings.\n+                    for err in &mut mbcx.errors_buffer {\n+                        if err.is_error() { err.level = Level::Warning; }\n+                    }\n+                }\n+                SignalledError::SawSomeError => {\n+                    // if AST-borrowck signalled a (cancelled) error,\n+                    // then we will just emit the buffered\n+                    // MIR-borrowck errors as normal.\n+                }\n+            }\n+        }\n+\n+        for diag in mbcx.errors_buffer.drain(..) {\n+            DiagnosticBuilder::new_diagnostic(mbcx.tcx.sess.diagnostic(), diag).emit();\n+        }\n     }\n \n     let result = BorrowCheckResult {"}]}