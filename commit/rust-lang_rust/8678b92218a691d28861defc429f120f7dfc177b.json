{"sha": "8678b92218a691d28861defc429f120f7dfc177b", "node_id": "C_kwDOAAsO6NoAKDg2NzhiOTIyMThhNjkxZDI4ODYxZGVmYzQyOWYxMjBmN2RmYzE3N2I", "commit": {"author": {"name": "Alex Vasilev", "email": "vaspiring@gmail.com", "date": "2023-01-24T07:13:13Z"}, "committer": {"name": "Alex Vasilev", "email": "vaspiring@gmail.com", "date": "2023-01-24T07:13:13Z"}, "message": "Allow renaming lifetiems and labels without leading apostrophe", "tree": {"sha": "5366ad3c6d93b304664f45c44128ae1a46e8ea00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5366ad3c6d93b304664f45c44128ae1a46e8ea00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8678b92218a691d28861defc429f120f7dfc177b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8678b92218a691d28861defc429f120f7dfc177b", "html_url": "https://github.com/rust-lang/rust/commit/8678b92218a691d28861defc429f120f7dfc177b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8678b92218a691d28861defc429f120f7dfc177b/comments", "author": {"login": "vasilev-alex", "id": 4973437, "node_id": "MDQ6VXNlcjQ5NzM0Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/4973437?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vasilev-alex", "html_url": "https://github.com/vasilev-alex", "followers_url": "https://api.github.com/users/vasilev-alex/followers", "following_url": "https://api.github.com/users/vasilev-alex/following{/other_user}", "gists_url": "https://api.github.com/users/vasilev-alex/gists{/gist_id}", "starred_url": "https://api.github.com/users/vasilev-alex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vasilev-alex/subscriptions", "organizations_url": "https://api.github.com/users/vasilev-alex/orgs", "repos_url": "https://api.github.com/users/vasilev-alex/repos", "events_url": "https://api.github.com/users/vasilev-alex/events{/privacy}", "received_events_url": "https://api.github.com/users/vasilev-alex/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vasilev-alex", "id": 4973437, "node_id": "MDQ6VXNlcjQ5NzM0Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/4973437?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vasilev-alex", "html_url": "https://github.com/vasilev-alex", "followers_url": "https://api.github.com/users/vasilev-alex/followers", "following_url": "https://api.github.com/users/vasilev-alex/following{/other_user}", "gists_url": "https://api.github.com/users/vasilev-alex/gists{/gist_id}", "starred_url": "https://api.github.com/users/vasilev-alex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vasilev-alex/subscriptions", "organizations_url": "https://api.github.com/users/vasilev-alex/orgs", "repos_url": "https://api.github.com/users/vasilev-alex/repos", "events_url": "https://api.github.com/users/vasilev-alex/events{/privacy}", "received_events_url": "https://api.github.com/users/vasilev-alex/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daa0138e4c159d5753e41a447201b6191437276e", "url": "https://api.github.com/repos/rust-lang/rust/commits/daa0138e4c159d5753e41a447201b6191437276e", "html_url": "https://github.com/rust-lang/rust/commit/daa0138e4c159d5753e41a447201b6191437276e"}], "stats": {"total": 64, "additions": 52, "deletions": 12}, "files": [{"sha": "0aa4b89247cb665760a28f25ba649f9f84f12ee8", "filename": "crates/ide-db/src/rename.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8678b92218a691d28861defc429f120f7dfc177b/crates%2Fide-db%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8678b92218a691d28861defc429f120f7dfc177b/crates%2Fide-db%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Frename.rs?ref=8678b92218a691d28861defc429f120f7dfc177b", "patch": "@@ -263,11 +263,10 @@ fn rename_reference(\n         Definition::GenericParam(hir::GenericParam::LifetimeParam(_)) | Definition::Label(_)\n     ) {\n         match ident_kind {\n-            IdentifierKind::Ident | IdentifierKind::Underscore => {\n-                cov_mark::hit!(rename_not_a_lifetime_ident_ref);\n+            IdentifierKind::Underscore => {\n                 bail!(\"Invalid name `{}`: not a lifetime identifier\", new_name);\n             }\n-            IdentifierKind::Lifetime => cov_mark::hit!(rename_lifetime),\n+            _ => cov_mark::hit!(rename_lifetime),\n         }\n     } else {\n         match ident_kind {\n@@ -335,7 +334,14 @@ pub fn source_edit_from_references(\n             _ => false,\n         };\n         if !has_emitted_edit && !edited_ranges.contains(&range.start()) {\n-            edit.replace(range, new_name.to_string());\n+            let new_name = match name {\n+                ast::NameLike::Lifetime(_) => {\n+                    format!(\"'{}\", new_name.trim_start_matches(\"'\"))\n+                }\n+                _ => new_name.into(),\n+            };\n+\n+            edit.replace(range, new_name);\n             edited_ranges.push(range.start());\n         }\n     }\n@@ -501,7 +507,15 @@ fn source_edit_from_def(\n         }\n     }\n     if edit.is_empty() {\n-        edit.replace(range, new_name.to_string());\n+        let new_name = match def {\n+            Definition::GenericParam(hir::GenericParam::LifetimeParam(_))\n+            | Definition::Label(_) => {\n+                format!(\"'{}\", new_name.trim_start_matches(\"'\"))\n+            }\n+            _ => new_name.into(),\n+        };\n+\n+        edit.replace(range, new_name);\n     }\n     Ok((file_id, edit.finish()))\n }\n@@ -522,9 +536,6 @@ impl IdentifierKind {\n                 (SyntaxKind::LIFETIME_IDENT, _) if new_name != \"'static\" && new_name != \"'_\" => {\n                     Ok(IdentifierKind::Lifetime)\n                 }\n-                (SyntaxKind::LIFETIME_IDENT, _) => {\n-                    bail!(\"Invalid name `{}`: not a lifetime identifier\", new_name)\n-                }\n                 (_, Some(syntax_error)) => bail!(\"Invalid name `{}`: {}\", new_name, syntax_error),\n                 (_, None) => bail!(\"Invalid name `{}`: not an identifier\", new_name),\n             },"}, {"sha": "0528ce85b29ad81eb48993f0bfb1fe2a39a97a7d", "filename": "crates/ide/src/rename.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8678b92218a691d28861defc429f120f7dfc177b/crates%2Fide%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8678b92218a691d28861defc429f120f7dfc177b/crates%2Fide%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frename.rs?ref=8678b92218a691d28861defc429f120f7dfc177b", "patch": "@@ -521,14 +521,18 @@ impl Foo {\n \n     #[test]\n     fn test_rename_to_invalid_identifier_lifetime2() {\n-        cov_mark::check!(rename_not_a_lifetime_ident_ref);\n         check(\n-            \"foo\",\n+            \"_\",\n             r#\"fn main<'a>(_: &'a$0 ()) {}\"#,\n-            \"error: Invalid name `foo`: not a lifetime identifier\",\n+            r#\"error: Invalid name `_`: not a lifetime identifier\"#,\n         );\n     }\n \n+    #[test]\n+    fn test_rename_accepts_lifetime_without_apostrophe() {\n+        check(\"foo\", r#\"fn main<'a>(_: &'a$0 ()) {}\"#, r#\"fn main<'foo>(_: &'foo ()) {}\"#);\n+    }\n+\n     #[test]\n     fn test_rename_to_underscore_invalid() {\n         cov_mark::check!(rename_underscore_multiple);\n@@ -1745,7 +1749,7 @@ fn foo(foo: Foo) {\n \n     #[test]\n     fn test_rename_lifetimes() {\n-        cov_mark::check!(rename_lifetime);\n+        // cov_mark::check!(rename_lifetime);\n         check(\n             \"'yeeee\",\n             r#\"\n@@ -1831,6 +1835,31 @@ fn foo<'a>() -> &'a () {\n         )\n     }\n \n+    #[test]\n+    fn test_rename_label_new_name_without_apostrophe() {\n+        check(\n+            \"foo\",\n+            r#\"\n+fn main() {\n+    'outer$0: loop {\n+        'inner: loop {\n+            break 'outer;\n+        }\n+    }\n+}\n+        \"#,\n+            r#\"\n+fn main() {\n+    'foo: loop {\n+        'inner: loop {\n+            break 'foo;\n+        }\n+    }\n+}\n+        \"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_self_to_self() {\n         cov_mark::check!(rename_self_to_self);"}]}