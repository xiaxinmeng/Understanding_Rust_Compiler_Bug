{"sha": "45497e32ccade5671f564ea6df69db1423fe090c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NDk3ZTMyY2NhZGU1NjcxZjU2NGVhNmRmNjlkYjE0MjNmZTA5MGM=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-08-10T10:23:48Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-08-20T09:37:32Z"}, "message": "bootstrap: Allow for building LLVM with ThinLTO.", "tree": {"sha": "2cdd3a2c31bf8939de7955dbb9420bae722888cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cdd3a2c31bf8939de7955dbb9420bae722888cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45497e32ccade5671f564ea6df69db1423fe090c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45497e32ccade5671f564ea6df69db1423fe090c", "html_url": "https://github.com/rust-lang/rust/commit/45497e32ccade5671f564ea6df69db1423fe090c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45497e32ccade5671f564ea6df69db1423fe090c/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34a654caa3640b606316169ebb57e4236e35f57a", "url": "https://api.github.com/repos/rust-lang/rust/commits/34a654caa3640b606316169ebb57e4236e35f57a", "html_url": "https://github.com/rust-lang/rust/commit/34a654caa3640b606316169ebb57e4236e35f57a"}], "stats": {"total": 68, "additions": 64, "deletions": 4}, "files": [{"sha": "35f69cd05b607098028140e8edcb79000ae0c003", "filename": "config.toml.example", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45497e32ccade5671f564ea6df69db1423fe090c/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/45497e32ccade5671f564ea6df69db1423fe090c/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=45497e32ccade5671f564ea6df69db1423fe090c", "patch": "@@ -21,6 +21,12 @@\n # Indicates whether the LLVM build is a Release or Debug build\n #optimize = true\n \n+# Indicates whether LLVM should be built with ThinLTO. Note that this will\n+# only succeed if you use clang, lld, llvm-ar, and llvm-ranlib in your C/C++\n+# toolchain (see the `cc`, `cxx`, `linker`, `ar`, and `ranlib` options below).\n+# More info at: https://clang.llvm.org/docs/ThinLTO.html#clang-bootstrap\n+#thin-lto = false\n+\n # Indicates whether an LLVM Release build should include debug info\n #release-debuginfo = false\n "}, {"sha": "20cdfcb3d298134ebbab2d4900c741e70c7b8080", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/45497e32ccade5671f564ea6df69db1423fe090c/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45497e32ccade5671f564ea6df69db1423fe090c/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=45497e32ccade5671f564ea6df69db1423fe090c", "patch": "@@ -50,6 +50,7 @@ impl Step for Std {\n         println!(\"Checking std artifacts ({} -> {})\", &compiler.host, target);\n         run_cargo(builder,\n                   &mut cargo,\n+                  vec![],\n                   &libstd_stamp(builder, compiler, target),\n                   true);\n \n@@ -98,6 +99,7 @@ impl Step for Rustc {\n         println!(\"Checking compiler artifacts ({} -> {})\", &compiler.host, target);\n         run_cargo(builder,\n                   &mut cargo,\n+                  vec![],\n                   &librustc_stamp(builder, compiler, target),\n                   true);\n \n@@ -149,6 +151,7 @@ impl Step for CodegenBackend {\n         let _folder = builder.fold_output(|| format!(\"stage{}-rustc_codegen_llvm\", compiler.stage));\n         run_cargo(builder,\n                   &mut cargo,\n+                  vec![],\n                   &codegen_backend_stamp(builder, compiler, target, backend),\n                   true);\n     }\n@@ -187,6 +190,7 @@ impl Step for Test {\n         println!(\"Checking test artifacts ({} -> {})\", &compiler.host, target);\n         run_cargo(builder,\n                   &mut cargo,\n+                  vec![],\n                   &libtest_stamp(builder, compiler, target),\n                   true);\n \n@@ -236,6 +240,7 @@ impl Step for Rustdoc {\n         println!(\"Checking rustdoc artifacts ({} -> {})\", &compiler.host, target);\n         run_cargo(builder,\n                   &mut cargo,\n+                  vec![],\n                   &rustdoc_stamp(builder, compiler, target),\n                   true);\n "}, {"sha": "da0ccf5e1773d164cbffbe015433bd127e007448", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/45497e32ccade5671f564ea6df69db1423fe090c/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45497e32ccade5671f564ea6df69db1423fe090c/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=45497e32ccade5671f564ea6df69db1423fe090c", "patch": "@@ -117,6 +117,7 @@ impl Step for Std {\n                 &compiler.host, target));\n         run_cargo(builder,\n                   &mut cargo,\n+                  vec![],\n                   &libstd_stamp(builder, compiler, target),\n                   false);\n \n@@ -396,6 +397,7 @@ impl Step for Test {\n                 &compiler.host, target));\n         run_cargo(builder,\n                   &mut cargo,\n+                  vec![],\n                   &libtest_stamp(builder, compiler, target),\n                   false);\n \n@@ -529,6 +531,7 @@ impl Step for Rustc {\n                  compiler.stage, &compiler.host, target));\n         run_cargo(builder,\n                   &mut cargo,\n+                  vec![],\n                   &librustc_stamp(builder, compiler, target),\n                   false);\n \n@@ -673,18 +676,47 @@ impl Step for CodegenBackend {\n         let out_dir = builder.cargo_out(compiler, Mode::Codegen, target);\n         builder.clear_if_dirty(&out_dir, &librustc_stamp(builder, compiler, target));\n \n-        let mut cargo = builder.cargo(compiler, Mode::Codegen, target, \"build\");\n+        let mut cargo = builder.cargo(compiler, Mode::Codegen, target, \"rustc\");\n         cargo.arg(\"--manifest-path\")\n             .arg(builder.src.join(\"src/librustc_codegen_llvm/Cargo.toml\"));\n         rustc_cargo_env(builder, &mut cargo);\n \n         let features = build_codegen_backend(&builder, &mut cargo, &compiler, target, backend);\n \n+        let mut cargo_tails_args = vec![];\n+\n+        if builder.config.llvm_thin_lto {\n+            cargo_tails_args.push(\"--\".to_string());\n+\n+            let num_jobs = builder.jobs();\n+\n+            if !target.contains(\"msvc\") {\n+                // Here we assume that the linker is clang. If it's not, there'll\n+                // be linker errors.\n+                cargo_tails_args.push(\"-Clink-arg=-fuse-ld=lld\".to_string());\n+                cargo_tails_args.push(\"-Clink-arg=-flto=thin\".to_string());\n+\n+                if builder.config.llvm_optimize {\n+                    cargo_tails_args.push(\"-Clink-arg=-O2\".to_string());\n+                }\n+\n+                // Let's make LLD respect the `-j` option.\n+                let num_jobs_arg = format!(\"-Clink-arg=-Wl,--thinlto-jobs={}\", num_jobs);\n+                cargo_tails_args.push(num_jobs_arg);\n+            } else {\n+                // Here we assume that the linker is lld-link.exe. lld-link.exe\n+                // does not need the extra arguments except for num_jobs\n+                let num_jobs_arg = format!(\"-Clink-arg=/opt:lldltojobs={}\", num_jobs);\n+                cargo_tails_args.push(num_jobs_arg);\n+            }\n+        }\n+\n         let tmp_stamp = out_dir.join(\".tmp.stamp\");\n \n         let _folder = builder.fold_output(|| format!(\"stage{}-rustc_codegen_llvm\", compiler.stage));\n         let files = run_cargo(builder,\n                               cargo.arg(\"--features\").arg(features),\n+                              cargo_tails_args,\n                               &tmp_stamp,\n                               false);\n         if builder.config.dry_run {\n@@ -1045,7 +1077,11 @@ fn stderr_isatty() -> bool {\n     }\n }\n \n-pub fn run_cargo(builder: &Builder, cargo: &mut Command, stamp: &Path, is_check: bool)\n+pub fn run_cargo(builder: &Builder,\n+                 cargo: &mut Command,\n+                 tail_args: Vec<String>,\n+                 stamp: &Path,\n+                 is_check: bool)\n     -> Vec<PathBuf>\n {\n     if builder.config.dry_run {\n@@ -1066,7 +1102,7 @@ pub fn run_cargo(builder: &Builder, cargo: &mut Command, stamp: &Path, is_check:\n     // files we need to probe for later.\n     let mut deps = Vec::new();\n     let mut toplevel = Vec::new();\n-    let ok = stream_cargo(builder, cargo, &mut |msg| {\n+    let ok = stream_cargo(builder, cargo, tail_args, &mut |msg| {\n         let filenames = match msg {\n             CargoMessage::CompilerArtifact { filenames, .. } => filenames,\n             _ => return,\n@@ -1191,6 +1227,7 @@ pub fn run_cargo(builder: &Builder, cargo: &mut Command, stamp: &Path, is_check:\n pub fn stream_cargo(\n     builder: &Builder,\n     cargo: &mut Command,\n+    tail_args: Vec<String>,\n     cb: &mut dyn FnMut(CargoMessage),\n ) -> bool {\n     if builder.config.dry_run {\n@@ -1210,6 +1247,10 @@ pub fn stream_cargo(\n         cargo.env(\"RUSTC_COLOR\", \"1\");\n     }\n \n+    for arg in tail_args {\n+        cargo.arg(arg);\n+    }\n+\n     builder.verbose(&format!(\"running: {:?}\", cargo));\n     let mut child = match cargo.spawn() {\n         Ok(child) => child,"}, {"sha": "bf4d39c4947e51202945a14076f32dc89aefc998", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/45497e32ccade5671f564ea6df69db1423fe090c/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45497e32ccade5671f564ea6df69db1423fe090c/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=45497e32ccade5671f564ea6df69db1423fe090c", "patch": "@@ -77,6 +77,7 @@ pub struct Config {\n     pub llvm_enabled: bool,\n     pub llvm_assertions: bool,\n     pub llvm_optimize: bool,\n+    pub llvm_thin_lto: bool,\n     pub llvm_release_debuginfo: bool,\n     pub llvm_version_check: bool,\n     pub llvm_static_stdcpp: bool,\n@@ -247,6 +248,7 @@ struct Llvm {\n     ninja: Option<bool>,\n     assertions: Option<bool>,\n     optimize: Option<bool>,\n+    thin_lto: Option<bool>,\n     release_debuginfo: Option<bool>,\n     version_check: Option<bool>,\n     static_libstdcpp: Option<bool>,\n@@ -505,6 +507,7 @@ impl Config {\n             set(&mut config.llvm_enabled, llvm.enabled);\n             llvm_assertions = llvm.assertions;\n             set(&mut config.llvm_optimize, llvm.optimize);\n+            set(&mut config.llvm_thin_lto, llvm.thin_lto);\n             set(&mut config.llvm_release_debuginfo, llvm.release_debuginfo);\n             set(&mut config.llvm_version_check, llvm.version_check);\n             set(&mut config.llvm_static_stdcpp, llvm.static_libstdcpp);"}, {"sha": "966673d7d2c147b7c143d20bd7b6f378be9e1959", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/45497e32ccade5671f564ea6df69db1423fe090c/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45497e32ccade5671f564ea6df69db1423fe090c/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=45497e32ccade5671f564ea6df69db1423fe090c", "patch": "@@ -153,6 +153,11 @@ impl Step for Llvm {\n            .define(\"LLVM_TARGET_ARCH\", target.split('-').next().unwrap())\n            .define(\"LLVM_DEFAULT_TARGET_TRIPLE\", target);\n \n+        if builder.config.llvm_thin_lto {\n+            cfg.define(\"LLVM_ENABLE_LTO\", \"Thin\")\n+               .define(\"LLVM_ENABLE_LLD\", \"ON\");\n+        }\n+\n         // By default, LLVM will automatically find OCaml and, if it finds it,\n         // install the LLVM bindings in LLVM_OCAML_INSTALL_PATH, which defaults\n         // to /usr/bin/ocaml."}, {"sha": "04aaa970654730dd3c63a6aedbabddbb37b3d6d0", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45497e32ccade5671f564ea6df69db1423fe090c/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45497e32ccade5671f564ea6df69db1423fe090c/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=45497e32ccade5671f564ea6df69db1423fe090c", "patch": "@@ -136,7 +136,7 @@ impl Step for ToolBuild {\n         let _folder = builder.fold_output(|| format!(\"stage{}-{}\", compiler.stage, tool));\n         builder.info(&format!(\"Building stage{} tool {} ({})\", compiler.stage, tool, target));\n         let mut duplicates = Vec::new();\n-        let is_expected = compile::stream_cargo(builder, &mut cargo, &mut |msg| {\n+        let is_expected = compile::stream_cargo(builder, &mut cargo, vec![], &mut |msg| {\n             // Only care about big things like the RLS/Cargo for now\n             match tool {\n                 | \"rls\""}]}