{"sha": "0e89f50f6e937349233db1c52af2b33c683782e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlODlmNTBmNmU5MzczNDkyMzNkYjFjNTJhZjJiMzNjNjgzNzgyZTY=", "commit": {"author": {"name": "Jarek Samic", "email": "cldfire3@gmail.com", "date": "2020-07-12T18:37:22Z"}, "committer": {"name": "Jarek Samic", "email": "cldfire3@gmail.com", "date": "2020-07-12T18:37:22Z"}, "message": "Clean up handling of style files in rustdoc\nDisable all themes other than `light.css` to prevent rule conflicts", "tree": {"sha": "1446eccde308e60b7aebde849acf9aadc7636cb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1446eccde308e60b7aebde849acf9aadc7636cb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e89f50f6e937349233db1c52af2b33c683782e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e89f50f6e937349233db1c52af2b33c683782e6", "html_url": "https://github.com/rust-lang/rust/commit/0e89f50f6e937349233db1c52af2b33c683782e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e89f50f6e937349233db1c52af2b33c683782e6/comments", "author": {"login": "Cldfire", "id": 13814214, "node_id": "MDQ6VXNlcjEzODE0MjE0", "avatar_url": "https://avatars.githubusercontent.com/u/13814214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cldfire", "html_url": "https://github.com/Cldfire", "followers_url": "https://api.github.com/users/Cldfire/followers", "following_url": "https://api.github.com/users/Cldfire/following{/other_user}", "gists_url": "https://api.github.com/users/Cldfire/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cldfire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cldfire/subscriptions", "organizations_url": "https://api.github.com/users/Cldfire/orgs", "repos_url": "https://api.github.com/users/Cldfire/repos", "events_url": "https://api.github.com/users/Cldfire/events{/privacy}", "received_events_url": "https://api.github.com/users/Cldfire/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Cldfire", "id": 13814214, "node_id": "MDQ6VXNlcjEzODE0MjE0", "avatar_url": "https://avatars.githubusercontent.com/u/13814214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cldfire", "html_url": "https://github.com/Cldfire", "followers_url": "https://api.github.com/users/Cldfire/followers", "following_url": "https://api.github.com/users/Cldfire/following{/other_user}", "gists_url": "https://api.github.com/users/Cldfire/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cldfire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cldfire/subscriptions", "organizations_url": "https://api.github.com/users/Cldfire/orgs", "repos_url": "https://api.github.com/users/Cldfire/repos", "events_url": "https://api.github.com/users/Cldfire/events{/privacy}", "received_events_url": "https://api.github.com/users/Cldfire/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d09331e00b02f81c714b0c41ce3a38380dd36a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d09331e00b02f81c714b0c41ce3a38380dd36a2", "html_url": "https://github.com/rust-lang/rust/commit/9d09331e00b02f81c714b0c41ce3a38380dd36a2"}], "stats": {"total": 119, "additions": 76, "deletions": 43}, "files": [{"sha": "39e33da44964e00ebe77497a411172b2a30a4afc", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0e89f50f6e937349233db1c52af2b33c683782e6/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e89f50f6e937349233db1c52af2b33c683782e6/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=0e89f50f6e937349233db1c52af2b33c683782e6", "patch": "@@ -20,6 +20,7 @@ use crate::core::new_handler;\n use crate::externalfiles::ExternalHtml;\n use crate::html;\n use crate::html::markdown::IdMap;\n+use crate::html::render::StylePath;\n use crate::html::static_files;\n use crate::opts;\n use crate::passes::{self, Condition, DefaultPassOption};\n@@ -207,7 +208,7 @@ pub struct RenderOptions {\n     pub sort_modules_alphabetically: bool,\n     /// List of themes to extend the docs with. Original argument name is included to assist in\n     /// displaying errors if it fails a theme check.\n-    pub themes: Vec<PathBuf>,\n+    pub themes: Vec<StylePath>,\n     /// If present, CSS file that contains rules to add to the default CSS.\n     pub extension_css: Option<PathBuf>,\n     /// A map of crate names to the URL to use instead of querying the crate's `html_root_url`.\n@@ -410,7 +411,7 @@ impl Options {\n                     ))\n                     .emit();\n                 }\n-                themes.push(theme_file);\n+                themes.push(StylePath { path: theme_file, disabled: true });\n             }\n         }\n "}, {"sha": "cc6b38ebcdb7fb26b929b7485724add16d254f3c", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0e89f50f6e937349233db1c52af2b33c683782e6/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e89f50f6e937349233db1c52af2b33c683782e6/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=0e89f50f6e937349233db1c52af2b33c683782e6", "patch": "@@ -3,7 +3,7 @@ use std::path::PathBuf;\n use crate::externalfiles::ExternalHtml;\n use crate::html::escape::Escape;\n use crate::html::format::{Buffer, Print};\n-use crate::html::render::ensure_trailing_slash;\n+use crate::html::render::{ensure_trailing_slash, StylePath};\n \n #[derive(Clone)]\n pub struct Layout {\n@@ -36,7 +36,7 @@ pub fn render<T: Print, S: Print>(\n     page: &Page<'_>,\n     sidebar: S,\n     t: T,\n-    themes: &[PathBuf],\n+    style_files: &[StylePath],\n ) -> String {\n     let static_root_path = page.static_root_path.unwrap_or(page.root_path);\n     format!(\n@@ -52,10 +52,7 @@ pub fn render<T: Print, S: Print>(\n     <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{static_root_path}normalize{suffix}.css\\\">\\\n     <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{static_root_path}rustdoc{suffix}.css\\\" \\\n           id=\\\"mainThemeStyle\\\">\\\n-    {themes}\\\n-    <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{static_root_path}dark{suffix}.css\\\">\\\n-    <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{static_root_path}light{suffix}.css\\\" \\\n-          id=\\\"themeStyle\\\">\\\n+    {style_files}\\\n     <script src=\\\"{static_root_path}storage{suffix}.js\\\"></script>\\\n     <noscript><link rel=\\\"stylesheet\\\" href=\\\"{static_root_path}noscript{suffix}.css\\\"></noscript>\\\n     {css_extension}\\\n@@ -172,13 +169,19 @@ pub fn render<T: Print, S: Print>(\n         after_content = layout.external_html.after_content,\n         sidebar = Buffer::html().to_display(sidebar),\n         krate = layout.krate,\n-        themes = themes\n+        style_files = style_files\n             .iter()\n-            .filter_map(|t| t.file_stem())\n-            .filter_map(|t| t.to_str())\n+            .filter_map(|t| {\n+                if let Some(stem) = t.path.file_stem() { Some((stem, t.disabled)) } else { None }\n+            })\n+            .filter_map(|t| {\n+                if let Some(path) = t.0.to_str() { Some((path, t.1)) } else { None }\n+            })\n             .map(|t| format!(\n-                r#\"<link rel=\"stylesheet\" type=\"text/css\" href=\"{}.css\">\"#,\n-                Escape(&format!(\"{}{}{}\", static_root_path, t, page.resource_suffix))\n+                r#\"<link rel=\"stylesheet\" type=\"text/css\" href=\"{}.css\" {} {}>\"#,\n+                Escape(&format!(\"{}{}{}\", static_root_path, t.0, page.resource_suffix)),\n+                if t.1 { \"disabled\" } else { \"\" },\n+                if t.0 == \"light\" { \"id=\\\"themeStyle\\\"\" } else { \"\" }\n             ))\n             .collect::<String>(),\n         suffix = page.resource_suffix,"}, {"sha": "be14e686cf146c3c0e2263db69d92dc6b6c48961", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 58, "deletions": 29, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/0e89f50f6e937349233db1c52af2b33c683782e6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e89f50f6e937349233db1c52af2b33c683782e6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=0e89f50f6e937349233db1c52af2b33c683782e6", "patch": "@@ -187,8 +187,8 @@ crate struct SharedContext {\n     /// This flag indicates whether listings of modules (in the side bar and documentation itself)\n     /// should be ordered alphabetically or in order of appearance (in the source code).\n     pub sort_modules_alphabetically: bool,\n-    /// Additional themes to be added to the generated docs.\n-    pub themes: Vec<PathBuf>,\n+    /// Additional CSS files to be added to the generated docs.\n+    pub style_files: Vec<StylePath>,\n     /// Suffix to be added on resource files (if suffix is \"-v2\" then \"light.css\" becomes\n     /// \"light-v2.css\").\n     pub resource_suffix: String,\n@@ -417,6 +417,14 @@ impl Serialize for TypeWithKind {\n     }\n }\n \n+#[derive(Debug, Clone)]\n+pub struct StylePath {\n+    /// The path to the theme\n+    pub path: PathBuf,\n+    /// What the `disabled` attribute should be set to in the HTML tag\n+    pub disabled: bool,\n+}\n+\n thread_local!(static CACHE_KEY: RefCell<Arc<Cache>> = Default::default());\n thread_local!(pub static CURRENT_DEPTH: Cell<usize> = Cell::new(0));\n \n@@ -460,7 +468,7 @@ pub fn run(\n         id_map,\n         playground_url,\n         sort_modules_alphabetically,\n-        themes,\n+        themes: style_files,\n         extension_css,\n         extern_html_root_urls,\n         resource_suffix,\n@@ -530,7 +538,7 @@ pub fn run(\n         layout,\n         created_dirs: Default::default(),\n         sort_modules_alphabetically,\n-        themes,\n+        style_files,\n         resource_suffix,\n         static_root_path,\n         fs: DocFS::new(&errors),\n@@ -539,6 +547,18 @@ pub fn run(\n         playground,\n     };\n \n+    // Add the default themes to the `Vec` of stylepaths\n+    //\n+    // Note that these must be added before `sources::render` is called\n+    // so that the resulting source pages are styled\n+    //\n+    // `light.css` is not disabled because it is the stylesheet that stays loaded\n+    // by the browser as the theme stylesheet. The theme system (hackily) works by\n+    // changing the href to this stylesheet. All other themes are disabled to\n+    // prevent rule conflicts\n+    scx.style_files.push(StylePath { path: PathBuf::from(\"light.css\"), disabled: false });\n+    scx.style_files.push(StylePath { path: PathBuf::from(\"dark.css\"), disabled: true });\n+\n     let dst = output;\n     scx.ensure_dir(&dst)?;\n     krate = sources::render(&dst, &mut scx, krate)?;\n@@ -615,11 +635,34 @@ fn write_shared(\n     // then we'll run over the \"official\" styles.\n     let mut themes: FxHashSet<String> = FxHashSet::default();\n \n-    for entry in &cx.shared.themes {\n-        let content = try_err!(fs::read(&entry), &entry);\n-        let theme = try_none!(try_none!(entry.file_stem(), &entry).to_str(), &entry);\n-        let extension = try_none!(try_none!(entry.extension(), &entry).to_str(), &entry);\n-        cx.shared.fs.write(cx.path(&format!(\"{}.{}\", theme, extension)), content.as_slice())?;\n+    for entry in &cx.shared.style_files {\n+        let theme = try_none!(try_none!(entry.path.file_stem(), &entry.path).to_str(), &entry.path);\n+        let extension =\n+            try_none!(try_none!(entry.path.extension(), &entry.path).to_str(), &entry.path);\n+\n+        // Handle the official themes\n+        match theme {\n+            \"light\" => write_minify(\n+                &cx.shared.fs,\n+                cx.path(\"light.css\"),\n+                static_files::themes::LIGHT,\n+                options.enable_minification,\n+            )?,\n+            \"dark\" => write_minify(\n+                &cx.shared.fs,\n+                cx.path(\"dark.css\"),\n+                static_files::themes::DARK,\n+                options.enable_minification,\n+            )?,\n+            _ => {\n+                // Handle added third-party themes\n+                let content = try_err!(fs::read(&entry.path), &entry.path);\n+                cx.shared\n+                    .fs\n+                    .write(cx.path(&format!(\"{}.{}\", theme, extension)), content.as_slice())?;\n+            }\n+        };\n+\n         themes.insert(theme.to_owned());\n     }\n \n@@ -633,20 +676,6 @@ fn write_shared(\n     write(cx.path(\"brush.svg\"), static_files::BRUSH_SVG)?;\n     write(cx.path(\"wheel.svg\"), static_files::WHEEL_SVG)?;\n     write(cx.path(\"down-arrow.svg\"), static_files::DOWN_ARROW_SVG)?;\n-    write_minify(\n-        &cx.shared.fs,\n-        cx.path(\"light.css\"),\n-        static_files::themes::LIGHT,\n-        options.enable_minification,\n-    )?;\n-    themes.insert(\"light\".to_owned());\n-    write_minify(\n-        &cx.shared.fs,\n-        cx.path(\"dark.css\"),\n-        static_files::themes::DARK,\n-        options.enable_minification,\n-    )?;\n-    themes.insert(\"dark\".to_owned());\n \n     let mut themes: Vec<&String> = themes.iter().collect();\n     themes.sort();\n@@ -957,7 +986,7 @@ themePicker.onblur = handleThemeButtonsBlur;\n                     })\n                     .collect::<String>()\n             );\n-            let v = layout::render(&cx.shared.layout, &page, \"\", content, &cx.shared.themes);\n+            let v = layout::render(&cx.shared.layout, &page, \"\", content, &cx.shared.style_files);\n             cx.shared.fs.write(&dst, v.as_bytes())?;\n         }\n     }\n@@ -1375,7 +1404,7 @@ impl Context {\n             &page,\n             sidebar,\n             |buf: &mut Buffer| all.print(buf),\n-            &self.shared.themes,\n+            &self.shared.style_files,\n         );\n         self.shared.fs.write(&final_file, v.as_bytes())?;\n \n@@ -1384,9 +1413,9 @@ impl Context {\n         page.description = \"Settings of Rustdoc\";\n         page.root_path = \"./\";\n \n-        let mut themes = self.shared.themes.clone();\n+        let mut style_files = self.shared.style_files.clone();\n         let sidebar = \"<p class='location'>Settings</p><div class='sidebar-elems'></div>\";\n-        themes.push(PathBuf::from(\"settings.css\"));\n+        style_files.push(StylePath { path: PathBuf::from(\"settings.css\"), disabled: false });\n         let v = layout::render(\n             &self.shared.layout,\n             &page,\n@@ -1395,7 +1424,7 @@ impl Context {\n                 self.shared.static_root_path.as_deref().unwrap_or(\"./\"),\n                 &self.shared.resource_suffix,\n             ),\n-            &themes,\n+            &style_files,\n         );\n         self.shared.fs.write(&settings_file, v.as_bytes())?;\n \n@@ -1457,7 +1486,7 @@ impl Context {\n                 &page,\n                 |buf: &mut _| print_sidebar(self, it, buf),\n                 |buf: &mut _| print_item(self, it, buf),\n-                &self.shared.themes,\n+                &self.shared.style_files,\n             )\n         } else {\n             let mut url = self.root_path();"}, {"sha": "03f79b931868b547fefb899dd4a6afa81ecb1a0f", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e89f50f6e937349233db1c52af2b33c683782e6/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e89f50f6e937349233db1c52af2b33c683782e6/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=0e89f50f6e937349233db1c52af2b33c683782e6", "patch": "@@ -123,7 +123,7 @@ impl<'a> SourceCollector<'a> {\n             &page,\n             \"\",\n             |buf: &mut _| print_src(buf, &contents),\n-            &self.scx.themes,\n+            &self.scx.style_files,\n         );\n         self.scx.fs.write(&cur, v.as_bytes())?;\n         self.scx.local_sources.insert(p, href);"}]}