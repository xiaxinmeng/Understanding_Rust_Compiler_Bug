{"sha": "4603ac31b0655793a82f110f544dc1c6abc57bb7", "node_id": "C_kwDOAAsO6NoAKDQ2MDNhYzMxYjA2NTU3OTNhODJmMTEwZjU0NGRjMWM2YWJjNTdiYjc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-19T08:32:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-19T08:32:32Z"}, "message": "Auto merge of #99451 - Dylan-DPC:rollup-ceghu18, r=Dylan-DPC\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #97183 (wf-check generators)\n - #98320 (Mention first and last macro in backtrace)\n - #99335 (Use split_once in FromStr docs)\n - #99347 (Use `LocalDefId` in `OpaqueTypeKey`)\n - #99392 (Fix debuginfo tests.)\n - #99404 (Use span_bug for unexpected field projection type)\n - #99410 (Update invalid atomic ordering lint)\n - #99434 (Fix `Skip::next` for non-fused inner iterators)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a650c962b99c7311cd3cf7360c854ff63f39195c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a650c962b99c7311cd3cf7360c854ff63f39195c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4603ac31b0655793a82f110f544dc1c6abc57bb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4603ac31b0655793a82f110f544dc1c6abc57bb7", "html_url": "https://github.com/rust-lang/rust/commit/4603ac31b0655793a82f110f544dc1c6abc57bb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4603ac31b0655793a82f110f544dc1c6abc57bb7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3f35504d15e80b4727872c17c8c2f4bbaee58cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3f35504d15e80b4727872c17c8c2f4bbaee58cf", "html_url": "https://github.com/rust-lang/rust/commit/c3f35504d15e80b4727872c17c8c2f4bbaee58cf"}, {"sha": "e301cd39ad62cda469034539d06819a30ee12305", "url": "https://api.github.com/repos/rust-lang/rust/commits/e301cd39ad62cda469034539d06819a30ee12305", "html_url": "https://github.com/rust-lang/rust/commit/e301cd39ad62cda469034539d06819a30ee12305"}], "stats": {"total": 910, "additions": 396, "deletions": 514}, "files": [{"sha": "0961203d76d7d39794882ffdc10c2ba26ec73625", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -1,7 +1,7 @@\n //! The entry point of the NLL borrow checker.\n \n use rustc_data_structures::vec_map::VecMap;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::LocalDefId;\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::mir::{create_dump_file, dump_enabled, dump_mir, PassWhere};\n@@ -44,7 +44,7 @@ pub type PoloniusOutput = Output<RustcFacts>;\n /// closure requirements to propagate, and any generated errors.\n pub(crate) struct NllOutput<'tcx> {\n     pub regioncx: RegionInferenceContext<'tcx>,\n-    pub opaque_type_values: VecMap<DefId, OpaqueHiddenType<'tcx>>,\n+    pub opaque_type_values: VecMap<LocalDefId, OpaqueHiddenType<'tcx>>,\n     pub polonius_input: Option<Box<AllFacts>>,\n     pub polonius_output: Option<Rc<PoloniusOutput>>,\n     pub opt_closure_req: Option<ClosureRegionRequirements<'tcx>>,\n@@ -373,7 +373,7 @@ pub(super) fn dump_annotation<'a, 'tcx>(\n     body: &Body<'tcx>,\n     regioncx: &RegionInferenceContext<'tcx>,\n     closure_region_requirements: &Option<ClosureRegionRequirements<'_>>,\n-    opaque_type_values: &VecMap<DefId, OpaqueHiddenType<'tcx>>,\n+    opaque_type_values: &VecMap<LocalDefId, OpaqueHiddenType<'tcx>>,\n     errors: &mut crate::error::BorrowckErrors<'tcx>,\n ) {\n     let tcx = infcx.tcx;"}, {"sha": "de9da845729835c28e33a9a7880db49ba0a6f07e", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -1,6 +1,6 @@\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::vec_map::VecMap;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::LocalDefId;\n use rustc_hir::OpaqueTyOrigin;\n use rustc_infer::infer::error_reporting::unexpected_hidden_region_diagnostic;\n use rustc_infer::infer::InferCtxt;\n@@ -63,8 +63,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         &self,\n         infcx: &InferCtxt<'_, 'tcx>,\n         opaque_ty_decls: VecMap<OpaqueTypeKey<'tcx>, (OpaqueHiddenType<'tcx>, OpaqueTyOrigin)>,\n-    ) -> VecMap<DefId, OpaqueHiddenType<'tcx>> {\n-        let mut result: VecMap<DefId, OpaqueHiddenType<'tcx>> = VecMap::new();\n+    ) -> VecMap<LocalDefId, OpaqueHiddenType<'tcx>> {\n+        let mut result: VecMap<LocalDefId, OpaqueHiddenType<'tcx>> = VecMap::new();\n         for (opaque_type_key, (concrete_type, origin)) in opaque_ty_decls {\n             let substs = opaque_type_key.substs;\n             debug!(?concrete_type, ?substs);\n@@ -235,7 +235,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         // lifetimes with 'static and remapping only those used in the\n         // `impl Trait` return type, resulting in the parameters\n         // shifting.\n-        let id_substs = InternalSubsts::identity_for_item(self.tcx, def_id);\n+        let id_substs = InternalSubsts::identity_for_item(self.tcx, def_id.to_def_id());\n         debug!(?id_substs);\n         let map: FxHashMap<GenericArg<'tcx>, GenericArg<'tcx>> =\n             substs.iter().enumerate().map(|(index, subst)| (subst, id_substs[index])).collect();\n@@ -268,7 +268,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             // This logic duplicates most of `check_opaque_meets_bounds`.\n             // FIXME(oli-obk): Also do region checks here and then consider removing `check_opaque_meets_bounds` entirely.\n             let param_env = self.tcx.param_env(def_id);\n-            let body_id = self.tcx.local_def_id_to_hir_id(def_id.as_local().unwrap());\n+            let body_id = self.tcx.local_def_id_to_hir_id(def_id);\n             self.tcx.infer_ctxt().enter(move |infcx| {\n                 // Require the hidden type to be well-formed with only the generics of the opaque type.\n                 // Defining use functions may have more bounds than the opaque type, which is ok, as long as the\n@@ -296,7 +296,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         infcx\n                             .report_mismatched_types(\n                                 &ObligationCause::misc(instantiated_ty.span, body_id),\n-                                self.tcx.mk_opaque(def_id, id_substs),\n+                                self.tcx.mk_opaque(def_id.to_def_id(), id_substs),\n                                 definition_ty,\n                                 err,\n                             )\n@@ -423,7 +423,7 @@ fn check_opaque_type_parameter_valid(\n struct ReverseMapper<'tcx> {\n     tcx: TyCtxt<'tcx>,\n \n-    opaque_type_def_id: DefId,\n+    opaque_type_def_id: LocalDefId,\n     map: FxHashMap<GenericArg<'tcx>, GenericArg<'tcx>>,\n     map_missing_regions_to_empty: bool,\n \n@@ -437,7 +437,7 @@ struct ReverseMapper<'tcx> {\n impl<'tcx> ReverseMapper<'tcx> {\n     fn new(\n         tcx: TyCtxt<'tcx>,\n-        opaque_type_def_id: DefId,\n+        opaque_type_def_id: LocalDefId,\n         map: FxHashMap<GenericArg<'tcx>, GenericArg<'tcx>>,\n         hidden_ty: Ty<'tcx>,\n         span: Span,"}, {"sha": "55e96e58e468866e7b93f1e265ee72d48250586f", "filename": "compiler/rustc_error_messages/locales/en-US/lint.ftl", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -247,11 +247,6 @@ lint-atomic-ordering-invalid = `{$method}`'s failure ordering may not be `Releas\n     .label = invalid failure ordering\n     .help = consider using `Acquire` or `Relaxed` failure ordering instead\n \n-lint-atomic-ordering-invalid-fail-success = `{$method}`'s success ordering must be at least as strong as its failure ordering\n-    .fail-label = `{$fail_ordering}` failure ordering\n-    .success-label = `{$success_ordering}` success ordering\n-    .suggestion = consider using `{$success_suggestion}` success ordering instead\n-\n lint-unused-op = unused {$op} that must be used\n     .label = the {$op} produces a value\n     .suggestion = use `let _ = ...` to ignore the resulting value"}, {"sha": "61d953cd6f1ccb71e36f92c96ab40fdd4853f641", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -399,11 +399,11 @@ pub trait Emitter {\n     ) {\n         // Check for spans in macros, before `fix_multispans_in_extern_macros`\n         // has a chance to replace them.\n-        let has_macro_spans = iter::once(&*span)\n+        let has_macro_spans: Vec<_> = iter::once(&*span)\n             .chain(children.iter().map(|child| &child.span))\n             .flat_map(|span| span.primary_spans())\n             .flat_map(|sp| sp.macro_backtrace())\n-            .find_map(|expn_data| {\n+            .filter_map(|expn_data| {\n                 match expn_data.kind {\n                     ExpnKind::Root => None,\n \n@@ -413,7 +413,8 @@ pub trait Emitter {\n \n                     ExpnKind::Macro(macro_kind, name) => Some((macro_kind, name)),\n                 }\n-            });\n+            })\n+            .collect();\n \n         if !backtrace {\n             self.fix_multispans_in_extern_macros(source_map, span, children);\n@@ -422,11 +423,22 @@ pub trait Emitter {\n         self.render_multispans_macro_backtrace(span, children, backtrace);\n \n         if !backtrace {\n-            if let Some((macro_kind, name)) = has_macro_spans {\n-                let descr = macro_kind.descr();\n+            if let Some((macro_kind, name)) = has_macro_spans.first() {\n+                // Mark the actual macro this originates from\n+                let and_then = if let Some((macro_kind, last_name)) = has_macro_spans.last()\n+                    && last_name != name\n+                {\n+                    let descr = macro_kind.descr();\n+                    format!(\n+                        \" which comes from the expansion of the {descr} `{last_name}`\",\n+                    )\n+                } else {\n+                    \"\".to_string()\n+                };\n \n+                let descr = macro_kind.descr();\n                 let msg = format!(\n-                    \"this {level} originates in the {descr} `{name}` \\\n+                    \"this {level} originates in the {descr} `{name}`{and_then} \\\n                     (in Nightly builds, run with -Z macro-backtrace for more info)\",\n                 );\n "}, {"sha": "b173ac0e916b8fd2af682d92643d5bb237cce340", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -6,6 +6,7 @@\n #![feature(drain_filter)]\n #![feature(backtrace)]\n #![feature(if_let_guard)]\n+#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(never_type)]\n #![feature(adt_const_params)]"}, {"sha": "8dc20544f1b1add6279876915572578c8259c64f", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -153,7 +153,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n             .opaque_type_storage\n             .take_opaque_types()\n             .into_iter()\n-            .map(|(k, v)| (self.tcx.mk_opaque(k.def_id, k.substs), v.hidden_type.ty))\n+            .map(|(k, v)| (self.tcx.mk_opaque(k.def_id.to_def_id(), k.substs), v.hidden_type.ty))\n             .collect()\n     }\n "}, {"sha": "b3dc2e586d251849b2fa63eb211241e68e53496d", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -938,7 +938,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     #[instrument(skip(self), level = \"debug\")]\n     pub fn member_constraint(\n         &self,\n-        opaque_type_def_id: DefId,\n+        opaque_type_def_id: LocalDefId,\n         definition_span: Span,\n         hidden_ty: Ty<'tcx>,\n         region: ty::Region<'tcx>,"}, {"sha": "4ee9c4eeda40a0ffda176fe394679cc255de1736", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -51,7 +51,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             return InferOk { value: ty, obligations: vec![] };\n         }\n         let mut obligations = vec![];\n-        let replace_opaque_type = |def_id| self.opaque_type_origin(def_id, span).is_some();\n+        let replace_opaque_type = |def_id: DefId| {\n+            def_id\n+                .as_local()\n+                .map_or(false, |def_id| self.opaque_type_origin(def_id, span).is_some())\n+        };\n         let value = ty.fold_with(&mut ty::fold::BottomUpFolder {\n             tcx: self.tcx,\n             lt_op: |lt| lt,\n@@ -96,6 +100,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let (a, b) = if a_is_expected { (a, b) } else { (b, a) };\n         let process = |a: Ty<'tcx>, b: Ty<'tcx>| match *a.kind() {\n             ty::Opaque(def_id, substs) if def_id.is_local() => {\n+                let def_id = def_id.expect_local();\n                 let origin = if self.defining_use_anchor.is_some() {\n                     // Check that this is `impl Trait` type is\n                     // declared by `parent_def_id` -- i.e., one whose\n@@ -141,7 +146,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     // no one encounters it in practice.\n                     // It does occur however in `fn fut() -> impl Future<Output = i32> { async { 42 } }`,\n                     // where it is of no concern, so we only check for TAITs.\n-                    if let Some(OpaqueTyOrigin::TyAlias) = self.opaque_type_origin(did2, cause.span)\n+                    if let Some(OpaqueTyOrigin::TyAlias) =\n+                        did2.as_local().and_then(|did2| self.opaque_type_origin(did2, cause.span))\n                     {\n                         self.tcx\n                                 .sess\n@@ -399,8 +405,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     }\n \n     #[instrument(skip(self), level = \"trace\")]\n-    pub fn opaque_type_origin(&self, opaque_def_id: DefId, span: Span) -> Option<OpaqueTyOrigin> {\n-        let def_id = opaque_def_id.as_local()?;\n+    pub fn opaque_type_origin(&self, def_id: LocalDefId, span: Span) -> Option<OpaqueTyOrigin> {\n         let opaque_hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n         let parent_def_id = self.defining_use_anchor?;\n         let item_kind = &self.tcx.hir().expect_item(def_id).kind;\n@@ -409,7 +414,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             span_bug!(\n                 span,\n                 \"weird opaque type: {:#?}, {:#?}\",\n-                opaque_def_id,\n+                def_id,\n                 item_kind\n             )\n         };\n@@ -428,12 +433,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     }\n \n     #[instrument(skip(self), level = \"trace\")]\n-    fn opaque_ty_origin_unchecked(&self, opaque_def_id: DefId, span: Span) -> OpaqueTyOrigin {\n-        let def_id = opaque_def_id.as_local().unwrap();\n+    fn opaque_ty_origin_unchecked(&self, def_id: LocalDefId, span: Span) -> OpaqueTyOrigin {\n         let origin = match self.tcx.hir().expect_item(def_id).kind {\n             hir::ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => origin,\n             ref itemkind => {\n-                span_bug!(span, \"weird opaque type: {:?}, {:#?}\", opaque_def_id, itemkind)\n+                span_bug!(span, \"weird opaque type: {:?}, {:#?}\", def_id, itemkind)\n             }\n         };\n         trace!(?origin);\n@@ -557,7 +561,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             obligations = self.at(&cause, param_env).eq(prev, hidden_ty)?.obligations;\n         }\n \n-        let item_bounds = tcx.bound_explicit_item_bounds(def_id);\n+        let item_bounds = tcx.bound_explicit_item_bounds(def_id.to_def_id());\n \n         for predicate in item_bounds.transpose_iter().map(|e| e.map_bound(|(p, _)| *p)) {\n             debug!(?predicate);\n@@ -579,7 +583,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     }\n                     // Replace all other mentions of the same opaque type with the hidden type,\n                     // as the bounds must hold on the hidden type after all.\n-                    ty::Opaque(def_id2, substs2) if def_id == def_id2 && substs == substs2 => {\n+                    ty::Opaque(def_id2, substs2)\n+                        if def_id.to_def_id() == def_id2 && substs == substs2 =>\n+                    {\n                         hidden_ty\n                     }\n                     _ => ty,"}, {"sha": "551f398e0c2c41b75667078f8ce45fbbb3029901", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::intern::Interned;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::undo_log::UndoLogs;\n use rustc_data_structures::unify as ut;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::LocalDefId;\n use rustc_index::vec::IndexVec;\n use rustc_middle::infer::unify_key::{RegionVidKey, UnifiedRegion};\n use rustc_middle::ty::ReStatic;\n@@ -533,7 +533,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n \n     pub fn member_constraint(\n         &mut self,\n-        opaque_type_def_id: DefId,\n+        opaque_type_def_id: LocalDefId,\n         definition_span: Span,\n         hidden_ty: Ty<'tcx>,\n         member_region: ty::Region<'tcx>,"}, {"sha": "5c07afeb7aa8f73f0794bbb3ba26c5a55131ee2f", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 3, "deletions": 38, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -1434,10 +1434,6 @@ declare_lint! {\n     /// - Passing `Ordering::Release` or `Ordering::AcqRel` as the failure\n     ///   ordering for any of `AtomicType::compare_exchange`,\n     ///   `AtomicType::compare_exchange_weak`, or `AtomicType::fetch_update`.\n-    ///\n-    /// - Passing in a pair of orderings to `AtomicType::compare_exchange`,\n-    ///   `AtomicType::compare_exchange_weak`, or `AtomicType::fetch_update`\n-    ///   where the failure ordering is stronger than the success ordering.\n     INVALID_ATOMIC_ORDERING,\n     Deny,\n     \"usage of invalid atomic ordering in atomic operations and memory fences\"\n@@ -1544,9 +1540,9 @@ impl InvalidAtomicOrdering {\n         let Some((method, args)) = Self::inherent_atomic_method_call(cx, expr, &[sym::fetch_update, sym::compare_exchange, sym::compare_exchange_weak])\n             else {return };\n \n-        let (success_order_arg, fail_order_arg) = match method {\n-            sym::fetch_update => (&args[1], &args[2]),\n-            sym::compare_exchange | sym::compare_exchange_weak => (&args[3], &args[4]),\n+        let fail_order_arg = match method {\n+            sym::fetch_update => &args[2],\n+            sym::compare_exchange | sym::compare_exchange_weak => &args[4],\n             _ => return,\n         };\n \n@@ -1568,37 +1564,6 @@ impl InvalidAtomicOrdering {\n                 InvalidAtomicOrderingDiag { method, fail_order_arg_span: fail_order_arg.span },\n             );\n         }\n-\n-        let Some(success_ordering) = Self::match_ordering(cx, success_order_arg) else { return };\n-\n-        if matches!(\n-            (success_ordering, fail_ordering),\n-            (sym::Relaxed | sym::Release, sym::Acquire)\n-                | (sym::Relaxed | sym::Release | sym::Acquire | sym::AcqRel, sym::SeqCst)\n-        ) {\n-            let success_suggestion =\n-                if success_ordering == sym::Release && fail_ordering == sym::Acquire {\n-                    sym::AcqRel\n-                } else {\n-                    fail_ordering\n-                };\n-            cx.struct_span_lint(INVALID_ATOMIC_ORDERING, success_order_arg.span, |diag| {\n-                diag.build(fluent::lint::atomic_ordering_invalid_fail_success)\n-                    .set_arg(\"method\", method)\n-                    .set_arg(\"fail_ordering\", fail_ordering)\n-                    .set_arg(\"success_ordering\", success_ordering)\n-                    .set_arg(\"success_suggestion\", success_suggestion)\n-                    .span_label(fail_order_arg.span, fluent::lint::fail_label)\n-                    .span_label(success_order_arg.span, fluent::lint::success_label)\n-                    .span_suggestion_short(\n-                        success_order_arg.span,\n-                        fluent::lint::suggestion,\n-                        format!(\"std::sync::atomic::Ordering::{success_suggestion}\"),\n-                        Applicability::MaybeIncorrect,\n-                    )\n-                    .emit();\n-            });\n-        }\n     }\n }\n "}, {"sha": "8b2f9bdfd486bdd4555e353a9a07eebbfc4a3b48", "filename": "compiler/rustc_middle/src/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fmod.rs?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -4,7 +4,7 @@ pub mod unify_key;\n use crate::ty::Region;\n use crate::ty::Ty;\n use rustc_data_structures::sync::Lrc;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::LocalDefId;\n use rustc_span::Span;\n \n /// Requires that `region` must be equal to one of the regions in `choice_regions`.\n@@ -16,7 +16,7 @@ use rustc_span::Span;\n #[derive(Debug, Clone, HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub struct MemberConstraint<'tcx> {\n     /// The `DefId` of the opaque type causing this constraint: used for error reporting.\n-    pub opaque_type_def_id: DefId,\n+    pub opaque_type_def_id: LocalDefId,\n \n     /// The span where the hidden type was instantiated.\n     pub definition_span: Span,"}, {"sha": "423e84d88cf738f19d5d9d7d3dd8df737865be82", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -235,7 +235,7 @@ pub struct BorrowCheckResult<'tcx> {\n     /// All the opaque types that are restricted to concrete types\n     /// by this function. Unlike the value in `TypeckResults`, this has\n     /// unerased regions.\n-    pub concrete_opaque_types: VecMap<DefId, OpaqueHiddenType<'tcx>>,\n+    pub concrete_opaque_types: VecMap<LocalDefId, OpaqueHiddenType<'tcx>>,\n     pub closure_requirements: Option<ClosureRegionRequirements<'tcx>>,\n     pub used_mut_upvars: SmallVec<[Field; 8]>,\n     pub tainted_by_errors: Option<ErrorGuaranteed>,"}, {"sha": "27b9d27b8bb11b761fbb5c76a6e2e28b5584c43a", "filename": "compiler/rustc_middle/src/ty/closure.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -182,7 +182,11 @@ impl<'tcx> CapturedPlace<'tcx> {\n                         .unwrap();\n                     }\n                     ty => {\n-                        bug!(\"Unexpected type {:?} for `Field` projection\", ty)\n+                        span_bug!(\n+                            self.get_capture_kind_span(tcx),\n+                            \"Unexpected type {:?} for `Field` projection\",\n+                            ty\n+                        )\n                     }\n                 },\n "}, {"sha": "0f98d19820e25b06c5d963d9d00620cd1c3fe38e", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -542,7 +542,7 @@ pub struct TypeckResults<'tcx> {\n     /// even if they are only set in dead code (which doesn't show up in MIR).\n     /// For type-alias-impl-trait, this map is only used to prevent query cycles,\n     /// so the hidden types are all `None`.\n-    pub concrete_opaque_types: VecMap<DefId, Option<Ty<'tcx>>>,\n+    pub concrete_opaque_types: VecMap<LocalDefId, Option<Ty<'tcx>>>,\n \n     /// Tracks the minimum captures required for a closure;\n     /// see `MinCaptureInformationMap` for more details."}, {"sha": "53919826bf6179df83d3e9447ca4c4927bff8637", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -1108,8 +1108,7 @@ impl<'tcx> InstantiatedPredicates<'tcx> {\n #[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable, TyEncodable, TyDecodable, Lift)]\n #[derive(TypeFoldable, TypeVisitable)]\n pub struct OpaqueTypeKey<'tcx> {\n-    // FIXME(oli-obk): make this a LocalDefId\n-    pub def_id: DefId,\n+    pub def_id: LocalDefId,\n     pub substs: SubstsRef<'tcx>,\n }\n "}, {"sha": "9f622ad6cd2a12e34c87d0f5a499c89e255ae8e5", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -1707,13 +1707,6 @@ impl<'tcx> Ty<'tcx> {\n         }\n     }\n \n-    pub fn expect_opaque_type(self) -> ty::OpaqueTypeKey<'tcx> {\n-        match *self.kind() {\n-            Opaque(def_id, substs) => ty::OpaqueTypeKey { def_id, substs },\n-            _ => bug!(\"`expect_opaque_type` called on non-opaque type: {}\", self),\n-        }\n-    }\n-\n     pub fn simd_size_and_type(self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {\n         match self.kind() {\n             Adt(def, substs) => {"}, {"sha": "34b37c4e410280d6c383ebe59777e9df34f91648", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -295,6 +295,7 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n     /// This is called much less often than `needs_process_obligation`, so we\n     /// never inline it.\n     #[inline(never)]\n+    #[instrument(level = \"debug\", skip(self, pending_obligation))]\n     fn process_obligation(\n         &mut self,\n         pending_obligation: &mut PendingPredicateObligation<'tcx>,\n@@ -303,7 +304,7 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n \n         let obligation = &mut pending_obligation.obligation;\n \n-        debug!(?obligation, \"process_obligation pre-resolve\");\n+        debug!(?obligation, \"pre-resolve\");\n \n         if obligation.predicate.has_infer_types_or_consts() {\n             obligation.predicate =\n@@ -312,8 +313,6 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n \n         let obligation = &pending_obligation.obligation;\n \n-        debug!(?obligation, ?obligation.cause, \"process_obligation\");\n-\n         let infcx = self.selcx.infcx();\n \n         if obligation.predicate.has_projections() {"}, {"sha": "6b758ba63cd0f73e094c69f6a308499de3b14a4b", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -559,14 +559,16 @@ impl<'tcx> WfPredicates<'tcx> {\n                     }\n                 }\n \n-                ty::Generator(..) => {\n+                ty::Generator(did, substs, ..) => {\n                     // Walk ALL the types in the generator: this will\n                     // include the upvar types as well as the yield\n                     // type. Note that this is mildly distinct from\n                     // the closure case, where we have to be careful\n                     // about the signature of the closure. We don't\n                     // have the problem of implied bounds here since\n                     // generators don't take arguments.\n+                    let obligations = self.nominal_obligations(did, substs);\n+                    self.out.extend(obligations);\n                 }\n \n                 ty::Closure(did, substs) => {\n@@ -618,11 +620,9 @@ impl<'tcx> WfPredicates<'tcx> {\n                 }\n \n                 ty::Opaque(did, substs) => {\n-                    // all of the requirements on type parameters\n-                    // should've been checked by the instantiation\n-                    // of whatever returned this exact `impl Trait`.\n-\n-                    // for named opaque `impl Trait` types we still need to check them\n+                    // All of the requirements on type parameters\n+                    // have already been checked for `impl Trait` in\n+                    // return position. We do need to check type-alias-impl-trait though.\n                     if ty::is_impl_trait_defn(self.tcx, did).is_none() {\n                         let obligations = self.nominal_obligations(did, substs);\n                         self.out.extend(obligations);\n@@ -684,6 +684,7 @@ impl<'tcx> WfPredicates<'tcx> {\n         }\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     fn nominal_obligations(\n         &mut self,\n         def_id: DefId,\n@@ -698,6 +699,7 @@ impl<'tcx> WfPredicates<'tcx> {\n         }\n \n         let predicates = predicates.instantiate(self.tcx, substs);\n+        trace!(\"{:#?}\", predicates);\n         debug_assert_eq!(predicates.predicates.len(), origins.len());\n \n         iter::zip(iter::zip(predicates.predicates, predicates.spans), origins.into_iter().rev())"}, {"sha": "3fb8e5080f3469868fca9fb11cb2201c19041da7", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -1513,7 +1513,7 @@ pub fn check_type_bounds<'tcx>(\n                         value.hidden_type.span,\n                         tcx.hir().local_def_id_to_hir_id(impl_ty.def_id.expect_local()),\n                     ),\n-                    tcx.mk_opaque(key.def_id, key.substs),\n+                    tcx.mk_opaque(key.def_id.to_def_id(), key.substs),\n                     value.hidden_type.ty,\n                     TypeError::Mismatch,\n                 )"}, {"sha": "d079aeb4801caeb05c93d24e4995fc8e2303f291", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -763,12 +763,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // src/test/ui/impl-trait/hidden-type-is-opaque-2.rs for examples that hit this path.\n         if formal_ret.has_infer_types() {\n             for ty in ret_ty.walk() {\n-                if let ty::subst::GenericArgKind::Type(ty) = ty.unpack() {\n-                    if let ty::Opaque(def_id, _) = *ty.kind() {\n-                        if self.infcx.opaque_type_origin(def_id, DUMMY_SP).is_some() {\n-                            return None;\n-                        }\n-                    }\n+                if let ty::subst::GenericArgKind::Type(ty) = ty.unpack()\n+                    && let ty::Opaque(def_id, _) = *ty.kind()\n+                    && let Some(def_id) = def_id.as_local()\n+                    && self.infcx.opaque_type_origin(def_id, DUMMY_SP).is_some() {\n+                    return None;\n                 }\n             }\n         }"}, {"sha": "23ac638b2f430553e1df3e0d017793bc0a88815f", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -4,6 +4,7 @@\n \n use crate::check::FnCtxt;\n \n+use hir::def_id::LocalDefId;\n use rustc_data_structures::stable_map::FxHashMap;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n@@ -509,13 +510,13 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n                 hir::OpaqueTyOrigin::FnReturn(_) | hir::OpaqueTyOrigin::AsyncFn(_) => {\n                     let ty = self.resolve(decl.hidden_type.ty, &decl.hidden_type.span);\n                     struct RecursionChecker {\n-                        def_id: DefId,\n+                        def_id: LocalDefId,\n                     }\n                     impl<'tcx> ty::TypeVisitor<'tcx> for RecursionChecker {\n                         type BreakTy = ();\n                         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                             if let ty::Opaque(def_id, _) = *t.kind() {\n-                                if def_id == self.def_id {\n+                                if def_id == self.def_id.to_def_id() {\n                                     return ControlFlow::Break(());\n                                 }\n                             }"}, {"sha": "faa4f3700bba8799b9346145659a9e91e04f30c7", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -342,7 +342,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     let concrete_ty = tcx\n                         .mir_borrowck(owner)\n                         .concrete_opaque_types\n-                        .get(&def_id.to_def_id())\n+                        .get(&def_id)\n                         .copied()\n                         .map(|concrete| concrete.ty)\n                         .unwrap_or_else(|| {\n@@ -353,7 +353,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                                 // the `concrete_opaque_types` table.\n                                 tcx.ty_error()\n                             } else {\n-                                table.concrete_opaque_types.get(&def_id.to_def_id()).copied().unwrap_or_else(|| {\n+                                table.concrete_opaque_types.get(&def_id).copied().unwrap_or_else(|| {\n                                     // We failed to resolve the opaque type or it\n                                     // resolves to itself. We interpret this as the\n                                     // no values of the hidden type ever being constructed,\n@@ -526,7 +526,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n         tcx: TyCtxt<'tcx>,\n \n         /// def_id of the opaque type whose defining uses are being checked\n-        def_id: DefId,\n+        def_id: LocalDefId,\n \n         /// as we walk the defining uses, we are checking that all of them\n         /// define the same hidden type. This variable is set to `Some`\n@@ -602,15 +602,15 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n         fn visit_item(&mut self, it: &'tcx Item<'tcx>) {\n             trace!(?it.def_id);\n             // The opaque type itself or its children are not within its reveal scope.\n-            if it.def_id.to_def_id() != self.def_id {\n+            if it.def_id != self.def_id {\n                 self.check(it.def_id);\n                 intravisit::walk_item(self, it);\n             }\n         }\n         fn visit_impl_item(&mut self, it: &'tcx ImplItem<'tcx>) {\n             trace!(?it.def_id);\n             // The opaque type itself or its children are not within its reveal scope.\n-            if it.def_id.to_def_id() != self.def_id {\n+            if it.def_id != self.def_id {\n                 self.check(it.def_id);\n                 intravisit::walk_impl_item(self, it);\n             }\n@@ -624,7 +624,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n \n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n     let scope = tcx.hir().get_defining_scope(hir_id);\n-    let mut locator = ConstraintLocator { def_id: def_id.to_def_id(), tcx, found: None };\n+    let mut locator = ConstraintLocator { def_id: def_id, tcx, found: None };\n \n     debug!(?scope);\n "}, {"sha": "2c283100f071fca4c0966702053b886ea1efb485", "filename": "library/core/src/iter/adapters/skip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -33,7 +33,7 @@ where\n     #[inline]\n     fn next(&mut self) -> Option<I::Item> {\n         if unlikely(self.n > 0) {\n-            self.iter.nth(crate::mem::take(&mut self.n) - 1);\n+            self.iter.nth(crate::mem::take(&mut self.n) - 1)?;\n         }\n         self.iter.next()\n     }"}, {"sha": "e9649fc91fa097b60f3b452f1755d34de5e82fdb", "filename": "library/core/src/str/traits.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -519,12 +519,14 @@ unsafe impl const SliceIndex<str> for ops::RangeToInclusive<usize> {\n ///     type Err = ParseIntError;\n ///\n ///     fn from_str(s: &str) -> Result<Self, Self::Err> {\n-///         let coords: Vec<&str> = s.trim_matches(|p| p == '(' || p == ')' )\n-///                                  .split(',')\n-///                                  .collect();\n-///\n-///         let x_fromstr = coords[0].parse::<i32>()?;\n-///         let y_fromstr = coords[1].parse::<i32>()?;\n+///         let (x, y) = s\n+///             .strip_prefix('(')\n+///             .and_then(|s| s.strip_suffix(')'))\n+///             .and_then(|s| s.split_once(','))\n+///             .unwrap();\n+///\n+///         let x_fromstr = x.parse::<i32>()?;\n+///         let y_fromstr = y.parse::<i32>()?;\n ///\n ///         Ok(Point { x: x_fromstr, y: y_fromstr })\n ///     }"}, {"sha": "65f235e86aab9a99d1389704630c38142065527b", "filename": "library/core/tests/iter/adapters/skip.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fskip.rs?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -1,5 +1,7 @@\n use core::iter::*;\n \n+use super::Unfuse;\n+\n #[test]\n fn test_iterator_skip() {\n     let xs = [0, 1, 2, 3, 5, 13, 15, 16, 17, 19, 20, 30];\n@@ -190,3 +192,12 @@ fn test_skip_nth_back() {\n     it.by_ref().skip(2).nth_back(10);\n     assert_eq!(it.next_back(), Some(&1));\n }\n+\n+#[test]\n+fn test_skip_non_fused() {\n+    let non_fused = Unfuse::new(0..10);\n+\n+    // `Skip` would previously exhaust the iterator in this `next` call and then erroneously try to\n+    // advance it further. `Unfuse` tests that this doesn't happen by panicking in that scenario.\n+    let _ = non_fused.skip(20).next();\n+}"}, {"sha": "1adf278ad32de1a97b6e04db54680cd2f06612ea", "filename": "src/test/debuginfo/basic-types-globals-lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals-lto.rs?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -14,7 +14,7 @@\n // gdbr-command:print I\n // gdb-check:$2 = -1\n // gdbg-command:print 'basic_types_globals::C'\n-// gdbr-command:print C\n+// gdbr-command:print/d C\n // gdbg-check:$3 = 97\n // gdbr-check:$3 = 97\n // gdbg-command:print/d 'basic_types_globals::I8'"}, {"sha": "3602db39a4ec1bc4554213fa04b8d1a2f392b75f", "filename": "src/test/debuginfo/basic-types-globals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals.rs?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -13,7 +13,7 @@\n // gdbr-command:print I\n // gdb-check:$2 = -1\n // gdbg-command:print 'basic_types_globals::C'\n-// gdbr-command:print C\n+// gdbr-command:print/d C\n // gdbg-check:$3 = 97\n // gdbr-check:$3 = 97\n // gdbg-command:print/d 'basic_types_globals::I8'"}, {"sha": "5abf07a3118d814f1a1e8fb28d190e56910a5956", "filename": "src/test/ui/borrowck/borrowck-and-init.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -9,7 +9,7 @@ LL |     println!(\"{}\", false && { i = 5; true });\n LL |     println!(\"{}\", i);\n    |                    ^ `i` used here but it is possibly-uninitialized\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "91038b3adca9d0f8dcab38064738bf47cdbe84d6", "filename": "src/test/ui/borrowck/borrowck-break-uninit-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -7,7 +7,7 @@ LL |     let x: isize;\n LL |     println!(\"{}\", x);\n    |                    ^ `x` used here but it isn't initialized\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "8d0c9582fda9259fd87d3513122d9792aaf695f8", "filename": "src/test/ui/borrowck/borrowck-break-uninit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -7,7 +7,7 @@ LL |     let x: isize;\n LL |     println!(\"{}\", x);\n    |                    ^ `x` used here but it isn't initialized\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "16d66bf40d1097cbcfb7420783f1a421522717dc", "filename": "src/test/ui/borrowck/borrowck-or-init.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -9,7 +9,7 @@ LL |     println!(\"{}\", false || { i = 5; true });\n LL |     println!(\"{}\", i);\n    |                    ^ `i` used here but it is possibly-uninitialized\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "13143d436df8e6826b89ad7bf862e66abdefe74d", "filename": "src/test/ui/borrowck/borrowck-while-break.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -9,7 +9,7 @@ LL |     while cond {\n LL |     println!(\"{}\", v);\n    |                    ^ `v` used here but it is possibly-uninitialized\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "b85e8f216e5df0e28a3704cb4674f2550fed3077", "filename": "src/test/ui/borrowck/issue-24267-flow-exit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fborrowck%2Fissue-24267-flow-exit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fborrowck%2Fissue-24267-flow-exit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-24267-flow-exit.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -7,7 +7,7 @@ LL |     loop { x = break; }\n LL |     println!(\"{}\", x);\n    |                    ^ `x` used here but it isn't initialized\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0381]: used binding `x` isn't initialized\n   --> $DIR/issue-24267-flow-exit.rs:18:20\n@@ -18,7 +18,7 @@ LL |     for _ in 0..10 { x = continue; }\n LL |     println!(\"{}\", x);\n    |                    ^ `x` used here but it isn't initialized\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1f8a1acb89f50a8c3afdfc12fcfea516a6b0e5d3", "filename": "src/test/ui/borrowck/issue-64453.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -5,7 +5,7 @@ LL | static settings_dir: String = format!(\"\");\n    |                               ^^^^^^^^^^^\n    |\n    = help: add `#![feature(const_fmt_arguments_new)]` to the crate attributes to enable\n-   = note: this error originates in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0015]: cannot call non-const fn `format` in statics\n   --> $DIR/issue-64453.rs:4:31"}, {"sha": "fd591c7b563b25b81e2e991ac63e82fc2454a4a9", "filename": "src/test/ui/borrowck/issue-81899.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -10,7 +10,7 @@ LL |     panic!()\n    |     the evaluated program panicked at 'explicit panic', $DIR/issue-81899.rs:12:5\n    |     inside `f::<[closure@$DIR/issue-81899.rs:4:31: 4:34]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/issue-81899.rs:4:23"}, {"sha": "a3582e780415771257db41e68ee251ef5d8730d9", "filename": "src/test/ui/borrowck/issue-88434-minimal-example.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -10,7 +10,7 @@ LL |     panic!()\n    |     the evaluated program panicked at 'explicit panic', $DIR/issue-88434-minimal-example.rs:11:5\n    |     inside `f::<[closure@$DIR/issue-88434-minimal-example.rs:3:25: 3:28]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/issue-88434-minimal-example.rs:3:21"}, {"sha": "a6c65b302db10f6ec74f41c10bb454b7d897033c", "filename": "src/test/ui/borrowck/issue-88434-removal-index-should-be-less.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -10,7 +10,7 @@ LL |     panic!()\n    |     the evaluated program panicked at 'explicit panic', $DIR/issue-88434-removal-index-should-be-less.rs:11:5\n    |     inside `f::<[closure@$DIR/issue-88434-removal-index-should-be-less.rs:3:31: 3:34]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/issue-88434-removal-index-should-be-less.rs:3:23"}, {"sha": "984981ce2ea14c85a11b8ed87c03850633082754", "filename": "src/test/ui/borrowck/move-error-snippets.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-snippets.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-snippets.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-snippets.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -12,7 +12,7 @@ LL |         let a = $c;\n LL | sss!();\n    | ------ in this macro invocation\n    |\n-   = note: this error originates in the macro `aaa` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `aaa` which comes from the expansion of the macro `sss` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "4f41060dc9842c8a304a2ea1bf2d81cec1b61fdb", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/arrays.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Farrays.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Farrays.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Farrays.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -82,7 +82,7 @@ LL |     println!(\"{}\", arr[3]);\n LL |     c();\n    |     - mutable borrow later used here\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0502]: cannot borrow `arr` as immutable because it is also borrowed as mutable\n   --> $DIR/arrays.rs:73:24"}, {"sha": "f8b178752351acbb2bc54d2cdd4953e04c2c40fc", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/box.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fbox.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fbox.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fbox.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -26,7 +26,7 @@ LL |\n LL |     c();\n    |     - mutable borrow later used here\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0506]: cannot assign to `e.0.0.m.x` because it is borrowed\n   --> $DIR/box.rs:55:5"}, {"sha": "93abbecf4e46d2ec52884165447f6415c290739a", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/repr_packed.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -9,7 +9,7 @@ LL |         println!(\"{}\", foo.x);\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n \n@@ -25,5 +25,5 @@ LL |         println!(\"{}\", foo.x);\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "06157b2af7a07311f9c6f6bf9a742b89a45f6d0d", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/simple-struct-min-capture.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fsimple-struct-min-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fsimple-struct-min-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fsimple-struct-min-capture.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -14,7 +14,7 @@ LL |\n LL |     c();\n    |     - mutable borrow later used here\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "8f79beaa9e1b72fe7c991d6f802ad82fb685d16d", "filename": "src/test/ui/codemap_tests/bad-format-args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -4,7 +4,7 @@ error: requires at least a format string argument\n LL |     format!();\n    |     ^^^^^^^^^\n    |\n-   = note: this error originates in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected `,`, found `1`\n   --> $DIR/bad-format-args.rs:3:16"}, {"sha": "9072cc925ffff62298b68ea87927752fae4a3439", "filename": "src/test/ui/codemap_tests/tab_3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -14,7 +14,7 @@ note: this function takes ownership of the receiver `self`, which moves `some_ve\n    |\n LL |     fn into_iter(self) -> Self::IntoIter;\n    |                  ^^^^\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "2953406ee4057f5ef832ef5a673add70f250b566", "filename": "src/test/ui/consts/const-eval/conditional_array_execution.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -26,7 +26,7 @@ LL |     println!(\"{}\", FOO);\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this warning originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error; 2 warnings emitted\n \n@@ -60,5 +60,5 @@ LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this warning originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "0f7be46072df580cc06007c2696b714fc55bd8fa", "filename": "src/test/ui/consts/const-eval/const_panic.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -4,23 +4,23 @@ error[E0080]: evaluation of constant value failed\n LL | const Z: () = std::panic!(\"cheese\");\n    |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'cheese', $DIR/const_panic.rs:6:15\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `std::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:9:16\n    |\n LL | const Z2: () = std::panic!();\n    |                ^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:9:16\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `std::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:12:15\n    |\n LL | const Y: () = std::unreachable!();\n    |               ^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:12:15\n    |\n-   = note: this error originates in the macro `$crate::panic::unreachable_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::unreachable_2015` which comes from the expansion of the macro `std::unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:15:15\n@@ -36,39 +36,39 @@ error[E0080]: evaluation of constant value failed\n LL | const W: () = std::panic!(MSG);\n    |               ^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:18:15\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `std::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:21:16\n    |\n LL | const W2: () = std::panic!(\"{}\", MSG);\n    |                ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:21:16\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `std::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:24:20\n    |\n LL | const Z_CORE: () = core::panic!(\"cheese\");\n    |                    ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'cheese', $DIR/const_panic.rs:24:20\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `core::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:27:21\n    |\n LL | const Z2_CORE: () = core::panic!();\n    |                     ^^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:27:21\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `core::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:30:20\n    |\n LL | const Y_CORE: () = core::unreachable!();\n    |                    ^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:30:20\n    |\n-   = note: this error originates in the macro `$crate::panic::unreachable_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::unreachable_2015` which comes from the expansion of the macro `core::unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:33:20\n@@ -84,15 +84,15 @@ error[E0080]: evaluation of constant value failed\n LL | const W_CORE: () = core::panic!(MSG);\n    |                    ^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:36:20\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `core::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:39:21\n    |\n LL | const W2_CORE: () = core::panic!(\"{}\", MSG);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:39:21\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `core::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 12 previous errors\n "}, {"sha": "192fa3a12c25c1bb0a13006480e4cba37677be48", "filename": "src/test/ui/consts/const-eval/const_panic_2021.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -4,23 +4,23 @@ error[E0080]: evaluation of constant value failed\n LL | const A: () = std::panic!(\"bl\u00e5haj\");\n    |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'bl\u00e5haj', $DIR/const_panic_2021.rs:6:15\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `std::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_2021.rs:9:15\n    |\n LL | const B: () = std::panic!();\n    |               ^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic_2021.rs:9:15\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `std::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_2021.rs:12:15\n    |\n LL | const C: () = std::unreachable!();\n    |               ^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_2021.rs:12:15\n    |\n-   = note: this error originates in the macro `$crate::panic::unreachable_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::unreachable_2021` which comes from the expansion of the macro `std::unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_2021.rs:15:15\n@@ -36,31 +36,31 @@ error[E0080]: evaluation of constant value failed\n LL | const E: () = std::panic!(\"{}\", MSG);\n    |               ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic_2021.rs:18:15\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `std::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_2021.rs:21:20\n    |\n LL | const A_CORE: () = core::panic!(\"shark\");\n    |                    ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'shark', $DIR/const_panic_2021.rs:21:20\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `core::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_2021.rs:24:20\n    |\n LL | const B_CORE: () = core::panic!();\n    |                    ^^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic_2021.rs:24:20\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `core::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_2021.rs:27:20\n    |\n LL | const C_CORE: () = core::unreachable!();\n    |                    ^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_2021.rs:27:20\n    |\n-   = note: this error originates in the macro `$crate::panic::unreachable_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::unreachable_2021` which comes from the expansion of the macro `core::unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_2021.rs:30:20\n@@ -76,7 +76,7 @@ error[E0080]: evaluation of constant value failed\n LL | const E_CORE: () = core::panic!(\"{}\", MSG);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic_2021.rs:33:20\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `core::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 10 previous errors\n "}, {"sha": "df19ed4a898612e25230fb2e3df64c55edb52450", "filename": "src/test/ui/consts/const-eval/const_panic_libcore_bin.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -4,15 +4,15 @@ error[E0080]: evaluation of constant value failed\n LL | const Z: () = panic!(\"cheese\");\n    |               ^^^^^^^^^^^^^^^^ the evaluated program panicked at 'cheese', $DIR/const_panic_libcore_bin.rs:8:15\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_libcore_bin.rs:11:15\n    |\n LL | const Y: () = unreachable!();\n    |               ^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore_bin.rs:11:15\n    |\n-   = note: this error originates in the macro `$crate::panic::unreachable_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::unreachable_2015` which comes from the expansion of the macro `unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_libcore_bin.rs:14:15"}, {"sha": "a476b0f587fe116f91462f64c81f8716d34499d8", "filename": "src/test/ui/consts/const-eval/format.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -5,7 +5,7 @@ LL |     panic!(\"{:?}\", 0);\n    |                    ^\n    |\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-   = note: this error originates in the macro `$crate::const_format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::const_format_args` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0015]: cannot call non-const formatting macro in constant functions\n   --> $DIR/format.rs:11:22\n@@ -14,7 +14,7 @@ LL |     println!(\"{:?}\", 0);\n    |                      ^\n    |\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `Arguments::<'a>::new_v1` is not yet stable as a const fn\n   --> $DIR/format.rs:11:5\n@@ -23,7 +23,7 @@ LL |     println!(\"{:?}\", 0);\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(const_fmt_arguments_new)]` to the crate attributes to enable\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0015]: cannot call non-const fn `_print` in constant functions\n   --> $DIR/format.rs:11:5\n@@ -52,7 +52,7 @@ LL |     panic!(\"{:?}\", 0);\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this error originates in the macro `$crate::const_format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::const_format_args` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: erroneous constant used\n   --> $DIR/format.rs:11:14\n@@ -71,7 +71,7 @@ LL |     println!(\"{:?}\", 0);\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 8 previous errors\n \n@@ -97,7 +97,7 @@ LL |     panic!(\"{:?}\", 0);\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this error originates in the macro `$crate::const_format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::const_format_args` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage diagnostic:\n error: erroneous constant used\n@@ -120,5 +120,5 @@ LL |     println!(\"{:?}\", 0);\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "3f67c38f82e014598dcc89432b5e124ca34eafc4", "filename": "src/test/ui/consts/const-eval/issue-43197.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -35,7 +35,7 @@ LL |     println!(\"{} {}\", X, Y);\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this warning originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-43197.rs:16:26\n@@ -51,7 +51,7 @@ LL |     println!(\"{} {}\", X, Y);\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this warning originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors; 4 warnings emitted\n \n@@ -100,7 +100,7 @@ LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this warning originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage diagnostic:\n warning: erroneous constant used\n@@ -116,5 +116,5 @@ LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this warning originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "4c27ceea19bd063fbcf1e29491c1fdae2c3370df", "filename": "src/test/ui/consts/const-eval/issue-44578.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -36,5 +36,5 @@ LL | #![allow(const_err)]\n    |          ^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this warning originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "fd7b40572c1bb7dd31f9294d2e1eedb51c5d4ceb", "filename": "src/test/ui/consts/const-eval/issue-85907.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-85907.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-85907.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-85907.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -4,7 +4,7 @@ error: argument to `panic!()` in a const context must have type `&str`\n LL |     panic!(123);\n    |     ^^^^^^^^^^^\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "b26286411d2d673848c570267a6f8ce09e4de6e7", "filename": "src/test/ui/consts/const-eval/panic-assoc-never-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -4,7 +4,7 @@ error[E0080]: evaluation of constant value failed\n LL |     const VOID: ! = panic!();\n    |                     ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/panic-assoc-never-type.rs:10:21\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: erroneous constant used\n   --> $DIR/panic-assoc-never-type.rs:15:13"}, {"sha": "9728aed07223cb9b0e81b9d05de9dac5a6386ed8", "filename": "src/test/ui/consts/const-eval/panic-never-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -4,7 +4,7 @@ error[E0080]: evaluation of constant value failed\n LL | const VOID: ! = panic!();\n    |                 ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/panic-never-type.rs:5:17\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "99178ae8c83d1bddfbcc430d905cd158aee4552a", "filename": "src/test/ui/consts/const-eval/unwind-abort.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -10,7 +10,7 @@ LL |     panic!()\n LL | const _: () = foo();\n    |               ----- inside `_` at $DIR/unwind-abort.rs:7:15\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "d6e993a10101d711d6815c50bebf2dc391885255", "filename": "src/test/ui/consts/const-float-bits-reject-conv.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -25,7 +25,7 @@ LL |     called_in_const.call_once(arg)\n LL |     const MASKED_NAN1: u32 = f32::NAN.to_bits() ^ 0x002A_AAAA;\n    |                              ------------------ inside `f32::MASKED_NAN1` at $DIR/const-float-bits-reject-conv.rs:27:30\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/num/f32.rs:LL:COL\n@@ -54,7 +54,7 @@ LL |     called_in_const.call_once(arg)\n LL |     const MASKED_NAN2: u32 = f32::NAN.to_bits() ^ 0x0055_5555;\n    |                              ------------------ inside `f32::MASKED_NAN2` at $DIR/const-float-bits-reject-conv.rs:28:30\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/const-float-bits-reject-conv.rs:30:34\n@@ -132,7 +132,7 @@ LL |     called_in_const.call_once(arg)\n LL |     const MASKED_NAN1: u64 = f64::NAN.to_bits() ^ 0x000A_AAAA_AAAA_AAAA;\n    |                              ------------------ inside `f64::MASKED_NAN1` at $DIR/const-float-bits-reject-conv.rs:54:30\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/num/f64.rs:LL:COL\n@@ -161,7 +161,7 @@ LL |     called_in_const.call_once(arg)\n LL |     const MASKED_NAN2: u64 = f64::NAN.to_bits() ^ 0x0005_5555_5555_5555;\n    |                              ------------------ inside `f64::MASKED_NAN2` at $DIR/const-float-bits-reject-conv.rs:55:30\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/const-float-bits-reject-conv.rs:57:34"}, {"sha": "cae5163f0df92d9b33bf5bb2fea707c54d150927", "filename": "src/test/ui/consts/issue-32829.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fconsts%2Fissue-32829.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fconsts%2Fissue-32829.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-32829.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -4,7 +4,7 @@ error[E0080]: could not evaluate static initializer\n LL | static S : u64 = { { panic!(\"foo\"); 0 } };\n    |                      ^^^^^^^^^^^^^ the evaluated program panicked at 'foo', $DIR/issue-32829.rs:1:22\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "1585ea317d9b168f0450501074ae8713df14f0e6", "filename": "src/test/ui/consts/issue-66693-panic-in-array-len.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fconsts%2Fissue-66693-panic-in-array-len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fconsts%2Fissue-66693-panic-in-array-len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66693-panic-in-array-len.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -4,15 +4,15 @@ error: argument to `panic!()` in a const context must have type `&str`\n LL |     let _ = [0i32; panic!(2f32)];\n    |                    ^^^^^^^^^^^^\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-66693-panic-in-array-len.rs:10:21\n    |\n LL |     let _ = [false; panic!()];\n    |                     ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/issue-66693-panic-in-array-len.rs:10:21\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5460cc1ee82a46a0f6e3d017ae3fded61dc25533", "filename": "src/test/ui/consts/issue-66693.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -4,23 +4,23 @@ error: argument to `panic!()` in a const context must have type `&str`\n LL | const _: () = panic!(1);\n    |               ^^^^^^^^^\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: argument to `panic!()` in a const context must have type `&str`\n   --> $DIR/issue-66693.rs:7:19\n    |\n LL | static _FOO: () = panic!(true);\n    |                   ^^^^^^^^^^^^\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: argument to `panic!()` in a const context must have type `&str`\n   --> $DIR/issue-66693.rs:11:5\n    |\n LL |     panic!(&1);\n    |     ^^^^^^^^^^\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: erroneous constant used\n   --> $DIR/issue-66693.rs:11:12"}, {"sha": "67b2e90db7508a955f1f529d4c0ac467eab912ed", "filename": "src/test/ui/consts/issue-76064.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -4,7 +4,7 @@ error[E0080]: evaluation of constant value failed\n LL | struct Bug([u8; panic!(\"panic\")]);\n    |                 ^^^^^^^^^^^^^^^ the evaluated program panicked at 'panic', $DIR/issue-76064.rs:1:17\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "5bd4ea97e9cd299d70ed338abb886c924cf79dad", "filename": "src/test/ui/cross/cross-crate-macro-backtrace/main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fcross%2Fcross-crate-macro-backtrace%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fcross%2Fcross-crate-macro-backtrace%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross%2Fcross-crate-macro-backtrace%2Fmain.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -4,7 +4,7 @@ error: 1 positional argument in format string, but no arguments were given\n LL |     myprintln!(\"{}\");\n    |     ^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in the macro `concat` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `concat` which comes from the expansion of the macro `myprintln` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "8238b3f0e49712588ec8bb2b7005289b88e7f1c3", "filename": "src/test/ui/expr/if/if-let.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -27,7 +27,7 @@ LL | |     });\n    |\n    = note: this pattern will always match, so the `if let` is useless\n    = help: consider replacing the `if let` with a `let`\n-   = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `foo` which comes from the expansion of the macro `bar` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: irrefutable `if let` pattern\n   --> $DIR/if-let.rs:26:8"}, {"sha": "d181fe14107e74ba29e999b844e42b1e5017942e", "filename": "src/test/ui/fmt/ifmt-bad-arg.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -308,7 +308,7 @@ note: associated function defined here\n    |\n LL |     pub fn from_usize(x: &usize) -> ArgumentV1<'_> {\n    |            ^^^^^^^^^^\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n   --> $DIR/ifmt-bad-arg.rs:81:35\n@@ -326,7 +326,7 @@ note: associated function defined here\n    |\n LL |     pub fn from_usize(x: &usize) -> ArgumentV1<'_> {\n    |            ^^^^^^^^^^\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 36 previous errors\n "}, {"sha": "dbcb2eb6693dd9e4cb0577aa09150e0f4a44b27e", "filename": "src/test/ui/fmt/ifmt-unimpl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Ffmt%2Fifmt-unimpl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Ffmt%2Fifmt-unimpl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fifmt-unimpl.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -20,7 +20,7 @@ note: required by a bound in `ArgumentV1::<'a>::new_upper_hex`\n    |\n LL |     arg_new!(new_upper_hex, UpperHex);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `ArgumentV1::<'a>::new_upper_hex`\n-   = note: this error originates in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `arg_new` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "2d23a637361ece9b0d0c236aecf2f49b64346dae", "filename": "src/test/ui/for-loop-while/while-let-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Ffor-loop-while%2Fwhile-let-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Ffor-loop-while%2Fwhile-let-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor-loop-while%2Fwhile-let-2.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -27,7 +27,7 @@ LL | |     });\n    |\n    = note: this pattern will always match, so the loop will never exit\n    = help: consider instead using a `loop { ... }` with a `let` inside it\n-   = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `foo` which comes from the expansion of the macro `bar` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: irrefutable `while let` pattern\n   --> $DIR/while-let-2.rs:27:11"}, {"sha": "47147f9c05d781a52bb521017df91b0a6172ec6d", "filename": "src/test/ui/generator/yield-while-ref-reborrowed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -11,7 +11,7 @@ LL |     println!(\"{}\", x);\n LL |     Pin::new(&mut b).resume(());\n    |              ------ first borrow later used here\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "4952a082586d0704f1a0b7ae4be69693c153d195", "filename": "src/test/ui/generic-associated-types/issue-88287.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88287.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88287.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88287.rs?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -1,4 +1,3 @@\n-// check-pass\n // edition:2018\n \n #![feature(generic_associated_types)]\n@@ -34,6 +33,7 @@ where\n \n     fn search<'c>(&'c self, _client: &'c ()) -> Self::Future<'c, Self, Criteria> {\n         async move { todo!() }\n+        //~^ ERROR: the size for values of type `A` cannot be known at compilation time\n     }\n }\n "}, {"sha": "5241d85a5f964a5433527dc65b989a24235a612b", "filename": "src/test/ui/generic-associated-types/issue-88287.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88287.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88287.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88287.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -0,0 +1,27 @@\n+error[E0277]: the size for values of type `A` cannot be known at compilation time\n+  --> $DIR/issue-88287.rs:35:9\n+   |\n+LL | type SearchFutureTy<'f, A, B: 'f>\n+   |                         - this type parameter needs to be `std::marker::Sized`\n+...\n+LL |         async move { todo!() }\n+   |         ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+note: required by a bound in `<T as SearchableResourceExt<Criteria>>`\n+  --> $DIR/issue-88287.rs:25:6\n+   |\n+LL | impl<T, Criteria> SearchableResourceExt<Criteria> for T\n+   |      ^ required by this bound in `<T as SearchableResourceExt<Criteria>>`\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL -     A: SearchableResource<B> + ?Sized + 'f,\n+LL +     A: SearchableResource<B> + 'f,\n+   |\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL |     T: SearchableResource<Criteria> + ?Sized,\n+   |                                     ++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "f0f9bfb8d234f72d90cdcff0e7036f3b4d104a91", "filename": "src/test/ui/internal/internal-unstable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Finternal%2Finternal-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Finternal%2Finternal-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finternal%2Finternal-unstable.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -40,7 +40,7 @@ LL |     bar!(internal_unstable::unstable());\n    |     ----------------------------------- in this macro invocation\n    |\n    = help: add `#![feature(function)]` to the crate attributes to enable\n-   = note: this error originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `foo` which comes from the expansion of the macro `bar` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 5 previous errors\n "}, {"sha": "8524a62a0a42d2cb750114c81087f487b554b2e6", "filename": "src/test/ui/issues/issue-16966.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed\n LL |     panic!(std::default::Default::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type of the type parameter `M` declared on the function `begin_panic`\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider specifying the generic argument\n   --> $SRC_DIR/std/src/panic.rs:LL:COL\n    |"}, {"sha": "f3e0e7b20a1784644f753ab8dad746a205069144", "filename": "src/test/ui/issues/issue-42796.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fissues%2Fissue-42796.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fissues%2Fissue-42796.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42796.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -9,7 +9,7 @@ LL |     let mut s_copy = s;\n LL |     println!(\"{}\", s);\n    |                    ^ value borrowed here after move\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "84cf9237a56d2848d36c9de184f870bae30d08a4", "filename": "src/test/ui/issues/issue-47646.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fissues%2Fissue-47646.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fissues%2Fissue-47646.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47646.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -13,7 +13,7 @@ LL |             println!(\"{:?}\", heap);\n LL |     };\n    |      - ... and the mutable borrow might be used here, when that temporary is dropped and runs the destructor for type `(Option<PeekMut<'_, i32>>, ())`\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "b732df764e57f05289e59850a6dac6654c982729", "filename": "src/test/ui/issues/issue-69455.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fissues%2Fissue-69455.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fissues%2Fissue-69455.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69455.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed\n LL |     println!(\"{}\", 23u64.test(xs.iter().sum()));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type of the type parameter `T` declared on the associated function `new_display`\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider specifying the generic argument\n    |\n LL |     println!(\"{}\", 23u64.test(xs.iter().sum())::<T>);"}, {"sha": "348586fa26bcc9b36507111795106db58c2629a0", "filename": "src/test/ui/lifetimes/issue-76168-hr-outlives-2.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Flifetimes%2Fissue-76168-hr-outlives-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Flifetimes%2Fissue-76168-hr-outlives-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-76168-hr-outlives-2.rs?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -0,0 +1,22 @@\n+// edition:2018\n+// check-pass\n+\n+trait Trait<Input> {\n+    type Output;\n+}\n+\n+async fn walk<F>(filter: F)\n+where\n+    for<'a> F: Trait<&'a u32> + 'a,\n+    for<'a> <F as Trait<&'a u32>>::Output: 'a,\n+{\n+}\n+\n+async fn walk2<F: 'static>(filter: F)\n+where\n+    for<'a> F: Trait<&'a u32> + 'a,\n+    for<'a> <F as Trait<&'a u32>>::Output: 'a,\n+{\n+}\n+\n+fn main() {}"}, {"sha": "6c3683d78961df54e34ca1b951a849290ad01bc0", "filename": "src/test/ui/limits/issue-55878.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -18,7 +18,7 @@ LL |     println!(\"Size: {}\", std::mem::size_of::<[u8; u64::MAX as usize]>());\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n \n@@ -33,5 +33,5 @@ LL |     println!(\"Size: {}\", std::mem::size_of::<[u8; u64::MAX as usize]>());\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "63204c725c3dc27e035c4ecba032ec83708d18c5", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-exchange-weak.rs", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange-weak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange-weak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange-weak.rs?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -9,11 +9,17 @@ fn main() {\n \n     // Allowed ordering combos\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::Relaxed);\n-    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Acquire, Ordering::Acquire);\n+    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::Acquire);\n+    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::SeqCst);\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Acquire, Ordering::Relaxed);\n+    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Acquire, Ordering::Acquire);\n+    let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Acquire, Ordering::SeqCst);\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Release, Ordering::Relaxed);\n-    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::AcqRel, Ordering::Acquire);\n+    let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::Acquire);\n+    let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::SeqCst);\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::AcqRel, Ordering::Relaxed);\n+    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::AcqRel, Ordering::Acquire);\n+    let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::AcqRel, Ordering::SeqCst);\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::SeqCst, Ordering::Relaxed);\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::SeqCst, Ordering::Acquire);\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::SeqCst, Ordering::SeqCst);\n@@ -41,22 +47,4 @@ fn main() {\n     //~^ ERROR `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::SeqCst, Ordering::Release);\n     //~^ ERROR `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`\n-\n-    // Release success order forbids failure order of Acquire or SeqCst\n-    let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::Acquire);\n-    //~^ ERROR `compare_exchange_weak`'s success ordering must be at least as strong as\n-    let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::SeqCst);\n-    //~^ ERROR `compare_exchange_weak`'s success ordering must be at least as strong as\n-\n-    // Relaxed success order also forbids failure order of Acquire or SeqCst\n-    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::SeqCst);\n-    //~^ ERROR `compare_exchange_weak`'s success ordering must be at least as strong as\n-    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::Acquire);\n-    //~^ ERROR `compare_exchange_weak`'s success ordering must be at least as strong as\n-\n-    // Acquire/AcqRel forbids failure order of SeqCst\n-    let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Acquire, Ordering::SeqCst);\n-    //~^ ERROR `compare_exchange_weak`'s success ordering must be at least as strong as\n-    let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::AcqRel, Ordering::SeqCst);\n-    //~^ ERROR `compare_exchange_weak`'s success ordering must be at least as strong as\n }"}, {"sha": "021654cf35eed92b195a3b10b62e9e46a2824271", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-exchange-weak.stderr", "status": "modified", "additions": 11, "deletions": 65, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange-weak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange-weak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange-weak.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -1,5 +1,5 @@\n error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n-  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:22:67\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:28:67\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Relaxed, Ordering::AcqRel);\n    |                                                                   ^^^^^^^^^^^^^^^^ invalid failure ordering\n@@ -8,130 +8,76 @@ LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Relaxed, Ordering:\n    = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n-  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:24:67\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:30:67\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Acquire, Ordering::AcqRel);\n    |                                                                   ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n-  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:26:67\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:32:67\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::AcqRel);\n    |                                                                   ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n-  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:28:66\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:34:66\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::AcqRel, Ordering::AcqRel);\n    |                                                                  ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n-  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:30:66\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:36:66\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::SeqCst, Ordering::AcqRel);\n    |                                                                  ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n-  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:34:67\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:40:67\n    |\n LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::Release);\n    |                                                                   ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n-  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:36:67\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:42:67\n    |\n LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Acquire, Ordering::Release);\n    |                                                                   ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n-  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:38:67\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:44:67\n    |\n LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Release, Ordering::Release);\n    |                                                                   ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n-  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:40:66\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:46:66\n    |\n LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::AcqRel, Ordering::Release);\n    |                                                                  ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n-  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:42:66\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:48:66\n    |\n LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::SeqCst, Ordering::Release);\n    |                                                                  ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: `compare_exchange_weak`'s success ordering must be at least as strong as its failure ordering\n-  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:46:48\n-   |\n-LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::Acquire);\n-   |                                                ^^^^^^^^^^^^^^^^^  ----------------- `Acquire` failure ordering\n-   |                                                |\n-   |                                                `Release` success ordering\n-   |                                                help: consider using `AcqRel` success ordering instead\n-\n-error: `compare_exchange_weak`'s success ordering must be at least as strong as its failure ordering\n-  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:48:48\n-   |\n-LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::SeqCst);\n-   |                                                ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n-   |                                                |\n-   |                                                `Release` success ordering\n-   |                                                help: consider using `SeqCst` success ordering instead\n-\n-error: `compare_exchange_weak`'s success ordering must be at least as strong as its failure ordering\n-  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:52:48\n-   |\n-LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::SeqCst);\n-   |                                                ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n-   |                                                |\n-   |                                                `Relaxed` success ordering\n-   |                                                help: consider using `SeqCst` success ordering instead\n-\n-error: `compare_exchange_weak`'s success ordering must be at least as strong as its failure ordering\n-  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:54:48\n-   |\n-LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::Acquire);\n-   |                                                ^^^^^^^^^^^^^^^^^  ----------------- `Acquire` failure ordering\n-   |                                                |\n-   |                                                `Relaxed` success ordering\n-   |                                                help: consider using `Acquire` success ordering instead\n-\n-error: `compare_exchange_weak`'s success ordering must be at least as strong as its failure ordering\n-  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:58:48\n-   |\n-LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Acquire, Ordering::SeqCst);\n-   |                                                ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n-   |                                                |\n-   |                                                `Acquire` success ordering\n-   |                                                help: consider using `SeqCst` success ordering instead\n-\n-error: `compare_exchange_weak`'s success ordering must be at least as strong as its failure ordering\n-  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:60:48\n-   |\n-LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::AcqRel, Ordering::SeqCst);\n-   |                                                ^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n-   |                                                |\n-   |                                                `AcqRel` success ordering\n-   |                                                help: consider using `SeqCst` success ordering instead\n-\n-error: aborting due to 16 previous errors\n+error: aborting due to 10 previous errors\n "}, {"sha": "488d268eee81000e2c38375bf8e4b7d7bdc8b5ee", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-exchange.rs", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange.rs?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -7,11 +7,17 @@ fn main() {\n \n     // Allowed ordering combos\n     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Relaxed);\n-    let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::Acquire);\n+    let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Acquire);\n+    let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::SeqCst);\n     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::Relaxed);\n+    let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::Acquire);\n+    let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::SeqCst);\n     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Relaxed);\n-    let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::Acquire);\n+    let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Acquire);\n+    let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::SeqCst);\n     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::Relaxed);\n+    let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::Acquire);\n+    let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::SeqCst);\n     let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::Relaxed);\n     let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::Acquire);\n     let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::SeqCst);\n@@ -39,22 +45,4 @@ fn main() {\n     //~^ ERROR `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::Release);\n     //~^ ERROR `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`\n-\n-    // Release success order forbids failure order of Acquire or SeqCst\n-    let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Acquire);\n-    //~^ ERROR `compare_exchange`'s success ordering must be at least as strong as\n-    let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::SeqCst);\n-    //~^ ERROR `compare_exchange`'s success ordering must be at least as strong as\n-\n-    // Relaxed success order also forbids failure order of Acquire or SeqCst\n-    let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::SeqCst);\n-    //~^ ERROR `compare_exchange`'s success ordering must be at least as strong as\n-    let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Acquire);\n-    //~^ ERROR `compare_exchange`'s success ordering must be at least as strong as\n-\n-    // Acquire/AcqRel forbids failure order of SeqCst\n-    let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::SeqCst);\n-    //~^ ERROR `compare_exchange`'s success ordering must be at least as strong as\n-    let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::SeqCst);\n-    //~^ ERROR `compare_exchange`'s success ordering must be at least as strong as\n }"}, {"sha": "f6f8f88e88457c1eef9ed5f10edebccbc3915193", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-exchange.stderr", "status": "modified", "additions": 11, "deletions": 65, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -1,5 +1,5 @@\n error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n-  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:20:57\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:26:57\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::AcqRel);\n    |                                                         ^^^^^^^^^^^^^^^^ invalid failure ordering\n@@ -8,130 +8,76 @@ LL |     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::AcqRel);\n    = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n-  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:22:57\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:28:57\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::AcqRel);\n    |                                                         ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n-  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:24:57\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:30:57\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::AcqRel);\n    |                                                         ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n-  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:26:56\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:32:56\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::AcqRel);\n    |                                                        ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n-  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:28:56\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:34:56\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::AcqRel);\n    |                                                        ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n-  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:32:57\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:38:57\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Release);\n    |                                                         ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n-  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:34:57\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:40:57\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::Release);\n    |                                                         ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n-  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:36:57\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:42:57\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Release);\n    |                                                         ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n-  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:38:56\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:44:56\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::Release);\n    |                                                        ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n-  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:40:56\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:46:56\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::Release);\n    |                                                        ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: `compare_exchange`'s success ordering must be at least as strong as its failure ordering\n-  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:44:38\n-   |\n-LL |     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Acquire);\n-   |                                      ^^^^^^^^^^^^^^^^^  ----------------- `Acquire` failure ordering\n-   |                                      |\n-   |                                      `Release` success ordering\n-   |                                      help: consider using `AcqRel` success ordering instead\n-\n-error: `compare_exchange`'s success ordering must be at least as strong as its failure ordering\n-  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:46:38\n-   |\n-LL |     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::SeqCst);\n-   |                                      ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n-   |                                      |\n-   |                                      `Release` success ordering\n-   |                                      help: consider using `SeqCst` success ordering instead\n-\n-error: `compare_exchange`'s success ordering must be at least as strong as its failure ordering\n-  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:50:38\n-   |\n-LL |     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::SeqCst);\n-   |                                      ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n-   |                                      |\n-   |                                      `Relaxed` success ordering\n-   |                                      help: consider using `SeqCst` success ordering instead\n-\n-error: `compare_exchange`'s success ordering must be at least as strong as its failure ordering\n-  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:52:38\n-   |\n-LL |     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Acquire);\n-   |                                      ^^^^^^^^^^^^^^^^^  ----------------- `Acquire` failure ordering\n-   |                                      |\n-   |                                      `Relaxed` success ordering\n-   |                                      help: consider using `Acquire` success ordering instead\n-\n-error: `compare_exchange`'s success ordering must be at least as strong as its failure ordering\n-  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:56:38\n-   |\n-LL |     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::SeqCst);\n-   |                                      ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n-   |                                      |\n-   |                                      `Acquire` success ordering\n-   |                                      help: consider using `SeqCst` success ordering instead\n-\n-error: `compare_exchange`'s success ordering must be at least as strong as its failure ordering\n-  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:58:38\n-   |\n-LL |     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::SeqCst);\n-   |                                      ^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n-   |                                      |\n-   |                                      `AcqRel` success ordering\n-   |                                      help: consider using `SeqCst` success ordering instead\n-\n-error: aborting due to 16 previous errors\n+error: aborting due to 10 previous errors\n "}, {"sha": "734b63324af257c56148a6c490a703fc9217c8e1", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-fetch-update.rs", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fetch-update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fetch-update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fetch-update.rs?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -7,11 +7,17 @@ fn main() {\n \n     // Allowed ordering combos\n     let _ = x.fetch_update(Ordering::Relaxed, Ordering::Relaxed, |old| Some(old + 1));\n-    let _ = x.fetch_update(Ordering::Acquire, Ordering::Acquire, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::Relaxed, Ordering::Acquire, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::Relaxed, Ordering::SeqCst, |old| Some(old + 1));\n     let _ = x.fetch_update(Ordering::Acquire, Ordering::Relaxed, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::Acquire, Ordering::Acquire, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::Acquire, Ordering::SeqCst, |old| Some(old + 1));\n     let _ = x.fetch_update(Ordering::Release, Ordering::Relaxed, |old| Some(old + 1));\n-    let _ = x.fetch_update(Ordering::AcqRel, Ordering::Acquire, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::Release, Ordering::Acquire, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::Release, Ordering::SeqCst, |old| Some(old + 1));\n     let _ = x.fetch_update(Ordering::AcqRel, Ordering::Relaxed, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::AcqRel, Ordering::Acquire, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::AcqRel, Ordering::SeqCst, |old| Some(old + 1));\n     let _ = x.fetch_update(Ordering::SeqCst, Ordering::Relaxed, |old| Some(old + 1));\n     let _ = x.fetch_update(Ordering::SeqCst, Ordering::Acquire, |old| Some(old + 1));\n     let _ = x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |old| Some(old + 1));\n@@ -40,21 +46,4 @@ fn main() {\n     let _ = x.fetch_update(Ordering::SeqCst, Ordering::Release, |old| Some(old + 1));\n     //~^ ERROR `fetch_update`'s failure ordering may not be `Release` or `AcqRel`\n \n-    // Release success order forbids failure order of Acquire or SeqCst\n-    let _ = x.fetch_update(Ordering::Release, Ordering::Acquire, |old| Some(old + 1));\n-    //~^ ERROR `fetch_update`'s success ordering must be at least as strong as\n-    let _ = x.fetch_update(Ordering::Release, Ordering::SeqCst, |old| Some(old + 1));\n-    //~^ ERROR `fetch_update`'s success ordering must be at least as strong as\n-\n-    // Relaxed success order also forbids failure order of Acquire or SeqCst\n-    let _ = x.fetch_update(Ordering::Relaxed, Ordering::SeqCst, |old| Some(old + 1));\n-    //~^ ERROR `fetch_update`'s success ordering must be at least as strong as\n-    let _ = x.fetch_update(Ordering::Relaxed, Ordering::Acquire, |old| Some(old + 1));\n-    //~^ ERROR `fetch_update`'s success ordering must be at least as strong as\n-\n-    // Acquire/AcqRel forbids failure order of SeqCst\n-    let _ = x.fetch_update(Ordering::Acquire, Ordering::SeqCst, |old| Some(old + 1));\n-    //~^ ERROR `fetch_update`'s success ordering must be at least as strong as\n-    let _ = x.fetch_update(Ordering::AcqRel, Ordering::SeqCst, |old| Some(old + 1));\n-    //~^ ERROR `fetch_update`'s success ordering must be at least as strong as\n }"}, {"sha": "267b1c706ef17b824304c7eb7de524cbcd47cbb6", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-fetch-update.stderr", "status": "modified", "additions": 11, "deletions": 65, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fetch-update.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fetch-update.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fetch-update.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -1,5 +1,5 @@\n error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n-  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:20:47\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:26:47\n    |\n LL |     let _ = x.fetch_update(Ordering::Relaxed, Ordering::AcqRel, |old| Some(old + 1));\n    |                                               ^^^^^^^^^^^^^^^^ invalid failure ordering\n@@ -8,130 +8,76 @@ LL |     let _ = x.fetch_update(Ordering::Relaxed, Ordering::AcqRel, |old| Some(\n    = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n-  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:22:47\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:28:47\n    |\n LL |     let _ = x.fetch_update(Ordering::Acquire, Ordering::AcqRel, |old| Some(old + 1));\n    |                                               ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n-  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:24:47\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:30:47\n    |\n LL |     let _ = x.fetch_update(Ordering::Release, Ordering::AcqRel, |old| Some(old + 1));\n    |                                               ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n-  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:26:46\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:32:46\n    |\n LL |     let _ = x.fetch_update(Ordering::AcqRel, Ordering::AcqRel, |old| Some(old + 1));\n    |                                              ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n-  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:28:46\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:34:46\n    |\n LL |     let _ = x.fetch_update(Ordering::SeqCst, Ordering::AcqRel, |old| Some(old + 1));\n    |                                              ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n-  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:32:47\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:38:47\n    |\n LL |     let _ = x.fetch_update(Ordering::Relaxed, Ordering::Release, |old| Some(old + 1));\n    |                                               ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n-  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:34:47\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:40:47\n    |\n LL |     let _ = x.fetch_update(Ordering::Acquire, Ordering::Release, |old| Some(old + 1));\n    |                                               ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n-  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:36:47\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:42:47\n    |\n LL |     let _ = x.fetch_update(Ordering::Release, Ordering::Release, |old| Some(old + 1));\n    |                                               ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n-  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:38:46\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:44:46\n    |\n LL |     let _ = x.fetch_update(Ordering::AcqRel, Ordering::Release, |old| Some(old + 1));\n    |                                              ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n-  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:40:46\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:46:46\n    |\n LL |     let _ = x.fetch_update(Ordering::SeqCst, Ordering::Release, |old| Some(old + 1));\n    |                                              ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: `fetch_update`'s success ordering must be at least as strong as its failure ordering\n-  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:44:28\n-   |\n-LL |     let _ = x.fetch_update(Ordering::Release, Ordering::Acquire, |old| Some(old + 1));\n-   |                            ^^^^^^^^^^^^^^^^^  ----------------- `Acquire` failure ordering\n-   |                            |\n-   |                            `Release` success ordering\n-   |                            help: consider using `AcqRel` success ordering instead\n-\n-error: `fetch_update`'s success ordering must be at least as strong as its failure ordering\n-  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:46:28\n-   |\n-LL |     let _ = x.fetch_update(Ordering::Release, Ordering::SeqCst, |old| Some(old + 1));\n-   |                            ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n-   |                            |\n-   |                            `Release` success ordering\n-   |                            help: consider using `SeqCst` success ordering instead\n-\n-error: `fetch_update`'s success ordering must be at least as strong as its failure ordering\n-  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:50:28\n-   |\n-LL |     let _ = x.fetch_update(Ordering::Relaxed, Ordering::SeqCst, |old| Some(old + 1));\n-   |                            ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n-   |                            |\n-   |                            `Relaxed` success ordering\n-   |                            help: consider using `SeqCst` success ordering instead\n-\n-error: `fetch_update`'s success ordering must be at least as strong as its failure ordering\n-  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:52:28\n-   |\n-LL |     let _ = x.fetch_update(Ordering::Relaxed, Ordering::Acquire, |old| Some(old + 1));\n-   |                            ^^^^^^^^^^^^^^^^^  ----------------- `Acquire` failure ordering\n-   |                            |\n-   |                            `Relaxed` success ordering\n-   |                            help: consider using `Acquire` success ordering instead\n-\n-error: `fetch_update`'s success ordering must be at least as strong as its failure ordering\n-  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:56:28\n-   |\n-LL |     let _ = x.fetch_update(Ordering::Acquire, Ordering::SeqCst, |old| Some(old + 1));\n-   |                            ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n-   |                            |\n-   |                            `Acquire` success ordering\n-   |                            help: consider using `SeqCst` success ordering instead\n-\n-error: `fetch_update`'s success ordering must be at least as strong as its failure ordering\n-  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:58:28\n-   |\n-LL |     let _ = x.fetch_update(Ordering::AcqRel, Ordering::SeqCst, |old| Some(old + 1));\n-   |                            ^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n-   |                            |\n-   |                            `AcqRel` success ordering\n-   |                            help: consider using `SeqCst` success ordering instead\n-\n-error: aborting due to 16 previous errors\n+error: aborting due to 10 previous errors\n "}, {"sha": "b04a05fe40906ace4dce7bc37867e8f461fbb224", "filename": "src/test/ui/liveness/liveness-move-in-while.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -29,7 +29,7 @@ LL |         println!(\"{}\", y);\n LL |         while true { while true { while true { x = y; x.clone(); } } }\n    |                                                    - value moved here, in previous iteration of loop\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error; 3 warnings emitted\n "}, {"sha": "218b93c8e4f4517aa69c94fcc7f22dfcf15034ee", "filename": "src/test/ui/liveness/liveness-use-after-move.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -9,7 +9,7 @@ LL |\n LL |     println!(\"{}\", *x);\n    |                    ^^ value borrowed here after move\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "8edc0463fe57157ce095590f0c4efb10f77bc625", "filename": "src/test/ui/liveness/liveness-use-after-send.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-send.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -8,7 +8,7 @@ LL |     send(ch, message);\n LL |     println!(\"{}\", message);\n    |                    ^^^^^^^ value borrowed here after move\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "14e86aee059b2c6f4c6e62fef6071bb86871fd84", "filename": "src/test/ui/loops/loop-proper-liveness.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Floops%2Floop-proper-liveness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Floops%2Floop-proper-liveness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-proper-liveness.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -7,7 +7,7 @@ LL |     let x: i32;\n LL |     println!(\"{:?}\", x);\n    |                      ^ `x` used here but it isn't initialized\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "9ed4b3525e1d0f5660a311e6f971c6004161b01a", "filename": "src/test/ui/macro_backtrace/main.default.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.default.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -18,7 +18,7 @@ LL |     () => { syntax error };\n LL |     ping!();\n    |     ------- in this macro invocation\n    |\n-   = note: this error originates in the macro `pong` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `pong` which comes from the expansion of the macro `ping` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `error`\n   --> $DIR/main.rs:10:20\n@@ -29,7 +29,7 @@ LL |     () => { syntax error };\n LL |     deep!();\n    |     ------- in this macro invocation\n    |\n-   = note: this error originates in the macro `pong` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `pong` which comes from the expansion of the macro `deep` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "1a7578e6076eb98bcb386cb4bd22128e5419af7d", "filename": "src/test/ui/macros/format-parse-errors.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -4,7 +4,7 @@ error: requires at least a format string argument\n LL |     format!();\n    |     ^^^^^^^^^\n    |\n-   = note: this error originates in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected expression, found keyword `struct`\n   --> $DIR/format-parse-errors.rs:5:13"}, {"sha": "dadedfbe8f6714c35ef0bae117845f33dd4b3d74", "filename": "src/test/ui/macros/macro-backtrace-nested.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-nested.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -7,7 +7,7 @@ LL |     () => (fake)\n LL |     1 + call_nested_expr!();\n    |         ------------------- in this macro invocation\n    |\n-   = note: this error originates in the macro `nested_expr` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `nested_expr` which comes from the expansion of the macro `call_nested_expr` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `fake` in this scope\n   --> $DIR/macro-backtrace-nested.rs:5:12\n@@ -18,7 +18,7 @@ LL |     () => (fake)\n LL |     call_nested_expr_sum!();\n    |     ----------------------- in this macro invocation\n    |\n-   = note: this error originates in the macro `nested_expr` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `nested_expr` which comes from the expansion of the macro `call_nested_expr_sum` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b4e2883e83716660c0716513bae169198877cb33", "filename": "src/test/ui/macros/macro-backtrace-println.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-println.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-println.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-println.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -7,7 +7,7 @@ LL |     ($fmt:expr) => (myprint!(concat!($fmt, \"\\n\")));\n LL |     myprintln!(\"{}\");\n    |     ---------------- in this macro invocation\n    |\n-   = note: this error originates in the macro `concat` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `concat` which comes from the expansion of the macro `myprintln` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "fb8cab2794bc6952f6d7f23d63ae376ce005e5e9", "filename": "src/test/ui/macros/macro-local-data-key-priv.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fmacros%2Fmacro-local-data-key-priv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fmacros%2Fmacro-local-data-key-priv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-local-data-key-priv.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -9,7 +9,7 @@ note: the constant `baz` is defined here\n    |\n LL |     thread_local!(static baz: f64 = 0.0);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this error originates in the macro `$crate::__thread_local_inner` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::__thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "b8865112ed52e3b7774e146262dcc271e0f1c6e0", "filename": "src/test/ui/macros/restricted-shadowing-legacy.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-legacy.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -24,7 +24,7 @@ LL |         macro_rules! m { () => {} }\n ...\n LL | include!();\n    | ---------- in this macro invocation\n-   = note: this error originates in the macro `gen_gen_inner_invoc` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen_gen_inner_invoc` which comes from the expansion of the macro `include` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous\n   --> $DIR/restricted-shadowing-legacy.rs:139:42\n@@ -52,7 +52,7 @@ LL |         macro_rules! m { () => {} }\n ...\n LL | include!();\n    | ---------- in this macro invocation\n-   = note: this error originates in the macro `gen_invoc` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen_invoc` which comes from the expansion of the macro `include` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous\n   --> $DIR/restricted-shadowing-legacy.rs:148:9\n@@ -136,7 +136,7 @@ LL |         macro_rules! m { () => { Wrong } }\n ...\n LL | include!();\n    | ---------- in this macro invocation\n-   = note: this error originates in the macro `gen_gen_inner_invoc` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen_gen_inner_invoc` which comes from the expansion of the macro `include` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous\n   --> $DIR/restricted-shadowing-legacy.rs:218:42\n@@ -164,7 +164,7 @@ LL |         macro_rules! m { () => { Wrong } }\n ...\n LL | include!();\n    | ---------- in this macro invocation\n-   = note: this error originates in the macro `gen_invoc` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen_invoc` which comes from the expansion of the macro `include` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous\n   --> $DIR/restricted-shadowing-legacy.rs:232:9\n@@ -220,7 +220,7 @@ LL |             macro_rules! m { () => {} }\n ...\n LL | include!();\n    | ---------- in this macro invocation\n-   = note: this error originates in the macro `gen_invoc` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen_invoc` which comes from the expansion of the macro `include` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 8 previous errors\n "}, {"sha": "27665bfc31044f69d3384140a68f0822bfe39ae3", "filename": "src/test/ui/macros/restricted-shadowing-modern.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-modern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-modern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-modern.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -24,7 +24,7 @@ LL |         macro m() {}\n ...\n LL | include!();\n    | ---------- in this macro invocation\n-   = note: this error originates in the macro `gen_gen_inner_invoc` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen_gen_inner_invoc` which comes from the expansion of the macro `include` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous\n   --> $DIR/restricted-shadowing-modern.rs:147:33\n@@ -52,7 +52,7 @@ LL |         macro m() {}\n ...\n LL | include!();\n    | ---------- in this macro invocation\n-   = note: this error originates in the macro `gen_invoc` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen_invoc` which comes from the expansion of the macro `include` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous\n   --> $DIR/restricted-shadowing-modern.rs:156:13\n@@ -136,7 +136,7 @@ LL |         macro m() { Wrong }\n ...\n LL | include!();\n    | ---------- in this macro invocation\n-   = note: this error originates in the macro `gen_gen_inner_invoc` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen_gen_inner_invoc` which comes from the expansion of the macro `include` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous\n   --> $DIR/restricted-shadowing-modern.rs:233:33\n@@ -164,7 +164,7 @@ LL |         macro m() { Wrong }\n ...\n LL | include!();\n    | ---------- in this macro invocation\n-   = note: this error originates in the macro `gen_invoc` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen_invoc` which comes from the expansion of the macro `include` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 6 previous errors\n "}, {"sha": "2cc2e134bfdf658c73ac09732135a29537d070ed", "filename": "src/test/ui/macros/unreachable-format-args.edition_2015.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fmacros%2Funreachable-format-args.edition_2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fmacros%2Funreachable-format-args.edition_2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Funreachable-format-args.edition_2015.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -6,7 +6,7 @@ LL |     unreachable!(\"x is {x} and y is {y}\", y = 0);\n    |\n    = note: did you intend to capture a variable `x` from the surrounding scope?\n    = note: to avoid ambiguity, `format_args!` cannot capture variables when the format string is expanded from a macro\n-   = note: this error originates in the macro `$crate::concat` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::concat` which comes from the expansion of the macro `unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "34b7ea658671872aebd739f2699089ef36c10038", "filename": "src/test/ui/moves/moves-based-on-type-capture-clause-bad.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-capture-clause-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-capture-clause-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-capture-clause-bad.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -11,7 +11,7 @@ LL |     });\n LL |     println!(\"{}\", x);\n    |                    ^ value borrowed here after move\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "1035da54d8a775d98307ddf16e7c0a34d56c16dc", "filename": "src/test/ui/on-unimplemented/no-debug.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -6,7 +6,7 @@ LL |     println!(\"{:?} {:?}\", Foo, Bar);\n    |\n    = help: the trait `Debug` is not implemented for `Foo`\n    = note: add `#[derive(Debug)]` to `Foo` or manually `impl Debug for Foo`\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Foo` with `#[derive(Debug)]`\n    |\n LL | #[derive(Debug)]\n@@ -19,7 +19,7 @@ LL |     println!(\"{:?} {:?}\", Foo, Bar);\n    |                                ^^^ `Bar` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = help: the trait `Debug` is not implemented for `Bar`\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: `Foo` doesn't implement `std::fmt::Display`\n   --> $DIR/no-debug.rs:11:23\n@@ -29,7 +29,7 @@ LL |     println!(\"{} {}\", Foo, Bar);\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `Foo`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: `Bar` doesn't implement `std::fmt::Display`\n   --> $DIR/no-debug.rs:11:28\n@@ -39,7 +39,7 @@ LL |     println!(\"{} {}\", Foo, Bar);\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `Bar`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "9a2fffcced553c7fb8a8e189239499e341c1d36d", "filename": "src/test/ui/parser/macro/pub-item-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -24,7 +24,7 @@ LL |         static x: u32 = 0;\n ...\n LL |     pub_x!();\n    |     -------- in this macro invocation\n-   = note: this error originates in the macro `priv_x` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_x` which comes from the expansion of the macro `pub_x` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "eab4317ded85d7315455be53edc528297769e404", "filename": "src/test/ui/proc-macro/mixed-site-span.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -26,7 +26,7 @@ error[E0412]: cannot find type `ItemUse` in crate `$crate`\n LL | pass_dollar_crate!();\n    | ^^^^^^^^^^^^^^^^^^^^ not found in `$crate`\n    |\n-   = note: this error originates in the macro `proc_macro_rules` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `proc_macro_rules` which comes from the expansion of the macro `pass_dollar_crate` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "65ce24e55229684d72a7d7c01e20b1c9c41afbae", "filename": "src/test/ui/proc-macro/parent-source-spans.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -7,7 +7,7 @@ LL |     three!($a, $b);\n LL |     one!(\"hello\", \"world\");\n    |     ---------------------- in this macro invocation\n    |\n-   = note: this error originates in the macro `two` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `two` which comes from the expansion of the macro `one` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: second final: \"world\"\n   --> $DIR/parent-source-spans.rs:16:16\n@@ -18,7 +18,7 @@ LL |     three!($a, $b);\n LL |     one!(\"hello\", \"world\");\n    |     ---------------------- in this macro invocation\n    |\n-   = note: this error originates in the macro `two` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `two` which comes from the expansion of the macro `one` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: first parent: \"hello\"\n   --> $DIR/parent-source-spans.rs:10:5\n@@ -150,7 +150,7 @@ LL |     one!(\"hello\", \"world\");\n LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n    |     -- similarly named tuple variant `Ok` defined here\n    |\n-   = note: this error originates in the macro `parent_source_spans` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `parent_source_spans` which comes from the expansion of the macro `one` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `ok` in this scope\n   --> $DIR/parent-source-spans.rs:29:5\n@@ -166,7 +166,7 @@ LL |     two!(\"yay\", \"rust\");\n LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n    |     -- similarly named tuple variant `Ok` defined here\n    |\n-   = note: this error originates in the macro `parent_source_spans` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `parent_source_spans` which comes from the expansion of the macro `two` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `ok` in this scope\n   --> $DIR/parent-source-spans.rs:29:5\n@@ -182,7 +182,7 @@ LL |     three!(\"hip\", \"hop\");\n LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n    |     -- similarly named tuple variant `Ok` defined here\n    |\n-   = note: this error originates in the macro `parent_source_spans` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `parent_source_spans` which comes from the expansion of the macro `three` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 21 previous errors\n "}, {"sha": "256e68e8970e685974a83436fbd64952956f395c", "filename": "src/test/ui/proc-macro/weird-hygiene.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fproc-macro%2Fweird-hygiene.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fproc-macro%2Fweird-hygiene.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fweird-hygiene.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -7,7 +7,7 @@ LL |             Value = (stringify!($tokens + hidden_ident), 1).1\n LL |     other!(50);\n    |     ---------- in this macro invocation\n    |\n-   = note: this error originates in the macro `inner` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `inner` which comes from the expansion of the macro `other` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `hidden_ident` in this scope\n   --> $DIR/weird-hygiene.rs:34:13"}, {"sha": "d8b5a9e63643d8164d3b458fc38c0e3b6951eb4f", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-requires-debug.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -6,7 +6,7 @@ LL |     let _: NotDebug = dbg!(NotDebug);\n    |\n    = help: the trait `Debug` is not implemented for `NotDebug`\n    = note: add `#[derive(Debug)]` to `NotDebug` or manually `impl Debug for NotDebug`\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `dbg` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `NotDebug` with `#[derive(Debug)]`\n    |\n LL | #[derive(Debug)]"}, {"sha": "d53715937f7d841ed3be7007bfe747c91700d84f", "filename": "src/test/ui/suggestions/bound-suggestions.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fsuggestions%2Fbound-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fsuggestions%2Fbound-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fbound-suggestions.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -4,7 +4,7 @@ error[E0277]: `impl Sized` doesn't implement `Debug`\n LL |     println!(\"{:?}\", t);\n    |                      ^ `impl Sized` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting this bound\n    |\n LL | fn test_impl(t: impl Sized + std::fmt::Debug) {\n@@ -16,7 +16,7 @@ error[E0277]: `T` doesn't implement `Debug`\n LL |     println!(\"{:?}\", t);\n    |                      ^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `T`\n    |\n LL | fn test_no_bounds<T: std::fmt::Debug>(t: T) {\n@@ -28,7 +28,7 @@ error[E0277]: `T` doesn't implement `Debug`\n LL |     println!(\"{:?}\", t);\n    |                      ^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting this bound\n    |\n LL | fn test_one_bound<T: Sized + std::fmt::Debug>(t: T) {\n@@ -40,7 +40,7 @@ error[E0277]: `Y` doesn't implement `Debug`\n LL |     println!(\"{:?} {:?}\", x, y);\n    |                              ^ `Y` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting type parameter `Y`\n    |\n LL | fn test_no_bounds_where<X, Y>(x: X, y: Y) where X: std::fmt::Debug, Y: std::fmt::Debug {\n@@ -52,7 +52,7 @@ error[E0277]: `X` doesn't implement `Debug`\n LL |     println!(\"{:?}\", x);\n    |                      ^ `X` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting this bound\n    |\n LL | fn test_one_bound_where<X>(x: X) where X: Sized + std::fmt::Debug {\n@@ -64,7 +64,7 @@ error[E0277]: `X` doesn't implement `Debug`\n LL |     println!(\"{:?}\", x);\n    |                      ^ `X` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting this bound\n    |\n LL | fn test_many_bounds_where<X>(x: X) where X: Sized + std::fmt::Debug, X: Sized {"}, {"sha": "5dc4e64446fb279a108c543e53d3df62dd0f1da0", "filename": "src/test/ui/suggestions/dont-suggest-deref-inside-macro-issue-58298.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -6,7 +6,7 @@ LL | |         \"abc\"\n LL | |     };\n    | |_____^ expected `&str`, found struct `String`\n    |\n-   = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `format` which comes from the expansion of the macro `intrinsic_match` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "bbcc3693fff5a3ae477f465d203f8a693e6dfe4a", "filename": "src/test/ui/suggestions/issue-97760.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fsuggestions%2Fissue-97760.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fsuggestions%2Fissue-97760.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-97760.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -6,7 +6,7 @@ LL |         println!(\"{x}\");\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `<impl IntoIterator as IntoIterator>::Item`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: introduce a type parameter with a trait bound instead of using `impl Trait`\n    |\n LL ~ pub fn print_values<I: IntoIterator>(values: &I)"}, {"sha": "8359b36588e6bcc9684afb37ccf1455ef8632921", "filename": "src/test/ui/suggestions/path-display.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fsuggestions%2Fpath-display.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fsuggestions%2Fpath-display.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpath-display.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -6,7 +6,7 @@ LL |     println!(\"{}\", path);\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `Path`\n    = note: call `.display()` or `.to_string_lossy()` to safely print paths, as they may contain non-Unicode data\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: `PathBuf` doesn't implement `std::fmt::Display`\n   --> $DIR/path-display.rs:9:20\n@@ -16,7 +16,7 @@ LL |     println!(\"{}\", path);\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `PathBuf`\n    = note: call `.display()` or `.to_string_lossy()` to safely print paths, as they may contain non-Unicode data\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c9f2a3ed9f4bf9a19e528ef5d5661c94ba52fb2a", "filename": "src/test/ui/try-block/try-block-maybe-bad-lifetime.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-maybe-bad-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-maybe-bad-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-maybe-bad-lifetime.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -22,7 +22,7 @@ LL |         };\n LL |         println!(\"{}\", x);\n    |                        ^ value borrowed here after move\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0506]: cannot assign to `i` because it is borrowed\n   --> $DIR/try-block-maybe-bad-lifetime.rs:40:9"}, {"sha": "56323216effa4da9bb651d5c1d3af64e0b96d2a0", "filename": "src/test/ui/type-alias-impl-trait/future.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffuture.rs?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -0,0 +1,22 @@\n+#![feature(type_alias_impl_trait)]\n+\n+// edition:2021\n+// compile-flags: --crate-type=lib\n+\n+use std::future::Future;\n+\n+trait Bar {\n+    fn bar(&self);\n+}\n+\n+type FooFuture<B> = impl Future<Output = ()>;\n+\n+fn foo<B: Bar>(bar: B) -> FooFuture<B> {\n+    async move { bar.bar() }\n+    //~^ ERROR: the trait bound `B: Bar` is not satisfied\n+}\n+\n+pub fn mainish(ctx: &mut std::task::Context) {\n+    let boom: FooFuture<u32> = unsafe { core::mem::zeroed() };\n+    Box::pin(boom).as_mut().poll(ctx);\n+}"}, {"sha": "7e76c120a2566c1c6733da51182ed8b5c062f9b6", "filename": "src/test/ui/type-alias-impl-trait/future.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffuture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffuture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffuture.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the trait bound `B: Bar` is not satisfied\n+  --> $DIR/future.rs:15:5\n+   |\n+LL |     async move { bar.bar() }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `B`\n+   |\n+note: required by a bound in `foo`\n+  --> $DIR/future.rs:14:11\n+   |\n+LL | fn foo<B: Bar>(bar: B) -> FooFuture<B> {\n+   |           ^^^ required by this bound in `foo`\n+help: consider restricting type parameter `B`\n+   |\n+LL | type FooFuture<B: Bar> = impl Future<Output = ()>;\n+   |                 +++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "732af5c0b561f61e05ada9bc24472c1c70dcfe61", "filename": "src/test/ui/type-alias-impl-trait/nested.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -5,7 +5,7 @@ LL |     println!(\"{:?}\", bar());\n    |                      ^^^^^ `Bar` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = help: the trait `Debug` is not implemented for `Bar`\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "0f90fce3a42b9676d26b661d6340878035a7b8a9", "filename": "src/test/ui/type/ascription/issue-47666.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -10,7 +10,7 @@ LL |     let _ = Option:Some(vec![0, 1]);\n    |                   help: maybe write a path separator here: `::`\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: this error originates in the macro `$crate::__rust_force_expr` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::__rust_force_expr` which comes from the expansion of the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "445f14d65e3ce74475eb0aeff88fea7458006bc6", "filename": "src/test/ui/use/use-after-move-based-on-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-based-on-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-based-on-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-based-on-type.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -8,7 +8,7 @@ LL |     let _y = x;\n LL |     println!(\"{}\", x);\n    |                    ^ value borrowed here after move\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "4384e345e85c72cbb24ed3e3e68e1f4e8c237fb7", "filename": "src/test/ui/walk-struct-literal-with.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fwalk-struct-literal-with.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftest%2Fui%2Fwalk-struct-literal-with.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwalk-struct-literal-with.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -13,7 +13,7 @@ note: this function takes ownership of the receiver `self`, which moves `start`\n    |\n LL |     fn make_string_bar(mut self) -> Mine{\n    |                            ^^^^\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "9c91d935716d893b186f2529ab67261ee73084e3", "filename": "src/tools/clippy/tests/ui/diverging_sub_expression.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdiverging_sub_expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdiverging_sub_expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdiverging_sub_expression.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -36,7 +36,7 @@ error: sub-expression diverges\n LL |                 _ => true || panic!(\"boo\"),\n    |                              ^^^^^^^^^^^^^\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: sub-expression diverges\n   --> $DIR/diverging_sub_expression.rs:38:26"}, {"sha": "d637dbce5d79294a603e0d69abe2510e3f47b1cd", "filename": "src/tools/clippy/tests/ui/fallible_impl_from.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffallible_impl_from.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffallible_impl_from.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffallible_impl_from.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -38,7 +38,7 @@ note: potential failure(s)\n    |\n LL |             panic!();\n    |             ^^^^^^^^\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: consider implementing `TryFrom` instead\n   --> $DIR/fallible_impl_from.rs:35:1\n@@ -65,7 +65,7 @@ LL |         } else if s.parse::<u32>().unwrap() != 42 {\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |             panic!(\"{:?}\", s);\n    |             ^^^^^^^^^^^^^^^^^\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: consider implementing `TryFrom` instead\n   --> $DIR/fallible_impl_from.rs:53:1\n@@ -87,7 +87,7 @@ LL |         if s.parse::<u32>().ok().unwrap() != 42 {\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |             panic!(\"{:?}\", s);\n    |             ^^^^^^^^^^^^^^^^^\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "8d8c29f138587858b2bdf5ec63b9c1638c351201", "filename": "src/tools/clippy/tests/ui/issue-7447.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue-7447.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4603ac31b0655793a82f110f544dc1c6abc57bb7/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue-7447.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue-7447.stderr?ref=4603ac31b0655793a82f110f544dc1c6abc57bb7", "patch": "@@ -5,15 +5,15 @@ LL |     byte_view(panic!());\n    |               ^^^^^^^^\n    |\n    = note: `-D clippy::diverging-sub-expression` implied by `-D warnings`\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: sub-expression diverges\n   --> $DIR/issue-7447.rs:24:19\n    |\n LL |     group_entries(panic!());\n    |                   ^^^^^^^^\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}]}