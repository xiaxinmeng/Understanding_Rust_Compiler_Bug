{"sha": "d485e0d15a6d1f263657fbaa61dc31da780fea2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ODVlMGQxNWE2ZDFmMjYzNjU3ZmJhYTYxZGMzMWRhNzgwZmVhMmQ=", "commit": {"author": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-07-01T18:33:15Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-02T07:06:58Z"}, "message": "Allow any string expression to be used with fail.", "tree": {"sha": "8474e266a0cf7c757488fb0691adf09187dcbc97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8474e266a0cf7c757488fb0691adf09187dcbc97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d485e0d15a6d1f263657fbaa61dc31da780fea2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d485e0d15a6d1f263657fbaa61dc31da780fea2d", "html_url": "https://github.com/rust-lang/rust/commit/d485e0d15a6d1f263657fbaa61dc31da780fea2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d485e0d15a6d1f263657fbaa61dc31da780fea2d/comments", "author": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67c9ef9b306e6f45842a474e66d122c96139e02c", "url": "https://api.github.com/repos/rust-lang/rust/commits/67c9ef9b306e6f45842a474e66d122c96139e02c", "html_url": "https://github.com/rust-lang/rust/commit/67c9ef9b306e6f45842a474e66d122c96139e02c"}], "stats": {"total": 106, "additions": 80, "deletions": 26}, "files": [{"sha": "5acffb85472c9c9e30bc95ebfc3d4815b7e7a254", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d485e0d15a6d1f263657fbaa61dc31da780fea2d/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d485e0d15a6d1f263657fbaa61dc31da780fea2d/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=d485e0d15a6d1f263657fbaa61dc31da780fea2d", "patch": "@@ -275,7 +275,7 @@ tag expr_ {\n     expr_index(@expr, @expr);\n     expr_path(path);\n     expr_ext(path, vec[@expr], option::t[str], @expr);\n-    expr_fail(option::t[str]);\n+    expr_fail(option::t[@expr]);\n     expr_break;\n     expr_cont;\n     expr_ret(option::t[@expr]);"}, {"sha": "12a73e48cbf736f90636a36528c1a87d7e61b203", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d485e0d15a6d1f263657fbaa61dc31da780fea2d/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d485e0d15a6d1f263657fbaa61dc31da780fea2d/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=d485e0d15a6d1f263657fbaa61dc31da780fea2d", "patch": "@@ -841,12 +841,15 @@ fn parse_bottom_expr(&parser p) -> @ast::expr {\n         lo = ex_ext.span.lo;\n         ex = ex_ext.node;\n     } else if (eat_word(p, \"fail\")) {\n-        auto msg;\n         alt (p.peek()) {\n-            case (token::LIT_STR(?s)) { msg = some(p.get_str(s)); p.bump(); }\n-            case (_) { msg = none; }\n+            case (token::SEMI) { ex = ast::expr_fail(none) }\n+            case (token::RBRACE) { ex = ast::expr_fail(none) }\n+            case (_) {\n+                auto e = parse_expr(p);\n+                hi = e.span.hi;\n+                ex = ast::expr_fail(some(e));\n+            }\n         }\n-        ex = ast::expr_fail(msg);\n     } else if (eat_word(p, \"log\")) {\n         auto e = parse_expr(p);\n         ex = ast::expr_log(1, e);"}, {"sha": "36ab5ed51d399f201cc4e64b9b9ff55a5493449a", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d485e0d15a6d1f263657fbaa61dc31da780fea2d/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d485e0d15a6d1f263657fbaa61dc31da780fea2d/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=d485e0d15a6d1f263657fbaa61dc31da780fea2d", "patch": "@@ -6157,13 +6157,8 @@ fn trans_expr_out(&@block_ctxt cx, &@ast::expr e, out_method output) ->\n         case (ast::expr_ext(_, _, _, ?expanded)) {\n             ret trans_expr(cx, expanded);\n         }\n-        case (ast::expr_fail(?str)) {\n-            auto failmsg;\n-            alt (str) {\n-                case (some(?msg)) { failmsg = msg; }\n-                case (_) { failmsg = \"explicit failure\"; }\n-            }\n-            ret trans_fail(cx, some(e.span), failmsg);\n+        case (ast::expr_fail(?expr)) {\n+            ret trans_fail_expr(cx, some(e.span), expr);\n         }\n         case (ast::expr_log(?lvl, ?a)) { ret trans_log(lvl, cx, a); }\n         case (ast::expr_assert(?a)) {\n@@ -6366,9 +6361,40 @@ fn trans_check_expr(&@block_ctxt cx, &@ast::expr e, &str s) -> result {\n     ret rslt(next_cx, C_nil());\n }\n \n+fn trans_fail_expr(&@block_ctxt cx, &option::t[common::span] sp_opt,\n+                   &option::t[@ast::expr] fail_expr)\n+        -> result {\n+    alt (fail_expr) {\n+        case (some(?expr)) {\n+            auto tcx = cx.fcx.lcx.ccx.tcx;\n+            auto expr_res = trans_expr(cx, expr);\n+            auto e_ty = ty::expr_ty(tcx, expr);\n+\n+            if (ty::type_is_str(tcx, e_ty)) {\n+                auto elt = cx.build.GEP(expr_res.val,\n+                                        [C_int(0), C_int(abi::vec_elt_data)]);\n+                ret trans_fail_value(cx, sp_opt, elt);\n+            } else {\n+                cx.fcx.lcx.ccx.sess.span_fatal(expr.span,\n+                                               \"fail called with unsupported \\\n+                                               type \" + ty_to_str(tcx, e_ty));\n+            }\n+        }\n+        case (_) {\n+            ret trans_fail(cx, sp_opt, \"explicit failure\");\n+        }\n+    }\n+}\n+ \n fn trans_fail(&@block_ctxt cx, &option::t[common::span] sp_opt, &str fail_str)\n    -> result {\n     auto V_fail_str = C_cstr(cx.fcx.lcx.ccx, fail_str);\n+    ret trans_fail_value(cx, sp_opt, V_fail_str);\n+}\n+\n+fn trans_fail_value(&@block_ctxt cx, &option::t[common::span] sp_opt,\n+                    &ValueRef V_fail_str)\n+        -> result {\n     auto V_filename;\n     auto V_line;\n     alt (sp_opt) {\n@@ -6382,9 +6408,9 @@ fn trans_fail(&@block_ctxt cx, &option::t[common::span] sp_opt, &str fail_str)\n             V_line = 0;\n         }\n     }\n-    V_fail_str = cx.build.PointerCast(V_fail_str, T_ptr(T_i8()));\n+    auto V_str = cx.build.PointerCast(V_fail_str, T_ptr(T_i8()));\n     V_filename = cx.build.PointerCast(V_filename, T_ptr(T_i8()));\n-    auto args = [cx.fcx.lltaskptr, V_fail_str, V_filename, C_int(V_line)];\n+    auto args = [cx.fcx.lltaskptr, V_str, V_filename, C_int(V_line)];\n     cx.build.Call(cx.fcx.lcx.ccx.upcalls._fail, args);\n     cx.build.Unreachable();\n     ret rslt(cx, C_nil());"}, {"sha": "25d6fb98a92b40527fc72dd4ccf3f5abdba1e794", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d485e0d15a6d1f263657fbaa61dc31da780fea2d/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d485e0d15a6d1f263657fbaa61dc31da780fea2d/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=d485e0d15a6d1f263657fbaa61dc31da780fea2d", "patch": "@@ -529,11 +529,19 @@ fn find_pre_post_expr(&fn_ctxt fcx, @expr e) {\n             find_pre_post_expr(fcx, operator);\n             copy_pre_post(fcx.ccx, e.id, operator);\n         }\n-        case (expr_fail(_)) {\n+        case (expr_fail(?maybe_val)) {\n+            auto prestate;\n+            alt (maybe_val) {\n+                case (none) { prestate = empty_prestate(num_local_vars); }\n+                case (some(?fail_val)) {\n+                    find_pre_post_expr(fcx, fail_val);\n+                    prestate = expr_precond(fcx.ccx, fail_val);\n+                }\n+            }\n             set_pre_and_post(fcx.ccx, e.id,\n                              /* if execution continues after fail,\n                                 then everything is true! */\n-                             empty_prestate(num_local_vars),\n+                             prestate,\n                              false_postcond(num_local_vars));\n         }\n         case (expr_assert(?p)) {"}, {"sha": "4e4c3a961d7d54b4d36c9694095be1e63e1cd8b0", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d485e0d15a6d1f263657fbaa61dc31da780fea2d/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d485e0d15a6d1f263657fbaa61dc31da780fea2d/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=d485e0d15a6d1f263657fbaa61dc31da780fea2d", "patch": "@@ -543,12 +543,18 @@ fn find_pre_post_state_expr(&fn_ctxt fcx, &prestate pres, @expr e) -> bool {\n         case (expr_cast(?operand, _)) {\n             ret find_pre_post_state_sub(fcx, pres, operand, e.id, none);\n         }\n-        case (expr_fail(_)) {\n+        case (expr_fail(?maybe_fail_val)) {\n             ret set_prestate_ann(fcx.ccx, e.id, pres) |\n             /* if execution continues after fail, then everything is true!\n                woo! */\n                 set_poststate_ann(fcx.ccx, e.id,\n-                                  false_postcond(num_constrs));\n+                                  false_postcond(num_constrs)) |\n+                alt(maybe_fail_val) {\n+                    case (none) { false }\n+                    case (some(?fail_val)) {\n+                        find_pre_post_state_expr(fcx, pres, fail_val)\n+                    }\n+                }\n         }\n         case (expr_assert(?p)) {\n             ret find_pre_post_state_sub(fcx, pres, p, e.id, none);"}, {"sha": "3a06d0ddfa5eaa593b5a17cc4b326df4a907cb9c", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d485e0d15a6d1f263657fbaa61dc31da780fea2d/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d485e0d15a6d1f263657fbaa61dc31da780fea2d/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=d485e0d15a6d1f263657fbaa61dc31da780fea2d", "patch": "@@ -1622,7 +1622,13 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n             auto t = expr_ty(fcx.ccx.tcx, expanded);\n             write::ty_only_fixup(fcx, id, t);\n         }\n-        case (ast::expr_fail(_)) { write::bot_ty(fcx.ccx.tcx, id); }\n+        case (ast::expr_fail(?expr_opt)) {\n+            alt (expr_opt) {\n+                case (none) { /* do nothing */ }\n+                case (some(?e)) { check_expr(fcx, e); }\n+            }\n+            write::bot_ty(fcx.ccx.tcx, id);\n+        }\n         case (ast::expr_break) { write::bot_ty(fcx.ccx.tcx, id); }\n         case (ast::expr_cont) { write::bot_ty(fcx.ccx.tcx, id); }\n         case (ast::expr_ret(?expr_opt)) {"}, {"sha": "66db8fa07fe434f50525fbdd61800c87e116e72a", "filename": "src/comp/middle/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d485e0d15a6d1f263657fbaa61dc31da780fea2d/src%2Fcomp%2Fmiddle%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d485e0d15a6d1f263657fbaa61dc31da780fea2d/src%2Fcomp%2Fmiddle%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fwalk.rs?ref=d485e0d15a6d1f263657fbaa61dc31da780fea2d", "patch": "@@ -369,7 +369,7 @@ fn walk_expr(&ast_visitor v, @ast::expr e) {\n \n             walk_expr(v, expansion);\n         }\n-        case (ast::expr_fail(_)) { }\n+        case (ast::expr_fail(?eo)) { walk_expr_opt(v, eo); }\n         case (ast::expr_break) { }\n         case (ast::expr_cont) { }\n         case (ast::expr_ret(?eo)) { walk_expr_opt(v, eo); }"}, {"sha": "1a53c6758dc4bff7f7d1be07d374cf01ddab9129", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d485e0d15a6d1f263657fbaa61dc31da780fea2d/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d485e0d15a6d1f263657fbaa61dc31da780fea2d/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=d485e0d15a6d1f263657fbaa61dc31da780fea2d", "patch": "@@ -838,10 +838,10 @@ fn print_expr(&ps s, &@ast::expr expr) {\n             pclose(s);\n         }\n         case (ast::expr_path(?path)) { print_path(s, path); }\n-        case (ast::expr_fail(?str)) {\n+        case (ast::expr_fail(?maybe_fail_val)) {\n             word(s.s, \"fail\");\n-            alt (str) {\n-                case (some(?msg)) { word(s.s, #fmt(\" \\\"%s\\\"\", msg)); }\n+            alt (maybe_fail_val) {\n+                case (some(?expr)) { word(s.s, \" \"); print_expr(s, expr); }\n                 case (_) { }\n             }\n         }"}, {"sha": "793260210b088b706a93cd32b4ebc165f3b594b5", "filename": "src/test/run-fail/explicit-fail-msg.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d485e0d15a6d1f263657fbaa61dc31da780fea2d/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d485e0d15a6d1f263657fbaa61dc31da780fea2d/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs?ref=d485e0d15a6d1f263657fbaa61dc31da780fea2d", "patch": "@@ -1,5 +1,10 @@\n \n \n-\n-// error-pattern:woooo\n-fn main() { fail\"woooo\"; }\n\\ No newline at end of file\n+// error-pattern:wooooo\n+fn main() {\n+  auto a = 1;\n+  if (1 == 1) {\n+    a = 2;\n+  }\n+  fail \"woooo\" + \"o\";\n+}\n\\ No newline at end of file"}]}