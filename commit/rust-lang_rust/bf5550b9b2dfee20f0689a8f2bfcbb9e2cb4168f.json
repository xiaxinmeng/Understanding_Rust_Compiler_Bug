{"sha": "bf5550b9b2dfee20f0689a8f2bfcbb9e2cb4168f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNTU1MGI5YjJkZmVlMjBmMDY4OWE4ZjJiZmNiYjllMmNiNDE2OGY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-31T19:30:25Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-05T14:37:58Z"}, "message": "rustc: Convert `freevars` to a query\n\nThis removes a public mutable (but not actually used mutably) field from the\n`TyCtxt`, moving it over to a query to ensure that it's tracked over time.", "tree": {"sha": "fbc0dc01a6a9508b67eec187e52389f2e0bfa986", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbc0dc01a6a9508b67eec187e52389f2e0bfa986"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf5550b9b2dfee20f0689a8f2bfcbb9e2cb4168f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf5550b9b2dfee20f0689a8f2bfcbb9e2cb4168f", "html_url": "https://github.com/rust-lang/rust/commit/bf5550b9b2dfee20f0689a8f2bfcbb9e2cb4168f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf5550b9b2dfee20f0689a8f2bfcbb9e2cb4168f/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "490f34ac0cf6b8c62d835e2f7c55a3f911854a9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/490f34ac0cf6b8c62d835e2f7c55a3f911854a9c", "html_url": "https://github.com/rust-lang/rust/commit/490f34ac0cf6b8c62d835e2f7c55a3f911854a9c"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "52028ffe0c7acad40506b94a495aa90371eec1c1", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf5550b9b2dfee20f0689a8f2bfcbb9e2cb4168f/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5550b9b2dfee20f0689a8f2bfcbb9e2cb4168f/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=bf5550b9b2dfee20f0689a8f2bfcbb9e2cb4168f", "patch": "@@ -569,6 +569,8 @@ define_dep_nodes!( <'tcx>\n     [] MissingExternCrateItem(CrateNum),\n     [] UsedCrateSource(CrateNum),\n     [] PostorderCnums,\n+\n+    [] Freevars(HirId),\n );\n \n trait DepNodeParams<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> : fmt::Debug {"}, {"sha": "8ba42eacf3034fae2c48f95f5aa10c933c026aca", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bf5550b9b2dfee20f0689a8f2bfcbb9e2cb4168f/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5550b9b2dfee20f0689a8f2bfcbb9e2cb4168f/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=bf5550b9b2dfee20f0689a8f2bfcbb9e2cb4168f", "patch": "@@ -33,7 +33,6 @@ use traits;\n use ty::{self, Ty, TypeAndMut};\n use ty::{TyS, TypeVariants, Slice};\n use ty::{AdtKind, AdtDef, ClosureSubsts, GeneratorInterior, Region};\n-use hir::FreevarMap;\n use ty::{PolyFnSig, InferTy, ParamTy, ProjectionTy, ExistentialPredicate, Predicate};\n use ty::RegionKind;\n use ty::{TyVar, TyVid, IntVar, IntVid, FloatVar, FloatVid};\n@@ -837,7 +836,7 @@ pub struct GlobalCtxt<'tcx> {\n     // Records the free variables refrenced by every closure\n     // expression. Do not track deps for this, just recompute it from\n     // scratch every time.\n-    pub freevars: RefCell<FreevarMap>,\n+    freevars: FxHashMap<HirId, Rc<Vec<hir::Freevar>>>,\n \n     pub maybe_unused_trait_imports: NodeSet,\n \n@@ -1066,11 +1065,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             export_map: resolutions.export_map.into_iter().map(|(k, v)| {\n                 (hir.node_to_hir_id(k), Rc::new(v))\n             }).collect(),\n+            freevars: resolutions.freevars.into_iter().map(|(k, v)| {\n+                (hir.node_to_hir_id(k), Rc::new(v))\n+            }).collect(),\n             hir,\n             def_path_hash_to_def_id,\n             maps: maps::Maps::new(providers),\n             mir_passes,\n-            freevars: RefCell::new(resolutions.freevars),\n             maybe_unused_trait_imports: resolutions.maybe_unused_trait_imports,\n             maybe_unused_extern_crates: resolutions.maybe_unused_extern_crates,\n             rcache: RefCell::new(FxHashMap()),\n@@ -2018,4 +2019,5 @@ pub fn provide(providers: &mut ty::maps::Providers) {\n         assert_eq!(id, LOCAL_CRATE);\n         Rc::new(middle::lang_items::collect(tcx))\n     };\n+    providers.freevars = |tcx, id| tcx.gcx.freevars.get(&id).cloned();\n }"}, {"sha": "b1ff59e7e497cb0068826dcf2ea8d16bbef87d3b", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bf5550b9b2dfee20f0689a8f2bfcbb9e2cb4168f/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5550b9b2dfee20f0689a8f2bfcbb9e2cb4168f/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=bf5550b9b2dfee20f0689a8f2bfcbb9e2cb4168f", "patch": "@@ -730,6 +730,12 @@ impl<'tcx> QueryDescription for queries::postorder_cnums<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::freevars<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: HirId) -> String {\n+        format!(\"looking up free variables for a node\")\n+    }\n+}\n+\n // If enabled, send a message to the profile-queries thread\n macro_rules! profq_msg {\n     ($tcx:expr, $msg:expr) => {\n@@ -1345,6 +1351,8 @@ define_maps! { <'tcx>\n     [] missing_extern_crate_item: MissingExternCrateItem(CrateNum) -> bool,\n     [] used_crate_source: UsedCrateSource(CrateNum) -> Rc<CrateSource>,\n     [] postorder_cnums: postorder_cnums_node(CrateNum) -> Rc<Vec<CrateNum>>,\n+\n+    [] freevars: Freevars(HirId) -> Option<Rc<Vec<hir::Freevar>>>,\n }\n \n fn type_param_predicates<'tcx>((item_id, param_id): (DefId, DefId)) -> DepConstructor<'tcx> {"}, {"sha": "d4c352f00a7756748688a6da8c4cc0629303e1b7", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bf5550b9b2dfee20f0689a8f2bfcbb9e2cb4168f/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5550b9b2dfee20f0689a8f2bfcbb9e2cb4168f/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=bf5550b9b2dfee20f0689a8f2bfcbb9e2cb4168f", "patch": "@@ -2340,9 +2340,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn with_freevars<T, F>(self, fid: NodeId, f: F) -> T where\n         F: FnOnce(&[hir::Freevar]) -> T,\n     {\n-        match self.freevars.borrow().get(&fid) {\n+        let hir_id = self.hir.node_to_hir_id(fid);\n+        match self.freevars(hir_id) {\n             None => f(&[]),\n-            Some(d) => f(&d[..])\n+            Some(d) => f(&d),\n         }\n     }\n }"}]}